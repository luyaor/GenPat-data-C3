{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01afb39c76b64df591685e4205a27666", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f65bda3eeeee1ec0e040583f63ce14d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-        if (m_stronglyConnectedSets == null) {", "-            m_orderedVertices = new LinkedList<VertexData<V>>();", "-            m_stronglyConnectedSets = new Vector<Set<V>>();", "+        if (stronglyConnectedSets == null) {", "+            orderedVertices = new LinkedList<VertexData<V>>();", "+            stronglyConnectedSets = new Vector<Set<V>>();", "-                m_vertexToVertexData.values().iterator();", "+                vertexToVertexData.values().iterator();", "-                if (!data.m_discovered) {", "-                    dfsVisit(m_graph, data, null);", "+                if (!data.discovered) {", "+                    dfsVisit(graph, data, null);", "-                new DefaultDirectedGraph<V, E>(m_graph.getEdgeFactory());", "-            Graphs.addGraphReversed(inverseGraph, m_graph);", "+                new DefaultDirectedGraph<V, E>(graph.getEdgeFactory());", "+            Graphs.addGraphReversed(inverseGraph, graph);", "-            iter = m_orderedVertices.iterator();", "+            iter = orderedVertices.iterator();", "-                if (!data.m_discovered) {", "+                if (!data.discovered) {", "-                    m_stronglyConnectedSets.add(set);", "+                    stronglyConnectedSets.add(set);", "-            m_orderedVertices = null;", "-            m_vertexToVertexData = null;", "+            orderedVertices = null;", "+            vertexToVertexData = null;", "-        return m_stronglyConnectedSets;", "+        return stronglyConnectedSets;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea421eba9b404babf40307956ef72954", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/generate/WheelGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void generateGraph(         Graph target,         final VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         final VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        Graph target,", "-        final VertexFactory vertexFactory,", "-        Map resultMap)", "+        Graph<V,E> target,", "+        final VertexFactory<V> vertexFactory,", "+        Map<String,V> resultMap)", "-        final Collection rim = new ArrayList();", "-        VertexFactory rimVertexFactory =", "-            new VertexFactory() {", "-                public Object createVertex()", "+        final Collection<V> rim = new ArrayList<V>();", "+        VertexFactory<V> rimVertexFactory =", "+            new VertexFactory<V>() {", "+                public V createVertex()", "-                    Object vertex = vertexFactory.createVertex();", "+                    V vertex = vertexFactory.createVertex();", "-        RingGraphGenerator ringGenerator = new RingGraphGenerator(m_size - 1);", "+        RingGraphGenerator<V,E> ringGenerator = new RingGraphGenerator<V,E>(m_size - 1);", "-        Object hubVertex = vertexFactory.createVertex();", "+        V hubVertex = vertexFactory.createVertex();", "-        Iterator rimIter = rim.iterator();", "-", "-        while (rimIter.hasNext()) {", "-            Object rimVertex = rimIter.next();", "-", "-            if (m_inwardSpokes) {", "-                target.addEdge(rimVertex, hubVertex);", "-            } else {", "-                target.addEdge(hubVertex, rimVertex);", "-            }", "+        for( V rimVertex : rim ) {", "+        \tif (m_inwardSpokes) {", "+        \t\ttarget.addEdge(rimVertex, hubVertex);", "+        \t} else {", "+        \t\ttarget.addEdge(hubVertex, rimVertex);", "+        \t}"]}]}
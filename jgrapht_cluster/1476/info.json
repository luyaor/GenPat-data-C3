{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df4aa94f868c4a3c752b54559664f49d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c4bf49027c6c9fbc829c4982ed6a63", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/heap/BinaryHeap.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void percolateDown(int pos)", "signatureAfterChange": "       private void percolateDown( int pos )", "diff": ["-    private void percolateDown(int pos) {", "-        Elem h = (Elem)_elems.get(pos);", "-        while (2 * pos + 1 < size()) {", "-            int i = 1;", "-            Elem c = (Elem)_elems.get(2 * pos + i);", "-            if (2 * pos + 2 < size() &&", "-                isSmaller(((Elem)_elems.get(2 * pos + 2)).x, c.x)) {", "-                i++;", "-                c = (Elem)_elems.get(2 * pos + i);", "-            }", "-            if (isSmaller(h.x, c.x)) break;", "-            _elems.set(pos, c);", "-            c.pos = pos;", "-            pos = 2 * pos + i;", "-        }", "-        _elems.set(pos, h);", "-        h.pos = pos;", "-    }", "+", "+    private void percolateDown( int pos ) {", "+        Elem h = (Elem) _elems.get( pos );", "+", "+        while( 2 * pos + 1 < size(  ) ) {", "+            int  i = 1;", "+            Elem c = (Elem) _elems.get( 2 * pos + i );", "+", "+            if( 2 * pos + 2 < size(  )", "+                    && isSmaller( ( (Elem) _elems.get( 2 * pos + 2 ) ).x, c.x ) ) {", "+                i++;", "+                c = (Elem) _elems.get( 2 * pos + i );", "+            }", "+", "+            if( isSmaller( h.x, c.x ) ) {", "+                break;", "+            }", "+", "+            _elems.set( pos, c );", "+            c.pos     = pos;", "+            pos       = 2 * pos + i;", "+        }", "+", "+        _elems.set( pos, h );", "+        h.pos = pos;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b600cbf8992f1c6ee74dff25bc920589", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/heap/FibonacciHeap.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void consolidate()", "signatureAfterChange": "       private void consolidate(  )", "diff": ["-", "-    private void consolidate() {", "-", "-        int l = (int)Math.round(Math.log(_size) / Math.log(1.5) + 0.5);", "-        Elem[] a = new Elem[l];", "-        Elem x, y, h;", "-        int i;", "+    private void consolidate(  ) {", "+        int    l =", "+            (int) Math.round( Math.log( _size ) / Math.log( 1.5 ) + 0.5 );", "+        Elem[] a = new Elem[ l ];", "+        Elem   x;", "+        Elem   y;", "+        Elem   h;", "+        int    i;", "-            removeFromRoot(x);", "-            while (a[x.rank] != null) {", "-                y = a[x.rank];", "-                a[x.rank] = null;", "-                if (isSmaller(y.x, x.x)) {", "-                    h = x;", "-                    x = y;", "-                    y = h;", "+            removeFromRoot( x );", "+", "+            while( a[ x.rank ] != null ) {", "+                y               = a[ x.rank ];", "+                a[ x.rank ]     = null;", "+", "+                if( isSmaller( y.x, x.x ) ) {", "+                    h     = x;", "+                    x     = y;", "+                    y     = h;", "-                x.addChild(y);", "+", "+                x.addChild( y );", "-            a[x.rank] = x;", "-        } while (_min != null);", "-        for (i = 0; i < l; i++) {", "-            if (a[i] != null) {", "-                addToRoot(a[i]);", "+", "+            a[ x.rank ] = x;", "+        }", "+         while( _min != null );", "+", "+        for( i = 0; i < l; i++ ) {", "+            if( a[ i ] != null ) {", "+                addToRoot( a[ i ] );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baae8e7dd011b9a45fe82a244406d352", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "5f0104ac684044809cb315b79d4a999c5e1da731", "commitAfterChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void breadthFirstSearch()", "signatureAfterChange": "      private void breadthFirstSearch()", "diff": ["+            nodes.get(i).lastArcs = null;", "+", "+", "+", "+        nodes.get(currentSink).flowAmount = 0.0;", "+", "+        boolean seenSink = false;", "+", "+", "-                    if (!nodes.get(currentArc.head).visited) {", "-                        nodes.get(currentArc.head).visited = true;", "-                        nodes.get(currentArc.head).flowAmount =", "+", "+                    Node currentArcHead = nodes.get(currentArc.head);", "+", "+                    if (currentArc.head == currentSink) {", "+", "+                        currentArcHead.visited = true;", "+", "+                        if (currentArcHead.lastArcs == null)", "+                            currentArcHead.lastArcs = new ArrayList<Arc>();", "+", "+                        currentArcHead.lastArcs.add(currentArc);", "+", "+                        currentArcHead.flowAmount +=", "-                        nodes.get(currentArc.head).lastArc = currentArc;", "-                        queue.add(currentArc.head);", "+", "+                        seenSink = true;", "+", "+                    } else if (!currentArcHead.visited) {", "+", "+                        currentArcHead.visited = true;", "+", "+                        currentArcHead.flowAmount =", "+                            Math.min(", "+                                nodes.get(currentNode).flowAmount,", "+                                currentArc.capacity - currentArc.flow);", "+", "+                        currentArcHead.lastArcs = Collections.singletonList(currentArc);", "+", "+                        if (!seenSink)", "+                            queue.add(currentArc.head);"]}]}
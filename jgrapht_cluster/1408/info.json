{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e43889c8b113ac3ab630525ea10165d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3839c1afdafdef763dc1664731aa1124", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "92515499ec252d47a5d2a61121b91fd95f3bb5b8", "commitAfterChange": "47f303bdc02e63a084eea6bbef2195eb7a2ef15c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private V findPath(V root)", "signatureAfterChange": "      private V findPath(UndirectedGraph<V, E> g, V root)", "diff": ["-    private V findPath(V root)", "+    private V findPath(UndirectedGraph<V, E> g, V root)", "-        for (V i : graph.vertexSet()) {", "+        for (V i : g.vertexSet()) {", "-            for (E e : graph.edgesOf(v)) {", "-                V to = graph.getEdgeSource(e);", "-                if (to == v)", "-                    to = graph.getEdgeTarget(e);", "+            for (V to : g.vertexSet()) {", "+                if (!g.containsEdge(v, to)) {", "+                    continue;", "+                }", "+", "-                    V curbase = lca(graph, v, to);", "+                    V curbase = lca(g, v, to);", "-                    markPath(v, curbase, to);", "-                    markPath(to, curbase, v);", "+                    markPath(g, v, curbase, to);", "+                    markPath(g, to, curbase, v);", "-                    for (V i : graph.vertexSet()) {", "+                    for (V i : g.vertexSet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4ad0154df5cca03ba578e67cecdac7d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphSquare.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphSquare(final Graph g, final boolean createLoops)", "signatureAfterChange": "     public GraphSquare(final Graph<V,E> g, final boolean createLoops)", "diff": ["-    public GraphSquare(final Graph g, final boolean createLoops)", "+    public GraphSquare(final Graph<V,E> g, final boolean createLoops)", "-            ((ListenableGraph) g).addGraphListener(new GraphListener() {", "-                    public void edgeAdded(GraphEdgeChangeEvent e)", "+            ((ListenableGraph<V,E>) g).addGraphListener(new GraphListener<V,E>() {", "+                    public void edgeAdded(GraphEdgeChangeEvent<V,E> e)", "-                        Edge edge = e.getEdge();", "+                        E edge = e.getEdge();", "-                    public void edgeRemoved(GraphEdgeChangeEvent e)", "+                    public void edgeRemoved(GraphEdgeChangeEvent<V,E> e)", "-                    public void vertexAdded(GraphVertexChangeEvent e)", "+                    public void vertexAdded(GraphVertexChangeEvent<V> e)", "-                    public void vertexRemoved(GraphVertexChangeEvent e)", "+                    public void vertexRemoved(GraphVertexChangeEvent<V> e)"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51441e847756717cdcf93b4fd1b871bc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e42b755d8e655175d2c316873547c2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmTestBase.java", "commitBeforeChange": "16877ce18b6445d7238b8a78693c87c95971617b", "commitAfterChange": "024fc7b86a9ced21b7444077ac5895f2b6a50bf9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "signatureAfterChange": "      private void runTest(         int [] tails,         int [] heads,         double [] capacities,         int [] sources,         int [] sinks,         double [] expectedResults)", "diff": ["+", "-            MaximumFlowAlgorithm.MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = solver.buildMaximumFlow(sources[i], sinks[i]);", "+            verify(sources[i], sinks[i], expectedResults[i], network, solver.buildMaximumFlow(sources[i], sinks[i]));", "+        }", "+    }", "-            assertEquals(", "-                expectedResults[i],", "-                maxFlow.getValue(),", "-                EdmondsKarpMaximumFlow.DEFAULT_EPSILON);", "-            Double flowValue = maxFlow.getValue();", "-            Map<DefaultWeightedEdge, Double> flow = maxFlow.getFlow();", "-            for (DefaultWeightedEdge e : network.edgeSet()) {", "-                assertTrue(flow.containsKey(e));", "-", "-            for (DefaultWeightedEdge e : flow.keySet()) {", "-                assertTrue(network.containsEdge(e));", "-                assertTrue(", "-                    flow.get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);", "-                assertTrue(", "-                    flow.get(e)", "-                        <= (network.getEdgeWeight(e)", "-                        + EdmondsKarpMaximumFlow.DEFAULT_EPSILON));", "-", "-            for (Integer v : network.vertexSet()) {", "-                double balance = 0.0;", "-                for (DefaultWeightedEdge e : network.outgoingEdgesOf(v)) {", "-                    balance -= flow.get(e);", "-                }", "-                for (DefaultWeightedEdge e : network.incomingEdgesOf(v)) {", "-                    balance += flow.get(e);", "-                }", "-                if (v.equals(sources[i])) {", "-                    assertEquals(", "-                        -flowValue,", "-                        balance,", "-                        MaximumFlowAlgorithmBase.DEFAULT_EPSILON);", "-                } else if (v.equals(sinks[i])) {", "-                    assertEquals(", "-                        flowValue,", "-                        balance,", "-                        MaximumFlowAlgorithmBase.DEFAULT_EPSILON);", "-                } else {", "-                    assertEquals(", "-                        0.0,", "-                        balance,", "-                        MaximumFlowAlgorithmBase.DEFAULT_EPSILON);", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e3eb7641699e01df8ff21cec7636c1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "22aa7e82f42fce210220bdbc283c0138f6f5ab70", "commitAfterChange": "0f3a10c6ea5258c0add31f2c1eb0ac64b015315a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void consolidate()", "signatureAfterChange": "      protected void consolidate()", "diff": ["-     */", "-        int arraySize = nNodes + 1;", "+        int arraySize =", "+            ((int) Math.floor(Math.log(nNodes) * oneOverLogPhi)) + 1;", "+", "-            while (array.get(d) != null) {", "-                // There is, make one of the nodes a child of the other.", "+            for (;;) {", "+                if (y == null) {", "+                    // Nope.", "+                    break;", "+                }", "+                // There is, make one of the nodes a child of the other.", "-            if (array.get(i) != null) {", "-                // We've got a live one, add it to root list.", "-                if (minNode != null) {", "-                    // First remove node from root list.", "-                    array.get(i).left.right = array.get(i).right;", "-                    array.get(i).right.left = array.get(i).left;", "+            FibonacciHeapNode<T> y = array.get(i);", "+            if (y == null) {", "+                continue;", "+            }", "+            // We've got a live one, add it to root list.", "+            if (minNode != null) {", "+                // First remove node from root list.", "+                y.left.right = y.right;", "+                y.right.left = y.left;", "-                    // Now add to root list, again.", "-                    array.get(i).left = minNode;", "-                    array.get(i).right = minNode.right;", "-                    minNode.right = array.get(i);", "-                    array.get(i).right.left = array.get(i);", "+                // Now add to root list, again.", "+                y.left = minNode;", "+                y.right = minNode.right;", "+                minNode.right = y;", "+                y.right.left = y;", "-                    // Check if this is a new min.", "-                    if (array.get(i).key < minNode.key) {", "-                        minNode = array.get(i);", "-                    }", "-                } else {", "-                    minNode = array.get(i);", "+                // Check if this is a new min.", "+                if (y.key < minNode.key) {", "+                    minNode = y;", "+            } else {", "+                minNode = y;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf0a98ea648c857eba59a694c9c749d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/FloydWarshallShortestPathsTest.java", "commitBeforeChange": "c10692c8825bd6a23a80be695fc74f32cb5058c3", "commitAfterChange": "c164d5ff2c90e3264f68d1cabaf47b148cefd48c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testCompareWithDijkstra()", "signatureAfterChange": "      public void testCompareWithDijkstra()", "diff": ["-            SimpleDirectedGraph<Integer, DefaultWeightedEdge> directed =", "-                new SimpleDirectedGraph<Integer, DefaultWeightedEdge>(", "-                    DefaultWeightedEdge.class);", "-", "+            //Generate directed graph", "+            SimpleDirectedGraph<Integer, DefaultWeightedEdge> directed =new SimpleDirectedGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-            FloydWarshallShortestPaths<Integer, DefaultWeightedEdge> fw =", "-                new FloydWarshallShortestPaths<Integer, DefaultWeightedEdge>(", "-                    directed);", "+            FloydWarshallShortestPaths<Integer, DefaultWeightedEdge> fw =new FloydWarshallShortestPaths<Integer, DefaultWeightedEdge>(directed);", "-                    assertTrue(", "-                        (Math.abs(dijSp - fwSp) < .01)", "-                        || (Double.isInfinite(fwSp)", "-                            && Double.isInfinite(dijSp)));", "+                    assertTrue( (Math.abs(dijSp - fwSp) < .01) || (Double.isInfinite(fwSp) && Double.isInfinite(dijSp)));", "+                    GraphPath<Integer, DefaultWeightedEdge> path=fw.getShortestPath(v1, v2);", "+                    if(path != null)", "+                        this.verifyPath(directed, path, fw.shortestDistance(v1, v2));", "-            SimpleGraph<Integer, DefaultWeightedEdge> undirected =", "-                new SimpleGraph<Integer, DefaultWeightedEdge>(", "-                    DefaultWeightedEdge.class);", "-", "+            //Generate Undirected graph", "+            SimpleGraph<Integer, DefaultWeightedEdge> undirected =new SimpleGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-                    assertTrue(", "-                        (Math.abs(dijSp - fwSp) < .01)", "-                        || (Double.isInfinite(fwSp)", "-                            && Double.isInfinite(dijSp)));", "+                    assertTrue((Math.abs(dijSp - fwSp) < .01) || (Double.isInfinite(fwSp) && Double.isInfinite(dijSp)));", "+                    GraphPath<Integer, DefaultWeightedEdge> path=fw.getShortestPath(v1, v2);", "+                    if(path != null)", "+                        this.verifyPath(undirected, path, fw.shortestDistance(v1, v2));", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ec90bb003bab6f5ea5a887764e49b33", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4382a7aecfec5dea78395b2ec4468a3e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/GmlExporter.java", "commitBeforeChange": "e601cce570393b1ad5c879b58ec483ca42a9532b", "commitAfterChange": "df9e52ba034eea98b94d0b6e1470ce50769bc1ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void export( Writer output, Graph<V,E> g, boolean directed )", "signatureAfterChange": "      private void export(Writer output, Graph<V, E> g, boolean directed)", "diff": ["-    private void export( Writer output, Graph<V,E> g, boolean directed )", "+    private void export(Writer output, Graph<V, E> g, boolean directed)", "-\tPrintWriter out = new PrintWriter(output);", "+        PrintWriter out = new PrintWriter(output);", "-\texportHeader( out );", "-\tout.println( \"graph\" );", "-\tout.println( \"[\" );", "-\tout.println( tab1 + \"label\" + delim + quoted(\"\") );", "-\tif ( directed )", "-\t    out.println( tab1 + \"directed\" + delim + \"1\" );", "-\telse ", "-\t    out.println( tab1 + \"directed\" + delim + \"0\" );", "-\texportVertices( out, nameProvider, g );", "-\texportEdges( out, nameProvider, g );", "-\tout.println( \"]\" );", "+        exportHeader(out);", "+        out.println(\"graph\");", "+        out.println(\"[\");", "+        out.println(tab1 + \"label\" + delim + quoted(\"\"));", "+        if (directed) {", "+            out.println(tab1 + \"directed\" + delim + \"1\");", "+        } else {", "+            out.println(tab1 + \"directed\" + delim + \"0\");", "+        }", "+        exportVertices(out, nameProvider, g);", "+        exportEdges(out, nameProvider, g);", "+        out.println(\"]\");", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7376529c823fd7385e1ba50d972f3a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void init(Set vertexSet, Set edgeSet)", "signatureAfterChange": "      private void init(Set<V> vertexSet, Set<E> edgeSet)", "diff": ["-    private void init(Set vertexSet, Set edgeSet)", "+    private void init(Set<V> vertexSet, Set<E> edgeSet)", "-        this.mapVertexToOrder = new HashMap(vertexSet.size());", "+        this.mapVertexToOrder = new HashMap<V, Integer>(vertexSet.size());", "-        for (Iterator iter = vertexSet.iterator(); iter.hasNext();) {", "-            Object vertex = iter.next();", "+        for (V vertex : vertexSet) {", "-        this.labelsEdgesSet = new HashSet(edgeSet.size());", "-        for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-            Edge edge = (Edge) iter.next();", "-", "-            Object sourceVertex = edge.getSource();", "-            Integer sourceOrder = (Integer) mapVertexToOrder.get(sourceVertex);", "+        this.labelsEdgesSet = new HashSet<LabelsEdge>(edgeSet.size());", "+        for (E edge : edgeSet) {", "+            V sourceVertex = edge.getSource();", "+            Integer sourceOrder = mapVertexToOrder.get(sourceVertex);", "-                ((Integer) (mapVertexToOrder.get(edge.getTarget())))", "+                (mapVertexToOrder.get(edge.getTarget()))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16326a335acb00173dcfeb6b7940a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static void addGraphReversed(         DirectedGraph destination,         DirectedGraph source)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\" \tpublic static <V, E extends DirEdge<V>> void addGraphReversed(         DirectedGraph<V,E> destination,         DirectedGraph<V,E> source)", "diff": ["-    public static void addGraphReversed(", "-        DirectedGraph destination,", "-        DirectedGraph source)", "+    @SuppressWarnings(\"unchecked\")\t// FIXME hb 28-nov-05: See below", "+\tpublic static <V, E extends DirEdge<V>> void addGraphReversed(", "+        DirectedGraph<V,E> destination,", "+        DirectedGraph<V,E> source)", "-        Iterator edgesIter = source.edgeSet().iterator();", "-", "-        while (edgesIter.hasNext()) {", "-            DirectedEdge edge = (DirectedEdge) edgesIter.next();", "-            DirectedEdge reversedEdge =", "-                new DirectedEdge(edge.getTarget(), edge.getSource());", "-            destination.addEdge(reversedEdge);", "+        for (E edge : source.edgeSet()) {", "+        \t//FIXME hb 26-Nov-05: Use the edge factory of src, dst, or passed as a parameter to create edges", "+        \tE reversedEdge =", "+        \t\t(E)new DirectedEdge<V>(edge.getTarget(), edge.getSource());", "+        \tdestination.addEdge(reversedEdge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55d5a4a92f4adfc7ddeb30683a2883f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/EquivalenceIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected CollectionPermutationIter createPermutationIterator(         Set vertexSet1,         Set vertexSet2)", "signatureAfterChange": "     protected CollectionPermutationIter<V> createPermutationIterator(         Set<V> vertexSet1,         Set<V> vertexSet2)", "diff": ["-    protected CollectionPermutationIter createPermutationIterator(", "-        Set vertexSet1,", "-        Set vertexSet2)", "+    protected CollectionPermutationIter<V> createPermutationIterator(", "+        Set<V> vertexSet1,", "+        Set<V> vertexSet2)", "-                vertexSet1.toArray(),", "+                vertexSet1,", "-                vertexSet2.toArray(),", "+                vertexSet2,", "-        // reorder set1 (source) , so when we work with the flat array of the", "+        // reorder set1 (source), so when we work with the flat array of the", "-        Object [] reorderingVertexSet1Temp = new Object [vertexSet1.size()];", "+        ", "+        // TODO hb 060208: REVIEW: Should the array be changed to an arrayList?", "+        V [] reorderingVertexSet1Temp = (V[])new Object [vertexSet1.size()];", "-        CollectionPermutationIter vertexPermIter =", "-            new CollectionPermutationIter(flatVertexArray, arrayPermIter);", "+        CollectionPermutationIter<V> vertexPermIter =", "+            new CollectionPermutationIter<V>(flatVertexArray, arrayPermIter);"]}]}
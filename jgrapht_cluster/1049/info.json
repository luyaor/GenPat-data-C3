{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f834650f018ea81e28afcc9d23fe735", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119ed9066a6b93f7aff9c079de398067", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/CliqueMinimalSeparatorDecomposition.java", "commitBeforeChange": "b338dc522beb4643906288a4c91571a7ab1b1795", "commitAfterChange": "8b53e2969b312c1e6f35e85a43bc0437bf413b79", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     private V getMaxLabelVertex(Map<V, Integer> vertexLabels)", "signatureAfterChange": "     private V getMaxLabelVertex(Map<V, Integer> vertexLabels)", "diff": ["-     */\r", "-    private V getMaxLabelVertex(Map<V, Integer> vertexLabels)\r", "-    {\r", "-        Iterator<Entry<V, Integer>> iterator = vertexLabels.entrySet()\r", "-            .iterator();\r", "-        Entry<V, Integer> max = iterator.next();\r", "-        while (iterator.hasNext()) {\r", "-            Entry<V, Integer> e = iterator.next();\r", "-            if (e.getValue() > max.getValue())\r", "-                max = e;\r", "-        }\r", "-        return max.getKey();\r", "-    }\r", "+     */", "+    private V getMaxLabelVertex(Map<V, Integer> vertexLabels)", "+    {", "+        Iterator<Entry<V, Integer>> iterator =", "+            vertexLabels.entrySet().iterator();", "+        Entry<V, Integer> max = iterator.next();", "+        while (iterator.hasNext()) {", "+            Entry<V, Integer> e = iterator.next();", "+            if (e.getValue() > max.getValue()) {", "+                max = e;", "+            }", "+        }", "+        return max.getKey();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e5309930bb61d003f9e88c9abb445cf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "5e9dfdedbd0f501394dd50a31fc000abcac738de", "commitAfterChange": "0fa22166c3bce2b4318de51e3645ef9910304701", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDirectedGraph(  )", "signatureAfterChange": "     public void testDirectedGraph(  )", "diff": ["+        m_result = new StringBuffer(  );", "+", "+        DirectedGraph         graph = createDirectedGraph(  );", "+", "+        AbstractGraphIterator iterator = createIterator( graph, \"1\" );", "+        iterator.addTraversalListener( new MyTraversalListener(  ) );", "+", "+        while( iterator.hasNext(  ) ) {", "+            m_result.append( (String) iterator.next(  ) );", "+", "+            if( iterator.hasNext(  ) ) {", "+                m_result.append( ',' );", "+            }", "+        }", "+", "+        assertEquals( getExpectedStr2(  ), m_result.toString(  ) );", "+    }", "-        AbstractGraphIterator iterator = createIterator( graph, v1 );", "-        iterator.addTraversalListener( new MyTraversalListener(  ) );", "-", "-        while( iterator.hasNext(  ) ) {", "-            m_result.append( (String) iterator.next(  ) );", "-", "-            if( iterator.hasNext(  ) ) {", "-                m_result.append( ',' );", "-            }", "-        }", "-", "-        assertEquals( getExpectedStr2(  ), m_result.toString(  ) );"]}]}
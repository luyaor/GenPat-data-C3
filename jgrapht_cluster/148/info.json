{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d1ed430c573a9b06b795b243bc8a31b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00bfab6764ef8d87e1de23ce807fddb3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/VertexCoversTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testFindGreedyCover()", "signatureAfterChange": "     public void testFindGreedyCover()", "diff": ["-            Graph g = createRandomGraph();", "-            Set c =", "+            Graph<Integer,DefaultEdge> g = createRandomGraph();", "+            Set<Integer> c ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b7dc92bc61c65421f4958a17a5fc18", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/touchgraph/TouchgraphPanel.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void initialize()", "signatureAfterChange": "     public void initialize()", "diff": ["-                TouchgraphConverter converter = new TouchgraphConverter();", "+                TouchgraphConverter<V,E> converter = new TouchgraphConverter<V,E>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "072bdf9f2e1f2878852fbdbebe1fabaf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/NeighborIndex.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private Neighbors getNeighbors(V v)", "signatureAfterChange": "      private Neighbors<V,E> getNeighbors(V v)", "diff": ["-    private Neighbors getNeighbors(V v)", "+    private Neighbors<V,E> getNeighbors(V v)", "-        Neighbors neighbors = m_neighborMap.get(v);", "+        Neighbors<V,E> neighbors = m_neighborMap.get(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f0cdb5aceedd536bde2e98b8f811b25", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/touchgraph/SimpleTouchgraphApplet.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public static void main(String [] args)", "signatureAfterChange": "          public static void main(String [] args)", "diff": ["-        Graph g = createSamplegraph();", "+        Graph<String,DefaultEdge> g = createSamplegraph();", "-            new TouchgraphPanel(g,selfReferencesAllowed));", "+            new TouchgraphPanel<String,DefaultEdge>(g,selfReferencesAllowed));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "116c4d62ea4336dc39bddd0388e1bcc4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/ext/MatrixExporterTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testAdjacencyUndirected()", "signatureAfterChange": "      public void testAdjacencyUndirected()", "diff": ["-        UndirectedGraph g = new Pseudograph(DefaultEdge.class);", "+        UndirectedGraph<String,DefaultEdge> g =", "+            new Pseudograph<String,DefaultEdge>(DefaultEdge.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18699853a53b69d6e3de6f7a16c9e363", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public JGraphModelAdapter(         Graph jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes)", "signatureAfterChange": "     public JGraphModelAdapter(         Graph<V,E> jGraphTGraph,         AttributeMap defaultVertexAttributes,         AttributeMap defaultEdgeAttributes)", "diff": ["-        Graph jGraphTGraph,", "+        Graph<V,E> jGraphTGraph,", "-            new DefaultCellFactory());", "+            new DefaultCellFactory<V,E>());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18a34b176e87fbedc06cf54c0242bc4b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/isomorphism/VertexDegreeEquivalenceComparator.java", "commitBeforeChange": "e001cc8146b616d3da90eb6cff49e32ca1fc4a04", "commitAfterChange": "b7f329ad24e729f34dfea65831437c4420189a75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected InOutDegrees getInOutDegrees(Graph<V, E> aContextGraph,         V vertex)", "signatureAfterChange": "     protected InOutDegrees getInOutDegrees(Graph<V, E> aContextGraph,         V vertex)", "diff": ["-        if (aContextGraph instanceof UndirectedGraph) {", "+        if (aContextGraph instanceof UndirectedGraph<?,?>) {", "-        } else if (aContextGraph instanceof DirectedGraph) {", "+        } else if (aContextGraph instanceof DirectedGraph<?,?>) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b6561f647c8463aff267e1507fff16", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/UndirectedSubgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public UndirectedSubgraph( UndirectedGraph base, Set vertexSubset,         Set edgeSubset )", "signatureAfterChange": "     public UndirectedSubgraph( UndirectedGraph<V, E> base, Set<V> vertexSubset,         Set<E> edgeSubset )", "diff": ["-    public UndirectedSubgraph( UndirectedGraph base, Set vertexSubset,", "-        Set edgeSubset ) {", "+    public UndirectedSubgraph( UndirectedGraph<V, E> base, Set<V> vertexSubset,", "+        Set<E> edgeSubset ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23cc1af274e15eddea8636997a20aaee", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/ConnectivityInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Set<V> connectedSetOf(V vertex)", "signatureAfterChange": "     public Set<V> connectedSetOf(V vertex)", "diff": ["-            connectedSet = new HashSet();", "+            connectedSet = new HashSet<V>();", "-                new BreadthFirstIterator(m_graph, vertex);", "+                new BreadthFirstIterator<V, E, Object>(m_graph, vertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "258ed2fac55656e69396abb24428c2fb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractBaseGraph(EdgeFactory<V, E> ef,         boolean allowMultipleEdges,         boolean allowLoops)", "signatureAfterChange": "     public AbstractBaseGraph(EdgeFactory<V, E> ef,         boolean allowMultipleEdges,         boolean allowLoops)", "diff": ["-", "-        m_vertexMap = new LinkedHashMap();", "-        m_edgeSet = new LinkedHashSet();", "+        ", "+        m_vertexMap = new LinkedHashMap<V,Object>();", "+        m_edgeSet = new LinkedHashSet<E>();", "-        m_edgeListFactory = new ArrayListFactory();", "+        m_edgeListFactory = new ArrayListFactory<V,E>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272db95bc144786e281054e452b0357f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/DirectedWeightedSubgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public DirectedWeightedSubgraph( WeightedGraph base, Set vertexSubset,         Set edgeSubset )", "signatureAfterChange": "     public DirectedWeightedSubgraph( WeightedGraph<V, E> base, Set<V> vertexSubset,         Set<E> edgeSubset )", "diff": ["-    public DirectedWeightedSubgraph( WeightedGraph base, Set vertexSubset,", "-        Set edgeSubset ) {", "+    public DirectedWeightedSubgraph( WeightedGraph<V, E> base, Set<V> vertexSubset,", "+        Set<E> edgeSubset ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4444ea189d210d6646b726f3b98a48", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected abstract CollectionPermutationIter createPermutationIterator(         Set vertexSet1,         Set vertexset2);", "signatureAfterChange": "     protected abstract CollectionPermutationIter<V> createPermutationIterator(         Set<V> vertexSet1,         Set<V> vertexSet2);", "diff": ["-    protected abstract CollectionPermutationIter createPermutationIterator(", "+    protected abstract CollectionPermutationIter<V> createPermutationIterator("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aa44cb61e07e97eabac9e2391f6c429", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/AsUndirectedGraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void setUp()", "signatureAfterChange": "     protected void setUp()", "diff": ["-        m_directed = new DefaultDirectedGraph();", "-        m_undirected = new AsUndirectedGraph(m_directed);", "+        m_directed = new DefaultDirectedGraph<String, DirEdge<String>>();", "+        m_undirected = new AsUndirectedGraph<String, Edge<String>>(m_directed);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3053a71e7d3bc900670a59fa483dd8ec", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/ext/MatrixExporterTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testAdjacencyDirected()", "signatureAfterChange": "      public void testAdjacencyDirected()", "diff": ["-        DirectedGraph g = new DirectedMultigraph(DefaultEdge.class);", "+        DirectedGraph<String,DefaultEdge> g =", "+            new DirectedMultigraph<String,DefaultEdge>(DefaultEdge.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "349188cc8e7522475deb979feabe173f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/DefaultListenableGraph.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Object clone()", "signatureAfterChange": "     public Object clone()", "diff": ["-            DefaultListenableGraph g = (DefaultListenableGraph) super.clone();", "-            g.m_graphListeners = new ArrayList();", "-            g.m_vertexSetListeners = new ArrayList();", "+            DefaultListenableGraph<V,E> g = (DefaultListenableGraph) super.clone();", "+            g.m_graphListeners = new ArrayList<GraphListener<V, E>>();", "+            g.m_vertexSetListeners = new ArrayList<VertexSetListener<V>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "430d0e1113e1b1def2ca25efa375a746", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/demo/HelloJGraphT.java", "commitBeforeChange": "69fa667631f5d0cc79dd9c5dec2c4ebc9355f077", "commitAfterChange": "ccdfe091f1358c9be65e5963b4cd6ff9295861c6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static void main(String [] args)", "signatureAfterChange": "     public static void main(String [] args)", "diff": ["-        UndirectedGraph stringGraph = createStringGraph();", "+        UndirectedGraph<String,DefaultEdge> stringGraph = createStringGraph();", "-        DirectedGraph hrefGraph = createHrefGraph();", "+        DirectedGraph<URL,DefaultEdge> hrefGraph = createHrefGraph();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "441bb8b92848b21cf324fe907869149b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDirectedGraph()", "signatureAfterChange": "     public void testDirectedGraph()", "diff": ["-        DirectedGraph graph = createDirectedGraph();", "+        DirectedGraph<String, DirectedEdge<String>> graph = createDirectedGraph();", "-        AbstractGraphIterator iterator = createIterator(graph, \"1\");", "+        AbstractGraphIterator<String,DirectedEdge<String>> iterator = createIterator(graph, \"1\");", "-            m_result.append((String) iterator.next());", "+            m_result.append(iterator.next());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4740752f4a7c02ad97ce5e130b1198a2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TopologicalOrderIterator(DirectedGraph<V, E> dg)", "signatureAfterChange": "     public TopologicalOrderIterator(DirectedGraph<V, E> dg)", "diff": ["-        this(dg, new LinkedList(), new HashMap());", "+        this(dg, new LinkedList<V>(), new HashMap<V, ModifiableInteger>());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47b4fcc7b5296b89d69caf9860fdd632", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        DirectedGraph g = new DirectedMultigraph();", "+        DirectedGraph<String, DirEdge<String>> g = new DirectedMultigraph<String, DirEdge<String>>();", "-        Iterator iter = g.edgeSet().iterator();", "+        Iterator<DirEdge<String>> iter = g.edgeSet().iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b2af639e6a6c9c1e8803f7d20881550", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public List<DirectedSubgraph> stronglyConnectedSubgraphs()", "signatureAfterChange": "     public List<DirectedSubgraph<V,E>> stronglyConnectedSubgraphs()", "diff": ["-    public List<DirectedSubgraph> stronglyConnectedSubgraphs()", "+    public List<DirectedSubgraph<V,E>> stronglyConnectedSubgraphs()", "-            m_stronglyConnectedSubgraphs = new Vector(sets.size());", "+            m_stronglyConnectedSubgraphs = new Vector<DirectedSubgraph<V, E>>(sets.size());", "-                m_stronglyConnectedSubgraphs.add(new DirectedSubgraph(", "+                m_stronglyConnectedSubgraphs.add(new DirectedSubgraph<V, E>("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5565ea1c1c187751a3dc73f49797ef28", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/EquivalenceIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public EquivalenceIsomorphismInspector(Graph graph1, Graph graph2)", "signatureAfterChange": "     public EquivalenceIsomorphismInspector(Graph<V,E> graph1, Graph<V,E> graph2)", "diff": ["-    public EquivalenceIsomorphismInspector(Graph graph1, Graph graph2)", "+    public EquivalenceIsomorphismInspector(Graph<V,E> graph1, Graph<V,E> graph2)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff9a499d045961d7c34ce4ee6174449", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/CycleDetector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public Set findCyclesContainingVertex(V v)", "signatureAfterChange": "     public Set<V> findCyclesContainingVertex(V v)", "diff": ["-    public Set findCyclesContainingVertex(V v)", "+    public Set<V> findCyclesContainingVertex(V v)", "-        Set set = new HashSet();", "+        Set<V> set = new HashSet<V>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b60f60c1538a9282f78e99f669bed98", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/VertexCovers.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static <V, E extends Edge<V>> Set<V> find2ApproximationCover(Graph<V, E> g)", "signatureAfterChange": "     public static <V, E extends Edge<V>> Set<V> find2ApproximationCover(Graph<V, E> g)", "diff": ["-        Set<V> cover = new HashSet();", "+        Set<V> cover = new HashSet<V>();", "-        Subgraph<V, E> sg = new Subgraph(g, null, null);", "+        Subgraph<V, E> sg = new Subgraph<V, E>(g, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc52d5aa784d55870c021ca89481427", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void init()", "signatureAfterChange": "     private void init()", "diff": ["-            new PrefetchIterator(new AbstractExhaustiveIsomorphismInspector.NextFunctor());", "+            new PrefetchIterator<IsomorphismRelation>(", "+                    // XXX hb 280106: I don't understand this warning, yet :-)", "+                    new AbstractExhaustiveIsomorphismInspector.NextFunctor()", "+                    );", "-        this.graph1VertexSet = new LinkedHashSet(this.graph1.vertexSet());", "+        this.graph1VertexSet = new LinkedHashSet<V>(this.graph1.vertexSet());", "-            new GraphOrdering(this.graph1VertexSet, this.graph1.edgeSet());", "+            new GraphOrdering<V,E>(this.graph1VertexSet, this.graph1.edgeSet());", "-        this.graph2EdgeSet = new LinkedHashSet(this.graph2.edgeSet());", "+        this.graph2EdgeSet = new LinkedHashSet<E>(this.graph2.edgeSet());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7962155fb7b3c81e9cd660e594ecc1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static <V, E extends Edge<V>> List<E> findPathBetween(         Graph<V, E> graph,         V startVertex,         V endVertex)", "signatureAfterChange": "     public static <V, E extends Edge<V>> List<E> findPathBetween(         Graph<V, E> graph,         V startVertex,         V endVertex)", "diff": ["-        DijkstraShortestPath alg =", "-            new DijkstraShortestPath(", "+        DijkstraShortestPath<V, E> alg =", "+            new DijkstraShortestPath<V, E>("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72c0418ed818bea6ac6a66bbe6db10af", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/UndirectedWeightedSubgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public UndirectedWeightedSubgraph( WeightedGraph base, Set vertexSubset,         Set edgeSubset )", "signatureAfterChange": "     public UndirectedWeightedSubgraph( WeightedGraph<V, E> base, Set<V> vertexSubset,         Set<E> edgeSubset )", "diff": ["-    public UndirectedWeightedSubgraph( WeightedGraph base, Set vertexSubset,", "-        Set edgeSubset ) {", "+    public UndirectedWeightedSubgraph( WeightedGraph<V, E> base, Set<V> vertexSubset,", "+        Set<E> edgeSubset ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c157d97d963fdc022bb4479d12a993", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/Graphs.java", "commitBeforeChange": "e001cc8146b616d3da90eb6cff49e32ca1fc4a04", "commitAfterChange": "b7f329ad24e729f34dfea65831437c4420189a75", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)", "signatureAfterChange": "     public static <V, E> UndirectedGraph<V, E> undirectedGraph(Graph<V, E> g)", "diff": ["-        if (g instanceof DirectedGraph) {", "+        if (g instanceof DirectedGraph<?,?>) {", "-        } else if (g instanceof UndirectedGraph) {", "+        } else if (g instanceof UndirectedGraph<?,?>) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b19e6aef8ce66d1f1590af929dbe2bf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "e001cc8146b616d3da90eb6cff49e32ca1fc4a04", "commitAfterChange": "b7f329ad24e729f34dfea65831437c4420189a75", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      private Specifics createSpecifics()", "signatureAfterChange": "      private Specifics createSpecifics()", "diff": ["-        if (this instanceof DirectedGraph) {", "+        if (this instanceof DirectedGraph<?,?>) {", "-        } else if (this instanceof UndirectedGraph) {", "+        } else if (this instanceof UndirectedGraph<?,?>) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c85169ab3688dd3b1d8c57c3ad80d55", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private EdgeTraversalEvent createEdgeTraversalEvent(E edge)", "signatureAfterChange": "      private EdgeTraversalEvent<V, E> createEdgeTraversalEvent(E edge)", "diff": ["-    private EdgeTraversalEvent createEdgeTraversalEvent(E edge)", "+    private EdgeTraversalEvent<V, E> createEdgeTraversalEvent(E edge)", "-            return new EdgeTraversalEvent(this, edge);", "+            return new EdgeTraversalEvent<V, E>(this, edge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4fab4f959a220e3462837e769be2a4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/VisioExporter.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void export(OutputStream output, Graph g)", "signatureAfterChange": "     public void export(OutputStream output, Graph<V,E> g)", "diff": ["-    public void export(OutputStream output, Graph g)", "+    public void export(OutputStream output, Graph<V,E> g)", "-        for (Iterator i = g.vertexSet().iterator(); i.hasNext();) {", "+        for (Iterator<V> i = g.vertexSet().iterator(); i.hasNext();) {", "-        for (Iterator i = g.edgeSet().iterator(); i.hasNext();) {", "+        for (Iterator<E> i = g.edgeSet().iterator(); i.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812d63bc597ea0f41bfc9264da06ce20", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-            m_orderedVertices = new LinkedList<VertexData>();", "+            m_orderedVertices = new LinkedList<VertexData<V>>();", "-            Iterator<VertexData> iter =", "+            Iterator<VertexData<V>> iter =", "-                VertexData data = iter.next();", "+                VertexData<V> data = iter.next();", "-                VertexData data = iter.next();", "+                VertexData<V> data = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878c05222d97358313bfb26e279b03b5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "ae864cab55715cbe3ee2fa1a05734b4fcd4f3411", "commitAfterChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tpublic int[] getOutEdges(int vertexOrder)", "signatureAfterChange": " \t \tpublic int[] getOutEdges(int vertexOrder)", "diff": ["-\t\tSet<E> edgeSet = new HashSet();", "+\t\tSet<E> edgeSet = new HashSet<E>();", "-\t\t\tedgeSet = ((DirectedGraph) graph).outgoingEdgesOf(v);", "+\t\t\tedgeSet = ((DirectedGraph<V,E>) graph).outgoingEdgesOf(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "894174a3ce953c52cccc3bb3504ec48f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/PermutationIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected CollectionPermutationIter createPermutationIterator(         Set vertexSet1,         Set vertexSet2)", "signatureAfterChange": "     protected CollectionPermutationIter<V> createPermutationIterator(         Set<V> vertexSet1,         Set<V> vertexSet2)", "diff": ["-    protected CollectionPermutationIter createPermutationIterator(", "-        Set vertexSet1,", "-        Set vertexSet2)", "+    protected CollectionPermutationIter<V> createPermutationIterator(", "+        Set<V> vertexSet1,", "+        Set<V> vertexSet2)", "-        return new CollectionPermutationIter(vertexSet2);", "+        return new CollectionPermutationIter<V>(vertexSet2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a51ab1fae389f33888036a0296da7b9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceComparatorChainBase.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public EquivalenceComparatorChainBase(         EquivalenceComparator firstComaparator)", "signatureAfterChange": "     public EquivalenceComparatorChainBase(         EquivalenceComparator<E,C> firstComaparator)", "diff": ["-        EquivalenceComparator firstComaparator)", "+        EquivalenceComparator<E,C> firstComaparator)", "-        this.chain = new LinkedList();", "+        this.chain = new LinkedList<EquivalenceComparator<? super E, ? super C>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7d967637205e3041f06d7b731ecac7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/ext/MatrixExporterTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testLaplacian()", "signatureAfterChange": "      public void testLaplacian()", "diff": ["-        UndirectedGraph g = new SimpleGraph(DefaultEdge.class);", "+        UndirectedGraph<String,DefaultEdge> g =", "+            new SimpleGraph<String,DefaultEdge>(DefaultEdge.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92176761c42da90963809d364e2f35d0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/util/equivalence/EquivalenceGroupCreatorTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testComparatorChain()", "signatureAfterChange": "     public void testComparatorChain()", "diff": ["-        EquivalenceComparatorChain comparatorChain =", "-            new EquivalenceComparatorChainBase(new OddEvenGroupComparator());", "+        EquivalenceComparatorChain<Integer,Object> comparatorChain =", "+            new EquivalenceComparatorChainBase<Integer,Object>(new OddEvenGroupComparator());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5df312eefed9d273073fe759151899", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Subgraph( Graph base, Set vertexSubset )", "signatureAfterChange": "     public Subgraph( Graph<V, E> base, Set<V> vertexSubset )", "diff": ["-    public Subgraph( Graph base, Set vertexSubset ) {", "+    public Subgraph( Graph<V, E> base, Set<V> vertexSubset ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9f2f473cb66ec3f5ac1c93a2d284d96", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/touchgraph/SimpleTouchgraphApplet.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void init()", "signatureAfterChange": "     public void init()", "diff": ["-        Graph g = createSamplegraph();", "+        Graph<String,DefaultEdge> g = createSamplegraph();", "-        add(new TouchgraphPanel(g,selfReferencesAllowed), BorderLayout.CENTER);", "+        add(new TouchgraphPanel<String,DefaultEdge>(g,selfReferencesAllowed), BorderLayout.CENTER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aafa18c0a4755c7faddc2b0aabd443bb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public AbstractExhaustiveIsomorphismInspector(Graph graph1, Graph graph2)", "signatureAfterChange": "     public AbstractExhaustiveIsomorphismInspector(Graph<V,E> graph1, Graph<V,E> graph2)", "diff": ["-    public AbstractExhaustiveIsomorphismInspector(Graph graph1, Graph graph2)", "+    public AbstractExhaustiveIsomorphismInspector(Graph<V,E> graph1, Graph<V,E> graph2)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2e25b655104075f8384a59c9a3056c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/DefaultListenableGraph.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public DefaultListenableGraph(Graph<V, E> g, boolean reuseEvents)", "signatureAfterChange": "     public DefaultListenableGraph(Graph<V, E> g, boolean reuseEvents)", "diff": ["-        m_reuseableEdgeEvent = new FlyweightEdgeEvent(this, -1, null);", "-        m_reuseableVertexEvent = new FlyweightVertexEvent(this, -1, null);", "+        m_reuseableEdgeEvent = new FlyweightEdgeEvent<V,E>(this, -1, null);", "+        m_reuseableVertexEvent = new FlyweightVertexEvent<V>(this, -1, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c7582bb0855224f9b565e45fa9afd6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DirectedNeighborIndex.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private Neighbors getSuccessors(V v)", "signatureAfterChange": "      private Neighbors<V,E> getSuccessors(V v)", "diff": ["-    private Neighbors getSuccessors(V v)", "+    private Neighbors<V,E> getSuccessors(V v)", "-        Neighbors neighbors = m_successorMap.get(v);", "+        Neighbors<V,E> neighbors = m_successorMap.get(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b464b73366e2b100636ac16d90913fa0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DirectedNeighborIndex.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private Neighbors getPredecessors(V v)", "signatureAfterChange": "      private Neighbors<V,E> getPredecessors(V v)", "diff": ["-    private Neighbors getPredecessors(V v)", "+    private Neighbors<V,E> getPredecessors(V v)", "-        Neighbors neighbors = m_predecessorMap.get(v);", "+        Neighbors<V,E> neighbors = m_predecessorMap.get(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be6ce87af24be8958b15a7da6966ac02", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "ae864cab55715cbe3ee2fa1a05734b4fcd4f3411", "commitAfterChange": "aa92fe16c7852c9f9d1bf3a60c5718fcffd0ae0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tpublic int[] getInEdges(int vertexOrder)", "signatureAfterChange": " \t \tpublic int[] getInEdges(int vertexOrder)", "diff": ["-\t\tSet<E> edgeSet = new HashSet();", "+\t\tSet<E> edgeSet = new HashSet<E>();", "-\t\t\tedgeSet = ((DirectedGraph) graph).incomingEdgesOf(v);", "+\t\t\tedgeSet = ((DirectedGraph<V,E>) graph).incomingEdgesOf(v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc31d741e7516371b9562e38aa7c3da", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testGetAllEdges()", "signatureAfterChange": "     public void testGetAllEdges()", "diff": ["-        DirectedGraph g = createMultiTriangleWithMultiLoop();", "+        DirectedGraph<String, DirEdge<String>> g = createMultiTriangleWithMultiLoop();", "-        List loops = g.getAllEdges(m_v1, m_v1);", "+        List<DirEdge<String>> loops = g.getAllEdges(m_v1, m_v1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c48d468d26f226a635dfd4cb240c3676", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/generate/EmptyGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void generateGraph(         Graph target,         VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        Graph target,", "-        VertexFactory vertexFactory,", "-        Map resultMap)", "+        Graph<V,E> target,", "+        VertexFactory<V> vertexFactory,", "+        Map<String,V> resultMap)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4cb511e7965c72b80cde0ed68f6f579", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private TopologicalOrderIterator( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "signatureAfterChange": "     private TopologicalOrderIterator( DirectedGraph<V, E> dg, LinkedList<V> queue,         Map inDegreeMap )", "diff": ["-    private TopologicalOrderIterator( DirectedGraph dg, LinkedList queue,", "+    private TopologicalOrderIterator( DirectedGraph<V, E> dg, LinkedList<V> queue,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d701bcc18d9aa9d6138d611e082e3854", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/PartiteRandomGraphGenerator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void generateGraph(         Graph target,         VertexFactory vertexFactory,         Map resultMap)", "signatureAfterChange": "     public void generateGraph(             Graph<V,E> target,             VertexFactory<V> vertexFactory,             Map<String,Object[]> resultMap)", "diff": ["-        Graph target,", "-        VertexFactory vertexFactory,", "-        Map resultMap)", "+            Graph<V,E> target,", "+            VertexFactory<V> vertexFactory,", "+            Map<String,Object[]> resultMap)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de45365d5b08766260e85fead967e5d4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/VertexCovers.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static <V, E extends Edge<V>> Set<V> findGreedyCover(UndirectedGraph<V, E> g)", "signatureAfterChange": "     public static <V, E extends Edge<V>> Set<V> findGreedyCover(UndirectedGraph<V, E> g)", "diff": ["-        Set<V> cover = new HashSet();", "+        Set<V> cover = new HashSet<V>();", "-        UndirectedGraph<V, E> sg = new UndirectedSubgraph(g, null, null);", "+        UndirectedGraph<V, E> sg = new UndirectedSubgraph<V, E>(g, null, null);", "-        VertexDegreeComparator<V, E> comp = new VertexDegreeComparator(sg);", "+        VertexDegreeComparator<V, E> comp = new VertexDegreeComparator<V, E>(sg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8f902ac57b0b8883af2d094493ef7f7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public GraphOrdering(Graph regularGraph)", "signatureAfterChange": "     public GraphOrdering(Graph<V,E> regularGraph)", "diff": ["-    public GraphOrdering(Graph regularGraph)", "+    public GraphOrdering(Graph<V,E> regularGraph)", "-        Set vertexSet = regularGraph.vertexSet();", "-        Set edgeSet = regularGraph.edgeSet();", "+        Set<V> vertexSet = regularGraph.vertexSet();", "+        Set<E> edgeSet = regularGraph.edgeSet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece48518e5ed1f063ec7098dad6286ff", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "         private List filterEdges(Object [] cells)", "signatureAfterChange": "         private List<Object> filterEdges(Object [] cells)", "diff": ["-        private List filterEdges(Object [] cells)", "+        private List<Object> filterEdges(Object [] cells)", "-            List jEdges = new ArrayList();", "+            List<Object> jEdges = new ArrayList<Object>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f321dbc6054f3c12dfed9e1e716cf1b7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "         private List filterVertices(Object [] cells)", "signatureAfterChange": "         private List<Object> filterVertices(Object [] cells)", "diff": ["-        private List filterVertices(Object [] cells)", "+        private List<Object> filterVertices(Object [] cells)", "-            List jVertices = new ArrayList();", "+            List<Object> jVertices = new ArrayList<Object>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f758092ea4a0a7817a92d3321a7415f1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/PermutationIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public PermutationIsomorphismInspector(Graph graph1, Graph graph2)", "signatureAfterChange": "     public PermutationIsomorphismInspector(Graph<V,E> graph1, Graph<V,E> graph2)", "diff": ["-    public PermutationIsomorphismInspector(Graph graph1, Graph graph2)", "+    public PermutationIsomorphismInspector(Graph<V,E> graph1, Graph<V,E> graph2)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa864169873e5fc6294d25c656dface1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/DirectedSubgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public DirectedSubgraph( DirectedGraph base, Set vertexSubset,         Set edgeSubset )", "signatureAfterChange": "     public DirectedSubgraph( DirectedGraph<V, E> base, Set<V> vertexSubset,         Set<E> edgeSubset )", "diff": ["-    public DirectedSubgraph( DirectedGraph base, Set vertexSubset,", "-        Set edgeSubset ) {", "+    public DirectedSubgraph( DirectedGraph<V, E> base, Set<V> vertexSubset,", "+        Set<E> edgeSubset ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff33c0cf163ac29b3a20993d595cf1c9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void testVertexOrderDeterminism()", "signatureAfterChange": "     public void testVertexOrderDeterminism()", "diff": ["-        DirectedGraph g = createMultiTriangleWithMultiLoop();", "-        Iterator iter = g.vertexSet().iterator();", "+        DirectedGraph<String, DirEdge<String>> g = createMultiTriangleWithMultiLoop();", "+        Iterator<String> iter = g.vertexSet().iterator();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba124cd21208e84c1dca71a0e17e3069", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0776eab262ec66929fe968ac41c381b0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testAddEdgeEdge()", "signatureAfterChange": "     public void testAddEdgeEdge()", "diff": ["-            m_g1.addEdge(m_v1, m_v1, m_eLoop); // loops not allowed", "+            g1.addEdge(v1, v1, eLoop); // loops not allowed", "-            m_g3.addEdge(m_v1, m_v1, null);", "+            g3.addEdge(v1, v1, null);", "-        DefaultEdge e = m_eFactory.createEdge(m_v2, m_v1);", "+        DefaultEdge e = eFactory.createEdge(v2, v1);", "-            m_g1.addEdge(\"ya\", \"ya\", e); // no such vertex in graph", "+            g1.addEdge(\"ya\", \"ya\", e); // no such vertex in graph", "-        assertEquals(false, m_g2.addEdge(m_v2, m_v1, e));", "-        assertEquals(false, m_g3.addEdge(m_v2, m_v1, e));", "-        assertEquals(true, m_g4.addEdge(m_v2, m_v1, e));", "+        assertEquals(false, g2.addEdge(v2, v1, e));", "+        assertEquals(false, g3.addEdge(v2, v1, e));", "+        assertEquals(true, g4.addEdge(v2, v1, e));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c060ba6be4717c4d5d19b684d41994b1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testAddEdgeEdge()", "signatureAfterChange": "     public void testAddEdgeEdge()", "diff": ["-            m_g1.addEdge(m_eLoop); // loops not allowed", "+            m_g1.addEdge(m_v1, m_v1, m_eLoop); // loops not allowed", "-            m_g3.addEdge(null);", "+            m_g3.addEdge(m_v1, m_v1, null);", "-        DirectedEdge<String> e = m_eFactory.createEdge(m_v2, m_v1);", "+        DefaultEdge e = m_eFactory.createEdge(m_v2, m_v1);", "-            m_g1.addEdge(e); // no such vertex in graph", "+            m_g1.addEdge(\"ya\", \"ya\", e); // no such vertex in graph", "-        assertEquals(false, m_g2.addEdge(e));", "-        assertEquals(false, m_g3.addEdge(e));", "-        assertEquals(true, m_g4.addEdge(e));", "+        assertEquals(false, m_g2.addEdge(m_v2, m_v1, e));", "+        assertEquals(false, m_g3.addEdge(m_v2, m_v1, e));", "+        assertEquals(true, m_g4.addEdge(m_v2, m_v1, e));"]}]}
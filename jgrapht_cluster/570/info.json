{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "454c45e0ac76add69175971537212cc0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cac4077a33bb7bc50856da0f1b14889", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/BreadthFirstIterator.java", "commitBeforeChange": "1a139deda5ac7b2aaba241b3824c64caaee23fb6", "commitAfterChange": "ddcca677c21de372890c813874f294b371ec5648", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Object next(  )", "signatureAfterChange": "     public Object next(  )", "diff": ["-            List edges = m_specifics.edgesOf( nextVertex );", "-", "-            for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "-                Edge e = (Edge) iter.next(  );", "-                fireEdgeVisited( e );", "-", "-                Object v = e.oppositeVertex( nextVertex );", "-", "-                if( m_seen.add( v ) ) { // means: if NOT seen", "-                    m_queue.add( v );", "-                }", "-            }", "+            enqueueUnseenChildrenOf( nextVertex );", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24995289174d02ec40a1a3d97f799eea", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/DefaultListenableGraph.java", "commitBeforeChange": "a5cfd4bcd48a19ea8d2e478a16d15b3842b03b66", "commitAfterChange": "2a809e716ca8dd50187f8762d1fe3518ca90c92f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 17, "signatureBeforeChange": "         public boolean equals( Object obj )", "signatureAfterChange": "       private int indexOfListener( VertexSetListener listener, List list )", "diff": ["+    private int indexOfListener( VertexSetListener listener, List list ) {", "+        for( int i = 0; i < list.size(  ); i++ ) {", "+            WeakListenerReference ref = (WeakListenerReference) list.get( i );", "+", "+            if( ref.get(  ) == listener ) {", "+                return i;", "+            }", "+        }", "+", "+        return NOT_FOUND;", "+    }", "-         */", "-        public boolean equals( Object obj ) {", "-            Object ref = get(  );", "-", "-            return ref == null ? false : ref.equals( obj );", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d1304d747c9a3d12fd376e0398c15ca", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/util/UnionFindTest.java", "commitBeforeChange": "b5348f8a80e818c9b0dd566a68eb23f3eca4389b", "commitAfterChange": "29039f1f20cd2b1397eba3afdb9fc72182dd2062", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "signatureAfterChange": "      private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "diff": ["-    }", "-    private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "-    {", "-        for(ArrayList<String> set:sets)", "-            if(set.contains(a) && set.contains(b))", "-                return true;", "-        return false;", "-    }", "+    private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "+    {", "+        for (ArrayList<String> set : sets) {", "+            if (set.contains(a) && set.contains(b)) {", "+                return true;", "+            }", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3d68ab022eb3a337cbecf5efd1f9f66", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/ConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private List<Set<V>> lazyFindConnectedSets()", "signatureAfterChange": "      private List<Set<V>> lazyFindConnectedSets()", "diff": ["-        if (m_connectedSets == null) {", "-            m_connectedSets = new ArrayList<Set<V>>();", "+        if (connectedSets == null) {", "+            connectedSets = new ArrayList<Set<V>>();", "-            Set vertexSet = m_graph.vertexSet();", "+            Set vertexSet = graph.vertexSet();", "-                    new BreadthFirstIterator<V,E>(m_graph, null);", "+                    new BreadthFirstIterator<V,E>(graph, null);", "-        return m_connectedSets;", "+        return connectedSets;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a4f169480258d8f63dc5edb0d3068f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/VertexDegreeEquivalenceComparator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected InOutDegrees getInOutDegrees(         Graph aContextGraph,         Object vertex)", "signatureAfterChange": "     protected InOutDegrees getInOutDegrees(         Graph<V,E> aContextGraph,         V vertex)", "diff": ["-        Graph aContextGraph,", "-        Object vertex)", "+        Graph<V,E> aContextGraph,", "+        V vertex)", "-        int uniqueId = -1;", "-            UndirectedGraph undirectedGraph = (UndirectedGraph) aContextGraph;", "+            UndirectedGraph<V,E> undirectedGraph = (UndirectedGraph<V,E>) aContextGraph;", "-            DirectedGraph directedGraph = (DirectedGraph) aContextGraph;", "+            DirectedGraph<V,? extends E> directedGraph = (DirectedGraph<V,? extends E>) aContextGraph;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9875c723ab61155c0312f8257464203", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "1c30121105c60b67780e0e06a7b4f218d73652b7", "commitAfterChange": "4d58b10b0afecfca94cdafae19a4fafd5b2b221c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     void handleJGraphTRemoveVertex(Object jtVertex)", "signatureAfterChange": "     void handleJGraphTRemoveVertex(Object jtVertex)", "diff": ["-        internalRemoveCell(vertexCell);", "-", "-        // FIXME: Why remove childAt(0)? Explain if correct, otherwise fix.", "-        if (vertexCell.getChildCount() > 0) {", "-            remove(new Object[] { vertexCell.getChildAt(0) });", "+        List<Object> ports = new ArrayList<Object>();", "+        ", "+        for (Object child : vertexCell.getChildren()) {", "+            if(this.isPort(child)) {", "+                ports.add(child);", "+            }", "+        this.remove(ports.toArray());", "+        ", "+        internalRemoveCell(vertexCell);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d3924aa8cce4ff4aa369f910908d3d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-            m_orderedVertices = new LinkedList();", "-            m_stronglyConnectedSets = new Vector();", "+            m_orderedVertices = new LinkedList<VertexData>();", "+            m_stronglyConnectedSets = new Vector<Set<V>>();", "-            DirectedGraph inverseGraph = new DefaultDirectedGraph();", "+            DirectedGraph<V, E> inverseGraph = new DefaultDirectedGraph<V, E>();", "-                    Set set = new HashSet();", "+                    Set<V> set = new HashSet<V>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50a0632c1743efab497913691fa8927", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "       private void addUnseenChildrenOf( Object vertex )", "signatureAfterChange": "       private void addUnseenChildrenOf( V vertex )", "diff": ["-    private void addUnseenChildrenOf( Object vertex ) {", "-        List edges = m_specifics.edgesOf( vertex );", "+    private void addUnseenChildrenOf( V vertex ) {", "+        List<E> edges = m_specifics.edgesOf( vertex );", "-        for( Iterator i = edges.iterator(  ); i.hasNext(  ); ) {", "-            Edge e = (Edge) i.next(  );", "+        for( Iterator<E> i = edges.iterator(  ); i.hasNext(  ); ) {", "+            E e = i.next(  );", "-            Object v = e.oppositeVertex( vertex );", "+            V v = e.oppositeVertex( vertex );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e86b149e9e6a3ed7c9a92d3729edbde4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "583bedb628992418bdbd952ca092e65831d3b133", "commitAfterChange": "43aa0f5e11b9b56a524f92631cd31dc060fa1ca7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isVertexLine(String input)", "signatureAfterChange": "     private boolean isStartOfBlockComment(String input, int position)", "diff": ["+", "+   private boolean isStartOfBlockComment(String input, int position) {", "+      char current = input.charAt(position);", "+      if(current == '/') {", "+         if(position < input.length() -1) {", "+            if(input.charAt(position + 1) == '*') {", "+               return true;", "+            }", "+         }", "+      }", "+      return false;", "+   }", "-", "-   private boolean isVertexLine(String input) {", "-      if(input.contains(\"[\")) {", "-         return ! input.substring(0, input.indexOf('[')).contains(\"-\");", "-      } else {", "-         return ! input.contains(\"-\");", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9c8bd0df5fbe10ffec9f1bd04f474ca", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/HopcroftKarpBipartiteMatching.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2)", "signatureAfterChange": "     private boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2)", "diff": ["+     */", "+    private boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2)", "+    {", "+        for (V vertex : vertexSet1) {", "+            if (vertexSet2.contains(vertex)) {", "+            }", "+        }", "+        return false;", "+    }", "-\t */", "-\tprivate boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2){", "-\t\tfor(V vertex: vertexSet1)", "-\t\t\tif(vertexSet2.contains(vertex))", "-\t\t\t\treturn true;", "-\t\treturn false;", "-\t}"]}]}
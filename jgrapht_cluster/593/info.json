{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48b275c75b1f52285dfc4d4ae93e1eba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35dca7e4721473d9443d153ef9f83d74", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "5f0104ac684044809cb315b79d4a999c5e1da731", "commitAfterChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void augmentFlow()", "signatureAfterChange": "      private void augmentFlow()", "diff": ["-        double deltaFlow = nodes.get(currentSink).flowAmount;", "-        maximumFlowValue += deltaFlow;", "-        int currentNode = currentSink;", "-        while (currentNode != currentSource) {", "-            nodes.get(currentNode).lastArc.flow += deltaFlow;", "-            nodes.get(currentNode).lastArc.reversed.flow -= deltaFlow;", "-            currentNode = nodes.get(currentNode).lastArc.tail;", "+        boolean[] seen = new boolean[nodes.size()];", "+", "+        for (Arc lastArc : nodes.get(currentSink).lastArcs) {", "+            double deltaFlow =", "+                Math.min(", "+                    nodes.get(lastArc.tail).flowAmount,", "+                    lastArc.capacity - lastArc.flow);", "+", "+            if (augmentFlowAlongInternal(deltaFlow, lastArc.tail, seen)) {", "+                lastArc.flow += deltaFlow;", "+                lastArc.reversed.flow -= deltaFlow;", "+            }", "+", "+            // _DBG", "+            assert (lastArc.flow + DEFAULT_EPSILON <= lastArc.capacity);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8cd2245e5c5dc41279d2bb12a9d88f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "0363545e8290260126e9c13c52724dd67b796b7e", "commitAfterChange": "d7b11005f4a4271e0f5137bcf7a8bb639ef393f0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main( String[] args )", "signatureAfterChange": "     public static void main( String[] args )", "diff": ["-        System.out.println( ", "-            \"allocating graph with 3M elements (may take a few tens of seconds)...\" );", "+        long time = System.currentTimeMillis(  );", "+        ", "+        reportPerformanceFor( \"starting at\", time );", "-        long   time = System.currentTimeMillis(  );", "-        for( int i = 0; i < 500000; i++ ) {", "+        int numVertices       = 10000;", "+        int numEdgesPerVertex = 200;", "+        int numElements       = numVertices * ( 1 + numEdgesPerVertex );", "+", "+        System.out.println( \"\\n\" + \"allocating graph with \" + numElements", "+            + \" elements (may take a few tens of seconds)...\" );", "+", "+        for( int i = 0; i < numVertices; i++ ) {", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "+", "+            for( int j = 0; j < numEdgesPerVertex; j++ ) {", "+                g.addEdge( prev, curr );", "+            }", "+", "-        reportElapsedFor( \"graph allocation\", time );", "+        reportPerformanceFor( \"graph allocation\", time );", "-        time = System.currentTimeMillis(  );", "+        time     = System.currentTimeMillis(  );", "-        reportElapsedFor( \"breadth traversal\", time );", "+        reportPerformanceFor( \"breadth traversal\", time );", "-        time = System.currentTimeMillis(  );", "+        time     = System.currentTimeMillis(  );", "-        reportElapsedFor( \"depth traversal\", time );", "+        reportPerformanceFor( \"depth traversal\", time );", "-        System.out.println(  );", "-        System.out.println( ", "-            \"Paused: graph is still in memory (to check mem consumption).\" );", "-        System.out.print( \"press any key to finish...\" );", "+        System.out.println( \"\\n\"", "+            + \"Paused: graph is still in memory (to check mem consumption).\" );", "+        System.out.print( \"press any key to free memory and finish...\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b37f5ae08599a42d0bbceb35f453865", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/JGraphAdapterDemo.java", "commitBeforeChange": "c64fbf8e70ceab15e767f5431201bfb24e04dadb", "commitAfterChange": "bae9775b4949275f2c193d6bff281f6600ac4377", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphAdapterDemo(  ) throws HeadlessException", "signatureAfterChange": "       private void adjustDisplaySettings( JGraph jg )", "diff": ["-     */", "-    public JGraphAdapterDemo(  ) throws HeadlessException {", "-        super(  );", "-", "-        GraphFactory gf = GraphFactory.getFactory(  );", "-        m_graph           = gf.createListenableGraph( gf.createDirectedGraph(  ) );", "-        m_jGraphModel     = new JGraphModelAdapter( m_graph );", "-", "-        JGraph jgraph     = new JGraph( m_jGraphModel );", "-", "-        jgraph.setBackground( BG_COLOR );", "-        jgraph.setPreferredSize( SIZE );", "-        getContentPane(  ).add( jgraph );", "-    }", "+    private void adjustDisplaySettings( JGraph jg ) {", "+        jg.setPreferredSize( DEFAULT_SIZE );", "+", "+        Color  c        = DEFAULT_BG_COLOR;", "+        String colorStr = null;", "+", "+        try {", "+            colorStr = getParameter( \"bgcolor\" );", "+        }", "+         catch( Exception e ) {}", "+", "+        if( colorStr != null ) {", "+            c = Color.decode( colorStr );", "+        }", "+", "+        jg.setBackground( c );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d68efe3850448635017e3422ee0890de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "7e936137877a73e8b9c1b2921fc4174c64f683c0", "commitAfterChange": "9d6fedc5ffc354b2230877ddc85b0e6834412bd1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["+        // check outgoing edges of addVertex2", "+        for (int other2 : g2.getOutEdges(addVertex2)) {", "+            if (core2[other2] != NULL_NODE) {", "+                int other1 = core2[other2];", "+                if (!g1.hasEdge(addVertex1, other1))    {", "+                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "+                                    g1.getVertex(addVertex1) + \" to \" +", "+                                    g1.getVertex(other1) +", "+                                    \" is missing in the 1st graph\");", "+                    return false;", "+                }", "+            } else {", "+                if (in2[other2] > 0)", "+                    termInSucc2++;", "+                if (out2[other2] > 0)", "+                    termOutSucc2++;", "+                if (in2[other2] == 0 && out2[other2] == 0)", "+                    newSucc2++;", "+            }", "+        }", "+        ", "+        if (termInSucc1 < termInSucc2 ||", "+            termOutSucc1 < termOutSucc2 ||", "+            newSucc1 < newSucc2)", "+        {", "+            String cause = \"\",", "+                      v1 = g1.getVertex(addVertex1).toString(),", "+                      v2 = g2.getVertex(addVertex2).toString();", "+     ", "+            if (termInSucc2 > termInSucc1)", "+                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (termOutSucc2 > termOutSucc1)", "+                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (newSucc2 > newSucc1)", "+                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "+                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+", "+            showLog(\"isFeasbilePair\", abortmsg + \": \" + cause);", "+            return false;", "+        }", "+", "-            }", "-        }", "-", "-        // check outgoing edges of addVertex2", "-        for (int other2 : g2.getOutEdges(addVertex2)) {", "-            if (core2[other2] != NULL_NODE) {", "-                int other1 = core2[other2];", "-                if (!g1.hasEdge(addVertex1, other1))    {", "-                    showLog(\"isFeasbilePair\", abortmsg + \": edge from \" +", "-                                    g1.getVertex(addVertex1) + \" to \" +", "-                                    g1.getVertex(other1) +", "-                                    \" is missing in the 1st graph\");", "-                    return false;", "-                }", "-            } else {", "-                if (in2[other2] > 0)", "-                    termInSucc2++;", "-                if (out2[other2] > 0)", "-                    termOutSucc2++;", "-                if (in2[other2] == 0 && out2[other2] == 0)", "-                    newSucc2++;", "-            newPred1 >= newPred2 &&", "-            termInSucc1 >= termInSucc2 &&", "-            termOutSucc1 >= termOutSucc2 &&", "-            newSucc1 >= newSucc2)", "+            newPred1 >= newPred2)", "-                   v1 = g1.getVertex(addVertex1).toString(),", "-                   v2 = g2.getVertex(addVertex2).toString();", "+                      v1 = g1.getVertex(addVertex1).toString(),", "+                      v2 = g2.getVertex(addVertex2).toString();", "-            else if (newPred2 > newPred2)", "+            else if (newPred2 > newPred1)", "-            else if (termInPred2 > termInPred1)", "-                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            else if (termOutSucc2 > termOutSucc1)", "-                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "-            else if (newSucc2 > newSucc2)", "-                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 +", "-                    \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";"]}]}
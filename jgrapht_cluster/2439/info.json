{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "139ded6a9484241df06623e6130d59d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8cd2245e5c5dc41279d2bb12a9d88f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "0363545e8290260126e9c13c52724dd67b796b7e", "commitAfterChange": "d7b11005f4a4271e0f5137bcf7a8bb639ef393f0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main( String[] args )", "signatureAfterChange": "     public static void main( String[] args )", "diff": ["-        System.out.println( ", "-            \"allocating graph with 3M elements (may take a few tens of seconds)...\" );", "+        long time = System.currentTimeMillis(  );", "+        ", "+        reportPerformanceFor( \"starting at\", time );", "-        long   time = System.currentTimeMillis(  );", "-        for( int i = 0; i < 500000; i++ ) {", "+        int numVertices       = 10000;", "+        int numEdgesPerVertex = 200;", "+        int numElements       = numVertices * ( 1 + numEdgesPerVertex );", "+", "+        System.out.println( \"\\n\" + \"allocating graph with \" + numElements", "+            + \" elements (may take a few tens of seconds)...\" );", "+", "+        for( int i = 0; i < numVertices; i++ ) {", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "-            g.addEdge( prev, curr );", "+", "+            for( int j = 0; j < numEdgesPerVertex; j++ ) {", "+                g.addEdge( prev, curr );", "+            }", "+", "-        reportElapsedFor( \"graph allocation\", time );", "+        reportPerformanceFor( \"graph allocation\", time );", "-        time = System.currentTimeMillis(  );", "+        time     = System.currentTimeMillis(  );", "-        reportElapsedFor( \"breadth traversal\", time );", "+        reportPerformanceFor( \"breadth traversal\", time );", "-        time = System.currentTimeMillis(  );", "+        time     = System.currentTimeMillis(  );", "-        reportElapsedFor( \"depth traversal\", time );", "+        reportPerformanceFor( \"depth traversal\", time );", "-        System.out.println(  );", "-        System.out.println( ", "-            \"Paused: graph is still in memory (to check mem consumption).\" );", "-        System.out.print( \"press any key to finish...\" );", "+        System.out.println( \"\\n\"", "+            + \"Paused: graph is still in memory (to check mem consumption).\" );", "+        System.out.print( \"press any key to free memory and finish...\" );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b37f5ae08599a42d0bbceb35f453865", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/JGraphAdapterDemo.java", "commitBeforeChange": "c64fbf8e70ceab15e767f5431201bfb24e04dadb", "commitAfterChange": "bae9775b4949275f2c193d6bff281f6600ac4377", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public JGraphAdapterDemo(  ) throws HeadlessException", "signatureAfterChange": "       private void adjustDisplaySettings( JGraph jg )", "diff": ["-     */", "-    public JGraphAdapterDemo(  ) throws HeadlessException {", "-        super(  );", "-", "-        GraphFactory gf = GraphFactory.getFactory(  );", "-        m_graph           = gf.createListenableGraph( gf.createDirectedGraph(  ) );", "-        m_jGraphModel     = new JGraphModelAdapter( m_graph );", "-", "-        JGraph jgraph     = new JGraph( m_jGraphModel );", "-", "-        jgraph.setBackground( BG_COLOR );", "-        jgraph.setPreferredSize( SIZE );", "-        getContentPane(  ).add( jgraph );", "-    }", "+    private void adjustDisplaySettings( JGraph jg ) {", "+        jg.setPreferredSize( DEFAULT_SIZE );", "+", "+        Color  c        = DEFAULT_BG_COLOR;", "+        String colorStr = null;", "+", "+        try {", "+            colorStr = getParameter( \"bgcolor\" );", "+        }", "+         catch( Exception e ) {}", "+", "+        if( colorStr != null ) {", "+            c = Color.decode( colorStr );", "+        }", "+", "+        jg.setBackground( c );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac87228df7c6c3e457a885a3ac7f3385", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "bb3d0554d44bc9c9665912f8de77451452b3b6cf", "commitAfterChange": "8b23a5ff1277c7020e2ba7e733dafae09723a1b7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public double getDiameter()", "signatureAfterChange": "     public double getDiameter()", "diff": ["+", "+        if (Double.isNaN(diameter)) {", "+            diameter = 0.0;", "+            int n = vertices.size();", "+            for (int i = 0; i < n; i++) {", "+                for (int j = 0; j < n; j++) {", "+                    if (!Double.isInfinite(d[i][j]) && d[i][j] > diameter) {", "+                        diameter = d[i][j];", "+                    }", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e667030a11b19821cd21c1fc3e9e9889", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public int degreeOf( Object vertex )", "signatureAfterChange": "     public int degreeOf( Object vertex )", "diff": ["-        return ( (UndirectedGraph) m_base ).degreeOf( vertex );", "+        assertVertexExist( vertex );", "+        ", "+        // sophisticated way to check runtime class of base ;-)", "+        ((UndirectedGraph)m_base).degreeOf( vertex );", "+        ", "+        int degree = 0;", "+", "+        for( Iterator i = m_base.edgesOf( vertex ).iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                degree++;", "+                if (e.getSource().equals(e.getTarget())) {", "+                    degree++;", "+                }", "+            }", "+        }", "+        ", "+        return degree;"]}]}
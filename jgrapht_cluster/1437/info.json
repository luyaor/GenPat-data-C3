{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45aa4a09682dd0f8ecb6555da4042f0e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6809414f9ab451c4b9dbbb56849fcc3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/DijkstraShortestPathTest.java", "commitBeforeChange": "e3d152c903d64a55a394899016d3b983c6acef7f", "commitAfterChange": "07571b88304723826e2edaac1a71e187c5b1dbe3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testPathBetween()", "signatureAfterChange": "      protected List findPathBetween(Graph g, String src, String dest)", "diff": ["-     */", "-    public void testPathBetween()", "+    protected List findPathBetween(Graph g, String src, String dest)", "-        List path;", "-        Graph g = create();", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V2);", "-        assertEquals(Arrays.asList(new Edge [] { m_e12 }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V4);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e12, m_e24", "-                }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V5);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e12, m_e24, m_e45", "-                }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V3, V4);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e13, m_e12, m_e24", "-                }), path);", "-    }", "+        return DijkstraShortestPath.findPathBetween(g, src, dest);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "774f1063b2693b986b0afaa6eceb91ef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "d79ec6041acc8bda7fb9ae9661101612bc9e3f76", "commitAfterChange": "50de6e6216fe4b60dd232640e1cfa249a213c47c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Object newSeenData( Object vertex, Edge edge )", "signatureAfterChange": "     private QueueEntry createSeenData( Object vertex, Edge edge )", "diff": ["-    protected Object newSeenData( Object vertex, Edge edge ) {", "-        double shortestPathLength;", "-        if( edge == null ) {", "-            shortestPathLength = 0;", "-        }", "-        else {", "-            shortestPathLength = calculatePathLength( vertex, edge );", "-        }", "-", "-        QueueEntry entry = new QueueEntry( shortestPathLength );", "-        entry.m_vertex               = vertex;", "-        entry.m_spanningTreeEdge     = edge;", "-", "-        return entry;", "+    private QueueEntry createSeenData( Object vertex, Edge edge ) {", "+        double shortestPathLength;", "+        if( edge == null ) {", "+            shortestPathLength = 0;", "+        }", "+        else {", "+            shortestPathLength = calculatePathLength( vertex, edge );", "+        QueueEntry entry = new QueueEntry( shortestPathLength );", "+        entry.m_vertex               = vertex;", "+        entry.m_spanningTreeEdge     = edge;", "+        return entry;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b2cafe04c3fe1f3f85eb9ff37d3e671", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35bf4bd990aab8cddffe2bb8838e19d5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "aa3bfda3799765b1a12cb238f8bd9573ca27d9b9", "commitAfterChange": "a1594c7a8cf14f3607828e0c2206c8cb46973c14", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-                if (!data.discovered) {", "+                if (!data.isDiscovered()) {", "-            // calculate inverse graph (i.e. every edge is reversed)", "-            DirectedGraph<V, E> inverseGraph =", "-                new DefaultDirectedGraph<V, E>(graph.getEdgeFactory());", "-            Graphs.addGraphReversed(inverseGraph, graph);", "+            // 'create' inverse graph (i.e. every edge is reversed)", "+            DirectedGraph<V, E> inverseGraph = new EdgeReversedGraph<V, E>(graph);", "-                if (!data.discovered) {", "+                if (!data.isDiscovered()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f39182b26772fb46b67123298ed84a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 49, "signatureBeforeChange": "         public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "signatureAfterChange": "         public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "diff": ["-                    if (e.getTarget().equals(targetVertex)) {", "+                    if (getEdgeTarget(e).equals(targetVertex)) {"]}]}
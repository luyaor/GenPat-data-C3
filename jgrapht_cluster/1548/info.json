{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4975c79c0ee533748162cb58af8bf9cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd13049dc95d4c16254f33eb3ed9ac3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\t \t\tpublic SubgraphWithString( \t\t\t\tDirectedGraph<String, DefaultEdge> graph, \t\t\t\tString str)", "signatureAfterChange": "          @Test     public void testRandomGraphsExhaustive()", "diff": ["-\t\t", "-\t\tpublic SubgraphWithString(", "-\t\t\t\tDirectedGraph<String, DefaultEdge> graph,", "-\t\t\t\tString str)", "-\t\t{", "-\t\t\tthis.graph = graph;", "-\t\t\tthis.str = str;", "-\t\t}", "+    ", "+    @Test", "+    public void testRandomGraphsExhaustive() {", "+        Random rnd = new Random();", "+        rnd.setSeed(12345);", "+        ", "+        for (int i = 1; i < 100; i++)    {", "+            int vertexCount    = 3 + rnd.nextInt(5),", "+                edgeCount      = rnd.nextInt(vertexCount * (vertexCount - 1)),", "+                subVertexCount = 2 + rnd.nextInt(vertexCount),", "+                subEdgeCount   = rnd.nextInt(subVertexCount * ", "+                                    (subVertexCount - 1));", "+            ", "+            DirectedGraph<Integer, DefaultEdge> g1 =", "+                SubgraphIsomorphismTestUtils.randomGraph(vertexCount,", "+                                edgeCount, i),", "+                                                g2 =", "+                SubgraphIsomorphismTestUtils.randomGraph(subVertexCount,", "+                                subEdgeCount, i);", "+            ", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1,", "+                                g2);", "+", "+            SubgraphIsomorphismTestUtils.showLog(i + \": \" + vertexCount +", "+                            \"v, \" + edgeCount + \"e ....\\n\");", "+", "+            assertEquals(true,", "+                SubgraphIsomorphismTestUtils.containsAllMatchings(vf2, g1, g2));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3af8871ef80f3e081c8db65142410ee", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "56c09b98e6df528eeef0b8df9f8d932a1ba40192", "commitAfterChange": "75098fa5c7281c0f169434b46722c0b4e66b3a8c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected boolean addJGraphEdge( org.jgraph.graph.Edge jEdge )", "signatureAfterChange": "     private void internalRemoveCell( GraphCell cell )", "diff": ["-    protected boolean addJGraphEdge( org.jgraph.graph.Edge jEdge ) {", "-        org._3pq.jgrapht.Edge jtEdge;", "-        Object                jSource = getSourceVertex( this, jEdge );", "-        Object                jTarget = getTargetVertex( this, jEdge );", "-", "-        if( !( m_cellToVertex.containsKey( jSource )", "-                && m_cellToVertex.containsKey( jTarget ) ) ) {", "-            // This is a 'dangling edge'. We have to remove it in the", "-            // JGraph.", "-            // TODO: Consider alternatives that will allow dangling edges.", "-            Object[] eArray = { jEdge };", "-            m_jEdgesBeingRemoved.add( jEdge );", "-            remove( eArray );", "-", "-            return false;", "-        }", "-", "-        Object jtSource = m_cellToVertex.get( jSource );", "-        Object jtTarget = m_cellToVertex.get( jTarget );", "-", "-        if( m_jtGraph instanceof UndirectedGraph ) {", "-            jtEdge = new UndirectedEdge( jtSource, jtTarget );", "-        }", "-        else if( m_jtGraph instanceof DirectedGraph ) {", "-            jtEdge = new DirectedEdge( jtSource, jtTarget );", "-            jtEdge =", "-                new org._3pq.jgrapht.edge.DefaultEdge( jtSource, jtTarget );", "-            // We use the JGraph DefaultEdge all the time, so we import", "-            // that and not this version.", "-        }", "-", "-        m_jtEdgesBeingAdded.add( jtEdge );", "-", "-        boolean result = m_jtGraph.addEdge( jtEdge );", "-", "-        if( result ) {", "-            m_cellToEdge.put( jEdge, jtEdge );", "-            m_edgeToCell.put( jtEdge, jEdge );", "-", "-            return true;", "-        }", "-        else {", "-            // Adding the edge failed. We have to remove it from the", "-            // JGraph too.", "-            remove( new Object[] { jEdge } );", "-", "-            return false;", "+     */", "+    private void internalRemoveCell( GraphCell cell ) {", "+        m_jCellsBeingRemoved.add( cell );", "+        remove( new Object[] { cell } );", "+        m_jCellsBeingRemoved.remove( cell );", "+    }"]}]}
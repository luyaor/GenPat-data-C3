{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7b5a8f7b4fd6d5fec9a843d4a512532", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db55f09fa14657b4aa52c3d06b19f2f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String [] args)", "signatureAfterChange": "     public static void main(String [] args)", "diff": ["-        Graph<Object,Edge<Object>> g = new Pseudograph<Object,Edge<Object>>();", "+        Graph<Object,DefaultEdge> g =", "+            new Pseudograph<Object,DefaultEdge>(DefaultEdge.class);", "-        for (Iterator i = new BreadthFirstIterator<Object,Edge<Object>>(g); i.hasNext();) {", "+        for (Iterator i = new BreadthFirstIterator<Object,DefaultEdge>(g); i.hasNext();) {", "-        for (Iterator i = new DepthFirstIterator<Object,Edge<Object>>(g); i.hasNext();) {", "+        for (Iterator i = new DepthFirstIterator<Object,DefaultEdge>(g); i.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ddc8957839e059660c089ec35ce3df", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String [] args)", "signatureAfterChange": "     public static void main(String [] args)", "diff": ["-        Graph g = new Pseudograph();", "+        Graph<Object,Edge<Object>> g = new Pseudograph<Object,Edge<Object>>();", "-        for (Iterator i = new BreadthFirstIterator(g); i.hasNext();) {", "+        for (Iterator i = new BreadthFirstIterator<Object,Edge<Object>,Object>(g); i.hasNext();) {", "-        for (Iterator i = new DepthFirstIterator(g); i.hasNext();) {", "+        for (Iterator i = new DepthFirstIterator<Object,Edge<Object>,Object>(g); i.hasNext();) {"]}]}
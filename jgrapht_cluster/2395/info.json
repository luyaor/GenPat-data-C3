{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d98b1002a58947d6df575bb37989be10", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556180db361750c44e60301249f04dda", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TransitiveReduction.java", "commitBeforeChange": "dc598aeea99bdfe17df08d02612a83157bf58529", "commitAfterChange": "8c43a5a1403dca2041b43ee00856b56c5e3d4dc0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     static void transformToPathMatrix(int[][] matrix)", "signatureAfterChange": "     static void transformToPathMatrix(BitSet[] matrix)", "diff": ["-    // (package visible for unit testing)", "-    static void transformToPathMatrix(int[][] matrix) {", "-        // compute path matrix ", "+     */", "+    static void transformToPathMatrix(BitSet[] matrix) {", "+        // compute path matrix", "-            for (int j = 0; j < matrix.length; j++) { ", "+            for (int j = 0; j < matrix.length; j++) {", "-                if (matrix[j][i] > 0 ){", "+                if (matrix[j].get(i)) {", "-                        if (matrix[j][k] == 0) {", "-                            matrix[j][k] = matrix[i][k];", "+                        if (!matrix[j].get(k)) {", "+                            matrix[j].set(k, matrix[i].get(k));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a25d5ac52935c64bd71bd41371186c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TransitiveReduction.java", "commitBeforeChange": "dc598aeea99bdfe17df08d02612a83157bf58529", "commitAfterChange": "8c43a5a1403dca2041b43ee00856b56c5e3d4dc0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     static void transitiveReduction(int[][] pathMatrix)", "signatureAfterChange": "     static void transitiveReduction(BitSet[] pathMatrix)", "diff": ["-    // (package visible for unit testing)", "-    static void transitiveReduction(int[][] pathMatrix) {", "+     */", "+    static void transitiveReduction(BitSet[] pathMatrix) {", "-        for (int j = 0; j < pathMatrix.length; j++) { ", "+        for (int j = 0; j < pathMatrix.length; j++) {", "-                if (pathMatrix[i][j] > 0){", "+                if (pathMatrix[i].get(j)) {", "-                        if (pathMatrix[j][k] > 0) {", "-                            pathMatrix[i][k] = 0;", "+                        if (pathMatrix[j].get(k)) {", "+                            pathMatrix[i].set(k, false);"]}]}
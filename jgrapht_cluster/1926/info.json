{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e4876cdd91353d5e305f53724946026", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d93994c6b4e355d92de19ae2b9ea23", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "       private void createEdgeList( ClosestFirstIterator iter, Object endVertex )", "signatureAfterChange": "       private void createEdgeList( ClosestFirstIterator<V, E> iter, V endVertex )", "diff": ["-    private void createEdgeList( ClosestFirstIterator iter, Object endVertex ) {", "+    private void createEdgeList( ClosestFirstIterator<V, E> iter, V endVertex ) {", "-            Edge edge = iter.getSpanningTreeEdge( endVertex );", "+            E edge = iter.getSpanningTreeEdge( endVertex );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0157187cfddaa3c14251c0c15d506fb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/MatrixExporter.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void exportAdjacencyMatrixVertex(PrintWriter out,             VertexNameProvider nameProvider, Object from, List neighbors)", "signatureAfterChange": "      private void exportAdjacencyMatrixVertex(PrintWriter out,         VertexNameProvider<V> nameProvider, V from, List<V> neighbors)", "diff": ["-            VertexNameProvider nameProvider, Object from, List neighbors)", "+        VertexNameProvider<V> nameProvider, V from, List<V> neighbors)", "-        Map<String,ModifiableInteger> counts = new LinkedHashMap<String,ModifiableInteger>();", "-        for (Object to : neighbors) {", "+        Map<String,ModifiableInteger> counts =", "+            new LinkedHashMap<String,ModifiableInteger>();", "+        for (V to : neighbors) {"]}]}
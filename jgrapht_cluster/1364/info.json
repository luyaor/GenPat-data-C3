{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "480bfb49a56bd34312d6be432e0fc7b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e77228f181dafba28337fd9e583bfa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "5e9dfdedbd0f501394dd50a31fc000abcac738de", "commitAfterChange": "0fa22166c3bce2b4318de51e3645ef9910304701", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static List findPathBetween( Graph graph, Object startVertex,         Object endVertex )", "signatureAfterChange": "     public static List findPathBetween( Graph graph, Object startVertex,         Object endVertex )", "diff": ["-        ClosestFirstIterator iter =", "-            new ClosestFirstIterator( graph, startVertex );", "+        DijkstraShortestPath alg =", "+            new DijkstraShortestPath( graph, startVertex, endVertex,", "+                Double.POSITIVE_INFINITY );", "-        while( iter.hasNext(  ) ) {", "-            Object vertex = iter.next(  );", "-", "-            if( vertex.equals( endVertex ) ) {", "-                return createPath( iter, endVertex );", "-            }", "-        }", "-", "-        return null;", "+        return alg.getPathEdgeList(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "893d10b8d996669f681d6b2912c32b4b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "5e9dfdedbd0f501394dd50a31fc000abcac738de", "commitAfterChange": "0fa22166c3bce2b4318de51e3645ef9910304701", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private DijkstraShortestPath(  )", "signatureAfterChange": "     public DijkstraShortestPath( Graph graph, Object startVertex,         Object endVertex, double radius )", "diff": ["-    private DijkstraShortestPath(  ) {} // ensure non-instantiability.", "+     */", "+    public DijkstraShortestPath( Graph graph, Object startVertex,", "+        Object endVertex, double radius ) {", "+        ClosestFirstIterator iter =", "+            new ClosestFirstIterator( graph, startVertex, radius );", "+", "+        while( iter.hasNext(  ) ) {", "+            Object vertex = iter.next(  );", "+", "+            if( vertex.equals( endVertex ) ) {", "+                createEdgeList( iter, endVertex );", "+                m_pathLength = iter.getShortestPathLength( endVertex );", "+", "+                return;", "+            }", "+        }", "+", "+        m_edgeList       = null;", "+        m_pathLength     = Double.POSITIVE_INFINITY;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea0a7189ac9fd9e7b22c633a09027b8a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad58784f590e54c58a8ec0f92171eef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "          E addEdge(V jtSource, V jtTarget)", "signatureAfterChange": "          E addEdge(V jtSource, V jtTarget)", "diff": ["-            E jtEdge = m_graph.getEdgeFactory().createEdge(jtSource, jtTarget);", "-            m_jtElementsBeingAdded.add(jtEdge);", "+            E jtEdge = graph.getEdgeFactory().createEdge(jtSource, jtTarget);", "+            jtElementsBeingAdded.add(jtEdge);", "-            boolean added = m_graph.addEdge(jtSource, jtTarget, jtEdge);", "-            m_jtElementsBeingAdded.remove(jtEdge);", "+            boolean added = graph.addEdge(jtSource, jtTarget, jtEdge);", "+            jtElementsBeingAdded.remove(jtEdge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec307414c44a8a56e93876cd41f2b1dd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/generate/WheelGraphGenerator.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void generateGraph(         Graph<V,E> target,         final VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V,E> target,         final VertexFactory<V> vertexFactory,         Map<String,V> resultMap)", "diff": ["-        if (m_size < 1) {", "+        if (size < 1) {", "-        RingGraphGenerator<V,E> ringGenerator = new RingGraphGenerator<V,E>(m_size - 1);", "+        RingGraphGenerator<V,E> ringGenerator = new RingGraphGenerator<V,E>(size - 1);", "-            if (m_inwardSpokes) {", "+            if (inwardSpokes) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "103d0645f68ab4a66e46813fd4e7dbcf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa497096fd9109703c918d7eba87d42c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/ShortestPathTestCase.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          protected Graph createWithBias(boolean negate)", "signatureAfterChange": "          protected Graph createWithBias(boolean negate)", "diff": ["-        Graph g;", "+        Graph<String,DefaultEdge> g;", "-            g = new SimpleDirectedWeightedGraph();", "+            g = new SimpleDirectedWeightedGraph(DefaultWeightedEdge.class);", "-            g = new SimpleWeightedGraph();", "+            g = new SimpleWeightedGraph(DefaultWeightedEdge.class);", "-        m_e12 = g.addEdge(V1, V2);", "-        m_e12.setWeight(bias * 2);", "+        m_e12 = Graphs.addEdge(g, V1, V2, bias * 2);", "-        m_e13 = g.addEdge(V1, V3);", "-        m_e13.setWeight(bias * 3);", "+        m_e13 = Graphs.addEdge(g, V1, V3, bias * 3);", "-        m_e24 = g.addEdge(V2, V4);", "-        m_e24.setWeight(bias * 5);", "+        m_e24 = Graphs.addEdge(g, V2, V4, bias * 5);", "-        m_e34 = g.addEdge(V3, V4);", "-        m_e34.setWeight(bias * 20);", "+        m_e34 = Graphs.addEdge(g, V3, V4, bias * 20);", "-        m_e45 = g.addEdge(V4, V5);", "-        m_e45.setWeight(bias * 5);", "+        m_e45 = Graphs.addEdge(g, V4, V5, bias * 5);", "-        m_e15 = g.addEdge(V1, V5);", "-        m_e15.setWeight(bias * 100);", "+        m_e15 = Graphs.addEdge(g, V1, V5, bias * 100);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6be4f68d35140feb63433fc10bd77a7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      DirectedGraph<String, DirectedEdge<String>> createDirectedGraph()", "signatureAfterChange": "      DirectedGraph<String, DefaultEdge> createDirectedGraph()", "diff": ["-    DirectedGraph<String, DirectedEdge<String>> createDirectedGraph()", "+    DirectedGraph<String, DefaultEdge> createDirectedGraph()", "-        DirectedGraph<String, DirectedEdge<String>> graph =", "-            new DefaultDirectedWeightedGraph<String, DirectedEdge<String>>();", "+        DirectedGraph<String, DefaultEdge> graph =", "+            new DefaultDirectedWeightedGraph<String, DefaultEdge>(", "+                DefaultWeightedEdge.class);", "-        graph.addEdge(v1, v3).setWeight(100);", "-        graph.addEdge(v2, v4).setWeight(1000);", "+        Graphs.addEdge(graph, v1, v3, 100);", "+        Graphs.addEdge(graph, v2, v4, 1000);", "-        graph.addEdge(v3, v6).setWeight(100);", "+        Graphs.addEdge(graph, v3, v6, 100);", "-        graph.addEdge(v5, v7).setWeight(200);", "+        Graphs.addEdge(graph, v5, v7, 200);", "-        graph.addEdge(v7, v8).setWeight(100);", "+        Graphs.addEdge(graph, v7, v8, 100);"]}]}
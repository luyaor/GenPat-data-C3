{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f5fd3de36fa56707b87bfe8371b0e2a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c4eac31017eabdca198c1fb95d84f34", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "845e2456c1fa20cb74282fa3134fa19f26c97fba", "commitAfterChange": "f194f6c0d4d2ddad695900dd9fe0e34f5eaad70f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate List<V> calculate(final V u)", "signatureAfterChange": " \tprivate List<V> calculate(final V u)", "diff": ["-\t\tif (g.getEdgeSource(vEdge).equals(u)) {", "-\t\t    V v = g.getEdgeTarget(vEdge);", "-\t\t    calculate(v);", "-\t\t    uf.union(u, v);", "-\t\t    ancestors.put(uf.find(u), u);", "-\t\t}", "-\t\tblack.add(u);", "-\t\tfor (LcaRequestResponse<V> current : lrr)", "-\t\t    if (current.getLca() == null) {", "-\t\t\tif (black.contains(current.getA()) && current.getB().equals(u)) {", "-\t\t\t    current.setLca(ancestors.get(uf.find(current.getA())));", "-\t\t\t}", "-\t\t\tif (black.contains(current.getB()) && current.getA().equals(u)) {", "-\t\t\t    current.setLca(ancestors.get(uf.find(current.getB())));", "-\t\t\t}", "-\t\t    }", "-\t    }", "+            if (g.getEdgeSource(vEdge).equals(u)) {", "+                V v = g.getEdgeTarget(vEdge);", "+                calculate(v);", "+                uf.union(u, v);", "+                ancestors.put(uf.find(u), u);", "+            }", "+            black.add(u);", "+", "+            Set<LcaRequestResponse<V>> uLRR = LRRMap.get(u);", "+            if (uLRR != null)", "+            {", "+                for (Iterator<LcaRequestResponse<V>> irr = uLRR.iterator(); irr.hasNext(); )", "+                {", "+                    LcaRequestResponse<V> rr = irr.next();", "+", "+                    if (black.contains(rr.getB()) && rr.getA().equals(u)) {", "+                        rr.setLca(ancestors.get(uf.find(rr.getB())));", "+                    }", "+                    if (black.contains(rr.getA()) && rr.getB().equals(u)) {", "+                        rr.setLca(ancestors.get(uf.find(rr.getA())));", "+                    }", "+", "+                    irr.remove();", "+                }", "+            }", "+        }", "+", "-\t    for (LcaRequestResponse<V> current : lrr) {", "-\t\tresult.add(current.getLca());", "+\t    for (LcaRequestResponse<V> current : LRR) {", "+\t\t    result.add(current.getLca());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba53c6c19340157b774e554506c448e2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "5e0a623da07f9a88365fbfbdcfe89366f3ec07c1", "commitAfterChange": "2bc963d635f1387003153797aed8f23b13ab7da1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate V calculate(final V u)", "signatureAfterChange": " \tprivate void calculate(final V u)", "diff": ["-\tprivate V calculate(final V u) {", "+\tprivate void calculate(final V u) {", "-\t\t    V result = calculate(v);", "-\t\t    // fraction horrible because of the recursion", "-\t\t    if (result != null)", "-\t\t\treturn result;", "+\t\t    calculate(v);", "-\t\tif (black.contains(a) && b.equals(u)) {", "-\t\t    return ancestors.get(uf.find(a));", "-\t\t}", "-\t\tif (black.contains(b) && a.equals(u)) {", "-\t\t    return ancestors.get(uf.find(b));", "-\t\t}", "+\t\tfor (LcaRequestResponse<V> current : lrr)", "+\t\t    if (current.getLca() == null) {", "+\t\t\tif (black.contains(current.getA()) && current.getB().equals(u)) {", "+\t\t\t    current.setLca(ancestors.get(uf.find(current.getA())));", "+\t\t\t}", "+\t\t\tif (black.contains(current.getB()) && current.getA().equals(u)) {", "+\t\t\t    current.setLca(ancestors.get(uf.find(current.getB())));", "+\t\t\t}", "+\t\t    }", "-\t    return null;"]}]}
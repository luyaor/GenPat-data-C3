{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "132f09d051146f9c2daa7f30c7e41a5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2e192a4e17ee2993732f71a2965a29", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "47ce261ef10be427a6a84aeeebb0d71750a4e26b", "commitAfterChange": "5b8b2def419b220aa57ca346f586e7cc6eacdd0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private List<String> skipComments()", "signatureAfterChange": "      private String[] skipComments()", "diff": ["-    private List<String> skipComments()", "+    private String[] skipComments()", "+        String[] cols = null;", "-            if (_in.ready()) {", "-                List<String> cols = split(_in.readLine());", "-                while (", "-                    cols.isEmpty()", "-                    || cols.get(0).equals(\"c\")", "-                    || cols.get(0).startsWith(\"%\"))", "-                {", "-                    cols = split(_in.readLine());", "-                }", "-                return cols;", "+            cols = split(_in.readLine());", "+            while (cols != null &&", "+                (cols.length == 0", "+                || cols[0].equals(\"c\")", "+                || cols[0].startsWith(\"%\")))", "+            {", "+                cols = split(_in.readLine());", "-        return null;", "+        return cols;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f73974b194b81f8f0afd5e5fcb77bc8c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void lazyCalculatePaths()", "signatureAfterChange": "     private void lazyCalculatePaths()", "diff": ["-     */", "-    private void lazyCalculatePaths()", "-    {", "-        // already we have calculated it once.", "-        if (paths != null) {", "-            return;", "-        }", "-", "-        lazyCalculateMatrix();", "-", "-        Map<VertexPair<V>, GraphPath<V, E>> sps =", "-            new HashMap<VertexPair<V>, GraphPath<V, E>>();", "-        int n = vertices.size();", "-", "-        nShortestPaths = 0;", "-        for (int i = 0; i < n; i++) {", "-            V v_i = vertices.get(i);", "-            for (int j = 0; j < n; j++) {", "-                // don't count this.", "-                if (i == j) {", "-                    continue;", "-                }", "-", "-                V v_j = vertices.get(j);", "-", "-                GraphPath<V, E> path = getShortestPathImpl(v_i, v_j);", "-", "-                // we got a path", "-                if (path != null) {", "-                    sps.put(new VertexPair<V>(v_i, v_j), path);", "-                    nShortestPaths++;", "-                }", "-            }", "-        }", "-", "-        this.paths = sps;", "+     */", "+    private void lazyCalculatePaths()", "+    {", "+        // already we have calculated it once.", "+        if (paths != null)", "+            return;", "+", "+        lazyCalculateMatrix();", "+", "+        paths=new LinkedHashMap<V, List<GraphPath<V, E>>>();", "+        int n = vertices.size();", "+        for (int i = 0; i < n; i++) {", "+            V v_i = vertices.get(i);", "+            paths.put(v_i, new ArrayList<GraphPath<V, E>>());", "+            for (int j = 0; j < n; j++) {", "+                if (i == j)", "+                    continue;", "+", "+                V v_j = vertices.get(j);", "+", "+                GraphPath<V, E> path = getShortestPath(v_i, v_j);", "+", "+                if (path != null) {", "+                    paths.get(v_i).add(path);", "+                    nShortestPaths++;", "+                }", "+            }", "+        }"]}]}
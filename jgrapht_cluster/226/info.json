{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46e80bac7a17a02b6a45e42716e9c225", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a3f13fdb0aa8408694ce7b8d096226", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceComparatorChainBase.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int equivalenceHashcode(Object arg1, Object context)", "signatureAfterChange": "     public int equivalenceHashcode(E arg1, C context)", "diff": ["-    public int equivalenceHashcode(Object arg1, Object context)", "+    public int equivalenceHashcode(E arg1, C context)", "-        for (ListIterator iter = this.chain.listIterator(); iter.hasNext();) {", "-            EquivalenceComparator currentComparator =", "-                (EquivalenceComparator) iter.next();", "+        for (ListIterator<EquivalenceComparator<? super E, ? super C>> iter = this.chain.listIterator();", "+             iter.hasNext();) {", "+            EquivalenceComparator<? super E, ? super C> currentComparator =", "+                iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50a0632c1743efab497913691fa8927", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "       private void addUnseenChildrenOf( Object vertex )", "signatureAfterChange": "       private void addUnseenChildrenOf( V vertex )", "diff": ["-    private void addUnseenChildrenOf( Object vertex ) {", "-        List edges = m_specifics.edgesOf( vertex );", "+    private void addUnseenChildrenOf( V vertex ) {", "+        List<E> edges = m_specifics.edgesOf( vertex );", "-        for( Iterator i = edges.iterator(  ); i.hasNext(  ); ) {", "-            Edge e = (Edge) i.next(  );", "+        for( Iterator<E> i = edges.iterator(  ); i.hasNext(  ); ) {", "+            E e = i.next(  );", "-            Object v = e.oppositeVertex( vertex );", "+            V v = e.oppositeVertex( vertex );"]}]}
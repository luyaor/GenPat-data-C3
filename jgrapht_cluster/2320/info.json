{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14e6dbd346e3f7bc793c5f3bb15afea0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a7701462fae388a5540acd154d115a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/AbstractPathElement.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected AbstractPathElement(         AbstractPathElement<V,E> pathElement, E edge)", "signatureAfterChange": "     protected AbstractPathElement(         Graph<V,E> graph,         AbstractPathElement<V,E> pathElement, E edge)", "diff": ["-        AbstractPathElement<V,E> pathElement, E edge) {", "-        this.vertex = edge.oppositeVertex(pathElement.getVertex());", "+        Graph<V,E> graph,", "+        AbstractPathElement<V,E> pathElement, E edge)", "+    {", "+        this.vertex = Graphs.getOppositeVertex(", "+            graph, edge, pathElement.getVertex());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "538ef5d404dfe23b97c558d9aa010ced", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/BellmanFordPathElement.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected BellmanFordPathElement(BellmanFordPathElement<V,E> pathElement,             E edge, double cost)", "signatureAfterChange": "     protected BellmanFordPathElement(         Graph<V,E> graph,         BellmanFordPathElement<V,E> pathElement,         E edge, double cost)", "diff": ["-    protected BellmanFordPathElement(BellmanFordPathElement<V,E> pathElement,", "-            E edge, double cost) {", "-        super(pathElement, edge);", "+    protected BellmanFordPathElement(", "+        Graph<V,E> graph,", "+        BellmanFordPathElement<V,E> pathElement,", "+        E edge, double cost)", "+    {", "+        super(graph, pathElement, edge);"]}]}
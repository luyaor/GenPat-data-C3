{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69f3528d6e27b79cf9e3aa1d2492f6bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ba023cf4a29c5bb875fcccec6205b70", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/touchgraph/TouchgraphConverter.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @SuppressWarnings(\"unchecked\") \tpublic Node convertToTouchGraph(Graph graph, TGPanel tgPanel,boolean selfReferencesAllowed) throws TGException", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\") \tpublic Node convertToTouchGraph(Graph<V,E> graph, TGPanel tgPanel,boolean selfReferencesAllowed) throws TGException", "diff": ["-\tpublic Node convertToTouchGraph(Graph graph, TGPanel tgPanel,boolean selfReferencesAllowed) throws TGException", "+\tpublic Node convertToTouchGraph(Graph<V,E> graph, TGPanel tgPanel,boolean selfReferencesAllowed) throws TGException", "-        Object[] jgtNodes = graph.vertexSet().toArray();", "-        Node[] tgNodes = new Node[jgtNodes.length];", "+        List<V> jgtNodes = new ArrayList<V>(graph.vertexSet());", "+        Node[] tgNodes = new Node[jgtNodes.size()];", "-        for (int i = 0; i < jgtNodes.length; i++) {", "+        for (int i = 0; i < jgtNodes.size(); i++) {", "-            if (jgtNodes[i] instanceof Node) {", "+            if (jgtNodes.get(i) instanceof Node) {", "-                n = (Node) jgtNodes[i];", "+                n = (Node) jgtNodes.get(i);", "-                n = new Node(jgtNodes[i].toString());", "+                n = new Node(jgtNodes.get(i).toString());", "-                    if (graph.getEdge(jgtNodes[i], jgtNodes[j]) != null) {", "+                    if (graph.getEdge(jgtNodes.get(i), jgtNodes.get(j)) != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f579666004eccf43213cfe45606eab", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void buildInternalNetwork()", "signatureAfterChange": "     public void calculateMaximumFlow(         V source,         V sink)", "diff": ["+    public void calculateMaximumFlow(", "+        V source,", "+        V sink)", "+        currentSource   = source;", "+        currentSink     = sink;", "+        build();", "-    // converting the original network into internal more convenient format", "-    private void buildInternalNetwork()", "-        numNodes = network.vertexSet().size();", "-        nodes = new ArrayList<Node>();", "-        Iterator<V> it = network.vertexSet().iterator();", "-        indexer = new HashMap<V, Integer>();", "-        for (int i = 0; i < numNodes; i++) {", "-            V currentNode = it.next();", "-            nodes.add(new Node(currentNode));", "-            indexer.put(currentNode, i);", "-        }", "-        for (int i = 0; i < numNodes; i++) {", "-            V we = nodes.get(i).prototype;", "-            for (E e : network.outgoingEdgesOf(we)) {", "-                V he = network.getEdgeTarget(e);", "-                int j = indexer.get(he);", "-                Arc e1 = new Arc(i, j, network.getEdgeWeight(e), e);", "-                Arc e2 = new Arc(j, i, 0.0, null);", "-                e1.reversed = e2;", "-                e2.reversed = e1;", "-                nodes.get(i).outgoingArcs.add(e1);", "-                nodes.get(j).outgoingArcs.add(e2);", "-            }", "-        }"]}]}
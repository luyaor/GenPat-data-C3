{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15aa8b792c9765b1537c60449d9d05d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83377fba60bf095448d1a159a2dd135", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/util/equivalence/EquivalenceGroupCreatorTest.java", "commitBeforeChange": "9a4730fe923a200a9ce0f4cf2dd7459ded43a3cc", "commitAfterChange": "73e96190e730d809ebfbbdace077df28c1f013ae", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void testOneComparator(         EquivalenceComparator comparator,         int expectedNumOfGroups,         String expectedResult)", "signatureAfterChange": "      private void testOneComparator(         EquivalenceComparator comparator,         int expectedNumOfGroups)", "diff": ["-        int expectedNumOfGroups,", "-        String expectedResult)", "+        int expectedNumOfGroups)", "+   ", "+        //assert the group order size is sorted.", "+        for (int i = 1; i < eqGroupArray.length; i++) {", "+\t\t\tEquivalenceSet set = eqGroupArray[i];", "+\t\t\tassertTrue(eqGroupArray[i].size() >= eqGroupArray[i-1].size());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe8682005bca60cd5908bb8ca0ec017a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "4c943d362622d305ac3ffd82365c8d7977e559f3", "commitAfterChange": "4cc84f1833081f548c22a81d0a3b67bd3072a3d7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "signatureAfterChange": "      public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "diff": ["-        this.vertices = vertices;       ", "+        this.vertices = vertices;", "+        ", "+        // Ensure the vertices form a path in the graph", "+        for (int i = 0; i < getVertexList().size() - 1; i++) {", "+            if (getGraph().getEdge(getVertexList().get(i), getVertexList().get(i + 1)) == null) {", "+                throw new IllegalArgumentException(\"The specified vertices do not form a path\");", "+            }", "+        }", "+        "]}]}
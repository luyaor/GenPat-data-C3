{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16a5168b9d172fb3aaf39f950379e99b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523f423b86ee17bebed2024402ec6874", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "32e726693126564b2b12d598445f88f10331d28b", "commitAfterChange": "329f725d890bc8909ea0cc963e9073bf1a9f56aa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private boolean isAlreadyImprovedBythisEdge(         E edge,         RankingPathElement<V, E> prevPathElement)", "signatureAfterChange": "      private boolean isAlreadyImprovedByThisEdge(         E edge,         RankingPathElement<V, E> prevPathElement)", "diff": ["-    private boolean isAlreadyImprovedBythisEdge(", "+    private boolean isAlreadyImprovedByThisEdge("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc21d7946d2ad99c602c8811182fb329", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "bc0edf459db61509a8a89769f512605e140e204b", "commitAfterChange": "be762e0954643fc21a24645a8b9b6765fa5b12ef", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected boolean areAllEdgesEquivivalant(IsomorphismRelation resultRelation,EquivalenceComparator edgeComparator)", "signatureAfterChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator edgeComparator)", "diff": ["-\t */", "-\tprotected boolean areAllEdgesEquivivalant(IsomorphismRelation resultRelation,EquivalenceComparator edgeComparator)", "-\t{", "-\t\tboolean checkResult=true;", "-\t\t", "-\t\tif (edgeComparator==null)", "-\t\t{", "-\t\t\t//nothing to check", "-\t\t\treturn true;", "-\t\t}", "-\t\t", "-\t\t", "-\t\ttry", "-\t\t{", "-\t\t\tSet edgeSet = this.graph1.edgeSet();", "-\t\t", "-\t\t\tfor (Iterator iter = edgeSet.iterator(); iter.hasNext();) ", "-\t\t\t{", "-\t\t\t\tEdge currEdge = (Edge) iter.next();", "-\t\t\t\tEdge correspondingEdge = (Edge)resultRelation.getCorrespondence(currEdge,true);", "-\t\t\t\t\t", "-\t\t\t\t//if one edge test fail , fail the whole method", "-\t\t\t\tif (!edgeComparator.equivalenceCompare(\tcurrEdge,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tcorrespondingEdge,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.graph1,", "-\t\t\t\t\t\t\t\t\t\t\t\t\tthis.graph2))", "-\t\t\t\t{", "-\t\t\t\t\tcheckResult=false;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tcatch (IllegalArgumentException illegal)", "-\t\t{", "-\t\t\tcheckResult=false;", "-\t\t}", "-\t\t", "-\t\t", "-\t\t", "-\t\t", "-\t\treturn checkResult;", "-\t}", "+     */", "+    protected boolean areAllEdgesEquivalent(", "+        IsomorphismRelation resultRelation,", "+        EquivalenceComparator edgeComparator)", "+    {", "+        boolean checkResult = true;", "+", "+        if (edgeComparator == null) {", "+            // nothing to check", "+            return true;", "+        }", "+", "+        try {", "+            Set edgeSet = this.graph1.edgeSet();", "+", "+            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "+                Edge currEdge = (Edge) iter.next();", "+                Edge correspondingEdge =", "+                    (Edge) resultRelation.getCorrespondence(currEdge, true);", "+", "+                // if one edge test fail , fail the whole method", "+                if (!edgeComparator.equivalenceCompare(", "+                        currEdge,", "+                        correspondingEdge,", "+                        this.graph1,", "+                        this.graph2)) {", "+                    checkResult = false;", "+                    break;", "+                }", "+            }", "+        } catch (IllegalArgumentException illegal) {", "+            checkResult = false;", "+        }", "+", "+        return checkResult;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffbe8c9178efbc0f0ef401bc38162e5c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tprivate void initializeVerticiesAndEdges()", "signatureAfterChange": " \t \tprivate void initializeVerticesAndEdges()", "diff": ["-\tprivate void initializeVerticiesAndEdges() {", "+\tprivate void initializeVerticesAndEdges() {"]}]}
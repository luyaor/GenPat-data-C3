{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2d3807d3cd361df9da34f4a1220b2ee", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "251d858c29fb37356b0df559356bf6dc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "31acef0c10b04a4d9507bb33a011a766c870c766", "commitAfterChange": "28851ba6f18793b718275deebcab4e40c016a084", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public Edge addEdge( Object sourceVertex, Object targetVertex, double weight )", "signatureAfterChange": "     public boolean addEdge( Edge e )", "diff": ["-     */", "-    public Edge addEdge( Object sourceVertex, Object targetVertex, double weight ) {", "-        Edge e = addEdge( sourceVertex, targetVertex );", "-", "-        if( e != null ) {", "-            ( (WeightedElement) e ).setWeight( weight );", "-        }", "-", "-        return e;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280e3c4a1d110b6b474934223dfb1498", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "diff": ["-    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "+    public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "+        if (graph.vertexSet().size() < 2)", "+            throw new IllegalArgumentException(", "+                    \"Graph has less than 2 vertices\");", "+        ", "+            if (graph.getEdgeWeight(e) < 0.0)", "+                throw new IllegalArgumentException(", "+                        \"Negative edge weights not allowed\");", "+", "-            DefaultWeightedEdge eNew = workingGraph.addEdge(sNew, tNew);", "-            workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e));", "+", "+            // For multigraphs, we sum the edge weights (either all are", "+            // contained in a cut, or none)", "+            DefaultWeightedEdge eNew = workingGraph.getEdge(sNew, tNew);", "+            if (eNew == null) {", "+                eNew = workingGraph.addEdge(sNew, tNew);", "+                workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e));", "+            } else", "+                workingGraph.setEdgeWeight(", "+                    eNew,", "+                    workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e));", "-        while (workingGraph.vertexSet().size() > 2) {", "+", "+        while (workingGraph.vertexSet().size() > 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ab5ff46e97c04a0ccbd15be754c73f7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/GraphUnion.java", "commitBeforeChange": "51364417691421b046a3518ca4b006f616254eda", "commitAfterChange": "408658ccffc992cefc062e77040a069f74fdf9a3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public double getEdgeWeight(E e)", "signatureAfterChange": "      public double getEdgeWeight(E e)", "diff": ["+        if (g1.containsEdge(e) && g2.containsEdge(e)) {", "+            return operator.operate(g1.getEdgeWeight(e), g2.getEdgeWeight(e));", "+        }", "+        if (g1.containsEdge(e)) {", "+            return g1.getEdgeWeight(e);", "+        }", "+        if (g2.containsEdge(e)) {", "+            return g2.getEdgeWeight(e);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7d0364bc0ea8d92f13c152a3225523", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-ext/src/main/java/org/jgrapht/ext/DOTImporter.java", "commitBeforeChange": "2cba8aef2cc77a406de26760e4f816581f7adba7", "commitAfterChange": "915acf67bde336fce1aee298fe506b6a9a961b70", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void validateLines(String[] lines) throws ImportException", "signatureAfterChange": "     private void validateLines(String[] lines,                               AbstractBaseGraph<V,E> graph)          throws ImportException", "diff": ["-   private void validateLines(String[] lines) throws ImportException", "+   private void validateLines(String[] lines,", "+                              AbstractBaseGraph<V,E> graph)", "+         throws ImportException", "-      String[] firstLine = lines[0].split(\" \", 3);", "-      if(firstLine.length != 3) {", "+      String[] firstLine = lines[0].split(\" \", 4);", "+      if(firstLine.length < 3) {", "-      if (!firstLine[0].equals(\"digraph\") && !firstLine[0].equals(\"graph\")) {", "+      int i = 0;", "+      if (graph.isAllowingMultipleEdges() && firstLine[i].equals(\"strict\")) {", "+         throw new ImportException(", "+               \"graph defines strict but Multigraph given.\"", "+         );", "+      } else if (firstLine[i].equals(\"strict\")) {", "+         i = i + 1;", "+      }", "+", "+      if (graph instanceof DirectedGraph && firstLine[i].equals(\"graph\") ) {", "+         throw new ImportException(", "+               \"input asks for undirected graph and directed graph provided.\"", "+         );", "+      } else if (!(graph instanceof DirectedGraph)", "+                 && firstLine[i].equals(\"digraph\")) {", "+         throw new ImportException(", "+               \"input asks for directed graph but undirected graph provided.\"", "+         );", "+      } else if(!firstLine[i].equals(\"graph\")", "+                && !firstLine[i].equals(\"digraph\")){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f19dfeff5f90b19b199d686cdac2ac4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean hasNext(  )", "signatureAfterChange": "     public boolean hasNext(  )", "diff": ["-        return !m_stack.isEmpty(  ) && isCrossComponentTraversal(  );", "+        if( m_stack.isEmpty(  ) ) {", "+            if( isCrossComponentTraversal(  ) ) {", "+                while( m_vertexIterator.hasNext(  ) ) {", "+                    Object v = m_vertexIterator.next(  );", "+", "+                    if( !m_seen.contains( v ) ) {", "+                        m_seen.add( v );", "+                        m_stack.add( v );", "+", "+                        return true;", "+                    }", "+                }", "+", "+                return false;", "+            }", "+            else {", "+                return false;", "+            }", "+        }", "+        else {", "+            return true;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54a4461e3672c3be7c01a6a7a3b7b590", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t@Test \tpublic void test2()", "signatureAfterChange": "          @Test     public void testRandomGraphs()", "diff": ["-\tpublic void test2() {", "-\t\tRandom rnd = new Random();", "-\t\trnd.setSeed(99999);", "-\t\t", "-\t\tfor (int i = 1; i < 50; i++)\t{", "-\t\t\tint vertexCount = 2 + rnd.nextInt(i),", "-\t\t\t\tedgeCount = rnd.nextInt(vertexCount * (vertexCount - 1)),", "-\t\t\t\tsubVertexCount = 1 + rnd.nextInt(vertexCount);", "-\t\t\tSystem.out.print(i + \": \" + vertexCount + \"v, \" + edgeCount + \"e \");", "-\t\t\tassertEquals(true, singleTest(vertexCount, edgeCount, subVertexCount, i));", "-\t\t}", "-\t}", "+    ", "+    @Test", "+    public void testRandomGraphs() {", "+        Random rnd = new Random();", "+        rnd.setSeed(54321);", "+        ", "+        for (int i = 1; i < 50; i++)    {", "+            int vertexCount    = 2 + rnd.nextInt(i),", "+                edgeCount      = vertexCount + ", "+                    rnd.nextInt(vertexCount * (vertexCount - 1)) / 2,", "+                subVertexCount = 1 + rnd.nextInt(vertexCount);", "+            ", "+            DirectedGraph<Integer, DefaultEdge> g1 =", "+                SubgraphIsomorphismTestUtils.randomGraph(vertexCount,", "+                                edgeCount, i),", "+                                                g2 =", "+                SubgraphIsomorphismTestUtils.randomSubgraph(g1, subVertexCount,", "+                                i);", "+            ", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1,", "+                                g2);", "+", "+            SubgraphIsomorphismTestUtils.showLog(i + \": \" + vertexCount +", "+                            \"v, \" + edgeCount + \"e \");", "+            ", "+            while (vf2.hasNext())   {", "+                assertEquals(true,", "+                    SubgraphIsomorphismTestUtils.isCorrectMatching(vf2.next(),", "+                                    g1, g2));", "+                SubgraphIsomorphismTestUtils.showLog(\".\");", "+            }", "+            SubgraphIsomorphismTestUtils.showLog(\"\\n\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5962fd9deeb82f69257bddb188138500", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "5e0a623da07f9a88365fbfbdcfe89366f3ec07c1", "commitAfterChange": "2bc963d635f1387003153797aed8f23b13ab7da1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void dagTest()", "signatureAfterChange": "      @Test     public void dagTest()", "diff": ["+\t// now all together in one call", "+\t", "+\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"g\");", "+\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"e\", \"d\");", "+\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"f\", \"d\");", "+\tnew TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", bg, ed, fd);", "+\tAssert.assertEquals(\"b\",bg.getLca());", "+\tAssert.assertEquals(\"b\",ed.getLca());", "+\tAssert.assertEquals(\"d\",fd.getLca());", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b1fe65feff4508722c7d23f9893d12", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPaths.java", "commitBeforeChange": "d11cabd1aabdc954107d901bc835dd46e2c5b915", "commitAfterChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "signatureAfterChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "diff": ["-    public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "-    {", "+    public List<RankingPathElement<V, E>> getPathElements(V endVertex) {", "-        lazyCalculate();", "+        KShortestPathsIterator<V, E> iter = new KShortestPathsIterator<V, E>(", "+                this.graph, this.startVertex, endVertex, this.nPaths);", "-        return this.iter.getPathElements(endVertex);", "+        // at the i-th pass the shortest paths with less (or equal) than i edges", "+        // are calculated.", "+        for (int passNumber = 1; (passNumber <= this.nMaxHops)", "+                && iter.hasNext(); passNumber++) {", "+            iter.next();", "+        }", "+", "+        return iter.getPathElements(endVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b4c2e5749bbae79009ca05d2e1da26c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "031459d6e58bfab7227c1f29575f466935e4a228", "commitAfterChange": "4f70257bd051e3e96df9996dad40065743a630ec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDag()", "signatureAfterChange": "      @Test     public void testNonBinaryTree()", "diff": ["-    public void testDag() {", "+    public void testNonBinaryTree() {", "+\tg.addVertex(\"h\");", "+\tg.addVertex(\"i\");", "+\tg.addVertex(\"j\");", "-\tg.addEdge(\"d\", \"f\");", "-\tg.addEdge(\"b\", \"e\");", "-\tg.addEdge(\"e\", \"f\");", "-\tg.addEdge(\"f\", \"g\");", "+\tg.addEdge(\"d\", \"e\");", "+\tg.addEdge(\"b\", \"f\");", "+\tg.addEdge(\"b\", \"g\");", "+\tg.addEdge(\"c\", \"h\");", "+\tg.addEdge(\"c\", \"i\");", "+\tg.addEdge(\"i\", \"j\");", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"b\", \"g\"));", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"e\", \"d\"));", "-\tAssert.assertEquals(\"d\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"f\", \"d\"));", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"b\", \"h\"));", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"j\", \"f\"));", "+\tAssert.assertEquals(\"c\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"j\", \"h\"));", "-\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"g\");", "-\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"e\", \"d\");", "-\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"f\", \"d\");", "+\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"h\");", "+\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"j\", \"f\");", "+\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"j\", \"h\");", "-\t", "-\tAssert.assertEquals(\"d\",fd.getLca());", "+\tAssert.assertEquals(\"c\",fd.getLca());", "-\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"d\"}),result);", "+\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"c\"}),result);", "-\t", "-\t// test it the other way around", "-\tAssert.assertEquals(\"d\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"d\", \"f\"));", "+\t// test it the other way around and starting from b", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"b\", \"h\", \"b\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f782fa3e79e86e55683bd754808be49", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "2bc963d635f1387003153797aed8f23b13ab7da1", "commitAfterChange": "a4290d9c2b951f2351aab06bfad84c59bf804b25", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void dagTest()", "signatureAfterChange": "      @Test     public void dagTest()", "diff": ["-\tnew TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", bg, ed, fd);", "+\tList<LcaRequestResponse<String>> list = new LinkedList<LcaRequestResponse<String>> ();", "+\tlist.add(bg);", "+\tlist.add(ed);", "+\tlist.add(fd);", "+\t", "+\tList<String> result = new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", list);", "+\t// check that the mutable input parameters have changed", "+\t// check the returned result is correct", "+\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"d\"}),result);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf0a98ea648c857eba59a694c9c749d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/FloydWarshallShortestPathsTest.java", "commitBeforeChange": "c10692c8825bd6a23a80be695fc74f32cb5058c3", "commitAfterChange": "c164d5ff2c90e3264f68d1cabaf47b148cefd48c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testCompareWithDijkstra()", "signatureAfterChange": "      public void testCompareWithDijkstra()", "diff": ["-            SimpleDirectedGraph<Integer, DefaultWeightedEdge> directed =", "-                new SimpleDirectedGraph<Integer, DefaultWeightedEdge>(", "-                    DefaultWeightedEdge.class);", "-", "+            //Generate directed graph", "+            SimpleDirectedGraph<Integer, DefaultWeightedEdge> directed =new SimpleDirectedGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-            FloydWarshallShortestPaths<Integer, DefaultWeightedEdge> fw =", "-                new FloydWarshallShortestPaths<Integer, DefaultWeightedEdge>(", "-                    directed);", "+            FloydWarshallShortestPaths<Integer, DefaultWeightedEdge> fw =new FloydWarshallShortestPaths<Integer, DefaultWeightedEdge>(directed);", "-                    assertTrue(", "-                        (Math.abs(dijSp - fwSp) < .01)", "-                        || (Double.isInfinite(fwSp)", "-                            && Double.isInfinite(dijSp)));", "+                    assertTrue( (Math.abs(dijSp - fwSp) < .01) || (Double.isInfinite(fwSp) && Double.isInfinite(dijSp)));", "+                    GraphPath<Integer, DefaultWeightedEdge> path=fw.getShortestPath(v1, v2);", "+                    if(path != null)", "+                        this.verifyPath(directed, path, fw.shortestDistance(v1, v2));", "-            SimpleGraph<Integer, DefaultWeightedEdge> undirected =", "-                new SimpleGraph<Integer, DefaultWeightedEdge>(", "-                    DefaultWeightedEdge.class);", "-", "+            //Generate Undirected graph", "+            SimpleGraph<Integer, DefaultWeightedEdge> undirected =new SimpleGraph<Integer, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-                    assertTrue(", "-                        (Math.abs(dijSp - fwSp) < .01)", "-                        || (Double.isInfinite(fwSp)", "-                            && Double.isInfinite(dijSp)));", "+                    assertTrue((Math.abs(dijSp - fwSp) < .01) || (Double.isInfinite(fwSp) && Double.isInfinite(dijSp)));", "+                    GraphPath<Integer, DefaultWeightedEdge> path=fw.getShortestPath(v1, v2);", "+                    if(path != null)", "+                        this.verifyPath(undirected, path, fw.shortestDistance(v1, v2));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89128eaa2d36c684076757f5e414267", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void lazyCalculateMatrix()", "signatureAfterChange": "     private void lazyCalculateMatrix()", "diff": ["-        boolean directed = graph instanceof DirectedGraph<?, ?>;", "-        Set<E> edges = graph.edgeSet();", "-        for (E edge : edges) {", "-            V v1 = graph.getEdgeSource(edge);", "-            V v2 = graph.getEdgeTarget(edge);", "-", "-            int v_1 = vertexIndices.get(v1);", "-            int v_2 = vertexIndices.get(v2);", "-", "-            d[v_1][v_2] = graph.getEdgeWeight(edge);", "-            if (!directed) {", "-                d[v_2][v_1] = graph.getEdgeWeight(edge);", "+        if(graph instanceof  UndirectedGraph<?, ?>){", "+            for (E edge : graph.edgeSet()) {", "+                int v_1 = vertexIndices.get(graph.getEdgeSource(edge));", "+                int v_2 = vertexIndices.get(graph.getEdgeTarget(edge));", "+                d[v_1][v_2] =d[v_2][v_1] =graph.getEdgeWeight(edge);", "+            }", "+        }else{ //This works for both Directed and Mixed graphs! Iterating over the arcs and querying source/sink does not suffice for graphs which contain both edges and arcs", "+            DirectedGraph<V,E> directedGraph=(DirectedGraph<V,E>)graph;", "+            for(V v1 : directedGraph.vertexSet()){", "+                for(V v2 : Graphs.successorListOf(directedGraph, v1)){", "+                    int v_1 = vertexIndices.get(v1);", "+                    int v_2 = vertexIndices.get(v2);", "+                    d[v_1][v_2] =directedGraph.getEdgeWeight(directedGraph.getEdge(v1, v2));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b62881abe29831b2a2866fe09651b218", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/traverse/TopologicalOrderIteratorTest.java", "commitBeforeChange": "c1e98e457a2adb044205f41f69a1d82302d01f95", "commitAfterChange": "8316f7f6925a27a68144a29e786f635edd8065d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testRecipe()", "signatureAfterChange": "     public void testRecipe()", "diff": ["+", "+        // Test with a reversed view", "+        DirectedGraph<String, DefaultEdge> reversed =", "+            new EdgeReversedGraph<String, DefaultEdge>(graph);", "+        ", "+        iter =", "+            new TopologicalOrderIterator<String, DefaultEdge>(reversed);", "+        i = v.length - 1;", "+", "+        while (iter.hasNext()) {", "+            assertEquals(v[i], iter.next());", "+            --i;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6cc73e364ba7ff23c3d42dd79d68c71", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/FloydWarshallShortestPathsTest.java", "commitBeforeChange": "c10692c8825bd6a23a80be695fc74f32cb5058c3", "commitAfterChange": "c164d5ff2c90e3264f68d1cabaf47b148cefd48c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testWeightedEdges()", "signatureAfterChange": "          public void testWeightedEdges()", "diff": ["-    \tSimpleGraph<String, DefaultWeightedEdge> weighted = ", "-    \t\tnew SimpleGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "+    \tSimpleDirectedGraph<String, DefaultWeightedEdge> weighted =", "+    \t\tnew SimpleDirectedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);", "-    \tweighted.setEdgeWeight(weighted.addEdge(\"a\", \"b\"), 5.0);", "-    \tFloydWarshallShortestPaths<String, DefaultWeightedEdge> fw =", "-                new FloydWarshallShortestPaths<String, DefaultWeightedEdge>(weighted);", "+        DefaultWeightedEdge edge=weighted.addEdge(\"a\", \"b\");", "+    \tweighted.setEdgeWeight(edge, 5.0);", "+    \tFloydWarshallShortestPaths<String, DefaultWeightedEdge> fw =new FloydWarshallShortestPaths<String, DefaultWeightedEdge>(weighted);", "+        GraphPath<String, DefaultWeightedEdge> path=fw.getShortestPath(\"a\", \"b\");", "+        assertNotNull(path);", "+        assertEquals(Arrays.asList(edge), path.getEdgeList());", "+        assertEquals(\"a\", path.getStartVertex());", "+        assertEquals(\"b\", path.getEndVertex());", "+        assertEquals(5.0, path.getWeight());", "+        assertEquals(weighted, path.getGraph());", "+        assertNull(fw.getShortestPath(\"b\", \"a\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e01d9c1655d4066001a9655747b2b501", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/ext/DOTExporterTest.java", "commitBeforeChange": "58ffe75d7011b97e5d82e9b962f083efeda5131c", "commitAfterChange": "e161419b51eb823c1e9daf9244639d8ff587282c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testUndirected()", "signatureAfterChange": "      public void testUndirected()", "diff": ["+        ComponentAttributeProvider<String> vertexAttributeProvider =", "+            new ComponentAttributeProvider<String>() ", "+            {", "+                public Map<String, String> getComponentAttributes(String v)", "+                {", "+                    Map<String, String> map =", "+                        new LinkedHashMap<String, String>();", "+                    if (v.equals(V1)) {", "+                        map.put(\"label\", \"a\");", "+                    } else if (v.equals(V2)) {", "+                        map.put(\"x\", \"y\");", "+                    } else {", "+                        map = null;", "+                    }", "+                    return map;", "+                }", "+            };", "+        DOTExporter<String, DefaultEdge> exporter =", "+            new DOTExporter<String, DefaultEdge>(", "+                new IntegerNameProvider<String>(),", "+                null,", "+                null,", "+                vertexAttributeProvider,", "+                null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e037456083d047f4c2b8cc7a52c8ed09", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/EqualsTest.java", "commitBeforeChange": "d31c0a461f002b1bbca978a729161e05d339538a", "commitAfterChange": "ee11f3bf4fcb52f92037c518ce52556a0f7dfbad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testDefaultDirectedGraph()", "signatureAfterChange": "     public void testDefaultDirectedGraph()", "diff": ["+        DirectedGraph<String, DefaultEdge> g3 = ", "+            new DefaultDirectedGraph<String, DefaultEdge>(", "+                DefaultEdge.class);", "+       g3.addVertex(v4);", "+       g3.addVertex(v3);", "+       g3.addVertex(v2);", "+       g3.addVertex(v1);", "+       g3.addEdge(v3, v1);", "+       g3.addEdge(v2, v3);", "+", "+        assertTrue(!g3.equals(g2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaaea7726468e4d7cf9ad76438a9ae32", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmBase.java", "commitBeforeChange": "024fc7b86a9ced21b7444077ac5895f2b6a50bf9", "commitAfterChange": "54d7e11e1ecaccdb80a1aeb9ea081aac7e5d3e46", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private EdgeExtensionBase createInverse(EdgeExtensionBase ex)", "signatureAfterChange": "      private EdgeExtensionBase createInverse(EdgeExtensionBase ex, DirectedGraph<V, E> n)", "diff": ["-    private EdgeExtensionBase createInverse(EdgeExtensionBase ex) {", "-        EdgeExtensionBase iex = null;", "-        try {", "+", "+    private EdgeExtensionBase createInverse(EdgeExtensionBase ex, DirectedGraph<V, E> n) {", "+        EdgeExtensionBase iex;", "+", "+        if (n.containsEdge(ex.target.prototype, ex.source.prototype)) {", "+            E ie = n.getEdge(ex.target.prototype, ex.source.prototype);", "+            iex = createEdge(ex.target, ex.source, ie, n.getEdgeWeight(ie));", "+        } else {", "-", "-            ex.inverse  = iex;", "-            iex.inverse = ex;", "-", "-        } catch (IllegalAccessException e) {", "-            e.printStackTrace();", "-        } catch (InstantiationException e) {", "-            e.printStackTrace();", "+        ex.inverse  = iex;", "+        iex.inverse = ex;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40dc0dec4ebf5bbf5eb7079fcd06e61", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "47ce261ef10be427a6a84aeeebb0d71750a4e26b", "commitAfterChange": "5b8b2def419b220aa57ca346f586e7cc6eacdd0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void generateGraph(         Graph<V, E> target,         VertexFactory<V> vertexFactory,         Map<String, V> resultMap)", "signatureAfterChange": "     public void generateGraph(         Graph<V, E> target,         VertexFactory<V> vertexFactory,         Map<String, V> resultMap)", "diff": ["-        List<String> cols = skipComments();", "+        String[] cols = skipComments();", "-            if (cols.get(0).equals(\"e\")) {", "-                target.addEdge(", "-                    resultMap.get(cols.get(1)),", "-                    resultMap.get(cols.get(2)));", "+            if (cols[0].equals(\"e\")) {", "+                E edge = target.addEdge(", "+                    resultMap.get(cols[1]),", "+                    resultMap.get(cols[2]));", "+                if (_isWeighted && edge != null) {", "+                    double weight = _defaultWeight;", "+                    if (cols.length > 3) {", "+                        weight = Double.parseDouble(cols[3]);", "+                    }", "+                    ((WeightedGraph<V,E>)target).setEdgeWeight(edge, weight);", "+                }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f439469e3ea5b8bc61894fe25b07b5a7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/DOTExporter.java", "commitBeforeChange": "58ffe75d7011b97e5d82e9b962f083efeda5131c", "commitAfterChange": "e161419b51eb823c1e9daf9244639d8ff587282c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void export(Writer writer, Graph<V, E> g)", "signatureAfterChange": "     public void export(Writer writer, Graph<V, E> g)", "diff": ["+            String labelName = null;", "-                out.print(", "-                    \" [label = \\\"\" + vertexLabelProvider.getVertexName(v)", "-                    + \"\\\"]\");", "+                labelName = vertexLabelProvider.getVertexName(v);", "+            Map<String, String> attributes = null;", "+            if (vertexAttributeProvider != null) {", "+                attributes = vertexAttributeProvider.getComponentAttributes(v);", "+            }", "+            renderAttributes(out, labelName, attributes);", "+            String labelName = null;", "-                out.print(", "-                    \" [label = \\\"\" + edgeLabelProvider.getEdgeName(e) + \"\\\"]\");", "+                labelName = edgeLabelProvider.getEdgeName(e);", "+            Map<String, String> attributes = null;", "+            if (edgeAttributeProvider != null) {", "+                attributes = edgeAttributeProvider.getComponentAttributes(e);", "+            }", "+            renderAttributes(out, labelName, attributes);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06af2a95d259cf03bd78d3942d47080c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "834e756c6a369a22a742fd3c2fbff89c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void consolidate()", "signatureAfterChange": "     protected void consolidate()", "diff": ["-        int arraySize = m_n + 1;", "+        int arraySize = nNodes + 1;", "-        FibonacciHeapNode<T> x = m_min;", "+        FibonacciHeapNode<T> x = minNode;", "-            x = x.m_right;", "+            x = x.right;", "-            while (x != m_min) {", "+            while (x != minNode) {", "-                x = x.m_right;", "+                x = x.right;", "-            int d = x.m_degree;", "-            FibonacciHeapNode<T> next = x.m_right;", "+            int d = x.degree;", "+            FibonacciHeapNode<T> next = x.right;", "-                if (x.m_key > y.m_key) {", "+                if (x.key > y.key) {", "-        m_min = null;", "+        minNode = null;", "-                if (m_min != null) {", "+                if (minNode != null) {", "-                    array.get(i).m_left.m_right = array.get(i).m_right;", "-                    array.get(i).m_right.m_left = array.get(i).m_left;", "+                    array.get(i).left.right = array.get(i).right;", "+                    array.get(i).right.left = array.get(i).left;", "-                    array.get(i).m_left = m_min;", "-                    array.get(i).m_right = m_min.m_right;", "-                    m_min.m_right = array.get(i);", "-                    array.get(i).m_right.m_left = array.get(i);", "+                    array.get(i).left = minNode;", "+                    array.get(i).right = minNode.right;", "+                    minNode.right = array.get(i);", "+                    array.get(i).right.left = array.get(i);", "-                    if (array.get(i).m_key < m_min.m_key) {", "-                        m_min = array.get(i);", "+                    if (array.get(i).key < minNode.key) {", "+                        minNode = array.get(i);", "-                    m_min = array.get(i);", "+                    minNode = array.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e3eb7641699e01df8ff21cec7636c1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "22aa7e82f42fce210220bdbc283c0138f6f5ab70", "commitAfterChange": "0f3a10c6ea5258c0add31f2c1eb0ac64b015315a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void consolidate()", "signatureAfterChange": "      protected void consolidate()", "diff": ["-     */", "-        int arraySize = nNodes + 1;", "+        int arraySize =", "+            ((int) Math.floor(Math.log(nNodes) * oneOverLogPhi)) + 1;", "+", "-            while (array.get(d) != null) {", "-                // There is, make one of the nodes a child of the other.", "+            for (;;) {", "+                if (y == null) {", "+                    // Nope.", "+                    break;", "+                }", "+                // There is, make one of the nodes a child of the other.", "-            if (array.get(i) != null) {", "-                // We've got a live one, add it to root list.", "-                if (minNode != null) {", "-                    // First remove node from root list.", "-                    array.get(i).left.right = array.get(i).right;", "-                    array.get(i).right.left = array.get(i).left;", "+            FibonacciHeapNode<T> y = array.get(i);", "+            if (y == null) {", "+                continue;", "+            }", "+            // We've got a live one, add it to root list.", "+            if (minNode != null) {", "+                // First remove node from root list.", "+                y.left.right = y.right;", "+                y.right.left = y.left;", "-                    // Now add to root list, again.", "-                    array.get(i).left = minNode;", "-                    array.get(i).right = minNode.right;", "-                    minNode.right = array.get(i);", "-                    array.get(i).right.left = array.get(i);", "+                // Now add to root list, again.", "+                y.left = minNode;", "+                y.right = minNode.right;", "+                minNode.right = y;", "+                y.right.left = y;", "-                    // Check if this is a new min.", "-                    if (array.get(i).key < minNode.key) {", "-                        minNode = array.get(i);", "-                    }", "-                } else {", "-                    minNode = array.get(i);", "+                // Check if this is a new min.", "+                if (y.key < minNode.key) {", "+                    minNode = y;", "+            } else {", "+                minNode = y;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd7ebaffb46947b396130e363aba0a68", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public FibonacciHeapNode<T> removeMin()", "signatureAfterChange": "     public FibonacciHeapNode<T> removeMin()", "diff": ["-        FibonacciHeapNode<T> z = m_min;", "+        FibonacciHeapNode<T> z = minNode;", "-            int numKids = z.m_degree;", "-            FibonacciHeapNode<T> x = z.m_child;", "+            int numKids = z.degree;", "+            FibonacciHeapNode<T> x = z.child;", "-                tempRight = x.m_right;", "+                tempRight = x.right;", "-                x.m_left.m_right = x.m_right;", "-                x.m_right.m_left = x.m_left;", "+                x.left.right = x.right;", "+                x.right.left = x.left;", "-                x.m_left = m_min;", "-                x.m_right = m_min.m_right;", "-                m_min.m_right = x;", "-                x.m_right.m_left = x;", "+                x.left = minNode;", "+                x.right = minNode.right;", "+                minNode.right = x;", "+                x.right.left = x;", "-                x.m_parent = null;", "+                x.parent = null;", "-            z.m_left.m_right = z.m_right;", "-            z.m_right.m_left = z.m_left;", "+            z.left.right = z.right;", "+            z.right.left = z.left;", "-            if (z == z.m_right) {", "-                m_min = null;", "+            if (z == z.right) {", "+                minNode = null;", "-                m_min = z.m_right;", "+                minNode = z.right;", "-            m_n--;", "+            nNodes--;"]}]}
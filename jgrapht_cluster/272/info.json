{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba719ba579d04bfccb5bfaafcdb5c4b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7830144243024acf81e03139f3f482ca", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/isomorphism/IsomorphismRelation.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void initGraphMapping()", "signatureAfterChange": "     private void initGraphMapping()", "diff": ["-        int mapSize = graph1vertexArray.length;", "-        Map g1ToG2 = new HashMap(mapSize);", "-        Map g2ToG1 = new HashMap(mapSize);", "+        int mapSize = vertexList1.size();", "+        Map<V,V> g1ToG2 = new HashMap<V,V>(mapSize);", "+        Map<V,V> g2ToG1 = new HashMap<V,V>(mapSize);", "-            Object source = this.graph1vertexArray[i];", "-            Object target = this.graph2vertexArray[i];", "+            V source = this.vertexList1.get(i);", "+            V target = this.vertexList2.get(i);", "-            new DefaultGraphMapping(g1ToG2, g2ToG1, this.graph1, this.graph2);", "+            new DefaultGraphMapping<V,E>(", "+                g1ToG2, g2ToG1, this.graph1, this.graph2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16326a335acb00173dcfeb6b7940a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static void addGraphReversed(         DirectedGraph destination,         DirectedGraph source)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\" \tpublic static <V, E extends DirEdge<V>> void addGraphReversed(         DirectedGraph<V,E> destination,         DirectedGraph<V,E> source)", "diff": ["-    public static void addGraphReversed(", "-        DirectedGraph destination,", "-        DirectedGraph source)", "+    @SuppressWarnings(\"unchecked\")\t// FIXME hb 28-nov-05: See below", "+\tpublic static <V, E extends DirEdge<V>> void addGraphReversed(", "+        DirectedGraph<V,E> destination,", "+        DirectedGraph<V,E> source)", "-        Iterator edgesIter = source.edgeSet().iterator();", "-", "-        while (edgesIter.hasNext()) {", "-            DirectedEdge edge = (DirectedEdge) edgesIter.next();", "-            DirectedEdge reversedEdge =", "-                new DirectedEdge(edge.getTarget(), edge.getSource());", "-            destination.addEdge(reversedEdge);", "+        for (E edge : source.edgeSet()) {", "+        \t//FIXME hb 26-Nov-05: Use the edge factory of src, dst, or passed as a parameter to create edges", "+        \tE reversedEdge =", "+        \t\t(E)new DirectedEdge<V>(edge.getTarget(), edge.getSource());", "+        \tdestination.addEdge(reversedEdge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f8ec907e719b87cff284fb223a23c0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/alg/DijkstraAlgorithm.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final WeightedGraph optimumPathTree(Object from)", "signatureAfterChange": "     public final WeightedGraph<V,E> optimumPathTree(V from)", "diff": ["-    public final WeightedGraph optimumPathTree(Object from)", "+    public final WeightedGraph<V,E> optimumPathTree(V from)", "-        WeightedGraph optimumPathTree;", "+        WeightedGraph<V,E> optimumPathTree;", "-            optimumPathTree = new SimpleDirectedWeightedGraph();", "+        \t//FIXME hb 051124: I would like to pass Edge<V> instead of DirectedEdge and remove the cast", "+            optimumPathTree = (WeightedGraph<V,E>)new SimpleDirectedWeightedGraph<V,DirEdge<V>>();", "-            optimumPathTree = new SimpleWeightedGraph();", "+            optimumPathTree = new SimpleWeightedGraph<V,E>();", "-        for (Iterator it = _wgraph.vertexSet().iterator(); it.hasNext();) {", "+        for (Iterator<V> it = _wgraph.vertexSet().iterator(); it.hasNext();) {", "-            Object v = hv.getVertex();", "-            Edge treeEdge = (Edge) hv.getAdditional();", "+            V v = (V)hv.getVertex();\t\t\t\t//FIXME hb 051124: Remove cast", "+            E treeEdge = (E) hv.getAdditional();\t//FIXME hb 051124: Remove cast", "-            Iterator edges;", "+            Iterator<? extends Edge<V>> edges;", "-                    ((DirectedGraph) _wgraph).outgoingEdgesOf(v).iterator();", "+                    ((DirectedGraph<V,DirEdge<V>>) _wgraph).outgoingEdgesOf(v).iterator();", "-                Edge e = (Edge) edges.next();", "+                Edge<V> e = edges.next();"]}]}
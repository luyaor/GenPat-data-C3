{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50a6e598aea04a3afceed110f3831d2d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d1304d747c9a3d12fd376e0398c15ca", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/util/UnionFindTest.java", "commitBeforeChange": "b5348f8a80e818c9b0dd566a68eb23f3eca4389b", "commitAfterChange": "29039f1f20cd2b1397eba3afdb9fc72182dd2062", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "signatureAfterChange": "      private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "diff": ["-    }", "-    private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "-    {", "-        for(ArrayList<String> set:sets)", "-            if(set.contains(a) && set.contains(b))", "-                return true;", "-        return false;", "-    }", "+    private boolean same(ArrayList<ArrayList<String>> sets, String a, String b)", "+    {", "+        for (ArrayList<String> set : sets) {", "+            if (set.contains(a) && set.contains(b)) {", "+                return true;", "+            }", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9c8bd0df5fbe10ffec9f1bd04f474ca", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/HopcroftKarpBipartiteMatching.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2)", "signatureAfterChange": "     private boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2)", "diff": ["+     */", "+    private boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2)", "+    {", "+        for (V vertex : vertexSet1) {", "+            if (vertexSet2.contains(vertex)) {", "+            }", "+        }", "+        return false;", "+    }", "-\t */", "-\tprivate boolean interSectionNotEmpty(Set<V> vertexSet1, Set<V> vertexSet2){", "-\t\tfor(V vertex: vertexSet1)", "-\t\t\tif(vertexSet2.contains(vertex))", "-\t\t\t\treturn true;", "-\t\treturn false;", "-\t}"]}]}
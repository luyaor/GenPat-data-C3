{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85474110a64add725c5618bc3d66b5f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027d37b89416e67eb7cee412add786ed", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void insert(FibonacciHeapNode<T> node, double key)", "signatureAfterChange": "     public void insert(FibonacciHeapNode<T> node, double key)", "diff": ["-        node.m_key = key;", "+        node.key = key;", "-        if (m_min != null) {", "-            node.m_left = m_min;", "-            node.m_right = m_min.m_right;", "-            m_min.m_right = node;", "-            node.m_right.m_left = node;", "+        if (minNode != null) {", "+            node.left = minNode;", "+            node.right = minNode.right;", "+            minNode.right = node;", "+            node.right.left = node;", "-            if (key < m_min.m_key) {", "-                m_min = node;", "+            if (key < minNode.key) {", "+                minNode = node;", "-            m_min = node;", "+            minNode = node;", "-        m_n++;", "+        nNodes++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce263b3909a90d35afbed7ac8a43d80c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-        if (m_min == null) {", "+        if (minNode == null) {", "-        stack.push(m_min);", "+        stack.push(minNode);", "-            if (curr.m_child != null) {", "-                stack.push(curr.m_child);", "+            if (curr.child != null) {", "+                stack.push(curr.child);", "-            curr = curr.m_right;", "+            curr = curr.right;", "-                if (curr.m_child != null) {", "-                    stack.push(curr.m_child);", "+                if (curr.child != null) {", "+                    stack.push(curr.child);", "-                curr = curr.m_right;", "+                curr = curr.right;"]}]}
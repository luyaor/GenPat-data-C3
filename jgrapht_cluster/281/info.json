{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd01604f3d5c5a27ccf1f40bddde7762", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56a7c57504960c08d78e7cb583c33b68", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void consolidate()", "signatureAfterChange": "     protected void consolidate()", "diff": ["-        Node [] array = new Node [arraySize];", "+        List<Node> array = new ArrayList<Node>(arraySize);", "-        for (int i = 0; i < arraySize; i++) {", "-            array[i] = null;", "-        }", "+        for (int i=0; i<arraySize; i++)", "+        \tarray.add(null);", "-            while (array[d] != null) {", "+            while (array.get(d) != null) {", "-                Node y = array[d];", "+                Node y = array.get(d);", "-                array[d] = null;", "+                array.set(d,null);", "-            array[d] = x;", "+            array.set(d,x);", "-            if (array[i] != null) {", "+            if (array.get(i) != null) {", "-                    array[i].m_left.m_right = array[i].m_right;", "-                    array[i].m_right.m_left = array[i].m_left;", "+                    array.get(i).m_left.m_right = array.get(i).m_right;", "+                    array.get(i).m_right.m_left = array.get(i).m_left;", "-                    array[i].m_left = m_min;", "-                    array[i].m_right = m_min.m_right;", "-                    m_min.m_right = array[i];", "-                    array[i].m_right.m_left = array[i];", "+                    array.get(i).m_left = m_min;", "+                    array.get(i).m_right = m_min.m_right;", "+                    m_min.m_right = array.get(i);", "+                    array.get(i).m_right.m_left = array.get(i);", "-                    if (array[i].m_key < m_min.m_key) {", "-                        m_min = array[i];", "+                    if (array.get(i).m_key < m_min.m_key) {", "+                        m_min = array.get(i);", "-                    m_min = array[i];", "+                    m_min = array.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "834e756c6a369a22a742fd3c2fbff89c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void consolidate()", "signatureAfterChange": "     protected void consolidate()", "diff": ["-        int arraySize = m_n + 1;", "+        int arraySize = nNodes + 1;", "-        FibonacciHeapNode<T> x = m_min;", "+        FibonacciHeapNode<T> x = minNode;", "-            x = x.m_right;", "+            x = x.right;", "-            while (x != m_min) {", "+            while (x != minNode) {", "-                x = x.m_right;", "+                x = x.right;", "-            int d = x.m_degree;", "-            FibonacciHeapNode<T> next = x.m_right;", "+            int d = x.degree;", "+            FibonacciHeapNode<T> next = x.right;", "-                if (x.m_key > y.m_key) {", "+                if (x.key > y.key) {", "-        m_min = null;", "+        minNode = null;", "-                if (m_min != null) {", "+                if (minNode != null) {", "-                    array.get(i).m_left.m_right = array.get(i).m_right;", "-                    array.get(i).m_right.m_left = array.get(i).m_left;", "+                    array.get(i).left.right = array.get(i).right;", "+                    array.get(i).right.left = array.get(i).left;", "-                    array.get(i).m_left = m_min;", "-                    array.get(i).m_right = m_min.m_right;", "-                    m_min.m_right = array.get(i);", "-                    array.get(i).m_right.m_left = array.get(i);", "+                    array.get(i).left = minNode;", "+                    array.get(i).right = minNode.right;", "+                    minNode.right = array.get(i);", "+                    array.get(i).right.left = array.get(i);", "-                    if (array.get(i).m_key < m_min.m_key) {", "-                        m_min = array.get(i);", "+                    if (array.get(i).key < minNode.key) {", "+                        minNode = array.get(i);", "-                    m_min = array.get(i);", "+                    minNode = array.get(i);"]}]}
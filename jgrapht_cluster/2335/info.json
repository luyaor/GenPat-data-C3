{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8eb9731a8ee50a9316d6c50aaa8c7c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c643cb54b1ea7a7a182e837de72bf47", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DirectedNeighborIndex.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)", "signatureAfterChange": "     public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)", "diff": ["-        V source = m_graph.getEdgeSource(edge);", "-        V target = m_graph.getEdgeTarget(edge);", "-        if (m_successorMap.containsKey(source)) {", "-            m_successorMap.get(source).removeNeighbor(target);", "+        V source = graph.getEdgeSource(edge);", "+        V target = graph.getEdgeTarget(edge);", "+        if (successorMap.containsKey(source)) {", "+            successorMap.get(source).removeNeighbor(target);", "-        if (m_predecessorMap.containsKey(target)) {", "-            m_predecessorMap.get(target).removeNeighbor(source);", "+        if (predecessorMap.containsKey(target)) {", "+            predecessorMap.get(target).removeNeighbor(source);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e61572a2b0c583a48a5fe613b32de53", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/NeighborIndex.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)", "signatureAfterChange": "     public void edgeRemoved(GraphEdgeChangeEvent<V, E> e)", "diff": ["-        V source = m_graph.getEdgeSource(edge);", "-        V target = m_graph.getEdgeTarget(edge);", "-        if (m_neighborMap.containsKey(source)) {", "-            m_neighborMap.get(source).removeNeighbor(target);", "+        V source = graph.getEdgeSource(edge);", "+        V target = graph.getEdgeTarget(edge);", "+        if (neighborMap.containsKey(source)) {", "+            neighborMap.get(source).removeNeighbor(target);", "-        if (m_neighborMap.containsKey(target)) {", "-            m_neighborMap.get(target).removeNeighbor(source);", "+        if (neighborMap.containsKey(target)) {", "+            neighborMap.get(target).removeNeighbor(source);"]}]}
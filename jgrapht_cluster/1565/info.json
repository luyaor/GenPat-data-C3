{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b75556714b01477c0e46602ae62b732e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d115d780fb21399cb661f78c3563ae4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/ChromaticNumber.java", "commitBeforeChange": "a6d8abd126ba3a06ab884ca429c2b00d917433e6", "commitAfterChange": "6779b908c35c78402d4661605d6152ac0908883b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)", "signatureAfterChange": "     public static <V, E> int findGreedyChromaticNumber(UndirectedGraph<V, E> g)", "diff": ["+        Map<Integer,Set<V>> coloredGroups =", "+            findGreedyColoredGroups(g);", "+        return coloredGroups.keySet().size();", "+    }", "-        // Each vertex will attempted to be colored with a single color each", "-        return color;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5763363fef361dce98ff10d19ad4dfae", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/generate/RandomGraphGeneratorTest.java", "commitBeforeChange": "afc074a42fcdf2d18274969fe6ef749a97e714ba", "commitAfterChange": "6fa151aa74c63b595990d43e787300c5ccc0ca2e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private static Graph [] testGenerateDirectedGraph()", "signatureAfterChange": "      public void testGenerateDirectedGraph()", "diff": ["+    public void testGenerateDirectedGraph()", "+        Graph [] graphArray = new Graph[3];", "+        for (int i = 0; i < 3; ++i) {", "+            graphArray[i] = new SimpleDirectedGraph<Integer, DefaultEdge>(", "+                DefaultEdge.class);", "+        }", "+", "+        generateGraphs(graphArray, 11, 100);", "-     */", "-    private static Graph [] testGenerateDirectedGraph()", "-        final int numOfVertex = 11;", "-        final int numOfEdges = 110; // simple undirected max = N(v)x(N(v)-1)", "-        Graph<Integer, DefaultEdge> directedGragh1 =", "-            new SimpleDirectedGraph<Integer, DefaultEdge>(", "-                DefaultEdge.class);", "-", "-            directedGragh1,", "-        Graph<Integer, DefaultEdge> directedGragh2 =", "-            new SimpleDirectedGraph<Integer, DefaultEdge>(", "-                DefaultEdge.class);", "-", "-            directedGragh2,", "-        Graph<Integer, DefaultEdge> directedGragh3 =", "-            new SimpleDirectedGraph<Integer, DefaultEdge>(", "-                DefaultEdge.class);", "-", "-            directedGragh3,", "-", "-        return new Graph[] {", "-                directedGragh1,", "-                directedGragh2,", "-                directedGragh3", "-            };"]}]}
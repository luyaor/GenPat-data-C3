{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "045aea9c8e6eb5ac76cb58362eaf239b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852b998d97df2a63b3e03033bd6d4915", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "b03329312d39e38d58a10d74df9818d4f67f9be5", "commitAfterChange": "cea7ef51f7b4c998dcf2f8f28d63aa057ca85c11", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testEdgeCasesDirectedGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesDirectedGraph()", "diff": ["-     */", "-    @Test", "-    public void testEdgeCasesDirectedGraph() {", "-        /* graph and subgraph empty */", "-", "-        DirectedGraph<String, DefaultEdge> g1 =", "-            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class),", "-                                           g2 =", "-            new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);", "-", "-        VF2SubgraphIsomorphismInspector<String, DefaultEdge> vf2 =", "-            new VF2SubgraphIsomorphismInspector<String, DefaultEdge>(g1, g2);", "-", "-        assertEquals(\"[]\", vf2.getMappings().next().toString());", "-", "-", "-        /* graph non-empty, subgraph empty */", "-", "-        DirectedGraph<Integer, DefaultEdge> g3 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class),", "-                                            g4 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g3.addVertex(1);", "-        g3.addVertex(2);", "-        g3.addVertex(3);", "-        g3.addVertex(4);", "-", "-        g3.addEdge(1, 2);", "-        g3.addEdge(2, 3);", "-        g3.addEdge(3, 4);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf3 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g4);", "-", "-        assertEquals(\"[1=~~ 2=~~ 3=~~ 4=~~]\",", "-                        vf3.getMappings().next().toString());", "-", "-", "-        /* graph empty, subgraph non-empty */", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf4 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g4, g3);", "-", "-        assertEquals(false, vf4.isomorphismExists());", "-", "-", "-        /* graph non-empty, subgraph single vertex */", "-", "-        DirectedGraph<Integer, DefaultEdge> g5 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g5.addVertex(5);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf5 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g5);", "-        ", "-        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter =", "-            vf5.getMappings();", "-", "-        Set<String> mappings = ", "-            new HashSet<String>(Arrays.asList(\"[1=5 2=~~ 3=~~ 4=~~]\",", "-                                              \"[1=~~ 2=5 3=~~ 4=~~]\",", "-                                              \"[1=~~ 2=~~ 3=5 4=~~]\",", "-                                              \"[1=~~ 2=~~ 3=~~ 4=5]\"));", "-        assertEquals(true, mappings.remove(iter.next().toString()));", "-        assertEquals(true, mappings.remove(iter.next().toString()));", "-        assertEquals(true, mappings.remove(iter.next().toString()));", "-        assertEquals(true, mappings.remove(iter.next().toString()));", "-        assertEquals(false, iter.hasNext());", "-", "-", "-        /* graph empty, subgraph single vertex */", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf5b =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g4, g5);", "-", "-        assertEquals(false, vf5b.isomorphismExists());", "-", "-", "-        /* subgraph with vertices, but no edges */", "-", "-        DirectedGraph<Integer, DefaultEdge> g6 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g6.addVertex(5);", "-        g6.addVertex(6);", "-        g6.addVertex(7);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf6 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g4, g6);", "-        ", "-        assertEquals(false, vf6.isomorphismExists());", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf6b =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g3, g6);", "-", "-        assertEquals(false, vf6.isomorphismExists());", "-", "-", "-        /* graph no edges, subgraph contains edge */", "-", "-        DirectedGraph<Integer, DefaultEdge> g7 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g7.addVertex(5);", "-        g7.addVertex(6);", "-", "-        g7.addEdge(5, 6);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf7 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g6, g7);", "-", "-        assertEquals(false, vf7.isomorphismExists());", "-", "-", "-        /* complete graphs of different size */", "-", "-        DirectedGraph<Integer, DefaultEdge> g8 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g8.addVertex(0);", "-        g8.addVertex(1);", "-        g8.addVertex(2);", "-        g8.addVertex(3);", "-        g8.addVertex(4);", "-", "-        g8.addEdge(0,1);", "-        g8.addEdge(0,2);", "-        g8.addEdge(0,3);", "-        g8.addEdge(0,4);", "-        g8.addEdge(1,2);", "-        g8.addEdge(1,3);", "-        g8.addEdge(1,4);", "-        g8.addEdge(2,3);", "-        g8.addEdge(2,4);", "-        g8.addEdge(3,4);", "-", "-        DirectedGraph<Integer, DefaultEdge> g9 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g9.addVertex(0);", "-        g9.addVertex(1);", "-        g9.addVertex(2);", "-        g9.addVertex(3);", "-", "-        g9.addEdge(0,1);", "-        g9.addEdge(0,2);", "-        g9.addEdge(0,3);", "-        g9.addEdge(1,2);", "-        g9.addEdge(1,3);", "-        g9.addEdge(2,3);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf8 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g8, g9);", "-", "-        SubgraphIsomorphismTestUtils.allMatchingsCorrect(vf8, g8, g9);", "-", "-        ", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf9 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g9, g8);", "-", "-        assertEquals(false, vf9.isomorphismExists());", "-", "-", "-        /* complete graphs of same size */", "-        ", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf10 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g8, g8);", "-", "-        SubgraphIsomorphismTestUtils.allMatchingsCorrect(vf10, g8, g8);", "-", "-", "-        /* complete graphs (??) of different size */", "-        DirectedGraph<Integer, DefaultEdge> g11 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g11.addVertex(0);", "-        g11.addVertex(1);", "-        g11.addVertex(2);", "-        g11.addVertex(3);", "-        g11.addVertex(4);", "-        g11.addVertex(5);", "-", "-        g11.addEdge(1,2);", "-        g11.addEdge(2,3);", "-        g11.addEdge(3,1);", "-        g11.addEdge(4, 5);", "-", "-        DirectedGraph<Integer, DefaultEdge> g12 =", "-            new DefaultDirectedGraph<Integer, DefaultEdge>(DefaultEdge.class);", "-", "-        g12.addVertex(6);", "-        g12.addVertex(7);", "-        g12.addVertex(8);", "-        g12.addVertex(9);", "-        g12.addVertex(10);", "-", "-        g12.addEdge(7,6);", "-        g12.addEdge(9,8);", "-        g12.addEdge(10,9);", "-        g12.addEdge(8,10);", "-", "-        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf13 =", "-            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g11, g12);", "-", "-        // is this the only possible mapping?", "-        assertEquals(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "-                        vf13.getMappings().next().toString());", "-    }", "+     */", "+    public void testEdgeCasesDirectedGraph()    {", "+", "+        /* ECD-1: graph and subgraph empty */", "+", "+        DirectedGraph<Integer, DefaultEdge> dg0v =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                    (DefaultEdge.class),", "+                                            dg0v2 =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                    (DefaultEdge.class);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf1 =", "+            new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                    (dg0v, dg0v2);", "+", "+        assertEquals(\"[]\", vf1.getMappings().next().toString());", "+", "+", "+        /* ECD-2: graph non-empty, subgraph empty */", "+", "+        DirectedGraph<Integer, DefaultEdge> dg4v3e =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg4v3e.addVertex(1);", "+        dg4v3e.addVertex(2);", "+        dg4v3e.addVertex(3);", "+        dg4v3e.addVertex(4);", "+", "+        dg4v3e.addEdge(1, 2);", "+        dg4v3e.addEdge(3, 2);", "+        dg4v3e.addEdge(3, 4);", "+", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg4v3e, dg0v);", "+", "+        assertEquals(\"[1=~~ 2=~~ 3=~~ 4=~~]\",", "+                vf2.getMappings().next().toString());", "+", "+", "+        /* ECD-3: graph empty, subgraph non-empty */", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf3 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg0v, dg4v3e);", "+", "+        assertEquals(false, vf3.isomorphismExists());", "+", "+", "+        /* ECD-4: graph non-empty, subgraph single vertex */", "+", "+        DirectedGraph<Integer, DefaultEdge> dg1v =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg1v.addVertex(5);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf4 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg4v3e, dg1v);", "+", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter4 =", "+                vf4.getMappings();", "+", "+        Set<String> mappings =", "+                new HashSet<String>(Arrays.asList(\"[1=5 2=~~ 3=~~ 4=~~]\",", "+                        \"[1=~~ 2=5 3=~~ 4=~~]\",", "+                        \"[1=~~ 2=~~ 3=5 4=~~]\",", "+                        \"[1=~~ 2=~~ 3=~~ 4=5]\"));", "+        assertEquals(true, mappings.remove(iter4.next().toString()));", "+        assertEquals(true, mappings.remove(iter4.next().toString()));", "+        assertEquals(true, mappings.remove(iter4.next().toString()));", "+        assertEquals(true, mappings.remove(iter4.next().toString()));", "+        assertEquals(false, iter4.hasNext());", "+", "+", "+        /* ECD-5: graph empty, subgraph single vertex */", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf5 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg0v, dg1v);", "+", "+        assertEquals(false, vf5.isomorphismExists());", "+", "+", "+        /* ECD-6: subgraph with vertices, but no edges */", "+", "+        DirectedGraph<Integer, DefaultEdge> dg3v0e =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg3v0e.addVertex(5);", "+        dg3v0e.addVertex(6);", "+        dg3v0e.addVertex(7);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf6 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg4v3e, dg3v0e);", "+", "+        assertEquals(false, vf6.isomorphismExists());", "+", "+        /* ECD-7: graph and subgraph with vertices, but no edges */", "+", "+        DirectedGraph<Integer, DefaultEdge> dg2v0e =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg2v0e.addVertex(1);", "+        dg2v0e.addVertex(2);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf7 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg3v0e, dg2v0e);", "+", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter7 =", "+                vf7.getMappings();", "+", "+        Set<String> mappings7 =", "+                new HashSet<String>(Arrays.asList(\"[5=1 6=2 7=~~]\",", "+                        \"[5=1 6=~~ 7=2]\",", "+                        \"[5=2 6=1 7=~~]\",", "+                        \"[5=~~ 6=1 7=2]\",", "+                        \"[5=2 6=~~ 7=1]\",", "+                        \"[5=~~ 6=2 7=1]\"));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(true, mappings7.remove(iter7.next().toString()));", "+        assertEquals(false, iter7.hasNext());", "+", "+", "+        /* ECD-8: graph no edges, subgraph contains single edge */", "+", "+        DirectedGraph<Integer, DefaultEdge> dg2v1e =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg2v1e.addVertex(5);", "+        dg2v1e.addVertex(6);", "+", "+        dg2v1e.addEdge(5, 6);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf8 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg3v0e, dg2v1e);", "+", "+        assertEquals(false, vf8.isomorphismExists());", "+", "+", "+        /* ECD-9: complete graphs of different size,", "+        * graph smaller than subgraph*/", "+", "+        DirectedGraph<Integer, DefaultEdge> dg5c =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg5c.addVertex(0);", "+        dg5c.addVertex(1);", "+        dg5c.addVertex(2);", "+        dg5c.addVertex(3);", "+        dg5c.addVertex(4);", "+", "+        dg5c.addEdge(0, 1);", "+        dg5c.addEdge(0, 2);", "+        dg5c.addEdge(0, 3);", "+        dg5c.addEdge(0, 4);", "+        dg5c.addEdge(1, 2);", "+        dg5c.addEdge(1, 3);", "+        dg5c.addEdge(1, 4);", "+        dg5c.addEdge(2, 3);", "+        dg5c.addEdge(2, 4);", "+        dg5c.addEdge(3, 4);", "+", "+        DirectedGraph<Integer, DefaultEdge> dg4c =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg4c.addVertex(0);", "+        dg4c.addVertex(1);", "+        dg4c.addVertex(2);", "+        dg4c.addVertex(3);", "+", "+        dg4c.addEdge(0, 1);", "+        dg4c.addEdge(0, 2);", "+        dg4c.addEdge(0, 3);", "+        dg4c.addEdge(1, 2);", "+        dg4c.addEdge(1, 3);", "+        dg4c.addEdge(2, 3);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf9 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg4c, dg5c);", "+", "+        assertEquals(false, vf9.isomorphismExists());", "+", "+        /* ECD-10: complete graphs of different size,", "+        * graph bigger than subgraph*/", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf10 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg5c, dg4c);", "+", "+        // first mapping found", "+        assertEquals(\"[0=0 1=1 2=2 3=3 4=~~]\",", "+                vf10.getMappings().next().toString());", "+", "+        /* assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vf10,", "+                    dg5c, dg4c));*/", "+", "+", "+        /* ECD-11: isomorphic graphs */", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf11 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg4v3e, dg4v3e);", "+", "+        // first mapping found", "+        assertEquals(\"[1=1 2=2 3=3 4=4]\",", "+                vf11.getMappings().next().toString());", "+        /* assertEquals(true,", "+            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs11,", "+                    sg4v3e, sg4v3e)); */", "+", "+        /* ECD-12: not connected graphs of different size */", "+        DirectedGraph<Integer, DefaultEdge> dg6v4enc =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg6v4enc.addVertex(0);", "+        dg6v4enc.addVertex(1);", "+        dg6v4enc.addVertex(2);", "+        dg6v4enc.addVertex(3);", "+        dg6v4enc.addVertex(4);", "+        dg6v4enc.addVertex(5);", "+", "+        dg6v4enc.addEdge(1, 2);", "+        dg6v4enc.addEdge(2, 3);", "+        dg6v4enc.addEdge(3, 1);", "+        dg6v4enc.addEdge(4, 5);", "+", "+        DirectedGraph<Integer, DefaultEdge> dg5v4enc =", "+                new DefaultDirectedGraph<Integer, DefaultEdge>", "+                        (DefaultEdge.class);", "+", "+        dg5v4enc.addVertex(6);", "+        dg5v4enc.addVertex(7);", "+        dg5v4enc.addVertex(8);", "+        dg5v4enc.addVertex(9);", "+        dg5v4enc.addVertex(10);", "+", "+        dg5v4enc.addEdge(7, 6);", "+        dg5v4enc.addEdge(9, 8);", "+        dg5v4enc.addEdge(10, 9);", "+        dg5v4enc.addEdge(8, 10);", "+", "+        VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf12 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>", "+                        (dg6v4enc, dg5v4enc);", "+", "+        // first mapping found", "+        assertEquals(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "+                vf12.getMappings().next().toString());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4c6295c97fae13e6810aa34aeb60a20", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "706aa3597ecf30c14c3a4ac469519dd45ef4dc50", "commitAfterChange": "55241662127745f1a473298706f974517b39b392", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static void main( String[] args ) throws Exception", "signatureAfterChange": "     public static void main( String[] args ) throws Exception", "diff": ["-        Graph g = new SimpleGraph(  );", "+        Graph g = new SimpleWeightedGraph(  );", "-", "-        Set uncovered = new HashSet( g.edgeSet(  ) );", "-", "-        for( Iterator it = g.vertexSet(  ).iterator(  ); it.hasNext(  ); ) {", "-            Object v = it.next(  );", "-            Set    c = new HashSet( GraphHelper.neighborListOf( g, v ) );", "-            c.add( v );", "-", "-            Graph sub = new Subgraph( g, c, null );", "-", "-            if( GraphTests.isComplete( sub ) ) {", "-                System.out.println( c );", "-                uncovered.removeAll( sub.edgeSet(  ) );", "-            }", "+        ", "+        {long time = System.currentTimeMillis();", "+        ShortestPathIterator spi = new ShortestPathIterator(g, g.vertexSet(  ).iterator(  ).next(), org._3pq.jgrapht.experimental.heap.FibonacciHeap.getFactory());", "+        while (spi.hasNext(  )) {", "+            Object v = spi.next(  );", "+//             System.out.println( v + \" \" + spi.getSpanningTreeEdge(v) + \" \" + spi.getPrio(v));", "+        System.out.println( System.currentTimeMillis() - time );", "+        time = System.currentTimeMillis();", "+        ClosestFirstIterator cfi = new ClosestFirstIterator(g, g.vertexSet(  ).iterator(  ).next());", "+        while (cfi.hasNext(  )) {", "+            Object v = cfi.next(  );", "+//             System.out.println( v + \" \" + cfi.getSpanningTreeEdge(v));", "+        }", "+        System.out.println( System.currentTimeMillis() - time );}", "+        {long time = System.currentTimeMillis();", "+        ShortestPathIterator spi = new ShortestPathIterator(g, g.vertexSet(  ).iterator(  ).next(), org._3pq.jgrapht.experimental.heap.FibonacciHeap.getFactory());", "+        while (spi.hasNext(  )) {", "+            Object v = spi.next(  );", "+//             System.out.println( v + \" \" + spi.getSpanningTreeEdge(v) + \" \" + spi.getPrio(v));", "+        }", "+        System.out.println( System.currentTimeMillis() - time );", "+        time = System.currentTimeMillis();", "+        ClosestFirstIterator cfi = new ClosestFirstIterator(g, g.vertexSet(  ).iterator(  ).next());", "+        while (cfi.hasNext(  )) {", "+            Object v = cfi.next(  );", "+//             System.out.println( v + \" \" + cfi.getSpanningTreeEdge(v));", "+        }", "+        System.out.println( System.currentTimeMillis() - time );}", "+        long time = System.currentTimeMillis();", "+        ShortestPathIterator spi = new ShortestPathIterator(g, g.vertexSet(  ).iterator(  ).next(), org._3pq.jgrapht.experimental.heap.FibonacciHeap.getFactory());", "+        while (spi.hasNext(  )) {", "+            Object v = spi.next(  );", "+//             System.out.println( v + \" \" + spi.getSpanningTreeEdge(v) + \" \" + spi.getPrio(v));", "+        }", "+        System.out.println( System.currentTimeMillis() - time );", "+        time = System.currentTimeMillis();", "+        ClosestFirstIterator cfi = new ClosestFirstIterator(g, g.vertexSet(  ).iterator(  ).next());", "+        while (cfi.hasNext(  )) {", "+            Object v = cfi.next(  );", "+//             System.out.println( v + \" \" + cfi.getSpanningTreeEdge(v));", "+        }", "+        System.out.println( System.currentTimeMillis() - time );", "+        time = System.currentTimeMillis();", "-        System.out.println( uncovered.size(  ) );", "-        System.out.println( uncovered );"]}]}
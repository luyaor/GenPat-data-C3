{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e02809d7fbf9e694739cda5f1eae39af", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cdfba9fccd6a110392d20ff25a32cfd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "6a8a4c15d51c52101d91cd979c3d30cc12195d89", "commitAfterChange": "1df4f6ec05a16b739e7739b1310c6980095dbcdd", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      private void pushFlowThrough(EdgeExtension ex, double f)", "signatureAfterChange": "      protected void pushFlowThrough(EdgeExtension ex, double f)", "diff": ["-    private void pushFlowThrough(EdgeExtension ex, double f) {", "+    protected void pushFlowThrough(EdgeExtension ex, double f) {", "-        EdgeExtension iex = ex.getInverse();", "-", "-        // _DBG", "-        assert(compareFlowTo(ex.flow, 0.0) == 0 || compareFlowTo(iex.flow, 0.0) == 0);", "-", "-        if (compareFlowTo(iex.flow, f) == -1) {", "-            double d = f - iex.flow;", "-", "-            ex.flow      += d;", "-            ex.capacity  -= iex.flow;", "-", "-            iex.flow      = 0;", "-            iex.capacity += d;", "-        } else {", "-            ex.capacity -= f;", "-            iex.flow    -= f;", "-        }", "-    }", "+        super.pushFlowThrough(ex, f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613d487cb2b11fae1bd3e137da4599de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void augmentFlow()", "signatureAfterChange": "      private void build()", "diff": ["+    private void build()", "+    {", "+        maxFlow = engine.buildMaximumFlow(currentSource, currentSink);", "+    }", "-", "-    private void augmentFlow()", "-    {", "-        boolean[] seen = new boolean[nodes.size()];", "-", "-        for (Arc lastArc : nodes.get(currentSink).lastArcs) {", "-            double deltaFlow =", "-                Math.min(", "-                    nodes.get(lastArc.tail).flowAmount,", "-                    lastArc.capacity - lastArc.flow);", "-", "-            if (augmentFlowAlongInternal(deltaFlow, lastArc.tail, seen)) {", "-                lastArc.flow += deltaFlow;", "-                lastArc.reversed.flow -= deltaFlow;", "-            }", "-        }", "-    }"]}]}
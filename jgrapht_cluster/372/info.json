{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "654006ead14a2e097de987f1a2d9b727", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343f4505d0dfd5cc28ef991393ca91eb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static Object initialize( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "signatureAfterChange": "     private static <V, E extends Edge<V>> V initialize( DirectedGraph<V, E> dg,         LinkedList<V> queue, Map inDegreeMap )", "diff": ["-    private static Object initialize( DirectedGraph dg, LinkedList queue,", "-        Map inDegreeMap ) {", "-        for( Iterator i = dg.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "-            Object vertex = i.next(  );", "+    private static <V, E extends Edge<V>> V initialize( DirectedGraph<V, E> dg,", "+        LinkedList<V> queue, Map inDegreeMap ) {", "+        for( Iterator<V> i = dg.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "+            V vertex = i.next(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "954b63aa1ce65e1e6b89d70cf90352fb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphSquare.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void addSquareEdges(Graph g, boolean createLoops)", "signatureAfterChange": "      private void addSquareEdges(Graph<V,E> g, boolean createLoops)", "diff": ["-    private void addSquareEdges(Graph g, boolean createLoops)", "+    private void addSquareEdges(Graph<V,E> g, boolean createLoops)", "-        for (Iterator it = g.vertexSet().iterator(); it.hasNext();) {", "-            Object v = it.next();", "-            List adjVertices = GraphHelper.neighborListOf(g, v);", "+        for (V v: g.vertexSet()) {", "+            List<V> adjVertices = GraphHelper.neighborListOf(g, v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a074b6a3e4c1575aa48256b2a7c2f550", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/GraphHelper.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static <V, E extends Edge<V>> List<V> neighborListOf(Graph<V, E> g,         V vertex)", "signatureAfterChange": "     public static <V, E extends Edge<V>> List<V> neighborListOf(Graph<V, E> g,         V vertex)", "diff": ["-        List neighbors = new ArrayList();", "+        List<V> neighbors = new ArrayList<V>();", "-        for (Iterator i = g.edgesOf(vertex).iterator(); i.hasNext();) {", "-            Edge e = (Edge) i.next();", "-            neighbors.add(e.oppositeVertex(vertex));", "+        for( E e : g.edgesOf(vertex) ) {", "+        \tneighbors.add(e.oppositeVertex(vertex));        \t"]}]}
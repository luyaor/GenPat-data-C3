{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e8aad74ec08cf641efb168bf60c8695", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119e0bc601b7bc69f0d59ceecc71c78f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/HopcroftKarpBipartiteMatching.java", "commitBeforeChange": "92515499ec252d47a5d2a61121b91fd95f3bb5b8", "commitAfterChange": "47f303bdc02e63a084eea6bbef2195eb7a2ef15c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tprivate List<LinkedList<V>> getAugmentingPaths()", "signatureAfterChange": " \t \tprivate List<LinkedList<V>> getAugmentingPaths()", "diff": ["-", "-", "-", "-\t\t\t\t\tif(usedVertices.contains(neighbor))", "-            // Vertices placed into odd-layer may not be matched by any other vertices except for the one", "-            // we came from", "+\t\t\t\t\tif(usedVertices.contains(neighbor) || matching.contains(graph.getEdge(vertex, neighbor)))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307648443fdb3dd9c58d330a9053cc3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void addFirstPath(V vertex, E edge)", "signatureAfterChange": "     private boolean tryToAddFirstPaths(V vertex, E edge)", "diff": ["-     */", "-    private void addFirstPath(V vertex, E edge)", "-    {", "-        // the vertex has not been reached yet", "-        RankingPathElementList<V, E> data = createSeenData(vertex, edge);", "-        this.seenDataContainer.put(vertex, data);", "-    }", "+     */", "+    private boolean tryToAddFirstPaths(V vertex, E edge)", "+    {", "+        // the vertex has not been reached yet", "+        RankingPathElementList<V, E> data = createSeenData(vertex, edge);", "+", "+        if (!data.isEmpty()) {", "+            this.seenDataContainer.put(vertex, data);", "+            return true;", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "316629a680a74c5ff821854bc15e89ff", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "686030595cfbe0de62aa9b65879846de7ef8f5f0", "commitAfterChange": "b3a0b6048588d701bd5af824fdeec0fee1046ef7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public V getEndVertex()", "signatureAfterChange": "      @Override     public V getEndVertex()", "diff": ["-        // TODO Auto-generated method stub", "-        return null;", "+        return this.getVertexList().get(getVertexList().size() - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54757608e133485852e89d160762626e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/CycleDetectorTest.java", "commitBeforeChange": "2003496a80f483b98d40a459268e93d0fdaec76c", "commitAfterChange": "618193dfca3ac4de3a61698028cfd965351c74a1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void createGraph(Graph<String, DefaultEdge> g)", "signatureAfterChange": "     public void createGraph(Graph<String, DefaultEdge> g)", "diff": ["+        g.addVertex(V7);", "+", "+        // test an edge which leads into a cycle, but where the source", "+        // is not itself part of a cycle", "+        g.addEdge(V7, V1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65831774ea69b9b50ee89c8c663afee2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/AsUndirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testAddEdge()", "signatureAfterChange": "     public void testAddEdge()", "diff": ["+", "+        assertEquals(", "+            \"([v1, v2, v3, v4], [{v1,v2}, {v2,v3}, {v2,v4}, {v4,v4}])\",", "+            m_undirected.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "760146127e82f7c7b1fed74fdf8526f7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "d11cabd1aabdc954107d901bc835dd46e2c5b915", "commitAfterChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Set<V> next()", "signatureAfterChange": "     public Set<V> next()", "diff": ["-    public Set<V> next()", "-    {", "+    public Set<V> next() {", "-            for (", "-                Iterator<V> iter = this.prevImprovedVertices.iterator();", "-                iter.hasNext();)", "-            {", "+            for (Iterator<V> iter = this.prevImprovedVertices.iterator(); iter", "+                    .hasNext();) {", "-", "-                // updates outgoing vertices of the vertex.", "-                updateOutgoingVertices(vertex, improvedVertices);", "+                if (!vertex.equals(this.endVertex)) {", "+                    // updates outgoing vertices of the vertex.", "+                    updateOutgoingVertices(vertex, improvedVertices);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c4e34a42e08626f75326bce290a9518", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "5b6751e5494b66b49d141500678db426b216fcf2", "commitAfterChange": "1d2ab4b12a8998ab9a349df2fc357a5c0053816f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private TopologicalOrderIterator(         DirectedGraph<V, E> dg,         Queue<V> queue,         Map<V, ModifiableInteger> inDegreeMap)", "signatureAfterChange": "     private TopologicalOrderIterator(         DirectedGraph<V, E> dg,         Queue<V> queue,         Map<V, ModifiableInteger> inDegreeMap)", "diff": ["-        // empty queue would indicate presence of cycles (no roots found)", "-        assert (!queue.isEmpty());", "+        if (!dg.vertexSet().isEmpty()) {", "+            // empty queue for non-empty graph would indicate presence of", "+            // cycles (no roots found)", "+            assert (!queue.isEmpty());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93c5298112d42460abb36eef6a2db198", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/AsWeightedGraphTest.java", "commitBeforeChange": "5fd52feef7dfccbb0b591fde0bda240336fc10d1", "commitAfterChange": "c47aefcfe74648da036d5e9f46b58264738e055c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void tearDown()", "signatureAfterChange": "      public void testUnweightedGraphs()", "diff": ["-    @Override", "-    public void tearDown()", "-    {", "+    public void testUnweightedGraphs(){", "+        this.testUnweightedGraph(unweightedGraph);", "+        this.testUnweightedGraph(directedUnweightedGraph);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b44b104c48c0e5a92fff5822e8d18e54", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspector.java", "commitBeforeChange": "af1b824446ff484516d50232b001351d46878322", "commitAfterChange": "7e936137877a73e8b9c1b2921fc4174c64f683c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private SubgraphIsomorphismRelation<V, E> match()", "signatureAfterChange": "     private SubgraphIsomorphismRelation<V, E> match()", "diff": ["+            ", "+            if (graph2.vertexSet().isEmpty())", "+                return hadOneRelation != null ? null : s.getCurrentMatching();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b97548ef3a13caf9b2bfd914069d7b94", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "       private void init( Graph g, Object startVertex )", "signatureAfterChange": "       private void init( Graph g, Object startVertex )", "diff": ["+        m_seen.add( startVertex );", "-        m_visited.add( startVertex );", "+        m_vertexIterator = g.vertexSet(  ).iterator(  );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20f0825d2d79ac8bf04f159ea07fbfc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "8cf8651db5de9405d7887b55b67fde1d9e01e224", "commitAfterChange": "9ac63fa5d348b319d01e5aef6fad2b1fa76f8f81", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testAddVertex(  )", "signatureAfterChange": "     public void testAddVertex(  )", "diff": ["+        assertEquals( 2, m_g1.vertexSet(  ).size(  ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d09cb571b3c0b922793b7ece11e1f079", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1effd820b4ff0df20b52838645b4dac8ba57dbb9", "commitAfterChange": "5a317bb7119c0a36b7e0f16f189c1b4cabdf0a09", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "         public void edgeAdded( GraphEdgeChangeEvent e )", "signatureAfterChange": "         public void edgeAdded( GraphEdgeChangeEvent e )", "diff": ["-            // we don't care", "+            if (m_isInduced) {", "+                addEdge(e.getEdge());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5f2707b47843769b6af3f2bf9d20eaa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "8fe299c38648acac55e40bd47498a08269e01f74", "commitAfterChange": "3cb0ce95d7f27940cd613dc6e124a83b3e4976e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testEdgesOf()", "signatureAfterChange": "     public void testEdgesOf()", "diff": ["-            createMultiTriangleWithMultiLoop();", "+            createMultiTriangle();", "-        assertEquals(2, g.edgesOf(v2).size());", "-    }", "+        assertEquals(3, g.edgesOf(v2).size());", "+        assertEquals(2, g.edgesOf(v3).size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd521440ee334106da22f9e7e8327ba7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SubgraphTest.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testSubgraph(  )", "signatureAfterChange": "     public void testSubgraph(  )", "diff": ["-//         assertEquals( 0, sub.degreeOf(_v1) );", "+        assertEquals( 0, sub.degreeOf(_v1) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfe4caf9a21d8fdbda39c5ef7a233116", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "1611557db2c7b6fff2b3d11bdf41aa9bc43c1486", "commitAfterChange": "ce0f78b94ba0a535e51aa5dfcfb3c56c6c67d881", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testKShortestPathCompleteGraph4()", "signatureAfterChange": "      public void testKShortestPathCompleteGraph4()", "diff": ["+", "+        assertEquals(\"[[(vS : v1), (v1 : v3)], [(vS : v2), (v2 : v3)],\"", "+            + \" [(vS : v2), (v1 : v2), (v1 : v3)], \"", "+            + \"[(vS : v1), (v1 : v2), (v2 : v3)], \"", "+            + \"[(vS : v3)]]\", pathElements.toString());", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6c223c1fa49278ecf182a209b273931", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "8fe299c38648acac55e40bd47498a08269e01f74", "commitAfterChange": "3cb0ce95d7f27940cd613dc6e124a83b3e4976e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void testOutDegreeOf()", "signatureAfterChange": "     public void testOutDegreeOf()", "diff": ["-            createMultiTriangleWithMultiLoop();", "+            createMultiTriangle();", "-        assertEquals(2, g.outDegreeOf(v1));", "-        assertEquals(1, g.outDegreeOf(v2));", "+        assertEquals(1, g.outDegreeOf(v1));", "+        assertEquals(2, g.outDegreeOf(v2));", "+        assertEquals(1, g.outDegreeOf(v3));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea0b037b6d79e596aeb14adeb260e5df", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/BellmanFordShortestPathTest.java", "commitBeforeChange": "41540d6069074864616a1b8145b5f82327c8ca30", "commitAfterChange": "8262a3a0c02c409f150e557da1701ecf29695733", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testConstructor()", "signatureAfterChange": "     public void testConstructor()", "diff": ["+        assertEquals(Double.POSITIVE_INFINITY, path.getCost(V5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec69473cac5525fc8251079eec7da2ba", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/KuhnMunkresMinimalWeightBipartitePerfectMatching.java", "commitBeforeChange": "9634383765c94e7a1ec62deaa98a4524d87c98b5", "commitAfterChange": "f6e74d57ccf7a4238eba3e22fab747d0854f3464", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public KuhnMunkresMinimalWeightBipartitePerfectMatching(         final WeightedGraph<V, E> G,         List<? extends V> S,         List<? extends V> T)", "signatureAfterChange": "     public KuhnMunkresMinimalWeightBipartitePerfectMatching(         final WeightedGraph<V, E> G,         List<? extends V> S,         List<? extends V> T)", "diff": ["-        // Validate graph being complete bipartite with equally-sized partitions", "+        // Validate graph being complete bipartite with equally-sized partitions", "-        matching =", "-            new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching();", "+        // Expected behaviour for an empty graph is to return an empty set, so we check this last", "+        if (G.vertexSet().isEmpty()) {", "+            matching = new int[]{};", "+        } else {", "+            matching =", "+                    new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86b57b12fb694c5d44cfa5efdcf521e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a3637a2809844985e6f75111532be6d4ba806d9a", "commitAfterChange": "7be478014aceb9fc3d94dd0d4a9582ecea6bcd00", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     void handleJGraphTRemoveVertex( Object jtVertex )", "signatureAfterChange": "     void handleJGraphTRemoveVertex( Object jtVertex )", "diff": ["-        remove( new Object[] { vertexCell.getChildAt( 0 ) } );", "+        if( vertexCell.getChildCount(  ) > 0 ) {", "+            remove( new Object[] { vertexCell.getChildAt( 0 ) } );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faef097d08f6f3dccbac32824a75c32a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "8fe299c38648acac55e40bd47498a08269e01f74", "commitAfterChange": "3cb0ce95d7f27940cd613dc6e124a83b3e4976e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void testInDegreeOf()", "signatureAfterChange": "     public void testInDegreeOf()", "diff": ["-            createMultiTriangleWithMultiLoop();", "+            createMultiTriangle();", "+        assertEquals(1, g.inDegreeOf(v3));"]}]}
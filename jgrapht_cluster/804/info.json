{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5dbd9ed11aab04c82f03f7c7a8c528e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520241c0ed185dce30628d9bde270cb2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/ListenableGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testGraphListener()", "signatureAfterChange": "     public void testGraphListener()", "diff": ["-        ListenableGraph<Object,Edge<Object>> g = new ListenableUndirectedGraph<Object, Edge<Object>>();", "-        GraphListener<Object, Edge<Object>> listener = new MyGraphListner();", "+        ListenableGraph<Object,DefaultEdge> g =", "+            new ListenableUndirectedGraph<Object, DefaultEdge>(", "+                DefaultEdge.class);", "+        GraphListener<Object, DefaultEdge> listener = new MyGraphListner();", "-        Edge<Object> e = g.addEdge(v1, v2);", "+        DefaultEdge e = g.addEdge(v1, v2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db55f09fa14657b4aa52c3d06b19f2f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/demo/PerformanceDemo.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String [] args)", "signatureAfterChange": "     public static void main(String [] args)", "diff": ["-        Graph<Object,Edge<Object>> g = new Pseudograph<Object,Edge<Object>>();", "+        Graph<Object,DefaultEdge> g =", "+            new Pseudograph<Object,DefaultEdge>(DefaultEdge.class);", "-        for (Iterator i = new BreadthFirstIterator<Object,Edge<Object>>(g); i.hasNext();) {", "+        for (Iterator i = new BreadthFirstIterator<Object,DefaultEdge>(g); i.hasNext();) {", "-        for (Iterator i = new DepthFirstIterator<Object,Edge<Object>>(g); i.hasNext();) {", "+        for (Iterator i = new DepthFirstIterator<Object,DefaultEdge>(g); i.hasNext();) {"]}]}
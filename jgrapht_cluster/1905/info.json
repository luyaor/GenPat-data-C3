{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf067892344ac80026330c31f075a084", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7697347fe8965deda9655c8c2647c4d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/VertexCovers.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Set find2ApproximationCover( Graph g )", "signatureAfterChange": "     public static <V, E extends Edge<V>> Set<V> find2ApproximationCover( Graph<V,E> g )", "diff": ["-    public Set find2ApproximationCover( Graph g ) {", "+    public static <V, E extends Edge<V>> Set<V> find2ApproximationCover( Graph<V,E> g ) {", "-        Set cover = new HashSet(  );", "+        Set<V> cover = new HashSet(  );", "-        Subgraph sg = new Subgraph( g, null, null );", "+        Subgraph<V,E> sg = new Subgraph( g, null, null );", "-            Edge e = (Edge) sg.edgeSet(  ).iterator(  ).next(  );", "+            E e = sg.edgeSet(  ).iterator(  ).next(  );", "-            Object u = e.getSource(  );", "-            Object v = e.getTarget(  );", "+            V u = e.getSource(  );", "+            V v = e.getTarget(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4647e03c3fd515b05a1f1b85f03c6ce", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/VertexCovers.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Set findGreedyCover( UndirectedGraph g )", "signatureAfterChange": "     public static <V, E extends Edge<V>> Set<V> findGreedyCover( UndirectedGraph<V,E> g )", "diff": ["-    public Set findGreedyCover( UndirectedGraph g ) {", "+    public static <V, E extends Edge<V>> Set<V> findGreedyCover( UndirectedGraph<V,E> g ) {", "-        Set cover = new HashSet(  );", "+        Set<V> cover = new HashSet(  );", "-        UndirectedGraph sg = new UndirectedSubgraph( g, null, null );", "+        UndirectedGraph<V,E> sg = new UndirectedSubgraph( g, null, null );", "-        VertexDegreeComparator comp = new VertexDegreeComparator( sg );", "+        VertexDegreeComparator<V, E> comp = new VertexDegreeComparator( sg );", "-            Object v = Collections.max( sg.vertexSet(  ), comp );", "+            V v = Collections.max( sg.vertexSet(  ), comp );"]}]}
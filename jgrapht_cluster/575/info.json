{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a181cfa2051c8f59a4fd37ac689f79f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2e192a4e17ee2993732f71a2965a29", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphReader.java", "commitBeforeChange": "47ce261ef10be427a6a84aeeebb0d71750a4e26b", "commitAfterChange": "5b8b2def419b220aa57ca346f586e7cc6eacdd0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private List<String> skipComments()", "signatureAfterChange": "      private String[] skipComments()", "diff": ["-    private List<String> skipComments()", "+    private String[] skipComments()", "+        String[] cols = null;", "-            if (_in.ready()) {", "-                List<String> cols = split(_in.readLine());", "-                while (", "-                    cols.isEmpty()", "-                    || cols.get(0).equals(\"c\")", "-                    || cols.get(0).startsWith(\"%\"))", "-                {", "-                    cols = split(_in.readLine());", "-                }", "-                return cols;", "+            cols = split(_in.readLine());", "+            while (cols != null &&", "+                (cols.length == 0", "+                || cols[0].equals(\"c\")", "+                || cols[0].startsWith(\"%\")))", "+            {", "+                cols = split(_in.readLine());", "-        return null;", "+        return cols;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f295436e48abd67c09c898eda46708", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "16285fc735125684f525244baa1af05c7e3b89ee", "commitAfterChange": "ff54bec324648e52ae4dae6f81ce89c54758dce1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void assertIsomorphic(         Graph<Integer,DefaultEdge> [] graphs,         boolean shouldTheyBeIsomorphic,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\") \tprivate void assertIsomorphic(         Graph<Integer,DefaultEdge> [] graphs,         boolean shouldTheyBeIsomorphic,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "diff": ["-    private void assertIsomorphic(", "+    @SuppressWarnings(\"unchecked\")", "+\tprivate void assertIsomorphic(", "-        IsomorphismRelation isioResult;", "-            isioResult = (IsomorphismRelation) iso.next();", "+            IsomorphismRelation isioResult = (IsomorphismRelation) iso.next();", "-            // if (counter==0)", "-            // {", "-            // System.out.println(\"Graphs are isomorphic. Iterating over all", "-            // options:\");", "-            // }", "-            // System.out.println(counter+\" : \"+isioResult);", "+            if (false) {", "+                if (counter==0)", "+                {", "+                    System.out.println(\"Graphs are isomorphic. Iterating over all options:\");", "+                }", "+                System.out.println(counter+\" : \"+isioResult);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e164d81cb50e47a7bb2a38e5634360b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a4cb5bac8998d69e87c2a4d6bccc4b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "4efd29b14c87e09927591be73abc578e10bee63c", "commitAfterChange": "88cb62bfa22e40bbfbee26239b8d2f78fd3b5d5c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public boolean equals(Object obj)", "signatureAfterChange": "     public boolean equals(Object obj)", "diff": ["+", "-            boolean found = false;", "-            for (E ee: g.getAllEdges(source, target)) {", "-                if (e == ee || e.equals(ee)) {", "-                    if (e != ee && Math.abs(getEdgeWeight(e) ", "-                        - g.getEdgeWeight(ee)) > 10e-7)", "-                    {", "-                        return false;", "-                    }", "-                    found = true;", "-                    break;", "-                }", "+            if (!g.containsEdge(e)) {", "+                return false;", "-            if (!found) {", "+            if (!g.getEdgeSource(e).equals(source) ", "+                || !g.getEdgeTarget(e).equals(target)) ", "+            {", "+                return false;", "+            }", "+", "+            if (Math.abs(getEdgeWeight(e) - g.getEdgeWeight(e)) > 10e-7) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3839c1afdafdef763dc1664731aa1124", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "92515499ec252d47a5d2a61121b91fd95f3bb5b8", "commitAfterChange": "47f303bdc02e63a084eea6bbef2195eb7a2ef15c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private V findPath(V root)", "signatureAfterChange": "      private V findPath(UndirectedGraph<V, E> g, V root)", "diff": ["-    private V findPath(V root)", "+    private V findPath(UndirectedGraph<V, E> g, V root)", "-        for (V i : graph.vertexSet()) {", "+        for (V i : g.vertexSet()) {", "-            for (E e : graph.edgesOf(v)) {", "-                V to = graph.getEdgeSource(e);", "-                if (to == v)", "-                    to = graph.getEdgeTarget(e);", "+            for (V to : g.vertexSet()) {", "+                if (!g.containsEdge(v, to)) {", "+                    continue;", "+                }", "+", "-                    V curbase = lca(graph, v, to);", "+                    V curbase = lca(g, v, to);", "-                    markPath(v, curbase, to);", "-                    markPath(to, curbase, v);", "+                    markPath(g, v, curbase, to);", "+                    markPath(g, to, curbase, v);", "-                    for (V i : graph.vertexSet()) {", "+                    for (V i : g.vertexSet()) {"]}]}
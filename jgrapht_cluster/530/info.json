{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a804552538f22c20b04b97e44b54811f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194c79d21c186c89bdf593601547c85e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "diff": ["-        if (graph.vertexSet().size() < 2)", "+        if (graph.vertexSet().size() < 2) {", "-                    \"Graph has less than 2 vertices\");", "-        ", "+                \"Graph has less than 2 vertices\");", "+        }", "+", "-            if (graph.getEdgeWeight(e) < 0.0)", "+            if (graph.getEdgeWeight(e) < 0.0) {", "-                        \"Negative edge weights not allowed\");", "+                    \"Negative edge weights not allowed\");", "+            }", "-            } else", "+            } else {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a059e6a453f8e78c2b4f621027386f2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/alg/color/GreedyColoring.java", "commitBeforeChange": "e601cce570393b1ad5c879b58ec483ca42a9532b", "commitAfterChange": "df9e52ba034eea98b94d0b6e1470ce50769bc1ce", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      int color(int[] order)", "signatureAfterChange": "      int color(int [] order)", "diff": ["-    int color(int[] order) {", "-        final int[] color = new int[_neighbors.length];", "+", "+    int color(int [] order)", "+    {", "+        final int [] color = new int[_neighbors.length];", "-                if (color[nb] > 0) usedColors.set(color[nb]);", "+                if (color[nb] > 0) {", "+                    usedColors.set(color[nb]);", "+                }", "-            while (usedColors.get(color[v])) color[v]++;", "-            if (color[v] > maxColor) maxColor = color[v];", "+            while (usedColors.get(color[v])) {", "+                color[v]++;", "+            }", "+            if (color[v] > maxColor) {", "+                maxColor = color[v];", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df2116bee5b72525477f4c6fe548b3a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2State.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean nextPair()", "signatureAfterChange": "     public boolean nextPair()", "diff": ["-    public boolean nextPair() {", "-        if (addVertex2 == NULL_NODE)", "+    public boolean nextPair()", "+    {", "+        if (addVertex2 == NULL_NODE) {", "+        }", "-        if (addVertex1 == NULL_NODE)", "+        if (addVertex1 == NULL_NODE) {", "-        else", "+        } else {", "+        }", "-        if (t1BothLen > coreLen && t2BothLen > coreLen) {", "-", "+        if ((t1BothLen > coreLen) && (t2BothLen > coreLen)) {", "-            while (addVertex2 < n2 &&", "-                    (core2[addVertex2] != NULL_NODE ||", "-                     out2[addVertex2] == 0 ||", "-                     in2[addVertex2] == 0)) {", "+            while (", "+                (addVertex2 < n2)", "+                && ((core2[addVertex2] != NULL_NODE)", "+                    || (out2[addVertex2] == 0)", "+                    || (in2[addVertex2] == 0)))", "+            {", "-            while (addVertex1 < n1 &&", "-                    (core1[addVertex1] != NULL_NODE ||", "-                     out1[addVertex1] == 0 ||", "-                     in1[addVertex1] == 0)) {", "+            while (", "+                (addVertex1 < n1)", "+                && ((core1[addVertex1] != NULL_NODE)", "+                    || (out1[addVertex1] == 0)", "+                    || (in1[addVertex1] == 0)))", "+            {", "-        else if (t1OutLen > coreLen && t2OutLen > coreLen) {", "-            while (addVertex2 < n2 &&", "-                    (core2[addVertex2] != NULL_NODE ||", "-                     out2[addVertex2] == 0)) {", "+        else if ((t1OutLen > coreLen) && (t2OutLen > coreLen)) {", "+            while (", "+                (addVertex2 < n2)", "+                && ((core2[addVertex2] != NULL_NODE)", "+                    || (out2[addVertex2] == 0)))", "+            {", "-            while (addVertex1 < n1 &&", "-                    (core1[addVertex1] != NULL_NODE ||", "-                     out1[addVertex1] == 0)) {", "+            while (", "+                (addVertex1 < n1)", "+                && ((core1[addVertex1] != NULL_NODE)", "+                    || (out1[addVertex1] == 0)))", "+            {", "-        else if (t1InLen > coreLen && t2InLen > coreLen) {", "-            while (addVertex2 < n2 &&", "-                    (core2[addVertex2] != NULL_NODE ||", "-                     in2[addVertex2] == 0)) {", "+        else if ((t1InLen > coreLen) && (t2InLen > coreLen)) {", "+            while (", "+                (addVertex2 < n2)", "+                && ((core2[addVertex2] != NULL_NODE)", "+                    || (in2[addVertex2] == 0)))", "+            {", "-            while (addVertex1 < n1 &&", "-                    (core1[addVertex1] != NULL_NODE ||", "-                     in1[addVertex1] == 0)) {", "+            while (", "+                (addVertex1 < n1)", "+                && ((core1[addVertex1] != NULL_NODE)", "+                    || (in1[addVertex1] == 0)))", "+            {", "-            while (addVertex2 < n2 && core2[addVertex2] != NULL_NODE) {", "+            while ((addVertex2 < n2) && (core2[addVertex2] != NULL_NODE)) {", "-            while (addVertex1 < n1 && core1[addVertex1] != NULL_NODE) {", "+            while ((addVertex1 < n1) && (core1[addVertex1] != NULL_NODE)) {", "-        if (addVertex1 < n1 && addVertex2 < n2) {", "-            showLog(\"nextPair\", \"next candidate pair: (\" +", "-                            g1.getVertex(addVertex1) + \", \" +", "-                            g2.getVertex(addVertex2) + \")\");", "+        if ((addVertex1 < n1) && (addVertex2 < n2)) {", "+            showLog(", "+                \"nextPair\",", "+                \"next candidate pair: (\"", "+                + g1.getVertex(addVertex1) + \", \"", "+                + g2.getVertex(addVertex2) + \")\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e7b1ea8ea7f0297f101b755532db7e1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2SubgraphMappingIterator.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "       @Override     protected IsomorphicGraphMapping<V, E> match()", "signatureAfterChange": "            @Override protected IsomorphicGraphMapping<V, E> match()", "diff": ["-    @Override", "-    protected IsomorphicGraphMapping<V, E> match() {", "+    @Override protected IsomorphicGraphMapping<V, E> match()", "+    {", "-            Graph<V,E> g1 = ordering1.getGraph(),", "-                       g2 = ordering2.getGraph();", "+            Graph<V, E> g1 = ordering1.getGraph(), g2 = ordering2.getGraph();", "-            if (g1.vertexSet().size() < g2.vertexSet().size() ||", "-                            g1.edgeSet().size() < g2.edgeSet().size())", "+            if ((g1.vertexSet().size() < g2.vertexSet().size())", "+                || (g1.edgeSet().size() < g2.edgeSet().size()))", "+            {", "+            }", "-            s = new VF2SubgraphIsomorphismState<V, E>(ordering1, ordering2,", "-                            vertexComparator, edgeComparator);", "+            s = new VF2SubgraphIsomorphismState<V, E>(", "+                ordering1,", "+                ordering2,", "+                vertexComparator,", "+                edgeComparator);", "-            if (g2.vertexSet().isEmpty())", "-                return hadOneMapping != null ? null : s.getCurrentMapping();", "+            if (g2.vertexSet().isEmpty()) {", "+                return (hadOneMapping != null) ? null : s.getCurrentMapping();", "+            }", "-", "-                    s = new VF2SubgraphIsomorphismState<V,E>(s);", "+                    s = new VF2SubgraphIsomorphismState<V, E>(s);", "-            if (stateStack.isEmpty())", "+            if (stateStack.isEmpty()) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817891ae4de944b18769824ad353e212", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2GraphMappingIterator.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "       @Override     protected IsomorphicGraphMapping<V, E> match()", "signatureAfterChange": "            @Override protected IsomorphicGraphMapping<V, E> match()", "diff": ["-    @Override", "-    protected IsomorphicGraphMapping<V, E> match() {", "+    @Override protected IsomorphicGraphMapping<V, E> match()", "+    {", "-            Graph<V,E> g1 = ordering1.getGraph(),", "-                       g2 = ordering2.getGraph();", "+            Graph<V, E> g1 = ordering1.getGraph(), g2 = ordering2.getGraph();", "-            if (g1.vertexSet().size() != g2.vertexSet().size() ||", "-                            g1.edgeSet().size() != g2.edgeSet().size())", "+            if ((g1.vertexSet().size() != g2.vertexSet().size())", "+                || (g1.edgeSet().size() != g2.edgeSet().size()))", "+            {", "+            }", "-            s = new VF2GraphIsomorphismState<V, E>(ordering1, ordering2,", "-                            vertexComparator, edgeComparator);", "+            s = new VF2GraphIsomorphismState<V, E>(", "+                ordering1,", "+                ordering2,", "+                vertexComparator,", "+                edgeComparator);", "-            if (g2.vertexSet().isEmpty())", "-                return hadOneMapping != null ? null : s.getCurrentMapping();", "+            if (g2.vertexSet().isEmpty()) {", "+                return (hadOneMapping != null) ? null : s.getCurrentMapping();", "+            }", "-", "-                    s = new VF2GraphIsomorphismState<V,E>(s);", "+                    s = new VF2GraphIsomorphismState<V, E>(s);", "-            if (stateStack.isEmpty())", "+            if (stateStack.isEmpty()) {", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a652ea6180065c828b5e082f27cd27b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4563d8e93d5ac84b4e67a8f77e7866fc", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/util/equivalence/EquivalenceGroupCreatorTest.java", "commitBeforeChange": "29379b02ebf0bdb164e7d101cabb2e10e1ad235d", "commitAfterChange": "365b81e853aa014a3b31dc574bf84d084e1d3a49", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testOddEvenGroup()", "signatureAfterChange": "          public void testOddEvenGroup()", "diff": ["-        testOneComparator(new org._3pq.jgrapht.alg.isomorphism.comparators.OddEvenGroupComparator(),", "+        testOneComparator(new org.jgrapht.alg.isomorphism.comparators.OddEvenGroupComparator(),", "-        testOneComparator(new org._3pq.jgrapht.alg.isomorphism.comparators.Mod3GroupComparator(),", "+        testOneComparator(new org.jgrapht.alg.isomorphism.comparators.Mod3GroupComparator(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b600cbf8992f1c6ee74dff25bc920589", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/heap/FibonacciHeap.java", "commitBeforeChange": "ede00ba6ca48a7a81231a62519a30fabb26ae338", "commitAfterChange": "f63e1142cae73862c9c4f7b6ce46225b40f3ef86", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void consolidate()", "signatureAfterChange": "       private void consolidate(  )", "diff": ["-", "-    private void consolidate() {", "-", "-        int l = (int)Math.round(Math.log(_size) / Math.log(1.5) + 0.5);", "-        Elem[] a = new Elem[l];", "-        Elem x, y, h;", "-        int i;", "+    private void consolidate(  ) {", "+        int    l =", "+            (int) Math.round( Math.log( _size ) / Math.log( 1.5 ) + 0.5 );", "+        Elem[] a = new Elem[ l ];", "+        Elem   x;", "+        Elem   y;", "+        Elem   h;", "+        int    i;", "-            removeFromRoot(x);", "-            while (a[x.rank] != null) {", "-                y = a[x.rank];", "-                a[x.rank] = null;", "-                if (isSmaller(y.x, x.x)) {", "-                    h = x;", "-                    x = y;", "-                    y = h;", "+            removeFromRoot( x );", "+", "+            while( a[ x.rank ] != null ) {", "+                y               = a[ x.rank ];", "+                a[ x.rank ]     = null;", "+", "+                if( isSmaller( y.x, x.x ) ) {", "+                    h     = x;", "+                    x     = y;", "+                    y     = h;", "-                x.addChild(y);", "+", "+                x.addChild( y );", "-            a[x.rank] = x;", "-        } while (_min != null);", "-        for (i = 0; i < l; i++) {", "-            if (a[i] != null) {", "-                addToRoot(a[i]);", "+", "+            a[ x.rank ] = x;", "+        }", "+         while( _min != null );", "+", "+        for( i = 0; i < l; i++ ) {", "+            if( a[ i ] != null ) {", "+                addToRoot( a[ i ] );"]}]}
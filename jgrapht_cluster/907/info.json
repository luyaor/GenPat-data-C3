{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ac774001b8e563a2553ec206ebb2a76", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a6c82a21e7ad8e96050672d5fd11aad", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphTests.java", "commitBeforeChange": "8351950dcc8104326561fbac86d56dbf0db2a035", "commitAfterChange": "2e175b661db8815954cc8d1fa143c72587edb77b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static <V, E> boolean isBipartite(Graph<V,E> g)", "signatureAfterChange": "      public static <V, E> boolean isBipartite(Graph<V, E> g)", "diff": ["-    public static <V, E> boolean isBipartite(Graph<V,E> g)", "+    public static <V, E> boolean isBipartite(Graph<V, E> g)", "-        if ((4 * g.edgeSet().size())", "-            > (g.vertexSet().size() * g.vertexSet().size()))", "+        if (", "+            (4 * g.edgeSet().size())", "+            > (g.vertexSet().size() * g.vertexSet().size())) {", "-        if (isEmpty(g))", "+        }", "+        if (isEmpty(g)) {", "+        }", "-            for (Iterator<V> it = Graphs.neighborListOf(g, v).iterator();", "+            for (", "+                Iterator<V> it = Graphs.neighborListOf(g, v).iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de626099269b29f0f50a6d5e32648f4b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/experimental/GraphTests.java", "commitBeforeChange": "8351950dcc8104326561fbac86d56dbf0db2a035", "commitAfterChange": "2e175b661db8815954cc8d1fa143c72587edb77b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public static <V, E> boolean isConnected(Graph<V,E> g)", "signatureAfterChange": "      public static <V, E> boolean isConnected(Graph<V, E> g)", "diff": ["-    public static <V, E> boolean isConnected(Graph<V,E> g)", "+    public static <V, E> boolean isConnected(Graph<V, E> g)", "-        if (numEdges < (numVertices - 1))", "+        if (numEdges < (numVertices - 1)) {", "-        if ((numVertices < 2)", "-            || (numEdges > ((numVertices - 1) * (numVertices - 2) / 2)))", "+        }", "+        if (", "+            (numVertices < 2)", "+            || (numEdges > ((numVertices - 1) * (numVertices - 2) / 2))) {", "+        }", "-            for (Iterator<V> it = Graphs.neighborListOf(g, v).iterator();", "+            for (", "+                Iterator<V> it = Graphs.neighborListOf(g, v).iterator();"]}]}
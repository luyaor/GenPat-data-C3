{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8069d7fb708e90d0d1176f28d2821cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a4444ea189d210d6646b726f3b98a48", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected abstract CollectionPermutationIter createPermutationIterator(         Set vertexSet1,         Set vertexset2);", "signatureAfterChange": "     protected abstract CollectionPermutationIter<V> createPermutationIterator(         Set<V> vertexSet1,         Set<V> vertexSet2);", "diff": ["-    protected abstract CollectionPermutationIter createPermutationIterator(", "+    protected abstract CollectionPermutationIter<V> createPermutationIterator("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de45365d5b08766260e85fead967e5d4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/VertexCovers.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static <V, E extends Edge<V>> Set<V> findGreedyCover(UndirectedGraph<V, E> g)", "signatureAfterChange": "     public static <V, E extends Edge<V>> Set<V> findGreedyCover(UndirectedGraph<V, E> g)", "diff": ["-        Set<V> cover = new HashSet();", "+        Set<V> cover = new HashSet<V>();", "-        UndirectedGraph<V, E> sg = new UndirectedSubgraph(g, null, null);", "+        UndirectedGraph<V, E> sg = new UndirectedSubgraph<V, E>(g, null, null);", "-        VertexDegreeComparator<V, E> comp = new VertexDegreeComparator(sg);", "+        VertexDegreeComparator<V, E> comp = new VertexDegreeComparator<V, E>(sg);"]}]}
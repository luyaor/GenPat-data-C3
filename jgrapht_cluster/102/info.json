{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "098bcac5cd655a932d180b033de0409e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada1fb215a802ac7c83090c0d4b33123", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/flow/MaximumFlowAlgorithmTestBase.java", "commitBeforeChange": "62325cdd7548d0cf930d478a885b2a08e669b9bb", "commitAfterChange": "6a8a4c15d51c52101d91cd979c3d30cc12195d89", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testRandomGraph()", "signatureAfterChange": "      public void testRandomGraph()", "diff": ["-        System.out.println(\"== GENERATED ==\");", "+        System.out.println(\"\\n=== GENERATED ===\\n\");", "-        checkPushRelabel(network, source, sink);", "-        checkEdmondsKarp(network, source, sink);", "+        MaximumFlow<Integer, DefaultWeightedEdge> maxFlow = createSolver(network).buildMaximumFlow(source, sink);", "+        check(maxFlow, source, sink, network);", "+", "+        // _DBG", "-//        dumpGraph(network, source, sink);", "+        // _DBG", "+        //dumpGraph(network, source, sink);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b1e08b55115af3c8c31aeec877658c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/BellmanFordShortestPath.java", "commitBeforeChange": "41540d6069074864616a1b8145b5f82327c8ca30", "commitAfterChange": "8262a3a0c02c409f150e557da1701ecf29695733", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public List<E> getPathEdgeList(V endVertex)", "signatureAfterChange": "     public List<E> getPathEdgeList(V endVertex)", "diff": ["-        if (this.iter.getPathElement(endVertex) == null) {", "+        BellmanFordPathElement<V, E> pathElement =", "+            this.iter.getPathElement(endVertex);", "+", "+        if (pathElement == null) {", "-        return createPath(endVertex);", "+        return pathElement.createEdgeListPath();"]}]}
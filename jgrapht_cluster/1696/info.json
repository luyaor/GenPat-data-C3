{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbf96da2df36d5a8d8bb945f40ff50e3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d753569f40b2e799433079b6570556", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "865c70a24e8607a78cc6e6f7177fc64b25ced8c4", "commitAfterChange": "c0a909d2ddf3bd30fb6179822f21fe239a286372", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "          @Test     public void testSemanticCheck()", "signatureAfterChange": "          @Test     public void testSemanticCheck()", "diff": ["-        ", "+", "+        // test vertex and edge comparator", "-        ", "+", "+", "+        // test vertex comparator", "+        VF2SubgraphIsomorphismInspector<String, Integer> vf3 =", "+            new VF2SubgraphIsomorphismInspector<String, Integer>(g1, g2,", "+                            new VertexComp(),", "+                            new DefaultComparator<Integer>());", "+", "+        Iterator<IsomorphicGraphMapping<String, Integer>> iter2 =", "+            vf3.getMappings();", "+", "+        Set<String> mappings = ", "+            new HashSet<String>(Arrays.asList(\"[A=A B=b a=~~ b=B]\",", "+                                              \"[A=~~ B=B a=A b=b]\"));", "+        assertEquals(true, mappings.remove(iter2.next().toString()));", "+        assertEquals(true, mappings.remove(iter2.next().toString()));", "+        assertEquals(false, iter2.hasNext());", "+", "+        // test edge comparator", "+        VF2SubgraphIsomorphismInspector<String, Integer> vf4 =", "+            new VF2SubgraphIsomorphismInspector<String, Integer>(g1, g2,", "+                            new DefaultComparator<String>(),", "+                            new EdgeComp());", "+", "+        Iterator<IsomorphicGraphMapping<String, Integer>> iter3 =", "+            vf4.getMappings();", "+", "+        Set<String> mappings2 = ", "+            new HashSet<String>(Arrays.asList(\"[A=A B=b a=~~ b=B]\",", "+                                              \"[A=A B=~~ a=b b=B]\"));", "+        assertEquals(true, mappings2.remove(iter3.next().toString()));", "+        assertEquals(true, mappings2.remove(iter3.next().toString()));", "+        assertEquals(false, iter3.hasNext());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6105a38ce626b5ff0bb7bb6d27647282", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "5ad133ca974bee3f583f3037c1c5c902d0c89ecf", "commitAfterChange": "674a0a942965578d6c9d23a87f5c2c2d55185248", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testEdgeCasesDirectedGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesDirectedGraph()", "diff": ["-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[0=0 1=1 2=2 3=3 4=~~]\",", "-                vf10.getMappings().next().toString());", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter10 =", "+                vf10.getMappings();", "+", "+        Set<String> mappings10 =", "+                new HashSet<String>(Arrays.asList(\"[0=0 1=1 2=2 3=3 4=~~]\",", "+                        \"[0=0 1=1 2=2 3=~~ 4=3]\",", "+                        \"[0=0 1=1 2=~~ 3=2 4=3]\",", "+                        \"[0=0 1=~~ 2=1 3=2 4=3]\",", "+                        \"[0=~~ 1=0 2=1 3=2 4=3]\"));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(true, mappings10.remove(iter10.next().toString()));", "+        assertEquals(false, iter10.hasNext());", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[1=1 2=2 3=3 4=4]\",", "-                vf11.getMappings().next().toString());", "-        /* assertEquals(true,", "-            SubgraphIsomorphismTestUtils.containsAllMatchings(vfs11,", "-                    sg4v3e, sg4v3e)); */", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter11 =", "+                vf11.getMappings();", "+", "+        Set<String> mappings11 =", "+                new HashSet<String>(Arrays.asList(\"[1=1 2=2 3=3 4=4]\"));", "+        assertEquals(true, mappings11.remove(iter11.next().toString()));", "+        assertEquals(false, iter11.hasNext());", "+", "-        /* expected result is the mapping that is usually first found,", "-         * it is possible that a different matching is found first", "-         * (false result), though the algorithm works correctly,", "-         * especially if an ordering of the vertices is applied", "-         */", "-        assertEquals(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "-                vf12.getMappings().next().toString());", "+        Iterator<IsomorphicGraphMapping<Integer, DefaultEdge>> iter12 =", "+                vf12.getMappings();", "+        Set<String> mappings12 =", "+                new HashSet<String>(Arrays.asList(\"[0=~~ 1=8 2=10 3=9 4=7 5=6]\",", "+                        \"[0=~~ 1=9 2=8 3=10 4=7 5=6]\",", "+                        \"[0=~~ 1=10 2=9 3=8 4=7 5=6]\"));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(true, mappings12.remove(iter12.next().toString()));", "+        assertEquals(false, iter12.hasNext());"]}]}
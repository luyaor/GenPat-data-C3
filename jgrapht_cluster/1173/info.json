{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46a2d4bac30d2cac9783a20abcacd4f7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e685a9fd0d46753ae04ec0ab56c46e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \t \t \tpublic VF2SubState( \t\t\tGraphOrdering<V,E> g1, \t\t\tGraphOrdering<V,E> g2, \t\t\t \t\t\tComparator<V> vertexComparator, \t\t\tComparator<E> edgeComparator)", "signatureAfterChange": "     public VF2SubState(GraphOrdering<V, E> g1,                     GraphOrdering<V, E> g2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "diff": ["-\t", "-\tpublic VF2SubState(", "-\t\t\tGraphOrdering<V,E> g1,", "-\t\t\tGraphOrdering<V,E> g2,", "-\t\t\t", "-\t\t\tComparator<V> vertexComparator,", "-\t\t\tComparator<E> edgeComparator)", "-\t{", "-\t\t// to avoid this one should start the array at 1 instead of 0 and use 0 as value for NULL_NODE", "-\t\tNULL_NODE = Integer.MAX_VALUE;", "-\t\t", "-\t\tthis.g1 = g1;", "-\t\tthis.g2 = g2;", "-\t\tthis.vertexComparator = vertexComparator;", "-\t\tthis.edgeComparator   = edgeComparator;", "-\t\t", "-\t\tn1 = g1.getVertexCount();", "-\t\tn2 = g2.getVertexCount();", "-\t\t", "-\t\tcore1 = new int[n1];", "-\t\tin1   = new int[n1];", "-\t\tout1  = new int[n1];", "-\t\tcore2 = new int[n2];", "-\t\tin2   = new int[n2];", "-\t\tout2  = new int[n2];", "-\t\tArrays.fill(core1, NULL_NODE);", "-\t\tArrays.fill(core2, NULL_NODE);", "-\t\t", "-\t\tcoreLen = 0;", "-\t\taddedVertex1 = addVertex1 = addVertex2 = NULL_NODE;", "-\t\t", "-\t\tt1BothLen = t2BothLen = t1InLen = t2InLen = t1OutLen = t2OutLen = 0;", "-\t}", "+     */", "+    public VF2SubState(GraphOrdering<V, E> g1,", "+                    GraphOrdering<V, E> g2,", "+                    Comparator<V> vertexComparator,", "+                    Comparator<E> edgeComparator)", "+    {", "+        this.g1               = g1;", "+        this.g2               = g2;", "+        this.vertexComparator = vertexComparator;", "+        this.edgeComparator   = edgeComparator;", "+", "+        n1 = g1.getVertexCount();", "+        n2 = g2.getVertexCount();", "+", "+        core1 = new int[n1];", "+        in1   = new int[n1];", "+        out1  = new int[n1];", "+        core2 = new int[n2];", "+        in2   = new int[n2];", "+        out2  = new int[n2];", "+        Arrays.fill(core1, NULL_NODE);", "+        Arrays.fill(core2, NULL_NODE);", "+", "+        coreLen = 0;", "+        addedVertex1 = addVertex1 = addVertex2 = NULL_NODE;", "+", "+        t1BothLen = t2BothLen = t1InLen = t2InLen = t1OutLen = t2OutLen = 0;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac46ddfeafb40395f2e86737f77749a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/SubgraphIsomorphismRelation.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t  \tpublic SubgraphIsomorphismRelation( \t\t\tGraphOrdering<V,E> g1, \t\t\tGraphOrdering<V,E> g2, \t\t\tint[] core1, \t\t\tint[] core2)", "signatureAfterChange": "     public SubgraphIsomorphismRelation(                     GraphOrdering<V, E> g1,                     GraphOrdering<V, E> g2,                     int[] core1,                     int[] core2)", "diff": ["-\tpublic SubgraphIsomorphismRelation(", "-\t\t\tGraphOrdering<V,E> g1,", "-\t\t\tGraphOrdering<V,E> g2,", "-\t\t\tint[] core1,", "-\t\t\tint[] core2)", "-\t{", "-\t\tNULL_NODE = Integer.MAX_VALUE;", "-\t\t", "-\t\tthis.g1 = g1;", "-\t\tthis.g2 = g2;", "-\t\tthis.core1 = core1.clone();", "-\t\tthis.core2 = core2.clone();", "-\t}", "+     */", "+    public SubgraphIsomorphismRelation(", "+                    GraphOrdering<V, E> g1,", "+                    GraphOrdering<V, E> g2,", "+                    int[] core1,", "+                    int[] core2)", "+    {", "+        this.g1    = g1;", "+        this.g2    = g2;", "+        this.core1 = core1.clone();", "+        this.core2 = core2.clone();", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb32a84b20da59e53cd85bfcb51cd325", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a254c43148ad4e10cd804d0cff226d4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "c0b16b6556c96539006185d958b0f5e843675e68", "commitAfterChange": "b1382aa25544721cf9f8cd8ebbac3a2da4113463", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testAddEdgeObjectObject(  )", "signatureAfterChange": "     public void testAddEdgeObjectObject(  )", "diff": ["-            g1.addEdge( v1, v1 ); // loops not allowed", "+            m_g1.addEdge( m_v1, m_v1 ); // loops not allowed", "-            g3.addEdge( null, null );", "+            m_g3.addEdge( null, null );", "-            g1.addEdge( v2, v1 ); // no such vertex in graph", "+            m_g1.addEdge( m_v2, m_v1 ); // no such vertex in graph", "-        assertNull( g2.addEdge( v2, v1 ) );", "-        assertNull( g3.addEdge( v2, v1 ) );", "-        assertNotNull( g4.addEdge( v2, v1 ) );", "+        assertNull( m_g2.addEdge( m_v2, m_v1 ) );", "+        assertNull( m_g3.addEdge( m_v2, m_v1 ) );", "+        assertNotNull( m_g4.addEdge( m_v2, m_v1 ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6163bbde9d1ef8a4f3a63c6a190c62a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testAddEdgeObjectObject()", "signatureAfterChange": "     public void testAddEdgeObjectObject()", "diff": ["-            m_g1.addEdge(m_v1, m_v1); // loops not allowed", "+            g1.addEdge(v1, v1); // loops not allowed", "-            m_g3.addEdge(null, null);", "+            g3.addEdge(null, null);", "-            m_g1.addEdge(m_v2, m_v1); // no such vertex in graph", "+            g1.addEdge(v2, v1); // no such vertex in graph", "-        assertNull(m_g2.addEdge(m_v2, m_v1));", "-        assertNull(m_g3.addEdge(m_v2, m_v1));", "-        assertNotNull(m_g4.addEdge(m_v2, m_v1));", "+        assertNull(g2.addEdge(v2, v1));", "+        assertNull(g3.addEdge(v2, v1));", "+        assertNotNull(g4.addEdge(v2, v1));"]}]}
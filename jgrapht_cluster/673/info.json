{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af0505ddbfdcab34bed8ef8ba7872a24", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b4c2e5749bbae79009ca05d2e1da26c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TarjanLowestCommonAncestorTest.java", "commitBeforeChange": "031459d6e58bfab7227c1f29575f466935e4a228", "commitAfterChange": "4f70257bd051e3e96df9996dad40065743a630ec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDag()", "signatureAfterChange": "      @Test     public void testNonBinaryTree()", "diff": ["-    public void testDag() {", "+    public void testNonBinaryTree() {", "+\tg.addVertex(\"h\");", "+\tg.addVertex(\"i\");", "+\tg.addVertex(\"j\");", "-\tg.addEdge(\"d\", \"f\");", "-\tg.addEdge(\"b\", \"e\");", "-\tg.addEdge(\"e\", \"f\");", "-\tg.addEdge(\"f\", \"g\");", "+\tg.addEdge(\"d\", \"e\");", "+\tg.addEdge(\"b\", \"f\");", "+\tg.addEdge(\"b\", \"g\");", "+\tg.addEdge(\"c\", \"h\");", "+\tg.addEdge(\"c\", \"i\");", "+\tg.addEdge(\"i\", \"j\");", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"b\", \"g\"));", "-\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"e\", \"d\"));", "-\tAssert.assertEquals(\"d\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"f\", \"d\"));", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"b\", \"h\"));", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"j\", \"f\"));", "+\tAssert.assertEquals(\"c\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"j\", \"h\"));", "-\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"g\");", "-\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"e\", \"d\");", "-\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"f\", \"d\");", "+\tLcaRequestResponse<String> bg = new LcaRequestResponse<String>(\"b\", \"h\");", "+\tLcaRequestResponse<String> ed = new LcaRequestResponse<String>(\"j\", \"f\");", "+\tLcaRequestResponse<String> fd = new LcaRequestResponse<String>(\"j\", \"h\");", "-\t", "-\tAssert.assertEquals(\"d\",fd.getLca());", "+\tAssert.assertEquals(\"c\",fd.getLca());", "-\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"d\"}),result);", "+\tAssert.assertEquals(Arrays.asList(new String[]{\"b\",\"b\",\"c\"}),result);", "-\t", "-\t// test it the other way around", "-\tAssert.assertEquals(\"d\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"a\", \"d\", \"f\"));", "+\t// test it the other way around and starting from b", "+\tAssert.assertEquals(\"b\", new TarjanLowestCommonAncestor<String, DefaultEdge>(g).calculate(\"b\", \"h\", \"b\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8998d7d8025b89ba6633087337bd30ee", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean containsTargetPreviously(         RankingPathElement<V, E> pathElement)", "signatureAfterChange": "     private boolean isGuardVertexDisconnected(         RankingPathElement<V, E> prevPathElement)", "diff": ["-    private boolean containsTargetPreviously(", "-        RankingPathElement<V, E> pathElement)", "-    {", "-        RankingPathElement<V, E> tempPathElement = pathElement;", "-        while (tempPathElement.getPrevEdge() != null) {", "-            if (tempPathElement.getVertex() == this.vertex) {", "-                return true;", "-            } else {", "-                tempPathElement = tempPathElement.getPrevPathElement();", "-            }", "-        }", "-        return false;", "-    }", "+    private boolean isGuardVertexDisconnected(", "+        if (this.guardVertexToNotDisconnect == null) {", "+            return false;", "+", "+        if (this.path2disconnect.containsKey(prevPathElement)) {", "+            return this.path2disconnect.get(prevPathElement);", "+        }", "+", "+        ConnectivityInspector<V, E> connectivityInspector;", "+        MaskFunctor<V, E> connectivityMask;", "+", "+        if (this.graph instanceof DirectedGraph<?, ?>) {", "+            connectivityMask = new PathMask<V, E>(prevPathElement);", "+            DirectedMaskSubgraph<V, E> connectivityGraph =", "+                new DirectedMaskSubgraph<V, E>(", "+                    (DirectedGraph<V, E>) this.graph,", "+                    connectivityMask);", "+            connectivityInspector =", "+                new ConnectivityInspector<V, E>(", "+                    connectivityGraph);", "+        } else {", "+            connectivityMask = new PathMask<V, E>(prevPathElement);", "+            UndirectedMaskSubgraph<V, E> connectivityGraph =", "+                new UndirectedMaskSubgraph<V, E>(", "+                    (UndirectedGraph<V, E>) this.graph,", "+                    connectivityMask);", "+            connectivityInspector =", "+                new ConnectivityInspector<V, E>(", "+                    connectivityGraph);", "+        }", "+", "+        if (connectivityMask.isVertexMasked(this.guardVertexToNotDisconnect)) {", "+            // the guard-vertex was already in the path element -> invalid path", "+            this.path2disconnect.put(prevPathElement, true);", "+            return true;", "+        }", "+", "+        if (!connectivityInspector.pathExists(", "+                this.vertex,", "+                this.guardVertexToNotDisconnect))", "+        {", "+            this.path2disconnect.put(prevPathElement, true);", "+            return true;", "+        }", "+", "+        this.path2disconnect.put(prevPathElement, false);", "+    }"]}]}
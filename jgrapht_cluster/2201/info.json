{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d894a604913e77337d47d974d96601b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "663e14100d7b08a03b6db7b5ed3561c1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "2bc963d635f1387003153797aed8f23b13ab7da1", "commitAfterChange": "a4290d9c2b951f2351aab06bfad84c59bf804b25", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public V calculate(V start, V a, V b)", "signatureAfterChange": "     public V calculate(V start, V a, V b)", "diff": ["-\tLcaRequestResponse<V> lrr = new LcaRequestResponse<V>(a, b);", "-\tnew Worker(lrr).calculate(start);", "-\treturn lrr.getLca();", "+\tList<LcaRequestResponse<V>> list = new LinkedList<LcaRequestResponse<V>>();", "+\tlist.add(new LcaRequestResponse<V>(a, b));", "+\treturn calculate(start, list).get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a8739621c236434565dc7c1d97ac76", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/NeighborIndexTest.java", "commitBeforeChange": "9aa77050b482cd35622f2b052f283cbdea563cf6", "commitAfterChange": "71029068583c81632b4d5180b7465932b933e753", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNeighborSet()", "signatureAfterChange": "      public void testNeighborSet()", "diff": ["-        Set neighbors = index.neighborsOf(V1);", "+        Set neighbors1 = index.neighborsOf(V1);", "-        assertEquals(1, neighbors.size());", "-        assertEquals(true, neighbors.contains(V2));", "+        assertEquals(1, neighbors1.size());", "+        assertEquals(true, neighbors1.contains(V2));", "-        assertEquals(2, neighbors.size());", "-        assertEquals(true, neighbors.contains(V3));", "+        Set neighbors3 = index.neighborsOf(V3);", "+        ", "+        assertEquals(2, neighbors1.size());", "+        assertEquals(true, neighbors1.contains(V3));", "+", "+        assertEquals(1, neighbors3.size());", "+        assertEquals(true, neighbors3.contains(V1));", "-        assertEquals(1, neighbors.size());", "-        assertEquals(false, neighbors.contains(V3));", "+        assertEquals(1, neighbors1.size());", "+        assertEquals(false, neighbors1.contains(V3));", "+        assertEquals(0, neighbors3.size());", "+        ", "-        assertEquals(0, neighbors.size());", "+        assertEquals(0, neighbors1.size());"]}]}
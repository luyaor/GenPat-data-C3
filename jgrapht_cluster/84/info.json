{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f44615007714b241bd8fd07629f577f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b55fe116500a1180c38028033707989", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/isomorphism/IsomorphismRelation.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "signatureAfterChange": "      public E getEdgeCorrespondence(E edge, boolean forward)", "diff": ["-     */", "-    public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "-    {", "-        // lazy initiliazer for graphMapping", "-        Object resultObject =", "-            this.graphMapping.getCorrespondence(vertexOrEdge, forward);", "-        return resultObject;", "+", "+    public E getEdgeCorrespondence(E edge, boolean forward)", "+    {", "+        // lazy initializer for graphMapping", "+        if (graphMapping == null) {", "+            initGraphMapping();", "+        }", "+", "+        return graphMapping.getEdgeCorrespondence(edge, forward);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9456219df010c2b5b2ae13a1dc418aef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/DefaultGraphMapping.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "signatureAfterChange": "     public Object getCorrespondence(Object vertexOrEdge, boolean forward)", "diff": ["-        if (vertexOrEdge instanceof Edge) {", "-            Edge currEdge = (Edge) vertexOrEdge;", "+        if (sourceGraph.containsEdge(vertexOrEdge)) {", "+            Object currEdge = vertexOrEdge;", "-                getCorrespondenceVertex(currEdge.getSource(), forward);", "+                getCorrespondenceVertex(", "+                    sourceGraph.getEdgeSource(currEdge), forward);", "-                getCorrespondenceVertex(currEdge.getTarget(), forward);", "+                getCorrespondenceVertex(", "+                    sourceGraph.getEdgeTarget(currEdge), forward);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9364a938fd81118ab56229c196e3ad7a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51bee7a7f5f9dc22d6dbf95d0daa56a8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "ca153311ebb476220b5c58117cc53dc83fd78ea6", "commitAfterChange": "813f75565241c6a2b1109a8415fe2c264ac5efee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-        initialize(extendedVertex(source), active);", "+", "+        VertexExtension sourceX = extendedVertex(source);", "+        VertexExtension sinkX   = extendedVertex(sink);", "+", "+        initialize(sourceX, active);", "-                        if (ex.getTarget() != extendedVertex(sink))", "+                        if (ex.getTarget() != sinkX && ex.getTarget() != sourceX)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f34685bdba4c787dd5942890054c6e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public boolean addEdge(E e)", "signatureAfterChange": "     public boolean addEdge(V sourceVertex, V targetVertex, E e)", "diff": ["-    public boolean addEdge(E e)", "+    public boolean addEdge(V sourceVertex, V targetVertex, E e)", "-        V sourceVertex = e.getSource();", "-        V targetVertex = e.getTarget();", "-", "-", "-        assertCompatibleWithEdgeFactory(e);", "-", "+        ", "-        m_edgeSet.add(e);", "+        IntrusiveEdge intrusiveEdge =", "+            createIntrusiveEdge(e, sourceVertex, targetVertex);", "+", "+        m_edgeMap.put(e, intrusiveEdge);", "+    }"]}]}
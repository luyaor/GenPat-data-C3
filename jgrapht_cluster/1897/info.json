{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91feca9023655fa4f47d275f27f5e6f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f65bda3eeeee1ec0e040583f63ce14d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-        if (m_stronglyConnectedSets == null) {", "-            m_orderedVertices = new LinkedList<VertexData<V>>();", "-            m_stronglyConnectedSets = new Vector<Set<V>>();", "+        if (stronglyConnectedSets == null) {", "+            orderedVertices = new LinkedList<VertexData<V>>();", "+            stronglyConnectedSets = new Vector<Set<V>>();", "-                m_vertexToVertexData.values().iterator();", "+                vertexToVertexData.values().iterator();", "-                if (!data.m_discovered) {", "-                    dfsVisit(m_graph, data, null);", "+                if (!data.discovered) {", "+                    dfsVisit(graph, data, null);", "-                new DefaultDirectedGraph<V, E>(m_graph.getEdgeFactory());", "-            Graphs.addGraphReversed(inverseGraph, m_graph);", "+                new DefaultDirectedGraph<V, E>(graph.getEdgeFactory());", "+            Graphs.addGraphReversed(inverseGraph, graph);", "-            iter = m_orderedVertices.iterator();", "+            iter = orderedVertices.iterator();", "-                if (!data.m_discovered) {", "+                if (!data.discovered) {", "-                    m_stronglyConnectedSets.add(set);", "+                    stronglyConnectedSets.add(set);", "-            m_orderedVertices = null;", "-            m_vertexToVertexData = null;", "+            orderedVertices = null;", "+            vertexToVertexData = null;", "-        return m_stronglyConnectedSets;", "+        return stronglyConnectedSets;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba07b9f212f15c850c478754430c970", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void dfsVisit(DirectedGraph<V, E> graph,         VertexData<V> vertexData,         Set<V> vertices)", "signatureAfterChange": "     private void dfsVisit(DirectedGraph<V, E> graph,         VertexData<V> vertexData,         Set<V> vertices)", "diff": ["-            if (!data.m_discovered) {", "-                data.m_discovered = true;", "+            if (!data.discovered) {", "+                data.discovered = true;", "-                    vertices.add(data.m_vertex);", "+                    vertices.add(data.vertex);", "-                    graph.outgoingEdgesOf(data.m_vertex).iterator();", "+                    graph.outgoingEdgesOf(data.vertex).iterator();", "-                        m_vertexToVertexData.get(m_graph.getEdgeTarget(edge));", "+                        vertexToVertexData.get(this.graph.getEdgeTarget(edge));", "-                    if (!targetData.m_discovered) {", "+                    if (!targetData.discovered) {", "-            } else if (data.m_finished) {", "+            } else if (data.finished) {", "-                    m_orderedVertices.addFirst(data.m_finishedData);", "+                    orderedVertices.addFirst(data.finishedData);"]}]}
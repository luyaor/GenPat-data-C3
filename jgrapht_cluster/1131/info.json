{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c699fa6bdbd791a482148afc9e52f0e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c085405fc44232350d1ab49e53870cf7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tprivate void _verticesReachableByTightAlternatingEdgesFromVertex(List<V> verticesToProcess, boolean needMatchedEdge, Map<V, List<E>> pathsToVertices)", "signatureAfterChange": " \t \tprivate void findPathsToVerticesFromVertices(List<V> verticesToProcess, boolean needMatchedEdge, Map<V, List<E>> pathsToVertices)", "diff": ["-\tprivate void _verticesReachableByTightAlternatingEdgesFromVertex(List<V> verticesToProcess, boolean needMatchedEdge, Map<V, List<E>> pathsToVertices) {", "+\tprivate void findPathsToVerticesFromVertices(List<V> verticesToProcess, boolean needMatchedEdge, Map<V, List<E>> pathsToVertices) {", "-\t\t\t\tV adjacentVertex = adjacentVertex(edge, vertex);", "+\t\t\t\tV adjacentVertex = Graphs.getOppositeVertex(graph, edge, vertex);", "-\t\t_verticesReachableByTightAlternatingEdgesFromVertex(nextVerticesToProcess, !needMatchedEdge, pathsToVertices);", "+\t\tfindPathsToVerticesFromVertices(nextVerticesToProcess, !needMatchedEdge, pathsToVertices);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5d015e75579d1322a4daf202954fd1e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/traverse/ClosestFirstIterator.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private double calculatePathLength(V vertex, E edge)", "signatureAfterChange": "     private double calculatePathLength(V vertex, E edge)", "diff": ["-        V otherVertex = edge.oppositeVertex(vertex);", "+        V otherVertex = Graphs.getOppositeVertex(getGraph(), edge, vertex);", "-        return otherEntry.getShortestPathLength() + edge.getWeight();", "+        return otherEntry.getShortestPathLength()", "+            + getGraph().getEdgeWeight(edge);"]}]}
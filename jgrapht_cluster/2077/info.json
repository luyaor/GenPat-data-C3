{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4f199ebc1ca0ba6fc0b0b1994405b28", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5241f30913009c9fd2fd1b335bc07869", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/util/FibonacciHeapNode.java", "commitBeforeChange": "e001cc8146b616d3da90eb6cff49e32ca1fc4a04", "commitAfterChange": "b7f329ad24e729f34dfea65831437c4420189a75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-        if (true) {", "-            return Double.toString(key);", "-        } else {", "-            StringBuffer buf = new StringBuffer();", "-            buf.append(\"Node=[parent = \");", "-", "-            if (parent != null) {", "-                buf.append(Double.toString(parent.key));", "-            } else {", "-                buf.append(\"---\");", "-            }", "-", "-            buf.append(\", key = \");", "-            buf.append(Double.toString(key));", "-            buf.append(\", degree = \");", "-            buf.append(Integer.toString(degree));", "-            buf.append(\", right = \");", "-", "-            if (right != null) {", "-                buf.append(Double.toString(right.key));", "-            } else {", "-                buf.append(\"---\");", "-            }", "-", "-            buf.append(\", left = \");", "-", "-            if (left != null) {", "-                buf.append(Double.toString(left.key));", "-            } else {", "-                buf.append(\"---\");", "-            }", "-", "-            buf.append(\", child = \");", "-", "-            if (child != null) {", "-                buf.append(Double.toString(child.key));", "-            } else {", "-                buf.append(\"---\");", "-            }", "-", "-            buf.append(']');", "-", "-            return buf.toString();", "-        }", "+        return Double.toString(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e5309930bb61d003f9e88c9abb445cf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "5e9dfdedbd0f501394dd50a31fc000abcac738de", "commitAfterChange": "0fa22166c3bce2b4318de51e3645ef9910304701", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDirectedGraph(  )", "signatureAfterChange": "     public void testDirectedGraph(  )", "diff": ["+        m_result = new StringBuffer(  );", "+", "+        DirectedGraph         graph = createDirectedGraph(  );", "+", "+        AbstractGraphIterator iterator = createIterator( graph, \"1\" );", "+        iterator.addTraversalListener( new MyTraversalListener(  ) );", "+", "+        while( iterator.hasNext(  ) ) {", "+            m_result.append( (String) iterator.next(  ) );", "+", "+            if( iterator.hasNext(  ) ) {", "+                m_result.append( ',' );", "+            }", "+        }", "+", "+        assertEquals( getExpectedStr2(  ), m_result.toString(  ) );", "+    }", "-        AbstractGraphIterator iterator = createIterator( graph, v1 );", "-        iterator.addTraversalListener( new MyTraversalListener(  ) );", "-", "-        while( iterator.hasNext(  ) ) {", "-            m_result.append( (String) iterator.next(  ) );", "-", "-            if( iterator.hasNext(  ) ) {", "-                m_result.append( ',' );", "-            }", "-        }", "-", "-        assertEquals( getExpectedStr2(  ), m_result.toString(  ) );"]}]}
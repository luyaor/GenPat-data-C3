{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "670162cb87fa964f344ec27ec63804b5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e77228f181dafba28337fd9e583bfa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "5e9dfdedbd0f501394dd50a31fc000abcac738de", "commitAfterChange": "0fa22166c3bce2b4318de51e3645ef9910304701", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static List findPathBetween( Graph graph, Object startVertex,         Object endVertex )", "signatureAfterChange": "     public static List findPathBetween( Graph graph, Object startVertex,         Object endVertex )", "diff": ["-        ClosestFirstIterator iter =", "-            new ClosestFirstIterator( graph, startVertex );", "+        DijkstraShortestPath alg =", "+            new DijkstraShortestPath( graph, startVertex, endVertex,", "+                Double.POSITIVE_INFINITY );", "-        while( iter.hasNext(  ) ) {", "-            Object vertex = iter.next(  );", "-", "-            if( vertex.equals( endVertex ) ) {", "-                return createPath( iter, endVertex );", "-            }", "-        }", "-", "-        return null;", "+        return alg.getPathEdgeList(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b38ad714be2ba825f361abb77b9c6933", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/equivalence/EquivalenceComparatorChainBase.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean equivalenceCompare(         Object arg1,         Object arg2,         Object context1,         Object context2)", "signatureAfterChange": "     public boolean equivalenceCompare(         E arg1,         E arg2,         C context1,         C context2)", "diff": ["-        Object arg1,", "-        Object arg2,", "-        Object context1,", "-        Object context2)", "+        E arg1,", "+        E arg2,", "+        C context1,", "+        C context2)", "-        for (ListIterator iter = this.chain.listIterator(); iter.hasNext();) {", "-            EquivalenceComparator currentComparator =", "-                (EquivalenceComparator) iter.next();", "+        for (EquivalenceComparator<? super E, ? super C> currentComparator : this.chain) {"]}]}
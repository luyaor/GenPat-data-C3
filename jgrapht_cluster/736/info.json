{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e45a2d727fccff7b154bb58e66d935ea", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3d68ab022eb3a337cbecf5efd1f9f66", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/ConnectivityInspector.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private List<Set<V>> lazyFindConnectedSets()", "signatureAfterChange": "      private List<Set<V>> lazyFindConnectedSets()", "diff": ["-        if (m_connectedSets == null) {", "-            m_connectedSets = new ArrayList<Set<V>>();", "+        if (connectedSets == null) {", "+            connectedSets = new ArrayList<Set<V>>();", "-            Set vertexSet = m_graph.vertexSet();", "+            Set vertexSet = graph.vertexSet();", "-                    new BreadthFirstIterator<V,E>(m_graph, null);", "+                    new BreadthFirstIterator<V,E>(graph, null);", "-        return m_connectedSets;", "+        return connectedSets;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9875c723ab61155c0312f8257464203", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "1c30121105c60b67780e0e06a7b4f218d73652b7", "commitAfterChange": "4d58b10b0afecfca94cdafae19a4fafd5b2b221c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     void handleJGraphTRemoveVertex(Object jtVertex)", "signatureAfterChange": "     void handleJGraphTRemoveVertex(Object jtVertex)", "diff": ["-        internalRemoveCell(vertexCell);", "-", "-        // FIXME: Why remove childAt(0)? Explain if correct, otherwise fix.", "-        if (vertexCell.getChildCount() > 0) {", "-            remove(new Object[] { vertexCell.getChildAt(0) });", "+        List<Object> ports = new ArrayList<Object>();", "+        ", "+        for (Object child : vertexCell.getChildren()) {", "+            if(this.isPort(child)) {", "+                ports.add(child);", "+            }", "+        this.remove(ports.toArray());", "+        ", "+        internalRemoveCell(vertexCell);"]}]}
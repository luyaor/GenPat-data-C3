{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca6a182523b5c63e4be59eebad0b9fbd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be575cd02b052cddf4d6ce92278e0b4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void addUnseenChildrenOf(V vertex)", "signatureAfterChange": "      private void addUnseenChildrenOf(V vertex)", "diff": ["-        List<E> edges = m_specifics.edgesOf(vertex);", "-", "-        for (Iterator<E> i = edges.iterator(); i.hasNext();) {", "-            E e = i.next();", "-            fireEdgeTraversed(createEdgeTraversalEvent(e));", "-", "-            V v = e.oppositeVertex(vertex);", "-", "-            if (isSeenVertex(v)) {", "-                encounterVertexAgain(v, e);", "-            } else {", "-                encounterVertex(v, e);", "-            }", "-        }", "+    \tfor (E edge : m_specifics.edgesOf(vertex)) {", "+    \t\tfireEdgeTraversed(createEdgeTraversalEvent(edge));", "+    \t\t", "+    \t\tV oppositeV = edge.oppositeVertex(vertex);", "+    \t\t", "+    \t\tif (isSeenVertex(oppositeV)) {", "+    \t\t\tencounterVertexAgain(oppositeV, edge);", "+    \t\t} else {", "+    \t\t\tencounterVertex(oppositeV, edge);", "+    \t\t}", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea192240476cd35439b416cf5b2926d2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/DepthFirstIterator.java", "commitBeforeChange": "3cf8c5a89937c13e56521bf120df93d38d5c84ee", "commitAfterChange": "992268c2ef72b87aa653335246e4876213a0071b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "       private void collectChildren( Object nextVertex, List edges )", "signatureAfterChange": "       private void pushChildrenOf( Object vertex )", "diff": ["-", "-    private void collectChildren( Object nextVertex, List edges ) {", "-        for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "-            Edge e = (Edge) iter.next(  );", "-            fireEdgeVisited( e );", "-", "-            Object v = e.oppositeVertex( nextVertex );", "-", "-            if( !m_visited.contains( v ) ) {", "-                m_stack.add( v );", "-            }", "+", "+    private void pushChildrenOf( Object vertex ) {", "+        List edges = m_specifics.edgesOf( vertex );", "+", "+        for( Iterator iter = edges.iterator(  ); iter.hasNext(  ); ) {", "+            Edge e = (Edge) iter.next(  );", "+            fireEdgeVisited( e );", "+", "+            Object v = e.oppositeVertex( vertex );", "+", "+            if( !m_seen.contains( v ) ) {", "+                m_seen.add( v );", "+                m_stack.add( v );", "+            }", "+        }"]}]}
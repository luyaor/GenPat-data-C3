{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b84caf207d434bae73cab9182505117", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67a8739621c236434565dc7c1d97ac76", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/NeighborIndexTest.java", "commitBeforeChange": "9aa77050b482cd35622f2b052f283cbdea563cf6", "commitAfterChange": "71029068583c81632b4d5180b7465932b933e753", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNeighborSet()", "signatureAfterChange": "      public void testNeighborSet()", "diff": ["-        Set neighbors = index.neighborsOf(V1);", "+        Set neighbors1 = index.neighborsOf(V1);", "-        assertEquals(1, neighbors.size());", "-        assertEquals(true, neighbors.contains(V2));", "+        assertEquals(1, neighbors1.size());", "+        assertEquals(true, neighbors1.contains(V2));", "-        assertEquals(2, neighbors.size());", "-        assertEquals(true, neighbors.contains(V3));", "+        Set neighbors3 = index.neighborsOf(V3);", "+        ", "+        assertEquals(2, neighbors1.size());", "+        assertEquals(true, neighbors1.contains(V3));", "+", "+        assertEquals(1, neighbors3.size());", "+        assertEquals(true, neighbors3.contains(V1));", "-        assertEquals(1, neighbors.size());", "-        assertEquals(false, neighbors.contains(V3));", "+        assertEquals(1, neighbors1.size());", "+        assertEquals(false, neighbors1.contains(V3));", "+        assertEquals(0, neighbors3.size());", "+        ", "-        assertEquals(0, neighbors.size());", "+        assertEquals(0, neighbors1.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d15511307f946acc01ff98a025b154", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/DijkstraShortestPathAlgorithmTest.java", "commitBeforeChange": "4fdf29e8e01612a5ae4f7bfb3db5d9d1a27f8bc6", "commitAfterChange": "b417c7bfb816527977f131839428e669645f0a3a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testShortestPath()", "signatureAfterChange": "     public void testShortestPath(  )", "diff": ["-    public void testShortestPath() {", "-        WeightedGraph         g        = create();", "-        ShortestPathAlgorithm alg      = new DijkstraShortestPathAlgorithm(g);", "-        WeightedGraph         pathTree = alg.shortestPathTree(m_v1);", "+    public void testShortestPath(  ) {", "+        WeightedGraph         g        = create(  );", "+        ShortestPathAlgorithm alg      = new DijkstraShortestPathAlgorithm( g );", "+        WeightedGraph         pathTree = alg.shortestPathTree( V1 );", "-        assertEquals(4, pathTree.vertexSet().size());", "-        assertEquals(3, pathTree.edgeSet().size());", "-        assertTrue(pathTree.containsEdge(m_e1));", "-        assertTrue(pathTree.containsEdge(m_e2));", "-        assertTrue(pathTree.containsEdge(m_e4));", "+        assertEquals( 4, pathTree.vertexSet(  ).size(  ) );", "+        assertEquals( 3, pathTree.edgeSet(  ).size(  ) );", "+        assertTrue( pathTree.containsEdge( m_e1 ) );", "+        assertTrue( pathTree.containsEdge( m_e2 ) );", "+        assertTrue( pathTree.containsEdge( m_e4 ) );"]}]}
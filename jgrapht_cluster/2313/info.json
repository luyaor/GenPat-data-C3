{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "304465b72c1a6373cc549cb915d890c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "028cd638863348ecb4c353831b94c6c2", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      static Specifics createGraphSpecifics(Graph g)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\" \tstatic <V, E extends Edge<V>> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)", "diff": ["-    static Specifics createGraphSpecifics(Graph g)", "+     */", "+    @SuppressWarnings(\"unchecked\")\t// TODO hb 27-Nov-05: See FIXME below", "+\tstatic <V, E extends Edge<V>> Specifics<V, E> createGraphSpecifics(Graph<V, E> g)", "+            // TODO hb 27-Nov-05: I don't understand, yet, how to cast this nicely", "-            return new UndirectedSpecifics(g);", "+            return new UndirectedSpecifics<V, E>(g);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02ed1bf018aa07509a42798c07fb958d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static GraphIsomorphismInspector createIsomorphismInspectorByType(         int type,         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     public static <V,E extends Edge<V>> GraphIsomorphismInspector createIsomorphismInspectorByType(         int type,         Graph<V,E> graph1,         Graph<V,E> graph2,         EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "diff": ["-    public static GraphIsomorphismInspector createIsomorphismInspectorByType(", "+    public static <V,E extends Edge<V>> GraphIsomorphismInspector createIsomorphismInspectorByType(", "-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+        Graph<V,E> graph1,", "+        Graph<V,E> graph2,", "+        EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,", "+        EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d2c785f12a18a436588397382882c97", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static GraphIsomorphismInspector createIsomorphismInspector(         Graph graph1,         Graph graph2,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "     public static <V,E extends Edge<V>> GraphIsomorphismInspector createIsomorphismInspector(         Graph<V,E> graph1,         Graph<V,E> graph2,         EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)", "diff": ["-    public static GraphIsomorphismInspector createIsomorphismInspector(", "-        Graph graph1,", "-        Graph graph2,", "-        EquivalenceComparator vertexChecker,", "-        EquivalenceComparator edgeChecker)", "+    public static <V,E extends Edge<V>> GraphIsomorphismInspector createIsomorphismInspector(", "+        Graph<V,E> graph1,", "+        Graph<V,E> graph2,", "+        EquivalenceComparator<? super V,? super Graph<V,E>> vertexChecker,", "+        EquivalenceComparator<? super E,? super Graph<V,E>> edgeChecker)"]}]}
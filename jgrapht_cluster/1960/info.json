{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f679178b64b49c31e4dd19f94b44ad2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad9f1edcfa898a271431c9df515144a9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private boolean isAlreadyAdded(RankingPathElement<V, E> pathElement)", "signatureAfterChange": "      private boolean isNotValidPath(         RankingPathElement<V, E> prevPathElement,         E edge)", "diff": ["-", "-    private boolean isAlreadyAdded(RankingPathElement<V, E> pathElement)", "-    {", "-        for (int i = 0; i <= (size() - 1); i++) {", "-            RankingPathElement<V, E> yPathElement = get(i);", "-            RankingPathElement<V, E> pathElementToTest = pathElement;", "-            if (!isDifferent(yPathElement, pathElementToTest)) {", "-                return true;", "-            }", "-        }", "-        return false;", "-    }", "+", "+    private boolean isNotValidPath(", "+        RankingPathElement<V, E> prevPathElement,", "+        E edge)", "+    {", "+        return !isSimplePath(prevPathElement, edge)", "+            || isGuardVertexDisconnected(prevPathElement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f354a1088fb4602dbade8e001a549489", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "f6aa0f82d152c39f6790bc8a988d199ddf8d6d5b", "commitAfterChange": "263cf8512df3d55c8ea6cb1ee1ce3007847d0416", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public List<E> getEdgeList()", "signatureAfterChange": "      @Override     public List<E> getEdgeList()", "diff": ["-        List<E> result = new ArrayList<E>();", "-        for (int i = 0; i < getVertexList().size() - 1; i++) {", "-            result.add(this.getGraph().getEdge(", "-                getVertexList().get(i),", "-                getVertexList().get(i + 1)));", "-        }", "-        return result;", "+        return this.edges;"]}]}
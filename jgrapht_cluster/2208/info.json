{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9a1bfbb5352a72a1c7390c1d93f33de", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864b9f423911f20aad7e8954143a02e0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator edgeComparator)", "signatureAfterChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "diff": ["-        EquivalenceComparator edgeComparator)", "+        EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "-            Set edgeSet = this.graph1.edgeSet();", "+            Set<E> edgeSet = this.graph1.edgeSet();", "-            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-                Edge currEdge = (Edge) iter.next();", "-                Edge correspondingEdge =", "-                    (Edge) resultRelation.getCorrespondence(currEdge, true);", "+            for ( E currEdge : edgeSet ) {", "+                E correspondingEdge =", "+                    // XXX hb 060128: Waiting for GraphMapping to go generic", "+                    (E) resultRelation.getCorrespondence(currEdge, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba72d4c608b72dd9c24421a613c36879", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/SimpleGraphPath.java", "commitBeforeChange": "f6aa0f82d152c39f6790bc8a988d199ddf8d6d5b", "commitAfterChange": "263cf8512df3d55c8ea6cb1ee1ce3007847d0416", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "signatureAfterChange": "     public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices, double weight)", "diff": ["-    public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices)", "+    public SimpleGraphPath(SimpleGraph<V, E> simpleGraph, List<V> vertices, double weight)", "+        this.edges = new ArrayList<E>();", "+        this.weight = weight;", "-            if (getGraph().getEdge(", "+            E currentEdge = getGraph().getEdge(", "-                getVertexList().get(i + 1)) == null)", "+                getVertexList().get(i + 1));", "+            if (getGraph().containsEdge(currentEdge))", "+                edges.add(currentEdge);", "+            } else {"]}]}
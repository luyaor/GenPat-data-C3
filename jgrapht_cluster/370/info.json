{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48155bba896d7181e1777815b7564034", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be575cd02b052cddf4d6ce92278e0b4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/CrossComponentIterator.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      private void addUnseenChildrenOf(V vertex)", "signatureAfterChange": "      private void addUnseenChildrenOf(V vertex)", "diff": ["-        List<E> edges = m_specifics.edgesOf(vertex);", "-", "-        for (Iterator<E> i = edges.iterator(); i.hasNext();) {", "-            E e = i.next();", "-            fireEdgeTraversed(createEdgeTraversalEvent(e));", "-", "-            V v = e.oppositeVertex(vertex);", "-", "-            if (isSeenVertex(v)) {", "-                encounterVertexAgain(v, e);", "-            } else {", "-                encounterVertex(v, e);", "-            }", "-        }", "+    \tfor (E edge : m_specifics.edgesOf(vertex)) {", "+    \t\tfireEdgeTraversed(createEdgeTraversalEvent(edge));", "+    \t\t", "+    \t\tV oppositeV = edge.oppositeVertex(vertex);", "+    \t\t", "+    \t\tif (isSeenVertex(oppositeV)) {", "+    \t\t\tencounterVertexAgain(oppositeV, edge);", "+    \t\t} else {", "+    \t\t\tencounterVertex(oppositeV, edge);", "+    \t\t}", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6809414f9ab451c4b9dbbb56849fcc3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/DijkstraShortestPathTest.java", "commitBeforeChange": "e3d152c903d64a55a394899016d3b983c6acef7f", "commitAfterChange": "07571b88304723826e2edaac1a71e187c5b1dbe3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testPathBetween()", "signatureAfterChange": "      protected List findPathBetween(Graph g, String src, String dest)", "diff": ["-     */", "-    public void testPathBetween()", "+    protected List findPathBetween(Graph g, String src, String dest)", "-        List path;", "-        Graph g = create();", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V2);", "-        assertEquals(Arrays.asList(new Edge [] { m_e12 }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V4);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e12, m_e24", "-                }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V1, V5);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e12, m_e24, m_e45", "-                }), path);", "-", "-        path = DijkstraShortestPath.findPathBetween(g, V3, V4);", "-        assertEquals(Arrays.asList(new Edge [] {", "-                    m_e13, m_e12, m_e24", "-                }), path);", "-    }", "+        return DijkstraShortestPath.findPathBetween(g, src, dest);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98dabc063909933950a23bd539532f66", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1c07fc4d838bf875cabc20c86b8a1f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/SubgraphIsomorphismRelation.java", "commitBeforeChange": "af1b824446ff484516d50232b001351d46878322", "commitAfterChange": "7e936137877a73e8b9c1b2921fc4174c64f683c0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public String toString()", "signatureAfterChange": "      @Override     public String toString()", "diff": ["-", "-        // somehow enforce an ordering on the vertices of g1..", "-        TreeSet<V> vertexSet = new TreeSet<V>(g1.getGraph().vertexSet());", "-        for (V v : vertexSet)", "-            str += v.toString() + \"=\" +(hasVertexCorrespondence(v) ?", "-                            getVertexCorrespondence(v, true) : \"~~\") + \" \";", "-        return str.substring(0, str.length() - 1) + \"]\";", "+        Set<V> vertexSet = g1.getGraph().vertexSet();", "+        ", "+        int i = 0;", "+        for (V v : vertexSet)   {", "+            V u = getVertexCorrespondence(v, true);", "+            str += (i++ == 0 ? \"\" : \" \") + v.toString() + \"=\" +", "+                            (u == null ? \"~~\" : u);", "+        }", "+        ", "+        return str + \"]\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b3f961c36b682c476abadec89377b5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/CliqueMinimalSeparatorDecomposition.java", "commitBeforeChange": "b338dc522beb4643906288a4c91571a7ab1b1795", "commitAfterChange": "8b53e2969b312c1e6f35e85a43bc0437bf413b79", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r     private static <V, E> boolean isClique(\r         UndirectedGraph<V, E> graph,\r         Set<V> vertices)", "signatureAfterChange": "     private static <V, E> boolean isClique(         UndirectedGraph<V, E> graph,         Set<V> vertices)", "diff": ["-     */\r", "-    private static <V, E> boolean isClique(\r", "-        UndirectedGraph<V, E> graph,\r", "-        Set<V> vertices)\r", "-    {\r", "-        for (V v1 : vertices) {\r", "-            for (V v2 : vertices) {\r", "-                if (v1 != v2 && graph.getEdge(v1, v2) == null)\r", "-                    return false;\r", "-            }\r", "-        }\r", "-        return true;\r", "-    }\r", "+     */", "+    private static <V, E> boolean isClique(", "+        UndirectedGraph<V, E> graph,", "+        Set<V> vertices)", "+    {", "+        for (V v1 : vertices) {", "+            for (V v2 : vertices) {", "+                if ((v1 != v2) && (graph.getEdge(v1, v2) == null)) {", "+                    return false;", "+                }", "+            }", "+        }", "+        return true;", "+    }"]}]}
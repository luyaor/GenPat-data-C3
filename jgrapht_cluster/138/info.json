{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "829557a32bd833e37ce7b4afbe3cf846", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcbdf6ac44bbce4cabff28b7c433c201", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/CliqueMinimalSeparatorDecompositionTest.java", "commitBeforeChange": "e096a848def5e6232ed0c3a8301c3d86cf8779db", "commitAfterChange": "9d75fdc8cd3fdb7ad853c07b3c0691a84b8b4400", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r     public void testTarjan1985()", "signatureAfterChange": "\r     public void testTarjan1985()", "diff": ["+\r", "+        // disabled:  this currently returns 23 instead of 21\r", "+        /*\r", "+        */\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1600beb143b73fe1aaccaf81adfda42", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testPicture1Graph()", "signatureAfterChange": "      public void testPicture1Graph()", "diff": ["+    public void testPicture1Graph()", "+    {", "+        Picture1Graph picture1Graph = new Picture1Graph();", "+", "+        int maxSize = 10;", "+", "+        KShortestPaths pathFinder =", "+            new KShortestPaths(picture1Graph, \"vS\",", "+                maxSize);", "+", "+        //      assertEquals(2, pathFinder.getPaths(\"v5\").size());", "+", "+        List pathElements = pathFinder.getPaths(\"v5\");", "+        GraphPath pathElement = (GraphPath) pathElements.get(0);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object[] {", "+                    picture1Graph.eS1,", "+                    picture1Graph.e15", "+                }),", "+            pathElement.getEdgeList());", "+", "+        List vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(new Object[] { \"vS\", \"v1\", \"v5\" }),", "+            vertices);", "+", "+        pathElement = (GraphPath) pathElements.get(1);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object[] {", "+                    picture1Graph.eS2,", "+                    picture1Graph.e25", "+                }),", "+            pathElement.getEdgeList());", "+", "+        vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(new Object[] { \"vS\", \"v2\", \"v5\" }),", "+            vertices);", "+", "+        pathElements = pathFinder.getPaths(\"v7\");", "+        pathElement = (GraphPath) pathElements.get(0);", "+        double lastCost = pathElement.getWeight();", "+        for (int i = 0; i < pathElements.size(); i++) {", "+            pathElement = (GraphPath) pathElements.get(i);", "+            double cost = pathElement.getWeight();", "+", "+            assertTrue(lastCost <= cost);", "+            lastCost = cost;", "+        }", "+    }", "-    public void testPicture1Graph()", "-        Picture1Graph picture1Graph = new Picture1Graph();", "-        int maxSize = 10;", "-        KShortestPaths pathFinder =", "-            new KShortestPaths(picture1Graph, \"vS\",", "-                maxSize);", "-        assertEquals(2, pathFinder.getPaths(\"v5\").size());", "-        List pathElements = pathFinder.getPaths(\"v5\");", "-        GraphPath pathElement = (GraphPath) pathElements.get(0);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    picture1Graph.eS1,", "-                    picture1Graph.e15", "-                }),", "-            pathElement.getEdgeList());", "-        List vertices = Graphs.getPathVertexList(pathElement);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    \"vS\",", "-                    \"v1\",", "-                    \"v5\"", "-                }),", "-            vertices);", "-        pathElement = (GraphPath) pathElements.get(1);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    picture1Graph.eS2,", "-                    picture1Graph.e25", "-                }),", "-            pathElement.getEdgeList());", "-        vertices = Graphs.getPathVertexList(pathElement);", "-        assertEquals(", "-            Arrays.asList(", "-                new Object[] {", "-                    \"vS\",", "-                    \"v2\",", "-                    \"v5\"", "-                }),", "-            vertices);", "-", "-        pathElements = pathFinder.getPaths(\"v7\");", "-        pathElement = (GraphPath) pathElements.get(0);", "-        double lastCost = pathElement.getWeight();", "-        for (int i = 0; i < pathElements.size(); i++) {", "-            pathElement = (GraphPath) pathElements.get(i);", "-            double cost = pathElement.getWeight();", "-", "-            assertTrue(lastCost <= cost);", "-            lastCost = cost;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62a4af6a0cd8f4c79d225f3f04a7921e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51bee7a7f5f9dc22d6dbf95d0daa56a8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "ca153311ebb476220b5c58117cc53dc83fd78ea6", "commitAfterChange": "813f75565241c6a2b1109a8415fe2c264ac5efee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-        initialize(extendedVertex(source), active);", "+", "+        VertexExtension sourceX = extendedVertex(source);", "+        VertexExtension sinkX   = extendedVertex(sink);", "+", "+        initialize(sourceX, active);", "-                        if (ex.getTarget() != extendedVertex(sink))", "+                        if (ex.getTarget() != sinkX && ex.getTarget() != sourceX)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a51edfcb83d681da31c110baa6518c86", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7aed39a1af86a04f66007baa8f1c62673d4be780", "commitAfterChange": "fa439ca86ad5484e4f0d6132cc374b67035ff8e3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-        buildInternal();", "-", "-        VertexExtension sourceX = extendedVertex(source);", "-        VertexExtension sinkX   = extendedVertex(sink);", "-", "-        initialize(sourceX, active);", "+        initialize(extendedVertex(source), extendedVertex(sink), active);", "-                        if (ex.getTarget() != sinkX && ex.getTarget() != sourceX)", "+                        if (ex.getTarget().prototype != sink && ex.getTarget().prototype != source)"]}]}
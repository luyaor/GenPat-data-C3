{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35fa8b2a6b4ba3a39e0c1d97f1e4c4e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1fec3bba786c591bae0710b7c0564e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tpublic E getEdge(int v1Order, int v2Order)", "signatureAfterChange": "     public E getEdge(int v1Number, int v2Number)", "diff": ["-\t", "-\tpublic E getEdge(int v1Order, int v2Order)\t{", "-\t\tV v1 = getVertex(v1Order),", "-\t\t  v2 = getVertex(v2Order);", "-\t\t", "-\t\t// this may be problematic on multigraphs..", "-\t\treturn graph.getEdge(v1, v2);", "-\t}", "+     */", "+    public E getEdge(int v1Number, int v2Number) {", "+        V v1 = getVertex(v1Number), v2 = getVertex(v2Number);", "+", "+        return graph.getEdge(v1, v2);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1b59e2b1fa511c80c41c0a301a232ef", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic boolean hasEdge(int v1Order, int v2Order)", "signatureAfterChange": "     public boolean hasEdge(int v1Number, int v2Number)", "diff": ["-\t", "-\tpublic boolean hasEdge(int v1Order, int v2Order)\t{", "-\t\tV v1 = getVertex(v1Order),", "-\t\t  v2 = getVertex(v2Order);", "-\t\t", "-\t\treturn graph.containsEdge(v1, v2);", "-\t}", "+     */", "+    public boolean hasEdge(int v1Number, int v2Number) {", "+        V v1 = getVertex(v1Number),", "+          v2 = getVertex(v2Number);", "+", "+        return graph.containsEdge(v1, v2);", "+    }"]}]}
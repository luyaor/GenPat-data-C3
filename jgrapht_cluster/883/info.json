{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "488186bf347d24946322ba5d642a5202", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb2c8577245be90630b9fb869defffa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public List incomingEdgesOf( Object vertex )", "signatureAfterChange": "     public List incomingEdgesOf( Object vertex )", "diff": ["-        return ( (DirectedGraph) m_base ).incomingEdgesOf( vertex );", "+        assertVertexExist( vertex );", "+", "+        ArrayList edges     = new ArrayList(  );", "+        List      baseEdges = ((DirectedGraph)m_base).incomingEdgesOf( vertex );", "+", "+        for( Iterator i = baseEdges.iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                edges.add( e );", "+            }", "+        }", "+", "+        return edges;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "976b6b8700bc07a89e29b8d2466700f1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public List outgoingEdgesOf( Object vertex )", "signatureAfterChange": "     public List outgoingEdgesOf( Object vertex )", "diff": ["-        return ( (DirectedGraph) m_base ).outgoingEdgesOf( vertex );", "+        assertVertexExist( vertex );", "+", "+        ArrayList edges     = new ArrayList(  );", "+        List      baseEdges = ((DirectedGraph)m_base).outgoingEdgesOf( vertex );", "+", "+        for( Iterator i = baseEdges.iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                edges.add( e );", "+            }", "+        }", "+", "+        return edges;"]}]}
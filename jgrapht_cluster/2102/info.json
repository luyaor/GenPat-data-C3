{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f75e77d8f266797442d04fb8c668f5b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef9e3b8c332851575928af72673b1e6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TransitiveReduction.java", "commitBeforeChange": "dc598aeea99bdfe17df08d02612a83157bf58529", "commitAfterChange": "8c43a5a1403dca2041b43ee00856b56c5e3d4dc0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void reduce()", "signatureAfterChange": "     public void reduce(final DirectedGraph<V, E> directedGraph)", "diff": ["-    public void reduce() {", "-        ", "-        int n = pathMatrix.length;", "-        int[][] transitivelyReducedMatrix = new int[n][n];", "-        System.arraycopy(pathMatrix, 0, transitivelyReducedMatrix, 0, pathMatrix.length);", "+     */", "+    public void reduce(final DirectedGraph<V, E> directedGraph) {", "+", "+        final List<V> vertices = new ArrayList<V>(directedGraph.vertexSet());", "+", "+        final int n = vertices.size();", "+", "+        BitSet[] originalMatrix = new BitSet[n];", "+        for (int i = 0; i < originalMatrix.length; i++) {", "+            originalMatrix[i] = new BitSet(n);", "+        }", "+", "+        // initialize matrix with zeros", "+        // 'By default, all bits in the set initially have the value false.'", "+        // cf. http://docs.oracle.com/javase/7/docs/api/java/util/BitSet.html", "+", "+        // initialize matrix with edges", "+        final Set<E> edges = directedGraph.edgeSet();", "+        for (final E edge : edges) {", "+            final V v1 = directedGraph.getEdgeSource(edge);", "+            final V v2 = directedGraph.getEdgeTarget(edge);", "+", "+            final int v_1 = vertices.indexOf(v1);", "+            final int v_2 = vertices.indexOf(v2);", "+", "+            originalMatrix[v_1].set(v_2);", "+        }", "+", "+        // create path matrix from original matrix", "+        final BitSet[] pathMatrix = originalMatrix;", "+", "+        transformToPathMatrix(pathMatrix);", "+", "+        // create reduced matrix from path matrix", "+        final BitSet[] transitivelyReducedMatrix = pathMatrix;", "+", "-        ", "-        for (int i = 0; i <n; i++) {", "-            for (int j = 0; j < n; j++) { ", "-                if (transitivelyReducedMatrix[i][j] == 0) {", "-                    // System.out.println(\"removing \"+vertices.get(i)+\" -> \"+vertices.get(j));", "-                    graph.removeEdge(graph.getEdge(vertices.get(i), vertices.get(j)));", "+", "+        // remove edges from the DirectedGraph which are not in the reduced", "+        // matrix", "+        for (int i = 0; i < n; i++) {", "+            for (int j = 0; j < n; j++) {", "+                if (!transitivelyReducedMatrix[i].get(j)) {", "+                    directedGraph.removeEdge(directedGraph.getEdge(vertices.get(i), vertices.get(j)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9136b46cca95a08197352c3397b51134", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/experimental/dag/DirectedAcyclicGraphTest.java", "commitBeforeChange": "49a0a0bda948a6b45a26ee9d253b12740a7bab2d", "commitAfterChange": "284fc7ad45b4c7b1575a67370ea974687b46d21f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void _testVisitedImplementationPerformance()", "signatureAfterChange": "     public void _testVisitedImplementationPerformance()", "diff": ["+                long bitSetDagTime = 0;", "+                            null);", "+                    DirectedAcyclicGraph<Long, DefaultEdge> bitSetDag =", "+                        new DirectedAcyclicGraph<Long, DefaultEdge>(", "+                            DefaultEdge.class,", "+                            new DirectedAcyclicGraph.VisitedBitSetImpl(),", "+                    ", "+                    long bitSetStart = System.nanoTime();", "+", "+                    for (Long vertex : sourceGraph.vertexSet()) {", "+                        bitSetDag.addVertex(vertex);", "+                    }", "+", "+                    for (DefaultEdge edge : sourceGraph.edgeSet()) {", "+                        Long edgeSource = sourceGraph.getEdgeSource(edge);", "+                        Long edgeTarget = sourceGraph.getEdgeTarget(edge);", "+", "+                        try {", "+                            bitSetDag.addDagEdge(edgeSource, edgeTarget);", "+                        } catch (DirectedAcyclicGraph.CycleFoundException e) {", "+                            // okay", "+                        }", "+                    }", "+", "+                    bitSetDagTime += System.nanoTime() - bitSetStart;", "+                System.out.println(", "+                    \"total BitSet time     =  \" + bitSetDagTime + \" ns\");"]}]}
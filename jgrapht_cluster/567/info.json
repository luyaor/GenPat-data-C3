{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e238ebc97527217d658b7f55f5520918", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "014ed4ec2aa057808a60e4e6ec11fecf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2IsomorphismInspector.java", "commitBeforeChange": "b45791c7d62f6d8e55334421984e95ff59806210", "commitAfterChange": "6439f444116cb1d103ecea1e31327eb85544da99", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public VF2IsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "     public VF2IsomorphismInspector(                     Graph<V, E> graph1,                     Graph<V, E> graph2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator,                     boolean cacheEdges)", "diff": ["-                    Comparator<E> edgeComparator)", "+                    Comparator<E> edgeComparator,", "+                    boolean cacheEdges)", "-        this.ordering1        = new GraphOrdering<V, E>(graph1, true);", "-        this.ordering2        = new GraphOrdering<V, E>(graph2, true);", "+        this.ordering1        = new GraphOrdering<V, E>(graph1, true,", "+                                                        cacheEdges);", "+        this.ordering2        = new GraphOrdering<V, E>(graph2, true,", "+                                                        cacheEdges);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35bf4bd990aab8cddffe2bb8838e19d5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "aa3bfda3799765b1a12cb238f8bd9573ca27d9b9", "commitAfterChange": "a1594c7a8cf14f3607828e0c2206c8cb46973c14", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List<Set<V>> stronglyConnectedSets()", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets()", "diff": ["-                if (!data.discovered) {", "+                if (!data.isDiscovered()) {", "-            // calculate inverse graph (i.e. every edge is reversed)", "-            DirectedGraph<V, E> inverseGraph =", "-                new DefaultDirectedGraph<V, E>(graph.getEdgeFactory());", "-            Graphs.addGraphReversed(inverseGraph, graph);", "+            // 'create' inverse graph (i.e. every edge is reversed)", "+            DirectedGraph<V, E> inverseGraph = new EdgeReversedGraph<V, E>(graph);", "-                if (!data.discovered) {", "+                if (!data.isDiscovered()) {"]}]}
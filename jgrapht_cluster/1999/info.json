{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37fd7df80f0ae47cee328374e201c98c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027e3f5173cb14eb27821d976611b83b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/TransitiveReductionTest.java", "commitBeforeChange": "dc598aeea99bdfe17df08d02612a83157bf58529", "commitAfterChange": "8c43a5a1403dca2041b43ee00856b56c5e3d4dc0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void test()", "signatureAfterChange": "     @Test     public void test()", "diff": ["-", "-        int[][] matrix = new int[][] {", "+        // @formatter:off", "+        final int[][] matrix = new int[][] {", "-        int[][] expected_path_matrix = new int[][] {", "+        final int[][] expected_path_matrix = new int[][] {", "-        int[][] expected_transitively_reduced_matrix = new int[][] {", "+        final int[][] expected_transitively_reduced_matrix = new int[][] {", "-        ", "+        // @formatter:on", "+", "-        int n = matrix.length;", "+        final int n = matrix.length;", "-            System.arraycopy(matrix, 0, path_matrix, 0, matrix.length);", "-            ", "-            TransitiveReduction.transformToPathMatrix(path_matrix);", "+            {", "+                System.arraycopy(matrix, 0, path_matrix, 0, matrix.length);", "+", "+                final BitSet[] pathMatrixAsBitSetArray = asBitSetArray(path_matrix);", "+", "+                TransitiveReduction.transformToPathMatrix(pathMatrixAsBitSetArray);", "+", "+                path_matrix = asIntArray(pathMatrixAsBitSetArray);", "+            }", "+", "-            System.arraycopy(path_matrix, 0, transitively_reduced_matrix, 0, matrix.length);", "-            ", "-            TransitiveReduction.transitiveReduction(transitively_reduced_matrix);", "+            {", "+                System.arraycopy(path_matrix, 0, transitively_reduced_matrix, 0, matrix.length);", "+", "+                final BitSet[] transitivelyReducedMatrixAsBitSetArray = asBitSetArray(transitively_reduced_matrix);", "+", "+                TransitiveReduction.transitiveReduction(transitivelyReducedMatrixAsBitSetArray);", "+", "+                transitively_reduced_matrix = asIntArray(transitivelyReducedMatrixAsBitSetArray);", "+            }", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9514a5b7c99146d53e864e51f2627203", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "af61e5d97b8783c377d8616e4786a4542c35b8a3", "commitAfterChange": "f9d1a7195d2b619df2846dc654b2682aee4bacc5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testPicture1Graph()", "signatureAfterChange": "      public void testPicture1Graph()", "diff": ["-        assertEquals(2, pathFinder.getPathElements(\"v5\").size());", "+        assertEquals(2, pathFinder.getPaths(\"v5\").size());", "-        List pathElements = pathFinder.getPathElements(\"v5\");", "-        RankingPathElement pathElement =", "-            (RankingPathElement) pathElements.get(0);", "+        List pathElements = pathFinder.getPaths(\"v5\");", "+        GraphPath pathElement =", "+            (GraphPath) pathElements.get(0);", "-            pathElement.createEdgeListPath());", "+            pathElement.getEdgeList());", "-        pathElement = (RankingPathElement) pathElements.get(1);", "+        List vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object [] {", "+                    \"vS\",", "+                    \"v1\",", "+                    \"v5\"", "+                }),", "+            vertices);", "+", "+        pathElement = (GraphPath) pathElements.get(1);", "-            pathElement.createEdgeListPath());", "+            pathElement.getEdgeList());", "-        pathElements = pathFinder.getPathElements(\"v7\");", "-        pathElement = (RankingPathElement) pathElements.get(0);", "+        vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object [] {", "+                    \"vS\",", "+                    \"v2\",", "+                    \"v5\"", "+                }),", "+            vertices);", "+", "+        pathElements = pathFinder.getPaths(\"v7\");", "+        pathElement = (GraphPath) pathElements.get(0);", "-            pathElement = (RankingPathElement) pathElements.get(i);", "+            pathElement = (GraphPath) pathElements.get(i);"]}]}
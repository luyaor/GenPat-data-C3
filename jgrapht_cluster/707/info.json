{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1802938dcadfdfdeafea33b970d5af84", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e2840ca83eaa05a021396983d624a99", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/DijkstraShortestPathAlgorithmTest.java", "commitBeforeChange": "4fdf29e8e01612a5ae4f7bfb3db5d9d1a27f8bc6", "commitAfterChange": "b417c7bfb816527977f131839428e669645f0a3a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public WeightedGraph create()", "signatureAfterChange": "     public WeightedGraph create(  )", "diff": ["-    public WeightedGraph create() {", "-        WeightedGraph g = new WeightedPseudograph();", "+    public WeightedGraph create(  ) {", "+        WeightedGraph g = new WeightedPseudograph(  );", "-        g.addVertex(m_v1);", "-        g.addVertex(m_v2);", "-        g.addVertex(m_v3);", "-        g.addVertex(m_v4);", "-        m_e1 = GraphHelper.addEdge(g, m_v1, m_v2, 1);", "-        m_e2 = GraphHelper.addEdge(g, m_v2, m_v3, 2);", "-        m_e3 = GraphHelper.addEdge(g, m_v3, m_v1, 4);", "-        m_e4 = GraphHelper.addEdge(g, m_v3, m_v4, 10);", "-        m_u = GraphHelper.addEdge(g, m_v3, m_v3, 5);", "+        g.addVertex( V1 );", "+        g.addVertex( V2 );", "+        g.addVertex( V3 );", "+        g.addVertex( V4 );", "+        m_e1     = GraphHelper.addEdge( g, V1, V2, 1 );", "+        m_e2     = GraphHelper.addEdge( g, V2, V3, 2 );", "+        m_e3     = GraphHelper.addEdge( g, V3, V1, 4 );", "+        m_e4     = GraphHelper.addEdge( g, V3, V4, 10 );", "+        m_u      = GraphHelper.addEdge( g, V3, V3, 5 );", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97639a70f607a05127799b084b8e028d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/AsUndirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void setUp()", "signatureAfterChange": "     protected void setUp()", "diff": ["-        m_directed = new DefaultDirectedGraph<String, DefaultEdge>(", "+        directed = new DefaultDirectedGraph<String, DefaultEdge>(", "-        m_undirected = new AsUndirectedGraph<String, DefaultEdge>(m_directed);", "+        undirected = new AsUndirectedGraph<String, DefaultEdge>(directed);", "-        m_directed.addVertex(m_v1);", "-        m_directed.addVertex(m_v2);", "-        m_directed.addVertex(m_v3);", "-        m_directed.addVertex(m_v4);", "-        m_directed.addEdge(m_v1, m_v2);", "-        m_directed.addEdge(m_v2, m_v3);", "-        m_directed.addEdge(m_v2, m_v4);", "-        m_loop = m_directed.addEdge(m_v4, m_v4);", "+        directed.addVertex(v1);", "+        directed.addVertex(v2);", "+        directed.addVertex(v3);", "+        directed.addVertex(v4);", "+        directed.addEdge(v1, v2);", "+        directed.addEdge(v2, v3);", "+        directed.addEdge(v2, v4);", "+        loop = directed.addEdge(v4, v4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa497096fd9109703c918d7eba87d42c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/ShortestPathTestCase.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          protected Graph createWithBias(boolean negate)", "signatureAfterChange": "          protected Graph createWithBias(boolean negate)", "diff": ["-        Graph g;", "+        Graph<String,DefaultEdge> g;", "-            g = new SimpleDirectedWeightedGraph();", "+            g = new SimpleDirectedWeightedGraph(DefaultWeightedEdge.class);", "-            g = new SimpleWeightedGraph();", "+            g = new SimpleWeightedGraph(DefaultWeightedEdge.class);", "-        m_e12 = g.addEdge(V1, V2);", "-        m_e12.setWeight(bias * 2);", "+        m_e12 = Graphs.addEdge(g, V1, V2, bias * 2);", "-        m_e13 = g.addEdge(V1, V3);", "-        m_e13.setWeight(bias * 3);", "+        m_e13 = Graphs.addEdge(g, V1, V3, bias * 3);", "-        m_e24 = g.addEdge(V2, V4);", "-        m_e24.setWeight(bias * 5);", "+        m_e24 = Graphs.addEdge(g, V2, V4, bias * 5);", "-        m_e34 = g.addEdge(V3, V4);", "-        m_e34.setWeight(bias * 20);", "+        m_e34 = Graphs.addEdge(g, V3, V4, bias * 20);", "-        m_e45 = g.addEdge(V4, V5);", "-        m_e45.setWeight(bias * 5);", "+        m_e45 = Graphs.addEdge(g, V4, V5, bias * 5);", "-        m_e15 = g.addEdge(V1, V5);", "-        m_e15.setWeight(bias * 100);", "+        m_e15 = Graphs.addEdge(g, V1, V5, bias * 100);"]}]}
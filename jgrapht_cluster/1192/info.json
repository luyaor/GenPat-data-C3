{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed70ccd18ffbdc481efa51678269ee8e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b84dbcca1939acbf33d401deef31733", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "b261cb99c92126b64c9129dbe772684f0da5e234", "commitAfterChange": "22927827f36ad9b2cef7c5f5670c4d2598840023", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public GraphPath<V, E> shortestPath(V a, V b)", "signatureAfterChange": "     public GraphPath<V, E> shortestPath(V a, V b)", "diff": ["-    public GraphPath<V, E> shortestPath(V a, V b) {", "-", "-        if (d == null)", "+    public GraphPath<V, E> shortestPath(V a, V b)", "+    {", "+        if (d == null) {", "+        }", "-        if (edges.size() < 1)", "+        if (edges.size() < 1) {", "+        }", "-        GraphPathImpl<V, E> path = new GraphPathImpl<V, E>(graph, a, b, edges, edges.size());", "+        GraphPathImpl<V, E> path =", "+            new GraphPathImpl<V, E>(graph, a, b, edges, edges.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f35a5248849f115a2f7ceb1a13cbd11", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public GraphPath<V, E> getShortestPath(V a, V b)", "signatureAfterChange": "     public GraphPath<V, E> getShortestPath(V a, V b)", "diff": ["-        lazyCalculatePaths();", "-        return getShortestPathImpl(a, b);", "-    }", "+        lazyCalculateMatrix();", "+        if(backtrace[v_a][v_b]==-1) //No path exists", "+", "+        //Reconstruct the path", "+        List<E> edges = new ArrayList<E>();", "+        int u=v_a;", "+        while(u != v_b){", "+            int v=backtrace[u][v_b];", "+            edges.add(graph.getEdge(vertices.get(u), vertices.get(v)));", "+            u=v;", "+        return new GraphPathImpl<V, E>(graph, a, b, edges, d[v_a][v_b]);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e0bba4f9d3bef1586d2c6f036ac7f5e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1235545f83156a564a590ab5bcba91b1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "c6d16a85d0c70dcdddd76fb3dff4d37d8c853806", "commitAfterChange": "dd89e42fc781adefe1438e7e9adcf43642b9086c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void relabel(VertexExtension vx)", "signatureAfterChange": "      private void relabel(VertexExtension vx)", "diff": ["-        if (LABEL_PRUNE_ENABLED) {", "-            assert (labeling.get(vx.label) > 0);", "-            updateLabeling(vx, min + 1);", "-        }", "+        assert (labeling.get(vx.label) > 0);", "+        updateLabeling(vx, min + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4094b8b042b41ab85b7d7e5351cc6a2f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "c6d16a85d0c70dcdddd76fb3dff4d37d8c853806", "commitAfterChange": "dd89e42fc781adefe1438e7e9adcf43642b9086c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void label(VertexExtension source, VertexExtension sink)", "signatureAfterChange": "      private void label(VertexExtension source, VertexExtension sink)", "diff": ["-                    if (LABEL_PRUNE_ENABLED) {", "-                        if (!labeling.containsKey(vx.label))", "-                            labeling.put(vx.label, 1);", "-                        else", "-                            labeling.put(vx.label, labeling.get(vx.label) + 1);", "-                    }", "+                    // NOTA BENE:", "+                    //  This is part of label-pruning mechanic which", "+                    //  targets to diminish all 'useless' relabels during", "+                    //  \"flow-back\" phase of the algorithm pushing excess", "+                    //  flow back to the source", "+", "+                    if (!labeling.containsKey(vx.label))", "+                        labeling.put(vx.label, 1);", "+                    else", "+                        labeling.put(vx.label, labeling.get(vx.label) + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad86d65fbb1e6d243f0ef8295ff42e06", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "c6d16a85d0c70dcdddd76fb3dff4d37d8c853806", "commitAfterChange": "dd89e42fc781adefe1438e7e9adcf43642b9086c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-                if (LABEL_PRUNE_ENABLED) {", "-                    if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "-                        // This supposed to drastically improve performance", "-                        extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "-                        flowBack = true;", "-                    }", "+                if (!flowBack && !labeling.containsKey(0) && !labeling.containsKey(1)) {", "+                    // This supposed to drastically improve performance", "+                    // cutting off the necessity to drive labels of all vertices", "+                    // up to value 'N' one-by-one not entailing eny effective discharge --", "+                    // at this point there is no vertex with the label <= 1 in the", "+                    // network & therefore no 'discharging-path' to the _sink_ also", "+                    // signalling that we're in the flow-back stage of the algorithm", "+                    extendedVertex(source).label = Collections.max(labeling.keySet()) + 1;", "+                    flowBack = true;"]}]}
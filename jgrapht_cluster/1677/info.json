{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74ecc43866f41d1fcc9f883045e44465", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8389e8b0f039f35a88590e9f0b0df926", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "c0b16b6556c96539006185d958b0f5e843675e68", "commitAfterChange": "b1382aa25544721cf9f8cd8ebbac3a2da4113463", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testContainsEdgeObjectObject(  )", "signatureAfterChange": "     public void testContainsEdgeObjectObject(  )", "diff": ["-        assertFalse( g1.containsEdge( v1, v2 ) );", "-        assertFalse( g1.containsEdge( v1, v1 ) );", "+        assertFalse( m_g1.containsEdge( m_v1, m_v2 ) );", "+        assertFalse( m_g1.containsEdge( m_v1, m_v1 ) );", "-        assertTrue( g2.containsEdge( v1, v2 ) );", "-        assertTrue( g2.containsEdge( v2, v1 ) );", "+        assertTrue( m_g2.containsEdge( m_v1, m_v2 ) );", "+        assertTrue( m_g2.containsEdge( m_v2, m_v1 ) );", "-        assertTrue( g3.containsEdge( v1, v2 ) );", "-        assertTrue( g3.containsEdge( v2, v1 ) );", "-        assertTrue( g3.containsEdge( v3, v2 ) );", "-        assertTrue( g3.containsEdge( v2, v3 ) );", "-        assertTrue( g3.containsEdge( v1, v3 ) );", "-        assertTrue( g3.containsEdge( v3, v1 ) );", "+        assertTrue( m_g3.containsEdge( m_v1, m_v2 ) );", "+        assertTrue( m_g3.containsEdge( m_v2, m_v1 ) );", "+        assertTrue( m_g3.containsEdge( m_v3, m_v2 ) );", "+        assertTrue( m_g3.containsEdge( m_v2, m_v3 ) );", "+        assertTrue( m_g3.containsEdge( m_v1, m_v3 ) );", "+        assertTrue( m_g3.containsEdge( m_v3, m_v1 ) );", "-        assertFalse( g4.containsEdge( v1, v4 ) );", "-        g4.addEdge( v1, v4 );", "-        assertTrue( g4.containsEdge( v1, v4 ) );", "+        assertFalse( m_g4.containsEdge( m_v1, m_v4 ) );", "+        m_g4.addEdge( m_v1, m_v4 );", "+        assertTrue( m_g4.containsEdge( m_v1, m_v4 ) );", "-        assertFalse( g3.containsEdge( v4, v2 ) );", "-        assertFalse( g3.containsEdge( null, null ) );", "+        assertFalse( m_g3.containsEdge( m_v4, m_v2 ) );", "+        assertFalse( m_g3.containsEdge( null, null ) );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe2f5acb0daceb01a43bd24f5c959cea", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testContainsEdgeObjectObject()", "signatureAfterChange": "     public void testContainsEdgeObjectObject()", "diff": ["-        assertFalse(m_g1.containsEdge(m_v1, m_v2));", "-        assertFalse(m_g1.containsEdge(m_v1, m_v1));", "+        assertFalse(g1.containsEdge(v1, v2));", "+        assertFalse(g1.containsEdge(v1, v1));", "-        assertTrue(m_g2.containsEdge(m_v1, m_v2));", "-        assertTrue(m_g2.containsEdge(m_v2, m_v1));", "+        assertTrue(g2.containsEdge(v1, v2));", "+        assertTrue(g2.containsEdge(v2, v1));", "-        assertTrue(m_g3.containsEdge(m_v1, m_v2));", "-        assertTrue(m_g3.containsEdge(m_v2, m_v1));", "-        assertTrue(m_g3.containsEdge(m_v3, m_v2));", "-        assertTrue(m_g3.containsEdge(m_v2, m_v3));", "-        assertTrue(m_g3.containsEdge(m_v1, m_v3));", "-        assertTrue(m_g3.containsEdge(m_v3, m_v1));", "+        assertTrue(g3.containsEdge(v1, v2));", "+        assertTrue(g3.containsEdge(v2, v1));", "+        assertTrue(g3.containsEdge(v3, v2));", "+        assertTrue(g3.containsEdge(v2, v3));", "+        assertTrue(g3.containsEdge(v1, v3));", "+        assertTrue(g3.containsEdge(v3, v1));", "-        assertFalse(m_g4.containsEdge(m_v1, m_v4));", "-        m_g4.addEdge(m_v1, m_v4);", "-        assertTrue(m_g4.containsEdge(m_v1, m_v4));", "+        assertFalse(g4.containsEdge(v1, v4));", "+        g4.addEdge(v1, v4);", "+        assertTrue(g4.containsEdge(v1, v4));", "-        assertFalse(m_g3.containsEdge(m_v4, m_v2));", "-        assertFalse(m_g3.containsEdge(null, null));", "+        assertFalse(g3.containsEdge(v4, v2));", "+        assertFalse(g3.containsEdge(null, null));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2013f51aa9839cc336c7ffa5f03c6f7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55369ed1c3af14a07f46b89d808589d1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "9681504586e103d7dc5a4670b6f76ddb37e3977b", "commitAfterChange": "544318759e8ef143a1f7ce54d385b8bb1d1e42ef", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private V findPath(UndirectedGraph<V, E> g, V root)", "signatureAfterChange": "      private V findPath(V root)", "diff": ["-    private V findPath(UndirectedGraph<V, E> g, V root)", "+    private V findPath(V root)", "-        for (V i : g.vertexSet()) {", "+        for (V i : graph.vertexSet()) {", "-            for (V to : g.vertexSet()) {", "-                if (!g.containsEdge(v, to)) {", "-                    continue;", "-                }", "-", "+            for (E e : graph.edgesOf(v)) {", "+                V to = graph.getEdgeSource(e);", "+                if (to == v)", "+                    to = graph.getEdgeTarget(e);", "+//            for (V to : graph.vertexSet()) {", "+//                if (!graph.containsEdge(v, to)) {", "+//                    continue;", "+//                }", "-                    V curbase = lca(g, v, to);", "+                    V curbase = lca(graph, v, to);", "-                    markPath(g, v, curbase, to);", "-                    markPath(g, to, curbase, v);", "+                    markPath(v, curbase, to);", "+                    markPath(to, curbase, v);", "-                    for (V i : g.vertexSet()) {", "+                    for (V i : graph.vertexSet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db9513bfd6febe27da24b2e7d0cd7448", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsBlossomShrinking.java", "commitBeforeChange": "863926a00bf4e3994775ae79f69187320b0efdf2", "commitAfterChange": "013f82ef9340f881e4393a0079889bf535149b94", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private V findPath(UndirectedGraph<V, E> g, V root)", "signatureAfterChange": "      private V findPath(V root)", "diff": ["-    private V findPath(UndirectedGraph<V, E> g, V root)", "+    private V findPath(V root)", "-        for (V i : g.vertexSet()) {", "+        for (V i : graph.vertexSet()) {", "-            for (V to : g.vertexSet()) {", "-                if (!g.containsEdge(v, to)) {", "-                    continue;", "-                }", "-", "+            for (E e : graph.edgesOf(v)) {", "+                V to = graph.getEdgeSource(e);", "+                if (to == v)", "+                    to = graph.getEdgeTarget(e);", "-                    V curbase = lca(g, v, to);", "+                    V curbase = lca(graph, v, to);", "-                    markPath(g, v, curbase, to);", "-                    markPath(g, to, curbase, v);", "+                    markPath(v, curbase, to);", "+                    markPath(to, curbase, v);", "-                    for (V i : g.vertexSet()) {", "+                    for (V i : graph.vertexSet()) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7f4ffb7b85464d15fdc33505157f950", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e8c4c0b586891d639538db741bf4f5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/Subgraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "      private void addEdgesUsingFilter(Set<E> edgeSet, Set<E> filter)", "signatureAfterChange": "      private void addEdgesUsingFilter(Set<E> edgeSet, Set<E> filter)", "diff": ["+", "+            V sourceVertex = m_base.getEdgeSource(e);", "+            V targetVertex = m_base.getEdgeTarget(e);", "-                containsVertex(e.getSource())", "-                && containsVertex(e.getTarget());", "+                containsVertex(sourceVertex)", "+                && containsVertex(targetVertex);", "-                addEdge(e);", "+                addEdge(sourceVertex, targetVertex, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e2ccc47bfa0fdabe04ac2bef22f72c", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "9891701e497d82d53bd2f7288493ff266ebc25b7", "commitAfterChange": "d3ef70f973371a0a14daeb6ea1ebefb2fcfefa11", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isSimplePath(         RankingPathElement<V, E> prevPathElement,         E edge)", "signatureAfterChange": "     private boolean isSimplePath(         RankingPathElement<V, E> prevPathElement,         E edge)", "diff": ["+        V endVertex = Graphs.getOppositeVertex(this.graph, edge,", "+            prevPathElement.getVertex());", "+        assert (endVertex.equals(this.vertex));", "+", "-        while (pathElementToTest.getPrevEdge() != null) {", "-            if (pathElementToTest.getVertex() == this.vertex) {", "+        do {", "+            if (pathElementToTest.getVertex().equals(endVertex)) {", "-        }", "+        } while (pathElementToTest != null);"]}]}
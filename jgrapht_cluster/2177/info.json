{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fe089ca77f3b505cf5232239e508957", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04387b5192ebde21e2436dca82900f54", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        g.addVertex(m_v1);", "-        g.addVertex(m_v2);", "-        g.addVertex(m_v3);", "+        g.addVertex(v1);", "+        g.addVertex(v2);", "+        g.addVertex(v3);", "-        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "-        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "-        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(v1, v2);", "+        DefaultEdge e2 = g.addEdge(v2, v3);", "+        DefaultEdge e3 = g.addEdge(v3, v1);", "-        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "-        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "-        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "-        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "-        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+        assertTrue(Graphs.testIncidence(g, e1, v1));", "+        assertTrue(Graphs.testIncidence(g, e1, v2));", "+        assertFalse(Graphs.testIncidence(g, e1, v3));", "+        assertEquals(v2, Graphs.getOppositeVertex(g, e1, v1));", "+        assertEquals(v1, Graphs.getOppositeVertex(g, e1, v2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b78fce60a9e9ebcc266a97e2ea5bcf4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testEdgeOrderDeterminism()", "signatureAfterChange": "     public void testEdgeOrderDeterminism()", "diff": ["-        DirectedGraph<String, DirEdge<String>> g = new DirectedMultigraph<String, DirEdge<String>>();", "+        DirectedGraph<String, DefaultEdge> g =", "+            new DirectedMultigraph<String, DefaultEdge>(", "+                DefaultEdge.class);", "-        Edge e1 = g.addEdge(m_v1, m_v2);", "-        Edge e2 = g.addEdge(m_v2, m_v3);", "-        Edge e3 = g.addEdge(m_v3, m_v1);", "+        DefaultEdge e1 = g.addEdge(m_v1, m_v2);", "+        DefaultEdge e2 = g.addEdge(m_v2, m_v3);", "+        DefaultEdge e3 = g.addEdge(m_v3, m_v1);", "-        Iterator<DirEdge<String>> iter = g.edgeSet().iterator();", "+        Iterator<DefaultEdge> iter = g.edgeSet().iterator();", "+", "+        // some bonus tests", "+        assertTrue(Graphs.testIncidence(g, e1, m_v1));", "+        assertTrue(Graphs.testIncidence(g, e1, m_v2));", "+        assertFalse(Graphs.testIncidence(g, e1, m_v3));", "+        assertEquals(m_v2, Graphs.getOppositeVertex(g, e1, m_v1));", "+        assertEquals(m_v1, Graphs.getOppositeVertex(g, e1, m_v2));", "+", "+        assertEquals(", "+            \"([v1, v2, v3], [(v1,v2), (v2,v3), (v3,v1)])\",", "+            g.toString());"]}]}
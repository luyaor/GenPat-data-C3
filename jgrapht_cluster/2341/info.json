{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "311c704bfcb17ab4494f3618c1c8f4bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35dca7e4721473d9443d153ef9f83d74", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "5f0104ac684044809cb315b79d4a999c5e1da731", "commitAfterChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void augmentFlow()", "signatureAfterChange": "      private void augmentFlow()", "diff": ["-        double deltaFlow = nodes.get(currentSink).flowAmount;", "-        maximumFlowValue += deltaFlow;", "-        int currentNode = currentSink;", "-        while (currentNode != currentSource) {", "-            nodes.get(currentNode).lastArc.flow += deltaFlow;", "-            nodes.get(currentNode).lastArc.reversed.flow -= deltaFlow;", "-            currentNode = nodes.get(currentNode).lastArc.tail;", "+        boolean[] seen = new boolean[nodes.size()];", "+", "+        for (Arc lastArc : nodes.get(currentSink).lastArcs) {", "+            double deltaFlow =", "+                Math.min(", "+                    nodes.get(lastArc.tail).flowAmount,", "+                    lastArc.capacity - lastArc.flow);", "+", "+            if (augmentFlowAlongInternal(deltaFlow, lastArc.tail, seen)) {", "+                lastArc.flow += deltaFlow;", "+                lastArc.reversed.flow -= deltaFlow;", "+            }", "+", "+            // _DBG", "+            assert (lastArc.flow + DEFAULT_EPSILON <= lastArc.capacity);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "613d487cb2b11fae1bd3e137da4599de", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "c9321cdd6f93b7e8e241f348de2e975bf226c350", "commitAfterChange": "96bea297cb6d79531586150eeb7ae5f6fce792c9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void augmentFlow()", "signatureAfterChange": "      private void build()", "diff": ["+    private void build()", "+    {", "+        maxFlow = engine.buildMaximumFlow(currentSource, currentSink);", "+    }", "-", "-    private void augmentFlow()", "-    {", "-        boolean[] seen = new boolean[nodes.size()];", "-", "-        for (Arc lastArc : nodes.get(currentSink).lastArcs) {", "-            double deltaFlow =", "-                Math.min(", "-                    nodes.get(lastArc.tail).flowAmount,", "-                    lastArc.capacity - lastArc.flow);", "-", "-            if (augmentFlowAlongInternal(deltaFlow, lastArc.tail, seen)) {", "-                lastArc.flow += deltaFlow;", "-                lastArc.reversed.flow -= deltaFlow;", "-            }", "-        }", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b1ddab32e09a0d0fb4f0de53663387d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5edf194657834339189fdf34fbe6fd08", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/VertexCoverAlgorithmTest.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic void testVertexCoverApproximation()", "signatureAfterChange": "     public void testVertexCoverApproximation(  )", "diff": ["-\t", "-\tpublic void testVertexCoverApproximation() {", "-\t\tcreate();", "-\t\tVertexCoverAlgorithm approx = new VertexCoverApproximationAlgorithm(graph);", "-\t\tassertTrue(isSolution(approx.vertexCover()));", "-\t}", "+     */", "+    public void testVertexCoverApproximation(  ) {", "+        Pseudograph          g = createRandomGraph(  );", "+", "+        VertexCoverAlgorithm approx =", "+            new VertexCoverApproximationAlgorithm( g );", "+        assertTrue( isCover( approx.findCover(  ), g ) );", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b339c1da893515be0b175c109755b2ac", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/experimental/alg/VertexCoverAlgorithmTest.java", "commitBeforeChange": "a61c430f2ac7af9e4b0519b792fa90091fa0462d", "commitAfterChange": "3dfe7bd3c3baf72541946589aad20525c29233c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t \tpublic void testVertexCoverGreedy()", "signatureAfterChange": "     public void testVertexCoverGreedy(  )", "diff": ["-\t", "-\tpublic void testVertexCoverGreedy() {", "-\t\tcreate();", "-\t\tVertexCoverAlgorithm greedy = new VertexCoverGreedyAlgorithm(graph);", "-\t\tassertTrue(isSolution(greedy.vertexCover()));", "-\t}", "+     */", "+    public void testVertexCoverGreedy(  ) {", "+        Pseudograph          g = createRandomGraph(  );", "+", "+        VertexCoverAlgorithm greedy = new VertexCoverGreedyAlgorithm( g );", "+        assertTrue( isCover( greedy.findCover(  ), g ) );", "+    }"]}]}
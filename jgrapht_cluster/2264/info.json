{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "299d5a16c273844c3323bf55ea44ec7e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c4eac31017eabdca198c1fb95d84f34", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/TarjanLowestCommonAncestor.java", "commitBeforeChange": "845e2456c1fa20cb74282fa3134fa19f26c97fba", "commitAfterChange": "f194f6c0d4d2ddad695900dd9fe0e34f5eaad70f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate List<V> calculate(final V u)", "signatureAfterChange": " \tprivate List<V> calculate(final V u)", "diff": ["-\t\tif (g.getEdgeSource(vEdge).equals(u)) {", "-\t\t    V v = g.getEdgeTarget(vEdge);", "-\t\t    calculate(v);", "-\t\t    uf.union(u, v);", "-\t\t    ancestors.put(uf.find(u), u);", "-\t\t}", "-\t\tblack.add(u);", "-\t\tfor (LcaRequestResponse<V> current : lrr)", "-\t\t    if (current.getLca() == null) {", "-\t\t\tif (black.contains(current.getA()) && current.getB().equals(u)) {", "-\t\t\t    current.setLca(ancestors.get(uf.find(current.getA())));", "-\t\t\t}", "-\t\t\tif (black.contains(current.getB()) && current.getA().equals(u)) {", "-\t\t\t    current.setLca(ancestors.get(uf.find(current.getB())));", "-\t\t\t}", "-\t\t    }", "-\t    }", "+            if (g.getEdgeSource(vEdge).equals(u)) {", "+                V v = g.getEdgeTarget(vEdge);", "+                calculate(v);", "+                uf.union(u, v);", "+                ancestors.put(uf.find(u), u);", "+            }", "+            black.add(u);", "+", "+            Set<LcaRequestResponse<V>> uLRR = LRRMap.get(u);", "+            if (uLRR != null)", "+            {", "+                for (Iterator<LcaRequestResponse<V>> irr = uLRR.iterator(); irr.hasNext(); )", "+                {", "+                    LcaRequestResponse<V> rr = irr.next();", "+", "+                    if (black.contains(rr.getB()) && rr.getA().equals(u)) {", "+                        rr.setLca(ancestors.get(uf.find(rr.getB())));", "+                    }", "+                    if (black.contains(rr.getA()) && rr.getB().equals(u)) {", "+                        rr.setLca(ancestors.get(uf.find(rr.getA())));", "+                    }", "+", "+                    irr.remove();", "+                }", "+            }", "+        }", "+", "-\t    for (LcaRequestResponse<V> current : lrr) {", "-\t\tresult.add(current.getLca());", "+\t    for (LcaRequestResponse<V> current : LRR) {", "+\t\t    result.add(current.getLca());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f179429d4ad60a425412e308ca61a375", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void savePassData(Set<V> improvedVertices)", "signatureAfterChange": "      private void savePassData(Set<V> improvedVertices)", "diff": ["-            RankingPathElementList<V, E> clonedData =", "+            RankingPathElementList<V, E> pathElementList =", "+                this.seenDataContainer.get(vertex);", "+", "+            RankingPathElementList<V, E> improvedPaths =", "-                    this.seenDataContainer.get(vertex));", "-            this.prevSeenDataContainer.put(vertex, clonedData);", "+                    this.graph,", "+                    pathElementList.maxSize,", "+                    vertex);", "+", "+            for (", "+                Iterator<RankingPathElement<V, E>> pathIter =", "+                    pathElementList.iterator();", "+                pathIter.hasNext();)", "+            {", "+                RankingPathElement<V, E> path = pathIter.next();", "+                if (path.getHopCount() == this.passNumber) {", "+                    // the path has just been computed.", "+                    improvedPaths.pathElements.add(path);", "+                }", "+            }", "+", "+            this.prevSeenDataContainer.put(vertex, improvedPaths);"]}]}
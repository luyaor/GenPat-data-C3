{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bc82c03e9249ac9d5f6a14de918d47f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07a8e0b6e2f09de48833128f1ca6baf1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/EdmondsKarpMaximumFlowTest.java", "commitBeforeChange": "45fdf2d06b2f697f414a6dba7b5708e895f3889b", "commitAfterChange": "9288cc6f229c6d1aa15398231bc75a90896d4262", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \tpublic void testLogic()", "signatureAfterChange": "\r \tpublic void testLogic()", "diff": ["+\t\t\t\tnew int[]{},\r", "+\t\t\t\tnew int[]{},\r", "+\t\t\t\tnew double[]{},\r", "+\t\t\t\tnew int[]{1},\r", "+\t\t\t\tnew int[]{4057218},\r", "+\t\t\t\tnew double[]{0.0});\r", "+\t\trunTest(\r", "+\t\trunTest(\r", "+\t\t\t\tnew int[]{5, 5, 5, 1, 1, 4, 2, 7, 8, 3},\r", "+\t\t\t\tnew int[]{1, 4, 2, 7, 8, 3, 8, 6, 6, 6},\r", "+\t\t\t\tnew double[]{7, 8, 573146, 31337, 1, 1, 1, 1, 2391717, 170239},\r", "+\t\t\t\tnew int[]{5},\r", "+\t\t\t\tnew int[]{6},\r", "+\t\t\t\tnew double[]{4.0});\r", "+\t\trunTest(\r", "+\t\t\t\tnew int[]{1, 1, 2, 2, 3},\r", "+\t\t\t\tnew int[]{2, 3, 3, 4, 4},\r", "+\t\t\t\tnew double[]{1000000000.0, 1000000000.0, 1.0, 1000000000.0, 1000000000.0},\r", "+\t\t\t\tnew int[]{1},\r", "+\t\t\t\tnew int[]{4},\r", "+\t\t\t\tnew double[]{2000000000.0});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d361c22080d903f60fd285aa0cda365e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7aed39a1af86a04f66007baa8f1c62673d4be780", "commitAfterChange": "fa439ca86ad5484e4f0d6132cc374b67035ff8e3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void pushFlowThrough(EdgeExtension ex, double f)", "signatureAfterChange": "      private void pushFlowThrough(EdgeExtension ex, double f)", "diff": ["+        // _DBG", "+        assert(ex.getSource().excess >= 0.0 && ex.getTarget().excess >= 0);", "+", "+", "+        // _DBG", "+//        System.out.println(\"{ \" + (ex.prototype == null ? \"\" : ex.prototype)  + \" } F/CAP \" + ex.flow + \" / \" + ex.capacity +", "+//                                                                                \" IF/ICAP \" + ex.getInverse().flow + \" / \" + ex.getInverse().capacity+ \" SUR \" + f);", "-            ex.flow += d;", "+            ex.flow      += d;", "+            ex.capacity  -= iex.flow;", "-            iex.flow -= f;", "+            ex.capacity -= f;", "+            iex.flow    -= f;"]}]}
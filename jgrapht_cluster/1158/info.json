{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "180d1394e80e03df1d6e5a1eacdbba53", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70d6686b91befcad8dde26922a13daa5", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void checkRelation(         Graph<Integer,DefaultEdge> [] graphs,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "signatureAfterChange": "      private void checkRelation(         Graph<Integer,DefaultEdge> [] graphs,         EquivalenceComparator vertexChecker,         EquivalenceComparator edgeChecker)", "diff": ["-        IsomorphismRelation isoResult;", "+        IsomorphismRelation<Integer,DefaultEdge> isoResult;", "-            Set vertexSet = g1.vertexSet();", "-            for (Iterator iter = vertexSet.iterator(); iter.hasNext();) {", "-                Object v1 = iter.next();", "-                Object v2 = isoResult.getCorrespondence(v1, true);", "+            Set<Integer> vertexSet = g1.vertexSet();", "+            for (Iterator<Integer> iter =", "+                     vertexSet.iterator(); iter.hasNext();)", "+            {", "+                Integer v1 = iter.next();", "+                Integer v2 = isoResult.getVertexCorrespondence(v1, true);", "-            Set edgeSet = g1.edgeSet();", "-            for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-                DefaultEdge e1 = (DefaultEdge) iter.next();", "-                DefaultEdge e2 = (DefaultEdge) isoResult.getCorrespondence(e1, true);", "+            Set<DefaultEdge> edgeSet = g1.edgeSet();", "+            for (Iterator<DefaultEdge> iter = edgeSet.iterator();", "+                 iter.hasNext();)", "+            {", "+                DefaultEdge e1 = iter.next();", "+                DefaultEdge e2 = isoResult.getEdgeCorrespondence(e1, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7376529c823fd7385e1ba50d972f3a0e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void init(Set vertexSet, Set edgeSet)", "signatureAfterChange": "      private void init(Set<V> vertexSet, Set<E> edgeSet)", "diff": ["-    private void init(Set vertexSet, Set edgeSet)", "+    private void init(Set<V> vertexSet, Set<E> edgeSet)", "-        this.mapVertexToOrder = new HashMap(vertexSet.size());", "+        this.mapVertexToOrder = new HashMap<V, Integer>(vertexSet.size());", "-        for (Iterator iter = vertexSet.iterator(); iter.hasNext();) {", "-            Object vertex = iter.next();", "+        for (V vertex : vertexSet) {", "-        this.labelsEdgesSet = new HashSet(edgeSet.size());", "-        for (Iterator iter = edgeSet.iterator(); iter.hasNext();) {", "-            Edge edge = (Edge) iter.next();", "-", "-            Object sourceVertex = edge.getSource();", "-            Integer sourceOrder = (Integer) mapVertexToOrder.get(sourceVertex);", "+        this.labelsEdgesSet = new HashSet<LabelsEdge>(edgeSet.size());", "+        for (E edge : edgeSet) {", "+            V sourceVertex = edge.getSource();", "+            Integer sourceOrder = mapVertexToOrder.get(sourceVertex);", "-                ((Integer) (mapVertexToOrder.get(edge.getTarget())))", "+                (mapVertexToOrder.get(edge.getTarget()))"]}]}
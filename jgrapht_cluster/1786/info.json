{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dc16dac7f92b38fa110ffb8a337aba6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0995fe1aa0d7d54bb6a2473e66221d63", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/ListenableGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "         public void edgeRemoved(GraphEdgeChangeEvent<Object,DefaultEdge> e)", "signatureAfterChange": "         public void edgeRemoved(GraphEdgeChangeEvent<Object,DefaultEdge> e)", "diff": ["-            m_lastRemovedEdge = e.getEdge();", "+            lastRemovedEdge = e.getEdge();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273f04c8a1ef6e176d66529973e71574", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/AllAlgTests.java", "commitBeforeChange": "d8ed8ef8b263bf17a983a68bd9bc937a457a5131", "commitAfterChange": "363b3697f0eb7c11af74750e9c6cd908c655d522", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static Test suite()", "signatureAfterChange": "     public static Test suite()", "diff": ["-        suite.addTest(new TestSuite(MaxBipartiteMatchingTest.class));", "+        suite.addTest(new TestSuite(HopcroftKarpBipartiteMatchingTest.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d6615372ba79bbb94ec7a3709d2bc5b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/isomorphism/AdaptiveIsomorphismInspectorFactory.java", "commitBeforeChange": "7bbdcf37663f36f80ef1f366555eafdbd618736a", "commitAfterChange": "9a4730fe923a200a9ce0f4cf2dd7459ded43a3cc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected static int checkGraphsType(Graph graph1, Graph graph2)", "signatureAfterChange": "      protected static int checkGraphsType(Graph graph1, Graph graph2)", "diff": ["-        return GRAPH_TYPE_REGULAR;", "+        return GRAPH_TYPE_ARBITRARY;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ec2f9dfb55fcc7cc7dd31c9f622261", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TraverseUtils.java", "commitBeforeChange": "d79ec6041acc8bda7fb9ae9661101612bc9e3f76", "commitAfterChange": "50de6e6216fe4b60dd232640e1cfa249a213c47c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 4, "signatureBeforeChange": "         public XXFirstIterator( Graph g, Object startVertex,             SimpleContainer pendingVerticesContainer )", "signatureAfterChange": "         public XXFirstIterator( Graph g, Object startVertex,             SimpleContainer pendingVerticesContainer )", "diff": ["-            m_specifics          = TraverseUtils.createGraphSpecifics( g );", "+            m_specifics          = CrossComponentIterator.createGraphSpecifics( g );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e96e88c7bcfac655c2fbf963d08cd2f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/ListenableGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         public void edgeAdded(GraphEdgeChangeEvent<Object,DefaultEdge> e)", "signatureAfterChange": "         public void edgeAdded(GraphEdgeChangeEvent<Object,DefaultEdge> e)", "diff": ["-            m_lastAddedEdge = e.getEdge();", "+            lastAddedEdge = e.getEdge();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b851a384162e23651e160a87c6b2a33", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public double minCutWeight()", "signatureAfterChange": "     public double minCutWeight()", "diff": ["-        return bestcutweight;", "+        return bestCutWeight;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e427a51b391af9d705845a77ca9529e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public void vertexTraversed(VertexTraversalEvent<String> e)", "signatureAfterChange": "         public void vertexTraversed(VertexTraversalEvent<String> e)", "diff": ["-            m_numComponentVertices++;", "+            numComponentVertices++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e4b79551c7a58be3894adac4e6d046", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/traverse/AbstractGraphIteratorTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public void connectedComponentStarted(             ConnectedComponentTraversalEvent e)", "signatureAfterChange": "         public void connectedComponentStarted(             ConnectedComponentTraversalEvent e)", "diff": ["-            m_componentNumber++;", "+            componentNumber++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "748add2f0e05794c1e35eeed1ac40da6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "a8fcb05e59a32f8e49530eae4f6013ccc6c2ed3e", "commitAfterChange": "e07df8411d2d5660415c7539e838f795b02777b5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         int getDiscoveyTime(  )", "signatureAfterChange": "         int getDiscoveyTime(  )", "diff": ["-            return discovered;", "+            return m_discovered;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d307d2ac679e1044240e38f26fc82da", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public EdgeFactory<V,E> getEdgeFactory()", "signatureAfterChange": "     public EdgeFactory<V,E> getEdgeFactory()", "diff": ["-        return m_edgeFactory;", "+        return edgeFactory;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8848baa151415d3ecccebba49fa6e3db", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "commitAfterChange": "ccbda858621a3d1beb6a9381a0fc81c3673ee66c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void dfsVisit( DirectedGraph graph, VertexData vertexData,         Set vertices )", "signatureAfterChange": "     private void dfsVisit(DirectedGraph graph, VertexData vertexData,             Set vertices)", "diff": ["-    private void dfsVisit( DirectedGraph graph, VertexData vertexData,", "-        Set vertices ) {", "-        Stack stack = new Stack(  );", "-        stack.push( vertexData );", "+    private void dfsVisit(DirectedGraph graph, VertexData vertexData,", "+            Set vertices) {", "+        Stack stack = new Stack();", "+        stack.push(vertexData);", "-        while( !stack.isEmpty(  ) ) {", "-            VertexData data = (VertexData) stack.pop(  );", "+        while (!stack.isEmpty()) {", "+            VertexData data = (VertexData) stack.pop();", "-            if( !data.m_discovered ) {", "+            if (!data.m_discovered) {", "-                if( vertices != null ) {", "-                    vertices.add( data.m_vertex );", "+                if (vertices != null) {", "+                    vertices.add(data.m_vertex);", "-                stack.push( new VertexData( data, true, true ) );", "+                stack.push(new VertexData(data, true, true));", "-                Iterator iter =", "-                    graph.outgoingEdgesOf( data.m_vertex ).iterator(  );", "+                Iterator iter = graph.outgoingEdgesOf(data.m_vertex).iterator();", "-                while( iter.hasNext(  ) ) {", "-                    DirectedEdge edge       = (DirectedEdge) iter.next(  );", "-                    VertexData   targetData =", "-                        (VertexData) m_verticesToVerticesData.get( edge", "-                            .getTarget(  ) );", "+                while (iter.hasNext()) {", "+                    DirectedEdge edge = (DirectedEdge) iter.next();", "+                    VertexData targetData = (VertexData) m_vertexToVertexData", "+                            .get(edge.getTarget());", "-                    if( !targetData.m_discovered ) {", "+                    if (!targetData.m_discovered) {", "-                        stack.push( targetData );", "+                        stack.push(targetData);", "-            }", "-            else if( data.m_finished ) {", "-                if( vertices == null ) {", "+            } else if (data.m_finished) {", "+                if (vertices == null) {", "-                    m_orderedVertices.addFirst( data.m_vertex );", "+                    m_orderedVertices.addFirst(data.m_vertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f169a43c909e4c52ad73f33a1210b7a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/NaiveLcaFinder.java", "commitBeforeChange": "5d5d29c3807fb914f184e88acdcc7efe30fe4498", "commitAfterChange": "29fba4de17dcb45e1fe3a7ac62685e84c2334719", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Set<V> allParents(Set<V> vertexSet)", "signatureAfterChange": "     private Set<V> allParents(Set<V> vertexSet)", "diff": ["-\t    for (E edge : graph.edgesOf(e)) {", "+\t    for (E edge : graph.incomingEdgesOf(e)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9425d4c5b433c79d7b1c219df920c553", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate Map<V, List<E>> verticesReachableByTightAlternatingEdgesFromVertex(V vertex)", "signatureAfterChange": " \t \tprivate Map<V, List<E>> verticesReachableByTightAlternatingEdgesFromVertex(V vertex)", "diff": ["-\t\t_verticesReachableByTightAlternatingEdgesFromVertex(Arrays.asList(vertex), false, pathsToVertices);", "+\t\tfindPathsToVerticesFromVertices(Arrays.asList(vertex), false, pathsToVertices);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a25e47f04e4348802acad60ae5779ee0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/demo/JGraphAdapterDemo.java", "commitBeforeChange": "b1ac8b1a160387a601ece08f0084fff79b80d75a", "commitAfterChange": "9e56fea1a756c0e64243ea1194d826da9a86334d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void init(  )", "signatureAfterChange": "     public void init()", "diff": ["-    public void init(  ) {", "+    public void init() {", "-        ListenableGraph g = new ListenableDirectedGraph(  );", "+        ListenableGraph g = new ListenableDirectedMultigraph();", "-        getContentPane(  ).add( jgraph );", "+        getContentPane().add( jgraph );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2de94503f11f5ff1c48c75268bb5169", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/GraphUnion.java", "commitBeforeChange": "f4156d7c952ee1195247374c8e91f8acb91d0e89", "commitAfterChange": "5ee34079071632f605ef7ef7b15401e5e3c410d4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public double getEdgeWeight(E e)", "signatureAfterChange": "      public double getEdgeWeight(E e)", "diff": ["-            return operator.operate(g1.getEdgeWeight(e), g2.getEdgeWeight(e));", "+            return operator.combine(g1.getEdgeWeight(e), g2.getEdgeWeight(e));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4bbe7073da1583ca81cbe7838b20a02", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/KuhnMunkresMinimalWeightBipartitePerfectMatchingTest.java", "commitBeforeChange": "1a365a6520be3e72e608d1c0773da5ac343e855c", "commitAfterChange": "cc219b560ec6d79a360e71173ccfd2e8553dab90", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "       static KuhnMunkresMinimalWeightBipartitePerfectMatching<V, WeightedEdge>         match(final double[][] costMatrix, final int partitionCardinality)", "signatureAfterChange": "       static KuhnMunkresMinimalWeightBipartitePerfectMatching<V, WeightedEdge>         match(final double[][] costMatrix, final int partitionCardinality)", "diff": ["-            new SimpleWeightedBipartiteGraphMatrixBuilder<V, WeightedEdge>()", "+            new SimpleWeightedBipartiteGraphMatrixGenerator<V, WeightedEdge>()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cffdbace4438672edec1ea577af841a1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/DefaultDirectedGraphTest.java", "commitBeforeChange": "02c47e01c2a9da5578ae3f468177544b61a9d129", "commitAfterChange": "5671952a0fe9e747d7dd16b262d98190a1e0ae51", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testEdgeListFactory()", "signatureAfterChange": "     public void testEdgeListFactory()", "diff": ["-        g.setEdgeListFactory(new LinkedListFactory<String, DirEdge<String>>());", "+        g.setEdgeListFactory(new LinkedHashSetFactory<String, DirEdge<String>>());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0798b847cb10c26b803d2a2235eb0f6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/ListenableGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         public void vertexRemoved(GraphVertexChangeEvent<Object> e)", "signatureAfterChange": "         public void vertexRemoved(GraphVertexChangeEvent<Object> e)", "diff": ["-            m_lastRemovedVertex = e.getVertex();", "+            lastRemovedVertex = e.getVertex();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ce4ba63daf32815d05b0f97771c6aa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/VF2MappingIterator.java", "commitBeforeChange": "5c8fffde1c1a55b2319864925aeede902ff4220f", "commitAfterChange": "8fb981eca094848a4fb36fb4dbaab5b3253773a2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "       public VF2MappingIterator(                     GraphOrdering<V,E> ordering1,                     GraphOrdering<V,E> ordering2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "signatureAfterChange": "       public VF2MappingIterator(                     GraphOrdering<V,E> ordering1,                     GraphOrdering<V,E> ordering2,                     Comparator<V> vertexComparator,                     Comparator<E> edgeComparator)", "diff": ["-        this.stateStack       = new Stack<VF2State<V,E>>();", "+        this.stateStack       = new ArrayDeque<VF2State<V, E>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d612c5d496917b7eadc1fa0cd9b6abf4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2IsomorphismInspector.java", "commitBeforeChange": "c2b66d4fccebb2a5b699cd20e425664647562702", "commitAfterChange": "77db2d28a7d6bf7fe851ab2ee4ce10a977134199", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected SubgraphIsomorphismRelation<V, E> match()", "signatureAfterChange": "      @Override     protected SubgraphIsomorphismRelation<V, E> match()", "diff": ["-            s = new VF2SubState<V, E>(ordering1, ordering2,", "+            s = new VF2State<V, E>(ordering1, ordering2,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc01257604b29893dae7383cc0376f88", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/AsUnweightedGraphTest.java", "commitBeforeChange": "81ef9c1d2d39994c25cce597f188d33ad62d5269", "commitAfterChange": "76d8d52bc063f9cd4364e294dbe191c5648bf05d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testUndirected()", "signatureAfterChange": "     public void testUndirected()", "diff": ["-            new WeightedPseudograph<String, DefaultWeightedEdge>(", "+            new SimpleWeightedGraph<String, DefaultWeightedEdge>("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9131c52f64c31cf542d22d5783143cf", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/alg/isomorphism/IsomorphismInspectorTest.java", "commitBeforeChange": "60010fc57aba40a0dc737753490baabfe21649df", "commitAfterChange": "6d19fa8b6d71cf796fa33651b9acf5d61058f15e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testEdgeComparator()", "signatureAfterChange": "     public void testEdgeComparator()", "diff": ["-            new DirectedEdgeWieghtOddEvenComparator();", "+            new DirectedEdgeWeightOddEvenComparator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f58d0f0c3970ecf206b4cb42ff19ede0", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/NeighborIndex.java", "commitBeforeChange": "a618b184d032025b18a4e87d16829aca3c10b733", "commitAfterChange": "f2700b401e21e2cbb4b86c4b26a5c4c619c8ee12", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "          public List<V> getNeighborList()", "signatureAfterChange": "          public List<V> getNeighborList()", "diff": ["-            for (Map.Entry<V,Count> entry : m_neighborCounts.entrySet()) {", "+            for (Map.Entry<V,ModifiableInteger> entry : m_neighborCounts.entrySet()) {", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd4d049d092b6dac60d5031ca29c0258", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "a8fcb05e59a32f8e49530eae4f6013ccc6c2ed3e", "commitAfterChange": "e07df8411d2d5660415c7539e838f795b02777b5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         int getFinishingTime(  )", "signatureAfterChange": "         int getFinishingTime(  )", "diff": ["-            return finished;", "+            return m_finished;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28c10988e7654b31845b55e9962509d9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b6ee350ff370e26f49f05e8e62cbebe", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public List incomingEdgesOf( Object vertex )", "signatureAfterChange": "     public List<E> incomingEdgesOf( V vertex )", "diff": ["-    public List incomingEdgesOf( Object vertex ) {", "+    public List<E> incomingEdgesOf( V vertex ) {", "-        List      baseEdges =", "-            ( (DirectedGraph) m_base ).incomingEdgesOf( vertex );", "+        List<E>   baseEdges =", "+            ( (DirectedGraph<V,E>) m_base ).incomingEdgesOf( vertex );", "-        for( Iterator i = baseEdges.iterator(  ); i.hasNext(  ); ) {", "-            Edge e = (Edge) i.next(  );", "+        for( E e : baseEdges ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8d8b1c6e2b8ee56f43a17159ab57948", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public List outgoingEdgesOf( Object vertex )", "signatureAfterChange": "     public List<E> outgoingEdgesOf( V vertex )", "diff": ["-    public List outgoingEdgesOf( Object vertex ) {", "+    public List<E> outgoingEdgesOf( V vertex ) {", "-        List      baseEdges =", "-            ( (DirectedGraph) m_base ).outgoingEdgesOf( vertex );", "+        List<E>   baseEdges =", "+            ( (DirectedGraph<V,E>) m_base ).outgoingEdgesOf( vertex );", "-        for( Iterator i = baseEdges.iterator(  ); i.hasNext(  ); ) {", "-            Edge e = (Edge) i.next(  );", "+        for( E e : baseEdges ) {"]}]}
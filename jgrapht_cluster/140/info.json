{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f31894789a8af45d20cb8336be4561bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25c6e7ac946c39ae4846312f8b32eaa6", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "08c0860ef8b6386a295ff8a74d8673cb3c9d9a02", "commitAfterChange": "c3e5aa9fad3b9e0927939b2a916ae5049377758b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected String toStringFromSets(Collection<? extends V> vertexSet,         Collection<? extends Edge<V>> edgeSet)", "signatureAfterChange": "     protected String toStringFromSets(         Collection<? extends V> vertexSet,         Collection<? extends E> edgeSet,         boolean directed)", "diff": ["-    protected String toStringFromSets(Collection<? extends V> vertexSet,", "-        Collection<? extends Edge<V>> edgeSet)", "+    protected String toStringFromSets(", "+        Collection<? extends V> vertexSet,", "+        Collection<? extends E> edgeSet,", "+        boolean directed)", "-        return \"(\" + vertexSet.toString() + \", \" + edgeSet.toString() + \")\";", "+        List<String> renderedEdges = new ArrayList<String>();", "+", "+        StringBuffer sb = new StringBuffer();", "+        for (E e : edgeSet) {", "+            if ((e.getClass() != DefaultEdge.class)", "+                && (e.getClass() != DefaultWeightedEdge.class))", "+            {", "+                sb.append(e.toString());", "+                sb.append(\"=\");", "+            }", "+            if (directed) {", "+                sb.append(\"(\");", "+            } else {", "+                sb.append(\"{\");", "+            }", "+            sb.append(getEdgeSource(e));", "+            sb.append(\",\");", "+            sb.append(getEdgeTarget(e));", "+            if (directed) {", "+                sb.append(\")\");", "+            } else {", "+                sb.append(\"}\");", "+            }", "+            // REVIEW jvs 29-May-2006:  dump weight somewhere?", "+            renderedEdges.add(sb.toString());", "+            sb.setLength(0);", "+        }", "+        ", "+        return \"(\" + vertexSet + \", \" + renderedEdges + \")\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32dff7eb4951c5f4936bcf8b2afbec11", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubState.java", "commitBeforeChange": "323f50ff50f0763160c18603b341aaf64f3f86fa", "commitAfterChange": "ae28ef46862d27cc29ea1c777834ee39dd9c869a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean isFeasiblePair()", "signatureAfterChange": "     public boolean isFeasiblePair()", "diff": ["-                    System.out.println(abortmsg);", "+                    System.out.println(abortmsg + \": Kante von \" + g2.getVertex(addVertex2) +", "+                                    \" nach \" + g2.getVertex(other2) + \" fehlt im 2. Graph\");", "-                    System.out.println(abortmsg);", "+                    System.out.println(abortmsg + \": Kante von \" + g2.getVertex(other2) +", "+                                    \" nach \" + g2.getVertex(addVertex2) + \" fehlt im 2. Graph\");", "-                    System.out.println(abortmsg);", "+                    System.out.println(abortmsg + \": Kante von \" + g1.getVertex(addVertex1) +", "+                                    \" nach \" + g1.getVertex(other1) + \" fehlt im 1. Graph\");", "-                    System.out.println(abortmsg);", "+                    System.out.println(abortmsg + \": Kante von \" + g1.getVertex(other1) +", "+                                    \" nach \" + g1.getVertex(addVertex1) + \" fehlt im 1. Graph\");", "-        if (termInPred1 >= termInPred2 && termOutPred1 >= termOutPred2 && newPred1 >= newPred2 && termInSucc1 >= termInSucc2 && termOutSucc1 >= termOutSucc2 && newSucc1 >= newSucc2) {", "+        if (termInPred1 >= termInPred2 &&", "+            termOutPred1 >= termOutPred2 &&", "+            newPred1 >= newPred2 &&", "+            termInSucc1 >= termInSucc2 &&", "+            termOutSucc1 >= termOutSucc2 &&", "+            newSucc1 >= newSucc2)", "+        {", "-        } else {", "-            System.out.println(abortmsg);", "+        }", "+        else", "+        {", "+            String cause = \"\",", "+                   v1 = (String) g1.getVertex(addVertex1),", "+                   v2 = (String) g2.getVertex(addVertex2);", "+        ", "+            if (termInPred2 > termInPred1)", "+                cause = \"|Tin2 \u2229 Pred(Graph2, \" + v2 + \")| > |Tin1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+            else if (termOutPred2 > termOutPred1)", "+                cause = \"|Tout2 \u2229 Pred(Graph2, \" + v2 + \")| > |Tout1 \u2229 Pred(Graph1, \" + v1 + \")|\";", "+            else if (newPred2 > newPred2)", "+                cause = \"|N\u203e \u2229 Pred(Graph2, \" + v2 + \")| > |N\u203e \u2229 Pred(Graph1, \" + v1 + \")|\";", "+            else if (termInPred2 > termInPred1)", "+                cause = \"|Tin2 \u2229 Succ(Graph2, \" + v2 + \")| > |Tin1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (termOutSucc2 > termOutSucc1)", "+                cause = \"|Tout2 \u2229 Succ(Graph2, \" + v2 + \")| > |Tout1 \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            else if (newSucc2 > newSucc2)", "+                cause = \"|N\u203e \u2229 Succ(Graph2, \" + v2 + \")| > |N\u203e \u2229 Succ(Graph1, \" + v1 + \")|\";", "+            ", "+            System.out.println(abortmsg + \": \" + cause);"]}]}
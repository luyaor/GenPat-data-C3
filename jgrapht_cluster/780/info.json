{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fb5eca80980bbbce520fa22e24f63ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03c00edd864c81927ab6e3b28a635fd8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public int inDegreeOf( Object vertex )", "signatureAfterChange": "     public int inDegreeOf( V vertex )", "diff": ["-    public int inDegreeOf( Object vertex ) {", "+    public int inDegreeOf( V vertex ) {", "-        for( Iterator i =", "-                ( (DirectedGraph) m_base ).incomingEdgesOf( vertex ).iterator(  );", "-                i.hasNext(  ); ) {", "-            if( containsEdge( (Edge) i.next(  ) ) ) {", "+        for( E e : ( (DirectedGraph<V,E>) m_base ).incomingEdgesOf( vertex ) ) {", "+            if( containsEdge( e ) ) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5616188b840c509c297dd9974727b85f", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public int outDegreeOf( Object vertex )", "signatureAfterChange": "     public int outDegreeOf( V vertex )", "diff": ["-    public int outDegreeOf( Object vertex ) {", "+    public int outDegreeOf( V vertex ) {", "-        for( Iterator i =", "-                ( (DirectedGraph) m_base ).outgoingEdgesOf( vertex ).iterator(  );", "-                i.hasNext(  ); ) {", "-            if( containsEdge( (Edge) i.next(  ) ) ) {", "+        for( E e : ( (DirectedGraph<V,E>) m_base ).outgoingEdgesOf( vertex ) ) {", "+            if( containsEdge( e ) ) {"]}]}
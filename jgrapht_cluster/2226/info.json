{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e49477bb309ec16d0c0e29ae8e1224b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36cca125a90cc1ff46331e338ea157ea", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void testRemoveEdgeEdge()", "signatureAfterChange": "     public void testRemoveEdgeEdge()", "diff": ["-        assertEquals(m_g4.edgeSet().size(), 4);", "-        m_g4.removeEdge(m_v1, m_v2);", "-        assertEquals(m_g4.edgeSet().size(), 3);", "-        assertFalse(m_g4.removeEdge(m_eLoop));", "-        assertTrue(m_g4.removeEdge(m_g4.getEdge(m_v2, m_v3)));", "-        assertEquals(m_g4.edgeSet().size(), 2);", "+        assertEquals(g4.edgeSet().size(), 4);", "+        g4.removeEdge(v1, v2);", "+        assertEquals(g4.edgeSet().size(), 3);", "+        assertFalse(g4.removeEdge(eLoop));", "+        assertTrue(g4.removeEdge(g4.getEdge(v2, v3)));", "+        assertEquals(g4.edgeSet().size(), 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ab51f709089799074c25b7c3e3097f3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SubgraphTest.java", "commitBeforeChange": "33ca765ae7b002dbbdb4d2d0058e24aa73ac2858", "commitAfterChange": "840e66567786fb3f382b5b59966f8c2a0110c6bb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void testSubgraph()", "signatureAfterChange": "     public void testSubgraph()", "diff": ["-        g.removeVertex(_v1);", "+        g.removeVertex(v1);", "-        vset.add(_v1);", "+        vset.add(v1);", "-        assertEquals(0, sub.degreeOf(_v1));", "+        assertEquals(0, sub.degreeOf(v1));", "-        vset.add(_v2);", "-        vset.add(_v3);", "-        sub = new Subgraph<String, DefaultEdge>(g, vset, new HashSet<DefaultEdge>(g.getAllEdges(_v1, _v2)));", "+        vset.add(v2);", "+        vset.add(v3);", "+        sub = new Subgraph<String, DefaultEdge>(g, vset, new HashSet<DefaultEdge>(g.getAllEdges(v1, v2)));"]}]}
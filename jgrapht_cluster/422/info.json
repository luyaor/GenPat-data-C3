{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7133bf11ee6a8cc92eca16ffa5ece94", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13bb70101c6e479c7fdd4344bf225d7a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "4ce096512635cf5313f72b6b11cf17d5227f1e82", "commitAfterChange": "5ad133ca974bee3f583f3037c1c5c902d0c89ecf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testGraphTypes()", "signatureAfterChange": "     @Test     public void testGraphTypes()", "diff": ["-        thrown.expect(UnsupportedOperationException.class);", "+        thrown1.expect(UnsupportedOperationException.class);", "-        thrown.expect(UnsupportedOperationException.class);", "+        thrown2.expect(UnsupportedOperationException.class);", "-        thrown.expect(UnsupportedOperationException.class);", "+        thrown5.expect(UnsupportedOperationException.class);", "-        thrown.expect(UnsupportedOperationException.class);", "+        thrown6.expect(UnsupportedOperationException.class);", "-        thrown.expect(UnsupportedOperationException.class);", "+        thrown7.expect(UnsupportedOperationException.class);", "-        thrown.expect(UnsupportedOperationException.class);", "+        thrown8.expect(UnsupportedOperationException.class);", "-        thrown.expect(UnsupportedOperationException.class);", "+        thrown9.expect(UnsupportedOperationException.class);", "-        thrown.expect(IllegalArgumentException.class);", "+        thrown10.expect(IllegalArgumentException.class);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2910e0f95d13299eeba1f6d15d7e5a51", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "7311f3ddb2ec71dc0af1e1a2446d2101c7876729", "commitAfterChange": "6c06b4e35e0bdab8ae06a382ca214e6b9a0d778b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testEdgeCasesSimpleGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesSimpleGraph()", "diff": ["-        assertEquals(\"[1=5 2=6 3=7 4=~~]\",", "-                        vfs6b.getMappings().next().toString());", "+        assertEquals(false, vfs6.isomorphismExists());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e02592c978ab927b39dab1f7989b8b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/alg/isomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "7311f3ddb2ec71dc0af1e1a2446d2101c7876729", "commitAfterChange": "6c06b4e35e0bdab8ae06a382ca214e6b9a0d778b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testEdgeCasesDirectedGraph()", "signatureAfterChange": "     @Test     public void testEdgeCasesDirectedGraph()", "diff": ["-        assertEquals(\"[1=5 2=6 3=7 4=~~]\",", "-                        vf6b.getMappings().next().toString());", "+        assertEquals(false, vf6.isomorphismExists());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8685de9676770d844a00f52c489d410a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MinSourceSinkCut.java", "commitBeforeChange": "a35680f67c56e8fcc81e697983a084c86d356dae", "commitAfterChange": "b4e8f6742028ccb6628bd42dbfef197bf5f06148", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void computeMinCut(V source, V sink)", "signatureAfterChange": "     public void computeMinCut(V source, V sink)", "diff": ["-        ekMaxFlow.calculateMaximumFlow(source, sink);", "-        this.cutWeight = ekMaxFlow.getMaximumFlowValue();", "-        Map<E, Double> maxFlow = ekMaxFlow.getMaximumFlow();", "+        MaximumFlow<V, E> maxFlow = ekMaxFlow.buildMaximumFlow(source, sink);", "+", "+        this.cutWeight = maxFlow.getValue();", "-                double flowValue = maxFlow.get(edge);", "+                double flowValue = maxFlow.getFlow().get(edge);", "-                double flowValue = maxFlow.get(edge);", "+                double flowValue = maxFlow.getFlow().get(edge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a51edfcb83d681da31c110baa6518c86", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/flow/PushRelabelMaximumFlow.java", "commitBeforeChange": "7aed39a1af86a04f66007baa8f1c62673d4be780", "commitAfterChange": "fa439ca86ad5484e4f0d6132cc374b67035ff8e3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "signatureAfterChange": "      @Override     public MaximumFlow<V, E> buildMaximumFlow(V source, V sink)", "diff": ["-        buildInternal();", "-", "-        VertexExtension sourceX = extendedVertex(source);", "-        VertexExtension sinkX   = extendedVertex(sink);", "-", "-        initialize(sourceX, active);", "+        initialize(extendedVertex(source), extendedVertex(sink), active);", "-                        if (ex.getTarget() != sinkX && ex.getTarget() != sourceX)", "+                        if (ex.getTarget().prototype != sink && ex.getTarget().prototype != source)"]}]}
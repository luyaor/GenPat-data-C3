{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09b9add26f9765ffa370d152a43612de", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910c0a7dec82ae3e52e7d37738d953b7", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/HopcroftKarpBipartiteMatching.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate LinkedList<V> dfs(V startVertex, Map<V,Set<V>> layeredMap)", "signatureAfterChange": "      private LinkedList<V> dfs(V startVertex, Map<V, Set<V>> layeredMap)", "diff": ["+", "+    private LinkedList<V> dfs(V startVertex, Map<V, Set<V>> layeredMap)", "+    {", "+        if (!layeredMap.containsKey(startVertex)) {", "+            return null;", "+        } else if (unmatchedVertices1.contains(startVertex)) {", "+            LinkedList<V> list = new LinkedList<V>();", "+            list.add(startVertex);", "+            return list;", "+        } else {", "+            LinkedList<V> partialPath = null;", "+            for (V vertex : layeredMap.get(startVertex)) {", "+                partialPath = dfs(vertex, layeredMap);", "+                if (partialPath != null) {", "+                    partialPath.add(startVertex);", "+                    break;", "+                }", "+            }", "+            return partialPath;", "+        }", "+    }", "-\t", "-\tprivate LinkedList<V> dfs(V startVertex, Map<V,Set<V>> layeredMap){", "-\t\tif(!layeredMap.containsKey(startVertex))", "-\t\t\treturn null;", "-\t\telse", "-        if(unmatchedVertices1.contains(startVertex)){", "-\t\t\tLinkedList<V> list=new LinkedList<V>();", "-\t\t\tlist.add(startVertex);", "-\t\t\treturn list;", "-\t\t}else{", "-\t\t\tLinkedList<V> partialPath=null;", "-\t\t\tfor(V vertex: layeredMap.get(startVertex)){", "-\t\t\t\tpartialPath=dfs(vertex,layeredMap);", "-\t\t\t\tif(partialPath!=null){", "-\t\t\t\t\tpartialPath.add(startVertex);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn partialPath;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7902dcd73350b4c80d7fe1bc1d52dac", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/HopcroftKarpBipartiteMatching.java", "commitBeforeChange": "2368f894a5f86458e6220ed61039dad10454d9ab", "commitAfterChange": "8bbdd0b15ef2a408186085d20f1a6fb81ea81686", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate void symmetricDifference(LinkedList<V> augmentingPath)", "signatureAfterChange": "     private void symmetricDifference(LinkedList<V> augmentingPath)", "diff": ["+     */", "+    private void symmetricDifference(LinkedList<V> augmentingPath)", "+    {", "+        int operation = 0;", "+", "+        //The augmenting path alternatingly has an edge which is not part of the", "+        //matching, and an edge which is part of the matching. Edges which are", "+        //already part of the matching are removed, the others are added.", "+        while (augmentingPath.size() > 0) {", "+            E edge =", "+                graph.getEdge(augmentingPath.poll(), augmentingPath.peek());", "+            if ((operation % 2) == 0) {", "+                matching.add(edge);", "+            } else {", "+                matching.remove(edge);", "+            }", "+            operation++;", "+        }", "+    }", "-\t */", "-\tprivate void symmetricDifference(LinkedList<V> augmentingPath){", "-\t\tint operation=0;", "-\t\t//The augmenting path alternatingly has an edge which is not part of the matching, and an edge", "-\t\t//which is part of the matching. Edges which are already part of the matching are removed, the others are added.", "-\t\twhile(augmentingPath.size()>0){", "-\t\t\tE edge=graph.getEdge(augmentingPath.poll(),augmentingPath.peek());", "-\t\t\tif(operation%2==0){", "-\t\t\t\tmatching.add(edge);", "-\t\t\t}else", "-\t\t\t\tmatching.remove(edge);", "-\t\t\toperation++;", "-\t\t}", "-\t}"]}]}
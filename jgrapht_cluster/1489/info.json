{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfb25a7cf80fb52dce1ebdfe920ea28c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485875514da318d154e706db395492c9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/GraphUnion.java", "commitBeforeChange": "684d27d6ebc688dbf24e3f749dae38816b82f3e0", "commitAfterChange": "51364417691421b046a3518ca4b006f616254eda", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public E getEdge(V sourceVertex, V targetVertex)", "signatureAfterChange": "      public E getEdge(V sourceVertex, V targetVertex)", "diff": ["-        if (g1.containsEdge(sourceVertex, targetVertex)) {", "-            return g1.getEdge(sourceVertex, targetVertex);", "+        E res = null;", "+        if (g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex)) {", "+            res = g1.getEdge(sourceVertex, targetVertex);", "-        if (g2.containsEdge(sourceVertex, targetVertex)) {", "-            return g2.getEdge(sourceVertex, targetVertex);", "+        if (res == null && g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex)) {", "+            res = g2.getEdge(sourceVertex, targetVertex);", "-        return null;", "+        return res;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60a203fb6f00ee05c4388ca6b348848a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/GraphUnion.java", "commitBeforeChange": "c1b18555a2f28acb0ec5c4b00226afe9c678f1ef", "commitAfterChange": "6e498e9ccac4b4fbbcc67c5c09c3aad5cb9f822a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "signatureAfterChange": "      public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "diff": ["-        res.addAll(g1.getAllEdges(sourceVertex, targetVertex));", "-        res.addAll(g2.getAllEdges(sourceVertex, targetVertex));", "+        if (g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex)) {", "+            res.addAll(g1.getAllEdges(sourceVertex, targetVertex));", "+        }", "+        if (g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex)) {", "+            res.addAll(g2.getAllEdges(sourceVertex, targetVertex));", "+        }"]}]}
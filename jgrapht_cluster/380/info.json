{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68b5f6fa7c33105429d84c6daf5e78b8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343f4505d0dfd5cc28ef991393ca91eb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static Object initialize( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "signatureAfterChange": "     private static <V, E extends Edge<V>> V initialize( DirectedGraph<V, E> dg,         LinkedList<V> queue, Map inDegreeMap )", "diff": ["-    private static Object initialize( DirectedGraph dg, LinkedList queue,", "-        Map inDegreeMap ) {", "-        for( Iterator i = dg.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "-            Object vertex = i.next(  );", "+    private static <V, E extends Edge<V>> V initialize( DirectedGraph<V, E> dg,", "+        LinkedList<V> queue, Map inDegreeMap ) {", "+        for( Iterator<V> i = dg.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "+            V vertex = i.next(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "731c847511df634bb2b930e23f966f87", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "e07df8411d2d5660415c7539e838f795b02777b5", "commitAfterChange": "0ad4e7aa4cfa8aa6a1084840647777d1fbca3d33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void initialize( DirectedGraph dg )", "signatureAfterChange": "     private static Object initialize( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "diff": ["-    private void initialize( DirectedGraph dg ) {", "+    private static Object initialize( DirectedGraph dg, LinkedList queue,", "+        Map inDegreeMap ) {", "-            m_inDegreeMap.put( vertex, new ModifiableInteger( inDegree ) );", "+            inDegreeMap.put( vertex, new ModifiableInteger( inDegree ) );", "-                m_queue.add( vertex );", "+                queue.add( vertex );", "+", "+        if( queue.isEmpty(  ) ) {", "+            return null;", "+        }", "+        else {", "+            return queue.getFirst(  );", "+        }"]}]}
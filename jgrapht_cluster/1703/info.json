{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39686b232be9fb6a6cc39cce7f2add3a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b60079b60aed2197ebc54cbb39eac84", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "985760cbd642d0a5bdb9eca3c84e4565ecb8ceea", "commitAfterChange": "f79565a2a8d7f5186720bf4969b47a8431d60e9c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies)", "signatureAfterChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies)", "diff": ["-\t\t\t\tif (hasVertexBeenProcessed.get(adjacentVertex(edge, vertex)) && !reachableVerticies.keySet().contains(adjacentVertex(edge, vertex)) && reducedWeight(edge) < beta)", "+\t\t\t\tif (hasVertexBeenProcessed.get(Graphs.getOppositeVertex(graph, edge, vertex)) && !reachableVerticies.keySet().contains(Graphs.getOppositeVertex(graph, edge, vertex)) && reducedWeight(edge) < beta)", "-\t\tif (alpha == 0 || beta == 0)", "-\t\t\tthrow new RuntimeException(\"Something went wrong: invalid alpha / beta values\");", "+\t\tassert (alpha > 0 && beta > 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c109f6bceeb4bdb2910a7eaea3f3a676", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "fa16037e522e343cf4408ba62ee326e9e516b6f7", "commitAfterChange": "f2de77a20d36da53df6cfaa8a1575a485b03dfb8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies)", "signatureAfterChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVertices)", "diff": ["-\tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies) {", "+\tprivate void adjustVertexWeights(Map<V, List<E>> reachableVertices) {", "-\t\tfor (V vertex : reachableVerticies.keySet()) {", "+\t\tfor (V vertex : reachableVertices.keySet()) {", "-\t\tfor (V vertex : reachableVerticies.keySet()) {", "+\t\tfor (V vertex : reachableVertices.keySet()) {", "-\t\t\t\tif (hasVertexBeenProcessed.get(Graphs.getOppositeVertex(graph, edge, vertex)) && !reachableVerticies.keySet().contains(Graphs.getOppositeVertex(graph, edge, vertex)) && reducedWeight(edge) < beta)", "+\t\t\t\tif (hasVertexBeenProcessed.get(Graphs.getOppositeVertex(graph, edge, vertex)) && !reachableVertices.keySet().contains(Graphs.getOppositeVertex(graph, edge, vertex)) && reducedWeight(edge) < beta)", "-\t\tfor (V vertex : reachableVerticies.keySet()) {", "+\t\tfor (V vertex : reachableVertices.keySet()) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fcbf78ad4464de1e23b97daad115b20", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b1fe65feff4508722c7d23f9893d12", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPaths.java", "commitBeforeChange": "d11cabd1aabdc954107d901bc835dd46e2c5b915", "commitAfterChange": "695a606157d7ef974075682ce4ecc3e1dfdc85a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "signatureAfterChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "diff": ["-    public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "-    {", "+    public List<RankingPathElement<V, E>> getPathElements(V endVertex) {", "-        lazyCalculate();", "+        KShortestPathsIterator<V, E> iter = new KShortestPathsIterator<V, E>(", "+                this.graph, this.startVertex, endVertex, this.nPaths);", "-        return this.iter.getPathElements(endVertex);", "+        // at the i-th pass the shortest paths with less (or equal) than i edges", "+        // are calculated.", "+        for (int passNumber = 1; (passNumber <= this.nMaxHops)", "+                && iter.hasNext(); passNumber++) {", "+            iter.next();", "+        }", "+", "+        return iter.getPathElements(endVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac88d8b48cd5c0da6e49a294ec6a5252", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPaths.java", "commitBeforeChange": "af61e5d97b8783c377d8616e4786a4542c35b8a3", "commitAfterChange": "f9d1a7195d2b619df2846dc654b2682aee4bacc5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "signatureAfterChange": "     public List<GraphPath<V, E>> getPaths(V endVertex)", "diff": ["-    public List<RankingPathElement<V, E>> getPathElements(V endVertex)", "+    public List<GraphPath<V, E>> getPaths(V endVertex)", "-        return iter.getPathElements(endVertex);", "+        List<RankingPathElement<V, E>> list = iter.getPathElements(endVertex);", "+", "+        if (list == null) {", "+            return null;", "+        }", "+", "+        List<GraphPath<V, E>> pathList = new ArrayList<GraphPath<V, E>>();", "+", "+        for (RankingPathElement<V, E> element : list) {", "+            pathList.add(new PathWrapper(element));", "+        }", "+", "+        return pathList;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad9f1edcfa898a271431c9df515144a9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private boolean isAlreadyAdded(RankingPathElement<V, E> pathElement)", "signatureAfterChange": "      private boolean isNotValidPath(         RankingPathElement<V, E> prevPathElement,         E edge)", "diff": ["-", "-    private boolean isAlreadyAdded(RankingPathElement<V, E> pathElement)", "-    {", "-        for (int i = 0; i <= (size() - 1); i++) {", "-            RankingPathElement<V, E> yPathElement = get(i);", "-            RankingPathElement<V, E> pathElementToTest = pathElement;", "-            if (!isDifferent(yPathElement, pathElementToTest)) {", "-                return true;", "-            }", "-        }", "-        return false;", "-    }", "+", "+    private boolean isNotValidPath(", "+        RankingPathElement<V, E> prevPathElement,", "+        E edge)", "+    {", "+        return !isSimplePath(prevPathElement, edge)", "+            || isGuardVertexDisconnected(prevPathElement);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "900c64516512dadabff90efbd957ee92", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb2c8577245be90630b9fb869defffa", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public List incomingEdgesOf( Object vertex )", "signatureAfterChange": "     public List incomingEdgesOf( Object vertex )", "diff": ["-        return ( (DirectedGraph) m_base ).incomingEdgesOf( vertex );", "+        assertVertexExist( vertex );", "+", "+        ArrayList edges     = new ArrayList(  );", "+        List      baseEdges = ((DirectedGraph)m_base).incomingEdgesOf( vertex );", "+", "+        for( Iterator i = baseEdges.iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                edges.add( e );", "+            }", "+        }", "+", "+        return edges;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "976b6b8700bc07a89e29b8d2466700f1", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/Subgraph.java", "commitBeforeChange": "1bf692b9303b369fdfe7554ce2df1fedf3288436", "commitAfterChange": "5471207353f24a9e52809a768cf32ffbeaf81076", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public List outgoingEdgesOf( Object vertex )", "signatureAfterChange": "     public List outgoingEdgesOf( Object vertex )", "diff": ["-        return ( (DirectedGraph) m_base ).outgoingEdgesOf( vertex );", "+        assertVertexExist( vertex );", "+", "+        ArrayList edges     = new ArrayList(  );", "+        List      baseEdges = ((DirectedGraph)m_base).outgoingEdgesOf( vertex );", "+", "+        for( Iterator i = baseEdges.iterator(  ); i.hasNext(  ); ) {", "+            Edge e = (Edge) i.next(  );", "+", "+            if( containsEdge( e ) ) {", "+                edges.add( e );", "+            }", "+        }", "+", "+        return edges;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaff4bd8c3dcd61799f8ef50a091f39a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/graph/AbstractGraph.java", "commitBeforeChange": "8413c0621739087aaa2597f10b6a867735224f2d", "commitAfterChange": "39b789d7e41c82b46b5b0099b4e021514410c6a5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int hashCode()", "signatureAfterChange": "     public int hashCode()", "diff": ["-        int result = vertexSet().hashCode();", "+        int hash = vertexSet().hashCode();", "-            int source = getEdgeSource(e).hashCode();", "-            int target = getEdgeTarget(e).hashCode();", "-                part = 27 * part + e.hashCode(); ", "+               part = 27 * part + e.hashCode();", "+            } else {", "+                // we should check if there is any overridden hashCode() method in hierarchy", "+                // so, users can write their own edge classes as subclasses of DefaultEdge", "+                // with custom implementation of hashCode() method (VK);", "+                try {", "+                    Method hashCode = e.getClass().getMethod(\"hashCode\", new Class<?>[0]);", "+                    if (hashCode.getDeclaringClass() != Object.class) {", "+                        part = 27 * part + e.hashCode();", "+                    }", "+                } catch (NoSuchMethodException ignored) {", "+                    // should never happens, we always have hashCode() method (VK);", "+                }", "-            // this is a \"pairing function\" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK)", "+            int source = getEdgeSource(e).hashCode();", "+            int target = getEdgeTarget(e).hashCode();", "+", "+            // this is a \"pairing function\" (see details here: http://en.wikipedia.org/wiki/Pairing_function) (VK);", "-            long weight = (long) getEdgeWeight(e);", "-            part = 27 * part + (int) (weight ^ (weight >>> 32));", "+            // we also should add hash code of weighted edge to result (VK);", "+            if (e instanceof DefaultWeightedEdge) {", "+                long weight = (long) getEdgeWeight(e);", "+                part = 27 * part + (int) (weight ^ (weight >>> 32));", "+            }", "-            result += part;", "+            hash += part;", "-        return result;", "+        return hash;"]}]}
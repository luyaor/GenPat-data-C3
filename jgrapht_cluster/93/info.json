{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be518a97f80c2a0d93e2079006a32544", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e5610b0cf23241d1f75deaa3507404", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "76399a5646342a12a99375b728ce65e0fef58fa7", "commitAfterChange": "836df798105be860e011cc4cc0ecf308ba811d44", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "diff": ["-    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph){", "+    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "+    {", "-        workingGraph = new SimpleWeightedGraph<Set<V>, DefaultWeightedEdge>(", "-            DefaultWeightedEdge.class);", "+        workingGraph =", "+            new SimpleWeightedGraph<Set<V>, DefaultWeightedEdge>(", "+                DefaultWeightedEdge.class);", "-        ", "+", "-        while(workingGraph.vertexSet().size() > 2) minimumCutPhase(a);", "-        ", "+        while (workingGraph.vertexSet().size() > 2) {", "+            minimumCutPhase(a);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7b60f38414b17e9d4fa9e04e497b88", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/_3pq/jgrapht/graph/SubgraphTest.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Graph init(boolean listenable)", "signatureAfterChange": "      private Graph<String, Edge<String>> init(boolean listenable)", "diff": ["-    private Graph init(boolean listenable)", "+    private Graph<String, Edge<String>> init(boolean listenable)", "-        Graph g;", "+        Graph<String,Edge<String>> g;", "-            g = new ListenableUndirectedGraph();", "+            g = new ListenableUndirectedGraph<String, Edge<String>>();", "-            g = new SimpleGraph();", "+            g = new SimpleGraph<String, Edge<String>>();"]}]}
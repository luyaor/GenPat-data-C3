{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8f6163b301a54b9aa70be2f2989ccbe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "513c3a498b1312edafd7aa9a5eba3477", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/GraphOrdering.java", "commitBeforeChange": "7518fda5e34fbd0d30800f00a7bcae8e402c0396", "commitAfterChange": "b0ffaa521363d5faf1bf5b397f78265b9ab95ae6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t@SuppressWarnings(\"unchecked\") \tpublic V getVertex(int vertexOrder)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")     public V getVertex(int vertexNumber)", "diff": ["-\t// be careful: there's no check for NULL_NODE", "-\t@SuppressWarnings(\"unchecked\")", "-\tpublic V getVertex(int vertexOrder)\t{", "-\t\treturn (V) mapOrderToVertex[vertexOrder];", "-\t}", "+     */", "+    @SuppressWarnings(\"unchecked\")", "+    public V getVertex(int vertexNumber) {", "+        return (V) mapOrderToVertex[vertexNumber];", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c109f6bceeb4bdb2910a7eaea3f3a676", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/MaximumWeightBipartiteMatching.java", "commitBeforeChange": "fa16037e522e343cf4408ba62ee326e9e516b6f7", "commitAfterChange": "f2de77a20d36da53df6cfaa8a1575a485b03dfb8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies)", "signatureAfterChange": " \t \tprivate void adjustVertexWeights(Map<V, List<E>> reachableVertices)", "diff": ["-\tprivate void adjustVertexWeights(Map<V, List<E>> reachableVerticies) {", "+\tprivate void adjustVertexWeights(Map<V, List<E>> reachableVertices) {", "-\t\tfor (V vertex : reachableVerticies.keySet()) {", "+\t\tfor (V vertex : reachableVertices.keySet()) {", "-\t\tfor (V vertex : reachableVerticies.keySet()) {", "+\t\tfor (V vertex : reachableVertices.keySet()) {", "-\t\t\t\tif (hasVertexBeenProcessed.get(Graphs.getOppositeVertex(graph, edge, vertex)) && !reachableVerticies.keySet().contains(Graphs.getOppositeVertex(graph, edge, vertex)) && reducedWeight(edge) < beta)", "+\t\t\t\tif (hasVertexBeenProcessed.get(Graphs.getOppositeVertex(graph, edge, vertex)) && !reachableVertices.keySet().contains(Graphs.getOppositeVertex(graph, edge, vertex)) && reducedWeight(edge) < beta)", "-\t\tfor (V vertex : reachableVerticies.keySet()) {", "+\t\tfor (V vertex : reachableVertices.keySet()) {"]}]}
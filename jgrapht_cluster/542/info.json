{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db65639dc2e7491ce3bbb355173624a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04fed775d6a22f1c8ea8d188ac1cea8a", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AbstractBaseGraph.java", "commitBeforeChange": "586ba218cf358bfb0f3dd47d0f9d956d6b2fd235", "commitAfterChange": "6050c0cafee8f989220adf0f89822b2e772ed175", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "       private void setSpecifics(  )", "signatureAfterChange": "       private Specifics createSpecifics(  )", "diff": ["-    private void setSpecifics(  ) {", "-        if( this instanceof DirectedGraph ) {", "-            m_specifics = new DirectedSpecifics(  );", "-        }", "-        else if( this instanceof UndirectedGraph ) {", "-            m_specifics = new UndirectedSpecifics(  );", "-        }", "-        else {", "-            throw new IllegalArgumentException( ", "-                \"graph is incompatible with edge factory\" );", "-        }", "-    }", "+    private Specifics createSpecifics(  ) {", "+        if( this instanceof DirectedGraph ) {", "+            return new DirectedSpecifics(  );", "+        else if( this instanceof UndirectedGraph ) {", "+            return new UndirectedSpecifics(  );", "+        }", "+        else {", "+            throw new IllegalArgumentException( ", "+                \"must be instance of either DirectedGraph or UndirectedGraph\" );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307648443fdb3dd9c58d330a9053cc3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void addFirstPath(V vertex, E edge)", "signatureAfterChange": "     private boolean tryToAddFirstPaths(V vertex, E edge)", "diff": ["-     */", "-    private void addFirstPath(V vertex, E edge)", "-    {", "-        // the vertex has not been reached yet", "-        RankingPathElementList<V, E> data = createSeenData(vertex, edge);", "-        this.seenDataContainer.put(vertex, data);", "-    }", "+     */", "+    private boolean tryToAddFirstPaths(V vertex, E edge)", "+    {", "+        // the vertex has not been reached yet", "+        RankingPathElementList<V, E> data = createSeenData(vertex, edge);", "+", "+        if (!data.isEmpty()) {", "+            this.seenDataContainer.put(vertex, data);", "+            return true;", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b44b104c48c0e5a92fff5822e8d18e54", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspector.java", "commitBeforeChange": "af1b824446ff484516d50232b001351d46878322", "commitAfterChange": "7e936137877a73e8b9c1b2921fc4174c64f683c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private SubgraphIsomorphismRelation<V, E> match()", "signatureAfterChange": "     private SubgraphIsomorphismRelation<V, E> match()", "diff": ["+            ", "+            if (graph2.vertexSet().isEmpty())", "+                return hadOneRelation != null ? null : s.getCurrentMatching();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec69473cac5525fc8251079eec7da2ba", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/KuhnMunkresMinimalWeightBipartitePerfectMatching.java", "commitBeforeChange": "9634383765c94e7a1ec62deaa98a4524d87c98b5", "commitAfterChange": "f6e74d57ccf7a4238eba3e22fab747d0854f3464", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public KuhnMunkresMinimalWeightBipartitePerfectMatching(         final WeightedGraph<V, E> G,         List<? extends V> S,         List<? extends V> T)", "signatureAfterChange": "     public KuhnMunkresMinimalWeightBipartitePerfectMatching(         final WeightedGraph<V, E> G,         List<? extends V> S,         List<? extends V> T)", "diff": ["-        // Validate graph being complete bipartite with equally-sized partitions", "+        // Validate graph being complete bipartite with equally-sized partitions", "-        matching =", "-            new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching();", "+        // Expected behaviour for an empty graph is to return an empty set, so we check this last", "+        if (G.vertexSet().isEmpty()) {", "+            matching = new int[]{};", "+        } else {", "+            matching =", "+                    new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching();", "+        }"]}]}
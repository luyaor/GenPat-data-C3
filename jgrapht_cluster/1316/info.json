{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5aab7fa6a73f96bc618b3ca975bd18e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343f4505d0dfd5cc28ef991393ca91eb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/TopologicalOrderIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static Object initialize( DirectedGraph dg, LinkedList queue,         Map inDegreeMap )", "signatureAfterChange": "     private static <V, E extends Edge<V>> V initialize( DirectedGraph<V, E> dg,         LinkedList<V> queue, Map inDegreeMap )", "diff": ["-    private static Object initialize( DirectedGraph dg, LinkedList queue,", "-        Map inDegreeMap ) {", "-        for( Iterator i = dg.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "-            Object vertex = i.next(  );", "+    private static <V, E extends Edge<V>> V initialize( DirectedGraph<V, E> dg,", "+        LinkedList<V> queue, Map inDegreeMap ) {", "+        for( Iterator<V> i = dg.vertexSet(  ).iterator(  ); i.hasNext(  ); ) {", "+            V vertex = i.next(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3864084ae23c718ea6cb5af86a13e9cb", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/experimental/GraphTests.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public static boolean isConnected(Graph g)", "signatureAfterChange": "      public static <V, E extends Edge<V>> boolean isConnected(Graph<V,E> g)", "diff": ["-    public static boolean isConnected(Graph g)", "+    public static <V, E extends Edge<V>> boolean isConnected(Graph<V,E> g)", "-        Set known = new HashSet();", "-        LinkedList queue = new LinkedList();", "-        Object v = g.vertexSet().iterator().next();", "+        Set<V> known = new HashSet<V>();", "+        LinkedList<V> queue = new LinkedList<V>();", "+        V v = g.vertexSet().iterator().next();", "-            for (Iterator it = GraphHelper.neighborListOf(g, v).iterator();", "+            for (Iterator<V> it = GraphHelper.neighborListOf(g, v).iterator();"]}]}
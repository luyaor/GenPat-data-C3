{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fa7e0697ee458834269d3ce316c5379", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce7bc1822f4150b008259bf9dd4867d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/Subgraph.java", "commitBeforeChange": "02c47e01c2a9da5578ae3f468177544b61a9d129", "commitAfterChange": "5671952a0fe9e747d7dd16b262d98190a1e0ae51", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public List<E> getAllEdges(V sourceVertex, V targetVertex)", "signatureAfterChange": "     public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "diff": ["-    public List<E> getAllEdges(V sourceVertex, V targetVertex)", "+    public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "-        List<E> edges = null;", "+        Set<E> edges = null;", "-            edges = new ArrayList<E>();", "+            edges = new ArrayUnenforcedSet<E>();", "-            List<E> baseEdges = m_base.getAllEdges(sourceVertex, targetVertex);", "+            Set<E> baseEdges = m_base.getAllEdges(sourceVertex, targetVertex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69591f2bfc3551b1a82d95bfc1f0500e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/EdmondsKarpMaximumFlow.java", "commitBeforeChange": "91e402189940321ae76ce3a4cf3b435ec3f2ecd3", "commitAfterChange": "813ec90d631939110c91842ccc585ff9d81ec46d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void breadthFirstSearch()", "signatureAfterChange": "      private void breadthFirstSearch()", "diff": ["-            nodes.get(i).was = false;", "+            nodes.get(i).visited = false;", "-        nodes.get(currentSource).was = true;", "+        nodes.get(currentSource).visited = true;", "-                    if (!nodes.get(currentArc.head).was) {", "-                        nodes.get(currentArc.head).was = true;", "+                    if (!nodes.get(currentArc.head).visited) {", "+                        nodes.get(currentArc.head).visited = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c45c231454fbcb81cc599b68dc15454e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/graph/AsUndirectedGraph.java", "commitBeforeChange": "02c47e01c2a9da5578ae3f468177544b61a9d129", "commitAfterChange": "5671952a0fe9e747d7dd16b262d98190a1e0ae51", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public List<E> getAllEdges(V sourceVertex, V targetVertex)", "signatureAfterChange": "     public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "diff": ["-    public List<E> getAllEdges(V sourceVertex, V targetVertex)", "+    public Set<E> getAllEdges(V sourceVertex, V targetVertex)", "-        List<E> forwardList = super.getAllEdges(sourceVertex, targetVertex);", "-", "+        Set<E> forwardList = super.getAllEdges(sourceVertex, targetVertex);", "+        ", "-", "-        List<E> reverseList = super.getAllEdges(targetVertex, sourceVertex);", "-        List<E> list = new ArrayList<E>(forwardList.size() + reverseList.size());", "+        ", "+        Set<E> reverseList = super.getAllEdges(targetVertex, sourceVertex);", "+        Set<E> list = new ArrayUnenforcedSet<E>(", "+            forwardList.size() + reverseList.size());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "459afc1323aef82c13f1dbdfe26f27a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03481c0460d5fb70deb1e951f992c002", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/RankingPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected RankingPathElementList(RankingPathElementList<V, E> original)", "signatureAfterChange": "     RankingPathElementList(         Graph<V, E> graph,         int maxSize,         RankingPathElementList<V, E> elementList,         E edge,         V guardVertexToNotDisconnect)", "diff": ["+     */", "+    RankingPathElementList(", "+        Graph<V, E> graph,", "+        int maxSize,", "+        RankingPathElementList<V, E> elementList,", "+        E edge,", "+        V guardVertexToNotDisconnect)", "+    {", "+        this.guardVertexToNotDisconnect = guardVertexToNotDisconnect;", "+", "+            if (isNotValidPath(prevPathElement, edge)) {", "+                continue;", "+            }", "+", "+            if (size() < this.maxSize) {", "-    protected RankingPathElementList(RankingPathElementList<V, E> original)", "-        super(original);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "796cedf98b7911be13c2dc07461b4a8b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/ext/JGraphModelAdapter.java", "commitBeforeChange": "a4491f801ff4eba32d8029dda18c582844b268e3", "commitAfterChange": "dca8f0b0b2b997b3562b349da681aa495eb852bf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void insert( Object[] theRoots, Map attributes, ConnectionSet cs,         ParentMap pm, UndoableEdit[] edits )", "signatureAfterChange": "         private void filterEdgesAndVertices( Object[] allCells, Set jEdges,             Set jVertices )", "diff": ["-    public void insert( Object[] theRoots, Map attributes, ConnectionSet cs,", "-        ParentMap pm, UndoableEdit[] edits ) {", "-        throw new UnsupportedOperationException( ", "-            \"Insert only via the JGraphT graph.\" );", "+         */", "+        private void filterEdgesAndVertices( Object[] allCells, Set jEdges,", "+            Set jVertices ) {", "+            for( int i = 0; i < allCells.length; i++ ) {", "+                Object current = allCells[ i ];", "+", "+                if( current instanceof org.jgraph.graph.Edge ) {", "+                    jEdges.add( current );", "+                }", "+                else if( !( current instanceof Port ) ) {", "+                    if( current instanceof DefaultGraphCell ) {", "+                        DefaultGraphCell graphCell = (DefaultGraphCell) current;", "+", "+                        if( graphCell.isLeaf(  ) // Note: do not change the order", "+                                || ", "+                            // of these conditions; the code uses the short-cutting of ||.", "+                            ( graphCell.getFirstChild(  ) instanceof Port ) ) {", "+                            jVertices.add( current );", "+                        }", "+", "+                        // If a DefaultGraphCell has a Port as a child, it is a", "+                    }", "+                    else if( current instanceof GraphCell ) {", "+                        // If it is not a DefaultGraphCell, it doesn't have", "+                        // children.", "+                        jVertices.add( current );", "+                    }", "+", "+                    // Otherwise, this is neither an Edge nor a GraphCell; then we", "+                    // don't know what to do with it. So ignore.", "+                }", "+            }"]}]}
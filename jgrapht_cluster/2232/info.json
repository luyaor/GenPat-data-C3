{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1850ebdbfa8e8914fc5bd2cfbd2275c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280e3c4a1d110b6b474934223dfb1498", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "a8056d6aafd19ddde3f88a7357d27b280fbbac76", "commitAfterChange": "8786155732723df083d81ecffc66379e7847e52a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "signatureAfterChange": "     public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "diff": ["-    public StoerWagnerMinimumCut(WeightedGraph<V, E> graph)", "+    public StoerWagnerMinimumCut(UndirectedGraph<V, E> graph)", "+        if (graph.vertexSet().size() < 2)", "+            throw new IllegalArgumentException(", "+                    \"Graph has less than 2 vertices\");", "+        ", "+            if (graph.getEdgeWeight(e) < 0.0)", "+                throw new IllegalArgumentException(", "+                        \"Negative edge weights not allowed\");", "+", "-            DefaultWeightedEdge eNew = workingGraph.addEdge(sNew, tNew);", "-            workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e));", "+", "+            // For multigraphs, we sum the edge weights (either all are", "+            // contained in a cut, or none)", "+            DefaultWeightedEdge eNew = workingGraph.getEdge(sNew, tNew);", "+            if (eNew == null) {", "+                eNew = workingGraph.addEdge(sNew, tNew);", "+                workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e));", "+            } else", "+                workingGraph.setEdgeWeight(", "+                    eNew,", "+                    workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e));", "-        while (workingGraph.vertexSet().size() > 2) {", "+", "+        while (workingGraph.vertexSet().size() > 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6a03f6b8ce412679fb5b3b86d16c24", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/StoerWagnerMinimumCut.java", "commitBeforeChange": "76399a5646342a12a99375b728ce65e0fef58fa7", "commitAfterChange": "836df798105be860e011cc4cc0ecf308ba811d44", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "signatureAfterChange": "     protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "diff": ["-    protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t){", "-        ", "+     */", "+    protected VertexAndWeight mergeVertices(Set<V> s, Set<V> t)", "+    {", "-        for( V  v : s) set.add(v);", "-        for( V  v : t) set.add(v);", "+        for (V v : s) {", "+            set.add(v);", "+        }", "+        for (V v : t) {", "+            set.add(v);", "+        }", "-        ", "+", "-        for( Set<V> v : workingGraph.vertexSet() ){", "-            if(s != v  && t != v){", "+        for (Set<V> v : workingGraph.vertexSet()) {", "+            if ((s != v) && (t != v)) {", "-                double wtv = 0.0, wsv = 0.0; ", "-                if(etv != null)  wtv = workingGraph.getEdgeWeight(etv);", "-                if(esv != null)  wsv = workingGraph.getEdgeWeight(esv);", "+                double wtv = 0.0, wsv = 0.0;", "+                if (etv != null) {", "+                    wtv = workingGraph.getEdgeWeight(etv);", "+                }", "+                if (esv != null) {", "+                    wsv = workingGraph.getEdgeWeight(esv);", "+                }", "-                if(neww != 0.0) ", "-                    workingGraph.setEdgeWeight(workingGraph.addEdge(set, v), neww);", "+                if (neww != 0.0) {", "+                    workingGraph.setEdgeWeight(", "+                        workingGraph.addEdge(set, v),", "+                        neww);", "+                }", "-        ", "+", "-        ", "+", "-        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89128eaa2d36c684076757f5e414267", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/FloydWarshallShortestPaths.java", "commitBeforeChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "commitAfterChange": "82f01404dfe36eb0f878e007bce7de6e76c70836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void lazyCalculateMatrix()", "signatureAfterChange": "     private void lazyCalculateMatrix()", "diff": ["-        boolean directed = graph instanceof DirectedGraph<?, ?>;", "-        Set<E> edges = graph.edgeSet();", "-        for (E edge : edges) {", "-            V v1 = graph.getEdgeSource(edge);", "-            V v2 = graph.getEdgeTarget(edge);", "-", "-            int v_1 = vertexIndices.get(v1);", "-            int v_2 = vertexIndices.get(v2);", "-", "-            d[v_1][v_2] = graph.getEdgeWeight(edge);", "-            if (!directed) {", "-                d[v_2][v_1] = graph.getEdgeWeight(edge);", "+        if(graph instanceof  UndirectedGraph<?, ?>){", "+            for (E edge : graph.edgeSet()) {", "+                int v_1 = vertexIndices.get(graph.getEdgeSource(edge));", "+                int v_2 = vertexIndices.get(graph.getEdgeTarget(edge));", "+                d[v_1][v_2] =d[v_2][v_1] =graph.getEdgeWeight(edge);", "+            }", "+        }else{ //This works for both Directed and Mixed graphs! Iterating over the arcs and querying source/sink does not suffice for graphs which contain both edges and arcs", "+            DirectedGraph<V,E> directedGraph=(DirectedGraph<V,E>)graph;", "+            for(V v1 : directedGraph.vertexSet()){", "+                for(V v2 : Graphs.successorListOf(directedGraph, v1)){", "+                    int v_1 = vertexIndices.get(v1);", "+                    int v_2 = vertexIndices.get(v2);", "+                    d[v_1][v_2] =directedGraph.getEdgeWeight(directedGraph.getEdge(v1, v2));", "+                }"]}]}
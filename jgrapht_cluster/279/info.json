{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da57a490e2190a80a2a5a8b9aaef830b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a39cb4b5daf8f6019a8237fd83aa6a9", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "f9fe1a9b0c0422b26e26b94edd9001801984e770", "commitAfterChange": "04b4adb9d61a0a7a990979c19fd44e55accd860f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "         protected void encounterVertexAgain( Object vertex, Edge edge )", "signatureAfterChange": "     private void dfsVisit( DirectedGraph graph, VertexData vertexData,         Set vertices )", "diff": ["+     */", "+    private void dfsVisit( DirectedGraph graph, VertexData vertexData,", "+        Set vertices ) {", "+        Stack stack = new Stack(  );", "+        stack.push( vertexData );", "+        while( !stack.isEmpty(  ) ) {", "+            VertexData data = (VertexData) stack.pop(  );", "+            if( !data.m_discovered ) {", "+                data.m_discovered = true;", "+                if( vertices != null ) {", "+                    vertices.add( data.m_vertex );", "+                // TODO: other way to identify when this vertex is finished!?", "+                stack.push( new VertexData( data, true, true ) );", "+", "+                // follow all edges", "+                Iterator iter =", "+                    graph.outgoingEdgesOf( data.m_vertex ).iterator(  );", "+", "+                while( iter.hasNext(  ) ) {", "+                    DirectedEdge edge       = (DirectedEdge) iter.next(  );", "+                    VertexData   targetData =", "+                        (VertexData) m_verticesToVerticesData.get( edge", "+                            .getTarget(  ) );", "+", "+                    if( !targetData.m_discovered ) {", "+                        // the \"recursion\"", "+                        stack.push( targetData );", "+                    }", "+                }", "-         */", "-        protected void encounterVertexAgain( Object vertex, Edge edge ) {", "-            super.encounterVertexAgain( vertex, edge );", "-", "-            VertexData data = (VertexData) m_vertices.get( vertex );", "-            data.visit( m_time );", "-            m_time++;", "-        }", "+            else if( data.m_finished ) {", "+                if( vertices == null ) {", "+                    // see TODO above", "+                    m_orderedVertices.addFirst( data.m_vertex );", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd13049dc95d4c16254f33eb3ed9ac3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/test/java/org/jgrapht/experimental/subgraphisomorphism/VF2SubgraphIsomorphismInspectorTest.java", "commitBeforeChange": "f67e9197d81c666622112a20391d80767fa4beb3", "commitAfterChange": "af1b824446ff484516d50232b001351d46878322", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t\t \t\tpublic SubgraphWithString( \t\t\t\tDirectedGraph<String, DefaultEdge> graph, \t\t\t\tString str)", "signatureAfterChange": "          @Test     public void testRandomGraphsExhaustive()", "diff": ["-\t\t", "-\t\tpublic SubgraphWithString(", "-\t\t\t\tDirectedGraph<String, DefaultEdge> graph,", "-\t\t\t\tString str)", "-\t\t{", "-\t\t\tthis.graph = graph;", "-\t\t\tthis.str = str;", "-\t\t}", "+    ", "+    @Test", "+    public void testRandomGraphsExhaustive() {", "+        Random rnd = new Random();", "+        rnd.setSeed(12345);", "+        ", "+        for (int i = 1; i < 100; i++)    {", "+            int vertexCount    = 3 + rnd.nextInt(5),", "+                edgeCount      = rnd.nextInt(vertexCount * (vertexCount - 1)),", "+                subVertexCount = 2 + rnd.nextInt(vertexCount),", "+                subEdgeCount   = rnd.nextInt(subVertexCount * ", "+                                    (subVertexCount - 1));", "+            ", "+            DirectedGraph<Integer, DefaultEdge> g1 =", "+                SubgraphIsomorphismTestUtils.randomGraph(vertexCount,", "+                                edgeCount, i),", "+                                                g2 =", "+                SubgraphIsomorphismTestUtils.randomGraph(subVertexCount,", "+                                subEdgeCount, i);", "+            ", "+            VF2SubgraphIsomorphismInspector<Integer, DefaultEdge> vf2 =", "+                new VF2SubgraphIsomorphismInspector<Integer, DefaultEdge>(g1,", "+                                g2);", "+", "+            SubgraphIsomorphismTestUtils.showLog(i + \": \" + vertexCount +", "+                            \"v, \" + edgeCount + \"e ....\\n\");", "+", "+            assertEquals(true,", "+                SubgraphIsomorphismTestUtils.containsAllMatchings(vf2, g1, g2));", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af7703b41aa07ce1f2797f837258f9f2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0940d33a495dbb7a85b44b6aea4d7e4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "6245588ef354746c5c3ae9a477b956068a878121", "commitAfterChange": "7c92324c62793ccd32781d7e3f1ebd3ed525f69b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean hasEdge(int v1Number, int v2Number)", "signatureAfterChange": "     public boolean hasEdge(int v1Number, int v2Number)", "diff": ["-    public boolean hasEdge(int v1Number, int v2Number) {", "+    public boolean hasEdge(int v1Number, int v2Number)", "+    {", "-        if (cacheEdges)", "+        if (cacheEdges) {", "+        }", "-        if (!cacheEdges || containsEdge == null) {", "+        if (!cacheEdges || (containsEdge == null)) {", "-        ", "-        if (cacheEdges && adjMatrix[v1Number][v2Number] == null)", "+", "+        if (cacheEdges && (adjMatrix[v1Number][v2Number] == null)) {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91f8d94890097ffccfb1e7a0005e105", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "jgrapht-core/src/main/java/org/jgrapht/alg/isomorphism/GraphOrdering.java", "commitBeforeChange": "75da15a2ad53807aa34166dd4a934ee5a3114489", "commitAfterChange": "b6bf6e6f6f1e074aef6e900590753e33d9eeabab", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public boolean hasEdge(int v1Number, int v2Number)", "signatureAfterChange": "     public boolean hasEdge(int v1Number, int v2Number)", "diff": ["-        V v1 = getVertex(v1Number),", "-          v2 = getVertex(v2Number);", "+        V v1, v2;", "+        Boolean containsEdge = null;", "-        return graph.containsEdge(v1, v2);", "+        if (cacheEdges)", "+            containsEdge = adjMatrix[v1Number][v2Number];", "+", "+        if (!cacheEdges || containsEdge == null) {", "+            v1 = getVertex(v1Number);", "+            v2 = getVertex(v2Number);", "+            containsEdge = graph.containsEdge(v1, v2);", "+        }", "+        ", "+        if (cacheEdges && adjMatrix[v1Number][v2Number] == null)", "+            adjMatrix[v1Number][v2Number] = containsEdge;", "+", "+        return containsEdge;"]}]}
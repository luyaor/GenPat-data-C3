{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3145438c2a51c5ec1168f2afb5f42f6e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307648443fdb3dd9c58d330a9053cc3b", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/KShortestPathsIterator.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void addFirstPath(V vertex, E edge)", "signatureAfterChange": "     private boolean tryToAddFirstPaths(V vertex, E edge)", "diff": ["-     */", "-    private void addFirstPath(V vertex, E edge)", "-    {", "-        // the vertex has not been reached yet", "-        RankingPathElementList<V, E> data = createSeenData(vertex, edge);", "-        this.seenDataContainer.put(vertex, data);", "-    }", "+     */", "+    private boolean tryToAddFirstPaths(V vertex, E edge)", "+    {", "+        // the vertex has not been reached yet", "+        RankingPathElementList<V, E> data = createSeenData(vertex, edge);", "+", "+        if (!data.isEmpty()) {", "+            this.seenDataContainer.put(vertex, data);", "+            return true;", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5bf773b7656fcba748c2113d231e3e", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/AbstractPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected AbstractPathElementList(AbstractPathElementList<V, E, T> original)", "signatureAfterChange": "     protected AbstractPathElementList(Graph<V, E> graph, int maxSize, V vertex)", "diff": ["-    protected AbstractPathElementList(AbstractPathElementList<V, E, T> original)", "-        this.graph = original.graph;", "-        this.maxSize = original.maxSize;", "-        this.pathElements.addAll(original.pathElements);", "-        this.vertex = original.vertex;", "+     */", "+    protected AbstractPathElementList(Graph<V, E> graph, int maxSize, V vertex)", "+    {", "+        if (maxSize <= 0) {", "+            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "+        }", "+", "+        this.graph = graph;", "+        this.maxSize = maxSize;", "+        this.vertex = vertex;"]}]}
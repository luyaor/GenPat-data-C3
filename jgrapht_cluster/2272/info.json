{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ed5fc9d15cf390aa953a4877536e7bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e25a5653ebc60be8b918112ac6ca68", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/graph/SimpleDirectedGraphTest.java", "commitBeforeChange": "02c47e01c2a9da5578ae3f468177544b61a9d129", "commitAfterChange": "5671952a0fe9e747d7dd16b262d98190a1e0ae51", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void testIncomingEdgesOf()", "signatureAfterChange": "     public void testIncomingOutgoingEdgesOf()", "diff": ["-    public void testIncomingEdgesOf()", "+    public void testIncomingOutgoingEdgesOf()", "-        init(); // TODO Implement incomingEdgesOf().", "+        init();", "+", "+        Set<DirectedEdge<String>> e1to2 = m_g2.outgoingEdgesOf(m_v1);", "+        Set<DirectedEdge<String>> e2from1 = m_g2.incomingEdgesOf(m_v2);", "+        assertEquals(e1to2, e2from1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9514a5b7c99146d53e864e51f2627203", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "testsrc/org/jgrapht/alg/KShortestPathCostTest.java", "commitBeforeChange": "af61e5d97b8783c377d8616e4786a4542c35b8a3", "commitAfterChange": "f9d1a7195d2b619df2846dc654b2682aee4bacc5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testPicture1Graph()", "signatureAfterChange": "      public void testPicture1Graph()", "diff": ["-        assertEquals(2, pathFinder.getPathElements(\"v5\").size());", "+        assertEquals(2, pathFinder.getPaths(\"v5\").size());", "-        List pathElements = pathFinder.getPathElements(\"v5\");", "-        RankingPathElement pathElement =", "-            (RankingPathElement) pathElements.get(0);", "+        List pathElements = pathFinder.getPaths(\"v5\");", "+        GraphPath pathElement =", "+            (GraphPath) pathElements.get(0);", "-            pathElement.createEdgeListPath());", "+            pathElement.getEdgeList());", "-        pathElement = (RankingPathElement) pathElements.get(1);", "+        List vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object [] {", "+                    \"vS\",", "+                    \"v1\",", "+                    \"v5\"", "+                }),", "+            vertices);", "+", "+        pathElement = (GraphPath) pathElements.get(1);", "-            pathElement.createEdgeListPath());", "+            pathElement.getEdgeList());", "-        pathElements = pathFinder.getPathElements(\"v7\");", "-        pathElement = (RankingPathElement) pathElements.get(0);", "+        vertices = Graphs.getPathVertexList(pathElement);", "+        assertEquals(", "+            Arrays.asList(", "+                new Object [] {", "+                    \"vS\",", "+                    \"v2\",", "+                    \"v5\"", "+                }),", "+            vertices);", "+", "+        pathElements = pathFinder.getPaths(\"v7\");", "+        pathElement = (GraphPath) pathElements.get(0);", "-            pathElement = (RankingPathElement) pathElements.get(i);", "+            pathElement = (GraphPath) pathElements.get(i);"]}]}
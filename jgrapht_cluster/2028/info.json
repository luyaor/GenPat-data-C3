{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f425e8ee88a268d57f17808c4751a207", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b31130e3082813c54f8aba0cbac25c8", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void resetVertexData(  )", "signatureAfterChange": "     private void resetVertexData(  )", "diff": ["-        Iterator iter = m_vertexToVertexData.values(  ).iterator(  );", "+        Iterator<VertexData> iter = m_vertexToVertexData.values(  ).iterator(  );", "-            VertexData data = (VertexData) iter.next(  );", "+            VertexData data = iter.next(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d3e8b37969d47ee2136f426c26ff94", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/isomorphism/AbstractExhaustiveIsomorphismInspector.java", "commitBeforeChange": "857bf50cc4b146a4020c6dc6b730687dfcd7de35", "commitAfterChange": "3358959abc414f2281c71486c6c1a90935b1e909", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation resultRelation,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "signatureAfterChange": "     protected boolean areAllEdgesEquivalent(         IsomorphismRelation<V,E> resultRelation,         EquivalenceComparator<? super E,? super Graph<V,E>> edgeComparator)", "diff": ["-        IsomorphismRelation resultRelation,", "+        IsomorphismRelation<V,E> resultRelation,", "-                    // XXX hb 060128: Waiting for GraphMapping to go generic", "-                    (E) resultRelation.getCorrespondence(currEdge, true);", "+                    resultRelation.getEdgeCorrespondence(currEdge, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489167ad86692c9e618c0284b83010df", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/alg/StrongConnectivityInspector.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public List stronglyConnectedSets(  )", "signatureAfterChange": "     public List<Set<V>> stronglyConnectedSets(  )", "diff": ["-    public List stronglyConnectedSets(  ) {", "+    public List<Set<V>> stronglyConnectedSets(  ) {", "-            Iterator iter = m_vertexToVertexData.values(  ).iterator(  );", "+            Iterator<VertexData> iter = m_vertexToVertexData.values(  ).iterator(  );", "-                VertexData data = (VertexData) iter.next(  );", "+                VertexData data = iter.next(  );", "-                VertexData data = (VertexData) iter.next(  );", "+                VertexData data = iter.next(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e19667cf1efdb4eb4426fea4543c79", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/AbstractGraphIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void fireEdgeTraversed( EdgeTraversalEvent e )", "signatureAfterChange": "     protected void fireEdgeTraversed( EdgeTraversalEvent<V, E> e )", "diff": ["-    protected void fireEdgeTraversed( EdgeTraversalEvent e ) {", "+    protected void fireEdgeTraversed( EdgeTraversalEvent<V, E> e ) {", "-                (TraversalListener) m_traversalListeners.get( i );", "+                m_traversalListeners.get( i );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "979e8b4f1a576e5316f962fd95533aa4", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/util/FibonacciHeap.java", "commitBeforeChange": "dd14e683f649f6134a6a191da9a4899af88c4041", "commitAfterChange": "b4805f5d86b128879dfab0c1dd754e481a6373b2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-        Stack stack = new Stack();", "+        Stack<Node> stack = new Stack<Node>();", "-            Node curr = (Node) stack.pop();", "+            Node curr = stack.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a923153a6da8430f5bfb459ab7f6dfd", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/graph/AsUndirectedGraph.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public String toString(  )", "signatureAfterChange": "     public String toString(  )", "diff": ["-        Iterator   iter = edgeSet(  ).iterator(  );", "+        Iterator<E>   iter = edgeSet(  ).iterator(  );", "-            Edge edge = (Edge) iter.next(  );", "+            Edge edge = iter.next(  );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf1bab2906eb4a706a5e58c89a7423f3", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/_3pq/jgrapht/traverse/AbstractGraphIterator.java", "commitBeforeChange": "317af19fd167b7e8bbccedf9402266659bbcd63e", "commitAfterChange": "1358e76f87034e34b349840486337c41eda4fa54", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected void fireVertexTraversed( VertexTraversalEvent e )", "signatureAfterChange": "     protected void fireVertexTraversed( VertexTraversalEvent<V> e )", "diff": ["-    protected void fireVertexTraversed( VertexTraversalEvent e ) {", "+    protected void fireVertexTraversed( VertexTraversalEvent<V> e ) {", "-                (TraversalListener) m_traversalListeners.get( i );", "+                m_traversalListeners.get( i );"]}]}
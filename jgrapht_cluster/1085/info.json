{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23899001506c04f5d7773cebec1ac7c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66ed31445b07f4b7b597fa7a3b33b541", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/AbstractPathElementList.java", "commitBeforeChange": "94e0b9cdbd464a6b60ddbb8cd6d473a32e102eaf", "commitAfterChange": "90d794caa7b37ed092890eb859473902af3157bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected AbstractPathElementList(         Graph<V, E> graph,         int maxSize,         T pathElement)", "signatureAfterChange": "     protected AbstractPathElementList(         Graph<V, E> graph,         int maxSize,         T pathElement)", "diff": ["-     */", "-    protected AbstractPathElementList(", "-        Graph<V, E> graph,", "-        int maxSize,", "-        T pathElement)", "-    {", "-        if (maxSize <= 0) {", "-            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "-        }", "-        if (pathElement == null) {", "-            throw new NullPointerException(\"pathElement is null\");", "-        }", "-", "-        this.graph = graph;", "-        this.maxSize = maxSize;", "-        this.vertex = pathElement.getVertex();", "-", "-        this.pathElements.add(pathElement);", "-    }", "+    protected AbstractPathElementList(", "+        Graph<V, E> graph,", "+        int maxSize,", "+        T pathElement)", "+        if (maxSize <= 0) {", "+            throw new IllegalArgumentException(\"maxSize is negative or 0\");", "+        }", "+        if (pathElement == null) {", "+            throw new NullPointerException(\"pathElement is null\");", "+        }", "+        if (pathElement.getPrevEdge() != null) {", "+            throw new IllegalArgumentException(\"path must be empty\");", "+        }", "+", "+        this.graph = graph;", "+        this.maxSize = maxSize;", "+        this.vertex = pathElement.getVertex();", "+", "+        this.pathElements.add(pathElement);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed75eff5c93c5d70ebed62b9c0d1767d", "repository": "https://github.com/jgrapht/jgrapht", "fileName": "src/org/jgrapht/alg/DijkstraShortestPath.java", "commitBeforeChange": "814806a526ac5cd0ec6456873087c2436693094e", "commitAfterChange": "ee669eeadb218d4615d2eaa8082ec262a58b20ac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public DijkstraShortestPath(         Graph<V, E> graph,         V startVertex,         V endVertex,         double radius)", "signatureAfterChange": "     public DijkstraShortestPath(         Graph<V, E> graph,         V startVertex,         V endVertex,         double radius)", "diff": ["+        if (!graph.containsVertex(endVertex)) {", "+            throw new IllegalArgumentException(", "+                \"graph must contain the end vertex\");", "+        }", "+        "]}]}
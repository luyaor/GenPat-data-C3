{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8fb4d68986726b09f0238ed09779373", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b2ea2820909ed9acc13b068d7a200bc", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic LineData addLine(int lineNumber, String methodName, \t\t\tString methodDescriptor)", "signatureAfterChange": "  \tpublic LineData addLine(int lineNumber, String methodName, \t\t\tString methodDescriptor)", "diff": ["-\t\tLineData lineData = getLineData(lineNumber);", "-\t\tif (lineData == null)", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tlineData = new LineData(lineNumber);", "-\t\t\t// Each key is a line number in this class, stored as an Integer object.", "-\t\t\t// Each value is information about the line, stored as a LineData object.", "-\t\t\tchildren.put(new Integer(lineNumber), lineData);", "+\t\t\tLineData lineData = getLineData(lineNumber);", "+\t\t\tif (lineData == null)", "+\t\t\t{", "+\t\t\t\tlineData = new LineData(lineNumber);", "+\t\t\t\t// Each key is a line number in this class, stored as an Integer object.", "+\t\t\t\t// Each value is information about the line, stored as a LineData object.", "+\t\t\t\tchildren.put(new Integer(lineNumber), lineData);", "+\t\t\t}", "+\t\t\tlineData.setMethodNameAndDescriptor(methodName, methodDescriptor);", "+\t      ", "+\t\t\t// methodName and methodDescriptor can be null when cobertura.ser with ", "+\t\t\t// no line information was loaded (or was not loaded at all).", "+\t\t\tif( methodName!=null && methodDescriptor!=null)", "+\t\t\t\tmethodNamesAndDescriptors.add(methodName + methodDescriptor);", "+\t\t\treturn lineData;", "-\t\tlineData.setMethodNameAndDescriptor(methodName, methodDescriptor);", "-      ", "-\t\t// methodName and methodDescriptor can be null when cobertura.ser with ", "-\t\t// no line information was loaded (or was not loaded at all).", "-\t\tif( methodName!=null && methodDescriptor!=null)", "-\t\t\tmethodNamesAndDescriptors.add(methodName + methodDescriptor);", "-\t\treturn lineData;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288f19927b9d51288b4fe3660655e208", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "a4dc86bf72c357e76a4db9814a702ca821cc33bd", "commitAfterChange": "1f5d4831b5ec0e2a8618e85b0d6a2ecd4eb5c520", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate static String generateTableHeaderForClasses()", "signatureAfterChange": "  \tprivate static String generateTableHeader(String title, \t\t\tboolean showColumnForNumberOfClasses)", "diff": ["+\tprivate static String generateTableHeader(String title,", "+\t\t\tboolean showColumnForNumberOfClasses)", "+\t{", "+\t\tStringBuffer ret = new StringBuffer();", "+\t\tret.append(\"<thead>\");", "+\t\tret.append(\"<tr>\");", "+\t\tret.append(\"  <td class=\\\"heading\\\">\" + title + \"</td>\");", "+\t\tif (showColumnForNumberOfClasses)", "+\t\t{", "+\t\t\tret.append(\"  <td class=\\\"heading\\\"># Classes</td>\");", "+\t\t}", "+\t\tret.append(\"  <td class=\\\"heading\\\" width=\\\"20%\\\">\"", "+\t\t\t\t+ generateHelpURL(\"Line Coverage\",", "+\t\t\t\t\t\t\"The percent of lines executed by this test run.\")", "+\t\t\t\t+ \"</td>\");", "+\t\tret.append(\"  <td class=\\\"heading\\\" width=\\\"20%\\\">\"", "+\t\t\t\t+ generateHelpURL(\"Branch Coverage\",", "+\t\t\t\t\t\t\"The percent of branches executed by this test run.\")", "+\t\t\t\t+ \"</td>\");", "+\t\tret", "+\t\t\t\t.append(\"  <td class=\\\"heading\\\" width=\\\"10%\\\">\"", "+\t\t\t\t\t\t+ generateHelpURL(", "+\t\t\t\t\t\t\t\t\"Complexity\",", "+\t\t\t\t\t\t\t\t\"Average McCabe's cyclomatic code complexity for all methods.  This is basically a count of the number of different code paths in a method (incremented by 1 for each if statement, while loop, etc.)\")", "+\t\t\t\t\t\t+ \"</td>\");", "+\t\tret.append(\"</tr>\");", "+\t\tret.append(\"</thead>\");", "+\t\treturn ret.toString();", "+\t}", "-", "-\tprivate static String generateTableHeaderForClasses()", "-\t{", "-\t\tStringBuffer ret = new StringBuffer();", "-\t\tret.append(\"<thead>\");", "-\t\tret.append(\"<tr>\");", "-\t\tret.append(\"  <td class=\\\"heading\\\">Classes in this Package</td>\");", "-\t\tret.append(generateCommonTableColumns());", "-\t\tret.append(\"</tr>\");", "-\t\tret.append(\"</thead>\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a9b45c4e4bb7ebd7197edecf1c71474", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27ddc8df77418b9471b71e06449baee", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "4b9e07aec6aa7a210484d3d9f12082a7dee4a0ae", "commitAfterChange": "8d9e5d2c0ac5dd3ae1467df0071d4e5b6c845132", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "diff": ["-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "-\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes);", "-\t\t\t\t\tcr.accept(cv, false);", "-", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\ttry", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t\tmodified = true;", "-\t\t\t\t\t\toutputEntry.setTime(System.currentTimeMillis());", "+\t\t\t\t\t\t// Instrument class", "+\t\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "+\t\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "+\t\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes);", "+\t\t\t\t\t\tcr.accept(cv, false);", "+\t", "+\t\t\t\t\t\t// If class was instrumented, get bytes that define the", "+\t\t\t\t\t\t// class", "+\t\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "+\t\t\t\t\t\t\t\t\t+ entry.getName());", "+\t\t\t\t\t\t\tentryBytes = cw.toByteArray();", "+\t\t\t\t\t\t\tmodified = true;", "+\t\t\t\t\t\t\toutputEntry.setTime(System.currentTimeMillis());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (Throwable t)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tif (entry.getName().endsWith(\"_Stub.class\"))", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t//no big deal - it is probably an RMI stub, and they don't need to be instrumented", "+\t\t\t\t\t\t\tlogger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tlogger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);", "+\t\t\t\t\t\t}", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry.getName(), e);", "+\t\t\t}", "+\t\t\tcatch (Throwable t)", "+\t\t\t{", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry.getName(), t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcaf9a846845b8efed5405355691370c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "commitAfterChange": "09421016268852f85f74b9774657dc46969a87d5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate String generateTableRowForPackage(PackageData packageData)", "signatureAfterChange": "  \tprivate String generateTableRowForPackage(PackageData packageData)", "diff": ["-\t\tdouble ccn = 0;//Util.getCCN(finder.findFile(packageData.getSourceFileName()), false);", "+        File[] files = finder.findDirectory(packageData.getSourceFileName());", "+        if (files.length == 0) {", "+            LOGGER.warn(\"No directories found for package: \" + packageData.getSourceFileName());", "+        }", "+", "+        double ccnSum = 0; ", "+        for (int i = 0; i < files.length; i++) {", "+            ccnSum += Util.getCCN(files[i], false);", "+        }", "+        ", "+        double ccn = ccnSum / (double) files.length;"]}]}
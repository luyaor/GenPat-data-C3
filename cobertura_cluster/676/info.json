{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caae68377cca36e33f7d1e2a5bdf5c4a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a7d8ee8da0b0e1632416fcdc6d68219", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/pass2/BuildClassMapClassVisitor.java", "commitBeforeChange": "35acea63ae80bc6a1e7453e64f26fa350a167870", "commitAfterChange": "686ffbecc7fe730d4e67767186de755b501fcc7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic AnnotationVisitor visitAnnotation(String name, boolean arg1)", "signatureAfterChange": "  \t@Override \tpublic AnnotationVisitor visitAnnotation(String name, boolean arg1)", "diff": ["+\t\t} else if (ignoredClassAnnotations != null) {", "+\t\t\tString className = Type.getObjectType(name).getClassName();", "+\t\t\t// Class name contains artifacts anyway so trimming them out before", "+\t\t\t// matching", "+\t\t\tString normalizedClassName = className.replaceAll(\"[L;]\", \"\");", "+\t\t\tif (ignoredClassAnnotations.contains(normalizedClassName)) {", "+\t\t\t\ttoInstrument = false;", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d5f7d030dffe4d986b7fc443993872", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalTest.java", "commitBeforeChange": "cfffd11ff6faa01073497d57b9d1e8f0b932b26a", "commitAfterChange": "6f627408c1a8fdb3735adfb9a97ff76713bea376", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static void verifyXml(String testName) throws Exception", "signatureAfterChange": "  \tprivate static void verifyXml(String testName) throws Exception", "diff": ["+\t\t\tboolean verify = true;", "+\t\t\telse if (className.equals(\"test.first.RemoteInterface\") ", "+\t\t\t\t\t|| (className.equals(\"test.first.RemoteListener\"))", "+\t\t\t\t\t|| (className.equals(\"test.first.RemoteListener_Stub\")))", "+\t\t\t{", "+\t\t\t\t//just ignore - it is ok", "+\t\t\t\tverify = false;", "+\t\t\t}", "-\t\t\tverifyClass(testName, classElement);", "+\t\t\tif (verify)", "+\t\t\t{", "+\t\t\t\tverifyClass(testName, classElement);", "+\t\t\t}"]}]}
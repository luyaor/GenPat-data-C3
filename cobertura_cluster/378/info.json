{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ee8a212e8a463b4407f02935104f6a1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "299aa85308e2283cfc616a8f7a4c1544", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "7a6cf9ee7c01328fd060bf78a56186190300c13b", "commitAfterChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void addInstrumentation(String filename)", "signatureAfterChange": "      private void addInstrumentation(String baseDir, String filename)", "diff": ["-    private void addInstrumentation(String filename)", "+    private void addInstrumentation(String baseDir, String filename)", "-        logger.debug(\"filename: \" + filename);", "-", "-        File file;", "-        if (baseDir == null)", "-            file = new File(filename);", "-        else", "-            file = new File(baseDir, filename);", "-", "-        addInstrumentation(file);", "+    \tlogger.debug(\"filename: \" + filename);", "+    \tFile file = new File( baseDir, filename);", "+    \t", "+    \tif( isArchive(file)) {", "+    \t\taddInstrumentationToArchive(file);", "+    \t} else {", "+    \t\taddInstrumentation(file);", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c6555b1cb2f5dc7bd968664e9808be8", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "73cd6cee6c47bb171b3c10fb87c9d986322605f8", "commitAfterChange": "ea44d50de680cfb1f234670ee0209ccd6aa03416", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\t\t\t\taddRegex(ignoreRegexes, args[++i]);", "+\t\t\t\tRegexUtil.addRegex(ignoreRegexes, args[++i]);", "-\t\t\t\taddRegex(includeClassesRegexes, args[++i]);", "+\t\t\t\tclassPattern.addIncludeClassesRegex(args[++i]);", "-\t\t\t\taddRegex(excludeClassesRegexes, args[++i]);", "+\t\t\t\tclassPattern.addExcludeClassesRegex(args[++i]);", "-\t}"]}]}
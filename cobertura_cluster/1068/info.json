{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae0f49adc5b3a903af41b0a446d802d4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39dfa57b6dd05c81fc537b4a7c3f0c0e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/InjectCodeTouchPointListener.java", "commitBeforeChange": "16e57fa03454d1d8ab895fe3215c1c1c7570f750", "commitAfterChange": "9402254283588bbf5a0b3d6c1d0433c021780e7a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void afterLabel(int eventId, Label label, int currentLine, MethodVisitor mv)", "signatureAfterChange": " \tpublic void afterLabel(int eventId, Label label, int currentLine, MethodVisitor mv)", "diff": ["-\t\t\tcodeProvider.generateCodeThatIncrementsCoberturaCounterFromInternalVariable(mv,lastJumpIdVariableIndex,classMap.getClassName());", "-\t\t\tcodeProvider.generateCodeThatZeroJumpCounterIdVariable(mv,lastJumpIdVariableIndex);\t", "+\t\t\tcodeProvider.generateCodeThatIncrementsCoberturaCounterFromInternalVariable(mv,lastJumpIdVariableIndex,classMap.getClassName());\t", "+\t\t", "+\t\tif (classMap.isJumpDestinationLabel(eventId)){\t\t", "+\t\t\tcodeProvider.generateCodeThatZeroJumpCounterIdVariable(mv,lastJumpIdVariableIndex);\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "720dcaae5b1304ed07d7d3d3cd80a25a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "df5fab3a12d4b334c487baeea0293cfd6bebb95f", "commitAfterChange": "3b0d0c91e509d1f4b5e847b07ff23eea527dcd0c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (dataFile.isFile())", "+\t\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f6942ea5c60794eca17497bc630e1a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coverage/Main.java", "commitBeforeChange": "28da59e676555d6a3fd2483291c3805a95c4872c", "commitAfterChange": "bc7846d1c8afd6f93bc4d943eb1815d2b50a927c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-\t\t\tFile outputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t+ \".class\");", "-\t\t\toutputFile.getParentFile().mkdirs();", "-\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\toutputStream.write(instrumentedClass);", "+\t\t\tif (cv.isInstrumented())", "+\t\t\t{", "+\t\t\t\tFile outputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t\t+ \".class\");", "+\t\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\t\toutputStream.write(instrumentedClass);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8399a22133e51a74c3909f8c77caeb24", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/CoberturaInstrumenter.java", "commitBeforeChange": "4d909f48e2f07ffe6cb92fd53174e50465cdfae8", "commitAfterChange": "23923f3f6dbe900a5325855399c600eb696bd86f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) throws IOException", "signatureAfterChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) throws IOException", "diff": ["-\t\tlogger.debug(\"Migrating classmap in projectData to store in *.ser file: \"+cv.getClassMap().getClassName());", "-\t\tcv.getClassMap().applyOnProjectData(projectData,cv.shouldBeInstrumented());", "+\t\tlogger.debug(\"Migrating classmap in projectData to store in *.ser file: \" + cv.getClassMap().getClassName());", "+\t\t", "+\t\tif (cv.shouldBeInstrumented()) { //Not instrumented classes should be not included into the report", "+\t\t cv.getClassMap().applyOnProjectData(projectData,cv.shouldBeInstrumented());", "+\t\t}"]}]}
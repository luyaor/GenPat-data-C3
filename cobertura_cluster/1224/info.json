{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f5dd1bf796e9ef75d1017a077b8bf3d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccdc251e7ed18a2aceffb372990e1299", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/AbstractCodeProvider.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \tprivate void classMapContent(ClassVisitor cv, int nr, List<TouchPointDescriptor> touchPointDescriptors)", "signatureAfterChange": " \t\t \tprivate void classMapContent(ClassVisitor cv, int nr, List<TouchPointDescriptor> touchPointDescriptors)", "diff": ["-\t\t\t}else if (tpd instanceof SwitchTouchPointDescriptor){", "-\t\t\t\tSwitchTouchPointDescriptor stpd=(SwitchTouchPointDescriptor)tpd;\t\t\t", "+\t\t\t}else if (tpd instanceof SwitchTouchPointDescriptor) {", "+\t\t\t\tSwitchTouchPointDescriptor stpd=(SwitchTouchPointDescriptor)tpd;", "+\t\t\t\tfinal String enum_sign = ((SwitchTouchPointDescriptor) tpd).getEnumType();", "+\t\t\t\tif (enum_sign == null) {", "+\t\t\t\t\tmv.visitLdcInsn(Integer.MAX_VALUE);", "+\t\t\t\t} else {", "+\t\t\t\t\tmv.visitMethodInsn(Opcodes.INVOKESTATIC, enum_sign, \"values\", \"()[L\" + enum_sign + \";\");", "+\t\t\t\t\tmv.visitInsn(Opcodes.ARRAYLENGTH);", "+\t\t\t\t}\t\t\t\t\t\t\t\t", "-\t\t\t\tmv.visitMethodInsn(Opcodes.INVOKEINTERFACE, CLASSMAP_LISTENER_INTERNALNAME,\"putSwitchTouchPoint\",\"(I[I)V\");\t\t\t\t", "+\t\t\t\tmv.visitMethodInsn(Opcodes.INVOKEINTERFACE, CLASSMAP_LISTENER_INTERNALNAME,\"putSwitchTouchPoint\",\"(II[I)V\");\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12278cbc03a9d79243e26bf1f7d9b1e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "cbc25c039577cb031ebc2642ca908fb2416646b0", "commitAfterChange": "6e5bdd4a260b41be4efbef0899cf1900c2626b0c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate void dumpLine(LineData lineData)", "signatureAfterChange": "  \tprivate void dumpLine(LineData lineData)", "diff": ["-\t\tboolean isBranch = lineData.hasBranch();", "+\t\tboolean hasBranch = lineData.hasBranch();", "+\t\tString conditionCoverage = lineData.getConditionCoverage();", "-\t\tprintln(\"<line number=\\\"\" + lineNumber + \"\\\" hits=\\\"\" + hitCount", "-\t\t\t\t+ \"\\\" branch=\\\"\" + isBranch + \"\\\"/>\");", "+\t\tString lineInfo = \"<line number=\\\"\" + lineNumber + \"\\\" hits=\\\"\" + hitCount", "+\t\t\t\t+ \"\\\" branch=\\\"\" + hasBranch + \"\\\"\";", "+\t\tif (hasBranch)", "+\t\t{", "+\t\t\tprintln(lineInfo + \" condition-coverage=\\\"\" + conditionCoverage + \"\\\">\");", "+\t\t\tdumpConditions(lineData);", "+\t\t\tprintln(\"</line>\");", "+\t\t} else", "+\t\t{", "+\t\t\tprintln(lineInfo + \"/>\");", "+\t\t}", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09b87aa704961aa176c826513a4c554c", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744d891c7b466eda9873a8f0772bba79", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/ClassDataTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testRemoveLine()", "signatureAfterChange": "  \tpublic void testRemoveLine()", "diff": ["+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tc.markLineAsBranch(2);", "-\t\tc.markLineAsBranch(3);", "-\t\tc.markLineAsBranch(4);", "-\t\tassertEquals(3, c.getNumberOfValidBranches());", "+\t\tc.addLineJump(2, 0);", "+\t\tc.addLineSwitch(3, 0, 1, 2);", "+\t\tc.addLineJump(3, 0);", "+\t\tc.addLineJump(4, 0);", "+\t\tassertEquals(9, c.getNumberOfValidBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tassertEquals(2, c.getNumberOfValidBranches());", "+\t\tassertEquals(4, c.getNumberOfValidBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9569ec0f20eeb825410423724139fdf3", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/ClassDataTest.java", "commitBeforeChange": "390c1e710f4f0726f16380595fad91f1ff044c3b", "commitAfterChange": "ec1fd1d424f2f4413436786d9da0ddb5f02e1d9d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testLineCoverageRate()", "signatureAfterChange": "  \tpublic void testLineCoverage()", "diff": ["-\tpublic void testLineCoverageRate()", "+\tpublic void testLineCoverage()", "+\t\tassertEquals(0, a.getNumberOfCoveredLines());", "+\t\tassertEquals(0, a.getNumberOfValidLines());", "+\t\tassertEquals(2, b.getNumberOfCoveredLines());", "+\t\tassertEquals(5, b.getNumberOfValidLines());", "+\t\tassertEquals(0, c.getNumberOfCoveredLines());", "+\t\tassertEquals(5, c.getNumberOfValidLines());", "-\t\tassertEquals(0.5d, b.getLineCoverageRate(), 0d);", "+\t\tassertEquals(0.4d, b.getLineCoverageRate(), 0d);", "-\t\tassertEquals(0.5d, b.getLineCoverageRate(\"test(I)B\"), 0d);", "+\t\tassertEquals(0.4d, b.getLineCoverageRate(\"test(I)B\"), 0d);", "+", "+\t\tassertEquals(1d, a.getLineCoverageRate(\"notReal(I)B\"), 0d);", "+\t\tassertEquals(1d, b.getLineCoverageRate(\"notReal(I)B\"), 0d);", "+\t\tassertEquals(1d, c.getLineCoverageRate(\"notReal(I)B\"), 0d);", "+\t}"]}]}
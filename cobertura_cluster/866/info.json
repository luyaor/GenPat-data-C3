{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78c3c8c1c12be699312081bbcfc3fdeb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e531355c13fd0234e6b7ef0b8baceab", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "8fa89e11a16472d1487034417d5730a6de92e300", "commitAfterChange": "6a303122a10f7fb224550410433e3c73cc07f939", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "signatureAfterChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "diff": ["+\tpublic Main(String[] args) throws MalformedPatternException {", "+\t\tHeader.print(System.out);", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--branch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setClassBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--datafile\")) {", "+\t\t\t\tbuilder.setDataFile(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--line\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setClassLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--regex\")) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(args[++i], \":\");", "+\t\t\t\tbuilder.addMinimumCoverageRates(tokenizer.nextToken(), Integer", "+\t\t\t\t\t\t.valueOf(tokenizer.nextToken()), Integer", "+\t\t\t\t\t\t.valueOf(tokenizer.nextToken()));", "+\t\t\t} else if (args[i].equals(\"--packagebranch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setPackageBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--packageline\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setPackageLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--totalbranch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setTotalBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--totalline\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setTotalLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t}", "+\t\t}", "+\t\tArguments arguments = builder.build();", "+\t\tCoverageThresholdsReport coverageThresholdsReport = (CoverageThresholdsReport) new Cobertura(", "+\t\t\t\targuments).checkThresholds().report().getByName(", "+\t\t\t\tReportName.THRESHOLDS_REPORT);", "+\t\tList<CoverageResultEntry> coverageResultEntries = coverageThresholdsReport", "+\t\t\t\t.getCoverageResultEntries();", "+\t\tint exitStatus = 0;", "+\t\tfor (CoverageResultEntry entry : coverageResultEntries) {", "+\t\t\tif (entry.isBelowExpectedCoverage()) {", "+\t\t\t\tswitch (entry.getCoverageLevel()) {", "+\t\t\t\t\tcase CLASS :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 2, 4);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PACKAGE :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 32, 64);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PROJECT :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 8, 16);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tSystem.exit(exitStatus);", "+\t}", "-", "-\tpublic Main(String[] args) throws MalformedPatternException {", "-\t\tint exitStatus = 0;", "-", "-\t\tHeader.print(System.out);", "-", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tdouble branchCoverageRate = -1.0;", "-\t\tdouble lineCoverageRate = -1.0;", "-\t\tdouble packageBranchCoverageRate = -1.0;", "-\t\tdouble packageLineCoverageRate = -1.0;", "-\t\tdouble totalBranchCoverageRate = -1.0;", "-\t\tdouble totalLineCoverageRate = -1.0;", "-", "-\t\tfor (int i = 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"--branch\")) {", "-\t\t\t\tbranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--datafile\")) {", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--line\")) {", "-\t\t\t\tlineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--regex\")) {", "-\t\t\t\tsetMinimumCoverageRate(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--packagebranch\")) {", "-\t\t\t\tpackageBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--packageline\")) {", "-\t\t\t\tpackageLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--totalbranch\")) {", "-\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--totalline\")) {", "-\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t}", "-\t\t}", "-", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null) {", "-\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t// If they didn't specify any thresholds, then use some defaults", "-\t\tif ((branchCoverageRate == -1.0) && (lineCoverageRate == -1.0)", "-\t\t\t\t&& (packageLineCoverageRate == -1.0)", "-\t\t\t\t&& (packageBranchCoverageRate == -1.0)", "-\t\t\t\t&& (totalLineCoverageRate == -1.0)", "-\t\t\t\t&& (totalBranchCoverageRate == -1.0)", "-\t\t\t\t&& (this.minimumCoverageRates.size() == 0)) {", "-\t\t\tbranchCoverageRate = 0.5;", "-\t\t\tlineCoverageRate = 0.5;", "-\t\t\tpackageBranchCoverageRate = 0.5;", "-\t\t\tpackageLineCoverageRate = 0.5;", "-\t\t\ttotalBranchCoverageRate = 0.5;", "-\t\t\ttotalLineCoverageRate = 0.5;", "-\t\t}", "-\t\t// If they specified one or more thresholds, default everything else to 0", "-\t\telse {", "-\t\t\tif (branchCoverageRate == -1.0)", "-\t\t\t\tbranchCoverageRate = 0.0;", "-\t\t\tif (lineCoverageRate == -1.0)", "-\t\t\t\tlineCoverageRate = 0.0;", "-\t\t\tif (packageLineCoverageRate == -1.0)", "-\t\t\t\tpackageLineCoverageRate = 0.0;", "-\t\t\tif (packageBranchCoverageRate == -1.0)", "-\t\t\t\tpackageBranchCoverageRate = 0.0;", "-\t\t\tif (totalLineCoverageRate == -1.0)", "-\t\t\t\ttotalLineCoverageRate = 0.0;", "-\t\t\tif (totalBranchCoverageRate == -1.0)", "-\t\t\t\ttotalBranchCoverageRate = 0.0;", "-\t\t}", "-", "-\t\tthis.minimumCoverageRate = new CoverageRate(lineCoverageRate,", "-\t\t\t\tbranchCoverageRate);", "-", "-\t\tdouble totalLines = 0;", "-\t\tdouble totalLinesCovered = 0;", "-\t\tdouble totalBranches = 0;", "-\t\tdouble totalBranchesCovered = 0;", "-", "-\t\tIterator iter = projectData.getClasses().iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tClassData classData = (ClassData) iter.next();", "-\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(classData", "-\t\t\t\t\t.getName());", "-", "-\t\t\tif (totalBranchCoverageRate > 0.0) {", "-\t\t\t\ttotalBranches += classData.getNumberOfValidBranches();", "-\t\t\t\ttotalBranchesCovered += classData.getNumberOfCoveredBranches();", "-\t\t\t}", "-", "-\t\t\tif (totalLineCoverageRate > 0.0) {", "-\t\t\t\ttotalLines += classData.getNumberOfValidLines();", "-\t\t\t\ttotalLinesCovered += classData.getNumberOfCoveredLines();", "-\t\t\t}", "-", "-\t\t\tPackageCoverage packageCoverage = getPackageCoverage(classData", "-\t\t\t\t\t.getPackageName());", "-\t\t\tif (packageBranchCoverageRate > 0.0) {", "-\t\t\t\tpackageCoverage.addBranchCount(classData", "-\t\t\t\t\t\t.getNumberOfValidBranches());", "-\t\t\t\tpackageCoverage.addBranchCoverage(classData", "-\t\t\t\t\t\t.getNumberOfCoveredBranches());", "-\t\t\t}", "-", "-\t\t\tif (packageLineCoverageRate > 0.0) {", "-\t\t\t\tpackageCoverage.addLineCount(classData.getNumberOfValidLines());", "-\t\t\t\tpackageCoverage.addLineCoverage(classData", "-\t\t\t\t\t\t.getNumberOfCoveredLines());", "-\t\t\t}", "-", "-\t\t\tlogger.debug(\"Class \" + classData.getName()", "-\t\t\t\t\t+ \", line coverage rate: \"", "-\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "-\t\t\t\t\t+ \"%, branch coverage rate: \"", "-\t\t\t\t\t+ percentage(classData.getBranchCoverageRate()) + \"%\");", "-", "-\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\t\t.getBranchCoverageRate()) {", "-\t\t\t\tSystem.err.println(classData.getName()", "-\t\t\t\t\t\t+ \" failed check. Branch coverage rate of \"", "-\t\t\t\t\t\t+ percentage(classData.getBranchCoverageRate())", "-\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t+ percentage(coverageRate.getBranchCoverageRate())", "-\t\t\t\t\t\t+ \"%\");", "-\t\t\t\texitStatus |= 2;", "-\t\t\t}", "-", "-\t\t\tif (classData.getLineCoverageRate() < coverageRate", "-\t\t\t\t\t.getLineCoverageRate()) {", "-\t\t\t\tSystem.err.println(classData.getName()", "-\t\t\t\t\t\t+ \" failed check. Line coverage rate of \"", "-\t\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "-\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t+ percentage(coverageRate.getLineCoverageRate()) + \"%\");", "-\t\t\t\texitStatus |= 4;", "-\t\t\t}", "-\t\t}", "-", "-\t\texitStatus |= checkPackageCoverageLevels(packageBranchCoverageRate,", "-\t\t\t\tpackageLineCoverageRate);", "-", "-\t\t// Check the rates for the overall project", "-\t\tif ((totalBranches > 0)", "-\t\t\t\t&& (totalBranchCoverageRate > (totalBranchesCovered / totalBranches))) {", "-\t\t\tSystem.err", "-\t\t\t\t\t.println(\"Project failed check. \"", "-\t\t\t\t\t\t\t+ \"Total branch coverage rate of \"", "-\t\t\t\t\t\t\t+ percentage(totalBranchesCovered / totalBranches)", "-\t\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t\t+ percentage(totalBranchCoverageRate) + \"%\");", "-\t\t\texitStatus |= 8;", "-\t\t}", "-", "-\t\tif ((totalLines > 0)", "-\t\t\t\t&& (totalLineCoverageRate > (totalLinesCovered / totalLines))) {", "-\t\t\tSystem.err.println(\"Project failed check. \"", "-\t\t\t\t\t+ \"Total line coverage rate of \"", "-\t\t\t\t\t+ percentage(totalLinesCovered / totalLines)", "-\t\t\t\t\t+ \"% is below \" + percentage(totalLineCoverageRate) + \"%\");", "-\t\t\texitStatus |= 16;", "-\t\t}", "-", "-\t\tSystem.exit(exitStatus);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4278ac16d67e90a4d26f34d417c3e93d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "89f4eaca365e898685523b26abb2975d34c5493c", "commitAfterChange": "b5fae504c12a9486e23c38b8e2fb563abfcdacb8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "signatureAfterChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "diff": ["+\t\tint exitStatus = 0;", "+", "-\t\tSystem.out.println(\"Cobertura coverage check\");", "-\t\tLongOpt[] longOpts = new LongOpt[4];", "-\t\tlongOpts[0] = new LongOpt(\"branch\", LongOpt.REQUIRED_ARGUMENT, null,", "+\t\tLongOpt[] longOpts = new LongOpt[6];", "+\t\tlongOpts[0] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT, null,", "+\t\t\t\t'd');", "+\t\tlongOpts[1] = new LongOpt(\"regex\", LongOpt.REQUIRED_ARGUMENT, null, 'r');", "+\t\tlongOpts[2] = new LongOpt(\"branch\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\tlongOpts[2] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'd');", "-\t\tlongOpts[3] = new LongOpt(\"ignore\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'i');", "-\t\tlongOpts[1] = new LongOpt(\"line\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'l');", "+\t\tlongOpts[3] = new LongOpt(\"line\", LongOpt.REQUIRED_ARGUMENT, null, 'l');", "+\t\tlongOpts[4] = new LongOpt(\"totalbranch\", LongOpt.REQUIRED_ARGUMENT,", "+\t\t\t\tnull, 'B');", "+\t\tlongOpts[5] = new LongOpt(\"totalline\", LongOpt.REQUIRED_ARGUMENT, null,", "+\t\t\t\t'L');", "-\t\tGetopt g = new Getopt(getClass().getName(), args, \":b:d:i:l:\",", "+\t\tGetopt g = new Getopt(getClass().getName(), args, \":b:B:d:l:L:r\",", "-\t\tdouble branchCoverageRate = 0.8;", "-\t\tdouble lineCoverageRate = 0.7;", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tdouble branchCoverageRate = 0.0;", "+\t\tdouble lineCoverageRate = 0.0;", "+\t\tdouble totalBranchCoverageRate = 0.0;", "+\t\tdouble totalLineCoverageRate = 0.0;", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tCoverageDataFileHandler.setDefaultDataFile(g.getOptarg());", "+\t\t\t\tcase 'B':", "+\t\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(g", "+\t\t\t\t\t\t\t.getOptarg());", "-\t\t\t\tcase 'i':", "-\t\t\t\t\tsetMinimumCoverageRate(g.getOptarg());", "+\t\t\t\tcase 'd':", "+\t\t\t\t\tdataFile = new File(g.getOptarg());", "+", "+\t\t\t\tcase 'L':", "+\t\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(g", "+\t\t\t\t\t\t\t.getOptarg());", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase 'r':", "+\t\t\t\t\tsetMinimumCoverageRate(g.getOptarg());", "+\t\t\t\t\tbreak;", "+", "-\t\tminimumCoverageRate = new CoverageRate(lineCoverageRate,", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "+", "+\t\tif (projectData == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "+\t\t\t\t\t+ dataFile.getAbsolutePath());", "+\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\t// If they didn't specify any thresholds, then use some defaults", "+\t\tif ((branchCoverageRate == 0) && (lineCoverageRate == 0)", "+\t\t\t\t&& (totalLineCoverageRate == 0)", "+\t\t\t\t&& (totalBranchCoverageRate == 0)", "+\t\t\t\t&& (this.minimumCoverageRates.size() == 0))", "+\t\t{", "+\t\t\tbranchCoverageRate = 0.5;", "+\t\t\tlineCoverageRate = 0.5;", "+\t\t\ttotalBranchCoverageRate = 0.5;", "+\t\t\ttotalLineCoverageRate = 0.5;", "+\t\t}", "+", "+\t\tthis.minimumCoverageRate = new CoverageRate(lineCoverageRate,", "-\t\t// Load coverage data", "-\t\tProjectData projectData = ProjectData.getGlobalProjectData();", "-", "-\t\tif (logger.isInfoEnabled())", "-\t\t{", "-\t\t\tlogger.info(\"Coverage data has \"", "-\t\t\t\t\t+ projectData.getNumberOfClasses() + \" classes\");", "-\t\t}", "+\t\tdouble totalLines = 0;", "+\t\tdouble totalLinesCovered = 0;", "+\t\tdouble totalBranches = 0;", "+\t\tdouble totalBranchesCovered = 0;", "-\t\t\tif (logger.isInfoEnabled())", "+\t\t\tif (totalBranchCoverageRate > 0.0)", "-\t\t\t\tStringBuffer sb = new StringBuffer();", "-\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(\", line: \");", "-\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"% (\");", "-\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"%), branch: \");", "-\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"% (\");", "-\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"%)\");", "-\t\t\t\tlogger.info(sb.toString());", "+\t\t\t\ttotalBranches += classData.getNumberOfValidBranches();", "+\t\t\t\ttotalBranchesCovered += classData.getNumberOfCoveredBranches();", "+\t\t\t}", "+", "+\t\t\tif (totalLineCoverageRate > 0.0)", "+\t\t\t{", "+\t\t\t\ttotalLines += classData.getNumberOfValidLines();", "+\t\t\t\ttotalLinesCovered += classData.getNumberOfCoveredLines();", "+\t\t\t}", "+", "+\t\t\tlogger.debug(\"Class \" + classData.getName()", "+\t\t\t\t\t+ \", line coverage rate: \"", "+\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "+\t\t\t\t\t+ \"%, branch coverage rate: \"", "+\t\t\t\t\t+ percentage(classData.getBranchCoverageRate()) + \"%\");", "+", "+\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "+\t\t\t\t\t.getBranchCoverageRate())", "+\t\t\t{", "+\t\t\t\tSystem.err.println(classData.getName()", "+\t\t\t\t\t\t+ \" failed check. Branch coverage rate of \"", "+\t\t\t\t\t\t+ percentage(classData.getBranchCoverageRate())", "+\t\t\t\t\t\t+ \"% is below \"", "+\t\t\t\t\t\t+ percentage(coverageRate.getBranchCoverageRate())", "+\t\t\t\t\t\t+ \"%\");", "+\t\t\t\texitStatus |= 2;", "-\t\t\t\tStringBuffer sb = new StringBuffer();", "-\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(\" line coverage rate of: \");", "-\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"% (required: \");", "-\t\t\t\tsb.append(percentage(coverageRate.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"%)\");", "-\t\t\t\tSystem.out.println(sb.toString());", "-\t\t\t}", "-", "-\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\t\t.getBranchCoverageRate())", "-\t\t\t{", "-\t\t\t\tStringBuffer sb = new StringBuffer();", "-\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(\" branch coverage rate of: \");", "-\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"% (required: \");", "-\t\t\t\tsb.append(percentage(coverageRate.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"%)\");", "-\t\t\t\tSystem.out.println(sb.toString());", "+\t\t\t\tSystem.err.println(classData.getName()", "+\t\t\t\t\t\t+ \" failed check. Line coverage rate of \"", "+\t\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "+\t\t\t\t\t\t+ \"% is below \"", "+\t\t\t\t\t\t+ percentage(coverageRate.getLineCoverageRate()) + \"%\");", "+\t\t\t\texitStatus |= 4;", "+", "+\t\t// Check the rates for the overal project", "+\t\tif ((totalBranches > 0)", "+\t\t\t\t&& (totalBranchCoverageRate > (totalBranchesCovered / totalBranches)))", "+\t\t{", "+\t\t\tSystem.err", "+\t\t\t\t\t.println(\"Project failed check. \"", "+\t\t\t\t\t\t\t+ \"Total branch coverage rate of \"", "+\t\t\t\t\t\t\t+ percentage(totalBranchesCovered / totalBranches)", "+\t\t\t\t\t\t\t+ \"% is below \"", "+\t\t\t\t\t\t\t+ percentage(totalBranchCoverageRate) + \"%\");", "+\t\t\texitStatus |= 8;", "+\t\t}", "+", "+\t\tif ((totalLines > 0)", "+\t\t\t\t&& (totalLineCoverageRate > (totalLinesCovered / totalLines)))", "+\t\t{", "+\t\t\tSystem.err.println(\"Project failed check. \"", "+\t\t\t\t\t+ \"Total line coverage rate of \"", "+\t\t\t\t\t+ percentage(totalLinesCovered / totalLines)", "+\t\t\t\t\t+ \"% is below \" + percentage(totalLineCoverageRate) + \"%\");", "+\t\t\texitStatus |= 16;", "+\t\t}", "+", "+\t\tSystem.exit(exitStatus);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f5195d9bacceb42ad6db3e2b7d57ebc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "377f58859eaa7d9c9c23d608bf150f41", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/FirstPassMethodInstrumenter.java", "commitBeforeChange": "792c5093dbce280ed92358a7ad1456924b5e55ab", "commitAfterChange": "16403757be60e9df4fb5dd5f25f934e5bcad9472", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void visitEnd()", "signatureAfterChange": "  \tpublic void visitEnd()", "diff": ["+", "+\t\t// if we get to the end and nothing has ruled out this method being trivial,", "+\t\t// then it must be trivial, so we'll ignore it, if configured to do so", "+\t\tif(ignoreTrivial && mightBeTrivial) {", "+\t\t\tignored = true;", "+\t\t}", "+\t\t", "+\t\tif(ignored) {", "+\t\t\tIterator iter = lineLabels.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tclassData.removeLine(((Integer) iter.next()).intValue());", "+\t\t\t}", "+\t\t\tlineLabels.clear();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f54e268d86cec01c275ff74a9497770", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/FirstPassMethodInstrumenter.java", "commitBeforeChange": "792c5093dbce280ed92358a7ad1456924b5e55ab", "commitAfterChange": "16403757be60e9df4fb5dd5f25f934e5bcad9472", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "signatureAfterChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "diff": ["+", "+\t\tif (!ignored && mightBeTrivial)", "+\t\t{", "+\t\t\tif (isInit)", "+\t\t\t{", "+\t\t\t\t// trivial initializers can invoke parent initializers,", "+\t\t\t\t// but cannot invoke any other methods", "+\t\t\t\tif (opcode == INVOKESPECIAL && name.equals(\"<init>\") && owner.equals(ownerSuperClass))", "+\t\t\t\t{", "+\t\t\t\t\t// trivial call to super constructor", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\tmarkNonTrivial();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tmarkNonTrivial();", "+\t\t\t}", "+\t\t}", "+\t}"]}]}
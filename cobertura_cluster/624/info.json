{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a3f474e70977759184fd528f530d6ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "115696f8d5e27d7cafe680df204a2bea", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r     private void _measureSource( Reader reader ) throws IOException, Exception, Error", "signatureAfterChange": "      private void _measureSource( Reader reader ) throws IOException, Exception, Error", "diff": ["-\r", "-    private void _measureSource( Reader reader ) throws IOException, Exception, Error\r", "-    {\r", "-      Util.debug( \"_measureSource(Reader).ENTER\" );\r", "-      //Util.debug( \"_measureSource(Reader).parser15: -->\" + (_pInit.getOptions().get( \"parser15\" ) + \"<--\" );\r", "-      //Util.panicIf( _pInit == null );\r", "-      //Util.panicIf( _pInit.getOptions() == null );\r", "-      Util.debug( \"_measureSource(Reader).ENTER2\" );\r", "-      try\r", "-      {\r", "-        // create a parser object\r", "-        if ( Util.isDebug() == false )\r", "-        {\r", "-          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {\r", "-            Util.debug( \"creating JavaParser\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParser( reader ));\r", "-          } else {\r", "-            Util.debug( \"creating JavaParser15\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParser15( reader ));\r", "-          }\r", "-        } else {\r", "-          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {\r", "-            Util.debug( \"creating JavaParserDebug\" );\r", "-            Util.println( \"creating JavaParserDebug\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParserDebug( reader ));\r", "-          } else {\r", "-            Util.debug( \"creating JavaParser15Debug\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParser15Debug( reader ));\r", "-          }\r", "-        }\r", "-\r", "-            // execute the parser\r", "-            _pJavaParser.parse();\r", "-            Util.debug( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );\r", "-\r", "-            _ncss += _pJavaParser.getNcss(); // increment the ncss\r", "-            _loc += _pJavaParser.getLOC(); // and loc\r", "-            // add new data to global vector\r", "-            _vFunctionMetrics.addAll( _pJavaParser.getFunction() );\r", "-            _vObjectMetrics.addAll( _pJavaParser.getObject() );\r", "-            Map htNewPackages = _pJavaParser.getPackage();\r", "-\r", "-            /* List vNewPackages = new Vector(); */\r", "-            for ( Iterator ePackages = htNewPackages.entrySet().iterator(); ePackages.hasNext(); )\r", "-            {\r", "-                String sPackage = (String) ( (Map.Entry) ePackages.next() ).getKey();\r", "-\r", "-                PackageMetric pckmNext = (PackageMetric) htNewPackages.get( sPackage );\r", "-                pckmNext.name = sPackage;\r", "-\r", "-                PackageMetric pckmPrevious = (PackageMetric) _htPackages.get( sPackage );\r", "-                pckmNext.add( pckmPrevious );\r", "-\r", "-                _htPackages.put( sPackage, pckmNext );\r", "-            }\r", "-        }\r", "-        catch ( Exception pParseException )\r", "-        {\r", "-            if ( _sErrorMessage == null )\r", "-            {\r", "-                _sErrorMessage = \"\";\r", "-            }\r", "-            _sErrorMessage += \"ParseException in STDIN\";\r", "-            if ( _pJavaParser != null )\r", "-            {\r", "-                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";\r", "-            }\r", "-            _sErrorMessage += pParseException.getMessage() + \"\\n\";\r", "-            _thrwError = pParseException;\r", "-\r", "-            throw pParseException;\r", "-        }\r", "-        catch ( Error pTokenMgrError )\r", "-        {\r", "-            if ( _sErrorMessage == null )\r", "-            {\r", "-                _sErrorMessage = \"\";\r", "-            }\r", "-            _sErrorMessage += \"TokenMgrError in STDIN\\n\";\r", "-            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";\r", "-            _thrwError = pTokenMgrError;\r", "-\r", "-            throw pTokenMgrError;\r", "-        }\r", "-    }\r", "+", "+    private void _measureSource( Reader reader ) throws IOException, Exception, Error", "+    {", "+        Util.debug( \"_measureSource(Reader).ENTER\" );", "+        // Util.debug( \"_measureSource(Reader).parser15: -->\" + (_pInit.getOptions().get( \"parser15\" ) + \"<--\" );", "+        // Util.panicIf( _pInit == null );", "+        // Util.panicIf( _pInit.getOptions() == null );", "+        Util.debug( \"_measureSource(Reader).ENTER2\" );", "+        try", "+        {", "+            // create a parser object", "+            boolean parser15 = _pInit != null && _pInit.getOptions() != null && _pInit.getOptions().get( \"parser15\" ) != null;", "+            if ( Util.isDebug() )", "+            {", "+                if ( parser15 )", "+                {", "+                    Util.debug( \"creating JavaParser15Debug\" );", "+                    _pJavaParser = new JavaParser15Debug( reader );", "+                }", "+                else", "+                {", "+                    Util.debug( \"creating JavaParserDebug\" );", "+                    _pJavaParser = new JavaParserDebug( reader );", "+                }", "+            }", "+            else", "+            {", "+                if ( parser15 )", "+                {", "+                    Util.debug( \"creating JavaParser15\" );", "+                    _pJavaParser = new JavaParser15( reader );", "+                }", "+                else", "+                {", "+                    Util.debug( \"creating JavaParser\" );", "+                    _pJavaParser = new JavaParser( reader );", "+                }", "+            }", "+", "+            // execute the parser", "+            _pJavaParser.parse();", "+            Util.debug( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );", "+", "+            _ncss += _pJavaParser.getNcss(); // increment the ncss", "+            _loc += _pJavaParser.getLOC(); // and loc", "+            // add new data to global vector", "+            _vFunctionMetrics.addAll( _pJavaParser.getFunction() );", "+            _vObjectMetrics.addAll( _pJavaParser.getObject() );", "+            Map htNewPackages = _pJavaParser.getPackage();", "+", "+            /* List vNewPackages = new Vector(); */", "+            for ( Iterator ePackages = htNewPackages.entrySet().iterator(); ePackages.hasNext(); )", "+            {", "+                String sPackage = (String) ( (Map.Entry) ePackages.next() ).getKey();", "+", "+                PackageMetric pckmNext = (PackageMetric) htNewPackages.get( sPackage );", "+                pckmNext.name = sPackage;", "+", "+                PackageMetric pckmPrevious = (PackageMetric) _htPackages.get( sPackage );", "+                pckmNext.add( pckmPrevious );", "+", "+                _htPackages.put( sPackage, pckmNext );", "+            }", "+        }", "+        catch ( Exception pParseException )", "+        {", "+            if ( _sErrorMessage == null )", "+            {", "+                _sErrorMessage = \"\";", "+            }", "+            _sErrorMessage += \"ParseException in STDIN\";", "+            if ( _pJavaParser != null )", "+            {", "+                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";", "+            }", "+            _sErrorMessage += pParseException.getMessage() + \"\\n\";", "+            _thrwError = pParseException;", "+", "+            throw pParseException;", "+        }", "+        catch ( Error pTokenMgrError )", "+        {", "+            if ( _sErrorMessage == null )", "+            {", "+                _sErrorMessage = \"\";", "+            }", "+            _sErrorMessage += \"TokenMgrError in STDIN\\n\";", "+            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";", "+            _thrwError = pTokenMgrError;", "+", "+            throw pTokenMgrError;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e59b72789f330b550c7a877703999be7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r     private void _measureSource( Reader reader ) throws IOException, Exception, Error", "signatureAfterChange": "      private void _measureSource( Reader reader ) throws IOException, Exception, Error", "diff": ["-\r", "-    private void _measureSource( Reader reader ) throws IOException, Exception, Error\r", "-    {\r", "-      Util.debug( \"_measureSource(Reader).ENTER\" );\r", "-      //Util.debug( \"_measureSource(Reader).parser15: -->\" + (_pInit.getOptions().get( \"parser15\" ) + \"<--\" );\r", "-      //Util.panicIf( _pInit == null );\r", "-      //Util.panicIf( _pInit.getOptions() == null );\r", "-      Util.debug( \"_measureSource(Reader).ENTER2\" );\r", "-      try\r", "-      {\r", "-        // create a parser object\r", "-        if ( Util.isDebug() == false )\r", "-        {\r", "-          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {\r", "-            Util.debug( \"creating JavaParser\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParser( reader ));\r", "-          } else {\r", "-            Util.debug( \"creating JavaParser15\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParser15( reader ));\r", "-          }\r", "-        } else {\r", "-          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {\r", "-            Util.debug( \"creating JavaParserDebug\" );\r", "-            Util.println( \"creating JavaParserDebug\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParserDebug( reader ));\r", "-          } else {\r", "-            Util.debug( \"creating JavaParser15Debug\" );\r", "-            _pJavaParser = (JavaParserInterface)(new JavaParser15Debug( reader ));\r", "-          }\r", "-        }\r", "-\r", "-            // execute the parser\r", "-            _pJavaParser.parse();\r", "-            Util.debug( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );\r", "-\r", "-            _ncss += _pJavaParser.getNcss(); // increment the ncss\r", "-            _loc += _pJavaParser.getLOC(); // and loc\r", "-            // add new data to global vector\r", "-            _vFunctionMetrics.addAll( _pJavaParser.getFunction() );\r", "-            _vObjectMetrics.addAll( _pJavaParser.getObject() );\r", "-            Map htNewPackages = _pJavaParser.getPackage();\r", "-\r", "-            /* List vNewPackages = new Vector(); */\r", "-            for ( Iterator ePackages = htNewPackages.entrySet().iterator(); ePackages.hasNext(); )\r", "-            {\r", "-                String sPackage = (String) ( (Map.Entry) ePackages.next() ).getKey();\r", "-\r", "-                PackageMetric pckmNext = (PackageMetric) htNewPackages.get( sPackage );\r", "-                pckmNext.name = sPackage;\r", "-\r", "-                PackageMetric pckmPrevious = (PackageMetric) _htPackages.get( sPackage );\r", "-                pckmNext.add( pckmPrevious );\r", "-\r", "-                _htPackages.put( sPackage, pckmNext );\r", "-            }\r", "-        }\r", "-        catch ( Exception pParseException )\r", "-        {\r", "-            if ( _sErrorMessage == null )\r", "-            {\r", "-                _sErrorMessage = \"\";\r", "-            }\r", "-            _sErrorMessage += \"ParseException in STDIN\";\r", "-            if ( _pJavaParser != null )\r", "-            {\r", "-                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";\r", "-            }\r", "-            _sErrorMessage += pParseException.getMessage() + \"\\n\";\r", "-            _thrwError = pParseException;\r", "-\r", "-            throw pParseException;\r", "-        }\r", "-        catch ( Error pTokenMgrError )\r", "-        {\r", "-            if ( _sErrorMessage == null )\r", "-            {\r", "-                _sErrorMessage = \"\";\r", "-            }\r", "-            _sErrorMessage += \"TokenMgrError in STDIN\\n\";\r", "-            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";\r", "-            _thrwError = pTokenMgrError;\r", "-\r", "-            throw pTokenMgrError;\r", "-        }\r", "-    }\r", "+", "+    private void _measureSource( Reader reader ) throws IOException, Exception, Error", "+    {", "+        Util.debug( \"_measureSource(Reader).ENTER\" );", "+        // Util.debug( \"_measureSource(Reader).parser15: -->\" + (_pInit.getOptions().get( \"parser15\" ) + \"<--\" );", "+        // Util.panicIf( _pInit == null );", "+        // Util.panicIf( _pInit.getOptions() == null );", "+        Util.debug( \"_measureSource(Reader).ENTER2\" );", "+        try", "+        {", "+            // create a parser object", "+            boolean parser15 = _pInit != null && _pInit.getOptions() != null && _pInit.getOptions().get( \"parser15\" ) != null;", "+            if ( Util.isDebug() )", "+            {", "+                if ( parser15 )", "+                {", "+                    Util.debug( \"creating JavaParser15Debug\" );", "+                    _pJavaParser = new JavaParser15Debug( reader );", "+                }", "+                else", "+                {", "+                    Util.debug( \"creating JavaParserDebug\" );", "+                    _pJavaParser = new JavaParserDebug( reader );", "+                }", "+            }", "+            else", "+            {", "+                if ( parser15 )", "+                {", "+                    Util.debug( \"creating JavaParser15\" );", "+                    _pJavaParser = new JavaParser15( reader );", "+                }", "+                else", "+                {", "+                    Util.debug( \"creating JavaParser\" );", "+                    _pJavaParser = new JavaParser( reader );", "+                }", "+            }", "+", "+            // execute the parser", "+            _pJavaParser.parse();", "+            Util.debug( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );", "+", "+            _ncss += _pJavaParser.getNcss(); // increment the ncss", "+            _loc += _pJavaParser.getLOC(); // and loc", "+            // add new data to global vector", "+            _vFunctionMetrics.addAll( _pJavaParser.getFunction() );", "+            _vObjectMetrics.addAll( _pJavaParser.getObject() );", "+            Map htNewPackages = _pJavaParser.getPackage();", "+", "+            /* List vNewPackages = new Vector(); */", "+            for ( Iterator ePackages = htNewPackages.entrySet().iterator(); ePackages.hasNext(); )", "+            {", "+                String sPackage = (String) ( (Map.Entry) ePackages.next() ).getKey();", "+", "+                PackageMetric pckmNext = (PackageMetric) htNewPackages.get( sPackage );", "+                pckmNext.name = sPackage;", "+", "+                PackageMetric pckmPrevious = (PackageMetric) _htPackages.get( sPackage );", "+                pckmNext.add( pckmPrevious );", "+", "+                _htPackages.put( sPackage, pckmNext );", "+            }", "+        }", "+        catch ( Exception pParseException )", "+        {", "+            if ( _sErrorMessage == null )", "+            {", "+                _sErrorMessage = \"\";", "+            }", "+            _sErrorMessage += \"ParseException in STDIN\";", "+            if ( _pJavaParser != null )", "+            {", "+                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";", "+            }", "+            _sErrorMessage += pParseException.getMessage() + \"\\n\";", "+            _thrwError = pParseException;", "+", "+            throw pParseException;", "+        }", "+        catch ( Error pTokenMgrError )", "+        {", "+            if ( _sErrorMessage == null )", "+            {", "+                _sErrorMessage = \"\";", "+            }", "+            _sErrorMessage += \"TokenMgrError in STDIN\\n\";", "+            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";", "+            _thrwError = pTokenMgrError;", "+", "+            throw pTokenMgrError;", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ec2a12f1c35d286eda04eac0140a109", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b001bd88694dda174f3cabd6fcefe7e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/ReportTask.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void setClasspath(Path classpath)", "signatureAfterChange": "  \tprivate void handleFilesets()", "diff": ["+\tprivate void handleFilesets() {", "+\t\tSet filenames = new HashSet();", "+\t\tIterator iter = fileSets.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t\tFileSet fileSet = (FileSet)iter.next();", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(baseDir(fileSet));", "+", "+\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\taddFilenames((String[])filenames.toArray(new String[filenames.size()]));", "-\tpublic void setClasspath(Path classpath)", "-\t{", "-\t\tcreateClasspath().append(classpath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67303e39b9697d56ebd7825c010bdd92", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "b6b718a39d474bcb5d8023e1d26bb05ce1dff63c", "commitAfterChange": "0c76ce91897e30da3c3c98b0dbde4eaeb37f1634", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-\t\tSet filenames = new HashSet();", "-\t\tIterator iter = fileSets.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tFileSet fileSet = (FileSet)iter.next();", "-", "-\t\t\taddArg(\"--basedir\");", "-\t\t\taddArg(baseDir(fileSet));", "-", "-\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "-\t\t}", "-\t\taddFilenames((String[])filenames.toArray(new String[filenames.size()]));", "-", "+\t\tSet filenames = new HashSet();", "+\t\tIterator iter = fileSets.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tFileSet fileSet = (FileSet)iter.next();", "+", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(baseDir(fileSet));", "+", "+\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\t}", "+\t\taddFilenames((String[])filenames.toArray(new String[filenames.size()]));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c12ce9cc3db70608897ed8c31e5de41", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/ReportTask.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-\t\tHeader.print(System.out);", "-", "-\t\tgetJava().createArg().setValue(\"--format\");", "-\t\tgetJava().createArg().setValue(format);", "+\t\tinitArgs();", "-\t\t\tgetJava().createArg().setValue(\"--datafile\");", "-\t\t\tgetJava().createArg().setValue(dataFile);", "+\t\t\taddArg(\"--datafile\");", "+\t\t\taddArg(dataFile);", "+\t\t}", "+\t\t", "+\t\taddArg(\"--destination\");", "+\t\taddArg(this.destDir.getAbsolutePath());", "+\t\t", "+\t\taddArg(\"--format\");", "+\t\taddArg(format);", "+\t\t", "+\t\tif (srcDir != null) {", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(srcDir);", "-\t\tgetJava().createArg().setValue(\"--destination\");", "-\t\tgetJava().createArg().setValue(destDir.toString());", "+\t\thandleFilesets();", "-\t\tgetJava().createArg().setValue(\"--source\");", "-\t\tgetJava().createArg().setValue(src.toString());", "+\t\tsaveArgs();", "+\t\t/**", "+\t\t * TODO: Do something here so that we can set System.in and System.out on", "+\t\t * getJava() to the one we're using now.  So that when instrumentation calls", "+\t\t * System.out, it will show up as \"[instrument] doing stuff\" instead of", "+\t\t * \"[java] doing stuff\" in the ant output.", "+\t\t */", "-\t\t\tthrow new BuildException(\"Error generating report. See messages above.\");", "+\t\t\tthrow new BuildException(\"Error running reports. See messages above.\");", "+", "+\t\tunInitArgs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ec5633fdc637cc13b8e4f4a682a4a6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/CheckTask.java", "commitBeforeChange": "89f4eaca365e898685523b26abb2975d34c5493c", "commitAfterChange": "b5fae504c12a9486e23c38b8e2fb563abfcdacb8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-", "-\t\tif (branchCoverageRate != null)", "-\t\t{", "-\t\t\tgetJava().createArg().setValue(\"--branch\");", "-\t\t\tgetJava().createArg().setValue(branchCoverageRate);", "-\t\t}", "-", "-\t\tIterator i = regexes.iterator();", "-\t\twhile (i.hasNext())", "+\t\tif (branchCoverageRate != null)", "-\t\t\tgetJava().createArg().setValue(\"--ignore\");", "-\t\t\tgetJava().createArg().setValue(i.next().toString());", "+\t\t\tgetJava().createArg().setValue(\"--branch\");", "+\t\t\tgetJava().createArg().setValue(branchCoverageRate);", "-\t\tif (getJava().executeJava() != 0)", "+\t\tif (totalBranchCoverageRate != null)", "-\t\t\tthrow new BuildException();", "+\t\t\tgetJava().createArg().setValue(\"--totalbranch\");", "+\t\t\tgetJava().createArg().setValue(totalBranchCoverageRate);", "+", "+\t\tif (totalLineCoverageRate != null)", "+\t\t{", "+\t\t\tgetJava().createArg().setValue(\"--totalline\");", "+\t\t\tgetJava().createArg().setValue(totalLineCoverageRate);", "+\t\t}", "+", "+\t\tIterator iter = regexes.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tgetJava().createArg().setValue(\"--regex\");", "+\t\t\tgetJava().createArg().setValue(iter.next().toString());", "+\t\t}", "+", "+\t\tint returnCode = getJava().executeJava();", "+", "+\t\t// Check the return code and print a message", "+\t\tif (returnCode == 0)", "+\t\t\tSystem.out.println(\"All checks passed.\");", "+\t\telse if (haltOnFailure)", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\t\"Coverage check failed. See messages above.\");", "+\t\telse", "+\t\t\tSystem.err.println(\"Coverage check failed. See messages above.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9972157c1dd05e8dd2ce904b303d13f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "67029061118b00390b84887cab32e37e54cecd25", "commitAfterChange": "f52fed4a7d0d851c92ab4a6013f2aa7b1b3c2cde", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["+", "+\t\tSet filenames = new HashSet();", "+\t\tIterator iter = fileSets.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tFileSet fileSet = (FileSet)iter.next();", "+", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(baseDir(fileSet));", "+", "+\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\t}", "+\t\taddFilenames((String[])filenames.toArray(new String[filenames.size()]));", "+", "+\t\tif (dataFile != null)", "+\t\t{", "+\t\t\taddArg(\"--datafile\");", "+\t\t\taddArg(dataFile);", "+\t\t}", "+", "-\t\tSet filenames = new HashSet();", "-\t\tIterator i = fileSets.iterator();", "+\t\tsaveArgs();", "-\t\twhile (i.hasNext())", "+\t\t/**", "+\t\t * TODO: Do something here so that we can set System.in and System.out on", "+\t\t * getJava() to the one we're using now.  So that when instrumentation calls", "+\t\t * System.out, it will show up as \"[instrument] doing stuff\" instead of", "+\t\t * \"[java] doing stuff\" in the ant output.", "+\t\t */", "+\t\tif (getJava().executeJava() != 0)", "-\t\t\tFileSet fileSet = (FileSet)i.next();", "-", "-\t\t\taddArg(\"--basedir\");", "-\t\t\taddArg(baseDir(fileSet));", "-", "-\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\t\tthrow new BuildException();", "-", "-\t\tcoverage((String[])filenames.toArray(new String[filenames.size()]));"]}]}
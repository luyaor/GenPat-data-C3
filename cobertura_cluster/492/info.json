{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5679d9e0005a17f3b15fc54e5cb0f29", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31c649d99a06aafb9317cf3da30109f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "5b30351fa9d71ab4016d2fcbdce172b2f16c1c45", "commitAfterChange": "55571e8b292791cc80dd02e2bed0dfd9f206376b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static ProjectData getGlobalProjectData()", "signatureAfterChange": " \tpublic static ProjectData getGlobalProjectData()", "diff": ["+\t */", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tinitialize();", "+\t\tglobalProjectData = new ProjectData();", "+\t\treturn globalProjectData;", "+\t}", "-\t\t// Read projectData from the serialized file.", "-\t\tif (dataFile.isFile())", "-\t\t{", "-\t\t\t//System.out.println(\"Cobertura: Loading global project data from \" + dataFile.getAbsolutePath());", "-\t\t\tglobalProjectData = CoverageDataFileHandler", "-\t\t\t\t\t.loadCoverageData(dataFile);", "-\t\t}", "-", "-\t\tif (globalProjectData == null)", "-\t\t{", "-\t\t\t// We could not read from the serialized file, so create a new object.", "-\t\t\tSystem.out.println(\"Cobertura: Coverage data file \"", "-\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "-\t\t\tglobalProjectData = new ProjectData();", "-\t\t}", "-", "-\t\tif( System.getProperty(\"catalina.home\")!=null) {", "-\t\t\t", "-\t\t\t// Additionaly force loading of other classes that might be not loaded", "-\t\t\t// becouse saved project data was empty", "-\t\t", "-", "-\t\treturn globalProjectData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9ef1a139f2052a932e72d3d61af23d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "661115e1f1f5a028a733809b53164c2440c1ef0c", "commitAfterChange": "fc5520a67e784e8932ab102fb13b34b70d243d32", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static ProjectData getGlobalProjectData()", "signatureAfterChange": "  \tpublic static ProjectData getGlobalProjectData()", "diff": ["-\t\tif (saveTimer == null)", "-\t\t{", "-\t\t\tsaveTimer = new SaveTimer();", "-\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(saveTimer));", "-\t\t\t//Timer timer = new Timer(true);", "-\t\t\t//timer.schedule(saveTimer, 100);", "-\t\t}", "-", "-\t\t\tLOGGER.debug(\"Loading global project data from \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "+\t\t\t//System.out.println(\"Cobertura: Loading global project data from \" + dataFile.getAbsolutePath());", "-\t\tif (globalProjectData != null)", "-\t\t\treturn globalProjectData;", "-\t\t// We could not read from the serialized file, so create a new object.", "-\t\tLOGGER", "-\t\t\t\t.info(\"Coverage data file \"", "-\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "-\t\tglobalProjectData = new ProjectData();", "+\t\tif (globalProjectData == null)", "+\t\t{", "+\t\t\t// We could not read from the serialized file, so create a new object.", "+\t\t\tSystem.out.println(\"Cobertura: Coverage data file \"", "+\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "+\t\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "+\t\t\tglobalProjectData = new ProjectData();", "+", "+\t\t\t// Add a hook to save the data when the JVM exits", "+\t\t\tsaveTimer = new SaveTimer();", "+\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(saveTimer));", "+", "+\t\t\t// Possibly also save the coverage data every x seconds?", "+\t\t\t//Timer timer = new Timer(true);", "+\t\t\t//timer.schedule(saveTimer, 100);", "+\t\t}"]}]}
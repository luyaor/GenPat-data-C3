{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0531d6b24be2abb3865bfe1045d41f10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6167be4cdcfb8e0e8b88a4a04632e359", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/TestUtils.java", "commitBeforeChange": "0b36ddc5d7cb845ca21063fc49d36a23d15fe49f", "commitAfterChange": "1db78a6baa69fb0a920bf070a537282f3e1e390b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static void compileSource(AntBuilder ant, File srcDir, \t\t\tString jdkVersion)", "signatureAfterChange": "      public static void compileSource(File srcDir)", "diff": ["-\tpublic static void compileSource(AntBuilder ant, File srcDir,", "-\t\t\tString jdkVersion) {", "-\t\tJavac javac = new Javac();", "-\t\tjavac.setDebug(true);", "-\t\tjavac.setSource(jdkVersion);", "-\t\tjavac.setTarget(jdkVersion);", "+    public static void compileSource(File srcDir) {", "+        compileSource(srcDir, srcDir);", "+    }", "-\t\tjavac.setProject(project);", "-\t\tjavac.setSrcdir(new Path(project, srcDir.getAbsolutePath()));", "-\t\tjavac.setDestdir(srcDir);", "-\t\tjavac.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d22f300360afefa4da6c64a6924fb9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/TestUtils.java", "commitBeforeChange": "0b36ddc5d7cb845ca21063fc49d36a23d15fe49f", "commitAfterChange": "1db78a6baa69fb0a920bf070a537282f3e1e390b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static void compileSource(AntBuilder ant, File srcDir, \t\t\tString jdkVersion)", "signatureAfterChange": "     public static void compileSource(AntBuilder builder, File srcDir,                                      String jdkVersion)", "diff": ["-\tpublic static void compileSource(AntBuilder ant, File srcDir,", "-\t\t\tString jdkVersion) {", "-\t\tJavac javac = new Javac();", "-\t\tjavac.setDebug(true);", "-\t\tjavac.setSource(jdkVersion);", "-\t\tjavac.setTarget(jdkVersion);", "-\t\tjavac.setProject(project);", "-\t\tjavac.setSrcdir(new Path(project, srcDir.getAbsolutePath()));", "-\t\tjavac.setDestdir(srcDir);", "-\t\tjavac.execute();", "+    //TODO: remove", "+    public static void compileSource(AntBuilder builder, File srcDir,", "+                                     String jdkVersion) {", "+        compileSource(srcDir, srcDir, jdkVersion);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d1b9bba6d425bb0d49a6677e2293476", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/reporting/ComplexityCalculator.java", "commitBeforeChange": "3dc6e53b3e8b4195502343af0d5daf073dd95d07", "commitAfterChange": "e5eea8679ebce047ec6ccdfdbf6cf2c14b376875", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate Complexity getAccumlatedCCNForSource(String sourceFileName, \t\t\tSource source)", "signatureAfterChange": " \tprivate Complexity getAccumlatedCCNForSingleFile(String sourceFileName) \t\tthrows IOException", "diff": ["-\tprivate Complexity getAccumlatedCCNForSource(String sourceFileName,", "-\t\t\tSource source) {", "-\t\tif (source == null) {", "-\t\t\treturn ZERO_COMPLEXITY;", "-\t\t}", "-\t\tif (!sourceFileName.endsWith(\".java\")) {", "-\t\t\treturn ZERO_COMPLEXITY;", "-\t\t}", "-\t\tJavancss javancss = new Javancss(source.getInputStream(), encoding);", "-", "-\t\tif (javancss.getLastErrorMessage() != null) {", "-\t\t\t//there is an error while parsing the java file. log it", "-\t\t\tlogger.warn(\"JavaNCSS got an error while parsing the java \"", "-\t\t\t\t\t+ source.getOriginDesc() + \"\\n\"", "-\t\t\t\t\t+ javancss.getLastErrorMessage());", "-\t\t}", "-", "-\t\tList methodMetrics = javancss.getFunctionMetrics();", "-\t\tint classCcn = 0;", "-\t\tfor (Iterator method = methodMetrics.iterator(); method.hasNext();) {", "-\t\t\tFunctionMetric singleMethodMetrics = (FunctionMetric) method.next();", "-\t\t\tclassCcn += singleMethodMetrics.ccn;", "-\t\t}", "-", "-\t\treturn new Complexity(classCcn, methodMetrics.size());", "+\t\tthrows IOException {", "+\t\tList methodMetrics = getFunctionMetricsForSingleFile(sourceFileName);", "+\t\tif (methodMetrics.isEmpty()) {", "+\t\t\treturn ZERO_COMPLEXITY;", "+", "+\t\tint classCcn = 0;", "+\t\tfor (Iterator method = methodMetrics.iterator(); method.hasNext(); ) {", "+\t\t\tFunctionMetric singleMethodMetrics = (FunctionMetric) method.next();", "+\t\t\tclassCcn += singleMethodMetrics.ccn;", "+\t\t}", "+", "+\t\treturn new Complexity(classCcn, methodMetrics.size());"]}]}
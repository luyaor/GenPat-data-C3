{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef1a72f9d75b7003790c9cc70e9bf282", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da4872de6f7d4e1602fcab5c5e2c1b0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SwitchData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void merge(BranchCoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(BranchCoverageData coverageData)", "diff": ["-\t\tdefaultHits += switchData.defaultHits;", "-\t\tfor (int i = Math.min(hits.length, switchData.hits.length) - 1; i >= 0; i--)", "-\t\t\thits[i] += switchData.hits[i];", "-\t\tif (switchData.hits.length > hits.length)", "+\t\tgetBothLocks(switchData);", "+\t\ttry", "-\t\t\tlong[] old = hits;", "-\t\t\thits = new long[switchData.hits.length];", "-\t\t\tSystem.arraycopy(old, 0, hits, 0, old.length);", "-\t\t\tSystem.arraycopy(switchData.hits, old.length, hits, old.length, hits.length - old.length);", "+\t\t\tdefaultHits += switchData.defaultHits;", "+\t\t\tfor (int i = Math.min(hits.length, switchData.hits.length) - 1; i >= 0; i--)", "+\t\t\t\thits[i] += switchData.hits[i];", "+\t\t\tif (switchData.hits.length > hits.length)", "+\t\t\t{", "+\t\t\t\tlong[] old = hits;", "+\t\t\t\thits = new long[switchData.hits.length];", "+\t\t\t\tSystem.arraycopy(old, 0, hits, 0, old.length);", "+\t\t\t\tSystem.arraycopy(switchData.hits, old.length, hits, old.length, hits.length - old.length);", "+\t\t\t}", "+\t\t\tif ((this.keys.length == 0) && (switchData.keys.length > 0))", "+\t\t\t\tthis.keys = switchData.keys;", "-\t\tif ((this.keys.length == 0) && (switchData.keys.length > 0))", "-\t\t\tthis.keys = switchData.keys;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tswitchData.lock.unlock();", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e04efd70bf60e43543daf233f0c4dc06", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tthis.hits += lineData.hits;", "-\t\tif (lineData.jumps != null)", "-\t\t\tif (this.jumps == null) ", "-\t\t\t\tthis.jumps = lineData.jumps;", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()) - 1; i >= 0; i--)", "-\t\t\t\t\t((JumpData) this.jumps.get(i)).merge((JumpData) lineData.jumps.get(i));", "-\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()); i < lineData.jumps.size(); i++) ", "-\t\t\t\t\tthis.jumps.add(lineData.jumps.get(i));", "-\t\t\t}", "-\t\tif (lineData.switches != null)", "-\t\t\tif (this.switches == null) ", "-\t\t\t\tthis.switches = lineData.switches;", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()) - 1; i >= 0; i--)", "-\t\t\t\t\t((SwitchData) this.switches.get(i)).merge((SwitchData) lineData.switches.get(i));", "-\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()); i < lineData.switches.size(); i++) ", "-\t\t\t\t\tthis.switches.add(lineData.switches.get(i));", "-\t\t\t}", "-\t\tif (lineData.methodName != null)", "-\t\t\tthis.methodName = lineData.methodName;", "-\t\tif (lineData.methodDescriptor != null)", "-\t\t\tthis.methodDescriptor = lineData.methodDescriptor;", "+\t\tgetBothLocks(lineData);", "+\t\ttry", "+\t\t{", "+\t\t\tthis.hits += lineData.hits;", "+\t\t\tif (lineData.jumps != null)", "+\t\t\t\tif (this.jumps == null) ", "+\t\t\t\t\tthis.jumps = lineData.jumps;", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()) - 1; i >= 0; i--)", "+\t\t\t\t\t\t((JumpData) this.jumps.get(i)).merge((JumpData) lineData.jumps.get(i));", "+\t\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()); i < lineData.jumps.size(); i++) ", "+\t\t\t\t\t\tthis.jumps.add(lineData.jumps.get(i));", "+\t\t\t\t}", "+\t\t\tif (lineData.switches != null)", "+\t\t\t\tif (this.switches == null) ", "+\t\t\t\t\tthis.switches = lineData.switches;", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()) - 1; i >= 0; i--)", "+\t\t\t\t\t\t((SwitchData) this.switches.get(i)).merge((SwitchData) lineData.switches.get(i));", "+\t\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()); i < lineData.switches.size(); i++) ", "+\t\t\t\t\t\tthis.switches.add(lineData.switches.get(i));", "+\t\t\t\t}", "+\t\t\tif (lineData.methodName != null)", "+\t\t\t\tthis.methodName = lineData.methodName;", "+\t\t\tif (lineData.methodDescriptor != null)", "+\t\t\t\tthis.methodDescriptor = lineData.methodDescriptor;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tlineData.lock.unlock();", "+\t\t}"]}]}
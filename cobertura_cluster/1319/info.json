{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1838b398d249fc83f9fccad0e814387", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f4719248417a3a1a60db0ba3ac6cf1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SourceFileData.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic boolean containsInstrumentationInfo()", "signatureAfterChange": "  \tpublic boolean containsInstrumentationInfo()", "diff": ["-\t\treturn this.containsInstrumentationInfo;", "+\t\t// Return false if any of our child ClassData's does not", "+\t\t// contain instrumentation info", "+\t\tIterator iter = this.children.values().iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\tif (!classData.containsInstrumentationInfo())", "+\t\t\t\treturn false;", "+\t\t}", "+\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "377f58859eaa7d9c9c23d608bf150f41", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/FirstPassMethodInstrumenter.java", "commitBeforeChange": "792c5093dbce280ed92358a7ad1456924b5e55ab", "commitAfterChange": "16403757be60e9df4fb5dd5f25f934e5bcad9472", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void visitEnd()", "signatureAfterChange": "  \tpublic void visitEnd()", "diff": ["+", "+\t\t// if we get to the end and nothing has ruled out this method being trivial,", "+\t\t// then it must be trivial, so we'll ignore it, if configured to do so", "+\t\tif(ignoreTrivial && mightBeTrivial) {", "+\t\t\tignored = true;", "+\t\t}", "+\t\t", "+\t\tif(ignored) {", "+\t\t\tIterator iter = lineLabels.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tclassData.removeLine(((Integer) iter.next()).intValue());", "+\t\t\t}", "+\t\t\tlineLabels.clear();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54779168a5a70f97d79f25b2d877c677", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void dumpSources(File sourceDirectory)", "signatureAfterChange": "  \tprivate void dumpSources()", "diff": ["-\tprivate void dumpSources(File sourceDirectory)", "+\tprivate void dumpSources()", "-\t\tif (sourceDirectory == null)", "-\t\t\treturn;", "-", "-", "-\t\tdumpSource(sourceDirectory);", "-", "+\t\tfor (Iterator it = finder.getBaseDirectories().iterator(); it.hasNext(); ) {", "+\t\t\tFile dir = (File) it.next();", "+\t\t\tdumpSource(dir);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2579e33a0361f8f26f1303bc06e315", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic int getNumberOfValidBranches()", "signatureAfterChange": "    public int getNumberOfValidBranches()", "diff": ["-\t */", "-\tpublic int getNumberOfValidBranches()", "-\t{", "-\t\treturn branches.size();", "-\t}", "+    */", "+   public int getNumberOfValidBranches() ", "+   {", "+      int number = 0;", "+      for (Iterator i = branches.values().iterator(); ", "+            i.hasNext(); ", "+            number += ((LineData) i.next()).getNumberOfValidBranches())", "+         ;", "+      return number;", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2bf515926217d49172419bcfcfe8e9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/MethodInstrumenter.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "signatureAfterChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "diff": ["-\t\tif ((ignoreRegex != null) && (pm.matches(owner, ignoreRegex)))", "-\t\t\tclassData.removeLine(currentLine);", "+\t\t// If any of the ignore patterns match this line", "+\t\t// then remove it from our data", "+\t\tIterator iter = ignoreRegexs.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tPattern ignoreRegex = (Pattern)iter.next();", "+\t\t\tif ((ignoreRegexs != null) && (pm.matches(owner, ignoreRegex)))", "+\t\t\t{", "+\t\t\t\tclassData.removeLine(currentLine);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be79bb5428d8edc1da3caf36ca56d42d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ac2ab72af95d90383501d9bf6849a1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": " \t \tpublic static void main(String[] args) throws Exception", "diff": ["-", "-\tpublic static void main(String[] args) throws Exception", "-\t{", "-\t\tlong startTime = System.currentTimeMillis();", "-", "-\t\tLongOpt[] longOpts = new LongOpt[4];", "-\t\t// TODO: Allow for multiple destination and multiple source directories", "-\t\tlongOpts[0] = new LongOpt(\"format\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'f');", "-\t\tlongOpts[1] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'd');", "-\t\tlongOpts[2] = new LongOpt(\"destination\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'o');", "-\t\tlongOpts[3] = new LongOpt(\"source\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t's');", "-", "-\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:d:o:s:\",", "-\t\t\t\tlongOpts);", "-\t\tint c;", "-\t\twhile ((c = g.getopt()) != -1)", "-\t\t{", "-\t\t\tswitch (c)", "-\t\t\t{", "-\t\t\t\tcase 'f':", "-\t\t\t\t\tformat = g.getOptarg();", "-\t\t\t\t\tif (!format.equalsIgnoreCase(\"html\")", "-\t\t\t\t\t\t\t&& !format.equalsIgnoreCase(\"xml\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err", "-\t\t\t\t\t\t\t\t.println(\"Error: format \\\"\"", "-\t\t\t\t\t\t\t\t\t\t+ format", "-\t\t\t\t\t\t\t\t\t\t+ \"\\\" is invalid. Must be either html or xml\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tdataFile = new File(g.getOptarg());", "-\t\t\t\t\tif (!dataFile.exists())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t\t+ \" does not exist\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!dataFile.isFile())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t\t+ \" must be a regular file\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'o':", "-\t\t\t\t\tdestinationDir = new File(g.getOptarg());", "-\t\t\t\t\tif (destinationDir.exists()", "-\t\t\t\t\t\t\t&& !destinationDir.isDirectory())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: destination directory \"", "-\t\t\t\t\t\t\t\t+ destinationDir", "-\t\t\t\t\t\t\t\t+ \" already exists but is not a directory\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tdestinationDir.mkdirs();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 's':", "-\t\t\t\t\tsourceDir = new File(g.getOptarg());", "-\t\t\t\t\tif (!sourceDir.exists())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ sourceDir + \" does not exist\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!sourceDir.isDirectory())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ sourceDir + \" must be a directory\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tif (destinationDir == null)", "-\t\t{", "-\t\t\tSystem.err.println(\"Error: destination directory must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tif (sourceDir == null)", "-\t\t{", "-\t\t\tSystem.err.println(\"Error: source directory must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"format is \" + format);", "-\t\t\tlogger.debug(\"dataFile is \" + dataFile.getAbsolutePath());", "-\t\t\tlogger.debug(\"destinationDir is \"", "-\t\t\t\t\t+ destinationDir.getAbsolutePath());", "-\t\t\tlogger.debug(\"sourceDir is \" + sourceDir.getAbsolutePath());", "-\t\t}", "-", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null)", "-\t\t{", "-\t\tif (format.equalsIgnoreCase(\"html\"))", "-\t\t{", "-\t\t\tnew HTMLReport(projectData, destinationDir, sourceDir);", "-\t\telse if (format.equalsIgnoreCase(\"xml\"))", "-\t\t{", "-\t\t\tnew XMLReport(projectData, destinationDir, sourceDir);", "+\t", "+\tpublic static void main(String[] args) throws Exception {", "+\t\tlong startTime = System.currentTimeMillis();", "+", "+\t\tMain main = new Main();", "+", "+\t\tboolean hasCommandsFile = false;", "+\t\tString commandsFileName = null;", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--commandsfile\")) {", "+\t\t\t\thasCommandsFile = true;", "+\t\t\t\tcommandsFileName = args[++i];", "+\t\t\t}", "+\t\tif (hasCommandsFile) {", "+\t\t\tList arglist = new ArrayList();", "+\t\t\tBufferedReader bufferedReader = null;", "+", "+\t\t\ttry {", "+\t\t\t\tbufferedReader = new BufferedReader(new FileReader(commandsFileName));", "+\t\t\t\tString line = null;", "+", "+\t\t\t\twhile ((line = bufferedReader.readLine()) != null) {", "+\t\t\t\t\targlist.add(line);", "+\t\t\t\t}", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tLOGGER.fatal(\"Unable to read temporary commands file \" + commandsFileName + \".\", e);", "+\t\t\t} finally {", "+\t\t\t\tif (bufferedReader != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbufferedReader.close();", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// no-op", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\targs = (String[])arglist.toArray(new String[arglist.size()]);", "+\t\t}", "+", "+\t\tmain.parseArguments(args);", "+", "-\t\tSystem.out", "-\t\t\t\t.println(\"Reporting time: \" + (stopTime - startTime) + \"ms\");", "+\t\tSystem.out.println(\"Report time: \" + (stopTime - startTime) + \"ms\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb22f79a115fbebb3691bcb73ea923d6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/ASCII_UCodeESC_CharStream.java", "commitBeforeChange": "7878dbc8c14057d3c27375fea2484940a54a6ebc", "commitAfterChange": "5c3edcc6dd3fd1408cac466f6859d53cda78784e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate final void expandBuff(boolean wrapAround)", "signatureAfterChange": "    private final void ExpandBuff(boolean wrapAround)", "diff": ["+  private final void ExpandBuff(boolean wrapAround)", "+  {", "+     char[] newbuffer = new char[bufsize + 2048];", "+     int newbufline[] = new int[bufsize + 2048];", "+     int newbufcolumn[] = new int[bufsize + 2048];", "+     try", "+     {", "+        if (wrapAround)", "+        {", "+           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "+           System.arraycopy(buffer, 0, newbuffer,", "+                                             bufsize - tokenBegin, bufpos);", "+           buffer = newbuffer;", "-\tprivate final void expandBuff(boolean wrapAround)", "-\t{", "-\t\tchar[] newbuffer = new char[bufsize + 2048];", "-\t\tint newbufline[] = new int[bufsize + 2048];", "-\t\tint newbufcolumn[] = new int[bufsize + 2048];", "+           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "+           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);", "+           bufline = newbufline;", "-\t\ttry", "-\t\t{", "-\t\t\tif (wrapAround)", "-\t\t\t{", "-\t\t\t\tSystem.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "-\t\t\t\tSystem.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);", "-\t\t\t\tbuffer = newbuffer;", "+           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "+           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);", "+           bufcolumn = newbufcolumn;", "-\t\t\t\tSystem.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "-\t\t\t\tSystem.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);", "-\t\t\t\tbufline = newbufline;", "+           bufpos += (bufsize - tokenBegin);", "+        }", "+        else", "+        {", "+           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "+           buffer = newbuffer;", "-\t\t\t\tSystem.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "-\t\t\t\tSystem.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);", "-\t\t\t\tbufcolumn = newbufcolumn;", "+           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "+           bufline = newbufline;", "-\t\t\t\tbufpos += (bufsize - tokenBegin);", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tSystem.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "-\t\t\t\tbuffer = newbuffer;", "+           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "+           bufcolumn = newbufcolumn;", "-\t\t\t\tSystem.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "-\t\t\t\tbufline = newbufline;", "+           bufpos -= tokenBegin;", "+        }", "+     }", "+     catch (Throwable t)", "+     {", "+        throw new Error(t.getMessage());", "+     }", "-\t\t\t\tSystem.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "-\t\t\t\tbufcolumn = newbufcolumn;", "+     available = (bufsize += 2048);", "+     tokenBegin = 0;", "+  }", "-\t\t\t\tbufpos -= tokenBegin;", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tthrow new Error(t.getMessage());", "-\t\t}", "-\t\tavailable = (bufsize += 2048);", "-\t\ttokenBegin = 0;", "-\t}"]}]}
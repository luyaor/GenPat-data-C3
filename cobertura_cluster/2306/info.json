{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede8084a0412d6f870bdbf31bd3cb2a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8cb578570fbd4c4d2c68190ec4ed1d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "cd43d99664ef623d0850036151631569e3ccae1d", "commitAfterChange": "f78667e9ee49a7a639f2e3a31a4b7194df1a740b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic static synchronized void registerClass(String classa) \t\t\tthrows ClassNotFoundException", "signatureAfterChange": " \tpublic static synchronized void registerClass(String classa) \t\t\tthrows ClassNotFoundException", "diff": ["-\t\t\tClass<?> clazz = Class.forName(classa.replace(\"/\", \".\"), false,", "-\t\t\t\t\tThread.currentThread().getContextClassLoader());", "-\t\t\tfor (Method meth : clazz.getMethods()) {", "-\t\t\t\tif (meth.toString().contains(\"net.sourceforge.cobertura\")) {", "-\t\t\t\t\tregisterClass(clazz);", "-\t\t\t\t\tfound = true;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tClass<?> clazz;", "+            try {", "+                Class.forName(classa.replace(\"/\", \".\"), false,", "+                        Thread.currentThread().getContextClassLoader());", "+                for (Method meth : clazz.getMethods()) {", "+                    if (meth.toString().contains(\"net.sourceforge.cobertura\")) {", "+                        registerClass(clazz);", "+                        found = true;", "+                    }", "+                }", "+            } catch (NoClassDefFoundError ncdfe) {", "+                // \"Expected\", try described fallback", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1b0cf474a70c8d98e6bddf2c1552dc6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/XmlFormatter.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public String printPackageNcss()", "signatureAfterChange": "      public String printPackageNcss()", "diff": ["-        Vector vPackageMetrics = _javancss.getPackageMetrics();", "+        List vPackageMetrics = _javancss.getPackageMetrics();", "-                //added by SMS", "+        //added by SMS", "-        for( Enumeration ePackages = vPackageMetrics.elements()", "-             ; ePackages.hasMoreElements()", "-             ; )", "+        for( Iterator ePackages = vPackageMetrics.iterator(); ePackages.hasNext(); )", "-            PackageMetric pPackageMetric = (PackageMetric)ePackages.nextElement();", "+            PackageMetric pPackageMetric = (PackageMetric)ePackages.next();", "-                        // added by SMS", "+            // added by SMS", "-                                            , javadocSum                                // added by SMS", "+                                         , javadocSum                                // added by SMS"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f372f7fab05707083db286949a0eae", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "metrics/metrics-api/src/main/java/net/sourceforge/cobertura/metrics/api/location/SourceLocationFilter.java", "commitBeforeChange": "6f6a7661efb1fcbc73aa09bb85cdab7bdaf35db8", "commitAfterChange": "d1cf5bb06c93aa997e1f1f2066f2bdd82d480da5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     @Override     public boolean accept(final SourceLocation candidate)", "signatureAfterChange": "     @Override     public boolean accept(final SourceLocation candidate)", "diff": ["-        if(acceptAllInProject) {", "+        if (acceptAllInProject) {", "-            for(LocationScope current : LocationScope.values()) {", "+            for (LocationScope current : COMPARISON_ORDER) {", "-                if(current.compareTo(scope) > 0) {", "+                // Only compare down to the level defined within this SourceLocationFilter.", "+                if (current.compareTo(scope) > 0) {", "-                // Compare", "+                // Compare scope values to actual ones.", "+                final String toMatch = \"\" + candidate.get(current);", "+                final Matcher matcher = locationPatternMap.get(current).matcher(toMatch);", "+                if (!matcher.matches()) {", "+                    return false;", "+                }", "-        return false;", "+", "+        // All OK.", "+        return true;", "+    }"]}]}
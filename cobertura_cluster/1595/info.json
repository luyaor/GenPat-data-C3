{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88145c113e02ed95f8ce6e2c70415861", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91caeb97b797ba994b8e442ff2e2ff7b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic Map withRunningServer(Closure closure) throws Exception", "signatureAfterChange": " \tpublic void withRunningServer() throws Exception", "diff": ["-", "-\tpublic Map withRunningServer(Closure closure) throws Exception {", "-\t\tfreePorts = findFreePorts();", "-\t\tnew File(dir, \"logs\").mkdirs();", "-", "-\t\tstartWebServer(freePorts);", "-\t\tMap data = new HashMap();", "+\tpublic void withRunningServer() throws Exception {", "+\t\tstartWebServer();", "+\t\tMap<String, Object> data = new HashMap<String, Object>();", "-\t\t\tdata.put(\"webappPort\", freePorts.get(\"webapp\"));", "+\t\t\tdata.put(\"webappPort\", webappPort);", "+\t\t\tClosure closure = new Closure(null) {", "+\t\t\t\tprivate static final long serialVersionUID = 1L;", "+\t\t\t\t@SuppressWarnings(\"unused\")", "+\t\t\t\tpublic void doCall(HashMap<String, Object> values) {", "+\t\t\t\t}", "+\t\t\t};", "-", "-\t\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6a73e01446f907970d3a64e6163e0a2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void startWebServer(final Map<String, Integer> freePorts)", "signatureAfterChange": "  \tprivate void startWebServer()", "diff": ["-", "-\tprivate void startWebServer(final Map<String, Integer> freePorts) {", "-\t\tEcho echo = new Echo();", "-\t\techo.setProject(TestUtils.project);", "-\t\techo.setMessage(\"Starting Jetty webapp server on \"", "-\t\t\t\t+ freePorts.get(\"webapp\"));", "-\t\techo.execute();", "+\tprivate void startWebServer() {", "+\t\tSystem.out.println(\"Starting Jetty webapp server on \" + webappPort);", "-\t\t\t\tjettyPort.setValue(freePorts.get(\"webapp\").toString());", "+\t\t\t\tjettyPort.setValue(String.valueOf(webappPort));", "-\t\t\t\tVariable stopPort = new Variable();", "-\t\t\t\tstopPort.setKey(\"STOP.PORT\");", "-\t\t\t\tstopPort.setValue(freePorts.get(\"stop\").toString());", "-\t\t\t\tjava.addSysproperty(stopPort);", "+\t\t\t\tVariable stopPortVariable = new Variable();", "+\t\t\t\tstopPortVariable.setKey(\"STOP.PORT\");", "+\t\t\t\tstopPortVariable.setValue(String.valueOf(stopPort));", "+\t\t\t\tjava.addSysproperty(stopPortVariable);"]}]}
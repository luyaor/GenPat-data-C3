{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d5e2838a21a04e81d2771cd7ad4a132", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76ad6a261780249fd97f34becc2dac08", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "commitAfterChange": "aca3d012a32f8d1cc78e6d8a28c8ae27f9238ef8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-    private void parseArguments(String[] args)", "-    {", "-        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\tprivate void parseArguments(String[] args)", "+\t{", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-        // Parse our parameters", "-        List filePaths = new ArrayList();", "-        for (int i = 0; i < args.length; i++)", "-        {", "-            if (args[i].equals(\"--basedir\")) ", "-            {", "-            \tfilePaths.add( args[i]);", "-            \tfilePaths.add( args[++i]);", "-            }", "-            else if (args[i].equals(\"--datafile\"))", "-                dataFile = new File(args[++i]);", "-            else if (args[i].equals(\"--destination\"))", "-                destinationDirectory = new File(args[++i]);", "-            else if (args[i].equals(\"--ignore\"))", "-            {", "-                String regex = args[++i];", "-                try", "-                {", "-                    Perl5Compiler pc = new Perl5Compiler();", "-                    this.ignoreRegexes.add(pc.compile(regex));", "-                }", "-                catch (MalformedPatternException e)", "-                {", "-                    logger.warn(\"The regular expression \" + regex", "-                            + \" is invalid: \" + e.getLocalizedMessage());", "-                }", "-            }", "+\t\t// Parse our parameters", "+\t\tList filePaths = new ArrayList();", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t{", "+\t\t\tif (args[i].equals(\"--basedir\"))", "+\t\t\t{", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t\tfilePaths.add(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\t\tdestinationDirectory = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t{", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexes.add(pc.compile(regex));", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}", "-            \tfilePaths.add( args[i]);", "-            }", "-        }", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t}", "+\t\t}", "-        // Load coverage data", "-        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-        if (projectData == null)", "-            projectData = new ProjectData();", "+\t\t// Load coverage data", "+\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (projectData == null)", "+\t\t\tprojectData = new ProjectData();", "-        // Instrument classes", "-        String baseDir = null;", "-\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "-        Iterator iter = filePaths.iterator();", "+\t\t// Instrument classes", "+\t\tSystem.out.println(\"Instrumenting \"\t+ filePaths.size() + \" \"", "+\t\t\t\t+ (filePaths.size() == 1 ? \"class\" : \"classes\")", "+\t\t\t\t+ (destinationDirectory != null ? \" to \"", "+\t\t\t\t\t\t+ destinationDirectory.getAbsoluteFile() : \"\"));", "+\t\tString baseDir = null;", "+\t\tIterator iter = filePaths.iterator();", "-        \tString act = (String) iter.next();", "+\t\t\tString act = (String)iter.next();", "-       \t\t\tbaseDir = (String) iter.next();", "+\t\t\t\tbaseDir = (String)iter.next();", "-        \t\taddInstrumentation( baseDir, act);", "-        \t}", "-        }", "-        ", "-        // Save coverage data", "-        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "-    }", "+\t\t\t\taddInstrumentation(baseDir, act);", "+\t\t\t}", "+\t\t}", "+\t\t// Save coverage data", "+\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e5039ba0e1cc43de74eb79d941643e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "b1e7879329998643d42728bb6b8029d8483b12b0", "commitAfterChange": "c357c3ab27173426ddabfdf358bf583cc0ca08c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate static ArgumentsBuilder createArgumentsFromCMDParams(String[] args)", "diff": ["+\tprivate static ArgumentsBuilder createArgumentsFromCMDParams(String[] args) {", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "+", "+\t\t// Parse parameters", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--basedir\")) {", "+\t\t\t\tString baseDir = args[++i];", "+\t\t\t\tbuilder.setBaseDirectory(baseDir);", "+\t\t\t} else if (args[i].equals(\"--datafile\"))", "+\t\t\t\tbuilder.setDataFile(args[++i]);", "+\t\t\telse if (args[i].equals(\"--destination\")) {", "+\t\t\t\tbuilder.setDestinationDirectory(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--ignore\")) {", "+\t\t\t\tbuilder.addIgnoreRegex(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--ignoreMethodAnnotation\")) {", "+\t\t\t\tbuilder.addIgnoreMethodAnnotation(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--ignoreTrivial\")) {", "+\t\t\t\tbuilder.ignoreTrivial(true);", "+\t\t\t} else if (args[i].equals(\"--includeClasses\")) {", "+\t\t\t\tbuilder.addIncludeClassesRegex(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--excludeClasses\")) {", "+\t\t\t\tbuilder.addExcludeClassesRegex(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--failOnError\")) {", "+\t\t\t\tbuilder.failOnError(true);", "+\t\t\t\tlogger.setFailOnError(true);", "+\t\t\t} else if (args[i].equals(\"--threadsafeRigorous\")) {", "+\t\t\t\tbuilder.threadsafeRigorous(true);", "+\t\t\t} else if (args[i].equals(\"--auxClasspath\")) {", "+\t\t\t\taddElementsToJVM(args[++i]);", "+\t\t\t} else {", "+\t\t\t\tbuilder.addFileToInstrument(args[i]);", "+\t\t\t}", "+\t\t}", "+\t\treturn builder;", "+\t}", "-", "-\tprivate void parseArguments(String[] args) {", "-\t\tCollection<Pattern> ignoreRegexes = new Vector<Pattern>();", "-\t\tcoberturaInstrumenter.setIgnoreRegexes(ignoreRegexes);", "-", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-", "-\t\t// Parse our parameters", "-\t\tList<CoberturaFile> filePaths = new ArrayList<CoberturaFile>();", "-\t\tString baseDir = null;", "-", "-\t\tboolean threadsafeRigorous = false;", "-\t\tboolean ignoreTrivial = false;", "-\t\tboolean failOnError = false;", "-\t\tSet<String> ignoreMethodAnnotations = new HashSet<String>();", "-", "-\t\tfor (int i = 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"--basedir\"))", "-\t\t\t\tbaseDir = args[++i];", "-\t\t\telse if (args[i].equals(\"--datafile\"))", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--destination\")) {", "-\t\t\t\tdestinationDirectory = new File(args[++i]);", "-\t\t\t\tcoberturaInstrumenter", "-\t\t\t\t\t\t.setDestinationDirectory(destinationDirectory);", "-\t\t\t} else if (args[i].equals(\"--ignore\")) {", "-\t\t\t\tRegexUtil.addRegex(ignoreRegexes, args[++i]);", "-\t\t\t}", "-\t\t\t/*else if (args[i].equals(\"--ignoreBranches\"))", "-\t\t\t{", "-\t\t\t\tRegexUtil.addRegex(ignoreBranchesRegexes, args[++i]);", "-\t\t\t}*/", "-\t\t\telse if (args[i].equals(\"--ignoreMethodAnnotation\")) {", "-\t\t\t\tignoreMethodAnnotations.add(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--ignoreTrivial\")) {", "-\t\t\t\tignoreTrivial = true;", "-\t\t\t} else if (args[i].equals(\"--includeClasses\")) {", "-\t\t\t\tclassPattern.addIncludeClassesRegex(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--excludeClasses\")) {", "-\t\t\t\tclassPattern.addExcludeClassesRegex(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--failOnError\")) {", "-\t\t\t\tfailOnError = true;", "-\t\t\t\tlogger.setFailOnError(true);", "-\t\t\t} else if (args[i].equals(\"--threadsafeRigorous\")) {", "-\t\t\t\tthreadsafeRigorous = true;", "-\t\t\t} else if (args[i].equals(\"--auxClasspath\")) {", "-\t\t\t\taddElementsToJVM(args[++i]);", "-\t\t\t} else {", "-\t\t\t\tfilePaths.add(new CoberturaFile(baseDir, args[i]));", "-\t\t\t}", "-\t\t}", "-", "-\t\tcoberturaInstrumenter.setIgnoreTrivial(ignoreTrivial);", "-\t\tcoberturaInstrumenter", "-\t\t\t\t.setIgnoreMethodAnnotations(ignoreMethodAnnotations);", "-\t\tcoberturaInstrumenter.setThreadsafeRigorous(threadsafeRigorous);", "-\t\tcoberturaInstrumenter.setFailOnError(failOnError);", "-", "-\t\tProjectData projectData;", "-", "-\t\t// Load previous coverage data (if exists)", "-\t\tprojectData = dataFile.isFile() ? CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile) : new ProjectData();", "-\t\tcoberturaInstrumenter.setProjectData(projectData);", "-", "-\t\t// Instrument classes", "-\t\tlogger.info(\"Instrumenting \"", "-\t\t\t\t+ filePaths.size()", "-\t\t\t\t+ \" \"", "-\t\t\t\t+ (filePaths.size() == 1 ? \"file\" : \"files\")", "-\t\t\t\t+ (destinationDirectory != null ? \" to \"", "-\t\t\t\t\t\t+ destinationDirectory.getAbsoluteFile() : \"\"));", "-", "-\t\tIterator<CoberturaFile> iter = filePaths.iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tCoberturaFile coberturaFile = iter.next();", "-\t\t\tif (coberturaFile.isArchive()) {", "-\t\t\t\taddInstrumentationToArchive(coberturaFile);", "-\t\t\t} else {", "-\t\t\t\taddInstrumentation(coberturaFile);", "-\t\t\t}", "-\t\t}", "-", "-\t\t// Save coverage data (ser file with list of touch points, but not hits registered).", "-\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "-\t}"]}]}
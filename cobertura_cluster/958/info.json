{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1de934269641fa8e524fcd3f81526df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64016de712d09fb080517cba5bab4b8b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": "  \tpublic static void main(String[] args) throws Exception", "diff": ["-\t\tlongOpts[1] = new LongOpt(\"instrumentation\",", "-\t\t\t\tLongOpt.REQUIRED_ARGUMENT, null, 'i');", "+\t\tlongOpts[1] = new LongOpt(\"datafile\",", "+\t\t\t\tLongOpt.REQUIRED_ARGUMENT, null, 'd');", "-\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:i:o:s:\",", "+\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:d:o:s:\",", "-\t\t\t\tcase 'i':", "-\t\t\t\t\tserializationFile = new File(g.getOptarg());", "-\t\t\t\t\tif (!serializationFile.exists())", "+\t\t\t\tcase 'd':", "+\t\t\t\t\tdataFile = new File(g.getOptarg());", "+\t\t\t\t\tif (!dataFile.exists())", "-\t\t\t\t\t\tthrow new Exception(\"Error: serialization file \"", "-\t\t\t\t\t\t\t\t+ serializationFile + \" does not exist\");", "+\t\t\t\t\t\tthrow new Exception(\"Error: data file \"", "+\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "+\t\t\t\t\t\t\t\t+ \" does not exist\");", "-\t\t\t\t\tif (serializationFile.isDirectory())", "+\t\t\t\t\tif (dataFile.isDirectory())", "-\t\t\t\t\t\tthrow new Exception(\"Error: serialization file \"", "-\t\t\t\t\t\t\t\t+ serializationFile", "+\t\t\t\t\t\tthrow new Exception(\"Error: data file \"", "+\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\tlogger.debug(\"serializationFile is \"", "-\t\t\t\t\t+ serializationFile.getAbsolutePath());", "+\t\t\tlogger.debug(\"dataFile is \"", "+\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\tInputStream is = null;", "-\t\tObjectInputStream objects = null;", "-\t\ttry", "-\t\t{", "-\t\t\tis = new FileInputStream(serializationFile);", "-\t\t\tobjects = new ObjectInputStream(is);", "-\t\t\tMap coverageData = (Map)objects.readObject();", "-\t\t\tCoverageReport coverage = new CoverageReport(coverageData);", "+\t\tif (dataFile == null)", "+\t\t\tdataFile = new File(CoverageDataFileHandler.FILE_NAME);", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\tif (format.equalsIgnoreCase(\"xml\"))", "-\t\t\t{", "-\t\t\t\tnew XMLReport(coverage, outputDir, sourceDir);", "-\t\t\t}", "-\t\t\telse if (format.equalsIgnoreCase(\"html\"))", "-\t\t\t{", "-\t\t\t\tnew HTMLReport(coverage, outputDir, sourceDir);", "-\t\t\t}", "-\t\t}", "-\t\tfinally", "+\t\tif (format.equalsIgnoreCase(\"html\"))", "-\t\t\tif (is != null)", "-\t\t\t\tis.close();", "-\t\t\tif (objects != null)", "-\t\t\t\tobjects.close();", "+\t\t\tnew HTMLReport(projectData, outputDir, sourceDir);", "+\t\t}", "+\t\telse if (format.equalsIgnoreCase(\"xml\"))", "+\t\t{", "+\t\t\tnew XMLReport(projectData, outputDir, sourceDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732dc94f6ff23f98f3c047d5c015a816", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "commitAfterChange": "d0e0a0f0aa7d8408ac3779914ce8b50e1c541921", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "\r \r   final public void EnumDeclaration(int modifiers) throws ParseException", "signatureAfterChange": "\r \r   final public void EnumDeclaration(int modifiers) throws ParseException", "diff": ["-                _sClass += new String(getToken(0).image);\r", "+                _sClass += getToken(0).image;\r", "-                 Vector vMetrics = new Vector();\r", "-                 vMetrics.addElement(new String(_sPackage + _sClass));\r", "-                 vMetrics.addElement(new Integer(_ncss - oldNcss));\r", "-                 vMetrics.addElement(new Integer(_functions - oldFunctions));\r", "-                 vMetrics.addElement(new Integer(_classes - oldClasses));\r", "+                 ObjectMetric metric = new ObjectMetric();\r", "+                 metric.name = _sPackage + _sClass;\r", "+                 metric.ncss = _ncss - oldNcss;\r", "+                 metric.functions = _functions - oldFunctions;\r", "+                 metric.classes = _classes - oldClasses;\r", "-                 vMetrics.addElement( new Integer( lastToken.endLine ) );\r", "-                 vMetrics.addElement( new Integer( lastToken.endColumn ) );\r", "-                 vMetrics.addElement( new Integer( _javadocs ) );\r", "+                 //metric.add( new Integer( lastToken.endLine ) );\r", "+                 //metric.add( new Integer( lastToken.endColumn ) );\r", "+                 metric.javadocs = _javadocs;\r", "-                 vMetrics.addElement( new Integer(_jvdcLines));\r", "-                 vMetrics.addElement( new Integer(JavaParserTokenManager._iSingleComments - oldSingle));\r", "-                 vMetrics.addElement( new Integer(JavaParserTokenManager._iMultiComments - oldMulti));\r", "+                 metric.javadocsLn = _jvdcLines;\r", "+                 metric.singleLn = JavaParserTokenManager._iSingleComments - oldSingle;\r", "+                 metric.multiLn = JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                 _vClasses.addElement(vMetrics);\r", "+                 _vClasses.add(metric);\r"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "363c222b7ebf803fd361226ef9b59fcf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "417dcdee82395e598b059d1853531197", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "commitAfterChange": "aca3d012a32f8d1cc78e6d8a28c8ae27f9238ef8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public static void main(String[] args)", "signatureAfterChange": "  \tpublic static void main(String[] args)", "diff": ["-    public static void main(String[] args)", "-    {", "-        long startTime = System.currentTimeMillis();", "-        Main main = new Main();", "+\tpublic static void main(String[] args)", "+\t{", "+\t\tHeader.print(System.out);", "-        boolean hasCommandsFile = false;", "-        String commandsFileName = null;", "-        for (int i = 0; i < args.length; i++)", "-        {", "-            if (args[i].equals(\"--commandsfile\"))", "-            {", "-                hasCommandsFile = true;", "-                commandsFileName = args[++i];", "-            }", "-        }", "+\t\tlong startTime = System.currentTimeMillis();", "-        if (hasCommandsFile)", "-        {", "-            List arglist = new ArrayList();", "-            BufferedReader bufferedReader = null;", "+\t\tMain main = new Main();", "-            try", "-            {", "-                bufferedReader = new BufferedReader(new FileReader(", "-                        commandsFileName));", "-                String line;", "+\t\tboolean hasCommandsFile = false;", "+\t\tString commandsFileName = null;", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t{", "+\t\t\tif (args[i].equals(\"--commandsfile\"))", "+\t\t\t{", "+\t\t\t\thasCommandsFile = true;", "+\t\t\t\tcommandsFileName = args[++i];", "+\t\t\t}", "+\t\t}", "-                while ((line = bufferedReader.readLine()) != null)", "-                    arglist.add(line);", "+\t\tif (hasCommandsFile)", "+\t\t{", "+\t\t\tList arglist = new ArrayList();", "+\t\t\tBufferedReader bufferedReader = null;", "-            }", "-            catch (IOException e)", "-            {", "-                logger.fatal(\"Unable to read temporary commands file \"", "-                        + commandsFileName + \".\");", "-                logger.info(e);", "-            }", "-            finally", "-            {", "-                if (bufferedReader != null)", "-                {", "-                    try", "-                    {", "-                        bufferedReader.close();", "-                    }", "-                    catch (IOException e)", "-                    {", "-                    }", "-                }", "-            }", "+\t\t\ttry", "+\t\t\t{", "+\t\t\t\tbufferedReader = new BufferedReader(new FileReader(", "+\t\t\t\t\t\tcommandsFileName));", "+\t\t\t\tString line;", "-            args = (String[])arglist.toArray(new String[arglist.size()]);", "-        }", "+\t\t\t\twhile ((line = bufferedReader.readLine()) != null)", "+\t\t\t\t\targlist.add(line);", "-        main.parseArguments(args);", "+\t\t\t}", "+\t\t\tcatch (IOException e)", "+\t\t\t{", "+\t\t\t\tlogger.fatal(\"Unable to read temporary commands file \"", "+\t\t\t\t\t\t+ commandsFileName + \".\");", "+\t\t\t\tlogger.info(e);", "+\t\t\t}", "+\t\t\tfinally", "+\t\t\t{", "+\t\t\t\tif (bufferedReader != null)", "+\t\t\t\t{", "+\t\t\t\t\ttry", "+\t\t\t\t\t{", "+\t\t\t\t\t\tbufferedReader.close();", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (IOException e)", "+\t\t\t\t\t{", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-        long stopTime = System.currentTimeMillis();", "-        System.out.println(\"Instrument time: \" + (stopTime - startTime) + \"ms\");", "-    }", "+\t\t\targs = (String[])arglist.toArray(new String[arglist.size()]);", "+\t\t}", "+", "+\t\tmain.parseArguments(args);", "+", "+\t\tlong stopTime = System.currentTimeMillis();", "+\t\tSystem.out.println(\"Instrument time: \" + (stopTime - startTime) + \"ms\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c669be8279a2764f54e61b6fbf06746", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "commitAfterChange": "aca3d012a32f8d1cc78e6d8a28c8ae27f9238ef8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": " \t \tpublic static void main(String[] args) throws Exception", "diff": ["+\t\tHeader.print(System.out);", "+"]}]}
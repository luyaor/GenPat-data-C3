{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f71df6ac68e4e6be3a7b1d45a295269b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9014025689d729c0decfebcb04eb7c83", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tthis.isBranch |= lineData.isBranch();", "+\t\tif (lineData.jumps != null)", "+\t\t\tif (this.jumps == null) ", "+\t\t\t\tthis.jumps = lineData.jumps;", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()) - 1; i >= 0; i--)", "+\t\t\t\t\t((JumpData) this.jumps.get(i)).merge((JumpData) lineData.jumps.get(i));", "+\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()); i < lineData.jumps.size(); i++) ", "+\t\t\t\t\tthis.jumps.add(lineData.jumps.get(i));", "+\t\t\t}", "+\t\tif (lineData.switches != null)", "+\t\t\tif (this.switches == null) ", "+\t\t\t\tthis.switches = lineData.switches;", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()) - 1; i >= 0; i--)", "+\t\t\t\t\t((SwitchData) this.switches.get(i)).merge((SwitchData) lineData.switches.get(i));", "+\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()); i < lineData.switches.size(); i++) ", "+\t\t\t\t\tthis.switches.add(lineData.switches.get(i));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e625472dec2327371e6cf647619d96f4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/LineDataTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testGetNumbers()", "signatureAfterChange": "  \tpublic void testGetNumbers()", "diff": ["-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\ta.setBranch(true);", "+\t\ta.addJump(0);", "+\t\ta.addJump(1);", "-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tassertEquals(1, a.getNumberOfValidBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "-\t\t\tassertEquals(1, a.getBranchCoverageRate(), 0);", "+\t\t\tassertEquals(0, a.getBranchCoverageRate(), 0);", "-\t\t\tassertEquals(1, a.getNumberOfCoveredBranches());", "-\t\t\tassertEquals(1, a.getNumberOfValidBranches());", "+\t\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\t\tassertEquals(4, a.getNumberOfValidBranches());", "-\t\ta.setBranch(false);", "+\t\ta.touchJump(0, true);", "+\t\tassertEquals(0.25, a.getBranchCoverageRate(), 0);", "+\t\tassertEquals(1, a.getLineCoverageRate(), 0);", "+\t\tassertEquals(1, a.getNumberOfCoveredLines());", "+\t\tassertEquals(1, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "+\t\tassertEquals(1, a.getNumberOfValidLines());", "+", "+\t\ta.touchJump(1, false);", "+\t\tassertEquals(0.5, a.getBranchCoverageRate(), 0);", "+\t\tassertEquals(1, a.getLineCoverageRate(), 0);", "+\t\tassertEquals(1, a.getNumberOfCoveredLines());", "+\t\tassertEquals(2, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "+\t\tassertEquals(1, a.getNumberOfValidLines());", "+", "+\t\ta.touchJump(1, true);", "+\t\tassertEquals(0.75, a.getBranchCoverageRate(), 0);", "+\t\tassertEquals(1, a.getLineCoverageRate(), 0);", "+\t\tassertEquals(1, a.getNumberOfCoveredLines());", "+\t\tassertEquals(3, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "+\t\tassertEquals(1, a.getNumberOfValidLines());", "+", "+\t\ta.touchJump(0, false);", "-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tassertEquals(0, a.getNumberOfValidBranches());", "+\t\tassertEquals(4, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());"]}]}
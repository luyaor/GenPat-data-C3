{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "092e1d62eb9f1ab3a6802a3af40d2ba4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43720d78799f8864284040a047399447", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "9a830b0110b84315c0c267421611842128c2ca35", "commitAfterChange": "2d04adc2554406c41824d5b965907076ecdceb80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void addClassData(ClassData classData)", "signatureAfterChange": "  \tpublic void addClassData(ClassData classData)", "diff": ["-", "-\t    // this method aggregates data if classData is an inner class", "-\t    //  with the data from the top level class that it is contained in", "-\t    LOGGER.debug(\"addClassData: \" + classData.getName());", "-\t    String parentClassName = getClassNameIgnoreInner(classData.getName());", "-\t    LOGGER.debug(\"\\tparentClassName = \" + parentClassName);", "-\t    String keyName = new ClassData(parentClassName).getBaseName();", "-\t    LOGGER.debug(\"\\tkeyName = \" + keyName);", "-\t    ", "-\t    ClassData parent = getClassData(classData.getName());", "-        if (parent == null) {", "-            LOGGER.debug(\"\\tno parent\");", "-            parent = new ClassData(parentClassName);", "-        }", "-        classData.merge(parent);", "-", "-\t\t// Each key is a class basename, stored as an String object.", "-\t\t// Each value is information about the class, stored as a ClassData object.", "-        LOGGER.debug(\"putting \" + keyName + \" = \" + classData.getName());", "-\t\tchildren.put(keyName, classData);", "+\t\tString sourceFileName = classData.getSourceFileName();", "+\t\tSourceFileData sourceFileData = (SourceFileData)children.get(sourceFileName);", "+\t\tif (sourceFileData == null)", "+\t\t{", "+\t\t\tsourceFileData = new SourceFileData(sourceFileName);", "+\t\t\t// Each key is a source file name, stored as an String object.", "+\t\t\t// Each value is information about the source file, stored as", "+\t\t\t// a SourceFileData object.", "+\t\t\tthis.children.put(sourceFileName, sourceFileData);", "+\t\t}", "+\t\tsourceFileData.addClassData(classData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca56a8674c06e4aa7d83255196df6d6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args) throws Throwable", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\tprivate void parseArguments(String[] args) throws Throwable", "-\t{", "+\tprivate void parseArguments(String[] args){", "+\t\tCollection<Pattern> ignoreRegexes = new Vector<Pattern>();", "+\t\tcoberturaInstrumenter.setIgnoreRegexes(ignoreRegexes);", "+\t\t", "+\t\t", "-\t\tList filePaths = new ArrayList();", "+\t\tList<CoberturaFile> filePaths = new ArrayList<CoberturaFile>();", "-\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\telse if (args[i].equals(\"--destination\")){", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t\tcoberturaInstrumenter.setDestinationDirectory(destinationDirectory);", "+\t\t\t}else if (args[i].equals(\"--ignore\"))", "-\t\t\telse if (args[i].equals(\"--ignoreBranches\"))", "+\t\t\t/*else if (args[i].equals(\"--ignoreBranches\"))", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignoreMethodAnnotation\")) {", "-\t\t\t\tignoreMethodAnnotations.add(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignoreTrivial\")) {", "-\t\t\t\tignoreTrivial = true;", "-\t\t\t}", "+\t\t\t}*/", "-\t\t\telse if (args[i].equals(\"--failOnError\"))", "-\t\t\t{", "-\t\t\t\tlogger.setFailOnError(true);", "-\t\t\t}", "+\t\t", "+\t\tProjectData projectData;", "-\t\tif (dataFile.isFile())", "+\t\tif (dataFile.isFile()){", "-\t\tif (projectData == null)", "+\t\t}else{", "+\t\t};", "+\t\tcoberturaInstrumenter.setProjectData(projectData);", "+\t\t", "+\t\t", "-\t\tIterator iter = filePaths.iterator();", "+\t\tIterator<CoberturaFile> iter = filePaths.iterator();", "-\t\t\tCoberturaFile coberturaFile = (CoberturaFile)iter.next();", "+\t\t\tCoberturaFile coberturaFile = iter.next();", "-", "+\t\t", "+//\t\tProjectData.turnOffAutoSave();"]}]}
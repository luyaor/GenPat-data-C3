{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d675a92ed23e22b713841f02fe557482", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27ddc8df77418b9471b71e06449baee", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "4b9e07aec6aa7a210484d3d9f12082a7dee4a0ae", "commitAfterChange": "8d9e5d2c0ac5dd3ae1467df0071d4e5b6c845132", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "diff": ["-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "-\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes);", "-\t\t\t\t\tcr.accept(cv, false);", "-", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\ttry", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t\tmodified = true;", "-\t\t\t\t\t\toutputEntry.setTime(System.currentTimeMillis());", "+\t\t\t\t\t\t// Instrument class", "+\t\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "+\t\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "+\t\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes);", "+\t\t\t\t\t\tcr.accept(cv, false);", "+\t", "+\t\t\t\t\t\t// If class was instrumented, get bytes that define the", "+\t\t\t\t\t\t// class", "+\t\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "+\t\t\t\t\t\t\t\t\t+ entry.getName());", "+\t\t\t\t\t\t\tentryBytes = cw.toByteArray();", "+\t\t\t\t\t\t\tmodified = true;", "+\t\t\t\t\t\t\toutputEntry.setTime(System.currentTimeMillis());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (Throwable t)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tif (entry.getName().endsWith(\"_Stub.class\"))", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t//no big deal - it is probably an RMI stub, and they don't need to be instrumented", "+\t\t\t\t\t\t\tlogger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tlogger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);", "+\t\t\t\t\t\t}", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry.getName(), e);", "+\t\t\t}", "+\t\t\tcatch (Throwable t)", "+\t\t\t{", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry.getName(), t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b64e03d8afabbcfb33b06f30ba58ed16", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "      private void addInstrumentationToArchive(ZipInputStream archive,             ZipOutputStream output) throws Exception", "diff": ["+    private void addInstrumentationToArchive(ZipInputStream archive,", "+            ZipOutputStream output) throws Exception", "+    {", "+        ZipEntry entry;", "+        while ((entry = archive.getNextEntry()) != null)", "+        {", "+            try", "+            {", "+                ZipEntry outputEntry = new ZipEntry(entry.getName());", "+                output.putNextEntry(outputEntry);", "+                // Read current entry", "+                byte[] entryBytes = IOUtil", "+                        .createByteArrayFromInputStream(archive);", "+                // Check if we have class file", "+                if (isClass(entry))", "+                {", "+                    // Instrument class", "+                    ClassReader cr = new ClassReader(entryBytes);", "+                    ClassWriter cw = new ClassWriter(true);", "+                    ClassInstrumenter cv = new ClassInstrumenter(projectData,", "+                            cw, ignoreRegexes);", "+                    cr.accept(cv, false);", "+                    // If class was instrumented, get bytes that define the", "+                    // class", "+                    if (cv.isInstrumented())", "+                    {", "+                        logger.debug(\"Putting instrumeted entry: \"", "+                                + entry.getName());", "+                        entryBytes = cw.toByteArray();", "+                    }", "+                }", "+                // Add entry to the output", "+                output.write(entryBytes);", "+                output.closeEntry();", "+                archive.closeEntry();", "+            }", "+            catch (Exception e)", "+            {", "+                logger.warn(\"Problems with archive entry: \" + entry);", "+                throw e;", "+            }", "+            output.flush();", "+        }", "+    }", "-\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "-\t\t\tZipOutputStream output) throws Exception", "-\t{", "-\t\tZipEntry entry;", "-\t\twhile ((entry = archive.getNextEntry()) != null)", "-\t\t{", "-\t\t\ttry", "-\t\t\t{", "-\t\t\t\tZipEntry outputEntry = new ZipEntry(entry.getName());", "-\t\t\t\toutput.putNextEntry(outputEntry);", "-\t\t\t\t// Read current entry", "-\t\t\t\tbyte[] entryBytes = IOUtil", "-\t\t\t\t\t\t.createByteArrayFromInputStream(archive);", "-\t\t\t\t// Check if we have class file", "-\t\t\t\tif (isClass(entry))", "-\t\t\t\t{", "-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(", "-\t\t\t\t\t\t\tthis.projectData, cw, this.ignoreRegexs);", "-\t\t\t\t\tcr.accept(cv, false);", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumeted entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// Add entry to the output", "-\t\t\t\toutput.write(entryBytes);", "-\t\t\t\toutput.closeEntry();", "-\t\t\t\tarchive.closeEntry();", "-\t\t\t}", "-\t\t\tcatch (Exception e)", "-\t\t\t{", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "-\t\t\t}", "-\t\t\toutput.flush();", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9104052e9827757d54b03a922dacabe", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "diff": ["-", "-\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "-\t\t\tZipOutputStream output) throws Exception", "-\t{", "-\t\tZipEntry entry;", "-\t\twhile ((entry = archive.getNextEntry()) != null)", "-\t\t\ttry", "-\t\t\t\tZipEntry outputEntry = new ZipEntry(entry.getName());", "-\t\t\t\toutput.putNextEntry(outputEntry);", "-\t\t\t\t// Read current entry", "-\t\t\t\tbyte[] entryBytes = IOUtil", "-\t\t\t\t\t\t.createByteArrayFromInputStream(archive);", "-", "-\t\t\t\t// Check if we have class file", "-\t\t\t\tif (isClass(entry))", "-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "-\t\t\t\t\t\t\tcw, ignoreRegex);", "-\t\t\t\t\tcr.accept(cv, false);", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumeted entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t}", "-\t\t\t\t// Add entry to the output", "-\t\t\t\toutput.write(entryBytes);", "-\t\t\t\toutput.closeEntry();", "-\t\t\t\tarchive.closeEntry();", "-\t\t\tcatch (Exception e)", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "-\t\t\toutput.flush();", "+\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "+\t\t\tZipOutputStream output) throws Exception", "+\t\tZipEntry entry;", "+\t\twhile ((entry = archive.getNextEntry()) != null)", "+\t\t\ttry", "+\t\t\t\tZipEntry outputEntry = new ZipEntry(entry.getName());", "+\t\t\t\toutput.putNextEntry(outputEntry);", "+\t\t\t\t// Read current entry", "+\t\t\t\tbyte[] entryBytes = IOUtil", "+\t\t\t\t\t\t.createByteArrayFromInputStream(archive);", "+", "+\t\t\t\t// Check if we have class file", "+\t\t\t\tif (isClass(entry))", "+\t\t\t\t{", "+\t\t\t\t\t// Instrument class", "+\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "+\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(", "+\t\t\t\t\t\t\tthis.projectData, cw, this.ignoreRegexs);", "+\t\t\t\t\tcr.accept(cv, false);", "+", "+\t\t\t\t\t// If class was instrumented, get bytes that define the", "+\t\t\t\t\t// class", "+\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\t{", "+\t\t\t\t\t\tlogger.debug(\"Putting instrumeted entry: \"", "+\t\t\t\t\t\t\t\t+ entry.getName());", "+\t\t\t\t\t\tentryBytes = cw.toByteArray();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\t// Add entry to the output", "+\t\t\t\toutput.write(entryBytes);", "+\t\t\t\toutput.closeEntry();", "+\t\t\t\tarchive.closeEntry();", "+\t\t\t}", "+\t\t\tcatch (Exception e)", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "+\t\t\t\tthrow e;", "+\t\t\toutput.flush();"]}]}
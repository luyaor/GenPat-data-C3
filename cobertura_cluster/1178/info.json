{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c7d9a10b5c3b40861770a25c6cac00d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e901a7949fd3c5d2471b4307a6cdf476", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Javancss(String[] asArgs_, String sRcsHeader_)", "signatureAfterChange": "     public Javancss(String[] asArgs_, String sRcsHeader_) throws IOException", "diff": ["-    public Javancss(String[] asArgs_, String sRcsHeader_) {", "+    public Javancss(String[] asArgs_, String sRcsHeader_) throws IOException {", "-        Hashtable htOptions = _pInit.getOptions();", "+        Map htOptions = _pInit.getOptions();", "+", "+        setEncoding( (String) htOptions.get( \"encoding\" ) );", "-            pTest.setTestDir( FileUtil.concatPath( _pInit.getApplicationPath()", "-                                                   , \"test\" )                 );", "+            pTest.setTestDir( new File( _pInit.getApplicationPath(), \"test\" ) );", "-        _vJavaSourceFiles = _pInit.getArguments();", "-", "-        if ( Util.isDebug() )", "-        {", "-            Util.debug( \"_vJavaSourceFiles: \" + Util.toString( _vJavaSourceFiles ) );", "-        }", "-        if ( htOptions.get( \"recursive\" ) != null )", "-        {", "-            // If no files then add current directory!", "-            if ( _vJavaSourceFiles.size() == 0 )", "-            {", "-                _vJavaSourceFiles.addElement( \".\" );", "-            }", "-           ", "-            Vector newFiles = new Vector();", "-            Enumeration iter = _vJavaSourceFiles.elements();", "-            while( iter.hasMoreElements() ) ", "-            {", "-                String fileName = FileUtil.normalizeFileName( (String)iter.nextElement() );", "-                File   file = new File( fileName );", "-                if( file.isDirectory() ) ", "-                {", "-                    _addJavaFiles( file, newFiles );", "-                }", "-            }", "-            if( newFiles.size() != 0 )", "-            {", "-                for( int i = 0; i < newFiles.size(); i++ )", "-                {", "-                    _vJavaSourceFiles.add( newFiles.elementAt( i ) );", "-                }", "-            }", "-           ", "-            _removeDirs( _vJavaSourceFiles );", "-        }", "-", "-        if ( Util.isDebug() )", "-        {", "-            Util.debug( \"_vJavaSourceFiles: \" + Util.toString( _vJavaSourceFiles ) );", "-        }", "+        _vJavaSourceFiles = findFiles( _pInit.getArguments(), htOptions.get( \"recursive\" ) != null );", "-                _measureRoot(System.in);", "+                _measureRoot(newReader(System.in));", "-            _measureRoot( System.in );", "+            _measureRoot( newReader( System.in ) );", "-        PrintStream ps = System.out;", "+        OutputStream out = System.out;", "-                ps = new PrintStream( new BufferedOutputStream( new FileOutputStream( FileUtil.normalizeFileName( sOutputFile ) ) ) );", "+                out = new FileOutputStream( FileUtil.normalizeFileName( sOutputFile ) );", "-                ps = System.out;", "+                out = System.out;", "+        // TODO: encoding configuration support for result output", "+        PrintWriter pw = useXML() ? new PrintWriter(new OutputStreamWriter(out, \"UTF-8\")) : new PrintWriter(out);", "-            ps.print( XmlFormatter.printStart() );", "+            pw.print( XmlFormatter.printStart() );", "-            ps.print( printPackageNcss() );", "+            pw.print( printPackageNcss() );", "-                ps.println();", "+                pw.println();", "-            ps.print( printObjectNcss() );", "+            pw.print( printObjectNcss() );", "-                ps.println();", "+                pw.println();", "-            ps.print( printFunctionNcss() );", "+            pw.print( printFunctionNcss() );", "-            ps.print( printJavaNcss() );", "+            pw.print( printJavaNcss() );", "-                ps.print( printJavaNcss() );", "+                pw.print( printJavaNcss() );", "-            ps.println( \"</javancss>\" );", "+            pw.println( \"</javancss>\" );", "-            ps.close();", "+            pw.close();", "-            // standard out is used", "-            //ps.flush();", "+            // stdout is used: don't close but ensure everything is flushed", "+            pw.flush();", "-        ps = null;", "+        pw = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecc785f388634c23d43f01f504324799", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void _removeDirs( Vector vDirs )", "signatureAfterChange": "     private List findFiles( List filenames, boolean recursive ) throws IOException", "diff": ["-    private void _removeDirs( Vector vDirs )", "+    private List/*<File>*/ findFiles( List/*<String>*/ filenames, boolean recursive ) throws IOException", "-            Util.debug( this, \"_removeDirs(..).vDirs: \" + Util.toString( vDirs ) );", "+            Util.debug( \"filenames: \" + Util.toString( filenames ) );", "-        // Do it in reverse order, or we will have a problem ", "-        // when removing elements.", "-        for( int i = vDirs.size() - 1; i >= 0; i-- )", "+        if ( recursive && ( filenames.size() == 0 ) )", "-            String sFile = FileUtil.normalizeFileName( (String)vDirs.elementAt( i ) );", "-            Util.debug( this, \"_removeDirs(..).sFile: \" + sFile );", "-            if( FileUtil.existsDir( sFile ) )", "+            // If no files then add current directory!", "+            filenames.add( \".\" );", "+        }", "+", "+        Set _processedAtFiles = new HashSet();", "+        List newFiles = new ArrayList();", "+        for ( Iterator iter = filenames.iterator(); iter.hasNext(); )", "+        {", "+            String filename = (String)iter.next();", "+", "+            // if the file specifies other files...", "+            if ( filename.startsWith( \"@\" ) )", "-                vDirs.removeElementAt( i );", "-                Util.debug( this, \"_removeDirs(..).removed: \" + sFile );", "+                filename = filename.substring( 1 );", "+                if ( filename.length() > 1 )", "+                {", "+                    filename = FileUtil.normalizeFileName( filename );", "+                    if ( _processedAtFiles.add( filename ) )", "+                    {", "+                        String sJavaSourceFileNames = null;", "+                        try", "+                        {", "+                            sJavaSourceFileNames = FileUtil.readFile( filename );", "+                        }", "+                        catch( IOException pIOException ) ", "+                        {", "+                            _sErrorMessage = \"File Read Error: \" + filename;", "+                            _thrwError = pIOException;", "+                            throw pIOException;", "+                        }", "+                        List vTheseJavaSourceFiles = Util.stringToLines( sJavaSourceFileNames );", "+                        for ( Iterator iterator = vTheseJavaSourceFiles.iterator(); iterator.hasNext(); )", "+                        {", "+                            newFiles.add( new File( (String)iterator.next() ) );", "+                        }", "+                    }", "+                }", "+            }", "+            else", "+            {", "+                filename = FileUtil.normalizeFileName( filename );", "+                File file = new File( filename );", "+                if ( file.isDirectory() ) ", "+                {", "+                    _addJavaFiles( file, newFiles );", "+                }", "+                else", "+                {", "+                    newFiles.add( file );", "+                }", "+", "+        if ( Util.isDebug() )", "+        {", "+            Util.debug( \"resolved filenames: \" + Util.toString( newFiles ) );", "+        }", "+", "+        return newFiles;"]}]}
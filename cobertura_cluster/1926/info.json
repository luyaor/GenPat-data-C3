{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4c0d24635a6f0289c87c398b6d1d116", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba444f3d26c464ef948e4f7282e96167", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "\r \r   final public void UnaryExpressionNotPlusMinus() throws ParseException", "signatureAfterChange": "    final public void UnaryExpressionNotPlusMinus() throws ParseException", "diff": ["-\r", "-  final public void UnaryExpressionNotPlusMinus() throws ParseException {\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case BANG:\r", "-    case TILDE:\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case TILDE:\r", "-        jj_consume_token(TILDE);\r", "-        break;\r", "-      case BANG:\r", "-        jj_consume_token(BANG);\r", "-        break;\r", "-      default:\r", "-        jj_la1[111] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-      UnaryExpression();\r", "-      break;\r", "-    default:\r", "-      jj_la1[112] = jj_gen;\r", "-      if (jj_2_27(2147483647)) {\r", "-        CastExpression();\r", "-      } else {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case SHORT:\r", "-        case SUPER:\r", "-        case THIS:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-          PostfixExpression();\r", "-          break;\r", "-        default:\r", "-          jj_la1[113] = jj_gen;\r", "-          jj_consume_token(-1);\r", "-          throw new ParseException();\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+", "+  final public void UnaryExpressionNotPlusMinus() throws ParseException {", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case BANG:", "+    case TILDE:", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case TILDE:", "+        jj_consume_token(TILDE);", "+        break;", "+      case BANG:", "+        jj_consume_token(BANG);", "+        break;", "+      default:", "+        jj_la1[111] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+      UnaryExpression();", "+      break;", "+    default:", "+      jj_la1[112] = jj_gen;", "+      if (jj_2_26(2147483647)) {", "+        CastExpression();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+          PostfixExpression();", "+          break;", "+        default:", "+          jj_la1[113] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce3ad78a44d1e938bc58afdb8cba53c9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "\r \r   final public void UnaryExpressionNotPlusMinus() throws ParseException", "signatureAfterChange": "    final public void UnaryExpressionNotPlusMinus() throws ParseException", "diff": ["-\r", "-  final public void UnaryExpressionNotPlusMinus() throws ParseException {\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case BANG:\r", "-    case TILDE:\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case TILDE:\r", "-        jj_consume_token(TILDE);\r", "-        break;\r", "-      case BANG:\r", "-        jj_consume_token(BANG);\r", "-        break;\r", "-      default:\r", "-        jj_la1[111] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-      UnaryExpression();\r", "-      break;\r", "-    default:\r", "-      jj_la1[112] = jj_gen;\r", "-      if (jj_2_27(2147483647)) {\r", "-        CastExpression();\r", "-      } else {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case SHORT:\r", "-        case SUPER:\r", "-        case THIS:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-          PostfixExpression();\r", "-          break;\r", "-        default:\r", "-          jj_la1[113] = jj_gen;\r", "-          jj_consume_token(-1);\r", "-          throw new ParseException();\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+", "+  final public void UnaryExpressionNotPlusMinus() throws ParseException {", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case BANG:", "+    case TILDE:", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case TILDE:", "+        jj_consume_token(TILDE);", "+        break;", "+      case BANG:", "+        jj_consume_token(BANG);", "+        break;", "+      default:", "+        jj_la1[111] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+      UnaryExpression();", "+      break;", "+    default:", "+      jj_la1[112] = jj_gen;", "+      if (jj_2_26(2147483647)) {", "+        CastExpression();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+          PostfixExpression();", "+          break;", "+        default:", "+          jj_la1[113] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+      }", "+    }", "+  }"]}]}
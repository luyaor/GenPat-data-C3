{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2858e2ebd4078a77086a2f20c9247d88", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27d6c3ae4e7b5243e726a6ecfcb8ec0f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "b1e7879329998643d42728bb6b8029d8483b12b0", "commitAfterChange": "c357c3ab27173426ddabfdf358bf583cc0ca08c3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args) throws Exception", "signatureAfterChange": "  \tprivate static void parseArgumentsAndReport(String[] args) throws Exception", "diff": ["+\tprivate static void parseArgumentsAndReport(String[] args) throws Exception {", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "-\tprivate void parseArguments(String[] args) throws Exception {", "-\t\tFileFinder finder = new FileFinder();", "+\t\tString format = null;", "+\t\tboolean sourcesParam = false;", "+\t\t\t\tbuilder.setBaseDirectory(baseDir);", "-\t\t\t\tsetDataFile(args[++i]);", "+\t\t\t\tString datafile = args[++i];", "+\t\t\t\tvalidateDataFile(datafile);", "+\t\t\t\tbuilder.setDataFile(datafile);", "-\t\t\t\tsetDestination(args[++i]);", "+\t\t\t\tString destination = args[++i];", "+\t\t\t\tbuilder.setDestinationDirectory(destination);", "+\t\t\t\tvalidateAndCreateDestinationDirectory(destination);", "-\t\t\t\tsetFormat(args[++i]);", "+\t\t\t\tformat = args[++i];", "+\t\t\t\tvalidateFormat(format);", "-\t\t\t\tsetEncoding(args[++i]);", "+\t\t\t\tbuilder.setEncoding(args[++i]);", "-\t\t\t\tif (baseDir == null) {", "-\t\t\t\t\tfinder.addSourceDirectory(args[i]);", "-\t\t\t\t} else {", "-\t\t\t\t\tfinder.addSourceFile(baseDir, args[i]);", "-\t\t\t\t}", "+\t\t\t\tbuilder.addSources(args[i], baseDir == null);", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tArguments arguments = builder.build();", "-\t\tif (destinationDir == null) {", "+\t\tif (arguments.getDestinationDirectory() == null) {", "-\t\tif (format == null) {", "-\t\t\tSystem.err.println(\"Error: format must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t\tLOGGER.debug(\"format is \" + format + \" encoding is \" + encoding);", "-\t\t\tLOGGER.debug(\"dataFile is \" + dataFile.getAbsolutePath());", "+\t\t\tLOGGER.debug(String.format(\"format is %s encoding is %s\", format,", "+\t\t\t\t\targuments.getEncoding()));", "+\t\t\tLOGGER.debug(\"dataFile is \"", "+\t\t\t\t\t+ arguments.getDataFile().getAbsolutePath());", "-\t\t\t\t\t+ destinationDir.getAbsolutePath());", "+\t\t\t\t\t+ arguments.getDestinationDirectory().getAbsolutePath());", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null) {", "-\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tComplexityCalculator complexity = new ComplexityCalculator(finder);", "-\t\tif (format.equalsIgnoreCase(\"html\")) {", "-\t\t\tnew HTMLReport(projectData, destinationDir, finder, complexity,", "-\t\t\t\t\tencoding);", "-\t\t} else if (format.equalsIgnoreCase(\"xml\")) {", "-\t\t\tnew XMLReport(projectData, destinationDir, finder, complexity);", "-\t\t} else if (format.equalsIgnoreCase(\"summaryXml\")) {", "-\t\t\tnew SummaryXMLReport(projectData, destinationDir, finder,", "-\t\t\t\t\tcomplexity);", "-\t\t}", "+\t\tnew Cobertura(arguments).report().export(", "+\t\t\t\tReportFormat.getFromString(format));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e901a7949fd3c5d2471b4307a6cdf476", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Javancss(String[] asArgs_, String sRcsHeader_)", "signatureAfterChange": "     public Javancss(String[] asArgs_, String sRcsHeader_) throws IOException", "diff": ["-    public Javancss(String[] asArgs_, String sRcsHeader_) {", "+    public Javancss(String[] asArgs_, String sRcsHeader_) throws IOException {", "-        Hashtable htOptions = _pInit.getOptions();", "+        Map htOptions = _pInit.getOptions();", "+", "+        setEncoding( (String) htOptions.get( \"encoding\" ) );", "-            pTest.setTestDir( FileUtil.concatPath( _pInit.getApplicationPath()", "-                                                   , \"test\" )                 );", "+            pTest.setTestDir( new File( _pInit.getApplicationPath(), \"test\" ) );", "-        _vJavaSourceFiles = _pInit.getArguments();", "-", "-        if ( Util.isDebug() )", "-        {", "-            Util.debug( \"_vJavaSourceFiles: \" + Util.toString( _vJavaSourceFiles ) );", "-        }", "-        if ( htOptions.get( \"recursive\" ) != null )", "-        {", "-            // If no files then add current directory!", "-            if ( _vJavaSourceFiles.size() == 0 )", "-            {", "-                _vJavaSourceFiles.addElement( \".\" );", "-            }", "-           ", "-            Vector newFiles = new Vector();", "-            Enumeration iter = _vJavaSourceFiles.elements();", "-            while( iter.hasMoreElements() ) ", "-            {", "-                String fileName = FileUtil.normalizeFileName( (String)iter.nextElement() );", "-                File   file = new File( fileName );", "-                if( file.isDirectory() ) ", "-                {", "-                    _addJavaFiles( file, newFiles );", "-                }", "-            }", "-            if( newFiles.size() != 0 )", "-            {", "-                for( int i = 0; i < newFiles.size(); i++ )", "-                {", "-                    _vJavaSourceFiles.add( newFiles.elementAt( i ) );", "-                }", "-            }", "-           ", "-            _removeDirs( _vJavaSourceFiles );", "-        }", "-", "-        if ( Util.isDebug() )", "-        {", "-            Util.debug( \"_vJavaSourceFiles: \" + Util.toString( _vJavaSourceFiles ) );", "-        }", "+        _vJavaSourceFiles = findFiles( _pInit.getArguments(), htOptions.get( \"recursive\" ) != null );", "-                _measureRoot(System.in);", "+                _measureRoot(newReader(System.in));", "-            _measureRoot( System.in );", "+            _measureRoot( newReader( System.in ) );", "-        PrintStream ps = System.out;", "+        OutputStream out = System.out;", "-                ps = new PrintStream( new BufferedOutputStream( new FileOutputStream( FileUtil.normalizeFileName( sOutputFile ) ) ) );", "+                out = new FileOutputStream( FileUtil.normalizeFileName( sOutputFile ) );", "-                ps = System.out;", "+                out = System.out;", "+        // TODO: encoding configuration support for result output", "+        PrintWriter pw = useXML() ? new PrintWriter(new OutputStreamWriter(out, \"UTF-8\")) : new PrintWriter(out);", "-            ps.print( XmlFormatter.printStart() );", "+            pw.print( XmlFormatter.printStart() );", "-            ps.print( printPackageNcss() );", "+            pw.print( printPackageNcss() );", "-                ps.println();", "+                pw.println();", "-            ps.print( printObjectNcss() );", "+            pw.print( printObjectNcss() );", "-                ps.println();", "+                pw.println();", "-            ps.print( printFunctionNcss() );", "+            pw.print( printFunctionNcss() );", "-            ps.print( printJavaNcss() );", "+            pw.print( printJavaNcss() );", "-                ps.print( printJavaNcss() );", "+                pw.print( printJavaNcss() );", "-            ps.println( \"</javancss>\" );", "+            pw.println( \"</javancss>\" );", "-            ps.close();", "+            pw.close();", "-            // standard out is used", "-            //ps.flush();", "+            // stdout is used: don't close but ensure everything is flushed", "+            pw.flush();", "-        ps = null;", "+        pw = null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "451eba2a605f87ca611ccca88e3556ce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dbc91b240f90fae391604d85586f473", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/ClassInstrumenter.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic MethodVisitor visitMethod(final int access, final String name, \t\t\tfinal String desc, final String signature, \t\t\tfinal String[] exceptions)", "signatureAfterChange": "  \tpublic MethodVisitor visitMethod(final int access, final String name, \t\t\tfinal String desc, final String signature, \t\t\tfinal String[] exceptions)", "diff": ["-\t\treturn mv == null ? null : new MethodInstrumenter(classData, mv,", "-\t\t\t\tthis.myName, name, desc, ignoreRegexs);", "+      return mv == null ? null : new FirstPassMethodInstrumenter(classData, mv,", "+            this.myName, access, name, desc, signature, exceptions, ignoreRegexs, ", "+            ignoreBranchesRegexs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba44c0742de99356563dde0193a73954", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalConditionCoverageTest.java", "commitBeforeChange": "69cc7bd2244df6c34a43fd0a83e4ff1997825ad0", "commitAfterChange": "a5e34a13602d86f738c1ed9f95d082ed04ed28e1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate static void verifyMethod(TestInfo info, String testName, Element classElement, Element methodElement)", "signatureAfterChange": "  \tprivate static void verifyMethod(TestInfo info, String testName, Element classElement, Element methodElement)", "diff": ["-\t\t\t\tthrow new RuntimeException(e);", "+\t\t\t\tthrow new RuntimeException(e.toString());"]}]}
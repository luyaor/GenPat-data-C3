{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0153d554613c595602d5a819a160054a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32be73a33baa9704fe3903667c3d37a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/CheckTask.java", "commitBeforeChange": "6981a5ab040697261e06e872e609bd3dca7fd012", "commitAfterChange": "4d909f48e2f07ffe6cb92fd53174e50465cdfae8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic void execute() throws BuildException", "signatureAfterChange": " \t \tpublic void execute() throws BuildException", "diff": ["-\t\tif (dataFile != null)", "-\t\t{", "+\t\tif (dataFile != null) {", "-\t\tif (branchRate != null)", "-\t\t{", "+\t\tif (branchRate != null)\t{", "-\t\tif (lineRate != null)", "-\t\t{", "+\t\tif (lineRate != null) {", "-\t\tif (packageBranchRate != null)", "-\t\t{", "+\t\tif (packageBranchRate != null) {", "-\t\tif (packageLineRate != null)", "-\t\t{", "+\t\tif (packageLineRate != null) {", "-\t\tif (totalBranchRate != null)", "-\t\t{", "+\t\tif (totalBranchRate != null) {", "-\t\tif (totalLineRate != null)", "-\t\t{", "+\t\tif (totalLineRate != null) {", "-\t\tIterator iter = regexes.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "+\t\tIterator<Regex> iter = regexes.iterator();", "+\t\twhile (iter.hasNext()) {", "-\t\tif (returnCode == 0)", "-\t\t{", "+\t\tif (returnCode == 0) {", "-\t\t}", "-\t\telse", "-\t\t{", "+\t\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d935f168e487631635b4128a3b2ac0d2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SourceFileData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic boolean containsInstrumentationInfo()", "signatureAfterChange": "  \tpublic boolean containsInstrumentationInfo()", "diff": ["-\t\t// Return false if any of our child ClassData's does not", "-\t\t// contain instrumentation info", "-\t\tIterator iter = this.children.values().iterator();", "-\t\twhile (iter.hasNext())", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\tif (!classData.containsInstrumentationInfo())", "-\t\t\t\treturn false;", "+\t\t\t// Return false if any of our child ClassData's does not", "+\t\t\t// contain instrumentation info", "+\t\t\tIterator iter = this.children.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tif (!classData.containsInstrumentationInfo())", "+\t\t\t\t\treturn false;", "+\t\t\t}", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();"]}]}
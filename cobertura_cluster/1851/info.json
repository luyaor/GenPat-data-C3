{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3b61641d633a95b5c5060f745dd00f3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9ed3f56b93d48edd39d4c5e0a0ebcb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/webapp/test/WebAppFunctionalTest.java", "commitBeforeChange": "a60d2bc22171233e011b257f7dcf6851da67b1d2", "commitAfterChange": "db1a19fd2ba9631bb2b41b9cfce57d242f929b74", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Test \tpublic void flushCoberturaDataOnly() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void flushCoberturaDataOnly() throws Exception", "diff": ["-\t\tSystem.out.println(\"http://\" + data.get(\"hostname\") + \":\"", "-\t\t\t\t+ data.get(\"webappPort\") + \"/coberturaFlush/flushCobertura\");", "+\t\tString url = String.format(", "+\t\t\t\t\"http://%s:%s/coberturaFlush/flushCobertura\", data", "+\t\t\t\t\t\t.get(\"hostname\"), data.get(\"webappPort\"));", "+\t\tlog.info(url);", "-\t\tString flushing = IOUtils.toString(new java.net.URL(\"http://\"", "-\t\t\t\t+ data.get(\"hostname\") + \":\" + data.get(\"webappPort\")", "-\t\t\t\t+ \"/coberturaFlush/flushCobertura\").openConnection()", "-\t\t\t\t.getInputStream());", "+\t\tString flushing = IOUtils.toString(new java.net.URL(url)", "+\t\t\t\t.openConnection().getInputStream());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43720d78799f8864284040a047399447", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "9a830b0110b84315c0c267421611842128c2ca35", "commitAfterChange": "2d04adc2554406c41824d5b965907076ecdceb80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void addClassData(ClassData classData)", "signatureAfterChange": "  \tpublic void addClassData(ClassData classData)", "diff": ["-", "-\t    // this method aggregates data if classData is an inner class", "-\t    //  with the data from the top level class that it is contained in", "-\t    LOGGER.debug(\"addClassData: \" + classData.getName());", "-\t    String parentClassName = getClassNameIgnoreInner(classData.getName());", "-\t    LOGGER.debug(\"\\tparentClassName = \" + parentClassName);", "-\t    String keyName = new ClassData(parentClassName).getBaseName();", "-\t    LOGGER.debug(\"\\tkeyName = \" + keyName);", "-\t    ", "-\t    ClassData parent = getClassData(classData.getName());", "-        if (parent == null) {", "-            LOGGER.debug(\"\\tno parent\");", "-            parent = new ClassData(parentClassName);", "-        }", "-        classData.merge(parent);", "-", "-\t\t// Each key is a class basename, stored as an String object.", "-\t\t// Each value is information about the class, stored as a ClassData object.", "-        LOGGER.debug(\"putting \" + keyName + \" = \" + classData.getName());", "-\t\tchildren.put(keyName, classData);", "+\t\tString sourceFileName = classData.getSourceFileName();", "+\t\tSourceFileData sourceFileData = (SourceFileData)children.get(sourceFileName);", "+\t\tif (sourceFileData == null)", "+\t\t{", "+\t\t\tsourceFileData = new SourceFileData(sourceFileName);", "+\t\t\t// Each key is a source file name, stored as an String object.", "+\t\t\t// Each value is information about the source file, stored as", "+\t\t\t// a SourceFileData object.", "+\t\t\tthis.children.put(sourceFileName, sourceFileData);", "+\t\t}", "+\t\tsourceFileData.addClassData(classData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c12ce9cc3db70608897ed8c31e5de41", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/ReportTask.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-\t\tHeader.print(System.out);", "-", "-\t\tgetJava().createArg().setValue(\"--format\");", "-\t\tgetJava().createArg().setValue(format);", "+\t\tinitArgs();", "-\t\t\tgetJava().createArg().setValue(\"--datafile\");", "-\t\t\tgetJava().createArg().setValue(dataFile);", "+\t\t\taddArg(\"--datafile\");", "+\t\t\taddArg(dataFile);", "+\t\t}", "+\t\t", "+\t\taddArg(\"--destination\");", "+\t\taddArg(this.destDir.getAbsolutePath());", "+\t\t", "+\t\taddArg(\"--format\");", "+\t\taddArg(format);", "+\t\t", "+\t\tif (srcDir != null) {", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(srcDir);", "-\t\tgetJava().createArg().setValue(\"--destination\");", "-\t\tgetJava().createArg().setValue(destDir.toString());", "+\t\thandleFilesets();", "-\t\tgetJava().createArg().setValue(\"--source\");", "-\t\tgetJava().createArg().setValue(src.toString());", "+\t\tsaveArgs();", "+\t\t/**", "+\t\t * TODO: Do something here so that we can set System.in and System.out on", "+\t\t * getJava() to the one we're using now.  So that when instrumentation calls", "+\t\t * System.out, it will show up as \"[instrument] doing stuff\" instead of", "+\t\t * \"[java] doing stuff\" in the ant output.", "+\t\t */", "-\t\t\tthrow new BuildException(\"Error generating report. See messages above.\");", "+\t\t\tthrow new BuildException(\"Error running reports. See messages above.\");", "+", "+\t\tunInitArgs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "945b32a1dfef788b6f1fedd636727c03", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/PackageDataTest.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void testAddClass()", "signatureAfterChange": "  \tpublic void testAddClass()", "diff": ["-\t\tSourceFileData sourceFileData;", "-\t\tassertTrue(packageData.contains(classData.getSourceFileName()));", "-\t\tsourceFileData = (SourceFileData)packageData.getChild(classData", "-\t\t\t\t.getSourceFileName());", "-\t\tassertTrue(sourceFileData.contains(classData.getBaseName()));", "+\t\tassertTrue(packageData.contains(classData.getBaseName()));", "-\t\tassertTrue(packageData.contains(classData.getSourceFileName()));", "-\t\tsourceFileData = (SourceFileData)packageData.getChild(classData", "-\t\t\t\t.getSourceFileName());", "-\t\tassertTrue(sourceFileData.contains(classData.getBaseName()));", "+\t\tassertTrue(packageData.contains(classData.getBaseName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5eced83354faf6c0580b0f65731a1d7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/AsciiFormatter.java", "commitBeforeChange": "f44527006156d82d108277efea7d0bf4a4cd5a22", "commitAfterChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private String _formatFunctionResume( int functions                                           , long lFunctionSum                                           , long lCCNSum                                           , long lJVDCSum     )", "signatureAfterChange": "      private String _formatFunctionResume( int functions                                           , long lFunctionSum                                           , long lCCNSum                                           , long lJVDCSum     )", "diff": ["-        StringBuffer sRetVal = new StringBuffer();", "-", "-        sRetVal.append(\"Average Function NCSS: \").append", "-               (Util.paddWithSpace(_pNumberFormat.format", "-                                   (fAverageNcss), 10)).", "-               append(NL);", "-        sRetVal.append(\"Average Function CCN:  \").append", "-               (Util.paddWithSpace(_pNumberFormat.format", "-                                   (fAverageCCN),  10)).", "-               append(NL);", "-        sRetVal.append(\"Average Function JVDC: \").append", "-               (Util.paddWithSpace(_pNumberFormat.format", "-                                   (fAverageJVDC), 10)).", "-               append(NL);", "-        sRetVal.append(\"Program NCSS:          \").append", "-               (Util.paddWithSpace(_pNumberFormat.format", "-                                   (_javancss.getNcss()), 10)).", "-               append(NL);", "-        return sRetVal.toString();", "+        String sRetVal = \"Average Function NCSS: \"", "+            + Util.paddWithSpace(_pNumberFormat.format(fAverageNcss), 10) + NL", "+            + \"Average Function CCN:  \"", "+            + Util.paddWithSpace(_pNumberFormat.format(fAverageCCN),  10) + NL", "+            + \"Average Function JVDC: \"", "+            + Util.paddWithSpace(_pNumberFormat.format(fAverageJVDC), 10) + NL", "+            + \"Program NCSS:          \"", "+            + Util.paddWithSpace(_pNumberFormat.format(_javancss.getNcss()), 10) + NL;", "+", "+        return sRetVal;"]}]}
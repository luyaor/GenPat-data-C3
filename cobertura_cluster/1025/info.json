{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ea56afa8585cdbf7d2384e085f07b1a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b94ce27026eeb92cf8dda0279ed02ab0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "8470613dce5289e48aeaaebf95d84de1414dad70", "commitAfterChange": "77a25c204e0d22c334a40e10db5134e2cb525c03", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void _measureRoot(InputStream pInputStream_)         throws IOException,                ParseException,                TokenMgrError", "signatureAfterChange": "\r     private void _measureRoot( Reader reader ) throws IOException, ParseException, TokenMgrError", "diff": ["-     */", "-    private void _measureRoot(InputStream pInputStream_)", "-        throws IOException,", "-               ParseException,", "-               TokenMgrError", "-    {", "-        _htPackages = new Hashtable();", "-        ", "-        // either there are argument files, or stdin is used", "-        if (_vJavaSourceFiles.size() == 0) {", "-            DataInputStream disJava = new java.io.DataInputStream(pInputStream_);", "-            _measureSource(disJava);", "-        } else {", "-            // the collection of files get measured", "-            _measureFiles(_vJavaSourceFiles);", "-        }", "-        ", "-        _vPackageMetrics = new Vector();", "-        for(Enumeration ePackages = _htPackages.keys();", "-            ePackages.hasMoreElements(); )", "-        {", "-            String sPackage = (String)ePackages.nextElement();", "-            PackageMetric pckmNext = (PackageMetric)_htPackages.", "-                   get(sPackage);", "-            _vPackageMetrics.addElement(pckmNext);", "-        }", "-    }", "+     */\r", "+    private void _measureRoot( Reader reader ) throws IOException, ParseException, TokenMgrError\r", "+    {\r", "+        _htPackages = new HashMap();\r", "+\r", "+        // either there are argument files, or stdin is used\r", "+        if ( _vJavaSourceFiles.size() == 0 )\r", "+        {\r", "+            _measureSource( reader );\r", "+        }\r", "+        else\r", "+        {\r", "+            // the collection of files get measured\r", "+            _measureFiles( _vJavaSourceFiles );\r", "+        }\r", "+\r", "+        _vPackageMetrics = new ArrayList();\r", "+        for ( Iterator ePackages = _htPackages.keySet().iterator(); ePackages.hasNext(); )\r", "+        {\r", "+            String sPackage = (String) ePackages.next();\r", "+\r", "+            PackageMetric pckmNext = (PackageMetric) _htPackages.get( sPackage );\r", "+            _vPackageMetrics.add( pckmNext );\r", "+        }\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa8b8dc78a8c30dafe4f4419affa4a5d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void _measureRoot(InputStream pInputStream_)         throws IOException,                ParseException,                TokenMgrError", "signatureAfterChange": "     private void _measureRoot( Reader reader ) throws IOException, ParseException, TokenMgrError", "diff": ["-    private void _measureRoot(InputStream pInputStream_)", "-        throws IOException,", "-               ParseException,", "-               TokenMgrError", "+    private void _measureRoot( Reader reader ) throws IOException, ParseException, TokenMgrError", "-        _htPackages = new Hashtable();", "-        ", "+        _htPackages = new HashMap();", "+", "-        if (_vJavaSourceFiles.size() == 0) {", "-            DataInputStream disJava = new java.io.DataInputStream(pInputStream_);", "-            _measureSource(disJava);", "-        } else {", "-            // the collection of files get measured", "-            _measureFiles(_vJavaSourceFiles);", "-        }", "-        ", "-        _vPackageMetrics = new Vector();", "-        for(Enumeration ePackages = _htPackages.keys();", "-            ePackages.hasMoreElements(); )", "+        if ( _vJavaSourceFiles.size() == 0 )", "-            String sPackage = (String)ePackages.nextElement();", "-            PackageMetric pckmNext = (PackageMetric)_htPackages.", "-                   get(sPackage);", "-            _vPackageMetrics.addElement(pckmNext);", "+            _measureSource( reader );", "-        //cobertura - the sort method does not actually sort", "-        _vPackageMetrics = Util.sort(_vPackageMetrics);", "+        else", "+        {", "+            // the collection of files get measured", "+            _measureFiles( _vJavaSourceFiles );", "+        }", "+", "+        _vPackageMetrics = new ArrayList();", "+        for ( Iterator ePackages = _htPackages.keySet().iterator(); ePackages.hasNext(); )", "+        {", "+            String sPackage = (String) ePackages.next();", "+", "+            PackageMetric pckmNext = (PackageMetric) _htPackages.get( sPackage );", "+            _vPackageMetrics.add( pckmNext );", "+        }", "+//COBERTURA REMOVE BEGIN", "+        //cobertura - no need to sort", "+        Collections.sort( _vPackageMetrics );", "+//COBERTURA REMOVE END"]}]}
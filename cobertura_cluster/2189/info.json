{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1634b1ab96a0260a31fddb352eb50452", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e159902b250c3b99fed37e69abd77f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/CoverageDataContainer.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": " \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tIterator iter = container.children.keySet().iterator();", "-\t\twhile (iter.hasNext())", "+\t\tgetBothLocks(container);", "+\t\ttry", "-\t\t\tObject key = iter.next();", "-\t\t\tCoverageData newChild = (CoverageData)container.children.get(key);", "-\t\t\tCoverageData existingChild = (CoverageData)this.children.get(key);", "-\t\t\tif (existingChild != null)", "+\t\t\tIterator iter = container.children.keySet().iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\texistingChild.merge(newChild);", "+\t\t\t\tObject key = iter.next();", "+\t\t\t\tCoverageData newChild = (CoverageData)container.children.get(key);", "+\t\t\t\tCoverageData existingChild = (CoverageData)this.children.get(key);", "+\t\t\t\tif (existingChild != null)", "+\t\t\t\t{", "+\t\t\t\t\texistingChild.merge(newChild);", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\t// TODO: Shouldn't we be cloning newChild here?  I think so that", "+\t\t\t\t\t//       would be better... but we would need to override the", "+\t\t\t\t\t//       clone() method all over the place?", "+\t\t\t\t\tthis.children.put(key, newChild);", "+\t\t\t\t}", "-\t\t\telse", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tcontainer.lock.unlock();", "+\t\t}", "+\t}", "-\t\t\t\t// TODO: Shouldn't we be cloning newChild here?  I think so that", "-\t\t\t\t//       would be better... but we would need to override the", "-\t\t\t\t//       clone() method all over the place?", "-\t\t\t\tthis.children.put(key, newChild);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52e3cfa6241fabc628105879c5e9565", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "2d04adc2554406c41824d5b965907076ecdceb80", "commitAfterChange": "cd01654d464661ad4ee16d9e5f0f6e799c0ad9e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "signatureAfterChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "diff": ["+\t\t\t\t// TODO TODO TODO: This needs to only look at classes in root package", "-\t\t\t// Get the list of classes in this package", "-\t\t\tCollection classes;", "+\t\t\t// Get the list of source files in this package", "+\t\t\tCollection sourceFiles;", "-\t\t\t\tclasses = new TreeSet();", "-\t\t\t\tif (projectData.getNumberOfClasses() > 0)", "-\t\t\t\t{", "-\t\t\t\t\titer = projectData.getClasses().iterator();", "-\t\t\t\t\twhile (iter.hasNext())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\t\t\tif (classData.getPackageName() == null)", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tclasses.add(classData);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tsourceFiles = projectData.getSourceFiles();", "-\t\t\t\tclasses = packageData.getClasses();", "+\t\t\t\tsourceFiles = packageData.getSourceFiles();", "-\t\t\tif (classes.size() > 0)", "+\t\t\tif (sourceFiles.size() > 0)", "-\t\t\t\titer = classes.iterator();", "+\t\t\t\titer = sourceFiles.iterator();", "-\t\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForClass(classData));", "+\t\t\t\t\tSourceFileData sourceFileData = (SourceFileData)iter", "+\t\t\t\t\t\t\t.next();", "+\t\t\t\t\tout", "+\t\t\t\t\t\t\t.println(generateTableRowForSourceFile(sourceFileData));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3ca77c0373342e9bb6445e4eccfa8ca", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic Collection getSourceFiles()", "signatureAfterChange": "  \tpublic Collection getSourceFiles()", "diff": ["-\t\tIterator iter = this.children.values().iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\tString sourceFileName = classData.getSourceFileName();", "-\t\t\tSourceFileData sourceFileData = (SourceFileData)sourceFileDatas.get(sourceFileName);", "-\t\t\tif (sourceFileData == null)", "-\t\t\t{", "-\t\t\t\tsourceFileData = new SourceFileData(sourceFileName);", "-\t\t\t\tsourceFileDatas.put(sourceFileName, sourceFileData);", "+\t\t", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tIterator iter = this.children.values().iterator();", "+\t\t\twhile (iter.hasNext()) {", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tString sourceFileName = classData.getSourceFileName();", "+\t\t\t\tSourceFileData sourceFileData = (SourceFileData)sourceFileDatas.get(sourceFileName);", "+\t\t\t\tif (sourceFileData == null)", "+\t\t\t\t{", "+\t\t\t\t\tsourceFileData = new SourceFileData(sourceFileName);", "+\t\t\t\t\tsourceFileDatas.put(sourceFileName, sourceFileData);", "+\t\t\t\t}", "+\t\t\t\tsourceFileData.addClassData(classData);", "-\t\t\tsourceFileData.addClassData(classData);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();"]}]}
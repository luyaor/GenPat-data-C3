{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85ce997db7f89ac86cc782eddc4b0bbf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682e7c61021dd6850c55c84181ed0774", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "cd6bc28c213448c4f17fad67a6e8eae42d8d9463", "commitAfterChange": "6981a5ab040697261e06e872e609bd3dca7fd012", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["+\t\t", "+\t\tboolean threadsafeRigorous = false;", "+\t\tboolean ignoreTrivial = false;", "+\t\tSet<String> ignoreMethodAnnotations = new HashSet<String>();", "+\t\t", "-\t\t\telse if (args[i].equals(\"--includeClasses\")) {", "+\t\t\telse if (args[i].equals(\"--ignoreMethodAnnotation\")) {", "+\t\t\t    ignoreMethodAnnotations.add(args[++i]);", "+\t\t    } else if (args[i].equals(\"--ignoreTrivial\")) {", "+                ignoreTrivial = true;", "+\t\t\t} else if (args[i].equals(\"--includeClasses\")) {", "+\t\t\t} else if (args[i].equals(\"--threadsafeRigorous\")) {", "+\t\t\t    threadsafeRigorous = true;", "+\t\tcoberturaInstrumenter.setIgnoreTrivial(ignoreTrivial);", "+\t\tcoberturaInstrumenter.setIgnoreMethodAnnotations(ignoreMethodAnnotations);", "+\t\tcoberturaInstrumenter.setThreadsafeRigorous(threadsafeRigorous);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72ec5633fdc637cc13b8e4f4a682a4a6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/CheckTask.java", "commitBeforeChange": "89f4eaca365e898685523b26abb2975d34c5493c", "commitAfterChange": "b5fae504c12a9486e23c38b8e2fb563abfcdacb8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-", "-\t\tif (branchCoverageRate != null)", "-\t\t{", "-\t\t\tgetJava().createArg().setValue(\"--branch\");", "-\t\t\tgetJava().createArg().setValue(branchCoverageRate);", "-\t\t}", "-", "-\t\tIterator i = regexes.iterator();", "-\t\twhile (i.hasNext())", "+\t\tif (branchCoverageRate != null)", "-\t\t\tgetJava().createArg().setValue(\"--ignore\");", "-\t\t\tgetJava().createArg().setValue(i.next().toString());", "+\t\t\tgetJava().createArg().setValue(\"--branch\");", "+\t\t\tgetJava().createArg().setValue(branchCoverageRate);", "-\t\tif (getJava().executeJava() != 0)", "+\t\tif (totalBranchCoverageRate != null)", "-\t\t\tthrow new BuildException();", "+\t\t\tgetJava().createArg().setValue(\"--totalbranch\");", "+\t\t\tgetJava().createArg().setValue(totalBranchCoverageRate);", "+", "+\t\tif (totalLineCoverageRate != null)", "+\t\t{", "+\t\t\tgetJava().createArg().setValue(\"--totalline\");", "+\t\t\tgetJava().createArg().setValue(totalLineCoverageRate);", "+\t\t}", "+", "+\t\tIterator iter = regexes.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tgetJava().createArg().setValue(\"--regex\");", "+\t\t\tgetJava().createArg().setValue(iter.next().toString());", "+\t\t}", "+", "+\t\tint returnCode = getJava().executeJava();", "+", "+\t\t// Check the return code and print a message", "+\t\tif (returnCode == 0)", "+\t\t\tSystem.out.println(\"All checks passed.\");", "+\t\telse if (haltOnFailure)", "+\t\t\tthrow new BuildException(", "+\t\t\t\t\t\"Coverage check failed. See messages above.\");", "+\t\telse", "+\t\t\tSystem.err.println(\"Coverage check failed. See messages above.\");"]}]}
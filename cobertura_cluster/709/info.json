{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb859f31efe00fb5a0f23fe9b1c0687c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a9a610b43cf74ba432954621082379", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/webapp/test/WebAppFunctionalTest.java", "commitBeforeChange": "2b194b3d77bf600da43b42901e6946bf29c86ff0", "commitAfterChange": "a26b3c4c66c38163a0a617a9215854c17c3271a0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Test \tpublic void basicStartAndStopOfWebApp() throws Exception", "signatureAfterChange": " \t \t@After \tpublic void tearDown() throws Exception", "diff": ["+\t", "+\t@After", "+\tpublic void tearDown() throws Exception {", "+\t\tif (tester != null)", "+\t\t\ttester.stop();", "-\tpublic void basicStartAndStopOfWebApp() throws Exception {", "-\t\tbasicStartAndStopOfWebApp(!TOMCAT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f312303680f5ea01d79363f61a834e3d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/InjectCodeClassInstrumenter.java", "commitBeforeChange": "19ceee05d925a56765de9c8658cd706bba52717d", "commitAfterChange": "8436089ae83994fd4e20a6c9d4bf74654ba39159", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@Override \tpublic MethodVisitor visitMethod(int access, String name, String desc, \t\t\tString signature, String[] exceptions)", "signatureAfterChange": " \t@Override \tpublic MethodVisitor visitMethod(int access, String name, String desc, \t\t\tString signature, String[] exceptions)", "diff": ["-\t\tif (\"<clinit>\".equals(name)){", "-\t\t\t/*", "-\t\t\t * It is static initialization method, so we have to inject 'static initialization code'", "-\t\t\t * We will add this code after processing (instrumenting) previous content of static initialization code. ", "-\t\t\t * */", "-\t\t\tmv=new GenerateCLINITMethodVisitor(mv,  classMap.getClassName(),classMap.getMaxCounterId()+1);", "-\t\t\twasStaticInitMethodVisited=true;", "+\t\tif ((access & Opcodes.ACC_STATIC) != 0) {", "+\t\t\tmv = new GenerateCallCoberturaInitMethodVisitor(mv,  classMap.getClassName());", "+\t\t\tif (\"<clinit>\".equals(name)) {", "+\t\t\t\twasStaticInitMethodVisited=true;", "+\t\t\t}\t\t\t", "-\t\tFindTouchPointsMethodAdapter instrumenter=new FindTouchPointsMethodAdapter(mv,classMap.getClassName(),name,desc,eventIdGenerator,duplicatedLinesMap,lineIdGenerator);", "+\t\tFindTouchPointsMethodAdapter instrumenter = new FindTouchPointsMethodAdapter(mv,classMap.getClassName(),name,desc,eventIdGenerator,duplicatedLinesMap,lineIdGenerator);"]}]}
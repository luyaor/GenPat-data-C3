{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ce196acd14c0b3f14a2659ce7fec15e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae01581827f0ece971c3b254a3ec8c00", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic int getNumberOfCoveredBranches()", "signatureAfterChange": " \tpublic int getNumberOfCoveredBranches()", "diff": ["-\t\tfor (Iterator i = branches.values().iterator(); ", "-\t\t\ti.hasNext(); ", "-\t\t\tnumber += ((LineData) i.next()).getNumberOfCoveredBranches())", "-\t\t\t;", "-\t\treturn number;", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tfor (Iterator i = branches.values().iterator(); ", "+\t\t\t\ti.hasNext(); ", "+\t\t\t\tnumber += ((LineData) i.next()).getNumberOfCoveredBranches())", "+\t\t\t\t;", "+\t\t\treturn number;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed397caab7534e4b845f748733882c9d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic int getNumberOfValidBranches()", "signatureAfterChange": " \tpublic int getNumberOfValidBranches()", "diff": ["-\t\tfor (Iterator i = branches.values().iterator(); ", "-\t\t\ti.hasNext(); ", "-\t\t\tnumber += ((LineData) i.next()).getNumberOfValidBranches())", "-\t\t\t;", "-\t\treturn number;", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tfor (Iterator i = branches.values().iterator(); ", "+\t\t\t\ti.hasNext(); ", "+\t\t\t\tnumber += ((LineData) i.next()).getNumberOfValidBranches())", "+\t\t\t\t;", "+\t\t\treturn number;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}]}
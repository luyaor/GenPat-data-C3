{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20c46e66c54be0c95e61f514dbd38d5b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6567911800f17ec91ac34d06f6118d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "signatureAfterChange": " \t \t \t \tprivate void addInstrumentationToSingleClass(File file)", "diff": ["-", "-\tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "-\t{", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(ClassWriter.COMPUTE_MAXS);", "-\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes,", "-\t                   ignoreMethodAnnotations, ignoreTrivial);", "-\t\t\tcr.accept(cv, 0);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tinputStream = IOUtil.closeInputStream(inputStream);", "-\t\t}", "-", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "-", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\toutputStream = IOUtil.closeOutputStream(outputStream);", "-\t\t}", "+\t", "+\tprivate void addInstrumentationToSingleClass(File file){", "+\t\tlogger.info(\"Instrumenting: \"+file.getAbsolutePath()+\" to \"+destinationDirectory);", "+\t\tcoberturaInstrumenter.addInstrumentationToSingleClass(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1fd737725f1a5f8540f61202962b94", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "dfb5a2eb9802e7508575bb28a5567131dea08a01", "commitAfterChange": "fc2ad78e8106be7851ebaf993c1d98b6f16724ba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void generateSourceFile(SourceFileData sourceFileData) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate void generateSourceFile(SourceFileData sourceFileData) \t\t\tthrows IOException", "diff": ["-\t\t\tout.println(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\");", "-\t        out.println(\"           \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\");", "-\t\t\t", "+\t\t\tout", "+\t\t\t\t\t.println(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\");", "+\t\t\tout", "+\t\t\t\t\t.println(\"           \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\");", "+", "-\t\t\tout.println(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"/>\");", "+\t\t\tout", "+\t\t\t\t\t.println(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"/>\");", "-\t\t\t// TODO: Change this to actually show multiple classes.", "-\t\t\tout.println(generateTableRowForSourceFile(sourceFileData));", "+\t\t\tout.println(generateTableRowsForSourceFile(sourceFileData));", "+", "+\t\t\t// Output the coverage summary for methods in this class", "+\t\t\t// TODO", "-\t\t\tout", "-\t\t\t\t\t.println(\"<table cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" class=\\\"src\\\">\");", "-\t\t\tBufferedReader br = null;", "-\t\t\ttry", "-\t\t\t{", "-\t\t\t\t// TODO: If file was not found, do not generate a table with source at all.", "-\t\t\t\tFile sourceFile = finder.getFileForSource(sourceFileData.getName());", "-\t\t\t\tbr = new BufferedReader(new FileReader(sourceFile));", "-\t\t\t\tString lineStr;", "-\t\t\t\tJavaToHtml javaToHtml = new JavaToHtml();", "-\t\t\t\tint lineNumber = 1;", "-\t\t\t\twhile ((lineStr = br.readLine()) != null)", "-\t\t\t\t{", "-\t\t\t\t\tout.println(\"<tr>\");", "-\t\t\t\t\tif (sourceFileData.isValidSourceLineNumber(lineNumber))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tlong numberOfHits = sourceFileData", "-\t\t\t\t\t\t\t\t.getHitCount(lineNumber);", "-\t\t\t\t\t\tout.println(\"  <td class=\\\"numLineCover\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t+ lineNumber + \"</td>\");", "-\t\t\t\t\t\tif (numberOfHits > 0)", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"nbHitsCovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t+ numberOfHits + \"</td>\");", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t\t+ \"</pre></td>\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"nbHitsUncovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t\t+ numberOfHits + \"</td>\");", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\"><span class=\\\"srcUncovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t\t+ \"</span></pre></td>\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tout.println(\"  <td class=\\\"numLine\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t+ lineNumber + \"</td>\");", "-\t\t\t\t\t\tout.println(\"  <td class=\\\"nbHits\\\">&nbsp;</td>\");", "-\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t+ \"</pre></td>\");", "-\t\t\t\t\t}", "-\t\t\t\t\tout.println(\"</tr>\");", "-\t\t\t\t\tlineNumber++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinally", "-\t\t\t{", "-\t\t\t\tif (br != null)", "-\t\t\t\t{", "-\t\t\t\t\tbr.close();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tout.println(\"</table>\");", "+\t\t\tout.println(generateHtmlizedJavaSource(sourceFileData));", "-\t\t\tout.println(\"<div class=\\\"footer\\\">\");", "-\t\t\tout", "-\t\t\t\t\t.println(\"Reports generated by <a href=\\\"http://cobertura.sourceforge.net/\\\" target=\\\"_top\\\">Cobertura</a>.\");", "-\t\t\tout.println(\"</div>\");", "+\t\t\tout.println(generateFooter());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba58b5fa831e068088d1466996c35aa0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "8b78aded7bc2195ca2875df15fa36b034194b55e", "commitAfterChange": "6febec9638071e32d498b4bd4a149cb4872b0993", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-\t//       exists and is newer than the input file.", "-\tprivate void addInstrumentation(File file)", "-\t\tif (file.isDirectory())", "-\t\t\tFile[] contents = file.listFiles();", "-\t\t\tfor (int i = 0; i < contents.length; i++)", "-\t\t\t\taddInstrumentation(contents[i]);", "-\t\t\treturn;", "-\t\tif (!isClass(file))", "-\t\t\treturn;", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"instrumenting \" + file.getAbsolutePath());", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t\tlogger.warn(", "-\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "-\t\t\tlogger.warn(", "-\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "+\t//       exists and is newer than the input file.", "+\tprivate void addInstrumentation(File file)", "+\t{", "+\t\tif (isClass(file))", "+\t\t{", "+\t\t\taddInstrumentationToSingleClass(file);", "+\t\t}", "+\t\telse if (file.isDirectory())", "+\t\t{", "+\t\t\tFile[] contents = file.listFiles();", "+\t\t\tfor (int i = 0; i < contents.length; i++)", "+\t\t\t\taddInstrumentation(contents[i]);", "+\t\t}", "+\t\telse if (isArchive(file))", "+\t\t{", "+\t\t\taddInstrumentationToArchive(file);", "+\t\t}", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27e8356e426bebcc40ae57bf8b48593a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390dabcd63fffccc04ab72e477e202a1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic double getLineCoverageRate(String methodNameAndDescriptor)", "signatureAfterChange": " \tpublic double getLineCoverageRate(String methodNameAndDescriptor)", "diff": ["-\t\tIterator iter = children.values().iterator();", "-\t\twhile (iter.hasNext()) ", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tLineData next = (LineData) iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) ", "+\t\t\tIterator iter = children.values().iterator();", "+\t\t\twhile (iter.hasNext()) ", "-\t\t\t\ttotal++;", "-\t\t\t\tif (next.getHits() > 0) {", "-\t\t\t\t\thits++;", "+\t\t\t\tLineData next = (LineData) iter.next();", "+\t\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) ", "+\t\t\t\t{", "+\t\t\t\t\ttotal++;", "+\t\t\t\t\tif (next.getHits() > 0) {", "+\t\t\t\t\t\thits++;", "+\t\t\t\t\t}", "+\t\t\tif (total == 0) return 1d;", "+\t\t\treturn (double) hits / total;", "-\t\tif (total == 0) return 1d;", "-\t\treturn (double) hits / total;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813629630184ee0e082cb9ee15a90d38", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "signatureAfterChange": " \tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "diff": ["-\t\tfor (Iterator iter = branches.values().iterator(); iter.hasNext();) {", "-\t\t\tLineData next = (LineData) iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor()))", "-\t\t\t{", "-\t\t\t\ttotal += next.getNumberOfValidBranches();", "-\t\t\t\tcovered += next.getNumberOfCoveredBranches();", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tfor (Iterator iter = branches.values().iterator(); iter.hasNext();) {", "+\t\t\t\tLineData next = (LineData) iter.next();", "+\t\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor()))", "+\t\t\t\t{", "+\t\t\t\t\ttotal += next.getNumberOfValidBranches();", "+\t\t\t\t\tcovered += next.getNumberOfCoveredBranches();", "+\t\t\t\t}", "+\t\t\tif (total == 0) return 1.0;", "+\t\t\treturn (double) covered / total;", "-\t\tif (total == 0) return 1.0;", "-\t\treturn (double) covered / total;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}]}
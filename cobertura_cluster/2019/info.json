{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9bc83a2dd4eebed30f4995eaf50ea8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "094948086c6b6b8de26010bce192b413", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileLocker.java", "commitBeforeChange": "b593b3e400cea2328d827b3a670dd0bf6cc7fee1", "commitAfterChange": "8227bc61964b9dbb4bcbf570622aa907f806676d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean lock()", "signatureAfterChange": " \tpublic boolean lock()", "diff": ["+\t\tif (System.getProperty(\"java.version\").startsWith(\"1.3\"))", "+\t\t{", "+\t\t\treturn true;", "+\t\t}", "+", "-\t\t\tlockChannel = new RandomAccessFile(lockFile, \"rw\").getChannel();", "+\t\t\tClass aClass = Class.forName(\"java.io.RandomAccessFile\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"getChannel\", (Class[])null);", "+\t\t\tlockChannel = method.invoke(new RandomAccessFile(lockFile, \"rw\"), (Object[])null);", "+\t\tcatch (InvocationTargetException e)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to get lock channel for \" + lockFile.getAbsolutePath()", "+\t\t\t\t\t+ \": \" + e.getLocalizedMessage());", "+\t\t\treturn false;", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to execute RandomAccessFile.getChannel() using reflection: \"", "+\t\t\t\t\t+ t.getLocalizedMessage());", "+\t\t\tt.printStackTrace();", "+\t\t}", "-\t\t\tlock = lockChannel.lock();", "+\t\t\tClass aClass = Class.forName(\"java.nio.channels.FileChannel\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"lock\", (Class[])null);", "+\t\t\tlock = method.invoke(lockChannel, (Object[])null);", "-\t\tcatch (IOException e)", "+\t\tcatch (InvocationTargetException e)", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to execute FileChannel.lock() using reflection: \"", "+\t\t\t\t\t+ t.getLocalizedMessage());", "+\t\t\tt.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c68e5f7c60545377af3d4a9b828b85d0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t@Override \t\tpublic int hashCode()", "signatureAfterChange": "  \tprivate static void applyTouchesToSingleClassOnProjectData(final ClassData classData,final Class<?> c)", "diff": ["+", "+\tprivate static void applyTouchesToSingleClassOnProjectData(final ClassData classData,final Class<?> c) {", "+\t\tSystem.out.println(\"----------- \"+ c.getCanonicalName() + \" ---------------- \");", "+\t\ttry {", "+\t\t\tField f = c.getDeclaredField(AbstractCodeProvider.COBERTURA_COUNTERS_FIELD_NAME);", "+\t\t\tf.setAccessible(true);", "+\t\t\tfinal int[] res_src = (int[]) f.get(null);", "+\t\t\tfinal int[] res=new int[res_src.length];", "+\t\t\tfor(int i=0; i<res.length; i++){", "+\t\t\t\tres[i]=res_src[i];", "+\t\t\t\tres_src[i]=0;", "+\t\t\t}", "+\t\t\t", "+//\t\t\tSystem.out.println(\"Counters:\"\t+ Arrays.toString(res));", "+\t\t\t", "+\t\t\tLightClassmapListener lightClassmap=new ApplyToClassDataLightClassmapListener(classData,res);\t\t\t", "+\t\t\tMethod m = c.getDeclaredMethod(AbstractCodeProvider.COBERTURA_CLASSMAP_METHOD_NAME,LightClassmapListener.class);", "+\t\t\tm.setAccessible(true);", "+\t\t\tm.invoke(null, lightClassmap);", "+\t\t} catch (Exception e) {", "+\t\t\te.printStackTrace();", "-\t\t@Override", "-\t\tpublic int hashCode() {", "-\t\t\tfinal int prime = 31;", "-\t\t\tint result = 1;", "-\t\t\tresult = prime * result + classId;", "-\t\t\tresult = prime * result + lineNumber;", "-\t\t\treturn result;", "-\t\t}", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b7f1cd9959c4cc4d4b6ddbbba672fa4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423ce490d29998ac7c3610a6b712e82a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void generateOverview(Package pkg) throws IOException", "signatureAfterChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "diff": ["-\tprivate void generateOverview(Package pkg) throws IOException", "+\tprivate void generateOverview(PackageData packageData) throws IOException", "-\t\tif (pkg == null)", "+\t\tif (packageData == null)", "-\t\t\tfilename = \"frame-summary-\" + pkg.getName() + \".html\";", "+\t\t\tfilename = \"frame-summary-\" + packageData.getName() + \".html\";", "-\t\t\tout.print(pkg == null ? \"All Packages\" : generatePackageName(pkg));", "+\t\t\tout.print(packageData == null", "+\t\t\t\t\t? \"All Packages\"", "+\t\t\t\t\t: generatePackageName(packageData));", "-\t\t\tSet packages;", "-\t\t\tif (pkg == null)", "+\t\t\tCollection packages;", "+\t\t\tif (packageData == null)", "-\t\t\t\tpackages = coverage.getPackages();", "+\t\t\t\tpackages = projectData.getChildren();", "-\t\t\t\t// Output a line for the current package", "-\t\t\t\tout.println(generateTableRowForPackage(pkg));", "-", "-\t\t\t\tpackages = coverage.getSubPackages(pkg);", "+\t\t\t\tpackages = projectData.getSubPackages(packageData.getName());", "+\t\t\t// TODO: Do we need this extra \"package.size() > 0\" check?", "-\t\t\t\t\tPackage subpkg = (Package)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForPackage(subpkg));", "+\t\t\t\t\tPackageData subPackageData = (PackageData)iter.next();", "+\t\t\t\t\tout.println(generateTableRowForPackage(subPackageData));", "-\t\t\tSet classes;", "-\t\t\tif (pkg == null)", "+\t\t\tCollection classes;", "+\t\t\tif (packageData == null)", "-\t\t\t\tif (coverage.getNumberOfClasses() > 0)", "+\t\t\t\tif (projectData.getNumberOfClasses() > 0)", "-\t\t\t\t\tIterator iter = coverage.getClasses().iterator();", "+\t\t\t\t\tIterator iter = projectData.getClasses().iterator();", "-\t\t\t\t\t\tClazz clazz = (Clazz)iter.next();", "-\t\t\t\t\t\tif (clazz.getPackageName() == null)", "+\t\t\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\t\t\tif (classData.getPackageName() == null)", "-\t\t\t\t\t\t\tclasses.add(clazz);", "+\t\t\t\t\t\t\tclasses.add(classData);", "-\t\t\t\tclasses = pkg.getClasses();", "+\t\t\t\tclasses = packageData.getChildren();", "-\t\t\t\t\tClazz clazz = (Clazz)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForClass(clazz));", "+\t\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\t\tout.println(generateTableRowForClass(classData));", "-\t\t\t\t\t.println(\"Reports generated by <a href=\\\"http://cobertura.sourceforge.net/\\\" target=\\\"_top\\\">Cobertura</a>.\");", "+\t\t\t\t\t.println(\"Report generated by <a href=\\\"http://cobertura.sourceforge.net/\\\" target=\\\"_top\\\">Cobertura</a>.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c6f2aea596a20b57386cfa3840edf1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Main(String[] args) throws IOException", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["-\tpublic Main(String[] args) throws IOException", "+\tpublic Main(String[] args)", "-\t\tmerge(loadInstrumentation(new FileInputStream(new File(", "-\t\t\t\tinstrumentationDirectory,", "-\t\t\t\tInstrumentationPersistence.FILE_NAME))));", "+\t\tFile dataFile = new File(instrumentationDirectory,", "+\t\t\t\tCoverageDataFileHandler.FILE_NAME);", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\tlogger", "-\t\t\t\t\t.info(\"instrumentation has \" + keySet().size()", "-\t\t\t\t\t\t\t+ \" entries\");", "+\t\t\tlogger.info(\"instrumentation has \"", "+\t\t\t\t\t+ projectData.getNumberOfClasses() + \" classes\");", "-\t\tIterator i = keySet().iterator();", "-\t\twhile (i.hasNext())", "+\t\tIterator iter = projectData.getClasses().iterator();", "+\t\twhile (iter.hasNext())", "-\t\t\tString key = (String)i.next();", "-", "-\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(key);", "-\t\t\tCoverageData instrumentation = getInstrumentation(key);", "+\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(classData", "+\t\t\t\t\t.getName());", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(percentage(instrumentation.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(percentage(coverageRate.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb", "-\t\t\t\t\t\t.append(percentage(instrumentation", "-\t\t\t\t\t\t\t\t.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(percentage(coverageRate.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\tif (instrumentation.getLineCoverageRate() < coverageRate", "+\t\t\tif (classData.getLineCoverageRate() < coverageRate", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(percentage(instrumentation.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\tif (instrumentation.getBranchCoverageRate() < coverageRate", "+\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb", "-\t\t\t\t\t\t.append(percentage(instrumentation", "-\t\t\t\t\t\t\t\t.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));"]}]}
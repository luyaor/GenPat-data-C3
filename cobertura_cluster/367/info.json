{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e6ff4b4b57dff06593041860e777595", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "046626a20ead21ac22807fadc97161c0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "aa2e34f53ddb1c31aee2116162595e830666d736", "commitAfterChange": "b6b718a39d474bcb5d8023e1d26bb05ce1dff63c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": "  \tpublic static void main(String[] args) throws Exception", "diff": ["-", "-", "-\t\t\t\t\t\tthrow new Exception(\"Error: data file \"", "+\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "+\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\tif (dataFile.isDirectory())", "+\t\t\t\t\tif (!dataFile.isFile())", "-\t\t\t\t\t\tthrow new Exception(\"Error: data file \"", "+\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ \" cannot be a directory\");", "+\t\t\t\t\t\t\t\t+ \" must be a regular file\");", "+\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t\tthrow new Exception(\"Error: destination directory \"", "+\t\t\t\t\t\tSystem.err.println(\"Error: destination directory \"", "+\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t\tthrow new Exception(\"Error: source directory \"", "+\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "+\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\tif (sourceDir.isFile())", "+\t\t\t\t\tif (!sourceDir.isDirectory())", "-\t\t\t\t\t\tthrow new Exception(\"Error: source directory \"", "+\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ \" should be a directory, not a file\");", "+\t\t\t\t\t\t\t\t+ \" must be a directory\");", "+\t\t\t\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\tif (dataFile == null)", "+\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "+", "+\t\tif (destinationDir == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: destination directory must be set\");", "+\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\tif (sourceDir == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: source directory must be set\");", "+\t\t\tSystem.exit(1);", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\t\t\t.loadCoverageData(dataFile);", "+\t\t.loadCoverageData(dataFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bb141097f724067568f0e67bc5cd78a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "3a88f8312591e720c6c5583a3c854cd8911977a7", "commitAfterChange": "28a503bb032971e8c3210d048d0d0939d0e8f231", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void addClassData(ClassData classData)", "signatureAfterChange": "  \tpublic void addClassData(ClassData classData)", "diff": ["+", "-\t\tif (children.containsKey(classData.getBaseName()))", "-\t\t\tthrow new IllegalArgumentException(\"Package \" + this.name", "-\t\t\t\t\t+ \" already contains a class with the name \"", "-\t\t\t\t\t+ classData.getBaseName());", "+\t    // this method aggregates data if classData is an inner class", "+\t    //  with the data from the top level class that it is contained in", "+\t    LOGGER.debug(\"addClassData: \" + classData.getName());", "+\t    String parentClassName = getClassNameIgnoreInner(classData.getName());", "+\t    LOGGER.debug(\"\\tparentClassName = \" + parentClassName);", "+\t    String keyName = new ClassData(parentClassName).getBaseName();", "+\t    LOGGER.debug(\"\\tkeyName = \" + keyName);", "+\t    ", "+\t    ClassData parent = getClassData(classData.getName());", "+        if (parent == null) {", "+            LOGGER.debug(\"\\tno parent\");", "+            parent = new ClassData(parentClassName);", "+        }", "+        classData.merge(parent);", "-\t\tchildren.put(classData.getBaseName(), classData);", "+        LOGGER.debug(\"putting \" + keyName + \" = \" + classData.getName());", "+\t\tchildren.put(keyName, classData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c6821261cc0954c28b50151a6d4065", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateClassList(Package pkg) throws IOException", "signatureAfterChange": "  \tprivate void generateClassList(PackageData packageData) \t\t\tthrows IOException", "diff": ["-\tprivate void generateClassList(Package pkg) throws IOException", "+\tprivate void generateClassList(PackageData packageData)", "+\t\t\tthrows IOException", "-\t\tif (pkg == null)", "+\t\tif (packageData == null)", "-\t\t\tclasses = coverage.getClassesSortedByBasename().values();", "+\t\t\t//TODO: Need to sort classes", "+\t\t\tclasses = projectData.getClasses();", "-\t\t\tfilename = \"frame-classes-\" + pkg.getName() + \".html\";", "-\t\t\tclasses = pkg.getClasses();", "+\t\t\tfilename = \"frame-classes-\" + packageData.getName() + \".html\";", "+\t\t\tclasses = packageData.getChildren();", "-\t\t\tout.println(pkg == null ? \"All Packages\" : generatePackageName(pkg));", "+\t\t\tout.println(packageData == null", "+\t\t\t\t\t? \"All Packages\"", "+\t\t\t\t\t: generatePackageName(packageData));", "-\t\t\tfor (Iterator iter = classes.iterator(); iter.hasNext();)", "+\t\t\tIterator iter;", "+\t\t\tMap sortedClassList = new TreeMap();", "+\t\t\titer = classes.iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\tClazz clazz = (Clazz)iter.next();", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tsortedClassList.put(classData.getBaseName(), classData);", "+\t\t\t}", "+\t\t\titer = sortedClassList.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\tif (clazz.getNumberOfLines() > 0)", "-\t\t\t\t\tpercentCovered = getPercentValue(clazz", "+\t\t\t\tif (classData.getNumberOfValidLines() > 0)", "+\t\t\t\t\tpercentCovered = getPercentValue(classData", "-\t\t\t\t\t\t\t\t+ clazz.getLongName()", "+\t\t\t\t\t\t\t\t+ classData.getName()", "-\t\t\t\t\t\t\t\t+ clazz.getName()", "+\t\t\t\t\t\t\t\t+ classData.getBaseName()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91b3f6f741702314b4a81f1e5990a3ef", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "d0330636da30b64c8dc4dcaa9c3ec4b1254ea4a5", "commitAfterChange": "75bd567f0763b50ee4f0627514c803640ef94bc5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tprivate void parseArguments(String[] args) throws Exception", "signatureAfterChange": " \t \tprivate void parseArguments(String[] args) throws Exception", "diff": ["-\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\t\tsetDataFile( args[++i]);", "-\t\t\t\tdestinationDir = new File(args[++i]);", "-\t\t\t\tdestinationDir.mkdirs();", "+\t\t\t\tsetDestination( args[++i]);", "-\t\t\t\tformat = args[++i];", "-\t\t\t\tcheckFormat();", "+\t\t\t\tsetFormat( args[++i]);", "+\t\t}", "+", "+\t\tif (dataFile == null)", "+\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "+", "+\t\tif (destinationDir == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: destination directory must be set\");", "+\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\tif (format == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: format must be set\");", "+\t\t\tSystem.exit(1);", "+\t\t}", "+\t\t", "+\t\tif (LOGGER.isDebugEnabled())", "+\t\t{", "+\t\t\tLOGGER.debug(\"format is \" + format);", "+\t\t\tLOGGER.debug(\"dataFile is \" + dataFile.getAbsolutePath());", "+\t\t\tLOGGER.debug(\"destinationDir is \"", "+\t\t\t\t\t+ destinationDir.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3d4d362babcd4c64cc9a67c0fc0d11", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate Main(String[] args)", "diff": ["+\tprivate Main(String[] args)", "+\t\tFile dataFile = null;", "+\t\tFile currentBaseDir = null;", "+\t\tCollection baseDirs = new Vector();", "+\t\tCollection locations = new Vector();", "+\t\t// Parse our parameters", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t\tif (args[i].equals(\"--basedir\"))", "+\t\t\t\tcurrentBaseDir = new File(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t{", "+\t\t\t\tif (dataFile != null)", "+\t\t\t\t\tSystem.err.println(\"You may only specify one data file.\");", "+\t\t\t\t\tSystem.exit(-1);", "+\t\t\t\t}", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\t{", "+\t\t\t\tif (this.destinationDirectory != null)", "+\t\t\t\t{", "+\t\t\t\t\tSystem.err", "+\t\t\t\t\t\t\t.println(\"You may only specify one destination directory.\");", "+\t\t\t\t\tSystem.exit(-1);", "+\t\t\t\t}", "+\t\t\t\tthis.destinationDirectory = new File(args[++i]);", "+\t\t\t}", "+", "+\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t{", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexs.add(pc.compile(regex));", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tlocations.add(args[i]);", "+\t\t\t\tbaseDirs.add(currentBaseDir);", "+\t\t\t}", "+", "+\t\t}", "+", "+\t\t// Load coverage data", "+\t\tif (dataFile == null)", "+\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tthis.projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (this.projectData == null)", "+\t\t\tthis.projectData = new ProjectData();", "+", "+\t\t// Instrument classes", "+\t\tIterator iter = locations.iterator();", "+\t\tIterator baseDirIter = baseDirs.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t\taddInstrumentation((File)baseDirIter.next(), (String)iter.next());", "+", "+\t\t// Save coverage data", "+\t\tCoverageDataFileHandler.saveCoverageData(this.projectData, dataFile);", "+\t}", "-\tprivate void parseArguments(String[] args)", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-", "-\t\t// Parse our parameters", "-\t\tCollection locations = new Vector();", "-\t\tfor (int i = 0; i < args.length; i++)", "-\t\t{", "-\t\t\tif (args[i].equals(\"--basedir\"))", "-\t\t\t\tbaseDir = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--datafile\"))", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--destination\"))", "-\t\t\t\tdestinationDirectory = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "-\t\t\t{", "-\t\t\t\tString regex = args[++i];", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "-\t\t\t\t\tthis.ignoreRegex = pc.compile(regex);", "-\t\t\t\t}", "-\t\t\t\tcatch (MalformedPatternException e)", "-\t\t\t\t{", "-\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "-\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\t\tlocations.add(args[i]);", "-\t\t}", "-", "-\t\t// Load coverage data, instrument classes, save coverage data", "-\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (projectData == null)", "-\t\t\tprojectData = new ProjectData();", "-\t\tIterator iter = locations.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t\taddInstrumentation((String)iter.next());", "-\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);"]}]}
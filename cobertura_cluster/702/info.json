{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a869a7ac099bb3bfd69f2d91b9d01386", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6567911800f17ec91ac34d06f6118d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "signatureAfterChange": " \t \t \t \tprivate void addInstrumentationToSingleClass(File file)", "diff": ["-", "-\tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "-\t{", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(ClassWriter.COMPUTE_MAXS);", "-\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes,", "-\t                   ignoreMethodAnnotations, ignoreTrivial);", "-\t\t\tcr.accept(cv, 0);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tinputStream = IOUtil.closeInputStream(inputStream);", "-\t\t}", "-", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "-", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\toutputStream = IOUtil.closeOutputStream(outputStream);", "-\t\t}", "+\t", "+\tprivate void addInstrumentationToSingleClass(File file){", "+\t\tlogger.info(\"Instrumenting: \"+file.getAbsolutePath()+\" to \"+destinationDirectory);", "+\t\tcoberturaInstrumenter.addInstrumentationToSingleClass(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb9dc12a2057b72bdd96d93c56c48e5", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coverage/Main.java", "commitBeforeChange": "c7fb0b8cc80d7d214ae05e943100e9521802d5dd", "commitAfterChange": "7f47a6101d550eed225cbc5d96f9824ad91cbdc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-", "+\t//       exists and is newer than the input file.", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"file: \" + file.getAbsolutePath());", "-\t\t}", "-", "-\t\t\t{", "-\t\t\t}", "+\t\t\treturn;", "-\t\telse if (isClass(file))", "+", "+\t\tif (!isClass(file))", "-\t\t\tinstrument(file);", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (logger.isDebugEnabled())", "+\t\t{", "+\t\t\tlogger.debug(\"instrumenting \" + file.getAbsolutePath());", "+\t\t}", "+", "+\t\tInputStream inputStream = null;", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tinputStream = new FileInputStream(file);", "+\t\t\tClassReader cr = new ClassReader(inputStream);", "+\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\tClassInstrumenter cv = new ClassInstrumenter(cw);", "+\t\t\tcr.accept(cv, false);", "+\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+", "+\t\t\tFile outputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t+ \".class\");", "+\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\toutputStream.write(instrumentedClass);", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger", "+\t\t\t\t\t.warn(\"Unable to instrument file \"", "+\t\t\t\t\t\t\t+ file.getAbsolutePath());", "+\t\t\tlogger.info(e);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (inputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tinputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (outputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\toutputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}"]}]}
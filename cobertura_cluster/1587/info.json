{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "546fdd8aef77c7950b9b8bf24fd847b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27d6c3ae4e7b5243e726a6ecfcb8ec0f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "b1e7879329998643d42728bb6b8029d8483b12b0", "commitAfterChange": "c357c3ab27173426ddabfdf358bf583cc0ca08c3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args) throws Exception", "signatureAfterChange": "  \tprivate static void parseArgumentsAndReport(String[] args) throws Exception", "diff": ["+\tprivate static void parseArgumentsAndReport(String[] args) throws Exception {", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "-\tprivate void parseArguments(String[] args) throws Exception {", "-\t\tFileFinder finder = new FileFinder();", "+\t\tString format = null;", "+\t\tboolean sourcesParam = false;", "+\t\t\t\tbuilder.setBaseDirectory(baseDir);", "-\t\t\t\tsetDataFile(args[++i]);", "+\t\t\t\tString datafile = args[++i];", "+\t\t\t\tvalidateDataFile(datafile);", "+\t\t\t\tbuilder.setDataFile(datafile);", "-\t\t\t\tsetDestination(args[++i]);", "+\t\t\t\tString destination = args[++i];", "+\t\t\t\tbuilder.setDestinationDirectory(destination);", "+\t\t\t\tvalidateAndCreateDestinationDirectory(destination);", "-\t\t\t\tsetFormat(args[++i]);", "+\t\t\t\tformat = args[++i];", "+\t\t\t\tvalidateFormat(format);", "-\t\t\t\tsetEncoding(args[++i]);", "+\t\t\t\tbuilder.setEncoding(args[++i]);", "-\t\t\t\tif (baseDir == null) {", "-\t\t\t\t\tfinder.addSourceDirectory(args[i]);", "-\t\t\t\t} else {", "-\t\t\t\t\tfinder.addSourceFile(baseDir, args[i]);", "-\t\t\t\t}", "+\t\t\t\tbuilder.addSources(args[i], baseDir == null);", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tArguments arguments = builder.build();", "-\t\tif (destinationDir == null) {", "+\t\tif (arguments.getDestinationDirectory() == null) {", "-\t\tif (format == null) {", "-\t\t\tSystem.err.println(\"Error: format must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t\tLOGGER.debug(\"format is \" + format + \" encoding is \" + encoding);", "-\t\t\tLOGGER.debug(\"dataFile is \" + dataFile.getAbsolutePath());", "+\t\t\tLOGGER.debug(String.format(\"format is %s encoding is %s\", format,", "+\t\t\t\t\targuments.getEncoding()));", "+\t\t\tLOGGER.debug(\"dataFile is \"", "+\t\t\t\t\t+ arguments.getDataFile().getAbsolutePath());", "-\t\t\t\t\t+ destinationDir.getAbsolutePath());", "+\t\t\t\t\t+ arguments.getDestinationDirectory().getAbsolutePath());", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null) {", "-\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tComplexityCalculator complexity = new ComplexityCalculator(finder);", "-\t\tif (format.equalsIgnoreCase(\"html\")) {", "-\t\t\tnew HTMLReport(projectData, destinationDir, finder, complexity,", "-\t\t\t\t\tencoding);", "-\t\t} else if (format.equalsIgnoreCase(\"xml\")) {", "-\t\t\tnew XMLReport(projectData, destinationDir, finder, complexity);", "-\t\t} else if (format.equalsIgnoreCase(\"summaryXml\")) {", "-\t\t\tnew SummaryXMLReport(projectData, destinationDir, finder,", "-\t\t\t\t\tcomplexity);", "-\t\t}", "+\t\tnew Cobertura(arguments).report().export(", "+\t\t\t\tReportFormat.getFromString(format));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64016de712d09fb080517cba5bab4b8b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": "  \tpublic static void main(String[] args) throws Exception", "diff": ["-\t\tlongOpts[1] = new LongOpt(\"instrumentation\",", "-\t\t\t\tLongOpt.REQUIRED_ARGUMENT, null, 'i');", "+\t\tlongOpts[1] = new LongOpt(\"datafile\",", "+\t\t\t\tLongOpt.REQUIRED_ARGUMENT, null, 'd');", "-\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:i:o:s:\",", "+\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:d:o:s:\",", "-\t\t\t\tcase 'i':", "-\t\t\t\t\tserializationFile = new File(g.getOptarg());", "-\t\t\t\t\tif (!serializationFile.exists())", "+\t\t\t\tcase 'd':", "+\t\t\t\t\tdataFile = new File(g.getOptarg());", "+\t\t\t\t\tif (!dataFile.exists())", "-\t\t\t\t\t\tthrow new Exception(\"Error: serialization file \"", "-\t\t\t\t\t\t\t\t+ serializationFile + \" does not exist\");", "+\t\t\t\t\t\tthrow new Exception(\"Error: data file \"", "+\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "+\t\t\t\t\t\t\t\t+ \" does not exist\");", "-\t\t\t\t\tif (serializationFile.isDirectory())", "+\t\t\t\t\tif (dataFile.isDirectory())", "-\t\t\t\t\t\tthrow new Exception(\"Error: serialization file \"", "-\t\t\t\t\t\t\t\t+ serializationFile", "+\t\t\t\t\t\tthrow new Exception(\"Error: data file \"", "+\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\tlogger.debug(\"serializationFile is \"", "-\t\t\t\t\t+ serializationFile.getAbsolutePath());", "+\t\t\tlogger.debug(\"dataFile is \"", "+\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\tInputStream is = null;", "-\t\tObjectInputStream objects = null;", "-\t\ttry", "-\t\t{", "-\t\t\tis = new FileInputStream(serializationFile);", "-\t\t\tobjects = new ObjectInputStream(is);", "-\t\t\tMap coverageData = (Map)objects.readObject();", "-\t\t\tCoverageReport coverage = new CoverageReport(coverageData);", "+\t\tif (dataFile == null)", "+\t\t\tdataFile = new File(CoverageDataFileHandler.FILE_NAME);", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\tif (format.equalsIgnoreCase(\"xml\"))", "-\t\t\t{", "-\t\t\t\tnew XMLReport(coverage, outputDir, sourceDir);", "-\t\t\t}", "-\t\t\telse if (format.equalsIgnoreCase(\"html\"))", "-\t\t\t{", "-\t\t\t\tnew HTMLReport(coverage, outputDir, sourceDir);", "-\t\t\t}", "-\t\t}", "-\t\tfinally", "+\t\tif (format.equalsIgnoreCase(\"html\"))", "-\t\t\tif (is != null)", "-\t\t\t\tis.close();", "-\t\t\tif (objects != null)", "-\t\t\t\tobjects.close();", "+\t\t\tnew HTMLReport(projectData, outputDir, sourceDir);", "+\t\t}", "+\t\telse if (format.equalsIgnoreCase(\"xml\"))", "+\t\t{", "+\t\t\tnew XMLReport(projectData, outputDir, sourceDir);"]}]}
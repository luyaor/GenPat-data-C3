{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44b25db35f70d11a162d29a1982cef2d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682e7c61021dd6850c55c84181ed0774", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "cd6bc28c213448c4f17fad67a6e8eae42d8d9463", "commitAfterChange": "6981a5ab040697261e06e872e609bd3dca7fd012", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["+\t\t", "+\t\tboolean threadsafeRigorous = false;", "+\t\tboolean ignoreTrivial = false;", "+\t\tSet<String> ignoreMethodAnnotations = new HashSet<String>();", "+\t\t", "-\t\t\telse if (args[i].equals(\"--includeClasses\")) {", "+\t\t\telse if (args[i].equals(\"--ignoreMethodAnnotation\")) {", "+\t\t\t    ignoreMethodAnnotations.add(args[++i]);", "+\t\t    } else if (args[i].equals(\"--ignoreTrivial\")) {", "+                ignoreTrivial = true;", "+\t\t\t} else if (args[i].equals(\"--includeClasses\")) {", "+\t\t\t} else if (args[i].equals(\"--threadsafeRigorous\")) {", "+\t\t\t    threadsafeRigorous = true;", "+\t\tcoberturaInstrumenter.setIgnoreTrivial(ignoreTrivial);", "+\t\tcoberturaInstrumenter.setIgnoreMethodAnnotations(ignoreMethodAnnotations);", "+\t\tcoberturaInstrumenter.setThreadsafeRigorous(threadsafeRigorous);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a305eade39fe65af7c7464e29c50c7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "7a6cf9ee7c01328fd060bf78a56186190300c13b", "commitAfterChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "      private void parseArguments(String[] args)", "diff": ["-        FileFinder finder = new FileFinder();", "+        List filePaths = new ArrayList();", "-            if (args[i].equals(\"--basedir\"))", "-                finder.addBaseDirectory(new File(args[++i]));", "+            if (args[i].equals(\"--basedir\")) ", "+            {", "+            \tfilePaths.add( args[i]);", "+            \tfilePaths.add( args[++i]);", "+            }", "-            else", "-                finder.addSourceFilePath(args[i]);", "+            else {", "+            \tfilePaths.add( args[i]);", "+            }", "-        // Load coverage data, instrument classes, save coverage data", "+        // Load coverage data", "-        Iterator iter = finder.getFilePaths().iterator();", "-        while (iter.hasNext())", "-            addInstrumentation((String)iter.next());", "+", "+        // Instrument classes", "+        String baseDir = null;", "+\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "+        Iterator iter = filePaths.iterator();", "+        while (iter.hasNext()) {", "+        \tString act = (String) iter.next();", "+        \tif( act.equals(\"--basedir\")) {", "+       \t\t\tbaseDir = (String) iter.next();", "+        \t} else {", "+        \t\taddInstrumentation( baseDir, act);", "+        \t}", "+        }", "+        ", "+        // Save coverage data"]}]}
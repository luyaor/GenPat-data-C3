{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41ee4bb64880099856cbe8f5bea62446", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33d966e2086e7448476f2f0ae359a542", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "signatureAfterChange": "    public double getBranchCoverageRate(String methodNameAndDescriptor)", "diff": ["-\t */", "-\tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "-\t{", "-\t\tint total = 0;", "-\t\tint hits = 0;", "+    */", "+   public double getBranchCoverageRate(String methodNameAndDescriptor) {", "+      int total = 0;", "+      int covered = 0;", "-\t\tIterator iter = branches.values().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tLineData next = (LineData)iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName()", "-\t\t\t\t\t+ next.getMethodDescriptor()))", "-\t\t\t{", "-\t\t\t\ttotal++;", "-\t\t\t\tif (next.getHits() > 0)", "-\t\t\t\t{", "-\t\t\t\t\thits++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (total == 0)", "-\t\t\treturn 1d;", "-\t\treturn (double)hits / total;", "-\t}", "+      for (Iterator iter = branches.values().iterator(); iter.hasNext();) {", "+         LineData next = (LineData) iter.next();", "+         if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) {", "+            total += next.getNumberOfValidBranches();", "+            covered += next.getNumberOfCoveredBranches();", "+         }", "+      }", "+      if (total == 0) return 1.0;", "+      return (double) covered / total;", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf42a0869c4cda1a84b68e90d842e255", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/detdup/DetectDuplicatedCodeMethodVisitor.java", "commitBeforeChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "commitAfterChange": "c6fd277b28f155d1b35d06833203b627d24523c3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprivate Map<Integer, Integer> putDuplicates(List<LineIdWithCodeFootstamp> listOfFootstamps)", "signatureAfterChange": " \tprivate Map<Integer, Integer> putDuplicates(List<LineIdWithCodeFootstamp> listOfFootstamps)", "diff": ["-\t\tMap<CodeFootstamp,Integer> revertedMap=new HashMap<CodeFootstamp, Integer>();", "-\t\tMap<Integer,Integer> result=new HashMap<Integer, Integer>();", "-\t\tfor(LineIdWithCodeFootstamp lcf:listOfFootstamps){", "+\t\tMap<CodeFootstamp,Integer> reversedMap = new HashMap<CodeFootstamp, Integer>();", "+\t\tMap<Integer,Integer> result = new HashMap<Integer, Integer>();", "+\t\tfor (LineIdWithCodeFootstamp lcf : listOfFootstamps){", "-\t\t\tif(lcf.footstamp.isMeaningful()){", "-\t\t\t\tInteger found=revertedMap.get(lcf.footstamp);", "-\t\t\t\tif(found!=null){", "-\t\t\t\t\tresult.put(lcf.lineId,found);", "-\t\t\t\t}else{", "-\t\t\t\t\trevertedMap.put(lcf.footstamp, lcf.lineId);", "+\t\t\tif (lcf.footstamp.isMeaningful()) {", "+\t\t\t\tInteger found = reversedMap.get(lcf.footstamp);", "+\t\t\t\tif (found != null){", "+\t\t\t\t\tresult.put(lcf.lineId, found);", "+\t\t\t\t} else {", "+\t\t\t\t\treversedMap.put(lcf.footstamp, lcf.lineId);", "-\t\treturn result.size()>0?result:null;", "+\t\treturn result.size() > 0 ? result : null;"]}]}
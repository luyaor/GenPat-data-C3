{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fe54c2529c1618d019536abd04bbd6e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91caeb97b797ba994b8e442ff2e2ff7b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic Map withRunningServer(Closure closure) throws Exception", "signatureAfterChange": " \tpublic void withRunningServer() throws Exception", "diff": ["-", "-\tpublic Map withRunningServer(Closure closure) throws Exception {", "-\t\tfreePorts = findFreePorts();", "-\t\tnew File(dir, \"logs\").mkdirs();", "-", "-\t\tstartWebServer(freePorts);", "-\t\tMap data = new HashMap();", "+\tpublic void withRunningServer() throws Exception {", "+\t\tstartWebServer();", "+\t\tMap<String, Object> data = new HashMap<String, Object>();", "-\t\t\tdata.put(\"webappPort\", freePorts.get(\"webapp\"));", "+\t\t\tdata.put(\"webappPort\", webappPort);", "+\t\t\tClosure closure = new Closure(null) {", "+\t\t\t\tprivate static final long serialVersionUID = 1L;", "+\t\t\t\t@SuppressWarnings(\"unused\")", "+\t\t\t\tpublic void doCall(HashMap<String, Object> values) {", "+\t\t\t\t}", "+\t\t\t};", "-", "-\t\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52e3cfa6241fabc628105879c5e9565", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "2d04adc2554406c41824d5b965907076ecdceb80", "commitAfterChange": "cd01654d464661ad4ee16d9e5f0f6e799c0ad9e4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "signatureAfterChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "diff": ["+\t\t\t\t// TODO TODO TODO: This needs to only look at classes in root package", "-\t\t\t// Get the list of classes in this package", "-\t\t\tCollection classes;", "+\t\t\t// Get the list of source files in this package", "+\t\t\tCollection sourceFiles;", "-\t\t\t\tclasses = new TreeSet();", "-\t\t\t\tif (projectData.getNumberOfClasses() > 0)", "-\t\t\t\t{", "-\t\t\t\t\titer = projectData.getClasses().iterator();", "-\t\t\t\t\twhile (iter.hasNext())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\t\t\tif (classData.getPackageName() == null)", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tclasses.add(classData);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tsourceFiles = projectData.getSourceFiles();", "-\t\t\t\tclasses = packageData.getClasses();", "+\t\t\t\tsourceFiles = packageData.getSourceFiles();", "-\t\t\tif (classes.size() > 0)", "+\t\t\tif (sourceFiles.size() > 0)", "-\t\t\t\titer = classes.iterator();", "+\t\t\t\titer = sourceFiles.iterator();", "-\t\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForClass(classData));", "+\t\t\t\t\tSourceFileData sourceFileData = (SourceFileData)iter", "+\t\t\t\t\t\t\t.next();", "+\t\t\t\t\tout", "+\t\t\t\t\t\t\t.println(generateTableRowForSourceFile(sourceFileData));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6a73e01446f907970d3a64e6163e0a2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate void startWebServer(final Map<String, Integer> freePorts)", "signatureAfterChange": "  \tprivate void startWebServer()", "diff": ["-", "-\tprivate void startWebServer(final Map<String, Integer> freePorts) {", "-\t\tEcho echo = new Echo();", "-\t\techo.setProject(TestUtils.project);", "-\t\techo.setMessage(\"Starting Jetty webapp server on \"", "-\t\t\t\t+ freePorts.get(\"webapp\"));", "-\t\techo.execute();", "+\tprivate void startWebServer() {", "+\t\tSystem.out.println(\"Starting Jetty webapp server on \" + webappPort);", "-\t\t\t\tjettyPort.setValue(freePorts.get(\"webapp\").toString());", "+\t\t\t\tjettyPort.setValue(String.valueOf(webappPort));", "-\t\t\t\tVariable stopPort = new Variable();", "-\t\t\t\tstopPort.setKey(\"STOP.PORT\");", "-\t\t\t\tstopPort.setValue(freePorts.get(\"stop\").toString());", "-\t\t\t\tjava.addSysproperty(stopPort);", "+\t\t\t\tVariable stopPortVariable = new Variable();", "+\t\t\t\tstopPortVariable.setKey(\"STOP.PORT\");", "+\t\t\t\tstopPortVariable.setValue(String.valueOf(stopPort));", "+\t\t\t\tjava.addSysproperty(stopPortVariable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f814c4dd7b8ea2ee18d013a245e77f25", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "cd01654d464661ad4ee16d9e5f0f6e799c0ad9e4", "commitAfterChange": "7f42310aa94d3450acefa63804376619941a31c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic Collection getLines(String methodNameAndDescriptor)", "signatureAfterChange": "  \tpublic SortedSet getLines()", "diff": ["+\tpublic SortedSet getLines()", "+\t{", "+\t\treturn new TreeSet(this.children.values());", "+\t}"]}]}
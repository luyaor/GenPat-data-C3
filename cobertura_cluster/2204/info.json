{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aa1230df212a8d26bd1b365175ff3f6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b2118f384691db5a63fde72dd7f0899", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SwitchData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic boolean equals(Object obj)", "signatureAfterChange": "  \tpublic boolean equals(Object obj)", "diff": ["-\t\treturn (this.defaultHits == switchData.defaultHits)", "-\t\t\t\t&& (Arrays.equals(this.hits, switchData.hits))", "-\t\t\t\t&& (this.switchNumber == switchData.switchNumber);", "+\t\tgetBothLocks(switchData);", "+\t\ttry", "+\t\t{", "+\t\t\treturn (this.defaultHits == switchData.defaultHits)", "+\t\t\t\t\t&& (Arrays.equals(this.hits, switchData.hits))", "+\t\t\t\t\t&& (this.switchNumber == switchData.switchNumber);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tswitchData.lock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbdb159a8b88d218ebac9517b9cdede5", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/JumpData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic boolean equals(Object obj)", "signatureAfterChange": "  \tpublic boolean equals(Object obj)", "diff": ["-\t\treturn (this.trueHits == branchData.trueHits)", "-\t\t\t\t&& (this.falseHits == branchData.falseHits)", "-\t\t\t\t&& (this.conditionNumber == branchData.conditionNumber);", "+\t\tgetBothLocks(branchData);", "+\t\ttry", "+\t\t{", "+\t\t\treturn (this.trueHits == branchData.trueHits)", "+\t\t\t\t\t&& (this.falseHits == branchData.falseHits)", "+\t\t\t\t\t&& (this.conditionNumber == branchData.conditionNumber);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tbranchData.lock.unlock();", "+\t\t}"]}]}
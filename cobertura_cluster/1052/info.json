{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "126a2756f3347b88984b6f43a80b432a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "debda9377d1c3467b865d915c78dbe54", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tJumpData getJumpData(int jumpNumber)", "signatureAfterChange": " \t \tJumpData getJumpData(int jumpNumber)", "diff": ["-\t\tif (jumps == null) ", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tjumps = new ArrayList();", "+\t\t\tif (jumps == null) ", "+\t\t\t{", "+\t\t\t\tjumps = new ArrayList();", "+\t\t\t}", "+\t\t\tif (jumps.size() <= jumpNumber) ", "+\t\t\t{", "+\t\t\t\tfor (int i = jumps.size(); i <= jumpNumber; jumps.add(new JumpData(i++)));", "+\t\t\t}", "+\t\t\treturn (JumpData) jumps.get(jumpNumber);", "-\t\tif (jumps.size() <= jumpNumber) ", "+\t\tfinally", "-\t\t\tfor (int i = jumps.size(); i <= jumpNumber; jumps.add(new JumpData(i++)));", "+\t\t\tlock.unlock();", "-\t\treturn (JumpData) jumps.get(jumpNumber);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac44298f4e85b384e7430a9ae2f7fee", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tsynchronized JumpData getJumpData(int jumpNumber)", "signatureAfterChange": " \t \tsynchronized JumpData getJumpData(int jumpNumber)", "diff": ["-\tsynchronized JumpData getJumpData(int jumpNumber) ", "-\t{", "-\t\t//lock.lock();", "-\t\ttry", "-\t\t{", "-\t\t\tif (jumps == null) ", "-\t\t\t{", "-\t\t\t\tjumps = new ArrayList();", "-\t\t\t}", "-\t\t\tif (jumps.size() <= jumpNumber) ", "-\t\t\t{", "-\t\t\t\tfor (int i = jumps.size(); i <= jumpNumber; jumps.add(new JumpData(i++)));", "-\t\t\t}", "-\t\t\treturn (JumpData) jumps.get(jumpNumber);", "+\tsynchronized JumpData getJumpData(int jumpNumber) {", "+\t\tif (jumps == null) {", "+\t\t\tjumps = new ArrayList<JumpData>();", "-\t\tfinally", "-\t\t{", "-\t\t\t//lock.unlock();", "+\t\tif (jumps.size() <= jumpNumber)\t{", "+\t\t\tfor (int i = jumps.size(); i <= jumpNumber; jumps.add(new JumpData(i++)));", "+\t\treturn jumps.get(jumpNumber);"]}]}
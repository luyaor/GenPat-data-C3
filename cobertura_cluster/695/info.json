{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80a12ff63601f97b39f59361363a539c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e4fe0bbea4d0d9e519ef0ec5a217dc", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "7ff4cde6cb6b71f99139358732f26e11af99b113", "commitAfterChange": "f90dcd457e7e66ecdf6df44376f8d08fea15db73", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic static void saveGlobalProjectData()", "signatureAfterChange": "  \tpublic static void saveGlobalProjectData()", "diff": ["-\t\tProjectData projectDataToSave = null;", "-\t\t", "-\t\tglobalProjectDataLock.lock();", "-\t\ttry", "-\t\t{", "-\t\t\tprojectDataToSave = globalProjectData;", "-\t", "-\t\t\t/*", "-\t\t\t * The next statement is not necessary at the moment, because this method is only called", "-\t\t\t * either at the very beginning or at the very end of a test.  If the code is changed", "-\t\t\t * to save more frequently, then this will become important.", "-\t\t\t */", "-\t\t\tglobalProjectData = new ProjectData();", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tglobalProjectDataLock.unlock();", "-\t\t}", "-", "-\t\t/*", "-\t\t * Now sleep a bit in case there is a thread still holding a reference to the \"old\"", "-\t\t * globalProjectData (now referenced with projectDataToSave).  ", "-\t\t * We want it to finish its updates.  I assume 1 second is plenty of time.", "-\t\t */", "-\t\ttry", "-\t\t{", "-\t\t\tThread.sleep(1000);", "-\t\t}", "-\t\tcatch (InterruptedException e)", "-\t\t{", "-\t\t}", "+\t\tProjectData projectDataToSave = new ProjectData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe97c4ec0d903bc084ea753af5b38e82", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static void saveGlobalProjectData()", "signatureAfterChange": "  \tpublic static void saveGlobalProjectData()", "diff": ["-\t\tProjectData projectDataToSave = new ProjectData();", "+\t\tProjectData projectDataToSave = null;", "+\t\t", "+\t\tglobalProjectDataLock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tprojectDataToSave = getGlobalProjectData();\t\t\t\t\t\t", "+\t", "+\t\t\t/*", "+\t\t\t * The next statement is not necessary at the moment, because this method is only called", "+\t\t\t * either at the very beginning or at the very end of a test.  If the code is changed", "+\t\t\t * to save more frequently, then this will become important.", "+\t\t\t */", "+\t\t\tglobalProjectData = new ProjectData();", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tglobalProjectDataLock.unlock();", "+\t\t}", "+", "+\t\t/*", "+\t\t * Now sleep a bit in case there is a thread still holding a reference to the \"old\"", "+\t\t * globalProjectData (now referenced with projectDataToSave).  ", "+\t\t * We want it to finish its updates.  I assume 1 second is plenty of time.", "+\t\t */", "+\t\ttry", "+\t\t{", "+\t\t\tThread.sleep(1000);", "+\t\t}", "+\t\tcatch (InterruptedException e)", "+\t\t{", "+\t\t}", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\t", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();\t\t"]}]}
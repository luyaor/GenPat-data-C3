{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32ce0541b465b1380290b98694b72ca2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367f0b4121baf3f7749615edf8c2209c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void _measureSource(DataInputStream disSource_)         throws IOException,                ParseException,                TokenMgrError", "signatureAfterChange": "      private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError", "diff": ["-    private void _measureSource(DataInputStream disSource_)", "-        throws IOException,", "-               ParseException,", "-               TokenMgrError", "+    private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError", "-        try {", "+        try", "+        {", "-            _pJavaParser = new JavaParser(disSource_);", "+            _pJavaParser = new JavaParser( reader );", "+", "-            Util.debug", "-                   ( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );", "-            _ncss += _pJavaParser.getNcss();       // increment the ncss", "-            _loc  += _pJavaParser.getLOC();        // and loc", "+            Util.debug( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );", "+", "+            _ncss += _pJavaParser.getNcss(); // increment the ncss", "+            _loc += _pJavaParser.getLOC(); // and loc", "-            _vFunctionMetrics = Util.concat(_vFunctionMetrics,", "-                                            _pJavaParser.getFunction());", "-            _vObjectMetrics = Util.concat(_vObjectMetrics,", "-                                          _pJavaParser.getObject());", "-            Hashtable htNewPackages = _pJavaParser.getPackage();", "-            /*Vector vNewPackages = new Vector();*/", "-            for(Enumeration ePackages = htNewPackages.keys();", "-                ePackages.hasMoreElements(); )", "+            _vFunctionMetrics.addAll( _pJavaParser.getFunction() );", "+            _vObjectMetrics.addAll( _pJavaParser.getObject() );", "+            Map htNewPackages = _pJavaParser.getPackage();", "+", "+            /* List vNewPackages = new Vector(); */", "+            for ( Iterator ePackages = htNewPackages.keySet().iterator(); ePackages.hasNext(); )", "-                String sPackage = (String)ePackages.nextElement();", "-                PackageMetric pckmNext = (PackageMetric)htNewPackages.", "-                       get(sPackage);", "+                String sPackage = (String) ePackages.next();", "+", "+                PackageMetric pckmNext = (PackageMetric) htNewPackages.get( sPackage );", "-                PackageMetric pckmPrevious =", "-                       (PackageMetric)_htPackages.get", "-                       (sPackage);", "-                pckmNext.add(pckmPrevious);", "-                _htPackages.put(sPackage, pckmNext);", "+", "+                PackageMetric pckmPrevious = (PackageMetric) _htPackages.get( sPackage );", "+                pckmNext.add( pckmPrevious );", "+", "+                _htPackages.put( sPackage, pckmNext );", "-        } catch(ParseException pParseException) {", "-            if (_sErrorMessage == null) {", "+        }", "+        catch ( ParseException pParseException )", "+        {", "+            if ( _sErrorMessage == null )", "+            {", "-            if (_pJavaParser != null) {", "+            if ( _pJavaParser != null )", "+            {", "-            ", "+", "-        } catch(TokenMgrError pTokenMgrError) {", "-            if (_sErrorMessage == null) {", "+        }", "+        catch ( TokenMgrError pTokenMgrError )", "+        {", "+            if ( _sErrorMessage == null )", "+            {", "-            ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4136d190d7fa211549d47e16c566406b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "8470613dce5289e48aeaaebf95d84de1414dad70", "commitAfterChange": "77a25c204e0d22c334a40e10db5134e2cb525c03", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void _measureSource(DataInputStream disSource_)         throws IOException,                ParseException,                TokenMgrError", "signatureAfterChange": "\r \r     private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError", "diff": ["-", "-    private void _measureSource(DataInputStream disSource_)", "-        throws IOException,", "-               ParseException,", "-               TokenMgrError", "-    {", "-        try {", "-            // create a parser object", "-            _pJavaParser = new JavaParser(disSource_);", "-            // execute the parser", "-            _pJavaParser.CompilationUnit();", "-            _ncss += _pJavaParser.getNcss();       // increment the ncss", "-            _loc  += _pJavaParser.getLOC();        // and loc", "-            // add new data to global vector", "-            _vFunctionMetrics.addAll(_pJavaParser.getFunction());", "-            _vObjectMetrics.addAll(_pJavaParser.getObject());", "-            Hashtable htNewPackages = _pJavaParser.getPackage();", "-            /*Vector vNewPackages = new Vector();*/", "-            for(Enumeration ePackages = htNewPackages.keys();", "-                ePackages.hasMoreElements(); )", "-            {", "-                String sPackage = (String)ePackages.nextElement();", "-                PackageMetric pckmNext = (PackageMetric)htNewPackages.", "-                       get(sPackage);", "-                pckmNext.name = sPackage;", "-                PackageMetric pckmPrevious =", "-                       (PackageMetric)_htPackages.get", "-                       (sPackage);", "-                pckmNext.add(pckmPrevious);", "-                _htPackages.put(sPackage, pckmNext);", "-            }", "-        } catch(ParseException pParseException) {", "-            if (_sErrorMessage == null) {", "-                _sErrorMessage = \"\";", "-            }", "-            _sErrorMessage += \"ParseException in STDIN\";", "-            if (_pJavaParser != null) {", "-                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";", "-            }", "-            _sErrorMessage += pParseException.getMessage() + \"\\n\";", "-            _thrwError = pParseException;", "-            ", "-            throw pParseException;", "-        } catch(TokenMgrError pTokenMgrError) {", "-            if (_sErrorMessage == null) {", "-                _sErrorMessage = \"\";", "-            }", "-            _sErrorMessage += \"TokenMgrError in STDIN\\n\";", "-            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";", "-            _thrwError = pTokenMgrError;", "-            ", "-            throw pTokenMgrError;", "-        }", "-    }", "+\r", "+    private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError\r", "+    {\r", "+        try\r", "+        {\r", "+            // create a parser object\r", "+            _pJavaParser = new JavaParser( reader );\r", "+\r", "+            // execute the parser\r", "+            _pJavaParser.CompilationUnit();\r", "+            Util.debug( \"Javancss._measureSource(DataInputStream).SUCCESSFULLY_PARSED\" );\r", "+\r", "+            _ncss += _pJavaParser.getNcss(); // increment the ncss\r", "+            _loc += _pJavaParser.getLOC(); // and loc\r", "+            // add new data to global vector\r", "+            _vFunctionMetrics.addAll( _pJavaParser.getFunction() );\r", "+            _vObjectMetrics.addAll( _pJavaParser.getObject() );\r", "+            Map htNewPackages = _pJavaParser.getPackage();\r", "+\r", "+            /* List vNewPackages = new Vector(); */\r", "+            for ( Iterator ePackages = htNewPackages.keySet().iterator(); ePackages.hasNext(); )\r", "+            {\r", "+                String sPackage = (String) ePackages.next();\r", "+\r", "+                PackageMetric pckmNext = (PackageMetric) htNewPackages.get( sPackage );\r", "+                pckmNext.name = sPackage;\r", "+\r", "+                PackageMetric pckmPrevious = (PackageMetric) _htPackages.get( sPackage );\r", "+                pckmNext.add( pckmPrevious );\r", "+\r", "+                _htPackages.put( sPackage, pckmNext );\r", "+            }\r", "+        }\r", "+        catch ( ParseException pParseException )\r", "+        {\r", "+            if ( _sErrorMessage == null )\r", "+            {\r", "+                _sErrorMessage = \"\";\r", "+            }\r", "+            _sErrorMessage += \"ParseException in STDIN\";\r", "+            if ( _pJavaParser != null )\r", "+            {\r", "+                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";\r", "+            }\r", "+            _sErrorMessage += pParseException.getMessage() + \"\\n\";\r", "+            _thrwError = pParseException;\r", "+\r", "+            throw pParseException;\r", "+        }\r", "+        catch ( TokenMgrError pTokenMgrError )\r", "+        {\r", "+            if ( _sErrorMessage == null )\r", "+            {\r", "+                _sErrorMessage = \"\";\r", "+            }\r", "+            _sErrorMessage += \"TokenMgrError in STDIN\\n\";\r", "+            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";\r", "+            _thrwError = pTokenMgrError;\r", "+\r", "+            throw pTokenMgrError;\r", "+        }\r", "+    }\r"]}]}
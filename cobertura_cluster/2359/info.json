{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d74f265286b02613e94b28052d9cff99", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "641d12afbeaf70ca68dee59977e06d42", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/ClassInstrumenter.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void visit(int version, int access, String name, String signature, \t\t\tString superName, String[] interfaces)", "signatureAfterChange": " \tpublic void visit(int version, int access, String name, String signature, \t\t\tString superName, String[] interfaces)", "diff": ["-\t\tclassData = this.projectData.getOrCreateClassData(this.myName);", "-", "-\t\tPackageData packageData = (PackageData)projectData.getChild(classData", "-\t\t\t\t.getPackageName());", "-\t\tSourceFileData sourceFileData = (SourceFileData)packageData", "-\t\t\t\t.getChild(classData.getSourceFileName());", "-\t\tsourceFileData.setContainsInstrumentationInfo();", "+\t\tthis.classData = this.projectData.getOrCreateClassData(this.myName);", "+\t\tthis.classData.setContainsInstrumentationInfo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92f7327809acd42271209804c5e537cb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "fc4e7457aaa78c425854b99ef34d43f14ea7ae61", "commitAfterChange": "9e7496b4ae6e9de418bca78753ccace6c03eae86", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \t@Override \tpublic void execute() throws BuildException", "diff": ["+\t@Override", "-\t\t\tif (dataFile != null)", "+\t\t\tif (dataFile != null) {", "-\t\t\tif (toDir != null)", "+\t\t\t}", "+\t\t\tif (toDir != null) {", "+\t\t\t}", "-\t\t\t\tIgnore ignoreRegex = (Ignore) ignoreRegexs.get(i);", "+\t\t\t\tIgnore ignoreRegex = ignoreRegexs.get(i);", "-\t\t\t\tIgnoreBranches ignoreBranchesRegex = (IgnoreBranches) ignoreBranchesRegexs", "+\t\t\t\tIgnoreBranches ignoreBranchesRegex = ignoreBranchesRegexs", "-\t\t\t\tIgnoreMethodAnnotation ignoreMethodAnn = (IgnoreMethodAnnotation) ignoreMethodAnnotations", "+\t\t\t\tIgnoreMethodAnnotation ignoreMethodAnn = ignoreMethodAnnotations", "-\t\t\t\tIncludeClasses includeClassesRegex = (IncludeClasses) includeClassesRegexs", "+\t\t\t\tIncludeClasses includeClassesRegex = includeClassesRegexs", "-\t\t\t\tExcludeClasses excludeClassesRegex = (ExcludeClasses) excludeClassesRegexs", "+\t\t\t\tExcludeClasses excludeClassesRegex = excludeClassesRegexs", "-\t\t\tif (ignoreTrivial)", "+\t\t\tif (ignoreTrivial) {", "+\t\t\t}", "-\t\t\tif (threadsafeRigorous)", "+\t\t\tif (threadsafeRigorous) {", "+\t\t\t}", "-\t\t\tif (failOnError)", "+\t\t\tif (failOnError) {", "+\t\t\t}", "+", "+\t\tgetJava().setClasspath(createClasspathForInstrumenter());", "+"]}]}
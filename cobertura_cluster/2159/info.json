{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b94542532fb349538b50aaa5e444fe7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f83fe24b47c33a2f42f5d04877902eb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/test/JavancssTest.java", "commitBeforeChange": "f44527006156d82d108277efea7d0bf4a4cd5a22", "commitAfterChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void testCCN( File localPath )", "signatureAfterChange": "     public void testCCN()", "diff": ["-    public void testCCN( File localPath )", "+    public void testCCN()", "-        Javancss pJavancss = measureTestFile( localPath, 40 );", "-        List vFunctions = pJavancss.getFunctionMetrics();", "+        Javancss pJavancss = measureTestFile( 40 );", "+        List/*<FunctionMetric>*/ vFunctions = pJavancss.getFunctionMetrics();", "-        int ccn = ( (Integer) ( (List) vFunctions.get( 0 ) ).get( FCT_CCN ) ).intValue();", "-        bugIf( ccn != 3, \"CCN in constructor of Test40 should be 3, it is: \" + ccn );", "+        assertCCN( vFunctions, 0, 3 );", "-        pJavancss = measureTestFile( localPath, 41 );", "+        pJavancss = measureTestFile( 41 );", "-        ccn = getCCN( vFunctions, 0 );", "-        bugIf( ccn != 3, \"CCN in constructor of Test41 should be 3, it is: \" + ccn );", "-        ccn = getCCN( vFunctions, 1 );", "-        bugIf( ccn != 1, \"CCN in method of Test41 should be 1, it is: \" + ccn );", "-        ccn = getCCN( vFunctions, 2 );", "-        bugIf( ccn != 3, \"CCN in method of Test41 should be 3, it is: \" + ccn );", "-        ccn = getCCN( vFunctions, 3 );", "-        bugIf( ccn != 3, \"CCN in method of Test41 should be 3, it is: \" + ccn );", "-        ccn = getCCN( vFunctions, 4 );", "-        bugIf( ccn != 1, \"CCN in method of Test41 should be 1, it is: \" + ccn );", "+        assertCCN( vFunctions, 0, 3 );", "+        assertCCN( vFunctions, 1, 1 );", "+        assertCCN( vFunctions, 2, 3 );", "+        assertCCN( vFunctions, 3, 3 );", "+        assertCCN( vFunctions, 4, 1 );", "-        pJavancss = measureTestFile( localPath, 72 );", "+        pJavancss = measureTestFile( 72 );", "-        int expectedCCN = 4;", "-        int methodIndex = 0;", "-        assertCCN( vFunctions, methodIndex, expectedCCN );", "-", "-        expectedCCN = 4 + 1;", "-        methodIndex = 1;", "-        assertCCN( vFunctions, methodIndex, expectedCCN );", "-", "-        expectedCCN = 4;", "-        methodIndex = methodIndex + 1;", "-        assertCCN( vFunctions, methodIndex, expectedCCN );", "-", "-        expectedCCN = 4;", "-        methodIndex = methodIndex + 1;", "-        assertCCN( vFunctions, methodIndex, expectedCCN );", "-", "-        expectedCCN = 2;", "-        methodIndex = methodIndex + 1;", "-        assertCCN( vFunctions, methodIndex, expectedCCN );", "+        assertCCN( vFunctions, 0, 4 );", "+        assertCCN( vFunctions, 1, 5 );", "+        assertCCN( vFunctions, 2, 4 );", "+        assertCCN( vFunctions, 3, 4 );", "+        assertCCN( vFunctions, 4, 2 );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1fd737725f1a5f8540f61202962b94", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "dfb5a2eb9802e7508575bb28a5567131dea08a01", "commitAfterChange": "fc2ad78e8106be7851ebaf993c1d98b6f16724ba", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void generateSourceFile(SourceFileData sourceFileData) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate void generateSourceFile(SourceFileData sourceFileData) \t\t\tthrows IOException", "diff": ["-\t\t\tout.println(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\");", "-\t        out.println(\"           \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\");", "-\t\t\t", "+\t\t\tout", "+\t\t\t\t\t.println(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\");", "+\t\t\tout", "+\t\t\t\t\t.println(\"           \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\");", "+", "-\t\t\tout.println(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"/>\");", "+\t\t\tout", "+\t\t\t\t\t.println(\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\"/>\");", "-\t\t\t// TODO: Change this to actually show multiple classes.", "-\t\t\tout.println(generateTableRowForSourceFile(sourceFileData));", "+\t\t\tout.println(generateTableRowsForSourceFile(sourceFileData));", "+", "+\t\t\t// Output the coverage summary for methods in this class", "+\t\t\t// TODO", "-\t\t\tout", "-\t\t\t\t\t.println(\"<table cellspacing=\\\"0\\\" cellpadding=\\\"0\\\" class=\\\"src\\\">\");", "-\t\t\tBufferedReader br = null;", "-\t\t\ttry", "-\t\t\t{", "-\t\t\t\t// TODO: If file was not found, do not generate a table with source at all.", "-\t\t\t\tFile sourceFile = finder.getFileForSource(sourceFileData.getName());", "-\t\t\t\tbr = new BufferedReader(new FileReader(sourceFile));", "-\t\t\t\tString lineStr;", "-\t\t\t\tJavaToHtml javaToHtml = new JavaToHtml();", "-\t\t\t\tint lineNumber = 1;", "-\t\t\t\twhile ((lineStr = br.readLine()) != null)", "-\t\t\t\t{", "-\t\t\t\t\tout.println(\"<tr>\");", "-\t\t\t\t\tif (sourceFileData.isValidSourceLineNumber(lineNumber))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tlong numberOfHits = sourceFileData", "-\t\t\t\t\t\t\t\t.getHitCount(lineNumber);", "-\t\t\t\t\t\tout.println(\"  <td class=\\\"numLineCover\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t+ lineNumber + \"</td>\");", "-\t\t\t\t\t\tif (numberOfHits > 0)", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"nbHitsCovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t+ numberOfHits + \"</td>\");", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t\t+ \"</pre></td>\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"nbHitsUncovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t\t+ numberOfHits + \"</td>\");", "-\t\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\"><span class=\\\"srcUncovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t\t+ \"</span></pre></td>\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t{", "-\t\t\t\t\t\tout.println(\"  <td class=\\\"numLine\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t+ lineNumber + \"</td>\");", "-\t\t\t\t\t\tout.println(\"  <td class=\\\"nbHits\\\">&nbsp;</td>\");", "-\t\t\t\t\t\tout", "-\t\t\t\t\t\t\t\t.println(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t+ \"</pre></td>\");", "-\t\t\t\t\t}", "-\t\t\t\t\tout.println(\"</tr>\");", "-\t\t\t\t\tlineNumber++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tfinally", "-\t\t\t{", "-\t\t\t\tif (br != null)", "-\t\t\t\t{", "-\t\t\t\t\tbr.close();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tout.println(\"</table>\");", "+\t\t\tout.println(generateHtmlizedJavaSource(sourceFileData));", "-\t\t\tout.println(\"<div class=\\\"footer\\\">\");", "-\t\t\tout", "-\t\t\t\t\t.println(\"Reports generated by <a href=\\\"http://cobertura.sourceforge.net/\\\" target=\\\"_top\\\">Cobertura</a>.\");", "-\t\t\tout.println(\"</div>\");", "+\t\t\tout.println(generateFooter());", "+\t}"]}]}
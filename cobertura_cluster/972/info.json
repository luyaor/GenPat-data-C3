{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "052f3de8ce7d6fd5f07bde64c53c08d7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eeb30a70dd19184500934598c01f34b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "4558077bc3fa9bafa9125049db80cf9c99da089f", "commitAfterChange": "f21d7d6c791a9d50e30e19d77af0c8b3f2897c6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-\tpublic void execute() throws BuildException {", "+", "+\tpublic void execute() throws BuildException", "+\t{", "-\t\t\t// ignoreRegex.setRegex() is never called, but that's ok", "-\t\t\t// because ant sets it somehow, I think", "+\t\t\tfor (int i = 0; i < includeClassesRegexs.size(); i++) {", "+\t\t\t\tIncludeClasses includeClassesRegex = (IncludeClasses)includeClassesRegexs.get(i);", "+\t\t\t\tbuilder.addArg(\"--includeClasses\", includeClassesRegex.getRegex());", "+\t\t\t}", "+", "+\t\t\tfor (int i = 0; i < excludeClassesRegexs.size(); i++) {", "+\t\t\t\tExcludeClasses excludeClassesRegex = (ExcludeClasses)excludeClassesRegexs.get(i);", "+\t\t\t\tbuilder.addArg(\"--excludeClasses\", excludeClassesRegex.getRegex());", "+\t\t\t}", "+", "+\t\t\tif (instrumentationClasspath != null) {", "+\t\t\t\tprocessInstrumentationClasspath();", "+\t\t\t}", "+\t\tif (forkedJVMDebugPort != null && forkedJVMDebugPort.intValue() > 0) {", "+\t\t\tgetJava().createJvmarg().setValue(\"-Xdebug\");", "+\t\t\tgetJava().createJvmarg().setValue(\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort + \",server=y,suspend=y\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92f7327809acd42271209804c5e537cb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "fc4e7457aaa78c425854b99ef34d43f14ea7ae61", "commitAfterChange": "9e7496b4ae6e9de418bca78753ccace6c03eae86", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \t@Override \tpublic void execute() throws BuildException", "diff": ["+\t@Override", "-\t\t\tif (dataFile != null)", "+\t\t\tif (dataFile != null) {", "-\t\t\tif (toDir != null)", "+\t\t\t}", "+\t\t\tif (toDir != null) {", "+\t\t\t}", "-\t\t\t\tIgnore ignoreRegex = (Ignore) ignoreRegexs.get(i);", "+\t\t\t\tIgnore ignoreRegex = ignoreRegexs.get(i);", "-\t\t\t\tIgnoreBranches ignoreBranchesRegex = (IgnoreBranches) ignoreBranchesRegexs", "+\t\t\t\tIgnoreBranches ignoreBranchesRegex = ignoreBranchesRegexs", "-\t\t\t\tIgnoreMethodAnnotation ignoreMethodAnn = (IgnoreMethodAnnotation) ignoreMethodAnnotations", "+\t\t\t\tIgnoreMethodAnnotation ignoreMethodAnn = ignoreMethodAnnotations", "-\t\t\t\tIncludeClasses includeClassesRegex = (IncludeClasses) includeClassesRegexs", "+\t\t\t\tIncludeClasses includeClassesRegex = includeClassesRegexs", "-\t\t\t\tExcludeClasses excludeClassesRegex = (ExcludeClasses) excludeClassesRegexs", "+\t\t\t\tExcludeClasses excludeClassesRegex = excludeClassesRegexs", "-\t\t\tif (ignoreTrivial)", "+\t\t\tif (ignoreTrivial) {", "+\t\t\t}", "-\t\t\tif (threadsafeRigorous)", "+\t\t\tif (threadsafeRigorous) {", "+\t\t\t}", "-\t\t\tif (failOnError)", "+\t\t\tif (failOnError) {", "+\t\t\t}", "+", "+\t\tgetJava().setClasspath(createClasspathForInstrumenter());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a94233b5163b5e0f528e075cf9f81b54", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "35acea63ae80bc6a1e7453e64f26fa350a167870", "commitAfterChange": "686ffbecc7fe730d4e67767186de755b501fcc7f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \t@Override \tpublic void execute() throws BuildException", "signatureAfterChange": "  \t@Override \tpublic void execute() throws BuildException", "diff": ["-\t\t\t\tbuilder.addArg(\"--ignoreBranches\", ignoreBranchesRegex", "-\t\t\t\t\t\t.getRegex());", "+\t\t\t\tbuilder.addArg(\"--ignoreBranches\",", "+\t\t\t\t\t\tignoreBranchesRegex.getRegex());", "-\t\t\t\tbuilder.addArg(\"--ignoreMethodAnnotation\", ignoreMethodAnn", "-\t\t\t\t\t\t.getAnnotationName());", "+\t\t\t\tbuilder.addArg(\"--ignoreMethodAnnotation\",", "+\t\t\t\t\t\tignoreMethodAnn.getAnnotationName());", "+\t\t\t}", "+", "+\t\t\tfor (int i = 0; i < ignoreClassAnnotations.size(); i++) {", "+\t\t\t\tIgnoreClassAnnotation ignoreClassAnn = ignoreClassAnnotations", "+\t\t\t\t\t\t.get(i);", "+\t\t\t\tbuilder.addArg(\"--ignoreClassAnnotation\",", "+\t\t\t\t\t\tignoreClassAnn.getAnnotationName());", "-\t\t\t\tbuilder.addArg(\"--includeClasses\", includeClassesRegex", "-\t\t\t\t\t\t.getRegex());", "+\t\t\t\tbuilder.addArg(\"--includeClasses\",", "+\t\t\t\t\t\tincludeClassesRegex.getRegex());", "-\t\t\t\tbuilder.addArg(\"--excludeClasses\", excludeClassesRegex", "-\t\t\t\t\t\t.getRegex());", "+\t\t\t\tbuilder.addArg(\"--excludeClasses\",", "+\t\t\t\t\t\texcludeClassesRegex.getRegex());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6531046171f5f413f7fc34b33acdd49b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6170a6ce7d26d5a86907bbb9408e3eec", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "140c25cf418cf6df49914095c18a9f8b05686837", "commitAfterChange": "cd6bc28c213448c4f17fad67a6e8eae42d8d9463", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static void applyTouchesToSingleClassOnProjectData(final ClassData classData,final Class<?> c)", "signatureAfterChange": "  \tprivate static void applyTouchesToSingleClassOnProjectData(final ClassData classData,final Class<?> c)", "diff": ["-\t\t\tField f = c.getDeclaredField(AbstractCodeProvider.COBERTURA_COUNTERS_FIELD_NAME);", "-\t\t\tf.setAccessible(true);", "-\t\t\tfinal int[] res_src = (int[]) f.get(null);", "-\t\t\tfinal int[] res=new int[res_src.length];", "-\t\t\tfor(int i=0; i<res.length; i++){", "-\t\t\t\tres[i]=res_src[i];", "-\t\t\t\tres_src[i]=0;", "-\t\t\t}", "-\t\t\t", "-//\t\t\tSystem.out.println(\"Counters:\"\t+ Arrays.toString(res));", "+\t\t\tMethod m0 = c.getDeclaredMethod(AbstractCodeProvider.COBERTURA_GET_AND_RESET_COUNTERS_METHOD_NAME);", "+\t\t\tm0.setAccessible(true);", "+\t\t\tfinal int[] res=(int[])m0.invoke(null, new Object[]{});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c68e5f7c60545377af3d4a9b828b85d0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t@Override \t\tpublic int hashCode()", "signatureAfterChange": "  \tprivate static void applyTouchesToSingleClassOnProjectData(final ClassData classData,final Class<?> c)", "diff": ["+", "+\tprivate static void applyTouchesToSingleClassOnProjectData(final ClassData classData,final Class<?> c) {", "+\t\tSystem.out.println(\"----------- \"+ c.getCanonicalName() + \" ---------------- \");", "+\t\ttry {", "+\t\t\tField f = c.getDeclaredField(AbstractCodeProvider.COBERTURA_COUNTERS_FIELD_NAME);", "+\t\t\tf.setAccessible(true);", "+\t\t\tfinal int[] res_src = (int[]) f.get(null);", "+\t\t\tfinal int[] res=new int[res_src.length];", "+\t\t\tfor(int i=0; i<res.length; i++){", "+\t\t\t\tres[i]=res_src[i];", "+\t\t\t\tres_src[i]=0;", "+\t\t\t}", "+\t\t\t", "+//\t\t\tSystem.out.println(\"Counters:\"\t+ Arrays.toString(res));", "+\t\t\t", "+\t\t\tLightClassmapListener lightClassmap=new ApplyToClassDataLightClassmapListener(classData,res);\t\t\t", "+\t\t\tMethod m = c.getDeclaredMethod(AbstractCodeProvider.COBERTURA_CLASSMAP_METHOD_NAME,LightClassmapListener.class);", "+\t\t\tm.setAccessible(true);", "+\t\t\tm.invoke(null, lightClassmap);", "+\t\t} catch (Exception e) {", "+\t\t\te.printStackTrace();", "-\t\t@Override", "-\t\tpublic int hashCode() {", "-\t\t\tfinal int prime = 31;", "-\t\t\tint result = 1;", "-\t\t\tresult = prime * result + classId;", "-\t\t\tresult = prime * result + lineNumber;", "-\t\t\treturn result;", "-\t\t}", "+"]}]}
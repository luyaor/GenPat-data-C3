{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e4b31b86a18cecd55b2d74a6a30ada9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a7d8ee8da0b0e1632416fcdc6d68219", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/pass2/BuildClassMapClassVisitor.java", "commitBeforeChange": "35acea63ae80bc6a1e7453e64f26fa350a167870", "commitAfterChange": "686ffbecc7fe730d4e67767186de755b501fcc7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic AnnotationVisitor visitAnnotation(String name, boolean arg1)", "signatureAfterChange": "  \t@Override \tpublic AnnotationVisitor visitAnnotation(String name, boolean arg1)", "diff": ["+\t\t} else if (ignoredClassAnnotations != null) {", "+\t\t\tString className = Type.getObjectType(name).getClassName();", "+\t\t\t// Class name contains artifacts anyway so trimming them out before", "+\t\t\t// matching", "+\t\t\tString normalizedClassName = className.replaceAll(\"[L;]\", \"\");", "+\t\t\tif (ignoredClassAnnotations.contains(normalizedClassName)) {", "+\t\t\t\ttoInstrument = false;", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "377f58859eaa7d9c9c23d608bf150f41", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/FirstPassMethodInstrumenter.java", "commitBeforeChange": "792c5093dbce280ed92358a7ad1456924b5e55ab", "commitAfterChange": "16403757be60e9df4fb5dd5f25f934e5bcad9472", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void visitEnd()", "signatureAfterChange": "  \tpublic void visitEnd()", "diff": ["+", "+\t\t// if we get to the end and nothing has ruled out this method being trivial,", "+\t\t// then it must be trivial, so we'll ignore it, if configured to do so", "+\t\tif(ignoreTrivial && mightBeTrivial) {", "+\t\t\tignored = true;", "+\t\t}", "+\t\t", "+\t\tif(ignored) {", "+\t\t\tIterator iter = lineLabels.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tclassData.removeLine(((Integer) iter.next()).intValue());", "+\t\t\t}", "+\t\t\tlineLabels.clear();", "+\t\t}"]}]}
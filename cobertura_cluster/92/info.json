{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1018840c9a41139821386c2d814b81b5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8144ef3afa074f997a73362b87be5af2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 137, "signatureBeforeChange": "\r \r   final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException", "signatureAfterChange": "    final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException", "diff": ["-\r", "-  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {\r", "-    jj_consume_token(LBRACE);\r", "-           _ncss++; Util.debug( \"ClassOrInterfaceBody()._ncss++\" );\r", "-    label_70:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-      case TRANSIENT:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case IDENTIFIER:\r", "-      case LBRACE:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case LT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[181] = jj_gen;\r", "-        break label_70;\r", "-      }\r", "-      ClassOrInterfaceBodyDeclaration(isInterface);\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-  }\r", "+", "+  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {", "+    jj_consume_token(LBRACE);", "+           _ncss++; Util.debug( \"ClassOrInterfaceBody()._ncss++\" );", "+    label_73:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case DOUBLE:", "+      case ENUM:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+      case TRANSIENT:", "+      case VOID:", "+      case VOLATILE:", "+      case IDENTIFIER:", "+      case LBRACE:", "+      case SEMICOLON:", "+      case AT:", "+      case LT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[186] = jj_gen;", "+        break label_73;", "+      }", "+      ClassOrInterfaceBodyDeclaration(isInterface);", "+    }", "+    jj_consume_token(RBRACE);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd59ffe334039caf3f0916566a1f10b9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 137, "signatureBeforeChange": "\r \r   final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException", "signatureAfterChange": "    final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException", "diff": ["-\r", "-  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {\r", "-    jj_consume_token(LBRACE);\r", "-           _ncss++; Util.debug( \"ClassOrInterfaceBody()._ncss++\" );\r", "-    label_70:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-      case TRANSIENT:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case IDENTIFIER:\r", "-      case LBRACE:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case LT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[181] = jj_gen;\r", "-        break label_70;\r", "-      }\r", "-      ClassOrInterfaceBodyDeclaration(isInterface);\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-  }\r", "+", "+  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {", "+    jj_consume_token(LBRACE);", "+           _ncss++; Util.debug( \"ClassOrInterfaceBody()._ncss++\" );", "+    label_73:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case DOUBLE:", "+      case ENUM:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+      case TRANSIENT:", "+      case VOID:", "+      case VOLATILE:", "+      case IDENTIFIER:", "+      case LBRACE:", "+      case SEMICOLON:", "+      case AT:", "+      case LT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[186] = jj_gen;", "+        break label_73;", "+      }", "+      ClassOrInterfaceBodyDeclaration(isInterface);", "+    }", "+    jj_consume_token(RBRACE);", "+  }"]}]}
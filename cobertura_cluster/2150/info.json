{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "852100f79f4b24976ede07ca9f9ea318", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b001bd88694dda174f3cabd6fcefe7e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/ReportTask.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void setClasspath(Path classpath)", "signatureAfterChange": "  \tprivate void handleFilesets()", "diff": ["+\tprivate void handleFilesets() {", "+\t\tSet filenames = new HashSet();", "+\t\tIterator iter = fileSets.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t\tFileSet fileSet = (FileSet)iter.next();", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(baseDir(fileSet));", "+", "+\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\taddFilenames((String[])filenames.toArray(new String[filenames.size()]));", "-\tpublic void setClasspath(Path classpath)", "-\t{", "-\t\tcreateClasspath().append(classpath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5761029e872711ef6f1f0f9ac2d7e2e3", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/ClassDataTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testBranchCoverage()", "signatureAfterChange": "  \tpublic void testBranchCoverage()", "diff": ["-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tassertEquals(0, b.getNumberOfCoveredBranches());", "-\t\tc.markLineAsBranch(1);", "-\t\tc.markLineAsBranch(2);", "-\t\tc.markLineAsBranch(3);", "-\t\tc.markLineAsBranch(4);", "+\t\tc.addLineJump(1, 0);", "+\t\tc.addLineJump(2, 0);", "+\t\tc.addLineSwitch(3, 0, 1, 3);", "+\t\tc.addLineSwitch(4, 0, 1, 3);", "+\t\tassertEquals(12, c.getNumberOfValidBranches());", "-\t\tassertEquals(4, c.getNumberOfValidBranches());", "-\t\tc.touch(1);", "-\t\tc.touch(2);", "+\t\tc.touchJump(1, 0, true);", "+\t\tc.touchJump(1, 0, false);", "+\t\tc.touchJump(2, 0, true);", "+\t\tc.touchJump(2, 0, false);", "-\t\tassertEquals(2, c.getNumberOfCoveredBranches());", "-\t\tassertEquals(4, c.getNumberOfValidBranches());", "-\t\tassertEquals(0.50d, c.getBranchCoverageRate(), 0d);", "-\t\tassertEquals(0.50d, c.getBranchCoverageRate(\"test(I)B\"), 0d);", "+\t\tassertEquals(12, c.getNumberOfValidBranches());", "+\t\tassertEquals(4, c.getNumberOfCoveredBranches());", "+\t\tassertEquals(0.33d, c.getBranchCoverageRate(), 0.01d);", "+\t\tassertEquals(0.33d, c.getBranchCoverageRate(\"test(I)B\"), 0.01d);", "+", "+\t\tc.touchSwitch(3, 0, 0);", "+\t\tc.touchSwitch(3, 0, 1);", "+\t\tc.touchSwitch(4, 0, 2);", "+\t\tc.touchSwitch(4, 0, -1);", "+\t\t", "+\t\tassertEquals(12, c.getNumberOfValidBranches());", "+\t\tassertEquals(8, c.getNumberOfCoveredBranches());", "+\t\tassertEquals(0.66d, c.getBranchCoverageRate(), 0.01d);", "+\t\tassertEquals(0.66d, c.getBranchCoverageRate(\"test(I)B\"), 0.01d);"]}]}
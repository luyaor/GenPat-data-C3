{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63ad1c33dc920a0a9802c2e8408c7157", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59e9d2feca384b6aae69684107b32411", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "67029061118b00390b84887cab32e37e54cecd25", "commitAfterChange": "f52fed4a7d0d851c92ab4a6013f2aa7b1b3c2cde", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tvoid coverage(String[] filenames)", "signatureAfterChange": "  \tprivate void addFilenames(String[] filenames)", "diff": ["-\tvoid coverage(String[] filenames)", "+\tprivate void addFilenames(String[] filenames)", "-\t\tsaveArgs();", "-", "-", "-\t\t/**", "-\t\t * TODO: Do something here so that we can set System.in and System.out on", "-\t\t * getJava() to the one we're using now.  So that when instrumentation calls", "-\t\t * System.out, it will show up as \"[instrument] doing stuff\" instead of", "-\t\t * \"[java] doing stuff\" in the ant output.", "-\t\t */", "-\t\tif (getJava().executeJava() != 0)", "-\t\t{", "-\t\t\tthrow new BuildException();", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9972157c1dd05e8dd2ce904b303d13f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "67029061118b00390b84887cab32e37e54cecd25", "commitAfterChange": "f52fed4a7d0d851c92ab4a6013f2aa7b1b3c2cde", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["+", "+\t\tSet filenames = new HashSet();", "+\t\tIterator iter = fileSets.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tFileSet fileSet = (FileSet)iter.next();", "+", "+\t\t\taddArg(\"--basedir\");", "+\t\t\taddArg(baseDir(fileSet));", "+", "+\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\t}", "+\t\taddFilenames((String[])filenames.toArray(new String[filenames.size()]));", "+", "+\t\tif (dataFile != null)", "+\t\t{", "+\t\t\taddArg(\"--datafile\");", "+\t\t\taddArg(dataFile);", "+\t\t}", "+", "-\t\tSet filenames = new HashSet();", "-\t\tIterator i = fileSets.iterator();", "+\t\tsaveArgs();", "-\t\twhile (i.hasNext())", "+\t\t/**", "+\t\t * TODO: Do something here so that we can set System.in and System.out on", "+\t\t * getJava() to the one we're using now.  So that when instrumentation calls", "+\t\t * System.out, it will show up as \"[instrument] doing stuff\" instead of", "+\t\t * \"[java] doing stuff\" in the ant output.", "+\t\t */", "+\t\tif (getJava().executeJava() != 0)", "-\t\t\tFileSet fileSet = (FileSet)i.next();", "-", "-\t\t\taddArg(\"--basedir\");", "-\t\t\taddArg(baseDir(fileSet));", "-", "-\t\t\tfilenames.addAll(Arrays.asList(getFilenames(fileSet)));", "+\t\t\tthrow new BuildException();", "-", "-\t\tcoverage((String[])filenames.toArray(new String[filenames.size()]));"]}]}
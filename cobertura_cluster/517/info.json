{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4f929fbd170fa24add3279e61a809e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d543a2b5c63f8d8fbd344b2e006e53d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/webapp/test/WebAppFunctionalTest.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void basicStartAndStopOfWebApp(boolean tomcat) throws Exception", "signatureAfterChange": "  \tpublic void basicStartAndStopOfWebApp(boolean tomcat) throws Exception", "diff": ["-\t\tFile tempDir = TestUtils.getTempDir();", "-\t\tFile webappServerDir = new File(tempDir, \"webserver\");", "-", "-\t\tfinal File srcDir = new File(tempDir, SRC_DIR);", "-\t\tnew File(webappServerDir, \"logs\").mkdirs();", "-\t\tWebappServer.writeSimpleServletSource(srcDir);", "-", "-\t\tfinal String appName = \"simple\";", "-", "-\t\twebappServer.deployApp(new HashMap() {", "-\t\t\t{", "-\t\t\t\tput(\"webInfText\", WebappServer.SIMPLE_SERVLET_WEB_XML_TEXT);", "-\t\t\t\tput(\"srcDir\", srcDir);", "-\t\t\t\tput(\"appName\", appName);", "-\t\t\t\tput(\"instrumentRegEx\", \"com.acme.*\");", "-\t\t\t}", "-\t\t});", "+\t\twebappServer.deployApp(srcDir, \"com.acme.*\");", "-\t\tMap data = webappServer.withRunningServer(new Closure(null) {", "-\t\t\tpublic void doCall(HashMap values) {", "-\t\t\t}", "-\t\t});", "+\t\twebappServer.withRunningServer();", "-\t\t//do a HTTP get so the doGet method will be hit", "-\t\tString webappResponse = IOUtils", "-\t\t\t\t.toString(new URL(\"http://\" + data.get(\"hostname\") + \":\"", "-\t\t\t\t\t\t+ data.get(\"webappPort\") + \"/\" + appName", "-\t\t\t\t\t\t+ \"/SimpleServlet\").openConnection().getInputStream());", "+\t\twebappServer.pingServer();", "+\t\t", "+\t\tFile xmlReport = webappServer.getXmlReport();", "-\t\tassertEquals(\"Webapp response was incorrect\", \"Hi\", webappResponse", "-\t\t\t\t.trim());", "+\t\tgenerateReportFile(xmlReport);", "-\t\tReportTask reportTask = new ReportTask();", "-\t\treportTask.setProject(TestUtils.project);", "-\t\treportTask.setDataFile(((File) data.get(\"datafile\")).getAbsolutePath());", "-\t\treportTask.setFormat(\"xml\");", "-\t\treportTask.setDestDir(new File(((File) data.get(\"xmlReport\"))", "-\t\t\t\t.getParent()));", "-\t\treportTask.execute();", "+\t\tNode dom = TestUtils.getXMLReportDOM(xmlReport);", "-\t\tNode dom = TestUtils.getXMLReportDOM(((File) data.get(\"xmlReport\"))", "-\t\t\t\t.getAbsolutePath());", "-", "-\t\t//make sure the report shows the doGet method has not been hit yet - the data is not flushed until the server stops", "-\t\treportTask = new ReportTask();", "-\t\treportTask.setProject(TestUtils.project);", "-\t\treportTask.setDataFile(((File) data.get(\"datafile\")).getAbsolutePath());", "-\t\treportTask.setFormat(\"xml\");", "-\t\treportTask.setDestDir(new File(((File) data.get(\"xmlReport\"))", "-\t\t\t\t.getParent()));", "-\t\treportTask.execute();", "+\t\tgenerateReportFile(xmlReport);", "-\t\tdom = TestUtils.getXMLReportDOM(((File) data.get(\"xmlReport\"))", "-\t\t\t\t.getAbsolutePath());", "+\t\tdom = TestUtils.getXMLReportDOM(xmlReport);", "-\t\t//now that the server has stopped, make sure the report shows it has been hit"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0badd4ca310645c3bdd4c5ac97e0a35", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/AbstractCodeProvider.java", "commitBeforeChange": "23923f3f6dbe900a5325855399c600eb696bd86f", "commitAfterChange": "a1aed49ea94661201f3b18a31fad619a8a3a5c78", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void generateCoberturaClassMapMethod(ClassVisitor cv,ClassMap classMap)", "signatureAfterChange": " \tpublic void generateCoberturaClassMapMethod(ClassVisitor cv, ClassMap classMap)", "diff": ["-\tpublic void generateCoberturaClassMapMethod(ClassVisitor cv,ClassMap classMap){", "-\t\tfinal String CLASSMAP_LISTENER_INTERNALNAME=Type.getInternalName(LightClassmapListener.class);", "+\tpublic void generateCoberturaClassMapMethod(ClassVisitor cv, ClassMap classMap) {", "+\t\t", "+\t\tLinkedList<TouchPointDescriptor> touchPointDescriptors = new LinkedList<TouchPointDescriptor>(classMap.getTouchPointsInLineOrder());", "+\t\tint parts = 0;", "+\t\tfor(int j=0; touchPointDescriptors.size() > 0; j++) {", "+\t\t\tList<TouchPointDescriptor> bufor = new LinkedList<TouchPointDescriptor>(); ", "+\t\t\tfor (int i = 0; i < 1000 && touchPointDescriptors.size() > 0; i++){", "+\t\t\t  bufor.add(touchPointDescriptors.pollFirst());", "+\t\t\t}", "+\t\t\tclassMapContent(cv, j, bufor);", "+\t\t\tparts++;", "+\t\t}", "+\t\t\t", "+\t\tfor (int i=0; i < parts; i++) {", "+\t\t\tmv.visitInsn(Opcodes.DUP);", "+\t\t\tmv.visitMethodInsn(Opcodes.INVOKESTATIC, classMap.getClassName(), ", "+\t\t\t\t\tCOBERTURA_CLASSMAP_METHOD_NAME+\"_\"+i, \"(\"+Type.getType(LightClassmapListener.class).toString()+\")V\");", "+\t\t}\t", "+", "+\t\tmv.visitInsn(Opcodes.POP);", "+\t\tmv.visitInsn(Opcodes.RETURN);", "+\t\tmv.visitMaxs(0, 0);//will be recalculated by writer", "+\t\tmv.visitEnd();\t\t", "+\t}", "-\t\tList<TouchPointDescriptor> touchPointDescriptors=classMap.getTouchPointsInLineOrder();", "-\t\tfor (TouchPointDescriptor tpd:touchPointDescriptors){", "-\t\t}\t\t"]}]}
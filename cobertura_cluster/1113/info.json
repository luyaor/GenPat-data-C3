{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7134957da4e8e07174602e18222d046a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e3bdafb3cf205cad77c5571c048fd1b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic boolean equals(Object obj)", "signatureAfterChange": " \tpublic boolean equals(Object obj)", "diff": ["-\t\treturn super.equals(obj)", "-\t\t\t&& this.branches.equals(classData.branches)", "-\t\t\t&& this.methodNamesAndDescriptors", "-\t\t\t\t.equals(classData.methodNamesAndDescriptors)", "-\t\t\t&& this.name.equals(classData.name)", "-\t\t\t&& this.sourceFileName.equals(classData.sourceFileName);", "+\t\tgetBothLocks(classData);", "+\t\ttry", "+\t\t{", "+\t\t\treturn super.equals(obj)", "+\t\t\t\t&& this.branches.equals(classData.branches)", "+\t\t\t\t&& this.methodNamesAndDescriptors", "+\t\t\t\t\t.equals(classData.methodNamesAndDescriptors)", "+\t\t\t\t&& this.name.equals(classData.name)", "+\t\t\t\t&& this.sourceFileName.equals(classData.sourceFileName);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tclassData.lock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa743df4daac5ec15383d0607c7be36c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": " \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tsuper.merge(coverageData);", "-", "-\t\t// We can't just call this.branches.putAll(classData.branches);", "-\t\t// Why not?  If we did a putAll, then the LineData objects from", "-\t\t// the coverageData class would overwrite the LineData objects", "-\t\t// that are already in \"this.branches\"  And we don't need to", "-\t\t// update the LineData objects that are already in this.branches", "-\t\t// because they are shared between this.branches and this.children,", "-\t\t// so the object hit counts will be moved when we called", "-\t\t// super.merge() above.", "-\t\tfor (Iterator iter = classData.branches.keySet().iterator(); iter.hasNext();)", "+\t\tgetBothLocks(classData);", "+\t\ttry", "-\t\t\tObject key = iter.next();", "-\t\t\tif (!this.branches.containsKey(key))", "+\t\t\tsuper.merge(coverageData);", "+\t", "+\t\t\t// We can't just call this.branches.putAll(classData.branches);", "+\t\t\t// Why not?  If we did a putAll, then the LineData objects from", "+\t\t\t// the coverageData class would overwrite the LineData objects", "+\t\t\t// that are already in \"this.branches\"  And we don't need to", "+\t\t\t// update the LineData objects that are already in this.branches", "+\t\t\t// because they are shared between this.branches and this.children,", "+\t\t\t// so the object hit counts will be moved when we called", "+\t\t\t// super.merge() above.", "+\t\t\tfor (Iterator iter = classData.branches.keySet().iterator(); iter.hasNext();)", "-\t\t\t\tthis.branches.put(key, classData.branches.get(key));", "+\t\t\t\tObject key = iter.next();", "+\t\t\t\tif (!this.branches.containsKey(key))", "+\t\t\t\t{", "+\t\t\t\t\tthis.branches.put(key, classData.branches.get(key));", "+\t\t\t\t}", "+\t", "+\t\t\tthis.containsInstrumentationInfo |= classData.containsInstrumentationInfo;", "+\t\t\tthis.methodNamesAndDescriptors.addAll(classData", "+\t\t\t\t\t.getMethodNamesAndDescriptors());", "+\t\t\tif (classData.sourceFileName != null)", "+\t\t\t\tthis.sourceFileName = classData.sourceFileName;", "-", "-\t\tthis.containsInstrumentationInfo |= classData.containsInstrumentationInfo;", "-\t\tthis.methodNamesAndDescriptors.addAll(classData", "-\t\t\t\t.getMethodNamesAndDescriptors());", "-\t\tif (classData.sourceFileName != null)", "-\t\t\tthis.sourceFileName = classData.sourceFileName;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tclassData.lock.unlock();", "+\t}"]}]}
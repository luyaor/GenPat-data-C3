{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3ee3f730092be1e31868c0550b4e596", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb9c4950da95083604ef69c08b9b233", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "\r \r   final public void ReturnStatement() throws ParseException", "signatureAfterChange": "    final public void ReturnStatement() throws ParseException", "diff": ["-\r", "-  final public void ReturnStatement() throws ParseException {\r", "-    jj_consume_token(RETURN);\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case ASSERT:\r", "-    case BOOLEAN:\r", "-    case BYTE:\r", "-    case CHAR:\r", "-    case DOUBLE:\r", "-    case ENUM:\r", "-    case FALSE:\r", "-    case FLOAT:\r", "-    case INT:\r", "-    case LONG:\r", "-    case NEW:\r", "-    case NULL:\r", "-    case SHORT:\r", "-    case SUPER:\r", "-    case THIS:\r", "-    case TRUE:\r", "-    case VOID:\r", "-    case INTEGER_LITERAL:\r", "-    case FLOATING_POINT_LITERAL:\r", "-    case CHARACTER_LITERAL:\r", "-    case STRING_LITERAL:\r", "-    case IDENTIFIER:\r", "-    case LPAREN:\r", "-    case BANG:\r", "-    case TILDE:\r", "-    case INCR:\r", "-    case DECR:\r", "-    case PLUS:\r", "-    case MINUS:\r", "-      Expression();\r", "-      break;\r", "-    default:\r", "-      jj_la1[157] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(SEMICOLON);\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-                _cyc++;\r", "-                _bReturn = true;\r", "-  }\r", "+", "+  final public void ReturnStatement() throws ParseException {", "+    jj_consume_token(RETURN);", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case ASSERT:", "+    case BOOLEAN:", "+    case BYTE:", "+    case CHAR:", "+    case DOUBLE:", "+    case ENUM:", "+    case FALSE:", "+    case FLOAT:", "+    case INT:", "+    case LONG:", "+    case NEW:", "+    case NULL:", "+    case SHORT:", "+    case SUPER:", "+    case THIS:", "+    case TRUE:", "+    case VOID:", "+    case INTEGER_LITERAL:", "+    case FLOATING_POINT_LITERAL:", "+    case CHARACTER_LITERAL:", "+    case STRING_LITERAL:", "+    case IDENTIFIER:", "+    case LPAREN:", "+    case BANG:", "+    case TILDE:", "+    case INCR:", "+    case DECR:", "+    case PLUS:", "+    case MINUS:", "+      Expression();", "+      break;", "+    default:", "+      jj_la1[158] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(SEMICOLON);", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+                _cyc++;", "+                _bReturn = true;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04d90ffc44a364166f71efd941a01d9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "\r \r   final public void ReturnStatement() throws ParseException", "signatureAfterChange": "    final public void ReturnStatement() throws ParseException", "diff": ["-\r", "-  final public void ReturnStatement() throws ParseException {\r", "-    jj_consume_token(RETURN);\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case ASSERT:\r", "-    case BOOLEAN:\r", "-    case BYTE:\r", "-    case CHAR:\r", "-    case DOUBLE:\r", "-    case ENUM:\r", "-    case FALSE:\r", "-    case FLOAT:\r", "-    case INT:\r", "-    case LONG:\r", "-    case NEW:\r", "-    case NULL:\r", "-    case SHORT:\r", "-    case SUPER:\r", "-    case THIS:\r", "-    case TRUE:\r", "-    case VOID:\r", "-    case INTEGER_LITERAL:\r", "-    case FLOATING_POINT_LITERAL:\r", "-    case CHARACTER_LITERAL:\r", "-    case STRING_LITERAL:\r", "-    case IDENTIFIER:\r", "-    case LPAREN:\r", "-    case BANG:\r", "-    case TILDE:\r", "-    case INCR:\r", "-    case DECR:\r", "-    case PLUS:\r", "-    case MINUS:\r", "-      Expression();\r", "-      break;\r", "-    default:\r", "-      jj_la1[157] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(SEMICOLON);\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-                _cyc++;\r", "-                _bReturn = true;\r", "-  }\r", "+", "+  final public void ReturnStatement() throws ParseException {", "+    jj_consume_token(RETURN);", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case ASSERT:", "+    case BOOLEAN:", "+    case BYTE:", "+    case CHAR:", "+    case DOUBLE:", "+    case ENUM:", "+    case FALSE:", "+    case FLOAT:", "+    case INT:", "+    case LONG:", "+    case NEW:", "+    case NULL:", "+    case SHORT:", "+    case SUPER:", "+    case THIS:", "+    case TRUE:", "+    case VOID:", "+    case INTEGER_LITERAL:", "+    case FLOATING_POINT_LITERAL:", "+    case CHARACTER_LITERAL:", "+    case STRING_LITERAL:", "+    case IDENTIFIER:", "+    case LPAREN:", "+    case BANG:", "+    case TILDE:", "+    case INCR:", "+    case DECR:", "+    case PLUS:", "+    case MINUS:", "+      Expression();", "+      break;", "+    default:", "+      jj_la1[158] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(SEMICOLON);", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+                _cyc++;", "+                _bReturn = true;", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01aac132a4fe5ce21d1a4db9e6a55364", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f67a63be21a195bf00f9d1d36a586c0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "\r \r   final public void BlockStatement() throws ParseException", "signatureAfterChange": "    final public void BlockStatement() throws ParseException", "diff": ["-\r", "-  final public void BlockStatement() throws ParseException {\r", "-    if (jj_2_45(2147483647)) {\r", "-      LocalVariableDeclaration();\r", "-      jj_consume_token(SEMICOLON);\r", "-                _ncss++;       Util.debug( \"_ncss++\" );\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BREAK:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CONTINUE:\r", "-      case DO:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FLOAT:\r", "-      case FOR:\r", "-      case IF:\r", "-      case INT:\r", "-      case LONG:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case RETURN:\r", "-      case SHORT:\r", "-      case SUPER:\r", "-      case SWITCH:\r", "-      case SYNCHRONIZED:\r", "-      case THIS:\r", "-      case THROW:\r", "-      case TRUE:\r", "-      case TRY:\r", "-      case VOID:\r", "-      case WHILE:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case LBRACE:\r", "-      case SEMICOLON:\r", "-      case INCR:\r", "-      case DECR:\r", "-        Statement();\r", "-        break;\r", "-      case ABSTRACT:\r", "-      case CLASS:\r", "-      case FINAL:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case TRANSIENT:\r", "-      case VOLATILE:\r", "-      case AT:\r", "-        UnmodifiedClassDeclaration();\r", "-        break;\r", "-      case INTERFACE:\r", "-        UnmodifiedInterfaceDeclaration();\r", "-        break;\r", "-      default:\r", "-        jj_la1[140] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-  }\r", "+", "+  final public void BlockStatement() throws ParseException {", "+    if (jj_2_44(2147483647)) {", "+      LocalVariableDeclaration();", "+      jj_consume_token(SEMICOLON);", "+                _ncss++;       Util.debug( \"_ncss++\" );", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BREAK:", "+      case BYTE:", "+      case CHAR:", "+      case CONTINUE:", "+      case DO:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FLOAT:", "+      case FOR:", "+      case IF:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case RETURN:", "+      case SHORT:", "+      case SUPER:", "+      case SWITCH:", "+      case SYNCHRONIZED:", "+      case THIS:", "+      case THROW:", "+      case TRUE:", "+      case TRY:", "+      case VOID:", "+      case WHILE:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case LBRACE:", "+      case SEMICOLON:", "+      case INCR:", "+      case DECR:", "+        Statement();", "+        break;", "+      case ABSTRACT:", "+      case CLASS:", "+      case FINAL:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case STATIC:", "+      case TESTAAAA:", "+      case TRANSIENT:", "+      case VOLATILE:", "+      case AT:", "+        UnmodifiedClassDeclaration();", "+        break;", "+      case INTERFACE:", "+        UnmodifiedInterfaceDeclaration();", "+        break;", "+      default:", "+        jj_la1[141] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f461b3d7c5b8733b8277674ef1689a2b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "\r \r   final public void BlockStatement() throws ParseException", "signatureAfterChange": "    final public void BlockStatement() throws ParseException", "diff": ["-\r", "-  final public void BlockStatement() throws ParseException {\r", "-    if (jj_2_45(2147483647)) {\r", "-      LocalVariableDeclaration();\r", "-      jj_consume_token(SEMICOLON);\r", "-                _ncss++;       Util.debug( \"_ncss++\" );\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BREAK:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CONTINUE:\r", "-      case DO:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FLOAT:\r", "-      case FOR:\r", "-      case IF:\r", "-      case INT:\r", "-      case LONG:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case RETURN:\r", "-      case SHORT:\r", "-      case SUPER:\r", "-      case SWITCH:\r", "-      case SYNCHRONIZED:\r", "-      case THIS:\r", "-      case THROW:\r", "-      case TRUE:\r", "-      case TRY:\r", "-      case VOID:\r", "-      case WHILE:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case LBRACE:\r", "-      case SEMICOLON:\r", "-      case INCR:\r", "-      case DECR:\r", "-        Statement();\r", "-        break;\r", "-      case ABSTRACT:\r", "-      case CLASS:\r", "-      case FINAL:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case TRANSIENT:\r", "-      case VOLATILE:\r", "-      case AT:\r", "-        UnmodifiedClassDeclaration();\r", "-        break;\r", "-      case INTERFACE:\r", "-        UnmodifiedInterfaceDeclaration();\r", "-        break;\r", "-      default:\r", "-        jj_la1[140] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-  }\r", "+", "+  final public void BlockStatement() throws ParseException {", "+    if (jj_2_44(2147483647)) {", "+      LocalVariableDeclaration();", "+      jj_consume_token(SEMICOLON);", "+                _ncss++;       Util.debug( \"_ncss++\" );", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BREAK:", "+      case BYTE:", "+      case CHAR:", "+      case CONTINUE:", "+      case DO:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FLOAT:", "+      case FOR:", "+      case IF:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case RETURN:", "+      case SHORT:", "+      case SUPER:", "+      case SWITCH:", "+      case SYNCHRONIZED:", "+      case THIS:", "+      case THROW:", "+      case TRUE:", "+      case TRY:", "+      case VOID:", "+      case WHILE:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case LBRACE:", "+      case SEMICOLON:", "+      case INCR:", "+      case DECR:", "+        Statement();", "+        break;", "+      case ABSTRACT:", "+      case CLASS:", "+      case FINAL:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case STATIC:", "+      case TESTAAAA:", "+      case TRANSIENT:", "+      case VOLATILE:", "+      case AT:", "+        UnmodifiedClassDeclaration();", "+        break;", "+      case INTERFACE:", "+        UnmodifiedInterfaceDeclaration();", "+        break;", "+      default:", "+        jj_la1[141] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ea0f7d5e2ecd8eea13382ceb3d83956", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb22f79a115fbebb3691bcb73ea923d6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/ASCII_UCodeESC_CharStream.java", "commitBeforeChange": "7878dbc8c14057d3c27375fea2484940a54a6ebc", "commitAfterChange": "5c3edcc6dd3fd1408cac466f6859d53cda78784e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate final void expandBuff(boolean wrapAround)", "signatureAfterChange": "    private final void ExpandBuff(boolean wrapAround)", "diff": ["+  private final void ExpandBuff(boolean wrapAround)", "+  {", "+     char[] newbuffer = new char[bufsize + 2048];", "+     int newbufline[] = new int[bufsize + 2048];", "+     int newbufcolumn[] = new int[bufsize + 2048];", "+     try", "+     {", "+        if (wrapAround)", "+        {", "+           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "+           System.arraycopy(buffer, 0, newbuffer,", "+                                             bufsize - tokenBegin, bufpos);", "+           buffer = newbuffer;", "-\tprivate final void expandBuff(boolean wrapAround)", "-\t{", "-\t\tchar[] newbuffer = new char[bufsize + 2048];", "-\t\tint newbufline[] = new int[bufsize + 2048];", "-\t\tint newbufcolumn[] = new int[bufsize + 2048];", "+           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "+           System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);", "+           bufline = newbufline;", "-\t\ttry", "-\t\t{", "-\t\t\tif (wrapAround)", "-\t\t\t{", "-\t\t\t\tSystem.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "-\t\t\t\tSystem.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);", "-\t\t\t\tbuffer = newbuffer;", "+           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "+           System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);", "+           bufcolumn = newbufcolumn;", "-\t\t\t\tSystem.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "-\t\t\t\tSystem.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);", "-\t\t\t\tbufline = newbufline;", "+           bufpos += (bufsize - tokenBegin);", "+        }", "+        else", "+        {", "+           System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "+           buffer = newbuffer;", "-\t\t\t\tSystem.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "-\t\t\t\tSystem.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);", "-\t\t\t\tbufcolumn = newbufcolumn;", "+           System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "+           bufline = newbufline;", "-\t\t\t\tbufpos += (bufsize - tokenBegin);", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tSystem.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);", "-\t\t\t\tbuffer = newbuffer;", "+           System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "+           bufcolumn = newbufcolumn;", "-\t\t\t\tSystem.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);", "-\t\t\t\tbufline = newbufline;", "+           bufpos -= tokenBegin;", "+        }", "+     }", "+     catch (Throwable t)", "+     {", "+        throw new Error(t.getMessage());", "+     }", "-\t\t\t\tSystem.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);", "-\t\t\t\tbufcolumn = newbufcolumn;", "+     available = (bufsize += 2048);", "+     tokenBegin = 0;", "+  }", "-\t\t\t\tbufpos -= tokenBegin;", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tthrow new Error(t.getMessage());", "-\t\t}", "-\t\tavailable = (bufsize += 2048);", "-\t\ttokenBegin = 0;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eec0d35985a9ac7a26a383fb3a828e1a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/CoverageUnmarshaller.java", "commitBeforeChange": "a119f823fa866e69698a670d633a7067d8632a28", "commitAfterChange": "860d83d968c4c37826a8e5fbbd1ba35cd97da38d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static Clazz parseClass(String classname, \t\t\tCoverageData instrumentation)", "signatureAfterChange": "  \tprivate static Clazz parseClass(String classname, \t\t\tCoverageData instrumentation)", "diff": ["-\t\tclazz.setNumberOfBranches(instrumentation.getNumberOfBranches());", "+\t\tclazz.setNumberOfBranches(instrumentation.getNumberOfValidBranches());", "-\t\tclazz.setNumberOfLines(instrumentation.getNumberOfLines());", "+\t\tclazz.setNumberOfLines(instrumentation.getNumberOfValidLines());", "-\t\tIterator iter = instrumentation.getSourceLineNumbers().iterator();", "+\t\tIterator iter = instrumentation.getValidLineNumbers().iterator();"]}]}
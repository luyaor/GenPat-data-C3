{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b0629d238800a07ac11c1210468d362", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49ba79a2b110542de33bac25d3aef93f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "\r \r   final public void SwitchStatement() throws ParseException", "signatureAfterChange": "    final public void SwitchStatement() throws ParseException", "diff": ["-\r", "-  final public void SwitchStatement() throws ParseException {\r", "-                _localCases = 0;\r", "-    jj_consume_token(SWITCH);\r", "-    jj_consume_token(LPAREN);\r", "-    Expression();\r", "-    jj_consume_token(RPAREN);\r", "-    jj_consume_token(LBRACE);\r", "-    label_58:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case CASE:\r", "-      case _DEFAULT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[145] = jj_gen;\r", "-        break label_58;\r", "-      }\r", "-      SwitchLabel();\r", "-      label_59:\r", "-      while (true) {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ABSTRACT:\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BREAK:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case CLASS:\r", "-        case CONTINUE:\r", "-        case DO:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FINAL:\r", "-        case FLOAT:\r", "-        case FOR:\r", "-        case IF:\r", "-        case INT:\r", "-        case INTERFACE:\r", "-        case LONG:\r", "-        case NATIVE:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case PRIVATE:\r", "-        case PROTECTED:\r", "-        case PUBLIC:\r", "-        case RETURN:\r", "-        case SHORT:\r", "-        case STATIC:\r", "-        case TESTAAAA:\r", "-        case SUPER:\r", "-        case SWITCH:\r", "-        case SYNCHRONIZED:\r", "-        case THIS:\r", "-        case THROW:\r", "-        case TRANSIENT:\r", "-        case TRUE:\r", "-        case TRY:\r", "-        case VOID:\r", "-        case VOLATILE:\r", "-        case WHILE:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case LBRACE:\r", "-        case SEMICOLON:\r", "-        case AT:\r", "-        case INCR:\r", "-        case DECR:\r", "-          ;\r", "-          break;\r", "-        default:\r", "-          jj_la1[146] = jj_gen;\r", "-          break label_59;\r", "-        }\r", "-        BlockStatement();\r", "-      }\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-          _ncss++;       Util.debug( \"_ncss++\" );\r", "-  }\r", "+", "+  final public void SwitchStatement() throws ParseException {", "+                _localCases = 0;", "+    jj_consume_token(SWITCH);", "+    jj_consume_token(LPAREN);", "+    Expression();", "+    jj_consume_token(RPAREN);", "+    jj_consume_token(LBRACE);", "+    label_59:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case CASE:", "+      case _DEFAULT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[146] = jj_gen;", "+        break label_59;", "+      }", "+      SwitchLabel();", "+      label_60:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case NEW:", "+        case NULL:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case RETURN:", "+        case SHORT:", "+        case STATIC:", "+        case TESTAAAA:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRANSIENT:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case VOLATILE:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case AT:", "+        case INCR:", "+        case DECR:", "+          ;", "+          break;", "+        default:", "+          jj_la1[147] = jj_gen;", "+          break label_60;", "+        }", "+        BlockStatement();", "+      }", "+    }", "+    jj_consume_token(RBRACE);", "+          _ncss++;       Util.debug( \"_ncss++\" );", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc48b9edd5fe46de2f0dc06037095432", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "\r \r   final public void SwitchStatement() throws ParseException", "signatureAfterChange": "    final public void SwitchStatement() throws ParseException", "diff": ["-\r", "-  final public void SwitchStatement() throws ParseException {\r", "-                _localCases = 0;\r", "-    jj_consume_token(SWITCH);\r", "-    jj_consume_token(LPAREN);\r", "-    Expression();\r", "-    jj_consume_token(RPAREN);\r", "-    jj_consume_token(LBRACE);\r", "-    label_58:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case CASE:\r", "-      case _DEFAULT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[145] = jj_gen;\r", "-        break label_58;\r", "-      }\r", "-      SwitchLabel();\r", "-      label_59:\r", "-      while (true) {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ABSTRACT:\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BREAK:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case CLASS:\r", "-        case CONTINUE:\r", "-        case DO:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FINAL:\r", "-        case FLOAT:\r", "-        case FOR:\r", "-        case IF:\r", "-        case INT:\r", "-        case INTERFACE:\r", "-        case LONG:\r", "-        case NATIVE:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case PRIVATE:\r", "-        case PROTECTED:\r", "-        case PUBLIC:\r", "-        case RETURN:\r", "-        case SHORT:\r", "-        case STATIC:\r", "-        case TESTAAAA:\r", "-        case SUPER:\r", "-        case SWITCH:\r", "-        case SYNCHRONIZED:\r", "-        case THIS:\r", "-        case THROW:\r", "-        case TRANSIENT:\r", "-        case TRUE:\r", "-        case TRY:\r", "-        case VOID:\r", "-        case VOLATILE:\r", "-        case WHILE:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case LBRACE:\r", "-        case SEMICOLON:\r", "-        case AT:\r", "-        case INCR:\r", "-        case DECR:\r", "-          ;\r", "-          break;\r", "-        default:\r", "-          jj_la1[146] = jj_gen;\r", "-          break label_59;\r", "-        }\r", "-        BlockStatement();\r", "-      }\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-          _ncss++;       Util.debug( \"_ncss++\" );\r", "-  }\r", "+", "+  final public void SwitchStatement() throws ParseException {", "+                _localCases = 0;", "+    jj_consume_token(SWITCH);", "+    jj_consume_token(LPAREN);", "+    Expression();", "+    jj_consume_token(RPAREN);", "+    jj_consume_token(LBRACE);", "+    label_59:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case CASE:", "+      case _DEFAULT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[146] = jj_gen;", "+        break label_59;", "+      }", "+      SwitchLabel();", "+      label_60:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case NEW:", "+        case NULL:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case RETURN:", "+        case SHORT:", "+        case STATIC:", "+        case TESTAAAA:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRANSIENT:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case VOLATILE:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case AT:", "+        case INCR:", "+        case DECR:", "+          ;", "+          break;", "+        default:", "+          jj_la1[147] = jj_gen;", "+          break label_60;", "+        }", "+        BlockStatement();", "+      }", "+    }", "+    jj_consume_token(RBRACE);", "+          _ncss++;       Util.debug( \"_ncss++\" );", "+  }"]}]}
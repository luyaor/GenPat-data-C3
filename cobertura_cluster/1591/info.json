{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b744771a268e5ff43f2c14b9ca3e29bd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df0f8853843a5a7ec841dbde77d7291", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic int getNumberOfCoveredBranches()", "signatureAfterChange": " \t \tpublic int getNumberOfCoveredBranches()", "diff": ["-\t\tif (jumps != null)", "-\t\t\tfor (int i = jumps.size() - 1; i >= 0; i--)", "-\t\t\t\tret += ((JumpData) jumps.get(i)).getNumberOfCoveredBranches();", "-\t\tif (switches != null)", "-\t\t\tfor (int i = switches.size() - 1; i >= 0; i--)", "-\t\t\t\tret += ((SwitchData) switches.get(i)).getNumberOfCoveredBranches();", "-\t\treturn ret;", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tif (jumps != null)", "+\t\t\t\tfor (int i = jumps.size() - 1; i >= 0; i--)", "+\t\t\t\t\tret += ((JumpData) jumps.get(i)).getNumberOfCoveredBranches();", "+\t\t\tif (switches != null)", "+\t\t\t\tfor (int i = switches.size() - 1; i >= 0; i--)", "+\t\t\t\t\tret += ((SwitchData) switches.get(i)).getNumberOfCoveredBranches();", "+\t\t\treturn ret;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "617728438550bbddd571d32027d4a4cf", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic String getSourceFileName()", "signatureAfterChange": " \tpublic String getSourceFileName()", "diff": ["-\t\tif (sourceFileName != null)", "-\t\t\tbaseName = sourceFileName;", "-\t\telse", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tbaseName = getBaseName();", "-\t\t\tint firstDollarSign = baseName.indexOf('$');", "-\t\t\tif (firstDollarSign == -1 || firstDollarSign == 0)", "-\t\t\t\tbaseName += \".java\";", "+\t\t\tif (sourceFileName != null)", "+\t\t\t\tbaseName = sourceFileName;", "-\t\t\t\tbaseName = baseName.substring(0, firstDollarSign)", "-\t\t\t\t\t+ \".java\";", "+\t\t\t{", "+\t\t\t\tbaseName = getBaseName();", "+\t\t\t\tint firstDollarSign = baseName.indexOf('$');", "+\t\t\t\tif (firstDollarSign == -1 || firstDollarSign == 0)", "+\t\t\t\t\tbaseName += \".java\";", "+\t\t\t\telse", "+\t\t\t\t\tbaseName = baseName.substring(0, firstDollarSign)", "+\t\t\t\t\t\t+ \".java\";", "+\t\t\t}", "+\t", "+\t\t\tString packageName = getPackageName();", "+\t\t\tif (packageName.equals(\"\"))", "+\t\t\t\treturn baseName;", "+\t\t\treturn packageName.replace('.', '/') + '/' + baseName;", "-", "-\t\tString packageName = getPackageName();", "-\t\tif (packageName.equals(\"\"))", "-\t\t\treturn baseName;", "-\t\treturn packageName.replace('.', '/') + '/' + baseName;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d622cfe5b66ec65c032a7d42c893b57", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic int getNumberOfValidBranches()", "signatureAfterChange": "  \tpublic int getNumberOfValidBranches()", "diff": ["-\t\tif (jumps != null)", "-\t\t\tfor (int i = jumps.size() - 1; i >= 0; i--)", "-\t\t\t\tret += ((JumpData) jumps.get(i)).getNumberOfValidBranches();", "-\t\tif (switches != null)", "-\t\t\tfor (int i = switches.size() - 1; i >= 0; i--)", "-\t\t\t\tret += ((SwitchData) switches.get(i)).getNumberOfValidBranches();", "-\t\treturn ret;", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tif (jumps != null)", "+\t\t\t\tfor (int i = jumps.size() - 1; i >= 0; i--)", "+\t\t\t\t\tret += ((JumpData) jumps.get(i)).getNumberOfValidBranches();", "+\t\t\tif (switches != null)", "+\t\t\t\tfor (int i = switches.size() - 1; i >= 0; i--)", "+\t\t\t\t\tret += ((SwitchData) switches.get(i)).getNumberOfValidBranches();", "+\t\t\treturn ret;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4e5a2e4c4e1fff6fefef2cbfcdd1172", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tpublic Object getConditionData(int index)", "signatureAfterChange": " \t \tpublic Object getConditionData(int index)", "diff": ["-\t\tint jumpsSize = (jumps == null) ? 0 : jumps.size();", "-\t\tint switchesSize = (switches == null) ? 0 :switches.size();", "-\t\tif (index < jumpsSize) ", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tbranchData = jumps.get(index);", "+\t\t\tint jumpsSize = (jumps == null) ? 0 : jumps.size();", "+\t\t\tint switchesSize = (switches == null) ? 0 :switches.size();", "+\t\t\tif (index < jumpsSize) ", "+\t\t\t{", "+\t\t\t\tbranchData = jumps.get(index);", "+\t\t\t}", "+\t\t\telse if (index < jumpsSize + switchesSize)", "+\t\t\t{", "+\t\t\t\tbranchData = switches.get(index - jumpsSize);", "+\t\t\t}", "+\t\t\treturn branchData;", "-\t\telse if (index < jumpsSize + switchesSize)", "+\t\tfinally", "-\t\t\tbranchData = switches.get(index - jumpsSize);", "+\t\t\tlock.unlock();", "-\t\treturn branchData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa9f18cf1bfcf5aee129a667bdcc513a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic Collection getLines(String methodNameAndDescriptor)", "signatureAfterChange": "  \tpublic Collection getLines(String methodNameAndDescriptor)", "diff": ["-\t\tIterator iter = children.values().iterator();", "-\t\twhile (iter.hasNext())", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tLineData next = (LineData)iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName()", "-\t\t\t\t\t+ next.getMethodDescriptor()))", "+\t\t\tIterator iter = children.values().iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\tlines.add(next);", "+\t\t\t\tLineData next = (LineData)iter.next();", "+\t\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName()", "+\t\t\t\t\t\t+ next.getMethodDescriptor()))", "+\t\t\t\t{", "+\t\t\t\t\tlines.add(next);", "+\t\t\t\t}", "+\t\t\treturn lines;", "-\t\treturn lines;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e41cabf1ec7ad3273493a3ca0edda89b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic LineData getLineCoverage(int lineNumber)", "signatureAfterChange": " \tpublic LineData getLineCoverage(int lineNumber)", "diff": ["-\t\tif (!children.containsKey(lineObject)) ", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\treturn null;", "+\t\t\tif (!children.containsKey(lineObject)) ", "+\t\t\t{", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t", "+\t\t\treturn (LineData) children.get(lineObject);", "-", "-\t\treturn (LineData) children.get(lineObject);", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}]}
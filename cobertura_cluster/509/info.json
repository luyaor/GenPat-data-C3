{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47857d14bab727fadafcd316bc947eab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c4128b08772b66a493af6047f4a28f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/AbstractCoberturaTestCase.java", "commitBeforeChange": "5c95e91c4fb8eaabadd9ca6cf6b3ebb78c8822c3", "commitAfterChange": "75f2a2aa41065d346a83ea898e7b1a155a99d13e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void parseIssueTester(String imports, String method) \t\t\tthrows IOException", "signatureAfterChange": " \tpublic static void parseIssueTester(String imports, String method) \t\t\tthrows IOException", "diff": ["-\t\tDefaultLogger fileLogger = new DefaultLogger();", "-\t\tfileLogger.setErrorPrintStream(new PrintStream(new File(reportDir,", "-\t\t\t\t\"error.log\")));", "-\t\tfileLogger.setOutputPrintStream(new PrintStream(new File(reportDir,", "-\t\t\t\t\"std.log\")));", "-\t\tfileLogger.setMessageOutputLevel(Project.MSG_INFO);", "-\t\tTestUtils.project.addBuildListener(fileLogger);", "+\t\tdebugReportTask();", "-\t\tReportTask reportTask = new ReportTask();", "-\t\treportTask.setProject(TestUtils.project);", "-\t\treportTask.setDataFile(datafile.getAbsolutePath());", "-\t\treportTask.setFormat(\"xml\");", "-\t\treportTask.setSrcDir(srcDir.getAbsolutePath());", "-\t\treportTask.setDestDir(reportDir);", "-\t\treportTask.setFailonerror(true);", "-\t\treportTask.execute();", "-", "-\t\tTestUtils.project.removeBuildListener(fileLogger);", "-", "-\t\tif (FileUtils.readFileToString(new File(reportDir, \"error.log\"))", "-\t\t\t\t.contains(\"JavaNCSS got an error while parsing the java file\"))", "+\t\tif (FileUtils", "+\t\t\t\t.readFileToString(new File(reportDir, \"error.log\"))", "+\t\t\t\t.contains(", "+\t\t\t\t\t\t\"net.sourceforge.cobertura.javancss.parser.ParseException\"))", "-\t\tif (FileUtils.readFileToString(new File(reportDir, \"std.log\"))", "-\t\t\t\t.contains(\"JavaNCSS got an error while parsing the java file\"))", "+\t\tif (FileUtils", "+\t\t\t\t.readFileToString(new File(reportDir, \"std.log\"))", "+\t\t\t\t.contains(", "+\t\t\t\t\t\t\"net.sourceforge.cobertura.javancss.parser.ParseException\"))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31c649d99a06aafb9317cf3da30109f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "5b30351fa9d71ab4016d2fcbdce172b2f16c1c45", "commitAfterChange": "55571e8b292791cc80dd02e2bed0dfd9f206376b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static ProjectData getGlobalProjectData()", "signatureAfterChange": " \tpublic static ProjectData getGlobalProjectData()", "diff": ["+\t */", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tinitialize();", "+\t\tglobalProjectData = new ProjectData();", "+\t\treturn globalProjectData;", "+\t}", "-\t\t// Read projectData from the serialized file.", "-\t\tif (dataFile.isFile())", "-\t\t{", "-\t\t\t//System.out.println(\"Cobertura: Loading global project data from \" + dataFile.getAbsolutePath());", "-\t\t\tglobalProjectData = CoverageDataFileHandler", "-\t\t\t\t\t.loadCoverageData(dataFile);", "-\t\t}", "-", "-\t\tif (globalProjectData == null)", "-\t\t{", "-\t\t\t// We could not read from the serialized file, so create a new object.", "-\t\t\tSystem.out.println(\"Cobertura: Coverage data file \"", "-\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "-\t\t\tglobalProjectData = new ProjectData();", "-\t\t}", "-", "-\t\tif( System.getProperty(\"catalina.home\")!=null) {", "-\t\t\t", "-\t\t\t// Additionaly force loading of other classes that might be not loaded", "-\t\t\t// becouse saved project data was empty", "-\t\t", "-", "-\t\treturn globalProjectData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba28277e3ac6a3e670663ce7a9a5126f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalTest.java", "commitBeforeChange": "d92a270dbbdba12262811a88f1774dfb99ec4747", "commitAfterChange": "4052f54cd9489cd94b023c7b5db8ea06aaaae0c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static void verify(String testName) throws Exception", "signatureAfterChange": "  \tprivate static void verify(String testName) throws Exception", "diff": ["-\t// TODO: Also verify that the HTML reports are XHTML 1.0", "+\t{", "+\t\tverifyXml(testName);", "+\t\tverifyHtml(testName);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e038f7071a620872941130bd7a4dffa1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/webapp/test/WebAppFunctionalTest.java", "commitBeforeChange": "2b194b3d77bf600da43b42901e6946bf29c86ff0", "commitAfterChange": "a26b3c4c66c38163a0a617a9215854c17c3271a0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void basicStartAndStopOfWebApp(boolean tomcat) throws Exception", "signatureAfterChange": "  \tprivate void instrumentWar()", "diff": ["-\tpublic void basicStartAndStopOfWebApp(boolean tomcat) throws Exception {", "-\t\tWebappServer webappServer = new WebappServer(webappServerDir, tomcat);", "-", "-\t\twebappServer.deployApp(srcDir, \"com.acme.*\");", "-", "-\t\twebappServer.withRunningServer();", "-", "-\t\twebappServer.pingServer();", "-", "-\t\tFile xmlReport = webappServer.getXmlReport();", "-", "-\t\tgenerateReportFile(xmlReport);", "-", "-\t\tNode dom = TestUtils.getXMLReportDOM(xmlReport);", "-", "-\t\tassertFalse(TestUtils.isMethodHit(dom,", "-\t\t\t\t\"com.acme.servlet.SimpleServlet\", \"doGet\"));", "-", "-\t\twebappServer.killServer();", "-\t\tThread.sleep(5 * 1000);", "-\t\tgenerateReportFile(xmlReport);", "-", "-\t\tdom = TestUtils.getXMLReportDOM(xmlReport);", "-", "-\t\tassertTrue(\"doGet has hits=0 in cobertura report\", TestUtils", "-\t\t\t\t.isMethodHit(dom, \"com.acme.servlet.SimpleServlet\", \"doGet\"));", "+", "+\tprivate void instrumentWar() {", "+\t\tinstrumentWar(new File(tempDir, \"webapps/simple.war\"));", "+\t\t// Future: There is an issue with ServetTester api and adding a custom classloader.", "+\t\t// When specify the instrumented .war file it still prefers to use the", "+\t\t// target/test-classes/**/*.class files instead. In this situation we instrument the", "+\t\t// classes directly but a better solution should be provided for this.", "+\t\tinstrumentClasses(new File(\"target/test-classes/com/acme/servlet/SimpleServlet.class\"));", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3ca7f2b0e0e9f27b4e1670e2995534a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2bf515926217d49172419bcfcfe8e9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/MethodInstrumenter.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "signatureAfterChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "diff": ["-\t\tif ((ignoreRegex != null) && (pm.matches(owner, ignoreRegex)))", "-\t\t\tclassData.removeLine(currentLine);", "+\t\t// If any of the ignore patterns match this line", "+\t\t// then remove it from our data", "+\t\tIterator iter = ignoreRegexs.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tPattern ignoreRegex = (Pattern)iter.next();", "+\t\t\tif ((ignoreRegexs != null) && (pm.matches(owner, ignoreRegex)))", "+\t\t\t{", "+\t\t\t\tclassData.removeLine(currentLine);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7c642ce822e74bf65bae86666b30c2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "cd01654d464661ad4ee16d9e5f0f6e799c0ad9e4", "commitAfterChange": "7f42310aa94d3450acefa63804376619941a31c5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "signatureAfterChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "diff": ["-\t\t\tCollection packages;", "+\t\t\tSortedSet packages;", "-\t\t\t\t// TODO TODO TODO: This needs to only look at classes in root package", "-\t\t\t\tpackages = projectData.getChildren();", "+\t\t\t\tpackages = projectData.getPackages();", "-\t\t\t\tsourceFiles = projectData.getSourceFiles();", "+\t\t\t\tPackageData defaultPackage = (PackageData)projectData", "+\t\t\t\t\t\t.getChild(\"\");", "+\t\t\t\tif (defaultPackage != null)", "+\t\t\t\t{", "+\t\t\t\t\tsourceFiles = defaultPackage.getSourceFiles();", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\tsourceFiles = new TreeSet();", "+\t\t\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd8688cd2c2ad815d807cb7ce36a9145", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6567911800f17ec91ac34d06f6118d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "signatureAfterChange": " \t \t \t \tprivate void addInstrumentationToSingleClass(File file)", "diff": ["-", "-\tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "-\t{", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(ClassWriter.COMPUTE_MAXS);", "-\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes,", "-\t                   ignoreMethodAnnotations, ignoreTrivial);", "-\t\t\tcr.accept(cv, 0);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tinputStream = IOUtil.closeInputStream(inputStream);", "-\t\t}", "-", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "-", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\toutputStream = IOUtil.closeOutputStream(outputStream);", "-\t\t}", "+\t", "+\tprivate void addInstrumentationToSingleClass(File file){", "+\t\tlogger.info(\"Instrumenting: \"+file.getAbsolutePath()+\" to \"+destinationDirectory);", "+\t\tcoberturaInstrumenter.addInstrumentationToSingleClass(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "758251cbead62f143cac82b8409cacd3", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "0c76ce91897e30da3c3c98b0dbde4eaeb37f1634", "commitAfterChange": "d668df191a9fd0e829f2fd715bee289ce66ce39e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-\t\tOutputStream outputStream = null;", "+\t\tClassWriter cw;", "+\t\tClassInstrumenter cv;", "-\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData, cw,", "-\t\t\t\t\tignoreRegexp);", "+\t\t\tcw = new ClassWriter(true);", "+\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegexp);", "-\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\tFile outputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t+ \".class\");", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tif (cv.isInstrumented())", "+\t\t\t{", "+\t\t\t\t// If destinationDirectory is null, then overwrite", "+\t\t\t\t// the original, uninstrumented file.", "+\t\t\t\tFile outputFile;", "+\t\t\t\tif (destinationDirectory == null)", "+\t\t\t\t\toutputFile = file;", "+\t\t\t\telse", "+\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t\t\t+ \".class\");", "+", "+\t\t\t\tFile parentFile = outputFile.getParentFile();", "+\t\t\t\tif (parentFile != null)", "+\t\t\t\t{", "+\t\t\t\t\tparentFile.mkdirs();", "+\t\t\t\t}", "+", "+\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+\t\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\t\toutputStream.write(instrumentedClass);", "+\t\t\t}", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger.warn(", "+\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "+\t\t\treturn;", "+\t\t}", "+\t\tfinally", "+\t\t{"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b52a2fb2164342e4eae494fe7a9795a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03f01a4f4ef3a0e69110e9303e1db9c0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "2d04adc2554406c41824d5b965907076ecdceb80", "commitAfterChange": "cd01654d464661ad4ee16d9e5f0f6e799c0ad9e4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateClassList(PackageData packageData) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate void generateSourceFileList(PackageData packageData) \t\t\tthrows IOException", "diff": ["-\tprivate void generateClassList(PackageData packageData)", "+\tprivate void generateSourceFileList(PackageData packageData)", "-\t\tCollection classes;", "+\t\tCollection sourceFiles;", "-\t\t\tfilename = \"frame-classes.html\";", "-\t\t\tclasses = projectData.getClasses();", "+\t\t\tfilename = \"frame-sourcefiles.html\";", "+\t\t\tsourceFiles = projectData.getSourceFiles();", "-\t\t\tfilename = \"frame-classes-\" + packageData.getName() + \".html\";", "-\t\t\tclasses = packageData.getClasses();", "+\t\t\tfilename = \"frame-sourcefiles-\" + packageData.getName() + \".html\";", "+\t\t\tsourceFiles = packageData.getSourceFiles();", "-\t\t\tMap sortedClassList = new TreeMap();", "-\t\t\tfor (Iterator iter = classes.iterator(); iter.hasNext();)", "+\t\t\tMap sortedSourceFileList = new TreeMap();", "+\t\t\tfor (Iterator iter = sourceFiles.iterator(); iter.hasNext();)", "-\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\tsortedClassList.put(classData.getBaseName(), classData);", "+\t\t\t\tSourceFileData sourceFileData = (SourceFileData)iter.next();", "+\t\t\t\tsortedSourceFileList.put(sourceFileData.getBaseName(),", "+\t\t\t\t\t\tsourceFileData);", "-\t\t\tfor (Iterator iter = sortedClassList.values().iterator(); iter", "+\t\t\tfor (Iterator iter = sortedSourceFileList.values().iterator(); iter", "-\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tSourceFileData sourceFileData = (SourceFileData)iter.next();", "-\t\t\t\tif (classData.getNumberOfValidLines() > 0)", "-\t\t\t\t\tpercentCovered = getPercentValue(classData", "+\t\t\t\tif (sourceFileData.getNumberOfValidLines() > 0)", "+\t\t\t\t\tpercentCovered = getPercentValue(sourceFileData", "-\t\t\t\t\t\t\t\t+ classData.getName()", "+\t\t\t\t\t\t\t\t+ sourceFileData.getNormalizedName()", "-\t\t\t\t\t\t\t\t+ classData.getBaseName()", "-\t\t\t\t\t\t\t\t+ \"</a> <i>(\"", "-\t\t\t\t\t\t\t\t+ percentCovered + \")</i></td>\");", "+\t\t\t\t\t\t\t\t+ sourceFileData.getBaseName()", "+\t\t\t\t\t\t\t\t+ \"</a> <i>(\" + percentCovered + \")</i></td>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e7d4ffcec411382121fb809f601f6ba", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/tp/ClassMap.java", "commitBeforeChange": "5605b5ab824b2385844c651284a3b8e3ad3c15f5", "commitAfterChange": "4ad158130256874222c146143b6705b3693fa07d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic ClassData applyOnProjectData(ProjectData projectData, boolean instrumented)", "signatureAfterChange": " \tpublic ClassData applyOnProjectData(ProjectData projectData, boolean instrumented)", "diff": ["-\t\tif (instrumented){", "-\t\t\tclassData.setContainsInstrumentationInfo();", "-\t\t}", "-\t\tint lastLine=0;", "-\t\tint jumpsInLine=0;", "-\t\tint toucesInLine=0;", "-\t\t", "-\t\tfor(TouchPointDescriptor tpd:getTouchPointsInLineOrder()){", "-\t\t\tif(tpd.getLineNumber()!=lastLine){", "-\t\t\t\tjumpsInLine=0;", "-\t\t\t\ttoucesInLine=0;", "-\t\t\t\tlastLine=tpd.getLineNumber();", "-\t\t\t}", "-\t\t\tif(tpd instanceof LineTouchPointDescriptor){", "-\t\t\t\tclassData.addLine(tpd.getLineNumber(), ((LineTouchPointDescriptor) tpd).getMethodName(), ((LineTouchPointDescriptor) tpd).getMethodSignature());", "-\t\t\t}else if(tpd instanceof JumpTouchPointDescriptor){", "-\t\t\t\tclassData.addLineJump(tpd.getLineNumber(), jumpsInLine++);", "-\t\t\t}else if(tpd instanceof SwitchTouchPointDescriptor){", "-\t\t\t\tint countersCnt=((SwitchTouchPointDescriptor)tpd).getCountersForLabelsCnt();", "-\t\t\t\tclassData.addLineSwitch(tpd.getLineNumber(), toucesInLine++,0, countersCnt-2);", "-\t\t\t}\t\t", "+\t\tif (instrumented){", "+\t\t\tclassData.setContainsInstrumentationInfo();", "+\t\t\tint lastLine=0;", "+\t\t\tint jumpsInLine=0;", "+\t\t\tint toucesInLine=0;", "+\t\t\t", "+\t\t\tfor(TouchPointDescriptor tpd:getTouchPointsInLineOrder()){", "+\t\t\t\tif(tpd.getLineNumber()!=lastLine){", "+\t\t\t\t\tjumpsInLine=0;", "+\t\t\t\t\ttoucesInLine=0;", "+\t\t\t\t\tlastLine=tpd.getLineNumber();", "+\t\t\t\t}", "+\t\t\t\tif(tpd instanceof LineTouchPointDescriptor){", "+\t\t\t\t\tclassData.addLine(tpd.getLineNumber(), ((LineTouchPointDescriptor) tpd).getMethodName(), ((LineTouchPointDescriptor) tpd).getMethodSignature());", "+\t\t\t\t}else if(tpd instanceof JumpTouchPointDescriptor){", "+\t\t\t\t\tclassData.addLineJump(tpd.getLineNumber(), jumpsInLine++);", "+\t\t\t\t}else if(tpd instanceof SwitchTouchPointDescriptor){", "+\t\t\t\t\tint countersCnt=((SwitchTouchPointDescriptor)tpd).getCountersForLabelsCnt();", "+\t\t\t\t\tclassData.addLineSwitch(tpd.getLineNumber(), toucesInLine++,0, countersCnt-2);", "+\t\t\t\t}\t\t", "+\t\t\t}\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "483971dc9b8ae72841325366310b452d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/html/HTMLReportTest.java", "commitBeforeChange": "e7b601006be033847fed4202df377f7408705d0e", "commitAfterChange": "076d50a780815fa21c42ef01d2b14b09c54aa131", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void testHTMLReportValidity() throws Exception", "signatureAfterChange": "  \tpublic void testHTMLReportValidity() throws Exception", "diff": ["-\t", "+", "-\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "-\t\t\t\t.getAbsolutePath();", "+\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile().getAbsolutePath();", "-\t\tString[] ", "-\t\targs = new String[] { \"--format\", \"html\", \"--datafile\", dataFileName, \"--destination\",", "-\t\t\t\tPATH_TO_TEST_OUTPUT.getAbsolutePath(), ", "+\t\tString[] args = new String[] { \"--format\", \"html\", \"--datafile\", dataFileName,", "+\t\t\t\t\"--destination\", PATH_TO_TEST_OUTPUT.getAbsolutePath(),", "-\t\t", "+", "-\t\tString htmlFiles[] = PATH_TO_TEST_OUTPUT.list(new FilenameFilter() {", "-\t\t\tpublic boolean accept(File dir, String name) {", "+\t\tString htmlFiles[] = PATH_TO_TEST_OUTPUT.list(new FilenameFilter()", "+\t\t{", "+", "+\t\t\tpublic boolean accept(File dir, String name)", "+\t\t\t{", "-\t\tassertTrue( htmlFiles.length>=5);", "-\t\t", "+\t\tassertTrue(htmlFiles.length >= 5);", "+", "-\t\t", "-\t\tfor( int i=0; i<requiredFiles.length; i++) {", "-\t\t\tif( !containsFile( htmlFiles, requiredFiles[i])) {", "-\t\t\t\tfail( \"File \" + requiredFiles[i] + \" not found among report files\");", "+", "+\t\tfor (int i = 0; i < requiredFiles.length; i++)", "+\t\t{", "+\t\t\tif (!containsFile(htmlFiles, requiredFiles[i]))", "+\t\t\t{", "+\t\t\t\tfail(\"File \" + requiredFiles[i] + \" not found among report files\");", "-\t\t\t", "+", "-\t\tfor( int i=0; i<htmlFiles.length; i++) {", "+\t\tfor (int i = 0; i < htmlFiles.length; i++)", "+\t\t{", "-\t\t\tif( containsFile( requiredFiles, htmlFiles[i]) || !htmlFiles[i].startsWith(previousPrefix)) {", "-\t\t\t\tSystem.out.println( \"Validating \" + htmlFiles[i]);", "-\t\t\t\tvalidateXML( new File( PATH_TO_TEST_OUTPUT, htmlFiles[i]));", "+\t\t\tif (containsFile(requiredFiles, htmlFiles[i])", "+\t\t\t\t\t|| !htmlFiles[i].startsWith(previousPrefix))", "+\t\t\t{", "+\t\t\t\tJUnitXMLHelper.validate(new File(PATH_TO_TEST_OUTPUT, htmlFiles[i]));", "-\t\t\tif( htmlFiles[i].length()>7) {", "-\t\t\t\tpreviousPrefix = htmlFiles[i].substring(0,7);", "-\t\t\t} else {", "+\t\t\tif (htmlFiles[i].length() > 7)", "+\t\t\t{", "+\t\t\t\tpreviousPrefix = htmlFiles[i].substring(0, 7);", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "-\t\t", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec6d59a09b3cf1fa230dac54dff36861", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27753674662fc303bc07b97da719f52c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SourceFileData.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic long getHitCount(int lineNumber)", "signatureAfterChange": "     public LineData getLineCoverage(int lineNumber)", "diff": ["-\tpublic long getHitCount(int lineNumber)", "-\t{", "-\t\tIterator iter = this.children.values().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\tif (classData.isValidSourceLineNumber(lineNumber))", "-\t\t\t\treturn classData.getHitCount(lineNumber);", "-\t\t}", "-\t\treturn 0;", "-\t}", "+   public LineData getLineCoverage(int lineNumber)", "+   {", "+      Iterator iter = this.children.values().iterator();", "+      while (iter.hasNext())", "+      {", "+         ClassData classData = (ClassData)iter.next();", "+         if (classData.isValidSourceLineNumber(lineNumber))", "+            return classData.getLineCoverage(lineNumber);", "+      }", "+      return null;", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbcdba1ce430fac21ce61f8176d732b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SourceFileData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic LineData getLineCoverage(int lineNumber)", "signatureAfterChange": "  \tpublic LineData getLineCoverage(int lineNumber)", "diff": ["-\t\tIterator iter = this.children.values().iterator();", "-\t\twhile (iter.hasNext())", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\tif (classData.isValidSourceLineNumber(lineNumber))", "-\t\t\t\treturn classData.getLineCoverage(lineNumber);", "+\t\t\tIterator iter = this.children.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tif (classData.isValidSourceLineNumber(lineNumber))", "+\t\t\t\t\treturn classData.getLineCoverage(lineNumber);", "+\t\t\t}", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ed63b0cac05c59a18d510a78be2b00", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileFinder.java", "commitBeforeChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "commitAfterChange": "09421016268852f85f74b9774657dc46969a87d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic File findFile(String filePart)", "signatureAfterChange": " \t     public File findFile(String filePart)", "diff": ["-\tpublic File findFile(String filePart) {", "-\t\tcompute();", "-\t\tList mine = Collections.EMPTY_LIST;", "-\t\tsynchronized(this) {", "-\t\t\tmine = new ArrayList(cached);", "-\t\t}", "-\t\tfor (Iterator it = mine.iterator(); it.hasNext(); ) {", "-\t\t\tString path = (String) it.next();", "-\t\t\tif (path.replace('/', '\\\\').endsWith(filePart.replace('/', '\\\\'))) {", "-\t\t\t\treturn new File(path);", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "-\t}", "+    public File findFile(String filePart) {", "+        compute();", "+        List mine = Collections.EMPTY_LIST;", "+        synchronized(this) {", "+            mine = new ArrayList(cached);", "+        }", "+        String tempFilePart = getCorrectedPath(filePart);", "+        for (Iterator it = mine.iterator(); it.hasNext(); ) {", "+            String path = (String) it.next();", "+            if (path.endsWith(tempFilePart)) {", "+                return new File(path);", "+            }", "+        }", "+        return null;", "+    }"]}]}
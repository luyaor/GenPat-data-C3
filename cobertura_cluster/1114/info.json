{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ad5d20df6cc1a7aa29976bc64c29efa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb9dc12a2057b72bdd96d93c56c48e5", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coverage/Main.java", "commitBeforeChange": "c7fb0b8cc80d7d214ae05e943100e9521802d5dd", "commitAfterChange": "7f47a6101d550eed225cbc5d96f9824ad91cbdc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-", "+\t//       exists and is newer than the input file.", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"file: \" + file.getAbsolutePath());", "-\t\t}", "-", "-\t\t\t{", "-\t\t\t}", "+\t\t\treturn;", "-\t\telse if (isClass(file))", "+", "+\t\tif (!isClass(file))", "-\t\t\tinstrument(file);", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (logger.isDebugEnabled())", "+\t\t{", "+\t\t\tlogger.debug(\"instrumenting \" + file.getAbsolutePath());", "+\t\t}", "+", "+\t\tInputStream inputStream = null;", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tinputStream = new FileInputStream(file);", "+\t\t\tClassReader cr = new ClassReader(inputStream);", "+\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\tClassInstrumenter cv = new ClassInstrumenter(cw);", "+\t\t\tcr.accept(cv, false);", "+\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+", "+\t\t\tFile outputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t+ \".class\");", "+\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\toutputStream.write(instrumentedClass);", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger", "+\t\t\t\t\t.warn(\"Unable to instrument file \"", "+\t\t\t\t\t\t\t+ file.getAbsolutePath());", "+\t\t\tlogger.info(e);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (inputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tinputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (outputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\toutputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94499d3d3a2f34b2ab62aa6f0c4b5643", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileFinder.java", "commitBeforeChange": "7a6cf9ee7c01328fd060bf78a56186190300c13b", "commitAfterChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 2, "signatureBeforeChange": "      \tprivate synchronized void change()", "signatureAfterChange": " \tpublic File getFileForSource(String fileName) throws IOException", "diff": ["-    ", "-\tprivate synchronized void change() {", "-\t\tchanged = true;", "-\t}", "+\t */", "+\tpublic File getFileForSource(String fileName) throws IOException {", "+\t\t// Correct file name", "+\t\tif( LOGGER.isDebugEnabled())", "+\t\t\tLOGGER.debug( \"Searching for file, name=[\" + fileName + \"]\");", "+\t\tfileName = getCorrectedPath( fileName);", "+", "+\t\t// Check inside sourceDirectories", "+\t\tfor( Iterator it=sourceDirectories.iterator(); it.hasNext();) {", "+\t\t\tString directory = (String)it.next();", "+\t\t\tFile file = new File( directory, fileName);", "+\t\t\tif( file.isFile()) {", "+\t\t\t\tLOGGER.debug( \"Found inside sourceDirectories\");", "+\t\t\t\treturn file;", "+\t\t// Check inside sourceFilesMap", "+\t\tfor( Iterator it=sourceFilesMap.keySet().iterator(); it.hasNext();) {", "+\t\t\tString directory = (String)it.next();", "+\t\t\tSet container = (Set) sourceFilesMap.get(directory);", "+\t\t\tif( !container.contains( fileName))", "+\t\t\t\tcontinue;", "+\t\t\tFile file = new File( directory, fileName);", "+\t\t\tif( file.isFile()) {", "+\t\t\t\tLOGGER.debug( \"Found inside sourceFilesMap\");", "+\t\t\t\treturn file;", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Have not found? Throw an error.", "+\t\tLOGGER.debug( \"File not found\");", "+\t\tthrow new IOException( \"Cannot find source file, name=[\"+fileName+\"]\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecc785f388634c23d43f01f504324799", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void _removeDirs( Vector vDirs )", "signatureAfterChange": "     private List findFiles( List filenames, boolean recursive ) throws IOException", "diff": ["-    private void _removeDirs( Vector vDirs )", "+    private List/*<File>*/ findFiles( List/*<String>*/ filenames, boolean recursive ) throws IOException", "-            Util.debug( this, \"_removeDirs(..).vDirs: \" + Util.toString( vDirs ) );", "+            Util.debug( \"filenames: \" + Util.toString( filenames ) );", "-        // Do it in reverse order, or we will have a problem ", "-        // when removing elements.", "-        for( int i = vDirs.size() - 1; i >= 0; i-- )", "+        if ( recursive && ( filenames.size() == 0 ) )", "-            String sFile = FileUtil.normalizeFileName( (String)vDirs.elementAt( i ) );", "-            Util.debug( this, \"_removeDirs(..).sFile: \" + sFile );", "-            if( FileUtil.existsDir( sFile ) )", "+            // If no files then add current directory!", "+            filenames.add( \".\" );", "+        }", "+", "+        Set _processedAtFiles = new HashSet();", "+        List newFiles = new ArrayList();", "+        for ( Iterator iter = filenames.iterator(); iter.hasNext(); )", "+        {", "+            String filename = (String)iter.next();", "+", "+            // if the file specifies other files...", "+            if ( filename.startsWith( \"@\" ) )", "-                vDirs.removeElementAt( i );", "-                Util.debug( this, \"_removeDirs(..).removed: \" + sFile );", "+                filename = filename.substring( 1 );", "+                if ( filename.length() > 1 )", "+                {", "+                    filename = FileUtil.normalizeFileName( filename );", "+                    if ( _processedAtFiles.add( filename ) )", "+                    {", "+                        String sJavaSourceFileNames = null;", "+                        try", "+                        {", "+                            sJavaSourceFileNames = FileUtil.readFile( filename );", "+                        }", "+                        catch( IOException pIOException ) ", "+                        {", "+                            _sErrorMessage = \"File Read Error: \" + filename;", "+                            _thrwError = pIOException;", "+                            throw pIOException;", "+                        }", "+                        List vTheseJavaSourceFiles = Util.stringToLines( sJavaSourceFileNames );", "+                        for ( Iterator iterator = vTheseJavaSourceFiles.iterator(); iterator.hasNext(); )", "+                        {", "+                            newFiles.add( new File( (String)iterator.next() ) );", "+                        }", "+                    }", "+                }", "+            }", "+            else", "+            {", "+                filename = FileUtil.normalizeFileName( filename );", "+                File file = new File( filename );", "+                if ( file.isDirectory() ) ", "+                {", "+                    _addJavaFiles( file, newFiles );", "+                }", "+                else", "+                {", "+                    newFiles.add( file );", "+                }", "+", "+        if ( Util.isDebug() )", "+        {", "+            Util.debug( \"resolved filenames: \" + Util.toString( newFiles ) );", "+        }", "+", "+        return newFiles;"]}]}
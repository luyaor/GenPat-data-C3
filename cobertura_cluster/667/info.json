{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cab62f427a1c590aadb4eb1a2237b1e3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfa709d547cf99245d177404d9de406", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file)", "signatureAfterChange": "  \tprivate void addInstrumentationToSingleClass(File file)", "diff": ["+", "+\tprivate void addInstrumentationToSingleClass(File file)", "+\t{", "+\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "+", "+\t\tInputStream inputStream = null;", "+\t\tClassWriter cw;", "+\t\tClassInstrumenter cv;", "+\t\ttry", "+\t\t{", "+\t\t\tinputStream = new FileInputStream(file);", "+\t\t\tClassReader cr = new ClassReader(inputStream);", "+\t\t\tcw = new ClassWriter(true);", "+\t\t\tcv = new ClassInstrumenter(this.projectData, cw, this.ignoreRegexs);", "+\t\t\tcr.accept(cv, false);", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+\t\t\t\t\tt);", "+\t\t\treturn;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (inputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tinputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tif (cv.isInstrumented())", "+\t\t\t{", "+\t\t\t\t// If destinationDirectory is null, then overwrite", "+\t\t\t\t// the original, uninstrumented file.", "+\t\t\t\tFile outputFile;", "+\t\t\t\tif (destinationDirectory == null)", "+\t\t\t\t\toutputFile = file;", "+\t\t\t\telse", "+\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t\t\t+ \".class\");", "+", "+\t\t\t\tFile parentFile = outputFile.getParentFile();", "+\t\t\t\tif (parentFile != null)", "+\t\t\t\t{", "+\t\t\t\t\tparentFile.mkdirs();", "+\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+\t\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\t\toutputStream.write(instrumentedClass);", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+\t\t\t\t\te);", "+\t\t\treturn;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (outputStream != null)", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\toutputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "-\tprivate void addInstrumentationToSingleClass(File file)", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(true);", "-\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegex);", "-\t\t\tcr.accept(cv, false);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tinputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "-", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\te);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (outputStream != null)", "-\t\t\t{", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\toutputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9104052e9827757d54b03a922dacabe", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "diff": ["-", "-\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "-\t\t\tZipOutputStream output) throws Exception", "-\t{", "-\t\tZipEntry entry;", "-\t\twhile ((entry = archive.getNextEntry()) != null)", "-\t\t\ttry", "-\t\t\t\tZipEntry outputEntry = new ZipEntry(entry.getName());", "-\t\t\t\toutput.putNextEntry(outputEntry);", "-\t\t\t\t// Read current entry", "-\t\t\t\tbyte[] entryBytes = IOUtil", "-\t\t\t\t\t\t.createByteArrayFromInputStream(archive);", "-", "-\t\t\t\t// Check if we have class file", "-\t\t\t\tif (isClass(entry))", "-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "-\t\t\t\t\t\t\tcw, ignoreRegex);", "-\t\t\t\t\tcr.accept(cv, false);", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumeted entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t}", "-\t\t\t\t// Add entry to the output", "-\t\t\t\toutput.write(entryBytes);", "-\t\t\t\toutput.closeEntry();", "-\t\t\t\tarchive.closeEntry();", "-\t\t\tcatch (Exception e)", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "-\t\t\toutput.flush();", "+\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "+\t\t\tZipOutputStream output) throws Exception", "+\t\tZipEntry entry;", "+\t\twhile ((entry = archive.getNextEntry()) != null)", "+\t\t\ttry", "+\t\t\t\tZipEntry outputEntry = new ZipEntry(entry.getName());", "+\t\t\t\toutput.putNextEntry(outputEntry);", "+\t\t\t\t// Read current entry", "+\t\t\t\tbyte[] entryBytes = IOUtil", "+\t\t\t\t\t\t.createByteArrayFromInputStream(archive);", "+", "+\t\t\t\t// Check if we have class file", "+\t\t\t\tif (isClass(entry))", "+\t\t\t\t{", "+\t\t\t\t\t// Instrument class", "+\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "+\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(", "+\t\t\t\t\t\t\tthis.projectData, cw, this.ignoreRegexs);", "+\t\t\t\t\tcr.accept(cv, false);", "+", "+\t\t\t\t\t// If class was instrumented, get bytes that define the", "+\t\t\t\t\t// class", "+\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\t{", "+\t\t\t\t\t\tlogger.debug(\"Putting instrumeted entry: \"", "+\t\t\t\t\t\t\t\t+ entry.getName());", "+\t\t\t\t\t\tentryBytes = cw.toByteArray();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\t// Add entry to the output", "+\t\t\t\toutput.write(entryBytes);", "+\t\t\t\toutput.closeEntry();", "+\t\t\t\tarchive.closeEntry();", "+\t\t\t}", "+\t\t\tcatch (Exception e)", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "+\t\t\t\tthrow e;", "+\t\t\toutput.flush();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "307c74239d96ff637f5cb0b920b4d2dc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d42e206c25aa87ce9268da4bbba2240", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/xml/XMLReportTest.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testXMLReportValidity() throws Exception", "signatureAfterChange": "  \tpublic void testXMLReportValidity() throws Exception", "diff": ["-\tpublic void testXMLReportValidity() throws Exception", "-\t{", "-\t\tString[] args;", "-", "-\t\t// Serialize the current coverage data to disk", "-\t\tProjectData.saveGlobalProjectData();", "-\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "-\t\t\t\t.getAbsolutePath();", "-", "-\t\t// Then we need to generate the XML report", "-\t\targs = new String[] { \"-f\", \"xml\", \"--datafile\", dataFileName, \"-o\",", "-\t\t\t\tpathToTestOutput, \"-s\", pathToSourceCode };", "-\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "-", "-\t\t// Create a validating XML document parser", "-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-\t\tfactory.setValidating(true);", "-\t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();", "-\t\tdocumentBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(", "-\t\t\t\tbasedir));", "-\t\tdocumentBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "-", "-\t\t// Parse the XML report", "-\t\tInputStream inputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(pathToXMLReport);", "-\t\t\tdocumentBuilder.parse(inputStream);", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t\tinputStream.close();", "-\t\t}", "+\tpublic void testXMLReportValidity() throws Exception {", "+//\t\tString[] args;", "+//", "+//\t\t// Serialize the current coverage data to disk", "+//\t\tProjectData.saveGlobalProjectData();", "+//\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile().getAbsolutePath();", "+//\t\t// Then we need to generate the XML report", "+//\t\targs = new String[] { \"--commandsfile\", pathToCommandFile };", "+//\t\ttry {", "+//\t\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "+//\t\t} catch(Exception ex) {", "+//\t\t\tSystem.err.println(\"Error running XML report test: \" + ex.getMessage());", "+//\t\t\tStringWriter writer = new StringWriter();", "+//\t\t\tex.printStackTrace(new PrintWriter(writer));", "+//\t\t\tfail(ex.getMessage() + \"\\n\" + writer.toString());", "+//\t\t}", "+//", "+//\t\t// Create a validating XML document parser", "+//\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "+//\t\tfactory.setValidating(true);", "+//\t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();", "+//\t\tdocumentBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(", "+//\t\t\t\tbasedir));", "+//\t\tdocumentBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "+//", "+//\t\t// Parse the XML report", "+//\t\tInputStream inputStream = null;", "+//\t\ttry {", "+//\t\t\tinputStream = new FileInputStream(pathToXMLReport);", "+//\t\t\tdocumentBuilder.parse(inputStream);", "+//\t\t} catch(Exception ex) {", "+//\t\t\tLOGGER.error(\"Error testing XML report: \" + ex.getMessage(), ex);", "+//\t\t} finally {", "+//\t\t\tif (inputStream != null)", "+//\t\t\t\tinputStream.close();", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d84fbac2c5db073b7916e71d4488e4a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/xml/XMLReportTest.java", "commitBeforeChange": "a4bb79761e85755820ce5a83120572bd443a4297", "commitAfterChange": "5568cf6cc222084bbc581c7ef8cec80eafe6b510", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testXMLReportValidity() throws Exception", "signatureAfterChange": "  \tpublic void testXMLReportValidity() throws Exception", "diff": ["-", "-\tpublic void testXMLReportValidity() throws Exception", "-\t{", "-\t\tString[] args;", "-", "-\t\t// Serialize the current coverage data to disk", "-\t\tProjectData.saveGlobalProjectData();", "-\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "-\t\t\t\t.getAbsolutePath();", "-", "-\t\t// Then we need to generate the XML report", "-\t\targs = new String[] { \"--format\", \"xml\", \"--datafile\", dataFileName, \"--destination\",", "-\t\t\t\tpathToTestOutput, pathToSourceCode };", "-\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "-", "+\tpublic void testXMLReportValidity() throws Exception", "+\t{", "+\t\tString[] args;", "+", "+\t\t// Serialize the current coverage data to disk", "+\t\tProjectData.saveGlobalProjectData();", "+\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "+\t\t\t\t.getAbsolutePath();", "+", "+\t\t// Then we need to generate the XML report", "+\t\targs = new String[] { \"--format\", \"xml\", \"--datafile\", dataFileName, \"--destination\",", "+\t\t\t\tpathToTestOutput, pathToSourceCode };", "+\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "+\t\t", "+\t\tvalidateReport( pathToXMLReport);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11414ff9ba1c31b0ce344cf383e76ad", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/ClassInstrumenter.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void visitSource(String source, String debug)", "signatureAfterChange": " \tpublic void visitSource(String source, String debug)", "diff": ["+\t */", "-", "-\t\t/*", "-\t\t * TODO: Make this less ugly.  We really should not have set the", "-\t\t *       source file prior to this method being called.", "-\t\t */", "-\t\tPackageData packageData = (PackageData)projectData.getChild(classData", "-\t\t\t\t.getPackageName());", "-\t\tSourceFileData sourceFileData = (SourceFileData)packageData", "-\t\t\t\t.getChild(classData.getSourceFileName());", "-\t\tString packageName = sourceFileData.getPackageName();", "-\t\tif (packageName != null)", "-\t\t\tsourceFileData.setName(packageName.replace('.', '/') + '/' + source);", "-\t\telse", "-\t\t\tsourceFileData.setName(source);", "-"]}]}
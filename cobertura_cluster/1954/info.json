{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f13728d063a96d90a89e2604385d220", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "659435a019337b19683bd5b405466f06", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/ComplexityCalculator.java", "commitBeforeChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "commitAfterChange": "d0e0a0f0aa7d8408ac3779914ce8b50e1c541921", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Complexity getAccumlatedCCNForSource(String sourceFileName, Source source)", "signatureAfterChange": " \tprivate Complexity getAccumlatedCCNForSource(String sourceFileName, Source source)", "diff": ["-        \tList singleMethodMetrics = (List)method.next();", "-        \tclassCcn += ((Integer)singleMethodMetrics.get(JavancssConstants.FCT_CCN)).intValue();", "+        \tFunctionMetric singleMethodMetrics = (FunctionMetric)method.next();", "+        \tclassCcn += singleMethodMetrics.ccn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b2bf99d5dc4e0d8f24c172c2bb4d8eb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/XmlFormatter.java", "commitBeforeChange": "f44527006156d82d108277efea7d0bf4a4cd5a22", "commitAfterChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private String _formatFunctionResume( int functions                                           , long lFunctionSum                                           , long lCCNSum                                           , long lJVDCSum                                                , long lJVDCLSum                                           , long lSLSum                                           , long lMLSum                )", "signatureAfterChange": "      private String _formatFunctionResume( int functions                                           , long lFunctionSum                                           , long lCCNSum                                           , long lJVDCSum                                           , long lJVDCLSum                                           , long lSLSum                                           , long lMLSum                )", "diff": ["-                                          , long lJVDCSum     ", "+                                          , long lJVDCSum", "-        StringBuffer sRetVal = new StringBuffer();", "-", "-        sRetVal.append(\"    <function_averages>\\n\" +", "-                       \"      <ncss>\" + _pNumberFormat.format( fAverageNcss ) + \"</ncss>\\n\" + ", "-                       \"      <ccn>\"  + _pNumberFormat.format( fAverageCCN  ) + \"</ccn>\\n\"  + ", "+        String sRetVal = \"    <function_averages>\\n\" +", "+                       \"      <ncss>\" + _pNumberFormat.format( fAverageNcss ) + \"</ncss>\\n\" +", "+                       \"      <ccn>\"  + _pNumberFormat.format( fAverageCCN  ) + \"</ccn>\\n\"  +", "-                       //\"      <single_comment_lines>\" + _pNumberFormat.format( fAverageSL ) + \"</single_comment_lines>\\n\" + ", "+                       //\"      <single_comment_lines>\" + _pNumberFormat.format( fAverageSL ) + \"</single_comment_lines>\\n\" +", "-                       \"    <ncss>\" + _pNumberFormat.format( _javancss.getNcss() ) + \"</ncss>\\n\" );", "+                       \"    <ncss>\" + _pNumberFormat.format( _javancss.getNcss() ) + \"</ncss>\\n\";", "-        return sRetVal.toString();", "+        return sRetVal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59331adcc333129af7910046f733175", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/ComplexityCalculator.java", "commitBeforeChange": "a2175b7f98530c5d02c630a5ca1d997870cfcfc6", "commitAfterChange": "e7b601006be033847fed4202df377f7408705d0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate Complexity getAccumlatedCCNForSingleFile(File file)", "signatureAfterChange": " \tprivate Complexity getAccumlatedCCNForSingleFile(File file)", "diff": ["-\t\tList functionMetrics = javancss.getFunctionMetrics();", "-\t\tif (functionMetrics.size() <= 0)", "+\t\tList methodComplexities = javancss.getMethodComplexities();", "+\t\tif (methodComplexities.size() <= 0)", "-\t\tIterator iter = functionMetrics.iterator();", "+\t\tIterator iter = methodComplexities.iterator();", "-\t\t\tVector functionMetric = (Vector)iter.next();", "-\t\t\tccnAccumulator += ((Integer)functionMetric", "-\t\t\t\t\t.elementAt(JavancssConstants.FCT_CCN)).intValue();", "+\t\t\tccnAccumulator += ((Integer)iter.next()).intValue();", "-\t\treturn new Complexity( ccnAccumulator, functionMetrics.size());", "+\t\treturn new Complexity( ccnAccumulator, methodComplexities.size());"]}]}
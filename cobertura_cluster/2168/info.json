{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3611e9cbed34af63d0a2fc82ad11a0ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182b1d5ef4944ed69a5621763519e4a4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/TestUtils.java", "commitBeforeChange": "7e40a8f1f2efcc3220de56c2876b1be28cc45f2f", "commitAfterChange": "7e0d1833808dbea36187f16af78305adf2d83c0b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public static int getMethodBranchCoverage(Node dom, String className, String methodName)", "signatureAfterChange": "      public static double getMethodBranchCoverage(Node dom, String className, String methodName)", "diff": ["-    public static int getMethodBranchCoverage(Node dom, String className, String methodName) {", "+    public static double getMethodBranchCoverage(Node dom, String className, String methodName) {", "-                                                                return (Integer) methodNode.attribute(\"branch-rate\");", "+                                                                return Double.valueOf((String)methodNode.attribute(\"branch-rate\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6d88126db7821e4dfbbe7b23fe873d6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "d60722f0c5b36ff4b20dbf6bd4dfc6603aa104af", "commitAfterChange": "518c187f06f8c93e5dd5f7fc9752f5520ae1b5e3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static void saveGlobalProjectData()", "signatureAfterChange": "  \tpublic static void saveGlobalProjectData()", "diff": ["-\t\tFileLocker fileLocker = new FileLocker(dataFile);", "-\t\ttry", "-\t\t{", "-\t\t\t// Read the old data, merge our current data into it, then", "-\t\t\t// write a new ser file.", "-\t\t\tif (fileLocker.lock())", "+\t\t/*", "+\t\t * A note about the next synchronized block:  Cobertura uses static fields to", "+\t\t * hold the data.   When there are multiple classloaders, each classloader", "+\t\t * will keep track of the line counts for the classes that it loads.  ", "+\t\t * ", "+\t\t * The static initializers for the Cobertura classes are also called for", "+\t\t * each classloader.   So, there is one shutdown hook for each classloader.", "+\t\t * So, when the JVM exits, each shutdown hook will try to write the", "+\t\t * data it has kept to the datafile.   They will do this at the same", "+\t\t * time.   Before Java 6, this seemed to work fine, but with Java 6, there", "+\t\t * seems to have been a change with how file locks are implemented.   So,", "+\t\t * care has to be taken to make sure only one thread locks a file at a time.", "+\t\t * ", "+\t\t * So, we will synchronize on the string that represents the path to the", "+\t\t * dataFile.  Apparently, there will be only one of these in the JVM", "+\t\t * even if there are multiple classloaders.  I assume that is because", "+\t\t * the String class is loaded by the JVM's root classloader. ", "+\t\t */", "+\t\tsynchronized (dataFile.getPath().intern() ) {", "+\t\t\tFileLocker fileLocker = new FileLocker(dataFile);", "+\t\t\t", "+\t\t\ttry", "-\t\t\t\tProjectData datafileProjectData = loadCoverageDataFromDatafile(dataFile);", "-\t\t\t\tif (datafileProjectData == null)", "+\t\t\t\t// Read the old data, merge our current data into it, then", "+\t\t\t\t// write a new ser file.", "+\t\t\t\tif (fileLocker.lock())", "-\t\t\t\t\tdatafileProjectData = projectDataToSave;", "+\t\t\t\t\tProjectData datafileProjectData = loadCoverageDataFromDatafile(dataFile);", "+\t\t\t\t\tif (datafileProjectData == null)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tdatafileProjectData = projectDataToSave;", "+\t\t\t\t\t}", "+\t\t\t\t\telse", "+\t\t\t\t\t{", "+\t\t\t\t\t\tdatafileProjectData.merge(projectDataToSave);", "+\t\t\t\t\t}", "+\t\t\t\t\tCoverageDataFileHandler.saveCoverageData(datafileProjectData, dataFile);", "-\t\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\tdatafileProjectData.merge(projectDataToSave);", "-\t\t\t\t}", "-\t\t\t\tCoverageDataFileHandler.saveCoverageData(datafileProjectData, dataFile);", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\t// Release the file lock", "-\t\t\tfileLocker.release();", "+\t\t\tfinally", "+\t\t\t{", "+\t\t\t\t// Release the file lock", "+\t\t\t\tfileLocker.release();", "+\t\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c9adca15f5bab88fb2a7eed0d6945ca", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "811c3fc720bac5eb54fec3358060e519", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalConditionCoverageTest.java", "commitBeforeChange": "52104a55e416b8e81a669a4adeed84e8d72a844e", "commitAfterChange": "7ec360bf26aa1aaf4d8f91e57e2ed051b9321daa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate static void runTestAntScript(String testName, String target) throws IOException", "signatureAfterChange": " \tprivate static void runTestAntScript(String testName, String target) throws IOException", "diff": ["-\t\tJava task = new Java();", "-\t\ttask.setTaskName(\"java\");", "-\t\ttask.setProject(new Project());", "-\t\ttask.init();", "-", "+\t\tJava java = new Java();", "+\t\tjava.setProject(TestUtils.project);", "+\t\tjava.init();", "+\t\t", "-\t\ttask.setClassname(\"org.apache.tools.ant.launch.Launcher\");", "-\t\ttask.setFork(true);", "+\t\tjava.setClassname(\"org.apache.tools.ant.launch.Launcher\");", "+\t\tjava.setFork(true);", "+\t\t", "+\t\tAntUtil.transferCoberturaDataFileProperty(java);", "-\t\tAntUtil.transferCoberturaDataFileProperty(task);", "+\t\tjava.createArg().setValue(\"-f\");", "+\t\tjava.createArg().setValue(BASEDIR + \"/build.xml\");", "+\t\tjava.createArg().setValue(target);", "-\t\ttask.createArg().setValue(\"-f\");", "-\t\ttask.createArg().setValue(BASEDIR + \"/build.xml\");", "-\t\ttask.createArg().setValue(target);", "-", "-\t\ttask.setFailonerror(true);", "+\t\tjava.setFailonerror(true);", "-\t\ttask.setOutput(outputFile);", "+\t\tjava.setOutput(outputFile);", "-\t\tPath classpath = task.createClasspath();", "-\t\tPathElement pathElement = classpath.createPathElement();", "-\t\tpathElement.setPath(System.getProperty(\"java.class.path\"));", "-\t\ttry", "-\t\t{", "-\t\t\ttask.execute();", "+\t\tPath classpath = new Path(TestUtils.project);", "+\t\tPathElement pathElement = classpath.new PathElement();", "+\t\tpathElement.setPath(System.getProperty(\"java.class.path\"));", "+\t\tclasspath.add(pathElement);", "+\t\tjava.setClasspath(classpath);", "+\t\tSystem.out.println(classpath);", "+\t\ttry {", "+\t\t\tjava.execute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "993d802538d1aa9fe954809efa59d6c4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalConditionCoverageTest.java", "commitBeforeChange": "b303fdc94851088a3c8699651770faef33180924", "commitAfterChange": "3c0ba550a753de34e44621245ee6c91060d1a974", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tprivate static void runTestAntScript(String testName, String target) throws IOException", "signatureAfterChange": " \tprivate static void runTestAntScript(String testName, String target) throws IOException", "diff": ["-\t\tJava task = new Java();", "-\t\ttask.setTaskName(\"java\");", "-\t\ttask.setProject(new Project());", "-\t\ttask.init();", "-", "+\t\tJava java = new Java();", "+\t\tjava.setProject(TestUtils.project);", "+\t\tjava.init();", "+\t\t", "-\t\ttask.setClassname(\"org.apache.tools.ant.launch.Launcher\");", "-\t\ttask.setFork(true);", "+\t\tjava.setClassname(\"org.apache.tools.ant.launch.Launcher\");", "+\t\tjava.setFork(true);", "+\t\t", "+\t\tAntUtil.transferCoberturaDataFileProperty(java);", "-\t\tAntUtil.transferCoberturaDataFileProperty(task);", "+\t\tjava.createArg().setValue(\"-f\");", "+\t\tjava.createArg().setValue(BASEDIR + \"/build.xml\");", "+\t\tjava.createArg().setValue(target);", "-\t\ttask.createArg().setValue(\"-f\");", "-\t\ttask.createArg().setValue(BASEDIR + \"/build.xml\");", "-\t\ttask.createArg().setValue(target);", "-", "-\t\ttask.setFailonerror(true);", "+\t\tjava.setFailonerror(true);", "-\t\ttask.setOutput(outputFile);", "+\t\tjava.setOutput(outputFile);", "-\t\tPath classpath = task.createClasspath();", "-\t\tPathElement pathElement = classpath.createPathElement();", "-\t\tpathElement.setPath(System.getProperty(\"java.class.path\"));", "-\t\ttry", "-\t\t{", "-\t\t\ttask.execute();", "+\t\tPath classpath = new Path(TestUtils.project);", "+\t\tPathElement pathElement = classpath.new PathElement();", "+\t\tpathElement.setPath(System.getProperty(\"java.class.path\"));", "+\t\tclasspath.add(pathElement);", "+\t\tjava.setClasspath(classpath);", "+\t\tSystem.out.println(classpath);", "+\t\ttry {", "+\t\t\tjava.execute();"]}]}
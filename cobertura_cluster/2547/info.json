{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5368af4215bb1b9d954caa6aab1718fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79fbf2973cfb7a5ea910ee761a1cb51d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/dsl/ArgumentsTest.java", "commitBeforeChange": "e46b77023c7e97f00c714d3a8a1471061b55f173", "commitAfterChange": "0e43adcdea83849bab574d10e4840e5318cc7602", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Test \tpublic void testGetMinimumCoverageThresholds() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void testGetMinimumCoverageThresholds() throws Exception", "diff": ["-\t\tassertEquals(MIN_LINE_PERCENTAGE, threshold.getMinLinePercentage());", "-\t\tassertEquals(MIN_BRANCH_PERCENTAGE, threshold.getMinBranchPercentage());", "+\t\tassertEquals(MIN_LINE_PERCENTAGE, threshold.getMinLinePercentage(), DELTA);", "+\t\tassertEquals(MIN_BRANCH_PERCENTAGE, threshold.getMinBranchPercentage(), DELTA);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cd5ec2f9a6d2675241668eed6f15ae3", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/dsl/ArgumentsBuilderTest.java", "commitBeforeChange": "e46b77023c7e97f00c714d3a8a1471061b55f173", "commitAfterChange": "0e43adcdea83849bab574d10e4840e5318cc7602", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Test \tpublic void testAddMinimumCoverageRates() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void testAddMinimumCoverageRates() throws Exception", "diff": ["-\t\tint lineCoverage = 50;", "-\t\tint branchCoverage = 55;", "+\t\tdouble lineCoverage = .5;", "+\t\tdouble branchCoverage = .55;", "-\t\tassertEquals(lineCoverage, threshold.getMinLinePercentage());", "-\t\tassertEquals(branchCoverage, threshold.getMinBranchPercentage());", "+\t\tassertEquals(lineCoverage, threshold.getMinLinePercentage(), DELTA);", "+\t\tassertEquals(branchCoverage, threshold.getMinBranchPercentage(), DELTA);"]}]}
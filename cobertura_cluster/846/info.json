{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41254b72634fcb5f71267b9ef4a39976", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5144fd82a0aed8ec78d2e621e6f5c56e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/test/JavancssTest.java", "commitBeforeChange": "f44527006156d82d108277efea7d0bf4a4cd5a22", "commitAfterChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void _checkJavadocLines( List vJavaSources, String sPackage, int javadocLines )", "signatureAfterChange": "      private Javancss _checkNcssAndLoc( int testNumber )", "diff": ["+", "+    private Javancss _checkNcssAndLoc( int testNumber )", "+    {", "+        Javancss pJavancss = measureTestFile( testNumber );", "+        int ncss = pJavancss.getNcss();", "+        int loc = pJavancss.getLOC();", "+        bugIf( ncss != loc, \"Parsing file Test\" + testNumber + \".java failed. Ncss is \"", "+                 + ncss  + \", LOC is \" + loc + \": should be equal.\" );", "+        return pJavancss;", "-    private void _checkJavadocLines( List/*<File>*/ vJavaSources, String sPackage, int javadocLines )", "-    {", "-        Javancss pJavancss = new Javancss( vJavaSources );", "-", "-        _checkJavadocLines( pJavancss, sPackage, javadocLines );", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1946af4ceeb99abfe3fdcd4a47cc262", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/XmlFormatter.java", "commitBeforeChange": "f2a1589f3fddacd7c9dde273e37e9c7b011a4059", "commitAfterChange": "f776167cb1845634c8ed7ca4cc5c429175d5af6f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private String _formatObjectResume( int objects                                         , long lObjectSum                                         , long lFunctionSum                                         , long lClassesSum                                         , long lJVDCSum                                         , long lJVDCLSum                                         , long lSLSum                                         , long lMLSum                )", "signatureAfterChange": "      private String _formatObjectResume( int objects                                         , long lObjectSum                                         , long lFunctionSum                                         , long lClassesSum                                         , long lJVDCSum                                         , long lJVDCLSum                                         , long lSLSum                                         , long lMLSum                )", "diff": ["-        //double fAverageJVDCL = _divide( lJVDCLSum   , objects );", "-        //double fAverageSL         = _divide( lSLSum                , objects );", "-        //double fAverageML         = _divide( lMLSum                , objects );", "+        double fAverageJVDCL \t  = _divide( lJVDCLSum , objects );", "+        double fAverageSL         = _divide( lSLSum , objects );", "+        double fAverageML         = _divide( lMLSum , objects );", "-            //\"      <javadocs_lines>\" + _pNumberFormat.format( fAverageJVDCL ) + \"</javadocs_lines>\\n\" +", "-            //\"      <single_comment_lines>\" + _pNumberFormat.format( fAverageSL ) + \"</single_comment_lines>\\n\" +", "-            //\"      <implementation_comment_lines>\" + _pNumberFormat.format( fAverageML ) + \"</implementation_comment_lines>\\n\" +", "+            \"      <javadocs_lines>\" + _pNumberFormat.format( fAverageJVDCL ) + \"</javadocs_lines>\\n\" +", "+            \"      <single_comment_lines>\" + _pNumberFormat.format( fAverageSL ) + \"</single_comment_lines>\\n\" +", "+            \"      <implementation_comment_lines>\" + _pNumberFormat.format( fAverageML ) + \"</implementation_comment_lines>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7be77a32e877a16e0cf43720a544874", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "a06d9b00841fe75e6bb9c88cb8981adad8d77c8d", "commitAfterChange": "d17a10884fc97a4f569cde2a87c993248d8fcc7d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic XMLReport(ProjectData projectData, File destinationDir, \t\t\tFileFinder finder, ComplexityCalculator complexity) throws IOException", "signatureAfterChange": "  \tpublic XMLReport(ProjectData projectData, File destinationDir, \t\t\tFileFinder finder, ComplexityCalculator complexity) throws IOException", "diff": ["+\t\t\tdouble ccn = complexity.getCCNForProject(projectData);", "+\t\t\tint numLinesCovered = projectData.getNumberOfCoveredLines();", "+\t\t\tint numLinesValid = projectData.getNumberOfValidLines();", "+\t\t\tint numBranchesCovered = projectData.getNumberOfCoveredBranches();", "+\t\t\tint numBranchesValid = projectData.getNumberOfValidBranches();", "+\t\t\t ", "-\t\t\tprintln(\"<coverage line-rate=\\\"\"", "-\t\t\t\t\t+ projectData.getLineCoverageRate() + \"\\\" branch-rate=\\\"\"", "-\t\t\t\t\t+ projectData.getBranchCoverageRate() + \"\\\" version=\\\"\"", "-\t\t\t\t\t+ Header.version() + \"\\\" timestamp=\\\"\"", "-\t\t\t\t\t+ new Date().getTime() + \"\\\">\");", "+\t\t\tprintln(", "+\t\t\t\t\t\"<coverage line-rate=\\\"\" + projectData.getLineCoverageRate()", "+\t\t\t\t\t+ \"\\\" branch-rate=\\\"\" + projectData.getBranchCoverageRate()", "+\t\t\t\t\t+ \"\\\" lines-covered=\\\"\" + numLinesCovered", "+\t\t\t\t\t+ \"\\\" lines-valid=\\\"\" + numLinesValid", "+\t\t\t\t\t+ \"\\\" branches-covered=\\\"\" + numBranchesCovered", "+\t\t\t\t\t+ \"\\\" branches-valid=\\\"\" + numBranchesValid", "+", "+\t\t\t\t\t+ \"\\\" complexity=\\\"\" + ccn", "+", "+\t\t\t\t\t+ \"\\\" version=\\\"\" + Header.version()", "+\t\t\t\t\t+ \"\\\" timestamp=\\\"\" + new Date().getTime()", "+\t\t\t\t\t+ \"\\\">\");"]}]}
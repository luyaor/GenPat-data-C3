{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ed448a4bdf6b173a2bc0baec347be59", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "268c90f3e89d214fa31a3a581de52063", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/merge/Main.java", "commitBeforeChange": "b98d19504cbdd232492e4e2363574bea34e1218f", "commitAfterChange": "d0330636da30b64c8dc4dcaa9c3ec4b1254ea4a5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(String[] args)", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["-\t\tLongOpt[] longOpts = new LongOpt[2];", "-\t\tlongOpts[0] = new LongOpt(\"datafile\",", "-\t\t\t\tLongOpt.REQUIRED_ARGUMENT, null, 'd');", "-\t\tlongOpts[1] = new LongOpt(\"output\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'o');", "-", "-\t\tGetopt g = new Getopt(getClass().getName(), args, \":d:o:\", longOpts);", "-\t\tint c;", "-", "-\t\tFile destFile = new File(System.getProperty(\"user.dir\"),", "-\t\t\t\tCoverageDataFileHandler.FILE_NAME);", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\twhile ((c = g.getopt()) != -1)", "+\t\tfor (int i = 0; i < args.length; i++)", "-\t\t\tswitch (c)", "+\t\t\tif (args[i].equals(\"--datafile\"))", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tSystem.out.println(\"cobertura loading: \" + g.getOptarg());", "-\t\t\t\t\tFile dataFile = new File(g.getOptarg());", "-\t\t\t\t\tif (projectData == null) {", "-\t\t\t\t\t\tprojectData = CoverageDataFileHandler", "-\t\t\t\t\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tProjectData projectDataNew = CoverageDataFileHandler", "-\t\t\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\t\t\t\tprojectData.merge(projectDataNew);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'o':", "-\t\t\t\t\tdestFile = new File(g.getOptarg());", "-\t\t\t\t\tdestFile.getParentFile().mkdirs();", "-\t\t\t\t\tbreak;", "+\t\t\t\tFile newDataFile = new File(args[++i]);", "+\t\t\t\tif (projectData == null) {", "+\t\t\t\t\tprojectData = CoverageDataFileHandler", "+\t\t\t\t\t\t\t.loadCoverageData(newDataFile);", "+\t\t\t\t} else {", "+\t\t\t\t\tProjectData projectDataNew = CoverageDataFileHandler", "+\t\t\t\t\t.loadCoverageData(newDataFile);", "+\t\t\t\t\tprojectData.merge(projectDataNew);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--output\"))", "+\t\t\t{", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\t\tdataFile.getParentFile().mkdirs();", "-\t\t\tCoverageDataFileHandler.saveCoverageData(projectData, destFile);", "+\t\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d504a42cc9292397b4f3d5bb0d228b0c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "b98d19504cbdd232492e4e2363574bea34e1218f", "commitAfterChange": "d0330636da30b64c8dc4dcaa9c3ec4b1254ea4a5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "signatureAfterChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "diff": ["-\t\tLongOpt[] longOpts = new LongOpt[6];", "-\t\tlongOpts[0] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'd');", "-\t\tlongOpts[1] = new LongOpt(\"regex\", LongOpt.REQUIRED_ARGUMENT, null, 'r');", "-\t\tlongOpts[2] = new LongOpt(\"branch\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'b');", "-\t\tlongOpts[3] = new LongOpt(\"line\", LongOpt.REQUIRED_ARGUMENT, null, 'l');", "-\t\tlongOpts[4] = new LongOpt(\"totalbranch\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'B');", "-\t\tlongOpts[5] = new LongOpt(\"totalline\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'L');", "-", "-\t\tGetopt g = new Getopt(getClass().getName(), args, \":b:B:d:l:L:r\",", "-\t\t\t\tlongOpts);", "-\t\tint c;", "-", "-\t\twhile ((c = g.getopt()) != -1)", "+\t\tfor (int i = 0; i < args.length; i++)", "-\t\t\tswitch (c)", "+\t\t\tif (args[i].equals(\"--branch\"))", "-\t\t\t\tcase 'b':", "-\t\t\t\t\tbranchCoverageRate = inRangeAndDivideByOneHundred(g", "-\t\t\t\t\t\t\t.getOptarg());", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'B':", "-\t\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(g", "-\t\t\t\t\t\t\t.getOptarg());", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tdataFile = new File(g.getOptarg());", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'l':", "-\t\t\t\t\tlineCoverageRate = inRangeAndDivideByOneHundred(g", "-\t\t\t\t\t\t\t.getOptarg());", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'L':", "-\t\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(g", "-\t\t\t\t\t\t\t.getOptarg());", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'r':", "-\t\t\t\t\tsetMinimumCoverageRate(g.getOptarg());", "-\t\t\t\t\tbreak;", "-", "+\t\t\t\tbranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t{", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--line\"))", "+\t\t\t{", "+\t\t\t\tlineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--regex\"))", "+\t\t\t{", "+\t\t\t\tsetMinimumCoverageRate(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--totalbranch\"))", "+\t\t\t{", "+\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--totalline\"))", "+\t\t\t{", "+\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c5cbf2a7803550d9baece81f9588655", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6567911800f17ec91ac34d06f6118d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "signatureAfterChange": " \t \t \t \tprivate void addInstrumentationToSingleClass(File file)", "diff": ["-", "-\tprivate void addInstrumentationToSingleClass(File file) throws Throwable", "-\t{", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(ClassWriter.COMPUTE_MAXS);", "-\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes,", "-\t                   ignoreMethodAnnotations, ignoreTrivial);", "-\t\t\tcr.accept(cv, 0);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tinputStream = IOUtil.closeInputStream(inputStream);", "-\t\t}", "-", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "-", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\toutputStream = IOUtil.closeOutputStream(outputStream);", "-\t\t}", "+\t", "+\tprivate void addInstrumentationToSingleClass(File file){", "+\t\tlogger.info(\"Instrumenting: \"+file.getAbsolutePath()+\" to \"+destinationDirectory);", "+\t\tcoberturaInstrumenter.addInstrumentationToSingleClass(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba58b5fa831e068088d1466996c35aa0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "8b78aded7bc2195ca2875df15fa36b034194b55e", "commitAfterChange": "6febec9638071e32d498b4bd4a149cb4872b0993", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-\t//       exists and is newer than the input file.", "-\tprivate void addInstrumentation(File file)", "-\t\tif (file.isDirectory())", "-\t\t\tFile[] contents = file.listFiles();", "-\t\t\tfor (int i = 0; i < contents.length; i++)", "-\t\t\t\taddInstrumentation(contents[i]);", "-\t\t\treturn;", "-\t\tif (!isClass(file))", "-\t\t\treturn;", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"instrumenting \" + file.getAbsolutePath());", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t\tlogger.warn(", "-\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "-\t\t\tlogger.warn(", "-\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "+\t//       exists and is newer than the input file.", "+\tprivate void addInstrumentation(File file)", "+\t{", "+\t\tif (isClass(file))", "+\t\t{", "+\t\t\taddInstrumentationToSingleClass(file);", "+\t\t}", "+\t\telse if (file.isDirectory())", "+\t\t{", "+\t\t\tFile[] contents = file.listFiles();", "+\t\t\tfor (int i = 0; i < contents.length; i++)", "+\t\t\t\taddInstrumentation(contents[i]);", "+\t\t}", "+\t\telse if (isArchive(file))", "+\t\t{", "+\t\t\taddInstrumentationToArchive(file);", "+\t\t}", "+\t}"]}]}
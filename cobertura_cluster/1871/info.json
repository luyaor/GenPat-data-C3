{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3e288227524f915246d7f2f48dc1454", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ae3cf38dd726c813cfb50864f770742", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "89f4eaca365e898685523b26abb2975d34c5493c", "commitAfterChange": "b5fae504c12a9486e23c38b8e2fb563abfcdacb8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tCoverageRate findMinimumCoverageRate(String classname)", "signatureAfterChange": " \tCoverageRate findMinimumCoverageRate(String classname)", "diff": ["+\t */", "-\t\tIterator i = minimumCoverageRates.entrySet().iterator();", "-\t\twhile (i.hasNext())", "+\t\tIterator iter = this.minimumCoverageRates.entrySet().iterator();", "+\t\twhile (iter.hasNext())", "-\t\t\tMap.Entry entry = (Map.Entry)i.next();", "+\t\t\tMap.Entry entry = (Map.Entry)iter.next();", "-\t\treturn minimumCoverageRate;", "+\t\treturn this.minimumCoverageRate;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b10c329faffc00704ef8ea05e104f7f7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/check/CheckCoverageMain.java", "commitBeforeChange": "e46b77023c7e97f00c714d3a8a1471061b55f173", "commitAfterChange": "0e43adcdea83849bab574d10e4840e5318cc7602", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static int checkCoverage(String[] args) \t\t\tthrows MalformedPatternException", "signatureAfterChange": "  \tpublic static int checkCoverage(String[] args) \t\t\tthrows MalformedPatternException", "diff": ["+", "-\t\t\t\tbuilder.addMinimumCoverageRates(tokenizer.nextToken(), Integer", "-\t\t\t\t\t\t.valueOf(tokenizer.nextToken()), Integer", "-\t\t\t\t\t\t.valueOf(tokenizer.nextToken()));", "+\t\t\t\tbuilder.addMinimumCoverageRates(tokenizer.nextToken(),", "+\t\t\t\t\t\tinRangeAndDivideByOneHundred(tokenizer.nextToken()),", "+\t\t\t\t\t\tinRangeAndDivideByOneHundred(tokenizer.nextToken()));"]}]}
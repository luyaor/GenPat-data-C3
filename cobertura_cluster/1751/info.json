{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0433e48451610df36e190eb5fd1965b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8927d56fe7c95641566a451b7bf021db", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/test/JavancssTest.java", "commitBeforeChange": "f44527006156d82d108277efea7d0bf4a4cd5a22", "commitAfterChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void _checkJavadocLines( int[] aTestFile, String sPackage, int javadocLines )", "signatureAfterChange": "      private void _checkJavadocLines( int[] aTestFile, String sPackage, int javadocLines )", "diff": ["-            files.add( new File( testDir, \"Test\" + next + \".java\" ) );", "+            files.add( getTestFile( next ) );", "-        _checkJavadocLines( files, sPackage, javadocLines );", "+        Javancss pJavancss = new Javancss( files );", "+        _checkJavadocLines( pJavancss, sPackage, javadocLines );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ed63b0cac05c59a18d510a78be2b00", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileFinder.java", "commitBeforeChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "commitAfterChange": "09421016268852f85f74b9774657dc46969a87d5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic File findFile(String filePart)", "signatureAfterChange": " \t     public File findFile(String filePart)", "diff": ["-\tpublic File findFile(String filePart) {", "-\t\tcompute();", "-\t\tList mine = Collections.EMPTY_LIST;", "-\t\tsynchronized(this) {", "-\t\t\tmine = new ArrayList(cached);", "-\t\t}", "-\t\tfor (Iterator it = mine.iterator(); it.hasNext(); ) {", "-\t\t\tString path = (String) it.next();", "-\t\t\tif (path.replace('/', '\\\\').endsWith(filePart.replace('/', '\\\\'))) {", "-\t\t\t\treturn new File(path);", "-\t\t\t}", "-\t\t}", "-\t\treturn null;", "-\t}", "+    public File findFile(String filePart) {", "+        compute();", "+        List mine = Collections.EMPTY_LIST;", "+        synchronized(this) {", "+            mine = new ArrayList(cached);", "+        }", "+        String tempFilePart = getCorrectedPath(filePart);", "+        for (Iterator it = mine.iterator(); it.hasNext(); ) {", "+            String path = (String) it.next();", "+            if (path.endsWith(tempFilePart)) {", "+                return new File(path);", "+            }", "+        }", "+        return null;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "515348d5289ba0a1f4c955960b931950", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68d630b5c7c2b888b1bd50dd7fccecc0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "390c1e710f4f0726f16380595fad91f1ff044c3b", "commitAfterChange": "ec1fd1d424f2f4413436786d9da0ddb5f02e1d9d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic boolean equals(Object obj)", "signatureAfterChange": " \tpublic boolean equals(Object obj)", "diff": ["-\t\tif ((obj == null) || !(obj instanceof ClassData))", "+\t\tif ((obj == null) || !(obj.getClass().equals(this.getClass())))", "-\t\tboolean areFileNamesEqual = (this.sourceFileName == classData.sourceFileName)", "-\t\t\t\t|| ((this.sourceFileName != null)", "-\t\t\t\t\t\t&& (classData.sourceFileName != null) && (this.sourceFileName", "-\t\t\t\t\t\t.equals(classData.sourceFileName)));", "-", "-\t\treturn areFileNamesEqual", "+\t\treturn super.equals(obj)", "-\t\t\t\t&& this.lines.equals(classData.lines)", "-\t\t\t\t\t\t.equals(classData.methodNamesAndDescriptors);", "+\t\t\t\t\t\t.equals(classData.methodNamesAndDescriptors)", "+\t\t\t\t&& this.name.equals(classData.name)", "+\t\t\t\t&& this.sourceFileName.equals(classData.sourceFileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8a490482154ffcd7bd9b01a398f24f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "5c3edcc6dd3fd1408cac466f6859d53cda78784e", "commitAfterChange": "6e35d7554dd3d5f67e788f0262566d634b33cb71", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate String generateHtmlizedJavaSource(SourceFileData sourceFileData)", "signatureAfterChange": "  \tprivate String generateHtmlizedJavaSource(SourceFileData sourceFileData)", "diff": ["-\t\tFile sourceFile = null;", "-\t\ttry", "-\t\t{", "-\t\t\tsourceFile = finder.getFileForSource(sourceFileData.getName());", "-\t\t}", "-\t\tcatch (IOException e)", "+\t\tSource source = finder.getSource(sourceFileData.getName());", "+\t\t", "+\t\tif (source == null)", "-\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), encoding));", "+\t\t\tbr = new BufferedReader(new InputStreamReader(source.getInputStream(), encoding));", "-\t\t\treturn \"<p>Unable to open \" + sourceFile.getAbsolutePath()", "+\t\t\treturn \"<p>Unable to open \" + source.getOriginDesc()", "-\t\tcatch (FileNotFoundException e)", "+\t\tcatch (Throwable t)", "-\t\t\treturn \"<p>Unable to open \" + sourceFile.getAbsolutePath() + \"</p>\";", "+\t\t\treturn \"<p>Unable to open \" + source.getOriginDesc() + \": \" + t.getLocalizedMessage() + \"</p>\";", "-\t\t\tret.append(\"<tr><td>Error reading from file \"", "-\t\t\t\t\t+ sourceFile.getAbsolutePath() + \": \"", "+\t\t\tret.append(\"<tr><td>Error reading \"", "+\t\t\t\t\t+ source.getOriginDesc() + \": \"", "+\t\t\t\tsource.close();"]}]}
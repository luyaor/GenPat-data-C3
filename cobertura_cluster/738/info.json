{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad0b87e30146b226b6609668b5371591", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be54419290c4d76474af7a9a4f7465a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "metrics/metrics-api/src/test/java/net/sourceforge/cobertura/metrics/api/helpers/DebugCoverageCalculator.java", "commitBeforeChange": "6f6a7661efb1fcbc73aa09bb85cdab7bdaf35db8", "commitAfterChange": "d1cf5bb06c93aa997e1f1f2066f2bdd82d480da5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     protected Rate getRate(final CoverageType nonNullCoverageType)", "signatureAfterChange": "     @Override     protected Rate getRate(final SourceLocationFilter nonNullFilter, final CoverageType nonNullCoverageType)", "diff": ["-    protected Rate getRate(final CoverageType nonNullCoverageType) {", "+    protected Rate getRate(final SourceLocationFilter nonNullFilter, final CoverageType nonNullCoverageType) {", "-        Rate toReturn = new Rate();", "-", "-        for(Map.Entry<SourceLocation, Integer> current : listener.recordedSteps.entrySet()) {", "-", "+        if(nonNullCoverageType == CoverageType.BRANCH) {", "+            throw new IllegalArgumentException(\"Cannot handle branch coverage.\");", "-        return null;", "+        final Filter<Tuple<SourceLocation, CoverageRecord>> filter = new Filter<Tuple<SourceLocation, CoverageRecord>>() {", "+            @Override", "+            public boolean accept(final Tuple<SourceLocation, CoverageRecord> candidate) {", "+                return candidate != null && nonNullFilter.accept(candidate.getKey());", "+            }", "+        };", "+", "+        final Map<SourceLocation, CoverageRecord> result = CollectionAlgorithms.filter(coverageRecords, filter);", "+        int hits = 0;", "+        for(CoverageRecord current : result.values()) {", "+            if(current.getHitCount() != 0) {", "+                hits++;", "+            }", "+        }", "+", "+        // All done.", "+        return new Rate(result.size(), hits, CoverageType.LINE.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a305eade39fe65af7c7464e29c50c7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "7a6cf9ee7c01328fd060bf78a56186190300c13b", "commitAfterChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "      private void parseArguments(String[] args)", "diff": ["-        FileFinder finder = new FileFinder();", "+        List filePaths = new ArrayList();", "-            if (args[i].equals(\"--basedir\"))", "-                finder.addBaseDirectory(new File(args[++i]));", "+            if (args[i].equals(\"--basedir\")) ", "+            {", "+            \tfilePaths.add( args[i]);", "+            \tfilePaths.add( args[++i]);", "+            }", "-            else", "-                finder.addSourceFilePath(args[i]);", "+            else {", "+            \tfilePaths.add( args[i]);", "+            }", "-        // Load coverage data, instrument classes, save coverage data", "+        // Load coverage data", "-        Iterator iter = finder.getFilePaths().iterator();", "-        while (iter.hasNext())", "-            addInstrumentation((String)iter.next());", "+", "+        // Instrument classes", "+        String baseDir = null;", "+\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "+        Iterator iter = filePaths.iterator();", "+        while (iter.hasNext()) {", "+        \tString act = (String) iter.next();", "+        \tif( act.equals(\"--basedir\")) {", "+       \t\t\tbaseDir = (String) iter.next();", "+        \t} else {", "+        \t\taddInstrumentation( baseDir, act);", "+        \t}", "+        }", "+        ", "+        // Save coverage data"]}]}
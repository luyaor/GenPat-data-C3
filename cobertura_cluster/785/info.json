{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5f49b94ea20e9c87cbe67c24fdfc97d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da4872de6f7d4e1602fcab5c5e2c1b0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SwitchData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void merge(BranchCoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(BranchCoverageData coverageData)", "diff": ["-\t\tdefaultHits += switchData.defaultHits;", "-\t\tfor (int i = Math.min(hits.length, switchData.hits.length) - 1; i >= 0; i--)", "-\t\t\thits[i] += switchData.hits[i];", "-\t\tif (switchData.hits.length > hits.length)", "+\t\tgetBothLocks(switchData);", "+\t\ttry", "-\t\t\tlong[] old = hits;", "-\t\t\thits = new long[switchData.hits.length];", "-\t\t\tSystem.arraycopy(old, 0, hits, 0, old.length);", "-\t\t\tSystem.arraycopy(switchData.hits, old.length, hits, old.length, hits.length - old.length);", "+\t\t\tdefaultHits += switchData.defaultHits;", "+\t\t\tfor (int i = Math.min(hits.length, switchData.hits.length) - 1; i >= 0; i--)", "+\t\t\t\thits[i] += switchData.hits[i];", "+\t\t\tif (switchData.hits.length > hits.length)", "+\t\t\t{", "+\t\t\t\tlong[] old = hits;", "+\t\t\t\thits = new long[switchData.hits.length];", "+\t\t\t\tSystem.arraycopy(old, 0, hits, 0, old.length);", "+\t\t\t\tSystem.arraycopy(switchData.hits, old.length, hits, old.length, hits.length - old.length);", "+\t\t\t}", "+\t\t\tif ((this.keys.length == 0) && (switchData.keys.length > 0))", "+\t\t\t\tthis.keys = switchData.keys;", "-\t\tif ((this.keys.length == 0) && (switchData.keys.length > 0))", "-\t\t\tthis.keys = switchData.keys;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tswitchData.lock.unlock();", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e59588b74b651c8fb3c8cc17a363dc6b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SwitchData.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic void merge(BranchCoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(BranchCoverageData coverageData)", "diff": ["-\tpublic void merge(BranchCoverageData coverageData)", "-\t{", "+\tpublic void merge(BranchCoverageData coverageData) {", "-\t\tgetBothLocks(switchData);", "-\t\ttry", "+\t\tdefaultHits += switchData.defaultHits;", "+\t\tfor (int i = Math.min(hits.length, switchData.hits.length) - 1; i >= 0; i--)", "+\t\t\thits[i] += switchData.hits[i];", "+\t\tif (switchData.hits.length > hits.length)", "-\t\t\tdefaultHits += switchData.defaultHits;", "-\t\t\tfor (int i = Math.min(hits.length, switchData.hits.length) - 1; i >= 0; i--)", "-\t\t\t\thits[i] += switchData.hits[i];", "-\t\t\tif (switchData.hits.length > hits.length)", "-\t\t\t{", "-\t\t\t\tlong[] old = hits;", "-\t\t\t\thits = new long[switchData.hits.length];", "-\t\t\t\tSystem.arraycopy(old, 0, hits, 0, old.length);", "-\t\t\t\tSystem.arraycopy(switchData.hits, old.length, hits, old.length, hits.length - old.length);", "-\t\t\t}", "-\t\t\tif ((this.keys.length == 0) && (switchData.keys.length > 0))", "-\t\t\t\tthis.keys = switchData.keys;", "+\t\t\tlong[] old = hits;", "+\t\t\thits = new long[switchData.hits.length];", "+\t\t\tSystem.arraycopy(old, 0, hits, 0, old.length);", "+\t\t\tSystem.arraycopy(switchData.hits, old.length, hits, old.length, hits.length - old.length);", "-\t\tfinally", "-\t\t{", "-\t\t\tlock.unlock();", "-\t\t\tswitchData.lock.unlock();", "-\t\t}", "-", "+\t\tif ((this.keys.length == 0) && (switchData.keys.length > 0))", "+\t\t\tthis.keys = switchData.keys;", "+\t\tmaxBranches = Math.min(maxBranches, switchData.getMaxBranches());"]}]}
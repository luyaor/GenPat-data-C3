{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6b46f64e198fc296d97b75c094cc1b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "578ce2f2be9422f511325fdc18a460fe", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "cbc25c039577cb031ebc2642ca908fb2416646b0", "commitAfterChange": "6e5bdd4a260b41be4efbef0899cf1900c2626b0c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tpublic double getBranchCoverageRate(int index)", "signatureAfterChange": " \t \tpublic String getConditionCoverage(int index)", "diff": ["-\tpublic double getBranchCoverageRate(int index) {", "-\t\t\treturn ((JumpData) jumps.get(index)).getBranchCoverageRate();", "-\t\t\treturn ((SwitchData) switches.get(index - jumpsSize)).getBranchCoverageRate();", "+\t", "+\tpublic String getConditionCoverage(int index) {", "+\t\tObject branchData = getConditionData(index);", "+\t\tif (branchData == null)", "+\t\t{", "+\t\t\treturn StringUtil.getPercentValue(1.0);", "+\t\t} ", "+\t\telse if (branchData instanceof JumpData) ", "+\t\t{", "+\t\t\tJumpData jumpData = (JumpData) branchData;", "+\t\t\treturn StringUtil.getPercentValue(jumpData.getBranchCoverageRate());", "+\t\t}", "-\t\t\treturn 1;", "+\t\t{", "+\t\t\tSwitchData switchData = (SwitchData) branchData;", "+\t\t\treturn StringUtil.getPercentValue(switchData.getBranchCoverageRate());", "+", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6854457de1ece64242712869a6aaad6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "6c6d6c76c09024a5191fe1c0cd3e7fdf05a53316", "commitAfterChange": "f23f5bf81f0fad907fdffec71d55d604d0e8edd6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate static String generateTableColumnsForNA(double ccn)", "signatureAfterChange": " \tprivate static String generateTableColumnsFromData(double lineCoverage, \t\t\tdouble branchCoverage, double ccn)", "diff": ["-\tprivate static String generateTableColumnsForNA(double ccn)", "-\t{", "-\t\treturn \"<td class=\\\"value\\\">\" + generateNAPercent() + \"</td>\"", "-\t\t\t\t+ \"<td class=\\\"value\\\">\" + generateNAPercent() + \"</td>\"", "-\t\t\t\t+ \"<td class=\\\"value\\\">\" + getDoubleValue(ccn) + \"</td>\";", "-", "-\t}", "+\t */", "+\t\tString lineCoverageCell = (lineCoverage == -1)", "+\t\t\t\t? generateNAPercent()", "+\t\t\t\t: generatePercentResult(lineCoverage);", "+\t\tString branchCoverageCell = (branchCoverage == -1)", "+\t\t\t\t? generateNAPercent()", "+\t\t\t\t: generatePercentResult(branchCoverage);", "+", "+\t\treturn \"<td class=\\\"value\\\">\" + lineCoverageCell + \"</td>\"", "+\t\t\t\t+ \"<td class=\\\"value\\\">\" + branchCoverageCell + \"</td>\"", "+\t\t\t\t+ \"<td class=\\\"value\\\">\" + getDoubleValue(ccn) + \"</td>\";"]}]}
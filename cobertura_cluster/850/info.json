{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bef2b2e66575d918c7b803dd0a2f494", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b16c2e3a0edf6b8781562a5b532c19d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tprivate void closeSocket(ServerSocket socket)", "signatureAfterChange": " \t \tpublic void pingCoberturaServer()", "diff": ["-", "-\tprivate void closeSocket(ServerSocket socket) {", "-\t\ttry {", "-\t\t\tif (socket != null && socket.isClosed()) {", "-\t\t\t\tsocket.close();", "-\t\t\t}", "-\t\t} catch (Throwable t) {", "-\t\t\tt.printStackTrace(System.err);", "-\t\t}", "-\t}", "+\t", "+\tpublic void pingCoberturaServer() {", "+\t\t//flush the cobertura data by doing an HTTP get", "+\t\tString flushing = null;", "+\t\ttry {", "+\t\t\tflushing = IOUtils.toString(", "+\t\t\t\t\t\t\t\t\tnew java.net.URL(\"http://localhost:\" + webappPort", "+\t\t\t\t\t+ \"/coberturaFlush/flushCobertura\").openConnection()", "+\t\t\t\t\t.getInputStream());", "+\t\t} catch (MalformedURLException e) {", "+\t\t\te.printStackTrace();", "+\t\t\tfail(e.getMessage());", "+\t\t} catch (IOException e) {", "+\t\t\te.printStackTrace();", "+\t\t\tfail(e.getMessage());", "+\t\t}", "+\t\t", "+\t\tassertNotNull(flushing);", "+\t\tassertEquals(\"\", flushing.trim());", "+", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71765a649e3a7d7fff2ac5cb28b6706a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/ClassDataTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void testBranch()", "signatureAfterChange": "  \tpublic void testBranch()", "diff": ["-\t\tassertFalse(a.isBranch(2));", "-\t\ta.markLineAsBranch(2);", "-\t\tassertFalse(a.isBranch(2));", "+\t\tassertFalse(a.hasBranch(2));", "+\t\ta.addLineJump(2, 0);", "+\t\tassertFalse(a.hasBranch(2));", "-\t\tassertFalse(b.isBranch(2));", "-\t\tb.markLineAsBranch(2);", "-\t\tassertTrue(b.isBranch(2));", "+\t\tassertFalse(b.hasBranch(2));", "+\t\tb.addLineJump(2, 0);", "+\t\tassertTrue(b.hasBranch(2));", "-\t\tassertFalse(b.isBranch(4));", "-\t\tb.markLineAsBranch(4);", "-\t\tassertTrue(b.isBranch(4));", "+\t\tassertTrue(b.hasBranch(2));", "+\t\tb.addLineJump(2, 1);", "+\t\tassertTrue(b.hasBranch(2));", "+", "+\t\tassertFalse(b.hasBranch(4));", "+\t\tb.addLineSwitch(4, 0, 1, 9);", "+\t\tassertTrue(b.hasBranch(4));", "-\t\tassertEquals(b.getNumberOfValidBranches(), branches.size());", "+\t\tassertEquals(14, b.getNumberOfValidBranches());", "+\t\tassertTrue(branches.contains(new Integer(2)));", "+\t\tassertTrue(branches.contains(new Integer(4)));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5afc618ec5bc7f67b0b1f6f035d0ea3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5a96de7f0b61824567fc09179fea1a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      \tpublic void addClassData(ClassData classData)", "signatureAfterChange": "      \tpublic void addClassData(ClassData classData)", "diff": ["-\t\tString sourceFileName = classData.getSourceFileName();", "-\t\tSourceFileData sourceFileData = (SourceFileData)children.get(sourceFileName);", "-\t\tif (sourceFileData == null)", "-\t\t{", "-\t\t\tsourceFileData = new SourceFileData(sourceFileName);", "-\t\t\t// Each key is a source file name, stored as an String object.", "-\t\t\t// Each value is information about the source file, stored as", "-\t\t\t// a SourceFileData object.", "-\t\t\tthis.children.put(sourceFileName, sourceFileData);", "-\t\t}", "-\t\tsourceFileData.addClassData(classData);", "+\t\tif (children.containsKey(classData.getBaseName()))", "+\t\t\tthrow new IllegalArgumentException(\"Package \" + this.name", "+\t\t\t\t\t+ \" already contains a class with the name \"", "+\t\t\t\t\t+ classData.getBaseName());", "+", "+\t\t// Each key is a class basename, stored as an String object.", "+\t\t// Each value is information about the class, stored as a ClassData object.", "+\t\tchildren.put(classData.getBaseName(), classData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8a490482154ffcd7bd9b01a398f24f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "5c3edcc6dd3fd1408cac466f6859d53cda78784e", "commitAfterChange": "6e35d7554dd3d5f67e788f0262566d634b33cb71", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate String generateHtmlizedJavaSource(SourceFileData sourceFileData)", "signatureAfterChange": "  \tprivate String generateHtmlizedJavaSource(SourceFileData sourceFileData)", "diff": ["-\t\tFile sourceFile = null;", "-\t\ttry", "-\t\t{", "-\t\t\tsourceFile = finder.getFileForSource(sourceFileData.getName());", "-\t\t}", "-\t\tcatch (IOException e)", "+\t\tSource source = finder.getSource(sourceFileData.getName());", "+\t\t", "+\t\tif (source == null)", "-\t\t\tbr = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), encoding));", "+\t\t\tbr = new BufferedReader(new InputStreamReader(source.getInputStream(), encoding));", "-\t\t\treturn \"<p>Unable to open \" + sourceFile.getAbsolutePath()", "+\t\t\treturn \"<p>Unable to open \" + source.getOriginDesc()", "-\t\tcatch (FileNotFoundException e)", "+\t\tcatch (Throwable t)", "-\t\t\treturn \"<p>Unable to open \" + sourceFile.getAbsolutePath() + \"</p>\";", "+\t\t\treturn \"<p>Unable to open \" + source.getOriginDesc() + \": \" + t.getLocalizedMessage() + \"</p>\";", "-\t\t\tret.append(\"<tr><td>Error reading from file \"", "-\t\t\t\t\t+ sourceFile.getAbsolutePath() + \": \"", "+\t\t\tret.append(\"<tr><td>Error reading \"", "+\t\t\t\t\t+ source.getOriginDesc() + \": \"", "+\t\t\t\tsource.close();"]}]}
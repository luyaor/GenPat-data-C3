{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87f30593cd99fe18c508f8becf37e8b7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e0fba0c4f6fe1713a8eb2a72c2919b4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic SortedSet getSourceFiles()", "signatureAfterChange": "  \tpublic Collection getSourceFiles()", "diff": ["-\tpublic SortedSet getSourceFiles()", "+\tpublic Collection getSourceFiles()", "-\t\treturn new TreeSet(this.children.values());", "+\t\tSortedMap sourceFileDatas = new TreeMap();", "+\t\tIterator iter = this.children.values().iterator();", "+\t\twhile (iter.hasNext()) {", "+\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\tString sourceFileName = classData.getSourceFileName();", "+\t\t\tSourceFileData sourceFileData = (SourceFileData)sourceFileDatas.get(sourceFileName);", "+\t\t\tif (sourceFileData == null)", "+\t\t\t{", "+\t\t\t\tsourceFileData = new SourceFileData(sourceFileName);", "+\t\t\t\tsourceFileDatas.put(sourceFileName, sourceFileData);", "+\t\t\t}", "+\t\t\tsourceFileData.addClassData(classData);", "+\t\t}", "+\t\treturn sourceFileDatas.values();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f4edb9921f63f6860a40b0b471d3983", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "ba8ca3b59e27a269cd0c7454bcce789561d85027", "commitAfterChange": "e07225a2249906b0c1fed76505d3565cbd3af0ac", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static ProjectData getGlobalProjectData()", "signatureAfterChange": "  \tpublic static ProjectData getGlobalProjectData()", "diff": ["+\t\t// Hack for Tomcat - by saving project data right now we force loading", "+\t\t// of classes involved in this process (like ObjectOutputStream)", "+\t\t// so that it won't be necessary to load them on JVM shutdown", "+\t\tif( System.getProperty(\"catalina.home\")!=null) {", "+\t\t\tsaveGlobalProjectData();", "+\t\t\t", "+\t\t\t// Additionaly force loading of other classes that might be not loaded", "+\t\t\t// becouse saved project data was empty", "+\t\t\tClassData.class.toString();", "+\t\t\tCoverageData.class.toString();", "+\t\t\tCoverageDataContainer.class.toString();", "+\t\t\tHasBeenInstrumented.class.toString();", "+\t\t\tLineData.class.toString();", "+\t\t\tPackageData.class.toString();", "+\t\t\tSourceFileData.class.toString();", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91caeb97b797ba994b8e442ff2e2ff7b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic Map withRunningServer(Closure closure) throws Exception", "signatureAfterChange": " \tpublic void withRunningServer() throws Exception", "diff": ["-", "-\tpublic Map withRunningServer(Closure closure) throws Exception {", "-\t\tfreePorts = findFreePorts();", "-\t\tnew File(dir, \"logs\").mkdirs();", "-", "-\t\tstartWebServer(freePorts);", "-\t\tMap data = new HashMap();", "+\tpublic void withRunningServer() throws Exception {", "+\t\tstartWebServer();", "+\t\tMap<String, Object> data = new HashMap<String, Object>();", "-\t\t\tdata.put(\"webappPort\", freePorts.get(\"webapp\"));", "+\t\t\tdata.put(\"webappPort\", webappPort);", "+\t\t\tClosure closure = new Closure(null) {", "+\t\t\t\tprivate static final long serialVersionUID = 1L;", "+\t\t\t\t@SuppressWarnings(\"unused\")", "+\t\t\t\tpublic void doCall(HashMap<String, Object> values) {", "+\t\t\t\t}", "+\t\t\t};", "-", "-\t\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6868aae5dc2ec69808a9ea43649b000", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "30453e39132acf00c942ed5da8c2668953b0fe6b", "commitAfterChange": "88eeebcda0bf1e55adb32224692061467a17e6e8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "signatureAfterChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "diff": ["+\t\tIterator iter;", "+", "-\t\t\t// TODO: Do we need this extra \"package.size() > 0\" check?", "-\t\t\tif (packages.size() > 0)", "+\t\t\titer = packages.iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\tIterator iter = packages.iterator();", "-\t\t\t\twhile (iter.hasNext())", "-\t\t\t\t{", "-\t\t\t\t\tPackageData subPackageData = (PackageData)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForPackage(subPackageData));", "-\t\t\t\t}", "+\t\t\t\tPackageData subPackageData = (PackageData)iter.next();", "+\t\t\t\tout.println(generateTableRowForPackage(subPackageData));", "-\t\t\t\t\tIterator iter = projectData.getClasses().iterator();", "+\t\t\t\t\titer = projectData.getClasses().iterator();", "-\t\t\t\tIterator iter = classes.iterator();", "+\t\t\t\titer = classes.iterator();"]}]}
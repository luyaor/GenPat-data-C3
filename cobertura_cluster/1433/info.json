{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94a4f617b129dcee8d6050d70ce0327a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e531355c13fd0234e6b7ef0b8baceab", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "8fa89e11a16472d1487034417d5730a6de92e300", "commitAfterChange": "6a303122a10f7fb224550410433e3c73cc07f939", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "signatureAfterChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "diff": ["+\tpublic Main(String[] args) throws MalformedPatternException {", "+\t\tHeader.print(System.out);", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--branch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setClassBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--datafile\")) {", "+\t\t\t\tbuilder.setDataFile(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--line\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setClassLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--regex\")) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(args[++i], \":\");", "+\t\t\t\tbuilder.addMinimumCoverageRates(tokenizer.nextToken(), Integer", "+\t\t\t\t\t\t.valueOf(tokenizer.nextToken()), Integer", "+\t\t\t\t\t\t.valueOf(tokenizer.nextToken()));", "+\t\t\t} else if (args[i].equals(\"--packagebranch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setPackageBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--packageline\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setPackageLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--totalbranch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setTotalBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--totalline\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setTotalLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t}", "+\t\t}", "+\t\tArguments arguments = builder.build();", "+\t\tCoverageThresholdsReport coverageThresholdsReport = (CoverageThresholdsReport) new Cobertura(", "+\t\t\t\targuments).checkThresholds().report().getByName(", "+\t\t\t\tReportName.THRESHOLDS_REPORT);", "+\t\tList<CoverageResultEntry> coverageResultEntries = coverageThresholdsReport", "+\t\t\t\t.getCoverageResultEntries();", "+\t\tint exitStatus = 0;", "+\t\tfor (CoverageResultEntry entry : coverageResultEntries) {", "+\t\t\tif (entry.isBelowExpectedCoverage()) {", "+\t\t\t\tswitch (entry.getCoverageLevel()) {", "+\t\t\t\t\tcase CLASS :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 2, 4);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PACKAGE :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 32, 64);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PROJECT :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 8, 16);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tSystem.exit(exitStatus);", "+\t}", "-", "-\tpublic Main(String[] args) throws MalformedPatternException {", "-\t\tint exitStatus = 0;", "-", "-\t\tHeader.print(System.out);", "-", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tdouble branchCoverageRate = -1.0;", "-\t\tdouble lineCoverageRate = -1.0;", "-\t\tdouble packageBranchCoverageRate = -1.0;", "-\t\tdouble packageLineCoverageRate = -1.0;", "-\t\tdouble totalBranchCoverageRate = -1.0;", "-\t\tdouble totalLineCoverageRate = -1.0;", "-", "-\t\tfor (int i = 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"--branch\")) {", "-\t\t\t\tbranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--datafile\")) {", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--line\")) {", "-\t\t\t\tlineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--regex\")) {", "-\t\t\t\tsetMinimumCoverageRate(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--packagebranch\")) {", "-\t\t\t\tpackageBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--packageline\")) {", "-\t\t\t\tpackageLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--totalbranch\")) {", "-\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--totalline\")) {", "-\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t}", "-\t\t}", "-", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null) {", "-\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t// If they didn't specify any thresholds, then use some defaults", "-\t\tif ((branchCoverageRate == -1.0) && (lineCoverageRate == -1.0)", "-\t\t\t\t&& (packageLineCoverageRate == -1.0)", "-\t\t\t\t&& (packageBranchCoverageRate == -1.0)", "-\t\t\t\t&& (totalLineCoverageRate == -1.0)", "-\t\t\t\t&& (totalBranchCoverageRate == -1.0)", "-\t\t\t\t&& (this.minimumCoverageRates.size() == 0)) {", "-\t\t\tbranchCoverageRate = 0.5;", "-\t\t\tlineCoverageRate = 0.5;", "-\t\t\tpackageBranchCoverageRate = 0.5;", "-\t\t\tpackageLineCoverageRate = 0.5;", "-\t\t\ttotalBranchCoverageRate = 0.5;", "-\t\t\ttotalLineCoverageRate = 0.5;", "-\t\t}", "-\t\t// If they specified one or more thresholds, default everything else to 0", "-\t\telse {", "-\t\t\tif (branchCoverageRate == -1.0)", "-\t\t\t\tbranchCoverageRate = 0.0;", "-\t\t\tif (lineCoverageRate == -1.0)", "-\t\t\t\tlineCoverageRate = 0.0;", "-\t\t\tif (packageLineCoverageRate == -1.0)", "-\t\t\t\tpackageLineCoverageRate = 0.0;", "-\t\t\tif (packageBranchCoverageRate == -1.0)", "-\t\t\t\tpackageBranchCoverageRate = 0.0;", "-\t\t\tif (totalLineCoverageRate == -1.0)", "-\t\t\t\ttotalLineCoverageRate = 0.0;", "-\t\t\tif (totalBranchCoverageRate == -1.0)", "-\t\t\t\ttotalBranchCoverageRate = 0.0;", "-\t\t}", "-", "-\t\tthis.minimumCoverageRate = new CoverageRate(lineCoverageRate,", "-\t\t\t\tbranchCoverageRate);", "-", "-\t\tdouble totalLines = 0;", "-\t\tdouble totalLinesCovered = 0;", "-\t\tdouble totalBranches = 0;", "-\t\tdouble totalBranchesCovered = 0;", "-", "-\t\tIterator iter = projectData.getClasses().iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tClassData classData = (ClassData) iter.next();", "-\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(classData", "-\t\t\t\t\t.getName());", "-", "-\t\t\tif (totalBranchCoverageRate > 0.0) {", "-\t\t\t\ttotalBranches += classData.getNumberOfValidBranches();", "-\t\t\t\ttotalBranchesCovered += classData.getNumberOfCoveredBranches();", "-\t\t\t}", "-", "-\t\t\tif (totalLineCoverageRate > 0.0) {", "-\t\t\t\ttotalLines += classData.getNumberOfValidLines();", "-\t\t\t\ttotalLinesCovered += classData.getNumberOfCoveredLines();", "-\t\t\t}", "-", "-\t\t\tPackageCoverage packageCoverage = getPackageCoverage(classData", "-\t\t\t\t\t.getPackageName());", "-\t\t\tif (packageBranchCoverageRate > 0.0) {", "-\t\t\t\tpackageCoverage.addBranchCount(classData", "-\t\t\t\t\t\t.getNumberOfValidBranches());", "-\t\t\t\tpackageCoverage.addBranchCoverage(classData", "-\t\t\t\t\t\t.getNumberOfCoveredBranches());", "-\t\t\t}", "-", "-\t\t\tif (packageLineCoverageRate > 0.0) {", "-\t\t\t\tpackageCoverage.addLineCount(classData.getNumberOfValidLines());", "-\t\t\t\tpackageCoverage.addLineCoverage(classData", "-\t\t\t\t\t\t.getNumberOfCoveredLines());", "-\t\t\t}", "-", "-\t\t\tlogger.debug(\"Class \" + classData.getName()", "-\t\t\t\t\t+ \", line coverage rate: \"", "-\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "-\t\t\t\t\t+ \"%, branch coverage rate: \"", "-\t\t\t\t\t+ percentage(classData.getBranchCoverageRate()) + \"%\");", "-", "-\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\t\t.getBranchCoverageRate()) {", "-\t\t\t\tSystem.err.println(classData.getName()", "-\t\t\t\t\t\t+ \" failed check. Branch coverage rate of \"", "-\t\t\t\t\t\t+ percentage(classData.getBranchCoverageRate())", "-\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t+ percentage(coverageRate.getBranchCoverageRate())", "-\t\t\t\t\t\t+ \"%\");", "-\t\t\t\texitStatus |= 2;", "-\t\t\t}", "-", "-\t\t\tif (classData.getLineCoverageRate() < coverageRate", "-\t\t\t\t\t.getLineCoverageRate()) {", "-\t\t\t\tSystem.err.println(classData.getName()", "-\t\t\t\t\t\t+ \" failed check. Line coverage rate of \"", "-\t\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "-\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t+ percentage(coverageRate.getLineCoverageRate()) + \"%\");", "-\t\t\t\texitStatus |= 4;", "-\t\t\t}", "-\t\t}", "-", "-\t\texitStatus |= checkPackageCoverageLevels(packageBranchCoverageRate,", "-\t\t\t\tpackageLineCoverageRate);", "-", "-\t\t// Check the rates for the overall project", "-\t\tif ((totalBranches > 0)", "-\t\t\t\t&& (totalBranchCoverageRate > (totalBranchesCovered / totalBranches))) {", "-\t\t\tSystem.err", "-\t\t\t\t\t.println(\"Project failed check. \"", "-\t\t\t\t\t\t\t+ \"Total branch coverage rate of \"", "-\t\t\t\t\t\t\t+ percentage(totalBranchesCovered / totalBranches)", "-\t\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t\t+ percentage(totalBranchCoverageRate) + \"%\");", "-\t\t\texitStatus |= 8;", "-\t\t}", "-", "-\t\tif ((totalLines > 0)", "-\t\t\t\t&& (totalLineCoverageRate > (totalLinesCovered / totalLines))) {", "-\t\t\tSystem.err.println(\"Project failed check. \"", "-\t\t\t\t\t+ \"Total line coverage rate of \"", "-\t\t\t\t\t+ percentage(totalLinesCovered / totalLines)", "-\t\t\t\t\t+ \"% is below \" + percentage(totalLineCoverageRate) + \"%\");", "-\t\t\texitStatus |= 16;", "-\t\t}", "-", "-\t\tSystem.exit(exitStatus);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ac2ab72af95d90383501d9bf6849a1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": " \t \tpublic static void main(String[] args) throws Exception", "diff": ["-", "-\tpublic static void main(String[] args) throws Exception", "-\t{", "-\t\tlong startTime = System.currentTimeMillis();", "-", "-\t\tLongOpt[] longOpts = new LongOpt[4];", "-\t\t// TODO: Allow for multiple destination and multiple source directories", "-\t\tlongOpts[0] = new LongOpt(\"format\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'f');", "-\t\tlongOpts[1] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'd');", "-\t\tlongOpts[2] = new LongOpt(\"destination\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'o');", "-\t\tlongOpts[3] = new LongOpt(\"source\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t's');", "-", "-\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:d:o:s:\",", "-\t\t\t\tlongOpts);", "-\t\tint c;", "-\t\twhile ((c = g.getopt()) != -1)", "-\t\t{", "-\t\t\tswitch (c)", "-\t\t\t{", "-\t\t\t\tcase 'f':", "-\t\t\t\t\tformat = g.getOptarg();", "-\t\t\t\t\tif (!format.equalsIgnoreCase(\"html\")", "-\t\t\t\t\t\t\t&& !format.equalsIgnoreCase(\"xml\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err", "-\t\t\t\t\t\t\t\t.println(\"Error: format \\\"\"", "-\t\t\t\t\t\t\t\t\t\t+ format", "-\t\t\t\t\t\t\t\t\t\t+ \"\\\" is invalid. Must be either html or xml\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tdataFile = new File(g.getOptarg());", "-\t\t\t\t\tif (!dataFile.exists())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t\t+ \" does not exist\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!dataFile.isFile())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t\t+ \" must be a regular file\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'o':", "-\t\t\t\t\tdestinationDir = new File(g.getOptarg());", "-\t\t\t\t\tif (destinationDir.exists()", "-\t\t\t\t\t\t\t&& !destinationDir.isDirectory())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: destination directory \"", "-\t\t\t\t\t\t\t\t+ destinationDir", "-\t\t\t\t\t\t\t\t+ \" already exists but is not a directory\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tdestinationDir.mkdirs();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 's':", "-\t\t\t\t\tsourceDir = new File(g.getOptarg());", "-\t\t\t\t\tif (!sourceDir.exists())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ sourceDir + \" does not exist\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!sourceDir.isDirectory())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ sourceDir + \" must be a directory\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tif (destinationDir == null)", "-\t\t{", "-\t\t\tSystem.err.println(\"Error: destination directory must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tif (sourceDir == null)", "-\t\t{", "-\t\t\tSystem.err.println(\"Error: source directory must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"format is \" + format);", "-\t\t\tlogger.debug(\"dataFile is \" + dataFile.getAbsolutePath());", "-\t\t\tlogger.debug(\"destinationDir is \"", "-\t\t\t\t\t+ destinationDir.getAbsolutePath());", "-\t\t\tlogger.debug(\"sourceDir is \" + sourceDir.getAbsolutePath());", "-\t\t}", "-", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null)", "-\t\t{", "-\t\tif (format.equalsIgnoreCase(\"html\"))", "-\t\t{", "-\t\t\tnew HTMLReport(projectData, destinationDir, sourceDir);", "-\t\telse if (format.equalsIgnoreCase(\"xml\"))", "-\t\t{", "-\t\t\tnew XMLReport(projectData, destinationDir, sourceDir);", "+\t", "+\tpublic static void main(String[] args) throws Exception {", "+\t\tlong startTime = System.currentTimeMillis();", "+", "+\t\tMain main = new Main();", "+", "+\t\tboolean hasCommandsFile = false;", "+\t\tString commandsFileName = null;", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--commandsfile\")) {", "+\t\t\t\thasCommandsFile = true;", "+\t\t\t\tcommandsFileName = args[++i];", "+\t\t\t}", "+\t\tif (hasCommandsFile) {", "+\t\t\tList arglist = new ArrayList();", "+\t\t\tBufferedReader bufferedReader = null;", "+", "+\t\t\ttry {", "+\t\t\t\tbufferedReader = new BufferedReader(new FileReader(commandsFileName));", "+\t\t\t\tString line = null;", "+", "+\t\t\t\twhile ((line = bufferedReader.readLine()) != null) {", "+\t\t\t\t\targlist.add(line);", "+\t\t\t\t}", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tLOGGER.fatal(\"Unable to read temporary commands file \" + commandsFileName + \".\", e);", "+\t\t\t} finally {", "+\t\t\t\tif (bufferedReader != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbufferedReader.close();", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// no-op", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\targs = (String[])arglist.toArray(new String[arglist.size()]);", "+\t\t}", "+", "+\t\tmain.parseArguments(args);", "+", "-\t\tSystem.out", "-\t\t\t\t.println(\"Reporting time: \" + (stopTime - startTime) + \"ms\");", "+\t\tSystem.out.println(\"Report time: \" + (stopTime - startTime) + \"ms\");"]}]}
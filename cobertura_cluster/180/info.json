{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9e1534c0e18883f2fb5be1f0d23b506", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "731f81cced070f81e586693a89aa5d90", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "8470613dce5289e48aeaaebf95d84de1414dad70", "commitAfterChange": "77a25c204e0d22c334a40e10db5134e2cb525c03", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public boolean parseImports()", "signatureAfterChange": "\r \r     public boolean parseImports()", "diff": ["-", "-    public boolean parseImports() {", "-        if ( Util.isEmpty( _sJavaSourceFileName ) ) {", "-        \tSystem.out.println( \"Javancss.parseImports().NO_FILE\" );", "-", "-            return true;", "-        }", "-        DataInputStream disSource = createInputStream", "-               ( _sJavaSourceFileName );", "-        if ( disSource == null ) {", "-        \tSystem.out.println( \"Javancss.parseImports().NO_DIS\" );", "-", "-            return true;", "-        }", "-", "-        try {", "-            _pJavaParser = new JavaParser(disSource);", "-            _pJavaParser.ImportUnit();", "-            _vImports = _pJavaParser.getImports();", "-            _aoPackage = _pJavaParser.getPackageObjects();", "-        } catch(ParseException pParseException) {", "-        \tSystem.out.println( \"Javancss.parseImports().PARSE_EXCEPTION\" );", "-            if (_sErrorMessage == null) {", "-                _sErrorMessage = \"\";", "-            }", "-            _sErrorMessage += \"ParseException in STDIN\";", "-            if (_pJavaParser != null) {", "-                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";", "-            }", "-            _sErrorMessage += pParseException.getMessage() + \"\\n\";", "-            _thrwError = pParseException;", "-", "-            return true;", "-        } catch(TokenMgrError pTokenMgrError) {", "-        \tSystem.out.println( \"Javancss.parseImports().TOKEN_ERROR\" );", "-            if (_sErrorMessage == null) {", "-                _sErrorMessage = \"\";", "-            }", "-            _sErrorMessage += \"TokenMgrError in STDIN\\n\";", "-            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";", "-            _thrwError = pTokenMgrError;", "-", "-            return true;", "-        }", "-", "-        return false;", "-    }", "+\r", "+    public boolean parseImports() {\r", "+        if ( _sJavaSourceFile == null ) {\r", "+        \tUtil.debug( \"Javancss.parseImports().NO_FILE\" );\r", "+\r", "+            return true;\r", "+        }\r", "+        Reader reader = createSourceReader( _sJavaSourceFile );\r", "+        if ( reader == null ) {\r", "+        \tUtil.debug( \"Javancss.parseImports().NO_DIS\" );\r", "+\r", "+            return true;\r", "+        }\r", "+\r", "+        try {\r", "+            Util.debug( \"Javancss.parseImports().START_PARSING\" );\r", "+            _pJavaParser = new JavaParser(reader);\r", "+            _pJavaParser.ImportUnit();\r", "+            _vImports = _pJavaParser.getImports();\r", "+            _aoPackage = _pJavaParser.getPackageObjects();\r", "+            Util.debug( \"Javancss.parseImports().END_PARSING\" );\r", "+        } catch(ParseException pParseException) {\r", "+        \tUtil.debug( \"Javancss.parseImports().PARSE_EXCEPTION\" );\r", "+            if (_sErrorMessage == null) {\r", "+                _sErrorMessage = \"\";\r", "+            }\r", "+            _sErrorMessage += \"ParseException in STDIN\";\r", "+            if (_pJavaParser != null) {\r", "+                _sErrorMessage += \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";\r", "+            }\r", "+            _sErrorMessage += pParseException.getMessage() + \"\\n\";\r", "+            _thrwError = pParseException;\r", "+\r", "+            return true;\r", "+        } catch(TokenMgrError pTokenMgrError) {\r", "+        \tUtil.debug( \"Javancss.parseImports().TOKEN_ERROR\" );\r", "+            if (_sErrorMessage == null) {\r", "+                _sErrorMessage = \"\";\r", "+            }\r", "+            _sErrorMessage += \"TokenMgrError in STDIN\\n\";\r", "+            _sErrorMessage += pTokenMgrError.getMessage() + \"\\n\";\r", "+            _thrwError = pTokenMgrError;\r", "+\r", "+            return true;\r", "+        }\r", "+\r", "+        return false;\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f10ea731fb82438a642ae6092b45f37", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "e054e5529ea96e3c1dc0e7b5ee9096c11f0da657", "commitAfterChange": "b1111414c40d731ce6e53db10194c0b9dfb696b5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static synchronized void applyTouchesOnProjectData( \t\t\tProjectData projectData)", "signatureAfterChange": "  \tpublic static synchronized void applyTouchesOnProjectData( \t\t\tProjectData projectData)", "diff": ["-\t\tSystem.out", "-\t\t\t\t.println(\"=================== START OF RAPORT ======================== \");", "+\t\tlogger.fine(\"=================== START OF RAPORT ======================== \");", "-\t\t\tSystem.out.println(\"Report: \"+c.getName());", "+\t\t\tlogger.fine(\"Report: \"+c.getName());", "-\t\tSystem.out", "-\t\t\t\t.println(\"===================  END OF RAPORT  ======================== \");", "-", "+\t\tlogger.fine(\"===================  END OF RAPORT  ======================== \");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9ef1a139f2052a932e72d3d61af23d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "661115e1f1f5a028a733809b53164c2440c1ef0c", "commitAfterChange": "fc5520a67e784e8932ab102fb13b34b70d243d32", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static ProjectData getGlobalProjectData()", "signatureAfterChange": "  \tpublic static ProjectData getGlobalProjectData()", "diff": ["-\t\tif (saveTimer == null)", "-\t\t{", "-\t\t\tsaveTimer = new SaveTimer();", "-\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(saveTimer));", "-\t\t\t//Timer timer = new Timer(true);", "-\t\t\t//timer.schedule(saveTimer, 100);", "-\t\t}", "-", "-\t\t\tLOGGER.debug(\"Loading global project data from \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "+\t\t\t//System.out.println(\"Cobertura: Loading global project data from \" + dataFile.getAbsolutePath());", "-\t\tif (globalProjectData != null)", "-\t\t\treturn globalProjectData;", "-\t\t// We could not read from the serialized file, so create a new object.", "-\t\tLOGGER", "-\t\t\t\t.info(\"Coverage data file \"", "-\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "-\t\tglobalProjectData = new ProjectData();", "+\t\tif (globalProjectData == null)", "+\t\t{", "+\t\t\t// We could not read from the serialized file, so create a new object.", "+\t\t\tSystem.out.println(\"Cobertura: Coverage data file \"", "+\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "+\t\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "+\t\t\tglobalProjectData = new ProjectData();", "+", "+\t\t\t// Add a hook to save the data when the JVM exits", "+\t\t\tsaveTimer = new SaveTimer();", "+\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(saveTimer));", "+", "+\t\t\t// Possibly also save the coverage data every x seconds?", "+\t\t\t//Timer timer = new Timer(true);", "+\t\t\t//timer.schedule(saveTimer, 100);", "+\t\t}"]}]}
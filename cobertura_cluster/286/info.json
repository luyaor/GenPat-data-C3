{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62333038246d4d9657c83df023e4f19e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ab3731cdcadd250cfac8d7271a8c98", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \r   final public void UnmodifiedClassDeclaration() throws ParseException", "signatureAfterChange": "    final public void UnmodifiedClassDeclaration() throws ParseException", "diff": ["-\r", "-  final public void UnmodifiedClassDeclaration() throws ParseException {\r", "-        String sOldClass = _sClass;\r", "-        int oldNcss = _ncss;\r", "-        int oldFunctions = _functions;\r", "-        int oldClasses = _classes;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                int oldJavadocs = _javadocs;\r", "-                if (!_sClass.equals(\"\")) {\r", "-                        _sClass += \".\";\r", "-                }\r", "-                _sClass += getToken(2).image;\r", "-                _classLevel ++;\r", "-    Modifiers();\r", "-    jj_consume_token(CLASS);\r", "-    Identifier();\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[19] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case EXTENDS:\r", "-      jj_consume_token(EXTENDS);\r", "-      Name();\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case LT:\r", "-        TypeArguments();\r", "-        break;\r", "-      default:\r", "-        jj_la1[20] = jj_gen;\r", "-        ;\r", "-      }\r", "-      label_11:\r", "-      while (true) {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case DOT:\r", "-          ;\r", "-          break;\r", "-        default:\r", "-          jj_la1[21] = jj_gen;\r", "-          break label_11;\r", "-        }\r", "-        jj_consume_token(DOT);\r", "-        Name();\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case LT:\r", "-          TypeArguments();\r", "-          break;\r", "-        default:\r", "-          jj_la1[22] = jj_gen;\r", "-          ;\r", "-        }\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[23] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case IMPLEMENTS:\r", "-      jj_consume_token(IMPLEMENTS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[24] = jj_gen;\r", "-      ;\r", "-    }\r", "-    ClassBody();\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-                _classLevel--;\r", "-                if (_classLevel == 0) {\r", "-                        //_topLevelClasses++;\r", "-                        ObjectMetric metric = new ObjectMetric();\r", "-                        metric.name = _sPackage + _sClass;\r", "-                        metric.ncss = _ncss - oldNcss;\r", "-                        metric.functions = _functions - oldFunctions;\r", "-                        metric.classes = _classes - oldClasses;\r", "-                        Token lastToken = getToken( 0 );\r", "-                        //metric.add( new Integer( lastToken.endLine ) );\r", "-                        //metric.add( new Integer( lastToken.endColumn ) );\r", "-                        //metric.add( new Integer( _javadocs ) );\r", "-                        _vClasses.add( metric );\r", "-                        _pPackageMetric.functions += _functions - oldFunctions;\r", "-                        _pPackageMetric.classes++;\r", "-\r", "-                        // added by SMS\r", "-                        _pPackageMetric.javadocs += _javadocs;\r", "-                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;\r", "-                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;\r", "-                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                        //\r", "-                }\r", "-                        //Added by REYNAUD Sebastien (LOGICA)\r", "-                        else\r", "-                        {\r", "-                        ObjectMetric metric1 = new ObjectMetric();\r", "-                  metric1.name = _sPackage + _sClass ;\r", "-                        metric1.ncss = _ncss - oldNcss;\r", "-                  metric1.functions = _functions - oldFunctions;\r", "-                  metric1.classes = _classes - oldClasses;\r", "-                  Token lastToken = getToken( 0 );\r", "-                  _vClasses.add( metric1 );\r", "-                  _pPackageMetric.functions += _functions - oldFunctions;\r", "-                  _pPackageMetric.classes++;\r", "-                        metric1.javadocs = _javadocs - oldJavadocs;\r", "-                        }\r", "-                        //\r", "-\r", "-                _functions = oldFunctions;\r", "-                _classes = oldClasses + 1;\r", "-                _sClass = sOldClass;\r", "-  }\r", "+", "+  final public void UnmodifiedClassDeclaration() throws ParseException {", "+        String sOldClass = _sClass;", "+        int oldNcss = _ncss;", "+        int oldFunctions = _functions;", "+        int oldClasses = _classes;", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        ObjectMetric metric = new ObjectMetric();", "+        if (_classLevel == 0) {", "+                metric.firstLine = JavaParserTokenManager.nbligne;", "+        }", "+                if (!_sClass.equals(\"\")) {", "+                        _sClass += \".\";", "+                }", "+                _sClass += getToken(2).image;", "+                _classLevel ++;", "+    Modifiers();", "+    jj_consume_token(CLASS);", "+    Identifier();", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[19] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case EXTENDS:", "+      jj_consume_token(EXTENDS);", "+      Name();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LT:", "+        TypeArguments();", "+        break;", "+      default:", "+        jj_la1[20] = jj_gen;", "+        ;", "+      }", "+      label_11:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case DOT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[21] = jj_gen;", "+          break label_11;", "+        }", "+        jj_consume_token(DOT);", "+        Name();", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LT:", "+          TypeArguments();", "+          break;", "+        default:", "+          jj_la1[22] = jj_gen;", "+          ;", "+        }", "+      }", "+      break;", "+    default:", "+      jj_la1[23] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case IMPLEMENTS:", "+      jj_consume_token(IMPLEMENTS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[24] = jj_gen;", "+      ;", "+    }", "+    ClassBody();", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+                _classLevel--;", "+                if (_classLevel == 0) {", "+                        //_topLevelClasses++;", "+", "+                        //ObjectMetric metric = new ObjectMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                        metric.name = _sPackage + _sClass;", "+                        metric.ncss = _ncss - oldNcss;", "+                        metric.functions = _functions - oldFunctions;", "+                        metric.classes = _classes - oldClasses;", "+                        Token lastToken = getToken( 0 );", "+                        //metric.add( new Integer( lastToken.endLine ) );", "+                        //metric.add( new Integer( lastToken.endColumn ) );", "+                        //metric.add( new Integer( _javadocs ) );", "+                        _vClasses.add( metric );", "+                        _pPackageMetric.functions += _functions - oldFunctions;", "+                        _pPackageMetric.classes++;", "+", "+                        // added by SMS", "+                        _pPackageMetric.javadocs += _javadocs;", "+                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;", "+                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;", "+                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;", "+                        //", "+                }", "+", "+                _functions = oldFunctions;", "+                _classes = oldClasses + 1;", "+                _sClass = sOldClass;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a39ea306e3be707ed3274293c83095e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \r   final public void UnmodifiedClassDeclaration() throws ParseException", "signatureAfterChange": "    final public void UnmodifiedClassDeclaration() throws ParseException", "diff": ["-\r", "-  final public void UnmodifiedClassDeclaration() throws ParseException {\r", "-        String sOldClass = _sClass;\r", "-        int oldNcss = _ncss;\r", "-        int oldFunctions = _functions;\r", "-        int oldClasses = _classes;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                int oldJavadocs = _javadocs;\r", "-                if (!_sClass.equals(\"\")) {\r", "-                        _sClass += \".\";\r", "-                }\r", "-                _sClass += getToken(2).image;\r", "-                _classLevel ++;\r", "-    Modifiers();\r", "-    jj_consume_token(CLASS);\r", "-    Identifier();\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[19] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case EXTENDS:\r", "-      jj_consume_token(EXTENDS);\r", "-      Name();\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case LT:\r", "-        TypeArguments();\r", "-        break;\r", "-      default:\r", "-        jj_la1[20] = jj_gen;\r", "-        ;\r", "-      }\r", "-      label_11:\r", "-      while (true) {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case DOT:\r", "-          ;\r", "-          break;\r", "-        default:\r", "-          jj_la1[21] = jj_gen;\r", "-          break label_11;\r", "-        }\r", "-        jj_consume_token(DOT);\r", "-        Name();\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case LT:\r", "-          TypeArguments();\r", "-          break;\r", "-        default:\r", "-          jj_la1[22] = jj_gen;\r", "-          ;\r", "-        }\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[23] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case IMPLEMENTS:\r", "-      jj_consume_token(IMPLEMENTS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[24] = jj_gen;\r", "-      ;\r", "-    }\r", "-    ClassBody();\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-                _classLevel--;\r", "-                if (_classLevel == 0) {\r", "-                        //_topLevelClasses++;\r", "-                        ObjectMetric metric = new ObjectMetric();\r", "-                        metric.name = _sPackage + _sClass;\r", "-                        metric.ncss = _ncss - oldNcss;\r", "-                        metric.functions = _functions - oldFunctions;\r", "-                        metric.classes = _classes - oldClasses;\r", "-                        Token lastToken = getToken( 0 );\r", "-                        //metric.add( new Integer( lastToken.endLine ) );\r", "-                        //metric.add( new Integer( lastToken.endColumn ) );\r", "-                        //metric.add( new Integer( _javadocs ) );\r", "-                        _vClasses.add( metric );\r", "-                        _pPackageMetric.functions += _functions - oldFunctions;\r", "-                        _pPackageMetric.classes++;\r", "-\r", "-                        // added by SMS\r", "-                        _pPackageMetric.javadocs += _javadocs;\r", "-                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;\r", "-                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;\r", "-                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                        //\r", "-                }\r", "-                        //Added by REYNAUD Sebastien (LOGICA)\r", "-                        else\r", "-                        {\r", "-                        ObjectMetric metric1 = new ObjectMetric();\r", "-                  metric1.name = _sPackage + _sClass ;\r", "-                        metric1.ncss = _ncss - oldNcss;\r", "-                  metric1.functions = _functions - oldFunctions;\r", "-                  metric1.classes = _classes - oldClasses;\r", "-                  Token lastToken = getToken( 0 );\r", "-                  _vClasses.add( metric1 );\r", "-                  _pPackageMetric.functions += _functions - oldFunctions;\r", "-                  _pPackageMetric.classes++;\r", "-                        metric1.javadocs = _javadocs - oldJavadocs;\r", "-                        }\r", "-                        //\r", "-\r", "-                _functions = oldFunctions;\r", "-                _classes = oldClasses + 1;\r", "-                _sClass = sOldClass;\r", "-  }\r", "+", "+  final public void UnmodifiedClassDeclaration() throws ParseException {", "+        String sOldClass = _sClass;", "+        int oldNcss = _ncss;", "+        int oldFunctions = _functions;", "+        int oldClasses = _classes;", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        ObjectMetric metric = new ObjectMetric();", "+        if (_classLevel == 0) {", "+                metric.firstLine = JavaParserTokenManager.nbligne;", "+        }", "+                if (!_sClass.equals(\"\")) {", "+                        _sClass += \".\";", "+                }", "+                _sClass += getToken(2).image;", "+                _classLevel ++;", "+    Modifiers();", "+    jj_consume_token(CLASS);", "+    Identifier();", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[19] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case EXTENDS:", "+      jj_consume_token(EXTENDS);", "+      Name();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LT:", "+        TypeArguments();", "+        break;", "+      default:", "+        jj_la1[20] = jj_gen;", "+        ;", "+      }", "+      label_11:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case DOT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[21] = jj_gen;", "+          break label_11;", "+        }", "+        jj_consume_token(DOT);", "+        Name();", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LT:", "+          TypeArguments();", "+          break;", "+        default:", "+          jj_la1[22] = jj_gen;", "+          ;", "+        }", "+      }", "+      break;", "+    default:", "+      jj_la1[23] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case IMPLEMENTS:", "+      jj_consume_token(IMPLEMENTS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[24] = jj_gen;", "+      ;", "+    }", "+    ClassBody();", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+                _classLevel--;", "+                if (_classLevel == 0) {", "+                        //_topLevelClasses++;", "+", "+                        //ObjectMetric metric = new ObjectMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                        metric.name = _sPackage + _sClass;", "+                        metric.ncss = _ncss - oldNcss;", "+                        metric.functions = _functions - oldFunctions;", "+                        metric.classes = _classes - oldClasses;", "+                        Token lastToken = getToken( 0 );", "+                        //metric.add( new Integer( lastToken.endLine ) );", "+                        //metric.add( new Integer( lastToken.endColumn ) );", "+                        //metric.add( new Integer( _javadocs ) );", "+                        _vClasses.add( metric );", "+                        _pPackageMetric.functions += _functions - oldFunctions;", "+                        _pPackageMetric.classes++;", "+", "+                        // added by SMS", "+                        _pPackageMetric.javadocs += _javadocs;", "+                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;", "+                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;", "+                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;", "+                        //", "+                }", "+", "+                _functions = oldFunctions;", "+                _classes = oldClasses + 1;", "+                _sClass = sOldClass;", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0a86e4f8c083514c9fe73d145d40461", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2d161dab677bfa9b7b9010ac3d0d403", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 669, "methodNumberAfterChange": 674, "signatureBeforeChange": "\r   public ParseException generateParseException()", "signatureAfterChange": "   public ParseException generateParseException()", "diff": ["-  /** Generate ParseException. */\r", "-  public ParseException generateParseException() {\r", "-    jj_expentries.clear();\r", "-    boolean[] la1tokens = new boolean[123];\r", "-    if (jj_kind >= 0) {\r", "-      la1tokens[jj_kind] = true;\r", "-      jj_kind = -1;\r", "-    }\r", "-    for (int i = 0; i < 202; i++) {\r", "-      if (jj_la1[i] == jj_gen) {\r", "-        for (int j = 0; j < 32; j++) {\r", "-          if ((jj_la1_0[i] & (1<<j)) != 0) {\r", "-            la1tokens[j] = true;\r", "-          }\r", "-          if ((jj_la1_1[i] & (1<<j)) != 0) {\r", "-            la1tokens[32+j] = true;\r", "-          }\r", "-          if ((jj_la1_2[i] & (1<<j)) != 0) {\r", "-            la1tokens[64+j] = true;\r", "-          }\r", "-          if ((jj_la1_3[i] & (1<<j)) != 0) {\r", "-            la1tokens[96+j] = true;\r", "-          }\r", "-        }\r", "-      }\r", "-    }\r", "-    for (int i = 0; i < 123; i++) {\r", "-      if (la1tokens[i]) {\r", "-        jj_expentry = new int[1];\r", "-        jj_expentry[0] = i;\r", "-        jj_expentries.add(jj_expentry);\r", "-      }\r", "-    }\r", "-    jj_endpos = 0;\r", "-    jj_rescan_token();\r", "-    jj_add_error_token(0, 0);\r", "-    int[][] exptokseq = new int[jj_expentries.size()][];\r", "-    for (int i = 0; i < jj_expentries.size(); i++) {\r", "-      exptokseq[i] = (int[])jj_expentries.get(i);\r", "-    }\r", "-    return new ParseException(token, exptokseq, tokenImage);\r", "-  }\r", "+  /** Generate ParseException. */", "+  public ParseException generateParseException() {", "+    jj_expentries.clear();", "+    boolean[] la1tokens = new boolean[124];", "+    if (jj_kind >= 0) {", "+      la1tokens[jj_kind] = true;", "+      jj_kind = -1;", "+    }", "+    for (int i = 0; i < 208; i++) {", "+      if (jj_la1[i] == jj_gen) {", "+        for (int j = 0; j < 32; j++) {", "+          if ((jj_la1_0[i] & (1<<j)) != 0) {", "+            la1tokens[j] = true;", "+          }", "+          if ((jj_la1_1[i] & (1<<j)) != 0) {", "+            la1tokens[32+j] = true;", "+          }", "+          if ((jj_la1_2[i] & (1<<j)) != 0) {", "+            la1tokens[64+j] = true;", "+          }", "+          if ((jj_la1_3[i] & (1<<j)) != 0) {", "+            la1tokens[96+j] = true;", "+          }", "+        }", "+      }", "+    }", "+    for (int i = 0; i < 124; i++) {", "+      if (la1tokens[i]) {", "+        jj_expentry = new int[1];", "+        jj_expentry[0] = i;", "+        jj_expentries.add(jj_expentry);", "+      }", "+    }", "+    jj_endpos = 0;", "+    jj_rescan_token();", "+    jj_add_error_token(0, 0);", "+    int[][] exptokseq = new int[jj_expentries.size()][];", "+    for (int i = 0; i < jj_expentries.size(); i++) {", "+      exptokseq[i] = (int[])jj_expentries.get(i);", "+    }", "+    return new ParseException(token, exptokseq, tokenImage);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2453fdd8d5855c3b1c601d3bcebbcdf", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "48f95094d36dfc0a50d7cb3328f1fa90adefb8bb", "commitAfterChange": "f9e2e0b895d2f39d8af57ae695af8dfce323a3f2", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 99, "signatureBeforeChange": "\r \r   final public void StatementExpression() throws ParseException", "signatureAfterChange": "\r \r   final public void StatementExpression() throws ParseException", "diff": ["-          jj_la1[131] = jj_gen;\r", "+          jj_la1[142] = jj_gen;\r", "-        jj_la1[132] = jj_gen;\r", "+        jj_la1[143] = jj_gen;\r", "-      jj_la1[133] = jj_gen;\r", "+      jj_la1[144] = jj_gen;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5664d823dd68906bd18525c0de5122e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 669, "methodNumberAfterChange": 674, "signatureBeforeChange": "\r   public ParseException generateParseException()", "signatureAfterChange": "   public ParseException generateParseException()", "diff": ["-  /** Generate ParseException. */\r", "-  public ParseException generateParseException() {\r", "-    jj_expentries.clear();\r", "-    boolean[] la1tokens = new boolean[123];\r", "-    if (jj_kind >= 0) {\r", "-      la1tokens[jj_kind] = true;\r", "-      jj_kind = -1;\r", "-    }\r", "-    for (int i = 0; i < 202; i++) {\r", "-      if (jj_la1[i] == jj_gen) {\r", "-        for (int j = 0; j < 32; j++) {\r", "-          if ((jj_la1_0[i] & (1<<j)) != 0) {\r", "-            la1tokens[j] = true;\r", "-          }\r", "-          if ((jj_la1_1[i] & (1<<j)) != 0) {\r", "-            la1tokens[32+j] = true;\r", "-          }\r", "-          if ((jj_la1_2[i] & (1<<j)) != 0) {\r", "-            la1tokens[64+j] = true;\r", "-          }\r", "-          if ((jj_la1_3[i] & (1<<j)) != 0) {\r", "-            la1tokens[96+j] = true;\r", "-          }\r", "-        }\r", "-      }\r", "-    }\r", "-    for (int i = 0; i < 123; i++) {\r", "-      if (la1tokens[i]) {\r", "-        jj_expentry = new int[1];\r", "-        jj_expentry[0] = i;\r", "-        jj_expentries.add(jj_expentry);\r", "-      }\r", "-    }\r", "-    jj_endpos = 0;\r", "-    jj_rescan_token();\r", "-    jj_add_error_token(0, 0);\r", "-    int[][] exptokseq = new int[jj_expentries.size()][];\r", "-    for (int i = 0; i < jj_expentries.size(); i++) {\r", "-      exptokseq[i] = (int[])jj_expentries.get(i);\r", "-    }\r", "-    return new ParseException(token, exptokseq, tokenImage);\r", "-  }\r", "+  /** Generate ParseException. */", "+  public ParseException generateParseException() {", "+    jj_expentries.clear();", "+    boolean[] la1tokens = new boolean[124];", "+    if (jj_kind >= 0) {", "+      la1tokens[jj_kind] = true;", "+      jj_kind = -1;", "+    }", "+    for (int i = 0; i < 208; i++) {", "+      if (jj_la1[i] == jj_gen) {", "+        for (int j = 0; j < 32; j++) {", "+          if ((jj_la1_0[i] & (1<<j)) != 0) {", "+            la1tokens[j] = true;", "+          }", "+          if ((jj_la1_1[i] & (1<<j)) != 0) {", "+            la1tokens[32+j] = true;", "+          }", "+          if ((jj_la1_2[i] & (1<<j)) != 0) {", "+            la1tokens[64+j] = true;", "+          }", "+          if ((jj_la1_3[i] & (1<<j)) != 0) {", "+            la1tokens[96+j] = true;", "+          }", "+        }", "+      }", "+    }", "+    for (int i = 0; i < 124; i++) {", "+      if (la1tokens[i]) {", "+        jj_expentry = new int[1];", "+        jj_expentry[0] = i;", "+        jj_expentries.add(jj_expentry);", "+      }", "+    }", "+    jj_endpos = 0;", "+    jj_rescan_token();", "+    jj_add_error_token(0, 0);", "+    int[][] exptokseq = new int[jj_expentries.size()][];", "+    for (int i = 0; i < jj_expentries.size(); i++) {", "+      exptokseq[i] = (int[])jj_expentries.get(i);", "+    }", "+    return new ParseException(token, exptokseq, tokenImage);", "+  }"]}]}
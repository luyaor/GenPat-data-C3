{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8507c700d4b9b184c8799d138e08dc86", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8adcc5d92e02b7a0fbd9a3dd44037e9c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "55571e8b292791cc80dd02e2bed0dfd9f206376b", "commitAfterChange": "b593b3e400cea2328d827b3a670dd0bf6cc7fee1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static void saveGlobalProjectData()", "signatureAfterChange": "  \tpublic static void saveGlobalProjectData()", "diff": ["+\t\t// Get a file lock", "-\t\tFileLocker lock = new FileLocker(dataFile);", "-\t\tif (lock.lock())", "+\t\tFileLocker fileLocker = new FileLocker(dataFile);", "+", "+\t\t// Read the old data, merge our current data into it, then", "+\t\t// write a new ser file.", "+\t\tif (fileLocker.lock())", "-\t\tlock.release();", "+", "+\t\t// Release the file lock", "+\t\tfileLocker.release();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2bf515926217d49172419bcfcfe8e9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/MethodInstrumenter.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "signatureAfterChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "diff": ["-\t\tif ((ignoreRegex != null) && (pm.matches(owner, ignoreRegex)))", "-\t\t\tclassData.removeLine(currentLine);", "+\t\t// If any of the ignore patterns match this line", "+\t\t// then remove it from our data", "+\t\tIterator iter = ignoreRegexs.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tPattern ignoreRegex = (Pattern)iter.next();", "+\t\t\tif ((ignoreRegexs != null) && (pm.matches(owner, ignoreRegex)))", "+\t\t\t{", "+\t\t\t\tclassData.removeLine(currentLine);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67dac4a24d7ce3847120ccd03fb6d252", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dadd49d99cbbf4cc0ab4915996b4dfe", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/XmlFormatter.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public String printObjectNcss()", "signatureAfterChange": "      public String printObjectNcss()", "diff": ["-        Vector vObjectMetrics = _javancss.getObjectMetrics();", "+        List vObjectMetrics = _javancss.getObjectMetrics();", "-        for( Enumeration eClasses = vObjectMetrics.elements()", "-             ; eClasses.hasMoreElements()", "-             ; )", "+        for( Iterator eClasses = vObjectMetrics.iterator(); eClasses.hasNext(); )", "-            Vector vClassMetrics = (Vector)eClasses.nextElement();", "-            String sClass = (String)vClassMetrics.elementAt(OBJ_NAME);", "-            int objectNcss = ((Integer)vClassMetrics.elementAt(OBJ_NCSS)).intValue();", "-            int functions  = ((Integer)vClassMetrics.elementAt(OBJ_FCTS)).intValue();", "-            int classes    = ((Integer)vClassMetrics.elementAt(OBJ_CLSSS)).intValue();", "-            int jvdcs      = ((Integer)vClassMetrics.elementAt(OBJ_JVDCS)).intValue();", "+            List vClassMetrics = (List)eClasses.next();", "+            String sClass = (String)vClassMetrics.get(OBJ_NAME);", "+            int objectNcss = ((Integer)vClassMetrics.get(OBJ_NCSS)).intValue();", "+            int functions  = ((Integer)vClassMetrics.get(OBJ_FCTS)).intValue();", "+            int classes    = ((Integer)vClassMetrics.get(OBJ_CLSSS)).intValue();", "+            int jvdcs      = ((Integer)vClassMetrics.get(OBJ_JVDCS)).intValue();", "-            int jvdcsl     = ((Integer)vClassMetrics.elementAt(OBJ_JVDC_LINES)).intValue();", "-            int singlel           = ((Integer)vClassMetrics.elementAt(OBJ_SINGLE_LINES)).intValue();", "-            int multil     = ((Integer)vClassMetrics.elementAt(OBJ_MULTI_LINES)).intValue();", "+            //int jvdcsl     = ((Integer)vClassMetrics.elementAt(OBJ_JVDC_LINES)).intValue();", "+            //int singlel           = ((Integer)vClassMetrics.elementAt(OBJ_SINGLE_LINES)).intValue();", "+            //int multil     = ((Integer)vClassMetrics.elementAt(OBJ_MULTI_LINES)).intValue();", "-                   //                \"      <javadocs_lines>\" + jvdcsl + \"</javadocs_lines>\\n\" +", "-                   //                \"      <single_comment_lines>\" + singlel + \"</single_comment_lines>\\n\" + ", "-                   //                \"      <implementation_comment_lines>\" + multil + \"</implementation_comment_lines>\\n\" +", "+                //\"      <javadocs_lines>\" + jvdcsl + \"</javadocs_lines>\\n\" +", "+                //\"      <single_comment_lines>\" + singlel + \"</single_comment_lines>\\n\" + ", "+                //\"      <implementation_comment_lines>\" + multil + \"</implementation_comment_lines>\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4df1169eccf60f498e47be206f829fe", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/XmlFormatter.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public String printFunctionNcss()", "signatureAfterChange": "      public String printFunctionNcss()", "diff": ["-        Vector vFunctionMetrics = _javancss.getFunctionMetrics();", "+        List vFunctionMetrics = _javancss.getFunctionMetrics();", "-        for( Enumeration eFunctions = vFunctionMetrics.elements()", "-             ; eFunctions.hasMoreElements()", "-             ; )", "+        for( Iterator eFunctions = vFunctionMetrics.iterator(); eFunctions.hasNext(); )", "-            Vector vSingleFunctionMetrics = (Vector)eFunctions.nextElement();", "+            List vSingleFunctionMetrics = (List)eFunctions.next();", "-            sFunction = (String)vSingleFunctionMetrics.elementAt(FCT_NAME);", "-            int functionNcss = ((Integer)vSingleFunctionMetrics.elementAt(FCT_NCSS)).intValue();", "-            int functionCCN  = ((Integer)vSingleFunctionMetrics.elementAt(FCT_CCN )).intValue();", "-            int functionJVDC = ((Integer)vSingleFunctionMetrics.elementAt(FCT_JVDC)).intValue();", "+            sFunction = (String)vSingleFunctionMetrics.get(FCT_NAME);", "+            int functionNcss = ((Integer)vSingleFunctionMetrics.get(FCT_NCSS)).intValue();", "+            int functionCCN  = ((Integer)vSingleFunctionMetrics.get(FCT_CCN )).intValue();", "+            int functionJVDC = ((Integer)vSingleFunctionMetrics.get(FCT_JVDC)).intValue();", "-                        // added by SMS", "-                        int functionJVDCL        = ((Integer)vSingleFunctionMetrics.elementAt(FCT_JVDC_LINES)).intValue();", "-                        int functionSL                = ((Integer)vSingleFunctionMetrics.elementAt(FCT_SINGLE_LINES)).intValue();", "-                        int functionML                = ((Integer)vSingleFunctionMetrics.elementAt(FCT_MULTI_LINES)).intValue();", "-                        //", "+            // added by SMS", "+            //int functionJVDCL        = ((Integer)vSingleFunctionMetrics.elementAt(FCT_JVDC_LINES)).intValue();", "+            //int functionSL                = ((Integer)vSingleFunctionMetrics.elementAt(FCT_SINGLE_LINES)).intValue();", "+            //int functionML                = ((Integer)vSingleFunctionMetrics.elementAt(FCT_MULTI_LINES)).intValue();", "+            //", "-                           //                           \"      <javadocs_lines>\" + functionJVDCL + \"</javadocs_lines>\\n\" +", "-                           //                           \"      <single_comment_lines>\" + functionSL + \"</single_comment_lines>\\n\" + ", "-                           //                           \"      <implementation_comment_lines>\" + functionML + \"</implementation_comment_lines>\\n\" +", "+                           //\"      <javadocs_lines>\" + functionJVDCL + \"</javadocs_lines>\\n\" +", "+                           //\"      <single_comment_lines>\" + functionSL + \"</single_comment_lines>\\n\" + ", "+                           //\"      <implementation_comment_lines>\" + functionML + \"</implementation_comment_lines>\\n\" +"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d9e92139d32af58f5859e2a4ad29b20", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e83962740783a39df52fd1da635302", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/PackageDataTest.java", "commitBeforeChange": "390c1e710f4f0726f16380595fad91f1ff044c3b", "commitAfterChange": "ec1fd1d424f2f4413436786d9da0ddb5f02e1d9d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void testAddClass()", "signatureAfterChange": "  \tpublic void testAddClass()", "diff": ["-\t\tassertEquals(0, packageData.getNumberOfClasses());", "+\t\tassertEquals(0, packageData.getNumberOfChildren());", "-\t\tclassData = new ClassData(\"HelloWorld\");", "+\t\tclassData = new ClassData(\"com.example.HelloWorld\");", "-\t\tassertEquals(1, packageData.getNumberOfClasses());", "+\t\tassertEquals(1, packageData.getNumberOfChildren());", "+\t\tassertTrue(packageData.contains(classData.getBaseName()));", "-\t\tclassData = new ClassData(\"HelloWorldHelper\");", "+\t\tclassData = new ClassData(\"com.example.HelloWorldHelper\");", "-\t\tassertEquals(2, packageData.getNumberOfClasses());", "+\t\tassertEquals(2, packageData.getNumberOfChildren());", "+\t\tassertTrue(packageData.contains(classData.getBaseName()));", "-\t\tclassData = new ClassData(\"HelloWorld\");", "+\t\tclassData = new ClassData(\"com.example.HelloWorld\");", "-\t\tassertEquals(2, packageData.getNumberOfClasses());", "+\t\tassertEquals(2, packageData.getNumberOfChildren());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2df27f5923d05da38319c0a3d6edaedc", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "0927e35878dfa5c8dc9f02c7497ff33f3c3f9ce0", "commitAfterChange": "e731dc6b51a72a624f052cb8ade3084274ce818a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic XMLReport(ProjectData projectData, File destinationDir, \t\t\tFile sourceDirectory) throws IOException", "signatureAfterChange": "  \tpublic XMLReport(ProjectData projectData, File destinationDir, \t\t\tFile sourceDirectory) throws IOException", "diff": ["-\t\t\t\t\t+ projectData.getBranchCoverageRate() + \"\\\" \"", "+\t\t\t\t\t+ projectData.getBranchCoverageRate() + \"\\\" version=\\\"\"", "+\t\t\t\t\t+ Header.version() + \"\\\" timestamp=\\\"\"", "+\t\t\t\t\t+ new Date().getTime() + \"\\\" \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306e4b18395a930bbe3bd99b58cfbebb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/AbstractCoberturaTestCase.java", "commitBeforeChange": "e8e6c7fc9eed31b604be3baa9b6273218a1df91f", "commitAfterChange": "0b36ddc5d7cb845ca21063fc49d36a23d15fe49f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic Node createAndExecuteMainMethod(String packageName, String fileName, \t\t\tString fileContent, String mainMethod, String format) \t\t\tthrows Exception", "signatureAfterChange": "  \tpublic Node createAndExecuteMainMethod(String packageName, String fileName, \t\t\tString fileContent, String mainMethod, String format) \t\t\tthrows Exception", "diff": ["-\t\tFileUtils.write(new File(srcDir, fileName + \".java\"), fileContent);", "+\t\tFileUtils.write(new File(srcDir, packageName + \"/\" + fileName + \".java\"), fileContent);", "+        reportTask.setSrcDir(srcDir.getAbsolutePath());", "+        reportTask.setSrcDir(srcDir.getAbsolutePath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "337d95b73ab1df113d71f46de54c8ca4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "commitAfterChange": "c7179e693f89a314eb6898100456db755030dd92", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic void addClassData(ClassData classData)", "signatureAfterChange": "  \tpublic void addClassData(ClassData classData)", "diff": ["+\t\tthis.sourceFiles.put(classData.getSourceFileName(), packageData.getChild(classData.getSourceFileName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76ad6a261780249fd97f34becc2dac08", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "commitAfterChange": "aca3d012a32f8d1cc78e6d8a28c8ae27f9238ef8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-    private void parseArguments(String[] args)", "-    {", "-        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\tprivate void parseArguments(String[] args)", "+\t{", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-        // Parse our parameters", "-        List filePaths = new ArrayList();", "-        for (int i = 0; i < args.length; i++)", "-        {", "-            if (args[i].equals(\"--basedir\")) ", "-            {", "-            \tfilePaths.add( args[i]);", "-            \tfilePaths.add( args[++i]);", "-            }", "-            else if (args[i].equals(\"--datafile\"))", "-                dataFile = new File(args[++i]);", "-            else if (args[i].equals(\"--destination\"))", "-                destinationDirectory = new File(args[++i]);", "-            else if (args[i].equals(\"--ignore\"))", "-            {", "-                String regex = args[++i];", "-                try", "-                {", "-                    Perl5Compiler pc = new Perl5Compiler();", "-                    this.ignoreRegexes.add(pc.compile(regex));", "-                }", "-                catch (MalformedPatternException e)", "-                {", "-                    logger.warn(\"The regular expression \" + regex", "-                            + \" is invalid: \" + e.getLocalizedMessage());", "-                }", "-            }", "+\t\t// Parse our parameters", "+\t\tList filePaths = new ArrayList();", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t{", "+\t\t\tif (args[i].equals(\"--basedir\"))", "+\t\t\t{", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t\tfilePaths.add(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\t\tdestinationDirectory = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t{", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexes.add(pc.compile(regex));", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}", "-            \tfilePaths.add( args[i]);", "-            }", "-        }", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t}", "+\t\t}", "-        // Load coverage data", "-        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-        if (projectData == null)", "-            projectData = new ProjectData();", "+\t\t// Load coverage data", "+\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (projectData == null)", "+\t\t\tprojectData = new ProjectData();", "-        // Instrument classes", "-        String baseDir = null;", "-\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "-        Iterator iter = filePaths.iterator();", "+\t\t// Instrument classes", "+\t\tSystem.out.println(\"Instrumenting \"\t+ filePaths.size() + \" \"", "+\t\t\t\t+ (filePaths.size() == 1 ? \"class\" : \"classes\")", "+\t\t\t\t+ (destinationDirectory != null ? \" to \"", "+\t\t\t\t\t\t+ destinationDirectory.getAbsoluteFile() : \"\"));", "+\t\tString baseDir = null;", "+\t\tIterator iter = filePaths.iterator();", "-        \tString act = (String) iter.next();", "+\t\t\tString act = (String)iter.next();", "-       \t\t\tbaseDir = (String) iter.next();", "+\t\t\t\tbaseDir = (String)iter.next();", "-        \t\taddInstrumentation( baseDir, act);", "-        \t}", "-        }", "-        ", "-        // Save coverage data", "-        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "-    }", "+\t\t\t\taddInstrumentation(baseDir, act);", "+\t\t\t}", "+\t\t}", "+\t\t// Save coverage data", "+\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7879bf2e948e9f83371fe1d5b7670d9a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "faecb7bfd4341acfa861ab84a1019995550209ae", "commitAfterChange": "183d0c3e2bdb7ad1fed8ea6b0bb3c36fb353b969", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic SortedSet getSubPackages(String packageName)", "signatureAfterChange": " \tpublic SortedSet getSubPackages(String packageName)", "diff": ["-\t\t\t\tif (packageData.getName().startsWith(packageName))", "+\t\t\t\tif (packageData.getName().startsWith(packageName + \".\") || packageData.getName().equals(packageName) || packageName.equals(\"\"))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e56036fffdefe7658278c7bcb697991", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileLocker.java", "commitBeforeChange": "b7d645d26810d554f8b151e062f2aac365baf6fa", "commitAfterChange": "cfffd11ff6faa01073497d57b9d1e8f0b932b26a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean lock()", "signatureAfterChange": " \tpublic boolean lock()", "diff": ["-\t\t\tSystem.err.println(\"Make sure cobertura.jar is in your server's base classpath.\");", "+\t\t\tSystem.err.println(\"Make sure cobertura.jar is in the root classpath of the jvm \");", "+\t\t\tSystem.err.println(\"process running the instrumented code.  If the instrumented code \");", "+\t\t\tSystem.err.println(\"is running in a web server, this means cobertura.jar should be in \");", "+\t\t\tSystem.err.println(\"the web server's lib directory.\");", "-\t\t\tSystem.err.println(\"It is important that cobertura be loaded by the parent classloader.\");", "+\t\t\tSystem.err.println(\"Only one classloader should load cobertura.  It should be the root classloader.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f005524f45fe5e1f18217b219ef5a5f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "2b7c483066cbc540487c656c3ae006484e0911b7", "commitAfterChange": "c3e69d3840be2f7780aae7b00ec462c4b4ba5d92", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate String getFileName(String className, CoverageData instrumentation)", "signatureAfterChange": "  \tprivate String getFileName(String className, CoverageData instrumentation)", "diff": ["-\t\t// TODO: Find a better way to get this", "-\t\treturn \"TODO\";", "-\t\t//return ClassHelper.getPackageName(className).replace('.', '/') + '/' + instrumentation.getSourceFileName();", "+\t\treturn ClassHelper.getPackageName(className).replace('.', '/') + '/' + instrumentation.getSourceFileName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f18ac854f50dc9af80d0b7a9891dcb8", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/merge/MergeMainTest.java", "commitBeforeChange": "bf830e2daab8395943151eb98a8ce07d39595799", "commitAfterChange": "ea85e22a8988b13239ead3af1cf10c5577f950b9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testNewDestinationFile() throws IOException", "signatureAfterChange": "  \tpublic void testNewDestinationFile() throws IOException", "diff": ["+\t\tSystem.out.println(String.format(", "+\t\t\t\t\"### Will merge dataFiles: %s, %s, %s\", dataFile", "+\t\t\t\t\t\t.getAbsolutePath(), greenFile.getAbsolutePath(),", "+\t\t\t\tredFile.getAbsolutePath()));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5e3995e6f9132b3efbdcb9b741de24", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "23aa498955acea07a8c58d0d62c2db964bb2f8c1", "commitAfterChange": "a3baae1e85035b38eb79fe83a6930bb28d164c67", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": " \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tsuper.merge(coverageData);", "-", "+", "+\t\t// If objects contain data for different classes then don't merge", "+\t\tif (!this.getName().equals(classData.getName()))", "+\t\t\treturn;", "+", "+\t\tsuper.merge(coverageData);", "+\t\tif (classData.sourceFileName != null)", "+\t\t\tthis.sourceFileName = classData.sourceFileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa0fdcd9001e22b91108c791fdb9058e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coverage/CoverageDataTest.java", "commitBeforeChange": "c3e69d3840be2f7780aae7b00ec462c4b4ba5d92", "commitAfterChange": "8f0d322652edfef35c560d9d4e0b248c7e9ed027", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void testTouch()", "signatureAfterChange": "  \tpublic void testTouch()", "diff": ["-\t\tint line = 5;", "+\t\tint line = 3;", "-\t\tassertEquals(0, a.getHitCount(line));", "-\t\tassertTrue(a.isValidSourceLineNumber(line));", "-\t\tassertEquals(1, a.getHitCount(line));", "-\t\ta.touch(line);", "-\t\tassertEquals(2, a.getHitCount(line));", "-\t\tassertTrue(a.isValidSourceLineNumber(line));", "+\t\tassertFalse(a.isValidSourceLineNumber(line));", "+", "+\t\tassertTrue(b.isValidSourceLineNumber(line));", "+\t\tassertEquals(0, b.getHitCount(line));", "+\t\tb.touch(line);", "+\t\tassertTrue(b.isValidSourceLineNumber(line));", "+\t\tassertEquals(1, b.getHitCount(line));", "+\t\tb.touch(line);", "+\t\tassertEquals(2, b.getHitCount(line));", "+\t\tassertTrue(b.isValidSourceLineNumber(line));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf99ae9b899be905a0958db03ff23ad4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic int compareTo(ClassData o)", "signatureAfterChange": " \tpublic int compareTo(ClassData o)", "diff": ["-\t\treturn this.name.compareTo(o.name);", "+\t\tif (!o.getClass().equals(ClassData.class))", "+\t\t\treturn Integer.MAX_VALUE;", "+\t\treturn this.name.compareTo(((ClassData)o).name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4773970314baba51f19993ef70c8544", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate String generateTableRowForSourceFile(SourceFileData sourceFileData)", "signatureAfterChange": "  \tprivate String generateTableRowForSourceFile(SourceFileData sourceFileData)", "diff": ["-\t\tdouble ccn = Util.getCCN(", "-\t\t\t\tnew File(sourceDir, sourceFileData.getName()), false);", "+\t\tFile file = finder.findFile(sourceFileData.getName());", "+\t\tif (file == null) {", "+\t\t\tSystem.out.println(\"FILE IS NULL: \" + sourceFileData.getName());", "+\t\t}", "+\t\tdouble ccn = Util.getCCN(file, false);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d82781941eb74e07cc57aea0297a8972", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d3a0cc3dfe7c8aad999b77d9cb9d7f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "\r \r   final public void ForStatement() throws ParseException", "signatureAfterChange": "    final public void ForStatement() throws ParseException", "diff": ["-\r", "-  final public void ForStatement() throws ParseException {\r", "-    jj_consume_token(FOR);\r", "-    jj_consume_token(LPAREN);\r", "-    if (jj_2_46(2147483647)) {\r", "-      Modifiers();\r", "-      Type();\r", "-      jj_consume_token(IDENTIFIER);\r", "-      jj_consume_token(COLON);\r", "-      Expression();\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SUPER:\r", "-      case SYNCHRONIZED:\r", "-      case THIS:\r", "-      case TRANSIENT:\r", "-      case TRUE:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case INCR:\r", "-      case DECR:\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ABSTRACT:\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FINAL:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NATIVE:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case PRIVATE:\r", "-        case PROTECTED:\r", "-        case PUBLIC:\r", "-        case SHORT:\r", "-        case STATIC:\r", "-        case TESTAAAA:\r", "-        case SUPER:\r", "-        case SYNCHRONIZED:\r", "-        case THIS:\r", "-        case TRANSIENT:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case VOLATILE:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case AT:\r", "-        case INCR:\r", "-        case DECR:\r", "-          ForInit();\r", "-          break;\r", "-        default:\r", "-          jj_la1[149] = jj_gen;\r", "-          ;\r", "-        }\r", "-        jj_consume_token(SEMICOLON);\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case SHORT:\r", "-        case SUPER:\r", "-        case THIS:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case BANG:\r", "-        case TILDE:\r", "-        case INCR:\r", "-        case DECR:\r", "-        case PLUS:\r", "-        case MINUS:\r", "-          Expression();\r", "-          break;\r", "-        default:\r", "-          jj_la1[150] = jj_gen;\r", "-          ;\r", "-        }\r", "-        jj_consume_token(SEMICOLON);\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case SHORT:\r", "-        case SUPER:\r", "-        case THIS:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case INCR:\r", "-        case DECR:\r", "-          ForUpdate();\r", "-          break;\r", "-        default:\r", "-          jj_la1[151] = jj_gen;\r", "-          ;\r", "-        }\r", "-        break;\r", "-      default:\r", "-        jj_la1[152] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-    jj_consume_token(RPAREN);\r", "-    Statement();\r", "-          _ncss++;       Util.debug( \"_ncss++\" );\r", "-  }\r", "+", "+  final public void ForStatement() throws ParseException {", "+    jj_consume_token(FOR);", "+    jj_consume_token(LPAREN);", "+    if (jj_2_45(2147483647)) {", "+      Modifiers();", "+      Type();", "+      jj_consume_token(IDENTIFIER);", "+      jj_consume_token(COLON);", "+      Expression();", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NATIVE:", "+      case NEW:", "+      case NULL:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SUPER:", "+      case SYNCHRONIZED:", "+      case THIS:", "+      case TRANSIENT:", "+      case TRUE:", "+      case VOID:", "+      case VOLATILE:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case SEMICOLON:", "+      case AT:", "+      case INCR:", "+      case DECR:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NATIVE:", "+        case NEW:", "+        case NULL:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case TESTAAAA:", "+        case SUPER:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case TRANSIENT:", "+        case TRUE:", "+        case VOID:", "+        case VOLATILE:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case AT:", "+        case INCR:", "+        case DECR:", "+          ForInit();", "+          break;", "+        default:", "+          jj_la1[150] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCR:", "+        case DECR:", "+        case PLUS:", "+        case MINUS:", "+          Expression();", "+          break;", "+        default:", "+          jj_la1[151] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCR:", "+        case DECR:", "+          ForUpdate();", "+          break;", "+        default:", "+          jj_la1[152] = jj_gen;", "+          ;", "+        }", "+        break;", "+      default:", "+        jj_la1[153] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+    jj_consume_token(RPAREN);", "+    Statement();", "+          _ncss++;       Util.debug( \"_ncss++\" );", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d66e88ba1e5bfcedc4f606d4a278ac", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "\r \r   final public void ForStatement() throws ParseException", "signatureAfterChange": "    final public void ForStatement() throws ParseException", "diff": ["-\r", "-  final public void ForStatement() throws ParseException {\r", "-    jj_consume_token(FOR);\r", "-    jj_consume_token(LPAREN);\r", "-    if (jj_2_46(2147483647)) {\r", "-      Modifiers();\r", "-      Type();\r", "-      jj_consume_token(IDENTIFIER);\r", "-      jj_consume_token(COLON);\r", "-      Expression();\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SUPER:\r", "-      case SYNCHRONIZED:\r", "-      case THIS:\r", "-      case TRANSIENT:\r", "-      case TRUE:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case INCR:\r", "-      case DECR:\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ABSTRACT:\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FINAL:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NATIVE:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case PRIVATE:\r", "-        case PROTECTED:\r", "-        case PUBLIC:\r", "-        case SHORT:\r", "-        case STATIC:\r", "-        case TESTAAAA:\r", "-        case SUPER:\r", "-        case SYNCHRONIZED:\r", "-        case THIS:\r", "-        case TRANSIENT:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case VOLATILE:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case AT:\r", "-        case INCR:\r", "-        case DECR:\r", "-          ForInit();\r", "-          break;\r", "-        default:\r", "-          jj_la1[149] = jj_gen;\r", "-          ;\r", "-        }\r", "-        jj_consume_token(SEMICOLON);\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case SHORT:\r", "-        case SUPER:\r", "-        case THIS:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case BANG:\r", "-        case TILDE:\r", "-        case INCR:\r", "-        case DECR:\r", "-        case PLUS:\r", "-        case MINUS:\r", "-          Expression();\r", "-          break;\r", "-        default:\r", "-          jj_la1[150] = jj_gen;\r", "-          ;\r", "-        }\r", "-        jj_consume_token(SEMICOLON);\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FALSE:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case LONG:\r", "-        case NEW:\r", "-        case NULL:\r", "-        case SHORT:\r", "-        case SUPER:\r", "-        case THIS:\r", "-        case TRUE:\r", "-        case VOID:\r", "-        case INTEGER_LITERAL:\r", "-        case FLOATING_POINT_LITERAL:\r", "-        case CHARACTER_LITERAL:\r", "-        case STRING_LITERAL:\r", "-        case IDENTIFIER:\r", "-        case LPAREN:\r", "-        case INCR:\r", "-        case DECR:\r", "-          ForUpdate();\r", "-          break;\r", "-        default:\r", "-          jj_la1[151] = jj_gen;\r", "-          ;\r", "-        }\r", "-        break;\r", "-      default:\r", "-        jj_la1[152] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-    jj_consume_token(RPAREN);\r", "-    Statement();\r", "-          _ncss++;       Util.debug( \"_ncss++\" );\r", "-  }\r", "+", "+  final public void ForStatement() throws ParseException {", "+    jj_consume_token(FOR);", "+    jj_consume_token(LPAREN);", "+    if (jj_2_45(2147483647)) {", "+      Modifiers();", "+      Type();", "+      jj_consume_token(IDENTIFIER);", "+      jj_consume_token(COLON);", "+      Expression();", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NATIVE:", "+      case NEW:", "+      case NULL:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SUPER:", "+      case SYNCHRONIZED:", "+      case THIS:", "+      case TRANSIENT:", "+      case TRUE:", "+      case VOID:", "+      case VOLATILE:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case SEMICOLON:", "+      case AT:", "+      case INCR:", "+      case DECR:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NATIVE:", "+        case NEW:", "+        case NULL:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case TESTAAAA:", "+        case SUPER:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case TRANSIENT:", "+        case TRUE:", "+        case VOID:", "+        case VOLATILE:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case AT:", "+        case INCR:", "+        case DECR:", "+          ForInit();", "+          break;", "+        default:", "+          jj_la1[150] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCR:", "+        case DECR:", "+        case PLUS:", "+        case MINUS:", "+          Expression();", "+          break;", "+        default:", "+          jj_la1[151] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCR:", "+        case DECR:", "+          ForUpdate();", "+          break;", "+        default:", "+          jj_la1[152] = jj_gen;", "+          ;", "+        }", "+        break;", "+      default:", "+        jj_la1[153] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+    jj_consume_token(RPAREN);", "+    Statement();", "+          _ncss++;       Util.debug( \"_ncss++\" );", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3d849beb8fcbfcaa4e7febed0f20527", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118b8e192debf7367161d2b988e6da79", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileLocker.java", "commitBeforeChange": "b593b3e400cea2328d827b3a670dd0bf6cc7fee1", "commitAfterChange": "8227bc61964b9dbb4bcbf570622aa907f806676d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static FileChannel closeChannel(FileChannel channel)", "signatureAfterChange": "  \tprivate static Object closeChannel(Object channel)", "diff": ["-\tprivate static FileChannel closeChannel(FileChannel channel)", "+\tprivate static Object closeChannel(Object channel)", "-\t\tif (channel != null)", "+\t\ttry", "-\t\t\ttry", "+\t\t\tClass aClass = Class.forName(\"java.nio.channels.spi.AbstractInterruptibleChannel\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"isOpen\", (Class[])null);", "+\t\t\tif (((Boolean)method.invoke(channel, (Object[])null)).booleanValue())", "-\t\t\t\tif (channel.isOpen())", "-\t\t\t\t{", "-\t\t\t\t\tchannel.close();", "-\t\t\t\t}", "+\t\t\t\tmethod = aClass.getDeclaredMethod(\"close\", (Class[])null);", "+\t\t\t\tmethod.invoke(channel, (Object[])null);", "-\t\t\tcatch (Throwable t)", "-\t\t\t{", "-\t\t\t\tSystem.err.println(\"Unable to close file channel: \" + t.getLocalizedMessage());", "-\t\t\t}", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to close file channel: \" + t.getLocalizedMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48d206adca4dadd4200d379ee9a034d0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileLocker.java", "commitBeforeChange": "b593b3e400cea2328d827b3a670dd0bf6cc7fee1", "commitAfterChange": "8227bc61964b9dbb4bcbf570622aa907f806676d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static FileLock releaseFileLock(FileLock lock)", "signatureAfterChange": "  \tprivate static Object releaseFileLock(Object lock)", "diff": ["-\tprivate static FileLock releaseFileLock(FileLock lock)", "+\tprivate static Object releaseFileLock(Object lock)", "-\t\tif (lock != null)", "+\t\ttry", "-\t\t\ttry", "+\t\t\tClass aClass = Class.forName(\"java.nio.channels.FileLock\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"isValid\", (Class[])null);", "+\t\t\tif (((Boolean)method.invoke(lock, (Object[])null)).booleanValue())", "-\t\t\t\tif (lock.isValid())", "-\t\t\t\t{", "-\t\t\t\t\tlock.release();", "-\t\t\t\t}", "+\t\t\t\tmethod = aClass.getDeclaredMethod(\"release\", (Class[])null);", "+\t\t\t\tmethod.invoke(lock, (Object[])null);", "-\t\t\tcatch (Throwable t)", "-\t\t\t{", "-\t\t\t\tSystem.err.println(\"Unable to release locked file: \" + t.getLocalizedMessage());", "-\t\t\t}", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to release locked file: \" + t.getLocalizedMessage());"]}]}
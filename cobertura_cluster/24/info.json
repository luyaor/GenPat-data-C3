{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7241986eb36abe4e294b7cad0fa8fdbf", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f54e268d86cec01c275ff74a9497770", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/FirstPassMethodInstrumenter.java", "commitBeforeChange": "792c5093dbce280ed92358a7ad1456924b5e55ab", "commitAfterChange": "16403757be60e9df4fb5dd5f25f934e5bcad9472", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "signatureAfterChange": "  \tpublic void visitMethodInsn(int opcode, String owner, String name, \t\t\tString desc)", "diff": ["+", "+\t\tif (!ignored && mightBeTrivial)", "+\t\t{", "+\t\t\tif (isInit)", "+\t\t\t{", "+\t\t\t\t// trivial initializers can invoke parent initializers,", "+\t\t\t\t// but cannot invoke any other methods", "+\t\t\t\tif (opcode == INVOKESPECIAL && name.equals(\"<init>\") && owner.equals(ownerSuperClass))", "+\t\t\t\t{", "+\t\t\t\t\t// trivial call to super constructor", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\tmarkNonTrivial();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tmarkNonTrivial();", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d5f7d030dffe4d986b7fc443993872", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalTest.java", "commitBeforeChange": "cfffd11ff6faa01073497d57b9d1e8f0b932b26a", "commitAfterChange": "6f627408c1a8fdb3735adfb9a97ff76713bea376", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate static void verifyXml(String testName) throws Exception", "signatureAfterChange": "  \tprivate static void verifyXml(String testName) throws Exception", "diff": ["+\t\t\tboolean verify = true;", "+\t\t\telse if (className.equals(\"test.first.RemoteInterface\") ", "+\t\t\t\t\t|| (className.equals(\"test.first.RemoteListener\"))", "+\t\t\t\t\t|| (className.equals(\"test.first.RemoteListener_Stub\")))", "+\t\t\t{", "+\t\t\t\t//just ignore - it is ok", "+\t\t\t\tverify = false;", "+\t\t\t}", "-\t\t\tverifyClass(testName, classElement);", "+\t\t\tif (verify)", "+\t\t\t{", "+\t\t\t\tverifyClass(testName, classElement);", "+\t\t\t}"]}]}
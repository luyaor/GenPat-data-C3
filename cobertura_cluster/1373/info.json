{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ef06e69a78a7dff6ce498a35bf5287f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217d8d46fc39f6ab78087eb0771ce1a2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass2/BuildClassMapClassVisitor.java", "commitBeforeChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "commitAfterChange": "6f41b309127d9fbf50973998e4a8da088f5c332e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString parent, String[] interfaces)", "signatureAfterChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString parent, String[] interfaces)", "diff": ["-\t\tif (((access & Opcodes.ACC_INTERFACE) != 0)", "-\t\t\t\t|| Arrays.asList(interfaces).contains(Type.getInternalName(HasBeenInstrumented.class))){", "+\t\tif ((access & Opcodes.ACC_INTERFACE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b33457856d168852605b2bd7a242c6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/BuildClassMapClassInstrumenter.java", "commitBeforeChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "commitAfterChange": "c6fd277b28f155d1b35d06833203b627d24523c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString parent, String[] interfaces)", "signatureAfterChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString parent, String[] interfaces)", "diff": ["-\t\t\t\t|| arrayContains(interfaces, Type.getInternalName(HasBeenInstrumented.class))){", "-\t\t\ttoInstrument=false;", "+\t\t\t\t|| Arrays.asList(interfaces).contains(Type.getInternalName(HasBeenInstrumented.class))){", "+\t\t\ttoInstrument = false;"]}]}
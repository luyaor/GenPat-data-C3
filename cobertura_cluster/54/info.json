{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "375a70516b8cbe2d370900a6a344b3fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ea416a3ea3a73e3af4fbc237bc3bb35", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r \r   final public void UnmodifiedInterfaceDeclaration() throws ParseException", "signatureAfterChange": "    final public void UnmodifiedInterfaceDeclaration() throws ParseException", "diff": ["-\r", "-  final public void UnmodifiedInterfaceDeclaration() throws ParseException {\r", "-        String sOldClass = _sClass;\r", "-        int oldNcss = _ncss;\r", "-        int oldFunctions = _functions;\r", "-        int oldClasses = _classes;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                int oldJavadocs = _javadocs;\r", "-                if (!_sClass.equals(\"\")) {\r", "-                        _sClass += \".\";\r", "-                }\r", "-                _sClass += getToken(2).image;\r", "-                _classLevel ++;\r", "-    jj_consume_token(INTERFACE);\r", "-    Identifier();\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[46] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case EXTENDS:\r", "-      jj_consume_token(EXTENDS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[47] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(LBRACE);\r", "-    label_23:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-      case TRANSIENT:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case IDENTIFIER:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case LT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[48] = jj_gen;\r", "-        break label_23;\r", "-      }\r", "-      InterfaceMemberDeclaration();\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-                _classLevel--;\r", "-                if (_classLevel == 0)\r", "-                {\r", "-                        //_topLevelClasses++;\r", "-                        ObjectMetric metric = new ObjectMetric();\r", "-                        metric.name = _sPackage + _sClass;\r", "-                        metric.ncss = _ncss - oldNcss;\r", "-                        metric.functions = _functions - oldFunctions;\r", "-                        metric.classes = _classes - oldClasses;\r", "-                        //metric.add( Util.getConstantObject() );\r", "-                        //metric.add( Util.getConstantObject() );\r", "-                        _vClasses.add( metric );\r", "-                        _pPackageMetric.functions += _functions - oldFunctions;\r", "-                        _pPackageMetric.classes++;\r", "-\r", "-                        // added by SMS\r", "-                        _pPackageMetric.javadocs += _javadocs;\r", "-                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;\r", "-                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;\r", "-                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                        //\r", "-                }\r", "-                        //Added by REYNAUD Sebastien (LOGICA)\r", "-                        else\r", "-                        {\r", "-                        ObjectMetric metric1 = new ObjectMetric();\r", "-                  metric1.name = _sPackage + _sClass;\r", "-                        metric1.ncss = _ncss - oldNcss;\r", "-                  metric1.functions = _functions - oldFunctions;\r", "-                  metric1.classes = _classes - oldClasses;\r", "-                  Token lastToken = getToken( 0 );\r", "-                  _vClasses.add( metric1 );\r", "-                  _pPackageMetric.functions += _functions - oldFunctions;\r", "-                  _pPackageMetric.classes++;\r", "-                        //_pPackageMetric.javadocs += _javadocs;\r", "-                        metric1.javadocs = _javadocs - oldJavadocs;\r", "-                        }\r", "-                        //\r", "-\r", "-                _functions = oldFunctions;\r", "-                _classes = oldClasses + 1;\r", "-                _sClass = sOldClass;\r", "-  }\r", "+", "+  final public void UnmodifiedInterfaceDeclaration() throws ParseException {", "+        String sOldClass = _sClass;", "+        int oldNcss = _ncss;", "+        int oldFunctions = _functions;", "+        int oldClasses = _classes;", "+", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                ObjectMetric metric = new ObjectMetric();", "+                metric.firstLine = JavaParserTokenManager.nbligne;", "+                if (!_sClass.equals(\"\")) {", "+                        _sClass += \".\";", "+                }", "+                _sClass += getToken(2).image;", "+                _classLevel ++;", "+    jj_consume_token(INTERFACE);", "+    Identifier();", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[46] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case EXTENDS:", "+      jj_consume_token(EXTENDS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[47] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(LBRACE);", "+    label_23:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case DOUBLE:", "+      case ENUM:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+      case TRANSIENT:", "+      case VOID:", "+      case VOLATILE:", "+      case IDENTIFIER:", "+      case SEMICOLON:", "+      case AT:", "+      case LT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[48] = jj_gen;", "+        break label_23;", "+      }", "+      InterfaceMemberDeclaration();", "+    }", "+    jj_consume_token(RBRACE);", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+                _classLevel--;", "+                if (_classLevel == 0)", "+                {", "+                        //_topLevelClasses++;", "+", "+                        //ObjectMetric metric = new ObjectMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                        metric.name = _sPackage + _sClass;", "+                        metric.ncss = _ncss - oldNcss;", "+                        metric.functions = _functions - oldFunctions;", "+                        metric.classes = _classes - oldClasses;", "+                        //metric.add( Util.getConstantObject() );", "+                        //metric.add( Util.getConstantObject() );", "+                        _vClasses.add( metric );", "+                        _pPackageMetric.functions += _functions - oldFunctions;", "+                        _pPackageMetric.classes++;", "+", "+                        // added by SMS", "+                        _pPackageMetric.javadocs += _javadocs;", "+                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;", "+                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;", "+                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;", "+                        //", "+                }", "+", "+                _functions = oldFunctions;", "+                _classes = oldClasses + 1;", "+                _sClass = sOldClass;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9e4147d7944746f21451c903c50340a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r \r   final public void UnmodifiedInterfaceDeclaration() throws ParseException", "signatureAfterChange": "    final public void UnmodifiedInterfaceDeclaration() throws ParseException", "diff": ["-\r", "-  final public void UnmodifiedInterfaceDeclaration() throws ParseException {\r", "-        String sOldClass = _sClass;\r", "-        int oldNcss = _ncss;\r", "-        int oldFunctions = _functions;\r", "-        int oldClasses = _classes;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                int oldJavadocs = _javadocs;\r", "-                if (!_sClass.equals(\"\")) {\r", "-                        _sClass += \".\";\r", "-                }\r", "-                _sClass += getToken(2).image;\r", "-                _classLevel ++;\r", "-    jj_consume_token(INTERFACE);\r", "-    Identifier();\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[46] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case EXTENDS:\r", "-      jj_consume_token(EXTENDS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[47] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(LBRACE);\r", "-    label_23:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-      case TRANSIENT:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case IDENTIFIER:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case LT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[48] = jj_gen;\r", "-        break label_23;\r", "-      }\r", "-      InterfaceMemberDeclaration();\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-                _classLevel--;\r", "-                if (_classLevel == 0)\r", "-                {\r", "-                        //_topLevelClasses++;\r", "-                        ObjectMetric metric = new ObjectMetric();\r", "-                        metric.name = _sPackage + _sClass;\r", "-                        metric.ncss = _ncss - oldNcss;\r", "-                        metric.functions = _functions - oldFunctions;\r", "-                        metric.classes = _classes - oldClasses;\r", "-                        //metric.add( Util.getConstantObject() );\r", "-                        //metric.add( Util.getConstantObject() );\r", "-                        _vClasses.add( metric );\r", "-                        _pPackageMetric.functions += _functions - oldFunctions;\r", "-                        _pPackageMetric.classes++;\r", "-\r", "-                        // added by SMS\r", "-                        _pPackageMetric.javadocs += _javadocs;\r", "-                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;\r", "-                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;\r", "-                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                        //\r", "-                }\r", "-                        //Added by REYNAUD Sebastien (LOGICA)\r", "-                        else\r", "-                        {\r", "-                        ObjectMetric metric1 = new ObjectMetric();\r", "-                  metric1.name = _sPackage + _sClass;\r", "-                        metric1.ncss = _ncss - oldNcss;\r", "-                  metric1.functions = _functions - oldFunctions;\r", "-                  metric1.classes = _classes - oldClasses;\r", "-                  Token lastToken = getToken( 0 );\r", "-                  _vClasses.add( metric1 );\r", "-                  _pPackageMetric.functions += _functions - oldFunctions;\r", "-                  _pPackageMetric.classes++;\r", "-                        //_pPackageMetric.javadocs += _javadocs;\r", "-                        metric1.javadocs = _javadocs - oldJavadocs;\r", "-                        }\r", "-                        //\r", "-\r", "-                _functions = oldFunctions;\r", "-                _classes = oldClasses + 1;\r", "-                _sClass = sOldClass;\r", "-  }\r", "+", "+  final public void UnmodifiedInterfaceDeclaration() throws ParseException {", "+        String sOldClass = _sClass;", "+        int oldNcss = _ncss;", "+        int oldFunctions = _functions;", "+        int oldClasses = _classes;", "+", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                ObjectMetric metric = new ObjectMetric();", "+                metric.firstLine = JavaParserTokenManager.nbligne;", "+                if (!_sClass.equals(\"\")) {", "+                        _sClass += \".\";", "+                }", "+                _sClass += getToken(2).image;", "+                _classLevel ++;", "+    jj_consume_token(INTERFACE);", "+    Identifier();", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[46] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case EXTENDS:", "+      jj_consume_token(EXTENDS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[47] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(LBRACE);", "+    label_23:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case DOUBLE:", "+      case ENUM:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+      case TRANSIENT:", "+      case VOID:", "+      case VOLATILE:", "+      case IDENTIFIER:", "+      case SEMICOLON:", "+      case AT:", "+      case LT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[48] = jj_gen;", "+        break label_23;", "+      }", "+      InterfaceMemberDeclaration();", "+    }", "+    jj_consume_token(RBRACE);", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+                _classLevel--;", "+                if (_classLevel == 0)", "+                {", "+                        //_topLevelClasses++;", "+", "+                        //ObjectMetric metric = new ObjectMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                        metric.name = _sPackage + _sClass;", "+                        metric.ncss = _ncss - oldNcss;", "+                        metric.functions = _functions - oldFunctions;", "+                        metric.classes = _classes - oldClasses;", "+                        //metric.add( Util.getConstantObject() );", "+                        //metric.add( Util.getConstantObject() );", "+                        _vClasses.add( metric );", "+                        _pPackageMetric.functions += _functions - oldFunctions;", "+                        _pPackageMetric.classes++;", "+", "+                        // added by SMS", "+                        _pPackageMetric.javadocs += _javadocs;", "+                        //_pPackageMetric.javadocsLn += JavaParserTokenManager._iFormalComments - oldFormal;", "+                        //_pPackageMetric.singleLn += JavaParserTokenManager._iSingleComments - oldSingle;", "+                        //_pPackageMetric.multiLn += JavaParserTokenManager._iMultiComments - oldMulti;", "+                        //", "+                }", "+", "+                _functions = oldFunctions;", "+                _classes = oldClasses + 1;", "+                _sClass = sOldClass;", "+  }"]}]}
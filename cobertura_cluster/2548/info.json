{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0e49ad4b9a8ea6c9ea0e3ef050b08cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13ddf466a69d5e8282146ebcc202aca2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \r   final public void MethodDeclaration() throws ParseException", "signatureAfterChange": "    final public void MethodDeclaration() throws ParseException", "diff": ["-\r", "-  final public void MethodDeclaration() throws ParseException {\r", "-    int oldNcss = _ncss;\r", "-    int oldFunctions = _functions;\r", "-    String sOldFunction = _sFunction;\r", "-    int oldcyc = _cyc;\r", "-    boolean bOldReturn = _bReturn;\r", "-    Token tmpToken = null;\r", "-    int jvdc = 0;\r", "-\r", "-    // added by SMS\r", "-    int jvdcLines = 0;\r", "-    int oldSingle;\r", "-    int oldMulti;\r", "-    boolean bPublic = false;\r", "-    //\r", "-\r", "-        //Added by REYNAUD Sebastien (LOGICA)\r", "-        Token myToken = null;\r", "-        _tmpToken=null;\r", "-    if ( _tmpToken != null )\r", "-    {\r", "-        tmpToken = _tmpToken;\r", "-    }\r", "-    label_29:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case AT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[61] = jj_gen;\r", "-        break label_29;\r", "-      }\r", "-         myToken = getToken(1);\r", "-      Annotation();\r", "-      if ( tmpToken == null ) {\r", "-\r", "-          //tmpToken = getToken( 0 ); //Removed by REYNAUD Sebastien (LOGICA)\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                tmpToken = myToken;\r", "-                //\r", "-      }\r", "-    }\r", "-    label_30:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case FINAL:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[62] = jj_gen;\r", "-        break label_30;\r", "-      }\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case PUBLIC:\r", "-        jj_consume_token(PUBLIC);\r", "-               bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PROTECTED:\r", "-        jj_consume_token(PROTECTED);\r", "-                    bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PRIVATE:\r", "-        jj_consume_token(PRIVATE);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case STATIC:\r", "-        jj_consume_token(STATIC);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case ABSTRACT:\r", "-        jj_consume_token(ABSTRACT);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case FINAL:\r", "-        jj_consume_token(FINAL);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case NATIVE:\r", "-        jj_consume_token(NATIVE);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case SYNCHRONIZED:\r", "-        jj_consume_token(SYNCHRONIZED);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case TESTAAAA:\r", "-        jj_consume_token(TESTAAAA);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      default:\r", "-        jj_la1[63] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-    label_31:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case AT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[64] = jj_gen;\r", "-        break label_31;\r", "-      }\r", "-      Annotation();\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[65] = jj_gen;\r", "-      ;\r", "-    }\r", "-               _tmpResultToken = null;\r", "-    ResultType();\r", "-            if ( tmpToken == null )\r", "-            {\r", "-                tmpToken = _tmpResultToken;\r", "-                if ( tmpToken == null )\r", "-                {\r", "-                    tmpToken = getToken( 0 );\r", "-                }\r", "-                Util.debug( \"result type tmpToken: \" + tmpToken );\r", "-            }\r", "-    MethodDeclarator();\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case THROWS:\r", "-      jj_consume_token(THROWS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[66] = jj_gen;\r", "-      ;\r", "-    }\r", "-                _cyc = 1;\r", "-                _bReturn = false;\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LBRACE:\r", "-      Block();\r", "-      break;\r", "-    case SEMICOLON:\r", "-      jj_consume_token(SEMICOLON);\r", "-      break;\r", "-    default:\r", "-      jj_la1[67] = jj_gen;\r", "-      jj_consume_token(-1);\r", "-      throw new ParseException();\r", "-    }\r", "-  // added by SMS\r", "-  {\r", "-      Util.debug( \"Token: \" + String.valueOf( tmpToken.image ) );\r", "-      while( tmpToken.specialToken != null )\r", "-      {\r", "-          Util.debug( \"Token comment: \" + String.valueOf( tmpToken.specialToken.image ) );\r", "-          if ( tmpToken.specialToken.image.startsWith( \"/**\" ) )\r", "-          {\r", "-              _javadocs++;\r", "-              Util.debug( \"MethodDeclaration()._javadocs++\" );\r", "-              jvdc++;\r", "-              if ((bPublic && _bPublic) || _bPrivate) {\r", "-                  Util.debug( \"_jvdc++\" );\r", "-                  _jvdc++;\r", "-                  jvdcLines = JavaParserTokenManager._iMultiCommentsLast;\r", "-                  _jvdcLines += jvdcLines;\r", "-                  JavaParserTokenManager._iFormalComments += jvdcLines;\r", "-              }\r", "-              JavaParserTokenManager._iMultiComments -= jvdcLines;\r", "-              break;\r", "-          }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {\r", "-              jvdcLines = 0;\r", "-              break;\r", "-          }\r", "-\r", "-          //System.out.println(\"\\n\"+tmpToken.specialToken.image);\r", "-\r", "-          tmpToken = tmpToken.specialToken;\r", "-      }\r", "-\r", "-      oldSingle = JavaParserTokenManager._iSingleComments;\r", "-      oldMulti = JavaParserTokenManager._iMultiComments;\r", "-  }\r", "-\r", "-\r", "-             // removed by ccl\r", "-             /*\r", "-             while( tmpToken.specialToken != null ) {\r", "-                 if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-                     jvdc++;\r", "-                     _javadocs++;\r", "-                 }\r", "-                 tmpToken = tmpToken.specialToken;\r", "-             }\r", "-             */\r", "-             // removed by SMS\r", "-             /*\r", "-               while( tmpToken.specialToken != null ) {\r", "-               if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-               jvdc++;\r", "-               _javadocs++;\r", "-               _bJavadoc = true;\r", "-               }\r", "-\r", "-               tmpToken = tmpToken.specialToken;\r", "-               }\r", "-             */\r", "-\r", "-             if (_bReturn)\r", "-             {\r", "-                 _cyc--;\r", "-             }\r", "-             _ncss++;\r", "-             Util.debug( \"MethodDeclaration()._ncss++\" );\r", "-\r", "-             FunctionMetric functionMetrics = new FunctionMetric();\r", "-             functionMetrics.name = _sPackage + _sClass + _sFunction;\r", "-             functionMetrics.ncss = _ncss - oldNcss;\r", "-             functionMetrics.ccn = _cyc;\r", "-             functionMetrics.javadocs = jvdc;\r", "-\r", "-             // added by SMS\r", "-             functionMetrics.javadocsLn = 0; //jvdcLines;\r", "-             functionMetrics.singleLn = 0; //JavaParserTokenManager._iSingleComments - oldSingle;\r", "-             functionMetrics.multiLn = 0; //JavaParserTokenManager._iMultiComments - oldMulti;\r", "-             //\r", "-\r", "-             // specially added for Cobertura\r", "-             // Commenting out for now until the rest of patch 2353196 is applied.\r", "-             //functionMetrics.beginLine = (new Integer(beginLine));\r", "-             //functionMetrics.endLine = (new Integer(endLine));\r", "-\r", "-             _vFunctions.add(functionMetrics);\r", "-             _sFunction = sOldFunction;\r", "-             _functions = oldFunctions + 1;\r", "-             _cyc = oldcyc;\r", "-             _bReturn = bOldReturn;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                _tmpToken = null;\r", "-                //\r", "-\r", "-  }\r", "+", "+  final public void MethodDeclaration() throws ParseException {", "+    int oldNcss = _ncss;", "+    int oldFunctions = _functions;", "+    String sOldFunction = _sFunction;", "+    int oldcyc = _cyc;", "+    boolean bOldReturn = _bReturn;", "+    Token tmpToken = null;", "+    int jvdc = 0;", "+", "+    // added by SMS", "+    int jvdcLines = 0;", "+    int oldSingle;", "+    int oldMulti;", "+    boolean bPublic = false;", "+    //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        Token myToken = null;", "+        _tmpToken=null;", "+        //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        FunctionMetric functionMetrics = new FunctionMetric();", "+        functionMetrics.firstLine = JavaParserTokenManager.nbligne;", "+    if ( _tmpToken != null )", "+    {", "+        tmpToken = _tmpToken;", "+    }", "+    label_29:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case AT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[61] = jj_gen;", "+        break label_29;", "+      }", "+         myToken = getToken(1);", "+      Annotation();", "+      if ( tmpToken == null ) {", "+", "+          //tmpToken = getToken( 0 ); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                tmpToken = myToken;", "+                //", "+      }", "+    }", "+    label_30:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case FINAL:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+        ;", "+        break;", "+      default:", "+        jj_la1[62] = jj_gen;", "+        break label_30;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case PUBLIC:", "+        jj_consume_token(PUBLIC);", "+               bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PROTECTED:", "+        jj_consume_token(PROTECTED);", "+                    bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PRIVATE:", "+        jj_consume_token(PRIVATE);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case STATIC:", "+        jj_consume_token(STATIC);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case ABSTRACT:", "+        jj_consume_token(ABSTRACT);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case FINAL:", "+        jj_consume_token(FINAL);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case NATIVE:", "+        jj_consume_token(NATIVE);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case SYNCHRONIZED:", "+        jj_consume_token(SYNCHRONIZED);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case TESTAAAA:", "+        jj_consume_token(TESTAAAA);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      default:", "+        jj_la1[63] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+    label_31:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case AT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[64] = jj_gen;", "+        break label_31;", "+      }", "+      Annotation();", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[65] = jj_gen;", "+      ;", "+    }", "+               _tmpResultToken = null;", "+    ResultType();", "+            if ( tmpToken == null )", "+            {", "+                tmpToken = _tmpResultToken;", "+                if ( tmpToken == null )", "+                {", "+                    tmpToken = getToken( 0 );", "+                }", "+                Util.debug( \"result type tmpToken: \" + tmpToken );", "+            }", "+    MethodDeclarator();", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case THROWS:", "+      jj_consume_token(THROWS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[66] = jj_gen;", "+      ;", "+    }", "+                _cyc = 1;", "+                _bReturn = false;", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LBRACE:", "+      Block();", "+      break;", "+    case SEMICOLON:", "+      jj_consume_token(SEMICOLON);", "+      break;", "+    default:", "+      jj_la1[67] = jj_gen;", "+      jj_consume_token(-1);", "+      throw new ParseException();", "+    }", "+  // added by SMS", "+  {", "+      Util.debug( \"Token: \" + String.valueOf( tmpToken.image ) );", "+      while( tmpToken.specialToken != null )", "+      {", "+          Util.debug( \"Token comment: \" + String.valueOf( tmpToken.specialToken.image ) );", "+          if ( tmpToken.specialToken.image.startsWith( \"/**\" ) )", "+          {", "+              _javadocs++;", "+              Util.debug( \"MethodDeclaration()._javadocs++\" );", "+              jvdc++;", "+              if ((bPublic && _bPublic) || _bPrivate) {", "+                  Util.debug( \"_jvdc++\" );", "+                  _jvdc++;", "+                  jvdcLines = JavaParserTokenManager._iMultiCommentsLast;", "+                  _jvdcLines += jvdcLines;", "+                  JavaParserTokenManager._iFormalComments += jvdcLines;", "+              }", "+              JavaParserTokenManager._iMultiComments -= jvdcLines;", "+              break;", "+          }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {", "+              jvdcLines = 0;", "+              break;", "+          }", "+", "+          //System.out.println(\"\\n\"+tmpToken.specialToken.image);", "+", "+          tmpToken = tmpToken.specialToken;", "+      }", "+", "+      oldSingle = JavaParserTokenManager._iSingleComments;", "+      oldMulti = JavaParserTokenManager._iMultiComments;", "+  }", "+", "+", "+             // removed by ccl", "+             /*", "+             while( tmpToken.specialToken != null ) {", "+                 if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+                     jvdc++;", "+                     _javadocs++;", "+                 }", "+                 tmpToken = tmpToken.specialToken;", "+             }", "+             */", "+             // removed by SMS", "+             /*", "+               while( tmpToken.specialToken != null ) {", "+               if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+               jvdc++;", "+               _javadocs++;", "+               _bJavadoc = true;", "+               }", "+", "+               tmpToken = tmpToken.specialToken;", "+               }", "+             */", "+", "+             if (_bReturn)", "+             {", "+                 _cyc--;", "+             }", "+             _ncss++;", "+             Util.debug( \"MethodDeclaration()._ncss++\" );", "+", "+             //FunctionMetric functionMetrics = new FunctionMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+             functionMetrics.name = _sPackage + _sClass + _sFunction;", "+             functionMetrics.ncss = _ncss - oldNcss;", "+             functionMetrics.ccn = _cyc;", "+             functionMetrics.javadocs = jvdc;", "+", "+             // added by SMS", "+             functionMetrics.javadocsLn = 0; //jvdcLines;", "+             functionMetrics.singleLn = 0; //JavaParserTokenManager._iSingleComments - oldSingle;", "+             functionMetrics.multiLn = 0; //JavaParserTokenManager._iMultiComments - oldMulti;", "+             //", "+", "+             // specially added for Cobertura", "+             // Commenting out for now until the rest of patch 2353196 is applied.", "+             //functionMetrics.beginLine = (new Integer(beginLine));", "+             //functionMetrics.endLine = (new Integer(endLine));", "+", "+             _vFunctions.add(functionMetrics);", "+             _sFunction = sOldFunction;", "+             _functions = oldFunctions + 1;", "+             _cyc = oldcyc;", "+             _bReturn = bOldReturn;", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                _tmpToken = null;", "+                //", "+", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8957aa1a2543c703d72ef036d0308cd7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \r   final public void MethodDeclaration() throws ParseException", "signatureAfterChange": "    final public void MethodDeclaration() throws ParseException", "diff": ["-\r", "-  final public void MethodDeclaration() throws ParseException {\r", "-    int oldNcss = _ncss;\r", "-    int oldFunctions = _functions;\r", "-    String sOldFunction = _sFunction;\r", "-    int oldcyc = _cyc;\r", "-    boolean bOldReturn = _bReturn;\r", "-    Token tmpToken = null;\r", "-    int jvdc = 0;\r", "-\r", "-    // added by SMS\r", "-    int jvdcLines = 0;\r", "-    int oldSingle;\r", "-    int oldMulti;\r", "-    boolean bPublic = false;\r", "-    //\r", "-\r", "-        //Added by REYNAUD Sebastien (LOGICA)\r", "-        Token myToken = null;\r", "-        _tmpToken=null;\r", "-    if ( _tmpToken != null )\r", "-    {\r", "-        tmpToken = _tmpToken;\r", "-    }\r", "-    label_29:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case AT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[61] = jj_gen;\r", "-        break label_29;\r", "-      }\r", "-         myToken = getToken(1);\r", "-      Annotation();\r", "-      if ( tmpToken == null ) {\r", "-\r", "-          //tmpToken = getToken( 0 ); //Removed by REYNAUD Sebastien (LOGICA)\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                tmpToken = myToken;\r", "-                //\r", "-      }\r", "-    }\r", "-    label_30:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case FINAL:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[62] = jj_gen;\r", "-        break label_30;\r", "-      }\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case PUBLIC:\r", "-        jj_consume_token(PUBLIC);\r", "-               bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PROTECTED:\r", "-        jj_consume_token(PROTECTED);\r", "-                    bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PRIVATE:\r", "-        jj_consume_token(PRIVATE);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case STATIC:\r", "-        jj_consume_token(STATIC);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case ABSTRACT:\r", "-        jj_consume_token(ABSTRACT);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case FINAL:\r", "-        jj_consume_token(FINAL);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case NATIVE:\r", "-        jj_consume_token(NATIVE);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case SYNCHRONIZED:\r", "-        jj_consume_token(SYNCHRONIZED);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case TESTAAAA:\r", "-        jj_consume_token(TESTAAAA);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      default:\r", "-        jj_la1[63] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-    label_31:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case AT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[64] = jj_gen;\r", "-        break label_31;\r", "-      }\r", "-      Annotation();\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[65] = jj_gen;\r", "-      ;\r", "-    }\r", "-               _tmpResultToken = null;\r", "-    ResultType();\r", "-            if ( tmpToken == null )\r", "-            {\r", "-                tmpToken = _tmpResultToken;\r", "-                if ( tmpToken == null )\r", "-                {\r", "-                    tmpToken = getToken( 0 );\r", "-                }\r", "-                Util.debug( \"result type tmpToken: \" + tmpToken );\r", "-            }\r", "-    MethodDeclarator();\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case THROWS:\r", "-      jj_consume_token(THROWS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[66] = jj_gen;\r", "-      ;\r", "-    }\r", "-                _cyc = 1;\r", "-                _bReturn = false;\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LBRACE:\r", "-      Block();\r", "-      break;\r", "-    case SEMICOLON:\r", "-      jj_consume_token(SEMICOLON);\r", "-      break;\r", "-    default:\r", "-      jj_la1[67] = jj_gen;\r", "-      jj_consume_token(-1);\r", "-      throw new ParseException();\r", "-    }\r", "-  // added by SMS\r", "-  {\r", "-      Util.debug( \"Token: \" + String.valueOf( tmpToken.image ) );\r", "-      while( tmpToken.specialToken != null )\r", "-      {\r", "-          Util.debug( \"Token comment: \" + String.valueOf( tmpToken.specialToken.image ) );\r", "-          if ( tmpToken.specialToken.image.startsWith( \"/**\" ) )\r", "-          {\r", "-              _javadocs++;\r", "-              Util.debug( \"MethodDeclaration()._javadocs++\" );\r", "-              jvdc++;\r", "-              if ((bPublic && _bPublic) || _bPrivate) {\r", "-                  Util.debug( \"_jvdc++\" );\r", "-                  _jvdc++;\r", "-                  jvdcLines = JavaParserTokenManager._iMultiCommentsLast;\r", "-                  _jvdcLines += jvdcLines;\r", "-                  JavaParserTokenManager._iFormalComments += jvdcLines;\r", "-              }\r", "-              JavaParserTokenManager._iMultiComments -= jvdcLines;\r", "-              break;\r", "-          }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {\r", "-              jvdcLines = 0;\r", "-              break;\r", "-          }\r", "-\r", "-          //System.out.println(\"\\n\"+tmpToken.specialToken.image);\r", "-\r", "-          tmpToken = tmpToken.specialToken;\r", "-      }\r", "-\r", "-      oldSingle = JavaParserTokenManager._iSingleComments;\r", "-      oldMulti = JavaParserTokenManager._iMultiComments;\r", "-  }\r", "-\r", "-\r", "-             // removed by ccl\r", "-             /*\r", "-             while( tmpToken.specialToken != null ) {\r", "-                 if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-                     jvdc++;\r", "-                     _javadocs++;\r", "-                 }\r", "-                 tmpToken = tmpToken.specialToken;\r", "-             }\r", "-             */\r", "-             // removed by SMS\r", "-             /*\r", "-               while( tmpToken.specialToken != null ) {\r", "-               if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-               jvdc++;\r", "-               _javadocs++;\r", "-               _bJavadoc = true;\r", "-               }\r", "-\r", "-               tmpToken = tmpToken.specialToken;\r", "-               }\r", "-             */\r", "-\r", "-             if (_bReturn)\r", "-             {\r", "-                 _cyc--;\r", "-             }\r", "-             _ncss++;\r", "-             Util.debug( \"MethodDeclaration()._ncss++\" );\r", "-\r", "-             FunctionMetric functionMetrics = new FunctionMetric();\r", "-             functionMetrics.name = _sPackage + _sClass + _sFunction;\r", "-             functionMetrics.ncss = _ncss - oldNcss;\r", "-             functionMetrics.ccn = _cyc;\r", "-             functionMetrics.javadocs = jvdc;\r", "-\r", "-             // added by SMS\r", "-             functionMetrics.javadocsLn = 0; //jvdcLines;\r", "-             functionMetrics.singleLn = 0; //JavaParserTokenManager._iSingleComments - oldSingle;\r", "-             functionMetrics.multiLn = 0; //JavaParserTokenManager._iMultiComments - oldMulti;\r", "-             //\r", "-\r", "-             // specially added for Cobertura\r", "-             // Commenting out for now until the rest of patch 2353196 is applied.\r", "-             //functionMetrics.beginLine = (new Integer(beginLine));\r", "-             //functionMetrics.endLine = (new Integer(endLine));\r", "-\r", "-             _vFunctions.add(functionMetrics);\r", "-             _sFunction = sOldFunction;\r", "-             _functions = oldFunctions + 1;\r", "-             _cyc = oldcyc;\r", "-             _bReturn = bOldReturn;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                _tmpToken = null;\r", "-                //\r", "-\r", "-  }\r", "+", "+  final public void MethodDeclaration() throws ParseException {", "+    int oldNcss = _ncss;", "+    int oldFunctions = _functions;", "+    String sOldFunction = _sFunction;", "+    int oldcyc = _cyc;", "+    boolean bOldReturn = _bReturn;", "+    Token tmpToken = null;", "+    int jvdc = 0;", "+", "+    // added by SMS", "+    int jvdcLines = 0;", "+    int oldSingle;", "+    int oldMulti;", "+    boolean bPublic = false;", "+    //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        Token myToken = null;", "+        _tmpToken=null;", "+        //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        FunctionMetric functionMetrics = new FunctionMetric();", "+        functionMetrics.firstLine = JavaParserTokenManager.nbligne;", "+    if ( _tmpToken != null )", "+    {", "+        tmpToken = _tmpToken;", "+    }", "+    label_29:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case AT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[61] = jj_gen;", "+        break label_29;", "+      }", "+         myToken = getToken(1);", "+      Annotation();", "+      if ( tmpToken == null ) {", "+", "+          //tmpToken = getToken( 0 ); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                tmpToken = myToken;", "+                //", "+      }", "+    }", "+    label_30:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case FINAL:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+        ;", "+        break;", "+      default:", "+        jj_la1[62] = jj_gen;", "+        break label_30;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case PUBLIC:", "+        jj_consume_token(PUBLIC);", "+               bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PROTECTED:", "+        jj_consume_token(PROTECTED);", "+                    bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PRIVATE:", "+        jj_consume_token(PRIVATE);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case STATIC:", "+        jj_consume_token(STATIC);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case ABSTRACT:", "+        jj_consume_token(ABSTRACT);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case FINAL:", "+        jj_consume_token(FINAL);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case NATIVE:", "+        jj_consume_token(NATIVE);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case SYNCHRONIZED:", "+        jj_consume_token(SYNCHRONIZED);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case TESTAAAA:", "+        jj_consume_token(TESTAAAA);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      default:", "+        jj_la1[63] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+    label_31:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case AT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[64] = jj_gen;", "+        break label_31;", "+      }", "+      Annotation();", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[65] = jj_gen;", "+      ;", "+    }", "+               _tmpResultToken = null;", "+    ResultType();", "+            if ( tmpToken == null )", "+            {", "+                tmpToken = _tmpResultToken;", "+                if ( tmpToken == null )", "+                {", "+                    tmpToken = getToken( 0 );", "+                }", "+                Util.debug( \"result type tmpToken: \" + tmpToken );", "+            }", "+    MethodDeclarator();", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case THROWS:", "+      jj_consume_token(THROWS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[66] = jj_gen;", "+      ;", "+    }", "+                _cyc = 1;", "+                _bReturn = false;", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LBRACE:", "+      Block();", "+      break;", "+    case SEMICOLON:", "+      jj_consume_token(SEMICOLON);", "+      break;", "+    default:", "+      jj_la1[67] = jj_gen;", "+      jj_consume_token(-1);", "+      throw new ParseException();", "+    }", "+  // added by SMS", "+  {", "+      Util.debug( \"Token: \" + String.valueOf( tmpToken.image ) );", "+      while( tmpToken.specialToken != null )", "+      {", "+          Util.debug( \"Token comment: \" + String.valueOf( tmpToken.specialToken.image ) );", "+          if ( tmpToken.specialToken.image.startsWith( \"/**\" ) )", "+          {", "+              _javadocs++;", "+              Util.debug( \"MethodDeclaration()._javadocs++\" );", "+              jvdc++;", "+              if ((bPublic && _bPublic) || _bPrivate) {", "+                  Util.debug( \"_jvdc++\" );", "+                  _jvdc++;", "+                  jvdcLines = JavaParserTokenManager._iMultiCommentsLast;", "+                  _jvdcLines += jvdcLines;", "+                  JavaParserTokenManager._iFormalComments += jvdcLines;", "+              }", "+              JavaParserTokenManager._iMultiComments -= jvdcLines;", "+              break;", "+          }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {", "+              jvdcLines = 0;", "+              break;", "+          }", "+", "+          //System.out.println(\"\\n\"+tmpToken.specialToken.image);", "+", "+          tmpToken = tmpToken.specialToken;", "+      }", "+", "+      oldSingle = JavaParserTokenManager._iSingleComments;", "+      oldMulti = JavaParserTokenManager._iMultiComments;", "+  }", "+", "+", "+             // removed by ccl", "+             /*", "+             while( tmpToken.specialToken != null ) {", "+                 if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+                     jvdc++;", "+                     _javadocs++;", "+                 }", "+                 tmpToken = tmpToken.specialToken;", "+             }", "+             */", "+             // removed by SMS", "+             /*", "+               while( tmpToken.specialToken != null ) {", "+               if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+               jvdc++;", "+               _javadocs++;", "+               _bJavadoc = true;", "+               }", "+", "+               tmpToken = tmpToken.specialToken;", "+               }", "+             */", "+", "+             if (_bReturn)", "+             {", "+                 _cyc--;", "+             }", "+             _ncss++;", "+             Util.debug( \"MethodDeclaration()._ncss++\" );", "+", "+             //FunctionMetric functionMetrics = new FunctionMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+             functionMetrics.name = _sPackage + _sClass + _sFunction;", "+             functionMetrics.ncss = _ncss - oldNcss;", "+             functionMetrics.ccn = _cyc;", "+             functionMetrics.javadocs = jvdc;", "+", "+             // added by SMS", "+             functionMetrics.javadocsLn = 0; //jvdcLines;", "+             functionMetrics.singleLn = 0; //JavaParserTokenManager._iSingleComments - oldSingle;", "+             functionMetrics.multiLn = 0; //JavaParserTokenManager._iMultiComments - oldMulti;", "+             //", "+", "+             // specially added for Cobertura", "+             // Commenting out for now until the rest of patch 2353196 is applied.", "+             //functionMetrics.beginLine = (new Integer(beginLine));", "+             //functionMetrics.endLine = (new Integer(endLine));", "+", "+             _vFunctions.add(functionMetrics);", "+             _sFunction = sOldFunction;", "+             _functions = oldFunctions + 1;", "+             _cyc = oldcyc;", "+             _bReturn = bOldReturn;", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                _tmpToken = null;", "+                //", "+", "+  }"]}]}
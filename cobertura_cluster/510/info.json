{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8042a8567a063024398f505b22d4a23b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d84fbac2c5db073b7916e71d4488e4a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/xml/XMLReportTest.java", "commitBeforeChange": "a4bb79761e85755820ce5a83120572bd443a4297", "commitAfterChange": "5568cf6cc222084bbc581c7ef8cec80eafe6b510", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testXMLReportValidity() throws Exception", "signatureAfterChange": "  \tpublic void testXMLReportValidity() throws Exception", "diff": ["-", "-\tpublic void testXMLReportValidity() throws Exception", "-\t{", "-\t\tString[] args;", "-", "-\t\t// Serialize the current coverage data to disk", "-\t\tProjectData.saveGlobalProjectData();", "-\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "-\t\t\t\t.getAbsolutePath();", "-", "-\t\t// Then we need to generate the XML report", "-\t\targs = new String[] { \"--format\", \"xml\", \"--datafile\", dataFileName, \"--destination\",", "-\t\t\t\tpathToTestOutput, pathToSourceCode };", "-\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "-", "+\tpublic void testXMLReportValidity() throws Exception", "+\t{", "+\t\tString[] args;", "+", "+\t\t// Serialize the current coverage data to disk", "+\t\tProjectData.saveGlobalProjectData();", "+\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "+\t\t\t\t.getAbsolutePath();", "+", "+\t\t// Then we need to generate the XML report", "+\t\targs = new String[] { \"--format\", \"xml\", \"--datafile\", dataFileName, \"--destination\",", "+\t\t\t\tpathToTestOutput, pathToSourceCode };", "+\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "+\t\t", "+\t\tvalidateReport( pathToXMLReport);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ffa406e277fe8b07c553108a1de7d7d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/JUnitXMLHelper.java", "commitBeforeChange": "1e8af18cde472762ef39445f1ab4213c5ba91289", "commitAfterChange": "9a1f242cd64dfc68f804c44562c72e3200447563", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void validate(File file) throws FileNotFoundException, IOException, \t\t\tParserConfigurationException, SAXException", "signatureAfterChange": "  \tpublic static Document readXmlFile(File file, boolean validate) throws FileNotFoundException, \t\t\tIOException, JDOMException", "diff": ["-\tpublic static void validate(File file) throws FileNotFoundException, IOException,", "-\t\t\tParserConfigurationException, SAXException", "+\tpublic static Document readXmlFile(File file, boolean validate) throws FileNotFoundException,", "+\t\t\tIOException, JDOMException", "-\t\tSystem.out.println(\"Validating \" + file.getAbsolutePath());", "+\t\tSystem.out.println(\"Reading \" + file.getAbsolutePath());", "-\t\t// Create a validating XML document parser", "-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-\t\tfactory.setValidating(true);", "-\t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();", "-\t\tdocumentBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(new File(BASEDIR,", "-\t\t\t\t\"etc/dtds\")));", "-\t\tdocumentBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "-", "-\t\t// Parse the XML report", "-\t\tInputStream inputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tdocumentBuilder.parse(inputStream);", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t\tinputStream.close();", "-\t\t}", "+\t\t// First create an XML document parser", "+\t\tSAXBuilder saxBuilder = new SAXBuilder();", "+\t\tsaxBuilder.setValidation(validate);", "+\t\tsaxBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(", "+\t\t\t\tnew File(BASEDIR, \"/etc/dtds\")));", "+\t\tsaxBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "+\t\treturn saxBuilder.build(file);"]}]}
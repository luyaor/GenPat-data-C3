{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79a99367739d1522ef24b96859c3ed23", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "094948086c6b6b8de26010bce192b413", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileLocker.java", "commitBeforeChange": "b593b3e400cea2328d827b3a670dd0bf6cc7fee1", "commitAfterChange": "8227bc61964b9dbb4bcbf570622aa907f806676d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean lock()", "signatureAfterChange": " \tpublic boolean lock()", "diff": ["+\t\tif (System.getProperty(\"java.version\").startsWith(\"1.3\"))", "+\t\t{", "+\t\t\treturn true;", "+\t\t}", "+", "-\t\t\tlockChannel = new RandomAccessFile(lockFile, \"rw\").getChannel();", "+\t\t\tClass aClass = Class.forName(\"java.io.RandomAccessFile\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"getChannel\", (Class[])null);", "+\t\t\tlockChannel = method.invoke(new RandomAccessFile(lockFile, \"rw\"), (Object[])null);", "+\t\tcatch (InvocationTargetException e)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to get lock channel for \" + lockFile.getAbsolutePath()", "+\t\t\t\t\t+ \": \" + e.getLocalizedMessage());", "+\t\t\treturn false;", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to execute RandomAccessFile.getChannel() using reflection: \"", "+\t\t\t\t\t+ t.getLocalizedMessage());", "+\t\t\tt.printStackTrace();", "+\t\t}", "-\t\t\tlock = lockChannel.lock();", "+\t\t\tClass aClass = Class.forName(\"java.nio.channels.FileChannel\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"lock\", (Class[])null);", "+\t\t\tlock = method.invoke(lockChannel, (Object[])null);", "-\t\tcatch (IOException e)", "+\t\tcatch (InvocationTargetException e)", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to execute FileChannel.lock() using reflection: \"", "+\t\t\t\t\t+ t.getLocalizedMessage());", "+\t\t\tt.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb9dc12a2057b72bdd96d93c56c48e5", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coverage/Main.java", "commitBeforeChange": "c7fb0b8cc80d7d214ae05e943100e9521802d5dd", "commitAfterChange": "7f47a6101d550eed225cbc5d96f9824ad91cbdc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-", "+\t//       exists and is newer than the input file.", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"file: \" + file.getAbsolutePath());", "-\t\t}", "-", "-\t\t\t{", "-\t\t\t}", "+\t\t\treturn;", "-\t\telse if (isClass(file))", "+", "+\t\tif (!isClass(file))", "-\t\t\tinstrument(file);", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (logger.isDebugEnabled())", "+\t\t{", "+\t\t\tlogger.debug(\"instrumenting \" + file.getAbsolutePath());", "+\t\t}", "+", "+\t\tInputStream inputStream = null;", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tinputStream = new FileInputStream(file);", "+\t\t\tClassReader cr = new ClassReader(inputStream);", "+\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\tClassInstrumenter cv = new ClassInstrumenter(cw);", "+\t\t\tcr.accept(cv, false);", "+\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+", "+\t\t\tFile outputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t+ \".class\");", "+\t\t\toutputFile.getParentFile().mkdirs();", "+\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\toutputStream.write(instrumentedClass);", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger", "+\t\t\t\t\t.warn(\"Unable to instrument file \"", "+\t\t\t\t\t\t\t+ file.getAbsolutePath());", "+\t\t\tlogger.info(e);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (inputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tinputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (outputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\toutputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94499d3d3a2f34b2ab62aa6f0c4b5643", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileFinder.java", "commitBeforeChange": "7a6cf9ee7c01328fd060bf78a56186190300c13b", "commitAfterChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 2, "signatureBeforeChange": "      \tprivate synchronized void change()", "signatureAfterChange": " \tpublic File getFileForSource(String fileName) throws IOException", "diff": ["-    ", "-\tprivate synchronized void change() {", "-\t\tchanged = true;", "-\t}", "+\t */", "+\tpublic File getFileForSource(String fileName) throws IOException {", "+\t\t// Correct file name", "+\t\tif( LOGGER.isDebugEnabled())", "+\t\t\tLOGGER.debug( \"Searching for file, name=[\" + fileName + \"]\");", "+\t\tfileName = getCorrectedPath( fileName);", "+", "+\t\t// Check inside sourceDirectories", "+\t\tfor( Iterator it=sourceDirectories.iterator(); it.hasNext();) {", "+\t\t\tString directory = (String)it.next();", "+\t\t\tFile file = new File( directory, fileName);", "+\t\t\tif( file.isFile()) {", "+\t\t\t\tLOGGER.debug( \"Found inside sourceDirectories\");", "+\t\t\t\treturn file;", "+\t\t// Check inside sourceFilesMap", "+\t\tfor( Iterator it=sourceFilesMap.keySet().iterator(); it.hasNext();) {", "+\t\t\tString directory = (String)it.next();", "+\t\t\tSet container = (Set) sourceFilesMap.get(directory);", "+\t\t\tif( !container.contains( fileName))", "+\t\t\t\tcontinue;", "+\t\t\tFile file = new File( directory, fileName);", "+\t\t\tif( file.isFile()) {", "+\t\t\t\tLOGGER.debug( \"Found inside sourceFilesMap\");", "+\t\t\t\treturn file;", "+\t\t\t}", "+\t\t}", "+", "+\t\t// Have not found? Throw an error.", "+\t\tLOGGER.debug( \"File not found\");", "+\t\tthrow new IOException( \"Cannot find source file, name=[\"+fileName+\"]\");", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e625472dec2327371e6cf647619d96f4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/LineDataTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testGetNumbers()", "signatureAfterChange": "  \tpublic void testGetNumbers()", "diff": ["-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\ta.setBranch(true);", "+\t\ta.addJump(0);", "+\t\ta.addJump(1);", "-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tassertEquals(1, a.getNumberOfValidBranches());", "+\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "-\t\t\tassertEquals(1, a.getBranchCoverageRate(), 0);", "+\t\t\tassertEquals(0, a.getBranchCoverageRate(), 0);", "-\t\t\tassertEquals(1, a.getNumberOfCoveredBranches());", "-\t\t\tassertEquals(1, a.getNumberOfValidBranches());", "+\t\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "+\t\t\tassertEquals(4, a.getNumberOfValidBranches());", "-\t\ta.setBranch(false);", "+\t\ta.touchJump(0, true);", "+\t\tassertEquals(0.25, a.getBranchCoverageRate(), 0);", "+\t\tassertEquals(1, a.getLineCoverageRate(), 0);", "+\t\tassertEquals(1, a.getNumberOfCoveredLines());", "+\t\tassertEquals(1, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "+\t\tassertEquals(1, a.getNumberOfValidLines());", "+", "+\t\ta.touchJump(1, false);", "+\t\tassertEquals(0.5, a.getBranchCoverageRate(), 0);", "+\t\tassertEquals(1, a.getLineCoverageRate(), 0);", "+\t\tassertEquals(1, a.getNumberOfCoveredLines());", "+\t\tassertEquals(2, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "+\t\tassertEquals(1, a.getNumberOfValidLines());", "+", "+\t\ta.touchJump(1, true);", "+\t\tassertEquals(0.75, a.getBranchCoverageRate(), 0);", "+\t\tassertEquals(1, a.getLineCoverageRate(), 0);", "+\t\tassertEquals(1, a.getNumberOfCoveredLines());", "+\t\tassertEquals(3, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());", "+\t\tassertEquals(1, a.getNumberOfValidLines());", "+", "+\t\ta.touchJump(0, false);", "-\t\tassertEquals(0, a.getNumberOfCoveredBranches());", "-\t\tassertEquals(0, a.getNumberOfValidBranches());", "+\t\tassertEquals(4, a.getNumberOfCoveredBranches());", "+\t\tassertEquals(4, a.getNumberOfValidBranches());"]}]}
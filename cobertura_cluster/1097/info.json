{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32daa8196c35db634f4a931b0277cd7b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eeb30a70dd19184500934598c01f34b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/ant/InstrumentTask.java", "commitBeforeChange": "4558077bc3fa9bafa9125049db80cf9c99da089f", "commitAfterChange": "f21d7d6c791a9d50e30e19d77af0c8b3f2897c6c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void execute() throws BuildException", "signatureAfterChange": "  \tpublic void execute() throws BuildException", "diff": ["-\tpublic void execute() throws BuildException {", "+", "+\tpublic void execute() throws BuildException", "+\t{", "-\t\t\t// ignoreRegex.setRegex() is never called, but that's ok", "-\t\t\t// because ant sets it somehow, I think", "+\t\t\tfor (int i = 0; i < includeClassesRegexs.size(); i++) {", "+\t\t\t\tIncludeClasses includeClassesRegex = (IncludeClasses)includeClassesRegexs.get(i);", "+\t\t\t\tbuilder.addArg(\"--includeClasses\", includeClassesRegex.getRegex());", "+\t\t\t}", "+", "+\t\t\tfor (int i = 0; i < excludeClassesRegexs.size(); i++) {", "+\t\t\t\tExcludeClasses excludeClassesRegex = (ExcludeClasses)excludeClassesRegexs.get(i);", "+\t\t\t\tbuilder.addArg(\"--excludeClasses\", excludeClassesRegex.getRegex());", "+\t\t\t}", "+", "+\t\t\tif (instrumentationClasspath != null) {", "+\t\t\t\tprocessInstrumentationClasspath();", "+\t\t\t}", "+\t\tif (forkedJVMDebugPort != null && forkedJVMDebugPort.intValue() > 0) {", "+\t\t\tgetJava().createJvmarg().setValue(\"-Xdebug\");", "+\t\t\tgetJava().createJvmarg().setValue(\"-Xrunjdwp:transport=dt_socket,address=\" + forkedJVMDebugPort + \",server=y,suspend=y\");", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13bdbab79d4debf67ffcd6d47cbbdeb", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/check/CheckCoverageMain.java", "commitBeforeChange": "e46b77023c7e97f00c714d3a8a1471061b55f173", "commitAfterChange": "0e43adcdea83849bab574d10e4840e5318cc7602", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static int checkCoverageTypeStatusAndLogMessage( \t\t\tCoverageResultEntry entry, int branchStatus, int lineStatus)", "signatureAfterChange": "  \tprivate static int checkCoverageTypeStatusAndLogMessage( \t\t\tCoverageResultEntry entry, int branchStatus, int lineStatus)", "diff": ["-\t\t\t\t\t.error(String", "-\t\t\t\t\t\t\t.format(", "-\t\t\t\t\t\t\t\t\t\"%s failed coverage check. Branch coverage rate of %s is below %s\",", "-\t\t\t\t\t\t\t\t\tentry.getName(),", "-\t\t\t\t\t\t\t\t\tentry.getCurrentCoverage(), entry", "-\t\t\t\t\t\t\t\t\t\t\t.getExpectedCoverage()));", "+\t\t\t\t\t.error(entry.getName() +", "+\t\t\t\t\t\t   \" failed coverage check. Branch coverage rate of \"+", "+\t\t\t\t\t\t   percentage(entry.getCurrentCoverage()) +", "+\t\t\t\t\t       \"% is below \" +", "+\t\t\t\t\t\t   percentage(entry.getExpectedCoverage()) +", "+\t\t\t\t\t\t   \"%\");", "-\t\t\t\t\t.error(String", "-\t\t\t\t\t\t\t.format(", "-\t\t\t\t\t\t\t\t\t\"%s failed coverage check. Line coverage rate of %s is below %s\",", "-\t\t\t\t\t\t\t\t\tentry.getName(),", "-\t\t\t\t\t\t\t\t\tentry.getCurrentCoverage(), entry", "-\t\t\t\t\t\t\t\t\t\t\t.getExpectedCoverage()));", "+\t\t\t\t\t.error(entry.getName() +", "+\t\t\t\t\t\t   \" failed coverage check. Line coverage rate of \" +", "+\t\t\t\t\t\t   percentage(entry.getCurrentCoverage()) +", "+\t\t\t\t\t       \"% is below \" +", "+\t\t\t\t\t\t   percentage(entry.getExpectedCoverage()) +", "+\t\t\t\t\t       \"%\");"]}]}
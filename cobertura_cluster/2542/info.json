{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11dc848f3e64fa24a68a7290e898674e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e4bff4bd55bb41a767ad7ca60780c6a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/merge/Main.java", "commitBeforeChange": "6a303122a10f7fb224550410433e3c73cc07f939", "commitAfterChange": "918d96136e3b4ad59ee8aedd80494eb94f76c036", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(String[] args)", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tFile baseDir = null;", "-\t\tList filesToMerge = new ArrayList();", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "+", "+\t\tString baseDir = null;", "-\t\t\tif (args[i].equals(\"--datafile\"))", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--basedir\"))", "-\t\t\t\tbaseDir = new File(args[++i]);", "-\t\t\telse", "-\t\t\t\tfilesToMerge.add(new File(baseDir, args[i]));", "+\t\t\tif (args[i].equals(\"--datafile\")) {", "+\t\t\t\tbuilder.setDataFile(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--basedir\")) {", "+\t\t\t\tbaseDir = args[++i];", "+\t\t\t\tbuilder.setBaseDirectory(baseDir);", "+\t\t\t} else {", "+\t\t\t\tbuilder.addFileToMerge(new File(baseDir, args[i])", "+\t\t\t\t\t\t.getAbsolutePath());", "+\t\t\t}", "-\t\t// Load coverage data", "-\t\tProjectData projectData = null;", "-\t\tif (dataFile.isFile())", "-\t\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (projectData == null)", "-\t\t\tprojectData = new ProjectData();", "-", "-\t\tif (filesToMerge.isEmpty()) {", "-\t\t\tSystem.err.println(\"Error: No files were specified for merging.\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t// Merge everything", "-\t\tIterator iter = filesToMerge.iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tFile newDataFile = (File) iter.next();", "-\t\t\tProjectData projectDataNew = CoverageDataFileHandler", "-\t\t\t\t\t.loadCoverageData(newDataFile);", "-\t\t\tif (projectDataNew != null)", "-\t\t\t\tprojectData.merge(projectDataNew);", "-\t\t}", "-", "-\t\t// Save the combined data file", "-\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t\tnew Cobertura(builder.build()).merge().saveProjectData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24d87b6920fa25bdb3b2192bca324b4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "8fa89e11a16472d1487034417d5730a6de92e300", "commitAfterChange": "6a303122a10f7fb224550410433e3c73cc07f939", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate int checkPackageCoverage(double packageBranchCoverageRate, \t\t\tdouble packageLineCoverageRate, String packageName, \t\t\tPackageCoverage packageCoverage)", "signatureAfterChange": "  \tprivate int checkCoverageTypeStatusAndLogMessage(CoverageResultEntry entry, \t\t\tint branchStatus, int lineStatus)", "diff": ["+", "+\tprivate int checkCoverageTypeStatusAndLogMessage(CoverageResultEntry entry,", "+\t\t\tint branchStatus, int lineStatus) {", "+\t\tif (entry.getCoverageType().equals(BRANCH)) {", "+\t\t\tlogger", "+\t\t\t\t\t.error(String", "+\t\t\t\t\t\t\t.format(", "+\t\t\t\t\t\t\t\t\t\"%s failed coverage check. Branch coverage rate of %s is below %s\",", "+\t\t\t\t\t\t\t\t\tentry.getName(),", "+\t\t\t\t\t\t\t\t\tentry.getCurrentCoverage(), entry", "+\t\t\t\t\t\t\t\t\t\t\t.getExpectedCoverage()));", "+\t\t\treturn branchStatus;", "+\t\t} else {", "+\t\t\tlogger", "+\t\t\t\t\t.error(String", "+\t\t\t\t\t\t\t.format(", "+\t\t\t\t\t\t\t\t\t\"%s failed coverage check. Line coverage rate of %s is below %s\",", "+\t\t\t\t\t\t\t\t\tentry.getName(),", "+\t\t\t\t\t\t\t\t\tentry.getCurrentCoverage(), entry", "+\t\t\t\t\t\t\t\t\t\t\t.getExpectedCoverage()));", "+\t\t\treturn lineStatus;", "+\t\t}", "+\t}", "-", "-\tprivate int checkPackageCoverage(double packageBranchCoverageRate,", "-\t\t\tdouble packageLineCoverageRate, String packageName,", "-\t\t\tPackageCoverage packageCoverage) {", "-\t\tint exitStatus = 0;", "-\t\tdouble branchCoverage = packageCoverage.getBranchCoverage()", "-\t\t\t\t/ packageCoverage.getBranchCount();", "-\t\tif ((packageCoverage.getBranchCount() > 0)", "-\t\t\t\t&& (packageBranchCoverageRate > branchCoverage)) {", "-\t\t\tSystem.err.println(\"Package \" + packageName", "-\t\t\t\t\t+ \" failed check. Package branch coverage rate of \"", "-\t\t\t\t\t+ percentage(branchCoverage) + \"% is below \"", "-\t\t\t\t\t+ percentage(packageBranchCoverageRate) + \"%\");", "-\t\t\texitStatus |= 32;", "-\t\t}", "-", "-\t\tdouble lineCoverage = packageCoverage.getLineCoverage()", "-\t\t\t\t/ packageCoverage.getLineCount();", "-\t\tif ((packageCoverage.getLineCount() > 0)", "-\t\t\t\t&& (packageLineCoverageRate > lineCoverage)) {", "-\t\t\tSystem.err.println(\"Package \" + packageName", "-\t\t\t\t\t+ \" failed check. Package line coverage rate of \"", "-\t\t\t\t\t+ percentage(lineCoverage) + \"% is below \"", "-\t\t\t\t\t+ percentage(packageLineCoverageRate) + \"%\");", "-\t\t\texitStatus |= 64;", "-\t\t}", "-", "-\t\treturn exitStatus;", "-\t}"]}]}
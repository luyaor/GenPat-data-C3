{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23c3b2bd97afb3f3e88feef66cb122f5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09eee10f47ed5a0d9c3e7d6d65430054", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "commitAfterChange": "c6fd277b28f155d1b35d06833203b627d24523c3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\t\tcoberturaInstrumenter.setIgnoreRegexes(ignoreRegexes);", "-\t\t", "+\t\tcoberturaInstrumenter.setIgnoreRegexes(ignoreRegexes);\t\t", "-\t\t\telse if (args[i].equals(\"--destination\")){", "+\t\t\telse if (args[i].equals(\"--destination\")) {", "-\t\t\t}else if (args[i].equals(\"--ignore\"))", "-\t\t\t{", "+\t\t\t} else if (args[i].equals(\"--ignore\")) {", "-\t\t\telse if (args[i].equals(\"--includeClasses\"))", "-\t\t\t{", "+\t\t\telse if (args[i].equals(\"--includeClasses\")) {", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--excludeClasses\"))", "-\t\t\t{", "+\t\t\t} else if (args[i].equals(\"--excludeClasses\")) {", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tCoberturaFile coberturaFile = new CoberturaFile(baseDir, args[i]);", "-\t\t\t\tfilePaths.add(coberturaFile);", "+\t\t\t} else {", "+\t\t\t\tfilePaths.add(new CoberturaFile(baseDir, args[i]));", "-\t\t// Load coverage data", "-\t\tif (dataFile.isFile()){", "-\t\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\t}else{", "-\t\t\tprojectData = new ProjectData();", "-\t\t};", "-\t\tcoberturaInstrumenter.setProjectData(projectData);", "+\t\t// Load previous coverage data (if exists)", "+\t\tprojectData = dataFile.isFile() ?", "+\t\t    CoverageDataFileHandler.loadCoverageData(dataFile) : new ProjectData();", "+        coberturaInstrumenter.setProjectData(projectData);", "-\t\t", "-\t\t", "-\t\twhile (iter.hasNext())", "-\t\t{", "+\t\twhile (iter.hasNext()) {", "-\t\t\tif (coberturaFile.isArchive())", "-\t\t\t{", "+\t\t\tif (coberturaFile.isArchive()) {", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "+\t\t\t} else {", "-\t\t// Save coverage data", "+\t\t// Save coverage data (ser file with list of touch points, but not hits registered). ", "-//\t\tProjectData.turnOffAutoSave();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ca56a8674c06e4aa7d83255196df6d6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args) throws Throwable", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\tprivate void parseArguments(String[] args) throws Throwable", "-\t{", "+\tprivate void parseArguments(String[] args){", "+\t\tCollection<Pattern> ignoreRegexes = new Vector<Pattern>();", "+\t\tcoberturaInstrumenter.setIgnoreRegexes(ignoreRegexes);", "+\t\t", "+\t\t", "-\t\tList filePaths = new ArrayList();", "+\t\tList<CoberturaFile> filePaths = new ArrayList<CoberturaFile>();", "-\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\telse if (args[i].equals(\"--destination\")){", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t\tcoberturaInstrumenter.setDestinationDirectory(destinationDirectory);", "+\t\t\t}else if (args[i].equals(\"--ignore\"))", "-\t\t\telse if (args[i].equals(\"--ignoreBranches\"))", "+\t\t\t/*else if (args[i].equals(\"--ignoreBranches\"))", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignoreMethodAnnotation\")) {", "-\t\t\t\tignoreMethodAnnotations.add(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignoreTrivial\")) {", "-\t\t\t\tignoreTrivial = true;", "-\t\t\t}", "+\t\t\t}*/", "-\t\t\telse if (args[i].equals(\"--failOnError\"))", "-\t\t\t{", "-\t\t\t\tlogger.setFailOnError(true);", "-\t\t\t}", "+\t\t", "+\t\tProjectData projectData;", "-\t\tif (dataFile.isFile())", "+\t\tif (dataFile.isFile()){", "-\t\tif (projectData == null)", "+\t\t}else{", "+\t\t};", "+\t\tcoberturaInstrumenter.setProjectData(projectData);", "+\t\t", "+\t\t", "-\t\tIterator iter = filePaths.iterator();", "+\t\tIterator<CoberturaFile> iter = filePaths.iterator();", "-\t\t\tCoberturaFile coberturaFile = (CoberturaFile)iter.next();", "+\t\t\tCoberturaFile coberturaFile = iter.next();", "-", "+\t\t", "+//\t\tProjectData.turnOffAutoSave();"]}]}
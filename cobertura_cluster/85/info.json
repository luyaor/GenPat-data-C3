{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "014a4a50f0b51abcf6a1470a7c8c1435", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217d8d46fc39f6ab78087eb0771ce1a2", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass2/BuildClassMapClassVisitor.java", "commitBeforeChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "commitAfterChange": "6f41b309127d9fbf50973998e4a8da088f5c332e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString parent, String[] interfaces)", "signatureAfterChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString parent, String[] interfaces)", "diff": ["-\t\tif (((access & Opcodes.ACC_INTERFACE) != 0)", "-\t\t\t\t|| Arrays.asList(interfaces).contains(Type.getInternalName(HasBeenInstrumented.class))){", "+\t\tif ((access & Opcodes.ACC_INTERFACE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fcc9cff367714e4b7acbbae2c9b2fc0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/InjectCodeClassInstrumenter.java", "commitBeforeChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "commitAfterChange": "6f41b309127d9fbf50973998e4a8da088f5c332e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString supertype, String[] interfaces)", "signatureAfterChange": " \t@Override \tpublic void visit(int version, int access, String name, String signature, \t\t\tString supertype, String[] interfaces)", "diff": ["-\t\t", "-\t\tString[] new_interfaces = appendToTable(interfaces,Type.getInternalName(HasBeenInstrumented.class));\t", "-\t\tsuper.visit(version, access, name, signature, supertype, new_interfaces);\t\t", "-\t\tcodeProvider.generateCountersField(cv);\t\t\t}", "+\t\t\t", "+\t\tsuper.visit(version, access, name, signature, supertype, interfaces);\t\t", "+\t\tcodeProvider.generateCountersField(cv);\t\t"]}]}
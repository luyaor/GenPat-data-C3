{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92ffe04c5c97aed22f45d24b4093cbcc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18407300b7f3c5e7f55ff64bace6ac54", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "17ed1ebc3f2c5731fde05cb16ec241804d74f19e", "commitAfterChange": "ef9a5da8b3641f9dbd994e614f644ecb64c0a580", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void addInstrumentation(FileInfo fileInfo)", "signatureAfterChange": " \tprivate void addInstrumentation(CoberturaFile coberturaFile)", "diff": ["-\tprivate void addInstrumentation(FileInfo fileInfo)", "+\tprivate void addInstrumentation(CoberturaFile coberturaFile)", "-\t\tif (fileInfo.isClass() && shouldInstrument(fileInfo.pathname))", "+\t\tif (coberturaFile.isClass() && shouldInstrument(coberturaFile.pathname))", "-\t\t\taddInstrumentationToSingleClass(fileInfo);", "+\t\t\taddInstrumentationToSingleClass(coberturaFile);", "-\t\telse if (fileInfo.isDirectory())", "+\t\telse if (coberturaFile.isDirectory())", "-\t\t\tString[] contents = fileInfo.list();", "+\t\t\tString[] contents = coberturaFile.list();", "-\t\t\t\tFile relativeFile = new File(fileInfo.pathname, contents[i]);", "-\t\t\t\tFileInfo relativeFileInfo = new FileInfo(fileInfo.baseDir, relativeFile.toString());", "+\t\t\t\tFile relativeFile = new File(coberturaFile.pathname, contents[i]);", "+\t\t\t\tCoberturaFile relativeCoberturaFile = new CoberturaFile(coberturaFile.baseDir,", "+\t\t\t\t\t\trelativeFile.toString());", "-\t\t\t\taddInstrumentation(relativeFileInfo);", "+\t\t\t\taddInstrumentation(relativeCoberturaFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f80eb84c3717ad2a0bf63751db87460", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "4558077bc3fa9bafa9125049db80cf9c99da089f", "commitAfterChange": "f21d7d6c791a9d50e30e19d77af0c8b3f2897c6c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(FileInfo fileInfo)", "diff": ["-\tprivate void addInstrumentation(File file)", "+\tprivate void addInstrumentation(FileInfo fileInfo)", "-\t\tif (isClass(file))", "+\t\tif (fileInfo.isClass() && shouldInstrument(fileInfo.pathname))", "-\t\t\taddInstrumentationToSingleClass(file);", "+\t\t\taddInstrumentationToSingleClass(fileInfo);", "-\t\telse if (file.isDirectory())", "+\t\telse if (fileInfo.isDirectory())", "-\t\t\tFile[] contents = file.listFiles();", "+\t\t\tString[] contents = fileInfo.list();", "-\t\t\t\taddInstrumentation(contents[i]);", "+\t\t\t{", "+\t\t\t\tFile relativeFile = new File(fileInfo.pathname, contents[i]);", "+\t\t\t\tFileInfo relativeFileInfo = new FileInfo(fileInfo.baseDir, relativeFile.toString());", "+\t\t\t\t//recursion!", "+\t\t\t\taddInstrumentation(relativeFileInfo);", "+\t\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a424044477ab04b54f8e5cf21917ab26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84b2a554271ac5fe9ffca9d75582ddf0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "8f0d322652edfef35c560d9d4e0b248c7e9ed027", "commitAfterChange": "1fc76069b3c268690aea68cfb654d632b23e3b49", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void dump(String className, CoverageData instrumentation)", "signatureAfterChange": "  \tprivate void dumpClassDetails(Clazz clazz)", "diff": ["-\tprivate void dump(String className, CoverageData instrumentation)", "+\tprivate void dumpClassDetails(Clazz clazz)", "-\t\tprintln(\"<file name=\\\"\" + getFileName(className, instrumentation)", "-\t\t\t\t+ \"\\\"/>\");", "-\t\tprintln(\"<line rate=\\\"\" + instrumentation.getLineCoverageRate()", "-\t\t\t\t+ \"\\\"/>\");", "-\t\tprintln(\"<branch rate=\\\"\" + instrumentation.getBranchCoverageRate()", "-\t\t\t\t+ \"\\\"/>\");", "+\t\tprintln(\"<file name=\\\"\" + clazz.getLongFileName() + \"\\\"/>\");", "+\t\tprintln(\"<line rate=\\\"\" + clazz.getLineCoverageRate() + \"\\\"/>\");", "+\t\tprintln(\"<branch rate=\\\"\" + clazz.getBranchCoverageRate() + \"\\\"/>\");", "-\t\tdumpMethods(instrumentation);", "+\t\tdumpMethods(clazz.getRawCoverageData());", "+\t\tCoverageData instrumentation = clazz.getRawCoverageData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d23fb7235516f83c011aebeb0115bf4b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void removeNonexistantClasses()", "signatureAfterChange": "  \tprivate void generateSourceFiles()", "diff": ["-\t */", "-\tprivate void removeNonexistantClasses()", "-\t\tIterator iter = coverage.getClasses().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tClazz clazz = (Clazz)iter.next();", "-\t\t\tFile file = new File(sourceDir, clazz.getLongFileName());", "-\t\t\tif (!file.isFile())", "-\t\t\t{", "-\t\t\t\tcoverage.removeClass(clazz);", "-\t\t\t}", "-\t\t}", "-\t}", "+\tprivate void generateSourceFiles()", "+\t\tIterator iter = projectData.getClasses().iterator();", "+\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\ttry", "+\t\t\t{", "+\t\t\t\tgenerateSourceFile(classData);", "+\t\t\t}", "+\t\t\tcatch (Exception e)", "+\t\t\t{", "+\t\t\t\tlogger.info(\"Could not generate HTML file for class \"", "+\t\t\t\t\t\t+ classData.getName());", "+\t\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39a15f66998a45a94e57b6a52a894a1c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732cb4af045975950b65b92190ed184f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Main(String[] args)", "signatureAfterChange": "      private void parseArguments(String[] args)", "diff": ["-\tprivate Main(String[] args)", "-\t{", "-\t\tFile dataFile = null;", "-\t\tFile currentBaseDir = null;", "-\t\tCollection baseDirs = new Vector();", "-\t\tCollection locations = new Vector();", "-\t\t// Parse our parameters", "-\t\tfor (int i = 0; i < args.length; i++)", "-\t\t{", "-\t\t\tif (args[i].equals(\"--basedir\"))", "-\t\t\t{", "-\t\t\t\tcurrentBaseDir = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--datafile\"))", "-\t\t\t{", "-\t\t\t\tif (dataFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tSystem.err.println(\"You may only specify one data file.\");", "-\t\t\t\t\tSystem.exit(-1);", "-\t\t\t\t}", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--destination\"))", "-\t\t\t{", "-\t\t\t\tif (this.destinationDirectory != null)", "-\t\t\t\t{", "-\t\t\t\t\tSystem.err", "-\t\t\t\t\t\t\t.println(\"You may only specify one destination directory.\");", "-\t\t\t\t\tSystem.exit(-1);", "-\t\t\t\t}", "-\t\t\t\tthis.destinationDirectory = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "-\t\t\t{", "-\t\t\t\tString regex = args[++i];", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "-\t\t\t\t\tthis.ignoreRegexs.add(pc.compile(regex));", "-\t\t\t\t}", "-\t\t\t\tcatch (MalformedPatternException e)", "-\t\t\t\t{", "-\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "-\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tlocations.add(args[i]);", "-\t\t\t\tbaseDirs.add(currentBaseDir);", "-\t\t\t}", "-\t\t}", "-\t\t// Load coverage data", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tthis.projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (this.projectData == null)", "-\t\t\tthis.projectData = new ProjectData();", "-\t\t// Instrument classes", "-\t\tIterator iter = locations.iterator();", "-\t\tIterator baseDirIter = baseDirs.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t\taddInstrumentation((File)baseDirIter.next(), (String)iter.next());", "-\t\t// Save coverage data", "-\t\tCoverageDataFileHandler.saveCoverageData(this.projectData, dataFile);", "-\t}", "+    private void parseArguments(String[] args)", "+    {", "+        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+        // Parse our parameters", "+        FileFinder finder = new FileFinder();", "+        for (int i = 0; i < args.length; i++)", "+        {", "+            if (args[i].equals(\"--basedir\"))", "+                finder.addBaseDirectory(new File(args[++i]));", "+            else if (args[i].equals(\"--datafile\"))", "+                dataFile = new File(args[++i]);", "+            else if (args[i].equals(\"--destination\"))", "+                destinationDirectory = new File(args[++i]);", "+            else if (args[i].equals(\"--ignore\"))", "+            {", "+                String regex = args[++i];", "+                try", "+                {", "+                    Perl5Compiler pc = new Perl5Compiler();", "+                    this.ignoreRegexes.add(pc.compile(regex));", "+                }", "+                catch (MalformedPatternException e)", "+                {", "+                    logger.warn(\"The regular expression \" + regex", "+                            + \" is invalid: \" + e.getLocalizedMessage());", "+                }", "+            }", "+            else", "+                finder.addSourceFilePath(args[i]);", "+        }", "+        // Load coverage data, instrument classes, save coverage data", "+        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+        if (projectData == null)", "+            projectData = new ProjectData();", "+        Iterator iter = finder.getFilePaths().iterator();", "+        while (iter.hasNext())", "+            addInstrumentation((String)iter.next());", "+        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73c4de52fb4e6aab67400ad763bf754d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/InstrumentMain.java", "commitBeforeChange": "e386d1e03e9e7e8c17ecfc1bc2a7440e47264868", "commitAfterChange": "457ae08884dbac7db516ac660f84e091a17f1713", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static void main(String[] args)", "signatureAfterChange": "  \tpublic static void main(String[] args)", "diff": ["-\tpublic static void main(String[] args) {", "-\t\t\tSystem.exit(1);", "+", "+\tpublic static void main(String[] args) {", "+\t\tint returnValue = instrument(args);", "+\t\tif ( returnValue != 0 ) {", "+\t\t\tSystem.exit(returnValue);", "+\t\t}"]}]}
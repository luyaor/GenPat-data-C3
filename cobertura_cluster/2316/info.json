{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42f47bd4195dfbc6da99c0b35897ab3e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1578ce7cb2d1478963bb7c43ebc57e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void generateSourceFile(Clazz clazz) throws IOException", "signatureAfterChange": "  \tprivate void generateSourceFile(ClassData classData) throws IOException", "diff": ["-\tprivate void generateSourceFile(Clazz clazz) throws IOException", "+\tprivate void generateSourceFile(ClassData classData) throws IOException", "-\t\tString filename = clazz.getLongName() + \".html\";", "+\t\tString filename = classData.getName() + \".html\";", "-\t\t\tString classPackageName = clazz.getPackageName();", "+\t\t\tString classPackageName = classData.getPackageName();", "-\t\t\t\tout.print(clazz.getPackageName() + \".\");", "+\t\t\t\tout.print(classData.getPackageName() + \".\");", "-\t\t\tout.print(clazz.getName());", "+\t\t\tout.print(classData.getName());", "-\t\t\tout.println(generateTableRowForClass(clazz));", "+\t\t\tout.println(generateTableRowForClass(classData));", "-\t\t\t\tbr = new BufferedReader(new FileReader(new File(sourceDir,", "-\t\t\t\t\t\tclazz.getLongFileName())));", "+\t\t\t\tFile sourceFile = new File(sourceDir, classData", "+\t\t\t\t\t\t.getSourceFileName());", "+\t\t\t\tbr = new BufferedReader(new FileReader(sourceFile));", "-\t\t\t\t\tif (clazz.isValidSourceLine(lineNumber))", "+\t\t\t\t\tif (classData.isValidSourceLineNumber(lineNumber))", "-\t\t\t\t\t\tlong numberOfHits = clazz.getNumberOfHits(lineNumber);", "+\t\t\t\t\t\tlong numberOfHits = classData.getHitCount(lineNumber);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8008f6471d649a21be930a6aec48a31a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/ASCII_UCodeESC_CharStream.java", "commitBeforeChange": "7878dbc8c14057d3c27375fea2484940a54a6ebc", "commitAfterChange": "5c3edcc6dd3fd1408cac466f6859d53cda78784e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic final char readChar() throws java.io.IOException", "signatureAfterChange": "    public final char readChar() throws java.io.IOException", "diff": ["+  public final char readChar() throws java.io.IOException", "+  {", "+     if (inBuf > 0)", "+     {", "+        --inBuf;", "+        return buffer[(bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos];", "+     }", "+     char c;", "-\tpublic final char readChar() throws java.io.IOException", "-\t{", "-\t\tif (inBuf > 0)", "-\t\t{", "-\t\t\t--inBuf;", "-\t\t\treturn buffer[(bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos];", "-\t\t}", "+     if (++bufpos == available)", "+        AdjustBuffSize();", "-\t\tchar c;", "+     if (((buffer[bufpos] = c = (char)((char)0xff & ReadByte())) == '\\\\'))", "+     {", "+        UpdateLineColumn(c);", "-\t\tif (++bufpos == available)", "-\t\t\tadjustBuffSize();", "+        int backSlashCnt = 1;", "-\t\tif (((buffer[bufpos] = c = (char)((char)0xff & readByte())) == '\\\\'))", "-\t\t{", "-\t\t\tupdateLineColumn(c);", "+        for (;;) // Read all the backslashes", "+        {", "+           if (++bufpos == available)", "+              AdjustBuffSize();", "-\t\t\tint backSlashCnt = 1;", "+           try", "+           {", "+              if ((buffer[bufpos] = c = (char)((char)0xff & ReadByte())) != '\\\\')", "+              {", "+                 UpdateLineColumn(c);", "+                 // found a non-backslash char.", "+                 if ((c == 'u') && ((backSlashCnt & 1) == 1))", "+                 {", "+                    if (--bufpos < 0)", "+                       bufpos = bufsize - 1;", "-\t\t\tfor (;;) // Read all the backslashes", "-\t\t\t{", "-\t\t\t\tif (++bufpos == available)", "-\t\t\t\t\tadjustBuffSize();", "+                    break;", "+                 }", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tif ((buffer[bufpos] = c = (char)((char)0xff & readByte())) != '\\\\')", "-\t\t\t\t\t{", "-\t\t\t\t\t\tupdateLineColumn(c);", "-\t\t\t\t\t\t// found a non-backslash char.", "-\t\t\t\t\t\tif ((c == 'u') && ((backSlashCnt & 1) == 1))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tif (--bufpos < 0)", "-\t\t\t\t\t\t\t\tbufpos = bufsize - 1;", "+                 backup(backSlashCnt);", "+                 return '\\\\';", "+              }", "+           }", "+           catch(java.io.IOException e)", "+           {", "+              if (backSlashCnt > 1)", "+                 backup(backSlashCnt);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+              return '\\\\';", "+           }", "-\t\t\t\t\t\tbackup(backSlashCnt);", "-\t\t\t\t\t\treturn '\\\\';", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tcatch (java.io.IOException e)", "-\t\t\t\t{", "-\t\t\t\t\tif (backSlashCnt > 1)", "-\t\t\t\t\t\tbackup(backSlashCnt);", "+           UpdateLineColumn(c);", "+           backSlashCnt++;", "+        }", "-\t\t\t\t\treturn '\\\\';", "-\t\t\t\t}", "+        // Here, we have seen an odd number of backslash's followed by a 'u'", "+        try", "+        {", "+           while ((c = (char)((char)0xff & ReadByte())) == 'u')", "+              ++column;", "-\t\t\t\tupdateLineColumn(c);", "-\t\t\t\tbackSlashCnt++;", "-\t\t\t}", "+           buffer[bufpos] = c = (char)(hexval(c) << 12 |", "+                                       hexval((char)((char)0xff & ReadByte())) << 8 |", "+                                       hexval((char)((char)0xff & ReadByte())) << 4 |", "+                                       hexval((char)((char)0xff & ReadByte())));", "-\t\t\t// Here, we have seen an odd number of backslash's followed by a 'u'", "-\t\t\ttry", "-\t\t\t{", "-\t\t\t\twhile ((c = (char)((char)0xff & readByte())) == 'u')", "-\t\t\t\t\t++column;", "+           column += 4;", "+        }", "+        catch(java.io.IOException e)", "+        {", "+           throw new Error(\"Invalid escape character at line \" + line +", "+                                         \" column \" + column + \".\");", "+        }", "-\t\t\t\tbuffer[bufpos] = c = (char)(hexval(c) << 12", "-\t\t\t\t\t\t| hexval((char)((char)0xff & readByte())) << 8", "-\t\t\t\t\t\t| hexval((char)((char)0xff & readByte())) << 4 | hexval((char)((char)0xff & readByte())));", "+        if (backSlashCnt == 1)", "+           return c;", "+        else", "+        {", "+           backup(backSlashCnt - 1);", "+           return '\\\\';", "+        }", "+     }", "+     else", "+     {", "+        UpdateLineColumn(c);", "+        return (c);", "+     }", "+  }", "-\t\t\t\tcolumn += 4;", "-\t\t\t}", "-\t\t\tcatch (java.io.IOException e)", "-\t\t\t{", "-\t\t\t\tthrow new Error(\"Invalid escape character at line \" + line + \" column \" + column", "-\t\t\t\t\t\t+ \".\");", "-\t\t\t}", "-\t\t\tif (backSlashCnt == 1)", "-\t\t\t\treturn c;", "-\t\t\tbackup(backSlashCnt - 1);", "-\t\t\treturn '\\\\';", "-\t\t}", "-\t\tupdateLineColumn(c);", "-\t\treturn (c);", "-\t}"]}]}
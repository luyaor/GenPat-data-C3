{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18ee483e8e2cbdf426bfbd914efaa446", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "067e720883aaf7b575080dc080e50ef7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/CoverageTest.java", "commitBeforeChange": "7cdece92ea0660e086a27d07d0eef3df4b583a23", "commitAfterChange": "100512ee483a0d8eebc3eb78a5d8913b7b64ddb6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void testCoverage()", "signatureAfterChange": "  \tpublic void testCoverage()", "diff": ["-\t\tCoverage coverage = new Coverage();", "+\t\tCoverageReport coverage = new CoverageReport(Collections.EMPTY_MAP);", "-\t\tassertEquals(clazz1.getNumberOfBranches(), coverage", "-\t\t\t\t.getNumberOfBranches());", "+\t\tassertEquals(clazz1.getNumberOfBranches(), coverage.getNumberOfBranches());", "-\t\tassertEquals(clazz1.getBranchCoverageRate(), coverage", "-\t\t\t\t.getBranchCoverageRate(), 0.00001);", "-\t\tassertEquals(clazz1.getLineCoverageRate(), coverage", "-\t\t\t\t.getLineCoverageRate(), 0.00001);", "+\t\tassertEquals(clazz1.getBranchCoverageRate(), coverage.getBranchCoverageRate(), 0.00001);", "+\t\tassertEquals(clazz1.getLineCoverageRate(), coverage.getLineCoverageRate(), 0.00001);", "-\t\tassertEquals(clazz1.getNumberOfBranches()", "-\t\t\t\t+ clazz2.getNumberOfBranches(), coverage", "-\t\t\t\t.getNumberOfBranches());", "-\t\tassertEquals(clazz1.getNumberOfLines() + clazz2.getNumberOfLines(),", "-\t\t\t\tcoverage.getNumberOfLines());", "-\t\tassertEquals(0.5, coverage.getBranchCoverageRate(), 0.00001);", "+\t\tassertEquals(clazz1.getNumberOfBranches() + clazz2.getNumberOfBranches(), coverage.getNumberOfBranches());", "+\t\tassertEquals(clazz1.getNumberOfLines() + clazz2.getNumberOfLines(), coverage.getNumberOfLines());", "+\t\tassertEquals(0.85, coverage.getBranchCoverageRate(), 0.008);", "-\t\t\t\tclazz1.getNumberOfBranches() + clazz2.getNumberOfBranches()", "-\t\t\t\t\t\t+ clazz3.getNumberOfBranches(), coverage", "-\t\t\t\t\t\t.getNumberOfBranches());", "-\t\tassertEquals(clazz1.getNumberOfLines() + clazz2.getNumberOfLines()", "-\t\t\t\t+ clazz3.getNumberOfLines(), coverage.getNumberOfLines());", "-\t\tassertEquals(0.5, coverage.getBranchCoverageRate(), 0.00001);", "-\t\tassertEquals(0.5, coverage.getLineCoverageRate(), 0.00001);", "+\t\t\t\tclazz1.getNumberOfBranches() + clazz2.getNumberOfBranches() + clazz3.getNumberOfBranches(), ", "+\t\t\t\tcoverage.getNumberOfBranches()", "+\t\t\t\t);", "+", "+\t\tassertEquals(", "+\t\t        clazz1.getNumberOfLines() + clazz2.getNumberOfLines() + clazz3.getNumberOfLines(), ", "+\t\t        coverage.getNumberOfLines()", "+\t\t        );", "+\t\t", "+\t\tassertEquals(0.7, coverage.getBranchCoverageRate(), 0.00001);", "+\t\tassertEquals(0.4857, coverage.getLineCoverageRate(), 0.001);", "-\t\tassertEquals(clazz1.getNumberOfBranches()", "-\t\t\t\t+ clazz2.getNumberOfBranches(), coverage", "-\t\t\t\t.getNumberOfBranches());", "-\t\tassertEquals(clazz1.getNumberOfLines() + clazz2.getNumberOfLines(),", "-\t\t\t\tcoverage.getNumberOfLines());", "-\t\tassertEquals(0.5, coverage.getBranchCoverageRate(), 0.00001);", "+", "+\t\tassertEquals(clazz1.getNumberOfBranches() + clazz2.getNumberOfBranches(), coverage.getNumberOfBranches());", "+\t\tassertEquals(clazz1.getNumberOfLines() + clazz2.getNumberOfLines(), coverage.getNumberOfLines());", "+\t\tassertEquals(0.85, coverage.getBranchCoverageRate(), 0.008);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c6f2aea596a20b57386cfa3840edf1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Main(String[] args) throws IOException", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["-\tpublic Main(String[] args) throws IOException", "+\tpublic Main(String[] args)", "-\t\tmerge(loadInstrumentation(new FileInputStream(new File(", "-\t\t\t\tinstrumentationDirectory,", "-\t\t\t\tInstrumentationPersistence.FILE_NAME))));", "+\t\tFile dataFile = new File(instrumentationDirectory,", "+\t\t\t\tCoverageDataFileHandler.FILE_NAME);", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\tlogger", "-\t\t\t\t\t.info(\"instrumentation has \" + keySet().size()", "-\t\t\t\t\t\t\t+ \" entries\");", "+\t\t\tlogger.info(\"instrumentation has \"", "+\t\t\t\t\t+ projectData.getNumberOfClasses() + \" classes\");", "-\t\tIterator i = keySet().iterator();", "-\t\twhile (i.hasNext())", "+\t\tIterator iter = projectData.getClasses().iterator();", "+\t\twhile (iter.hasNext())", "-\t\t\tString key = (String)i.next();", "-", "-\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(key);", "-\t\t\tCoverageData instrumentation = getInstrumentation(key);", "+\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(classData", "+\t\t\t\t\t.getName());", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(percentage(instrumentation.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(percentage(coverageRate.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb", "-\t\t\t\t\t\t.append(percentage(instrumentation", "-\t\t\t\t\t\t\t\t.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(percentage(coverageRate.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\tif (instrumentation.getLineCoverageRate() < coverageRate", "+\t\t\tif (classData.getLineCoverageRate() < coverageRate", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(percentage(instrumentation.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\tif (instrumentation.getBranchCoverageRate() < coverageRate", "+\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb", "-\t\t\t\t\t\t.append(percentage(instrumentation", "-\t\t\t\t\t\t\t\t.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));"]}]}
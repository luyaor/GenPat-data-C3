{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "142b311bd4e2cf99162705511d877a9c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e194cad41a67f7e728717accf3c3268", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "metrics/metrics-api/src/main/java/net/sourceforge/cobertura/metrics/api/AbstractCoverageCalculator.java", "commitBeforeChange": "6f6a7661efb1fcbc73aa09bb85cdab7bdaf35db8", "commitAfterChange": "d1cf5bb06c93aa997e1f1f2066f2bdd82d480da5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public double getCoverage(final CoverageType type)", "signatureAfterChange": "     @Override     public final double getCoverage(final SourceLocationFilter filter, final CoverageType type)", "diff": ["-    public double getCoverage(final CoverageType type) {", "-", "+    public final double getCoverage(final SourceLocationFilter filter, final CoverageType type) {", "-        final Rate coverageRate = getCoverageRate(type);", "+        final Rate coverageRate = getCoverageRate(filter, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2d901ae4f8870deaa3117be18ec5ed6", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "metrics/metrics-api/src/main/java/net/sourceforge/cobertura/metrics/api/AbstractCoverageCalculator.java", "commitBeforeChange": "6f6a7661efb1fcbc73aa09bb85cdab7bdaf35db8", "commitAfterChange": "d1cf5bb06c93aa997e1f1f2066f2bdd82d480da5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Override     public final Rate getCoverageRate(final CoverageType type)", "signatureAfterChange": "     @Override     public final Rate getCoverageRate(final SourceLocationFilter filter, final CoverageType type)", "diff": ["-    public final Rate getCoverageRate(final CoverageType type) {", "+    public final Rate getCoverageRate(final SourceLocationFilter filter, final CoverageType type) {", "-        Validate.notNull(type, \"Cannot handle null CoverageType argument.\");", "+        Validate.notNull(type, \"Cannot handle null type argument.\");", "+        Validate.notNull(filter, \"Cannot handle null filter argument.\");", "-        return getRate(type);", "+        return getRate(filter, type);"]}]}
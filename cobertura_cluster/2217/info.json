{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d8d20acf8a6da6d558c9adfca0e7b23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3911f6ca4c6b4c177b77945b401a9279", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "a119f823fa866e69698a670d633a7067d8632a28", "commitAfterChange": "860d83d968c4c37826a8e5fbbd1ba35cd97da38d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void dump(String className, CoverageData instrumentation)", "signatureAfterChange": "  \tprivate void dump(String className, CoverageData instrumentation)", "diff": ["-\t\tIterator iter = instrumentation.getSourceLineNumbers().iterator();", "+\t\tIterator iter = instrumentation.getValidLineNumbers().iterator();", "-\t\titer = instrumentation.getSourceLineNumbers().iterator();", "+\t\titer = instrumentation.getValidLineNumbers().iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eec0d35985a9ac7a26a383fb3a828e1a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/CoverageUnmarshaller.java", "commitBeforeChange": "a119f823fa866e69698a670d633a7067d8632a28", "commitAfterChange": "860d83d968c4c37826a8e5fbbd1ba35cd97da38d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static Clazz parseClass(String classname, \t\t\tCoverageData instrumentation)", "signatureAfterChange": "  \tprivate static Clazz parseClass(String classname, \t\t\tCoverageData instrumentation)", "diff": ["-\t\tclazz.setNumberOfBranches(instrumentation.getNumberOfBranches());", "+\t\tclazz.setNumberOfBranches(instrumentation.getNumberOfValidBranches());", "-\t\tclazz.setNumberOfLines(instrumentation.getNumberOfLines());", "+\t\tclazz.setNumberOfLines(instrumentation.getNumberOfValidLines());", "-\t\tIterator iter = instrumentation.getSourceLineNumbers().iterator();", "+\t\tIterator iter = instrumentation.getValidLineNumbers().iterator();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f72777ca734e42c6c8ed01b5454a8f45", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e3866eb7f9b19872c652e3074a0505f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Throwable", "signatureAfterChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "diff": ["-\t\t\tZipOutputStream output) throws Throwable", "+\t\t\tZipOutputStream output) throws Exception", "-\t\t\t\t\ttry", "-\t\t\t\t\t{", "-\t\t\t\t\t\t// Instrument class", "-\t\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\t\tClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);", "-\t\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "-\t\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes,", "-\t\t\t\t\t\t\t\tignoreMethodAnnotations, ignoreTrivial);", "-\t\t\t\t\t\tcr.accept(cv, 0);", "-\t", "-\t\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t\t// class", "-\t\t\t\t\t\tif (cv.isInstrumented())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "-\t\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t\t\tmodified = true;", "+\t\t\t\t\ttry\t{", "+\t\t\t\t\t\tInstrumentationResult res=coberturaInstrumenter.instrumentClass(new ByteArrayInputStream(entryBytes));", "+\t\t\t\t\t\tif(res!=null){", "+\t\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"\t+ entry.getName());", "+\t\t\t\t\t\t\tentryBytes=res.getContent();", "+\t\t\t\t\t\t\tmodified=true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27ddc8df77418b9471b71e06449baee", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "4b9e07aec6aa7a210484d3d9f12082a7dee4a0ae", "commitAfterChange": "8d9e5d2c0ac5dd3ae1467df0071d4e5b6c845132", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "diff": ["-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "-\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes);", "-\t\t\t\t\tcr.accept(cv, false);", "-", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\ttry", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t\tmodified = true;", "-\t\t\t\t\t\toutputEntry.setTime(System.currentTimeMillis());", "+\t\t\t\t\t\t// Instrument class", "+\t\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "+\t\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "+\t\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData,", "+\t\t\t\t\t\t\t\tcw, ignoreRegexes, ignoreBranchesRegexes);", "+\t\t\t\t\t\tcr.accept(cv, false);", "+\t", "+\t\t\t\t\t\t// If class was instrumented, get bytes that define the", "+\t\t\t\t\t\t// class", "+\t\t\t\t\t\tif (cv.isInstrumented())", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tlogger.debug(\"Putting instrumented entry: \"", "+\t\t\t\t\t\t\t\t\t+ entry.getName());", "+\t\t\t\t\t\t\tentryBytes = cw.toByteArray();", "+\t\t\t\t\t\t\tmodified = true;", "+\t\t\t\t\t\t\toutputEntry.setTime(System.currentTimeMillis());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tcatch (Throwable t)", "+\t\t\t\t\t{", "+\t\t\t\t\t\tif (entry.getName().endsWith(\"_Stub.class\"))", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\t//no big deal - it is probably an RMI stub, and they don't need to be instrumented", "+\t\t\t\t\t\t\tlogger.debug(\"Problems instrumenting archive entry: \" + entry.getName(), t);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\t{", "+\t\t\t\t\t\t\tlogger.warn(\"Problems instrumenting archive entry: \" + entry.getName(), t);", "+\t\t\t\t\t\t}", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry.getName(), e);", "+\t\t\t}", "+\t\t\tcatch (Throwable t)", "+\t\t\t{", "+\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry.getName(), t);"]}]}
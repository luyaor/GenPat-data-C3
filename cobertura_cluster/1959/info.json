{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9482e2c789b74d975bf96ecdf6e3d5be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1036e2f8b808790482aa7808ed31c8e8", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "edbadf596ee0053098884e80bfe34fad03d14803", "commitAfterChange": "3a6bc5d8bee24a7428f0483949b490297e667ef7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": " \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": " \tpublic void merge(CoverageData coverageData)", "diff": ["+\t\tthis.containsInstrumentationInfo |= classData.containsInstrumentationInfo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c52ed0cdc5d9e3c5888e3d6862a873", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r \r   final public void ConstructorDeclaration() throws ParseException", "signatureAfterChange": "    final public void ConstructorDeclaration() throws ParseException", "diff": ["-\r", "-  final public void ConstructorDeclaration() throws ParseException {\r", "-        int oldNcss = _ncss;\r", "-        int oldFunctions = _functions;\r", "-        String sOldFunction = _sFunction;\r", "-        int oldcyc = _cyc;\r", "-        boolean bOldReturn = _bReturn;\r", "-        Token tmpToken = null;\r", "-        int jvdc = 0;\r", "-\r", "-        // added by SMS\r", "-        int oldSingle;\r", "-        int oldMulti;\r", "-        int jvdcLines = 0;\r", "-        boolean bPublic = false;\r", "-        //\r", "-\r", "-        //Added by REYNAUD Sebastien (LOGICA)\r", "-        Token myToken = null;\r", "-    label_34:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case AT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[72] = jj_gen;\r", "-        break label_34;\r", "-      }\r", "-         myToken = getToken(1);\r", "-      Annotation();\r", "-        if ( tmpToken == null )\r", "-                {\r", "-                        tmpToken = myToken;\r", "-        }\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case PRIVATE:\r", "-    case PROTECTED:\r", "-    case PUBLIC:\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case PUBLIC:\r", "-        jj_consume_token(PUBLIC);\r", "-               bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PROTECTED:\r", "-        jj_consume_token(PROTECTED);\r", "-                 bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PRIVATE:\r", "-        jj_consume_token(PRIVATE);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      default:\r", "-        jj_la1[73] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[74] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[75] = jj_gen;\r", "-      ;\r", "-    }\r", "-    Identifier();\r", "-            if ( tmpToken == null ) {\r", "-                tmpToken = getToken( 0 );\r", "-            }\r", "-                _cyc = 1;\r", "-                _sFunction = _sPackage + _sClass + \".\" + getToken(0).image;\r", "-    FormalParameters();\r", "-                _sFunction += _sParameter;\r", "-                _bReturn = false;\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case THROWS:\r", "-      jj_consume_token(THROWS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[76] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(LBRACE);\r", "-    if (jj_2_18(2147483647)) {\r", "-      ExplicitConstructorInvocation();\r", "-    } else {\r", "-      ;\r", "-    }\r", "-    if (jj_2_19(2147483647)) {\r", "-      ExplicitConstructorInvocation();\r", "-    } else {\r", "-      ;\r", "-    }\r", "-                while( tmpToken.specialToken != null ) {\r", "-                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-                        _javadocs++;\r", "-                        jvdc++;\r", "-                        if ((bPublic && _bPublic) || _bPrivate) {\r", "-                            Util.debug( \"_jvdc++\" );\r", "-                            _jvdc++;\r", "-                            jvdcLines = JavaParserTokenManager._iMultiCommentsLast;\r", "-                            _jvdcLines += jvdcLines;\r", "-                            JavaParserTokenManager._iFormalComments += jvdcLines;\r", "-                        }\r", "-                        JavaParserTokenManager._iMultiComments -= jvdcLines;\r", "-                        break;\r", "-                    }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {\r", "-                        jvdcLines = 0;\r", "-                        break;\r", "-                    }\r", "-\r", "-                    //System.out.println(\"\\n\"+tmpToken.specialToken.image);\r", "-\r", "-                    tmpToken = tmpToken.specialToken;\r", "-                }\r", "-\r", "-\r", "-                oldSingle = JavaParserTokenManager._iSingleComments;\r", "-                oldMulti = JavaParserTokenManager._iMultiComments;\r", "-    label_35:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BREAK:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case CONTINUE:\r", "-      case DO:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case FOR:\r", "-      case IF:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case RETURN:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SUPER:\r", "-      case SWITCH:\r", "-      case SYNCHRONIZED:\r", "-      case THIS:\r", "-      case THROW:\r", "-      case TRANSIENT:\r", "-      case TRUE:\r", "-      case TRY:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case WHILE:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case LBRACE:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case INCR:\r", "-      case DECR:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[77] = jj_gen;\r", "-        break label_35;\r", "-      }\r", "-      BlockStatement();\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-            /*\r", "-                while( tmpToken.specialToken != null ) {\r", "-                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-                        jvdc++;\r", "-                        _javadocs++;\r", "-                    }\r", "-                    tmpToken = tmpToken.specialToken;\r", "-                }\r", "-            */\r", "-                if (_bReturn) {\r", "-                        _cyc--;\r", "-                }\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-\r", "-                FunctionMetric functionMetrics = new FunctionMetric();\r", "-                functionMetrics.name = _sFunction;\r", "-                functionMetrics.ncss = _ncss - oldNcss;\r", "-                functionMetrics.ccn = _cyc;\r", "-                functionMetrics.javadocs = jvdc;\r", "-\r", "-                // added by SMS\r", "-                functionMetrics.javadocsLn = jvdcLines;\r", "-                functionMetrics.singleLn = JavaParserTokenManager._iSingleComments - oldSingle;\r", "-                functionMetrics.multiLn = JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                //\r", "-                // specially added for Cobertura\r", "-                // Commenting out for now until the rest of patch 2353196 is applied.\r", "-                //functionMetrics.endLine = beginLine;\r", "-                //functionMetrics.endLine = endLine;\r", "-\r", "-                _vFunctions.add(functionMetrics);\r", "-                _sFunction = sOldFunction;\r", "-                _functions = oldFunctions + 1;\r", "-                _cyc = oldcyc;\r", "-                _bReturn = bOldReturn;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                _tmpToken = null;\r", "-                //\r", "-\r", "-  }\r", "+", "+  final public void ConstructorDeclaration() throws ParseException {", "+        int oldNcss = _ncss;", "+        int oldFunctions = _functions;", "+        String sOldFunction = _sFunction;", "+        int oldcyc = _cyc;", "+        boolean bOldReturn = _bReturn;", "+        Token tmpToken = null;", "+        int jvdc = 0;", "+", "+        // added by SMS", "+        int oldSingle;", "+        int oldMulti;", "+        int jvdcLines = 0;", "+        boolean bPublic = false;", "+        //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        Token myToken = null;", "+        //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        FunctionMetric functionMetrics = new FunctionMetric();", "+        functionMetrics.firstLine = JavaParserTokenManager.nbligne;", "+    label_34:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case AT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[72] = jj_gen;", "+        break label_34;", "+      }", "+         myToken = getToken(1);", "+      Annotation();", "+        if ( tmpToken == null )", "+                {", "+                        tmpToken = myToken;", "+        }", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case PRIVATE:", "+    case PROTECTED:", "+    case PUBLIC:", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case PUBLIC:", "+        jj_consume_token(PUBLIC);", "+               bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PROTECTED:", "+        jj_consume_token(PROTECTED);", "+                 bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PRIVATE:", "+        jj_consume_token(PRIVATE);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      default:", "+        jj_la1[73] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+      break;", "+    default:", "+      jj_la1[74] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[75] = jj_gen;", "+      ;", "+    }", "+    Identifier();", "+            if ( tmpToken == null ) {", "+                tmpToken = getToken( 0 );", "+            }", "+                _cyc = 1;", "+                _sFunction = _sPackage + _sClass + \".\" + getToken(0).image;", "+    FormalParameters();", "+                _sFunction += _sParameter;", "+                _bReturn = false;", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case THROWS:", "+      jj_consume_token(THROWS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[76] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(LBRACE);", "+    if (jj_2_18(2147483647)) {", "+      ExplicitConstructorInvocation();", "+    } else {", "+      ;", "+    }", "+    if (jj_2_19(2147483647)) {", "+      ExplicitConstructorInvocation();", "+    } else {", "+      ;", "+    }", "+                while( tmpToken.specialToken != null ) {", "+                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+                        _javadocs++;", "+                        jvdc++;", "+                        if ((bPublic && _bPublic) || _bPrivate) {", "+                            Util.debug( \"_jvdc++\" );", "+                            _jvdc++;", "+                            jvdcLines = JavaParserTokenManager._iMultiCommentsLast;", "+                            _jvdcLines += jvdcLines;", "+                            JavaParserTokenManager._iFormalComments += jvdcLines;", "+                        }", "+                        JavaParserTokenManager._iMultiComments -= jvdcLines;", "+                        break;", "+                    }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {", "+                        jvdcLines = 0;", "+                        break;", "+                    }", "+", "+                    //System.out.println(\"\\n\"+tmpToken.specialToken.image);", "+", "+                    tmpToken = tmpToken.specialToken;", "+                }", "+", "+", "+                oldSingle = JavaParserTokenManager._iSingleComments;", "+                oldMulti = JavaParserTokenManager._iMultiComments;", "+    label_35:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BREAK:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case CONTINUE:", "+      case DO:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case FOR:", "+      case IF:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case NEW:", "+      case NULL:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case RETURN:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SUPER:", "+      case SWITCH:", "+      case SYNCHRONIZED:", "+      case THIS:", "+      case THROW:", "+      case TRANSIENT:", "+      case TRUE:", "+      case TRY:", "+      case VOID:", "+      case VOLATILE:", "+      case WHILE:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case LBRACE:", "+      case SEMICOLON:", "+      case AT:", "+      case INCR:", "+      case DECR:", "+        ;", "+        break;", "+      default:", "+        jj_la1[77] = jj_gen;", "+        break label_35;", "+      }", "+      BlockStatement();", "+    }", "+    jj_consume_token(RBRACE);", "+            /*", "+                while( tmpToken.specialToken != null ) {", "+                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+                        jvdc++;", "+                        _javadocs++;", "+                    }", "+                    tmpToken = tmpToken.specialToken;", "+                }", "+            */", "+                if (_bReturn) {", "+                        _cyc--;", "+                }", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+", "+                //FunctionMetric functionMetrics = new FunctionMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                functionMetrics.name = _sFunction;", "+                functionMetrics.ncss = _ncss - oldNcss;", "+                functionMetrics.ccn = _cyc;", "+                functionMetrics.javadocs = jvdc;", "+", "+                // added by SMS", "+                functionMetrics.javadocsLn = jvdcLines;", "+                functionMetrics.singleLn = JavaParserTokenManager._iSingleComments - oldSingle;", "+                functionMetrics.multiLn = JavaParserTokenManager._iMultiComments - oldMulti;", "+                //", "+                // specially added for Cobertura", "+                // Commenting out for now until the rest of patch 2353196 is applied.", "+                //functionMetrics.endLine = beginLine;", "+                //functionMetrics.endLine = endLine;", "+", "+                _vFunctions.add(functionMetrics);", "+                _sFunction = sOldFunction;", "+                _functions = oldFunctions + 1;", "+                _cyc = oldcyc;", "+                _bReturn = bOldReturn;", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                _tmpToken = null;", "+                //", "+", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b585f1956381f54a814da3e32b4ae777", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r \r   final public void ConstructorDeclaration() throws ParseException", "signatureAfterChange": "    final public void ConstructorDeclaration() throws ParseException", "diff": ["-\r", "-  final public void ConstructorDeclaration() throws ParseException {\r", "-        int oldNcss = _ncss;\r", "-        int oldFunctions = _functions;\r", "-        String sOldFunction = _sFunction;\r", "-        int oldcyc = _cyc;\r", "-        boolean bOldReturn = _bReturn;\r", "-        Token tmpToken = null;\r", "-        int jvdc = 0;\r", "-\r", "-        // added by SMS\r", "-        int oldSingle;\r", "-        int oldMulti;\r", "-        int jvdcLines = 0;\r", "-        boolean bPublic = false;\r", "-        //\r", "-\r", "-        //Added by REYNAUD Sebastien (LOGICA)\r", "-        Token myToken = null;\r", "-    label_34:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case AT:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[72] = jj_gen;\r", "-        break label_34;\r", "-      }\r", "-         myToken = getToken(1);\r", "-      Annotation();\r", "-        if ( tmpToken == null )\r", "-                {\r", "-                        tmpToken = myToken;\r", "-        }\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case PRIVATE:\r", "-    case PROTECTED:\r", "-    case PUBLIC:\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case PUBLIC:\r", "-        jj_consume_token(PUBLIC);\r", "-               bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PROTECTED:\r", "-        jj_consume_token(PROTECTED);\r", "-                 bPublic = true;\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      case PRIVATE:\r", "-        jj_consume_token(PRIVATE);\r", "-      if ( tmpToken == null ) {\r", "-          tmpToken = getToken( 0 );\r", "-      }\r", "-        break;\r", "-      default:\r", "-        jj_la1[73] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[74] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case LT:\r", "-      TypeParameters();\r", "-      break;\r", "-    default:\r", "-      jj_la1[75] = jj_gen;\r", "-      ;\r", "-    }\r", "-    Identifier();\r", "-            if ( tmpToken == null ) {\r", "-                tmpToken = getToken( 0 );\r", "-            }\r", "-                _cyc = 1;\r", "-                _sFunction = _sPackage + _sClass + \".\" + getToken(0).image;\r", "-    FormalParameters();\r", "-                _sFunction += _sParameter;\r", "-                _bReturn = false;\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case THROWS:\r", "-      jj_consume_token(THROWS);\r", "-      NameList();\r", "-      break;\r", "-    default:\r", "-      jj_la1[76] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(LBRACE);\r", "-    if (jj_2_18(2147483647)) {\r", "-      ExplicitConstructorInvocation();\r", "-    } else {\r", "-      ;\r", "-    }\r", "-    if (jj_2_19(2147483647)) {\r", "-      ExplicitConstructorInvocation();\r", "-    } else {\r", "-      ;\r", "-    }\r", "-                while( tmpToken.specialToken != null ) {\r", "-                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-                        _javadocs++;\r", "-                        jvdc++;\r", "-                        if ((bPublic && _bPublic) || _bPrivate) {\r", "-                            Util.debug( \"_jvdc++\" );\r", "-                            _jvdc++;\r", "-                            jvdcLines = JavaParserTokenManager._iMultiCommentsLast;\r", "-                            _jvdcLines += jvdcLines;\r", "-                            JavaParserTokenManager._iFormalComments += jvdcLines;\r", "-                        }\r", "-                        JavaParserTokenManager._iMultiComments -= jvdcLines;\r", "-                        break;\r", "-                    }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {\r", "-                        jvdcLines = 0;\r", "-                        break;\r", "-                    }\r", "-\r", "-                    //System.out.println(\"\\n\"+tmpToken.specialToken.image);\r", "-\r", "-                    tmpToken = tmpToken.specialToken;\r", "-                }\r", "-\r", "-\r", "-                oldSingle = JavaParserTokenManager._iSingleComments;\r", "-                oldMulti = JavaParserTokenManager._iMultiComments;\r", "-    label_35:\r", "-    while (true) {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BREAK:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case CONTINUE:\r", "-      case DO:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case FOR:\r", "-      case IF:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case RETURN:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SUPER:\r", "-      case SWITCH:\r", "-      case SYNCHRONIZED:\r", "-      case THIS:\r", "-      case THROW:\r", "-      case TRANSIENT:\r", "-      case TRUE:\r", "-      case TRY:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case WHILE:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case LBRACE:\r", "-      case SEMICOLON:\r", "-      case AT:\r", "-      case INCR:\r", "-      case DECR:\r", "-        ;\r", "-        break;\r", "-      default:\r", "-        jj_la1[77] = jj_gen;\r", "-        break label_35;\r", "-      }\r", "-      BlockStatement();\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-            /*\r", "-                while( tmpToken.specialToken != null ) {\r", "-                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {\r", "-                        jvdc++;\r", "-                        _javadocs++;\r", "-                    }\r", "-                    tmpToken = tmpToken.specialToken;\r", "-                }\r", "-            */\r", "-                if (_bReturn) {\r", "-                        _cyc--;\r", "-                }\r", "-                _ncss++;\r", "-                Util.debug( \"_ncss++\" );\r", "-\r", "-                FunctionMetric functionMetrics = new FunctionMetric();\r", "-                functionMetrics.name = _sFunction;\r", "-                functionMetrics.ncss = _ncss - oldNcss;\r", "-                functionMetrics.ccn = _cyc;\r", "-                functionMetrics.javadocs = jvdc;\r", "-\r", "-                // added by SMS\r", "-                functionMetrics.javadocsLn = jvdcLines;\r", "-                functionMetrics.singleLn = JavaParserTokenManager._iSingleComments - oldSingle;\r", "-                functionMetrics.multiLn = JavaParserTokenManager._iMultiComments - oldMulti;\r", "-                //\r", "-                // specially added for Cobertura\r", "-                // Commenting out for now until the rest of patch 2353196 is applied.\r", "-                //functionMetrics.endLine = beginLine;\r", "-                //functionMetrics.endLine = endLine;\r", "-\r", "-                _vFunctions.add(functionMetrics);\r", "-                _sFunction = sOldFunction;\r", "-                _functions = oldFunctions + 1;\r", "-                _cyc = oldcyc;\r", "-                _bReturn = bOldReturn;\r", "-\r", "-                //Added by REYNAUD Sebastien (LOGICA)\r", "-                _tmpToken = null;\r", "-                //\r", "-\r", "-  }\r", "+", "+  final public void ConstructorDeclaration() throws ParseException {", "+        int oldNcss = _ncss;", "+        int oldFunctions = _functions;", "+        String sOldFunction = _sFunction;", "+        int oldcyc = _cyc;", "+        boolean bOldReturn = _bReturn;", "+        Token tmpToken = null;", "+        int jvdc = 0;", "+", "+        // added by SMS", "+        int oldSingle;", "+        int oldMulti;", "+        int jvdcLines = 0;", "+        boolean bPublic = false;", "+        //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        Token myToken = null;", "+        //", "+", "+        //Added by REYNAUD Sebastien (LOGICA)", "+        FunctionMetric functionMetrics = new FunctionMetric();", "+        functionMetrics.firstLine = JavaParserTokenManager.nbligne;", "+    label_34:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case AT:", "+        ;", "+        break;", "+      default:", "+        jj_la1[72] = jj_gen;", "+        break label_34;", "+      }", "+         myToken = getToken(1);", "+      Annotation();", "+        if ( tmpToken == null )", "+                {", "+                        tmpToken = myToken;", "+        }", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case PRIVATE:", "+    case PROTECTED:", "+    case PUBLIC:", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case PUBLIC:", "+        jj_consume_token(PUBLIC);", "+               bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PROTECTED:", "+        jj_consume_token(PROTECTED);", "+                 bPublic = true;", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      case PRIVATE:", "+        jj_consume_token(PRIVATE);", "+      if ( tmpToken == null ) {", "+          tmpToken = getToken( 0 );", "+      }", "+        break;", "+      default:", "+        jj_la1[73] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+      break;", "+    default:", "+      jj_la1[74] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case LT:", "+      TypeParameters();", "+      break;", "+    default:", "+      jj_la1[75] = jj_gen;", "+      ;", "+    }", "+    Identifier();", "+            if ( tmpToken == null ) {", "+                tmpToken = getToken( 0 );", "+            }", "+                _cyc = 1;", "+                _sFunction = _sPackage + _sClass + \".\" + getToken(0).image;", "+    FormalParameters();", "+                _sFunction += _sParameter;", "+                _bReturn = false;", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case THROWS:", "+      jj_consume_token(THROWS);", "+      NameList();", "+      break;", "+    default:", "+      jj_la1[76] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(LBRACE);", "+    if (jj_2_18(2147483647)) {", "+      ExplicitConstructorInvocation();", "+    } else {", "+      ;", "+    }", "+    if (jj_2_19(2147483647)) {", "+      ExplicitConstructorInvocation();", "+    } else {", "+      ;", "+    }", "+                while( tmpToken.specialToken != null ) {", "+                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+                        _javadocs++;", "+                        jvdc++;", "+                        if ((bPublic && _bPublic) || _bPrivate) {", "+                            Util.debug( \"_jvdc++\" );", "+                            _jvdc++;", "+                            jvdcLines = JavaParserTokenManager._iMultiCommentsLast;", "+                            _jvdcLines += jvdcLines;", "+                            JavaParserTokenManager._iFormalComments += jvdcLines;", "+                        }", "+                        JavaParserTokenManager._iMultiComments -= jvdcLines;", "+                        break;", "+                    }  else if ( tmpToken.specialToken.image.startsWith( \"/*\" ) ) {", "+                        jvdcLines = 0;", "+                        break;", "+                    }", "+", "+                    //System.out.println(\"\\n\"+tmpToken.specialToken.image);", "+", "+                    tmpToken = tmpToken.specialToken;", "+                }", "+", "+", "+                oldSingle = JavaParserTokenManager._iSingleComments;", "+                oldMulti = JavaParserTokenManager._iMultiComments;", "+    label_35:", "+    while (true) {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BREAK:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case CONTINUE:", "+      case DO:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case FOR:", "+      case IF:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case NEW:", "+      case NULL:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case RETURN:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SUPER:", "+      case SWITCH:", "+      case SYNCHRONIZED:", "+      case THIS:", "+      case THROW:", "+      case TRANSIENT:", "+      case TRUE:", "+      case TRY:", "+      case VOID:", "+      case VOLATILE:", "+      case WHILE:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case LBRACE:", "+      case SEMICOLON:", "+      case AT:", "+      case INCR:", "+      case DECR:", "+        ;", "+        break;", "+      default:", "+        jj_la1[77] = jj_gen;", "+        break label_35;", "+      }", "+      BlockStatement();", "+    }", "+    jj_consume_token(RBRACE);", "+            /*", "+                while( tmpToken.specialToken != null ) {", "+                    if ( tmpToken.specialToken.image.startsWith( \"/**\" ) ) {", "+                        jvdc++;", "+                        _javadocs++;", "+                    }", "+                    tmpToken = tmpToken.specialToken;", "+                }", "+            */", "+                if (_bReturn) {", "+                        _cyc--;", "+                }", "+                _ncss++;", "+                Util.debug( \"_ncss++\" );", "+", "+                //FunctionMetric functionMetrics = new FunctionMetric(); //Removed by REYNAUD Sebastien (LOGICA)", "+", "+                functionMetrics.name = _sFunction;", "+                functionMetrics.ncss = _ncss - oldNcss;", "+                functionMetrics.ccn = _cyc;", "+                functionMetrics.javadocs = jvdc;", "+", "+                // added by SMS", "+                functionMetrics.javadocsLn = jvdcLines;", "+                functionMetrics.singleLn = JavaParserTokenManager._iSingleComments - oldSingle;", "+                functionMetrics.multiLn = JavaParserTokenManager._iMultiComments - oldMulti;", "+                //", "+                // specially added for Cobertura", "+                // Commenting out for now until the rest of patch 2353196 is applied.", "+                //functionMetrics.endLine = beginLine;", "+                //functionMetrics.endLine = endLine;", "+", "+                _vFunctions.add(functionMetrics);", "+                _sFunction = sOldFunction;", "+                _functions = oldFunctions + 1;", "+                _cyc = oldcyc;", "+                _bReturn = bOldReturn;", "+", "+                //Added by REYNAUD Sebastien (LOGICA)", "+                _tmpToken = null;", "+                //", "+", "+  }"]}]}
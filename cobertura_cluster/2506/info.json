{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c250cd48df623202b8acdd590152abf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d42e206c25aa87ce9268da4bbba2240", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/xml/XMLReportTest.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testXMLReportValidity() throws Exception", "signatureAfterChange": "  \tpublic void testXMLReportValidity() throws Exception", "diff": ["-\tpublic void testXMLReportValidity() throws Exception", "-\t{", "-\t\tString[] args;", "-", "-\t\t// Serialize the current coverage data to disk", "-\t\tProjectData.saveGlobalProjectData();", "-\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile()", "-\t\t\t\t.getAbsolutePath();", "-", "-\t\t// Then we need to generate the XML report", "-\t\targs = new String[] { \"-f\", \"xml\", \"--datafile\", dataFileName, \"-o\",", "-\t\t\t\tpathToTestOutput, \"-s\", pathToSourceCode };", "-\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "-", "-\t\t// Create a validating XML document parser", "-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-\t\tfactory.setValidating(true);", "-\t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();", "-\t\tdocumentBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(", "-\t\t\t\tbasedir));", "-\t\tdocumentBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "-", "-\t\t// Parse the XML report", "-\t\tInputStream inputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(pathToXMLReport);", "-\t\t\tdocumentBuilder.parse(inputStream);", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t\tinputStream.close();", "-\t\t}", "+\tpublic void testXMLReportValidity() throws Exception {", "+//\t\tString[] args;", "+//", "+//\t\t// Serialize the current coverage data to disk", "+//\t\tProjectData.saveGlobalProjectData();", "+//\t\tString dataFileName = CoverageDataFileHandler.getDefaultDataFile().getAbsolutePath();", "+//\t\t// Then we need to generate the XML report", "+//\t\targs = new String[] { \"--commandsfile\", pathToCommandFile };", "+//\t\ttry {", "+//\t\t\tnet.sourceforge.cobertura.reporting.Main.main(args);", "+//\t\t} catch(Exception ex) {", "+//\t\t\tSystem.err.println(\"Error running XML report test: \" + ex.getMessage());", "+//\t\t\tStringWriter writer = new StringWriter();", "+//\t\t\tex.printStackTrace(new PrintWriter(writer));", "+//\t\t\tfail(ex.getMessage() + \"\\n\" + writer.toString());", "+//\t\t}", "+//", "+//\t\t// Create a validating XML document parser", "+//\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "+//\t\tfactory.setValidating(true);", "+//\t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();", "+//\t\tdocumentBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(", "+//\t\t\t\tbasedir));", "+//\t\tdocumentBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "+//", "+//\t\t// Parse the XML report", "+//\t\tInputStream inputStream = null;", "+//\t\ttry {", "+//\t\t\tinputStream = new FileInputStream(pathToXMLReport);", "+//\t\t\tdocumentBuilder.parse(inputStream);", "+//\t\t} catch(Exception ex) {", "+//\t\t\tLOGGER.error(\"Error testing XML report: \" + ex.getMessage(), ex);", "+//\t\t} finally {", "+//\t\t\tif (inputStream != null)", "+//\t\t\t\tinputStream.close();", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ffa406e277fe8b07c553108a1de7d7d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/JUnitXMLHelper.java", "commitBeforeChange": "1e8af18cde472762ef39445f1ab4213c5ba91289", "commitAfterChange": "9a1f242cd64dfc68f804c44562c72e3200447563", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void validate(File file) throws FileNotFoundException, IOException, \t\t\tParserConfigurationException, SAXException", "signatureAfterChange": "  \tpublic static Document readXmlFile(File file, boolean validate) throws FileNotFoundException, \t\t\tIOException, JDOMException", "diff": ["-\tpublic static void validate(File file) throws FileNotFoundException, IOException,", "-\t\t\tParserConfigurationException, SAXException", "+\tpublic static Document readXmlFile(File file, boolean validate) throws FileNotFoundException,", "+\t\t\tIOException, JDOMException", "-\t\tSystem.out.println(\"Validating \" + file.getAbsolutePath());", "+\t\tSystem.out.println(\"Reading \" + file.getAbsolutePath());", "-\t\t// Create a validating XML document parser", "-\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-\t\tfactory.setValidating(true);", "-\t\tDocumentBuilder documentBuilder = factory.newDocumentBuilder();", "-\t\tdocumentBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(new File(BASEDIR,", "-\t\t\t\t\"etc/dtds\")));", "-\t\tdocumentBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "-", "-\t\t// Parse the XML report", "-\t\tInputStream inputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tdocumentBuilder.parse(inputStream);", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t\tinputStream.close();", "-\t\t}", "+\t\t// First create an XML document parser", "+\t\tSAXBuilder saxBuilder = new SAXBuilder();", "+\t\tsaxBuilder.setValidation(validate);", "+\t\tsaxBuilder.setEntityResolver(new JUnitXMLParserEntityResolver(", "+\t\t\t\tnew File(BASEDIR, \"/etc/dtds\")));", "+\t\tsaxBuilder.setErrorHandler(new JUnitXMLParserErrorHandler());", "+\t\treturn saxBuilder.build(file);"]}]}
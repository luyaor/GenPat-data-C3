{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3fb3ab9d7ee1d2ce4f471a41216390c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03f01a4f4ef3a0e69110e9303e1db9c0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "2d04adc2554406c41824d5b965907076ecdceb80", "commitAfterChange": "cd01654d464661ad4ee16d9e5f0f6e799c0ad9e4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateClassList(PackageData packageData) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate void generateSourceFileList(PackageData packageData) \t\t\tthrows IOException", "diff": ["-\tprivate void generateClassList(PackageData packageData)", "+\tprivate void generateSourceFileList(PackageData packageData)", "-\t\tCollection classes;", "+\t\tCollection sourceFiles;", "-\t\t\tfilename = \"frame-classes.html\";", "-\t\t\tclasses = projectData.getClasses();", "+\t\t\tfilename = \"frame-sourcefiles.html\";", "+\t\t\tsourceFiles = projectData.getSourceFiles();", "-\t\t\tfilename = \"frame-classes-\" + packageData.getName() + \".html\";", "-\t\t\tclasses = packageData.getClasses();", "+\t\t\tfilename = \"frame-sourcefiles-\" + packageData.getName() + \".html\";", "+\t\t\tsourceFiles = packageData.getSourceFiles();", "-\t\t\tMap sortedClassList = new TreeMap();", "-\t\t\tfor (Iterator iter = classes.iterator(); iter.hasNext();)", "+\t\t\tMap sortedSourceFileList = new TreeMap();", "+\t\t\tfor (Iterator iter = sourceFiles.iterator(); iter.hasNext();)", "-\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\tsortedClassList.put(classData.getBaseName(), classData);", "+\t\t\t\tSourceFileData sourceFileData = (SourceFileData)iter.next();", "+\t\t\t\tsortedSourceFileList.put(sourceFileData.getBaseName(),", "+\t\t\t\t\t\tsourceFileData);", "-\t\t\tfor (Iterator iter = sortedClassList.values().iterator(); iter", "+\t\t\tfor (Iterator iter = sortedSourceFileList.values().iterator(); iter", "-\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tSourceFileData sourceFileData = (SourceFileData)iter.next();", "-\t\t\t\tif (classData.getNumberOfValidLines() > 0)", "-\t\t\t\t\tpercentCovered = getPercentValue(classData", "+\t\t\t\tif (sourceFileData.getNumberOfValidLines() > 0)", "+\t\t\t\t\tpercentCovered = getPercentValue(sourceFileData", "-\t\t\t\t\t\t\t\t+ classData.getName()", "+\t\t\t\t\t\t\t\t+ sourceFileData.getNormalizedName()", "-\t\t\t\t\t\t\t\t+ classData.getBaseName()", "-\t\t\t\t\t\t\t\t+ \"</a> <i>(\"", "-\t\t\t\t\t\t\t\t+ percentCovered + \")</i></td>\");", "+\t\t\t\t\t\t\t\t+ sourceFileData.getBaseName()", "+\t\t\t\t\t\t\t\t+ \"</a> <i>(\" + percentCovered + \")</i></td>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c6821261cc0954c28b50151a6d4065", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateClassList(Package pkg) throws IOException", "signatureAfterChange": "  \tprivate void generateClassList(PackageData packageData) \t\t\tthrows IOException", "diff": ["-\tprivate void generateClassList(Package pkg) throws IOException", "+\tprivate void generateClassList(PackageData packageData)", "+\t\t\tthrows IOException", "-\t\tif (pkg == null)", "+\t\tif (packageData == null)", "-\t\t\tclasses = coverage.getClassesSortedByBasename().values();", "+\t\t\t//TODO: Need to sort classes", "+\t\t\tclasses = projectData.getClasses();", "-\t\t\tfilename = \"frame-classes-\" + pkg.getName() + \".html\";", "-\t\t\tclasses = pkg.getClasses();", "+\t\t\tfilename = \"frame-classes-\" + packageData.getName() + \".html\";", "+\t\t\tclasses = packageData.getChildren();", "-\t\t\tout.println(pkg == null ? \"All Packages\" : generatePackageName(pkg));", "+\t\t\tout.println(packageData == null", "+\t\t\t\t\t? \"All Packages\"", "+\t\t\t\t\t: generatePackageName(packageData));", "-\t\t\tfor (Iterator iter = classes.iterator(); iter.hasNext();)", "+\t\t\tIterator iter;", "+\t\t\tMap sortedClassList = new TreeMap();", "+\t\t\titer = classes.iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\tClazz clazz = (Clazz)iter.next();", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tsortedClassList.put(classData.getBaseName(), classData);", "+\t\t\t}", "+\t\t\titer = sortedClassList.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\tif (clazz.getNumberOfLines() > 0)", "-\t\t\t\t\tpercentCovered = getPercentValue(clazz", "+\t\t\t\tif (classData.getNumberOfValidLines() > 0)", "+\t\t\t\t\tpercentCovered = getPercentValue(classData", "-\t\t\t\t\t\t\t\t+ clazz.getLongName()", "+\t\t\t\t\t\t\t\t+ classData.getName()", "-\t\t\t\t\t\t\t\t+ clazz.getName()", "+\t\t\t\t\t\t\t\t+ classData.getBaseName()"]}]}
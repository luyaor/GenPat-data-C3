{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52b564b07ba2fbd029f94aae9a1f6aab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe84ead3ac856565bb3490a92c59f85", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coverage/InstrumentTest.java", "commitBeforeChange": "860d83d968c4c37826a8e5fbbd1ba35cd97da38d", "commitAfterChange": "10ac2bf01fd9ec29bedb1a474b4783026c6c9e1d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testInstrument()", "signatureAfterChange": "  \tpublic void testInstrument()", "diff": ["+\t\t// We use a different directory so we don't inadvertently", "+\t\t// pick up information from old test runs?", "-\t\t//assertEquals(validBranches.length, coverageData.getNumberOfValidBranches());", "-\t\t//for (int i = 0; i < validBranches.length; i++)", "-\t\t//\tassertTrue(\"Line \" + validBranches[i] + \" should be considered valid!\", coverageData.isValidSourceLineNumber(validBranches[i]));", "+\t\tassertEquals(validBranches.length, coverageData", "+\t\t\t\t.getNumberOfValidBranches());", "+\t\tfor (int i = 0; i < validBranches.length; i++)", "+\t\t\tassertTrue(\"Line \" + validBranches[i]", "+\t\t\t\t\t+ \" should be considered valid!\", coverageData", "+\t\t\t\t\t.isValidSourceLineNumber(validBranches[i]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa0fdcd9001e22b91108c791fdb9058e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coverage/CoverageDataTest.java", "commitBeforeChange": "c3e69d3840be2f7780aae7b00ec462c4b4ba5d92", "commitAfterChange": "8f0d322652edfef35c560d9d4e0b248c7e9ed027", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void testTouch()", "signatureAfterChange": "  \tpublic void testTouch()", "diff": ["-\t\tint line = 5;", "+\t\tint line = 3;", "-\t\tassertEquals(0, a.getHitCount(line));", "-\t\tassertTrue(a.isValidSourceLineNumber(line));", "-\t\tassertEquals(1, a.getHitCount(line));", "-\t\ta.touch(line);", "-\t\tassertEquals(2, a.getHitCount(line));", "-\t\tassertTrue(a.isValidSourceLineNumber(line));", "+\t\tassertFalse(a.isValidSourceLineNumber(line));", "+", "+\t\tassertTrue(b.isValidSourceLineNumber(line));", "+\t\tassertEquals(0, b.getHitCount(line));", "+\t\tb.touch(line);", "+\t\tassertTrue(b.isValidSourceLineNumber(line));", "+\t\tassertEquals(1, b.getHitCount(line));", "+\t\tb.touch(line);", "+\t\tassertEquals(2, b.getHitCount(line));", "+\t\tassertTrue(b.isValidSourceLineNumber(line));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3b66b01eec6eeaff3c1f7bd8d0818b6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f36e2009d57a1dd2b7d2b713edfc666", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tsynchronized public Object getConditionData(int index)", "signatureAfterChange": " \t \tpublic Object getConditionData(int index)", "diff": ["-\tsynchronized public Object getConditionData(int index)", "-\t{", "-\t\tObject branchData = null;", "-\t\t//lock.lock();", "-\t\ttry", "+\tpublic Object getConditionData(int index) {", "+\t\tObject branchData = null;\t\t", "+\t\tint jumpsSize = (jumps == null) ? 0 : jumps.size();", "+\t\tint switchesSize = (switches == null) ? 0 :switches.size();", "+\t\tif (index < jumpsSize) ", "-\t\t\tint jumpsSize = (jumps == null) ? 0 : jumps.size();", "-\t\t\tint switchesSize = (switches == null) ? 0 :switches.size();", "-\t\t\tif (index < jumpsSize) ", "-\t\t\t{", "-\t\t\t\tbranchData = jumps.get(index);", "-\t\t\t}", "-\t\t\telse if (index < jumpsSize + switchesSize)", "-\t\t\t{", "-\t\t\t\tbranchData = switches.get(index - jumpsSize);", "-\t\t\t}", "-\t\t\treturn branchData;", "+\t\t\tbranchData = jumps.get(index);", "-\t\tfinally", "+\t\telse if (index < jumpsSize + switchesSize)", "-\t\t\t//lock.unlock();", "+\t\t\tbranchData = switches.get(index - jumpsSize);", "+\t\treturn branchData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dee10ea196b545e93e5fd0dca6683d0a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tsynchronized public void merge(CoverageData coverageData)", "signatureAfterChange": "  \tsynchronized public void merge(CoverageData coverageData)", "diff": ["-\tsynchronized public void merge(CoverageData coverageData)", "-\t{", "+\tsynchronized public void merge(CoverageData coverageData) {", "-//\t\tgetBothLocks(lineData);", "-\t\ttry", "-\t\t{", "-\t\t\tthis.hits += lineData.hits;", "-\t\t\tif (lineData.jumps != null)", "-\t\t\t\tif (this.jumps == null) ", "-\t\t\t\t\tthis.jumps = lineData.jumps;", "-\t\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()) - 1; i >= 0; i--)", "-\t\t\t\t\t\t((JumpData) this.jumps.get(i)).merge((JumpData) lineData.jumps.get(i));", "-\t\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()); i < lineData.jumps.size(); i++) ", "-\t\t\t\t\t\tthis.jumps.add(lineData.jumps.get(i));", "-\t\t\t\t}", "-\t\t\tif (lineData.switches != null)", "-\t\t\t\tif (this.switches == null) ", "-\t\t\t\t\tthis.switches = lineData.switches;", "-\t\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()) - 1; i >= 0; i--)", "-\t\t\t\t\t\t((SwitchData) this.switches.get(i)).merge((SwitchData) lineData.switches.get(i));", "-\t\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()); i < lineData.switches.size(); i++) ", "-\t\t\t\t\t\tthis.switches.add(lineData.switches.get(i));", "-\t\t\t\t}", "-\t\t\tif (lineData.methodName != null)", "-\t\t\t\tthis.methodName = lineData.methodName;", "-\t\t\tif (lineData.methodDescriptor != null)", "-\t\t\t\tthis.methodDescriptor = lineData.methodDescriptor;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\t//lock.unlock();", "-//\t\t\tlineData.//lock.unlock();", "-\t\t}", "+\t\tthis.hits += lineData.hits;", "+\t\tif (lineData.jumps != null)", "+\t\t\tif (this.jumps == null) ", "+\t\t\t\tthis.jumps = lineData.jumps;", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()) - 1; i >= 0; i--)", "+\t\t\t\t\t((JumpData) this.jumps.get(i)).merge((JumpData) lineData.jumps.get(i));", "+\t\t\t\tfor (int i = Math.min(this.jumps.size(), lineData.jumps.size()); i < lineData.jumps.size(); i++) ", "+\t\t\t\t\tthis.jumps.add(lineData.jumps.get(i));", "+\t\t\t}", "+\t\tif (lineData.switches != null)", "+\t\t\tif (this.switches == null) ", "+\t\t\t\tthis.switches = lineData.switches;", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()) - 1; i >= 0; i--)", "+\t\t\t\t\t((SwitchData) this.switches.get(i)).merge((SwitchData) lineData.switches.get(i));", "+\t\t\t\tfor (int i = Math.min(this.switches.size(), lineData.switches.size()); i < lineData.switches.size(); i++) ", "+\t\t\t\t\tthis.switches.add(lineData.switches.get(i));", "+\t\t\t}", "+\t\tif (lineData.methodName != null)", "+\t\t\tthis.methodName = lineData.methodName;", "+\t\tif (lineData.methodDescriptor != null)", "+\t\t\tthis.methodDescriptor = lineData.methodDescriptor;\t\t"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5a03660cb9f179c1d8aab8457f742d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b035841d78ec77e0b781208cafa685a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coverage/Main.java", "commitBeforeChange": "c3e69d3840be2f7780aae7b00ec462c4b4ba5d92", "commitAfterChange": "8f0d322652edfef35c560d9d4e0b248c7e9ed027", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\t\t\t\tignoreRegex = args[++i];", "+\t\t\t{", "+\t\t\t\t// TODO: Use java.util.regex.Pattern instead of this.", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexp = pc.compile(regex);", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "758251cbead62f143cac82b8409cacd3", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "0c76ce91897e30da3c3c98b0dbde4eaeb37f1634", "commitAfterChange": "d668df191a9fd0e829f2fd715bee289ce66ce39e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-\t\tOutputStream outputStream = null;", "+\t\tClassWriter cw;", "+\t\tClassInstrumenter cv;", "-\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\tClassInstrumenter cv = new ClassInstrumenter(projectData, cw,", "-\t\t\t\t\tignoreRegexp);", "+\t\t\tcw = new ClassWriter(true);", "+\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegexp);", "-\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\tFile outputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t+ \".class\");", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tif (cv.isInstrumented())", "+\t\t\t{", "+\t\t\t\t// If destinationDirectory is null, then overwrite", "+\t\t\t\t// the original, uninstrumented file.", "+\t\t\t\tFile outputFile;", "+\t\t\t\tif (destinationDirectory == null)", "+\t\t\t\t\toutputFile = file;", "+\t\t\t\telse", "+\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t\t\t+ \".class\");", "+", "+\t\t\t\tFile parentFile = outputFile.getParentFile();", "+\t\t\t\tif (parentFile != null)", "+\t\t\t\t{", "+\t\t\t\t\tparentFile.mkdirs();", "+\t\t\t\t}", "+", "+\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+\t\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\t\toutputStream.write(instrumentedClass);", "+\t\t\t}", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger.warn(", "+\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "+\t\t\treturn;", "+\t\t}", "+\t\tfinally", "+\t\t{"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97c2f3f7af084f0cc72c05c4de87db06", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/test/XmlFormatterTest.java", "commitBeforeChange": "f44527006156d82d108277efea7d0bf4a4cd5a22", "commitAfterChange": "c277fa7366a5b91289ee476b78638d0f14478c1c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void setTestDir( File testDir_ )", "signatureAfterChange": "      private File getXslFile( String filename )", "diff": ["+", "+    private File getXslFile( String filename )", "+    {", "+        return new File( getTestDir(), \"..\" + File.separator + \"xslt\" + File.separator + filename );", "-", "-    public void setTestDir( File testDir_ ) {", "-        testDir = testDir_;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15a80bbb137e7938062abec73f3c587", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "96469033f1a13b494650807a91e60786c81285c4", "commitAfterChange": "aabd4b798e0d5387236256769b599ac6f31ac21c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-\t\t\t\tthis.ignoreRegexp = Pattern.compile(regex);", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexp = pc.compile(regex);", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}"]}]}
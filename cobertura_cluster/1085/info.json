{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d22ef90d24985c4e847d155365d20eb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33d966e2086e7448476f2f0ae359a542", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "signatureAfterChange": "    public double getBranchCoverageRate(String methodNameAndDescriptor)", "diff": ["-\t */", "-\tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "-\t{", "-\t\tint total = 0;", "-\t\tint hits = 0;", "+    */", "+   public double getBranchCoverageRate(String methodNameAndDescriptor) {", "+      int total = 0;", "+      int covered = 0;", "-\t\tIterator iter = branches.values().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tLineData next = (LineData)iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName()", "-\t\t\t\t\t+ next.getMethodDescriptor()))", "-\t\t\t{", "-\t\t\t\ttotal++;", "-\t\t\t\tif (next.getHits() > 0)", "-\t\t\t\t{", "-\t\t\t\t\thits++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (total == 0)", "-\t\t\treturn 1d;", "-\t\treturn (double)hits / total;", "-\t}", "+      for (Iterator iter = branches.values().iterator(); iter.hasNext();) {", "+         LineData next = (LineData) iter.next();", "+         if (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) {", "+            total += next.getNumberOfValidBranches();", "+            covered += next.getNumberOfCoveredBranches();", "+         }", "+      }", "+      if (total == 0) return 1.0;", "+      return (double) covered / total;", "+   }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390dabcd63fffccc04ab72e477e202a1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic double getLineCoverageRate(String methodNameAndDescriptor)", "signatureAfterChange": " \tpublic double getLineCoverageRate(String methodNameAndDescriptor)", "diff": ["-\t\tIterator iter = children.values().iterator();", "-\t\twhile (iter.hasNext()) ", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tLineData next = (LineData) iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) ", "+\t\t\tIterator iter = children.values().iterator();", "+\t\t\twhile (iter.hasNext()) ", "-\t\t\t\ttotal++;", "-\t\t\t\tif (next.getHits() > 0) {", "-\t\t\t\t\thits++;", "+\t\t\t\tLineData next = (LineData) iter.next();", "+\t\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor())) ", "+\t\t\t\t{", "+\t\t\t\t\ttotal++;", "+\t\t\t\t\tif (next.getHits() > 0) {", "+\t\t\t\t\t\thits++;", "+\t\t\t\t\t}", "+\t\t\tif (total == 0) return 1d;", "+\t\t\treturn (double) hits / total;", "-\t\tif (total == 0) return 1d;", "-\t\treturn (double) hits / total;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813629630184ee0e082cb9ee15a90d38", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "signatureAfterChange": " \tpublic double getBranchCoverageRate(String methodNameAndDescriptor)", "diff": ["-\t\tfor (Iterator iter = branches.values().iterator(); iter.hasNext();) {", "-\t\t\tLineData next = (LineData) iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor()))", "-\t\t\t{", "-\t\t\t\ttotal += next.getNumberOfValidBranches();", "-\t\t\t\tcovered += next.getNumberOfCoveredBranches();", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tfor (Iterator iter = branches.values().iterator(); iter.hasNext();) {", "+\t\t\t\tLineData next = (LineData) iter.next();", "+\t\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName() + next.getMethodDescriptor()))", "+\t\t\t\t{", "+\t\t\t\t\ttotal += next.getNumberOfValidBranches();", "+\t\t\t\t\tcovered += next.getNumberOfCoveredBranches();", "+\t\t\t\t}", "+\t\t\tif (total == 0) return 1.0;", "+\t\t\treturn (double) covered / total;", "-\t\tif (total == 0) return 1.0;", "-\t\treturn (double) covered / total;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa9f18cf1bfcf5aee129a667bdcc513a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ClassData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic Collection getLines(String methodNameAndDescriptor)", "signatureAfterChange": "  \tpublic Collection getLines(String methodNameAndDescriptor)", "diff": ["-\t\tIterator iter = children.values().iterator();", "-\t\twhile (iter.hasNext())", "+\t\tlock.lock();", "+\t\ttry", "-\t\t\tLineData next = (LineData)iter.next();", "-\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName()", "-\t\t\t\t\t+ next.getMethodDescriptor()))", "+\t\t\tIterator iter = children.values().iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\tlines.add(next);", "+\t\t\t\tLineData next = (LineData)iter.next();", "+\t\t\t\tif (methodNameAndDescriptor.equals(next.getMethodName()", "+\t\t\t\t\t\t+ next.getMethodDescriptor()))", "+\t\t\t\t{", "+\t\t\t\t\tlines.add(next);", "+\t\t\t\t}", "+\t\t\treturn lines;", "-\t\treturn lines;", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e074cdc5c7744b55e76c1de63b1cf4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tsuper.merge(coverageData);", "-", "-\t\tfor (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();)", "+\t\tgetBothLocks(projectData);", "+\t\ttry", "-\t\t\tObject key = iter.next();", "-\t\t\tif (!this.classes.containsKey(key))", "+\t\t\tsuper.merge(coverageData);", "+\t", "+\t\t\tfor (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();)", "-\t\t\t\tthis.classes.put(key, projectData.classes.get(key));", "+\t\t\t\tObject key = iter.next();", "+\t\t\t\tif (!this.classes.containsKey(key))", "+\t\t\t\t{", "+\t\t\t\t\tthis.classes.put(key, projectData.classes.get(key));", "+\t\t\t\t}", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tprojectData.lock.unlock();"]}]}
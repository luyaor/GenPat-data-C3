{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40b382dbd26d22972c79284e63b4a058", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bb141097f724067568f0e67bc5cd78a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/PackageData.java", "commitBeforeChange": "3a88f8312591e720c6c5583a3c854cd8911977a7", "commitAfterChange": "28a503bb032971e8c3210d048d0d0939d0e8f231", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic void addClassData(ClassData classData)", "signatureAfterChange": "  \tpublic void addClassData(ClassData classData)", "diff": ["+", "-\t\tif (children.containsKey(classData.getBaseName()))", "-\t\t\tthrow new IllegalArgumentException(\"Package \" + this.name", "-\t\t\t\t\t+ \" already contains a class with the name \"", "-\t\t\t\t\t+ classData.getBaseName());", "+\t    // this method aggregates data if classData is an inner class", "+\t    //  with the data from the top level class that it is contained in", "+\t    LOGGER.debug(\"addClassData: \" + classData.getName());", "+\t    String parentClassName = getClassNameIgnoreInner(classData.getName());", "+\t    LOGGER.debug(\"\\tparentClassName = \" + parentClassName);", "+\t    String keyName = new ClassData(parentClassName).getBaseName();", "+\t    LOGGER.debug(\"\\tkeyName = \" + keyName);", "+\t    ", "+\t    ClassData parent = getClassData(classData.getName());", "+        if (parent == null) {", "+            LOGGER.debug(\"\\tno parent\");", "+            parent = new ClassData(parentClassName);", "+        }", "+        classData.merge(parent);", "-\t\tchildren.put(classData.getBaseName(), classData);", "+        LOGGER.debug(\"putting \" + keyName + \" = \" + classData.getName());", "+\t\tchildren.put(keyName, classData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423ce490d29998ac7c3610a6b712e82a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void generateOverview(Package pkg) throws IOException", "signatureAfterChange": "  \tprivate void generateOverview(PackageData packageData) throws IOException", "diff": ["-\tprivate void generateOverview(Package pkg) throws IOException", "+\tprivate void generateOverview(PackageData packageData) throws IOException", "-\t\tif (pkg == null)", "+\t\tif (packageData == null)", "-\t\t\tfilename = \"frame-summary-\" + pkg.getName() + \".html\";", "+\t\t\tfilename = \"frame-summary-\" + packageData.getName() + \".html\";", "-\t\t\tout.print(pkg == null ? \"All Packages\" : generatePackageName(pkg));", "+\t\t\tout.print(packageData == null", "+\t\t\t\t\t? \"All Packages\"", "+\t\t\t\t\t: generatePackageName(packageData));", "-\t\t\tSet packages;", "-\t\t\tif (pkg == null)", "+\t\t\tCollection packages;", "+\t\t\tif (packageData == null)", "-\t\t\t\tpackages = coverage.getPackages();", "+\t\t\t\tpackages = projectData.getChildren();", "-\t\t\t\t// Output a line for the current package", "-\t\t\t\tout.println(generateTableRowForPackage(pkg));", "-", "-\t\t\t\tpackages = coverage.getSubPackages(pkg);", "+\t\t\t\tpackages = projectData.getSubPackages(packageData.getName());", "+\t\t\t// TODO: Do we need this extra \"package.size() > 0\" check?", "-\t\t\t\t\tPackage subpkg = (Package)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForPackage(subpkg));", "+\t\t\t\t\tPackageData subPackageData = (PackageData)iter.next();", "+\t\t\t\t\tout.println(generateTableRowForPackage(subPackageData));", "-\t\t\tSet classes;", "-\t\t\tif (pkg == null)", "+\t\t\tCollection classes;", "+\t\t\tif (packageData == null)", "-\t\t\t\tif (coverage.getNumberOfClasses() > 0)", "+\t\t\t\tif (projectData.getNumberOfClasses() > 0)", "-\t\t\t\t\tIterator iter = coverage.getClasses().iterator();", "+\t\t\t\t\tIterator iter = projectData.getClasses().iterator();", "-\t\t\t\t\t\tClazz clazz = (Clazz)iter.next();", "-\t\t\t\t\t\tif (clazz.getPackageName() == null)", "+\t\t\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\t\t\tif (classData.getPackageName() == null)", "-\t\t\t\t\t\t\tclasses.add(clazz);", "+\t\t\t\t\t\t\tclasses.add(classData);", "-\t\t\t\tclasses = pkg.getClasses();", "+\t\t\t\tclasses = packageData.getChildren();", "-\t\t\t\t\tClazz clazz = (Clazz)iter.next();", "-\t\t\t\t\tout.println(generateTableRowForClass(clazz));", "+\t\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\t\tout.println(generateTableRowForClass(classData));", "-\t\t\t\t\t.println(\"Reports generated by <a href=\\\"http://cobertura.sourceforge.net/\\\" target=\\\"_top\\\">Cobertura</a>.\");", "+\t\t\t\t\t.println(\"Report generated by <a href=\\\"http://cobertura.sourceforge.net/\\\" target=\\\"_top\\\">Cobertura</a>.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c6821261cc0954c28b50151a6d4065", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateClassList(Package pkg) throws IOException", "signatureAfterChange": "  \tprivate void generateClassList(PackageData packageData) \t\t\tthrows IOException", "diff": ["-\tprivate void generateClassList(Package pkg) throws IOException", "+\tprivate void generateClassList(PackageData packageData)", "+\t\t\tthrows IOException", "-\t\tif (pkg == null)", "+\t\tif (packageData == null)", "-\t\t\tclasses = coverage.getClassesSortedByBasename().values();", "+\t\t\t//TODO: Need to sort classes", "+\t\t\tclasses = projectData.getClasses();", "-\t\t\tfilename = \"frame-classes-\" + pkg.getName() + \".html\";", "-\t\t\tclasses = pkg.getClasses();", "+\t\t\tfilename = \"frame-classes-\" + packageData.getName() + \".html\";", "+\t\t\tclasses = packageData.getChildren();", "-\t\t\tout.println(pkg == null ? \"All Packages\" : generatePackageName(pkg));", "+\t\t\tout.println(packageData == null", "+\t\t\t\t\t? \"All Packages\"", "+\t\t\t\t\t: generatePackageName(packageData));", "-\t\t\tfor (Iterator iter = classes.iterator(); iter.hasNext();)", "+\t\t\tIterator iter;", "+\t\t\tMap sortedClassList = new TreeMap();", "+\t\t\titer = classes.iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\tClazz clazz = (Clazz)iter.next();", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\t\tsortedClassList.put(classData.getBaseName(), classData);", "+\t\t\t}", "+\t\t\titer = sortedClassList.values().iterator();", "+\t\t\twhile (iter.hasNext())", "+\t\t\t{", "+\t\t\t\tClassData classData = (ClassData)iter.next();", "-\t\t\t\tif (clazz.getNumberOfLines() > 0)", "-\t\t\t\t\tpercentCovered = getPercentValue(clazz", "+\t\t\t\tif (classData.getNumberOfValidLines() > 0)", "+\t\t\t\t\tpercentCovered = getPercentValue(classData", "-\t\t\t\t\t\t\t\t+ clazz.getLongName()", "+\t\t\t\t\t\t\t\t+ classData.getName()", "-\t\t\t\t\t\t\t\t+ clazz.getName()", "+\t\t\t\t\t\t\t\t+ classData.getBaseName()"]}]}
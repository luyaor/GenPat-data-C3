{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1e453d38c685e3b1110d63d15a6c479", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732cb4af045975950b65b92190ed184f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Main(String[] args)", "signatureAfterChange": "      private void parseArguments(String[] args)", "diff": ["-\tprivate Main(String[] args)", "-\t{", "-\t\tFile dataFile = null;", "-\t\tFile currentBaseDir = null;", "-\t\tCollection baseDirs = new Vector();", "-\t\tCollection locations = new Vector();", "-\t\t// Parse our parameters", "-\t\tfor (int i = 0; i < args.length; i++)", "-\t\t{", "-\t\t\tif (args[i].equals(\"--basedir\"))", "-\t\t\t{", "-\t\t\t\tcurrentBaseDir = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--datafile\"))", "-\t\t\t{", "-\t\t\t\tif (dataFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tSystem.err.println(\"You may only specify one data file.\");", "-\t\t\t\t\tSystem.exit(-1);", "-\t\t\t\t}", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--destination\"))", "-\t\t\t{", "-\t\t\t\tif (this.destinationDirectory != null)", "-\t\t\t\t{", "-\t\t\t\t\tSystem.err", "-\t\t\t\t\t\t\t.println(\"You may only specify one destination directory.\");", "-\t\t\t\t\tSystem.exit(-1);", "-\t\t\t\t}", "-\t\t\t\tthis.destinationDirectory = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "-\t\t\t{", "-\t\t\t\tString regex = args[++i];", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "-\t\t\t\t\tthis.ignoreRegexs.add(pc.compile(regex));", "-\t\t\t\t}", "-\t\t\t\tcatch (MalformedPatternException e)", "-\t\t\t\t{", "-\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "-\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tlocations.add(args[i]);", "-\t\t\t\tbaseDirs.add(currentBaseDir);", "-\t\t\t}", "-\t\t}", "-\t\t// Load coverage data", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tthis.projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (this.projectData == null)", "-\t\t\tthis.projectData = new ProjectData();", "-\t\t// Instrument classes", "-\t\tIterator iter = locations.iterator();", "-\t\tIterator baseDirIter = baseDirs.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t\taddInstrumentation((File)baseDirIter.next(), (String)iter.next());", "-\t\t// Save coverage data", "-\t\tCoverageDataFileHandler.saveCoverageData(this.projectData, dataFile);", "-\t}", "+    private void parseArguments(String[] args)", "+    {", "+        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+        // Parse our parameters", "+        FileFinder finder = new FileFinder();", "+        for (int i = 0; i < args.length; i++)", "+        {", "+            if (args[i].equals(\"--basedir\"))", "+                finder.addBaseDirectory(new File(args[++i]));", "+            else if (args[i].equals(\"--datafile\"))", "+                dataFile = new File(args[++i]);", "+            else if (args[i].equals(\"--destination\"))", "+                destinationDirectory = new File(args[++i]);", "+            else if (args[i].equals(\"--ignore\"))", "+            {", "+                String regex = args[++i];", "+                try", "+                {", "+                    Perl5Compiler pc = new Perl5Compiler();", "+                    this.ignoreRegexes.add(pc.compile(regex));", "+                }", "+                catch (MalformedPatternException e)", "+                {", "+                    logger.warn(\"The regular expression \" + regex", "+                            + \" is invalid: \" + e.getLocalizedMessage());", "+                }", "+            }", "+            else", "+                finder.addSourceFilePath(args[i]);", "+        }", "+        // Load coverage data, instrument classes, save coverage data", "+        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+        if (projectData == null)", "+            projectData = new ProjectData();", "+        Iterator iter = finder.getFilePaths().iterator();", "+        while (iter.hasNext())", "+            addInstrumentation((String)iter.next());", "+        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76ad6a261780249fd97f34becc2dac08", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "commitAfterChange": "aca3d012a32f8d1cc78e6d8a28c8ae27f9238ef8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-    private void parseArguments(String[] args)", "-    {", "-        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\tprivate void parseArguments(String[] args)", "+\t{", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-        // Parse our parameters", "-        List filePaths = new ArrayList();", "-        for (int i = 0; i < args.length; i++)", "-        {", "-            if (args[i].equals(\"--basedir\")) ", "-            {", "-            \tfilePaths.add( args[i]);", "-            \tfilePaths.add( args[++i]);", "-            }", "-            else if (args[i].equals(\"--datafile\"))", "-                dataFile = new File(args[++i]);", "-            else if (args[i].equals(\"--destination\"))", "-                destinationDirectory = new File(args[++i]);", "-            else if (args[i].equals(\"--ignore\"))", "-            {", "-                String regex = args[++i];", "-                try", "-                {", "-                    Perl5Compiler pc = new Perl5Compiler();", "-                    this.ignoreRegexes.add(pc.compile(regex));", "-                }", "-                catch (MalformedPatternException e)", "-                {", "-                    logger.warn(\"The regular expression \" + regex", "-                            + \" is invalid: \" + e.getLocalizedMessage());", "-                }", "-            }", "+\t\t// Parse our parameters", "+\t\tList filePaths = new ArrayList();", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t{", "+\t\t\tif (args[i].equals(\"--basedir\"))", "+\t\t\t{", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t\tfilePaths.add(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\t\tdestinationDirectory = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t{", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexes.add(pc.compile(regex));", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}", "-            \tfilePaths.add( args[i]);", "-            }", "-        }", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t}", "+\t\t}", "-        // Load coverage data", "-        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-        if (projectData == null)", "-            projectData = new ProjectData();", "+\t\t// Load coverage data", "+\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (projectData == null)", "+\t\t\tprojectData = new ProjectData();", "-        // Instrument classes", "-        String baseDir = null;", "-\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "-        Iterator iter = filePaths.iterator();", "+\t\t// Instrument classes", "+\t\tSystem.out.println(\"Instrumenting \"\t+ filePaths.size() + \" \"", "+\t\t\t\t+ (filePaths.size() == 1 ? \"class\" : \"classes\")", "+\t\t\t\t+ (destinationDirectory != null ? \" to \"", "+\t\t\t\t\t\t+ destinationDirectory.getAbsoluteFile() : \"\"));", "+\t\tString baseDir = null;", "+\t\tIterator iter = filePaths.iterator();", "-        \tString act = (String) iter.next();", "+\t\t\tString act = (String)iter.next();", "-       \t\t\tbaseDir = (String) iter.next();", "+\t\t\t\tbaseDir = (String)iter.next();", "-        \t\taddInstrumentation( baseDir, act);", "-        \t}", "-        }", "-        ", "-        // Save coverage data", "-        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "-    }", "+\t\t\t\taddInstrumentation(baseDir, act);", "+\t\t\t}", "+\t\t}", "+\t\t// Save coverage data", "+\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3d4d362babcd4c64cc9a67c0fc0d11", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate Main(String[] args)", "diff": ["+\tprivate Main(String[] args)", "+\t\tFile dataFile = null;", "+\t\tFile currentBaseDir = null;", "+\t\tCollection baseDirs = new Vector();", "+\t\tCollection locations = new Vector();", "+\t\t// Parse our parameters", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t\tif (args[i].equals(\"--basedir\"))", "+\t\t\t\tcurrentBaseDir = new File(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t{", "+\t\t\t\tif (dataFile != null)", "+\t\t\t\t\tSystem.err.println(\"You may only specify one data file.\");", "+\t\t\t\t\tSystem.exit(-1);", "+\t\t\t\t}", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\t{", "+\t\t\t\tif (this.destinationDirectory != null)", "+\t\t\t\t{", "+\t\t\t\t\tSystem.err", "+\t\t\t\t\t\t\t.println(\"You may only specify one destination directory.\");", "+\t\t\t\t\tSystem.exit(-1);", "+\t\t\t\t}", "+\t\t\t\tthis.destinationDirectory = new File(args[++i]);", "+\t\t\t}", "+", "+\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t{", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexs.add(pc.compile(regex));", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tlocations.add(args[i]);", "+\t\t\t\tbaseDirs.add(currentBaseDir);", "+\t\t\t}", "+", "+\t\t}", "+", "+\t\t// Load coverage data", "+\t\tif (dataFile == null)", "+\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tthis.projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (this.projectData == null)", "+\t\t\tthis.projectData = new ProjectData();", "+", "+\t\t// Instrument classes", "+\t\tIterator iter = locations.iterator();", "+\t\tIterator baseDirIter = baseDirs.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t\taddInstrumentation((File)baseDirIter.next(), (String)iter.next());", "+", "+\t\t// Save coverage data", "+\t\tCoverageDataFileHandler.saveCoverageData(this.projectData, dataFile);", "+\t}", "-\tprivate void parseArguments(String[] args)", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-", "-\t\t// Parse our parameters", "-\t\tCollection locations = new Vector();", "-\t\tfor (int i = 0; i < args.length; i++)", "-\t\t{", "-\t\t\tif (args[i].equals(\"--basedir\"))", "-\t\t\t\tbaseDir = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--datafile\"))", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--destination\"))", "-\t\t\t\tdestinationDirectory = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "-\t\t\t{", "-\t\t\t\tString regex = args[++i];", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "-\t\t\t\t\tthis.ignoreRegex = pc.compile(regex);", "-\t\t\t\t}", "-\t\t\t\tcatch (MalformedPatternException e)", "-\t\t\t\t{", "-\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "-\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\t\tlocations.add(args[i]);", "-\t\t}", "-", "-\t\t// Load coverage data, instrument classes, save coverage data", "-\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (projectData == null)", "-\t\t\tprojectData = new ProjectData();", "-\t\tIterator iter = locations.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t\taddInstrumentation((String)iter.next());", "-\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);"]}]}
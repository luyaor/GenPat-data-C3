{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c23aa263277379d09b1447e40cc7db9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18407300b7f3c5e7f55ff64bace6ac54", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "17ed1ebc3f2c5731fde05cb16ec241804d74f19e", "commitAfterChange": "ef9a5da8b3641f9dbd994e614f644ecb64c0a580", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tprivate void addInstrumentation(FileInfo fileInfo)", "signatureAfterChange": " \tprivate void addInstrumentation(CoberturaFile coberturaFile)", "diff": ["-\tprivate void addInstrumentation(FileInfo fileInfo)", "+\tprivate void addInstrumentation(CoberturaFile coberturaFile)", "-\t\tif (fileInfo.isClass() && shouldInstrument(fileInfo.pathname))", "+\t\tif (coberturaFile.isClass() && shouldInstrument(coberturaFile.pathname))", "-\t\t\taddInstrumentationToSingleClass(fileInfo);", "+\t\t\taddInstrumentationToSingleClass(coberturaFile);", "-\t\telse if (fileInfo.isDirectory())", "+\t\telse if (coberturaFile.isDirectory())", "-\t\t\tString[] contents = fileInfo.list();", "+\t\t\tString[] contents = coberturaFile.list();", "-\t\t\t\tFile relativeFile = new File(fileInfo.pathname, contents[i]);", "-\t\t\t\tFileInfo relativeFileInfo = new FileInfo(fileInfo.baseDir, relativeFile.toString());", "+\t\t\t\tFile relativeFile = new File(coberturaFile.pathname, contents[i]);", "+\t\t\t\tCoberturaFile relativeCoberturaFile = new CoberturaFile(coberturaFile.baseDir,", "+\t\t\t\t\t\trelativeFile.toString());", "-\t\t\t\taddInstrumentation(relativeFileInfo);", "+\t\t\t\taddInstrumentation(relativeCoberturaFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba58b5fa831e068088d1466996c35aa0", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "8b78aded7bc2195ca2875df15fa36b034194b55e", "commitAfterChange": "6febec9638071e32d498b4bd4a149cb4872b0993", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprivate void addInstrumentation(File file)", "signatureAfterChange": " \tprivate void addInstrumentation(File file)", "diff": ["-\t//       exists and is newer than the input file.", "-\tprivate void addInstrumentation(File file)", "-\t\tif (file.isDirectory())", "-\t\t\tFile[] contents = file.listFiles();", "-\t\t\tfor (int i = 0; i < contents.length; i++)", "-\t\t\t\taddInstrumentation(contents[i]);", "-\t\t\treturn;", "-\t\tif (!isClass(file))", "-\t\t\treturn;", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"instrumenting \" + file.getAbsolutePath());", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t\tlogger.warn(", "-\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "-\t\t\tlogger.warn(", "-\t\t\t\t\t\"Unable to instrument file \" + file.getAbsolutePath(), e);", "+\t//       exists and is newer than the input file.", "+\tprivate void addInstrumentation(File file)", "+\t{", "+\t\tif (isClass(file))", "+\t\t{", "+\t\t\taddInstrumentationToSingleClass(file);", "+\t\t}", "+\t\telse if (file.isDirectory())", "+\t\t{", "+\t\t\tFile[] contents = file.listFiles();", "+\t\t\tfor (int i = 0; i < contents.length; i++)", "+\t\t\t\taddInstrumentation(contents[i]);", "+\t\t}", "+\t\telse if (isArchive(file))", "+\t\t{", "+\t\t\taddInstrumentationToArchive(file);", "+\t\t}", "+\t}"]}]}
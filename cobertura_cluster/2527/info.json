{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8883db22806aa840fe0e7b3f7ba91f86", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ec06d7245a29477d634ccfcb676417f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/util/WebappServer.java", "commitBeforeChange": "c375766d9094530d2f833df204ec339bfbb1b3b9", "commitAfterChange": "eca94255cccacd9f5e33441462a1b8a3ddc4d322", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void deployApp(Map map) throws Exception", "signatureAfterChange": " \t \tpublic void deployApp(File srcDir, boolean instrumentCobertura, boolean deployCoberturaFlush, boolean modifyMainCoberturaDataFile, String instrumentRegEx) throws Exception", "diff": ["-\t */", "-\tpublic void deployApp(Map map) throws Exception {", "-\t\tmodifyMainCoberturaDataFile = (map", "-\t\t\t\t.containsKey(\"modifyMainCoberturaDataFile\")) ? (Boolean) map", "-\t\t\t\t.get(\"modifyMainCoberturaDataFile\") : false;", "+\t", "+\tpublic void deployApp(File srcDir, boolean instrumentCobertura, boolean deployCoberturaFlush, boolean modifyMainCoberturaDataFile, String instrumentRegEx) throws Exception{", "+\t\tthis.modifyMainCoberturaDataFile = modifyMainCoberturaDataFile;", "-\t\tFile webInfFile = writeWebInfFile(webInfDir, (String) map", "-\t\t\t\t.get(\"webInfText\"));", "+\t\tFile webInfFile = writeWebInfFile(webInfDir, SIMPLE_SERVLET_WEB_XML_TEXT);", "-\t\tcompileSourceFiles((File) map.get(\"srcDir\"), classesDir);", "+\t\tcompileSourceFiles(srcDir, classesDir);", "-\t\tFile war = makeWarFile((String) map.get(\"appName\"), webInfFile,", "+\t\tFile war = makeWarFile(appName, webInfFile,", "-\t\tDelete delete = new Delete();", "-\t\tdelete.setProject(TestUtils.project);", "-\t\tdelete.setDir(extractedDir);", "-\t\tdelete.execute();", "+\t\tFileUtils.deleteDirectory(extractedDir);", "-\t\tif (map.get(\"instrumentRegEx\") != null) {", "-\t\t\tinstrumentWar(war, (String) map.get(\"instrumentRegEx\"));", "+\t\tif (instrumentRegEx != null) {", "+\t\t\tinstrumentWar(war, instrumentRegEx);", "-\t\tif (map.get(\"instrumentCobertura\") != null) {", "+\t\tif (instrumentCobertura != false) {", "-\t\tif (map.get(\"deployCoberturaFlush\") != null) {", "-\t\t\tdeployCoberturaFlush((map.containsKey(\"instrumentCobertura\"))", "-\t\t\t\t\t? (Boolean) map.get(\"instrumentCobertura\")", "-\t\t\t\t\t: false);", "+\t\tif (deployCoberturaFlush != false) {", "+\t\t\tdeployCoberturaFlush(deployCoberturaFlush);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d01d61033aaf39dfaefcee3d0eefade", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/CoverageTest.java", "commitBeforeChange": "7cdece92ea0660e086a27d07d0eef3df4b583a23", "commitAfterChange": "100512ee483a0d8eebc3eb78a5d8913b7b64ddb6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void setUp()", "signatureAfterChange": " \t \tpublic void setUp()", "diff": ["+\t", "-\t\tclazz1 = new Clazz(\"HelloWorld\");", "-\t\tclazz1.setNumberOfBranches(4);", "-\t\tclazz1.setNumberOfCoveredBranches(2);", "-\t\tclazz1.setNumberOfCoveredLines(20);", "-\t\tclazz1.setNumberOfLines(40);", "-\t\tfor (int i = 0; i < clazz1.getNumberOfLines(); i++)", "-\t\t{", "-\t\t\tclazz1.addLine(i + 1, 5 * (i + 1));", "-\t\t}", "-", "-\t\tclazz2 = new Clazz(\"com.example.HelloWorld\");", "-\t\tclazz2.setNumberOfBranches(6);", "-\t\tclazz2.setNumberOfCoveredBranches(3);", "-\t\tclazz2.setNumberOfCoveredLines(10);", "-\t\tclazz2.setNumberOfLines(20);", "-\t\tfor (int i = 0; i < clazz2.getNumberOfLines(); i++)", "-\t\t{", "-\t\t\tclazz1.addLine(i + 1, 4 * (i + 1));", "-\t\t}", "-", "-\t\tclazz3 = new Clazz(\"com.example.GoodbyeWorld\");", "-\t\tclazz3.setNumberOfBranches(8);", "-\t\tclazz3.setNumberOfCoveredBranches(4);", "-\t\tclazz3.setNumberOfCoveredLines(5);", "-\t\tclazz3.setNumberOfLines(10);", "-\t\tfor (int i = 0; i < clazz3.getNumberOfLines(); i++)", "-\t\t{", "-\t\t\tclazz1.addLine(i + 1, 9 * (i + 1));", "-\t\t}", "+\t    // clazz1 expects 50% line coverage && 100% branch coverage ", "+\t    clazz1 = new Clazz(\"HelloWorld\", getTestDataInstance(40, 20, new int[] { 5, 10, 15, 18 }));", "+\t    // clazz2 expects 50% line coverage && 66% branch coverage", "+\t    clazz2 = new Clazz(\"com.example.HelloWorld\", getTestDataInstance(20, 10, new int[] { 4, 7, 15 }));", "+\t    // clazz3 expects 40% line coverage && 33% branch coverage", "+\t    clazz3 = new Clazz(\"com.example.GoodbyeWorld\", getTestDataInstance(10, 4, new int[] { 3, 7, 9 }));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c4128b08772b66a493af6047f4a28f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/AbstractCoberturaTestCase.java", "commitBeforeChange": "5c95e91c4fb8eaabadd9ca6cf6b3ebb78c8822c3", "commitAfterChange": "75f2a2aa41065d346a83ea898e7b1a155a99d13e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic static void parseIssueTester(String imports, String method) \t\t\tthrows IOException", "signatureAfterChange": " \tpublic static void parseIssueTester(String imports, String method) \t\t\tthrows IOException", "diff": ["-\t\tDefaultLogger fileLogger = new DefaultLogger();", "-\t\tfileLogger.setErrorPrintStream(new PrintStream(new File(reportDir,", "-\t\t\t\t\"error.log\")));", "-\t\tfileLogger.setOutputPrintStream(new PrintStream(new File(reportDir,", "-\t\t\t\t\"std.log\")));", "-\t\tfileLogger.setMessageOutputLevel(Project.MSG_INFO);", "-\t\tTestUtils.project.addBuildListener(fileLogger);", "+\t\tdebugReportTask();", "-\t\tReportTask reportTask = new ReportTask();", "-\t\treportTask.setProject(TestUtils.project);", "-\t\treportTask.setDataFile(datafile.getAbsolutePath());", "-\t\treportTask.setFormat(\"xml\");", "-\t\treportTask.setSrcDir(srcDir.getAbsolutePath());", "-\t\treportTask.setDestDir(reportDir);", "-\t\treportTask.setFailonerror(true);", "-\t\treportTask.execute();", "-", "-\t\tTestUtils.project.removeBuildListener(fileLogger);", "-", "-\t\tif (FileUtils.readFileToString(new File(reportDir, \"error.log\"))", "-\t\t\t\t.contains(\"JavaNCSS got an error while parsing the java file\"))", "+\t\tif (FileUtils", "+\t\t\t\t.readFileToString(new File(reportDir, \"error.log\"))", "+\t\t\t\t.contains(", "+\t\t\t\t\t\t\"net.sourceforge.cobertura.javancss.parser.ParseException\"))", "-\t\tif (FileUtils.readFileToString(new File(reportDir, \"std.log\"))", "-\t\t\t\t.contains(\"JavaNCSS got an error while parsing the java file\"))", "+\t\tif (FileUtils", "+\t\t\t\t.readFileToString(new File(reportDir, \"std.log\"))", "+\t\t\t\t.contains(", "+\t\t\t\t\t\t\"net.sourceforge.cobertura.javancss.parser.ParseException\"))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e4bff4bd55bb41a767ad7ca60780c6a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/merge/Main.java", "commitBeforeChange": "6a303122a10f7fb224550410433e3c73cc07f939", "commitAfterChange": "918d96136e3b4ad59ee8aedd80494eb94f76c036", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(String[] args)", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tFile baseDir = null;", "-\t\tList filesToMerge = new ArrayList();", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "+", "+\t\tString baseDir = null;", "-\t\t\tif (args[i].equals(\"--datafile\"))", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\telse if (args[i].equals(\"--basedir\"))", "-\t\t\t\tbaseDir = new File(args[++i]);", "-\t\t\telse", "-\t\t\t\tfilesToMerge.add(new File(baseDir, args[i]));", "+\t\t\tif (args[i].equals(\"--datafile\")) {", "+\t\t\t\tbuilder.setDataFile(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--basedir\")) {", "+\t\t\t\tbaseDir = args[++i];", "+\t\t\t\tbuilder.setBaseDirectory(baseDir);", "+\t\t\t} else {", "+\t\t\t\tbuilder.addFileToMerge(new File(baseDir, args[i])", "+\t\t\t\t\t\t.getAbsolutePath());", "+\t\t\t}", "-\t\t// Load coverage data", "-\t\tProjectData projectData = null;", "-\t\tif (dataFile.isFile())", "-\t\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (projectData == null)", "-\t\t\tprojectData = new ProjectData();", "-", "-\t\tif (filesToMerge.isEmpty()) {", "-\t\t\tSystem.err.println(\"Error: No files were specified for merging.\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t// Merge everything", "-\t\tIterator iter = filesToMerge.iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tFile newDataFile = (File) iter.next();", "-\t\t\tProjectData projectDataNew = CoverageDataFileHandler", "-\t\t\t\t\t.loadCoverageData(newDataFile);", "-\t\t\tif (projectDataNew != null)", "-\t\t\t\tprojectData.merge(projectDataNew);", "-\t\t}", "-", "-\t\t// Save the combined data file", "-\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t\tnew Cobertura(builder.build()).merge().saveProjectData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7275ed984647513e400a391268aae87e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/test/AbstractCoberturaTestCase.java", "commitBeforeChange": "ff8cad0e718c0f189f430976fa2d30c021b6bcab", "commitAfterChange": "7e78be0e4979458a03625707b0438775e50fbd13", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic Node createAndExecuteMainMethod(String packageName, String fileName, \t\t\tString fileContent, String mainMethod) throws Exception", "signatureAfterChange": "  \tpublic Node createAndExecuteMainMethod(String packageName, String fileName, \t\t\tString fileContent, String mainMethod) throws Exception", "diff": ["+\t\treturn createAndExecuteMainMethod(packageName, fileName, fileContent, mainMethod, \"xml\");", "+\t}", "-\t\treportTask.setDestDir(srcDir);", "-", "-\t\treturn TestUtils.getXMLReportDOM(srcDir.getAbsolutePath()", "-\t\t\t\t+ \"/coverage.xml\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "732cb4af045975950b65b92190ed184f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate Main(String[] args)", "signatureAfterChange": "      private void parseArguments(String[] args)", "diff": ["-\tprivate Main(String[] args)", "-\t{", "-\t\tFile dataFile = null;", "-\t\tFile currentBaseDir = null;", "-\t\tCollection baseDirs = new Vector();", "-\t\tCollection locations = new Vector();", "-\t\t// Parse our parameters", "-\t\tfor (int i = 0; i < args.length; i++)", "-\t\t{", "-\t\t\tif (args[i].equals(\"--basedir\"))", "-\t\t\t{", "-\t\t\t\tcurrentBaseDir = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--datafile\"))", "-\t\t\t{", "-\t\t\t\tif (dataFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tSystem.err.println(\"You may only specify one data file.\");", "-\t\t\t\t\tSystem.exit(-1);", "-\t\t\t\t}", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--destination\"))", "-\t\t\t{", "-\t\t\t\tif (this.destinationDirectory != null)", "-\t\t\t\t{", "-\t\t\t\t\tSystem.err", "-\t\t\t\t\t\t\t.println(\"You may only specify one destination directory.\");", "-\t\t\t\t\tSystem.exit(-1);", "-\t\t\t\t}", "-\t\t\t\tthis.destinationDirectory = new File(args[++i]);", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--ignore\"))", "-\t\t\t{", "-\t\t\t\tString regex = args[++i];", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "-\t\t\t\t\tthis.ignoreRegexs.add(pc.compile(regex));", "-\t\t\t\t}", "-\t\t\t\tcatch (MalformedPatternException e)", "-\t\t\t\t{", "-\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "-\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\t{", "-\t\t\t\tlocations.add(args[i]);", "-\t\t\t\tbaseDirs.add(currentBaseDir);", "-\t\t\t}", "-\t\t}", "-\t\t// Load coverage data", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tthis.projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-\t\tif (this.projectData == null)", "-\t\t\tthis.projectData = new ProjectData();", "-\t\t// Instrument classes", "-\t\tIterator iter = locations.iterator();", "-\t\tIterator baseDirIter = baseDirs.iterator();", "-\t\twhile (iter.hasNext())", "-\t\t\taddInstrumentation((File)baseDirIter.next(), (String)iter.next());", "-\t\t// Save coverage data", "-\t\tCoverageDataFileHandler.saveCoverageData(this.projectData, dataFile);", "-\t}", "+    private void parseArguments(String[] args)", "+    {", "+        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+        // Parse our parameters", "+        FileFinder finder = new FileFinder();", "+        for (int i = 0; i < args.length; i++)", "+        {", "+            if (args[i].equals(\"--basedir\"))", "+                finder.addBaseDirectory(new File(args[++i]));", "+            else if (args[i].equals(\"--datafile\"))", "+                dataFile = new File(args[++i]);", "+            else if (args[i].equals(\"--destination\"))", "+                destinationDirectory = new File(args[++i]);", "+            else if (args[i].equals(\"--ignore\"))", "+            {", "+                String regex = args[++i];", "+                try", "+                {", "+                    Perl5Compiler pc = new Perl5Compiler();", "+                    this.ignoreRegexes.add(pc.compile(regex));", "+                }", "+                catch (MalformedPatternException e)", "+                {", "+                    logger.warn(\"The regular expression \" + regex", "+                            + \" is invalid: \" + e.getLocalizedMessage());", "+                }", "+            }", "+            else", "+                finder.addSourceFilePath(args[i]);", "+        }", "+        // Load coverage data, instrument classes, save coverage data", "+        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+        if (projectData == null)", "+            projectData = new ProjectData();", "+        Iterator iter = finder.getFilePaths().iterator();", "+        while (iter.hasNext())", "+            addInstrumentation((String)iter.next());", "+        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73c4de52fb4e6aab67400ad763bf754d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/InstrumentMain.java", "commitBeforeChange": "e386d1e03e9e7e8c17ecfc1bc2a7440e47264868", "commitAfterChange": "457ae08884dbac7db516ac660f84e091a17f1713", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static void main(String[] args)", "signatureAfterChange": "  \tpublic static void main(String[] args)", "diff": ["-\tpublic static void main(String[] args) {", "-\t\t\tSystem.exit(1);", "+", "+\tpublic static void main(String[] args) {", "+\t\tint returnValue = instrument(args);", "+\t\tif ( returnValue != 0 ) {", "+\t\t\tSystem.exit(returnValue);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f8cdc66c2dc540423fc0300187be271", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "f7504c0f1520232019e0ec5d7d9a44b2a102b7d9", "commitAfterChange": "b5c49534c0665dd8d1ec5c58aeda5a4c21cfd276", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void dumpClassDetails(Clazz clazz)", "signatureAfterChange": "  \tprivate void dumpLine(CoverageData coverageData, Integer lineNumberObject)", "diff": ["-\tprivate void dumpClassDetails(Clazz clazz)", "-\t\tprintln(\"<file name=\\\"\" + clazz.getLongFileName() + \"\\\"/>\");", "-\t\tprintln(\"<line rate=\\\"\" + clazz.getLineCoverageRate() + \"\\\"/>\");", "-\t\tprintln(\"<branch rate=\\\"\" + clazz.getBranchCoverageRate() + \"\\\"/>\");", "-", "-\t\tdumpMethods(clazz.getRawCoverageData());", "-", "-\t\tStringBuffer sb = new StringBuffer();", "-\t\tCoverageData instrumentation = clazz.getRawCoverageData();", "-\t\tIterator iter = instrumentation.getValidLineNumbers().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tsb.append(iter.next());", "-\t\t\tif (iter.hasNext())", "-\t\t\t{", "-\t\t\t\tsb.append(\", \");", "-\t\t\t}", "-\t\t}", "-\t\tprintln(\"<valid lines=\\\"\" + sb.toString() + \"\\\"/>\");", "-", "-\t\titer = instrumentation.getValidLineNumbers().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tint lineNumber = ((Integer)iter.next()).intValue();", "-\t\t\tlong hitCount = instrumentation.getHitCount(lineNumber);", "-\t\t\tprintln(\"<line number=\\\"\" + lineNumber + \"\\\" hits=\\\"\" + hitCount", "-\t\t\t\t\t+ \"\\\"/>\");", "-\t\t}", "+", "+\tprivate void dumpLine(CoverageData coverageData, Integer lineNumberObject)", "+\t{", "+\t\tint lineNumber = lineNumberObject.intValue();", "+\t\tlong hitCount = coverageData.getHitCount(lineNumber);", "+\t\tboolean isBranch = coverageData.isBranch(lineNumber);", "+", "+\t\tprintln(\"<line number=\\\"\" + lineNumber + \"\\\" hits=\\\"\" + hitCount", "+\t\t\t\t+ \"\\\" branch=\\\"\" + isBranch + \"\\\"/>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31c649d99a06aafb9317cf3da30109f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "5b30351fa9d71ab4016d2fcbdce172b2f16c1c45", "commitAfterChange": "55571e8b292791cc80dd02e2bed0dfd9f206376b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic static ProjectData getGlobalProjectData()", "signatureAfterChange": " \tpublic static ProjectData getGlobalProjectData()", "diff": ["+\t */", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tinitialize();", "+\t\tglobalProjectData = new ProjectData();", "+\t\treturn globalProjectData;", "+\t}", "-\t\t// Read projectData from the serialized file.", "-\t\tif (dataFile.isFile())", "-\t\t{", "-\t\t\t//System.out.println(\"Cobertura: Loading global project data from \" + dataFile.getAbsolutePath());", "-\t\t\tglobalProjectData = CoverageDataFileHandler", "-\t\t\t\t\t.loadCoverageData(dataFile);", "-\t\t}", "-", "-\t\tif (globalProjectData == null)", "-\t\t{", "-\t\t\t// We could not read from the serialized file, so create a new object.", "-\t\t\tSystem.out.println(\"Cobertura: Coverage data file \"", "-\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t+ \" either does not exist or is not readable.  Creating a new data file.\");", "-\t\t\tglobalProjectData = new ProjectData();", "-\t\t}", "-", "-\t\tif( System.getProperty(\"catalina.home\")!=null) {", "-\t\t\t", "-\t\t\t// Additionaly force loading of other classes that might be not loaded", "-\t\t\t// becouse saved project data was empty", "-\t\t", "-", "-\t\treturn globalProjectData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba28277e3ac6a3e670663ce7a9a5126f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalTest.java", "commitBeforeChange": "d92a270dbbdba12262811a88f1774dfb99ec4747", "commitAfterChange": "4052f54cd9489cd94b023c7b5db8ea06aaaae0c9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tprivate static void verify(String testName) throws Exception", "signatureAfterChange": "  \tprivate static void verify(String testName) throws Exception", "diff": ["-\t// TODO: Also verify that the HTML reports are XHTML 1.0", "+\t{", "+\t\tverifyXml(testName);", "+\t\tverifyHtml(testName);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e038f7071a620872941130bd7a4dffa1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/webapp/test/WebAppFunctionalTest.java", "commitBeforeChange": "2b194b3d77bf600da43b42901e6946bf29c86ff0", "commitAfterChange": "a26b3c4c66c38163a0a617a9215854c17c3271a0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void basicStartAndStopOfWebApp(boolean tomcat) throws Exception", "signatureAfterChange": "  \tprivate void instrumentWar()", "diff": ["-\tpublic void basicStartAndStopOfWebApp(boolean tomcat) throws Exception {", "-\t\tWebappServer webappServer = new WebappServer(webappServerDir, tomcat);", "-", "-\t\twebappServer.deployApp(srcDir, \"com.acme.*\");", "-", "-\t\twebappServer.withRunningServer();", "-", "-\t\twebappServer.pingServer();", "-", "-\t\tFile xmlReport = webappServer.getXmlReport();", "-", "-\t\tgenerateReportFile(xmlReport);", "-", "-\t\tNode dom = TestUtils.getXMLReportDOM(xmlReport);", "-", "-\t\tassertFalse(TestUtils.isMethodHit(dom,", "-\t\t\t\t\"com.acme.servlet.SimpleServlet\", \"doGet\"));", "-", "-\t\twebappServer.killServer();", "-\t\tThread.sleep(5 * 1000);", "-\t\tgenerateReportFile(xmlReport);", "-", "-\t\tdom = TestUtils.getXMLReportDOM(xmlReport);", "-", "-\t\tassertTrue(\"doGet has hits=0 in cobertura report\", TestUtils", "-\t\t\t\t.isMethodHit(dom, \"com.acme.servlet.SimpleServlet\", \"doGet\"));", "+", "+\tprivate void instrumentWar() {", "+\t\tinstrumentWar(new File(tempDir, \"webapps/simple.war\"));", "+\t\t// Future: There is an issue with ServetTester api and adding a custom classloader.", "+\t\t// When specify the instrumented .war file it still prefers to use the", "+\t\t// target/test-classes/**/*.class files instead. In this situation we instrument the", "+\t\t// classes directly but a better solution should be provided for this.", "+\t\tinstrumentClasses(new File(\"target/test-classes/com/acme/servlet/SimpleServlet.class\"));", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a4e75332cd673d03499a6f18776ec62", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc05499784f4f843227113e3b5e7c70b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/ClassInstrumenter.java", "commitBeforeChange": "792c5093dbce280ed92358a7ad1456924b5e55ab", "commitAfterChange": "16403757be60e9df4fb5dd5f25f934e5bcad9472", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic ClassInstrumenter(ProjectData projectData, final ClassVisitor cv, \t\t\tfinal Collection ignoreRegexs, final Collection ignoreBranchesRegexes)", "signatureAfterChange": "  \tpublic ClassInstrumenter(ProjectData projectData, final ClassVisitor cv, \t\t\tfinal Collection ignoreRegexs, final Collection ignoreBranchesRegexes, \t\t\tboolean ignoreTrivial)", "diff": ["-\t\t\tfinal Collection ignoreRegexs, final Collection ignoreBranchesRegexes)", "+\t\t\tfinal Collection ignoreRegexs, final Collection ignoreBranchesRegexes,", "+\t\t\tboolean ignoreTrivial)", "+\t\tthis.ignoreTrivial = ignoreTrivial;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62b251343a9c392993db66f711bd22b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/dsl/Arguments.java", "commitBeforeChange": "768785370d7e1c7bdca4f0914a621cc1a2a41ac9", "commitAfterChange": "17bc655805583d7316247f96e74de5acf06c2d61", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tArguments(String baseDirectory, File dataFile, File destinationDirectory, \t\t\tFile commandsFile, Collection ignoreRegexes, \t\t\tCollection<Pattern> ignoreBranchesRegexes, \t\t\tCollection<Pattern> classPatternIncludeClassesRegexes, \t\t\tCollection<Pattern> classPatternExcludeClassesRegexes, \t\t\tboolean failOnError, boolean ignoreTrivial, \t\t\tboolean threadsafeRigorous, String encoding, \t\t\tSet<CoverageThreshold> minimumCoverageThresholds, \t\t\tdouble classLineThreshold, double classBranchThreshold, \t\t\tdouble packageLineThreshold, double packageBranchThreshold, \t\t\tdouble totalLineThreshold, double totalBranchThreshold, \t\t\tSet<CoberturaFile> filesToInstrument, Set<File> filesToMerge, \t\t\tSet<String> ignoreMethodAnnotations, \t\t\tSet<String> ignoreClassAnnotations, FileFinder sources)", "signatureAfterChange": "  \tArguments(String baseDirectory, File dataFile, File destinationDirectory, \t\t\tFile commandsFile, Collection ignoreRegexes, \t\t\tCollection<Pattern> ignoreBranchesRegexes, \t\t\tCollection<Pattern> classPatternIncludeClassesRegexes, \t\t\tCollection<Pattern> classPatternExcludeClassesRegexes, \t\t\tboolean calculateMethodComplexity, \t\t\tboolean failOnError, boolean ignoreTrivial, \t\t\tboolean threadsafeRigorous, String encoding, \t\t\tSet<CoverageThreshold> minimumCoverageThresholds, \t\t\tdouble classLineThreshold, double classBranchThreshold, \t\t\tdouble packageLineThreshold, double packageBranchThreshold, \t\t\tdouble totalLineThreshold, double totalBranchThreshold, \t\t\tSet<CoberturaFile> filesToInstrument, Set<File> filesToMerge, \t\t\tSet<String> ignoreMethodAnnotations, \t\t\tSet<String> ignoreClassAnnotations, FileFinder sources)", "diff": ["+\t\t\tboolean calculateMethodComplexity,", "+\t\tthis.calculateMethodComplexity = calculateMethodComplexity;"]}]}
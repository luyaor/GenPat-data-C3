{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb1a56d582dff19980997380d3671709", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e531355c13fd0234e6b7ef0b8baceab", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "8fa89e11a16472d1487034417d5730a6de92e300", "commitAfterChange": "6a303122a10f7fb224550410433e3c73cc07f939", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "signatureAfterChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "diff": ["+\tpublic Main(String[] args) throws MalformedPatternException {", "+\t\tHeader.print(System.out);", "+\t\tArgumentsBuilder builder = new ArgumentsBuilder();", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--branch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setClassBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--datafile\")) {", "+\t\t\t\tbuilder.setDataFile(args[++i]);", "+\t\t\t} else if (args[i].equals(\"--line\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setClassLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--regex\")) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(args[++i], \":\");", "+\t\t\t\tbuilder.addMinimumCoverageRates(tokenizer.nextToken(), Integer", "+\t\t\t\t\t\t.valueOf(tokenizer.nextToken()), Integer", "+\t\t\t\t\t\t.valueOf(tokenizer.nextToken()));", "+\t\t\t} else if (args[i].equals(\"--packagebranch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setPackageBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--packageline\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setPackageLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--totalbranch\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setTotalBranchCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t} else if (args[i].equals(\"--totalline\")) {", "+\t\t\t\tbuilder", "+\t\t\t\t\t\t.setTotalLineCoverageThreshold(inRangeAndDivideByOneHundred(args[++i]));", "+\t\t\t}", "+\t\t}", "+\t\tArguments arguments = builder.build();", "+\t\tCoverageThresholdsReport coverageThresholdsReport = (CoverageThresholdsReport) new Cobertura(", "+\t\t\t\targuments).checkThresholds().report().getByName(", "+\t\t\t\tReportName.THRESHOLDS_REPORT);", "+\t\tList<CoverageResultEntry> coverageResultEntries = coverageThresholdsReport", "+\t\t\t\t.getCoverageResultEntries();", "+\t\tint exitStatus = 0;", "+\t\tfor (CoverageResultEntry entry : coverageResultEntries) {", "+\t\t\tif (entry.isBelowExpectedCoverage()) {", "+\t\t\t\tswitch (entry.getCoverageLevel()) {", "+\t\t\t\t\tcase CLASS :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 2, 4);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PACKAGE :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 32, 64);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase PROJECT :", "+\t\t\t\t\t\texitStatus |= checkCoverageTypeStatusAndLogMessage(", "+\t\t\t\t\t\t\t\tentry, 8, 16);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tSystem.exit(exitStatus);", "+\t}", "-", "-\tpublic Main(String[] args) throws MalformedPatternException {", "-\t\tint exitStatus = 0;", "-", "-\t\tHeader.print(System.out);", "-", "-\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tdouble branchCoverageRate = -1.0;", "-\t\tdouble lineCoverageRate = -1.0;", "-\t\tdouble packageBranchCoverageRate = -1.0;", "-\t\tdouble packageLineCoverageRate = -1.0;", "-\t\tdouble totalBranchCoverageRate = -1.0;", "-\t\tdouble totalLineCoverageRate = -1.0;", "-", "-\t\tfor (int i = 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"--branch\")) {", "-\t\t\t\tbranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--datafile\")) {", "-\t\t\t\tdataFile = new File(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--line\")) {", "-\t\t\t\tlineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--regex\")) {", "-\t\t\t\tsetMinimumCoverageRate(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--packagebranch\")) {", "-\t\t\t\tpackageBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--packageline\")) {", "-\t\t\t\tpackageLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--totalbranch\")) {", "-\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t} else if (args[i].equals(\"--totalline\")) {", "-\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(args[++i]);", "-\t\t\t}", "-\t\t}", "-", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null) {", "-\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "-\t\t\t\t\t+ dataFile.getAbsolutePath());", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\t// If they didn't specify any thresholds, then use some defaults", "-\t\tif ((branchCoverageRate == -1.0) && (lineCoverageRate == -1.0)", "-\t\t\t\t&& (packageLineCoverageRate == -1.0)", "-\t\t\t\t&& (packageBranchCoverageRate == -1.0)", "-\t\t\t\t&& (totalLineCoverageRate == -1.0)", "-\t\t\t\t&& (totalBranchCoverageRate == -1.0)", "-\t\t\t\t&& (this.minimumCoverageRates.size() == 0)) {", "-\t\t\tbranchCoverageRate = 0.5;", "-\t\t\tlineCoverageRate = 0.5;", "-\t\t\tpackageBranchCoverageRate = 0.5;", "-\t\t\tpackageLineCoverageRate = 0.5;", "-\t\t\ttotalBranchCoverageRate = 0.5;", "-\t\t\ttotalLineCoverageRate = 0.5;", "-\t\t}", "-\t\t// If they specified one or more thresholds, default everything else to 0", "-\t\telse {", "-\t\t\tif (branchCoverageRate == -1.0)", "-\t\t\t\tbranchCoverageRate = 0.0;", "-\t\t\tif (lineCoverageRate == -1.0)", "-\t\t\t\tlineCoverageRate = 0.0;", "-\t\t\tif (packageLineCoverageRate == -1.0)", "-\t\t\t\tpackageLineCoverageRate = 0.0;", "-\t\t\tif (packageBranchCoverageRate == -1.0)", "-\t\t\t\tpackageBranchCoverageRate = 0.0;", "-\t\t\tif (totalLineCoverageRate == -1.0)", "-\t\t\t\ttotalLineCoverageRate = 0.0;", "-\t\t\tif (totalBranchCoverageRate == -1.0)", "-\t\t\t\ttotalBranchCoverageRate = 0.0;", "-\t\t}", "-", "-\t\tthis.minimumCoverageRate = new CoverageRate(lineCoverageRate,", "-\t\t\t\tbranchCoverageRate);", "-", "-\t\tdouble totalLines = 0;", "-\t\tdouble totalLinesCovered = 0;", "-\t\tdouble totalBranches = 0;", "-\t\tdouble totalBranchesCovered = 0;", "-", "-\t\tIterator iter = projectData.getClasses().iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tClassData classData = (ClassData) iter.next();", "-\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(classData", "-\t\t\t\t\t.getName());", "-", "-\t\t\tif (totalBranchCoverageRate > 0.0) {", "-\t\t\t\ttotalBranches += classData.getNumberOfValidBranches();", "-\t\t\t\ttotalBranchesCovered += classData.getNumberOfCoveredBranches();", "-\t\t\t}", "-", "-\t\t\tif (totalLineCoverageRate > 0.0) {", "-\t\t\t\ttotalLines += classData.getNumberOfValidLines();", "-\t\t\t\ttotalLinesCovered += classData.getNumberOfCoveredLines();", "-\t\t\t}", "-", "-\t\t\tPackageCoverage packageCoverage = getPackageCoverage(classData", "-\t\t\t\t\t.getPackageName());", "-\t\t\tif (packageBranchCoverageRate > 0.0) {", "-\t\t\t\tpackageCoverage.addBranchCount(classData", "-\t\t\t\t\t\t.getNumberOfValidBranches());", "-\t\t\t\tpackageCoverage.addBranchCoverage(classData", "-\t\t\t\t\t\t.getNumberOfCoveredBranches());", "-\t\t\t}", "-", "-\t\t\tif (packageLineCoverageRate > 0.0) {", "-\t\t\t\tpackageCoverage.addLineCount(classData.getNumberOfValidLines());", "-\t\t\t\tpackageCoverage.addLineCoverage(classData", "-\t\t\t\t\t\t.getNumberOfCoveredLines());", "-\t\t\t}", "-", "-\t\t\tlogger.debug(\"Class \" + classData.getName()", "-\t\t\t\t\t+ \", line coverage rate: \"", "-\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "-\t\t\t\t\t+ \"%, branch coverage rate: \"", "-\t\t\t\t\t+ percentage(classData.getBranchCoverageRate()) + \"%\");", "-", "-\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\t\t.getBranchCoverageRate()) {", "-\t\t\t\tSystem.err.println(classData.getName()", "-\t\t\t\t\t\t+ \" failed check. Branch coverage rate of \"", "-\t\t\t\t\t\t+ percentage(classData.getBranchCoverageRate())", "-\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t+ percentage(coverageRate.getBranchCoverageRate())", "-\t\t\t\t\t\t+ \"%\");", "-\t\t\t\texitStatus |= 2;", "-\t\t\t}", "-", "-\t\t\tif (classData.getLineCoverageRate() < coverageRate", "-\t\t\t\t\t.getLineCoverageRate()) {", "-\t\t\t\tSystem.err.println(classData.getName()", "-\t\t\t\t\t\t+ \" failed check. Line coverage rate of \"", "-\t\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "-\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t+ percentage(coverageRate.getLineCoverageRate()) + \"%\");", "-\t\t\t\texitStatus |= 4;", "-\t\t\t}", "-\t\t}", "-", "-\t\texitStatus |= checkPackageCoverageLevels(packageBranchCoverageRate,", "-\t\t\t\tpackageLineCoverageRate);", "-", "-\t\t// Check the rates for the overall project", "-\t\tif ((totalBranches > 0)", "-\t\t\t\t&& (totalBranchCoverageRate > (totalBranchesCovered / totalBranches))) {", "-\t\t\tSystem.err", "-\t\t\t\t\t.println(\"Project failed check. \"", "-\t\t\t\t\t\t\t+ \"Total branch coverage rate of \"", "-\t\t\t\t\t\t\t+ percentage(totalBranchesCovered / totalBranches)", "-\t\t\t\t\t\t\t+ \"% is below \"", "-\t\t\t\t\t\t\t+ percentage(totalBranchCoverageRate) + \"%\");", "-\t\t\texitStatus |= 8;", "-\t\t}", "-", "-\t\tif ((totalLines > 0)", "-\t\t\t\t&& (totalLineCoverageRate > (totalLinesCovered / totalLines))) {", "-\t\t\tSystem.err.println(\"Project failed check. \"", "-\t\t\t\t\t+ \"Total line coverage rate of \"", "-\t\t\t\t\t+ percentage(totalLinesCovered / totalLines)", "-\t\t\t\t\t+ \"% is below \" + percentage(totalLineCoverageRate) + \"%\");", "-\t\t\texitStatus |= 16;", "-\t\t}", "-", "-\t\tSystem.exit(exitStatus);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ac2ab72af95d90383501d9bf6849a1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic static void main(String[] args) throws Exception", "signatureAfterChange": " \t \tpublic static void main(String[] args) throws Exception", "diff": ["-", "-\tpublic static void main(String[] args) throws Exception", "-\t{", "-\t\tlong startTime = System.currentTimeMillis();", "-", "-\t\tLongOpt[] longOpts = new LongOpt[4];", "-\t\t// TODO: Allow for multiple destination and multiple source directories", "-\t\tlongOpts[0] = new LongOpt(\"format\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'f');", "-\t\tlongOpts[1] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'd');", "-\t\tlongOpts[2] = new LongOpt(\"destination\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'o');", "-\t\tlongOpts[3] = new LongOpt(\"source\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t's');", "-", "-\t\tGetopt g = new Getopt(Main.class.getName(), args, \":f:d:o:s:\",", "-\t\t\t\tlongOpts);", "-\t\tint c;", "-\t\twhile ((c = g.getopt()) != -1)", "-\t\t{", "-\t\t\tswitch (c)", "-\t\t\t{", "-\t\t\t\tcase 'f':", "-\t\t\t\t\tformat = g.getOptarg();", "-\t\t\t\t\tif (!format.equalsIgnoreCase(\"html\")", "-\t\t\t\t\t\t\t&& !format.equalsIgnoreCase(\"xml\"))", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err", "-\t\t\t\t\t\t\t\t.println(\"Error: format \\\"\"", "-\t\t\t\t\t\t\t\t\t\t+ format", "-\t\t\t\t\t\t\t\t\t\t+ \"\\\" is invalid. Must be either html or xml\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tdataFile = new File(g.getOptarg());", "-\t\t\t\t\tif (!dataFile.exists())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t\t+ \" does not exist\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!dataFile.isFile())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: data file \"", "-\t\t\t\t\t\t\t\t+ dataFile.getAbsolutePath()", "-\t\t\t\t\t\t\t\t+ \" must be a regular file\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 'o':", "-\t\t\t\t\tdestinationDir = new File(g.getOptarg());", "-\t\t\t\t\tif (destinationDir.exists()", "-\t\t\t\t\t\t\t&& !destinationDir.isDirectory())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: destination directory \"", "-\t\t\t\t\t\t\t\t+ destinationDir", "-\t\t\t\t\t\t\t\t+ \" already exists but is not a directory\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tdestinationDir.mkdirs();", "-\t\t\t\t\tbreak;", "-", "-\t\t\t\tcase 's':", "-\t\t\t\t\tsourceDir = new File(g.getOptarg());", "-\t\t\t\t\tif (!sourceDir.exists())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ sourceDir + \" does not exist\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!sourceDir.isDirectory())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tSystem.err.println(\"Error: source directory \"", "-\t\t\t\t\t\t\t\t+ sourceDir + \" must be a directory\");", "-\t\t\t\t\t\tSystem.exit(1);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\tif (dataFile == null)", "-\t\t\tdataFile = CoverageDataFileHandler.getDefaultDataFile();", "-\t\tif (destinationDir == null)", "-\t\t{", "-\t\t\tSystem.err.println(\"Error: destination directory must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tif (sourceDir == null)", "-\t\t{", "-\t\t\tSystem.err.println(\"Error: source directory must be set\");", "-\t\t\tSystem.exit(1);", "-\t\t}", "-", "-\t\tif (logger.isDebugEnabled())", "-\t\t{", "-\t\t\tlogger.debug(\"format is \" + format);", "-\t\t\tlogger.debug(\"dataFile is \" + dataFile.getAbsolutePath());", "-\t\t\tlogger.debug(\"destinationDir is \"", "-\t\t\t\t\t+ destinationDir.getAbsolutePath());", "-\t\t\tlogger.debug(\"sourceDir is \" + sourceDir.getAbsolutePath());", "-\t\t}", "-", "-\t\tProjectData projectData = CoverageDataFileHandler", "-\t\t\t\t.loadCoverageData(dataFile);", "-", "-\t\tif (projectData == null)", "-\t\t{", "-\t\tif (format.equalsIgnoreCase(\"html\"))", "-\t\t{", "-\t\t\tnew HTMLReport(projectData, destinationDir, sourceDir);", "-\t\telse if (format.equalsIgnoreCase(\"xml\"))", "-\t\t{", "-\t\t\tnew XMLReport(projectData, destinationDir, sourceDir);", "+\t", "+\tpublic static void main(String[] args) throws Exception {", "+\t\tlong startTime = System.currentTimeMillis();", "+", "+\t\tMain main = new Main();", "+", "+\t\tboolean hasCommandsFile = false;", "+\t\tString commandsFileName = null;", "+\t\tfor (int i = 0; i < args.length; i++) {", "+\t\t\tif (args[i].equals(\"--commandsfile\")) {", "+\t\t\t\thasCommandsFile = true;", "+\t\t\t\tcommandsFileName = args[++i];", "+\t\t\t}", "+\t\tif (hasCommandsFile) {", "+\t\t\tList arglist = new ArrayList();", "+\t\t\tBufferedReader bufferedReader = null;", "+", "+\t\t\ttry {", "+\t\t\t\tbufferedReader = new BufferedReader(new FileReader(commandsFileName));", "+\t\t\t\tString line = null;", "+", "+\t\t\t\twhile ((line = bufferedReader.readLine()) != null) {", "+\t\t\t\t\targlist.add(line);", "+\t\t\t\t}", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tLOGGER.fatal(\"Unable to read temporary commands file \" + commandsFileName + \".\", e);", "+\t\t\t} finally {", "+\t\t\t\tif (bufferedReader != null) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tbufferedReader.close();", "+\t\t\t\t\t} catch (IOException e) {", "+\t\t\t\t\t\t// no-op", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\targs = (String[])arglist.toArray(new String[arglist.size()]);", "+\t\t}", "+", "+\t\tmain.parseArguments(args);", "+", "-\t\tSystem.out", "-\t\t\t\t.println(\"Reporting time: \" + (stopTime - startTime) + \"ms\");", "+\t\tSystem.out.println(\"Report time: \" + (stopTime - startTime) + \"ms\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4278ac16d67e90a4d26f34d417c3e93d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "89f4eaca365e898685523b26abb2975d34c5493c", "commitAfterChange": "b5fae504c12a9486e23c38b8e2fb563abfcdacb8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "signatureAfterChange": "  \tpublic Main(String[] args) throws MalformedPatternException", "diff": ["+\t\tint exitStatus = 0;", "+", "-\t\tSystem.out.println(\"Cobertura coverage check\");", "-\t\tLongOpt[] longOpts = new LongOpt[4];", "-\t\tlongOpts[0] = new LongOpt(\"branch\", LongOpt.REQUIRED_ARGUMENT, null,", "+\t\tLongOpt[] longOpts = new LongOpt[6];", "+\t\tlongOpts[0] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT, null,", "+\t\t\t\t'd');", "+\t\tlongOpts[1] = new LongOpt(\"regex\", LongOpt.REQUIRED_ARGUMENT, null, 'r');", "+\t\tlongOpts[2] = new LongOpt(\"branch\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\tlongOpts[2] = new LongOpt(\"datafile\", LongOpt.REQUIRED_ARGUMENT,", "-\t\t\t\tnull, 'd');", "-\t\tlongOpts[3] = new LongOpt(\"ignore\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'i');", "-\t\tlongOpts[1] = new LongOpt(\"line\", LongOpt.REQUIRED_ARGUMENT, null,", "-\t\t\t\t'l');", "+\t\tlongOpts[3] = new LongOpt(\"line\", LongOpt.REQUIRED_ARGUMENT, null, 'l');", "+\t\tlongOpts[4] = new LongOpt(\"totalbranch\", LongOpt.REQUIRED_ARGUMENT,", "+\t\t\t\tnull, 'B');", "+\t\tlongOpts[5] = new LongOpt(\"totalline\", LongOpt.REQUIRED_ARGUMENT, null,", "+\t\t\t\t'L');", "-\t\tGetopt g = new Getopt(getClass().getName(), args, \":b:d:i:l:\",", "+\t\tGetopt g = new Getopt(getClass().getName(), args, \":b:B:d:l:L:r\",", "-\t\tdouble branchCoverageRate = 0.8;", "-\t\tdouble lineCoverageRate = 0.7;", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tdouble branchCoverageRate = 0.0;", "+\t\tdouble lineCoverageRate = 0.0;", "+\t\tdouble totalBranchCoverageRate = 0.0;", "+\t\tdouble totalLineCoverageRate = 0.0;", "-\t\t\t\tcase 'd':", "-\t\t\t\t\tCoverageDataFileHandler.setDefaultDataFile(g.getOptarg());", "+\t\t\t\tcase 'B':", "+\t\t\t\t\ttotalBranchCoverageRate = inRangeAndDivideByOneHundred(g", "+\t\t\t\t\t\t\t.getOptarg());", "-\t\t\t\tcase 'i':", "-\t\t\t\t\tsetMinimumCoverageRate(g.getOptarg());", "+\t\t\t\tcase 'd':", "+\t\t\t\t\tdataFile = new File(g.getOptarg());", "+", "+\t\t\t\tcase 'L':", "+\t\t\t\t\ttotalLineCoverageRate = inRangeAndDivideByOneHundred(g", "+\t\t\t\t\t\t\t.getOptarg());", "+\t\t\t\t\tbreak;", "+", "+\t\t\t\tcase 'r':", "+\t\t\t\t\tsetMinimumCoverageRate(g.getOptarg());", "+\t\t\t\t\tbreak;", "+", "-\t\tminimumCoverageRate = new CoverageRate(lineCoverageRate,", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "+", "+\t\tif (projectData == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "+\t\t\t\t\t+ dataFile.getAbsolutePath());", "+\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\t// If they didn't specify any thresholds, then use some defaults", "+\t\tif ((branchCoverageRate == 0) && (lineCoverageRate == 0)", "+\t\t\t\t&& (totalLineCoverageRate == 0)", "+\t\t\t\t&& (totalBranchCoverageRate == 0)", "+\t\t\t\t&& (this.minimumCoverageRates.size() == 0))", "+\t\t{", "+\t\t\tbranchCoverageRate = 0.5;", "+\t\t\tlineCoverageRate = 0.5;", "+\t\t\ttotalBranchCoverageRate = 0.5;", "+\t\t\ttotalLineCoverageRate = 0.5;", "+\t\t}", "+", "+\t\tthis.minimumCoverageRate = new CoverageRate(lineCoverageRate,", "-\t\t// Load coverage data", "-\t\tProjectData projectData = ProjectData.getGlobalProjectData();", "-", "-\t\tif (logger.isInfoEnabled())", "-\t\t{", "-\t\t\tlogger.info(\"Coverage data has \"", "-\t\t\t\t\t+ projectData.getNumberOfClasses() + \" classes\");", "-\t\t}", "+\t\tdouble totalLines = 0;", "+\t\tdouble totalLinesCovered = 0;", "+\t\tdouble totalBranches = 0;", "+\t\tdouble totalBranchesCovered = 0;", "-\t\t\tif (logger.isInfoEnabled())", "+\t\t\tif (totalBranchCoverageRate > 0.0)", "-\t\t\t\tStringBuffer sb = new StringBuffer();", "-\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(\", line: \");", "-\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"% (\");", "-\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"%), branch: \");", "-\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"% (\");", "-\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"%)\");", "-\t\t\t\tlogger.info(sb.toString());", "+\t\t\t\ttotalBranches += classData.getNumberOfValidBranches();", "+\t\t\t\ttotalBranchesCovered += classData.getNumberOfCoveredBranches();", "+\t\t\t}", "+", "+\t\t\tif (totalLineCoverageRate > 0.0)", "+\t\t\t{", "+\t\t\t\ttotalLines += classData.getNumberOfValidLines();", "+\t\t\t\ttotalLinesCovered += classData.getNumberOfCoveredLines();", "+\t\t\t}", "+", "+\t\t\tlogger.debug(\"Class \" + classData.getName()", "+\t\t\t\t\t+ \", line coverage rate: \"", "+\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "+\t\t\t\t\t+ \"%, branch coverage rate: \"", "+\t\t\t\t\t+ percentage(classData.getBranchCoverageRate()) + \"%\");", "+", "+\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "+\t\t\t\t\t.getBranchCoverageRate())", "+\t\t\t{", "+\t\t\t\tSystem.err.println(classData.getName()", "+\t\t\t\t\t\t+ \" failed check. Branch coverage rate of \"", "+\t\t\t\t\t\t+ percentage(classData.getBranchCoverageRate())", "+\t\t\t\t\t\t+ \"% is below \"", "+\t\t\t\t\t\t+ percentage(coverageRate.getBranchCoverageRate())", "+\t\t\t\t\t\t+ \"%\");", "+\t\t\t\texitStatus |= 2;", "-\t\t\t\tStringBuffer sb = new StringBuffer();", "-\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(\" line coverage rate of: \");", "-\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"% (required: \");", "-\t\t\t\tsb.append(percentage(coverageRate.getLineCoverageRate()));", "-\t\t\t\tsb.append(\"%)\");", "-\t\t\t\tSystem.out.println(sb.toString());", "-\t\t\t}", "-", "-\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\t\t.getBranchCoverageRate())", "-\t\t\t{", "-\t\t\t\tStringBuffer sb = new StringBuffer();", "-\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(\" branch coverage rate of: \");", "-\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"% (required: \");", "-\t\t\t\tsb.append(percentage(coverageRate.getBranchCoverageRate()));", "-\t\t\t\tsb.append(\"%)\");", "-\t\t\t\tSystem.out.println(sb.toString());", "+\t\t\t\tSystem.err.println(classData.getName()", "+\t\t\t\t\t\t+ \" failed check. Line coverage rate of \"", "+\t\t\t\t\t\t+ percentage(classData.getLineCoverageRate())", "+\t\t\t\t\t\t+ \"% is below \"", "+\t\t\t\t\t\t+ percentage(coverageRate.getLineCoverageRate()) + \"%\");", "+\t\t\t\texitStatus |= 4;", "+", "+\t\t// Check the rates for the overal project", "+\t\tif ((totalBranches > 0)", "+\t\t\t\t&& (totalBranchCoverageRate > (totalBranchesCovered / totalBranches)))", "+\t\t{", "+\t\t\tSystem.err", "+\t\t\t\t\t.println(\"Project failed check. \"", "+\t\t\t\t\t\t\t+ \"Total branch coverage rate of \"", "+\t\t\t\t\t\t\t+ percentage(totalBranchesCovered / totalBranches)", "+\t\t\t\t\t\t\t+ \"% is below \"", "+\t\t\t\t\t\t\t+ percentage(totalBranchCoverageRate) + \"%\");", "+\t\t\texitStatus |= 8;", "+\t\t}", "+", "+\t\tif ((totalLines > 0)", "+\t\t\t\t&& (totalLineCoverageRate > (totalLinesCovered / totalLines)))", "+\t\t{", "+\t\t\tSystem.err.println(\"Project failed check. \"", "+\t\t\t\t\t+ \"Total line coverage rate of \"", "+\t\t\t\t\t+ percentage(totalLinesCovered / totalLines)", "+\t\t\t\t\t+ \"% is below \" + percentage(totalLineCoverageRate) + \"%\");", "+\t\t\texitStatus |= 16;", "+\t\t}", "+", "+\t\tSystem.exit(exitStatus);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7d847e4f6e52e4300c3377a4c37bbdc", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/test/JavancssTest.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void _doIt()          throws Exception", "signatureAfterChange": "      protected void _doIt()          throws Exception", "diff": ["-        String sLocalPath = _sTestDir; //FileUtil.getClassPath(this);", "-        Util.debug( this, \"_doIt()._sTestDir: \" + _sTestDir );", "+        Util.debug( this, \"_doIt().testDir: \" + testDir );", "-                _checkJavadocLines();", "+            _checkJavadocLines();", "-        _checkInnerClasses();", "+            _checkInnerClasses();", "+    ", "+            // Nr. 1", "+            pJavancss = new Javancss( new File( testDir, \"Test1.java\" ) );", "+            int ncss1 = pJavancss.getNcss();", "+            bugIf( ncss1 != 318, \"Ncss: \" + ncss1 );", "+    ", "+            // Nr. 2", "+            pJavancss = new Javancss( new File( testDir, \"Test2.java\" ) );", "+            bugIf( pJavancss.getNcss() != 8 );", "+            // Nr. 3", "+            pJavancss = new Javancss( new File( testDir, \"Test3.java\" ) );", "+            bugIf( pJavancss.getNcss() != 69 );", "+            // Nr. 4", "+            pJavancss = new Javancss( new File( testDir, \"Test4.java\" ) );", "+            bugIf( pJavancss.getNcss() != 11 );", "+            // Nr. 5", "+            pJavancss = new Javancss( new File( testDir, \"Test5.java\" ) );", "+            bugIf( pJavancss.getNcss() != 16 );", "+            // Nr. 6", "+            pJavancss = new Javancss( new File( testDir, \"Test6.java\" ) );", "+            int ncss6 = pJavancss.getNcss();", "+            bugIf( ncss6 != 565, \"Ncss: \" + ncss6 );", "+            bugIf( pJavancss.getLOC() != 1254, \"LOC: \" + pJavancss.getLOC() );", "+            // Nr. 8", "+            pJavancss = new Javancss( new File( testDir, \"Test7.java\" ) );", "+            bugIf( pJavancss.getNcss() != 30, \"Ncss: \" + pJavancss.getNcss() );", "+            // Nr. 9", "+            Javancss pJavancss8 = new Javancss( new File( testDir, \"Test8.java\" ) );", "+            bugIf( pJavancss.getNcss() != pJavancss8.getNcss() );", "+            // Nr. 10", "+            pJavancss = new Javancss( new File( testDir, \"Test9.java\" ) );", "+            bugIf( ncss1 != pJavancss.getLOC(), \"LOC: \" + pJavancss.getLOC() );", "+            // Nr. 11", "+            pJavancss = new Javancss( new File( testDir, \"Test10.java\" ) );", "+            bugIf( pJavancss.getLOC() != ncss6, \"LOC: \" + pJavancss.getLOC() );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() );", "+            pJavancss = new Javancss( new File( testDir, \"Test11.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            pJavancss = new Javancss( new File( testDir, \"Test12.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            List vFunctions = pJavancss.getFunctionMetrics();", "+            String sFirstFunction = (String) ( (List) vFunctions.get( 0 ) ).get( FCT_NAME );", "+            bugIf( sFirstFunction == null );", "+            /* System.out.println( sFirstFunction ); */", "+            bugIf( !sFirstFunction.equals( \"Test12.readFile(URL)\" ), sFirstFunction );", "+            pJavancss = new Javancss( new File( testDir, \"Test13.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            pJavancss = new Javancss( new File( testDir, \"Test14.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            pJavancss = new Javancss( new File( testDir, \"Test15.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            pJavancss = new Javancss( new File( testDir, \"Test16.java\" ) );", "+            bugIf( pJavancss.getNcss() != 4 );", "+            pJavancss = new Javancss( new File( testDir, \"Test17.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            pJavancss = new Javancss( new File( testDir, \"Test18.java\" ) );", "+            bugIf( pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() + \", LOC: \"", "+                            + pJavancss.getLOC() );", "+            // Nr. 22", "+            pJavancss = new Javancss( new File( testDir, \"Test19.java\" ) );", "+            vFunctions = pJavancss.getFunctionMetrics();", "+            sFirstFunction = (String) ( (List) vFunctions.get( 0 ) ).get( FCT_NAME );", "+            bugIf( !sFirstFunction.equals( \"test.Test19.foo(String[],Controller)\" ), sFirstFunction );", "+            sFirstFunction = (String) ( (List) vFunctions.get( 3 ) ).get( FCT_NAME );", "+            bugIf( !sFirstFunction.equals( \"test.Test19.main(String[])\" ) );", "+            // Nr. 24", "+            pJavancss = new Javancss( new File( testDir, \"Test20.java\" ) );", "+            bugIf( pJavancss.getNcss() != 46, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 25", "+            pJavancss = new Javancss( new File( testDir, \"Test21.java\" ) );", "+            bugIf( pJavancss.getNcss() != 67, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 26", "+            pJavancss = new Javancss( new File( testDir, \"Test22.java\" ) );", "+            bugIf( pJavancss.getNcss() != 283, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 27", "+            pJavancss = new Javancss( new File( testDir, \"Test23.java\" ) );", "+            bugIf( pJavancss.getNcss() != 10, \"NCSS: \" + pJavancss.getNcss() );", "+            vFunctions = pJavancss.getFunctionMetrics();", "+            bugIf( vFunctions.size() != 7 );", "+            bugIf( new Javancss( new File( testDir, \"Test24.java\" ) ).getFunctionMetrics().size() != vFunctions.size() );", "+            // Nr. 30", "+            pJavancss = new Javancss( new File( testDir, \"Test25.java\" ) );", "+            bugIf( pJavancss.getNcss() != 12 );", "+            bugIf( pJavancss.getFunctionMetrics().size() != 9 );", "+            // Nr. 32", "+            pJavancss = new Javancss( new File( testDir, \"Test26.java\" ) );", "+            bugIf( pJavancss.getNcss() != 47, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 33", "+            pJavancss = new Javancss( new File( testDir, \"Test27.java\" ) );", "+            bugIf( pJavancss.getNcss() != 4, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 34", "+            pJavancss = new Javancss( new File( testDir, \"Test28.java\" ) );", "+            bugIf( pJavancss.getNcss() != 465, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 35", "+            String sTogether;", "+            String sTest11 = \"\";", "+            String sTest12 = \"\";", "+            try", "+            {", "+                sTest11 = FileUtil.readFile( new File( testDir, \"Test11.java\" ).getAbsolutePath() );", "+                sTest12 = FileUtil.readFile( new File( testDir, \"Test12.java\" ).getAbsolutePath() );", "+            }", "+            catch ( Exception e )", "+            {", "+                bugIf( true );", "+            }", "+            sTogether = sTest11 + sTest12;", "+            pJavancss = new Javancss( new StringReader( sTogether ) );", "+            vFunctions = pJavancss.getFunctionMetrics();", "+            Util.debug( \"JavancssTest._doIt().vFunctions: \" + vFunctions );", "+            sFirstFunction = (String) ( (List) vFunctions.get( 0 ) ).get( FCT_NAME );", "+            bugIf( !sFirstFunction.equals( \"ccl.util.Test11.atoi(String)\" ) );", "+            String sSomeFunction = (String) ( (List) vFunctions.get( 32 ) ).get( FCT_NAME );", "+            bugIf( !sSomeFunction.equals( \"Test12.readFile(URL)\" ), \"Function: \" + sSomeFunction );", "+            List vPackages = pJavancss.getPackageMetrics();", "+            bugIf( vPackages.size() != 2 );", "+            String[] asArg = new String[3];", "+            asArg[0] = new File( testDir, \"Test11.java\" ).getAbsolutePath();", "+            asArg[1] = asArg[0];", "+            asArg[2] = new File( testDir, \"Test12.java\" ).getAbsolutePath();", "+            int ncss38 = pJavancss.getNcss();", "+            ", "+            // turn stdout off", "+            PrintStream psStdout = System.out;", "+            System.setOut( new PrintStream( new ByteArrayOutputStream() ) );", "+            ", "+            pJavancss = new Javancss(asArg, \"$Header: /home/clemens/src/java/javancss/src/javancss/test/RCS/JavancssTest.java,v 1.34 2006/10/06 11:46:43 clemens Exp clemens $\");", "+            ", "+            // turn stdout on", "+            System.setOut( psStdout );", "-        // Nr. 1", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test1.java\"));", "-        int ncss1 = pJavancss.getNcss();", "-        bugIf(ncss1 != 318, \"Ncss: \" + ncss1);", "+            vPackages = pJavancss.getPackageMetrics();", "+            bugIf( vPackages.size() != 2 );", "+            bugIf( ncss38 == pJavancss.getNcss() );", "+            // Nr. 41", "+            pJavancss = new Javancss( new File( testDir, \"Test29.java\" ) );", "+            bugIf( pJavancss.getNcss() != 1, \"NCSS: \" + pJavancss.getNcss() );", "+            // Nr. 42", "+            // missing lf in last line/<EOF> not in single line", "+            try", "+            {", "+                pJavancss = new Javancss( new File( testDir, \"Test35.java\" ) );", "+                bugIf( pJavancss.getNcss() != 1 );", "+            }", "+            catch ( Exception eEOF )", "+            {", "+                bugIf( true, \"}<EOF>\" );", "+            }", "+            try", "+            {", "+                pJavancss = new Javancss( new File( testDir, \"Test36.java\" ) );", "+                bugIf( pJavancss.getNcss() != 1 );", "+            }", "+            catch ( Error eEOF )", "+            {", "+                bugIf( true, \"//<EOF>\" );", "+            }", "+            try", "+            {", "+                pJavancss = new Javancss( new File( testDir, \"Test37.java\" ) );", "+                bugIf( pJavancss.getNcss() != 1 );", "+            }", "+            catch ( Error eCTRLZ )", "+            {", "+                bugIf( true, \"//ctrl-Z\" );", "+            }", "+            try", "+            {", "+                pJavancss = new Javancss( new File( testDir, \"Test38.java\" ) );", "+                bugIf( pJavancss.getNcss() != 1 );", "+            }", "+            catch ( Error eCTRLZ )", "+            {", "+                bugIf( true, \"0x0actrl-Z\" );", "+            }", "+            // Nr. 46", "+            // semicolons not allowed by JLS, but not counted anyway.", "+            try", "+            {", "+                pJavancss = new Javancss( new File( testDir, \"Test39.java\" ) );", "+                bugIf( pJavancss.getNcss() != 5 );", "+            }", "+            catch ( Error eEmptyStatements )", "+            {", "+                bugIf( true, \"Empty statments.\" );", "+            }", "+            // Nr. 47", "+            // ;; in java.sql.Connection", "+            try", "+            {", "+                pJavancss = new Javancss( new File( testDir, \"Test32.java\" ) );", "+                bugIf( pJavancss.getNcss() != 26, \"Test32.java: ncss should be 26 but is: \" + pJavancss.getNcss() );", "+            }", "+            catch ( Error eJavaSQLConnection )", "+            {", "+                bugIf( true, \"java.sql.Connection double semicolon\" );", "+            }", "-        // Nr. 2", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test2.java\"));", "-        bugIf(pJavancss.getNcss() != 8);", "-        // Nr. 3", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test3.java\"));", "-        bugIf(pJavancss.getNcss() != 69);", "-        // Nr. 4", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test4.java\"));", "-        bugIf(pJavancss.getNcss() != 11);", "-        // Nr. 5", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test5.java\"));", "-        bugIf(pJavancss.getNcss() != 16);", "-        // Nr. 6", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test6.java\"));", "-        int ncss6 = pJavancss.getNcss();", "-        bugIf(ncss6 != 565, \"Ncss: \" + ncss6);", "-        bugIf(pJavancss.getLOC() != 1254, \"LOC: \" + pJavancss.getLOC());", "-        // Nr. 8", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test7.java\"));", "-        bugIf(pJavancss.getNcss() != 30, \"Ncss: \" + pJavancss.getNcss());", "-        // Nr. 9", "-        Javancss pJavancss8 = new Javancss(FileUtil.concatPath(sLocalPath, \"Test8.java\"));", "-        bugIf(pJavancss.getNcss() != pJavancss8.getNcss());", "-        // Nr. 10", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test9.java\"));", "-        bugIf(ncss1 != pJavancss.getLOC(), \"LOC: \" + pJavancss.getLOC());", "-        // Nr. 11", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test10.java\"));", "-        bugIf(pJavancss.getLOC() != ncss6, \"LOC: \" + pJavancss.getLOC());", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss());", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test11.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test12.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        Vector vFunctions = pJavancss.getFunctionMetrics();", "-        String sFirstFunction = (String)((Vector)vFunctions.elementAt(0)).elementAt(FCT_NAME);", "-        bugIf( sFirstFunction == null );", "-        /*System.out.println( sFirstFunction );*/", "-        bugIf(!sFirstFunction.equals(\"Test12.readFile(URL)\"), sFirstFunction);", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test13.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test14.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test15.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test16.java\"));", "-        bugIf(pJavancss.getNcss() != 4);", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test17.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test18.java\"));", "-        bugIf(pJavancss.getLOC() != pJavancss.getNcss(), \"NCSS: \" + pJavancss.getNcss() +", "-              \", LOC: \" + pJavancss.getLOC());", "-        // Nr. 22", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test19.java\"));", "-        vFunctions = pJavancss.getFunctionMetrics();", "-        sFirstFunction = (String)((Vector)vFunctions.elementAt(0)).elementAt(FCT_NAME);", "-        bugIf(!sFirstFunction.equals(\"test.Test19.foo(String[],Controller)\"), sFirstFunction);", "-        sFirstFunction = (String)((Vector)vFunctions.elementAt(3)).elementAt(FCT_NAME);", "-        bugIf(!sFirstFunction.equals(\"test.Test19.main(String[])\"));", "-        // Nr. 24", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test20.java\"));", "-        bugIf(pJavancss.getNcss() != 46, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 25", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test21.java\"));", "-        bugIf(pJavancss.getNcss() != 67, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 26", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test22.java\"));", "-        bugIf(pJavancss.getNcss() != 283, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 27", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test23.java\"));", "-        bugIf(pJavancss.getNcss() != 10, \"NCSS: \" + pJavancss.getNcss());", "-        vFunctions = pJavancss.getFunctionMetrics();", "-        bugIf(vFunctions.size() != 7);", "-        bugIf(new Javancss(FileUtil.concatPath(sLocalPath, \"Test24.java\")).", "-            getFunctionMetrics().size() != vFunctions.size());", "-        // Nr. 30", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test25.java\"));", "-        bugIf(pJavancss.getNcss() != 12);", "-        bugIf(pJavancss.getFunctionMetrics().size() != 9);", "-        // Nr. 32", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test26.java\"));", "-        bugIf(pJavancss.getNcss() != 47, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 33", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test27.java\"));", "-        bugIf(pJavancss.getNcss() != 4, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 34", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test28.java\"));", "-        bugIf(pJavancss.getNcss() != 465, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 35", "-        String sTogether;", "-        String sTest11 = \"\";", "-        String sTest12 = \"\";", "-        try {", "-            sTest11 = FileUtil.readFile(FileUtil.concatPath(sLocalPath, \"Test11.java\"));", "-            sTest12 = FileUtil.readFile(FileUtil.concatPath(sLocalPath, \"Test12.java\"));", "-            bugIf(false);", "-        } catch(Exception e) {", "-            bugIf(true);", "-        }", "-        sTogether = sTest11 + sTest12;", "-        pJavancss = new Javancss(new StringBufferInputStream(sTogether));", "-        vFunctions = pJavancss.getFunctionMetrics();", "-        Util.debug(\"JavancssTest._doIt().vFunctions: \" + vFunctions);", "-        sFirstFunction = (String)((Vector)vFunctions.elementAt(0)).elementAt(FCT_NAME);", "-        bugIf(!sFirstFunction.equals(\"ccl.util.Test11.atoi(String)\"));", "-        String sSomeFunction = (String)((Vector)vFunctions.elementAt(32)).elementAt(FCT_NAME);", "-        bugIf(!sSomeFunction.equals(\"Test12.readFile(URL)\"), \"Function: \" + sSomeFunction);", "-        Vector vPackages = pJavancss.getPackageMetrics();", "-        bugIf(vPackages.size() != 2);", "-        String[] asArg = new String[3];", "-        asArg[0] = FileUtil.concatPath(sLocalPath, \"Test11.java\");", "-        asArg[1] = asArg[0];", "-        asArg[2] = FileUtil.concatPath(sLocalPath, \"Test12.java\");", "-        int ncss38 = pJavancss.getNcss();", "-        ", "-        // turn stdout off", "-        PrintStream psStdout = System.out;", "-        System.setOut(new PrintStream(new ByteArrayOutputStream()));", "-        ", "-        pJavancss = new Javancss(asArg, \"$Header: /home/clemens/src/java/javancss/src/javancss/test/RCS/JavancssTest.java,v 1.34 2006/10/06 11:46:43 clemens Exp clemens $\");", "-        ", "-        // turn stdout on", "-        System.setOut(psStdout);", "-        ", "-        vPackages = pJavancss.getPackageMetrics();", "-        bugIf(vPackages.size() != 2);", "-        bugIf(ncss38 == pJavancss.getNcss());", "-        // Nr. 41", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test29.java\"));", "-        bugIf(pJavancss.getNcss() != 1, \"NCSS: \" + pJavancss.getNcss());", "-        // Nr. 42", "-        // missing lf in last line/<EOF> not in single line", "-        try ", "-        {", "-            pJavancss = new Javancss( FileUtil.concatPath( sLocalPath", "-                                                           , \"Test35.java\" ) );", "-            bugIf( pJavancss.getNcss() != 1 );", "-        } catch(Exception eEOF) {", "-            bugIf( true, \"}<EOF>\" );", "-        }", "-        try {", "-            pJavancss = new Javancss( FileUtil.concatPath( sLocalPath, \"Test36.java\" ) );", "-            bugIf( pJavancss.getNcss() != 1 );", "-        } catch(Error eEOF) {", "-            bugIf( true, \"//<EOF>\" );", "-        }", "-        try {", "-            pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test37.java\"));", "-            bugIf(pJavancss.getNcss() != 1);", "-        } catch(Error eCTRLZ) {", "-            bugIf(true, \"//ctrl-Z\");", "-        }", "-        try {", "-            pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test38.java\"));", "-            bugIf(pJavancss.getNcss() != 1);", "-        } catch(Error eCTRLZ) {", "-            bugIf(true, \"0x0actrl-Z\");", "-        }", "-        // Nr. 46", "-        // semicolons not allowed by JLS, but not counted anyway.", "-        try {", "-            pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test39.java\"));", "-            bugIf(pJavancss.getNcss() != 5);", "-        } catch(Error eEmptyStatements) {", "-            bugIf(true, \"Empty statments.\");", "-        }", "-        // Nr. 47", "-        // ;; in java.sql.Connection", "-        try {", "-            pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test32.java\"));", "-            bugIf( pJavancss.getNcss() != 26", "-                   , \"Test32.java: ncss should be 26 but is: \" + pJavancss.getNcss() );", "-        } catch(Error eJavaSQLConnection) {", "-            bugIf(true, \"java.sql.Connection double semicolon\");", "-        }", "+            testCCN( testDir );", "-        testCCN(sLocalPath);", "+            // javancss parsed a file which it shouldn't", "+            pJavancss = new Javancss( new File( testDir, \"Test42.java\" ) );", "+            bugIf( pJavancss.getLastErrorMessage() == null, \"Test42 should be parsed *and* result in an exception.\" );", "+            // file containing just ;", "+            pJavancss = new Javancss( new File( testDir, \"Test43.java\" ) );", "+            bugIf( pJavancss.getNcss() != 0 );", "+            // Test if javancss continues after running across a parse error", "+            // Test42,java has an errror, so use two other file and this and", "+            // take a look if it finishes with right result.", "+            pJavancss = new Javancss( new File( testDir, \"Test1.java\" ) );", "+            int ncss57 = pJavancss.getNcss();", "+            pJavancss = new Javancss( new File( testDir, \"Test2.java\" ) );", "+            ncss57 += pJavancss.getNcss();", "+            List vFiles = new ArrayList();", "+            vFiles.add( new File( testDir, \"Test1.java\" ) );", "+            vFiles.add( new File( testDir, \"Test42.java\" ) );", "+            vFiles.add( new File( testDir, \"Test2.java\" ) );", "+            pJavancss = new Javancss( vFiles );", "+            bugIf( pJavancss.getNcss() != ncss57, \"ncss57: \" + ncss57 + \" pJavancss.getNcss(): \" + pJavancss.getNcss() );", "-        // javancss parsed a file which it shouldn't", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test42.java\"));", "-        bugIf(pJavancss.getLastErrorMessage() == null,", "-              \"Test42 should be parsed *and* result in an exception.\");", "-        // file containing just ;", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test43.java\"));", "-        bugIf(pJavancss.getNcss() != 0);", "-        // Test if javancss continues after running across a parse error", "-        // Test42,java has an errror, so use two other file and this and", "-        // take a look if it finishes with right result.", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test1.java\"));", "-        int ncss57 = pJavancss.getNcss();", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test2.java\"));", "-        ncss57 += pJavancss.getNcss();", "-        Vector vFiles = new Vector();", "-        vFiles.addElement(FileUtil.concatPath(sLocalPath, \"Test1.java\"));", "-        vFiles.addElement(FileUtil.concatPath(sLocalPath, \"Test42.java\"));", "-        vFiles.addElement(FileUtil.concatPath(sLocalPath, \"Test2.java\"));", "-        pJavancss = new Javancss(vFiles);", "-        bugIf(pJavancss.getNcss() != ncss57, \"ncss57: \" + ncss57 +", "-              \" pJavancss.getNcss(): \" + pJavancss.getNcss());", "+            // Bug reported by .. .", "+            // Test48.java should be parsed.", "+            pJavancss = new Javancss( new File( testDir, \"Test48.java\" ) );", "+            bugIf( pJavancss.getNcss() <= 0, \"Parsing file Test48.java failed!\" );", "-        // Bug reported by .. .", "-        // Test48.java should be parsed.", "-        pJavancss = new Javancss(FileUtil.concatPath(sLocalPath, \"Test48.java\"));", "-        bugIf( pJavancss.getNcss() <= 0", "-               , \"Parsing file Test48.java failed!\" );", "+            pJavancss = new Javancss( new File( testDir, \"Test49.java\" ) );", "+            bugIf( pJavancss.getNcss() != 3, \"Parsing file Test49.java failed!\" );", "+            pJavancss = new Javancss( new File( testDir, \"Test50.java\" ) );", "+            bugIf( pJavancss.getNcss() <= 0, \"Parsing file Test50.java failed!\" );", "-        pJavancss = new Javancss( FileUtil.concatPath(sLocalPath, \"Test49.java\") );", "-        bugIf( pJavancss.getNcss() != 3", "-               , \"Parsing file Test49.java failed!\" );", "-        pJavancss = new Javancss( FileUtil.concatPath(sLocalPath, \"Test50.java\") );", "-        bugIf( pJavancss.getNcss() <= 0", "-               , \"Parsing file Test50.java failed!\" );", "+            pJavancss = new Javancss( new File( testDir, \"Test51.java\" ) );", "+            bugIf( pJavancss.getNcss() != 8, \"Parsing file Test51.java failed!\" );", "-        pJavancss = new Javancss( FileUtil.concatPath(sLocalPath, \"Test51.java\") );", "-        bugIf( pJavancss.getNcss() != 8", "-               , \"Parsing file Test51.java failed!\" );", "+            pJavancss = new Javancss( new File( testDir, \"Test52.java\" ) );", "+            int test52ncss = pJavancss.getNcss();", "+            bugIf( test52ncss != 12, \"Parsing file Test52.java failed. Ncss is \" + test52ncss + \" and not 12.\" );", "-        pJavancss = new Javancss( FileUtil.concatPath(sLocalPath, \"Test52.java\") );", "-        int test52ncss = pJavancss.getNcss();", "-        bugIf( test52ncss != 12", "-               , \"Parsing file Test52.java failed. Ncss is \" + test52ncss + \" and not 12.\" );", "+            pJavancss = new Javancss( new File( testDir, \"Test53.java\" ) );", "+            int test53ncss = pJavancss.getNcss();", "+            bugIf( test53ncss != 4, \"Parsing file Test53.java failed. Ncss is \" + test53ncss + \" and not 4.\" );", "-        pJavancss = new Javancss( FileUtil.concatPath(sLocalPath, \"Test53.java\") );", "-        int test53ncss = pJavancss.getNcss();", "-        bugIf( test53ncss != 4", "-               , \"Parsing file Test53.java failed. Ncss is \" + test53ncss + \" and not 4.\" );", "-", "-        _doNcssTest( 54, 9 );", "-        _doNcssTest( 55, 5 );", "-        _doNcssTest( 56 );", "-        _doNcssTest( 57 );", "+            _doNcssTest( 54, 9 );", "+            _doNcssTest( 55, 5 );", "+            _doNcssTest( 56 );", "+            _doNcssTest( 57 );", "-        pJavancss = measureTestFile( sLocalPath, 56 );", "+        pJavancss = measureTestFile( testDir, 56 );", "-        String sCompare56 = FileUtil.readFile( FileUtil.concatPath( sLocalPath, \"Output56.txt\" ) );", "-        Assert( sOutput56.equals( sCompare56 )", "-                , \"File test/Output56.txt and javancss output differs:\\n\"", "-                + sOutput56 );", "-        FileUtil.writeFile( \"t\", sOutput56 );", "+        String sCompare56 = FileUtil.readFile( new File( testDir, \"Output56.txt\" ).getAbsolutePath() );", "+        Assert( sOutput56.equals( sCompare56 ), \"File test/Output56.txt and javancss output differs:\\n\" + sOutput56 );", "-        xmlTest.setTestDir( _sTestDir );", "+        xmlTest.setTestDir( testDir );", "-        _doNcssTest( 58,  37 );", "+        _doNcssTest( 58, 37 );", "-        _doNcssTest( 60,  35 );", "+        _doNcssTest( 60, 35 );", "-        _doNcssTest( 64,  70 );", "+        _doNcssTest( 64, 70 );", "-        _doNcssTest( 66,   3 );", "-        _doNcssTest( 67,  31 );", "+        _doNcssTest( 66, 3 );", "+        _doNcssTest( 67, 31 );", "-        // check that javadocs are countet correctly", "+        // check that javadocs are counted correctly", "-        pJavancss = new Javancss( FileUtil.concatPath( sLocalPath, \"Test32.java\" ) );", "+        pJavancss = new Javancss( new File( testDir, \"Test32.java\" ) );", "-        String sCompare32 = FileUtil.readFile( FileUtil.concatPath( sLocalPath, \"Output32.txt\" ) );", "-        Assert( sOutput32.equals( sCompare32 )", "-                , \"File test/Output32.txt and javancss output differs:\\n\"", "-                + sOutput32 );", "+        String sCompare32 = FileUtil.readFile( new File( testDir, \"Output32.txt\" ).getAbsolutePath() );", "+        Assert( sOutput32.equals( sCompare32 ), \"File test/Output32.txt and javancss output differs:\\n\" + sOutput32 );", "-        _doJvdcsTest(68, 2);", "+        _doJvdcsTest( 68, 2 );", "-        _doNcssTest( 75,  584 );", "+        _doNcssTest( 75, 584 );", "-        _doNcssTest( 76,  404 );", "+        _doNcssTest( 76, 404 );", "-        _doNcssTest( 77,  48 );", "+        _doNcssTest( 77, 48 );", "-        _doNcssTest( 78,  35 );", "+        _doNcssTest( 78, 35 );", "-        _doNcssTest( 79,  1345 );", "+        _doNcssTest( 79, 1345 );", "-        _doNcssTest( 80,  96 );", "+        _doNcssTest( 80, 96 );", "-        _doNcssTest( 81,  92 );", "-        _doNcssTest( 82,  26 );", "-        _doNcssTest( 83,  2 );", "-        _doNcssTest( 84,  55 );", "-        _doNcssTest( 85,  242 );", "-        _doNcssTest( 86,  22 );", "-        _doNcssTest( 87,  8 );", "-        _doNcssTest( 88,  11 );", "-        _doNcssTest( 89,  65 );", "-        _doNcssTest( 90,  494 );", "-        _doNcssTest( 91,  30 );", "-        _doNcssTest( 92,  6 );", "-        _doNcssTest( 93,  38 );", "-        _doNcssTest( 94,  3 );", "-        _doNcssTest( 95,  10 );", "-        _doNcssTest( 96,  3 );", "-        _doNcssTest( 97,  3 );", "-        _doNcssTest( 98,  37 );", "-        _doNcssTest( 99,  243 );", "-        _doNcssTest( 100,  5 );", "-        _doNcssTest( 101,  256 );", "-        _doNcssTest( 102,  10 );", "-        _doNcssTest( 103,  3 );", "-        _doNcssTest( 104,  3 );", "-        _doNcssTest( 105,  5 );", "-        _doNcssTest( 106,  10 );", "-        _doNcssTest( 107,  9 );", "-        _doNcssTest( 108,  2 );", "-        _doNcssTest( 109,  2 );", "-        _doNcssTest( 110,  1 );", "-        _doNcssTest( 111,  4 );", "-        _doNcssTest( 112,  3 );", "-        _doNcssTest( 113,  13 );", "-        _doNcssTest( 114,  3 );", "-        _doNcssTest( 115,  11663 );", "-        _doNcssTest( 116,  12 );", "-        _doNcssTest( 117,  15 );", "-        _doNcssTest( 119,  2 );", "-        _doNcssTest( 120,  3 );", "-        _doNcssTest( 121,  5 );", "+        _doNcssTest( 81, 92 );", "+        _doNcssTest( 82, 26 );", "+        _doNcssTest( 83, 2 );", "+        _doNcssTest( 84, 55 );", "+        _doNcssTest( 85, 242 );", "+        _doNcssTest( 86, 22 );", "+        _doNcssTest( 87, 8 );", "+        _doNcssTest( 88, 11 );", "+        _doNcssTest( 89, 65 );", "+        _doNcssTest( 90, 494 );", "+        _doNcssTest( 91, 30 );", "+        _doNcssTest( 92, 6 );", "+        _doNcssTest( 93, 38 );", "+        _doNcssTest( 94, 3 );", "+        _doNcssTest( 95, 10 );", "+        _doNcssTest( 96, 3 );", "+        _doNcssTest( 97, 3 );", "+        _doNcssTest( 98, 37 );", "+        _doNcssTest( 99, 243 );", "+        _doNcssTest( 100, 5 );", "+        _doNcssTest( 101, 256 );", "+        _doNcssTest( 102, 10 );", "+        _doNcssTest( 103, 3 );", "+        _doNcssTest( 104, 3 );", "+        _doNcssTest( 105, 5 );", "+        _doNcssTest( 106, 10 );", "+        _doNcssTest( 107, 9 );", "+        _doNcssTest( 108, 2 );", "+        _doNcssTest( 109, 2 );", "+        _doNcssTest( 110, 1 );", "+        _doNcssTest( 111, 4 );", "+        _doNcssTest( 112, 3 );", "+        _doNcssTest( 113, 13 );", "+        _doNcssTest( 114, 3 );", "+        _doNcssTest( 115, 11663 );", "+        _doNcssTest( 116, 12 );", "+        _doNcssTest( 117, 15 );", "+        _doNcssTest( 119, 2 );", "+        _doNcssTest( 120, 3 );", "+        _doNcssTest( 121, 5 );", "+", "+        _doNcssEncodingTest();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d4f847eb7667448ceaf5156002509a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe84ead3ac856565bb3490a92c59f85", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coverage/InstrumentTest.java", "commitBeforeChange": "860d83d968c4c37826a8e5fbbd1ba35cd97da38d", "commitAfterChange": "10ac2bf01fd9ec29bedb1a474b4783026c6c9e1d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testInstrument()", "signatureAfterChange": "  \tpublic void testInstrument()", "diff": ["+\t\t// We use a different directory so we don't inadvertently", "+\t\t// pick up information from old test runs?", "-\t\t//assertEquals(validBranches.length, coverageData.getNumberOfValidBranches());", "-\t\t//for (int i = 0; i < validBranches.length; i++)", "-\t\t//\tassertTrue(\"Line \" + validBranches[i] + \" should be considered valid!\", coverageData.isValidSourceLineNumber(validBranches[i]));", "+\t\tassertEquals(validBranches.length, coverageData", "+\t\t\t\t.getNumberOfValidBranches());", "+\t\tfor (int i = 0; i < validBranches.length; i++)", "+\t\t\tassertTrue(\"Line \" + validBranches[i]", "+\t\t\t\t\t+ \" should be considered valid!\", coverageData", "+\t\t\t\t\t.isValidSourceLineNumber(validBranches[i]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "400b22eef1318ca1f6cadc88e3e1de3e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/reporting/xml/XMLReportTest.java", "commitBeforeChange": "5568cf6cc222084bbc581c7ef8cec80eafe6b510", "commitAfterChange": "1aa3089df80c4ca3b01d6b02a8905c9411207f20", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void tearDown()", "signatureAfterChange": "  \tpublic void tearDown()", "diff": ["-//\t\ttmpDir = new File(pathToTestOutput);", "-//\t\tFile files[] = tmpDir.listFiles();", "-//\t\tfor (int i = 0; i < files.length; i++)", "-//\t\t\tfiles[i].delete();", "-//\t\ttmpDir.delete();", "+\t\ttmpDir = new File(pathToTestOutput);", "+\t\tFile files[] = tmpDir.listFiles();", "+\t\tfor (int i = 0; i < files.length; i++)", "+\t\t\tfiles[i].delete();", "+\t\ttmpDir.delete();"]}]}
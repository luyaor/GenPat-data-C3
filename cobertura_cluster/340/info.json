{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f19961ae37f7681949ce6589eacf1740", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451e5167e5e00746ffe0f729cd9aadfa", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "48f95094d36dfc0a50d7cb3328f1fa90adefb8bb", "commitAfterChange": "f9e2e0b895d2f39d8af57ae695af8dfce323a3f2", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 136, "signatureBeforeChange": "\r \r   final public void EnumBody() throws ParseException", "signatureAfterChange": "\r \r   final public void EnumBody() throws ParseException", "diff": ["-      label_68:\r", "+      label_71:\r", "-        if (jj_2_50(2)) {\r", "+        if (jj_2_53(2)) {\r", "-          break label_68;\r", "+          break label_71;\r", "-      jj_la1[172] = jj_gen;\r", "+      jj_la1[182] = jj_gen;\r", "-      jj_la1[173] = jj_gen;\r", "+      jj_la1[183] = jj_gen;\r", "-      label_69:\r", "+      label_72:\r", "-          jj_la1[174] = jj_gen;\r", "-          break label_69;\r", "+          jj_la1[184] = jj_gen;\r", "+          break label_72;\r", "-      jj_la1[175] = jj_gen;\r", "+      jj_la1[185] = jj_gen;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78fbae66b8176329d29b0f25f4d5b2be", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 138, "signatureBeforeChange": "\r \r   final public void EnumBody() throws ParseException", "signatureAfterChange": "    final public void EnumBody() throws ParseException", "diff": ["-\r", "-  final public void EnumBody() throws ParseException {\r", "-    jj_consume_token(LBRACE);\r", "-               _ncss++;\r", "-               Util.debug( \"_ncss++\" );\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case ABSTRACT:\r", "-    case FINAL:\r", "-    case NATIVE:\r", "-    case PRIVATE:\r", "-    case PROTECTED:\r", "-    case PUBLIC:\r", "-    case STATIC:\r", "-    case TESTAAAA:\r", "-    case SYNCHRONIZED:\r", "-    case TRANSIENT:\r", "-    case VOLATILE:\r", "-    case IDENTIFIER:\r", "-    case AT:\r", "-      EnumConstant();\r", "-      label_71:\r", "-      while (true) {\r", "-        if (jj_2_53(2)) {\r", "-          ;\r", "-        } else {\r", "-          break label_71;\r", "-        }\r", "-        jj_consume_token(COMMA);\r", "-        EnumConstant();\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[182] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case COMMA:\r", "-      jj_consume_token(COMMA);\r", "-      break;\r", "-    default:\r", "-      jj_la1[183] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case SEMICOLON:\r", "-      jj_consume_token(SEMICOLON);\r", "-      label_72:\r", "-      while (true) {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ABSTRACT:\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case CLASS:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FINAL:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case INTERFACE:\r", "-        case LONG:\r", "-        case NATIVE:\r", "-        case PRIVATE:\r", "-        case PROTECTED:\r", "-        case PUBLIC:\r", "-        case SHORT:\r", "-        case STATIC:\r", "-        case TESTAAAA:\r", "-        case SYNCHRONIZED:\r", "-        case TRANSIENT:\r", "-        case VOID:\r", "-        case VOLATILE:\r", "-        case IDENTIFIER:\r", "-        case LBRACE:\r", "-        case SEMICOLON:\r", "-        case AT:\r", "-        case LT:\r", "-          ;\r", "-          break;\r", "-        default:\r", "-          jj_la1[184] = jj_gen;\r", "-          break label_72;\r", "-        }\r", "-        ClassOrInterfaceBodyDeclaration(false);\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[185] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-  }\r", "+", "+  final public void EnumBody() throws ParseException {", "+    jj_consume_token(LBRACE);", "+               _ncss++;", "+               Util.debug( \"_ncss++\" );", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case ABSTRACT:", "+    case FINAL:", "+    case NATIVE:", "+    case PRIVATE:", "+    case PROTECTED:", "+    case PUBLIC:", "+    case STATIC:", "+    case TESTAAAA:", "+    case SYNCHRONIZED:", "+    case TRANSIENT:", "+    case VOLATILE:", "+    case IDENTIFIER:", "+    case AT:", "+      EnumConstant();", "+      label_74:", "+      while (true) {", "+        if (jj_2_52(2)) {", "+          ;", "+        } else {", "+          break label_74;", "+        }", "+        jj_consume_token(COMMA);", "+        EnumConstant();", "+      }", "+      break;", "+    default:", "+      jj_la1[187] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case COMMA:", "+      jj_consume_token(COMMA);", "+      break;", "+    default:", "+      jj_la1[188] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case SEMICOLON:", "+      jj_consume_token(SEMICOLON);", "+      label_75:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case ENUM:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case TESTAAAA:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case AT:", "+        case LT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[189] = jj_gen;", "+          break label_75;", "+        }", "+        ClassOrInterfaceBodyDeclaration(false);", "+      }", "+      break;", "+    default:", "+      jj_la1[190] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(RBRACE);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2edaf44f41b0b8d34f59065dfd43c70", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 138, "signatureBeforeChange": "\r \r   final public void EnumBody() throws ParseException", "signatureAfterChange": "    final public void EnumBody() throws ParseException", "diff": ["-\r", "-  final public void EnumBody() throws ParseException {\r", "-    jj_consume_token(LBRACE);\r", "-               _ncss++;\r", "-               Util.debug( \"_ncss++\" );\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case ABSTRACT:\r", "-    case FINAL:\r", "-    case NATIVE:\r", "-    case PRIVATE:\r", "-    case PROTECTED:\r", "-    case PUBLIC:\r", "-    case STATIC:\r", "-    case TESTAAAA:\r", "-    case SYNCHRONIZED:\r", "-    case TRANSIENT:\r", "-    case VOLATILE:\r", "-    case IDENTIFIER:\r", "-    case AT:\r", "-      EnumConstant();\r", "-      label_71:\r", "-      while (true) {\r", "-        if (jj_2_53(2)) {\r", "-          ;\r", "-        } else {\r", "-          break label_71;\r", "-        }\r", "-        jj_consume_token(COMMA);\r", "-        EnumConstant();\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[182] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case COMMA:\r", "-      jj_consume_token(COMMA);\r", "-      break;\r", "-    default:\r", "-      jj_la1[183] = jj_gen;\r", "-      ;\r", "-    }\r", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-    case SEMICOLON:\r", "-      jj_consume_token(SEMICOLON);\r", "-      label_72:\r", "-      while (true) {\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case ABSTRACT:\r", "-        case ASSERT:\r", "-        case BOOLEAN:\r", "-        case BYTE:\r", "-        case CHAR:\r", "-        case CLASS:\r", "-        case DOUBLE:\r", "-        case ENUM:\r", "-        case FINAL:\r", "-        case FLOAT:\r", "-        case INT:\r", "-        case INTERFACE:\r", "-        case LONG:\r", "-        case NATIVE:\r", "-        case PRIVATE:\r", "-        case PROTECTED:\r", "-        case PUBLIC:\r", "-        case SHORT:\r", "-        case STATIC:\r", "-        case TESTAAAA:\r", "-        case SYNCHRONIZED:\r", "-        case TRANSIENT:\r", "-        case VOID:\r", "-        case VOLATILE:\r", "-        case IDENTIFIER:\r", "-        case LBRACE:\r", "-        case SEMICOLON:\r", "-        case AT:\r", "-        case LT:\r", "-          ;\r", "-          break;\r", "-        default:\r", "-          jj_la1[184] = jj_gen;\r", "-          break label_72;\r", "-        }\r", "-        ClassOrInterfaceBodyDeclaration(false);\r", "-      }\r", "-      break;\r", "-    default:\r", "-      jj_la1[185] = jj_gen;\r", "-      ;\r", "-    }\r", "-    jj_consume_token(RBRACE);\r", "-  }\r", "+", "+  final public void EnumBody() throws ParseException {", "+    jj_consume_token(LBRACE);", "+               _ncss++;", "+               Util.debug( \"_ncss++\" );", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case ABSTRACT:", "+    case FINAL:", "+    case NATIVE:", "+    case PRIVATE:", "+    case PROTECTED:", "+    case PUBLIC:", "+    case STATIC:", "+    case TESTAAAA:", "+    case SYNCHRONIZED:", "+    case TRANSIENT:", "+    case VOLATILE:", "+    case IDENTIFIER:", "+    case AT:", "+      EnumConstant();", "+      label_74:", "+      while (true) {", "+        if (jj_2_52(2)) {", "+          ;", "+        } else {", "+          break label_74;", "+        }", "+        jj_consume_token(COMMA);", "+        EnumConstant();", "+      }", "+      break;", "+    default:", "+      jj_la1[187] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case COMMA:", "+      jj_consume_token(COMMA);", "+      break;", "+    default:", "+      jj_la1[188] = jj_gen;", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case SEMICOLON:", "+      jj_consume_token(SEMICOLON);", "+      label_75:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case ASSERT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case ENUM:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case TESTAAAA:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case AT:", "+        case LT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[189] = jj_gen;", "+          break label_75;", "+        }", "+        ClassOrInterfaceBodyDeclaration(false);", "+      }", "+      break;", "+    default:", "+      jj_la1[190] = jj_gen;", "+      ;", "+    }", "+    jj_consume_token(RBRACE);", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "885aa1956fa4913b119264d390e96117", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0badd4ca310645c3bdd4c5ac97e0a35", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/AbstractCodeProvider.java", "commitBeforeChange": "23923f3f6dbe900a5325855399c600eb696bd86f", "commitAfterChange": "a1aed49ea94661201f3b18a31fad619a8a3a5c78", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void generateCoberturaClassMapMethod(ClassVisitor cv,ClassMap classMap)", "signatureAfterChange": " \tpublic void generateCoberturaClassMapMethod(ClassVisitor cv, ClassMap classMap)", "diff": ["-\tpublic void generateCoberturaClassMapMethod(ClassVisitor cv,ClassMap classMap){", "-\t\tfinal String CLASSMAP_LISTENER_INTERNALNAME=Type.getInternalName(LightClassmapListener.class);", "+\tpublic void generateCoberturaClassMapMethod(ClassVisitor cv, ClassMap classMap) {", "+\t\t", "+\t\tLinkedList<TouchPointDescriptor> touchPointDescriptors = new LinkedList<TouchPointDescriptor>(classMap.getTouchPointsInLineOrder());", "+\t\tint parts = 0;", "+\t\tfor(int j=0; touchPointDescriptors.size() > 0; j++) {", "+\t\t\tList<TouchPointDescriptor> bufor = new LinkedList<TouchPointDescriptor>(); ", "+\t\t\tfor (int i = 0; i < 1000 && touchPointDescriptors.size() > 0; i++){", "+\t\t\t  bufor.add(touchPointDescriptors.pollFirst());", "+\t\t\t}", "+\t\t\tclassMapContent(cv, j, bufor);", "+\t\t\tparts++;", "+\t\t}", "+\t\t\t", "+\t\tfor (int i=0; i < parts; i++) {", "+\t\t\tmv.visitInsn(Opcodes.DUP);", "+\t\t\tmv.visitMethodInsn(Opcodes.INVOKESTATIC, classMap.getClassName(), ", "+\t\t\t\t\tCOBERTURA_CLASSMAP_METHOD_NAME+\"_\"+i, \"(\"+Type.getType(LightClassmapListener.class).toString()+\")V\");", "+\t\t}\t", "+", "+\t\tmv.visitInsn(Opcodes.POP);", "+\t\tmv.visitInsn(Opcodes.RETURN);", "+\t\tmv.visitMaxs(0, 0);//will be recalculated by writer", "+\t\tmv.visitEnd();\t\t", "+\t}", "-\t\tList<TouchPointDescriptor> touchPointDescriptors=classMap.getTouchPointsInLineOrder();", "-\t\tfor (TouchPointDescriptor tpd:touchPointDescriptors){", "-\t\t}\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccdc251e7ed18a2aceffb372990e1299", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/pass3/AbstractCodeProvider.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t\t \tprivate void classMapContent(ClassVisitor cv, int nr, List<TouchPointDescriptor> touchPointDescriptors)", "signatureAfterChange": " \t\t \tprivate void classMapContent(ClassVisitor cv, int nr, List<TouchPointDescriptor> touchPointDescriptors)", "diff": ["-\t\t\t}else if (tpd instanceof SwitchTouchPointDescriptor){", "-\t\t\t\tSwitchTouchPointDescriptor stpd=(SwitchTouchPointDescriptor)tpd;\t\t\t", "+\t\t\t}else if (tpd instanceof SwitchTouchPointDescriptor) {", "+\t\t\t\tSwitchTouchPointDescriptor stpd=(SwitchTouchPointDescriptor)tpd;", "+\t\t\t\tfinal String enum_sign = ((SwitchTouchPointDescriptor) tpd).getEnumType();", "+\t\t\t\tif (enum_sign == null) {", "+\t\t\t\t\tmv.visitLdcInsn(Integer.MAX_VALUE);", "+\t\t\t\t} else {", "+\t\t\t\t\tmv.visitMethodInsn(Opcodes.INVOKESTATIC, enum_sign, \"values\", \"()[L\" + enum_sign + \";\");", "+\t\t\t\t\tmv.visitInsn(Opcodes.ARRAYLENGTH);", "+\t\t\t\t}\t\t\t\t\t\t\t\t", "-\t\t\t\tmv.visitMethodInsn(Opcodes.INVOKEINTERFACE, CLASSMAP_LISTENER_INTERNALNAME,\"putSwitchTouchPoint\",\"(I[I)V\");\t\t\t\t", "+\t\t\t\tmv.visitMethodInsn(Opcodes.INVOKEINTERFACE, CLASSMAP_LISTENER_INTERNALNAME,\"putSwitchTouchPoint\",\"(II[I)V\");\t\t\t\t"]}]}
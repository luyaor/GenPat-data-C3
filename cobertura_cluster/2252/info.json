{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e0fab9d4830f47a6b319f2f2cb1197d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfa709d547cf99245d177404d9de406", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "2d958af083fecc2f20c64e4cd5f23145337622a0", "commitAfterChange": "8d76b07e3d230fcd0d3b233e7ffc80df6ca3ec82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file)", "signatureAfterChange": "  \tprivate void addInstrumentationToSingleClass(File file)", "diff": ["+", "+\tprivate void addInstrumentationToSingleClass(File file)", "+\t{", "+\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "+", "+\t\tInputStream inputStream = null;", "+\t\tClassWriter cw;", "+\t\tClassInstrumenter cv;", "+\t\ttry", "+\t\t{", "+\t\t\tinputStream = new FileInputStream(file);", "+\t\t\tClassReader cr = new ClassReader(inputStream);", "+\t\t\tcw = new ClassWriter(true);", "+\t\t\tcv = new ClassInstrumenter(this.projectData, cw, this.ignoreRegexs);", "+\t\t\tcr.accept(cv, false);", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+\t\t\t\t\tt);", "+\t\t\treturn;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (inputStream != null)", "+\t\t\t{", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tinputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\tOutputStream outputStream = null;", "+\t\ttry", "+\t\t{", "+\t\t\tif (cv.isInstrumented())", "+\t\t\t{", "+\t\t\t\t// If destinationDirectory is null, then overwrite", "+\t\t\t\t// the original, uninstrumented file.", "+\t\t\t\tFile outputFile;", "+\t\t\t\tif (destinationDirectory == null)", "+\t\t\t\t\toutputFile = file;", "+\t\t\t\telse", "+\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "+\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "+\t\t\t\t\t\t\t+ \".class\");", "+", "+\t\t\t\tFile parentFile = outputFile.getParentFile();", "+\t\t\t\tif (parentFile != null)", "+\t\t\t\t{", "+\t\t\t\t\tparentFile.mkdirs();", "+\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "+\t\t\t\toutputStream = new FileOutputStream(outputFile);", "+\t\t\t\toutputStream.write(instrumentedClass);", "+\t\t}", "+\t\tcatch (IOException e)", "+\t\t{", "+\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+\t\t\t\t\te);", "+\t\t\treturn;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tif (outputStream != null)", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\toutputStream.close();", "+\t\t\t\t}", "+\t\t\t\tcatch (IOException e)", "+\t\t\t\t{", "+\t\t\t\t}", "-\tprivate void addInstrumentationToSingleClass(File file)", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(true);", "-\t\t\tcv = new ClassInstrumenter(projectData, cw, ignoreRegex);", "-\t\t\tcr.accept(cv, false);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tinputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "-", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "-", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\te);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (outputStream != null)", "-\t\t\t{", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\toutputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8972a6eba3d5208c1a6d3e102cf99550", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file)", "signatureAfterChange": "      private void addInstrumentationToSingleClass(File file)", "diff": ["-\tprivate void addInstrumentationToSingleClass(File file)", "-\t{", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "+    private void addInstrumentationToSingleClass(File file)", "+    {", "+        logger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(true);", "-\t\t\tcv = new ClassInstrumenter(this.projectData, cw, this.ignoreRegexs);", "-\t\t\tcr.accept(cv, false);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t{", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tinputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+        InputStream inputStream = null;", "+        ClassWriter cw;", "+        ClassInstrumenter cv;", "+        try", "+        {", "+            inputStream = new FileInputStream(file);", "+            ClassReader cr = new ClassReader(inputStream);", "+            cw = new ClassWriter(true);", "+            cv = new ClassInstrumenter(projectData, cw, ignoreRegexes);", "+            cr.accept(cv, false);", "+        }", "+        catch (Throwable t)", "+        {", "+            logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+                    t);", "+            return;", "+        }", "+        finally", "+        {", "+            if (inputStream != null)", "+            {", "+                try", "+                {", "+                    inputStream.close();", "+                }", "+                catch (IOException e)", "+                {", "+                }", "+            }", "+        }", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "+        OutputStream outputStream = null;", "+        try", "+        {", "+            if (cv.isInstrumented())", "+            {", "+                // If destinationDirectory is null, then overwrite", "+                // the original, uninstrumented file.", "+                File outputFile;", "+                if (destinationDirectory == null)", "+                    outputFile = file;", "+                else", "+                    outputFile = new File(destinationDirectory, cv", "+                            .getClassName().replace('.', File.separatorChar)", "+                            + \".class\");", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "+                File parentFile = outputFile.getParentFile();", "+                if (parentFile != null)", "+                {", "+                    parentFile.mkdirs();", "+                }", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\te);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (outputStream != null)", "-\t\t\t{", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\toutputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+                byte[] instrumentedClass = cw.toByteArray();", "+                outputStream = new FileOutputStream(outputFile);", "+                outputStream.write(instrumentedClass);", "+            }", "+        }", "+        catch (IOException e)", "+        {", "+            logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+                    e);", "+            return;", "+        }", "+        finally", "+        {", "+            if (outputStream != null)", "+            {", "+                try", "+                {", "+                    outputStream.close();", "+                }", "+                catch (IOException e)", "+                {", "+                }", "+            }", "+        }", "+    }"]}]}
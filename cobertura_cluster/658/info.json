{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f0f4d8c4033801f5786567e9f8697ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76ad6a261780249fd97f34becc2dac08", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "commitAfterChange": "aca3d012a32f8d1cc78e6d8a28c8ae27f9238ef8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "  \tprivate void parseArguments(String[] args)", "diff": ["-    private void parseArguments(String[] args)", "-    {", "-        File dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\tprivate void parseArguments(String[] args)", "+\t{", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "-        // Parse our parameters", "-        List filePaths = new ArrayList();", "-        for (int i = 0; i < args.length; i++)", "-        {", "-            if (args[i].equals(\"--basedir\")) ", "-            {", "-            \tfilePaths.add( args[i]);", "-            \tfilePaths.add( args[++i]);", "-            }", "-            else if (args[i].equals(\"--datafile\"))", "-                dataFile = new File(args[++i]);", "-            else if (args[i].equals(\"--destination\"))", "-                destinationDirectory = new File(args[++i]);", "-            else if (args[i].equals(\"--ignore\"))", "-            {", "-                String regex = args[++i];", "-                try", "-                {", "-                    Perl5Compiler pc = new Perl5Compiler();", "-                    this.ignoreRegexes.add(pc.compile(regex));", "-                }", "-                catch (MalformedPatternException e)", "-                {", "-                    logger.warn(\"The regular expression \" + regex", "-                            + \" is invalid: \" + e.getLocalizedMessage());", "-                }", "-            }", "+\t\t// Parse our parameters", "+\t\tList filePaths = new ArrayList();", "+\t\tfor (int i = 0; i < args.length; i++)", "+\t\t{", "+\t\t\tif (args[i].equals(\"--basedir\"))", "+\t\t\t{", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t\tfilePaths.add(args[++i]);", "+\t\t\t}", "+\t\t\telse if (args[i].equals(\"--datafile\"))", "+\t\t\t\tdataFile = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--destination\"))", "+\t\t\t\tdestinationDirectory = new File(args[++i]);", "+\t\t\telse if (args[i].equals(\"--ignore\"))", "+\t\t\t{", "+\t\t\t\tString regex = args[++i];", "+\t\t\t\ttry", "+\t\t\t\t{", "+\t\t\t\t\tPerl5Compiler pc = new Perl5Compiler();", "+\t\t\t\t\tthis.ignoreRegexes.add(pc.compile(regex));", "+\t\t\t\t}", "+\t\t\t\tcatch (MalformedPatternException e)", "+\t\t\t\t{", "+\t\t\t\t\tlogger.warn(\"The regular expression \" + regex", "+\t\t\t\t\t\t\t+ \" is invalid: \" + e.getLocalizedMessage());", "+\t\t\t\t}", "+\t\t\t}", "-            \tfilePaths.add( args[i]);", "-            }", "-        }", "+\t\t\t\tfilePaths.add(args[i]);", "+\t\t\t}", "+\t\t}", "-        // Load coverage data", "-        projectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "-        if (projectData == null)", "-            projectData = new ProjectData();", "+\t\t// Load coverage data", "+\t\tprojectData = CoverageDataFileHandler.loadCoverageData(dataFile);", "+\t\tif (projectData == null)", "+\t\t\tprojectData = new ProjectData();", "-        // Instrument classes", "-        String baseDir = null;", "-\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "-        Iterator iter = filePaths.iterator();", "+\t\t// Instrument classes", "+\t\tSystem.out.println(\"Instrumenting \"\t+ filePaths.size() + \" \"", "+\t\t\t\t+ (filePaths.size() == 1 ? \"class\" : \"classes\")", "+\t\t\t\t+ (destinationDirectory != null ? \" to \"", "+\t\t\t\t\t\t+ destinationDirectory.getAbsoluteFile() : \"\"));", "+\t\tString baseDir = null;", "+\t\tIterator iter = filePaths.iterator();", "-        \tString act = (String) iter.next();", "+\t\t\tString act = (String)iter.next();", "-       \t\t\tbaseDir = (String) iter.next();", "+\t\t\t\tbaseDir = (String)iter.next();", "-        \t\taddInstrumentation( baseDir, act);", "-        \t}", "-        }", "-        ", "-        // Save coverage data", "-        CoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "-    }", "+\t\t\t\taddInstrumentation(baseDir, act);", "+\t\t\t}", "+\t\t}", "+\t\t// Save coverage data", "+\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8734c3a645f1c1e875fe34eb60729e02", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/LineData.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tvoid setBranch(boolean isBranch)", "signatureAfterChange": " \t \tpublic int getBranchSize()", "diff": ["-\tvoid setBranch(boolean isBranch)", "-\t\tthis.isBranch = isBranch;", "+\t", "+\tpublic int getBranchSize() {", "+\t\treturn ((jumps == null) ? 0 : jumps.size()) + ((switches == null) ? 0 :switches.size());", "+\t}"]}]}
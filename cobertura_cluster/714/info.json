{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6e83ce559b80bc1c7034c7609575750", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "094948086c6b6b8de26010bce192b413", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/util/FileLocker.java", "commitBeforeChange": "b593b3e400cea2328d827b3a670dd0bf6cc7fee1", "commitAfterChange": "8227bc61964b9dbb4bcbf570622aa907f806676d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic boolean lock()", "signatureAfterChange": " \tpublic boolean lock()", "diff": ["+\t\tif (System.getProperty(\"java.version\").startsWith(\"1.3\"))", "+\t\t{", "+\t\t\treturn true;", "+\t\t}", "+", "-\t\t\tlockChannel = new RandomAccessFile(lockFile, \"rw\").getChannel();", "+\t\t\tClass aClass = Class.forName(\"java.io.RandomAccessFile\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"getChannel\", (Class[])null);", "+\t\t\tlockChannel = method.invoke(new RandomAccessFile(lockFile, \"rw\"), (Object[])null);", "+\t\tcatch (InvocationTargetException e)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to get lock channel for \" + lockFile.getAbsolutePath()", "+\t\t\t\t\t+ \": \" + e.getLocalizedMessage());", "+\t\t\treturn false;", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to execute RandomAccessFile.getChannel() using reflection: \"", "+\t\t\t\t\t+ t.getLocalizedMessage());", "+\t\t\tt.printStackTrace();", "+\t\t}", "-\t\t\tlock = lockChannel.lock();", "+\t\t\tClass aClass = Class.forName(\"java.nio.channels.FileChannel\");", "+\t\t\tMethod method = aClass.getDeclaredMethod(\"lock\", (Class[])null);", "+\t\t\tlock = method.invoke(lockChannel, (Object[])null);", "-\t\tcatch (IOException e)", "+\t\tcatch (InvocationTargetException e)", "+\t\t}", "+\t\tcatch (Throwable t)", "+\t\t{", "+\t\t\tSystem.err.println(\"Unable to execute FileChannel.lock() using reflection: \"", "+\t\t\t\t\t+ t.getLocalizedMessage());", "+\t\t\tt.printStackTrace();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74b8646e52a486d3ed432162d974e87f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "b1e7879329998643d42728bb6b8029d8483b12b0", "commitAfterChange": "c357c3ab27173426ddabfdf358bf583cc0ca08c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main(String[] args)", "signatureAfterChange": "  \tpublic static void main(String[] args)", "diff": ["+\tpublic static void main(String[] args) {", "+\t\tHeader.print(System.out);", "+\t\tlong startTime = System.currentTimeMillis();", "+\t\t\targs = CommandLineBuilder.preprocessCommandLineArguments(args);", "+\t\t} catch (Exception ex) {", "+\t\t\tSystem.err.println(\"Error: Cannot process arguments: \"", "+\t\t\t\t\t+ ex.getMessage());", "+\t\t\tSystem.exit(1);", "+\t\ttry {", "+\t\t\tnew Cobertura(createArgumentsFromCMDParams(args).build())", "+\t\t\t\t\t.instrumentCode().saveProjectData();", "+\t\t} catch (Throwable throwable) {", "+\t\t\tSystem.err.println(String.format(", "+\t\t\t\t\t\"Failed while instrumenting code: %s\", throwable", "+\t\t\t\t\t\t\t.getMessage()));", "+\t\t\tthrowable.printStackTrace();", "+\t\t}", "+", "+\t\tlong stopTime = System.currentTimeMillis();", "+\t\tlogger.info(\"Instrument time: \" + (stopTime - startTime) + \"ms\");", "-", "-\tpublic static void main(String[] args) {", "-\t\tHeader.print(System.out);", "-", "-\t\tlong startTime = System.currentTimeMillis();", "-", "-\t\tMain main = new Main();", "-", "-\t\ttry {", "-\t\t\targs = CommandLineBuilder.preprocessCommandLineArguments(args);", "-\t\t} catch (Exception ex) {", "-\t\t\tSystem.err.println(\"Error: Cannot process arguments: \"", "-\t\t\t\t\t+ ex.getMessage());", "-\t\t\tSystem.exit(1);", "-\t\t}", "-\t\tmain.parseArguments(args);", "-", "-\t\tlong stopTime = System.currentTimeMillis();", "-\t\tlogger.info(\"Instrument time: \" + (stopTime - startTime) + \"ms\");"]}]}
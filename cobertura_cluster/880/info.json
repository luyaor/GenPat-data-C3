{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11612b0476f0727d3efab4d7c9e1fcb1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288f19927b9d51288b4fe3660655e208", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "a4dc86bf72c357e76a4db9814a702ca821cc33bd", "commitAfterChange": "1f5d4831b5ec0e2a8618e85b0d6a2ecd4eb5c520", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate static String generateTableHeaderForClasses()", "signatureAfterChange": "  \tprivate static String generateTableHeader(String title, \t\t\tboolean showColumnForNumberOfClasses)", "diff": ["+\tprivate static String generateTableHeader(String title,", "+\t\t\tboolean showColumnForNumberOfClasses)", "+\t{", "+\t\tStringBuffer ret = new StringBuffer();", "+\t\tret.append(\"<thead>\");", "+\t\tret.append(\"<tr>\");", "+\t\tret.append(\"  <td class=\\\"heading\\\">\" + title + \"</td>\");", "+\t\tif (showColumnForNumberOfClasses)", "+\t\t{", "+\t\t\tret.append(\"  <td class=\\\"heading\\\"># Classes</td>\");", "+\t\t}", "+\t\tret.append(\"  <td class=\\\"heading\\\" width=\\\"20%\\\">\"", "+\t\t\t\t+ generateHelpURL(\"Line Coverage\",", "+\t\t\t\t\t\t\"The percent of lines executed by this test run.\")", "+\t\t\t\t+ \"</td>\");", "+\t\tret.append(\"  <td class=\\\"heading\\\" width=\\\"20%\\\">\"", "+\t\t\t\t+ generateHelpURL(\"Branch Coverage\",", "+\t\t\t\t\t\t\"The percent of branches executed by this test run.\")", "+\t\t\t\t+ \"</td>\");", "+\t\tret", "+\t\t\t\t.append(\"  <td class=\\\"heading\\\" width=\\\"10%\\\">\"", "+\t\t\t\t\t\t+ generateHelpURL(", "+\t\t\t\t\t\t\t\t\"Complexity\",", "+\t\t\t\t\t\t\t\t\"Average McCabe's cyclomatic code complexity for all methods.  This is basically a count of the number of different code paths in a method (incremented by 1 for each if statement, while loop, etc.)\")", "+\t\t\t\t\t\t+ \"</td>\");", "+\t\tret.append(\"</tr>\");", "+\t\tret.append(\"</thead>\");", "+\t\treturn ret.toString();", "+\t}", "-", "-\tprivate static String generateTableHeaderForClasses()", "-\t{", "-\t\tStringBuffer ret = new StringBuffer();", "-\t\tret.append(\"<thead>\");", "-\t\tret.append(\"<tr>\");", "-\t\tret.append(\"  <td class=\\\"heading\\\">Classes in this Package</td>\");", "-\t\tret.append(generateCommonTableColumns());", "-\t\tret.append(\"</tr>\");", "-\t\tret.append(\"</thead>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac7856183e2197c521c14c828944012e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate String generateHtmlizedJavaSource(SourceFileData sourceFileData)", "signatureAfterChange": "  \tprivate String generateHtmlizedJavaSource(SourceFileData sourceFileData)", "diff": ["-\t\t\t\t\tlong numberOfHits = sourceFileData.getHitCount(lineNumber);", "-\t\t\t\t\tret.append(\"  <td class=\\\"numLineCover\\\">&nbsp;\"", "-\t\t\t\t\t\t\t+ lineNumber + \"</td>\");", "-\t\t\t\t\tif (numberOfHits > 0)", "-\t\t\t\t\t{", "-\t\t\t\t\t\tret.append(\"  <td class=\\\"nbHitsCovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t+ numberOfHits + \"</td>\");", "-\t\t\t\t\t\tret", "-\t\t\t\t\t\t\t\t.append(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t+ \"</pre></td>\");", "+               LineData lineData = sourceFileData.getLineCoverage(lineNumber);", "+               ret.append(\"  <td class=\\\"numLineCover\\\">&nbsp;\"", "+                     + lineNumber + \"</td>\");", "+               if ((lineData != null) && (lineData.isCovered()))", "+               {", "+                  ret.append(\"  <td class=\\\"nbHitsCovered\\\">\" ", "+                        + generateBranchInfo(lineData, \"&nbsp;\" + ((lineData != null) ? lineData.getHits() : 0)) ", "+                        + \"</td>\");", "+                  ret", "+                        .append(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\">&nbsp;\"", "+                              + generateBranchInfo(lineData, javaToHtml.process(lineStr))", "+                              + \"</pre></td>\");", "-\t\t\t\t\t\tret.append(\"  <td class=\\\"nbHitsUncovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t+ numberOfHits + \"</td>\");", "-\t\t\t\t\t\tret", "-\t\t\t\t\t\t\t\t.append(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\"><span class=\\\"srcUncovered\\\">&nbsp;\"", "-\t\t\t\t\t\t\t\t\t\t+ javaToHtml.process(lineStr)", "-\t\t\t\t\t\t\t\t\t\t+ \"</span></pre></td>\");", "+                  ret.append(\"  <td class=\\\"nbHitsUncovered\\\">\"", "+                        + generateBranchInfo(lineData, \"&nbsp;\" + ((lineData != null) ? lineData.getHits() : 0))", "+                        + \"</td>\");", "+                  ret", "+                        .append(\"  <td class=\\\"src\\\"><pre class=\\\"src\\\"><span class=\\\"srcUncovered\\\">&nbsp;\"", "+                              + generateBranchInfo(lineData, javaToHtml.process(lineStr))", "+                              + \"</span></pre></td>\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70bb0ee31016061d3680eb6d122f01f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd3f1894653da85d60a20ab7cfcbab10", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/merge/Main.java", "commitBeforeChange": "b4e6c761a3eeadd6fae8843d2b468c44be51d042", "commitAfterChange": "954e4f6ea953ecbbfb880107725691fbc4d70620", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic Main(String[] args)", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["+", "-\t\tProjectData projectData = null;", "+\t\tVector filesToMerge = new Vector();", "+\t\t// Go through all the parameters", "-\t\t\t{", "-\t\t\t\tFile newDataFile = new File(args[++i]);", "-\t\t\t\tif (projectData == null) {", "-\t\t\t\t\tprojectData = CoverageDataFileHandler", "-\t\t\t\t\t\t\t.loadCoverageData(newDataFile);", "-\t\t\t\t} else {", "-\t\t\t\t\tProjectData projectDataNew = CoverageDataFileHandler", "-\t\t\t\t\t.loadCoverageData(newDataFile);", "-\t\t\t\t\tprojectData.merge(projectDataNew);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse if (args[i].equals(\"--output\"))", "-\t\t\t{", "-\t\t\t\tdataFile.getParentFile().mkdirs();", "-\t\t\t}", "+\t\t\telse", "+\t\t\t\tfilesToMerge.add(args[i]);", "-\t\tif (projectData != null)", "-\t\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);", "+\t\t// Load the data file", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "+\t\tif (projectData == null)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: Unable to read from data file \"", "+\t\t\t\t\t+ dataFile.getAbsolutePath());", "+\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\tif (filesToMerge.size() == 0)", "+\t\t{", "+\t\t\tSystem.err.println(\"Error: No files were specified for merging.\");", "+\t\t\tSystem.exit(1);", "+\t\t}", "+", "+\t\t// Merge everything", "+\t\tIterator iter = filesToMerge.iterator();", "+\t\twhile (iter.hasNext())", "+\t\t{", "+\t\t\tString newDataFileName = (String)iter.next();", "+\t\t\tFile newDataFile = new File(newDataFileName);", "+\t\t\tProjectData projectDataNew = CoverageDataFileHandler", "+\t\t\t\t\t.loadCoverageData(newDataFile);", "+\t\t\tprojectData.merge(projectDataNew);", "+\t\t}", "+", "+\t\t// Save the combined data file", "+\t\tCoverageDataFileHandler.saveCoverageData(projectData, dataFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb553a699c139ee532d3c414fce2d790", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "5b30351fa9d71ab4016d2fcbdce172b2f16c1c45", "commitAfterChange": "55571e8b292791cc80dd02e2bed0dfd9f206376b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic static void saveGlobalProjectData()", "signatureAfterChange": "  \tpublic static void saveGlobalProjectData()", "diff": ["-\t\tProjectData projectData = getGlobalProjectData();", "-\t\tsynchronized (projectData)", "+\t\tProjectData projectDataToSave = globalProjectData;", "+", "+\t\t/*", "+\t\t * The next statement is not necessary at the moment, because this method is only called", "+\t\t * either at the very beginning or at the very end of a test.  If the code is changed", "+\t\t * to save more frequently, then this will become important.", "+\t\t */", "+\t\tglobalProjectData = new ProjectData();", "+", "+\t\t/*", "+\t\t * Now sleep a bit in case there is a thread still holding a reference to the \"old\"", "+\t\t * globalProjectData (now referenced with projectDataToSave).  ", "+\t\t * We want it to finish its updates.  I assume 2 seconds is plenty of time.", "+\t\t */", "+\t\ttry", "-\t\t\tCoverageDataFileHandler.saveCoverageData(projectData,", "-\t\t\t\t\tCoverageDataFileHandler.getDefaultDataFile());", "+\t\t\tThread.sleep(1000);", "+\t\tcatch (InterruptedException e)", "+\t\t{", "+\t\t}", "+", "+\t\tFile dataFile = CoverageDataFileHandler.getDefaultDataFile();", "+\t\tFileLocker lock = new FileLocker(dataFile);", "+\t\tif (lock.lock())", "+\t\t{", "+\t\t\tProjectData datafileProjectData = loadCoverageDataFromDatafile(dataFile);", "+\t\t\tif (datafileProjectData == null)", "+\t\t\t{", "+\t\t\t\tdatafileProjectData = projectDataToSave;", "+\t\t\t}", "+\t\t\telse", "+\t\t\t{", "+\t\t\t\tdatafileProjectData.merge(projectDataToSave);", "+\t\t\t}", "+\t\t\tCoverageDataFileHandler.saveCoverageData(datafileProjectData, dataFile);", "+\t\t}", "+\t\tlock.release();", "+\t}"]}]}
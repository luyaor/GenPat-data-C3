{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f33948e1128869341750c8446f3c84c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27ae272c00e59032026f0096d185e073", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "8470613dce5289e48aeaaebf95d84de1414dad70", "commitAfterChange": "77a25c204e0d22c334a40e10db5134e2cb525c03", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private void _measureSource(String sSourceFileName_)         throws IOException,                ParseException,                TokenMgrError", "signatureAfterChange": "\r \r     private void _measureSource( File sSourceFile_ ) throws IOException, ParseException, TokenMgrError", "diff": ["-", "-    private void _measureSource(String sSourceFileName_)", "-        throws IOException,", "-               ParseException,", "-               TokenMgrError", "-    {", "-        // take user.dir property in account", "-        sSourceFileName_ = FileUtil.normalizeFileName( sSourceFileName_ );", "-", "-        DataInputStream disSource = null;", "-", "-        // opens the file", "-        try ", "-        {", "-            disSource = new DataInputStream", "-                   (new FileInputStream(sSourceFileName_));", "-        }", "-        catch(IOException pIOException) ", "-        {", "-            if ( Util.isEmpty( _sErrorMessage ) )", "-            {", "-                _sErrorMessage = \"\";", "-            }", "-            else", "-            {", "-                _sErrorMessage += \"\\n\";", "-            }", "-            _sErrorMessage += \"File not found: \" + sSourceFileName_;", "-            _thrwError = pIOException;", "-", "-            throw pIOException;", "-        }", "-", "-        String sTempErrorMessage = _sErrorMessage;", "-        try {", "-            // the same method but with a DataInputSream", "-            _measureSource(disSource);", "-        } catch(ParseException pParseException) {", "-            if (sTempErrorMessage == null) {", "-                sTempErrorMessage = \"\";", "-            }", "-            sTempErrorMessage += \"ParseException in \" + sSourceFileName_ + ", "-                   \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";", "-            sTempErrorMessage += pParseException.getMessage() + \"\\n\";", "-            ", "-            _sErrorMessage = sTempErrorMessage;", "-            _thrwError = pParseException;", "-            ", "-            throw pParseException;", "-        } catch(TokenMgrError pTokenMgrError) {", "-            if (sTempErrorMessage == null) {", "-                sTempErrorMessage = \"\";", "-            }", "-            sTempErrorMessage += \"TokenMgrError in \" + sSourceFileName_ + ", "-                   \"\\n\" + pTokenMgrError.getMessage() + \"\\n\";", "-            _sErrorMessage = sTempErrorMessage;", "-            _thrwError = pTokenMgrError;", "-            ", "-            throw pTokenMgrError;", "-        }", "-    }", "+\r", "+    private void _measureSource( File sSourceFile_ ) throws IOException, ParseException, TokenMgrError\r", "+    {\r", "+        Reader reader = null;\r", "+\r", "+        // opens the file\r", "+        try\r", "+        {\r", "+            reader = newReader( sSourceFile_ );\r", "+        }\r", "+        catch ( IOException pIOException ) \r", "+        {\r", "+            if ( Util.isEmpty( _sErrorMessage ) )\r", "+            {\r", "+                _sErrorMessage = \"\";\r", "+            }\r", "+            else\r", "+            {\r", "+                _sErrorMessage += \"\\n\";\r", "+            }\r", "+            _sErrorMessage += \"File not found: \" + sSourceFile_.getAbsolutePath();\r", "+            _thrwError = pIOException;\r", "+\r", "+            throw pIOException;\r", "+        }\r", "+\r", "+        String sTempErrorMessage = _sErrorMessage;\r", "+        try\r", "+        {\r", "+            // the same method but with a Reader\r", "+            _measureSource( reader );\r", "+        }\r", "+        catch ( ParseException pParseException )\r", "+        {\r", "+            if ( sTempErrorMessage == null )\r", "+            {\r", "+                sTempErrorMessage = \"\";\r", "+            }\r", "+            sTempErrorMessage += \"ParseException in \" + sSourceFile_.getAbsolutePath() + \r", "+                   \"\\nLast useful checkpoint: \\\"\" + _pJavaParser.getLastFunction() + \"\\\"\\n\";\r", "+            sTempErrorMessage += pParseException.getMessage() + \"\\n\";\r", "+            \r", "+            _sErrorMessage = sTempErrorMessage;\r", "+            _thrwError = pParseException;\r", "+            \r", "+            throw pParseException;\r", "+        }\r", "+        catch ( TokenMgrError pTokenMgrError )\r", "+        {\r", "+            if ( sTempErrorMessage == null )\r", "+            {\r", "+                sTempErrorMessage = \"\";\r", "+            }\r", "+            sTempErrorMessage += \"TokenMgrError in \" + sSourceFile_.getAbsolutePath() + \r", "+                   \"\\n\" + pTokenMgrError.getMessage() + \"\\n\";\r", "+            _sErrorMessage = sTempErrorMessage;\r", "+            _thrwError = pTokenMgrError;\r", "+            \r", "+            throw pTokenMgrError;\r", "+        }\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8a2b9ee333048661db271c58424ee7b", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private void _measureSource(String sSourceFileName_)         throws IOException,                ParseException,                TokenMgrError", "signatureAfterChange": "      private void _measureSource( File sSourceFile_ ) throws IOException, ParseException, TokenMgrError", "diff": ["-    private void _measureSource(String sSourceFileName_)", "-        throws IOException,", "-               ParseException,", "-               TokenMgrError", "+    private void _measureSource( File sSourceFile_ ) throws IOException, ParseException, TokenMgrError", "-        // take user.dir property in account", "-        sSourceFileName_ = FileUtil.normalizeFileName( sSourceFileName_ );", "-", "-        DataInputStream disSource = null;", "+        Reader reader = null;", "-        try ", "+        try", "-            disSource = new DataInputStream", "-                   (new FileInputStream(sSourceFileName_));", "+            reader = newReader( sSourceFile_ );", "-        catch(IOException pIOException) ", "+        catch ( IOException pIOException ) ", "-            _sErrorMessage += \"File not found: \" + sSourceFileName_;", "+            _sErrorMessage += \"File not found: \" + sSourceFile_.getAbsolutePath();", "-        try {", "-            // the same method but with a DataInputSream", "-            _measureSource(disSource);", "-        } catch(ParseException pParseException) {", "-            if (sTempErrorMessage == null) {", "+        try", "+        {", "+            // the same method but with a Reader", "+            _measureSource( reader );", "+        }", "+        catch ( ParseException pParseException )", "+        {", "+            if ( sTempErrorMessage == null )", "+            {", "-            sTempErrorMessage += \"ParseException in \" + sSourceFileName_ + ", "+            sTempErrorMessage += \"ParseException in \" + sSourceFile_.getAbsolutePath() + ", "-        } catch(TokenMgrError pTokenMgrError) {", "-            if (sTempErrorMessage == null) {", "+        }", "+        catch ( TokenMgrError pTokenMgrError )", "+        {", "+            if ( sTempErrorMessage == null )", "+            {", "-            sTempErrorMessage += \"TokenMgrError in \" + sSourceFileName_ + ", "+            sTempErrorMessage += \"TokenMgrError in \" + sSourceFile_.getAbsolutePath() + "]}]}
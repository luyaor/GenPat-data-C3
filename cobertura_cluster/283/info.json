{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3241dc5781c5acbd0a403efbe68cb44", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b23e70d0402611b37f83a8b29649456", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/CoberturaInstrumenter.java", "commitBeforeChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "commitAfterChange": "c6fd277b28f155d1b35d06833203b627d24523c3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) throws IOException", "signatureAfterChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) throws IOException", "diff": ["-\t\t\t//new ClassInstrumenter(projectData, cw, ignoreRegexes, ignoreBranchesRegexes);", "+", "-", "-\t\t//XXX Don't like the idea, but we have to be compatible (hope to remove the line in future release)", "-\t\tlogger.debug(\"Puting in projectData to store in file: \"+cv.getClassMap().getClassName());", "+\t\t//TODO(ptab): Don't like the idea, but we have to be compatible (hope to remove the line in future release)", "+\t\tlogger.debug(\"Migrating classmap in projectData to store in *.ser file: \"+cv.getClassMap().getClassName());", "-\t\t\t *  BuildClassMapClassInstrumenter and DetectDuplicatedCodeClassVisitor don't modificate bytecode, ", "-\t\t\t *  so we can use any bytecode representation of the class", "+\t\t\t *  BuildClassMapClassInstrumenter and DetectDuplicatedCodeClassVisitor has not modificated bytecode, ", "+\t\t\t *  so we can use any bytecode representation of that class. ", "-\t\t\tClassWriter cw2= new ClassWriter(ClassWriter.COMPUTE_MAXS|ClassWriter.COMPUTE_FRAMES);", "+\t\t\tClassWriter cw2= new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c07c225fdb94374eea66572ad422e4e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/main/java/net/sourceforge/cobertura/instrument/CoberturaInstrumenter.java", "commitBeforeChange": "35acea63ae80bc6a1e7453e64f26fa350a167870", "commitAfterChange": "686ffbecc7fe730d4e67767186de755b501fcc7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) \t\t\tthrows IOException", "signatureAfterChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) \t\t\tthrows IOException", "diff": ["-\t\t\t\tignoreRegexes, cv0.getDuplicatesLinesCollector(),", "+\t\t\t\tignoreRegexes, ignoreClassAnnotations,", "+\t\t\t\tcv0.getDuplicatesLinesCollector(),", "-\t\t\t *  BuildClassMapClassInstrumenter and DetectDuplicatedCodeClassVisitor has not modificated bytecode, ", "-\t\t\t *  so we can use any bytecode representation of that class. ", "+\t\t\t *  BuildClassMapClassInstrumenter and DetectDuplicatedCodeClassVisitor has not modificated bytecode,", "+\t\t\t *  so we can use any bytecode representation of that class."]}]}
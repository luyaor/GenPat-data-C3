{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc9bfae0b3c693216e47f0e1cc7a1de6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71765a649e3a7d7fff2ac5cb28b6706a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/coveragedata/ClassDataTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void testBranch()", "signatureAfterChange": "  \tpublic void testBranch()", "diff": ["-\t\tassertFalse(a.isBranch(2));", "-\t\ta.markLineAsBranch(2);", "-\t\tassertFalse(a.isBranch(2));", "+\t\tassertFalse(a.hasBranch(2));", "+\t\ta.addLineJump(2, 0);", "+\t\tassertFalse(a.hasBranch(2));", "-\t\tassertFalse(b.isBranch(2));", "-\t\tb.markLineAsBranch(2);", "-\t\tassertTrue(b.isBranch(2));", "+\t\tassertFalse(b.hasBranch(2));", "+\t\tb.addLineJump(2, 0);", "+\t\tassertTrue(b.hasBranch(2));", "-\t\tassertFalse(b.isBranch(4));", "-\t\tb.markLineAsBranch(4);", "-\t\tassertTrue(b.isBranch(4));", "+\t\tassertTrue(b.hasBranch(2));", "+\t\tb.addLineJump(2, 1);", "+\t\tassertTrue(b.hasBranch(2));", "+", "+\t\tassertFalse(b.hasBranch(4));", "+\t\tb.addLineSwitch(4, 0, 1, 9);", "+\t\tassertTrue(b.hasBranch(4));", "-\t\tassertEquals(b.getNumberOfValidBranches(), branches.size());", "+\t\tassertEquals(14, b.getNumberOfValidBranches());", "+\t\tassertTrue(branches.contains(new Integer(2)));", "+\t\tassertTrue(branches.contains(new Integer(4)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d781ad6b8cfc412d47210017fb1c267d", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/merge/MergeTest.java", "commitBeforeChange": "bf941a7f564e654014cdeb95d087ebf521f84a51", "commitAfterChange": "f303df7bb25dcf642a0fe779a25c47eb365c1484", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \tpublic void testMergeBranches()", "signatureAfterChange": " \t \tpublic void testMergeBranches()", "diff": ["-\t\tfirstClass.markLineAsBranch(1);", "+\t\tfirstClass.addLineJump(1, 0);", "-\t\tfirstClass.markLineAsBranch(2);", "+\t\tfirstClass.addLineJump(2, 0);", "+\t\tfirstClass.addLineJump(2, 1);", "-\t\tfirstClass.markLineAsBranch(4);", "+\t\tfirstClass.addLineSwitch(4, 0, 0, 2);", "-\t\tfirstClassB.markLineAsBranch(1);", "+\t\tfirstClassB.addLineJump(1, 0);", "-\t\tfirstClassB.markLineAsBranch(3);", "+\t\tfirstClassB.addLineSwitch(3, 0, 2, 4);", "-\t\tfirstClassB.markLineAsBranch(6);", "+\t\tfirstClassB.addLineJump(6, 0);", "-\t\tassertTrue( line1.isBranch());", "+\t\tassertTrue( line1.hasBranch());", "-\t\tassertTrue( line2.isBranch());", "+\t\tassertTrue( line2.hasBranch());", "-\t\tassertTrue( line3.isBranch());", "+\t\tassertTrue( line3.hasBranch());", "-\t\tassertTrue( line4.isBranch());", "+\t\tassertTrue( line4.hasBranch());", "-\t\tassertFalse( line5.isBranch());", "+\t\tassertFalse( line5.hasBranch());", "-\t\tassertTrue( line6.isBranch());", "+\t\tassertTrue( line6.hasBranch());", "-\t\tassertFalse( line7.isBranch());", "+\t\tassertFalse( line7.hasBranch());", "-\t\tassertFalse( line8.isBranch());", "+\t\tassertFalse( line8.hasBranch());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1629b6474efcd6f2115e583c9afad9f0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22fdd21095f4fc6017c71e14f001ec5e", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/test/net/sourceforge/cobertura/ant/FunctionalTest.java", "commitBeforeChange": "d6af0a3041f4f9a0a959da2b75a0599b7dc44290", "commitAfterChange": "632cbc8d4da8684691288433fa5b2c2f99aa21c4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate static void verifyHtml(String testName) throws Exception", "signatureAfterChange": "  \tprivate static void verifyHtml(String testName) throws Exception", "diff": ["-\t\t\t\t\"frame-summary.html\", \"frame-sourcefiles.html\" };", "+\t\t\t\t\"frame-summary.html\", \"frame-sourcefiles.html\" , \"test.first.A.html\"};", "+\t\tBufferedReader reader = new BufferedReader(new FileReader(new File(htmlReportDir, \"test.first.A.html\")));", "+\t\tString line;", "+\t\tboolean foundSomeMethod = false;", "+\t\twhile ((line = reader.readLine()) != null) {", "+\t\t\tif (line.matches(\".*someMethod.*\")) {", "+\t\t\t\tfoundSomeMethod = true;", "+\t\t\t}", "+\t\t}", "+\t\tassertTrue(\"someMethod not found in test.first.A.html\", foundSomeMethod);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44955bb4dd14d437e38978c119466d4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/test/java/net/sourceforge/cobertura/bugs/GithubIssue37IT.java", "commitBeforeChange": "9d04bfaa45703be2fe57e16f8baf9f72dd689bc8", "commitAfterChange": "1214e8254fcb9ddfb1309bc32be7cabef019dae6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Test \tpublic void testVersionCorrect() throws IOException", "signatureAfterChange": " \t@Test \tpublic void testVersionCorrect() throws IOException", "diff": ["-\t\tFile loc = (File) FileUtils.listFiles(new File(\"target\"),", "-\t\t\t\tnew String[]{\"jar\"}, false).toArray()[0];", "+\t\tCollection<File> allJars = FileUtils.listFiles(new File(\"target\"),", "+\t\t\t\tnew String[]{\"jar\"}, false);", "+", "+\t\tFile loc = null;", "+", "+\t\tfor (File file : allJars) {", "+\t\t\tif (!file.getName().contains(\"sources\")", "+\t\t\t\t\t&& !file.getName().contains(\"javadoc\")) {", "+\t\t\t\tloc = file;", "+\t\t\t}", "+\t\t}", "+", "+\t\tassertNotNull(\"Could not locate the correct jar\", loc);", "+", "-\t\t\tassertNotNull(mf.getMainAttributes().getValue(", "-\t\t\t\t\t\"Implementation-Version\"));", "+\t\t\tassertNotNull(", "+\t\t\t\t\t\"Failed to find Implementation Version in the mainAttribute\",", "+\t\t\t\t\tmf.getMainAttributes().getValue(\"Implementation-Version\"));"]}]}
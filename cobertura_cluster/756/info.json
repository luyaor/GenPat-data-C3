{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9954478c3d5c61d7c8dd7e9ce8fcdb14", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f8cdc66c2dc540423fc0300187be271", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/xml/XMLReport.java", "commitBeforeChange": "f7504c0f1520232019e0ec5d7d9a44b2a102b7d9", "commitAfterChange": "b5c49534c0665dd8d1ec5c58aeda5a4c21cfd276", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void dumpClassDetails(Clazz clazz)", "signatureAfterChange": "  \tprivate void dumpLine(CoverageData coverageData, Integer lineNumberObject)", "diff": ["-\tprivate void dumpClassDetails(Clazz clazz)", "-\t\tprintln(\"<file name=\\\"\" + clazz.getLongFileName() + \"\\\"/>\");", "-\t\tprintln(\"<line rate=\\\"\" + clazz.getLineCoverageRate() + \"\\\"/>\");", "-\t\tprintln(\"<branch rate=\\\"\" + clazz.getBranchCoverageRate() + \"\\\"/>\");", "-", "-\t\tdumpMethods(clazz.getRawCoverageData());", "-", "-\t\tStringBuffer sb = new StringBuffer();", "-\t\tCoverageData instrumentation = clazz.getRawCoverageData();", "-\t\tIterator iter = instrumentation.getValidLineNumbers().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tsb.append(iter.next());", "-\t\t\tif (iter.hasNext())", "-\t\t\t{", "-\t\t\t\tsb.append(\", \");", "-\t\t\t}", "-\t\t}", "-\t\tprintln(\"<valid lines=\\\"\" + sb.toString() + \"\\\"/>\");", "-", "-\t\titer = instrumentation.getValidLineNumbers().iterator();", "-\t\twhile (iter.hasNext())", "-\t\t{", "-\t\t\tint lineNumber = ((Integer)iter.next()).intValue();", "-\t\t\tlong hitCount = instrumentation.getHitCount(lineNumber);", "-\t\t\tprintln(\"<line number=\\\"\" + lineNumber + \"\\\" hits=\\\"\" + hitCount", "-\t\t\t\t\t+ \"\\\"/>\");", "-\t\t}", "+", "+\tprivate void dumpLine(CoverageData coverageData, Integer lineNumberObject)", "+\t{", "+\t\tint lineNumber = lineNumberObject.intValue();", "+\t\tlong hitCount = coverageData.getHitCount(lineNumber);", "+\t\tboolean isBranch = coverageData.isBranch(lineNumber);", "+", "+\t\tprintln(\"<line number=\\\"\" + lineNumber + \"\\\" hits=\\\"\" + hitCount", "+\t\t\t\t+ \"\\\" branch=\\\"\" + isBranch + \"\\\"/>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e025ea37f952fde548e55995fa886795", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "73cd6cee6c47bb171b3c10fb87c9d986322605f8", "commitAfterChange": "ea44d50de680cfb1f234670ee0209ccd6aa03416", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "  \tprivate boolean addInstrumentationToArchive(CoberturaFile file, InputStream archive, \t\t\tOutputStream output) throws Exception", "diff": ["-\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "+\tprivate boolean addInstrumentationToArchive(CoberturaFile file, InputStream archive,", "+\t\t\tOutputStream output) throws Exception", "+\t{", "+\t\tZipInputStream zis = null;", "+\t\tZipOutputStream zos = null;", "+", "+\t\ttry", "+\t\t{", "+\t\t\tzis = new ZipInputStream(archive);", "+\t\t\tzos = new ZipOutputStream(output);", "+\t\t\treturn addInstrumentationToArchive(file, zis, zos);", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tzis = (ZipInputStream)IOUtil.closeInputStream(zis);", "+\t\t\tzos = (ZipOutputStream)IOUtil.closeOutputStream(zos);", "+\t\t}", "+\t}", "-\t\t\t\t// Check if we have class file", "-\t\t\t\tif (isClass(entry) && shouldInstrument(entry.getName()))"]}]}
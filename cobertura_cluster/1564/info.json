{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2681e71874d5600ecf438e47291e8247", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59d7803f5fc3eed651cde9e4d3b6afef", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t\t \t\tpublic SwitchTouchData(int classId,int lineNumber, int switchNumber, int branch)", "signatureAfterChange": " \t\t \t\tpublic void putSwitchTouchPoint(int classLine,int... counterIds)", "diff": ["-\t\tpublic SwitchTouchData(int classId,int lineNumber, int switchNumber, int branch) {", "-\t\t\tsuper(classId,lineNumber);", "-\t\t\tthis.switchNumber=switchNumber;", "-\t\t\tthis.branch=branch;", "-\t\t}", "+\t\t", "+\t\tpublic void putSwitchTouchPoint(int classLine,int... counterIds) {", "+\t\t\tupdateLine(classLine);", "+//\t\t\tSystem.out.print(\"Switch in line: \"+classLine+\":\"+Arrays.toString(counterIds)+\" {\");", "+//\t\t\tfor(int i=0; i<counterIds.length; i++){", "+//\t\t\t\tSystem.out.print(res[counterIds[i]]+\",\");", "+//\t\t\t}", "+//\t\t\tSystem.out.println(\"}\");", "+\t\t\t", "+\t\t\tLineData ld=getOrCreateLine(classLine);", "+\t\t\tint switchId=switchesInLine++;", "+\t\t\tclassData.addLineSwitch(classLine,switchId , 0, counterIds.length-2);", "+\t\t\tfor(int i=0; i<counterIds.length; i++){", "+\t\t\t\tld.touchSwitch(switchId, i-1, res[counterIds[i]]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a305eade39fe65af7c7464e29c50c7", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "7a6cf9ee7c01328fd060bf78a56186190300c13b", "commitAfterChange": "c26f5a170c752d9d1d5b884dd7eb60b982637269", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void parseArguments(String[] args)", "signatureAfterChange": "      private void parseArguments(String[] args)", "diff": ["-        FileFinder finder = new FileFinder();", "+        List filePaths = new ArrayList();", "-            if (args[i].equals(\"--basedir\"))", "-                finder.addBaseDirectory(new File(args[++i]));", "+            if (args[i].equals(\"--basedir\")) ", "+            {", "+            \tfilePaths.add( args[i]);", "+            \tfilePaths.add( args[++i]);", "+            }", "-            else", "-                finder.addSourceFilePath(args[i]);", "+            else {", "+            \tfilePaths.add( args[i]);", "+            }", "-        // Load coverage data, instrument classes, save coverage data", "+        // Load coverage data", "-        Iterator iter = finder.getFilePaths().iterator();", "-        while (iter.hasNext())", "-            addInstrumentation((String)iter.next());", "+", "+        // Instrument classes", "+        String baseDir = null;", "+\t\tlogger.debug( \"Obtained \" + filePaths.size() + \" file path entries.\");", "+        Iterator iter = filePaths.iterator();", "+        while (iter.hasNext()) {", "+        \tString act = (String) iter.next();", "+        \tif( act.equals(\"--basedir\")) {", "+       \t\t\tbaseDir = (String) iter.next();", "+        \t} else {", "+        \t\taddInstrumentation( baseDir, act);", "+        \t}", "+        }", "+        ", "+        // Save coverage data"]}]}
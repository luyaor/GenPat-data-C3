{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1dfb5d6db38d254914b319ec0a4225f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "020e27dc8386ffa97f0375884005f73a", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/CoberturaInstrumenter.java", "commitBeforeChange": "cd6bc28c213448c4f17fad67a6e8eae42d8d9463", "commitAfterChange": "6981a5ab040697261e06e872e609bd3dca7fd012", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) throws IOException", "signatureAfterChange": " \tpublic InstrumentationResult instrumentClass(InputStream inputStream) throws IOException", "diff": ["-\t\tDetectDuplicatedCodeClassVisitor cv0=new DetectDuplicatedCodeClassVisitor(cw0);", "+\t\tDetectIgnoredCodeClassVisitor detectIgnoredCv =", "+\t\t\tnew DetectIgnoredCodeClassVisitor(cw0, ignoreTrivial, ignoreMethodAnnotations);", "+\t\tDetectDuplicatedCodeClassVisitor cv0=new DetectDuplicatedCodeClassVisitor(detectIgnoredCv);", "-\t\t", "-\t\tBuildClassMapClassVisitor cv = new BuildClassMapClassVisitor(cw, ignoreRegexes,cv0.getDuplicatesLinesCollector());", "+\t\tBuildClassMapClassVisitor cv = new BuildClassMapClassVisitor(cw, ignoreRegexes,cv0.getDuplicatesLinesCollector(),", "+\t\t\t\tdetectIgnoredCv.getIgnoredMethodNamesAndSignatures());", "-\t\t\tInjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes, cv.getClassMap(),cv0.getDuplicatesLinesCollector());", "+\t\t\tInjectCodeClassInstrumenter cv2 = new InjectCodeClassInstrumenter(cw2, ignoreRegexes,", "+\t\t\t\t\tthreadsafeRigorous, cv.getClassMap(), cv0.getDuplicatesLinesCollector(), detectIgnoredCv.getIgnoredMethodNamesAndSignatures());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "704aa200e781d11987e5bc17dfc1d335", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/detdup/DetectDuplicatedCodeClassVisitor.java", "commitBeforeChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "commitAfterChange": "c6fd277b28f155d1b35d06833203b627d24523c3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic MethodVisitor visitMethod(int access, String methodName,String description,String signature, String[] exceptions)", "signatureAfterChange": " \t \t@Override \tpublic MethodVisitor visitMethod(int access, String methodName, String description,  \t\t    String signature, String[] exceptions)", "diff": ["-\t", "-\t@Override", "-\tpublic MethodVisitor visitMethod(int access, String methodName,String description,String signature, String[] exceptions) {", "-\t\tMethodVisitor nestedVisitor=super.visitMethod(access, methodName, description,signature, exceptions);", "-\t\tDetectDuplicatedCodeMethodVisitor detectDuplicatedCodeClassVisitor=new DetectDuplicatedCodeMethodVisitor(nestedVisitor,duplicatedLinesCollector,className,methodName,description,lineIdGenerator);", "-\t\treturn detectDuplicatedCodeClassVisitor;", "+\tpublic MethodVisitor visitMethod(int access, String methodName, String description, ", "+\t\t    String signature, String[] exceptions) {", "+\t\tMethodVisitor nestedVisitor=super.visitMethod(access, methodName, description, ", "+\t\t    signature, exceptions);", "+\t\treturn new DetectDuplicatedCodeMethodVisitor(nestedVisitor, ", "+\t\t    duplicatedLinesCollector, className, methodName, description, lineIdGenerator);"]}]}
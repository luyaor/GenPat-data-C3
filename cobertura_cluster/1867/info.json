{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0d93adee48f1dfcf5790af9828aed16", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634d6de1fb879e183ce050f5ac914917", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 141, "signatureBeforeChange": "\r \r   final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException", "signatureAfterChange": "    final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException", "diff": ["-\r", "-  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {\r", "-   //boolean isNestedInterface = false;\r", "-   int modifiers;\r", "-    if (jj_2_59(2)) {\r", "-      Initializer();\r", "-     if (isInterface)\r", "-        {if (true) throw new ParseException(\"An interface cannot have initializers\");}\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-      case TRANSIENT:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case IDENTIFIER:\r", "-      case AT:\r", "-      case LT:\r", "-        modifiers = Modifiers();\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case CLASS:\r", "-        case INTERFACE:\r", "-          ClassOrInterfaceDeclaration(modifiers);\r", "-          break;\r", "-        case ENUM:\r", "-          EnumDeclaration(modifiers);\r", "-          break;\r", "-        default:\r", "-          jj_la1[187] = jj_gen;\r", "-          if (jj_2_57(2147483647)) {\r", "-            ConstructorDeclaration();\r", "-          } else if (jj_2_58(2147483647)) {\r", "-            FieldDeclaration15(modifiers);\r", "-          } else {\r", "-            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-            case ABSTRACT:\r", "-            case BOOLEAN:\r", "-            case BYTE:\r", "-            case CHAR:\r", "-            case DOUBLE:\r", "-            case FINAL:\r", "-            case FLOAT:\r", "-            case INT:\r", "-            case LONG:\r", "-            case NATIVE:\r", "-            case PRIVATE:\r", "-            case PROTECTED:\r", "-            case PUBLIC:\r", "-            case SHORT:\r", "-            case STATIC:\r", "-            case TESTAAAA:\r", "-            case SYNCHRONIZED:\r", "-            case VOID:\r", "-            case IDENTIFIER:\r", "-            case AT:\r", "-            case LT:\r", "-              MethodDeclaration15(modifiers);\r", "-              break;\r", "-            default:\r", "-              jj_la1[188] = jj_gen;\r", "-              jj_consume_token(-1);\r", "-              throw new ParseException();\r", "-            }\r", "-          }\r", "-        }\r", "-        break;\r", "-      case SEMICOLON:\r", "-        jj_consume_token(SEMICOLON);\r", "-        break;\r", "-      default:\r", "-        jj_la1[189] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-  }\r", "+", "+  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {", "+   //boolean isNestedInterface = false;", "+   int modifiers;", "+    if (jj_2_58(2)) {", "+      Initializer();", "+     if (isInterface)", "+        {if (true) throw new ParseException(\"An interface cannot have initializers\");}", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case DOUBLE:", "+      case ENUM:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+      case TRANSIENT:", "+      case VOID:", "+      case VOLATILE:", "+      case IDENTIFIER:", "+      case AT:", "+      case LT:", "+        modifiers = Modifiers();", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case CLASS:", "+        case INTERFACE:", "+          ClassOrInterfaceDeclaration(modifiers);", "+          break;", "+        case ENUM:", "+          EnumDeclaration(modifiers);", "+          break;", "+        default:", "+          jj_la1[192] = jj_gen;", "+          if (jj_2_56(2147483647)) {", "+            ConstructorDeclaration();", "+          } else if (jj_2_57(2147483647)) {", "+            FieldDeclaration15(modifiers);", "+          } else {", "+            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+            case ABSTRACT:", "+            case BOOLEAN:", "+            case BYTE:", "+            case CHAR:", "+            case DOUBLE:", "+            case FINAL:", "+            case FLOAT:", "+            case INT:", "+            case LONG:", "+            case NATIVE:", "+            case PRIVATE:", "+            case PROTECTED:", "+            case PUBLIC:", "+            case SHORT:", "+            case STATIC:", "+            case TESTAAAA:", "+            case SYNCHRONIZED:", "+            case VOID:", "+            case IDENTIFIER:", "+            case AT:", "+            case LT:", "+              MethodDeclaration15(modifiers);", "+              break;", "+            default:", "+              jj_la1[193] = jj_gen;", "+              jj_consume_token(-1);", "+              throw new ParseException();", "+            }", "+          }", "+        }", "+        break;", "+      case SEMICOLON:", "+        jj_consume_token(SEMICOLON);", "+        break;", "+      default:", "+        jj_la1[194] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1f7c9d984c794aed352cd610c717bf4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 141, "signatureBeforeChange": "\r \r   final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException", "signatureAfterChange": "    final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException", "diff": ["-\r", "-  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {\r", "-   //boolean isNestedInterface = false;\r", "-   int modifiers;\r", "-    if (jj_2_59(2)) {\r", "-      Initializer();\r", "-     if (isInterface)\r", "-        {if (true) throw new ParseException(\"An interface cannot have initializers\");}\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case ABSTRACT:\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case CLASS:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FINAL:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case INTERFACE:\r", "-      case LONG:\r", "-      case NATIVE:\r", "-      case PRIVATE:\r", "-      case PROTECTED:\r", "-      case PUBLIC:\r", "-      case SHORT:\r", "-      case STATIC:\r", "-      case TESTAAAA:\r", "-      case SYNCHRONIZED:\r", "-      case TRANSIENT:\r", "-      case VOID:\r", "-      case VOLATILE:\r", "-      case IDENTIFIER:\r", "-      case AT:\r", "-      case LT:\r", "-        modifiers = Modifiers();\r", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-        case CLASS:\r", "-        case INTERFACE:\r", "-          ClassOrInterfaceDeclaration(modifiers);\r", "-          break;\r", "-        case ENUM:\r", "-          EnumDeclaration(modifiers);\r", "-          break;\r", "-        default:\r", "-          jj_la1[187] = jj_gen;\r", "-          if (jj_2_57(2147483647)) {\r", "-            ConstructorDeclaration();\r", "-          } else if (jj_2_58(2147483647)) {\r", "-            FieldDeclaration15(modifiers);\r", "-          } else {\r", "-            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-            case ABSTRACT:\r", "-            case BOOLEAN:\r", "-            case BYTE:\r", "-            case CHAR:\r", "-            case DOUBLE:\r", "-            case FINAL:\r", "-            case FLOAT:\r", "-            case INT:\r", "-            case LONG:\r", "-            case NATIVE:\r", "-            case PRIVATE:\r", "-            case PROTECTED:\r", "-            case PUBLIC:\r", "-            case SHORT:\r", "-            case STATIC:\r", "-            case TESTAAAA:\r", "-            case SYNCHRONIZED:\r", "-            case VOID:\r", "-            case IDENTIFIER:\r", "-            case AT:\r", "-            case LT:\r", "-              MethodDeclaration15(modifiers);\r", "-              break;\r", "-            default:\r", "-              jj_la1[188] = jj_gen;\r", "-              jj_consume_token(-1);\r", "-              throw new ParseException();\r", "-            }\r", "-          }\r", "-        }\r", "-        break;\r", "-      case SEMICOLON:\r", "-        jj_consume_token(SEMICOLON);\r", "-        break;\r", "-      default:\r", "-        jj_la1[189] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-  }\r", "+", "+  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {", "+   //boolean isNestedInterface = false;", "+   int modifiers;", "+    if (jj_2_58(2)) {", "+      Initializer();", "+     if (isInterface)", "+        {if (true) throw new ParseException(\"An interface cannot have initializers\");}", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ABSTRACT:", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case CLASS:", "+      case DOUBLE:", "+      case ENUM:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case INTERFACE:", "+      case LONG:", "+      case NATIVE:", "+      case PRIVATE:", "+      case PROTECTED:", "+      case PUBLIC:", "+      case SHORT:", "+      case STATIC:", "+      case TESTAAAA:", "+      case SYNCHRONIZED:", "+      case TRANSIENT:", "+      case VOID:", "+      case VOLATILE:", "+      case IDENTIFIER:", "+      case AT:", "+      case LT:", "+        modifiers = Modifiers();", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case CLASS:", "+        case INTERFACE:", "+          ClassOrInterfaceDeclaration(modifiers);", "+          break;", "+        case ENUM:", "+          EnumDeclaration(modifiers);", "+          break;", "+        default:", "+          jj_la1[192] = jj_gen;", "+          if (jj_2_56(2147483647)) {", "+            ConstructorDeclaration();", "+          } else if (jj_2_57(2147483647)) {", "+            FieldDeclaration15(modifiers);", "+          } else {", "+            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+            case ABSTRACT:", "+            case BOOLEAN:", "+            case BYTE:", "+            case CHAR:", "+            case DOUBLE:", "+            case FINAL:", "+            case FLOAT:", "+            case INT:", "+            case LONG:", "+            case NATIVE:", "+            case PRIVATE:", "+            case PROTECTED:", "+            case PUBLIC:", "+            case SHORT:", "+            case STATIC:", "+            case TESTAAAA:", "+            case SYNCHRONIZED:", "+            case VOID:", "+            case IDENTIFIER:", "+            case AT:", "+            case LT:", "+              MethodDeclaration15(modifiers);", "+              break;", "+            default:", "+              jj_la1[193] = jj_gen;", "+              jj_consume_token(-1);", "+              throw new ParseException();", "+            }", "+          }", "+        }", "+        break;", "+      case SEMICOLON:", "+        jj_consume_token(SEMICOLON);", "+        break;", "+      default:", "+        jj_la1[194] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+  }"]}]}
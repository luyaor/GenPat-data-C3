{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d02db739bee4ab9f9243a05b453e09a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18dfad666b3c4e6269cc0cb6815744da", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SwitchData.java", "commitBeforeChange": "8ea55afb103f49353a2e9875f78db3c0202d4a87", "commitAfterChange": "9ccc6bc0443cb6df4d5f870a59c4a26b900db956", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic double getBranchCoverageRate()", "signatureAfterChange": "  \tpublic double getBranchCoverageRate()", "diff": ["-\tpublic double getBranchCoverageRate()", "-\t{", "-\t\tlock.lock();", "-\t\ttry", "-\t\t{", "-\t\t\tint branches = hits.length + 1;", "-\t\t\tint hit = (defaultHits > 0) ? 1 : 0;", "-\t\t\tfor (int i = hits.length - 1; i >= 0; hit += ((hits[i--] > 0) ? 1 : 0));", "-\t\t\treturn ((double) hit) / branches;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tlock.unlock();", "-\t\t}", "+\tpublic double getBranchCoverageRate() {", "+\t\tint branches = getNumberOfValidBranches();", "+\t\tint hit = (defaultHits > 0) ? 1 : 0;", "+\t\tfor (int i = hits.length - 1; i >= 0; hit += ((hits[i--] > 0) ? 1 : 0));", "+\t\treturn ((double) hit) / branches;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c20f233bafd955932706c65194133aa", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/SwitchData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic double getBranchCoverageRate()", "signatureAfterChange": "  \tpublic double getBranchCoverageRate()", "diff": ["-\t\tint branches = hits.length + 1;", "-\t\tint hit = (defaultHits > 0) ? 1 : 0;", "-\t\tfor (int i = hits.length - 1; i >= 0; hit += ((hits[i--] > 0) ? 1 : 0));", "-\t\treturn ((double) hit) / branches;", "+\t\tlock.lock();", "+\t\ttry", "+\t\t{", "+\t\t\tint branches = hits.length + 1;", "+\t\t\tint hit = (defaultHits > 0) ? 1 : 0;", "+\t\t\tfor (int i = hits.length - 1; i >= 0; hit += ((hits[i--] > 0) ? 1 : 0));", "+\t\t\treturn ((double) hit) / branches;", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t}"]}]}
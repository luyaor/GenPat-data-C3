{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf3d20f51c2e4e9221c2cd69ab11cf79", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d3e160a8fda54353104764fd6161ad", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "1ee130d23185750a6f545220e4718734f717f945", "commitAfterChange": "e554a91dcb997ac716f6bbc702c152a7fa5040ca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateSourceFileList(PackageData packageData) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate void generateSourceFileList(PackageData packageData) \t\t\tthrows IOException", "diff": ["-\t\tSortedMap sortedSourceFiles = new TreeMap();", "-\t\tfor (Iterator iter = sourceFiles.iterator(); iter.hasNext();)", "-\t\t{", "-\t\t\tSourceFileData sourceFileData = (SourceFileData)iter.next();", "-\t\t\tsortedSourceFiles.put(sourceFileData.getBaseName(),", "-\t\t\t\t\tsourceFileData);", "-\t\t}", "+\t\tVector sortedSourceFiles = new Vector();", "+\t\tsortedSourceFiles.addAll(sourceFiles);", "+\t\tCollections.sort(sortedSourceFiles,", "+\t\t\t\tnew SourceFileDataBaseNameComparator());", "-\t\t\tfor (Iterator iter = sortedSourceFiles.values().iterator(); iter", "+\t\t\tfor (Iterator iter = sortedSourceFiles.iterator(); iter"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd5f07bc89dd6c150d5c20f2f0bc150f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "0c4c989beaaa7dcd1e0ebf1b93967c436c5e76e9", "commitAfterChange": "1e2c9cddc06be7e4629e00cee41846cbb63566ef", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void generateSourceFileList(PackageData packageData) \t\t\tthrows IOException", "signatureAfterChange": "  \tprivate void generateSourceFileList(PackageData packageData) \t\t\tthrows IOException", "diff": ["+", "+\t\t// sourceFiles is sorted, but it's sorted by the full path", "+\t\t// to the file, and we only want to sort based on the", "+\t\t// file's basename.", "+\t\tSortedMap sortedSourceFiles = new TreeMap();", "+\t\tfor (Iterator iter = sourceFiles.iterator(); iter.hasNext();)", "+\t\t{", "+\t\t\tSourceFileData sourceFileData = (SourceFileData)iter.next();", "+\t\t\tsortedSourceFiles.put(sourceFileData.getBaseName(), sourceFileData);", "+\t\t}", "+", "-", "-\t\t\tfor (Iterator iter = sourceFiles.iterator(); iter.hasNext();)", "+\t\t\tfor (Iterator iter = sortedSourceFiles.values().iterator(); iter.hasNext();)"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0433dd27bbbd6155a519d184271e6d1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8affba402e50832d0c3d011969ae66f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/TouchCollector.java", "commitBeforeChange": "39aff69c052bed11ddf0e72014f573a749d7b423", "commitAfterChange": "d2a99fd01a0928b8540b82a22d6a1f3dfabcc94a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 1, "signatureBeforeChange": "\t \t \t \tpublic static synchronized void applyTouchesOnProjectData(ProjectData projectData)", "signatureAfterChange": "  \tpublic static synchronized void applyTouchesOnProjectData( \t\t\tProjectData projectData)", "diff": ["+", "+\tpublic static synchronized void applyTouchesOnProjectData(", "+\t\t\tProjectData projectData) {", "+\t\tSystem.out", "+\t\t\t\t.println(\"=================== START OF RAPORT ======================== \");", "+\t\tfor (Class<?> c : registeredClasses.keySet()) {", "+\t\t\tSystem.out.println(\"Report: \"+c.getName());", "+\t\t\tClassData cd=projectData.getOrCreateClassData(c.getName());", "+\t\t\tapplyTouchesToSingleClassOnProjectData(cd, c);", "+\t\tSystem.out", "+\t\t\t\t.println(\"===================  END OF RAPORT  ======================== \");", "+\t\t// System.out.println(\"Flushing results...\");", "+\t\t// Map<LineTouchData,Integer>", "+\t\t// touches=touchedLines.getFinalStateAndCleanIt();", "+\t\t// for(Entry<LineTouchData, Integer> touch:touches.entrySet()){", "+\t\t// if(touch.getValue()>0){", "+\t\t// getClassFor(touch.getKey(),projectData).touch(touch.getKey().lineNumber,touch.getValue());", "+\t\t// }", "+\t\t// }", "+\t\t//\t\t", "+\t\t// Map<SwitchTouchData,Integer>", "+\t\t// switchTouches=switchTouchData.getFinalStateAndCleanIt();", "+\t\t// for(Entry<SwitchTouchData, Integer> touch:switchTouches.entrySet()){", "+\t\t// if(touch.getValue()>0){", "+\t\t// getClassFor(touch.getKey(),projectData).touchSwitch(", "+\t\t// touch.getKey().lineNumber,", "+\t\t// touch.getKey().switchNumber,", "+\t\t// touch.getKey().branch,touch.getValue());", "+\t\t// }", "+\t\t// }", "+\t\t//\t\t", "+\t\t// Map<JumpTouchData,Integer>", "+\t\t// jumpTouches=jumpTouchData.getFinalStateAndCleanIt();", "+\t\t// for(Entry<JumpTouchData, Integer> touch:jumpTouches.entrySet()){", "+\t\t// if(touch.getValue()>0){", "+\t\t// getClassFor(touch.getKey(),projectData).touchJump(", "+\t\t// touch.getKey().lineNumber,", "+\t\t// touch.getKey().branchNumber,", "+\t\t// touch.getKey().branch,touch.getValue());", "+\t\t// }", "+\t\t// }", "+\t\t// System.out.println(\"Flushing results done\");", "+\t\t// }", "+", "+\t\t// private static ClassData getClassFor(LineTouchData key,ProjectData", "+\t\t// projectData) {", "+\t\t// System.out.println(\"\\nLooking for:\"+key.classId+\"\\n\");", "+\t\t// return", "+\t\t// projectData.getOrCreateClassData(classId2class.get(key.classId));", "+\t}", "-\t", "-\tpublic static synchronized void applyTouchesOnProjectData(ProjectData projectData){", "-\t\tSystem.out.println(\"Flushing results...\");", "-\t\tMap<LineTouchData,Integer> touches=touchedLines.getFinalStateAndCleanIt();", "-\t\tfor(Entry<LineTouchData, Integer> touch:touches.entrySet()){", "-\t\t\tif(touch.getValue()>0){\t\t\t\t", "-\t\t\t\tgetClassFor(touch.getKey(),projectData).touch(touch.getKey().lineNumber,touch.getValue());", "-\t\tMap<SwitchTouchData,Integer> switchTouches=switchTouchData.getFinalStateAndCleanIt();", "-\t\tfor(Entry<SwitchTouchData, Integer> touch:switchTouches.entrySet()){", "-\t\t\tif(touch.getValue()>0){", "-\t\t\t\tgetClassFor(touch.getKey(),projectData).touchSwitch(", "-\t\t\t\t\t\ttouch.getKey().lineNumber,", "-\t\t\t\t\t\ttouch.getKey().switchNumber,", "-\t\t\t\t\t\ttouch.getKey().branch,touch.getValue());", "-\t\tMap<JumpTouchData,Integer> jumpTouches=jumpTouchData.getFinalStateAndCleanIt();", "-\t\tfor(Entry<JumpTouchData, Integer> touch:jumpTouches.entrySet()){", "-\t\t\tif(touch.getValue()>0){", "-\t\t\t\tgetClassFor(touch.getKey(),projectData).touchJump(", "-\t\t\t\t\t\ttouch.getKey().lineNumber,", "-\t\t\t\t\t\ttouch.getKey().branchNumber,", "-\t\t\t\t\t\ttouch.getKey().branch,touch.getValue());", "-\t\t\t}", "-\t\tSystem.out.println(\"Flushing results done\");", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e901a7949fd3c5d2471b4307a6cdf476", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "9ac55d5dd9da7acba5767458e0419a845f53dcb6", "commitAfterChange": "ec2f1cc4f2aad1148c57a4054f837fd08fb09811", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Javancss(String[] asArgs_, String sRcsHeader_)", "signatureAfterChange": "     public Javancss(String[] asArgs_, String sRcsHeader_) throws IOException", "diff": ["-    public Javancss(String[] asArgs_, String sRcsHeader_) {", "+    public Javancss(String[] asArgs_, String sRcsHeader_) throws IOException {", "-        Hashtable htOptions = _pInit.getOptions();", "+        Map htOptions = _pInit.getOptions();", "+", "+        setEncoding( (String) htOptions.get( \"encoding\" ) );", "-            pTest.setTestDir( FileUtil.concatPath( _pInit.getApplicationPath()", "-                                                   , \"test\" )                 );", "+            pTest.setTestDir( new File( _pInit.getApplicationPath(), \"test\" ) );", "-        _vJavaSourceFiles = _pInit.getArguments();", "-", "-        if ( Util.isDebug() )", "-        {", "-            Util.debug( \"_vJavaSourceFiles: \" + Util.toString( _vJavaSourceFiles ) );", "-        }", "-        if ( htOptions.get( \"recursive\" ) != null )", "-        {", "-            // If no files then add current directory!", "-            if ( _vJavaSourceFiles.size() == 0 )", "-            {", "-                _vJavaSourceFiles.addElement( \".\" );", "-            }", "-           ", "-            Vector newFiles = new Vector();", "-            Enumeration iter = _vJavaSourceFiles.elements();", "-            while( iter.hasMoreElements() ) ", "-            {", "-                String fileName = FileUtil.normalizeFileName( (String)iter.nextElement() );", "-                File   file = new File( fileName );", "-                if( file.isDirectory() ) ", "-                {", "-                    _addJavaFiles( file, newFiles );", "-                }", "-            }", "-            if( newFiles.size() != 0 )", "-            {", "-                for( int i = 0; i < newFiles.size(); i++ )", "-                {", "-                    _vJavaSourceFiles.add( newFiles.elementAt( i ) );", "-                }", "-            }", "-           ", "-            _removeDirs( _vJavaSourceFiles );", "-        }", "-", "-        if ( Util.isDebug() )", "-        {", "-            Util.debug( \"_vJavaSourceFiles: \" + Util.toString( _vJavaSourceFiles ) );", "-        }", "+        _vJavaSourceFiles = findFiles( _pInit.getArguments(), htOptions.get( \"recursive\" ) != null );", "-                _measureRoot(System.in);", "+                _measureRoot(newReader(System.in));", "-            _measureRoot( System.in );", "+            _measureRoot( newReader( System.in ) );", "-        PrintStream ps = System.out;", "+        OutputStream out = System.out;", "-                ps = new PrintStream( new BufferedOutputStream( new FileOutputStream( FileUtil.normalizeFileName( sOutputFile ) ) ) );", "+                out = new FileOutputStream( FileUtil.normalizeFileName( sOutputFile ) );", "-                ps = System.out;", "+                out = System.out;", "+        // TODO: encoding configuration support for result output", "+        PrintWriter pw = useXML() ? new PrintWriter(new OutputStreamWriter(out, \"UTF-8\")) : new PrintWriter(out);", "-            ps.print( XmlFormatter.printStart() );", "+            pw.print( XmlFormatter.printStart() );", "-            ps.print( printPackageNcss() );", "+            pw.print( printPackageNcss() );", "-                ps.println();", "+                pw.println();", "-            ps.print( printObjectNcss() );", "+            pw.print( printObjectNcss() );", "-                ps.println();", "+                pw.println();", "-            ps.print( printFunctionNcss() );", "+            pw.print( printFunctionNcss() );", "-            ps.print( printJavaNcss() );", "+            pw.print( printJavaNcss() );", "-                ps.print( printJavaNcss() );", "+                pw.print( printJavaNcss() );", "-            ps.println( \"</javancss>\" );", "+            pw.println( \"</javancss>\" );", "-            ps.close();", "+            pw.close();", "-            // standard out is used", "-            //ps.flush();", "+            // stdout is used: don't close but ensure everything is flushed", "+            pw.flush();", "-        ps = null;", "+        pw = null;"]}]}
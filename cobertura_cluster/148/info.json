{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cea9d9af954fbe66f3c0b45c4f454d3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511a854f5c05425cf4896eff4a1ded70", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/Javancss.java", "commitBeforeChange": "48f95094d36dfc0a50d7cb3328f1fa90adefb8bb", "commitAfterChange": "f9e2e0b895d2f39d8af57ae695af8dfce323a3f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r     private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError", "signatureAfterChange": "\r \r     private void _measureSource( Reader reader ) throws IOException, Exception, Error", "diff": ["-    private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError\r", "+    private void _measureSource( Reader reader ) throws IOException, Exception, Error\r", "-        try\r", "+      Util.debug( \"_measureSource(Reader).ENTER\" );\r", "+      //Util.debug( \"_measureSource(Reader).parser15: -->\" + (_pInit.getOptions().get( \"parser15\" ) + \"<--\" );\r", "+      //Util.panicIf( _pInit == null );\r", "+      //Util.panicIf( _pInit.getOptions() == null );\r", "+      Util.debug( \"_measureSource(Reader).ENTER2\" );\r", "+      try\r", "+      {\r", "+        // create a parser object\r", "+        if ( Util.isDebug() == false )\r", "-            // create a parser object\r", "-            _pJavaParser = new JavaParser( reader );\r", "+          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {\r", "+            Util.debug( \"creating JavaParser\" );\r", "+            _pJavaParser = (JavaParserInterface)(new JavaParser( reader ));\r", "+          } else {\r", "+            Util.debug( \"creating JavaParser15\" );\r", "+            _pJavaParser = (JavaParserInterface)(new JavaParser15( reader ));\r", "+          }\r", "+        } else {\r", "+          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {\r", "+            Util.debug( \"creating JavaParserDebug\" );\r", "+            Util.println( \"creating JavaParserDebug\" );\r", "+            _pJavaParser = (JavaParserInterface)(new JavaParserDebug( reader ));\r", "+          } else {\r", "+            Util.debug( \"creating JavaParser15Debug\" );\r", "+            _pJavaParser = (JavaParserInterface)(new JavaParser15Debug( reader ));\r", "+          }\r", "+        }\r", "-            _pJavaParser.CompilationUnit();\r", "+            _pJavaParser.parse();\r", "-        catch ( ParseException pParseException )\r", "+        catch ( Exception pParseException )\r", "-        catch ( TokenMgrError pTokenMgrError )\r", "+        catch ( Error pTokenMgrError )\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5340513a47fe1a04775a12bcced4cd51", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/javancss/src/main/java/javancss/Javancss.java", "commitBeforeChange": "3489fc64f77051fec04401707443567af8c7b241", "commitAfterChange": "95acfde59f275b7fe8a39e024610fda3eb966187", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError", "signatureAfterChange": "      private void _measureSource( Reader reader ) throws IOException, Exception, Error", "diff": ["-    private void _measureSource( Reader reader ) throws IOException, ParseException, TokenMgrError", "+    private void _measureSource( Reader reader ) throws IOException, Exception, Error", "-        try", "+      Util.debug( \"_measureSource(Reader).ENTER\" );", "+      //Util.debug( \"_measureSource(Reader).parser15: -->\" + (_pInit.getOptions().get( \"parser15\" ) + \"<--\" );", "+      //Util.panicIf( _pInit == null );", "+      //Util.panicIf( _pInit.getOptions() == null );", "+      Util.debug( \"_measureSource(Reader).ENTER2\" );", "+      try", "+      {", "+        // create a parser object", "+        if ( Util.isDebug() == false )", "-            // create a parser object", "-            _pJavaParser = new JavaParser( reader );", "+          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {", "+            Util.debug( \"creating JavaParser\" );", "+            _pJavaParser = (JavaParserInterface)(new JavaParser( reader ));", "+          } else {", "+            Util.debug( \"creating JavaParser15\" );", "+            _pJavaParser = (JavaParserInterface)(new JavaParser15( reader ));", "+          }", "+        } else {", "+          if ( _pInit == null || _pInit.getOptions() == null || _pInit.getOptions().get( \"parser15\" ) == null ) {", "+            Util.debug( \"creating JavaParserDebug\" );", "+            Util.println( \"creating JavaParserDebug\" );", "+            _pJavaParser = (JavaParserInterface)(new JavaParserDebug( reader ));", "+          } else {", "+            Util.debug( \"creating JavaParser15Debug\" );", "+            _pJavaParser = (JavaParserInterface)(new JavaParser15Debug( reader ));", "+          }", "+        }", "-            _pJavaParser.CompilationUnit();", "+            _pJavaParser.parse();", "-        catch ( ParseException pParseException )", "+        catch ( Exception pParseException )", "-        catch ( TokenMgrError pTokenMgrError )", "+        catch ( Error pTokenMgrError )"]}]}
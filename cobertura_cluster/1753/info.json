{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84027a8d8b3e37f9af80ec59c0cd96a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e613bf690332bff9470fe85cf4a0dd", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/reporting/html/HTMLReport.java", "commitBeforeChange": "86ba74eba09df9fe91a0017286c58eeca8115e4e", "commitAfterChange": "cb1489d04bf4db3975fea51af595b5c831d4de75", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \tprivate static String generatePercentResult(double percentValue)", "signatureAfterChange": " \tprivate static String generatePercentResult(int dividend, int divisor)", "diff": ["-\tprivate static String generatePercentResult(double percentValue)", "-\t\tdouble rest = 1d - percentValue;", "+\t */", "+\tprivate static String generatePercentResult(int dividend, int divisor)", "+\t{", "-\t\tsb.append(\"<table cellpadding=\\\"0\\\" cellspacing=\\\"0\\\" \"", "-\t\t\t\t+ \"align=\\\"right\\\">\");", "-\t\tsb.append(\"<tr>\");", "-\t\tsb.append(\"<td>\" + getPercentValue(percentValue) + \"&nbsp;</td>\");", "-\t\tsb.append(\"<td>\");", "-\t\tsb.append(\"<table class=\\\"percentGraph\\\" cellpadding=\\\"0\\\" \"", "-\t\t\t\t+ \"cellspacing=\\\"0\\\" width=\\\"100\\\">\");", "-\t\tsb.append(\"<tr>\");", "-\t\tsb.append(\"<td class=\\\"covered\\\" width=\\\"\" + (int)(percentValue * 100)", "-\t\t\t\t+ \"\\\"></td>\");", "-\t\tsb.append(\"<td class=\\\"uncovered\\\" width=\\\"\" + (int)(rest * 100)", "-\t\t\t\t+ \"\\\"></td>\");", "-\t\tsb.append(\"</tr>\");", "-\t\tsb.append(\"</table>\");", "-\t\tsb.append(\"</td>\");", "-\t\tsb.append(\"</tr>\");", "-\t\tsb.append(\"</table>\");", "+", "+\t\tsb.append(\"<table cellpadding=\\\"0px\\\" cellspacing=\\\"0px\\\" class=\\\"percentgraph\\\"><tr class=\\\"percentgraph\\\"><td align=\\\"right\\\" class=\\\"percentgraph\\\" width=\\\"40\\\">\");", "+\t\tif (divisor > 0)", "+\t\t\tsb.append(getPercentValue((double)dividend / divisor));", "+\t\telse", "+\t\t\tsb.append(generateHelpURL(", "+\t\t\t\t\t\"N/A\",", "+\t\t\t\t\t\"Line coverage and branch coverage will appear as \\\"Not Applicable\\\" when Cobertura can not find line number information in the .class file.  This happens for stub and skeleton classes, interfaces, or when the class was not compiled with \\\"debug=true.\\\"\"));", "+\t\tsb.append(\"</td><td class=\\\"percentgraph\\\"><div class=\\\"percentgraph\\\">\");", "+\t\tif (divisor > 0)", "+\t\t{", "+\t\t\tsb.append(\"<div class=\\\"greenbar\\\" style=\\\"width:\"", "+\t\t\t\t\t+ (dividend * 100 / divisor) + \"px\\\">\");", "+\t\t\tsb.append(\"<span class=\\\"text\\\">\");", "+\t\t\tsb.append(dividend);", "+\t\t\tsb.append(\"/\");", "+\t\t\tsb.append(divisor);", "+\t\t}", "+\t\telse", "+\t\t{", "+\t\t\tsb.append(\"<div class=\\\"na\\\" style=\\\"width:100px\\\">\");", "+\t\t\tsb.append(\"<span class=\\\"text\\\">\");", "+\t\t\tsb.append(generateHelpURL(", "+\t\t\t\t\t\"N/A\",", "+\t\t\t\t\t\"Line coverage and branch coverage will appear as \\\"Not Applicable\\\" when Cobertura can not find line number information in the .class file.  This happens for stub and skeleton classes, interfaces, or when the class was not compiled with \\\"debug=true.\\\"\"));", "+\t\t}", "+\t\tsb.append(\"</span></div></div></td></tr></table>\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c6f2aea596a20b57386cfa3840edf1", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/check/Main.java", "commitBeforeChange": "47a36b11251526c5e9936089f03282ea0c599dba", "commitAfterChange": "fa6590b4914422a1fe749c75560371053ab58bee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Main(String[] args) throws IOException", "signatureAfterChange": "  \tpublic Main(String[] args)", "diff": ["-\tpublic Main(String[] args) throws IOException", "+\tpublic Main(String[] args)", "-\t\tmerge(loadInstrumentation(new FileInputStream(new File(", "-\t\t\t\tinstrumentationDirectory,", "-\t\t\t\tInstrumentationPersistence.FILE_NAME))));", "+\t\tFile dataFile = new File(instrumentationDirectory,", "+\t\t\t\tCoverageDataFileHandler.FILE_NAME);", "+\t\tProjectData projectData = CoverageDataFileHandler", "+\t\t\t\t.loadCoverageData(dataFile);", "-\t\t\tlogger", "-\t\t\t\t\t.info(\"instrumentation has \" + keySet().size()", "-\t\t\t\t\t\t\t+ \" entries\");", "+\t\t\tlogger.info(\"instrumentation has \"", "+\t\t\t\t\t+ projectData.getNumberOfClasses() + \" classes\");", "-\t\tIterator i = keySet().iterator();", "-\t\twhile (i.hasNext())", "+\t\tIterator iter = projectData.getClasses().iterator();", "+\t\twhile (iter.hasNext())", "-\t\t\tString key = (String)i.next();", "-", "-\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(key);", "-\t\t\tCoverageData instrumentation = getInstrumentation(key);", "+\t\t\tClassData classData = (ClassData)iter.next();", "+\t\t\tCoverageRate coverageRate = findMinimumCoverageRate(classData", "+\t\t\t\t\t.getName());", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(percentage(instrumentation.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb.append(percentage(coverageRate.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\t\tsb", "-\t\t\t\t\t\t.append(percentage(instrumentation", "-\t\t\t\t\t\t\t\t.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\t\tsb.append(percentage(coverageRate.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));", "-\t\t\tif (instrumentation.getLineCoverageRate() < coverageRate", "+\t\t\tif (classData.getLineCoverageRate() < coverageRate", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb.append(percentage(instrumentation.getLineCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getLineCoverageRate()));", "-\t\t\tif (instrumentation.getBranchCoverageRate() < coverageRate", "+\t\t\tif (classData.getBranchCoverageRate() < coverageRate", "-\t\t\t\tsb.append(key);", "+\t\t\t\tsb.append(classData.getName());", "-\t\t\t\tsb", "-\t\t\t\t\t\t.append(percentage(instrumentation", "-\t\t\t\t\t\t\t\t.getBranchCoverageRate()));", "+\t\t\t\tsb.append(percentage(classData.getBranchCoverageRate()));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "869c3a0fddef0f7bb49b53472975f101", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e159902b250c3b99fed37e69abd77f", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/CoverageDataContainer.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": " \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tIterator iter = container.children.keySet().iterator();", "-\t\twhile (iter.hasNext())", "+\t\tgetBothLocks(container);", "+\t\ttry", "-\t\t\tObject key = iter.next();", "-\t\t\tCoverageData newChild = (CoverageData)container.children.get(key);", "-\t\t\tCoverageData existingChild = (CoverageData)this.children.get(key);", "-\t\t\tif (existingChild != null)", "+\t\t\tIterator iter = container.children.keySet().iterator();", "+\t\t\twhile (iter.hasNext())", "-\t\t\t\texistingChild.merge(newChild);", "+\t\t\t\tObject key = iter.next();", "+\t\t\t\tCoverageData newChild = (CoverageData)container.children.get(key);", "+\t\t\t\tCoverageData existingChild = (CoverageData)this.children.get(key);", "+\t\t\t\tif (existingChild != null)", "+\t\t\t\t{", "+\t\t\t\t\texistingChild.merge(newChild);", "+\t\t\t\t}", "+\t\t\t\telse", "+\t\t\t\t{", "+\t\t\t\t\t// TODO: Shouldn't we be cloning newChild here?  I think so that", "+\t\t\t\t\t//       would be better... but we would need to override the", "+\t\t\t\t\t//       clone() method all over the place?", "+\t\t\t\t\tthis.children.put(key, newChild);", "+\t\t\t\t}", "-\t\t\telse", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tcontainer.lock.unlock();", "+\t\t}", "+\t}", "-\t\t\t\t// TODO: Shouldn't we be cloning newChild here?  I think so that", "-\t\t\t\t//       would be better... but we would need to override the", "-\t\t\t\t//       clone() method all over the place?", "-\t\t\t\tthis.children.put(key, newChild);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e074cdc5c7744b55e76c1de63b1cf4", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/coveragedata/ProjectData.java", "commitBeforeChange": "9d9559bc35e31469dc0037197bbb87c9c61ff122", "commitAfterChange": "3c60402fd58f26a40620843b35fedf083357e308", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic void merge(CoverageData coverageData)", "signatureAfterChange": "  \tpublic void merge(CoverageData coverageData)", "diff": ["-\t\tsuper.merge(coverageData);", "-", "-\t\tfor (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();)", "+\t\tgetBothLocks(projectData);", "+\t\ttry", "-\t\t\tObject key = iter.next();", "-\t\t\tif (!this.classes.containsKey(key))", "+\t\t\tsuper.merge(coverageData);", "+\t", "+\t\t\tfor (Iterator iter = projectData.classes.keySet().iterator(); iter.hasNext();)", "-\t\t\t\tthis.classes.put(key, projectData.classes.get(key));", "+\t\t\t\tObject key = iter.next();", "+\t\t\t\tif (!this.classes.containsKey(key))", "+\t\t\t\t{", "+\t\t\t\t\tthis.classes.put(key, projectData.classes.get(key));", "+\t\t\t\t}", "+\t\t}", "+\t\tfinally", "+\t\t{", "+\t\t\tlock.unlock();", "+\t\t\tprojectData.lock.unlock();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "036a5f9d40c3d57dc3e28cad7d2d4e4f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba763d0b79c73a5554950a960dae1d9", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "ccff278429de7c4e879c9d109cf4708952d56d28", "commitAfterChange": "d2ad7dd1017c159829b307d2a1c8b739eed01416", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "\r   final public void Statement() throws ParseException", "signatureAfterChange": "   final public void Statement() throws ParseException", "diff": ["- */\r", "-  final public void Statement() throws ParseException {\r", "-        _bReturn = false;\r", "-    if (jj_2_43(2)) {\r", "-      LabeledStatement();\r", "-    } else if (jj_2_44(2147483647)) {\r", "-      AssertStatement();\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case LBRACE:\r", "-        Block();\r", "-        break;\r", "-      case SEMICOLON:\r", "-        EmptyStatement();\r", "-        break;\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case LONG:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case SHORT:\r", "-      case SUPER:\r", "-      case THIS:\r", "-      case TRUE:\r", "-      case VOID:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case INCR:\r", "-      case DECR:\r", "-        StatementExpression();\r", "-        jj_consume_token(SEMICOLON);\r", "-          _ncss++;       Util.debug( \"_ncss++\" );\r", "-        break;\r", "-      case SWITCH:\r", "-        SwitchStatement();\r", "-        break;\r", "-      case IF:\r", "-        IfStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case WHILE:\r", "-        WhileStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case DO:\r", "-        DoStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case FOR:\r", "-        ForStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case BREAK:\r", "-        BreakStatement();\r", "-        break;\r", "-      case CONTINUE:\r", "-        ContinueStatement();\r", "-        break;\r", "-      case RETURN:\r", "-        ReturnStatement();\r", "-        break;\r", "-      case THROW:\r", "-        ThrowStatement();\r", "-        break;\r", "-      case SYNCHRONIZED:\r", "-        SynchronizedStatement();\r", "-        break;\r", "-      case TRY:\r", "-        TryStatement();\r", "-        break;\r", "-      default:\r", "-        jj_la1[137] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-  }\r", "+ */", "+  final public void Statement() throws ParseException {", "+        _bReturn = false;", "+    if (jj_2_42(2)) {", "+      LabeledStatement();", "+    } else if (jj_2_43(2147483647)) {", "+      AssertStatement();", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LBRACE:", "+        Block();", "+        break;", "+      case SEMICOLON:", "+        EmptyStatement();", "+        break;", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case INCR:", "+      case DECR:", "+        StatementExpression();", "+        jj_consume_token(SEMICOLON);", "+          _ncss++;       Util.debug( \"_ncss++\" );", "+        break;", "+      case SWITCH:", "+        SwitchStatement();", "+        break;", "+      case IF:", "+        IfStatement();", "+          _cyc++;", "+        break;", "+      case WHILE:", "+        WhileStatement();", "+          _cyc++;", "+        break;", "+      case DO:", "+        DoStatement();", "+          _cyc++;", "+        break;", "+      case FOR:", "+        ForStatement();", "+          _cyc++;", "+        break;", "+      case BREAK:", "+        BreakStatement();", "+        break;", "+      case CONTINUE:", "+        ContinueStatement();", "+        break;", "+      case RETURN:", "+        ReturnStatement();", "+        break;", "+      case THROW:", "+        ThrowStatement();", "+        break;", "+      case SYNCHRONIZED:", "+        SynchronizedStatement();", "+        break;", "+      case TRY:", "+        TryStatement();", "+        break;", "+      default:", "+        jj_la1[138] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b431261441ef15861f0c943801ad581c", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/javancss/parser/JavaParser.java", "commitBeforeChange": "cce89b709fa940ca864f60f2b38877a45a7300cd", "commitAfterChange": "17d835dacb78da3254751a64d4c70c9d5b5fb9b5", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "\r   final public void Statement() throws ParseException", "signatureAfterChange": "   final public void Statement() throws ParseException", "diff": ["- */\r", "-  final public void Statement() throws ParseException {\r", "-        _bReturn = false;\r", "-    if (jj_2_43(2)) {\r", "-      LabeledStatement();\r", "-    } else if (jj_2_44(2147483647)) {\r", "-      AssertStatement();\r", "-    } else {\r", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\r", "-      case LBRACE:\r", "-        Block();\r", "-        break;\r", "-      case SEMICOLON:\r", "-        EmptyStatement();\r", "-        break;\r", "-      case ASSERT:\r", "-      case BOOLEAN:\r", "-      case BYTE:\r", "-      case CHAR:\r", "-      case DOUBLE:\r", "-      case ENUM:\r", "-      case FALSE:\r", "-      case FLOAT:\r", "-      case INT:\r", "-      case LONG:\r", "-      case NEW:\r", "-      case NULL:\r", "-      case SHORT:\r", "-      case SUPER:\r", "-      case THIS:\r", "-      case TRUE:\r", "-      case VOID:\r", "-      case INTEGER_LITERAL:\r", "-      case FLOATING_POINT_LITERAL:\r", "-      case CHARACTER_LITERAL:\r", "-      case STRING_LITERAL:\r", "-      case IDENTIFIER:\r", "-      case LPAREN:\r", "-      case INCR:\r", "-      case DECR:\r", "-        StatementExpression();\r", "-        jj_consume_token(SEMICOLON);\r", "-          _ncss++;       Util.debug( \"_ncss++\" );\r", "-        break;\r", "-      case SWITCH:\r", "-        SwitchStatement();\r", "-        break;\r", "-      case IF:\r", "-        IfStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case WHILE:\r", "-        WhileStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case DO:\r", "-        DoStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case FOR:\r", "-        ForStatement();\r", "-          _cyc++;\r", "-        break;\r", "-      case BREAK:\r", "-        BreakStatement();\r", "-        break;\r", "-      case CONTINUE:\r", "-        ContinueStatement();\r", "-        break;\r", "-      case RETURN:\r", "-        ReturnStatement();\r", "-        break;\r", "-      case THROW:\r", "-        ThrowStatement();\r", "-        break;\r", "-      case SYNCHRONIZED:\r", "-        SynchronizedStatement();\r", "-        break;\r", "-      case TRY:\r", "-        TryStatement();\r", "-        break;\r", "-      default:\r", "-        jj_la1[137] = jj_gen;\r", "-        jj_consume_token(-1);\r", "-        throw new ParseException();\r", "-      }\r", "-    }\r", "-  }\r", "+ */", "+  final public void Statement() throws ParseException {", "+        _bReturn = false;", "+    if (jj_2_42(2)) {", "+      LabeledStatement();", "+    } else if (jj_2_43(2147483647)) {", "+      AssertStatement();", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LBRACE:", "+        Block();", "+        break;", "+      case SEMICOLON:", "+        EmptyStatement();", "+        break;", "+      case ASSERT:", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case ENUM:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case FLOATING_POINT_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case INCR:", "+      case DECR:", "+        StatementExpression();", "+        jj_consume_token(SEMICOLON);", "+          _ncss++;       Util.debug( \"_ncss++\" );", "+        break;", "+      case SWITCH:", "+        SwitchStatement();", "+        break;", "+      case IF:", "+        IfStatement();", "+          _cyc++;", "+        break;", "+      case WHILE:", "+        WhileStatement();", "+          _cyc++;", "+        break;", "+      case DO:", "+        DoStatement();", "+          _cyc++;", "+        break;", "+      case FOR:", "+        ForStatement();", "+          _cyc++;", "+        break;", "+      case BREAK:", "+        BreakStatement();", "+        break;", "+      case CONTINUE:", "+        ContinueStatement();", "+        break;", "+      case RETURN:", "+        ReturnStatement();", "+        break;", "+      case THROW:", "+        ThrowStatement();", "+        break;", "+      case SYNCHRONIZED:", "+        SynchronizedStatement();", "+        break;", "+      case TRY:", "+        TryStatement();", "+        break;", "+      default:", "+        jj_la1[138] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2eafdc343d5ede32580a61507953980c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8972a6eba3d5208c1a6d3e102cf99550", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addInstrumentationToSingleClass(File file)", "signatureAfterChange": "      private void addInstrumentationToSingleClass(File file)", "diff": ["-\tprivate void addInstrumentationToSingleClass(File file)", "-\t{", "-\t\tlogger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "+    private void addInstrumentationToSingleClass(File file)", "+    {", "+        logger.debug(\"Instrumenting class \" + file.getAbsolutePath());", "-\t\tInputStream inputStream = null;", "-\t\tClassWriter cw;", "-\t\tClassInstrumenter cv;", "-\t\ttry", "-\t\t{", "-\t\t\tinputStream = new FileInputStream(file);", "-\t\t\tClassReader cr = new ClassReader(inputStream);", "-\t\t\tcw = new ClassWriter(true);", "-\t\t\tcv = new ClassInstrumenter(this.projectData, cw, this.ignoreRegexs);", "-\t\t\tcr.accept(cv, false);", "-\t\t}", "-\t\tcatch (Throwable t)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\tt);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (inputStream != null)", "-\t\t\t{", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\tinputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+        InputStream inputStream = null;", "+        ClassWriter cw;", "+        ClassInstrumenter cv;", "+        try", "+        {", "+            inputStream = new FileInputStream(file);", "+            ClassReader cr = new ClassReader(inputStream);", "+            cw = new ClassWriter(true);", "+            cv = new ClassInstrumenter(projectData, cw, ignoreRegexes);", "+            cr.accept(cv, false);", "+        }", "+        catch (Throwable t)", "+        {", "+            logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+                    t);", "+            return;", "+        }", "+        finally", "+        {", "+            if (inputStream != null)", "+            {", "+                try", "+                {", "+                    inputStream.close();", "+                }", "+                catch (IOException e)", "+                {", "+                }", "+            }", "+        }", "-\t\tOutputStream outputStream = null;", "-\t\ttry", "-\t\t{", "-\t\t\tif (cv.isInstrumented())", "-\t\t\t{", "-\t\t\t\t// If destinationDirectory is null, then overwrite", "-\t\t\t\t// the original, uninstrumented file.", "-\t\t\t\tFile outputFile;", "-\t\t\t\tif (destinationDirectory == null)", "-\t\t\t\t\toutputFile = file;", "-\t\t\t\telse", "-\t\t\t\t\toutputFile = new File(destinationDirectory, cv", "-\t\t\t\t\t\t\t.getClassName().replace('.', File.separatorChar)", "-\t\t\t\t\t\t\t+ \".class\");", "+        OutputStream outputStream = null;", "+        try", "+        {", "+            if (cv.isInstrumented())", "+            {", "+                // If destinationDirectory is null, then overwrite", "+                // the original, uninstrumented file.", "+                File outputFile;", "+                if (destinationDirectory == null)", "+                    outputFile = file;", "+                else", "+                    outputFile = new File(destinationDirectory, cv", "+                            .getClassName().replace('.', File.separatorChar)", "+                            + \".class\");", "-\t\t\t\tFile parentFile = outputFile.getParentFile();", "-\t\t\t\tif (parentFile != null)", "-\t\t\t\t{", "-\t\t\t\t\tparentFile.mkdirs();", "-\t\t\t\t}", "+                File parentFile = outputFile.getParentFile();", "+                if (parentFile != null)", "+                {", "+                    parentFile.mkdirs();", "+                }", "-\t\t\t\tbyte[] instrumentedClass = cw.toByteArray();", "-\t\t\t\toutputStream = new FileOutputStream(outputFile);", "-\t\t\t\toutputStream.write(instrumentedClass);", "-\t\t\t}", "-\t\t}", "-\t\tcatch (IOException e)", "-\t\t{", "-\t\t\tlogger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "-\t\t\t\t\te);", "-\t\t\treturn;", "-\t\t}", "-\t\tfinally", "-\t\t{", "-\t\t\tif (outputStream != null)", "-\t\t\t{", "-\t\t\t\ttry", "-\t\t\t\t{", "-\t\t\t\t\toutputStream.close();", "-\t\t\t\t}", "-\t\t\t\tcatch (IOException e)", "-\t\t\t\t{", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+                byte[] instrumentedClass = cw.toByteArray();", "+                outputStream = new FileOutputStream(outputFile);", "+                outputStream.write(instrumentedClass);", "+            }", "+        }", "+        catch (IOException e)", "+        {", "+            logger.warn(\"Unable to instrument file \" + file.getAbsolutePath(),", "+                    e);", "+            return;", "+        }", "+        finally", "+        {", "+            if (outputStream != null)", "+            {", "+                try", "+                {", "+                    outputStream.close();", "+                }", "+                catch (IOException e)", "+                {", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b64e03d8afabbcfb33b06f30ba58ed16", "repository": "https://github.com/cobertura/cobertura.git", "fileName": "cobertura/src/net/sourceforge/cobertura/instrument/Main.java", "commitBeforeChange": "c7179e693f89a314eb6898100456db755030dd92", "commitAfterChange": "12464e2c222b85c4fe40070c50e015403ce5acfe", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void addInstrumentationToArchive(ZipInputStream archive, \t\t\tZipOutputStream output) throws Exception", "signatureAfterChange": "      private void addInstrumentationToArchive(ZipInputStream archive,             ZipOutputStream output) throws Exception", "diff": ["+    private void addInstrumentationToArchive(ZipInputStream archive,", "+            ZipOutputStream output) throws Exception", "+    {", "+        ZipEntry entry;", "+        while ((entry = archive.getNextEntry()) != null)", "+        {", "+            try", "+            {", "+                ZipEntry outputEntry = new ZipEntry(entry.getName());", "+                output.putNextEntry(outputEntry);", "+                // Read current entry", "+                byte[] entryBytes = IOUtil", "+                        .createByteArrayFromInputStream(archive);", "+                // Check if we have class file", "+                if (isClass(entry))", "+                {", "+                    // Instrument class", "+                    ClassReader cr = new ClassReader(entryBytes);", "+                    ClassWriter cw = new ClassWriter(true);", "+                    ClassInstrumenter cv = new ClassInstrumenter(projectData,", "+                            cw, ignoreRegexes);", "+                    cr.accept(cv, false);", "+                    // If class was instrumented, get bytes that define the", "+                    // class", "+                    if (cv.isInstrumented())", "+                    {", "+                        logger.debug(\"Putting instrumeted entry: \"", "+                                + entry.getName());", "+                        entryBytes = cw.toByteArray();", "+                    }", "+                }", "+                // Add entry to the output", "+                output.write(entryBytes);", "+                output.closeEntry();", "+                archive.closeEntry();", "+            }", "+            catch (Exception e)", "+            {", "+                logger.warn(\"Problems with archive entry: \" + entry);", "+                throw e;", "+            }", "+            output.flush();", "+        }", "+    }", "-\tprivate void addInstrumentationToArchive(ZipInputStream archive,", "-\t\t\tZipOutputStream output) throws Exception", "-\t{", "-\t\tZipEntry entry;", "-\t\twhile ((entry = archive.getNextEntry()) != null)", "-\t\t{", "-\t\t\ttry", "-\t\t\t{", "-\t\t\t\tZipEntry outputEntry = new ZipEntry(entry.getName());", "-\t\t\t\toutput.putNextEntry(outputEntry);", "-\t\t\t\t// Read current entry", "-\t\t\t\tbyte[] entryBytes = IOUtil", "-\t\t\t\t\t\t.createByteArrayFromInputStream(archive);", "-\t\t\t\t// Check if we have class file", "-\t\t\t\tif (isClass(entry))", "-\t\t\t\t{", "-\t\t\t\t\t// Instrument class", "-\t\t\t\t\tClassReader cr = new ClassReader(entryBytes);", "-\t\t\t\t\tClassWriter cw = new ClassWriter(true);", "-\t\t\t\t\tClassInstrumenter cv = new ClassInstrumenter(", "-\t\t\t\t\t\t\tthis.projectData, cw, this.ignoreRegexs);", "-\t\t\t\t\tcr.accept(cv, false);", "-\t\t\t\t\t// If class was instrumented, get bytes that define the", "-\t\t\t\t\t// class", "-\t\t\t\t\tif (cv.isInstrumented())", "-\t\t\t\t\t{", "-\t\t\t\t\t\tlogger.debug(\"Putting instrumeted entry: \"", "-\t\t\t\t\t\t\t\t+ entry.getName());", "-\t\t\t\t\t\tentryBytes = cw.toByteArray();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t// Add entry to the output", "-\t\t\t\toutput.write(entryBytes);", "-\t\t\t\toutput.closeEntry();", "-\t\t\t\tarchive.closeEntry();", "-\t\t\t}", "-\t\t\tcatch (Exception e)", "-\t\t\t{", "-\t\t\t\tlogger.warn(\"Problems with archive entry: \" + entry);", "-\t\t\t\tthrow e;", "-\t\t\t}", "-\t\t\toutput.flush();", "-\t\t}", "-\t}"]}]}
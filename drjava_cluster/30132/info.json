{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffa68407524005981003cf1cc42e420f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26960b4510394cb788a4853ae17f956c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/LongLiteralTest.java", "commitBeforeChange": "5050aa0abfd0e0acdb99822735de5199f549588e", "commitAfterChange": "88ada0b0aa9b53ff07f7d7830cabb38266fee8a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void testParseOctal()", "signatureAfterChange": "    public void testLongLiteral()", "diff": ["-   */ ", "-  public void testParseOctal() {", "-    assertEquals(\"LongLiteral.testParseOctal failed:\",true,LongLiteral.testParseOctal());", "-  }", "+  public void testLongLiteral()", "+  {", "+    LongLiteral ll;", "+    ", "+    //Test parse refactored into JUnit", "+    ll = new LongLiteral(\"0x138\");", "+    assertTrue(\"Parse 0x138\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"0470\");", "+    assertTrue(\"Parse 0470\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"312\");", "+    assertTrue(\"Parse 312\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ", "+    //Test parse hexadecimal refactored into JUnit", "+    ll = new LongLiteral(\"0x0\");", "+    assertTrue(\"Parse 0\", new Long(\"0\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"0x7fffffff\");", "+    assertTrue(\"Parse 7fffffff\", new Long(\"2147483647\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"0x80000000\");", "+    assertTrue(\"Parse 80000000 Hexadecimal\", new Long(\"2147483648\").compareTo((Long)ll.getValue()) == 0);", "+", "+    //Test parse octal refactored into JUnit", "+    ll = new LongLiteral(\"0\");", "+    assertTrue(\"Parse 0 Octal\", new Long(\"0\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"017777777777\");", "+    assertTrue(\"Parse 17777777777 Octal\", new Long(\"2147483647\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"020000000000\");", "+    assertTrue(\"Parse 20000000000 Octal\", new Long(\"2147483648\").compareTo((Long)ll.getValue()) == 0);", "+    ", "+    //Testing of negative numbers added", "+    ll = new LongLiteral(\"0xffffffffffffffff\");", "+    assertTrue(\"Parse -1 Hexadecimal\", new Long(\"-1\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"01777777777777777777777\");", "+    assertTrue(\"Parse -1 Hexadecimal\", new Long(\"-1\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"-1\");", "+    assertTrue(\"Parse -1\", new Long(\"-1\").compareTo((Long)ll.getValue()) == 0);", "+    ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a124268cb1fc718b11d7ac42376c1811", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/LongLiteralTest.java", "commitBeforeChange": "26668262ef01a77108768ef35014f0c42dcfcb10", "commitAfterChange": "29c3a48aaad146d1b60a0606bb1625984a770c41", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void testLongLiteral()", "signatureAfterChange": "    public void testLongLiteral()", "diff": ["+", "+    //Test parse long refactored into JUnit", "+    ll = new LongLiteral(\"0x138l\");", "+    assertTrue(\"Parse 0x138l\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"0470l\");", "+    assertTrue(\"Parse 0470l\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"312l\");", "+    assertTrue(\"Parse 312l\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);    ", "+    ll = new LongLiteral(\"0x138L\");", "+    assertTrue(\"Parse 0x138L\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"0470L\");", "+    assertTrue(\"Parse 0470L\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"312L\");", "+    assertTrue(\"Parse 312L\", new Long(\"312\").compareTo((Long)ll.getValue()) == 0);    ", "+    ll = new LongLiteral(\"0\");", "+    assertTrue(\"Parse 0\", new Long(\"0\").compareTo((Long)ll.getValue()) == 0);", "+    ll = new LongLiteral(\"0L\");", "+    assertTrue(\"Parse 0L\", new Long(\"0\").compareTo((Long)ll.getValue()) == 0);    ", "+    ll = new LongLiteral(\"0l\");", "+    assertTrue(\"Parse 0l\", new Long(\"0\").compareTo((Long)ll.getValue()) == 0);    "]}], "num": 30132}
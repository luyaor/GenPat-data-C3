{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd5e392ae05d792e9050b29e3eac3f1f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "125fb26ae3634891c3daab9462626938", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "7c2b459760724c8e0af7c91f77f7fa41e315edc6", "commitAfterChange": "c9b6668252c82575b56cf423d4fca817498241b6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testInteractionAbort() throws BadLocationException,       DocumentAdapterException, InterruptedException, IOException", "signatureAfterChange": "   public void testInteractionAbort() throws BadLocationException, DocumentAdapterException, InterruptedException,      IOException", "diff": ["-  public void testInteractionAbort() throws BadLocationException,", "-      DocumentAdapterException, InterruptedException, IOException", "-  {", "+  public void testInteractionAbort() throws BadLocationException, DocumentAdapterException, InterruptedException, ", "+    IOException {", "-        assertInteractionStartCount(2);", "+//        assertInteractionStartCount(2);", "-      public void interpreterExited(int status) {", "-        try {", "-          Thread.sleep(1000);", "-        } catch (InterruptedException e) {", "-        }", "-        assertInteractionStartCount(1);", "-        interpreterExitedCount++;", "-      }", "+//      public void interpreterExited(int status) {", "+//        try {", "+//          Thread.sleep(1000);", "+//        } catch (InterruptedException e) {", "+//        }", "+//        assertInteractionStartCount(1);", "+//        interpreterExitedCount++;", "+//      }", "-        assertInteractionStartCount(1);", "-        assertInterpreterExitedCount(0);", "-        assertInterpreterReadyCount(0);", "+//        assertInteractionStartCount(1);", "+//        assertInterpreterExitedCount(0);", "+//        assertInterpreterReadyCount(0);", "-        synchronized(this) {", "-          assertInteractionStartCount(1);", "-          assertInterpreterExitedCount(0);", "-          assertInterpreterResettingCount(1);", "+        synchronized(_resetDoneLock) {", "+//          assertInteractionStartCount(1);", "+//          assertInterpreterExitedCount(0);", "+//          assertInterpreterResettingCount(1);", "-          this.notify();", "+          _resetDone = true;", "+          _resetDoneLock.notify();", "-    synchronized(listener) {", "+    _resetDone = false;", "+    synchronized(_resetDoneLock) {", "-      listener.wait();", "+      _resetDoneLock.wait();", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb096005d5c1d46b94d4080d690c2817", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/Lexer.java", "commitBeforeChange": "f4bc3bcffd0605705e0a0b1481ab0a56ae21344e", "commitAfterChange": "62a60c4b746d2a0603d2c223e7e3b1d46d413a58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public SExpToken readToken()", "signatureAfterChange": "   public Tokens.SExpToken readToken()", "diff": ["-   *  Returns the SExpToken object representing this SExpToken */", "-  public SExpToken readToken() {", "+   *  Returns the Tokens.SExpToken object representing this Tokens.SExpToken */", "+  public Tokens.SExpToken readToken() {", "-      SExpToken token = buffer;", "+      Tokens.SExpToken token = buffer;", "-    // Process the SExpToken returned by StreamTokenizer", "+    // Process the Tokens.SExpToken returned by StreamTokenizer", "-        return new NumberToken(nval);", "+        return new Tokens.NumberToken(nval);", "-        SExpToken regToken = wordTable.get(s);", "-        if (regToken == null) return new WordToken(sval);", "+        Tokens.SExpToken regToken = wordTable.get(s);", "+        if (regToken == null) return new Tokens.WordToken(sval);", "-      case '(': return LeftParenToken.ONLY;", "-      case ')': return RightParenToken.ONLY;", "-      case '\"': return new QuotedTextToken(sval);", "+      case '(': return Tokens.LeftParenToken.ONLY;", "+      case ')': return Tokens.RightParenToken.ONLY;", "+      case '\"': return new Tokens.QuotedTextToken(sval);", "-//          return new WordToken(\"\\\"\");", "+//          return new Tokens.WordToken(\"\\\"\");", "-//          return new WordToken(\"\\\\\");", "+//          return new Tokens.WordToken(\"\\\\\");", "-//          return new WordToken(\" \");", "+//          return new Tokens.WordToken(\" \");", "-//          return new WordToken(\"\\n\");", "+//          return new Tokens.WordToken(\"\\n\");", "-//          return new WordToken(\"\\t\");", "+//          return new Tokens.WordToken(\"\\t\");", "-          return BackSlashToken.ONLY;", "+          return Tokens.BackSlashToken.ONLY;", "-        return new WordToken(\"\" + (char)tokenType);", "+        return new Tokens.WordToken(\"\" + (char)tokenType);"]}], "num": 2025}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0da09d857f35bb543da63be1c54be6bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "554e4d01b3f4e1d6a5e56b94ca3216fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "0bbc4205cb6cdac938c33646446cffe67a254d86", "commitAfterChange": "32c1a96bda59745efd4d13dbac97b7a11f8d7d24", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["+         ", "-          CompoundUndoManager undoMan = _doc.getUndoManager();", "-          int key = undoMan.startCompoundEdit();", "+             CompoundUndoManager undoMan = _doc.getUndoManager();", "+          //int key = undoMan.startCompoundEdit();", "-          undoMan.endCompoundEdit(key);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          endCompoundEdit();", "+//          undoMan.endCompoundEdit(key); //commented out because of frenchkeyboard fix", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0) || ((e.getModifiers() & InputEvent.ALT_MASK) != 0))", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "+          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "-            //          System.out.println(\"not supering 1 \" + isAltF4);", "+            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "-          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "-            int _keyval = (int) e.getKeyChar();", "-            if (_keyval >= 32 && _keyval <= 126) {", "-              CompoundUndoManager undoMan = _doc.getUndoManager();", "-              if (!_inCompoundEdit) {", "-                _inCompoundEdit = true;", "-                _compoundEditKey = undoMan.startCompoundEdit();", "-                getUndoAction().updateUndoState();", "-                getRedoAction().updateRedoState();", "-                //super.processKeyEvent(e);", "-              }", "+// Following IF block is commented out in regards to French Keyboard Fix", "+          //          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "+//            int _keyval = (int) e.getKeyChar();", "+//            if (_keyval >= 32 && _keyval <= 126) {", "+//              CompoundUndoManager undoMan = _doc.getUndoManager();", "+//              if (!_inCompoundEdit) {", "+//                _inCompoundEdit = true;", "+//                _compoundEditKey = undoMan.startCompoundEdit();", "+//                getUndoAction().updateUndoState();", "+//                getRedoAction().updateRedoState();", "+//                //super.processKeyEvent(e);", "+//              }", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b17643b3aad2b6f77820df90bbed2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-        //      System.out.println(\"Keystroke was null\");", "+//        System.out.println(\"Keystroke was null\");", "-          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-            endCompoundEdit();", "-          }", "+          if (e.getKeyCode() == KeyEvent.VK_ENTER) endCompoundEdit();", "-          ", "-             CompoundUndoManager undoMan = _doc.getUndoManager();", "-          //int key = undoMan.startCompoundEdit();", "-          //        System.out.println(\"supering 1 \" + isAltF4);", "+          CompoundUndoManager undoMan = _doc.getUndoManager();", "+//          int key = undoMan.startCompoundEdit();", "+//          System.out.println(\"supering 1 \" + isAltF4);", "-             super.processKeyEvent(e);", "-          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          super.processKeyEvent(e);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes ", "+          // (see the definition of _undoListener).", "-          //        e.consume();", "+//          e.consume();", "-", "-          ", "-          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "-          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "-          // the alt key is down.", "-          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "+          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down and fixes", "+          // bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when the alt key is down.", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit ", "+          // actually happened.", "+          if ((e.getModifiers() & InputEvent.META_MASK) != 0 ", "+                // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) // omitted for frenchkeyboard support", "-            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "+//            System.out.println(\"not supering 1 \" + isAltF4);", "-          ", "-                    ", "+                        ", "-          /* If the KeyEvent is not a pressed event, process it before we do", "-           * granular undo or _inCompoundEdit may get set incorrectly.", "-           * This code breaks Alt-F4, and may break other system keybindings", "-           * since the event is consumed by us.  For now, just check Alt-F4. */", "+          /* If the KeyEvent is not a pressed event, process it before we do granular undo or _inCompoundEdit may ", "+           * get set incorrectly. This code breaks Alt-F4, and may break other system keybindings since the event ", "+           * is consumed by us. */", "-          ", "-          "]}], "num": 12797}
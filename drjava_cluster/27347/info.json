{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95a520991a65712fc4024b272aa4cf43", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddb41795db168c1f08884db29ac0148", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "4d3fa64499badc01be2d089cba1394a47c2f30de", "commitAfterChange": "ed48d6b9cb86b6e63d0852d1106c5aba17823c84", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Object visit(StaticMethodCall node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-        if(!TigerUtilities.isVarArgs(m)){", "-          args[i] = it.next().acceptVisitor(this);", "-          i++;", "+        Object last = it.next().acceptVisitor(this);", "+        if(!TigerUtilities.isVarArgs(m) || ", "+           (last != null && typs[i].isAssignableFrom(last.getClass()))){", "+          args[i] = last;", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a075ab116884233cf357803d4123312", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Object visit(StaticMethodCall node)", "diff": ["-        Object last = it.next().acceptVisitor(this);", "-        if(!TigerUtilities.isVarArgs(m) || ", "-           (last != null && typs[i].isAssignableFrom(last.getClass()))){", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(m)) {", "-        } else {", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type"]}], "num": 27347}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37761a3618b41f7f665def56bea93a63", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a4b65f834256b02a77a2a48b54ea814", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r   public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, TypeData value_result) {\r", "-    if (name_result == null || value_result == null) {return null;}\r", "-  \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    //make sure both are instance datas\r", "-    if (assertInstanceType(name_result, \"You cannot assign a value to the type \" + name_result.getName(), that) &&\r", "-        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + \" on the right hand side of an assignment\", that)) {\r", "-      \r", "-      //make sure the rhs can be assigned to the lhs\r", "-      if (!value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), _targetVersion)) {\r", "-        _addError(\"You cannot assign something of type \" + value_result.getName() + \" to something of type \" + name_result.getName(), that);\r", "-      }\r", "-    }   \r", "-    return name_result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, TypeData value_result) {", "+    if (name_result == null || value_result == null) {return null;}", "+  ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    //make sure both are instance datas", "+    if (assertInstanceType(name_result, \"You cannot assign a value to the type \" + name_result.getName(), that) &&", "+        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + \" on the right hand side of an assignment\", that)) {", "+      ", "+      //make sure the rhs can be assigned to the lhs", "+      if (!value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"You cannot assign something of type \" + value_result.getName() + \" to something of type \" + name_result.getName(), that);", "+      }", "+    }   ", "+    return name_result.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc2cd13ea76c5515e16d406acf891284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result) {\r", "-    if (type_result == null || value_result == null) {return null;}\r", "-    \r", "-    //make sure that lhs could be resolved (not PackageData)\r", "-    if (!assertFound(value_result, that) || !assertFound(type_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (type_result.isInstanceType()) {\r", "-      _addError(\"You are trying to cast to an instance of a type, which is not allowed.  Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);\r", "-    }\r", "-    \r", "-    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + \", which is a class or interface type, not an instance\", that) &&\r", "-             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), _targetVersion)) {\r", "-      \r", "-      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + type_result.getName() + \" because they are not related\", that);\r", "-    }\r", "-    \r", "-    return type_result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result) {", "+    if (type_result == null || value_result == null) {return null;}", "+    ", "+    //make sure that lhs could be resolved (not PackageData)", "+    if (!assertFound(value_result, that) || !assertFound(type_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (type_result.isInstanceType()) {", "+      _addError(\"You are trying to cast to an instance of a type, which is not allowed.  Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);", "+    }", "+    ", "+    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + \", which is a class or interface type, not an instance\", that) &&", "+             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + type_result.getName() + \" because they are not related\", that);", "+    }", "+    ", "+    return type_result.getInstanceData();", "+  }"]}], "num": 13682}
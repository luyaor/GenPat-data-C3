{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f93edd448d5dad9a2bef16f893f93a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18f6a9bd34ccc5ae8ffd3c5baefe5c99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Node visit(SuperMethodCall node)", "diff": ["+   */", "+  public Node visit(SuperMethodCall node) {", "+    // Check the arguments", "+    List<Expression> args = node.getArguments();", "+    if (args != null) {", "+      visitExprList(args);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(SuperMethodCall node) {", "-\t// Check the arguments", "-\tList args = node.getArguments();", "-\tif (args != null) {", "-\t    visitList(args);", "-\t}", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f378451680a80674803777fc3a331d4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "   public Node visit(ArrayAllocation node)", "diff": ["+   */", "+  public Node visit(ArrayAllocation node) {", "+    // Do the checking of the size expressions", "+    visitExprList(node.getSizes());", "+    ", "+    // Visits the initializer if one", "+    if (node.getInitialization() != null) {", "+      node.getInitialization().acceptVisitor(this);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(ArrayAllocation node) {", "-        // Do the checking of the size expressions", "-        visitList(node.getSizes());", "-", "-        // Visits the initializer if one", "-        if (node.getInitialization() != null) {", "-            node.getInitialization().acceptVisitor(this);", "-        }", "-\treturn null;", "-    }"]}], "num": 31310}
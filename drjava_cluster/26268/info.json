{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a777ed9933db0b142e9fb8da3e28d70", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd0fb050520e8d58d40b2922b644a2b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "commitAfterChange": "ba6205cad42ae00df3c37c5cbd4625770848df66", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "          private void _updateMenuItem (KeyStrokeData data)", "signatureAfterChange": "          private void _updateMenuItem (KeyStrokeData data)", "diff": ["-      if (jmi != null) { // otherwise this keystroke should map to an action that isn't in the menu", "+      // If jmi is null, this keystroke maps to an action that isn't in the menu", "+      if (jmi != null) {", "-        jmi.setAccelerator(ks);", "+        if (ks != KeyStrokeOption.NULL_KEYSTROKE) {", "+          // If ks is NULL_KEYSTROKE, we don't want it \"active\", since some", "+          //  Windows keys generate NULL_KEYSTROKE", "+          jmi.setAccelerator(ks);", "+        }", "+        else {", "+          // Clear the menu item's accelerator", "+          jmi.setAccelerator(null);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe6f69a50c4eb7e116e6bf49145ab4cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["-        //Remember the indexes in the _errors and _positions arrays that are for errors in this file", "+        //Remember the indexes in the _errors and _positions arrays that ", "+        // are for the errors in this file", "-        if (fileEndIndex != fileStartIndex){", "+        if (fileEndIndex != fileStartIndex) {", "+          // Try to use the canonical file if possible", "+          try {", "+            file = file.getCanonicalFile();", "+          }", "+          catch (IOException ioe) {", "+            // Oh well, store it as is", "+          }", "-    } catch (BadLocationException ble) {", "+    }", "+    catch (BadLocationException ble) {"]}], "num": 26268}
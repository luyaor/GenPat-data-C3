{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a70dfeadec04234015580598eacca6e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f9e5a6915cbf89564dbd9964360c883", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "         public void testforValueReturnStatementOnly()", "signatureAfterChange": "         public void testforValueReturnStatementOnly()", "diff": ["-      BracedBody bb1 = new BracedBody(SourceInfo.NO_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "-                                                                                 new BooleanLiteral(SourceInfo.NO_INFO, true))});", "+      BracedBody bb1 = new BracedBody(SourceInfo.NONE,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NONE,", "+                                                                                 new BooleanLiteral(SourceInfo.NONE, true))});", "-      BracedBody bb2 = new BracedBody(SourceInfo.NO_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "-                                                                                 new CharLiteral(SourceInfo.NO_INFO, 'c'))});", "+      BracedBody bb2 = new BracedBody(SourceInfo.NONE,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NONE,", "+                                                                                 new CharLiteral(SourceInfo.NONE, 'c'))});", "-      BracedBody bb3 = new BracedBody(SourceInfo.NO_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "-                                                                                 new IntegerLiteral(SourceInfo.NO_INFO, 1))});", "+      BracedBody bb3 = new BracedBody(SourceInfo.NONE,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NONE,", "+                                                                                 new IntegerLiteral(SourceInfo.NONE, 1))});", "-      BracedBody bb4 = new BracedBody(SourceInfo.NO_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "-                                                                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")))});", "+      BracedBody bb4 = new BracedBody(SourceInfo.NONE,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NONE,", "+                                                                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")))});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8069403047adf03969ee49f031de437d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "          public void testForForStatementOnly()", "signatureAfterChange": "          public void testForForStatementOnly()", "diff": ["-      Expression te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "-      UnparenthesizedExpressionList sel = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      ForStatement fs = new ForStatement(SourceInfo.NO_INFO, sel, new NullLiteral(SourceInfo.NO_INFO), new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), new EmptyStatement(SourceInfo.NO_INFO));", "+      UnparenthesizedExpressionList sel = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      ForStatement fs = new ForStatement(SourceInfo.NONE, sel, new NullLiteral(SourceInfo.NONE), new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[0]), new EmptyStatement(SourceInfo.NONE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "987f7069402f578f392468009a8c69f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-        new AbstractMethodDef(SourceInfo.NO_INFO, ", "+        new AbstractMethodDef(SourceInfo.NONE, ", "-                              new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                              new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                              new PrimitiveType(SourceInfo.NONE, \"int\"),", "+                              new Word(SourceInfo.NONE, \"myMethod\"), ", "-        new AbstractMethodDef(SourceInfo.NO_INFO, ", "+        new AbstractMethodDef(SourceInfo.NONE, ", "-                              new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                              new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                              new PrimitiveType(SourceInfo.NONE, \"int\"),", "+                              new Word(SourceInfo.NONE, \"myMethod\"), ", "-        new InterfaceDef(SourceInfo.NO_INFO, ", "+        new InterfaceDef(SourceInfo.NONE, ", "-                         new Word(SourceInfo.NO_INFO, \"id\"), ", "+                         new Word(SourceInfo.NONE, \"id\"), ", "-                         new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { amd }));", "+                         new BracedBody(SourceInfo.NONE, new BodyItemI[] { amd }));", "-        new InterfaceDef(SourceInfo.NO_INFO, ", "+        new InterfaceDef(SourceInfo.NONE, ", "-                         new Word(SourceInfo.NO_INFO, \"id2\"), ", "+                         new Word(SourceInfo.NONE, \"id2\"), ", "-                         new ReferenceType[] { new ClassOrInterfaceType(SourceInfo.NO_INFO, \"id\", new Type[0]) }, ", "-                         new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { amd2 }));", "+                         new ReferenceType[] { new ClassOrInterfaceType(SourceInfo.NONE, \"id\", new Type[0]) }, ", "+                         new BracedBody(SourceInfo.NONE, new BodyItemI[] { amd2 }));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02fc59b23195c76325653b86e9409a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NONE, ", "-                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                                                    new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                                                    new PrimitiveType(SourceInfo.NONE, \"int\"),", "+                                                    new Word(SourceInfo.NONE, \"myMethod\"), ", "-      AbstractMethodDef amd2 = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+      AbstractMethodDef amd2 = new AbstractMethodDef(SourceInfo.NONE, ", "-                                                     new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                                                     new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                                                     new PrimitiveType(SourceInfo.NONE, \"int\"),", "+                                                     new Word(SourceInfo.NONE, \"myMethod\"), ", "-      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, ", "+      InterfaceDef id = new InterfaceDef(SourceInfo.NONE, ", "-                                         new Word(SourceInfo.NO_INFO, \"id\"), ", "+                                         new Word(SourceInfo.NONE, \"id\"), ", "-                                         new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {amd}));", "+                                         new BracedBody(SourceInfo.NONE, new BodyItemI[] {amd}));", "-        new InterfaceDef(SourceInfo.NO_INFO, ", "+        new InterfaceDef(SourceInfo.NONE, ", "-                         new Word(SourceInfo.NO_INFO, \"id2\"), ", "+                         new Word(SourceInfo.NONE, \"id2\"), ", "-                         new ReferenceType[] { new ClassOrInterfaceType(SourceInfo.NO_INFO, \"id\", new Type[0]) }, ", "-                         new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { amd2 }));", "+                         new ReferenceType[] { new ClassOrInterfaceType(SourceInfo.NONE, \"id\", new Type[0]) }, ", "+                         new BracedBody(SourceInfo.NONE, new BodyItemI[] { amd2 }));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d687474e9888c139206566c3b1480c95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyFullJavaVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "          public void xtestForVariableDeclarationDoFirst()", "signatureAfterChange": "          public void xtestForVariableDeclarationDoFirst()", "diff": ["-      VariableDeclaration vdecl0 = new VariableDeclaration(SourceInfo.NO_INFO,", "+      VariableDeclaration vdecl0 = new VariableDeclaration(SourceInfo.NONE,", "-        new InitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                          new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                          new Word (SourceInfo.NO_INFO, \"field0\"), ", "-                                          new DoubleLiteral(SourceInfo.NO_INFO, 2.345))});", "+        new InitializedVariableDeclarator(SourceInfo.NONE, ", "+                                          new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                          new Word (SourceInfo.NONE, \"field0\"), ", "+                                          new DoubleLiteral(SourceInfo.NONE, 2.345))});", "-      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NO_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NONE,", "-        new InitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                               new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                               new Word (SourceInfo.NO_INFO, \"field1\"),", "-                               new DoubleLiteral(SourceInfo.NO_INFO, 2.45)),", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                               new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "-                               new Word (SourceInfo.NO_INFO, \"field2\"))});", "+        new InitializedVariableDeclarator(SourceInfo.NONE, ", "+                               new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                               new Word (SourceInfo.NONE, \"field1\"),", "+                               new DoubleLiteral(SourceInfo.NONE, 2.45)),", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                               new PrimitiveType(SourceInfo.NONE, \"boolean\"), ", "+                               new Word (SourceInfo.NONE, \"field2\"))});"]}], "num": 22328}
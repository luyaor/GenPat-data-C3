{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9761d233df60a38e2a546786347c3ef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6707fa8663dd4f810111afc04ad4a6c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private Type handleBitwiseExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleBitwiseExpression(BinaryExpression node)", "diff": ["+     */", "+    private Type handleBitwiseExpression(BinaryExpression node) {", "+      check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+          // Do nothing", "+        else if (getType(left) instanceof IntegralType && getType(right) instanceof IntegralType) {", "+          throw new ExecutionError(\"bitwise.expression.type\", node);", "+        ", "+        node.setLeftExpression(left);", "+        node.setRightExpression(right);", "+        ", "+        return setType(node, getType(left));", "-   */", "-  private Type handleBitwiseExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());", "-      ", "-      if (getType(left) instanceof BooleanType && getType(right) instanceof BooleanType) {", "-        // Do nothing", "-      }", "-      else if (getType(left) instanceof IntegralType && getType(right) instanceof IntegralType) {", "-        Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "-        left = promoted.first();", "-        right = promoted.second();", "-      }", "-      else {", "-      ", "-      node.setLeftExpression(left);", "-      node.setRightExpression(right);", "-      ", "-      return setType(node, getType(left));", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"bitwise.expression.type\", node);", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ed943be76ffea32a0107b5d826a689", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 48, "signatureBeforeChange": "   private Type handleNumericExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleNumericExpression(BinaryExpression node)", "diff": ["+     */", "+    private Type handleNumericExpression(BinaryExpression node) {", "+      check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+        throw new ExecutionError(\"numeric.expression.type\", node);", "-   */", "-  private Type handleNumericExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());", "-      Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "-      node.setLeftExpression(promoted.first());", "-      node.setRightExpression(promoted.second());", "-      return setType(node, getType(promoted.first()));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"numeric.expression.type\", node);", "-    }", "-  }"]}], "num": 6949}
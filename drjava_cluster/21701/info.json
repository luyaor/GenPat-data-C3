{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "247e010b7c2c4216322212eae9b0654d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a188ee6234379e2ad700a98dfcfd09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "098be4c27233835145531c86355bc697a3b62bfd", "commitAfterChange": "28db8fb2942dc00cad50f5244fe215d573867721", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    doc.setCurrentLocation(startLine);", "-    IndentInfo info = doc._getIndentInformation();", "-    int dist = info.distToLineEnclosingBrace();", "+    doc.setCurrentLocation(startLine);  // Is this necessary?  _getLineEnclosingBrace only depends on current LINE", "+    BraceInfo info = doc._getLineEnclosingBrace();", "+    int dist = info.distance();", "-    if (info.lineEnclosingBraceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "+    if (info.braceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "-    int braceNewline = 0;", "-    int distStart = info.distToEnclosingBraceStart();", "-    if (distStart > 0) braceNewline = startLine - distStart;", "-    int braceLen = bracePos - braceNewline;", "+    // Get distance to start of line from enclosing brace", "+    int braceNewline = doc._getLineStartPos(bracePos);", "+    int braceIndent = bracePos - braceNewline;", "-    final int tab = _suffixCt + braceLen;", "+    final int tab = _suffixCt + braceIndent;", "-    if (here > doc.getLength()) {", "-      here = doc.getLength() - 1;", "-    }", "+    if (here > doc.getLength()) here = doc.getLength() - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb20a3b2183f3eb8304419a47c321443", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BrowserHistoryPanel.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public BrowserHistoryPanel(MainFrame frame)", "signatureAfterChange": "   public BrowserHistoryPanel(MainFrame frame)", "diff": ["-    final RegionManager<DocumentRegion> rm = _model.getBrowserHistoryManager();", "-    rm.addListener(new RegionManagerListener<DocumentRegion>() {      ", "-      public void regionAdded(DocumentRegion r) {", "-        int index = rm.getIndexOf(r);", "-        addRegion(r, index);", "-        _list.ensureIndexIsVisible(index);", "+    final BrowserHistoryManager rm = _model.getBrowserHistoryManager();", "+    rm.addListener(new RegionManagerListener<BrowserDocumentRegion>() {      ", "+      public void regionAdded(BrowserDocumentRegion r) {", "+        rm.addBrowserRegion(r);", "+//        int index = rm.getCurrentRegion();  // Use current region!", "+//        _list.ensureIndexIsVisible(index);", "-      public void regionChanged(DocumentRegion r) { ", "+      public void regionChanged(BrowserDocumentRegion r) { ", "-      public void regionRemoved(DocumentRegion r) {", "-        removeRegion(r);", "+      public void regionRemoved(BrowserDocumentRegion r) {", "+        rm.remove(r);"]}], "num": 21701}
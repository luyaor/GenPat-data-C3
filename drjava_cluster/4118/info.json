{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24a960b34f2843659b23d5aa0dee8441", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16b0107a1ab8795967ddab82e2637deb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "13fd7a397c83b96c149ac8eb636b988dccbb4bed", "commitAfterChange": "7b6e3a6da13b7dd368ad89b9fff988959ce6f154", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-      Element root = doc.getDefaultRootElement();", "-      int line = root.getElementIndex(offset);", "-      int col = offset - root.getElement(line).getStartOffset();", "-      updateLocation(line + 1, col);  // line numbers are 1-based", "+      String text = doc.getText();", "+      if (offset == _offset + 1 && text.charAt(_offset) != '\\n') {", "+        _col += 1;", "+      }", "+      else {", "+        Element root = doc.getDefaultRootElement();", "+        int line = root.getElementIndex(offset); ", "+        _line = line + 1;     // line numbers are 1-based", "+        _col = offset - root.getElement(line).getStartOffset();", "+      }", "+      updateLocation(_line, _col);  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38e4483b00a7cf371cbb6d94d17f5771", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 714, "methodNumberAfterChange": 716, "signatureBeforeChange": "      public void nonTestCase(boolean isTestAll)", "signatureAfterChange": "      public void nonTestCase(boolean isTestAll, boolean didCompileFail)", "diff": ["-    public void nonTestCase(boolean isTestAll) {", "+    public void nonTestCase(boolean isTestAll, boolean didCompileFail) {", "-      ", "-      final String message = isTestAll ?", "-        \"There are no compiled JUnit TestCases available for execution.\\n\" +", "-        \"Perhaps you have not yet saved and compiled your test files.\"", "-        :", "-        \"The current document is not a valid JUnit test case.\\n\" +", "-        \"Please make sure that:\\n\" +", "-        \"- it has been compiled and\\n\" +", "-        \"- it is a subclass of junit.framework.TestCase.\\n\";", "-      ", "+      String message;", "+      String title = \"Cannot Run JUnit Test Cases\";", "+      if (didCompileFail) {", "+        message = \"Compile failed. Cannot run JUnit TestCases.\\n\" +", "+          \"Please examine the Compiler Output.\";", "+      }", "+      else {        ", "+        if (isTestAll) {", "+          message = \"There are no compiled JUnit TestCases available for execution.\\n\" +", "+            \"Perhaps you have not yet saved and compiled your test files.\";", "+        }", "+        else {", "+          message = \"The current document is not a valid JUnit test case.\\n\" +", "+            \"Please make sure that:\\n\" +", "+            \"- it has been compiled and\\n\" +", "+            \"- it is a subclass of junit.framework.TestCase.\\n\";", "+        }", "+      }", "-                                    \"Test Only Executes JUnit test cases\",", "+                                    title,", "-        showTab(_junitErrorPanel, true);", "+        if (!didCompileFail) showTab(_junitErrorPanel, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39764e7541d38b6c1dea28c43049409a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "6a5c20e1ee845b9752ac481574f6a7bee8c034e1", "commitAfterChange": "dd020118801905f09871a55ddb6fe47a118916d4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void _updateNoErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateNoErrors() throws BadLocationException", "diff": ["+      String message;", "-        doc.insertString(0,", "-                         \"Last compilation completed successfully.\",", "-                         NORMAL_ATTRIBUTES);", "+        message = \"Last compilation completed successfully.\";", "+      else {", "+        if (_model.getAvailableCompilers().length == 0) {", "+          message = \"No compiler is available.  Please specify one in\\n\" +", "+                    \"the Preferences dialog in the Edit menu.\";", "+        }", "+        else {", "+          message = _model.getActiveCompiler().getName() +", "+            \" compiler ready.\";", "+        }", "+      }", "+      ", "+      doc.insertString(0, message, NORMAL_ATTRIBUTES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "480c983ed1e8173a7bd3a89b759ba709", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "fb8effd5772e590820b31b51821dcae05a9e7028", "commitAfterChange": "3cea4dbc55127b1169bfc155262d72f9646d3bb5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "       private void updateFontColor()", "signatureAfterChange": "       private void updateFontColor()", "diff": ["+    /* make it bigger */", "+    Font titleFont = mainFont.deriveFont((float) (mainFont.getSize() + 3));", "+    if (CodeStatus.DEVELOPMENT) {", "+      _antiAliasText = DrJava.getConfig().getSetting(OptionConstants.TEXT_ANTIALIAS).booleanValue();", "+    }", "+    ", "-    _label.setFont(mainFont);", "+    _label.setFont(titleFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e1bea0226395ae397c96a43fdf7661", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "ab8a89c6d648ea35429bd5ad0942dbe6617ad61f", "commitAfterChange": "c772e43c3768bfdc63af9ecc05eaaef0cfc3c47f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean saveSettings()", "signatureAfterChange": "   public boolean saveSettings()", "diff": ["-    _mainFrame.getModel().setBuildDirectory(_builtDirSelector.getFileFromField());", "-    _mainFrame.getModel().setJarMainClass(_jarMainClassSelector.getFileFromField());", "+    File f = _builtDirSelector.getFileFromField();", "+    if(_builtDirSelector.getFileField().getText().equals(\"\")) ", "+      f = null;", "+    _mainFrame.getModel().setBuildDirectory(f);", "+    ", "+    f = _jarMainClassSelector.getFileFromField();", "+    if(_jarMainClassSelector.getFileField().getText().equals(\"\"))", "+      f = null;", "+    _mainFrame.getModel().setJarMainClass(f);", "-  }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3d5fc1842e581206f30cfeee67cf4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": "   private void _setCurrentDirectory(File file)", "signatureAfterChange": "   private void _setCurrentDirectory(File file)", "diff": ["-    _openChooser.setCurrentDirectory(file.getAbsoluteFile());", "-    _saveChooser.setCurrentDirectory(file.getAbsoluteFile());", "-    _javadocChooser.setCurrentDirectory(file.getAbsoluteFile());", "+    // We want to use absolute paths whenever possible, since canonical paths", "+    //  resolve symbolic links and can be quite long and unintuitive.", "+    // However, Windows blows up if you set the current directory of a", "+    //  JFileChooser to an absolute path with \"..\" in it.", "+    // In that case, we'll use the canonical path for the file chooser.", "+    // (Fix for bug 707734)", "+    try {", "+      File f = file.getAbsoluteFile();", "+      if (PlatformFactory.ONLY.isWindowsPlatform() &&", "+          (file.getAbsolutePath().indexOf(\"..\") != -1)) {", "+        f = file.getCanonicalFile();", "+      }", "+      _openChooser.setCurrentDirectory(f);", "+      _saveChooser.setCurrentDirectory(f);", "+      _javadocChooser.setCurrentDirectory(f);", "+    }", "+    catch (IOException ioe) {", "+      // If getCanonicalFile throws an IOException, we can't", "+      //  set the directory of the file chooser.  Oh well.", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8fbfc0b3098a82da642de178e51c1dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1b6ef7c7e1a6439fd1630b14326c67b0978e88ba", "commitAfterChange": "93cff9492f5f66f78081d1bfed6f05eaa775f999", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "    private void _open()", "signatureAfterChange": "    private void _open()", "diff": ["-    if(_openChooser.getFileFilter().equals(_projectFilter))", "-      openProject(_openSelector);", "-    else", "-      open(_openSelector);", "+    try {", "+      final File[] fileList = _openSelector.getFiles();", "+      ", "+      FileOpenSelector fos = new FileOpenSelector() {", "+        public File[] getFiles(){", "+          return fileList;         ", "+        }", "+      };", "+    ", "+      if(_openChooser.getFileFilter().equals(_projectFilter)) ", "+        openProject(fos);", "+      else", "+        open(fos);", "+    }", "+    catch(OperationCanceledException oce) {", "+      ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f393bf70aaca9c1c4f027d4ee5e33fe5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "3cea4dbc55127b1169bfc155262d72f9646d3bb5", "commitAfterChange": "ece33a1eca956a4c4fa241038cad534de212ef70", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public InteractionsPane(String keymapName, InteractionsDocumentAdapter doc)", "signatureAfterChange": "   public InteractionsPane(String keymapName, InteractionsDocumentAdapter doc)", "diff": ["+    ", "+    if (CodeStatus.DEVELOPMENT) {", "+      _antiAliasText = DrJava.getConfig().getSetting(TEXT_ANTIALIAS).booleanValue();", "+    }", "+    ", "+    ", "+    ", "+    ", "+    if (CodeStatus.DEVELOPMENT) {", "+      OptionListener<Boolean> aaTemp = new AntiAliasOptionListener();", "+      DrJava.getConfig().addOptionListener(OptionConstants.TEXT_ANTIALIAS, aaTemp);", "+    }"]}], "num": 4118}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f43159e21300a25c595660b523709264", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e82f3e91e50f94f74e9c37abbc2fd2b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 25, "signatureBeforeChange": "          public IncrementalThreadController(boolean start)", "signatureAfterChange": "   public static <I, R>       IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task,                                                           Executor exec)", "diff": ["-    ", "-    public IncrementalThreadController(boolean start) {", "-      _continueMonitor = new CompletionMonitor(start);", "-      _intermediateResults = new ConcurrentBox<List<I>>(new LinkedList<I>());", "-      if (start) { _status = Status.RUNNING; }", "-    }", "+   */", "+  public static <I, R>", "+      IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task,", "+                                                          Executor exec) {", "+    return computeWithExecutor(task, exec, true, false);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec60c08202913477bed142a694498954", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": "          protected R getValue() throws InterruptedException, InvocationTargetException", "signatureAfterChange": "   public static <I, R>     IncrementalTaskController<I, R> computeInThread(IncrementalTask<? extends I, ? extends R> task,                                                      boolean start, boolean ignoreIntermediate)", "diff": ["-    ", "-    protected R getValue() throws InterruptedException, InvocationTargetException {", "-      start(); // make sure the thread is running", "-      _t.join(); // guarantees that the result and exception are set", "-      if (_exception != null) { throw new InvocationTargetException(_exception); }", "-      else { return _result; }", "-    }", "+   */", "+  public static <I, R>", "+    IncrementalTaskController<I, R> computeInThread(IncrementalTask<? extends I, ? extends R> task, ", "+                                                    boolean start, boolean ignoreIntermediate) {", "+    return computeWithExecutor(task, THREAD_EXECUTOR, start, ignoreIntermediate);"]}], "num": 15139}
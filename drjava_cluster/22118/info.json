{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a01de48876c18a8cc68d2df1be194d4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "733c531fb8b7783913c6e36cb4661fe5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForConstructorDef()", "signatureAfterChange": "          public void testForConstructorDef()", "diff": ["-      VariableDeclaration vd = new VariableDeclaration(SourceInfo.NO_INFO, _finalMav, new VariableDeclarator[] {new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"))});", "-      ExpressionStatement se = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 1)));      ", "-      BracedBody cbb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {se});", "-      ConstructorDef cd = new ConstructorDef(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Jimes\"), _publicMav, new FormalParameter[0], new ReferenceType[0], cbb);", "+      VariableDeclarator[] vds = ", "+        new VariableDeclarator[] { new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                       new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                                       new Word(SourceInfo.NO_INFO, \"i\"))};", "+      ", "+      VariableDeclaration vd =  new VariableDeclaration(SourceInfo.NO_INFO, _finalMav, vds);", "+      SimpleNameReference snr =  ", "+        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"));", "+      ExpressionStatement es = ", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "+                                                               snr, ", "+                                                               new IntegerLiteral(SourceInfo.NO_INFO, 1)));      ", "+      BracedBody cbb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { es });", "+      ConstructorDef cd =  new ConstructorDef(SourceInfo.NO_INFO, ", "+                                              new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                                              _publicMav, ", "+                                              new FormalParameter[0], ", "+                                              new ReferenceType[0], ", "+                                              cbb);", "-      ClassDef classDef = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Jimes\"), new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], b);", "+      ClassDef classDef = ", "+        new ClassDef(SourceInfo.NO_INFO, ", "+                     _publicMav, ", "+                     new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.io.StreamTokenizer\", new Type[0]), ", "+                     new ReferenceType[0], ", "+                     b);", "-      SymbolData sd = new SymbolData(\"Jimes\");", "-      VariableData vData = new VariableData(\"i\", _finalMav, SymbolData.INT_TYPE, false, sd);", "+      SymbolData jimes = new SymbolData(\"Jimes\");", "+      VariableData vData = new VariableData(\"i\", _finalMav, SymbolData.INT_TYPE, false, jimes);", "-      sd.setMav(_publicMav);", "-      sd.setIsContinuation(false);", "-      sd.addVar(vData);", "-      SymbolData sd2 = new SymbolData(\"java.lang.Object\");", "-      sd2.setIsContinuation(false);", "-      sd2.setMav(_publicMav);", "-      sd2.setPackage(\"java.lang\");", "-      sd.setSuperClass(sd2);", "-      symbolTable.put(\"Jimes\", sd);", "-      symbolTable.put(\"java.lang.Object\", sd2);", "-      MethodData md = new MethodData(\"Jimes\", _publicMav, new TypeParameter[0], sd, new VariableData[0], new String[0], sd, cd);", "-      MethodData objMd = new MethodData(\"Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "-      sd.addMethod(md);", "+      jimes.setMav(_publicMav);", "+      jimes.setIsContinuation(false);", "+      jimes.addVar(vData);", "+", "+      symbolTable.put(\"Jimes\", jimes);", "+", "+//      SymbolData obj = _cbbtc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NO_INFO), false, true);", "+      SymbolData tokenizer = _cbbtc.getSymbolData(\"java.io.StreamTokenizer\", new NullLiteral(SourceInfo.NO_INFO), false, true);", "+      jimes.setSuperClass(tokenizer);", "+      SymbolData jutc = defineTestCaseClass();", "+      assert symbolTable.contains(tokenizer);", "+      assert symbolTable.contains(jutc);", "-      //assumes an explicit super call with no arguments", "+      MethodData md = ", "+        new MethodData(\"Jimes\", _publicMav, new TypeParameter[0], jimes, new VariableData[0], new String[0], jimes, cd);", "+      MethodData objMd = ", "+        new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], tokenizer, new VariableData[0], ", "+                       new String[0], tokenizer, cd);", "+      jimes.addMethod(md);", "+      ", "+      // assumes an explicit super call with no arguments", "-      assertEquals(\"Error message should be correct\", \"You must invoke one of java.lang.Object's constructors here.  You can either explicitly invoke one of its exisitng constructors or add a constructor with signature: Object().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You must invoke one of java.io.StreamTokenizer's constructors here.  You can either explicitly \"", "+                     + \"invoke one of its exisitng constructors or add a constructor with signature: StreamTokenizer().\", ", "+                   errors.getLast().getFirst());", "-      sd2.addMethod(objMd); //give super class constructor", "+      tokenizer.addMethod(objMd); //give super class constructor", "-      ", "+      // Since we are going to traverse classDef again, we are resetting the error log.", "+      errors.clear();", "-      cd = new ConstructorDef(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Jimes\"), _publicMav, new FormalParameter[0], new ReferenceType[0], cbb);", "+      cd = new ConstructorDef(SourceInfo.NO_INFO, ", "+                              new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                              _publicMav, ", "+                              new FormalParameter[0], ", "+                              new ReferenceType[0], ", "+                              cbb);", "-      classDef = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Jimes\"), new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], b);", "+      classDef = new ClassDef(SourceInfo.NO_INFO, ", "+                              _publicMav, ", "+                              new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                              new TypeParameter[0], ", "+                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "+                              new ReferenceType[0], b);", "+      System.err.println(\"***** Starting traversal of classDef\");", "+//      System.err.println(\"Error 3 for line 803 of ClassBodyTypeChecker is: \" + errors.get(2).getFirst());", "+      System.err.println(\"Error 2 for line 803 of ClassBodyTypeChecker is: \" + errors.get(1).getFirst());", "+      System.err.println(\"Error 1 for line 803 of ClassBodyTypeChecker is: \" + errors.get(0).getFirst());", "+      ", "-      assertEquals(\"The error message should be correct\", \"The final field i has not been initialized.  Make sure you give it a value in this constructor\", errors.getLast().getFirst());", "+      ", "+      assertEquals(\"The second error message should be correct\", ", "+                   \"The final field i has not been initialized.  Make sure you give it a value in this constructor\", ", "+                   errors.getLast().getFirst());", "-      vData = new VariableData(\"j\", _finalMav, SymbolData.INT_TYPE, false, sd);", "-      sd.setVars(new LinkedList<VariableData>());", "-      sd.addVar(vData);", "+      vData = new VariableData(\"j\", _finalMav, SymbolData.INT_TYPE, false, jimes);", "+      jimes.setVars(new LinkedList<VariableData>());", "+      jimes.addVar(vData);", "-      _cbbtc = new ClassBodyTypeChecker(sd, new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), vs, new LinkedList<Pair<SymbolData, JExpression>>());", "+      _cbbtc = new ClassBodyTypeChecker(jimes, new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), vs, new LinkedList<Pair<SymbolData, JExpression>>());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df3b0210705f67edf0db481a18a468d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "          public void testForTryCatchFinallyStatement()", "signatureAfterChange": "          public void testForTryCatchFinallyStatement()", "diff": ["+                                 null, // enclosingClassName for top level traversal", "-                                 new LinkedList<String>(), ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      llv.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "+      llv.continuations = new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "-      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "-      llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+//      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "+      llv._classesInThisFile = new HashSet<String>();", "+      // preload symbolTable", "+      SymbolData throwable = llv.getQualifiedSymbolData(\"java.lang.Throwable\");", "+      SymbolData exception = llv.getQualifiedSymbolData(\"java.lang.Exception\");", "+      SymbolData string = llv.getQualifiedSymbolData(\"java.lang.String\");", "+      ", "+      assert symbolTable.contains(throwable);", "+      assert symbolTable.contains(exception);", "+      assert symbolTable.contains(string);", "-", "-", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(0).getFirst());", "-            ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught\"", "+                     + \" or declared to be thrown\",", "+                   errors.getLast().getFirst());", "+                   ", "-      assertEquals(\"Error message should be correct\", ", "-                   \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "-                   \"which needs to be caught or declared to be thrown\", ", "+      assertEquals(\"Error message should be correct\",", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught\"", "+                     + \" or declared to be thrown\", ", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "-                   \"which needs to be caught or declared to be thrown\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught\"", "+                     + \" or declared to be thrown\", ", "+                   errors.get(0).getFirst());", "-      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "+      System.err.println(\"Last error was \" + errors.getLast().getFirst());", "+      assertEquals(\"There should still be 1 error\", 1, errors.size());"]}], "num": 22118}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1eb3129b3d7619e4164b5f647b42a831", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955722bb30e72c3f9bba2082dcd9730a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 120, "signatureBeforeChange": "          public void testShouldBreak()", "signatureAfterChange": "          public void testShouldBreak()", "diff": ["-      shift1.visit(_llv);", "+      shift1.visit(testLLVisitor);", "-      shift2.visit(_llv);", "+      shift2.visit(testLLVisitor);", "-      shift3.visit(_llv);", "+      shift3.visit(testLLVisitor);", "-      bit1.visit(_llv);", "+      bit1.visit(testLLVisitor);", "-      bit2.visit(_llv);", "+      bit2.visit(testLLVisitor);", "-      bit3.visit(_llv);", "+      bit3.visit(testLLVisitor);", "-      bit4.visit(_llv);", "+      bit4.visit(testLLVisitor);", "-      bit5.visit(_llv);", "+      bit5.visit(testLLVisitor);", "-      bit6.visit(_llv);", "+      bit6.visit(testLLVisitor);", "-      bit7.visit(_llv);", "+      bit7.visit(testLLVisitor);", "-      shift4.visit(_llv);", "+      shift4.visit(testLLVisitor);", "-      shift5.visit(_llv);", "+      shift5.visit(testLLVisitor);", "-      shift6.visit(_llv);", "+      shift6.visit(testLLVisitor);", "-      e.visit(_llv);", "+      e.visit(testLLVisitor);", "-      noop.visit(_llv);", "+      noop.visit(testLLVisitor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c470fbcc676970460aa52e4be1722d70", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "          @Override public Void visit(ConstructorDeclaration node)", "signatureAfterChange": "          @Override public Void visit(ConstructorDeclaration node)", "diff": ["-      if (call != null) { callChecker.checkConstructorCall(call); }", "-      new StatementChecker(bodyContext, _opt).checkList(node.getStatements());", "-      // if the call is implicit, check it *after* checking the body (better error messages this way) ", "-      if (call == null) { callChecker.checkConstructorCall(new ConstructorCall(null, null, true)); }", "+      ExecutionError error = null;", "+      if (call != null) {", "+        try { callChecker.checkConstructorCall(call); }", "+        catch (ExecutionError e) { error = e; }", "+      }", "+      try { new StatementChecker(bodyContext, _opt).checkList(node.getStatements()); }", "+      catch (ExecutionError e) {", "+        if (error != null) { error = e; }", "+      }", "+      // if the call is implicit, only check it if there are no errors (avoids redundant errors)", "+      if (call == null && error == null) {", "+        callChecker.checkConstructorCall(new ConstructorCall(null, null, true));", "+      }", "+      if (error != null) { throw error; }"]}], "num": 23717}
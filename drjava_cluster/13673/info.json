{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0722f76cac7e55d7f3fb54d76407e48", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2639eba64985976d70c5cba8f3fed304", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   private FindResult findNext(boolean searchAll)", "diff": ["-  public FindResult findNext() {    ", "-    // If the user just found and toggled the \"Search Backwards\"", "-    // option, we should skip the first find.", "-    if (_skipOneFind) {", "-      int wordLength = _lastFindWord.length();", "-      if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "-      else setPosition(getCurrentOffset() - wordLength);", "+  private FindResult findNext(boolean searchAll) {  ", "+ ", "+    // If the user just found a match and toggled the \"Search Backwards\" option, we should skip the matched text.", "+    if (_skipText) {  // adjust position (offset)", "+//      System.err.println(\"Skip text is true!  Last find word = \" + _lastFindWord);", "+      int wordLen = _lastFindWord.length();", "+      if (_isForward) setPosition(getCurrentOffset() + wordLen);", "+      else setPosition(getCurrentOffset() - wordLen);", "-    if (!_searchBackwards) return _findNext(_current.getOffset(), _doc.getLength()-_current.getOffset());", "-    return _findNext(0, _current.getOffset());", "-  }        ", "+    ", "+//    System.err.println(\"findNext(\" + searchAll + \") called with _doc = [\" + _doc.getText() + \"] and offset = \" + _current.getOffset());", "+    ", "+    int offset = getCurrentOffset();", "+//    System.err.println(\"findNext(\" + searchAll + \") called; initial offset is \" + offset);", "+//    System.err.println(\"_doc = [\" + _doc.getText() + \"], _doc.getLength() = \" + _doc.getLength());", "+    if (_isForward) return _findNext(_doc, offset, _doc.getLength() - offset, searchAll);", "+    return _findNext(_doc, 0, offset, searchAll);", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deba24bf2cd1641f302c394119dbf193", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "9d671cad5f849049059b2e199aea7279dd398525", "commitAfterChange": "ef7e8ed674f3435dc8cfe861d137f1cab241f5c2", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 78, "signatureBeforeChange": "   protected static String _testClassCall(String s)", "signatureAfterChange": "   protected static String _transformCommand(String s, String command)", "diff": ["-  /** Assumes a trimmed String. Returns a string of the main call that the interpretor can use. */", "-  protected static String _testClassCall(String s) {", "+    */", "+  protected static String _transformCommand(String s, String command) {", "+    final String classNameWithQuotes = args.get(1); // this is \"MyClass\"", "+    final String className = classNameWithQuotes.substring(1, classNameWithQuotes.length() - 1); // removes quotes, becomes MyClass", "+    final StringBuilder argsString = new StringBuilder();", "-    final String className = args.get(1);", "-    final StringBuilder mainCall = new StringBuilder();", "-    mainCall.append(className.substring(1, className.length() - 1));", "-    mainCall.append(\".main(new String[]{\");", "-      if (seenArg) mainCall.append(\",\");", "+      if (seenArg) argsString.append(\",\");", "-      mainCall.append(args.get(i));", "+      argsString.append(args.get(i));", "-    mainCall.append(\"});\");", "-    return mainCall.toString();", "+    return java.text.MessageFormat.format(command, className, argsString.toString());"]}], "num": 13673}
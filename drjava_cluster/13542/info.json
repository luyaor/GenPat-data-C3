{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb396e58cdd9d7b5d3ff318f62ec8707", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2287552731926dc2e9a916df299fa4e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e56c3e65e7bcf825d7bbbc53538aa94699792774", "commitAfterChange": "a16de484c1abb580ef9842328449e698b77dfd64", "methodNumberBeforeChange": 763, "methodNumberAfterChange": 763, "signatureBeforeChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "diff": ["-        public void windowDeactivated(WindowEvent we) {", "+        final HashSet<Window> trumpedBy = new HashSet<Window>(); // set of windows that trumped this window in getting to the front", "+        final WindowAdapter regainFront = new WindowAdapter() {", "+          public void windowClosed(WindowEvent we) {", "+            // the window that trumped w was closed, so we're moving w back to the front", "+            w.toFront();", "+            w.requestFocus();", "+            toFrontAction.run(we);", "+            // then we remove the window that trumped w from the set of trump windows", "+            Window o = we.getOppositeWindow();", "+            trumpedBy.remove(o);", "+            // and we remove this listener", "+            o.removeWindowListener(this);", "+          }", "+        };", "+        public void toFront(WindowEvent we) {", "+          Window opposite = we.getOppositeWindow();", "+          if (opposite instanceof Dialog) {", "+            Dialog d = (Dialog)opposite;", "+            if (d.isModal()) {", "+              // the other window is a real modal dialog, we'll leave it on top -- the window trumped this window", "+              if (!trumpedBy.contains(d)) {", "+                // add a listener to move this window back to the front when the opposite window has been closed", "+                d.addWindowListener(regainFront);", "+                // add trump window to set of windows that have trumped this window", "+                trumpedBy.add(d);", "+              }", "+              return; ", "+            }", "+          }", "-        public void windowIconified(WindowEvent we) {", "-          we.getWindow().toFront();", "-          we.getWindow().requestFocus();", "-          toFrontAction.run(we);", "-        }", "-        public void windowLostFocus(WindowEvent we) {", "-          we.getWindow().toFront();", "-          we.getWindow().requestFocus();", "-          toFrontAction.run(we);", "-        }", "+        public void windowDeactivated(WindowEvent we) { toFront(we); }", "+        public void windowIconified(WindowEvent we) { toFront(we); }", "+        public void windowLostFocus(WindowEvent we) { toFront(we); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399f05bc7274aaa691b3a3384c918ecd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "commitAfterChange": "2c8ce62ae485e784b2bec820cb7bf72ad52ae36f", "methodNumberBeforeChange": 798, "methodNumberAfterChange": 798, "signatureBeforeChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "diff": ["+        final WindowAdapter regainFrontAfterNative = new WindowAdapter() {", "+          public void windowActivated(WindowEvent we) {", "+            // remove from the three windows this is installed on", "+            MainFrame.this.removeWindowListener(this);", "+            _tabbedPanesFrame.removeWindowListener(this);", "+            _debugFrame.removeWindowListener(this);", "+            // if the window that lost focus because of a native application window", "+            // is still the modal window adapter owner, put it back in front", "+            if (_modalWindowAdapterOwner==w) {", "+              w.toFront();", "+              w.requestFocus();", "+              toFrontAction.run(we);", "+            }", "+          }", "+        };", "-          if (opposite==null) { return; /* probably a native application window, not DrJava */ }", "+          if (opposite==null) {", "+            // Probably a native application window, not DrJava.", "+            // When the user switches back to DrJava, the user may select", "+            // a different window to be on top, but we want w to be on top", "+            // install a listener on MainFrame, the detached panes window, and the", "+            // detached debugger that puts w back on top if one of those windows", "+            // gets selected and w is still the modal window adapter owner.", "+            // This isn't perfect, since the user may select a window other than", "+            // those three, but it is good enough in most cases since those three", "+            // windows are the biggest windows.", "+            MainFrame.this.addWindowListener(regainFrontAfterNative);", "+            _tabbedPanesFrame.addWindowListener(regainFrontAfterNative);", "+            _debugFrame.addWindowListener(regainFrontAfterNative);", "+            return;", "+          }"]}], "num": 13542}
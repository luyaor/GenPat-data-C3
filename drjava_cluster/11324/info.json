{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c490c45c1c9105354c5fc0fbfa789a5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b06a8352f8d2e98078329292924e726b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/jedit/src/edu/rice/cs/drjava/plugins/jedit/repl/JEditInteractionsModel.java", "commitBeforeChange": "273b9e6fd6b611d74f03283118f3b2c112f6192d", "commitAfterChange": "236aa7df79220d757b2ee9df059be4a4c3d5fd28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public JEditInteractionsModel(MainJVM control, SwingDocumentAdapter adapter)", "signatureAfterChange": "   public JEditInteractionsModel(MainJVM control, SwingDocumentAdapter adapter)", "diff": ["-    String classpath = \"\";", "+    String classpath = System.getProperty(\"java.class.path\");", "+    classpath += pathSep;", "+    classpath += JEditPlugin.getDefault().getPluginJAR().getPath();", "-    if (cp.size() > 0) {", "-      classpath += cp.elementAt(0).getAbsolutePath();", "-      for (int i = 1; i < cp.size(); i++) {", "-        cp += pathSep;", "-        classpath += cp.elementAt(i).getAbsolutePath();", "-      }", "-    }", "-    JEditPlugin plugin = JEditPlugin.getDefault();", "-    if (plugin != null) {", "-      classpath += plugin.getPluginJAR().getPath();", "+    for (int i = 0; i < cp.size(); i++) {", "+      classpath += pathSep;", "+      classpath += cp.elementAt(i).getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4fbbada6a8819966f525b5f52ff8821", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/generic/TypeParameter.java", "commitBeforeChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "commitAfterChange": "850fd7d9c2b07bd8d8874ff715e83f1d390c4b0b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public TypeParameter(SourceInfo in_sourceInfo, List<IdentifierToken> ids, ReferenceType in_bound)", "signatureAfterChange": "   public TypeParameter(SourceInfo in_sourceInfo, List<IdentifierToken> ids, ReferenceType in_bound)", "diff": ["-    super(ids, in_sourceInfo.getFilename(), in_sourceInfo.getStartLine(),", "-          in_sourceInfo.getStartColumn(), in_sourceInfo.getEndLine(), in_sourceInfo.getEndColumn());", "-", "-    if (in_bound == null) { /**/ // probably not.   A null indicates a normal type used as a parameter", "-      /**///throw new IllegalArgumentException(\"Parameter 'bound' to the TypeParameter constructor was null. This class may not have null field values.\");", "-    }", "-    _bound = in_bound;", "+    this(in_sourceInfo, TreeUtilities.listToName(ids), in_bound);"]}], "num": 11324}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47d0f323876ec9d151b29f92bfadafdc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a116f2dea3f061502e2b9b1973068e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "commitAfterChange": "1210f15594c9808455815ddca20501677d42bd7f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public ExecuteExternalDialog(MainFrame mf, boolean showRunButton)", "signatureAfterChange": "   public ExecuteExternalDialog(MainFrame mf, boolean editMode, int editIndex, CompletionMonitor cm)", "diff": ["-  public ExecuteExternalDialog(MainFrame mf, boolean showRunButton) {", "+  public ExecuteExternalDialog(MainFrame mf, boolean editMode, int editIndex, CompletionMonitor cm) {", "-    _showRunButton = showRunButton;", "+    _editMode = editMode;", "+    _editIndex = editIndex;", "+    _cm = cm;", "+    if (editMode) {", "+      if (editIndex>=DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT)) {", "+        throw new IllegalArgumentException(\"Trying to edit saved external process that does not exist\");", "+      }", "+      final String type = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).get(editIndex);", "+      final String cmdline = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES).get(editIndex);", "+      final String jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).get(editIndex);", "+      final String workdir = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS).get(editIndex);", "+      if (type.equals(\"cmdline\")) {", "+        _commandLine.setText(cmdline);", "+        _commandWorkDirLine.setText(workdir);", "+        _tabbedPane.remove(_javaPanel);", "+      }", "+      else if (type.equals(\"java\")) {", "+        _javaCommandLine.setText(cmdline);", "+        _jvmLine.setText(jvmargs);", "+        _javaCommandWorkDirLine.setText(workdir);", "+        _tabbedPane.remove(_commandPanel);", "+      }", "+      else {", "+        throw new IllegalArgumentException(\"Trying to edit saved external process of unknown type\");", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce3d60820fca006452c4f6eebedc6eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "2fc1b48ae47904f12ff70a4157426a6f949b079b", "commitAfterChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   private static Log makeLog(String type, String tag)", "diff": ["-  /** Produce a log corresponding to the given type string.  {@code type} may be {@code null}. */", "+  /** Produce a log corresponding to the given type string. */", "-    if (type == null) { return VoidLog.INSTANCE; }", "-    else if (TextUtil.contains(type, ',')) {", "+    if (type != null && TextUtil.contains(type, ',')) {", "-      if (types.length == 0) { return VoidLog.INSTANCE; }", "+      if (types.length == 0) { return makeLog(null, tag); }", "-    else if (type.equals(\"System.out\")) { return new SystemOutLog(); }", "-    else if (type.equals(\"stdout\")) { return new SystemOutLog(); }", "-    else if (type.equals(\"System.err\")) { return new SystemErrLog(); }", "-    else if (type.equals(\"stderr\")) { return new SystemErrLog(); }", "-    else if (type.equals(\"file\")) { return new FileLog(new File(tag.toLowerCase() + \"-log.txt\")); }", "-    else if (type.equals(\"assert\")) { return new AssertEmptyLog(); }", "-    else if (type.equals(\"popup\")) { return new PopupLog(tag + \" Log\"); }", "-    else { return VoidLog.INSTANCE; }", "+    else {", "+      Log result = null;", "+      String factoryName = System.getProperty(\"plt.log.factory\");", "+      if (factoryName != null) {", "+        int dot = factoryName.lastIndexOf('.');", "+        if (dot >= 0) {", "+          String className = factoryName.substring(0, dot);", "+          String methodName = factoryName.substring(dot+1);", "+          try { result = (Log) ReflectUtil.invokeStaticMethod(className, methodName); }", "+          catch (ReflectException e) {", "+            System.err.println(\"Unable to invoke plt.log.factory: \" + e.getCause());", "+          }", "+          catch (ClassCastException e) {", "+            System.err.println(\"Unable to invoke plt.log.factory: \" + e);", "+          }", "+        }", "+      }", "+      if (result == null) {", "+        if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "+        else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "+        else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "+        else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "+        else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "+        else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "+        else if (type.startsWith(\"file:\")) { result = makeFileLog(type.substring(5)); }", "+        else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "+        else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "+        else { result = VoidLog.INSTANCE; }", "+      }", "+      return result;", "+    }", "+  }"]}], "num": 27981}
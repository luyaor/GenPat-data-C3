{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74fe8cef214a0111aacb12a11d8abc14", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164eefc50435432078f05fb8cd352bda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public String getClasspathString()", "signatureAfterChange": "   public String getClasspathString()", "diff": ["-   */", "-  public String getClasspathString() {", "-    StringBuffer cp = new StringBuffer();", "-    for (int i=0; i < _classpath.size(); i++) {", "-      cp.append(_classpath.get(i));", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "-    return cp.toString();", "-  }", "+   */", "+  public String getClasspathString() {", "+    StringBuffer cp = new StringBuffer();", "+    List<ClasspathEntry> locpe = classpathManager.getProjectCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getBuildDirectoryCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getProjectFilesCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getExternalFilesCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getExtraCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+    ", "+    // append system path last", "+    cp.append(System.getProperty(\"java.class.path\"));", "+", "+    return cp.toString();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "245a9cbbf07d28220b1d03a2040a7442", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/StyleUpdateThread.java", "commitBeforeChange": "ab1acd6921fa73274023da473a4888d5bdd6b5f2", "commitAfterChange": "a5a766c0abe1a94ea1cfa69aac7995654eda0886", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void run()", "signatureAfterChange": "  \tpublic void run()", "diff": ["-\t\tSimpleAttributeSet attributes = new SimpleAttributeSet();", "-\t\t//int startOfInterimText = _changedStates.elementAt(0).location;", "-\t\t// Paint all affected text yellow as interim color.", "-//\t\tStyleConstants.setForeground(attributes, StateBlock.INTERIM_COLOR);", "-//\t\t_doc.setCharacterAttributes(startOfInterimText,", "-//\t\t\t\t\t\t\t\t\t\t\t\t\t _doc.getLength() - startOfInterimText,", "-//\t\t\t\t\t\t\t\t\t\t\t\t\t attributes,", "-//\t\t\t\t\t\t\t\t\t\t\t\t\t false);", "-\t\t//synchronized(this) {", "-//\t\ttry {sleep(150);}", "-//\t\tcatch (InterruptedException ex) {}", "-//\t\t\t}", "-\t\tfor (int i = 0; i < _changedStates.size(); i++) {", "-\t\t\tStateBlock currentSB = _changedStates.elementAt(i);", "-\t\t\tif (currentSB.location >= _breakLocation) {", "-\t\t\t\tbreak;", "+\t\twhile (true) {", "+\t\t\twhile (_messages.size() == 0) {", "+\t\t\t\ttry {", "+\t\t\t\t\tsleep(100);", "+\t\t\t\t}", "+\t\t\t\tcatch (InterruptedException e) {}", "-\t\t\tStyleConstants.setForeground(attributes, currentSB.state);", "-\t\t\t_doc.setCharacterAttributes(currentSB.location,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentSB.size,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattributes,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);\t\t\t", "+", "+\t\t\tStyleUpdateMessage nextMessage = _messages.elementAt(0);", "+\t\t\t_messages.removeElementAt(0);", "+\t\t\t", "+\t\t\tif (nextMessage instanceof CompoundUpdateMessage) {", "+\t\t\t\tCompoundUpdateMessage compoundMessage =", "+\t\t\t\t\t(CompoundUpdateMessage)nextMessage;", "+\t\t\t\tfor (int i = 0; i < compoundMessage.size(); i++) {", "+\t\t\t\t\tcurrentSB = compoundMessage.elementAt(i);", "+\t\t\t\t\tif ((_messages.size() != 0) &&", "+\t\t\t\t\t\t\t(_messages.elementAt(0) instanceof CompoundUpdateMessage) &&", "+\t\t\t\t\t\t\t(currentSB.location >", "+\t\t\t\t\t\t\t ((CompoundUpdateMessage)_messages.elementAt(0))", "+\t\t\t\t\t\t\t .elementAt(0).location)) {", "+\t\t\t\t\t\t// Abort the current update because we got a new one.", "+\t\t\t\t\t\t// The abort happens once we've updated using the old info", "+\t\t\t\t\t\t// at least up to where the new one starts.", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t\tStyleConstants.setForeground(attributes, currentSB.state);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tSwingUtilities.invokeAndWait(new Runnable() {", "+\t\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\t\t_doc.setCharacterAttributes(currentSB.location,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentSB.size,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattributes,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t} catch (Exception e) {}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t", "+//\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {", "+//\t\t\t\t\t\tSystem.err.println(\"len=\" + _doc.getLength() +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\", cur=\" + _doc.getCurrentLocation() +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\", loc=\" + currentSB.location +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\", +=\" + currentSB.size);", "+//\t\t\t\t\t}", "+//\t\t\t\t\t_taskCounter.signalProgress();", "+//\t\t\t\t\tDrJava.consoleOut().println(\"Compound: \" + currentSB.location + \", \" +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t currentSB.size + \": \" +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t currentSB.state);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\telse if (nextMessage instanceof SimpleUpdateMessage) {", "+\t\t\t\t\tcurrentSB = ((SimpleUpdateMessage)nextMessage)", "+\t\t\t\t\t\t.getStateBlock();", "+\t\t\t\t\tStyleConstants.setForeground(attributes, currentSB.state);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tSwingUtilities.invokeAndWait(new Runnable() {", "+\t\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\t\t_doc.setCharacterAttributes(currentSB.location,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentSB.size,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tattributes,", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t} catch (Exception e) {}", "+//\t\t\t\t\tDrJava.consoleOut().println(\"Simple: \" + currentSB.location + \", \" +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t currentSB.size + \": \" +", "+//\t\t\t\t\t\t\t\t\t\t\t\t\t\t currentSB.state);", "+", "+\t\t\t}", "+\t\t\telse { // nextMessage instanceof NoUpdateMessage", "+//\t\t\t\t\tDrJava.consoleOut().println(\"No update\");", "+\t\t\t}", "+\t\t\t_taskCounter.decrement();"]}], "num": 17884}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5f4142eb31a60df1deaae1e04f52d0d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "294764ba004d4f5713ef7b6b8edef3ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 637, "methodNumberAfterChange": 637, "signatureBeforeChange": "          public File[] filesReadOnly(File... files)", "signatureAfterChange": "          public File[] filesReadOnly(File... files)", "diff": ["-      for (File f : files) {", "-        filePaths.add(f.getPath());", "-      }", "+      for (File f : files) { filePaths.add(f.getPath()); }", "-                                                \"The following file could not be saved because it is read-only.\\n\"+", "-                                                \"Do you want to overwrite it anyway?\\n\"+", "-                                                files[0].getPath(),", "+                                                \"The following file could not be saved because it is read-only.\\n\" +", "+                                                \"Do you want to overwrite it anyway?\\n\" + files[0].getPath(),", "-        overwrite = (res==0);", "+        overwrite = (res == 0);", "-        overwrite = (dialog.getButtonPressed()==0);", "+        overwrite = (dialog.getButtonPressed() == 0);", "-        if (files.length==1) { return files; }", "+        if (files.length == 1) return files;", "-          for(String s: dialog.getSelectedItems()) {", "-            overwriteFiles[i++] = new File(s);", "-          }", "+          for(String s: dialog.getSelectedItems()) { overwriteFiles[i++] = new File(s); }", "-      else {", "-        return new File[0];", "-      }", "+      else return new File[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b431d270e71d0cf2f54d6a2ee43eb1b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   @Override public TypeContext visit(ForEachStatement node)", "signatureAfterChange": "   @Override public TypeContext visit(ForEachStatement node)", "diff": ["-        TypeSystem.MethodInvocation iteratorInv = ts.lookupMethod(node.getCollection(), \"iterator\", ", "-                                                                  IterUtil.<Type>empty(),", "-                                                                  IterUtil.<Expression>empty());", "+        MethodInvocation iteratorInv = ts.lookupMethod(node.getCollection(), \"iterator\", ", "+                                                       IterUtil.<Type>empty(),", "+                                                       IterUtil.<Expression>empty(),", "+                                                       Option.<Type>none());", "-        TypeSystem.MethodInvocation nextInv = ts.lookupMethod(getIterator, \"next\", ", "-                                                              IterUtil.<Type>empty(),", "-                                                              IterUtil.<Expression>empty());", "+        MethodInvocation nextInv = ts.lookupMethod(getIterator, \"next\", ", "+                                                   IterUtil.<Type>empty(),", "+                                                   IterUtil.<Expression>empty(),", "+                                                   Option.<Type>none());"]}], "num": 8660}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a07f493ab112c8a13cdc94b7494b048a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f034ff10158984f4e1908d612d0fa15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public Object visit(ComplementExpression node)", "signatureAfterChange": "   public Class visit(ComplementExpression node)", "diff": ["-     */", "-    public Object visit(ComplementExpression node) {", "-        // Check the type", "-        Node  n = node.getExpression();", "-        Class c = (Class)n.acceptVisitor(this);", "-", "-        if (c == char.class || c == byte.class || c == short.class) {", "-            node.setProperty(NodeProperties.TYPE, c = int.class);", "-        } else if (c == int.class  || c == long.class) {", "-            node.setProperty(NodeProperties.TYPE, c);", "-        } else {", "-            throw new ExecutionError(\"complement.expression.type\", node);", "-        }", "-", "-        // Compute the expression if it is constant", "-        if (n.hasProperty(NodeProperties.VALUE)) {", "-            Object o = n.getProperty(NodeProperties.VALUE);", "-            if (o instanceof Character) {", "-                o = new Integer(((Character)o).charValue());", "-            }", "-            if (c == int.class) {", "-\t\to = new Integer(~((Number)o).intValue());", "-            } else {", "-\t\to = new Long(~((Number)o).longValue());", "-            }", "-\t    node.setProperty(NodeProperties.VALUE, o);", "-        }", "-        return c;", "+   */", "+  public Class visit(ComplementExpression node) {", "+    // Check the type", "+    Node  n = node.getExpression();", "+    Class c = (Class)n.acceptVisitor(this);", "+    ", "+    if (c == char.class || c == byte.class || c == short.class) {", "+      node.setProperty(NodeProperties.TYPE, c = int.class);", "+    } else if (c == int.class  || c == long.class) {", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } else {", "+      throw new ExecutionError(\"complement.expression.type\", node);", "+    ", "+    // Compute the expression if it is constant", "+    if (n.hasProperty(NodeProperties.VALUE)) {", "+      Object o = n.getProperty(NodeProperties.VALUE);", "+      if (o instanceof Character) {", "+        o = new Integer(((Character)o).charValue());", "+      }", "+      if (c == int.class) {", "+        o = new Integer(~((Number)o).intValue());", "+      } else {", "+        o = new Long(~((Number)o).longValue());", "+      }", "+      node.setProperty(NodeProperties.VALUE, o);", "+    }", "+    return c;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a52e53341488c32360faeab7437950", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public Object visit(AddExpression node)", "signatureAfterChange": "   public Class visit(AddExpression node)", "diff": ["-     */", "-    public Object visit(AddExpression node) {", "-        // Check the types", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)rn.acceptVisitor(this);", "-\tClass c  = String.class;", "-", "-\tif (lc != String.class && rc != String.class) {", "-\t    c = visitNumericExpression(node, \"addition.type\");", "-\t} else {", "-\t    node.setProperty(NodeProperties.TYPE, c = String.class);", "-\t}", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.add(c,", "-                                          ln.getProperty(NodeProperties.VALUE),", "+   */", "+  public Class visit(AddExpression node) {", "+    // Check the types", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)rn.acceptVisitor(this);", "+    Class c  = String.class;", "+    ", "+    if (lc != String.class && rc != String.class) {", "+      c = visitNumericExpression(node, \"addition.type\");", "+    } else {", "+      node.setProperty(NodeProperties.TYPE, c = String.class);", "+    }", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.add(c,", "+                                  ln.getProperty(NodeProperties.VALUE),", "+                                  rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-        }", "-\treturn c;"]}], "num": 26302}
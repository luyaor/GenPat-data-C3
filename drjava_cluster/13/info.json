{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3ebe155c9ca5ba8424da14476dec6e6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "333b551d497e488f6f237da3792be694", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forTryCatchStatementDoFirst(TryCatchStatement that)", "signatureAfterChange": "   public Void forInnerInterfaceDef(InnerInterfaceDef that)", "diff": ["-  /** Override method in IntermediateVisitor that throws an error here.*/", "-  public Void forTryCatchStatementDoFirst(TryCatchStatement that) { return null; /*  No errors to throw here. */ }", "+  /** Process a local inner interface definition */", "+    System.err.println(\"***Signalling local interface error\");", "+    _addAndIgnoreError(\"Local interfaces are illegal in Java.\", that);", "+//    handleInnerInterfaceDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + '.' + ", "+//                        _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+//    // How do we know that generated number is correct?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0cdd6d1568ae3163d4ed45d36b30d2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public Void forInnerInterfaceDef(InnerInterfaceDef that)", "signatureAfterChange": "   public Void forInnerInterfaceDef(InnerInterfaceDef that)", "diff": ["-  /** Process a local inner interface definition */", "+  /** Process a local interface definition */", "-    // TODO: is this necessarily local?", "-    handleInnerInterfaceDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + \".\"", "-                              + _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+    _addAndIgnoreError(\"Local interfaces are illegal in Java.\", that);"]}], "num": 13}
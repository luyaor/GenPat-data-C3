{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54d5af375e842b64fe3e8091ef8881a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "893d3a96aff33c451a533ff123ecd4f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 343, "signatureBeforeChange": "           public SignatureChecker value(DJMethod m)", "signatureAfterChange": "     public ErasedMethod(DJMethod m)", "diff": ["+  private class ErasedMethod extends DelegatingMethod {", "+    public ErasedMethod(DJMethod m) { super(m); }", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            // TODO: substitute out class type parameters from the method's parameters' bounds", "-            //       (how does the JLS handle this?)", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, ", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "-                               args, m.returnType(), expected);", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c84ad295f3cd0dbcdc6062608abb836e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 281, "methodNumberAfterChange": 358, "signatureBeforeChange": "              @Override public Iterable<ConstructorInvocation> forSimpleClassType(final SimpleClassType t)", "signatureAfterChange": "     public ErasedConstructor(DJConstructor k)", "diff": ["+  private class ErasedConstructor extends DelegatingConstructor {", "+    public ErasedConstructor(DJConstructor k) { super(k); }", "-      ", "-      @Override public Iterable<ConstructorInvocation> forSimpleClassType(final SimpleClassType t) {", "-        Iterable<DJConstructor> allConstructors = t.ofClass().declaredConstructors();", "-        Lambda<DJConstructor, SignatureChecker> makeChecker = ", "-          new Lambda<DJConstructor, SignatureChecker>() {", "-          public SignatureChecker value(DJConstructor k) {", "-            //debug.logValues(new String[]{\"k\", \"declaredParameterTypes\"}, k, SymbolUtil.declaredParameterTypes(k));", "-            return makeChecker(k.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(k),", "-                               args, t, expected);", "-          }", "-        };", "-        Lambda2<DJConstructor, SignatureChecker, ConstructorInvocation> makeResult = ", "-          new Lambda2<DJConstructor, SignatureChecker, ConstructorInvocation>() {", "-          public ConstructorInvocation value(DJConstructor k, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(),", "-                                                        checker.typeArguments());", "-            // TODO: Handle the thrown types (using sigma)", "-            return new ConstructorInvocation(k, checker.typeArguments(), checker.arguments(), ", "-                                             k.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(allConstructors, makeChecker, makeResult);", "-      }"]}], "num": 15140}
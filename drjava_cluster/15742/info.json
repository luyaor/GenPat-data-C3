{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1cb767759cfa4ae69b04a3d4ee230c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e638d988c41d4691573a5957b9aee39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/InnerAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args)", "signatureAfterChange": "   public InnerAllocation(Expression exp, String cn, Option<List<TypeName>> ctargs, List<? extends Expression> args)", "diff": ["-  public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args) {", "-    this(exp, cn, ctargs, args, SourceInfo.NONE);", "+  public InnerAllocation(Expression exp, String cn, Option<List<TypeName>> ctargs, List<? extends Expression> args) {", "+    this(exp, Option.<List<TypeName>>none(), cn, ctargs, args, SourceInfo.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90a1627874680645772be5145d3734ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private Iterable<Type> checkList(Iterable<? extends Expression> l)", "signatureAfterChange": "      public Iterable<Type> checkList(Iterable<? extends Expression> l)", "diff": ["-   */", "-  private Iterable<Type> checkList(Iterable<? extends Expression> l) {", "-    return IterUtil.mapSnapshot(l, this);", "+  ", "+  public Iterable<Type> checkList(Iterable<? extends Expression> l) {", "+    return IterUtil.mapSnapshot(l, new ExpressionVisitor(Option.<Type>none()));", "+  }"]}], "num": 15742}
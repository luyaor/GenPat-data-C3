{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98e577f64a9bbacc54784a63d44faae2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2da568b68d7e224cac7cda964a0ab940", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 224, "methodNumberAfterChange": 218, "signatureBeforeChange": "      protected Type immediateSupertype(SimpleClassType t)", "signatureAfterChange": "   protected Type immediateSupertype(ClassType t)", "diff": ["+  /** Get a class type's immediate supertype.  The result may be null. */", "-  ", "-  protected Type immediateSupertype(SimpleClassType t) {", "-    // can't use meet here because there may be a circular dependency with subtyping", "-    else { return new IntersectionType(IterUtil.compose(OBJECT, t.ofClass().declaredSupertypes())); }", "+    else {", "+      final Iterable<Type> declaredSupers = t.ofClass().declaredSupertypes();", "+      if (IterUtil.isEmpty(declaredSupers)) { return OBJECT; }", "+      else {", "+        Iterable<? extends Type> instantiatedSupers = t.apply(new TypeAbstractVisitor<Iterable<? extends Type>>() {", "+          @Override public Iterable<? extends Type> defaultCase(Type t) { return declaredSupers; }", "+          @Override public Iterable<? extends Type> forRawClassType(RawClassType t) {", "+            return IterUtil.mapSnapshot(declaredSupers, ERASE);", "+          }", "+          @Override public Iterable<? extends Type> forParameterizedClassType(ParameterizedClassType t) {", "+            ParameterizedClassType tCap = capture(t);", "+            DJClass c = tCap.ofClass();", "+            return substitute(c.declaredSupertypes(), SymbolUtil.allTypeParameters(c), tCap.typeArguments());", "+          }", "+        });", "+        if (IterUtil.sizeOf(instantiatedSupers, 2) > 1) { return new IntersectionType(instantiatedSupers); }", "+        else { return IterUtil.first(instantiatedSupers); }", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5addd67313ddacd3613330482159552", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 249, "signatureBeforeChange": "   protected Type immediateSupertype(ClassType t)", "signatureAfterChange": "      private Type fieldType(final DJField f, Type declaringType)", "diff": ["-  /** Get a class's immediate supertype.  The result is either null or the result of a {@link #meet} call. */", "-    return t.apply(new TypeAbstractVisitor<Type>() {", "-      public Type defaultCase(Type t) { throw new IllegalArgumentException(); }", "-      public Type forSimpleClassType(SimpleClassType t) { return immediateSupertype(t); }", "-      public Type forRawClassType(RawClassType t) { return immediateSupertype(t); }", "-      public Type forParameterizedClassType(ParameterizedClassType t) { return immediateSupertype(t); }", "-    });", "-  }", "+  ", "+  private Type fieldType(final DJField f, Type declaringType) {", "+    return declaringType.apply(new TypeAbstractVisitor<Type>() {", "+      @Override public Type defaultCase(Type declaringType) { return f.type(); }", "+      @Override public Type forRawClassType(RawClassType declaringType) { return erase(f.type()); }", "+      @Override public Type forParameterizedClassType(ParameterizedClassType declaringType) {", "+        ParameterizedClassType cap = capture(declaringType);", "+        return substitute(f.type(), SymbolUtil.allTypeParameters(cap.ofClass()), cap.typeArguments());", "+      }"]}], "num": 414}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e93355aa1cf0544219fc8825c6085e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d251f1fe978a9b0ecd3c87a380b99b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "224d0c84f840f8ce41af8c46df98c9446d0323a9", "commitAfterChange": "23d1c475c29f1525fd3971f7ee4a6f8e9616fd8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static Test suite()", "signatureAfterChange": "   public static Test suite()", "diff": ["-    return  new TestSuite(GlobalModelOtherTest.class);", "+    TestSuite suite = new TestSuite(GlobalModelOtherTest.class);", "+", "+    // wrapper allows these methods to be run once before/after all tests", "+    // respectively", "+    TestSetup wrapper = new TestSetup(suite) {", "+      public void setUp() {", "+        DrJava.enableSecurityManager();", "+      }", "+", "+      public void tearDown() {", "+        DrJava.disableSecurityManager();", "+      }", "+    };", "+", "+    return wrapper;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711fdd68bd468ac9219206a1598d920a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/FileConfiguration.java", "commitBeforeChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "commitAfterChange": "0b53b816728d7888dd8424a695754000657f778a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void saveConfiguration(String header) throws IOException", "signatureAfterChange": "   public void saveConfiguration(final String header) throws IOException", "diff": ["-  public void saveConfiguration(String header) throws IOException {", "-    OutputStream os = new BufferedOutputStream(new FileOutputStream(file));", "-    super.saveConfiguration(os,header);", "-    os.close(); // in this implementation, close the file after saving.", "+  public void saveConfiguration(final String header) throws IOException {", "+    FileOps.saveFile(new FileOps.DefaultFileSaver(file){", "+\tpublic void saveTo(File file) throws IOException {", "+\t  OutputStream os = new BufferedOutputStream(new FileOutputStream(file));", "+\t  saveConfiguration(os,header);", "+\t  os.close(); // in this implementation, close the file after saving.", "+\t}", "+\tpublic boolean shouldBackup(){", "+\t  return false;", "+\t}", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda47fd6582d519d139d817bc1096a65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "6cf7109c051951c37bb5c3d5a185c43cb04511a0", "commitAfterChange": "5a0b0e9e35705d89ba0a2d05c390e3df356c459c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void _init()", "signatureAfterChange": "      private void _init()", "diff": ["+    });", "+    ", "+    _documentNavigator.addFocusListener(new FocusListener() {", "+      public void focusGained(FocusEvent e) { ", "+//        Utilities.show(\"focusGained called with event \" + e);", "+        _notifier.focusOnDefinitionsPane(); ", "+      }", "+      public void focusLost(FocusEvent e) { }"]}], "num": 2711}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "075347c4d2894c7951aa96e77b116fba", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "787e78effcfa68c00a91b43ab505d798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 1, "signatureBeforeChange": "   protected void slaveQuitDuringStartup(int status)", "signatureAfterChange": "     public AbstractSlaveJVM value()", "diff": ["+    public SlaveFactory(String className) { _className = className; }", "+    public AbstractSlaveJVM value() {", "+      try { return (AbstractSlaveJVM) ReflectUtil.getStaticField(_className, \"ONLY\"); }", "+      catch (ReflectException e) {", "+        try { return (AbstractSlaveJVM) ReflectUtil.loadObject(_className); }", "+        catch (ReflectException e2) { throw new WrappedException(e2); }", "+     }", "+    }", "-    */", "-  protected void slaveQuitDuringStartup(int status) {", "-    // Reset Master JVM state (in case invokeSlave is called again on this object)", "-    _startupInProgress = false;", "-    _quitOnStartup = false;", "-    _monitorThread = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a229e6f10de1f88dbf689aad2477bad1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "    protected void handleSlaveQuit(int status)", "signatureAfterChange": "           public void run()", "diff": ["-", "-  protected void handleSlaveQuit(int status) {", "-    if (_enabled) {", "-      startInterpreterJVM();", "-    }", "-", "-    _model.replCalledSystemExit(status);", "-  }", "+        Thread thread = new Thread() {", "+          public void run() {", "+            try {", "+              int status = _interpreterProcess.waitFor();", "+              restartInterpreterJVM();", "+              _model.replCalledSystemExit(status);", "+            }", "+            catch (InterruptedException ie) {", "+              throw new edu.rice.cs.util.UnexpectedException(ie);", "+            }", "+          }"]}], "num": 6860}
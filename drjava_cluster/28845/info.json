{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67296e4e112e78ec7e2327d729989fb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a696799ee1bb4651d3cc2f730598cfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/UncaughtExceptionWindow.java", "commitBeforeChange": "8a3aaf6e3fe6fafb27249a8ad4b2c013ef4ae05a", "commitAfterChange": "102797244429ae58868d0037b49467f5a00bbd6a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public UncaughtExceptionWindow(Throwable exception)", "signatureAfterChange": "   public UncaughtExceptionWindow(JFrame frame, Throwable exception)", "diff": ["-  public UncaughtExceptionWindow(Throwable exception) {", "+  public UncaughtExceptionWindow(JFrame frame, Throwable exception) {", "+    super(frame,\"Unexpected Error\");", "-    this.setLocation(200,200);", "-    Insets ins = new Insets(20,20,20,20);", "+    //this.setLocation(200,200);", "+    setLocationRelativeTo(frame);", "-      // If we set this pane to be of type text/rtf, it wraps based on words", "-      // as opposed to based on characters.", "+    //Insets ins = new Insets(20,20,20,20);", "+    ", "+    // If we set this pane to be of type text/rtf, it wraps based on words", "+    // as opposed to based on characters.", "-    _stackTrace.setBackground(new Color(204,204,204));", "-    _stackTrace.setMargin(ins);", "-    _exceptionInfo = new JTextArea(_getExceptionString());", "-    _exceptionInfo.setBackground(new Color(204,204,204));", "-    _exceptionInfo.setMargin(ins);", "-    _exceptionInfo.setEditable(false);", "-    _exceptionInfo.setLineWrap(true);", "-    _exceptionInfo.setWrapStyleWord(true);", "+    //_stackTrace.setBackground(new Color(204,204,204));", "+    // _stackTrace.setMargin(ins);", "+    msg[1] = exception.toString();", "+    _exceptionInfo = new JOptionPane(msg,JOptionPane.ERROR_MESSAGE,", "+                                     JOptionPane.DEFAULT_OPTION,null,", "+                                     new Object[0]);", "+      //new JTextArea(_getExceptionString());", "+    //_exceptionInfo.setBackground(new Color(204,204,204));", "+    //_exceptionInfo.setMargin(ins);", "+    //_exceptionInfo.setEditable(false);", "+    //_exceptionInfo.setLineWrap(true);", "+    //_exceptionInfo.setWrapStyleWord(true);", "-    _okPanel.setBackground(new Color(204,204,204));", "+    //_okPanel.setBackground(new Color(204,204,204));", "-    _topPanel = new JPanel();//new BorderLayout());", "-    _topPanel.add(_exceptionInfo);//, BorderLayout.CENTER);", "+    //_topPanel = new JPanel();//new BorderLayout());", "+    //_topPanel.add(_exceptionInfo);//, BorderLayout.CENTER);", "-    _stackTraceScroll = new JScrollPane(_stackTrace, ", "-                                        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,", "-                                        JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);", "-    this.getContentPane().setLayout(new BorderLayout());", "-    this.getContentPane().add(_exceptionInfo, BorderLayout.NORTH);", "-    this.getContentPane().add(_stackTraceScroll, BorderLayout.CENTER);", "-    this.getContentPane().add(_okPanel, BorderLayout.SOUTH);", "-    this.setTitle(\"Uncaught Exception\");", "+    _stackTraceScroll = new ", "+      BorderlessScrollPane(_stackTrace, ", "+                           JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,", "+                           JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);", "+    JPanel cp = new JPanel(new BorderLayout(5,5));", "+    cp.setBorder(new EmptyBorder(5,5,5,5));", "+    setContentPane(cp);", "+    cp.add(_exceptionInfo, BorderLayout.NORTH);", "+    cp.add(_stackTraceScroll, BorderLayout.CENTER);", "+    cp.add(_okPanel, BorderLayout.SOUTH);", "+    // this.setTitle(\"Uncaught Exception\");", "-    this.setVisible(true);", "+    //this.setVisible(true);", "+    show();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21dafc9c093771ab07c30f5acff457e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "4fb080a38871d6561e99bfdfdb664ff987fb15c5", "commitAfterChange": "d8298bba22e8675e12094f851d61d88ab6c6f68a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      public void testBookmark() throws Exception", "signatureAfterChange": "      public void testBookmark() throws Exception", "diff": ["-    assertEquals(\"Should be 3 bookmarks\", 3, bms.size());", "-    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "-    assertEquals(\"Start offset should be 8\", 8, bms.get(2).getStartOffset());", "-    assertEquals(\"End offset should be 12\", 12, bms.get(2).getEndOffset());", "+    assertEquals(\"Should be 1 bookmarks\", 1, bms.size());", "+    assertEquals(\"Start offset should be 3\", 8, bms.get(0).getStartOffset());", "+    assertEquals(\"End offset should be 6\", 12, bms.get(0).getEndOffset());", "-    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());", "-    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "+    assertEquals(\"Should be 0 bookmarks\", 0, bms.size());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(0).getEndOffset());", "-    _model.toggleBookmark(10,5);", "+    assertEquals(\"Start offset should be 5\", 3, bms.get(0).getStartOffset());", "+    assertEquals(\"End offset should be 10\", 6, bms.get(0).getEndOffset());", "+    _model.toggleBookmark(3,3);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f2f3ada3f2a9c8358854be558c6a466", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());", "-                 _defModel.getText(0, _defModel.getLength()));", "+                 _defModel.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94ada46c266aa11f26e81a4bb435d786", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void testBookmark() throws Exception", "signatureAfterChange": "      public void testBookmark() throws Exception", "diff": ["-    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());", "+    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());  // the bookmarks are disjoint", "-    assertEquals(\"Should be 3 bookmarks\", 3, bms.size());", "-    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "-    assertEquals(\"Start offset should be 8\", 8, bms.get(2).getStartOffset());", "-    assertEquals(\"End offset should be 12\", 12, bms.get(2).getEndOffset());", "+    assertEquals(\"Should be 0 bookmarks\", 0, bms.size());  // the preceding two bookmarks overlapped and were deleted", "+//    assertEquals(\"Start offset should be 5\", 5, bms.get(0).getStartOffset());", "+//    assertEquals(\"End offset should be 10\", 10, bms.get(0).getEndOffset());", "+//    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "+//    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "+//    assertEquals(\"Start offset should be 8\", 8, bms.get(2).getStartOffset());", "+//    assertEquals(\"End offset should be 12\", 12, bms.get(2).getEndOffset());", "-    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());", "-    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "+    assertEquals(\"Should be 1 bookmarks\", 1, bms.size());  // no preceding bookmark", "+    assertEquals(\"Start offset should be 8\", 8, bms.get(0).getStartOffset());", "+    assertEquals(\"End offset should be 12\", 12, bms.get(0).getEndOffset());", "+//    assertEquals(\"Start offset should be 5\", 5, bms.get(1).getStartOffset());", "+//    assertEquals(\"End offset should be 10\", 10, bms.get(1).getEndOffset());", "-    assertEquals(\"Should be 1 bookmarks\", 1, bms.size());", "-    assertEquals(\"Start offset should be 5\", 5, bms.get(0).getStartOffset());", "-    assertEquals(\"End offset should be 10\", 10, bms.get(0).getEndOffset());", "+    assertEquals(\"Should be 2 bookmarks\", 2, bms.size());  // no overlap", "+    assertEquals(\"Start offset should be 3\", 3, bms.get(0).getStartOffset());", "+    assertEquals(\"End offset should be 6\", 6, bms.get(0).getEndOffset());", "+    assertEquals(\"Start offset should be 8\", 8, bms.get(1).getStartOffset());", "+    assertEquals(\"End offset should be 12\", 12, bms.get(1).getEndOffset());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a470be59e885618acce788bcb799d86c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AutoCompletePopup.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void show(final Component parent,                    final String title,                    final String initial,                    final int loc,                    final SizedIterable<String> actionNames,                    final SizedIterable<KeyStroke> actionKeyStrokes,                    final int oneMatchActionIndex,                    final Runnable canceledAction,                    final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions)", "signatureAfterChange": "   public void show(final Component parent,                    final String title,                    final String initial,                    final int loc,                    final SizedIterable<String> actionNames,                    final SizedIterable<KeyStroke> actionKeyStrokes,                    final int oneMatchActionIndex,                    final Runnable canceledAction,                    final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions)", "diff": ["-                   final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions) {", "+                   final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions) {", "-        ClassNameAndPackageEntry currentEntry = null;", "-        HashSet<ClassNameAndPackageEntry> set;", "-        if ((DrJava.getConfig().getSetting(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue()) &&", "-            (_mainFrame.getCompleteClassSet().size() > 0)) {", "-          set = new HashSet<ClassNameAndPackageEntry>(_mainFrame.getCompleteClassSet());", "-        }", "-        else {", "-          set = new HashSet<ClassNameAndPackageEntry>(docs.size());", "-          for(OpenDefinitionsDocument d: docs) {", "-            if (d.isUntitled()) continue;", "-            String str = d.toString();", "-            if (str.lastIndexOf('.')>=0) {", "-              str = str.substring(0, str.lastIndexOf('.'));", "-            }", "-            GoToFileListEntry entry = new GoToFileListEntry(d, str);", "-            if (d.equals(_mainFrame.getModel().getActiveDocument())) currentEntry = entry;", "-            set.add(entry);", "+        AutoCompletePopupEntry currentEntry = null;", "+        _docEntries.clear();", "+        for(OpenDefinitionsDocument d: docs) {", "+          if (d.isUntitled()) continue;", "+          String str = d.toString();", "+          if (str.lastIndexOf('.')>=0) {", "+            str = str.substring(0, str.lastIndexOf('.'));", "+          GoToFileListEntry entry = new GoToFileListEntry(d, str);", "+          if (d.equals(_mainFrame.getModel().getActiveDocument())) currentEntry = entry;", "+          _docEntries.add(entry);", "-          addJavaAPIToSet(set);", "+          addJavaAPI();", "-        final PredictiveInputModel<ClassNameAndPackageEntry> pim = ", "-          new PredictiveInputModel<ClassNameAndPackageEntry>(true, new PrefixStrategy<ClassNameAndPackageEntry>(), set);", "+        final PredictiveInputModel<AutoCompletePopupEntry> pim = ", "+          new PredictiveInputModel<AutoCompletePopupEntry>(true, new PrefixStrategy<AutoCompletePopupEntry>(), _allEntries);", "-                Iterator<Runnable4<String,String,Integer,Integer>> actionIt =", "+                Iterator<Runnable3<AutoCompletePopupEntry,Integer,Integer>> actionIt =", "-                Runnable4<String,String,Integer,Integer> action;", "+                Runnable3<AutoCompletePopupEntry,Integer,Integer> action;", "-                action.run(pim.getCurrentItem().getClassName(),", "-                           pim.getCurrentItem().getFullPackage()+pim.getCurrentItem().getClassName(),", "-                           finalStart, loc);", "+                action.run(pim.getCurrentItem(), finalStart, loc);", "-        final PredictiveInputFrame<ClassNameAndPackageEntry> completeWordDialog = ", "+        final PredictiveInputFrame<AutoCompletePopupEntry> completeWordDialog = ", "-        final ClassNameAndPackageEntry finalCurrentEntry = currentEntry;", "+        final AutoCompletePopupEntry finalCurrentEntry = currentEntry;", "+            ", "+            if (_lastState != null) {", "+              completeWordDialog.setFrameState(_lastState);", "+            }", "+            "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c999e6739b6854831e204c2246cf1daa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AutoCompletePopup.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": "      PredictiveInputFrame<ClassNameAndPackageEntry>     createCompleteWordDialog(final String title,                              final int start,                              final int loc,                              final SizedIterable<String> actionNames,                              final SizedIterable<KeyStroke> actionKeyStrokes,                              final Runnable canceledAction,                              final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions)", "signatureAfterChange": "      protected PredictiveInputFrame<AutoCompletePopupEntry>     createCompleteWordDialog(final String title,                              final int start,                              final int loc,                              final SizedIterable<String> actionNames,                              final SizedIterable<KeyStroke> actionKeyStrokes,                              final Runnable canceledAction,                              final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions)", "diff": ["-  PredictiveInputFrame<ClassNameAndPackageEntry>", "+  ", "+  protected PredictiveInputFrame<AutoCompletePopupEntry>", "-                             final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions) {", "-    final SimpleBox<PredictiveInputFrame<ClassNameAndPackageEntry>> dialogThunk =", "-      new SimpleBox<PredictiveInputFrame<ClassNameAndPackageEntry>>();", "+                             final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions) {", "+    final SimpleBox<PredictiveInputFrame<AutoCompletePopupEntry>> dialogThunk =", "+      new SimpleBox<PredictiveInputFrame<AutoCompletePopupEntry>>();", "-        Set<ClassNameAndPackageEntry> s = new HashSet<ClassNameAndPackageEntry>(dialogThunk.value().getItems());", "-        if (_completeJavaAPICheckbox.isSelected()) {", "-          DrJava.getConfig().setSetting(OptionConstants.DIALOG_COMPLETE_JAVAAPI, Boolean.TRUE);", "-          addJavaAPIToSet(s);", "-          dialogThunk.value().setItems(true,s);", "-        }", "-        else {", "-          // unselected, remove Java API classes from list", "-          DrJava.getConfig().setSetting(OptionConstants.DIALOG_COMPLETE_JAVAAPI, Boolean.FALSE);", "-          removeJavaAPIFromSet(s);", "-          dialogThunk.value().setItems(true,s);", "-        }", "+        DrJava.getConfig().setSetting(OptionConstants.DIALOG_COMPLETE_JAVAAPI, _completeJavaAPICheckbox.isSelected());", "+        if (_completeJavaAPICheckbox.isSelected()) addJavaAPI(); else removeJavaAPI();", "+        dialogThunk.value().setItems(true,_allEntries);", "-    PredictiveInputFrame.InfoSupplier<ClassNameAndPackageEntry> info = ", "-      new PredictiveInputFrame.InfoSupplier<ClassNameAndPackageEntry>() {", "-      public String value(ClassNameAndPackageEntry entry) {", "+    PredictiveInputFrame.InfoSupplier<AutoCompletePopupEntry> info = ", "+      new PredictiveInputFrame.InfoSupplier<AutoCompletePopupEntry>() {", "+      public String value(AutoCompletePopupEntry entry) {", "-    List<PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>> actions", "-      = new ArrayList<PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>>();", "+    List<PredictiveInputFrame.CloseAction<AutoCompletePopupEntry>> actions", "+      = new ArrayList<PredictiveInputFrame.CloseAction<AutoCompletePopupEntry>>();", "-    Iterator<Runnable4<String,String,Integer,Integer>> actionIt =", "+    Iterator<Runnable3<AutoCompletePopupEntry,Integer,Integer>> actionIt =", "-      final Runnable4<String,String,Integer,Integer> runnable = actionIt.next();", "+      final Runnable3<AutoCompletePopupEntry,Integer,Integer> runnable = actionIt.next();", "-      PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry> okAction =", "-        new PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>() {", "+      PredictiveInputFrame.CloseAction<AutoCompletePopupEntry> okAction =", "+        new PredictiveInputFrame.CloseAction<AutoCompletePopupEntry>() {", "-        public Object value(final PredictiveInputFrame<ClassNameAndPackageEntry> p) {", "+        public Object value(final PredictiveInputFrame<AutoCompletePopupEntry> p) {", "+          _lastState = p.getFrameState();", "-                runnable.run(p.getItem().getClassName(),", "-                             p.getItem().getFullPackage()+p.getItem().getClassName(),", "-                             start, loc);", "+                runnable.run(p.getItem(), start, loc);", "-    PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry> cancelAction = ", "-      new PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>() {", "+    PredictiveInputFrame.CloseAction<AutoCompletePopupEntry> cancelAction = ", "+      new PredictiveInputFrame.CloseAction<AutoCompletePopupEntry>() {", "-      public Object value(PredictiveInputFrame<ClassNameAndPackageEntry> p) {", "+      public Object value(PredictiveInputFrame<AutoCompletePopupEntry> p) {", "+        _lastState = p.getFrameState();", "-    java.util.ArrayList<MatchingStrategy<ClassNameAndPackageEntry>> strategies =", "-      new java.util.ArrayList<MatchingStrategy<ClassNameAndPackageEntry>>();", "-    strategies.add(new FragmentStrategy<ClassNameAndPackageEntry>());", "-    strategies.add(new PrefixStrategy<ClassNameAndPackageEntry>());", "-    strategies.add(new RegExStrategy<ClassNameAndPackageEntry>());", "+    java.util.ArrayList<MatchingStrategy<AutoCompletePopupEntry>> strategies =", "+      new java.util.ArrayList<MatchingStrategy<AutoCompletePopupEntry>>();", "+    strategies.add(new FragmentStrategy<AutoCompletePopupEntry>());", "+    strategies.add(new PrefixStrategy<AutoCompletePopupEntry>());", "+    strategies.add(new RegExStrategy<AutoCompletePopupEntry>());", "-    dialogThunk.set(new PredictiveInputFrame<ClassNameAndPackageEntry>(null,", "-                                                                       title,", "-                                                                       true, // force", "-                                                                       true, // ignore case", "-                                                                       info,", "-                                                                       strategies,", "-                                                                       actions,", "-                                                                       actions.size()-1, // cancel is last", "-                                                                       entry) {", "+    dialogThunk.set(new PredictiveInputFrame<AutoCompletePopupEntry>(null,", "+                                                                     title,", "+                                                                     true, // force", "+                                                                     true, // ignore case", "+                                                                     info,", "+                                                                     strategies,", "+                                                                     actions,", "+                                                                     actions.size()-1, // cancel is last", "+                                                                     entry) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6b59b40291da85fab1c10b07dd19bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["+    ", "+    // create temp directory for this test", "+    _base = new File(System.getProperty(\"java.io.tmpdir\")).getCanonicalFile();", "+    _parent = FileOps.createTempDirectory(\"proj\", _base);", "+    _srcDir = new File(_parent, \"src\");", "+    _srcDir.mkdir(); // create the src directory", "-    _projDir = new File(auxFileParent, \"project-dir\");", "-    _projDir.mkdir();", "-    _projFile = File.createTempFile(\"test\", \".pjt\", _projDir);", "-    _file1 = File.createTempFile(\"test1\",\".java\", _projDir);", "-    _file2 = File.createTempFile(\"test2\",\".java\", _projDir);", "+    _projFile = new File(_parent, \"test.pjt\");", "-    // generate the relative path names for the files in the project file", "-    String temp = _file1.getParentFile().getCanonicalPath();", "-    _file1RelName = _file1.getCanonicalPath().substring(temp.length()+1);", "-    temp = _file2.getParentFile().getCanonicalPath();", "-    _file2RelName = _file2.getCanonicalPath().substring(temp.length()+1);", "+    _file1 = new File(_srcDir, \"test1.java\");", "+    FileOps.writeStringToFile(_file1, \"\");  // create dummy file", "+    _file2 = new File(_srcDir, \"test2.java\");", "+    FileOps.writeStringToFile(_file2, \"\");// create dummy file", "+    ", "+//    System.err.println(\"test1.java and test1.java created\");", "+    ", "+//    // generate the relative path names for the files in the project file", "+//    String temp = _file1.getParentFile().getCanonicalPath();", "+//    _file1RelName = _file1.getCanonicalPath().substring(temp.length() + 1);", "+//    temp = _file2.getParentFile().getCanonicalPath();", "+//    _file2RelName = _file2.getCanonicalPath().substring(temp.length() + 1);", "-      \"   (file (name \\\"\"+ _file1RelName +\"\\\")(select 32 32)(active)))\\n\";", "+      \"   (file (name \\\"src/test1.java\\\")(select 32 32)(active)))\";", "+//      \"   (file (name \\\"src/test2.java\\\")(select 32 32)(active)))\";", "-    reader = new BufferedReader(new FileReader(_projFile));", "-    BufferedWriter w = new BufferedWriter(new FileWriter(_projFile));", "-    w.write(_projFileText);", "-    w.close();", "+    FileOps.writeStringToFile(_projFile, _projFileText);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54994c1527d9721e8962e939d2c1577", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testShiftBackspace() throws BadLocationException", "signatureAfterChange": "   public void testShiftBackspace() throws BadLocationException", "diff": ["-    final char undefined = KeyEvent.CHAR_UNDEFINED;", "-    final int pressed = KeyEvent.KEY_PRESSED;", "-    final int released = KeyEvent.KEY_RELEASED;", "-    final int shift = InputEvent.SHIFT_MASK;", "-    ", "+  ", "-    ", "-        int shiftBksp = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "-        defPane.processKeyEvent(new KeyEvent(defPane, pressed, (new Date()).getTime(), shift, shiftBksp, undefined));", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), SHIFT, DEL_PREV, UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane, released, (new Date()).getTime(), shift, shiftBksp, undefined));", "-        _log.log(\"second key event processed\");", "-        _assertDocumentContents(doc, \"tes\", \"Did not delete on shift+backspace\");", "-        _log.log(\"Halfway through testShiftBackspace\");", "- ", "-        int shiftDel = OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "-        defPane.setCaretPosition(1);", "-        // The following is the sequence of key events for shift+delete", "-        defPane.processKeyEvent(new KeyEvent(defPane, pressed, (new Date()).getTime(), shift, shiftDel, undefined));", "-        defPane.processKeyEvent(new KeyEvent(defPane, released, (new Date()).getTime(), shift, shiftDel, undefined));", "-        _assertDocumentContents(doc, \"ts\", \"Did not delete on shift+delete\");", "-        _log.log(\"testShiftBackSpace completed\");", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), SHIFT, DEL_PREV, UNDEFINED));", "+        _frame.validate();", "+    Utilities.clearEventQueue();", "-", "+    _log.log(\"second key event processed\");", "+    _assertDocumentContents(doc, \"tes\", \"Did not delete on shift+backspace\");", "+    _log.log(\"Halfway through testShiftBackspace\");", "+    ", "+     ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        ", "+        defPane.setCaretPosition(1);", "+        // The following is the sequence of key events for shift+delete", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), SHIFT, DEL_NEXT, UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), SHIFT, DEL_NEXT, UNDEFINED));", "+        _frame.validate();", "+      }", "+    });", "+    Utilities.clearEventQueue();", "+    _assertDocumentContents(doc, \"ts\", \"Did not delete on shift+delete\");", "+    _log.log(\"testShiftBackSpace completed\");", "+   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd12bde3bb2dace446b1b5327df0c95b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir)", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir) throws IOException", "diff": ["-  private void evaluateExpression(SEList e, ProjectFileIR pfir) {", "+  private void evaluateExpression(SEList e, ProjectFileIR pfir) throws IOException {", "-      List<DocFile> dfList = exp.getRest().accept(docFileListVisitor);", "+      ListVisitor<DocFile> srcFileListVisitor = new ListVisitor<DocFile>(_srcFileBase);", "+      List<DocFile> dfList = exp.getRest().accept(srcFileListVisitor);", "-    else if (name.compareToIgnoreCase(\"proj-root\") == 0) {", "+    else if (name.compareToIgnoreCase(\"proj-root\") == 0) {  // legacy node form; all paths relative to project file", "-      else if (fList.size() == 0) pfir.setProjectRoot(null);", "+      else if (fList.size() == 0) pfir.setProjectRoot(null); // can this ever happen?", "+    }", "+    else if (name.compareToIgnoreCase(\"proj-root-and-base\") == 0) { // source file paths are relative to project root", "+      List<File> fList = exp.getRest().accept(fileListVisitor);", "+      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple source roots\");", "+      File root = fList.get(0);", "+      if (! root.exists()) throw new IOException(\"Project root \" + root + \" no longer exists\");", "+      pfir.setProjectRoot(root);", "+      _srcFileBase = root.getCanonicalPath();", "-    else if (name.compareToIgnoreCase(\"proj-root\") == 0) {", "-      List<File> fList = exp.getRest().accept(fileListVisitor);", "-      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have multiple project roots\");", "-      else if (fList.size() == 0) pfir.setProjectRoot(null);", "-      else pfir.setProjectRoot(fList.get(0));", "-    }", "-    else if (name.compareToIgnoreCase(\"create-jar-file\") == 0) {", "-      List<File> fList = exp.getRest().accept(fileListVisitor);", "-      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have more than one \\\"create jar\\\" file\");", "-      else if (fList.size() == 0) pfir.setCreateJarFile(null);", "-      else pfir.setCreateJarFile(fList.get(0));", "-    }", "-    else if (name.compareToIgnoreCase(\"create-jar-flags\") == 0) {", "-      Integer i = exp.getRest().accept(NumberVisitor.ONLY);", "-      pfir.setCreateJarFlags(i);", "-    }", "+//    else if (name.compareToIgnoreCase(\"create-jar-file\") == 0) {", "+//      List<File> fList = exp.getRest().accept(fileListVisitor);", "+//      if (fList.size() > 1) throw new PrivateProjectException(\"Cannot have more than one \\\"create jar\\\" file\");", "+//      else if (fList.size() == 0) pfir.setCreateJarFile(null);", "+//      else pfir.setCreateJarFile(fList.get(0));", "+//    }", "+//    else if (name.compareToIgnoreCase(\"create-jar-flags\") == 0) {", "+//      Integer i = exp.getRest().accept(NumberVisitor.ONLY);", "+//      pfir.setCreateJarFlags(i);", "+//    }"]}], "num": 28845}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "669a0a51e6461c89dc95cbece4844f96", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "037effcb913396e3e02428f862cbeb58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private int _replaceAllInCurrentDoc()", "signatureAfterChange": "   private int _replaceAllInCurrentDoc()", "diff": ["-//    System.err.println(\"_replaceAllInCurrentDoc() called; _doc = [\" + _doc.getText() + \"]\");", "-    _doc.acquireWriteLock();", "-    try {", "-      if (_isForward) setPosition(0);", "-      else setPosition(_doc.getLength());", "-      ", "-      int count = 0;", "-      FindResult fr = findNext(false);  // find next match in current doc   ", "+", "+    assert EventQueue.isDispatchThread();", "+    ", "+    if (_isForward) setPosition(0);", "+    else setPosition(_doc.getLength());", "+    ", "+    int count = 0;", "+    FindResult fr = findNext(false);  // find next match in current doc   ", "-      ", "-      while (! fr.getWrapped()) {", "-        replaceCurrent();", "-        count++;", "+    ", "+    while (! fr.getWrapped()) {", "+      replaceCurrent();  // sets writeLock so that other threads do not see inconsistent state", "+      count++;", "-        fr = findNext(false);           // find next match in current doc", "+      fr = findNext(false);           // find next match in current doc", "-      }", "-      return count;", "-    finally { _doc.releaseWriteLock(); }", "+    return count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fa61b1290a97f09afb6509e74cfbdb4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "e193e4674aaab3350b36cbc521ecf3bf9c098bc6", "commitAfterChange": "6c31f49b491d4a01bd2ddbae62b5ee4f76d52129", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private int _processAllInCurrentDoc(Lambda<Void, FindResult> findAction)", "signatureAfterChange": "   private int _processAllInCurrentDoc(Lambda<Void, FindResult> findAction)", "diff": ["-    _doc.acquireWriteLock();  // may modify the document!", "-    try {", "+//    _doc.acquireWriteLock();  // the contract stipulates no document modification!", "+//    try {", "-      if (_isForward) setPosition(0);", "-      else setPosition(_doc.getLength());", "-      ", "-      int count = 0;", "-      FindResult fr = findNext(false);  // find next match in current doc   ", "-      ", "-      while (! fr.getWrapped()) {", "-        findAction.apply(fr);", "-        count++;", "-        fr = findNext(false);           // find next match in current doc", "-      }", "-      return count;", "+    if (_isForward) setPosition(0);", "+    else setPosition(_doc.getLength());", "+    ", "+    int count = 0;", "+    FindResult fr = findNext(false);  // find next match in current doc   ", "+    ", "+    while (! fr.getWrapped()) {", "+      findAction.apply(fr);", "+      count++;", "+      fr = findNext(false);           // find next match in current doc", "-    finally { _doc.releaseWriteLock(); }", "+    return count;", "+//    }", "+//    finally { _doc.releaseWriteLock(); }"]}], "num": 29984}
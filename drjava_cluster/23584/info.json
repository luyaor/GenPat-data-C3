{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd2827e75900631d99f55f11f3c28293", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2321d67a0ba7d78085c468565ab1038d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "       public Process value()", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try {", "-          return runJavaProcess(TaskProcess.class.getName(), IterUtil.<String>empty(), classPath, workingDir, ", "-                                properties, jvmParams);", "-        }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder).value(); }", "+    catch (WrappedException e) {", "+      Throwable cause = e.getCause();", "+      if (cause instanceof InterruptedException) { throw (InterruptedException) cause; }", "+      else if (cause instanceof InvocationTargetException) { throw (InvocationTargetException) cause; }", "+      else if (cause instanceof IOException) { throw (IOException) cause; }", "+      else { throw e; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354e817d537c178f05b9c7a8d5deebb5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 163, "signatureBeforeChange": "     public List<InputStream> value()", "signatureAfterChange": "   public static Object ensureSerializable(Object obj)", "diff": ["-  private static final Thunk<List<InputStream>> INPUT_STREAMS_TO_CLOSE = LazyThunk.make(new Thunk<List<InputStream>>() {", "-    public List<InputStream> value() {", "-      // On the first request, register a shutdown hook to clean up the list", "-      Runtime.getRuntime().addShutdownHook(new Thread() {", "-        public void run() {", "-          for (InputStream in : INPUT_STREAMS_TO_CLOSE.value()) {", "-            try { in.close(); }", "-            catch (IOException e) { /* We've made a best effort, and must ignore the exception */ }", "-          }", "-        }", "-      });", "-      return new LinkedList<InputStream>();", "-    }", "+   */", "+  public static Object ensureSerializable(Object obj) {", "+    if (obj == null) { return null; }", "+    else if (SERIALIZABLE_CLASSES.contains(obj.getClass())) { return obj; }", "+    else if (obj instanceof Object[]) { return ensureSerializable((Object[]) obj); }", "+    else if (obj instanceof Iterable<?>) { return ensureSerializable((Iterable<?>) obj); }", "+    else if (obj instanceof Throwable) { return ensureSerializable((Throwable) obj); }", "+    else if (obj instanceof Tuple) { return ensureSerializable((Tuple) obj); }", "+    else { return obj.toString(); }", "+  }"]}], "num": 23584}
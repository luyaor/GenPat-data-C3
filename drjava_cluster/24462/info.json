{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f1df47530e9fcd9db61a8d246ede711", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4083c61460d8a20dfc411e8bfb73d4be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 288, "signatureBeforeChange": "   public static <T, R> Lambda<T, R> asLambda(final Runnable1<? super T> r, final R result)", "signatureAfterChange": "   public static <T, R> Lambda<T, R> asLambda(Runnable1<? super T> r, R result)", "diff": ["-  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "-  public static <T, R> Lambda<T, R> asLambda(final Runnable1<? super T> r, final R result) {", "-    return new Lambda<T, R>() { public R value(T arg) { r.run(arg); return result; } };", "-  }", "+  /** Create a lambda that executes the given runnable, then returns {@code result}. */", "+  public static <T, R> Lambda<T, R> asLambda(Runnable1<? super T> r, R result) {", "+    return new RunnableLambda<T, R>(r, result);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "677fa1fc4ad7fab123ec4c87a32a95dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 108, "signatureBeforeChange": "   public static <T, U> Thunk<U> compose(final Thunk<? extends T> thunk,                                          final Lambda<? super T, ? extends U> lambda)", "signatureAfterChange": "   public static <T, U> Thunk<U> compose(Thunk<? extends T> thunk, Lambda<? super T, ? extends U> lambda)", "diff": ["-  /** @return  A thunk that executes {@code lambda} with the result of {@code thunk} */", "-  public static <T, U> Thunk<U> compose(final Thunk<? extends T> thunk, ", "-                                        final Lambda<? super T, ? extends U> lambda) {", "-    return new Thunk<U>() {", "-      public U value() { return lambda.value(thunk.value()); }", "-    };", "+  /** Create a thunk that executes {@code lambda} with the result of {@code thunk}. */", "+  public static <T, U> Thunk<U> compose(Thunk<? extends T> thunk, Lambda<? super T, ? extends U> lambda) {", "+    return new ComposedThunk<T, U>(thunk, lambda);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6af035edc10309758da5bf28aca6b582", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 284, "signatureBeforeChange": "   public static <R> Thunk<R> asThunk(final Runnable r, final R result)", "signatureAfterChange": "   public static <R> Thunk<R> asThunk(Runnable r, R result)", "diff": ["-  /** @return  A thunk that executes the given runnable, then returns {@code result} */", "-  public static <R> Thunk<R> asThunk(final Runnable r, final R result) {", "-    return new Thunk<R>() { public R value() { r.run(); return result; } };", "-  }", "+  /** Create a thunk that executes the given runnable, then returns {@code result}. */", "+  public static <R> Thunk<R> asThunk(Runnable r, R result) { return new RunnableThunk<R>(r, result); }"]}], "num": 24462}
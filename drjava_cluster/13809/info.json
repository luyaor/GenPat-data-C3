{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4899e74f4b533d699630c2cc13c4e99", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46d93b2c774c31e383b3612fdc63ef9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "commitAfterChange": "c2cccf3d2cd557fff7d01a0111e1dc7df943b427", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": "   public void toggleBookmark()", "signatureAfterChange": "   public void toggleBookmark()", "diff": ["+    assert EventQueue.isDispatchThread();", "-    doc.acquireReadLock();", "+//    doc.acquireReadLock();", "-      else if (startSel==endSel) {", "+      else if (startSel == endSel) {", "-    finally { doc.releaseReadLock(); }", "+//    finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a85d80044c2621cbfdc1df728137784", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private FindResult findNext(boolean searchAll)", "signatureAfterChange": "   private FindResult findNext(boolean searchAll)", "diff": ["+    assert EventQueue.isDispatchThread();", "+    ", "-    _doc.acquireReadLock();", "-    try {", "-      // If the user just found a match and toggled the \"Search Backwards\" option, we should skip the matched text.", "-      if (_skipText) {  // adjust position (offset)", "+    // If the user just found a match and toggled the \"Search Backwards\" option, we should skip the matched text.", "+    if (_skipText) {  // adjust position (offset)", "-        int wordLen = _lastFindWord.length();", "-        if (_isForward) setPosition(getCurrentOffset() + wordLen);", "-        else setPosition(getCurrentOffset() - wordLen);", "-        positionChanged();", "-      }", "-      ", "+      int wordLen = _lastFindWord.length();", "+      if (_isForward) setPosition(getCurrentOffset() + wordLen);", "+      else setPosition(getCurrentOffset() - wordLen);", "+      positionChanged();", "+    }", "+    ", "-      ", "-      int offset = getCurrentOffset();", "+    ", "+    int offset = getCurrentOffset();", "-      if (_isForward) { ", "-        start = offset; ", "-        len = _doc.getLength() - offset; ", "-      }", "-      else { ", "-        start = 0; ", "-        len = offset; ", "-      }", "-      fr = _findNextInDoc(_doc, start, len, searchAll);", "+    if (_isForward) { ", "+      start = offset; ", "+      len = _doc.getLength() - offset; ", "-    finally { _doc.releaseReadLock(); }", "+    else { ", "+      start = 0; ", "+      len = offset; ", "+    }", "+    fr = _findNextInDoc(_doc, start, len, searchAll);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bae853826ff6124330bc8916d0be05fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void startUp() throws DebugException", "signatureAfterChange": "   public synchronized void startUp() throws DebugException", "diff": ["-  /** Attaches the debugger to the Interactions JVM to prepare for debugging. */", "+  /** Attaches the debugger to the Interactions JVM to prepare for debugging.  Only runs in event thread. */", "+    assert EventQueue.isDispatchThread();", "-        odd.acquireReadLock();", "-        try { setBreakpoint(new JPDABreakpoint(odd, odd._getOffset(lnr), lnr, bp.isEnabled(), this)); }", "-        finally { odd.releaseReadLock(); }", "+//        odd.acquireReadLock();", "+//        try { ", "+          setBreakpoint(new JPDABreakpoint(odd, odd._getOffset(lnr), lnr, bp.isEnabled(), this)); ", "+//        }", "+//        finally { odd.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d84ec4b98fdaeecfb23e574b68b36c7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void startUp() throws DebugException", "signatureAfterChange": "   public synchronized void startUp() throws DebugException", "diff": ["-  /** Attaches the debugger to the Interactions JVM to prepare for debugging. */", "+  /** Attaches the debugger to the Interactions JVM to prepare for debugging.  Only runs in event thread. */", "+    assert EventQueue.isDispatchThread();", "-        odd.acquireReadLock();", "-        try { setBreakpoint(new JPDABreakpoint(odd, odd._getOffset(lnr), lnr, bp.isEnabled(), this)); }", "-        finally { odd.releaseReadLock(); }", "+//        odd.acquireReadLock();", "+//        try { ", "+          setBreakpoint(new JPDABreakpoint(odd, odd._getOffset(lnr), lnr, bp.isEnabled(), this)); ", "+//        }", "+//        finally { odd.releaseReadLock(); }"]}], "num": 13809}
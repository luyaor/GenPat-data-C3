{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3206ac4c168f017009cff6396c622dbc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6b8db8479185abd825b6150653e92d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public Class visit(IfThenStatement node)", "signatureAfterChange": "   public Class visit(IfThenStatement node)", "diff": ["+    Expression cond = node.getCondition();", "+    ", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Class type = cond.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "-", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fb9934fac8dac7b526b2a699330571", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class visit(IfThenElseStatement node)", "signatureAfterChange": "   public Class visit(IfThenElseStatement node)", "diff": ["+    Expression cond = node.getCondition();", "+    ", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Class type = cond.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+    }", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d58337288fc7af382bd77dda4c4b5aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "b5c763bf27a5267e7ff6eb7560dbde820d19b063", "commitAfterChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public Class<?> visit(SynchronizedStatement node)", "signatureAfterChange": "   public Class<?> visit(AssertStatement node)", "diff": ["+   */", "+  public Class<?> visit(AssertStatement node) {", "+    Expression cond = node.getCondition();", "+    ", "+    //Check the condition", "+    Class<?> type = cond.acceptVisitor(this);", "+    if(type != boolean.class && type != Boolean.class) {", "+      throw new ExecutionError(\"condition.type\", node);", "+    }", "+    ", "+    // Auto unbox; Boolean->boolean", "+    if(type == Boolean.class) {", "+      //add method call on expression;", "+      // \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));", "+    }", "+    ", "+    //Check the failure string", "+    Expression failString = node.getFailString();", "+    if(failString != null) {", "+      Class<?> type2 = failString.acceptVisitor(this);", "+    }", "+    return null;", "+  }"]}], "num": 4347}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa6e66ea12b5f427be1fd9ea0e86c34f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89716ddd48a868c47af1f0184eec6b1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "signatureAfterChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "diff": ["-    final TestInteractionsModel model = (TestInteractionsModel) _model;", "-    final String code = \"int x = 3;\";", "-    final InteractionsDocument doc = model.getDocument();", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        model.interpretCurrentInteraction();", "-        model.replReturnedVoid(); // pretend call completed", "-      } ", "-    });", "+    TestInteractionsModel model = (TestInteractionsModel) _model;", "+    String code = \"int x = 3;\";", "+    InteractionsDocument doc = model.getDocument();", "+    model.interpretCurrentInteraction();  // empty string is already sitting at prompt in the interactions pane", "+    Utilities.clearEventQueue();", "+    // pretend the call completed", "+    model.replReturnedVoid();", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        doc.append(code, InteractionsDocument.DEFAULT_STYLE); // spawns an event queue task", "-        model.interpretCurrentInteraction();", "-        model.replReturnedVoid(); ", "-      } ", "-    });", "+    doc.append(code, InteractionsDocument.DEFAULT_STYLE);  // spawns an event queue task", "+    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "+    Utilities.clearEventQueue();", "+    model.interpretCurrentInteraction();", "+    Utilities.clearEventQueue();", "+    // pretend the call completed", "+    model.replReturnedVoid();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3e79d71cc7fc1c891a94015bea8a792", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "signatureAfterChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "diff": ["-    TestInteractionsModel model = (TestInteractionsModel) _model;", "-    String code = \"int x = 3;\";", "-    InteractionsDocument doc = model.getDocument();", "-    model.interpretCurrentInteraction();  // empty string is already sitting at prompt in the interactions pane", "-    Utilities.clearEventQueue();", "-    // pretend the call completed", "-    model.replReturnedVoid();", "+    final TestInteractionsModel model = (TestInteractionsModel) _model;", "+    final String code = \"int x = 3;\";", "+    final InteractionsDocument doc = model.getDocument();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        model.interpretCurrentInteraction();", "+        model.replReturnedVoid(); // pretend call completed", "+      } ", "+    });", "-    doc.append(code, InteractionsDocument.DEFAULT_STYLE);  // spawns an event queue task", "-    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "-    Utilities.clearEventQueue();", "-    model.interpretCurrentInteraction();", "-    Utilities.clearEventQueue();", "-    // pretend the call completed", "-    model.replReturnedVoid();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(code, InteractionsDocument.DEFAULT_STYLE); // spawns an event queue task", "+        model.interpretCurrentInteraction();", "+        model.replReturnedVoid(); ", "+      } ", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfdceb12173e737c5dd51284bca168d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "signatureAfterChange": "   public void testInterpretCurrentInteraction() throws EditDocumentException", "diff": ["-    TestInteractionsModel model = (TestInteractionsModel) _model;", "-    String code = \"int x = 3;\";", "-    InteractionsDocument doc = model.getDocument();", "-    model.interpretCurrentInteraction();  // empty string is already sitting at prompt in the interactions pane", "-    Utilities.clearEventQueue();", "-    // pretend the call completed", "-    model.replReturnedVoid();", "+    final TestInteractionsModel model = (TestInteractionsModel) _model;", "+    final String code = \"int x = 3;\";", "+    final InteractionsDocument doc = model.getDocument();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        model.interpretCurrentInteraction();", "+        model.replReturnedVoid(); // pretend call completed", "+      } ", "+    });", "-    doc.append(code, InteractionsDocument.DEFAULT_STYLE);  // spawns an event queue task", "-    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "-    Utilities.clearEventQueue();", "-    model.interpretCurrentInteraction();", "-    Utilities.clearEventQueue();", "-    // pretend the call completed", "-    model.replReturnedVoid();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(code, InteractionsDocument.DEFAULT_STYLE); // spawns an event queue task", "+        model.interpretCurrentInteraction();", "+        model.replReturnedVoid(); ", "+      } ", "+    });"]}], "num": 30869}
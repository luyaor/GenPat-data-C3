{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce30b58edb4fe82400f8f771fe7ddc36", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92e5902aca53a001fa66507885e3a649", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public TypeData forNormalTryCatchStatementOnly(NormalTryCatchStatement that, TypeData tryBlock_result, TypeData[] catchBlocks_result)", "signatureAfterChange": "   public TypeData forNormalTryCatchStatementOnly(NormalTryCatchStatement that, TypeData tryBlockRes, TypeData[] catchBlocksRes)", "diff": ["-  /**Assumes that tryBlock_result, catchBlocks_result, and finallyBlock_result are InstanceDatas*/", "-  public TypeData forNormalTryCatchStatementOnly(NormalTryCatchStatement that, TypeData tryBlock_result, TypeData[] catchBlocks_result) {", "+  /**Assumes that tryBlockRes, catchBlocksRes, and finallyBlock_result are InstanceDatas*/", "+  public TypeData forNormalTryCatchStatementOnly(NormalTryCatchStatement that, TypeData tryBlockRes, TypeData[] catchBlocksRes) {", "-    InstanceData[] ids = new InstanceData[catchBlocks_result.length];", "-    for (int i = 0; i<catchBlocks_result.length; i++) {", "-      ids[i]=(InstanceData) catchBlocks_result[i];", "+    InstanceData[] ids = new InstanceData[catchBlocksRes.length];", "+    for (int i = 0; i<catchBlocksRes.length; i++) {", "+      ids[i]=(InstanceData) catchBlocksRes[i];", "-    return tryCatchLeastRestrictiveType((InstanceData) tryBlock_result, ids, null);", "+    return tryCatchLeastRestrictiveType((InstanceData) tryBlockRes, ids, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a632b804836352a99eca1c0055fb0f1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public TypeData forTryCatchFinallyStatementOnly(TryCatchFinallyStatement that, TypeData tryBlock_result, TypeData[] catchBlocks_result, TypeData finallyBlock_result)", "signatureAfterChange": "   public TypeData forTryCatchFinallyStatementOnly(TryCatchFinallyStatement that, TypeData tryBlockRes, TypeData[] catchBlocksRes, TypeData finallyBlock_result)", "diff": ["-  /** Assumes that tryBlock_result, catchBlocks_result, and finallyBlock_result are InstanceDatas. */", "-  public TypeData forTryCatchFinallyStatementOnly(TryCatchFinallyStatement that, TypeData tryBlock_result, TypeData[] catchBlocks_result, TypeData finallyBlock_result) {", "+  /** Assumes that tryBlockRes, catchBlocksRes, and finallyBlock_result are InstanceDatas. */", "+  public TypeData forTryCatchFinallyStatementOnly(TryCatchFinallyStatement that, TypeData tryBlockRes, TypeData[] catchBlocksRes, TypeData finallyBlock_result) {", "-    InstanceData[] ids = new InstanceData[catchBlocks_result.length];", "+    InstanceData[] ids = new InstanceData[catchBlocksRes.length];", "-      if (catchBlocks_result[i] != null) {", "-        ids[i]=catchBlocks_result[i].getInstanceData();", "+      if (catchBlocksRes[i] != null) {", "+        ids[i]=catchBlocksRes[i].getInstanceData();", "-    if (tryBlock_result == null && finallyBlock_result==null) {return tryCatchLeastRestrictiveType(null, ids, null);}", "-    if (tryBlock_result == null) {return tryCatchLeastRestrictiveType(null, ids, finallyBlock_result.getInstanceData());}", "-    if (finallyBlock_result == null) {return tryCatchLeastRestrictiveType(tryBlock_result.getInstanceData(), ids, null);}", "+    if (tryBlockRes == null && finallyBlock_result==null) {return tryCatchLeastRestrictiveType(null, ids, null);}", "+    if (tryBlockRes == null) {return tryCatchLeastRestrictiveType(null, ids, finallyBlock_result.getInstanceData());}", "+    if (finallyBlock_result == null) {return tryCatchLeastRestrictiveType(tryBlockRes.getInstanceData(), ids, null);}", "-    return tryCatchLeastRestrictiveType(tryBlock_result.getInstanceData(), ids, finallyBlock_result.getInstanceData());", "+    return tryCatchLeastRestrictiveType(tryBlockRes.getInstanceData(), ids, finallyBlock_result.getInstanceData());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9b30af170e5ecfc6357f5052cef438a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, InstanceData finallyBlock_result)", "signatureAfterChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result,                                                        InstanceData finallyBlock_result)", "diff": ["-   */", "-  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, InstanceData finallyBlock_result) {// Return the common superclass or null if there exists a block that doesn't return no nothing (except the finally block) ", "-    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) {return finallyBlock_result;}", "+    */", "+  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, ", "+                                                      InstanceData finallyBlock_result) {", "+  // Return the common superclass or null if there exists a block that doesn't return a value(except the finally block) ", "+    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) ", "+      return finallyBlock_result;", "-      if (catchBlocks_result[i] == null) {return finallyBlock_result;}", "-      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "+      if (catchBlocks_result[i] == null) return finallyBlock_result;", "+      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && ", "+          _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "-    if (leastRestrictiveType == null && finallyBlock_result == null) {return null;}", "-    else if (leastRestrictiveType == null) {result = getCommonSuperType(null, finallyBlock_result.getSymbolData());}", "-    else if (finallyBlock_result == null) {result = getCommonSuperType(leastRestrictiveType.getSymbolData(), null);}", "-    else { result = getCommonSuperType(leastRestrictiveType.getSymbolData(), finallyBlock_result.getSymbolData());} ", "+    if (leastRestrictiveType == null && finallyBlock_result == null) return null;", "+    else if (leastRestrictiveType == null) result = getCommonSuperType(null, finallyBlock_result.getSymbolData());", "+    else if (finallyBlock_result == null) result = getCommonSuperType(leastRestrictiveType.getSymbolData(), null);", "+    else result = getCommonSuperType(leastRestrictiveType.getSymbolData(), finallyBlock_result.getSymbolData()); ", "-    if (result != null) {return result.getInstanceData();}", "+    if (result != null) return result.getInstanceData();"]}], "num": 18121}
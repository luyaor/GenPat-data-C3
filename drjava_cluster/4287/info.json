{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9915909b7c4d3ebf926cc7fc57914146", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463c23a6c3e1b579f8aad83fdd0bbd09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testFormat()", "signatureAfterChange": "   public void testFormat()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "-      KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "-                                            InputEvent.ALT_MASK | InputEvent.META_MASK);", "-      assertEquals(ks, io.parse(io.format(ks)));", "-      ks = KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN,", "-                                  InputEvent.ALT_MASK | InputEvent.CTRL_MASK);", "-      assertEquals(ks, io.parse(io.format(ks)));", "-      // behaves correctly in 1.3, but the test will not work for some reason", "-      /*ks = KeyStroke.getKeyStroke(new Character('!'),", "-                                  InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK);", "-      assertEquals(ks, io.parse(io.format(ks)));*/", "-      ks = KeyStroke.getKeyStroke('!');", "-      assertEquals(ks, io.parse(io.format(ks)));", "-      ks = KeyStroke.getKeyStroke(KeyEvent.VK_F10,", "-                                  InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                  true);", "-      assertEquals(ks, io.parse(io.format(ks)));", "-    }", "+    KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "+    KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "+                                          InputEvent.ALT_MASK | InputEvent.META_MASK);", "+    assertEquals(ks, io.parse(io.format(ks)));", "+    ks = KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN,", "+                                InputEvent.ALT_MASK | InputEvent.CTRL_MASK);", "+    assertEquals(ks, io.parse(io.format(ks)));", "+    // behaves correctly in 1.3, but the test will not work for some reason", "+    /*ks = KeyStroke.getKeyStroke(new Character('!'),", "+     InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK);", "+     assertEquals(ks, io.parse(io.format(ks)));*/", "+    ks = KeyStroke.getKeyStroke('!');", "+    assertEquals(ks, io.parse(io.format(ks)));", "+    ks = KeyStroke.getKeyStroke(KeyEvent.VK_F10,", "+                                InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "+                                true);", "+    assertEquals(ks, io.parse(io.format(ks)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54bd05a77f57aa0a9cf0bf0f232ac41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testParse()", "signatureAfterChange": "      public void testParse()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "-      assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "-                                          InputEvent.CTRL_MASK),", "-                   io.parse(\"ctrl ENTER\"));", "-      assertEquals(KeyStrokeOption.NULL_KEYSTROKE,", "-                   io.parse(\"<none>\"));", "-      assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_NUM_LOCK,", "-                                          InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                          true),", "-                   io.parse(\"alt shift released NUM_LOCK\"));", "-      assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA,", "-                                          InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                          false),", "-                   io.parse(\"alt shift COMMA\"));", "-      assertEquals(KeyStroke.getKeyStroke('%'),", "-                   io.parse(\"typed %\"));", "-      // behaves correctly in 1.3, but the test will not work for some reason", "-      /*assertEquals(KeyStroke.getKeyStroke(new Character('%'),", "-                                          InputEvent.ALT_MASK | InputEvent.CTRL_MASK),", "-                   io.parse(\"ctrl alt typed %\"));*/", "-      ", "-      try { io.parse(\"true\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-      ", "-      try { io.parse(\".33\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-      ", "-      try { io.parse(\"Alt Z\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-      ", "-      try { io.parse(\"ctrl alt shift typed F1\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-    }", "+    KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "+                                        InputEvent.CTRL_MASK),", "+                 io.parse(\"ctrl ENTER\"));", "+    assertEquals(KeyStrokeOption.NULL_KEYSTROKE,", "+                 io.parse(\"<none>\"));", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_NUM_LOCK,", "+                                        InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "+                                        true),", "+                 io.parse(\"alt shift released NUM_LOCK\"));", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA,", "+                                        InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "+                                        false),", "+                 io.parse(\"alt shift COMMA\"));", "+    assertEquals(KeyStroke.getKeyStroke('%'),", "+                 io.parse(\"typed %\"));", "+    // behaves correctly in 1.3, but the test will not work for some reason", "+    /*assertEquals(KeyStroke.getKeyStroke(new Character('%'),", "+     InputEvent.ALT_MASK | InputEvent.CTRL_MASK),", "+     io.parse(\"ctrl alt typed %\"));*/", "+    ", "+    try { io.parse(\"true\"); fail(); }", "+    catch (IllegalArgumentException e) {}", "+    ", "+    try { io.parse(\".33\"); fail(); }", "+    catch (IllegalArgumentException e) {}", "+    ", "+    try { io.parse(\"Alt Z\"); fail(); }", "+    catch (IllegalArgumentException e) {}", "+    ", "+    try { io.parse(\"ctrl alt shift typed F1\"); fail(); }", "+    catch (IllegalArgumentException e) {}"]}], "num": 4287}
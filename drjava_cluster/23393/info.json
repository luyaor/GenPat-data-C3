{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92e6be2eff4ce976a676a224a6f461ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d59777afe7344e8e93952bdd5120c59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "52434f6649577bc83989d279c33ddbe6369a078c", "commitAfterChange": "bfc3e0843658fe88dfa445991b253f3abfe88628", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 311, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file) throws IOException, AlreadyOpenException", "diff": ["-  private OpenDefinitionsDocument _openFile(File file)", "-    throws IOException, AlreadyOpenException", "-  {", "-      ", "-      INavigatorItem idoc = makeIDocFromODD(doc);", "-      _documentsRepos.put(idoc, doc);", "-      ", "-      String path = doc.getFile().getCanonicalPath();", "-     ", "-      _documentNavigator.addDocument(idoc, fixPathForNavigator(path));", "-      ", "-      ", "-      //doc.checkIfClassFileInSync();", "-", "-      // Make sure this is on the classpath", "-      try {", "-        File classpath = doc.getSourceRoot();", "-        _interactionsModel.addToClassPath(classpath.getAbsolutePath());", "-      }", "-      catch (InvalidPackageException e) {", "-        // Invalid package-- don't add it to classpath", "-      }", "+   */", "+  private OpenDefinitionsDocument _openFile(File file) throws IOException, AlreadyOpenException", "+  {", "+    OpenDefinitionsDocument doc = _rawOpenFile(file);", "+    addDocToNavigator(doc);", "+    addDocToClasspath(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0321dbf6d44165f69a330df34d16643", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "4128354c8729a4a5df76a578d72103228145ae8d", "commitAfterChange": "aa287bbb1c9881659edc121fbb5e7531149b5808", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 55, "signatureBeforeChange": "   protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng)", "signatureAfterChange": "      protected void addUndoRedo(AbstractDocument.DefaultDocumentEvent chng, Runnable undoCommand, Runnable doCommand)", "diff": ["-   */", "-  protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng) {", "-    throwErrorHuh();", "-    // Clear the helper method cache", "-    if (_cacheInUse) _clearCache();", "-", "-    try {", "-      final int offset = chng.getOffset();", "-      final int length = chng.getLength();", "-      final String removedText = getText(offset, length);", "-            super.removeUpdate(chng);", "-", "-      Runnable doCommand = new RemoveCommand(offset, length);", "-      Runnable undoCommand = new InsertCommand(offset, removedText);", "-", "-      // add the undo/redo info", "-      chng.addEdit(new CommandUndoableEdit(undoCommand, doCommand));", "-", "-      // actually do the removal from the reduced model", "-      doCommand.run();", "-    }", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "-", "+  ", "+  protected void addUndoRedo(AbstractDocument.DefaultDocumentEvent chng, Runnable undoCommand, Runnable doCommand) {", "+    chng.addEdit(new CommandUndoableEdit(undoCommand, doCommand));    ", "+  }"]}], "num": 23393}
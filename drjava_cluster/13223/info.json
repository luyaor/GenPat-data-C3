{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf24d815b2d09b9732860c80d28762ae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83be7a78104d8d71e63c097da0aa7827", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected void getDistToEnclosingBrace(IndentInfo braceInfo)", "signatureAfterChange": "   public BraceInfo getDistToEnclosingBrace()", "diff": ["+    */", "+  public BraceInfo getDistToEnclosingBrace() {", "+    Stack<Brace> braceStack = new Stack<Brace>();", "+    TokenList.Iterator iter = _cursor._copy();", "+    resetWalkerLocationToCursor();", "+    // this is the distance to in front of the previous newline.", "+    final int distToPrevNewline = _parent.getDistToPreviousNewline();", "+", "+    if (distToPrevNewline == -1) {", "+      iter.dispose();", "+      return BraceInfo.NONE;", "+    }", "+    ", "+    int relDistance = distToPrevNewline + 1;", "+    int distance = relDistance;", "+    ", "+    // move to the proper location, then add the rest of the block and go to the previous.", "+    iter.move(-relDistance);", "+    final int offset = iter.getBlockOffset();", "+    relDistance += offset;", "+    distance += offset;", "+", "+    if (iter.atStart() || iter.atFirstItem()) { // no preceding brace exists", "+      iter.dispose();", "+      return BraceInfo.NONE;", "+    }", "+", "+    iter.prev(); // move to reduced token preceding the newline.", "+", "+    ", "+    String braceType;", "+", "+    // either we get a match and the stack is empty", "+    // or we reach the start of a file and haven't found a match", "+    // or we have a open brace that doesn't have a match,", "+    // so we abort", "+    while (! iter.atStart()) {", "+            ", "+      ReducedToken curToken = iter.current();", "+      int size = curToken.getSize();", "+      distance += size;", "+      relDistance += size;", "+", "+      if (! curToken.isGap()) {", "+        ", "+        Brace curBrace = (Brace) curToken;", "+", "+        if (moveWalkerGetState(-relDistance) == FREE) {", "+              // open", "+              if (curBrace.isOpenBrace()) {", "+                if (braceStack.isEmpty()) {", "+                  braceType = curBrace.getType();", "+                  // distance to brace == distance;", "+                  iter.dispose();", "+                  return new BraceInfo(braceType, distance);", "+                }", "+                Brace popped = braceStack.pop();", "+                if (! curBrace.isMatch(popped)) {", "+                  iter.dispose();", "+                  return BraceInfo.NONE;", "+                }", "+              }", "+              // closed", "+              else braceStack.push(curBrace);", "+            }", "+        relDistance = 0;", "+      }", "+      // no matter what, we always want to increase the distance", "+      // by the size of the token we have just gone over", "+      iter.prev();", "+    }", "+", "+    // Enclosing brace not found", "+    iter.dispose();", "+    return BraceInfo.NONE;", "+  }", "-    int relDistance = braceInfo.distToNewline + 1;", "-    if (braceInfo.distToNewline == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb406883e07bc80a6452073036ca890a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "9de352299088533a44cc17c1ffd7938654146b70", "commitAfterChange": "fb275f71eca23e6f93c695458f20ebc27e058287", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected Class findClass(String name) throws ClassNotFoundException", "signatureAfterChange": "      public Class defineClass(String name, byte[] code)", "diff": ["+    public Class defineClass(String name, byte[] code)  {", "+      File file = new File(\"debug-\" + name + \".class\");", "+", "+", "+      /*", "+      try {", "+        FileOutputStream out = new FileOutputStream(file);", "+        out.write(code);", "+        out.close();", "+        DrJava.consoleErr().println(\"debug class \" + name + \" to \" + file.getAbsolutePath());", "+      catch (Throwable t) {}", "+      */", "+      ", "+      Class c = super.defineClass(name, code);", "+      return c;", "-    protected Class findClass(String name) throws ClassNotFoundException {", "-      //System.err.println(\"findClass: \" + name);", "-        return  (Class)classes.get(name);", "-      }", "-", "-      try {", "-        // classLoader contains URL class loaders to load from other", "-        // paths/urls. if we have one, try to load there.", "-        if (classLoader != null) {", "-          // getResourceAsStream finds a file that's in the classpath. It's", "-          // generally used to load resources (like images) from the same", "-          // location as class files. However for our purposes of loading the", "-          // bytes of a class file, this works perfectly. It will find the class", "-          // in any place in the classpath, and it doesn't force us to search", "-          // the classpath ourselves.", "-          // (The classpath includes URLs to other places even!)", "-          String fileName = name.replace('.', '/') + \".class\";", "-          InputStream stream = classLoader.getResourceAsStream(fileName);", "-          if (stream == null) {", "-            throw  new IOException();", "-          }", "-          byte[] data = new byte[stream.available()];", "-          stream.read(data);", "-          return  defineClass(name, data, 0, data.length);", "-        }", "-      }", "-      catch (Throwable t) {}", "-", "-      // Now try to just use the standard loader", "-      // Before, we didn't do this, and it resulted in getting some", "-      // class format errors (illegal constant pool) when loading.", "-      // i don't know why, but some classes seem to need to be loaded", "-      // using standard loader.", "-      ClassLoader l;", "-      if (classLoader != null) {", "-        l = classLoader;", "-        l = ClassLoader.getSystemClassLoader();", "-      try {", "-        return l.loadClass(name);", "-      catch (Throwable t) {}", "-      // If it exceptions, just fall through to here to try the interpreter.", "-      // If all else fails, try loading the class through the interpreter.", "-      // That's used for classes defined in the interpreter.", "-      return  interpreter.loadClass(name);"]}], "num": 13223}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bd47e5f6f4cd2ede547ee4c79bd5bb8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "454f416945fbf33e9630265a2a2c54e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName,                                            Data enclosing, boolean isClass)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase,                                            String qualifiedTypeName,                                            String partialName,                                            Data enclosing,                                            boolean isClass)", "diff": ["-  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, ", "-                                          Data enclosing, boolean isClass) {", "+  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, ", "+                                          String qualifiedTypeName, ", "+                                          String partialName, ", "+                                          Data enclosing, ", "+                                          boolean isClass) {", "-    SymbolData sd = symbolTable.get(qualifiedClassName);", "+    SymbolData sd = symbolTable.get(qualifiedTypeName);", "-      if (sd.getOuterData() != enclosing) {sd = null;}", "+      if (sd.getOuterData() != enclosing) { sd = null; }", "-      sd = new SymbolData(qualifiedClassName);", "+      sd = new SymbolData(qualifiedTypeName);", "-      if (isClass) {enclosing.getSymbolData().addInnerClass(sd);}", "-      else {(enclosing.getSymbolData()).addInnerInterface(sd);}", "+      if (isClass) { enclosing.getSymbolData().addInnerClass(sd); }", "+      else { enclosing.getSymbolData().addInnerInterface(sd); }", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+      SourceInfo si = rts[i].getSourceInfo();", "+      String tempName = rts[i].getName();", "+      tempSd = getSymbolData(tempName, si, false, false, false);", "-      if (tempSd != null) {", "-        interfaces.addLast(tempSd);  ", "-      }", "+      if (tempSd != null) { interfaces.addLast(tempSd); }", "-        //check to see if this is an inner class referencing an inner interface", "-        tempSd = enclosing.getInnerClassOrInterface(rts[i].getName());", "+        // Check to see if this is an inner class referencing an inner interface", "+        tempSd = enclosing.getInnerClassOrInterface(tempName);", "-          String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "+          String qualifyingPart = qualifiedTypeName.substring(0, qualifiedTypeName.lastIndexOf(\".\"));", "+          String qualifiedTempName = qualifyingPart + \".\" + tempName;", "+          // Should we introduce addInnerInterfaceSymbol ?", "+          tempSd = new SymbolData(qualifiedTempName);", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "+//          System.err.println(\"Creating inner interface continuation for \" + qualifiedTempName + \" at LLV: 1042\");", "+          continuations.put(qualifiedTempName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));          ", "-          String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-          superClass = new SymbolData(qualifyingPart + \"$\" + superClassName);", "+          String qualifyingPart = qualifiedTypeName.substring(0, qualifiedTypeName.lastIndexOf(\".\"));", "+          superClass = new SymbolData(qualifyingPart + \".\" + superClassName);", "+//          System.err.println(\"Creating continuation for \" + superClassName + \" at LLV:1079\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca4480080830869f4c49b33ab82314d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName,                                            Data enclosing, boolean isClass)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(SourceInfo si, String qualifiedTypeName, Data enclosing)", "diff": ["+  // Creates a continuation for an inner class or interface", "+  protected SymbolData addInnerSymbolData(SourceInfo si, String qualifiedTypeName, Data enclosing) {", "+    SymbolData sd = new SymbolData(qualifiedTypeName); // create continuation", "+    SymbolData enclosingSD = enclosing.getSymbolData();", "+    symbolTable.put(qualifiedTypeName, sd);  // if qualifiedTypeName refers to an external inner class, this will likely fail", "+    enclosing.getSymbolData().addInnerClass(sd);", "+    sd.setOuterData(enclosingSD);", "+    continuations.put(qualifiedTypeName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+//    System.err.println(\"Creating continuation for inner type \" + qualifiedTypeName);", "+    return sd;", "+  }", "-  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, ", "-                                          Data enclosing, boolean isClass) {", "-    SymbolData sd = symbolTable.get(qualifiedClassName);", "-      if (sd.getOuterData() != enclosing) {sd = null;}", "-      sd = new SymbolData(qualifiedClassName);", "-      if (isClass) {enclosing.getSymbolData().addInnerClass(sd);}", "-      else {(enclosing.getSymbolData()).addInnerInterface(sd);}", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "-      if (tempSd != null) {", "-        interfaces.addLast(tempSd);  ", "-      }", "-        //check to see if this is an inner class referencing an inner interface", "-        tempSd = enclosing.getInnerClassOrInterface(rts[i].getName());", "-          String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "-          String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-          superClass = new SymbolData(qualifyingPart + \"$\" + superClassName);"]}], "num": 21825}
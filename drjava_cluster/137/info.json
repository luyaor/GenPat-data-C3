{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec7b971c1cf74917b0c4032947b381f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7c48eed2579d1afb804915348cdf7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void testAndEquals()", "signatureAfterChange": "   public void testAndEquals() throws ExceptionReturnedException", "diff": ["-  public void testAndEquals() {", "-    Node exp = _parseCode(\"x &= new Integer(2);\").get(0);", "+  public void testAndEquals() throws ExceptionReturnedException {", "+    // Tests and-equals with a primitive left-hand side", "+    String text = \"x &= new Integer(2);\";", "+    String expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: x)\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+", "+    // Tests and-equals with a reference-type left-hand side", "+    text = \"X &= new Integer(2);\";", "+    expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "+    ", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac33f502af0855fd0d720ea627de7d4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void testModEquals()", "signatureAfterChange": "   public void testModEquals() throws ExceptionReturnedException", "diff": ["-  public void testModEquals() {", "-    Node exp = _parseCode(\"x %= new Integer(2);\").get(0);", "+  public void testModEquals() throws ExceptionReturnedException {", "+    // Tests mod-equals with a primitive left-hand side", "+    String text = \"x %= new Integer(2);\";", "+    String expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: x)\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+", "+    // Tests mod-equals with a reference-type left-hand side", "+    text = \"X %= new Integer(2);\";", "+    expectedLeft = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)])\";", "+    ", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 137}
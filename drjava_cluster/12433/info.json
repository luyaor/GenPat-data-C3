{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "389f7c06b1e69a041f9b653954b57cb5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65073dccfb8c7ba6e2b57cf88db59212", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "331da9dae5ca8d07aef3df8e995cb58d0f6f24d7", "commitAfterChange": "ad6842e7f3f5b3d0f8c5827298c4ec26a70a9f28", "methodNumberBeforeChange": 337, "methodNumberAfterChange": 337, "signatureBeforeChange": "     private File _locateClassFile()", "signatureAfterChange": "     private File _locateClassFile()", "diff": ["-//        _log.log(\"_locateClassFile() failed because getQualifedClassName returned ClassNotFound\");", "+        _log.log(\"_locateClassFile() failed for \" + this + \" because getQualifedClassName returned ClassNotFound\");", "-//      _log.log(\"In _locateClassFile, className = \" + className);", "+      _log.log(\"In _locateClassFile, className = \" + className);", "-//      _log.log(\"In _locateClassFile, fileName = \" + fileName);", "+      _log.log(\"In _locateClassFile, classfileName = \" + fileName);", "-      try { roots.add(getSourceRoot()); }", "+      try {", "+        File root = getSourceRoot();", "+        _log.log(\"Directory \" + root + \" added to list of source roots\");", "+        roots.add(root); ", "+      }", "+          _log.log(this + \" has no source root, using parent directory instead\");", "-          if (root != null) roots.add(root);", "+          if (root != null) {", "+            roots.add(root);", "+            _log.log(\"Added parent directory \" + root + \" to list of source roots\");", "+          }", "+          _log.log(\"File for \" + this + \"has moved; adding parent directory to list of roots\");", "-      File classFile = getSourceFileFromPaths(fileName, roots);", "-      if (classFile != null) return classFile;", "+      File classFile = findFileInPaths(fileName, roots);", "+      if (classFile != null) {", "+        _log.log(\"Found source file \" + classFile + \" for \" + this);", "+        return classFile;", "+      }", "+      _log.log(this + \" not found on path of source roots\");", "-      classFile = getSourceFileFromPaths(fileName, cpVector);", "+      classFile = findFileInPaths(fileName, cpVector);", "-      return getSourceFileFromPaths(fileName, DrJava.getConfig().getSetting(EXTRA_CLASSPATH));", "+      return findFileInPaths(fileName, DrJava.getConfig().getSetting(EXTRA_CLASSPATH));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1753ee05b74911a830ee50c62b4c33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["+    ", "+    _log.log(\"Slave JVM has started with args \" + Arrays.toString(args));", "-        IRemoteClassLoader remote = null;", "+        IRemoteClassLoader remoteLoader = null;", "-        remote = (IRemoteClassLoader) ostream.readObject();", "+        _log.log(\"Slave JVM reading remote loader object\");", "+        remoteLoader = (IRemoteClassLoader) ostream.readObject();", "+        _log.log(\"remote loader read\");", "-          loader.setMasterRemote(remote);", "+          loader.setMasterRemote(remoteLoader);", "+        _log.log(\"remote loader installed\");", "+      _log.log(\"Slave JVM reading the remote master object\");", "-      MasterRemote remote = (MasterRemote) ostream.readObject();", "+      MasterRemote master = (MasterRemote) ostream.readObject();", "+      _log.log(\"remote master read\");", "+      fstream.close();", "+      ostream.close();", "+        _log.log(\"Slave JVM creating singleton instance of slave class \" + args[1]);", "-        SlaveRemote stub = (SlaveRemote) UnicastRemoteObject.exportObject(slave);", "+        _log.log(\"Slave JVM creaing RMI stub for slave class instance \" + slave);", "+        SlaveRemote stub = (SlaveRemote) UnicastRemoteObject.exportObject(slave);  // What does this do?", "+        _log.log(\"stub for slave class exported\");", "-        slave.start(remote);", "-        remote.registerSlave(slave);", "+        _log.log(\"Slave JVM invoking the method start(\" + master + \") in the Slave JVM class\");", "+        slave.start(master);", "+        _log.log(\"Slave JVM invoking the method registerSlave(\" + slave + \") in the Master JVM\");", "+        master.registerSlave(slave);", "+        _log.log(\"Slave JVM could not intstantiate slave class and will exit\");", "-          remote.errorStartingSlave(t);", "+          master.errorStartingSlave(t);"]}], "num": 12433}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72df06e48ee62d0631089e23aff609dc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f2eb19739b59af2f55290961d80a5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "6595282fd67e77d6079df1ee1647ba51751bbcec", "commitAfterChange": "de0f38d123822794b2970bd8e5814e75677feb46", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "signatureAfterChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "diff": ["-    List<Type> typeArgs = null;", "+    List<Type> typeArgs = new LinkedList<Type>();", "+    List<List<? extends Type>> allTypeArgs = new LinkedList<List<? extends Type>>();", "+      allTypeArgs.add( typeArgs );", "+      typeArgs = new LinkedList<Type>();", "+      allTypeArgs.add( typeArgs );", "+      typeArgs = new LinkedList<Type>();", "-      if(typeArgs == null){", "+      boolean Parameterized = false;", "+      for( int i = 0; i < allTypeArgs.size(); i++ ){", "+        List<? extends Type> targs = allTypeArgs.get(i);", "+        if(targs.size() > 0) {", "+          Parameterized = true;", "+          break;", "+        }", "+      }", "+      if(!Parameterized){", "-                                        typeArgs);}", "+                                        allTypeArgs);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa6f4ec9733595566e400f844a852db2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)", "signatureAfterChange": "   public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)", "diff": ["-      return _getHighlightStatus(start, end); ", "-  }", "+    setCurrentLocation(start);", "+    /* Now ask reduced model for highlight status for chars till end */", "+    v = _reduced.getHighlightStatus(start, end - start);", "+    /* Go through and find any NORMAL blocks. Within them check for keywords. */", "+    for (int i = 0; i < v.size(); i++) {", "+      HighlightStatus stat = v.get(i);", "+      if (stat.getState() == HighlightStatus.NORMAL) i = _highlightKeywords(v, i);", "+    }", "+    ", "+    /* bstoler: Previously we moved back to the old location. This implementation choice severely slowed down ", "+     * rendering when scrolling because parts are rendered in order. Thus, if old location is 0, but now we've", "+     * scrolled to display 100000-100100, if we keep jumping back to 0 after getting every bit of highlight, it ", "+     * slows stuff down incredibly. */"]}], "num": 12037}
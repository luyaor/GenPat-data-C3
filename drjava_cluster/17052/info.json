{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5de90f60c9f87f0fc36e136d2ba0d877", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09a6b3b7c8052257374b7a7a5741aaa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "17f7883ffae3637cf9ec6b5aa5b32f12aa6f1a56", "commitAfterChange": "c3f7f9d7c32c110a7370bfc2864b2e98a988bba6", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "          public void updateLocation()", "signatureAfterChange": "          public void updateLocation()", "diff": ["-                                 \":\" + doc.getCurrentCol());", "+                                 \":\" + doc.getCurrentCol() + \"\\t\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ee87ad9c28194af83dcdd22c7d2875", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "signatureAfterChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "diff": ["-//        _addAndIgnoreError(\"The class \" + qualifiedClassName + \" was not found in the file \" + sourceFile, new NullLiteral(si));", "+//        _addAndIgnoreError(\"The class \" + qualifiedClassName + \" was not found in the file \" + sourceFile, ", "+//                           new NullLiteral(si));", "-//    if (qualifiedClassName.contains(\"List\")) {System.out.println(\"Line 777: There are \" + continuations.size() + \" continuations \" + continuations);}", "+//    if (qualifiedClassName.contains(\"List\")) {System.out.println(\"Line 777: There are \" + continuations.size() + ", "+//      \" continuations \" + continuations);}", "-          continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, createANewInstanceOfMe(sourceFile)));//this));", "+          continuations.put(qualifiedClassName, ", "+                            new Pair<SourceInfo, LanguageLevelVisitor>(si, createANewInstanceOfMe(sourceFile)));//this));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" is present, but does not have proper read permissions\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" is present, but does not have proper read permissions\", new NullLiteral(si));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" needs to be recompiled, but its directory does not have proper write permissions\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" needs to be recompiled, but its directory does not have proper write permissions\", ", "+                               new NullLiteral(si));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" is present, but its full path cannot be resolved (symbolic links may not have proper permissions)\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" is present, but its full path cannot be resolved \" + ", "+                               \"(symbolic links may not have proper permissions)\", ", "+                               new NullLiteral(si));", "-          throw new RuntimeException(\"Internal Program Error: Invalid file format not caught initially\" + sourceFile.getName() + \". Please report this bug\");", "+          throw new RuntimeException(\"Internal Program Error: Invalid file format not caught initially\" + ", "+                                     sourceFile.getName() + \". Please report this bug\");", "-              //  errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, new NullLiteral(p.getFirst())));", "+              //  errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, ", "+              //                                             new NullLiteral(p.getFirst())));"]}], "num": 17052}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "889306be4f3152fb8b31e49cc007854d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ff117d2ae9e2333496120da18ff0341", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r   public TypeData forPlusExpressionOnly(PlusExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forPlusExpressionOnly(PlusExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */\r", "-  public TypeData forPlusExpressionOnly(PlusExpression that, TypeData left_result, TypeData right_result) {\r", "-    if (left_result == null || right_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    SymbolData string = getSymbolData(\"java.lang.String\", that, false, false);\r", "-\r", "-    if (left_result.getSymbolData().isAssignableTo(string, _targetVersion) || right_result.getSymbolData().isAssignableTo(string, _targetVersion)) {\r", "-      //one of these is a String, so just make sure they are both instance types.\r", "-      assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);\r", "-      assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);\r", "-      return string.getInstanceData();\r", "-    }\r", "-    \r", "-    else { //neither is a string, so they must both be numbers\r", "-      if (!left_result.getSymbolData().isNumberType(_targetVersion) || !right_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-        _addError(\"The arguments to the Plus Operator (+) must either include an instance of a String or both be numbers.  You have specified arguments of type \" + left_result.getName() + \" and \" + right_result.getName(), that);\r", "-        return string.getInstanceData(); //return String by default\r", "-      }\r", "-      else {\r", "-        assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);\r", "-        assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);\r", "-      }\r", "-      \r", "-      return _getLeastRestrictiveType(left_result.getSymbolData(), right_result.getSymbolData()).getInstanceData();\r", "-\r", "-    }\r", "-  }\r", "+   */", "+  public TypeData forPlusExpressionOnly(PlusExpression that, TypeData left_result, TypeData right_result) {", "+    if (left_result == null || right_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "+      return null;", "+    }", "+    ", "+    SymbolData string = getSymbolData(\"java.lang.String\", that, false, false);", "+", "+    if (left_result.getSymbolData().isAssignableTo(string, LanguageLevelConverter.OPT.javaVersion()) ||", "+        right_result.getSymbolData().isAssignableTo(string, LanguageLevelConverter.OPT.javaVersion())) {", "+      //one of these is a String, so just make sure they are both instance types.", "+      assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "+      assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "+      return string.getInstanceData();", "+    }", "+    ", "+    else { //neither is a string, so they must both be numbers", "+      if (!left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion()) ||", "+          !right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"The arguments to the Plus Operator (+) must either include an instance of a String or both be numbers.  You have specified arguments of type \" + left_result.getName() + \" and \" + right_result.getName(), that);", "+        return string.getInstanceData(); //return String by default", "+      }", "+      else {", "+        assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "+        assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "+      }", "+      ", "+      return _getLeastRestrictiveType(left_result.getSymbolData(), right_result.getSymbolData()).getInstanceData();", "+", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35b10038df062a0ff02f4aed6222dfc5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r   public TypeData forPlusAssignmentExpressionOnly(PlusAssignmentExpression that, TypeData name_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forPlusAssignmentExpressionOnly(PlusAssignmentExpression that, TypeData name_result, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forPlusAssignmentExpressionOnly(PlusAssignmentExpression that, TypeData name_result, TypeData value_result) {\r", "-    if (name_result == null || value_result == null) {return null;}\r", "-    \r", "-    //make sure that both lhs and rhs could be resolved (not PackageDatas)\r", "-    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    //need to see if rhs is a String.\r", "-    SymbolData string = getSymbolData(\"java.lang.String\", that, false, false);\r", "-\r", "-    if (name_result.getSymbolData().isAssignableTo(string, _targetVersion)) {\r", "-      //the rhs is a String, so just make sure they are both instance types.\r", "-      assertInstanceType(name_result, \"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);\r", "-      assertInstanceType(value_result, \"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);\r", "-      return string.getInstanceData();\r", "-    }\r", "-    \r", "-    else { //neither is a string, so they must both be numbers\r", "-      if (!name_result.getSymbolData().isNumberType(_targetVersion) || !value_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-        _addError(\"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String or both be numbers.  You have specified arguments of type \" + name_result.getName() + \" and \" + value_result.getName(), that);\r", "-        return string.getInstanceData(); //return String by default\r", "-      }\r", "-      \r", "-      else if (!value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), _targetVersion)) {\r", "-        _addError(\"You cannot increment something of type \" + name_result.getName() + \" with something of type \" + value_result.getName(), that);\r", "-      }\r", "-      \r", "-      else {\r", "-        assertInstanceType(name_result, \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);\r", "-        assertInstanceType(value_result, \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);\r", "-      }\r", "-    \r", "-      return name_result.getInstanceData();\r", "-    }\r", "-  }\r", "+   */", "+  public TypeData forPlusAssignmentExpressionOnly(PlusAssignmentExpression that, TypeData name_result, TypeData value_result) {", "+    if (name_result == null || value_result == null) {return null;}", "+    ", "+    //make sure that both lhs and rhs could be resolved (not PackageDatas)", "+    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    //need to see if rhs is a String.", "+    SymbolData string = getSymbolData(\"java.lang.String\", that, false, false);", "+", "+    if (name_result.getSymbolData().isAssignableTo(string, LanguageLevelConverter.OPT.javaVersion())) {", "+      //the rhs is a String, so just make sure they are both instance types.", "+      assertInstanceType(name_result, \"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);", "+      assertInstanceType(value_result, \"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);", "+      return string.getInstanceData();", "+    }", "+    ", "+    else { //neither is a string, so they must both be numbers", "+      if (!name_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion()) ||", "+          !value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String or both be numbers.  You have specified arguments of type \" + name_result.getName() + \" and \" + value_result.getName(), that);", "+        return string.getInstanceData(); //return String by default", "+      }", "+      ", "+      else if (!value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"You cannot increment something of type \" + name_result.getName() + \" with something of type \" + value_result.getName(), that);", "+      }", "+      ", "+      else {", "+        assertInstanceType(name_result, \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);", "+        assertInstanceType(value_result, \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified a type name\", that);", "+      }", "+    ", "+      return name_result.getInstanceData();", "+    }", "+  }"]}], "num": 28584}
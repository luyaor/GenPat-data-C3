{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be4ceec2eda2bcd5c904dbcb0bfba0aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "347159538ee93d2a88812715e5883854", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public Type visit(SuperMethodCall node)", "signatureAfterChange": "   public Class<?> visit(SuperMethodCall node)", "diff": ["-  public Type visit(SuperMethodCall node) {", "+  public Class<?> visit(SuperMethodCall node) {", "-        pt[i++] = (Class<?>)it.next().acceptVisitor(this);", "+        pt[i++] = it.next().acceptVisitor(this);", "-    ", "-    try { m = context.lookupSuperMethod(node, node.getMethodName(), pt); } ", "-    catch (Exception e) { throw new CatchedExceptionError(e, node); }", "-    ", "+    try {", "+      m = context.lookupSuperMethod(node, node.getMethodName(), pt);", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+    }", "+", "-    Type c;", "+    Class<?> c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d26c9e58caf0e8a5654bea328b39ddfd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public Class<?> visit(SuperMethodCall node)", "signatureAfterChange": "   public Type visit(SuperMethodCall node)", "diff": ["-  public Class<?> visit(SuperMethodCall node) {", "+  public Type visit(SuperMethodCall node) {", "-        pt[i++] = it.next().acceptVisitor(this);", "+        pt[i++] = (Class<?>)it.next().acceptVisitor(this);", "+    ", "-    try {", "-      m = context.lookupSuperMethod(node, node.getMethodName(), pt);", "-    } catch (Exception e) {", "-      throw new CatchedExceptionError(e, node);", "-    }", "-", "+    try { m = context.lookupSuperMethod(node, node.getMethodName(), pt); } ", "+    catch (Exception e) { throw new CatchedExceptionError(e, node); }", "+    ", "-    Class<?> c;", "+    Type c;"]}], "num": 12786}
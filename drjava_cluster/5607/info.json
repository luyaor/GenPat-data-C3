{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3545ec1c2d577ee6f3a83a1c936bcdd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ac62c3d7896a74bf09917b6242d81ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/PrecomputedRecursionStack3.java", "commitBeforeChange": "b9dd52b4ecb6c9b7750e6e1de631c1d8032aa916", "commitAfterChange": "2bd872ed3d0b6e87a4c41b76a623c493f8166665", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public PrecomputedRecursionStack3()", "signatureAfterChange": "   public PrecomputedRecursionStack3()", "diff": ["-  /** Create an empty recursion stack */", "-  public PrecomputedRecursionStack3() {", "-    _previous = new HashMap<IdentityTriple<T1, T2, T3>, ", "-                            Lambda3<? super T1, ? super T2, ? super T3, ? extends R>>();", "-    _stack = new LinkedList<IdentityTriple<T1, T2, T3>>();", "+  /** Create an empty recursion stack with an {@link IdentityTriple} factory */", "+  public PrecomputedRecursionStack3() { this(IdentityTriple.<T1, T2, T3>factory()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b37648b0b6c8d451480eb31fbeb79c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/PrecomputedRecursionStack2.java", "commitBeforeChange": "b9dd52b4ecb6c9b7750e6e1de631c1d8032aa916", "commitAfterChange": "2bd872ed3d0b6e87a4c41b76a623c493f8166665", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public PrecomputedRecursionStack2()", "signatureAfterChange": "   public PrecomputedRecursionStack2()", "diff": ["-  /** Create an empty recursion stack */", "-  public PrecomputedRecursionStack2() {", "-    _previous = new HashMap<IdentityPair<T1, T2>, Lambda2<? super T1, ? super T2, ? extends R>>();", "-    _stack = new LinkedList<IdentityPair<T1, T2>>();", "+  /** Create an empty recursion stack with an {@link IdentityPair} factory */", "+  public PrecomputedRecursionStack2() { this(IdentityPair.<T1, T2>factory()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3b41ef38738fe8abfb916888a92bf9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/PrecomputedRecursionStack4.java", "commitBeforeChange": "b9dd52b4ecb6c9b7750e6e1de631c1d8032aa916", "commitAfterChange": "2bd872ed3d0b6e87a4c41b76a623c493f8166665", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public PrecomputedRecursionStack4()", "signatureAfterChange": "   public PrecomputedRecursionStack4()", "diff": ["-  /** Create an empty recursion stack */", "-  public PrecomputedRecursionStack4() {", "-    _previous = new HashMap<IdentityQuad<T1, T2, T3, T4>, ", "+  /** Create an empty recursion stack with an {@link IdentityQuad} factory */", "+  public PrecomputedRecursionStack4() { this(IdentityQuad.<T1, T2, T3, T4>factory()); }", "-    _stack = new LinkedList<IdentityQuad<T1, T2, T3, T4>>();"]}], "num": 5607}
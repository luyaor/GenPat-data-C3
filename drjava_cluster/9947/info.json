{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c09c68b6867cdb7abf69de768b885958", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d94424f60526af810558cc78eda206", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 207, "signatureBeforeChange": "   public static <T1, T2, T3> Iterable<Triple<T1, T2, T3>> zip(Iterable<? extends T1> iter1,                                                                Iterable<? extends T2> iter2,                                                               Iterable<? extends T3> iter3)", "signatureAfterChange": "   public static <T1, T2, T3> Iterable<Triple<T1, T2, T3>> zip(Iterable<? extends T1> iter1,                                                                Iterable<? extends T2> iter2,                                                               Iterable<? extends T3> iter3)", "diff": ["-    Lambda3<T1, T2, T3, Triple<T1, T2, T3>> makeTriple = ", "-      new Lambda3<T1, T2, T3, Triple<T1, T2, T3>>() {", "-        public Triple<T1, T2, T3> value(T1 arg1, T2 arg2, T3 arg3) { ", "-          return new Triple<T1, T2, T3>(arg1, arg2, arg3);", "-        }", "-      };", "-    return new TernaryMappedIterable<T1, T2, T3, Triple<T1, T2, T3>>(iter1, iter2, iter3, ", "-                                                                     makeTriple);", "+    return new TernaryMappedIterable<T1, T2, T3, Triple<T1, T2, T3>>(iter1, iter2, iter3, Triple.<T1, T2, T3>factory());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b201e91cf02d61ca3e20f08bf4744d05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 208, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Iterable<Quad<T1, T2, T3, T4>> zip(Iterable<? extends T1> iter1,                                                                      Iterable<? extends T2> iter2,                                                                     Iterable<? extends T3> iter3,                                                                     Iterable<? extends T4> iter4)", "signatureAfterChange": "   public static <T1, T2, T3, T4> Iterable<Quad<T1, T2, T3, T4>> zip(Iterable<? extends T1> iter1,                                                                      Iterable<? extends T2> iter2,                                                                     Iterable<? extends T3> iter3,                                                                     Iterable<? extends T4> iter4)", "diff": ["-    Lambda4<T1, T2, T3, T4, Quad<T1, T2, T3, T4>> makeQuad = ", "-      new Lambda4<T1, T2, T3, T4, Quad<T1, T2, T3, T4>>() {", "-        public Quad<T1, T2, T3, T4> value(T1 arg1, T2 arg2, T3 arg3, T4 arg4) { ", "-          return new Quad<T1, T2, T3, T4>(arg1, arg2, arg3, arg4);", "-        }", "-      };", "-    return new QuaternaryMappedIterable<T1, T2, T3, T4, ", "-                                        Quad<T1, T2, T3, T4>>(iter1, iter2, iter3, iter4, makeQuad);", "-  }", "+    return new QuaternaryMappedIterable<T1, T2, T3, T4, Quad<T1, T2, T3, T4>>(iter1, iter2, iter3, iter4, ", "+                                                                              Quad.<T1, T2, T3, T4>factory());"]}], "num": 9947}
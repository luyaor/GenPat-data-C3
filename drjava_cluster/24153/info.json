{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b5fe908ea4e446a93b4a82275f142fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfce8c6d2e0b4a87390d63021522521c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "          public void testCheckAccessibility()", "signatureAfterChange": "          public void testCheckAccessibility()", "diff": ["-      assertTrue(\"checkAccessibility with public mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and different packages\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertTrue(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with public mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertTrue(\"checkAccessibility with public mav and different packages\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with public mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility with public mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertTrue(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with protected mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with protected mav and different package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with protected mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccessibility with protected mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with protected mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility with protected mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "-      assertFalse(\"checkAccessibility with private mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and different package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with private mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertFalse(\"checkAccessibility with private mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccessibility with private mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with private mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertFalse(\"checkAccessibility with private mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with private mav and same file\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with private mav and same file\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with package mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with package mav and different package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with package mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccessibility with package mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with package mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility with package mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd4, \"class\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05593fb1023cd1c242bcbc0d6b6b411", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "          public void testCheckAccessibility()", "signatureAfterChange": "          public void testCheckAccessibility()", "diff": ["+      String sd3Name = _sd3.getName();", "+      String sd6Name = _sd6.getName();", "+", "-      assertTrue(\"checkAccessibility with public mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and different packages\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertTrue(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccess with public mav and same package\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertTrue(\"checkAccess with public mav and different packages\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with public mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertTrue(\"checkAccess for a class and a class it is not related to\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, sd6Name, _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with protected mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with protected mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccess with protected mav and same package\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccess with protected mav and different package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with protected mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccess with protected mav and is super class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccess for a class and a class it is not related to\", ", "+                  _btc.checkAccess(NULL_LITERAL, _protectedMav, sd6Name, _sd2, _sd4, \"class\"));", "-      ", "-      assertFalse(\"checkAccessibility with private mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with private mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertFalse(\"checkAccess with private mav and same package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccess with private mav and different package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with private mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertFalse(\"checkAccess with private mav and is super class\",", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertEquals(\"The last error message should be correct\", \"The field fieldOfDreams is private and cannot be accessed from \" + _sd6.getName(), errors.getLast().getFirst());", "-      assertTrue(\"checkAccessibility with private mav and same file\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertEquals(\"The last error message should be correct\", ", "+                   \"The field fieldOfDreams in \" + sd3Name + \" is private and cannot be accessed from \" + sd6Name, ", "+                   errors.getLast().getFirst());", "+      assertTrue(\"checkAccess with private mav and same file\",", "+                 _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _privateMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccess for a class and a class it is not related to\", ", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, sd6Name, _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with package mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with package mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccess with package mav and same package\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccess with package mav and different package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with package mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccess with package mav and is super class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccess for a class and a class it is not related to\", ", "+                  _btc.checkAccess(NULL_LITERAL, _packageMav, sd6Name, _sd2, _sd4, \"class\"));"]}], "num": 24153}
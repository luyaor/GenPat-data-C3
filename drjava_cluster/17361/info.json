{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "947233f98cea497b88fd45062023ed34", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4eee021c8fde7451351ea22015650fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "7dad2d86edcd09e4266e43b7304026dc7b0b3db7", "commitAfterChange": "1333ad40debe120f6d8fd5fb5ff36c57ce6b1ccf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testInfiniteLoop() throws Exception", "signatureAfterChange": "   public void testInfiniteLoop() throws Exception", "diff": ["+    _model.setResetAfterCompile(false);", "+    ", "-    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(false);", "-    synchronized(listener) {", "+    if (printMessages) System.out.println(\"before compile\");", "+    //synchronized(listener) {", "-      listener.wait();", "-    }", "+      //listener.wait();", "+    //}", "+    if (printMessages) System.out.println(\"after compile\");", "+      if (printMessages) System.out.println(\"waiting for test\");", "+    if (printMessages) System.out.println(\"after test\");", "+    ", "+    _model.setResetAfterCompile(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcbcd1014980b0cc1d3e7af631b29eb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "c36376a479e48347a90a7534812768b74b033816", "commitAfterChange": "1018be24b33ba74b1be6da8d72dc97e6545e20b1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public int balanceForward()", "signatureAfterChange": "   public int balanceForward()", "diff": ["+    //System.out.println(\"-------------------------------------------\");", "+    resetWalkerLocationToCursor();", "-    ", "-    resetLocation(); //resets location of ReducedModelComment", "-    ", "-    if (iter.atStart())", "-      iter.next();", "-    ", "+    if (iter.atStart() ||", "+        iter.atFirstItem() ||", "+        !openBraceImmediatelyLeft())", "+    {", "+//      System.out.println(\"openBraceImmediatelyLeft(): \"+openBraceImmediatelyLeft());", "+      iter.dispose();", "+//      System.out.println(\"! atStart, atFirstItem, or no closed brace\");", "+      return -1;", "+    }", "+", "+    iter.prev();", "+    relDistance = -iter.current().getSize();", "-    // immediately to the right of the cursor", "-    if (!iter.atEnd() && openBraceImmediatelyRight()) {", "-      if (stateAtRelLocation(relDistance) == FREE) {", "-        relDistance = 0;", "-        // initialize the distance and the stack with the first brace,", "-        // the one we are balancing", "-        ", "+    // immediately to the left of the cursor", "+    if (iter.current().isOpenBrace()) {", "+      if(moveWalkerGetState(relDistance) == FREE) {", "+        // initialize the stack with the first brace, the one we are balancing", "-        distance += iter.current().getSize();", "+", "+        // reset the walker and iter to where we started", "-        ", "-        // either we get a match and the stack is empty", "-        // or we reach the end of a file and haven't found a match", "-        // or we have a closed brace that doesn't have a match,", "-        //    so we abort", "-        while (!iter.atEnd() && !braceStack.isEmpty()) {", "-          if (!iter.current().isGap()) {", "-            if (stateAtRelLocation(relDistance) == FREE) {", "+        moveWalkerGetState(-relDistance);", "+        relDistance = 0;", "+      }", "+      else {", "+        // the open brace is in a comment or quotation => ignore it", "+        iter.dispose();", "+//        System.out.println(\"! state at relative location != FREE\");", "+        return -1;", "+      }", "+    }", "+    else {", "+      // this isn't an open brace => ignore it", "+      iter.dispose();", "+//      System.out.println(\"! no open brace to immediate left of cursor\");", "+      return -1;", "+    }", "+    // either we get a match and the stack is empty", "+    // or we reach the end of a file and haven't found a match", "+    // or we have a close brace that doesn't have a match,", "+    // so we abort", "+    while (!iter.atEnd() && !braceStack.isEmpty()) {", "+      if (!iter.current().isGap()) {", "+        if (moveWalkerGetState(relDistance) == FREE) {", "+              // check for closed brace", "-                if (!iter.current().isMatch(popped)) {", "+                if (!iter.current().isMatch(popped)){", "+//                  System.out.println(\"! encountered closed brace that didn't match\");", "-              //open", "-              else{", "+              // otherwise, this must be an open brace", "+              else {", "-            relDistance = 0;", "-          }", "-          // no matter what, we always want to increase the distance", "-          // by the size of the token we have just gone over", "-          distance += iter.current().getSize();", "-          relDistance += iter.current().getSize();", "-          iter.next();", "-        }", "-        ", "-        // we couldn't find a match", "-        if (!braceStack.isEmpty()) {", "-          iter.dispose();", "-          return -1;", "-        }", "-        // success", "-        else {", "-          iter.dispose();", "-          return distance;", "-        }", "+        relDistance = 0;", "-      // not the right initial conditions ", "+      // no matter what, we always want to increase the distance", "+      // by the size of the token we have just gone over", "+        distance += iter.current().getSize();", "+        relDistance += iter.current().getSize();", "+        iter.next();", "-    iter.dispose();", "-    return -1;", "+", "+    // we couldn't find a match", "+    if (!braceStack.isEmpty()) {", "+      iter.dispose();", "+//      System.out.println(\"! ran to end of file. distance: \" + distance);", "+      return -1;", "+    }", "+    // success", "+    else {", "+      iter.dispose();", "+      return distance;", "+    }"]}], "num": 17361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1ddd4b15ebb4712baec6af15345d4b5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ef8e663f7b44c0db3156ae168bb527f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 400, "methodNumberAfterChange": 400, "signatureBeforeChange": "\r \r   public void forFormalParameter(FormalParameter that)", "signatureAfterChange": "    public void forFormalParameter(FormalParameter that)", "diff": ["-\r", "-  public void forFormalParameter(FormalParameter that) {\r", "-    forFormalParameterDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getDeclarator().visit(this);\r", "-    forFormalParameterOnly(that);\r", "-  }\r", "+", "+  public void forFormalParameter(FormalParameter that) {", "+    forFormalParameterDoFirst(that);", "+    if (prune(that)) return;", "+    that.getDeclarator().visit(this);", "+    forFormalParameterOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ce9fd551b505b25140d6056a3ec3e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 402, "methodNumberAfterChange": 402, "signatureBeforeChange": "\r \r   public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that)", "signatureAfterChange": "    public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that)", "diff": ["-\r", "-  public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that) {\r", "-    forUninitializedVariableDeclaratorDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    forUninitializedVariableDeclaratorOnly(that);\r", "-  }\r", "+", "+  public void forUninitializedVariableDeclarator(UninitializedVariableDeclarator that) {", "+    forUninitializedVariableDeclaratorDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    forUninitializedVariableDeclaratorOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5352032b206d1f40eed8195f079b936e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": "\r \r   public void forInitializedVariableDeclarator(InitializedVariableDeclarator that)", "signatureAfterChange": "    public void forInitializedVariableDeclarator(InitializedVariableDeclarator that)", "diff": ["-\r", "-  public void forInitializedVariableDeclarator(InitializedVariableDeclarator that) {\r", "-    forInitializedVariableDeclaratorDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getInitializer().visit(this);\r", "-    forInitializedVariableDeclaratorOnly(that);\r", "-  }\r", "+", "+  public void forInitializedVariableDeclarator(InitializedVariableDeclarator that) {", "+    forInitializedVariableDeclaratorDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getInitializer().visit(this);", "+    forInitializedVariableDeclaratorOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5541819e0f9e1b9e4b680364f1bc2288", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 401, "signatureBeforeChange": "\r \r   public void forVariableDeclaration(VariableDeclaration that)", "signatureAfterChange": "    public void forVariableDeclaration(VariableDeclaration that)", "diff": ["-\r", "-  public void forVariableDeclaration(VariableDeclaration that) {\r", "-    forVariableDeclarationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getMav().visit(this);\r", "-    for (int i = 0; i < that.getDeclarators().length; i++) that.getDeclarators()[i].visit(this);\r", "-    forVariableDeclarationOnly(that);\r", "-  }\r", "+", "+  public void forVariableDeclaration(VariableDeclaration that) {", "+    forVariableDeclarationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getMav().visit(this);", "+    for (int i = 0; i < that.getDeclarators().length; i++) that.getDeclarators()[i].visit(this);", "+    forVariableDeclarationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8525b370585e0b69520789c76bc52c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 404, "methodNumberAfterChange": 404, "signatureBeforeChange": "\r \r   public void forTypeParameter(TypeParameter that)", "signatureAfterChange": "    public void forTypeParameter(TypeParameter that)", "diff": ["-\r", "-  public void forTypeParameter(TypeParameter that) {\r", "-    forTypeParameterDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getVariable().visit(this);\r", "-    that.getBound().visit(this);\r", "-    forTypeParameterOnly(that);\r", "-  }\r", "+", "+  public void forTypeParameter(TypeParameter that) {", "+    forTypeParameterDoFirst(that);", "+    if (prune(that)) return;", "+    that.getVariable().visit(this);", "+    that.getBound().visit(this);", "+    forTypeParameterOnly(that);", "+  }"]}], "num": 19606}
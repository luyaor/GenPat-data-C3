{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "876d0f90f987121c50c86d99b9540615", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b482e80041f2ad5fe710f28819f6e2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtilTest.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "         public void testComputeInProcess()", "signatureAfterChange": "         public void testComputeInProcess()", "diff": ["+    debug.logStart();", "+    ", "-      if (e.getCause() instanceof NotSerializableException) { /* expected */ }", "-      else { throw e; }", "+      assertTrue(e.getCause() instanceof WrappedException); // wrapped once by the task implementation, once by value()", "+      assertTrue(e.getCause().getCause() instanceof NotSerializableException);", "-      if (e.getCause() instanceof InvocationTargetException && e.getCause().getCause() instanceof RuntimeException) {", "-        assertEquals(\"done\", e.getCause().getCause().getMessage());", "-      }", "-      else { throw e; }", "+      assertTrue(e.getCause() instanceof ExecutionException);", "+      assertTrue(e.getCause().getCause() instanceof RuntimeException);", "+      assertEquals(\"done\", e.getCause().getCause().getMessage());", "+    ", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62d926f5a58e2fbe86d5d2f98b78cc1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelListTest.java", "commitBeforeChange": "b0a3e61fcb6f69254e613857fc8755d818cd4948", "commitAfterChange": "30084d60ea1c92bd9e5a911d71d6555be6180e71", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public void testCurrent()", "signatureAfterChange": "    public void testCurrent()", "diff": ["-      throw new RuntimeException(\"Current call in initial position \"+", "-                                 \"did not fail.\");", "+      fail(\"Current call in initial position did not fail.\");", "-    catch (Exception e) {", "+    catch (RuntimeException e) {", "+      //This call was supposed to throw an exception", "+            assertEquals(\"current() throws exception when at end\",", "+                   e.getMessage(),", "+                   \"Attempt to call current on an iterator in the initial position\");", "+    }", "+    itFull.next();", "+    try {", "+      itFull.current();", "+      fail(\"Current call in final position did not fail.\");", "+    }", "+    catch (RuntimeException e) {", "+      //This call was supposed to throw an exception", "+      assertEquals(\"current() throws exception when at end\",", "+                   e.getMessage(),", "+                   \"Attempt to call current on an iterator in the final position\");"]}], "num": 19544}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6ec754578cbd3170f5e3f14ff7320c1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43e9da990063e5f42eef1628a08cb21e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 119, "signatureBeforeChange": "          public void testCheckDifferentReturnTypes()", "signatureAfterChange": "          public void testCheckDifferentReturnTypes()", "diff": ["-      assertTrue(\"There should be a conflict in 1.4\", checkDifferentReturnTypes(md8, _sd, JavaVersion.JAVA_1_4));", "-      assertEquals(\"There should now be 4 errors\", 4, TypeChecker.errors.size());", "-      assertEquals(\"The error message should be correct\", TypeChecker.errors.getLast().getFirst(), ", "-                   \"superSuperMethodName(char) in superClass cannot override superSuperMethodName(char) in \" + ", "-                   superSuperSd.getName() + \"; attempting to use different return types\");", "+      /* Java 1.4 is not supported. */", "+//      assertTrue(\"There should be a conflict in 1.4\", checkDifferentReturnTypes(md8, _sd, JavaVersion.JAVA_1_4));", "+//      assertEquals(\"There should now be 4 errors\", 4, TypeChecker.errors.size());", "+//      assertEquals(\"The error message should be correct\", TypeChecker.errors.getLast().getFirst(), ", "+//                   \"superSuperMethodName(char) in superClass cannot override superSuperMethodName(char) in \" + ", "+//                   superSuperSd.getName() + \"; attempting to use different return types\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2a301c904b39e2a70ac5b406bf7fdbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "          public void test_forModifiersAndVisibility()", "signatureAfterChange": "          public void test_forModifiersAndVisibility()", "diff": ["-      assertEquals(\"There should be two errors.\", 3, errors.size());", "+      assertEquals(\"There should still be two errors.\", 2, errors.size());  // Generated error is duplicate", "-                   \" Can't use final and abstract together.\", errors.get(2).getFirst());", "+                   \" Can't use final and abstract together.\", errors.get(1).getFirst());", "-      assertEquals(\"There should be two errors.\", 4, errors.size());", "+      assertEquals(\"There should be three errors.\", 3, errors.size());  // Generated one new error", "-                   \" Can't use final and volatile together.\", errors.get(3).getFirst());", "+                   \" Can't use final and volatile together.\", errors.get(2).getFirst());", "-      assertEquals(\"There should be two errors.\", 5, errors.size());", "-      assertEquals(\"The error message should be correct.\", \"Duplicate modifier: static\", errors.get(4).getFirst());", "+      assertEquals(\"There should be four errors.\", 4, errors.size());  // Generated one new error", "+      assertEquals(\"The error message should be correct.\", \"Duplicate modifier: static\", errors.get(3).getFirst());"]}], "num": 4667}
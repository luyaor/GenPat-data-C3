{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b19841a64a1bc9cf5e5b9a23fd1e5eb9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49b9c504d2abeffa7b8efe95411e25a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object visit(TypeExpression node)", "signatureAfterChange": "     public Object visit(TypeExpression node)", "diff": ["-      node.setType((ReferenceType)((Type)node.getType().acceptVisitor(this)));", "+      // For some reason, the setType expression in node only takes in", "+      // ReferenceTypes so we have to create a new TypeExpression in", "+      // case the visitor returns a PrimitiveType (e.g. int.class used", "+      // to cause a ClassCastException).", "+      node = new TypeExpression((Type)node.getType().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfc534ab0482f115960f3c71e0203136", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public GlobalModel()", "signatureAfterChange": "   public GlobalModel()", "diff": ["-  public GlobalModel() ", "+  public GlobalModel()", "-    _definitionsDoc = (DefinitionsDocument)(_editorKit.createDefaultDocument());", "+    _definitionsDocs = new LinkedList();"]}], "num": 6015}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82349113413822ed4d396ee2094b8bc0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4298adc55a158e6557e8ca0828fc1041", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "6cf6212d2242fc41ac00a6496c1e1ba3b53de977", "commitAfterChange": "04e763507593a06a56de16c4b3641de0dbca16f7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-", "-    int here = doc.getCurrentLocation();", "-    int origin = doc.getReduced().absOffset();", "+    ", "+    int origin = doc.getCurrentLocation();", "+    //int origin = doc.getReduced().absOffset();", "-    doc.getReduced().move(lineStart - origin);", "-    IndentInfo info = doc.getReduced().getIndentInformation();", "-    doc.getReduced().move(origin - lineStart);", "-    ", "-    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-        (info.distToBrace < 0)) {", "-      // Precondition not met: we should have a brace", "-      return false;", "+    synchronized(doc){", "+      doc.move(lineStart - origin);", "+      IndentInfo info = doc.getIndentInformation();", "+      doc.move(origin - lineStart);    ", "+      ", "+      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+          (info.distToBrace < 0)) {", "+        // Precondition not met: we should have a brace", "+        return false;", "+      }", "+      int bracePos = lineStart - info.distToBrace;    ", "+      ", "+      // Get brace's end of line", "+      int braceEndLinePos = doc.getLineEndPos(bracePos);", "+      ", "+      // Get position of next non-WS char (not in comments)", "+      int nextNonWS = -1;", "+      try {", "+        nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "+      }", "+      catch (BadLocationException e) {", "+        // This shouldn't happen", "+        throw new UnexpectedException(e);", "+      }", "+      ", "+      if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+        return true;", "+      }", "+      ", "+      return (nextNonWS >= lineStart);", "-    int bracePos = lineStart - info.distToBrace;    ", "-    ", "-    // Get brace's end of line", "-    int braceEndLinePos = doc.getLineEndPos(bracePos);", "-    ", "-    // Get position of next non-WS char (not in comments)", "-    int nextNonWS = -1;", "-    try {", "-      nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-    }", "-    catch (BadLocationException e) {", "-      // This shouldn't happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "-      return true;", "-    }", "-    ", "-    return (nextNonWS >= lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96289707c62097d2479e58e2ac0d6418", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "6cf6212d2242fc41ac00a6496c1e1ba3b53de977", "commitAfterChange": "04e763507593a06a56de16c4b3641de0dbca16f7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-", "-    int here = doc.getCurrentLocation();", "-    int origin = doc.getReduced().absOffset();", "-    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    ", "+    int origin = doc.getCurrentLocation();", "+    int lineStart = doc.getLineStartPos(origin);", "-    doc.getReduced().move(lineStart - origin);", "-    IndentInfo info = doc.getReduced().getIndentInformation();", "-    doc.getReduced().move(origin - lineStart);", "-    ", "-    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-        (info.distToBrace < 0)) {", "-      // Precondition not met: we should have a brace", "-      return false;", "-    }", "-    int bracePos = lineStart - info.distToBrace;    ", "-    ", "-    // Get position of previous non-WS char (not in comments)", "-    int prevNonWS = -1;", "-    try {", "-      prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "-      for (int i=0; i<_prefix.length; i++) {", "-        char prefix = _prefix[i];", "-        if (doc.getText(prevNonWS,1).charAt(0) == prefix) {", "-          return true;", "-        } ", "+    synchronized(doc){", "+      doc.move(lineStart - origin);", "+      IndentInfo info = doc.getIndentInformation();", "+      doc.move(origin - lineStart);", "+      ", "+      ", "+      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+          (info.distToBrace < 0)) {", "+        // Precondition not met: we should have a brace", "+        return false;", "-    }", "-    catch (BadLocationException e) {", "+      int bracePos = lineStart - info.distToBrace;    ", "+      ", "+      // Get position of previous non-WS char (not in comments)", "+      int prevNonWS = -1;", "+      try {", "+        prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "+        for (int i=0; i<_prefix.length; i++) {", "+          char prefix = _prefix[i];", "+          if (doc.getText(prevNonWS,1).charAt(0) == prefix) {", "+            return true;", "+          } ", "+        }", "+      }", "+      catch (BadLocationException e) {", "+      }    "]}], "num": 5438}
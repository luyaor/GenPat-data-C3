{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15bc5dd47d39d365df53cb36ee5120ca", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0869d663c3d747f84bdadd57a2d1e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp()", "signatureAfterChange": "   public void setUp()", "diff": ["-    _globalContext = new GlobalContext(new TreeInterpreter(new JavaCCParserFactory()));", "+    // This test is dependent on 1.5 since the ObjectMethodCall uses 1.5 reflection methods.", "+    // If this were run in 1.4 and we faked the version property to 1.5, some methods would", "+    // not be found during the test and would cause the test case to fail.", "+    String version = System.getProperty(VERSION_KEY);", "+    if (Float.valueOf(version) < 1.5) {", "+      throw new WrongVersionException(\"This test case requires Java 2 SDK v1.5.0 or better\");", "+    }", "+    ", "+    parserFactory = new JavaCCParserFactory();", "+    _globalContext = new GlobalContext(new TreeInterpreter(parserFactory));", "+", "-    _interpreter = new DynamicJavaAdapter();", "+", "+    _interpreter = new TreeInterpreter(parserFactory);", "-      _interpreter.interpret(\"int x = 0;\");", "-      _interpreter.interpret(\"Integer X = new Integer(0);\");", "-      _interpreter.interpret(\"Boolean B = Boolean.FALSE;\");", "-      _interpreter.interpret(\"boolean b = false;\");", "-      _interpreter.interpret(\"int[] I = {1, 2, 3};\");", "+      _interpretText(\"int x = 0;\");", "+      _interpretText(\"Integer X = new Integer(0);\");", "+      _interpretText(\"Boolean B = Boolean.FALSE;\");", "+      _interpretText(\"boolean b = false;\");", "+      _interpretText(\"int[] I = {1, 2, 3};\");", "-    catch (ExceptionReturnedException ere) {", "+    catch (InterpreterException ere) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd76dd8726dafcb779e8b9580a42d1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public synchronized boolean posInParenPhrase(int pos)", "signatureAfterChange": "   public synchronized boolean posInParenPhrase(int pos)", "diff": ["-    int here = _reduced.absOffset();", "+    // Check cache", "+    String key = \"posInParenPhrase:\" + pos;", "+    Boolean cached = (Boolean) _checkCache(key);", "+    if (cached != null) {", "+      return cached.booleanValue();", "+    }", "+    ", "+    int here = _currentLocation;", "-    IndentInfo info = _reduced.getIndentInformation();", "-    boolean inParenPhrase = info.braceTypeCurrent.equals(IndentInfo.openParen);", "+    boolean inParenPhrase = posInParenPhrase();", "+    _storeInCache(key, new Boolean(inParenPhrase));", "+  }"]}], "num": 12119}
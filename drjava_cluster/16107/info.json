{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c11a2884e69e5f464ce7531bca2951fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e7c988973fef56192020199a573a73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "6f1acfed93f6d8a456de0a61ce52794b51d5c7e6", "commitAfterChange": "a8a2ff5403f688b7e466daab9ebf3ad141a81ce3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "               public void testSwitchStatement() throws InterpreterException", "signatureAfterChange": "               public void testSwitchStatement() throws InterpreterException", "diff": ["+", "+", "+    text = \"switch( 'a' ) { case 'a': }\";", "+    _parseCode(text).get(0).acceptVisitor(_typeChecker);", "-    _interpretText(text);", "+    try {", "+      text = \"switch ('a') { case \\\"adsf\\\": }\";", "+      _parseCode(text).get(0).acceptVisitor(_typeChecker);", "+      fail(\"shouldn't be able to switch Strings\");", "+    }", "+    catch (ExecutionError e) {", "+\t// DO NOTHING", "+    }", "+    //System.out.println(_parseCode(text).get(0));", "+    ", "+    text = \"switch (5) { case 'a': }\";", "+    expected = \"(koala.dynamicjava.tree.SwitchStatement: (koala.dynamicjava.tree.IntegerLiteral: 5 5 int) [(koala.dynamicjava.tree.SwitchBlock: (koala.dynamicjava.tree.CharacterLiteral: 'a' a char) null)])\";", "+    Statement stmt1 = (Statement)_parseCode(text).get(0);", "+    actual = stmt1.toString();", "+    assertEquals(\"should parse switch into selector and switch block\", expected, actual);", "+    stmt1.acceptVisitor(_typeChecker);", "+  ", "+    text = \"switch ((byte)5) { case 'a': }\";", "+    expected = \"(koala.dynamicjava.tree.SwitchStatement: (koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.IntegerLiteral: 5 5 int) (koala.dynamicjava.tree.ByteType: byte)) [(koala.dynamicjava.tree.SwitchBlock: (koala.dynamicjava.tree.CharacterLiteral: 'a' a char) null)])\";", "+    List stmts = _parseCode(text);", "+    stmt1 = (Statement)stmts.get(0);", "+    actual = stmt1.toString();", "+    assertEquals(\"should parse switch into selector and switch block\", expected, actual);", "+    stmt1.acceptVisitor(_typeChecker);", "+   ", "+    text = \"switch ((short)5) { case 5: default: }\";", "+    expected = \"(koala.dynamicjava.tree.SwitchStatement: (koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.IntegerLiteral: 5 5 int) (koala.dynamicjava.tree.ShortType: short)) [(koala.dynamicjava.tree.SwitchBlock: (koala.dynamicjava.tree.IntegerLiteral: 5 5 int) null), (koala.dynamicjava.tree.SwitchBlock: null null)])\";", "+    stmt1 = (Statement)_parseCode(text).get(0);", "+    actual = stmt1.toString();", "+    assertEquals(\"should parse switch into selector and switch block\", expected, actual);", "+    stmt1.acceptVisitor(_typeChecker);", "+", "+    try {", "+      text = \"boolean BB = true; switch (BB) { case true: case false: }\";", "+      _interpretText(text);", "+      fail(\"shouldn't be able to switch booleans\");", "+    } ", "+    catch (ExecutionError e) {", "+\t//DO NOTHING", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e856158bf625d875e63ed5064aef3825", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 53, "signatureBeforeChange": "      public void testVariableDeclaration()", "signatureAfterChange": "       public void testVariableDeclaration()  throws ExceptionReturnedException", "diff": ["+   ", "+  public void testVariableDeclaration()  throws ExceptionReturnedException {", "+    String text = \"Integer i = 1;\";", "+    String initExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: java.lang.Integer) [(koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.IntegerLiteral: 1 1 int) (koala.dynamicjava.tree.IntType: int))])\";", "+    VariableDeclaration exp = (VariableDeclaration)_parseCode(text).get(0);", "+    Class type = exp.acceptVisitor(_typeChecker);", "+    String actual = exp.getInitializer().toString();", "+    assertEquals(\"The initializer should have been boxed.\", initExpected, actual);", "+    _interpreter.interpret(text);", "+    ", "+    text = \"Long L = 1;\";", "+    initExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: java.lang.Long) [(koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.IntegerLiteral: 1 1 int) (koala.dynamicjava.tree.LongType: long))])\";", "+    exp = (VariableDeclaration)_parseCode(text).get(0);", "+    type = exp.acceptVisitor(_typeChecker);", "+    actual = exp.getInitializer().toString();", "+    assertEquals(\"The initializer should have been boxed.\", initExpected, actual);", "+    _interpreter.interpret(text);", "+    ", "+    text = \"Double D = 1;\";", "+    initExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: java.lang.Double) [(koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.IntegerLiteral: 1 1 int) (koala.dynamicjava.tree.DoubleType: double))])\";", "+    exp = (VariableDeclaration)_parseCode(text).get(0);", "+    type = exp.acceptVisitor(_typeChecker);", "+    actual = exp.getInitializer().toString();", "+    assertEquals(\"The initializer should have been boxed.\", initExpected, actual);", "+    _interpreter.interpret(text);", "-  ", "-  public void testVariableDeclaration() {"]}], "num": 16107}
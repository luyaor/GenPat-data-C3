{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e108936e4d95f759fcb12dabd5b12d5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "257cdb5e8bb233cec20f08595ed79c2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/XMLProjectFileParser.java", "commitBeforeChange": "2c8ce62ae485e784b2bec820cb7bf72ad52ae36f", "commitAfterChange": "b59ea5c5062a947f96790df7fe854009e693434a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException", "signatureAfterChange": "\r   public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException", "diff": ["-   */", "-  public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException {  ", "-    _projectFile = projFile;", "-    _parent = projFile.getParent();", "-    _srcFileBase = _parent;", "-    ProjectFileIR pfir = new ProjectProfile(projFile);", "-    ", "-    try {", "-      XMLConfig xcParent = new XMLConfig(projFile);", "-", "-      // read version... this string isn't actually used", "-      String version = xcParent.get(\"drjava.version\", \"unknown\");", "-      LOG.log(\"version = '\"+version+\"'\");", "-      ", "-      pfir.setDrJavaVersion(version);", "-      ", "-      // create a sub-configuration so we don't have to prefix everything with \"drjava/project/\"", "-      _xc = new XMLConfig(xcParent, xcParent.getNodes(\"drjava/project\").get(0));", "-      LOG.log(_xc.toString());", "-      String s;", "-      ", "-      // read project root; must be present", "-      try {", "-        s = _xc.get(\".root\");", "-        LOG.log(\"root = '\"+s+\"'\");", "-        File root = new File(_parent, s);", "-        LOG.log(\"_parent = \" + _parent);", "-        pfir.setProjectRoot(root);", "-        _srcFileBase = root.getCanonicalPath();", "-        LOG.log(\"_srcFileBase from reading the prject root = \" + _srcFileBase);", "-      }", "-      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }", "-      ", "-      // read create jar options", "-      try {", "-        s = _xc.get(\"createjar.file\");", "-        LOG.log(\"createjar.file = '\"+s+\"'\");", "-        File jarFile = new File(_parent, s);", "-        pfir.setCreateJarFile(jarFile);", "-      }", "-      catch(XMLConfigException e) { /* not present is ok too */ }", "-      try {", "-        s = _xc.get(\"createjar.flags\");", "-        LOG.log(\"createjar.flags = '\"+s+\"'\");", "-        int flags = Integer.valueOf(s);", "-        pfir.setCreateJarFlags(flags);", "-      }", "-      catch(XMLConfigException e) { /* not present is ok too */ }", "-      ", "-      // read build dir", "-      try {", "-        s = _xc.get(\".build\");", "-        LOG.log(\"build = '\"+s+\"'\");", "-        File buildDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);", "-        pfir.setBuildDirectory(buildDir);", "-      }", "-      catch(XMLConfigException e) { /* not present is ok too */ }", "-", "-      // read working dir; must be present", "-      try {", "-        s = _xc.get(\".work\");", "-        LOG.log(\"work = '\"+s+\"'\");", "-        File workDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);", "-        pfir.setWorkingDirectory(workDir);", "-      }", "-      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }", "-", "-      // read main class", "-      try {", "-        s = _xc.get(\".main\");", "-        LOG.log(\"main = '\"+s+\"'\");", "-        /*File mainClass = new File(_parent, s);", "-        pfir.setMainClass(mainClass);*/", "-        pfir.setMainClass(s);", "-      }", "-      catch(XMLConfigException e) { /* not present is ok too */ }", "-      ", "-      try {", "-        s = _xc.get(\".autorefresh\");", "-        boolean b = Boolean.valueOf(s);", "-        pfir.setAutoRefreshStatus(b);", "-      } ", "-      catch(XMLConfigException e) { /* not important */}", "-      ", "-      try { // must all be present", "-        // read source files and included files", "-        ", "-        pfir.setSourceFiles(readSourceFiles(\"source\", _srcFileBase));", "-        pfir.setAuxiliaryFiles(readSourceFiles(\"included\", \"\"));      ", "-        ", "-        // read excluded files", "-        pfir.setExcludedFiles(readSourceFiles(\"excluded\", \"\"));", "-        ", "-      ", "-        // read collapsed paths", "-        pfir.setCollapsedPaths(readCollapsed());", "-      ", "-        // read class paths", "-        pfir.setClassPaths(readFiles(\"classpath\"));", "-      ", "-        // read breakpoints", "-        pfir.setBreakpoints(readBreakpoints());", "-      ", "-        // read watches", "-        pfir.setWatches(readWatches());", "-", "-        // read bookmarks", "-        pfir.setBookmarks(readBookmarks());", "-      }", "-      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }", "-    }", "-    catch(XMLConfigException e) {", "-      throw new MalformedProjectFileException(\"Malformed XML project file.\"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e));", "-    }", "-    catch(NumberFormatException e) {", "-      throw new MalformedProjectFileException(\"Malformed XML project file; a value that should have been an integer was not.\\n\"+StringOps.getStackTrace(e));", "-    }", "-    catch(IllegalArgumentException e) {", "-      throw new MalformedProjectFileException(\"Malformed XML project file; a value had the wrong type.\\n\"+StringOps.getStackTrace(e));", "-    }", "-    catch(IndexOutOfBoundsException e) {", "-      throw new MalformedProjectFileException(\"Malformed XML project file; a required value was missing.\\n\"+StringOps.getStackTrace(e));", "-    }    ", "-    LOG.log(pfir.toString());", "-    return pfir;", "-  }", "+   */\r", "+  public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException {  \r", "+    _projectFile = projFile;\r", "+    _parent = projFile.getParent();\r", "+    _srcFileBase = _parent;\r", "+    ProjectFileIR pfir = new ProjectProfile(projFile);\r", "+    \r", "+    try {\r", "+      XMLConfig xcParent = new XMLConfig(projFile);\r", "+\r", "+      // read version... this string isn't actually used\r", "+      String version = xcParent.get(\"drjava.version\", \"unknown\");\r", "+      LOG.log(\"version = '\"+version+\"'\");\r", "+      \r", "+      pfir.setDrJavaVersion(version);\r", "+      \r", "+      // create a sub-configuration so we don't have to prefix everything with \"drjava/project/\"\r", "+      _xc = new XMLConfig(xcParent, xcParent.getNodes(\"drjava/project\").get(0));\r", "+      LOG.log(_xc.toString());\r", "+      String s;\r", "+      \r", "+      // read project root; must be present\r", "+      try {\r", "+        s = _xc.get(\".root\");\r", "+        LOG.log(\"root = '\"+s+\"'\");\r", "+        File root = new File(_parent, s);\r", "+        LOG.log(\"_parent = \" + _parent);\r", "+        pfir.setProjectRoot(root);\r", "+        _srcFileBase = root.getCanonicalPath();\r", "+        LOG.log(\"_srcFileBase from reading the prject root = \" + _srcFileBase);\r", "+      }\r", "+      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }\r", "+      \r", "+      // read create jar options\r", "+      try {\r", "+        s = _xc.get(\"createjar.file\");\r", "+        LOG.log(\"createjar.file = '\"+s+\"'\");\r", "+        File jarFile = new File(_parent, s);\r", "+        pfir.setCreateJarFile(jarFile);\r", "+      }\r", "+      catch(XMLConfigException e) { /* not present is ok too */ }\r", "+      try {\r", "+        s = _xc.get(\"createjar.flags\");\r", "+        LOG.log(\"createjar.flags = '\"+s+\"'\");\r", "+        int flags = Integer.valueOf(s);\r", "+        pfir.setCreateJarFlags(flags);\r", "+      }\r", "+      catch(XMLConfigException e) { /* not present is ok too */ }\r", "+      \r", "+      // read build dir\r", "+      try {\r", "+        s = _xc.get(\".build\");\r", "+        LOG.log(\"build = '\"+s+\"'\");\r", "+        File buildDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);\r", "+        pfir.setBuildDirectory(buildDir);\r", "+      }\r", "+      catch(XMLConfigException e) { /* not present is ok too */ }\r", "+\r", "+      // read working dir; must be present\r", "+      try {\r", "+        s = _xc.get(\".work\");\r", "+        LOG.log(\"work = '\"+s+\"'\");\r", "+        File workDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);\r", "+        pfir.setWorkingDirectory(workDir);\r", "+      }\r", "+      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }\r", "+\r", "+      // read main class\r", "+      try {\r", "+        s = _xc.get(\".main\");\r", "+        LOG.log(\"main = '\"+s+\"'\");\r", "+        /*File mainClass = new File(_parent, s);\r", "+        pfir.setMainClass(mainClass);*/\r", "+        pfir.setMainClass(s);\r", "+      }\r", "+      catch(XMLConfigException e) { /* not present is ok too */ }\r", "+      \r", "+      try {\r", "+        s = _xc.get(\".autorefresh\");\r", "+        boolean b = Boolean.valueOf(s);\r", "+        pfir.setAutoRefreshStatus(b);\r", "+      } \r", "+      catch(XMLConfigException e) { /* not important */}\r", "+      \r", "+      try { // must all be present\r", "+        // read source files and included files\r", "+        \r", "+        pfir.setSourceFiles(readSourceFiles(\"source\", _srcFileBase));\r", "+        pfir.setAuxiliaryFiles(readSourceFiles(\"included\", \"\"));      \r", "+        \r", "+        // read excluded files\r", "+        pfir.setExcludedFiles(readSourceFiles(\"excluded\", \"\"));\r", "+        \r", "+      \r", "+        // read collapsed paths\r", "+        pfir.setCollapsedPaths(readCollapsed());\r", "+      \r", "+        // read class paths\r", "+        pfir.setClassPaths(readFiles(\"classpath\", _srcFileBase));\r", "+      \r", "+        // read breakpoints\r", "+        pfir.setBreakpoints(readBreakpoints());\r", "+      \r", "+        // read watches\r", "+        pfir.setWatches(readWatches());\r", "+\r", "+        // read bookmarks\r", "+        pfir.setBookmarks(readBookmarks());\r", "+      }\r", "+      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }\r", "+    }\r", "+    catch(XMLConfigException e) {\r", "+      throw new MalformedProjectFileException(\"Malformed XML project file.\"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e));\r", "+    }\r", "+    catch(NumberFormatException e) {\r", "+      throw new MalformedProjectFileException(\"Malformed XML project file; a value that should have been an integer was not.\\n\"+StringOps.getStackTrace(e));\r", "+    }\r", "+    catch(IllegalArgumentException e) {\r", "+      throw new MalformedProjectFileException(\"Malformed XML project file; a value had the wrong type.\\n\"+StringOps.getStackTrace(e));\r", "+    }\r", "+    catch(IndexOutOfBoundsException e) {\r", "+      throw new MalformedProjectFileException(\"Malformed XML project file; a required value was missing.\\n\"+StringOps.getStackTrace(e));\r", "+    }    \r", "+    LOG.log(pfir.toString());\r", "+    return pfir;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60f8c3df365cfb38591bd9949179478", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/XMLProjectFileParser.java", "commitBeforeChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "commitAfterChange": "c0463418af643463955237ff1428c0079e36defe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException", "signatureAfterChange": "   public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException", "diff": ["-   */\r", "-  public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException {  \r", "-    _projectFile = projFile;\r", "-    _parent = projFile.getParent();\r", "-    _srcFileBase = _parent;\r", "-    ProjectFileIR pfir = new ProjectProfile(projFile);\r", "-    \r", "-    try {\r", "-      XMLConfig xcParent = new XMLConfig(projFile);\r", "-\r", "-      // read version... this string isn't actually used\r", "-      String version = xcParent.get(\"drjava.version\", \"unknown\");\r", "-      LOG.log(\"version = '\"+version+\"'\");\r", "-      \r", "-      pfir.setDrJavaVersion(version);\r", "-      \r", "-      // create a sub-configuration so we don't have to prefix everything with \"drjava/project/\"\r", "-      _xc = new XMLConfig(xcParent, xcParent.getNodes(\"drjava/project\").get(0));\r", "-      LOG.log(_xc.toString());\r", "-      String s;\r", "-      \r", "-      // read project root; must be present\r", "-      try {\r", "-        s = _xc.get(\".root\");\r", "-        LOG.log(\"root = '\"+s+\"'\");\r", "-        File root = new File(_parent, s);\r", "-        LOG.log(\"_parent = \" + _parent);\r", "-        pfir.setProjectRoot(root);\r", "-        _srcFileBase = root.getCanonicalPath();\r", "-        LOG.log(\"_srcFileBase from reading the prject root = \" + _srcFileBase);\r", "-      }\r", "-      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }\r", "-      \r", "-      // read create jar options\r", "-      try {\r", "-        s = _xc.get(\"createjar.file\");\r", "-        LOG.log(\"createjar.file = '\"+s+\"'\");\r", "-        File jarFile = new File(_parent, s);\r", "-        pfir.setCreateJarFile(jarFile);\r", "-      }\r", "-      catch(XMLConfigException e) { /* not present is ok too */ }\r", "-      try {\r", "-        s = _xc.get(\"createjar.flags\");\r", "-        LOG.log(\"createjar.flags = '\"+s+\"'\");\r", "-        int flags = Integer.valueOf(s);\r", "-        pfir.setCreateJarFlags(flags);\r", "-      }\r", "-      catch(XMLConfigException e) { /* not present is ok too */ }\r", "-      \r", "-      // read build dir\r", "-      try {\r", "-        s = _xc.get(\".build\");\r", "-        LOG.log(\"build = '\"+s+\"'\");\r", "-        File buildDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);\r", "-        pfir.setBuildDirectory(buildDir);\r", "-      }\r", "-      catch(XMLConfigException e) { /* not present is ok too */ }\r", "-\r", "-      // read working dir; must be present\r", "-      try {\r", "-        s = _xc.get(\".work\");\r", "-        LOG.log(\"work = '\"+s+\"'\");\r", "-        File workDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);\r", "-        pfir.setWorkingDirectory(workDir);\r", "-      }\r", "-      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }\r", "-\r", "-      // read main class\r", "-      try {\r", "-        s = _xc.get(\".main\");\r", "-        LOG.log(\"main = '\"+s+\"'\");\r", "-        /*File mainClass = new File(_parent, s);\r", "-        pfir.setMainClass(mainClass);*/\r", "-        pfir.setMainClass(s);\r", "-      }\r", "-      catch(XMLConfigException e) { /* not present is ok too */ }\r", "-      \r", "-      try {\r", "-        s = _xc.get(\".autorefresh\");\r", "-        boolean b = Boolean.valueOf(s);\r", "-        pfir.setAutoRefreshStatus(b);\r", "-      } \r", "-      catch(XMLConfigException e) { /* not important */}\r", "-      \r", "-      try { // must all be present\r", "-        // read source files and included files\r", "-        \r", "-        pfir.setSourceFiles(readSourceFiles(\"source\", _srcFileBase));\r", "-        pfir.setAuxiliaryFiles(readSourceFiles(\"included\", \"\"));      \r", "-        \r", "-        // read excluded files\r", "-        pfir.setExcludedFiles(readSourceFiles(\"excluded\", \"\"));\r", "-        \r", "-      \r", "-        // read collapsed paths\r", "-        pfir.setCollapsedPaths(readCollapsed());\r", "-      \r", "-        // read class paths\r", "-        pfir.setClassPaths(readFiles(\"classpath\", _srcFileBase));\r", "-      \r", "-        // read breakpoints\r", "-        pfir.setBreakpoints(readBreakpoints());\r", "-      \r", "-        // read watches\r", "-        pfir.setWatches(readWatches());\r", "-\r", "-        // read bookmarks\r", "-        pfir.setBookmarks(readBookmarks());\r", "-      }\r", "-      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }\r", "-    }\r", "-    catch(XMLConfigException e) {\r", "-      throw new MalformedProjectFileException(\"Malformed XML project file.\"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e));\r", "-    }\r", "-    catch(NumberFormatException e) {\r", "-      throw new MalformedProjectFileException(\"Malformed XML project file; a value that should have been an integer was not.\\n\"+StringOps.getStackTrace(e));\r", "-    }\r", "-    catch(IllegalArgumentException e) {\r", "-      throw new MalformedProjectFileException(\"Malformed XML project file; a value had the wrong type.\\n\"+StringOps.getStackTrace(e));\r", "-    }\r", "-    catch(IndexOutOfBoundsException e) {\r", "-      throw new MalformedProjectFileException(\"Malformed XML project file; a required value was missing.\\n\"+StringOps.getStackTrace(e));\r", "-    }    \r", "-    LOG.log(pfir.toString());\r", "-    return pfir;\r", "-  }\r", "+   */", "+  public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException {  ", "+    _projectFile = projFile;", "+    _parent = projFile.getParent();", "+    _srcFileBase = _parent;", "+    ProjectFileIR pfir = new ProjectProfile(projFile);", "+    ", "+    try {", "+      XMLConfig xcParent = new XMLConfig(projFile);", "+", "+      // read version... this string isn't actually used", "+      String version = xcParent.get(\"drjava.version\", \"unknown\");", "+      LOG.log(\"version = '\"+version+\"'\");", "+      ", "+      pfir.setDrJavaVersion(version);", "+      ", "+      // create a sub-configuration so we don't have to prefix everything with \"drjava/project/\"", "+      _xc = new XMLConfig(xcParent, xcParent.getNodes(\"drjava/project\").get(0));", "+      LOG.log(_xc.toString());", "+      String s;", "+      ", "+      // read project root; must be present", "+      try {", "+        s = _xc.get(\".root\");", "+        LOG.log(\"root = '\"+s+\"'\");", "+        File root = new File(_parent, s);", "+        LOG.log(\"_parent = \" + _parent);", "+        pfir.setProjectRoot(root);", "+        _srcFileBase = root.getCanonicalPath();", "+        LOG.log(\"_srcFileBase from reading the prject root = \" + _srcFileBase);", "+      }", "+      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }", "+      ", "+      // read create jar options", "+      try {", "+        s = _xc.get(\"createjar.file\");", "+        LOG.log(\"createjar.file = '\"+s+\"'\");", "+        File jarFile = new File(_parent, s);", "+        pfir.setCreateJarFile(jarFile);", "+      }", "+      catch(XMLConfigException e) { /* not present is ok too */ }", "+      try {", "+        s = _xc.get(\"createjar.flags\");", "+        LOG.log(\"createjar.flags = '\"+s+\"'\");", "+        int flags = Integer.valueOf(s);", "+        pfir.setCreateJarFlags(flags);", "+      }", "+      catch(XMLConfigException e) { /* not present is ok too */ }", "+      ", "+      try{", "+        s = _xc.get(\".manifest\");", "+        LOG.log(\"manifest = '\"+s+\"'\");", "+        pfir.setCustomManifest(TextUtil.xmlUnescape(s));", "+      }catch(XMLConfigException e) { /* not present is fine */ }", "+      ", "+      // read build dir", "+      try {", "+        s = _xc.get(\".build\");", "+        LOG.log(\"build = '\"+s+\"'\");", "+        File buildDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);", "+        pfir.setBuildDirectory(buildDir);", "+      }", "+      catch(XMLConfigException e) { /* not present is ok too */ }", "+", "+      // read working dir; must be present", "+      try {", "+        s = _xc.get(\".work\");", "+        LOG.log(\"work = '\"+s+\"'\");", "+        File workDir = (!new File(s).isAbsolute())?new File(_parent, s):new File(s);", "+        pfir.setWorkingDirectory(workDir);", "+      }", "+      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }", "+", "+      // read main class", "+      try {", "+        s = _xc.get(\".main\");", "+        LOG.log(\"main = '\"+s+\"'\");", "+        /*File mainClass = new File(_parent, s);", "+        pfir.setMainClass(mainClass);*/", "+        pfir.setMainClass(s);", "+      }", "+      catch(XMLConfigException e) { /* not present is ok too */ }", "+      ", "+      try {", "+        s = _xc.get(\".autorefresh\");", "+        boolean b = Boolean.valueOf(s);", "+        pfir.setAutoRefreshStatus(b);", "+      } ", "+      catch(XMLConfigException e) { /* not important */}", "+      ", "+      try { // must all be present", "+        // read source files and included files", "+        ", "+        pfir.setSourceFiles(readSourceFiles(\"source\", _srcFileBase));", "+        pfir.setAuxiliaryFiles(readSourceFiles(\"included\", \"\"));      ", "+        ", "+        // read excluded files", "+        pfir.setExcludedFiles(readSourceFiles(\"excluded\", \"\"));", "+        ", "+      ", "+        // read collapsed paths", "+        pfir.setCollapsedPaths(readCollapsed());", "+      ", "+        // read class paths", "+        pfir.setClassPaths(readFiles(\"classpath\", _srcFileBase));", "+      ", "+        // read breakpoints", "+        pfir.setBreakpoints(readBreakpoints());", "+      ", "+        // read watches", "+        pfir.setWatches(readWatches());", "+", "+        // read bookmarks", "+        pfir.setBookmarks(readBookmarks());", "+      }", "+      catch(XMLConfigException e) { throw new MalformedProjectFileException(\"XML Parse Error: \"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e)); }", "+    }", "+    catch(XMLConfigException e) {", "+      throw new MalformedProjectFileException(\"Malformed XML project file.\"+e.getMessage()+\"\\n\"+StringOps.getStackTrace(e));", "+    }", "+    catch(NumberFormatException e) {", "+      throw new MalformedProjectFileException(\"Malformed XML project file; a value that should have been an integer was not.\\n\"+StringOps.getStackTrace(e));", "+    }", "+    catch(IllegalArgumentException e) {", "+      throw new MalformedProjectFileException(\"Malformed XML project file; a value had the wrong type.\\n\"+StringOps.getStackTrace(e));", "+    }", "+    catch(IndexOutOfBoundsException e) {", "+      throw new MalformedProjectFileException(\"Malformed XML project file; a required value was missing.\\n\"+StringOps.getStackTrace(e));", "+    }    ", "+    LOG.log(pfir.toString());", "+    return pfir;", "+  }"]}], "num": 1066}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c482f2cf0ebc5f6be78d9df71a25d1df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c1413dfe678fa6064a90eabc88edfd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public void write() throws IOException", "signatureAfterChange": "   public void write() throws IOException", "diff": ["-    fw.write(\";; relative files are made relative to: \" + _projectFile.getCanonicalPath());", "+    fw.write(\"\\n;; files in the source tree are relative to: \" + _projectRoot.getCanonicalPath());", "+    fw.write(\"\\n;; other files with relative paths are rooted at (the parent of) this project file\");", "-      fw.write(\"\\n(proj-root\");", "+      fw.write(\"\\n(proj-root-and-base\");", "-      fw.write(\"\\n\" + encodeFile(_projectRoot, \"  \", true));", "+      fw.write(\"\\n\" + encodeFileRelative(_projectRoot, \"  \", _projectFile));", "-      for(DocFile df: _sourceFiles) { fw.write(\"\\n\" + encodeDocFile(df, \"  \")); }", "+      for(DocFile df: _sourceFiles) { fw.write(\"\\n\" + encodeDocFileRelative(df, \"  \")); }", "-      for(DocFile df: _auxFiles) { fw.write(\"\\n\" + encodeDocFile(df, \"  \", false)); }", "+      for(DocFile df: _auxFiles) { fw.write(\"\\n\" + encodeDocFileAbsolute(df, \"  \")); }", "-        fw.write(\"\\n\" + encodeFile(f, \"  \", false));", "+        fw.write(\"\\n\" + encodeFileAbsolute(f, \"  \"));", "-      fw.write(\"\\n\" + encodeFile(_buildDir, \"  \", true));", "+      fw.write(\"\\n\" + encodeFileRelative(_buildDir, \"  \", _projectFile));", "-      fw.write(\"\\n\" + encodeFile(_workDir, \"  \", true));", "+      fw.write(\"\\n\" + encodeFileRelative(_workDir, \"  \", _projectFile));", "-      fw.write(\"\\n\" + encodeFile(_mainClass, \"  \", true));", "+      fw.write(\"\\n\" + encodeFileRelative(_mainClass, \"  \"));", "-    // write the create jar file", "-    if (_createJarFile != null) {", "-      fw.write(\"\\n(create-jar-file\");", "-      fw.write(\"\\n\" + encodeFile(_createJarFile, \"  \", true));", "-      fw.write(\")\");", "-    }", "-    else fw.write(\"\\n;; no create jar file\");", "-    ", "-    // write the create jar flags", "-    if (_createJarFlags != 0) {", "-      fw.write(\"\\n(create-jar-flags \" + _createJarFlags + \")\");", "-    }", "-    else fw.write(\"\\n;; no create jar flags\");", "+//    // write the create jar file", "+//    if (_createJarFile != null) {", "+//      fw.write(\"\\n(create-jar-file\");", "+//      fw.write(\"\\n\" + encodeFile(_createJarFile, \"  \", true));", "+//      fw.write(\")\");", "+//    }", "+//    else fw.write(\"\\n;; no create jar file\");", "+//    ", "+//    // write the create jar flags", "+//    if (_createJarFlags != 0) {", "+//      fw.write(\"\\n(create-jar-flags \" + _createJarFlags + \")\");", "+//    }", "+//    else fw.write(\"\\n;; no create jar flags\");", "-      for(DebugBreakpointData bp: _breakpoints) { fw.write(\"\\n\" + encodeBreakpoint(bp, \"  \")); }", "+      for(DebugBreakpointData bp: _breakpoints) { fw.write(\"\\n\" + encodeBreakpointRelative(bp, \"  \")); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a638e06c2160ef1fba74c8853d89716", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 351, "methodNumberAfterChange": 350, "signatureBeforeChange": "     private File _locateClassFile()", "signatureAfterChange": "     private File _locateClassFile()", "diff": ["-      if (isUntitled()) return null;", "+      if (isUntitled()) return FileOps.NULL_FILE;", "-        return null;  /* No source class name */ ", "+        return FileOps.NULL_FILE;  /* No source class name */ ", "-      _log.log(\"In _locateClassFile, className = \" + className);", "+//      _log.log(\"In _locateClassFile, className = \" + className);", "-      _log.log(\"In _locateClassFile, classfileName = \" + fileName);", "+//      _log.log(\"In _locateClassFile, classfileName = \" + fileName);", "-      if (getBuildDirectory() != null) roots.add(getBuildDirectory());", "+//      _log.log(\"build directory = \" + getBuildDirectory());", "+      ", "+      if (getBuildDirectory() != FileOps.NULL_FILE) roots.add(getBuildDirectory());", "-        _log.log(\"Directory \" + root + \" added to list of source roots\");", "+//        _log.log(\"Directory \" + root + \" added to list of source roots\");", "-          _log.log(this + \" has no source root, using parent directory instead\");", "+//          _log.log(this + \" has no source root, using parent directory instead\");", "-          if (root != null) {", "+          if (root != FileOps.NULL_FILE) {", "-            _log.log(\"Added parent directory \" + root + \" to list of source roots\");", "+//            _log.log(\"Added parent directory \" + root + \" to list of source roots\");", "-          if (root != null) roots.add(root);", "+          if (root != FileOps.NULL_FILE) roots.add(root);", "-      if (classFile != null) {", "-        _log.log(\"Found source file \" + classFile + \" for \" + this);", "+      if (classFile != FileOps.NULL_FILE) {", "+//        _log.log(\"Found source file \" + classFile + \" for \" + this);", "-      _log.log(this + \" not found on path of source roots\");", "+//      _log.log(this + \" not found on path of source roots\");", "-      if (classFile != null) return classFile;", "+      if (classFile != FileOps.NULL_FILE) return classFile;"]}], "num": 7821}
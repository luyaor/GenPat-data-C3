{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "059c97ec6b0a226c6fb63d5e7bbb06a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8e3afcd3cbe3beb6ed94ba0147cfdf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public int _findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "signatureAfterChange": "   public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "diff": ["-  public int _findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {", "-     assert EventQueue.isDispatchThread();", "+  public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {", "+    assert EventQueue.isDispatchThread();", "-", "-      final int origPos = _currentLocation;", "-      // Move reduced model to location pos", "-      _setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "+    ", "+    final int origPos = _currentLocation;", "+    // Move reduced model to location pos", "+    setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "+    ", "+    // Walk forward from specificed position", "+    for (i = pos + 1; i < text.length(); i++) {", "+      /* Invariant: reduced model points to reducedPos, text[pos:i-1] contains no valid delims, ", "+       * pos <= reducedPos < i <= text.length() */", "-      // Walk forward from specificed position", "-      for (i = pos + 1; i < text.length(); i++) {", "-        /* Invariant: reduced model points to reducedPos, text[pos:i-1] contains no valid delims, ", "-         * pos <= reducedPos < i <= text.length() */", "+      if (match(text.charAt(i),delims)) {", "+        // Move reduced model to walker's location", "+        setCurrentLocation(i);  // reduced model points to i", "+        reducedPos = i;          // reduced model points to reducedPos", "-        if (_match(text.charAt(i),delims)) {", "-          // Move reduced model to walker's location", "-          _setCurrentLocation(i);  // reduced model points to i", "-          reducedPos = i;          // reduced model points to reducedPos", "-          ", "-          // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "-          if (_isShadowed()) continue;  // ignore matching char ", "+        // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "+        if (isShadowed()) continue;  // ignore matching char ", "+        else {", "+          // found valid matching char", "+          if (text.charAt(i) == opening) ++braceBalance;", "-            // found valid matching char", "-            if (text.charAt(i) == opening) ++braceBalance;", "-            else {", "-              if (braceBalance == 0) break; // found our closing brace", "-              --braceBalance;", "-            }", "+            if (braceBalance == 0) break; // found our closing brace", "+            --braceBalance;", "-      ", "-      /* Invariant: same as for loop except that pos <= reducedPos <= i <= text.length() */", "-      _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "+    }", "+    ", "+    /* Invariant: same as for loop except that pos <= reducedPos <= i <= text.length() */", "+    ", "+    setCurrentLocation(origPos);    // Restore the state of the reduced model;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e36f9f56ff951a4b3e56a268c8574033", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public int _findPrevEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "signatureAfterChange": "   public int findPrevEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException", "diff": ["-  public int _findPrevEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {", "+  public int findPrevEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {", "-    // assert isReadLocked();", "+    // assert EventQueue.isDispatchThread();", "-    if (pos >= getLength() || pos == 0) { return -1; }", "+    if (pos >= getLength() || pos <= 0) { return -1; }", "-//    synchronized(_reduced) {", "-      final int origPos = _currentLocation;", "-      // Move reduced model to location pos", "-      _setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "+    final int origPos = _currentLocation;", "+    // Move reduced model to location pos", "+    setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "+    ", "+    // Walk backwards from specificed position", "+    for (i = pos - 1; i >= 0; i--) {", "+      /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "+       * 0 <= i < reducedPos <= pos */", "-      // Walk backwards from specificed position", "-      for (i = pos - 1; i >= 0; i--) {", "-        /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "-         * 0 <= i < reducedPos <= pos */", "+      if (match(text.charAt(i), delims)) {", "+        // Move reduced model to walker's location", "+        setCurrentLocation(i);  // reduced model points to i", "+        reducedPos = i;          // reduced model points to reducedPos", "-        if (_match(text.charAt(i),delims)) {", "-          // Move reduced model to walker's location", "-          _setCurrentLocation(i);  // reduced model points to i", "-          reducedPos = i;          // reduced model points to reducedPos", "-          ", "-          // Check if matching char should be ignored because it is within a comment, ", "-          // quotes, or ignored paren phrase", "-          if (_isShadowed()) continue;  // ignore matching char ", "+        // Check if matching char should be ignored because it is within a comment, ", "+        // quotes, or ignored paren phrase", "+        if (isShadowed()) continue;  // ignore matching char ", "+        else {", "+          // found valid matching char", "+          if (text.charAt(i) == closing) ++braceBalance;", "-            // found valid matching char", "-            if (text.charAt(i) == closing) ++braceBalance;", "-            else {", "-              if (braceBalance == 0) break; // found our opening brace", "-              --braceBalance;", "-            }", "+            if (braceBalance == 0) break; // found our opening brace", "+            --braceBalance;", "-      ", "-      /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos */", "-      ", "-      _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "-//    }  // end synchronized", "+    }", "+    ", "+    /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos */", "+    ", "+    setCurrentLocation(origPos);    // Restore the state of the reduced model;"]}], "num": 5609}
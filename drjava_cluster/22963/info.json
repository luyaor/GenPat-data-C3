{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "587f6be680e99bee177ca5026adc25bb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ee645db41c78b8a74e7a594a0667c5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "40fa5284e8c663707faeb41ae0125801be606b5b", "commitAfterChange": "e116917927a60a297ec1454565818ede1b4cec2d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-    ", "+", "-    ", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"6\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", \"10\", watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", \"12\", watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"6\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", \"10\", watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", \"12\", watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.get(5).getType());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch value incorrect\", \"0\", watches.elementAt(1).getValue());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch value incorrect\", \"0\", watches.get(1).getValue());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.get(1).getValue());", "-   ", "+", "-    ", "+", "-    ", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", \"9\", watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", \"13\", watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "-    ", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", \"9\", watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", \"13\", watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.get(5).getType());", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.elementAt(5).getType());", "-    ", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.get(5).getType());", "+", "-    debugListener.assertCurrThreadDiedCount(0);    ", "-    ", "+    debugListener.assertCurrThreadDiedCount(0);", "+", "-    assertEquals(\"watch name incorrect\", \"localVar\", watches.elementAt(6).getName());", "-    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(6).getValue());", "-    ", "+    assertEquals(\"watch name incorrect\", \"localVar\", watches.get(6).getName());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.get(6).getValue());", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d32627f3df3c39090f8795ad07c5dd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-    // The model already has an active empty document", "-    OpenDefinitionsDocument doc1 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc1));", "-    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc2 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc2));", "-    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc3 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc3));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc4 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc4));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc5 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    OpenDefinitionsDocument doc6 =  _model.newFile();", "-    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    // The documents should not be activated upon creation ", "-    // checkin isModifiedSinceSave shouldn't activate the documents", "+    OpenDefinitionsDocument doc1 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc2 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc3 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc4 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc5 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    OpenDefinitionsDocument doc6 =  _model.newFile();", "+    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache()); // was 0", "+    ", "+    // This tests that isModifiedSinceSave does not cause the document to load into the cache,", "+    // so the two that should have been kicked out, 1 & 2 should not be loaded uppon calling isModified.", "+", "+    assertEquals(\"There should be 4 documents in the cache\", 0, _cache.getNumInCache());", "-    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"Document 1 shouldn't be ready\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"Document 2 shouldn't be ready\", _adapterTable.get(doc2).isReady());", "+    assertFalse(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "+    assertFalse(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "+    ", "+    // Front of LRU -> a b c d | e f <- out of LRU", "-    doc1.getLength();", "-    doc2.getLength();", "-    doc3.getLength();", "-    doc4.getLength();", "-    assertFalse(\"The document 5 should have been kicked out of the cache\", _cache.isDDocInCache(doc5));", "-    assertFalse(\"The document 6 should have been kicked out of the cache\", _cache.isDDocInCache(doc6));", "+    ", "+    // 6 5 4 3 | 2 1", "+    assertFalse(\"Document 1 shouldn't be ready\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"Document 2 shouldn't be ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "+    assertTrue(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "+        ", "+    doc1.getLength(); // 1 6 5 4 | 3 2", "+    assertTrue(\"The document 1 should should now be in the cache\", _adapterTable.get(doc1).isReady());    ", "+    assertEquals(\"There should still be 1 documents in the cache\", 4, _cache.getNumInCache()); ", "+    assertFalse(\"The document 3 should have been kicked out of the cache\", _adapterTable.get(doc3).isReady());", "+    ", "+    doc2.getLength(); // 2 1 6 5 | 4 3", "+    assertTrue(\"The document 2 should should now be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertEquals(\"There should still be 2 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 4 should have been kicked out of the cache\", _adapterTable.get(doc4).isReady());", "+    ", "+    doc3.getLength(); // 3 2 1 6 | 5 4", "+    assertTrue(\"The document 3 should should now be in the cache\", _adapterTable.get(doc3).isReady());", "+    assertEquals(\"There should still be 3 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 5 should have been kicked out of the cache\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc4.getLength(); // 4 3 2 1 | 6 5", "+    assertTrue(\"The document 4 should should now be in the cache\", _adapterTable.get(doc4).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 6 should have been kicked out of the cache\", _adapterTable.get(doc6).isReady());", "+    ", "+    doc5.getLength(); // 5 4 3 2 | 1 6", "+    assertTrue(\"The document 5 should should now be in the cache\", _adapterTable.get(doc5).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 1 should have been kicked out of the cache\", _adapterTable.get(doc1).isReady());", "+    ", "+    doc6.getLength(); // 6 5 4 3 | 2 1", "+    assertTrue(\"The document 6 should should now be in the cache\", _adapterTable.get(doc6).isReady());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    assertFalse(\"The document 2 should have been kicked out of the cache\", _adapterTable.get(doc2).isReady());", "+    ", "+    // Load documents out of order", "+    doc4.getLength(); // 4 6 5 3 | 2 1", "+    assertTrue(\"The document 3 should should still be in the cache\", _adapterTable.get(doc3).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc5.getLength(); // 5 4 6 3 | 2 1", "+    assertTrue(\"The document 3 should should still be in the cache\", _adapterTable.get(doc3).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc3.getLength(); // 3 5 4 6 | 2 1", "+    assertTrue(\"The document 6 should should still be in the cache\", _adapterTable.get(doc6).isReady());    ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    doc4.getLength(); // 4 3 5 6 | 2 1", "+    assertTrue(\"The document 6 should should still be in the cache\", _adapterTable.get(doc6).isReady());    ", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());", "+    assertFalse(\"The document 2 should still be out of the cache\", _adapterTable.get(doc2).isReady());", "-    // Test the LRU to make sure the documents are kicked out in the right order", "-    doc5.getLength();", "-    assertFalse(\"doc1 should have been kicked out first\", _cache.isDDocInCache(doc1));", "-    doc6.getLength();", "-    assertFalse(\"doc2 should have been kicked out first\", _cache.isDDocInCache(doc2));"]}], "num": 22963}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39aceb2adb1058974886cc1bb5902e2f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8381acd3a7a822fed59f9a2b15caa74f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void add(DocManager dm)", "signatureAfterChange": "     private void add()", "diff": ["-   */", "-  private void add(DocManager dm) {", "-//    Utilities.showDebug(\"add \" + dm + \" to the QUEUE\\n\" + \"QUEUE = \" + _residentQueue);", "-    if (dm == null) throw ", "-      new IllegalArgumentException(\"Cannot add a null document to the DocumentCache\");", "-    if (dm.isUnmanagedOrUntitled() ) return;", "-    DocManager removed = null;", "-    synchronized(_cacheLock) { // lock the cache so that dm can be added if not already present", "-      if (_residentQueue.contains(dm)) return;", "-      _residentQueue.add(dm);", "-      if (_residentQueue.size() > CACHE_SIZE) removed = _residentQueue.remove(0);", "-    }", "-    if (removed != null) removed.kickOut();", "-  }", "+    /** Adds this DocManager to the queue and sets status to IN_QUEUE.  Assumes _cacheLock is already held. */", "+    private void add() {", "+//      Utilities.showDebug(\"add \" + this + \" to the QUEUE\\n\" + \"QUEUE = \" + _residentQueue);", "+      if (! _residentQueue.contains(this)) {", "+        _residentQueue.add(this);", "+        _stat = IN_QUEUE;", "+      }", "+      if (_residentQueue.size() > CACHE_SIZE) _residentQueue.get(0).remove();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "972f1377b45fce0bcb7fdc17aca90e3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private synchronized void remove(DocManager toRemove)", "signatureAfterChange": "   private void add(DocManager dm)", "diff": ["-  private synchronized void remove(DocManager toRemove) {", "-    _lru.remove(toRemove);", "-    if (toRemove.isFirst()) toRemove.kickOut();", "-    if (_lru.size() > 0 )", "-      _lru.getFirst().setFirst(); // just in case the one removed was first", "+  private void add(DocManager dm) {", "+//    Utilities.showDebug(\"add \" + dm + \" to the QUEUE\\n\" + \"QUEUE = \" + _residentQueue);", "+    synchronized (dm) {", "+      if (dm == null) throw ", "+        new IllegalArgumentException(\"Cannot add a null document to the DocumentCache\");", "+      if (dm.isUnmanaged() || dm.isUntitled() ) return;", "+    }", "+    DocManager removed = null;", "+    synchronized (this) {", "+      if (_residentQueue.contains(dm)) return;", "+      _residentQueue.add(dm);", "+      if (_residentQueue.size() > CACHE_SIZE) removed = _residentQueue.remove(0);", "+    }", "+    if (removed != null) synchronized (removed) { removed.kickOut(); }"]}], "num": 796}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e108729a366b36db5d3bd2d9df840e2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7c6fa5dbb8879b0d6f99d6765c2464", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void startCompile()", "signatureAfterChange": "     public void startCompile() throws IOException", "diff": ["-    public void startCompile() {", "+    public void startCompile() throws IOException {", "+      CompilerError[] errors = new CompilerError[0];", "-            _compileErrors = compiler.compile(sourceRoot, files);", "+            errors = compiler.compile(sourceRoot, files);", "-            CompilerError err = new CompilerError(file.getAbsolutePath(),", "+            CompilerError err = new CompilerError(file,", "-            _compileErrors = new CompilerError[] { err };", "+            errors = new CompilerError[] { err };", "+            _distributeErrors(errors);", "+", "+            // Fire a compileEnded event", "-            if (_compileErrors.length == 0) {", "+            if (_numErrors == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df1454f41edaf39d79e9fc6d5e9a802d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "22b4c39d718130f293a6ada596d425525ecbc6e8", "commitAfterChange": "ed15f1e3933f222801a436b129bc84e5a740d057", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void _initCompiler(File sourceRoot)", "signatureAfterChange": "    protected void initCompiler(File sourceRoot)", "diff": ["-", "-  private void _initCompiler(File sourceRoot) {", "-    _compilerLog = new OurLog();", "-", "-    // To use the GJ compiler, we build up the GJ options hashtable.", "-", "-    // Enable GJ extensions", "-    options.put(\"-gj\", \"\");", "-    _compiler = JavaCompiler.make(_compilerLog, options);", "+  protected void initCompiler(File sourceRoot) {", "+    Hashtable<String, String> options = createOptionsHashtable(sourceRoot);", "+", "+    // sigh, the 1.4 log won't work on 1.3 so we need to try the 1.4 first", "+    // and fall back to the 1.3", "+    try {", "+      compilerLog = new OurLog14();", "+    }", "+    catch (NoSuchMethodError error) {", "+      compilerLog = new OurLog13();", "+    }", "+", "+    //System.err.println(this + \": log=\" + compilerLog);", "+    compiler = JavaCompiler.make((Log) compilerLog, options);", "+  }"]}], "num": 22229}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57af557d431de99354735f3cde4b3f79", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d26ac49a78fd26fa803337d6d5f577e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": "          public void testAddSymbolData()", "signatureAfterChange": "          public void testAddSymbolData()", "diff": ["-      symbolTable.put(\"java.lang.Object\", obj);", "+      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-      sd.setSuperClass(symbolTable.get(\"java.lang.Object\"));", "-      symbolTable.put(\"Awesome\", sd);", "-      SymbolData result = _llv.addSymbolData(cd, \"Awesome\");", "+      sd.setSuperClass(LanguageLevelConverter.symbolTable.get(\"java.lang.Object\"));", "+      LanguageLevelConverter.symbolTable.put(\"Awesome\", sd);", "+      SymbolData result = testLLVisitor.defineSymbolData(cd, \"Awesome\");", "-      assertEquals(\"Should return null, because it is already in the SymbolTable.\", null, _llv.addSymbolData(cd, \"Awesome\"));", "+      assertEquals(\"Should return null, because it is already in the SymbolTable.\", null, testLLVisitor.defineSymbolData(cd, \"Awesome\"));", "-      assertEquals(\"Error message should be correct.\", \"This class has already been defined.\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct.\", \"The class or interface Awesome has already been defined.\", errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce2f98b0a7096e431b7b02c47d832ecf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "       public void testForInnerInterfaceDef()", "signatureAfterChange": "       public void testForInnerInterfaceDef()", "diff": ["-      symbolTable.put(\"java.lang.Object\", obj);", "+      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-      symbolTable.put(_cbiv._classData.getName() + \"$Lisa\", sd0);", "-      symbolTable.put(_cbiv._classData.getName() + \"$Lisa$Bart\", sd1);", "+      LanguageLevelConverter.symbolTable.put(_cbiv._classData.getName() + \"$Lisa\", sd0);", "+      LanguageLevelConverter.symbolTable.put(_cbiv._classData.getName() + \"$Lisa$Bart\", sd1);", "-      assertEquals(\"There should be one error\", 1, errors.size());", "-      assertEquals(\"The error message should be correct\", ", "-                   \"Nested interfaces cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      // Nested interfaces now work"]}], "num": 17285}
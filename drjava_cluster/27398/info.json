{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fa4c15be8f078e6f74e8b213b2d0849", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de500822a4b9f8d92900bc13ae29f80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "4d3fa64499badc01be2d089cba1394a47c2f30de", "commitAfterChange": "ed48d6b9cb86b6e63d0852d1106c5aba17823c84", "methodNumberBeforeChange": 633, "methodNumberAfterChange": 636, "signatureBeforeChange": "    final private boolean jj_3R_339()", "signatureAfterChange": "    final private boolean jj_3R_340()", "diff": ["-", "-  final private boolean jj_3R_339() {", "-    Token xsp;", "-    xsp = jj_scanpos;", "-    if (jj_3R_345()) {", "-    jj_scanpos = xsp;", "-    if (jj_3R_346()) {", "-    jj_scanpos = xsp;", "-    if (jj_3R_347()) {", "-    jj_scanpos = xsp;", "-    if (jj_3R_348()) {", "-    jj_scanpos = xsp;", "-    if (jj_3R_349()) return true;", "-    }", "-    }", "-    }", "-    }", "-    return false;", "-  }", "+    if (jj_3R_346()) {", "+    if (jj_3R_347()) {", "+    if (jj_3R_348()) {", "+    jj_scanpos = xsp;", "+    if (jj_3R_349()) {", "+    jj_scanpos = xsp;", "+    if (jj_3R_350()) return true;", "+    }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b70d8aa9f8d4d245ea424fe2871db47f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "diff": ["-   */", "+    */", "-    Boolean cached = (Boolean) _checkCache(key);", "-    if (cached != null) {", "+    ", "+    synchronized(_reduced) {", "+      Boolean cached = (Boolean) _checkCache(key);", "+      if (cached != null) {", "-      return cached;", "-    }", "-", "-    // acquireReadLock assumed to be held", "-    cached = false;", "-    String text = getText(DOCSTART, openSquigglyPos+1);", "-    int origNewPos = newPos;", "-    newPos += \"new\".length();", "-    int classStart = getFirstNonWSCharPos(newPos);", "-    if (classStart!=ERROR_INDEX) { ", "-      int classEnd = classStart+1;", "-      while(classEnd<text.length()) {", "-        if ((!Character.isJavaIdentifierPart(text.charAt(classEnd))) && (text.charAt(classEnd)!='.')) {", "-          // delimiter found", "-          break;", "-        }", "-        ++classEnd;", "+        return cached;", "-      // System.out.println(\"\\tclass = `\"+text.substring(classStart,classEnd)+\"`\");", "-      int parenStart = getFirstNonWSCharPos(classEnd);", "-      if (parenStart!=ERROR_INDEX) {", "-        int origParenStart = parenStart;", "-", "-        // System.out.println(\"\\tfirst non-whitespace after class = \"+parenStart+\" `\"+text.charAt(parenStart)+\"`\");", "-        if (text.charAt(origParenStart)=='<') {", "-          parenStart = ERROR_INDEX;", "-          // might be a generic class", "-          int closePointyBracket = findNextEnclosingBrace(origParenStart, '<', '>');", "-          if (closePointyBracket!=ERROR_INDEX) {", "-            if (text.charAt(closePointyBracket)=='>') {", "-              parenStart = getFirstNonWSCharPos(closePointyBracket+1);", "+      ", "+      // acquireReadLock assumed to be held", "+      cached = false;", "+      String text = getText(DOCSTART, openSquigglyPos+1);", "+      int origNewPos = newPos;", "+      newPos += \"new\".length();", "+      int classStart = getFirstNonWSCharPos(newPos);", "+      if (classStart != ERROR_INDEX) { ", "+        int classEnd = classStart+1;", "+        while (classEnd < text.length()) {", "+          if (! Character.isJavaIdentifierPart(text.charAt(classEnd)) && text.charAt(classEnd) != '.') {", "+            // delimiter found", "+            break;", "+          }", "+          ++classEnd;", "+        }", "+        ", "+        /* Determine parenStart, the postion immediately before the open parenthesis following the superclass name. */", "+        // System.out.println(\"\\tclass = `\"+text.substring(classStart,classEnd)+\"`\");", "+        int parenStart = getFirstNonWSCharPos(classEnd);", "+        if (parenStart != ERROR_INDEX) {", "+          int origParenStart = parenStart;", "+          ", "+          // System.out.println(\"\\tfirst non-whitespace after class = \"+parenStart+\" `\"+text.charAt(parenStart)+\"`\");", "+          if (text.charAt(origParenStart) == '<') {", "+            parenStart = ERROR_INDEX;", "+            // might be a generic class", "+            int closePointyBracket = findNextEnclosingBrace(origParenStart, '<', '>');", "+            if (closePointyBracket != ERROR_INDEX) {", "+              if (text.charAt(closePointyBracket)=='>') {", "+                parenStart = getFirstNonWSCharPos(closePointyBracket+1);", "+              }", "-      }", "-      if (parenStart!=ERROR_INDEX) {", "-        if (text.charAt(parenStart)=='(') {", "-          synchronized(_reduced) {", "+        ", "+        if (parenStart != ERROR_INDEX) {", "+          if (text.charAt(parenStart) == '(') {", "-              cached = (afterParen==openSquigglyPos);          ", "+              cached = (afterParen == openSquigglyPos); ", "+      _storeInCache(key, cached, openSquigglyPos);", "+//      System.out.println(\" ==> \"+cached);", "+      return cached;", "-    ", "-    _storeInCache(key, cached);", "-    ", "-//    System.out.println(\" ==> \"+cached);", "-    return cached;"]}], "num": 27398}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "635d0cc513346383d7b95e8cd82d00ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "040b1f451134f72e39f988ac2bf3637a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "8af81c4ac2b5fdee08d0909db34923047e4b5620", "commitAfterChange": "b1a58702f65a80a9143f66e5aa5d25b7a5e79ac6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testInteractionAbort()     throws BadLocationException, InterruptedException, IOException", "signatureAfterChange": "   public void testInteractionAbort()     throws BadLocationException, InterruptedException, IOException", "diff": ["-    final String beforeAbort = interpret(\"Foo.class.getName()\");", "-    assertEquals(\"Foo\", beforeAbort);", "+    final String beforeAbort = interpret(\"DrJavaTestFoo.class.getName()\");", "+    assertEquals(\"DrJavaTestFoo\", beforeAbort);", "-    //System.err.println(\"about to check Foo\");", "-    final String afterAbort = interpret(\"Foo.class.getName()\");", "-    assertEquals(\"Foo\", afterAbort);", "-    //System.err.println(\"done check Foo: \" + afterAbort);", "+    //System.err.println(\"about to check DrJavaTestFoo\");", "+    final String afterAbort = interpret(\"DrJavaTestFoo.class.getName()\");", "+    assertEquals(\"DrJavaTestFoo\", afterAbort);", "+    //System.err.println(\"done check DrJavaTestFoo: \" + afterAbort);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf18932b6286e03f5df100d5583f6f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "4d0c10a9f2d7a750ce18de4fac7dbd578a167cc0", "commitAfterChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "methodNumberBeforeChange": 358, "methodNumberAfterChange": 358, "signatureBeforeChange": "   private void _setUpActions()", "signatureAfterChange": "   private void _setUpActions()", "diff": ["-    _setUpAction(completeWordUnderCursorAction, \"Auto-Complete Word Under Cursor...\",", "+    _setUpAction(completeWordUnderCursorAction, \"Auto-Complete Word Under Cursor\",", "-    _setUpAction(_openJavadocAction, \"Open Java API Javadoc...\", \"Open the Java API Javadoc webpage for a class\");", "-    _setUpAction(_openJavadocUnderCursorAction, \"Open Java API Javadoc for Word Under Cursor\", \"Open the Java API \"+", "-                 \"Javadoc webpage for the word under the cursor\");", "+    _setUpAction(_openJavadocAction, \"Open Java API Javadoc...\", \"Open the Java API Javadoc Web page for a class\");", "+    _setUpAction(_openJavadocUnderCursorAction, \"Open Java API Javadoc for Word Under Cursor...\", \"Open the Java API \"+", "+                 \"Javadoc Web page for the word under the cursor\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3071734d19c4428a79fccf364637d4eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "8af81c4ac2b5fdee08d0909db34923047e4b5620", "commitAfterChange": "b1a58702f65a80a9143f66e5aa5d25b7a5e79ac6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCompileClasspathOKDifferentPackages()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileClasspathOKDifferentPackages()     throws BadLocationException, IOException", "diff": ["-    // foo must be public and in Foo.java!", "+    // foo must be public and in DrJavaTestFoo.java!", "-    final File fooFile = new File(aDir, \"Foo.java\");", "+    final File fooFile = new File(aDir, \"DrJavaTestFoo.java\");", "-      setupDocument(\"package b;\\nimport a.Foo;\\n\" + FOO2_EXTENDS_FOO_TEXT);", "-    final File foo2File = new File(bDir, \"Foo2.java\");", "+      setupDocument(\"package b;\\nimport a.DrJavaTestFoo;\\n\" + FOO2_EXTENDS_FOO_TEXT);", "+    final File foo2File = new File(bDir, \"DrJavaTestFoo2.java\");", "-    File compiled = classForJava(foo2File, \"Foo2\");", "+    File compiled = classForJava(foo2File, \"DrJavaTestFoo2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3479a530447088d0dedbf97d0e9b8367", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/descriptors/MintDescriptor.java", "commitBeforeChange": "9d83c5e72c3c3a4b777224dfc83ca830e4a2d380", "commitAfterChange": "d5a76eb30f8febc02797eff15a790d6bbcae28ae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public boolean containsCompiler(File f)", "signatureAfterChange": "\r   public boolean containsCompiler(File f)", "diff": ["-    * @return true if the file contains the compiler */", "-  public boolean containsCompiler(File f) {", "-    return Util.exists(f,", "-                       \"edu/rice/cs/mint/comp/TransStaging.class\",", "-                       \"com/sun/source/tree/BracketExprTree.class\",", "-                       \"com/sun/source/tree/BracketStatTree.class\",", "-                       \"com/sun/source/tree/EscapeExprTree.class\",", "-                       \"com/sun/source/tree/EscapeStatTree.class\");", "-  }", "+    * @return true if the file contains the compiler */\r", "+  public boolean containsCompiler(File f) {\r", "+    return Util.exists(f,\r", "+                       \"edu/rice/cs/mint/comp/TransStaging.class\",\r", "+                       \"edu/rice/cs/mint/comp/com/sun/source/tree/BracketExprTree.class\",\r", "+                       \"edu/rice/cs/mint/comp/com/sun/source/tree/BracketStatTree.class\",\r", "+                       \"edu/rice/cs/mint/comp/com/sun/source/tree/EscapeExprTree.class\",\r", "+                       \"edu/rice/cs/mint/comp/com/sun/source/tree/EscapeStatTree.class\");\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f1056d345785d1d1e9580db6d0c755", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugWatchDataTest.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testFirstCreation()", "signatureAfterChange": "   public void testFirstCreation()", "diff": ["-    assertEquals(\"should have a name on startup\",", "+    assertEquals(\"should have a name on startUp\",", "-    assertEquals(\"should have no value on startup\",", "+    assertEquals(\"should have no value on startUp\",", "-    assertEquals(\"should have no type on startup\",", "+    assertEquals(\"should have no type on startUp\",", "-    assertTrue(\"should not be changed on startup\", !data.isChanged());", "+    assertTrue(\"should not be changed on startUp\", !data.isChanged());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54994f65d27c2e6d46522c6ce4d6704f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "c600519b6859da4af01c52410f91013b1bbd745a", "commitAfterChange": "7f9f9a0527fe13a3dbec8283aa5b08139cfc594b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         public void testInvokeStaticMethod() throws Exception", "signatureAfterChange": "         public void testInvokeStaticMethod() throws Exception", "diff": ["-    assertEquals(\"A\", invokeStaticMethod(l, \"A\", \"getName\"));", "-    assertEquals(\"B\", invokeStaticMethod(l, \"B\", \"getName\"));", "-    assertEquals(\"C\", invokeStaticMethod(l, \"C\", \"getName\"));", "+    assertEquals(\"A\", invokeStaticMethod(l, \"pkg.A\", \"getName\"));", "+    assertEquals(\"B\", invokeStaticMethod(l, \"bpkg.B\", \"getName\"));", "+    assertEquals(\"C\", invokeStaticMethod(l, \"pkg.C\", \"getName\"));", "-    try { invokeStaticMethod(\"A\", \"getName\"); fail(\"expected exception\"); }", "+    try { invokeStaticMethod(\"pkg.A\", \"getName\"); fail(\"expected exception\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c8d16a9e17eef2bb3869970b2af387b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/EagerFileProperty.java", "commitBeforeChange": "1b2c230a180a408e07fefa4999fd97bfd19485a5", "commitAfterChange": "f88a51007770d2637f5170b66e852db63e500083", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void update()", "signatureAfterChange": "      public void update()", "diff": ["-      if (_attributes.get(\"dir\").equals(\"/\")) {", "+      if (_attributes.get(\"rel\").equals(\"/\")) {", "-                                   new File(StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"dir\"), PropertyMaps.ONLY, PropertyMaps.GET_CURRENT))));", "+                                   new File(StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"rel\"), PropertyMaps.ONLY, PropertyMaps.GET_CURRENT))));", "-    catch(IOException e) { _value = \"Error.\"; }", "-    catch(SecurityException e) { _value = \"Error.\"; }", "+    catch(IOException e) { _value = \"(Error...)\"; }", "+    catch(SecurityException e) { _value = \"(Error...)\"; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a408d0ba5ef6b9f7b307dc29c20b217", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "c600519b6859da4af01c52410f91013b1bbd745a", "commitAfterChange": "7f9f9a0527fe13a3dbec8283aa5b08139cfc594b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testGetStaticField() throws Exception", "signatureAfterChange": "      public void testGetStaticField() throws Exception", "diff": ["-    assertEquals(\"A\", getStaticField(l, \"A\", \"NAME\"));", "-    assertEquals(\"B\", getStaticField(l, \"B\", \"NAME\"));", "-    assertEquals(\"C\", getStaticField(l, \"C\", \"NAME\"));", "+    assertEquals(\"A\", getStaticField(l, \"pkg.A\", \"NAME\"));", "+    assertEquals(\"B\", getStaticField(l, \"bpkg.B\", \"NAME\"));", "+    assertEquals(\"C\", getStaticField(l, \"pkg.C\", \"NAME\"));", "-    try { getStaticField(\"A\", \"NAME\"); fail(\"expected exception\"); }", "+    try { getStaticField(\"pkg.A\", \"NAME\"); fail(\"expected exception\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "799c1e06530fe281c3dad07268620b1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _setupResourceLocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupResourceLocPanel(ConfigPanel panel)", "diff": ["-                              \"The string &lt;URL&gt; will be replaced with the URL address.<br>\" +", "+                              \"The string <code>&lt;URL&gt;</code> will be replaced with the URL address.<br>\" +", "-                              \"Location of the JDK's tools.jar, which contains the compiler and debugger.\",", "+                              \"Optional location of the JDK's tools.jar, which contains the compiler and debugger.\",", "-                              \"Location of the JSR-14 compiler, for compiling with generics.\",", "+                              \"Optional location of the JSR-14 compiler, for compiling with generics.\",", "-                               \"Location of the JSR-14 collect.jar file, which contains the collection classes.\",", "+                               \"Optional location of the JSR-14 collect.jar file, which contains the collection classes.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d285fb416fb66704593d4dc73fa6cdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5bb90362cd995f5e55d5b1fb67a46ff3a54e5317", "commitAfterChange": "328f627f0b6ac099c1b27f12b1572d901deb00c4", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 131, "signatureBeforeChange": "      public void saveAllBeforeProceeding(GlobalModelListener.SaveReason reason)", "signatureAfterChange": "      public void saveAllBeforeProceeding(GlobalModelListener.SaveReason reason)", "diff": ["-", "-          \"To compile, you must first save all modified files.\\n\" +", "+          \"To compile, you must first save ALL modified files.\\n\" +", "-          \"To run JUnit, you must first save and compile all modified\\n\" +", "+          \"To run JUnit, you must first save and compile ALL modified\\n\" +", "-          \"all modified files. Would like to save and then compile?\";", "+          \"ALL modified files. Would like to save and then compile?\";", "-                                             \"Must save to continue\",", "+                                             \"Must save all files to continue\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5420905b3fc07f0546cdcf01477edd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "763746c75da041fa03e39aafc4de71f8bfce036b", "commitAfterChange": "5b8a4d5203a3c597e80c0cef7902216619428742", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws IOException", "signatureAfterChange": "      public void setUp() throws IOException", "diff": ["-    }, \"folder1/\");", "+    }, \"folder1\");", "-    }, \"folder1/\");", "+    }, \"folder1\");", "-    }, \"folder2/\");", "+    }, \"folder2\");", "-    }, \"folder2/\");", "+    }, \"folder2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3cb6b3bb48673b27e102754c90ee3bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PreemptingClassLoaderTest.java", "commitBeforeChange": "e6763da4d9e1118450dc76cc396410e4a3b0e46a", "commitAfterChange": "9c8a785db081b77d8ac8b9698b67d2973d82d49a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testLoadsPreemptedClasses2() throws ClassNotFoundException", "signatureAfterChange": "      public void testLoadsPreemptedClasses2() throws ClassNotFoundException", "diff": ["-    PreemptingClassLoader l = new PreemptingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil$Version\");", "+    PreemptingClassLoader l = new PreemptingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.recur.RecurUtil$ArrayStringMode\");", "-    assertLoadsSameClass(BASE_LOADER, l, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    assertLoadsSameClass(BASE_LOADER, l, \"edu.rice.cs.plt.recur.RecurUtil\");", "-      \"edu.rice.cs.plt.reflect.ReflectUtil$Version\", ", "-      \"edu.rice.cs.plt.reflect.ReflectUtil$Version$1\" };", "+      \"edu.rice.cs.plt.recur.RecurUtil$ArrayStringMode\", ", "+      \"edu.rice.cs.plt.recur.RecurUtil$ArrayStringMode$1\" };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66dc41145b0421b59c2c47294ffb4e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/descriptors/MintDescriptor.java", "commitBeforeChange": "9d83c5e72c3c3a4b777224dfc83ca830e4a2d380", "commitAfterChange": "d5a76eb30f8febc02797eff15a790d6bbcae28ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Set<String> getToolsPackages()", "signatureAfterChange": "\r   public Set<String> getToolsPackages()", "diff": ["-    */", "-  public Set<String> getToolsPackages() {", "-    HashSet<String> set = new HashSet<String>();", "-    Collections.addAll(set, new String[] {", "-      // Additional from 6 tools.jar:", "-      \"com.sun.codemodel\",", "-        \"com.sun.istack.internal.tools\", // other istack packages are in rt.jar", "-        \"com.sun.istack.internal.ws\",", "-        \"com.sun.source\",", "-        \"com.sun.xml.internal.dtdparser\", // other xml.internal packages are in rt.jar", "-        \"com.sun.xml.internal.rngom\",", "-        \"com.sun.xml.internal.xsom\",", "-        \"org.relaxng\",", "-        ", "-        // Mint:", "-        \"com.sun.tools.javac\",", "-        \"com.sun.tools.javac.tree\",", "-        \"com.sun.tools.javac.comp\",", "-        \"com.sun.tools.javac.main\",", "-        \"edu.rice.cs.mint\",", "-        \"edu.rice.cs.mint.comp\",", "-        \"edu.rice.cs.mint.runtime\",", "-        \"edu.rice.cs.mint.runtime.mspTree\"", "-    });", "-    return set;", "-  }", "+    */\r", "+  public Set<String> getToolsPackages() {\r", "+    HashSet<String> set = new HashSet<String>();\r", "+    Collections.addAll(set, new String[] {\r", "+      // Additional from 6 tools.jar:\r", "+      \"com.sun.codemodel\",\r", "+        \"com.sun.istack.internal.tools\", // other istack packages are in rt.jar\r", "+        \"com.sun.istack.internal.ws\",\r", "+        \"com.sun.source\",\r", "+        \"com.sun.xml.internal.dtdparser\", // other xml.internal packages are in rt.jar\r", "+        \"com.sun.xml.internal.rngom\",\r", "+        \"com.sun.xml.internal.xsom\",\r", "+        \"org.relaxng\",\r", "+        \r", "+        // Mint:\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac\",\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac.tree\",\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac.comp\",\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac.main\",\r", "+        \"edu.rice.cs.mint\",\r", "+        \"edu.rice.cs.mint.comp\",\r", "+        \"edu.rice.cs.mint.runtime\",\r", "+        \"edu.rice.cs.mint.runtime.mspTree\"\r", "+    });\r", "+    return set;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f06970f3d6f01d24afe4ba2f15752e82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PreemptingClassLoaderTest.java", "commitBeforeChange": "e6763da4d9e1118450dc76cc396410e4a3b0e46a", "commitAfterChange": "9c8a785db081b77d8ac8b9698b67d2973d82d49a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testLoadsPreemptedClasses1() throws ClassNotFoundException", "signatureAfterChange": "      public void testLoadsPreemptedClasses1() throws ClassNotFoundException", "diff": ["-    PreemptingClassLoader l = new PreemptingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.reflect.ReflectUtil\");", "+    PreemptingClassLoader l = new PreemptingClassLoader(BASE_LOADER, \"edu.rice.cs.plt.recur.RecurUtil\");", "-    { \"edu.rice.cs.plt.reflect.ReflectUtil\",", "-      \"edu.rice.cs.plt.reflect.ReflectUtil$Version\",", "-      \"edu.rice.cs.plt.reflect.ReflectUtil$Version$1\" };", "+    { \"edu.rice.cs.plt.recur.RecurUtil\",", "+      \"edu.rice.cs.plt.recur.RecurUtil$ArrayStringMode\",", "+      \"edu.rice.cs.plt.recur.RecurUtil$ArrayStringMode$1\" };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb71c02038066c495369b2357b133b44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "51e8f4cbce06d140e9a09dd38237b848b4f27d8a", "commitAfterChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new MutableFileProperty(\"drjavajar.file\", null,", "-                                                                      \"If the command line was stored in a .drjavajar file,\"+", "-                                                                      \"then this property contains the file. Otherwise, it is \"+", "-                                                                      \"empty.\\n\"+", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new MutableFileProperty(\"enclosing.djapp.file\", null,", "+                                                                      \"If the command line was enclosed in a .djapp file that \"+", "+                                                                      \"was a JAR file, then this property contains the file. \"+", "+                                                                      \"Otherwise, it is empty.\\n\"+"]}], "num": 30038}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff8c8bccca6a5054c6efc10cc9e2df83", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "632161910d6b32f390cc9606b43bb9da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 433, "signatureBeforeChange": "     public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,                                       final boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "diff": ["-     */", "-    public void threadLocationUpdated(final OpenDefinitionsDocument doc, final int lineNumber,", "-                                      final boolean shouldHighlight) {", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "-          // This listener is used when the document to display is", "-          // not the active document. In this case, when setActiveDocument", "-          // is called, the document won't yet have positive size and we", "-          // don't want to scroll to a line until it does, so we wait", "-          // for a call to setSize.", "-          ", "-//          ActionListener setSizeListener = new ActionListener() {", "-//            public void actionPerformed(ActionEvent ae) {", "-//              Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "-//              _currentDefPane.centerViewOnLine(lineNumber);", "-//              _currentDefPane.requestFocusInWindow();", "-//            }", "-//          };", "-//          _currentDefPane.addSetSizeListener(setSizeListener);", "-          ", "-          if (!_model.getActiveDocument().equals(doc)) _model.setActiveDocument(doc);", "-          else _model.refreshActiveDocument();", "-          ", "-          // this block occurs if the documents is already open and as such", "-          // has a positive size", "-          if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {", "-//            SwingUtilities.invokeLater(new Runnable() {  ", "-//              public void run() {", "-//                Utilities.showDebug(\"Getting ready to reset defintions pane\");", "-                _currentDefPane.centerViewOnLine(lineNumber);", "-                _currentDefPane.requestFocusInWindow();", "-//              }", "-//            });", "-          }", "-          ", "-          /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.  It is not clear ", "-           * why this deferral works. */", "-          SwingUtilities.invokeLater(new Runnable() {  ", "-            public void run() {", "-              if (shouldHighlight) {", "-                _removeThreadLocationHighlight();", "-                int startOffset = doc.getOffset(lineNumber);", "-                if (startOffset > -1) {", "-                  int endOffset = doc.getLineEndPos(startOffset);", "-                  if (endOffset > -1) {", "-                    _currentThreadLocationHighlight =", "-                      _currentDefPane.getHighlightManager().", "-                      addHighlight(startOffset, endOffset, DefinitionsPane.THREAD_PAINTER);", "-                  }", "-                }", "-              }", "-              ", "-              if (doc.isModifiedSinceSave() && !_currentDefPane.hasWarnedAboutModified()) {", "-                ", "-                _showDebuggingModifiedFileWarning();", "-                ", "-                //no need to update flag, because previous method call will do it", "-                //_hasWarnedAboutModified = true;", "-              }", "-              if (shouldHighlight) {", "-                // Give the interactions pane focus so we can debug", "-                _interactionsPane.requestFocusInWindow();", "-                showTab(_interactionsPane);", "-              }", "-              _updateDebugStatus();", "-            }", "-          });", "-//        }", "-//      });", "-    }", "+     */", "+    public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) {", "+      scrollToDocumentAndLine(doc, lineNumber, shouldHighlight);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df9b9b74978290a8a153b86dba75ab83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "a6b0a623369310bca609596a45d42dfc11ddae97", "commitAfterChange": "f0c06f4ecb55d3ad2147a0571c9f9cb7a469ab29", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private boolean javadoc_1_3(String[] args)        throws IOException, ClassNotFoundException, InterruptedException", "signatureAfterChange": "   private boolean javadoc_1_3(String[] args)        throws IOException, ClassNotFoundException, InterruptedException", "diff": ["-    System.err.println(\"javadoc started with args:\\n\" + Arrays.asList(args));", "+//    System.err.println(\"javadoc started with args:\\n\" + Arrays.asList(args));", "-    System.err.println(\"got past first waitFor.\");", "+//    System.err.println(\"got past first waitFor.\");", "-    ", "-    ", "-//     if (value != 0) {", "-//       // If we get here, we will just have to try using the javadoc program", "-//       // which is hopefully on the system path", "-//       if (CodeStatus.DEVELOPMENT) {", "-//         String msg = (\"Launching Javadoc with ExecJVM failed.  Messages:\");", "-//         printProcessOutput(javadocProcess, msg, \"ExecJVM\");", "-//         ", "-//         System.err.println(\"Attempting to launch Javadoc from command path.\");", "-//       }", "-//       ", "-//       String[] fullArgs = new String[args.length + 1];", "-//       fullArgs[0] = \"javadoc\";", "-//       //TODO: Use System.arraycopy() here.", "-//       for(int a = 0; a < args.length; a++) {", "-//         fullArgs[a + 1] = args[a];", "-//       }", "-//       javadocProcess =  Runtime.getRuntime().exec(fullArgs);", "-//       ", "-//       // TODO: try/catch the previous line and prompt for javadoc's location", "-//       // on failure....and even keep the location in the drjava config", "-//       // DON'T USE waitFor! (See above.)", "-// //       value = javadocProcess.waitFor();", "-//       ", "-//       if (value != 0) {", "-//         if (CodeStatus.DEVELOPMENT) {", "-//           String msg = (\"Launching Javadoc with Runtime.Exec failed.  Messages:\");", "-//           printProcessOutput(javadocProcess, msg, \"Runtime.Exec\");", "-//         }", "-//         ", "-//         // Handle the error condition at the caller!", "-//         CompilerError err = new CompilerError((\"finished with exit code \" + value), false);", "-//         _javadocErrorModel = new CompilerErrorModel(new CompilerError[] { err }, this);", "-//       }", "-//       // else we have a valid javadocProcess from Runtime.Exec - fall through.", "-//     }", "-//     // else or fall-through means we have a valid javadocProcess from ExecJVM or Runtime.Exec", "-    ", "-    ", "-    ArrayList errors = new ArrayList(0);", "-    ", "-    // We already know javadoc is done => process its error messages", "-//     String output;", "-    ", "-//     jdOut = new BufferedReader(new InputStreamReader(javadocProcess.getInputStream()));", "-//     jdErr = new BufferedReader(new InputStreamReader(javadocProcess.getErrorStream()));", "-    ", "-    // Ignore all of javadoc's inane jabber to stdout.", "-    // Maybe dump this to console while debugging?", "-//     output = jdOut.readLine();", "-//     System.out.println(\"[Javadoc stdout] \" + output);", "-//     while (output != null) {", "-//       System.out.println(\"[Javadoc stdout] \" + output);", "-//       output = jdOut.readLine();", "-//     }", "-    ", "-    // By this point, the Javadoc process is dead, so we can't block on reads.", "-//     output = jdErr.readLine();", "-//     while (output != null) {", "-//       final String EXCEPTION_INDICATOR = \"Exception: \";", "-// //         System.out.println(\"[javadoc raw error] \" + output);", "-//       ", "-//       int errStart;", "-//       // Check for the telltale signs of a thrown exception.", "-//       errStart = output.indexOf(EXCEPTION_INDICATOR);", "-//       if (errStart != -1) {", "-//         // If we found one, put the entirety of stderr in one CompilerError.", "-//         StringBuffer buf = new StringBuffer(2000);", "-//         do {", "-//           buf.append(output);", "-//           output = jdErr.readLine();", "-//         } while (output != null);", "-//         errors.add(new CompilerError(buf.toString(), false));", "-//       }", "-//       else {", "-//         CompilerError error = parseJavadocErrorLine(output);", "-//         if (error != null) {", "-//           errors.add(error);", "-// //           System.err.println(\"[javadoc err]\" + error);", "-//         }", "-//       }", "-//       output = jdErr.readLine();", "-//     }", "-    ", "-    final String EXCEPTION_INDICATOR = \"Exception: \";", "-    while (errLines.size() > 0) {", "-//         System.out.println(\"[javadoc raw error] \" + output);", "-      ", "-      output = (String) errLines.removeFirst();", "-      ", "-      int errStart;", "-      // Check for the telltale signs of a thrown exception.", "-      errStart = output.indexOf(EXCEPTION_INDICATOR);", "-      if (errStart != -1) {", "-        // If we found one, put the entirety of stderr in one CompilerError.", "-        StringBuffer buf = new StringBuffer(60 * errLines.size());", "-        do {", "-          buf.append(output);", "-          output = (String) errLines.removeFirst();", "-        } while (errLines.size() > 0);", "-        errors.add(new CompilerError(buf.toString(), false));", "-      }", "-      else {", "-        // Otherwise, parser for a normal error message.", "-        CompilerError error = parseJavadocErrorLine(output);", "-        if (error != null) {", "-          errors.add(error);", "-//           System.err.println(\"[javadoc err]\" + error);", "-        }", "-      }", "-    }", "+", "+    ArrayList errors = extractErrors(outLines);", "+    errors.addAll(extractErrors(errLines));", "-    System.out.println(\"built javadoc error model\");", "+//    System.out.println(\"built javadoc error model\");"]}], "num": 22637}
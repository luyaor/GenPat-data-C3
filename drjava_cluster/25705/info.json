{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3d4b2bbc8be6d2de71956fd47a06b06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbc7689ae279b80f9f62b2351e41762", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "bb97cd9f73d55ae676f0ba1f2e25693ba56b3a94", "commitAfterChange": "5b93e80cb10dee78dfbc4bb12adf88d5e7123ec9", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 202, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["+      ", "+    // The OptionListener for JAVADOC_LINK_VERSION.", "+    OptionListener<String> choiceOptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        _openJavadocList = null;", "+        _openJavadocAction.setEnabled(!oce.value.equals(JAVADOC_NONE_TEXT));", "+        _openJavadocUnderCursorAction.setEnabled(!oce.value.equals(JAVADOC_NONE_TEXT));", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_LINK_VERSION, choiceOptionListener);", "+    ", "+    // The OptionListener for JAVADOC_XXX_LINK.", "+    OptionListener<String> link13OptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+        if (linkVersion.equals(JAVADOC_1_3_TEXT)) {", "+          _openJavadocList = null;", "+        }", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_1_3_LINK, link13OptionListener);", "+    OptionListener<String> link14OptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+        if (linkVersion.equals(JAVADOC_1_4_TEXT)) {", "+          _openJavadocList = null;", "+        }", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_1_4_LINK, link14OptionListener);", "+    OptionListener<String> link15OptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+        if (linkVersion.equals(JAVADOC_1_5_TEXT)) {", "+          _openJavadocList = null;", "+        }", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_1_5_LINK, link15OptionListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d6445077f33bab2485efad1f49792e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 223, "signatureBeforeChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-    Iterable<ConstructorInvocationCandidate> constructors = ", "-      t.apply(new TypeAbstractVisitor<Iterable<ConstructorInvocationCandidate>>() {", "-        @Override public Iterable<ConstructorInvocationCandidate> defaultCase(Type t) { return IterUtil.empty(); }", "-        @Override public Iterable<ConstructorInvocationCandidate> forClassType(final ClassType t) {", "-          return IterUtil.mapSnapshot(t.ofClass().declaredConstructors(),", "-                                       new Lambda<DJConstructor, ConstructorInvocationCandidate>() {", "-            public ConstructorInvocationCandidate value(DJConstructor k) {", "-              return new ConstructorInvocationCandidate(k, t, typeArgs, args, expected);", "+    Iterable<DJConstructor> constructors = ", "+      t.apply(new TypeAbstractVisitor<Iterable<DJConstructor>>() {", "+        @Override public Iterable<DJConstructor> defaultCase(Type t) { return IterUtil.empty(); }", "+        @Override public Iterable<DJConstructor> forSimpleClassType(SimpleClassType t) {", "+          return t.ofClass().declaredConstructors();", "+        }", "+        @Override public Iterable<DJConstructor> forRawClassType(RawClassType t) {", "+          return IterUtil.mapSnapshot(t.ofClass().declaredConstructors(), new Lambda<DJConstructor, DJConstructor>() {", "+            public DJConstructor value(DJConstructor k) {", "+              // TODO: raw member access warnings", "+              return new ErasedConstructor(k);", "+            }", "+          });", "+        }", "+        @Override public Iterable<DJConstructor> forParameterizedClassType(ParameterizedClassType t) {", "+          final Iterable<VariableType> classTParams = SymbolUtil.allTypeParameters(t.ofClass());", "+          final Iterable<? extends Type> classTArgs = capture(t).typeArguments();", "+          return IterUtil.mapSnapshot(t.ofClass().declaredConstructors(), new Lambda<DJConstructor, DJConstructor>() {", "+            public DJConstructor value(DJConstructor k) {", "+              return new InstantiatedConstructor(k, classTParams, classTArgs);", "-    Iterable<ConstructorInvocationCandidate> results = bestMatches(constructors);", "+      ", "+    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(constructors, typeArgs, args, expected);", "-    int matches = IterUtil.sizeOf(results);", "-    if (matches != 1) { throw new UnmatchedLookupException(matches); }", "-    else { return IterUtil.first(results).invocation(); }", "+    int matches = IterUtil.sizeOf(cs);", "+    if (matches == 0) { throw new UnmatchedFunctionLookupException(constructors); }", "+    else if (matches > 1) {", "+      Iterable<DJConstructor> ks = IterUtil.map(cs, new Lambda<FunctionInvocationCandidate<DJConstructor>,", "+                                                               DJConstructor>() {", "+        public DJConstructor value(FunctionInvocationCandidate<DJConstructor> c) { return c.function(); }", "+      });", "+      throw new AmbiguousFunctionLookupException(ks);", "+    }", "+    else {", "+      FunctionInvocationCandidate<DJConstructor> c = IterUtil.first(cs);", "+      DJConstructor k = c.function();", "+      SubstitutionMap sigma = c.substitution();", "+      return new ConstructorInvocation(k, c.typeArguments(), c.arguments(), substitute(k.thrownTypes(), sigma));", "+    }"]}], "num": 25705}
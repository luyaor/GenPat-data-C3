{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04f61ea240171a5f06dc41e171af65f4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2ec5ac197ef0f81a56967c8474166a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void runTest(final String className, final String fileName)", "signatureAfterChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "diff": ["-  public void runTest(final String className, final String fileName) {", "-    Thread t = new Thread(\"JUnit Test Thread\") {", "-      public void run() {", "-        try {", "-          if (!_isTestCase(className)) {", "-            _jvm.nonTestCase();", "-           return;", "+   */", "+  public List<String> runTest(final List<String> classNames, final List<File> files,", "+                              final boolean isTestAll) {", "+    final ArrayList<String> stuff = new ArrayList<String>();", "+    synchronized (stuff) {", "+      _testRunner = new JUnitTestRunner(_jmc);", "+      new Thread(\"JUnit Test Thread\") {", "+        public void run() {", "+          try {", "+            boolean noJUnitTests = true;", "+            TestSuite suite = new TestSuite();", "+            synchronized (stuff) {", "+              try {", "+                for (int i = 0; i < classNames.size(); i++) {", "+                  String className = classNames.get(i);", "+                  if (_isTestCase(className)) {", "+                    Test test = _testRunner.getTest(className);", "+                    suite.addTest(test);", "+                    stuff.add(className);", "+                    noJUnitTests = false;", "+                  }", "+                }", "+              }", "+              finally {", "+                stuff.notify();", "+              }", "+            }", "+            if (noJUnitTests) {", "+              _jmc.nonTestCase(isTestAll);", "+              //            _jmc.testSuiteEnded(new JUnitError[] {new JUnitError(null, \"No JUnit tests open!\", false, \"\")});", "+              return;", "+            }", "+            ", "+            TestResult result = _testRunner.doRun(suite); ", "+            ", "+            JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "+            ", "+            Enumeration failures = result.failures();", "+            Enumeration errEnum = result.errors();", "+            ", "+            int i = 0;", "+            ", "+            while (errEnum.hasMoreElements()) {", "+              TestFailure tErr = (TestFailure) errEnum.nextElement();", "+              errors[i] = _makeJUnitError(tErr, classNames, true, files);", "+              i++;", "+            }", "+            while (failures.hasMoreElements()) {", "+              TestFailure tFail = (TestFailure) failures.nextElement();", "+              errors[i] = _makeJUnitError(tFail, classNames, false, files);", "+              i++;", "+            }", "+            ", "+            _jmc.testSuiteEnded(errors);", "-          Test suite = _testRunner.getTest(className);", "-          TestResult result = _testRunner.doRun(suite); ", "-          ", "-          JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "-          ", "-          Enumeration failures = result.failures();", "-          Enumeration errEnum = result.errors(); ", "-          ", "-          int i=0;", "-          ", "-          while ( errEnum.hasMoreElements()) {", "-            TestFailure tErr = (TestFailure) errEnum.nextElement();", "-            errors[i] = _makeJUnitError(tErr, className, true, fileName);", "-            i++;", "+          catch (Throwable t) {", "+            _failedWithError(t);", "-          ", "-          while (failures.hasMoreElements()) {", "-            TestFailure tFail = (TestFailure) failures.nextElement();", "-            errors[i] = _makeJUnitError(tFail, className, false, fileName);", "-            i++;", "-          }", "-          ", "-          _jvm.testSuiteFinished(errors);", "-        catch (Throwable t) {", "-          JUnitError[] errors = new JUnitError[1];", "-          errors[0] = new JUnitError(new File(fileName), -1, -1, t.getMessage(),", "-                                    false, className, StringOps.getStackTrace(t));", "-          _jvm.testSuiteFinished(errors);", "-        }", "+      }.start();", "+      try {", "+        stuff.wait();", "-    };", "-    t.start();", "+      catch (InterruptedException ex) {", "+      }", "+    }", "+    return stuff;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3c971fd01521c8637ad1fb1a2a56290", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 8, "signatureBeforeChange": "       protected void setBreakpoint(String className, int lineNumber) throws DebugException", "signatureAfterChange": "   public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "diff": ["-   */    ", "-  protected void setBreakpoint(String className, int lineNumber) throws DebugException {", "+   */", "+  public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+    throws DebugException", "+  {", "+    String packageName = \"\";", "+    try {", "+      doc.getDocument().getPackageName();", "+    }", "+    catch (InvalidPackageException e) {", "+      // Couldn't find package, pretend there's none", "+    }", "+    String className = packageName + doc.getClassName();", "+    //System.out.println(\"Setting breakpoint in class: \" + className + ", "+    //                   \", line: \" + lineNumber);", "+    ", "+    // Get all classes that match this name", "+    List classes = _vm.classesByName(className);", "+    //System.out.println(\"Num of classes found: \" + classes.size());", "+    ReferenceType rt = null;", "+    Iterator it = classes.iterator();", "+    // Assume first one is correct, for now", "+    if (it.hasNext()) {", "+      rt = (ReferenceType) it.next();", "+    }", "+    if (rt == null) {", "+      //System.out.println(\"No reference type found\");", "+      return false;", "+    }", "+    ", "+    // Get locations for the line number, use the first", "+    try {", "+      List lines = rt.locationsOfLine(lineNumber);", "+      if (lines.size() == 0) {", "+        // Can't find a location on this line", "+        //System.out.println(\"No locations found.\");", "+        return false;", "+      }", "+      Location loc = (Location) lines.get(0);", "+      BreakpointRequest req = _eventManager.createBreakpointRequest(loc);", "+      req.setSuspendPolicy(EventRequest.SUSPEND_ALL);", "+      req.enable();", "+      //System.out.println(\"Breakpoint: \" + req);", "+      return true;", "+    }", "+    catch (AbsentInformationException aie) {", "+      throw new DebugException(\"Could not find line number: \" + aie);", "+    }", "+    ", "+    /**", "+    */"]}], "num": 10442}
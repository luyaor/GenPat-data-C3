{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acc7b57a5a962e0efebefb04597bbd52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37505bfbb7c518fb15b802a5d8f29221", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver,                               List<String> classpaths,                               JavadocListener listener)", "signatureAfterChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver,                               List<String> classpaths,                               JavadocListener listener)", "diff": ["-    HashSet docUnits = new HashSet();  // units to send to Javadoc (packages or files)", "-    HashSet sourceRootSet = new HashSet();  // set of unique source roots for open files", "-    HashSet defaultRoots = new HashSet();  // source roots for files in default package", "-    HashSet topLevelPacks = new HashSet();  // top level package names to include", "+    HashSet<String> docUnits = new HashSet<String>();  // units to send to Javadoc (packages or files)", "+    HashSet<File> sourceRootSet = new HashSet<File>();  // set of unique source roots for open files", "+    HashSet<File> defaultRoots = new HashSet<File>();  // source roots for files in default package", "+    HashSet<String> topLevelPacks = new HashSet<String>();  // top level package names to include", "-    ArrayList args = new ArrayList();", "+    ArrayList<String> args = new ArrayList<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea47d257ffa9a337d63c69e46ae9a0f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public Class visit(InnerAllocation node)", "signatureAfterChange": "   public Class<?> visit(InnerAllocation node)", "diff": ["-  public Class visit(InnerAllocation node) {", "+  public Class<?> visit(InnerAllocation node) {", "-    Class ec = node.getExpression().acceptVisitor(this);", "+    Class<?> ec = node.getExpression().acceptVisitor(this);", "-    Class c = type.acceptVisitor(this);", "-    Class dc = InterpreterUtilities.getDeclaringClass(c);", "+    Class<?> c = type.acceptVisitor(this);", "+    Class<?> dc = InterpreterUtilities.getDeclaringClass(c);", "-    List args = node.getArguments();", "-    Class[] cargs = null;", "+    List<Expression> args = node.getArguments();", "+    Class<?>[] cargs = null;", "-        cargs = new Class[args.size() + 1];", "+        cargs = new Class<?>[args.size() + 1];", "-        ListIterator it = args.listIterator();", "+        ListIterator<Expression> it = args.listIterator();", "-          cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+          cargs[i++] = it.next().acceptVisitor(this);", "-        cargs = new Class[] { ec };", "+        cargs = new Class<?>[] { ec };"]}], "num": 25784}
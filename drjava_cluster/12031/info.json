{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0aa03504403d4602c2e4cba934cb7ab7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9853038c2495c81ebc3e4de22f7b8339", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack4.java", "commitBeforeChange": "b9dd52b4ecb6c9b7750e6e1de631c1d8032aa916", "commitAfterChange": "2bd872ed3d0b6e87a4c41b76a623c493f8166665", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public RecursionStack4()", "signatureAfterChange": "   public RecursionStack4(Lambda4<? super T1, ? super T2, ? super T3, ? super T4,                                  ? extends Quad<T1, T2, T3, T4>> quadFactory)", "diff": ["-  /** Create an empty recursion stack */", "-  public RecursionStack4() {", "-    _previous = new HashMultiset<IdentityQuad<T1, T2, T3, T4>>();", "-    _stack = new LinkedList<IdentityQuad<T1, T2, T3, T4>>();", "+   */", "+  public RecursionStack4(Lambda4<? super T1, ? super T2, ? super T3, ? super T4,", "+                                 ? extends Quad<T1, T2, T3, T4>> quadFactory) {", "+    _quadFactory = quadFactory;", "+    _previous = new HashMultiset<Quad<T1, T2, T3, T4>>();", "+    _stack = new LinkedList<Quad<T1, T2, T3, T4>>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdc23c43becd65f4526a6c94c34b370a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/PrecomputedRecursionStack4.java", "commitBeforeChange": "b9dd52b4ecb6c9b7750e6e1de631c1d8032aa916", "commitAfterChange": "2bd872ed3d0b6e87a4c41b76a623c493f8166665", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public PrecomputedRecursionStack4()", "signatureAfterChange": "   public PrecomputedRecursionStack4(Lambda4<? super T1, ? super T2, ? super T3, ? super T4,                                             ? extends Quad<T1, T2, T3, T4>> quadFactory)", "diff": ["-  /** Create an empty recursion stack */", "-  public PrecomputedRecursionStack4() {", "-    _previous = new HashMap<IdentityQuad<T1, T2, T3, T4>, ", "+   */", "+  public PrecomputedRecursionStack4(Lambda4<? super T1, ? super T2, ? super T3, ? super T4,", "+                                            ? extends Quad<T1, T2, T3, T4>> quadFactory) {", "+    _quadFactory = quadFactory;", "+    _previous = new HashMap<Quad<T1, T2, T3, T4>, ", "-    _stack = new LinkedList<IdentityQuad<T1, T2, T3, T4>>();", "+    _stack = new LinkedList<Quad<T1, T2, T3, T4>>();"]}], "num": 12031}
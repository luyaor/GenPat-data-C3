{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d884aec43ddbdb35e4cd2578b5f96b7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4662dc7d370d3ba3786c2b61ed11dc9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["-  /** Compiles all documents in the list of opendefinitionsdocuments sent as input. */", "-  public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "-    File buildDir = null;", "-    ", "-    if (_getter.getFileGroupingState().isProjectActive()) {", "-      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "-    }", "-    ", "-    // Only compile if all are saved", "-    if (_hasModifiedFiles(defDocs)) {", "-      //System.out.println(\"Has modified files\");", "-      _notifier.saveBeforeCompile();", "-    }", "-    ", "-    ", "-    // check for modified project files, in case they didn't save when prompted", "-    if (_hasModifiedFiles(defDocs)) return;", "-    // if any files haven't been saved after we told our", "-    // listeners to do so, don't proceed with the rest", "-    // of the compile.", "-    ", "-    // Get sourceroots and all files", "-    File[] sourceRoots = getSourceRootSet();", "-    ArrayList<File> filesToCompile = new ArrayList<File>();", "-    ", "-    File f;", "-    String[] exts = getCompilableExtensions();", "-    for (OpenDefinitionsDocument doc : defDocs) {", "-      try {", "-        f = doc.getFile();", "-        if (endsWithExt(f, exts)) filesToCompile.add(f);", "-      }", "-      catch (IllegalStateException ise) {", "-        // No file for this document; skip it", "-      }", "-    }", "-    File[] files = filesToCompile.toArray(new File[filesToCompile.size()]);", "-    ", "-    _notifier.compileStarted();", "+  /** Compiles all documents in the specified list of OpenDefinitionsDocuments. */", "+  public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "+    ", "+    File buildDir = null;", "+    ", "+    if (_getter.getFileGroupingState().isProjectActive()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+    }", "+    ", "+    // Only compile if all are saved", "+    if (_hasModifiedFiles(defDocs)) _notifier.saveBeforeCompile();", "+    ", "+    // check for modified project files, in case they didn't save when prompted", "+    if (_hasModifiedFiles(defDocs)) return;", "+    // if any files haven't been saved after we told our", "+    // listeners to do so, don't proceed with the rest", "+    // of the compile.", "+    ", "+    // Get sourceroots and all files", "+    ArrayList<File> filesToCompile = new ArrayList<File>();", "+    ", "+    File f;", "+    String[] exts = getCompilableExtensions();", "+    for (OpenDefinitionsDocument doc : defDocs) {", "+      try {", "+        f = doc.getFile();", "+        if (endsWithExt(f, exts)) filesToCompile.add(f);", "+      }", "+      catch (IllegalStateException ise) {", "+        // No file for this document; skip it", "+      }", "+    } ", "+    _rawCompile(getSourceRootSet(), filesToCompile.toArray(new File[0]), buildDir);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6879e728a564ed1b16baa94926a612d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   synchronized public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["+  /** Compiles all documents in the list of opendefinitionsdocuments sent as input. */", "+  public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "+    ", "+    File buildDir = null;", "+    if (_getter.getFileGroupingState().isProjectActive()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+    }", "+    ", "+    // Only compile if all are saved", "+    if (_hasModifiedFiles(defDocs)) {", "+      //System.out.println(\"Has modified files\");", "+      _notifier.saveBeforeCompile();", "+    }", "+    ", "+    ", "+    // check for modified project files, in case they didn't save when prompted", "+    if (_hasModifiedFiles(defDocs)) return;", "+    // if any files haven't been saved after we told our", "+    // listeners to do so, don't proceed with the rest", "+    // of the compile.", "+    ", "+    // Get sourceroots and all files", "+    File[] sourceRoots = getSourceRootSet();", "+    ArrayList<File> filesToCompile = new ArrayList<File>();", "+    ", "+    File f;", "+    String[] exts = getCompilableExtensions();", "+    for (OpenDefinitionsDocument doc : defDocs) {", "+        f = doc.getFile();", "+        if (endsWithExt(f, exts)) filesToCompile.add(f);", "+      catch (IllegalStateException ise) {", "+        // No file for this document; skip it", "+    }", "+    File[] files = filesToCompile.toArray(new File[0]);", "+    ", "+    _notifier.compileStarted();", "+    ", "+    try {", "+      // Compile the files", "+      _compileFiles(sourceRoots, files, buildDir);", "+    }", "+    catch (Throwable t) {", "+      CompilerError err = new CompilerError(t.toString(), false);", "+      CompilerError[] errors = new CompilerError[] { err };", "+      _distributeErrors(errors);", "+    }", "+    finally {", "+      // Fire a compileEnded event", "+      _notifier.compileEnded();", "-   */", "-  synchronized public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "-    File buildDir = null;", "-    if (_getter.getFileGroupingState().isProjectActive()) {", "-      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "-    }", "-    // Only compile if all are saved", "-    if (_hasModifiedFiles(defDocs)) {", "-      //System.out.println(\"Has modified files\");", "-      _notifier.saveBeforeCompile();", "-    }", "-", "-    // check for modified project files, in case they didn't save when prompted", "-    if (_hasModifiedFiles(defDocs)) {", "-      // if any files haven't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the compile.", "-    }", "-    else {", "-", "-      // Get sourceroots and all files", "-      File[] sourceRoots = getSourceRootSet();", "-      ArrayList<File> filesToCompile = new ArrayList<File>();", "-", "-      File f;", "-      String[] exts = getCompilableExtensions();", "-      boolean okToAdd;", "-      for (int i = 0; i < defDocs.size(); i++) {", "-        OpenDefinitionsDocument doc = defDocs.get(i);", "-        try {", "-          f = doc.getFile();", "-          okToAdd = false;", "-          for(String ext: exts){", "-            if(f.getName().endsWith(ext)){", "-              okToAdd = true;", "-            }", "-          }", "-          if(okToAdd){", "-            filesToCompile.add(f);", "-          }", "-        }", "-        catch (IllegalStateException ise) {", "-          // No file for this document; skip it", "-        }", "-      }", "-      File[] files = filesToCompile.toArray(new File[0]);", "-", "-      _notifier.compileStarted();", "-", "-      try {", "-        // Compile the files", "-        _compileFiles(sourceRoots, files, buildDir);", "-      }", "-      catch (Throwable t) {", "-        CompilerError err = new CompilerError(t.toString(), false);", "-        CompilerError[] errors = new CompilerError[] { err };", "-        _distributeErrors(errors);", "-      }", "-      finally {", "-        // Fire a compileEnded event", "-        _notifier.compileEnded();", "-      }", "-    }", "-  }  "]}], "num": 11348}
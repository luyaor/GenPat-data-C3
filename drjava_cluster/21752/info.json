{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7678cd60a936af5cbcf93e0ea93766ae", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63eacc3cbfc7c3f8a2d7bfb24b2165d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7bb9a22e4cbbae8f1b760058a6f336d0a39bb871", "commitAfterChange": "14e7dcc7e0d6b6b7a5f38bdc40af083f2a31ac1c", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-", "-    LinkedList args = new LinkedList();", "-    StringReference sr = _vm.mirrorOf(interpreterName);", "-    sr.disableCollection();", "-    args.add(sr); // make the String a JDI Value", "-    if( printMessages ) {", "-      System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-      System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+    int tries = 0;", "+    StringReference sr = null;", "+    while (tries < OBJECT_COLLECTED_TRIES) {", "+      try{       ", "+        LinkedList args = new LinkedList();", "+        sr = _vm.mirrorOf(interpreterName);", "+        sr.disableCollection();", "+        args.add(sr); // make the String a JDI Value", "+        if( printMessages ) {", "+          System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+          System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+        }", "+        ", "+        ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args,", "+                                                                                        ObjectReference.INVOKE_SINGLE_THREADED);", "+        ", "+        ", "+        if( printMessages ) System.out.println(\"Returning...\");", "+        return tmpInterpreter;", "+      }", "+      catch (ObjectCollectedException e) {", "+        tries++;", "+      }", "+      finally {", "+        sr.enableCollection();", "+      }", "-", "-    try {", "-      ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args,", "-                                                                                      ObjectReference.INVOKE_SINGLE_THREADED);", "-", "-", "-      if( printMessages ) System.out.println(\"Returning...\");", "-      return tmpInterpreter;", "-    }", "-    catch (ObjectCollectedException e) {", "-      throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");", "-    }", "-    finally {", "-      sr.enableCollection();", "-    }", "+    throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89cdfa513fbfd231b3ac70bf170a8fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7bb9a22e4cbbae8f1b760058a6f336d0a39bb871", "commitAfterChange": "14e7dcc7e0d6b6b7a5f38bdc40af083f2a31ac1c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "signatureAfterChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "diff": ["-    List args = new LinkedList();", "-    StringReference sr = _vm.mirrorOf(name);", "-    sr.disableCollection();", "-    args.add(sr);", "-    args.add(val);", "-    if (type == null) {", "-      args.add(null);", "+    int tries = 0;", "+    StringReference sr = null;", "+    while (tries < OBJECT_COLLECTED_TRIES) {", "+      try {", "+        List args = new LinkedList();", "+        sr = _vm.mirrorOf(name);", "+        sr.disableCollection();", "+        args.add(sr);", "+        args.add(val);", "+        if (type == null) {", "+          args.add(null);", "+        }", "+        else if (type instanceof ReferenceType) {", "+          args.add(((ReferenceType)type).classObject());", "+        }", "+        ", "+        /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "+        debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args,", "+                                      ObjectReference.INVOKE_SINGLE_THREADED);", "+        return;", "+      }", "+      catch (ObjectCollectedException oce) {", "+        tries++;", "+      }", "+      finally {", "+        sr.enableCollection();", "+      }", "-    else if (type instanceof ReferenceType) {", "-      args.add(((ReferenceType)type).classObject());", "-    }", "-", "-    /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "-    try {", "-      debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args,", "-                                    ObjectReference.INVOKE_SINGLE_THREADED);", "-      return;", "-    }", "-    catch (ObjectCollectedException oce) {", "-      throw new DebugException(\"The variable: \" + name +", "-                               \" could not be defined in the debug interpreter\");", "-    }", "-    finally {", "-      sr.enableCollection();", "-    }", "+    throw new DebugException(\"The variable: \" + name +", "+                             \" could not be defined in the debug interpreter\");"]}], "num": 21752}
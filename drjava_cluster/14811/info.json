{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c83365727c6c08fa41c039aa24ff45b9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027899b9da3b4b36d220635377317108", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void _rawCompile(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "      private void _rawCompile(File[] sourceRoots, File[] files) throws IOException", "diff": ["-  ", "-  private void _rawCompile(File[] sourceRoots, File[] files, File buildDir) throws IOException {", "-    ", "-//    System.err.println(\"sourceRoots are: \" + Arrays.toString(sourceRoots));", "-//    System.err.println(\"sourceFiles are: \" + Arrays.toString(files));", "-//    System.err.println(\"BuildDir is: \" + buildDir);", "-    ", "-    _notifier.compileStarted();", "-    try {", "-      // Compile the files", "-      _compileFiles(sourceRoots, files, buildDir);", "-    }", "-    catch (Throwable t) {", "-      CompilerError err = new CompilerError(t.toString(), false);", "-      CompilerError[] errors = new CompilerError[] { err };", "-      _distributeErrors(errors);", "-    }", "-    finally { _notifier.compileEnded(); }", "+  ", "+  private void _rawCompile(File[] sourceRoots, File[] files) throws IOException {", "+    ", "+    File buildDir = _model.getBuildDirectory();", "+    File workDir = _model.getWorkingDirectory();", "+     ", "+//    System.err.println(\"sourceRoots are: \" + Arrays.toString(sourceRoots));", "+//    System.err.println(\"sourceFiles are: \" + Arrays.toString(files));", "+//    System.err.println(\"BuildDir is: \" + buildDir);", "+    ", "+    _notifier.compileStarted();", "+    try {", "+      // Compile the files", "+      _compileFiles(sourceRoots, files, buildDir);", "+    }", "+    catch (Throwable t) {", "+      CompilerError err = new CompilerError(t.toString(), false);", "+      CompilerError[] errors = new CompilerError[] { err };", "+      _distributeErrors(errors);", "+    }", "+    finally { _notifier.compileEnded(workDir); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e565647a23202dc94e279c79310e2798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void _rawCompile(File[] sourceRoots, File[] files, File[] excludedFiles) throws IOException", "signatureAfterChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "diff": ["+  /** Compile the given documents. */", "+  private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException {", "+    for (OpenDefinitionsDocument doc : docs) {", "+        File f = doc.getFile();", "+        // Check for null in case the file is untitled (not sure this is the correct check)", "+        if (f != null) { filesToCompile.add(f); }", "-  ", "-  private void _rawCompile(File[] sourceRoots, File[] files, File[] excludedFiles) throws IOException {", "-    ", "-//    Utilities.show(\"_rawCompile(\" + Arrays.toString(sourceRoots) + \", \" + ", "-//                   Arrays.toString(files) + \", \" + Arrays.toString(excludedFiles) + \")\");", "-//    System.err.println(\"sourceRoots are: \" + Arrays.toString(sourceRoots));", "-//    System.err.println(\"sourceFiles are: \" + Arrays.toString(files));", "-//    System.err.println(\"BuildDir is: \" + buildDir);", "-    ", "-    try {", "-      // Compile the files", "-      _compileFiles(sourceRoots, files, buildDir);", "-    }", "+    try { _compileFiles(filesToCompile, buildDir); }", "-      CompilerError[] errors = new CompilerError[] { err };", "-      _distributeErrors(errors);", "+      _distributeErrors(Arrays.asList(err));"]}], "num": 14811}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2dec7a5dbebce5d1fbeb25ec7d0bf8e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0f4bf18086062523293dcad193ce49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["-   */", "+  /** Create array of positions where each error occurred. Positions are related their corresponding documents. */", "-        Document document;", "-        try {", "-          document = _model.getDocumentForFile(file);", "-        }", "+        OpenDefinitionsDocument document;", "+        try { document = _model.getDocumentForFile(file); }", "-            do {", "-              curError++;", "-            } while ((curError < _numErrors) && (_errors[curError].file().equals(file)));", "+            do { curError++; } ", "+            while ((curError < _numErrors) && (_errors[curError].file().equals(file)));", "-          else {", "-            throw new UnexpectedException(e);", "-          }", "+          else throw new UnexpectedException(e);", "-        if (curError >= _numErrors) {", "-          break;", "-        }", "+        if (curError >= _numErrors) break;", "-          while ((curError < _numErrors) &&", "-                 file.equals(_errors[curError].file()) &&  // we are still in this file", "-                 (_errors[curError].lineNumber() == curLine))", "-          {", "-            _positions[curError] =", "-              document.createPosition(offset +  _errors[curError].startColumn());", "+          while ((curError < _numErrors) && file.equals(_errors[curError].file()) &&  // we are still in this file", "+                 (_errors[curError].lineNumber() == curLine)) {", "+            _positions[curError] = document.createPosition(offset + _errors[curError].startColumn());", "-              if (nextNewline == -1) {", "-                nextNewline = defsText.indexOf(\"\\n\", offset);", "-              }", "+              if (nextNewline == -1) nextNewline = defsText.indexOf(\"\\n\", offset);", "-          try {", "-            file = file.getCanonicalFile();", "-          }", "+          try { file = file.getCanonicalFile(); }", "-    catch (BadLocationException ble) {", "-       throw new UnexpectedException(ble);", "-    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869963c0d437dd4fbbad23d8a1397e7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "44ddda83470592c7bd9b1642405bd9ef5785367f", "commitAfterChange": "f3cec878a36c37903881e7e5ebc712640ce9c55f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["-", "-          // create new positions for all errors on this line", "-          while ((curError < _numErrors) && file.equals(_errors[curError].file()) &&  // we are still in this file", "-                 (_errors[curError].lineNumber() == curLine)) {", "-            _positions[curError] = document.createPosition(offset + _errors[curError].startColumn());", "-            curError++;", "+          // create new positions for all errors on this line          ", "+          boolean didNotAdvance = false;", "+          if (_errors[curError].lineNumber() != curLine) {", "+            // if this happens, then we will not advance to the next error in the loop below.", "+            // that means we have to advance curError when we reach the end of the document", "+            // or we get stuck in an infinite loop (bug 1679178)", "+            // this seems to be a problem with incompatible line endings (Windows vs. Unix)", "+            didNotAdvance = true;", "+          }", "+          else {", "+            while ((curError < _numErrors) &&", "+                   file.equals(_errors[curError].file()) &&  // we are still in this file", "+                   (_errors[curError].lineNumber() == curLine)) {", "+              _positions[curError] = document.createPosition(offset + _errors[curError].startColumn());", "+              curError++;", "+            }", "+              else {", "+                // we're at the end of the document", "+                if (didNotAdvance) {", "+                  // we did not advance to the next error above, so unless we want to", "+                  // get stuck in an infinite loop (bug 1679178), we have to advance now.", "+                  // otherwise we would never leave the while loop and keep processing", "+                  // the same error.", "+                  // this situation probably means that the line number information of the", "+                  // compiler is different from our line number information;", "+                  // probably a Windows vs. Unix line ending problem", "+                  _positions[curError] = null;", "+                  curError++;", "+                }", "+              }"]}], "num": 1461}
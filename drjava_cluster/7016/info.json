{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0755829ab8323d34eaae22165bf77117", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dbcaabc16b9f349f2c5a2258a07594c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/GenericReferenceTypeName.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public GenericReferenceTypeName(String rep, List<List<? extends TypeName>> typeArgs)", "signatureAfterChange": "   public GenericReferenceTypeName(List<IdentifierToken> ids, List<List<? extends TypeName>> typeArgs, String fn,  int bl, int bc, int el, int ec)", "diff": ["-   */", "-  public GenericReferenceTypeName(String rep, List<List<? extends TypeName>> typeArgs) {", "-    this(rep, null, 0, 0, 0, 0, typeArgs);", "-  }", "+  public GenericReferenceTypeName(List<IdentifierToken> ids, List<List<? extends TypeName>> typeArgs, String fn,  int bl, int bc, int el, int ec) {", "+    if (ids.size() != typeArgs.size()) { throw new IllegalArgumentException(\"ids.size() != typeArgs.size()\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "323bf8a0f150c16b7f2c9bd6f21defb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "c93340cd9d91732c1540d4999abcf9b7d3d37f3e", "commitAfterChange": "69b7f744a06a218546e1e05a5acb1e8cacf5750d", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,                                                     boolean hasFocus, int row, int column)", "signatureAfterChange": "       public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,                                                       boolean hasFocus, int row, int column)", "diff": ["+    TableCellRenderer threadTableRenderer = new DefaultTableCellRenderer() {", "+      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, ", "+                                                     boolean hasFocus, int row, int column) {", "+        Component renderer = ", "+          super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);", "+        ", "+        _setThreadCellFont(renderer, row);", "+        ", "+        return renderer;", "+      }", "-  private class DebugTableCellRenderer extends DefaultTableCellRenderer {", "-    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, ", "-                                                   boolean hasFocus, int row, int column) {", "-      Component renderer = ", "-        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);", "-      ", "-      _setCellFont(renderer, row);", "-      ", "-      return renderer;"]}], "num": 7016}
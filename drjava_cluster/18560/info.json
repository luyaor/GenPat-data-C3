{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5ca85a897cb1ca7ad2777346bba8e5b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536a36aa296fd89327f19287c8e28a6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "commitAfterChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public String getVariableType(String var)", "signatureAfterChange": "   public Object[] getVariableValue(String var)", "diff": ["+  public Object[] getVariableValue(String var) {", "+    Pair<Object,String>[] arr = getVariable(var);", "+    if (arr.length==0) return new Object[0];", "+    else return new Object[] { arr[0].first() };", "+  }", "-    */", "-  public String getVariableType(String var) {", "-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return \"\"; }", "-    DJClass djThis = env.first().getThis();", "-    if (djThis == null) { return \"<unknown>\"; }", "-    Class<?> thisC = djThis.load();", "-    Object thisO = env.second().getThis(djThis);", "-    Pair<Boolean,Class<?>> validAndType = getValidFieldType(var, thisC, thisO);", "-    if (!validAndType.first()) {", "-      // not a field, may be a local variable", "-      // TODO: implement this", "-      return \"\";", "-    }", "-    Class<?> c = validAndType.second();", "-    ", "-    // print the right number of [] for each level of arrays", "-    // we can't distinguish primitive types from their boxed types right now", "-    if (c.equals(Byte.class))      { return \"byte\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); } ", "-    if (c.equals(Short.class))     { return \"short\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Integer.class))   { return \"int\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Long.class))      { return \"long\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Float.class))     { return \"float\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Double.class))    { return \"double\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Boolean.class))   { return \"boolean\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Character.class)) { return \"char\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    else return c.getName()+sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c756949c68dda2488d09db880030403d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "commitAfterChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public String getVariableType(String var, int... indices)", "signatureAfterChange": "   public String getVariableType(String var)", "diff": ["-  public String getVariableType(String var, int... indices) {", "-//    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-//    if (env == null) { return null; }", "-//    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "-//    if (lv == null) { return null; }", "-//    else {", "-//      Type t = lv.type();", "-//      for(int i = 0; i < indices.length; ++i) {", "-//        if (!_interpreterOptions.typeSystem().isArray(t)) { return \"<error: value is not an array>\"; }", "-//        t = _interpreterOptions.typeSystem().arrayElementType(t);", "-//      }", "-//      return _interpreterOptions.typeSystem().typePrinter().print(t);", "-//    }", "-    Object[] val = getVariable(var);", "-    if (val.length == 0) { return null; }", "-    else {", "-      Object o = val[0];", "-      Class<?> c = o.getClass();", "-      for(int i = 0; i < indices.length; ++i) {", "-        if (!c.isArray()) { return \"<error: value is not an array>\"; }", "-        c = c.getComponentType();;", "-      }", "-      return c.getName();", "+  public String getVariableType(String var) {", "+    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "+    if (env == null) { return \"\"; }", "+    DJClass djThis = env.first().getThis();", "+    if (djThis == null) { return \"<unknown>\"; }", "+    Class<?> thisC = djThis.load();", "+    Object thisO = env.second().getThis(djThis);", "+    Pair<Boolean,Class<?>> validAndType = getValidFieldType(var, thisC, thisO);", "+", "+    if (!validAndType.first()) {", "+      // not a field, may be a local variable", "+      // TODO: implement this", "+      return \"\";", "+    Class<?> c = validAndType.second();", "+    ", "+    // print the right number of [] for each level of arrays", "+    StringBuilder sb = new StringBuilder();", "+    while(c.isArray()) {", "+      sb.append(\"[]\");", "+      c = c.getComponentType();", "+    }", "+    ", "+    // we can't distinguish primitive types from their boxed types right now", "+    if (c.equals(Byte.class))      { return \"byte\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); } ", "+    if (c.equals(Short.class))     { return \"short\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Integer.class))   { return \"int\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Long.class))      { return \"long\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Float.class))     { return \"float\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Double.class))    { return \"double\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Boolean.class))   { return \"boolean\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    if (c.equals(Character.class)) { return \"char\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "+    else return c.getName()+sb.toString();"]}], "num": 18560}
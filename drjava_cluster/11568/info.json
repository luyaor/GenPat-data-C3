{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5fe9e5e4daad5119a3cd8f2e1f2b963", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd38953c5392955880b167711e4e087", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   protected void _updateInterpreterClassPath(JavaInterpreter interpreter)", "signatureAfterChange": "   protected void _updateInterpreterClassPath(JavaInterpreter interpreter)", "diff": ["-    for (ClassPathEntry e: _classPathManager.getProjectCP())", "-      interpreter.addProjectClassPath(e.getEntry());", "+    for (File f : _classPathManager.getProjectCP())", "+      interpreter.addProjectClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getBuildDirectoryCP())", "-      interpreter.addBuildDirectoryClassPath(e.getEntry());", "+    for (File f : _classPathManager.getBuildDirectoryCP())", "+      interpreter.addBuildDirectoryClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getProjectFilesCP())", "-      interpreter.addProjectFilesClassPath(e.getEntry());", "+    for (File f : _classPathManager.getProjectFilesCP())", "+      interpreter.addProjectFilesClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getExternalFilesCP())", "-      interpreter.addExternalFilesClassPath(e.getEntry());", "+    for (File f : _classPathManager.getExternalFilesCP())", "+      interpreter.addExternalFilesClassPath(f);", "-    for (ClassPathEntry e: _classPathManager.getExtraCP())", "-      interpreter.addExtraClassPath(e.getEntry());", "+    for (File f : _classPathManager.getExtraCP())", "+      interpreter.addExtraClassPath(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adee966a4f42b7fdaf2be8e9bcd5d2c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 113, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["+    final File workDir = ir.getWorkingDirectory();", "-    final File[] projectClasspaths = ir.getClasspaths();", "+    final File[] projectClassPaths = ir.getClassPaths();", "-          public boolean accept(OpenDefinitionsDocument n) {", "-            return n.isInProjectPath();", "-          }", "+          public boolean accept(OpenDefinitionsDocument n) { return n.isInProjectPath(); }", "-    ClasspathVector extraClasspaths = new ClasspathVector();", "-    for (File f : projectClasspaths) { extraClasspaths.add(f); }", "+    ClassPathVector extraClassPaths = new ClassPathVector();", "+    for (File f : projectClassPaths) { extraClassPaths.add(f); }", "-    setFileGroupingState(makeProjectFileGroupingState(mainClass, buildDir, projectFile, srcFiles, extraClasspaths));", "+    setFileGroupingState(makeProjectFileGroupingState(mainClass, buildDir, workDir, projectFile, srcFiles, extraClassPaths));", "+    ", "+    resetInteractions(getWorkingDirectory());  // Shut down debugger and reset interactions pane in new working directory", "-// The following line is commented out because it is done in MainFrame.openProject before this method is called.", "-//    resetInteractions(); // Since the classpath is most likely changed.  Clears out test pane as well.", "-    "]}], "num": 11568}
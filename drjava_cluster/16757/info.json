{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "573a933c9f0c63512f99ecc5df8353d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4579778050c78225476643bb79429518", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/text/SwingDocumentTest.java", "commitBeforeChange": "2c34025e391dacdd1583e970162f80f851d08a1d", "commitAfterChange": "cfcaff0f9d58c64a1efe5903c22285891a763f19", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testEditCondition() throws EditDocumentException, BadLocationException", "signatureAfterChange": "   public void testEditCondition() throws EditDocumentException, BadLocationException", "diff": ["-   */", "+  /** Tests that a SwingDocument can receive an object that determines whether certain edits are legal. */", "-      public boolean canInsertText(int offs) {", "-        return (offs > 5);", "-      }", "-      public boolean canRemoveText(int offs) {", "-        return (offs == 1);", "-      }", "+      public boolean canInsertText(int offs) { return (offs > 5); }", "+      public boolean canRemoveText(int offs) { return (offs == 1); }", "-    assertEquals(\"first doc contents\", \"initial\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"first doc contents\", \"initial\", _doc.getDocText(0, _doc.getLength()));", "-    assertEquals(\"insertText should be rejected\", \"initial\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"insertText should be rejected\", \"initial\", _doc.getText());", "-    assertEquals(\"insertString should be rejected\", \"initial\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"insertString should be rejected\", \"initial\", _doc.getText());", "-    assertEquals(\"insertText should be accepted\", \"initia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"insertText should be accepted\", \"initia2l\", _doc.getText());", "-    assertEquals(\"forceInsertText should be accepted\", \"in3itia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"forceInsertText should be accepted\", \"in3itia2l\", _doc.getText());", "-    assertEquals(\"removeText should be rejected\", \"in3itia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"removeText should be rejected\", \"in3itia2l\", _doc.getText());", "-    assertEquals(\"remove should be rejected\", \"in3itia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"remove should be rejected\", \"in3itia2l\", _doc.getText());", "-    assertEquals(\"removeText should be accepted\", \"iitia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"removeText should be accepted\", \"iitia2l\", _doc.getText());", "-    assertEquals(\"forceRemove should be accepted\", \"iitia2\",", "-                 _doc.getDocText(0, _doc.getLength()));", "-    ", "+    assertEquals(\"forceRemove should be accepted\", \"iitia2\", _doc.getText());", "+    _doc.append(\"THE END\", (String) null);", "+    assertEquals(\"forceRemove should be accepted\", \"iitia2THE END\", _doc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec8756c0794e460dbf59ec042f04f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testMemoryLeak() throws InterruptedException", "signatureAfterChange": "   public void testMemoryLeak() throws InterruptedException", "diff": ["-    // The model already has one empty document in the cache when the model is created", "-    // Attach a finalization listener to the DefinitionsDocument embedded in each of the", "-    // following OpenDefinitionsDocs.", "+    ", "+    // Adding the listeners will load the document into the cache", "-    doc1.addFinalizationListener(fl); ", "-    doc2.addFinalizationListener(fl);", "-    doc3.addFinalizationListener(fl);", "-    doc4.addFinalizationListener(fl);", "-    doc5.addFinalizationListener(fl);", "+        ", "+    doc1.addFinalizationListener(fl);", "+    doc2.addFinalizationListener(fl);", "+    doc3.addFinalizationListener(fl);", "+    doc4.addFinalizationListener(fl);", "+    doc5.addFinalizationListener(fl); // kick 1 out", "-    // At this point, 6 documents exist but only 4 can be in the cache; hence 2 embedded", "-    // DefinitionsDocuments have been freed", "-    // System.out.println(doc1 + \" \" + doc2 + \" \" + doc3 + \" \" + doc4 + \" \" + doc5);", "+    assertEquals(\"There should be 4 in the LRU\", 4, _cache.getNumInCache());", "+    System.gc();", "+    Thread.sleep(100);", "+    ", "+    ", "+    assertFalse(\"doc1 should be the one that's not ready\", _adapterTable.get(doc1).isReady());", "+    assertEquals(\"One doc should have been collected\", 1, _memLeakCounter);", "+    ", "+    doc1.getLength(); // kick 2", "+    ", "+    // make sure doc1 has it's finalization listener still", "+    List<FinalizationListener<DefinitionsDocument>> list = doc1.getFinalizationListeners();", "+    assertEquals(\"There should only be one finalization listener\", 1, list.size());", "+    assertEquals(\"The finalization listener should be fl\", fl, list.get(0));", "+    ", "+    doc2.getLength(); // kick 3", "+    doc3.getLength(); // kick 4", "+    doc4.getLength(); // kick 5", "+    doc5.getLength(); // kick 1", "-    assertEquals(\"Two docs should have been collected\", 2, _memLeakCounter);", "-    ", "-    // System.out.println(doc1 + \" \" + doc2 + \" \" + doc3 + \" \" + doc4 + \" \" + doc5);", "-    ", "-    doc1.getLength();", "-    doc2.getLength();", "-    doc3.getLength();", "-    doc4.getLength();", "-    ", "-    doc5.getLength();", "-    ", "-    System.gc();", "-    Thread.sleep(100);", "-    assertEquals(\"several docs should have been collected\", 4, _memLeakCounter);", "+    assertEquals(\"several docs should have been collected\", 6, _memLeakCounter);"]}], "num": 16757}
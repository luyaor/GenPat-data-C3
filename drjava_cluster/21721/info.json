{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75810d2e5fb45c94e83983560d3eaaa5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9924197771f763875bcffbb6209223", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "50d7405dbdeb05d9fc0520b24d57e1f92428ff65", "commitAfterChange": "7ff90c83877cc5b21bb771b7b8f391533604640f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "signatureAfterChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "diff": ["-    Iterable<File> searchPath = IterUtil.compose(LanguageLevelConverter.OPT.bootClassPath(),", "-                                                 LanguageLevelConverter.OPT.classPath());", "-    if (directoryName != null) { searchPath = IterUtil.compose(searchPath, new File(directoryName)); }", "-    ", "-      /** We'll use this class loader to look up resources (*not* to load classes) */", "-      PathClassLoader loader = new PathClassLoader(EmptyClassLoader.INSTANCE, searchPath);", "-      InputStream stream = loader.getResourceAsStream(qualifiedClassName.replace('.', '/') + \".class\");", "+      String fileName = qualifiedClassName.replace('.', '/') + \".class\";", "+      InputStream stream = RESOURCES.value().getResourceAsStream(fileName);", "+      if (stream == null && directoryName != null) {", "+        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(directoryName));", "+      }", "-    //This is done so that the SymbolData in the Symboltable is updated and returned.", "+    // This is done so that the SymbolData in the Symboltable is updated and returned.", "-    //make it be a non-continuation, since we are filing it in", "+    // make it be a non-continuation, since we are filling it in"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e60c5e525fd3fa58b547cc2f28e961b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 133, "signatureBeforeChange": "   private File[] _loadProject(ProjectFileIR ir, File projectFile) throws IOException", "signatureAfterChange": "   private File[] _loadProject(ProjectFileIR ir) throws IOException", "diff": ["-  private File[] _loadProject(ProjectFileIR ir, File projectFile) throws IOException {", "+  private File[] _loadProject(ProjectFileIR ir) throws IOException {", "+    final File projectFile = ir.getProjectFile();", "+    final File projectRoot = ir.getProjectRoot();", "-    final List<OpenDefinitionsDocument> oldProjDocs = getProjectDocuments();", "-    final FileGroupingState oldState = _state;", "+    // Get the list of documents that are still open", "+//    final List<OpenDefinitionsDocument> oldDocs = getOpenDefintionsDocuments();", "+//    final FileGroupingState oldState = _state;", "+    ", "-          public boolean accept(OpenDefinitionsDocument n) { return n.isInProjectPath(); }", "+          public boolean accept(OpenDefinitionsDocument d) { return d.isInProjectPath(); }", "-          public boolean accept(OpenDefinitionsDocument n) {", "-            return n.isAuxiliaryFile();", "-          }", "+          public boolean accept(OpenDefinitionsDocument d) { return d.isAuxiliaryFile(); }", "-    setFileGroupingState(makeProjectFileGroupingState(mainClass, buildDir, workDir, projectFile, srcFiles, extraClassPaths, createJarFile, createJarFlags));", "+//    Utilities.show(\"Project Root loaded into grouping state is \" + projRoot);", "-    resetInteractions(getWorkingDirectory());  // Shut down debugger and reset interactions pane in new working directory", "+    setFileGroupingState(makeProjectFileGroupingState(projectRoot, mainClass, buildDir, workDir, projectFile, srcFiles,", "+                                                      extraClassPaths, createJarFile, createJarFlags));", "+    ", "+    resetInteractions(getWorkingDirectory());  // Shutdown debugger and reset interactions pane in new working directory", "-    // Keep all nonproject files open other than a new file (untitled).  External files in the previous ", "-    // project may become project files in the new project and must be closed while external files in the ", "-    // previous project that are still external to the new project should be kept open (except for a new file).", "+    // This code may be unnecessary; no files from the previous project (if any) can be open since it was already closed.  ", "+    // But all other files open at time this project is loaded are eligible for inclusion in the new project.  This", "-    Utilities.invokeAndWait(new SRunnable() {", "+    if (! projDocs.isEmpty()) ", "+      Utilities.invokeAndWait(new SRunnable() {", "-          if (oldState.inProject(d.file())) closeFile(d);", "-          else {", "-            try {", "-              final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "-              _documentNavigator.refreshDocument(d, path);  // this operation must run in event thread", "-            }", "-            catch(IOException e) { ", "-              /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "-            }", "+          try {", "+            final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+            _documentNavigator.refreshDocument(d, path);  // this operation must run in event thread", "+          catch(IOException e) { /* Do nothing */ }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2886e95fff904fcbd3805e6e257274", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _compileFiles(List<? extends File> files, File buildDir) throws IOException", "signatureAfterChange": "   private void _compileFiles(List<? extends File> files, File buildDir) throws IOException", "diff": ["-      if (System.getProperty(\"drjava.bootclasspath\") != null) {", "-        bootClassPath = new LinkedList<File>();", "-        StringTokenizer st = new StringTokenizer(System.getProperty(\"drjava.bootclasspath\"), File.pathSeparator);", "-        while (st.hasMoreTokens()) {", "-          bootClassPath.add(new File(st.nextToken()));", "-        }", "-      }", "+      String bootProp = System.getProperty(\"drjava.bootclasspath\");", "+      if (bootProp != null) { bootClassPath = IterUtil.asList(IOUtil.parsePath(bootProp)); }", "-        CompilerInterface compiler = CompilerRegistry.ONLY.getActiveCompiler();", "+        CompilerInterface compiler = getActiveCompiler();"]}], "num": 21721}
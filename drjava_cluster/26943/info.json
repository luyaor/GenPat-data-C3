{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00cde7d7d3e9f3d920530a8c580d9910", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c35bdbe229c1e939f9f591863770332", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 47, "signatureBeforeChange": "      synchronized void collapsePaths(HashSet<String> paths)", "signatureAfterChange": "      void collapsePaths(HashSet<String> paths)", "diff": ["-  synchronized void collapsePaths(HashSet<String> paths) {", "-    DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)_model.getRoot();", "-    Enumeration<TreeNode> nodes = rootNode.depthFirstEnumeration(); /** This warning is expected **/", "-    ArrayList<String> list = new ArrayList<String>();", "-    while (nodes.hasMoreElements()) {", "-      DefaultMutableTreeNode tn = (DefaultMutableTreeNode)nodes.nextElement();", "-      if (tn instanceof InnerNode) {", "-        TreePath tp = new TreePath(tn.getPath());", "-        String s = generatePathString(tp);", "-        boolean shouldCollapse = paths.contains(s);", "-        if (shouldCollapse) { ", "-          collapsePath(tp);", "+  void collapsePaths(HashSet<String> paths) {", "+    synchronized (_model) {", "+      DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)_model.getRoot();", "+      Enumeration<TreeNode> nodes = rootNode.depthFirstEnumeration(); /** This warning is expected **/", "+      ArrayList<String> list = new ArrayList<String>();", "+      while (nodes.hasMoreElements()) {", "+        DefaultMutableTreeNode tn = (DefaultMutableTreeNode)nodes.nextElement();", "+        if (tn instanceof InnerNode) {", "+          TreePath tp = new TreePath(tn.getPath());", "+          String s = generatePathString(tp);", "+          boolean shouldCollapse = paths.contains(s);", "+          if (shouldCollapse) { ", "+            collapsePath(tp);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f76eccadfad3405959b7a4527760f27c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public String[] getCollapsedPaths()", "signatureAfterChange": "   public String[] getCollapsedPaths()", "diff": ["-    DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)_model.getRoot();", "-    Enumeration<TreeNode> nodes = rootNode.depthFirstEnumeration(); /** This warning is expected **/", "-    while (nodes.hasMoreElements()) {", "-      DefaultMutableTreeNode tn = (DefaultMutableTreeNode)nodes.nextElement();", "-      if (tn instanceof InnerNode && ((InnerNode)tn).isCollapsed()) {", "-        TreePath tp = new TreePath(tn.getPath());", "-        list.add(generatePathString(tp));", "+    synchronized (_model) {", "+      DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)_model.getRoot();", "+      Enumeration<TreeNode> nodes = rootNode.depthFirstEnumeration(); /** This warning is expected **/", "+      while (nodes.hasMoreElements()) {", "+        DefaultMutableTreeNode tn = (DefaultMutableTreeNode)nodes.nextElement();", "+        if (tn instanceof InnerNode && ((InnerNode)tn).isCollapsed()) {", "+          TreePath tp = new TreePath(tn.getPath());", "+          list.add(generatePathString(tp));", "+        }"]}], "num": 26943}
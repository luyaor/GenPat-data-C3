{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fd7cd718b0c5516c6302f6cf9ff98ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d5092e1c34c0f8b8899b34a27d02d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ed1069955672117b4c9aac0875c5704fb5071788", "commitAfterChange": "bd123d07912360358a1a9262bb626bfc554bdb6a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    Map<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>> results =", "-      new TreeMap<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>>();", "+    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "-        putLib(results,", "-               fromConfig.version().vendor(),", "-               fvOnly(fromConfig.version()),", "-               fromConfig);", "+        results.put(coarsenVersion(fromConfig.version()), fromConfig);", "-      if ((getLib(results, runtimeVersion.vendor(), fvOnly(runtimeVersion))==null)) {", "+      if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "-        putLib(results,", "-               runtimeVersion.vendor(),", "-               fvOnly(runtimeVersion),", "-               fromRuntime);", "+        results.put(coarsenVersion(runtimeVersion), fromRuntime);", "-      if (getLib(results, tVersion.vendor(), fvOnly(tVersion))==null) {", "+      if (!results.containsKey(coarsenVersion(tVersion))) {", "-        putLib(results,", "-               tVersion.vendor(),", "-               fvOnly(tVersion),", "-               t);", "+        results.put(coarsenVersion(tVersion), t);", "-    Iterable<JDKToolsLibrary> acc = IterUtil.empty();", "-    for(Map<JavaVersion.FullVersion, JDKToolsLibrary> vmap: results.values()) {", "-      acc = IterUtil.compose(acc, vmap.values());", "-    }", "-    return IterUtil.reverse(acc);", "+    return IterUtil.reverse(results.values());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3dcca9ca9e92d00db6f93ad9caf5e62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-    for (int i = 0; i < rts.length; i++) {", "-      tempSd = getSymbolData(rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+    for (ReferenceType rt: rts) {", "+      tempSd = getSymbolData(rt.getName(), rt.getSourceInfo(), false, false, false);", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "-        // check to see if this is an inner class referencing an inner interface", "-        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\"$\"));", "-        tempSd = getSymbolData(qualifyingPart + \"$\" + rts[i].getName(), rts[i].getSourceInfo(), false, false, false);", "+      else if (qualifiedClassName.indexOf(\".\") != -1) { // class is inner", "+        // Check to see if this is an inner class referencing an inner interface", "+        String qualifyingPart = qualifiedClassName.substring(0, qualifiedClassName.lastIndexOf(\".\"));", "+        tempSd = getSymbolData(qualifyingPart + \".\" + rt.getName(), rt.getSourceInfo(), false, false, false);", "-          tempSd = new SymbolData(qualifyingPart + \"$\" + rts[i].getName());", "+          String tempName = qualifyingPart + \".\" + rt.getName();", "+          tempSd = new SymbolData(tempName);", "-          continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));          ", "+//          System.err.println(\"Creating continuation for \" + tempName  + \" at LLV: 1144\");", "+          continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));          ", "-//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-//        // Couldn't resolve the interface.", "-        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "-        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "+        String tempName = rt.getName();", "+        _log.log(\"CREATING continuation \" + tempName + \" with SourceInfo \" + rt.getSourceInfo());", "+//        System.err.println(\"CREATING continuation for \" + tempName + \" at LLV: 1154\");", "+        tempSd = new SymbolData(tempName);", "+        tempSd.setInterface(true);", "+        continuations.put(tempName, new Pair<SourceInfo, LanguageLevelVisitor>(rt.getSourceInfo(), this));    ", "-        superClass = new SymbolData(superClassName);", "-        symbolTable.put(superClassName, sd);", "-        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+        superClass = addSymbolData(si, superClassName);"]}], "num": 234}
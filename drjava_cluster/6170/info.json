{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba9e119b0b068fb17bb9ec7f04f82747", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d96ba2616f5acd47eab522370cfb45f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": "   final public List<Node> fieldDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> fieldDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    typ = type();", "-    id = jj_consume_token(IDENTIFIER);", "-    label_9:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case LBRACKET:", "-        ;", "-        break;", "-      default:", "-        jj_la1[23] = jj_gen;", "-        break label_9;", "-      }", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case ASSIGN:", "-      jj_consume_token(ASSIGN);", "-      exp = variableInitializer();", "-      break;", "-    default:", "-      jj_la1[24] = jj_gen;", "-      ;", "-    }", "-        list.add(createFieldDeclaration(mf, typ, id, exp, dim));", "-    label_10:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case COMMA:", "-        ;", "-        break;", "-      default:", "-        jj_la1[25] = jj_gen;", "-        break label_10;", "-      }", "-      jj_consume_token(COMMA);", "-              dim = 0; exp = null;", "+    try {", "+      mf = modifiers();", "+      typ = type();", "-      label_11:", "+      label_9:", "-          jj_la1[26] = jj_gen;", "-          break label_11;", "+          jj_la1[24] = jj_gen;", "+          break label_9;", "-                   dim++;", "+                  dim++;", "-        jj_la1[27] = jj_gen;", "+        jj_la1[25] = jj_gen;", "+        list.add(createFieldDeclaration(mf, typ, id, exp, dim));", "+      label_10:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case COMMA:", "+          ;", "+          break;", "+        default:", "+          jj_la1[26] = jj_gen;", "+          break label_10;", "+        }", "+        jj_consume_token(COMMA);", "+              dim = 0; exp = null;", "+        id = jj_consume_token(IDENTIFIER);", "+        label_11:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case LBRACKET:", "+            ;", "+            break;", "+          default:", "+            jj_la1[27] = jj_gen;", "+            break label_11;", "+          }", "+          jj_consume_token(LBRACKET);", "+          jj_consume_token(RBRACKET);", "+                   dim++;", "+        }", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSIGN:", "+          jj_consume_token(ASSIGN);", "+          exp = variableInitializer();", "+          break;", "+        default:", "+          jj_la1[28] = jj_gen;", "+          ;", "+        }", "-    }", "-    jj_consume_token(SEMICOLON);", "+      }", "+      jj_consume_token(SEMICOLON);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid Field Declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd97fcaae149c6c643bbd6492e7c84b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "signatureAfterChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[28] = jj_gen;", "-      ;", "-    }", "-    typ = resultType();", "-    id = jj_consume_token(IDENTIFIER);", "-    params = formalParameters();", "-    label_12:", "-    while (true) {", "+    try {", "+      mf = modifiers();", "-      case LBRACKET:", "-        ;", "+      case LESS:", "+        typeParameters = TypeParameters();", "-        break label_12;", "+        ;", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case THROWS:", "-      jj_consume_token(THROWS);", "-      exceptions = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[30] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LBRACE:", "-      body = block();", "-      break;", "-    case SEMICOLON:", "-      body = emptyStatement();", "-      break;", "-    default:", "-      jj_la1[31] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-        if (mf != null) {", "-          bl    = mf.beginLine;", "-          bc    = mf.beginColumn;", "-          flags = mf.accessFlags;", "-        } else {", "-          bl = typ.getBeginLine();", "-          bc = typ.getBeginColumn();", "+      typ = resultType();", "+      id = jj_consume_token(IDENTIFIER);", "+      params = formalParameters();", "+      label_12:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACKET:", "+          ;", "+          break;", "+        default:", "+          jj_la1[30] = jj_gen;", "+          break label_12;", "-        if (dim > 0) {", "-          typ = new ArrayType(typ, dim,", "-                              filename,", "-                              typ.getBeginLine(), typ.getBeginColumn(),", "-                              typ.getEndLine(),   typ.getEndColumn());", "-        }", "-        if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "+        jj_consume_token(LBRACKET);", "+        jj_consume_token(RBRACKET);", "+                    dim++;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case THROWS:", "+        jj_consume_token(THROWS);", "+        exceptions = ReferenceTypeNameList();", "+        break;", "+      default:", "+        jj_la1[31] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LBRACE:", "+        body = block();", "+        break;", "+      case SEMICOLON:", "+        body = emptyStatement();", "+        break;", "+      default:", "+        jj_la1[32] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+          if (mf != null) {", "+            bl    = mf.beginLine;", "+            bc    = mf.beginColumn;", "+            flags = mf.accessFlags;", "+          } else {", "+            bl = typ.getBeginLine();", "+            bc = typ.getBeginColumn();", "+          }", "+          if (dim > 0) {", "+            typ = new ArrayType(typ, dim,", "+                                filename,", "+                                typ.getBeginLine(), typ.getBeginColumn(),", "+                                typ.getEndLine(),   typ.getEndColumn());", "+          }", "+          if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "-        if (typeParameters == null){", "+          if (typeParameters == null){", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid method declaration\");", "+    }"]}], "num": 6170}
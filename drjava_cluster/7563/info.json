{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "687da175e0188c65ce649aa705aa202c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b6e7f212cc01da932f2033ac3b740f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "8456129e482008d30378f168a7fb1c04534c45f5", "commitAfterChange": "e75c5cd21291e963b76e361d5f6daa19b9b1a0ff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-    Object lock = new Object();", "-    // Check to see if it's already in the correct path.", "-    InnerNode parent = _path2node.getValue(path);", "-    String oldPath = _path2node.getKey(null);", "-    if (path.equals(oldPath)) {", "-      node.removeFromParent(); // doesn't cause a repaint.", "-      insertNodeSortedInto(node, parent); // causes a repaint.", "-    }", "-    ", "-    //System.out.println(\"refresh -> remove\");", "-    synchronized(lock) {", "-      removeNode(node);", "-    }", "-    //System.out.println(\"refresh -> add\");", "-    synchronized(lock) {", "+    if (node == null) {", "-    //System.out.println(\"refresh done\");", "+    ", "+    InnerNode oldParent = (InnerNode)node.getParent();", "+    // Check to see if the new parent (could be same) exists already", "+    String newPath = path;", "+    if (newPath.length() > 0) {", "+      if (newPath.substring(0,1).equals(\"/\")) newPath = newPath.substring(1);", "+      if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "+    }", "+    InnerNode newParent = _path2node.getValue(newPath); // node that should be parent", "+    ", "+    if (newParent == oldParent) { ", "+      if (!node.toString().equals(doc.getName())) {", "+        removeNode(node);", "+        LeafNode newLeaf= new LeafNode(doc);", "+        _doc2node.put(doc,newLeaf);", "+        insertNodeSortedInto(newLeaf, newParent);", "+      }", "+      // don't do anything if its name or parents haven't changed", "+    }", "+    else {", "+      Object lock = new Object();", "+      synchronized(lock) {", "+        removeNode(node);", "+      }", "+      synchronized(lock) {", "+        addDocument(doc, path);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5ece0d6f3f1236a17f13df7ee1d139a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void refreshDocument(ItemT doc, String path)", "signatureAfterChange": "   public void refreshDocument(ItemT doc, String path)", "diff": ["-   */", "+    */", "-//    synchronized (_model) {", "-      LeafNode<ItemT> node = getNodeForDoc(doc);", "+//    synchronized(_model) {", "+      LeafNode<ItemT> node = _doc2node.get(doc);", "-      if (node == null) {", "+      if (node == null) { // document has not yet been entered in tree", "-        oldParent = null;", "+//        oldParent = null;", "+        return; // inserted because the sequel simply removes node and adds it back again!", "-      else {", "-        InnerNode<?, ?> p = (InnerNode<?, ?>) node.getParent();", "-        oldParent = p;", "-      }", "+//      else { // commented out after insertion of return above", "+      InnerNode<?, ?> p = (InnerNode<?, ?>) node.getParent();", "+      oldParent = p;", "+//      }", "-        if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "+        if (! newPath.substring(newPath.length() - 1).equals(\"/\")) newPath = newPath + \"/\";", "-      if (newParent == oldParent) { ", "-        if (!node.toString().equals(doc.getName())) {", "-          LeafNode<ItemT> newLeaf= new LeafNode<ItemT>(doc);", "-          _doc2node.put(doc,newLeaf);", "-          insertNodeSortedInto(newLeaf, newParent);", "-          _model.removeNodeFromParent(node);", "+      if (newParent == oldParent) { // no mutation has occurred before this point because oldParent != null", "+        if (! node.toString().equals(doc.getName())) { // document has changed name?", "+          synchronized(_model) {", "+            LeafNode<ItemT> newLeaf= new LeafNode<ItemT>(doc);", "+            _doc2node.put(doc, newLeaf);", "+            insertNodeSortedInto(newLeaf, newParent);", "+            _model.removeNodeFromParent(node);", "+          }", "-      else {", "-        removeNode(node);", "-        addDocument(doc, path);", "+      else { // document has moved within tree", "+        synchronized(_model) {", "+          removeNode(node);", "+          addDocument(doc, path);", "+        }"]}], "num": 7563}
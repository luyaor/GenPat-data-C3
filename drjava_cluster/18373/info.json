{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e34e585549294255a4de22f5bb69648f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b822a6f79bfc5b6931e1fdd57e555cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "diff": ["+//    new ScrollableDialog(null, \"junit(\" + doc + \") called in DefaultJunitModel\", \"\", \"\").show();", "-      _isTestInProgress = false;", "-      _notifier.junitEnded();", "-      throw e;", "+        _notifier.junitEnded();", "+        synchronized (this) { _testInProgress = false; }", "+        throw e;", "-    catch (ExitingNotAllowedException enae) {", "-      _isTestInProgress = false;", "-      _notifier.junitEnded();", "+    catch (ExitingNotAllowedException enae) {  // test attempted to call System.exit", "+      _notifier.junitEnded();  // balances junitStarted()", "+      synchronized (this) { _testInProgress = false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99867c264a47f11fceb21427a5fe0cf4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCompileAnyUnsavedButSaveWhenAsked() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileAnyUnsavedButSaveWhenAsked() throws BadLocationException, IOException, InterruptedException", "diff": ["-        catch (IOException ioe) {", "-          fail(\"Save produced exception: \" + ioe);", "-        }", "+        catch (IOException ioe) { fail(\"Save produced exception: \" + ioe); }", "-        saveBeforeCompileCount++;", "+        synchronized(this) { saveBeforeCompileCount++; }", "-        saveCount++;", "+        synchronized(this) { saveCount++; }", "+    listener.waitCompileDone();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc453184a04c373175874a94c5dedc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void close()", "signatureAfterChange": "     public void close()", "diff": ["-    /** Closes the corresponding document for this adapter. */", "+    /** Closes the corresponding document for this adapter.  Done when a document is closed by the navigator. */", "-      kickOut(false); // should not save the doc info", "-      DocumentCache.this.remove(this);", "+//      Utilities.showDebug(\"close() called on \" + this);", "+      synchronized (DocumentCache.this) { _residentQueue.remove(this); }", "+      synchronized (this) { closingKickOut(); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e01ca18da880bf80d25466ef617846ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testCompileActiveSavedAnyUnsavedButSaveWhenAsked()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileActiveSavedAnyUnsavedButSaveWhenAsked() throws BadLocationException, IOException,      InterruptedException", "diff": ["-  public void testCompileActiveSavedAnyUnsavedButSaveWhenAsked()", "-    throws BadLocationException, IOException, InterruptedException", "-  {", "+  public void testCompileActiveSavedAnyUnsavedButSaveWhenAsked() throws BadLocationException, IOException, ", "+    InterruptedException {", "+    ", "-        try {", "-          doc2.saveFile(new FileSelector(file2));", "-        }", "-        catch (IOException ioe) {", "-          fail(\"Save produced exception: \" + ioe);", "-        }", "+        try { doc2.saveFile(new FileSelector(file2)); }", "+        catch (IOException ioe) { fail(\"Save produced exception: \" + ioe); }", "-        saveBeforeCompileCount++;", "+        synchronized(this) { saveBeforeCompileCount++; }", "-        saveCount++;", "+        synchronized(this) { saveCount++; }", "+    listener.waitCompileDone();"]}], "num": 18373}
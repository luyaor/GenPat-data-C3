{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd6e24550448fd8d42737ecf73461be9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c9e4bcaa59878c4f67726409b4cf5c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "commitAfterChange": "e40155b18bade831c571f9b33dc6334fca6b1698", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void matchUpdate(int offset)", "signatureAfterChange": "   protected void matchUpdate(int offset)", "diff": ["-  public void matchUpdate(int offset) { ", "-    final DefinitionsDocument doc = _doc.getDocument();", "-    doc.acquireReadLock();", "-    try {", "-      synchronized(doc.getReduced()) {", "-        doc._setCurrentLocation(offset); ", "-        _removePreviousHighlight();", "-        ", "-        // Update the highlight if there is any. Not necessarily executed in event thread", "-        int to = getCaretPosition();", "-        ", "-        int from = doc._balanceBackward();", "-//        Utilities.show(\"balanceBackward() returned \" + from);", "-        if (from >= 0) {", "-          // Found a matching open brace to this close brace", "-          from = to - from;", "-          _addHighlight(from, to);", "-          //     Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "-          ", "-          String matchText = _matchText(from);", "-          ", "-          if (matchText != null) _mainFrame.updateStatusField(\"Bracket matches: \" + matchText);", "-          else _mainFrame.updateStatusField();", "-        }", "-        ", "-        // if this wasn't a closed brace, check for an open brace", "-        else {", "-          // (getCaretPosition will be the start of the highlight)", "-          from = to;", "-          to = doc._balanceForward();", "-//          System.err.println(\"balanceForward() returned \" + to + \"; from = \" + from);", "-          if (to >= 0) {", "-            to = to + from;", "-            _addHighlight(from - 1, to);", "-//            System.err.println(\"Added forward highlight\");", "+  protected void matchUpdate(int offset) { ", "+    _doc.setCurrentLocation(offset);  ", "+    _removePreviousHighlight();", "+    ", "+    // Update the highlight if there is any. Not necessarily executed in event thread", "+    int to = getCaretPosition();", "+    int from = _doc._balanceBackward();", "+    if (from > -1) {", "+      // Found a matching open brace to this close brace", "+      from = to - from;", "+      _addHighlight(from, to);", "+      //     Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "+      ", "+      String matchText = _matchText(from);", "+      ", "+      if (matchText != null) _mainFrame.updateStatusField(\"Bracket matches: \" + matchText);", "+      else _mainFrame.updateStatusField();", "+    }", "+    ", "+    // if this wasn't a close brace, check for an open brace", "+    else {", "+      // (getCaretPosition will be the start of the highlight)", "+      from = to;", "+      ", "+      to = _doc._balanceForward();", "+      if (to > -1) {", "+        to = to + from;", "+        _addHighlight(from - 1, to);", "-          }", "-          _mainFrame.updateStatusField();         ", "-        }", "-      } // end synchronized", "-    }  // end try", "-    finally { doc.releaseReadLock(); }", "+      }", "+      _mainFrame.updateStatusField();         ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca7355be62d166535d6cce3ce7c7b097", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": "      public boolean hasOutOfSyncDocuments(List<OpenDefinitionsDocument> lod)", "signatureAfterChange": "      public boolean hasOutOfSyncDocuments(List<OpenDefinitionsDocument> lod)", "diff": ["+  ", "+  public boolean hasOutOfSyncDocuments(List<OpenDefinitionsDocument> lod) { return getOutOfSyncDocuments().size()>0; }", "-  public boolean hasOutOfSyncDocuments(List<OpenDefinitionsDocument> lod) {", "-          (! doc.checkIfClassFileInSync())) return true;", "-    return false;"]}], "num": 21813}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa68965b00aec23445f149b7934bb140", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02adccba9570d475aab687a275e9a30a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testConstructOneDocWithBoth()", "signatureAfterChange": "   public void testConstructOneDocWithBoth()", "diff": ["-      new CompilerError(files[0], \"Test warning with File\", true),", "+      new CompilerError(files[0], \"Test warning with File (no line)\", true),", "-      new CompilerError(\"Test error without File\", false),", "+      new CompilerError(\"Test error without File or line\", false),", "-      new CompilerError(files[0], \"Test error with File\", false),", "+      new CompilerError(files[0], \"Test error with File (no line)\", false),", "+    assertEquals(\"Should have 2 warnings\" , 2, model.getNumWarnings());", "+    assertEquals(\"Should have 5 compiler errors\" , 5, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05b58a6b81c353a414c743c0375c9bd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testConstructDoclessErrors()", "signatureAfterChange": "   public void testConstructDoclessErrors()", "diff": ["-    { new CompilerError(\"Test error without File\", false),", "+    { new CompilerError(\"Test error without File\",false),", "-      new CompilerError(\"Test error without File\", false) };", "+      new CompilerError(\"Test error without File\",false) };", "+    assertEquals(\"Should have 1 warning\" , 1, model.getNumWarnings());", "+    assertEquals(\"Should have 2 compiler errors\" , 2, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ff97eefc58ea3d04a3d6c6751a13611", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testConstructNoErrors()", "signatureAfterChange": "   public void testConstructNoErrors()", "diff": ["+    assertEquals(\"Should have 0 warnings\" , 0, model.getNumWarnings());", "+    assertEquals(\"Should have 0 compiler errors\" , 0, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d633e18b8ee897473bc51ab6cc2db28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "65add9d9f0de9278803d6c9a77b3294a4ab082f3", "commitAfterChange": "1ad8d0f619615b40333c2ef2eca24506e4639e2b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "signatureAfterChange": "     public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "diff": ["+    assertTrue(\"first doc should have errors\", positions.length > 0);", "+    assertTrue(\"second doc should have errors\", positions2.length > 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4400e1870a034d653f43a0eabddf8db3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testConstructOnlyWarnings()", "signatureAfterChange": "   public void testConstructOnlyWarnings()", "diff": ["-    assertEquals(\"Should have 2 compiler errors.\", 2, model.getNumErrors());", "+    assertEquals(\"Should have 2 errors.\", 2, model.getNumErrors());", "+    assertEquals(\"Should have 2 warnings\" , 2, model.getNumWarnings());", "+    assertEquals(\"Should have 0 compiler errors\" , 0, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52c7900a234fa6b1378dbfbd19925f68", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testConstructManyDocsWithoutLineNums()", "signatureAfterChange": "   public void testConstructManyDocsWithoutLineNums()", "diff": ["+    assertEquals(\"Should have 3 warnings\" , 3, model.getNumWarnings());", "+    assertEquals(\"Should have 5 compiler errors\" , 5, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66353a39ffa26751aabf47c4e664fa63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testConstructManyDocsWithBoth()", "signatureAfterChange": "   public void testConstructManyDocsWithBoth()", "diff": ["+    assertEquals(\"Should have 6 warnings\" , 6, model.getNumWarnings());", "+    assertEquals(\"Should have 9 compiler errors\" , 9, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bfb943d198ddd1189f0dea2b34bb916", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testConstructManyDocsWithLineNums()", "signatureAfterChange": "   public void testConstructManyDocsWithLineNums()", "diff": ["+    assertEquals(\"Should have 3 warnings\" , 3, model.getNumWarnings());", "+    assertEquals(\"Should have 5 compiler errors\" , 5, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eb6d1a731e068a23848d2d43c8d6442", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 200, "signatureBeforeChange": "   public Expression cast(Type target, final Expression e)      throws UnsupportedConversionException", "signatureAfterChange": "   public Expression cast(final Type target, final Expression e) throws UnsupportedConversionException", "diff": ["-  public Expression cast(Type target, final Expression e) ", "-    throws UnsupportedConversionException {", "+  public Expression cast(final Type target, final Expression e) throws UnsupportedConversionException {", "-      public Expression defaultCase(Type target) {", "+      @Override public Expression defaultCase(Type target) {", "-            // TODO: implement correctly instead of this simplified version (join might come in handy):           ", "-            if (isSubtype(target, source)) {", "+            if (validCheckedCast(target, source) ||", "+                (!_opt.prohibitUncheckedCasts() && validUncheckedCast(target, source))) {", "-              // TODO: unchecked warnings", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a451279dc2118f9cf60484c9214b3585", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testConstructOneDocWithLineNums()", "signatureAfterChange": "   public void testConstructOneDocWithLineNums()", "diff": ["+    assertEquals(\"Should have 1 warning\" , 1, model.getNumWarnings());", "+    assertEquals(\"Should have  compiler errors\" , 3, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cebbc400a7192dfbf2895bc8ac836a15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testConstructOneDocWithoutLineNums()", "signatureAfterChange": "   public void testConstructOneDocWithoutLineNums()", "diff": ["+    assertEquals(\"Should have 1 warning\" , 1, model.getNumWarnings());", "+    assertEquals(\"Should have 2 compiler errors\" , 2, model.getNumCompErrors());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3092278111fd16cec6e6d88ea7bf48d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "0047e2d5991ef20f74452ac3c21bd6d7ee99b408", "commitAfterChange": "818d684134925745129d103adc256ed04e291a53", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "    public void testNoPrefix() throws BadLocationException", "diff": ["-      \"    int field;          \\n\" + /*  75 */", "+      \"    int method1         \\n\" + /*  75 */", "-    // This rule should always apply, unless we are inside a comment.", "+    // This rule should always apply, unless the entire line is inside a comment.", "-    assertTrue(\"START inside javadoc comment.\", !rule.applyRule(_doc, 130));", "+    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130));", "+    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150));", "-    assertTrue(\"START inside multi-line comment.\", !rule.applyRule(_doc, 275));", "-    assertTrue(\"START inside multi-line comment.\", !rule.applyRule(_doc, 300));", "-    assertTrue(\"START inside multi-line comment.\", !rule.applyRule(_doc, 399));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300));", "+    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98d69586f77f04b827d23897c057419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileIOTest.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testClassFileSynchronization()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testClassFileSynchronization() throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testClassFileSynchronization()", "-    throws BadLocationException, IOException, InterruptedException", "-  {", "+  public void testClassFileSynchronization() throws BadLocationException, IOException, InterruptedException {", "-    assertTrue(\"Class file should not exist before compile\",", "-               doc.getCachedClassFile() == null);", "-    assertTrue(\"should not be in sync before compile\",", "-               !doc.checkIfClassFileInSync());", "+    assertTrue(\"Class file should not exist before compile\", doc.getCachedClassFile() == null);", "+    assertTrue(\"should not be in sync before compile\", ! doc.checkIfClassFileInSync());", "+    assertTrue(\"The state of all open documents should be out of sync\", _model.hasOutOfSyncDocuments());", "-    assertTrue(\"should be in sync after compile\",", "-               doc.checkIfClassFileInSync());", "+    assertTrue(\"should be in sync after compile\", doc.checkIfClassFileInSync());", "+//    System.err.println(_model.getOpenDefinitionsDocuments());", "+    assertTrue(\"The state of all open documents should be in sync\", ! _model.hasOutOfSyncDocuments());", "-    assertTrue(\"should not be in sync after modification\",", "-               !doc.checkIfClassFileInSync());", "+    assertTrue(\"should not be in sync after modification\", ! doc.checkIfClassFileInSync());", "-    assertTrue(\"should not be in sync after save\",", "-               !doc.checkIfClassFileInSync());", "+    assertTrue(\"should not be in sync after save\", ! doc.checkIfClassFileInSync());"]}], "num": 11506}
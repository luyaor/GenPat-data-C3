{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39ef7a42c90c1b94c80b140f1beb96a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8187778694960bf197ac2cdcc3a8ec53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   synchronized public void compile(OpenDefinitionsDocument doc)       throws IOException", "signatureAfterChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "diff": ["-  synchronized public void compile(OpenDefinitionsDocument doc)", "-      throws IOException {", "+  public void compile(OpenDefinitionsDocument doc) throws IOException {", "+    List<OpenDefinitionsDocument> defDocs;", "+    defDocs = _getter.getDefinitionsDocuments(); ", "+    ", "-    if (_getter.hasModifiedDocuments()) {", "-      _notifier.saveBeforeCompile();", "-    }", "-", "-    if (_getter.hasModifiedDocuments()) {", "-      // if any files haven't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the compile.", "-    }", "-    else {", "+    if (_hasModifiedFiles(defDocs)) _notifier.saveBeforeCompile();", "+    ", "+    if (_hasModifiedFiles(defDocs)) return;  /* Abort compilation */", "+    ", "+    try {", "+      File file = doc.getFile();", "+      File[] files = new File[] { file };", "+      ", "-        File file = doc.getFile();", "-        File[] files = new File[] { file };", "-", "-        try {", "-          _notifier.compileStarted();", "-", "-          File[] sourceRoots = new File[] { doc.getSourceRoot() };", "-", "-          _compileFiles(sourceRoots, files, buildDir);", "-        }", "-        catch (Throwable e) {", "-          CompilerError err =", "-            new CompilerError(file, -1, -1, e.getMessage(), false);", "-          CompilerError[] errors = new CompilerError[] { err };", "-          _distributeErrors(errors);", "-        }", "-        finally {", "-          // Fire a compileEnded event", "-          _notifier.compileEnded();", "-        }", "+        _notifier.compileStarted();", "+        File[] sourceRoots = new File[] { doc.getSourceRoot() };", "+        _compileFiles(sourceRoots, files, buildDir);", "-      catch (IllegalStateException ise) {", "-        // No file exists, don't try to compile", "+      catch (Throwable e) {", "+        CompilerError err = new CompilerError(file, -1, -1, e.getMessage(), false);", "+        CompilerError[] errors = new CompilerError[] { err };", "+        _distributeErrors(errors);", "+      finally {", "+        // Fire a compileEnded event", "+        _notifier.compileEnded();", "+      }", "+    }", "+    catch (IllegalStateException ise) {", "+      // No file exists, don't try to compile"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99eea9897ad278bd2b4185677d9fb726", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "commitAfterChange": "b24b0a9d39ea5edde092f4dd2f0cce709847f77c", "methodNumberBeforeChange": 342, "methodNumberAfterChange": 385, "signatureBeforeChange": "    final private boolean jj_3R_222()", "signatureAfterChange": "    final private boolean jj_3R_227()", "diff": ["+", "+  final private boolean jj_3R_227() {", "+    if (jj_scan_token(DOT)) return true;", "+    if (jj_scan_token(IDENTIFIER)) return true;", "+    Token xsp;", "+    xsp = jj_scanpos;", "+    if (jj_3R_249()) jj_scanpos = xsp;", "+    return false;", "+  }", "-  final private boolean jj_3R_222() {", "-    if (jj_3R_272()) return true;", "-    if (jj_3R_116()) return true;"]}], "num": 6281}
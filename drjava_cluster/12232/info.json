{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2828f13063b6a9ea1deee3bcbd0d2a40", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489fec3147500a1adb73a660809ddcb1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "commitAfterChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "    private void _updateWatches()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["-    //DrJava.consoleOut().println(\"stack frame: \" + frames);", "-    //DrJava.consoleOut().println(\"all fields: \" + rt.allFields());", "-        //DrJava.consoleOut().println(\"No line number information for this method\");", "-        // ReferenceType's scope, keep further out in scope.", "+        // ReferenceType's scope, keep going further out in scope.", "+          if (rt == null) {", "+            currWatch.setValue(null);", "+            currWatch.setType(null);", "+            break;", "+          }", "-            // check if the frame represents a native or static method and", "+            // Check if the frame represents a native or static method and", "-            // This is a hack, remove it to improve performance, it will", "-            // work sometimes, but not always.", "-            //DrJava.consoleOut().println(\"checking frames *\");", "+            // This is a hack, remove it to slightly improve performance but", "+            // at the loss of ever being able to watch outer instance", "+            // fields. If unremoved, this will work sometimes, but not always.", "-              //DrJava.consoleOut().println(\"outerFrame: \" + outerFrame);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8c146217f8a06c1d252071a072fc5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private int _commentBlock(final int start, final int end)", "signatureAfterChange": "   private int _commentBlock(final int start, final int end)", "diff": ["-      int walker = start;", "+      int walker = getLineStartPos(start);", "-          setCurrentLocation(walker);", "-          // Keep pointer to walker position that will stay current", "-          // regardless of how commentLine changes things", "-          Position walkerPos = this.createUnwrappedPosition(walker);", "-          // Comment out current line", "-          _commentLine();  // must be atomic", "+          setCurrentLocation(walker);  // Update cursor", "+          ", "+          _commentLine();              // Comment out current line; must be atomic", "-          // Move back to walker spot", "-          setCurrentLocation(walkerPos.getOffset());", "-          walker = walkerPos.getOffset();", "+", "+          walker = walker + 2;         // Skip over inserted slashes; getDistToNewline(walker) = 0 if not advanced", "+          setCurrentLocation(walker);  // reset currentLocation to position past newline", "+", "-          // We don't actually move yet. That happens at the top of the loop,", "-          // after we check if we're past the end.", "-          //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));"]}], "num": 12232}
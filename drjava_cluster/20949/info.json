{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08841f77b01415004ac6340ae9bd0b5d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21e84b3bbbe647bdda4c20580f9167ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "63cffca72f6a1e6647332e3c5d09c544e2cf35f3", "commitAfterChange": "03e8c58726828f3ddf7d6eb7f633023068dad9fe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testDancingUIFileClosed() throws IOException", "signatureAfterChange": "   public void testDancingUIFileClosed() throws IOException", "diff": ["-", "-     //_frame.setVisible(true);", "-     _frame.pack();", "-     ComponentAdapter listener = new ComponentAdapter() {", "+     ", "+     final ComponentAdapter listener = new ComponentAdapter() {", "-     _frame.addComponentListenerToOpenDocumentsList(listener);", "-     SingleDisplayModelFileClosedListener closeListener = new SingleDisplayModelFileClosedListener();", "-", "-     _frame.open(new FileOpenSelector() {", "+     final SingleDisplayModelFileClosedListener closeListener = new SingleDisplayModelFileClosedListener();", "+     ", "+     Utilities.invokeLater(new Runnable() { public void run() {", "+//       _frame.setVisible(true);", "+       _frame.pack();", "+       _frame.addComponentListenerToOpenDocumentsList(listener);", "+       ", "+       _frame.open(new FileOpenSelector() {", "-", "-     _frame.getModel().addListener(closeListener);", "-     _closeDone = false;", "-     ", "-    ", "-     Utilities.invokeLater(new Runnable() {", "-       public void run() { _frame.getCloseButton().doClick(); }", "-     });", "+       ", "+       _frame.getModel().addListener(closeListener);", "+       _closeDone = false;", "+       ", "+       _frame.getCloseButton().doClick();", "+     }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f3e7512e4ab1d109c1146c67025e2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public JUnitErrorListPane()", "signatureAfterChange": "     public JUnitErrorListPane()", "diff": ["-      // If we set this pane to be of type text/rtf, it wraps based on words", "-      // as opposed to based on characters.", "-      super(\"text/rtf\", \"\");", "-      ", "-      _createPopupMenu();", "-      _popupAdapter = new PopupAdapter();", "-      addMouseListener(_popupAdapter);", "-      //addMouseListener(_mouseListener);", "+      super();", "+      this.removeMouseListener(defaultMouseListener);", "+      this.addMouseListener(_popupAdapter);", "+    }", "-      _selectedIndex = 0;", "-      _errorTable = new Hashtable();", "-      _lastDefPane = _frame.getCurrentDefPane();", "-      //System.out.println(\"lastDefPane = \" + _lastDefPane);", "-      JUnitErrorListPane.this.setFont(new Font(\"Courier\", 0, 20));", "-      ", "-      // We set the editor pane disabled so it won't get keyboard focus,", "-      // which makes it uneditable, and so you can't select text inside it.", "-      //setEnabled(false);", "-      ", "-      // Set the editor pane to be uneditable, but allow selecting text.", "-      setEditable(false);", "-      ", "-      DrJava.getConfig().addOptionListener( OptionConstants.COMPILER_ERROR_COLOR, new CompilerErrorColorOptionListener());    "]}], "num": 20949}
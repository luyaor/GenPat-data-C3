{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d91b484e1d9d764ca8ad5917e07591b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bdf4e7e690637be096195ba86ee4c20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/BackSlashTest.java", "commitBeforeChange": "59d5a7ea5784619a931e9fdef9de2a8ec9f89b2b", "commitAfterChange": "aa22056e3e8260253bc014e71a3e1da99c0bc773", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void testInsideQuoteNext()", "signatureAfterChange": "    public void testInsideQuoteNext()", "diff": ["-\tpublic void testInsideQuoteNext()", "-\t\t{", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.move(-1);", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tassertEquals(\"#0.0\", \"\\\\\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#0.1\", ReducedToken.INSIDE_QUOTE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tassertEquals(\"#0.2\", 1, model1.getBlockOffset());", "-\t\t\tmodel1.move(1);\t\t\t", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.move(-1);", "-\t\t\tassertEquals(\"#1.0\", \"\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#1.1\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tassertTrue(\"#1.2\", model1.currentToken().isClosed());", "-\t\t\tmodel1.move(1);", "-\t\t\tmodel1.insertQuote();\t\t\t", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tmodel1.move(-1);", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tassertEquals(\"#2.0\", \"\\\\\\\\\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#2.1\", ReducedToken.INSIDE_QUOTE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());\t\t\t", "-\t\t\tassertEquals(\"#2.2\", 6, model1.absOffset());", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.insertOpenSquiggly();", "-\t\t\tmodel1.move(-1);", "-\t\t\tassertEquals(\"#3.0\", \"{\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#3.1\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tmodel1.move(1);", "-\t\t\tmodel1.move(3);", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.move(-1);", "-\t\t\tassertEquals(\"#4.0\", \"\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#4.1\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tassertTrue(\"#4.2\", model1.currentToken().isClosed());", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tassertEquals(\"#5.0\", \"\\\\\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#5.1\", ReducedToken.INSIDE_QUOTE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());\t\t\t", "-\t\t\tassertEquals(\"#5.2\", 1, model1.getBlockOffset());\t\t\t", "-\t\t}", "+  public void testInsideQuoteNext() {", "+    model1.insertQuote();", "+    model1.insertQuote();", "+    model1.move(-1);", "+    model1.insertBackSlash();", "+    assertEquals(\"#0.0\", \"\\\\\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#0.1\", INSIDE_QUOTE, stateOfCurrentToken(model1));", "+    assertEquals(\"#0.2\", 1, model1.getBlockOffset());", "+    model1.move(1);     ", "+    model1.insertQuote();", "+    model1.move(-1);", "+    assertEquals(\"#1.0\", \"\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#1.1\", FREE, stateOfCurrentToken(model1));", "+    assertTrue(\"#1.2\", model1.currentToken().isClosed());", "+    model1.move(1);", "+    model1.insertQuote();     ", "+    model1.insertBackSlash();", "+    model1.move(-1);", "+    model1.insertBackSlash();", "+    assertEquals(\"#2.0\", \"\\\\\\\\\", model1.currentToken().getType());", "+    assertEquals(\"#2.1\", INSIDE_QUOTE, stateOfCurrentToken(model1));", "+    assertEquals(\"#2.2\", 6, model1.absOffset());", "+    model1.move(-2);", "+    model1.insertOpenSquiggly();", "+    model1.move(-1);", "+    assertEquals(\"#3.0\", \"{\", model1.currentToken().getType());", "+    assertEquals(\"#3.1\", FREE, stateOfCurrentToken(model1));", "+    model1.move(1);", "+    model1.move(3);", "+    model1.insertQuote();", "+    model1.move(-1);", "+    assertEquals(\"#4.0\", \"\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#4.1\", FREE, stateOfCurrentToken(model1));", "+    assertTrue(\"#4.2\", model1.currentToken().isClosed());", "+    model1.insertBackSlash();", "+    assertEquals(\"#5.0\", \"\\\\\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#5.1\", INSIDE_QUOTE, stateOfCurrentToken(model1));", "+    assertEquals(\"#5.2\", 1, model1.getBlockOffset());         ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46d769af3cdde255239ef81de015839", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/BackSlashTest.java", "commitBeforeChange": "59d5a7ea5784619a931e9fdef9de2a8ec9f89b2b", "commitAfterChange": "aa22056e3e8260253bc014e71a3e1da99c0bc773", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tpublic void testInsideQuoteNext()", "signatureAfterChange": "    public void testInsideQuoteNext()", "diff": ["-\tpublic void testInsideQuoteNext()", "-\t\t{", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.move(-1);", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tassertEquals(\"#0.0\", \"\\\\\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#0.1\", ReducedToken.INSIDE_QUOTE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tassertEquals(\"#0.2\", 1, model1.getBlockOffset());", "-\t\t\tmodel1.move(1);\t\t\t", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.move(-1);", "-\t\t\tassertEquals(\"#1.0\", \"\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#1.1\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tassertTrue(\"#1.2\", model1.currentToken().isClosed());", "-\t\t\tmodel1.move(1);", "-\t\t\tmodel1.insertQuote();\t\t\t", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tmodel1.move(-1);", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tassertEquals(\"#2.0\", \"\\\\\\\\\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#2.1\", ReducedToken.INSIDE_QUOTE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());\t\t\t", "-\t\t\tassertEquals(\"#2.2\", 6, model1.absOffset());", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.insertOpenSquiggly();", "-\t\t\tmodel1.move(-1);", "-\t\t\tassertEquals(\"#3.0\", \"{\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#3.1\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tmodel1.move(1);", "-\t\t\tmodel1.move(3);", "-\t\t\tmodel1.insertQuote();", "-\t\t\tmodel1.move(-1);", "-\t\t\tassertEquals(\"#4.0\", \"\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#4.1\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());", "-\t\t\tassertTrue(\"#4.2\", model1.currentToken().isClosed());", "-\t\t\tmodel1.insertBackSlash();", "-\t\t\tassertEquals(\"#5.0\", \"\\\\\\\"\", model1.currentToken().getType());", "-\t\t\tassertEquals(\"#5.1\", ReducedToken.INSIDE_QUOTE,", "-\t\t\t\t\t\t\t\t\t model1.currentToken().getState());\t\t\t", "-\t\t\tassertEquals(\"#5.2\", 1, model1.getBlockOffset());\t\t\t", "-\t\t}", "+  public void testInsideQuoteNext() {", "+    model1.insertQuote();", "+    model1.insertQuote();", "+    model1.move(-1);", "+    model1.insertBackSlash();", "+    assertEquals(\"#0.0\", \"\\\\\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#0.1\", INSIDE_QUOTE, stateOfCurrentToken(model1));", "+    assertEquals(\"#0.2\", 1, model1.getBlockOffset());", "+    model1.move(1);     ", "+    model1.insertQuote();", "+    model1.move(-1);", "+    assertEquals(\"#1.0\", \"\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#1.1\", FREE, stateOfCurrentToken(model1));", "+    assertTrue(\"#1.2\", model1.currentToken().isClosed());", "+    model1.move(1);", "+    model1.insertQuote();     ", "+    model1.insertBackSlash();", "+    model1.move(-1);", "+    model1.insertBackSlash();", "+    assertEquals(\"#2.0\", \"\\\\\\\\\", model1.currentToken().getType());", "+    assertEquals(\"#2.1\", INSIDE_QUOTE, stateOfCurrentToken(model1));", "+    assertEquals(\"#2.2\", 6, model1.absOffset());", "+    model1.move(-2);", "+    model1.insertOpenSquiggly();", "+    model1.move(-1);", "+    assertEquals(\"#3.0\", \"{\", model1.currentToken().getType());", "+    assertEquals(\"#3.1\", FREE, stateOfCurrentToken(model1));", "+    model1.move(1);", "+    model1.move(3);", "+    model1.insertQuote();", "+    model1.move(-1);", "+    assertEquals(\"#4.0\", \"\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#4.1\", FREE, stateOfCurrentToken(model1));", "+    assertTrue(\"#4.2\", model1.currentToken().isClosed());", "+    model1.insertBackSlash();", "+    assertEquals(\"#5.0\", \"\\\\\\\"\", model1.currentToken().getType());", "+    assertEquals(\"#5.1\", INSIDE_QUOTE, stateOfCurrentToken(model1));", "+    assertEquals(\"#5.2\", 1, model1.getBlockOffset());         ", "+  }"]}], "num": 17182}
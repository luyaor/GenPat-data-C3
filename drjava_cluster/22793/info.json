{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "028ecadd9118ffad3fa1dc395d7b90fc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463eb17c41d4a2fdefad2dc6a5c9899d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "commitAfterChange": "229b97efe43c666e9a5a8a6450aaf594c37171c3", "methodNumberBeforeChange": 236, "methodNumberAfterChange": 236, "signatureBeforeChange": "     public void removeRegion(final R region)", "signatureAfterChange": "     public void removeRegion(final R r)", "diff": ["-    public void removeRegion(final R region) {      ", "+    public void removeRegion(final R r) {      ", "-      final R cur = _current; // so we can verify if _current got changed", "-      if (region == cur) {", "-        if (nextCurrentRegion().equals(cur)) {", "-          if (prevCurrentRegion().equals(cur)) {", "-            _current = null;", "-          }", "-        }", "-      }", "-      for(int i = 0; i < _regions.size(); ++i) {", "-        if (region == _regions.get(i)) {", "+      if (r == _current && nextCurrentRegion().equals(_current) && prevCurrentRegion().equals(_current)) ", "+        _current = null;  // Removed last region ?", "+", "+      for (int i = 0; i < _regions.size(); ++i) {", "+        if (r.equals(_regions.get(i))) {", "+          _regionsSet.remove(r);", "+          assert _regions.size() == _regionsSet.size();", "-          for (RegionManagerListener<R> l: _listeners) { l.regionRemoved (region); }", "+          for (RegionManagerListener<R> l: _listeners) { l.regionRemoved (r); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "891ded7acee28cc78115f71385b7ad41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 230, "signatureBeforeChange": "     public void removeRegion(final R region)", "signatureAfterChange": "     public void removeRegion(final R region)", "diff": ["-    public void removeRegion(final R region) {", "-      _regions.remove(region);", "-", "+    public void removeRegion(final R region) {      ", "+      // if we're removing the current region, select a more recent region, if available", "+      // if a more recent region is not available, select a less recent region, if available", "+      // if a less recent region is not available either, set to null", "+      final R cur = _current; // so we can verify if _current got changed", "+      if (region==cur) {", "+        if (nextCurrentRegion().equals(cur)) {", "+          if (prevCurrentRegion().equals(cur)) {", "+            _current = null;", "+          }", "+        }", "+      }", "+      for(int i=0;i<_regions.size();++i) {", "+        if (region==_regions.get(i)) {", "+          _regions.remove(i);", "+          break;", "+        }", "+      }", "+      "]}], "num": 22793}
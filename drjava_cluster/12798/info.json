{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6107b9ca90be495ceeca4d1978603a80", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92303c5041681aad58abfd69707bf11c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ArrayCloneMethod.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings,                           Options options) throws EvaluatorException", "signatureAfterChange": "      protected Method implementation() throws NoSuchMethodException", "diff": ["-  public DJMethod declaredSignature() { return this; }", "-  public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings, ", "-                         Options options) throws EvaluatorException {", "-    if (receiver == null) {", "-      throw new WrappedException(new EvaluatorException(new NullPointerException()));", "-    }", "-    try {", "-      Method clone = Object.class.getDeclaredMethod(\"clone\");", "-      try { clone.setAccessible(true); /* override protected access */ }", "-      catch (SecurityException e) { debug.log(e); /* ignore -- we can't relax accessibility */ }", "-      return clone.invoke(receiver, IterUtil.toArray(args, Object.class));", "-    }", "-    catch (NoSuchMethodException e) { throw new RuntimeException(e); }", "-    catch (InvocationTargetException e) { throw new EvaluatorException(e.getCause(), EXTRA_STACK); }", "-    catch (IllegalAccessException e) { throw new RuntimeException(e); }", "+  protected Method implementation() throws NoSuchMethodException {", "+    return Object.class.getDeclaredMethod(\"clone\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4139ee6ecee8a9929e6b189df09288a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["-    // Blocks until interpreter has registered itself", "+    // Blocks until the interpreter has registered if hasn't already", "-    VirtualMachineManager vmm = Bootstrap.virtualMachineManager();", "-    List connectors = vmm.attachingConnectors();", "-    AttachingConnector connector = null;", "-    java.util.Iterator iter = connectors.iterator();", "-    while (iter.hasNext()) {", "-      AttachingConnector conn = (AttachingConnector)iter.next();", "-      if (conn.name().equals(\"com.sun.jdi.SocketAttach\")) {", "-        connector = conn;", "-      }", "-    }", "-    if (connector == null) {", "-      throw new DebugException(\"Could not find an AttachingConnector!\");", "-    }", "+    AttachingConnector connector = _getAttachingConnector();", "-    // get the singleton instance of the interpreterJVM", "-    List referenceTypes = _vm.classesByName(\"edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM\");", "-    if (referenceTypes.size() <= 0) {", "+    _interpreterJVM = _getInterpreterJVMRef();", "+  }", "-    ReferenceType rt = (ReferenceType)referenceTypes.get(0);", "-    Field field = rt.fieldByName(\"ONLY\");", "-    _interpreterJVM = (ObjectReference)rt.getValue(field);"]}], "num": 12798}
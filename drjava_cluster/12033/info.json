{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1e8dd62aeed97e7335e7f11b0d50f81", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da9cee4fc3482949fb3c20034b672d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "          public void testForTryCatchFinallyStatement()", "signatureAfterChange": "          public void testForTryCatchFinallyStatement()", "diff": ["-      TypeData result = tcfs2.visit(_bbtc);", "+      TypeData result = tcfs2.visit(_bbtc);  // Duplicates previous error", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(1).getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "+                   \"which needs to be caught or declared to be thrown\", ", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "-      assertEquals(\"Should still still be 2 errors\", 2, errors.size());", "+      assertEquals(\"Should still still be 1 error\", 1, errors.size());", "-      nested.visit(_bbtc);", "-      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(2).getFirst());", "+      nested.visit(_bbtc);  // Duplicates existing error", "+      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "+                   \"which needs to be caught or declared to be thrown\", errors.get(0).getFirst());", "-      assertEquals(\"There should still be 3 errors\", 3, errors.size());", "+      assertEquals(\"There should still be 1 error\", 1, errors.size());", "-      assertEquals(\"There should still be 3 errors\", 3, errors.size());", "+      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "-      assertEquals(\"There should still be 3 errors!\", 3, errors.size());", "+      assertEquals(\"There should still be 1 error!\", 1, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72f5395f7e89341bba0752e16aec446", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "          public void testAutoBoxingAndUnboxing()", "signatureAfterChange": "          public void testAutoBoxingAndUnboxing()", "diff": ["-      assertEquals(\"The error message should be correct\", \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  It matches both myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  \" +", "+                   \"It matches both myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", ", "+                   errors.get(0).getFirst());", "-      MethodData md3 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      assertEquals(\"There should still be one error\", 1, errors.size());", "+      MethodData md3 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                                      new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, ", "+                                      new NullLiteral(SourceInfo.NO_INFO));", "+      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      assertEquals(\"There should still be one error\", 1, errors.size());  // Generated a duplicate error", "-      assertEquals(\"There should now be two errors\", 2, errors.size());", "-      assertEquals(\"The error message should be correct\", \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  It matches both myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", errors.get(1).getFirst());", "+      assertEquals(\"There should still be one error\", 1, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  It matches both \" +", "+                   \"myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", ", "+                   errors.get(0).getFirst());"]}], "num": 12033}
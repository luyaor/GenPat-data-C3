{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f683e8dd3ee5156e179c0015b94b3a17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35887c6a7f46cb0f88d985f41b9aa4c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "signatureAfterChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "diff": ["-    Token id;", "+    Token id = null;", "-    id = jj_consume_token(IDENTIFIER);", "-    if (jj_2_9(2147483647)) {", "-      typeArgs = TypeArguments();", "-    } else {", "-      ;", "-    }", "-      list.add(new TreeToken(id));", "-      allTypeArgs.add( typeArgs );", "-      typeArgs = new LinkedList<Type>();", "-    label_5:", "-    while (true) {", "-      if (jj_2_10(2147483647)) {", "-        ;", "-      } else {", "-        break label_5;", "-      }", "-      jj_consume_token(DOT);", "+    try {", "-      if (jj_2_11(2147483647)) {", "+      if (jj_2_9(2147483647)) {", "-      list.add(new TreeToken(id));", "-      allTypeArgs.add( typeArgs );", "-      typeArgs = new LinkedList<Type>();", "-    }", "-      IdentifierToken f  = list.get(0);", "-      IdentifierToken l  = list.get(list.size()-1);", "-      boolean Parameterized = false;", "-      for( int i = 0; i < allTypeArgs.size(); i++ ){", "-        List<? extends Type> targs = allTypeArgs.get(i);", "-        if(targs.size() > 0) {", "-          Parameterized = true;", "-          break;", "-        }", "-      }", "-      if(!Parameterized){", "-        if(TypeParamsMap.containsKey(TreeUtilities.listToName(list))){", "-          {if (true) return TypeParamsMap.get(TreeUtilities.listToName(list));}", "-        } else if(GenericTypesEnv.contains(TreeUtilities.listToName(list))){", "-          {if (true) return GenericTypesEnv.lookup(TreeUtilities.listToName(list));}", "+        list.add(new TreeToken(id));", "+        allTypeArgs.add( typeArgs );", "+        typeArgs = new LinkedList<Type>();", "+      label_5:", "+      while (true) {", "+        if (jj_2_10(2147483647)) {", "+          ;", "-          {if (true) return new ReferenceType(list,", "-                                   filename,", "-                                   f.beginLine(), f.beginColumn(),", "-                                   l.endLine(),   l.endColumn());}", "+          break label_5;", "-      } else {", "-        {if (true) return new GenericReferenceType(list,", "-                                        filename,", "-                                        f.beginLine(), f.beginColumn(),", "-                                        l.endLine(), l.endColumn(),", "-                                        allTypeArgs);}", "+        jj_consume_token(DOT);", "+        id = jj_consume_token(IDENTIFIER);", "+        if (jj_2_11(2147483647)) {", "+          typeArgs = TypeArguments();", "+        } else {", "+          ;", "+        }", "+        list.add(new TreeToken(id));", "+        allTypeArgs.add( typeArgs );", "+        typeArgs = new LinkedList<Type>();", "+        IdentifierToken f  = list.get(0);", "+        IdentifierToken l  = list.get(list.size()-1);", "+        boolean Parameterized = false;", "+        for( int i = 0; i < allTypeArgs.size(); i++ ){", "+          List<? extends Type> targs = allTypeArgs.get(i);", "+          if(targs.size() > 0) {", "+            Parameterized = true;", "+            break;", "+          }", "+        }", "+        if(!Parameterized){", "+          if(TypeParamsMap.containsKey(TreeUtilities.listToName(list))){", "+            {if (true) return TypeParamsMap.get(TreeUtilities.listToName(list));}", "+          } else if(GenericTypesEnv.contains(TreeUtilities.listToName(list))){", "+            {if (true) return GenericTypesEnv.lookup(TreeUtilities.listToName(list));}", "+          } else {", "+            {if (true) return new ReferenceType(list,", "+                                     filename,", "+                                     f.beginLine(), f.beginColumn(),", "+                                     l.endLine(),   l.endColumn());}", "+          }", "+        } else {", "+          {if (true) return new GenericReferenceType(list,", "+                                          filename,", "+                                          f.beginLine(), f.beginColumn(),", "+                                          l.endLine(), l.endColumn(),", "+                                          allTypeArgs);}", "+        }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid Reference name\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd97fcaae149c6c643bbd6492e7c84b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "signatureAfterChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[28] = jj_gen;", "-      ;", "-    }", "-    typ = resultType();", "-    id = jj_consume_token(IDENTIFIER);", "-    params = formalParameters();", "-    label_12:", "-    while (true) {", "+    try {", "+      mf = modifiers();", "-      case LBRACKET:", "-        ;", "+      case LESS:", "+        typeParameters = TypeParameters();", "-        break label_12;", "+        ;", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case THROWS:", "-      jj_consume_token(THROWS);", "-      exceptions = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[30] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LBRACE:", "-      body = block();", "-      break;", "-    case SEMICOLON:", "-      body = emptyStatement();", "-      break;", "-    default:", "-      jj_la1[31] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-        if (mf != null) {", "-          bl    = mf.beginLine;", "-          bc    = mf.beginColumn;", "-          flags = mf.accessFlags;", "-        } else {", "-          bl = typ.getBeginLine();", "-          bc = typ.getBeginColumn();", "+      typ = resultType();", "+      id = jj_consume_token(IDENTIFIER);", "+      params = formalParameters();", "+      label_12:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACKET:", "+          ;", "+          break;", "+        default:", "+          jj_la1[30] = jj_gen;", "+          break label_12;", "-        if (dim > 0) {", "-          typ = new ArrayType(typ, dim,", "-                              filename,", "-                              typ.getBeginLine(), typ.getBeginColumn(),", "-                              typ.getEndLine(),   typ.getEndColumn());", "-        }", "-        if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "+        jj_consume_token(LBRACKET);", "+        jj_consume_token(RBRACKET);", "+                    dim++;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case THROWS:", "+        jj_consume_token(THROWS);", "+        exceptions = ReferenceTypeNameList();", "+        break;", "+      default:", "+        jj_la1[31] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LBRACE:", "+        body = block();", "+        break;", "+      case SEMICOLON:", "+        body = emptyStatement();", "+        break;", "+      default:", "+        jj_la1[32] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+          if (mf != null) {", "+            bl    = mf.beginLine;", "+            bc    = mf.beginColumn;", "+            flags = mf.accessFlags;", "+          } else {", "+            bl = typ.getBeginLine();", "+            bc = typ.getBeginColumn();", "+          }", "+          if (dim > 0) {", "+            typ = new ArrayType(typ, dim,", "+                                filename,", "+                                typ.getBeginLine(), typ.getBeginColumn(),", "+                                typ.getEndLine(),   typ.getEndColumn());", "+          }", "+          if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "-        if (typeParameters == null){", "+          if (typeParameters == null){", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid method declaration\");", "+    }"]}], "num": 20346}
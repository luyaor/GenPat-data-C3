{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f7e781db364405d990fc40b17ee5240", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6530ace2336aa17e78f6ab15d27dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testParen() throws BadLocationException", "signatureAfterChange": "          public void testParen() throws BadLocationException", "diff": ["-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i));     ", "+        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));     ", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i));     ", "+        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));     ", "-      assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7));     ", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8));     ", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30));     ", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1));     ", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "+      assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b722fd15e4d24da2a4737296f2c1d435", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testParen() throws BadLocationException", "signatureAfterChange": "      public void testParen() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8e89dda3cc9549963e502208dbbfe9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testParen() throws BadLocationException", "signatureAfterChange": "      public void testParen() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace\", !_rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.testApplyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.testApplyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}], "num": 10111}
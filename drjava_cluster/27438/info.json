{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "396471ed9b8ac94f4af3760f96f771aa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04039411d73cc1a7ce30ee9f58070d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 88, "signatureBeforeChange": "   public static SizedIterable<Integer> arrayIterable(final int[] array)", "signatureAfterChange": "   public static SizedIterable<Integer> asIterable(int[] values)", "diff": ["+   */", "+  public static SizedIterable<Integer> asIterable(int[] values) {", "+    return new IntArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Integer> arrayIterable(final int[] array) {", "-    class Wrapper extends AbstractIterable<Integer> implements SizedIterable<Integer> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Integer> iterator() {", "-        return new IndexedIterator<Integer>() {", "-          protected int size() { return array.length; }", "-          protected Integer get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "350baf1f2519301733a502aef9958f3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public static SizedIterable<Boolean> arrayIterable(final boolean[] array)", "signatureAfterChange": "   public static SizedIterable<Boolean> asIterable(boolean[] values)", "diff": ["+   */", "+  public static SizedIterable<Boolean> asIterable(boolean[] values) {", "+    return new BooleanArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Boolean> arrayIterable(final boolean[] array) {", "-    class Wrapper extends AbstractIterable<Boolean> implements SizedIterable<Boolean> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Boolean> iterator() {", "-        return new IndexedIterator<Boolean>() {", "-          protected int size() { return array.length; }", "-          protected Boolean get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf447018098efad3fabecfc9468d762", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 96, "signatureBeforeChange": "   public static SizedIterable<Long> arrayIterable(final long[] array)", "signatureAfterChange": "   public static SizedIterable<Long> asIterable(long[] values)", "diff": ["+   */", "+  public static SizedIterable<Long> asIterable(long[] values) {", "+    return new LongArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Long> arrayIterable(final long[] array) {", "-    class Wrapper extends AbstractIterable<Long> implements SizedIterable<Long> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Long> iterator() {", "-        return new IndexedIterator<Long>() {", "-          protected int size() { return array.length; }", "-          protected Long get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d05b83ca96331a945bf9792e4f5ec84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public static SizedIterable<Byte> arrayIterable(final byte[] array)", "signatureAfterChange": "   public static SizedIterable<Byte> asIterable(byte[] values)", "diff": ["+   */", "+  public static SizedIterable<Byte> asIterable(byte[] values) {", "+    return new ByteArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Byte> arrayIterable(final byte[] array) {", "-    class Wrapper extends AbstractIterable<Byte> implements SizedIterable<Byte> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Byte> iterator() {", "-        return new IndexedIterator<Byte>() {", "-          protected int size() { return array.length; }", "-          protected Byte get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e5b121796d2f430674d6b5b40b7e681", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 64, "signatureBeforeChange": "   public static SizedIterable<Character> arrayIterable(final char[] array)", "signatureAfterChange": "   public static SizedIterable<Character> asIterable(char[] values)", "diff": ["+   */", "+  public static SizedIterable<Character> asIterable(char[] values) {", "+    return new CharArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Character> arrayIterable(final char[] array) {", "-    class Wrapper extends AbstractIterable<Character> implements SizedIterable<Character> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Character> iterator() {", "-        return new IndexedIterator<Character>() {", "-          protected int size() { return array.length; }", "-          protected Character get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20e87a3e9a09ced7cebe0e6ded45db5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 104, "signatureBeforeChange": "   public static SizedIterable<Float> arrayIterable(final float[] array)", "signatureAfterChange": "   public static SizedIterable<Float> asIterable(float[] values)", "diff": ["+   */", "+  public static SizedIterable<Float> asIterable(float[] values) {", "+    return new FloatArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Float> arrayIterable(final float[] array) {", "-    class Wrapper extends AbstractIterable<Float> implements SizedIterable<Float> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Float> iterator() {", "-        return new IndexedIterator<Float>() {", "-          protected int size() { return array.length; }", "-          protected Float get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cac6e63762eda27deca875a3e1f14d3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 112, "signatureBeforeChange": "   public static SizedIterable<Double> arrayIterable(final double[] array)", "signatureAfterChange": "   public static SizedIterable<Double> asIterable(double[] values)", "diff": ["+   */", "+  public static SizedIterable<Double> asIterable(double[] values) {", "+    return new DoubleArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Double> arrayIterable(final double[] array) {", "-    class Wrapper extends AbstractIterable<Double> implements SizedIterable<Double> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Double> iterator() {", "-        return new IndexedIterator<Double>() {", "-          protected int size() { return array.length; }", "-          protected Double get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef02401a5b1608a2ac985357450bfaff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public static SizedIterable<Short> arrayIterable(final short[] array)", "signatureAfterChange": "   public static SizedIterable<Short> asIterable(short[] values)", "diff": ["+   */", "+  public static SizedIterable<Short> asIterable(short[] values) {", "+    return new ShortArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Short> arrayIterable(final short[] array) {", "-    class Wrapper extends AbstractIterable<Short> implements SizedIterable<Short> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Short> iterator() {", "-        return new IndexedIterator<Short>() {", "-          protected int size() { return array.length; }", "-          protected Short get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f12bb85887be8b50f871d033f54b1f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 158, "methodNumberAfterChange": 128, "signatureBeforeChange": "   public static SizedIterable<Character> charSequenceIterable(final String sequence)", "signatureAfterChange": "   public static SizedIterable<Character> asIterable(final String sequence)", "diff": ["+   */", "+  public static SizedIterable<Character> asIterable(final String sequence) {", "+    return new CharSequenceWrapper(sequence, true);", "+  }", "-   */", "-  public static SizedIterable<Character> charSequenceIterable(final String sequence) {", "-    class Wrapper extends AbstractIterable<Character> implements SizedIterable<Character> {", "-      public int size() { return sequence.length(); }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Character> iterator() {", "-        return new IndexedIterator<Character>() {", "-          protected int size() { return sequence.length(); }", "-          protected Character get(int i) { return sequence.charAt(i); }", "-        };", "-      }", "-    }", "-    return new Wrapper();"]}], "num": 27438}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d72482bccbd15b05f68d25e8c0cc0d1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5669e30a98569915afb7a8a9e76fdfb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "cd1609e710303d46ced563eabe056854e1c94813", "commitAfterChange": "cfd8bfb1865d4fad4b92a33a577ef90b6209a355", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "     public void startCompile() throws IOException", "signatureAfterChange": "     public void startCompile() throws IOException", "diff": ["-              CompilerError err = new CompilerError(file,", "-                                                    -1,", "-                                                    -1,", "-                                                    e.getMessage(),", "-                                                    false);", "+              CompilerError err = new CompilerError(file, -1, -1, e.getMessage(), false);", "-              _notifier.notifyListeners(new EventNotifier.Notifier() {", "-                public void notifyListener(GlobalModelListener l) {", "-                  l.compileEnded();", "-                }", "-              });", "+              _notifier.compileEnded();", "-              if (_numErrors == 0) {", "-                if (/*_resetAfterCompile && */", "-                    _interactionsModel.interpreterUsed()) {", "-                  resetInteractions();", "-                }", "+              if (_numErrors == 0 && _interactionsModel.interpreterUsed()) {", "+//                  && _resetAfterCompile) {", "+                resetInteractions();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc47632ec91a34802f3e20b42b321648", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   private void _threwException(Throwable t)", "signatureAfterChange": "   private void _threwException(Throwable t)", "diff": ["-    ", "-    _interactionsModel.replThrewException(t.getClass().getName(),", "-                                          t.getMessage(), ", "-                                          StringOps.getStackTrace(t),", "-                                          ((t instanceof ParseError) &&  ", "-                                           ((ParseError) t).getParseException() != null)? ((ParseError) t).getMessage() : null);", "-  }                                                                                                                                   // getMessage, in this scenario, will return the same as getShortMessage", "+    String shortMsg = null;", "+    if ((t instanceof ParseError) && ((ParseError) t).getParseException() != null) ", "+      shortMsg = ((ParseError) t).getMessage();  // in this case, getMessage is equivalent to getShortMessage", "+    _interactionsModel.replThrewException(t.getClass().getName(), t.getMessage(), StringOps.getStackTrace(t), shortMsg);                                    ;", "+  } "]}], "num": 1721}
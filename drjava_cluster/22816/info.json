{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22b77b684a83c5399a795f545f536b67", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "833fc4b29716b22b2c3a4439bb56895e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 249, "signatureBeforeChange": "   public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3)", "signatureAfterChange": "   public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3)", "diff": ["-  /** @return  The disjunction ({@code ||}) of {@code p1}, {@code p2}, and {@code p3} */", "-  public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3) {", "-    return or(IterUtil.makeIterable(p1, p2, p3));", "-  }", "+  /** Produce the disjunction ({@code ||}) of {@code p1}, {@code p2}, and {@code p3}. */", "+  public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3) {", "+    return new OrPredicate<T>(IterUtil.<Predicate<? super T>>make(p1, p2, p3));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b78b4b1edfb8565b0d47feb9ddd532", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 248, "signatureBeforeChange": "   public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2)", "signatureAfterChange": "   public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2)", "diff": ["-  /** @return  The disjunction ({@code ||}) of {@code p1} and {@code p2} */", "-  public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2) {", "-    return or(IterUtil.makeIterable(p1, p2));", "+  /** Produce the disjunction ({@code ||}) of {@code p1} and {@code p2}. */", "+  public static <T> Predicate<T> or(Predicate<? super T> p1, Predicate<? super T> p2) {", "+    // explicit type argument required due to compiler (or language) bug", "+    return new OrPredicate<T>(IterUtil.<Predicate<? super T>>make(p1, p2));", "+  }"]}], "num": 22816}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe4012c0cdc6ee0bbc8164b28c93445a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc50a3a661ae79a8c9733e1bc62fb7c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "6c31f49b491d4a01bd2ddbae62b5ee4f76d52129", "commitAfterChange": "b17c3d3d0edf27a5d35f38839287840198b5808d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private int _moveLeft(int count, int currentOffset)", "signatureAfterChange": "     private int _moveLeft(int count, int currentOffset)", "diff": ["-      if (this.atEnd()) {", "-        this.prev();", "-        if (!this.atStart()) //make sure list not empty", "-        {", "-          currentOffset = this.current().getSize();", "-        }", "+      ", "+      // Standardize initial position, eliminating 0 offset", "+      if (atEnd()) {", "+        prev();", "+        if (! atStart())  currentOffset = current().getSize(); //make sure list not empty", "-", "-      if (this.atStart()) {", "-        throw new IllegalArgumentException(\"At Start\");", "-      }", "+      if (atStart()) throw new IllegalArgumentException(\"At Start\");", "-        this.prev();", "+        prev();", "-        if (this.atStart()) {", "-          if (count > 0) {", "-            throw new IllegalArgumentException(\"At Start\");", "-          }", "-          else {", "-            this.next();", "-            currentOffset = 0;", "-          }", "-        }", "-        else {", "-          currentOffset = this.current().getSize();", "-        }", "+        if (atStart()) throw new IllegalArgumentException(\"At Start\");  // count > 0", "+        currentOffset = current().getSize();", "-      return currentOffset - count;", "+      return currentOffset - count;  // Note: returned offset can be 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf888e7a2b6825c42436a56c3b93102", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "723910d837b2fcdd9f4127559df4832f71fb62e8", "commitAfterChange": "dfd810274f578220ac2bc25dd7ac216d6cba7d82", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public static Pair<Integer,Integer> getOffsetAndLength(String fullString, int startRow,                                                          int startCol, int endRow, int endCol)", "signatureAfterChange": "   public static Pair<Integer,Integer> getOffsetAndLength(String fullString, int startRow,                                                          int startCol, int endRow, int endCol)", "diff": ["+   */", "+    _ensureStartBeforeEnd(startRow, startCol, endRow, endCol);", "+", "+    // find the offset", "-    while( startRow > linesSeen ){", "+    while (startRow > linesSeen) {", "+      if (currentChar == -1) {", "+        throw new IllegalArgumentException(\"startRow is beyond the end of the string\");", "+      }", "+      // Must move past the newline", "+      currentChar++;", "-    int offset = currentChar + startCol - 1; // col is 0 based", "-    while( endRow > linesSeen ){", "+    ", "+    _ensureColInRow(fullString, startCol, currentChar);", "+    int offset = currentChar + startCol - 1;  // offset is zero-based", "+", "+    // find the length", "+    while (endRow > linesSeen) {", "+      if (currentChar == -1) {", "+        throw new IllegalArgumentException(\"endRow is beyond the end of the string\");", "+      }", "+      currentChar++;", "+", "+    _ensureColInRow(fullString, endCol, currentChar);", "-    return new Pair<Integer,Integer>( new Integer(offset), new Integer(length) );", "+", "+    // ensure the length is in bounds", "+    if (offset + length > fullString.length()) {", "+      throw new IllegalArgumentException(\"Given positions beyond the end of the string\");", "+    }", "+    return new Pair<Integer,Integer>(new Integer(offset), new Integer(length));"]}], "num": 760}
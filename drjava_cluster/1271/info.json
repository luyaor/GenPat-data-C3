{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d35b46b7a4fb8793897fce9fcbdb3a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a76d0b04189c1d15e2ca387dd46eecf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/DynamicJava.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static void main(String... args) throws IOException", "signatureAfterChange": "      public static void main(String... args) throws IOException", "diff": ["-    Interpreter i = new Interpreter(Options.DEFAULT);", "+", "+    ArgumentParser argParser = new ArgumentParser();", "+    argParser.supportOption(\"classpath\", IOUtil.WORKING_DIRECTORY.toString());", "+    argParser.supportAlias(\"cp\", \"classpath\");", "+    ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    Iterable<File> cp = IOUtil.parsePath(parsedArgs.getUnaryOption(\"classpath\"));", "+", "+    Interpreter i = new Interpreter(Options.DEFAULT, new PathClassLoader(cp));", "+    String prev = null;", "+    boolean blank = false;", "+        // two blank lines trigger a recompute", "+        if (input.equals(\"\")) {", "+          if (blank == true) { input = prev; blank = false; }", "+          else { blank = true; }", "+        }", "+        else { prev = input; blank = false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecdab7b6a059e0f8b1e9295de367f5dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "        public static void main(String... args)", "signatureAfterChange": "        public static void main(String... args)", "diff": ["-    ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "-    final TypeSystem ts = parsedArgs.hasOption(\"jls\") ? JLSTypeSystem.INSTANCE : ExtendedTypeSystem.INSTANCE;", "-      public TypeSystem typeSystem() { return ts; }", "-      public boolean enforceAllAccess() { return true; }", "+      @Override protected Thunk<? extends TypeSystem> typeSystemFactory() {", "+        TypeSystem result = parsedArgs.hasOption(\"jls\") ? new JLSTypeSystem(this) : new ExtendedTypeSystem(this);", "+        return LambdaUtil.valueLambda(result);", "+      }", "+      @Override public boolean enforceAllAccess() { return true; }", "+      @Override public boolean prohibitUncheckedCasts() { return false; }"]}], "num": 1271}
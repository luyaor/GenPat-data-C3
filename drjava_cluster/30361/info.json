{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9aa42283269e8191d654ee69c1e17fea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63a11f39427bc5dbd05b8f2c62a8438e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 52, "signatureBeforeChange": "   final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException", "signatureAfterChange": "   final public InterfaceDeclaration unmodifiedInterfaceDeclaration(ModifierFlags mf) throws ParseException", "diff": ["-    t = jj_consume_token(INTERFACE);", "-    id = jj_consume_token(IDENTIFIER);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[44] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case EXTENDS:", "-      jj_consume_token(EXTENDS);", "-      impl = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[45] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(LBRACE);", "-    label_16:", "-    while (true) {", "+    try {", "+      t = jj_consume_token(INTERFACE);", "+      id = jj_consume_token(IDENTIFIER);", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOID:", "-      case VOLATILE:", "-      case IDENTIFIER:", "+        typeParameters = TypeParameters();", "+        break;", "+      default:", "+        jj_la1[45] = jj_gen;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case EXTENDS:", "+        jj_consume_token(EXTENDS);", "+        impl = ReferenceTypeNameList();", "-        break label_16;", "+        ;", "-      decl = interfaceMemberDeclaration();", "+      jj_consume_token(LBRACE);", "+      label_16:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LESS:", "+          ;", "+          break;", "+        default:", "+          jj_la1[47] = jj_gen;", "+          break label_16;", "+        }", "+        decl = interfaceMemberDeclaration();", "-    }", "-    e = jj_consume_token(RBRACE);", "+      }", "+      e = jj_consume_token(RBRACE);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid interface declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c8a55c113fb6c14194e159432c3c5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 49, "signatureBeforeChange": "   final public ConstructorDeclaration constructorDeclaration() throws ParseException", "signatureAfterChange": "   final public ConstructorDeclaration constructorDeclaration() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case PRIVATE:", "-    case PROTECTED:", "-    case PUBLIC:", "+    try {", "-      case PUBLIC:", "-        t = jj_consume_token(PUBLIC);", "-      flag = Modifier.PUBLIC;", "-        break;", "-      case PROTECTED:", "-        t = jj_consume_token(PROTECTED);", "-       flag = Modifier.PROTECTED;", "-        break;", "-        t = jj_consume_token(PRIVATE);", "+      case PROTECTED:", "+      case PUBLIC:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case PUBLIC:", "+          t = jj_consume_token(PUBLIC);", "+      flag = Modifier.PUBLIC;", "+          break;", "+        case PROTECTED:", "+          t = jj_consume_token(PROTECTED);", "+       flag = Modifier.PROTECTED;", "+          break;", "+        case PRIVATE:", "+          t = jj_consume_token(PRIVATE);", "+          break;", "+        default:", "+          jj_la1[39] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "-        jj_la1[38] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "-      }", "-      break;", "-    default:", "-      jj_la1[39] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[40] = jj_gen;", "-      ;", "-    }", "-    id = jj_consume_token(IDENTIFIER);", "-    params = formalParameters();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case THROWS:", "-      jj_consume_token(THROWS);", "-      exceptions = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[41] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(LBRACE);", "-    if (jj_2_18(2147483647)) {", "-      ci = explicitConstructorInvocation();", "-    } else {", "-      ;", "-    }", "-    label_15:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "+        jj_la1[40] = jj_gen;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LESS:", "+        typeParameters = TypeParameters();", "+        break;", "+      default:", "+        jj_la1[41] = jj_gen;", "+        ;", "+      }", "+      id = jj_consume_token(IDENTIFIER);", "+      params = formalParameters();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case THROWS:", "+        jj_consume_token(THROWS);", "+        exceptions = ReferenceTypeNameList();", "-        break label_15;", "+        ;", "-      stmt = blockStatement();", "+      jj_consume_token(LBRACE);", "+      if (jj_2_18(2147483647)) {", "+        ci = explicitConstructorInvocation();", "+      } else {", "+        ;", "+      }", "+      label_15:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[43] = jj_gen;", "+          break label_15;", "+        }", "+        stmt = blockStatement();", "-    }", "-    e = jj_consume_token(RBRACE);", "+      }", "+      e = jj_consume_token(RBRACE);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid constructor declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d96ba2616f5acd47eab522370cfb45f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": "   final public List<Node> fieldDeclaration() throws ParseException", "signatureAfterChange": "   final public List<Node> fieldDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    typ = type();", "-    id = jj_consume_token(IDENTIFIER);", "-    label_9:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case LBRACKET:", "-        ;", "-        break;", "-      default:", "-        jj_la1[23] = jj_gen;", "-        break label_9;", "-      }", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case ASSIGN:", "-      jj_consume_token(ASSIGN);", "-      exp = variableInitializer();", "-      break;", "-    default:", "-      jj_la1[24] = jj_gen;", "-      ;", "-    }", "-        list.add(createFieldDeclaration(mf, typ, id, exp, dim));", "-    label_10:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case COMMA:", "-        ;", "-        break;", "-      default:", "-        jj_la1[25] = jj_gen;", "-        break label_10;", "-      }", "-      jj_consume_token(COMMA);", "-              dim = 0; exp = null;", "+    try {", "+      mf = modifiers();", "+      typ = type();", "-      label_11:", "+      label_9:", "-          jj_la1[26] = jj_gen;", "-          break label_11;", "+          jj_la1[24] = jj_gen;", "+          break label_9;", "-                   dim++;", "+                  dim++;", "-        jj_la1[27] = jj_gen;", "+        jj_la1[25] = jj_gen;", "+        list.add(createFieldDeclaration(mf, typ, id, exp, dim));", "+      label_10:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case COMMA:", "+          ;", "+          break;", "+        default:", "+          jj_la1[26] = jj_gen;", "+          break label_10;", "+        }", "+        jj_consume_token(COMMA);", "+              dim = 0; exp = null;", "+        id = jj_consume_token(IDENTIFIER);", "+        label_11:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case LBRACKET:", "+            ;", "+            break;", "+          default:", "+            jj_la1[27] = jj_gen;", "+            break label_11;", "+          }", "+          jj_consume_token(LBRACKET);", "+          jj_consume_token(RBRACKET);", "+                   dim++;", "+        }", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ASSIGN:", "+          jj_consume_token(ASSIGN);", "+          exp = variableInitializer();", "+          break;", "+        default:", "+          jj_la1[28] = jj_gen;", "+          ;", "+        }", "-    }", "-    jj_consume_token(SEMICOLON);", "+      }", "+      jj_consume_token(SEMICOLON);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid Field Declaration\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73bb66114b3ac3857f09433a9594c37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 79, "signatureBeforeChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-    t = jj_consume_token(FOR);", "-    jj_consume_token(LPAREN);", "-    if (jj_2_31(2147483647)) {", "-      forEachInit = formalParameter();", "-      colon = jj_consume_token(COLON);", "-      exp = expression();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "+    try {", "+      t = jj_consume_token(FOR);", "+      jj_consume_token(LPAREN);", "+      if (jj_2_42(2147483647)) {", "+        forEachInit = formalParameter();", "+        colon = jj_consume_token(COLON);", "+        exp = expression();", "+      } else {", "+        case SEMICOLON:", "-          init = forInit();", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FINAL:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case INCREMENT:", "+          case DECREMENT:", "+            init = forInit();", "+            break;", "+          default:", "+            jj_la1[73] = jj_gen;", "+            ;", "+          }", "+          jj_consume_token(SEMICOLON);", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case BANG:", "+          case TILDE:", "+          case INCREMENT:", "+          case DECREMENT:", "+          case PLUS:", "+          case MINUS:", "+            exp = expression();", "+            break;", "+          default:", "+            jj_la1[74] = jj_gen;", "+            ;", "+          }", "+          jj_consume_token(SEMICOLON);", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case INCREMENT:", "+          case DECREMENT:", "+            update = statementExpressionList();", "+            break;", "+          default:", "+            jj_la1[75] = jj_gen;", "+            ;", "+          }", "-          jj_la1[72] = jj_gen;", "-          ;", "+          jj_la1[76] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "-        jj_consume_token(SEMICOLON);", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case BOOLEAN:", "-        case BYTE:", "-        case CHAR:", "-        case DOUBLE:", "-        case FALSE:", "-        case FLOAT:", "-        case INT:", "-        case LONG:", "-        case NEW:", "-        case NULL:", "-        case SHORT:", "-        case SUPER:", "-        case THIS:", "-        case TRUE:", "-        case VOID:", "-        case INTEGER_LITERAL:", "-        case LONG_LITERAL:", "-        case FLOAT_LITERAL:", "-        case DOUBLE_LITERAL:", "-        case CHARACTER_LITERAL:", "-        case STRING_LITERAL:", "-        case IDENTIFIER:", "-        case LPAREN:", "-        case BANG:", "-        case TILDE:", "-        case INCREMENT:", "-        case DECREMENT:", "-        case PLUS:", "-        case MINUS:", "-          exp = expression();", "-          break;", "-        default:", "-          jj_la1[73] = jj_gen;", "-          ;", "-        }", "-        jj_consume_token(SEMICOLON);", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case BOOLEAN:", "-        case BYTE:", "-        case CHAR:", "-        case DOUBLE:", "-        case FALSE:", "-        case FLOAT:", "-        case INT:", "-        case LONG:", "-        case NEW:", "-        case NULL:", "-        case SHORT:", "-        case SUPER:", "-        case THIS:", "-        case TRUE:", "-        case VOID:", "-        case INTEGER_LITERAL:", "-        case LONG_LITERAL:", "-        case FLOAT_LITERAL:", "-        case DOUBLE_LITERAL:", "-        case CHARACTER_LITERAL:", "-        case STRING_LITERAL:", "-        case IDENTIFIER:", "-        case LPAREN:", "-        case INCREMENT:", "-        case DECREMENT:", "-          update = statementExpressionList();", "-          break;", "-        default:", "-          jj_la1[74] = jj_gen;", "-          ;", "-        }", "-        break;", "-      default:", "-        jj_la1[75] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "-    }", "-    jj_consume_token(RPAREN);", "-    stmt = statement();", "-        if(colon != null){", "-          {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "-                                  filename,", "-                                  t.beginLine, t.beginColumn,", "-                                  stmt.getEndLine(), stmt.getEndColumn());}", "-        }else{", "-          {if (true) return new ForStatement(init, exp, update, stmt,", "-                                  filename,", "-                                  t.beginLine, t.beginColumn,", "-                                  stmt.getEndLine(), stmt.getEndColumn());}", "+      jj_consume_token(RPAREN);", "+      stmt = statement();", "+      if(colon != null){", "+        {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "+                                    filename,", "+                                    t.beginLine, t.beginColumn,", "+                                    stmt.getEndLine(), stmt.getEndColumn());}", "+      }else{", "+        {if (true) return new ForStatement(init, exp, update, stmt,", "+                                filename,", "+                                t.beginLine, t.beginColumn,", "+                                stmt.getEndLine(), stmt.getEndColumn());}", "-        }", "+      }", "+    } catch (ParseException pe) {", "+    _throwParseException(pe,\"Invalid for statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd97fcaae149c6c643bbd6492e7c84b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "signatureAfterChange": "   final public MethodDeclaration methodDeclaration() throws ParseException", "diff": ["-    mf = modifiers();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LESS:", "-      typeParameters = TypeParameters();", "-      break;", "-    default:", "-      jj_la1[28] = jj_gen;", "-      ;", "-    }", "-    typ = resultType();", "-    id = jj_consume_token(IDENTIFIER);", "-    params = formalParameters();", "-    label_12:", "-    while (true) {", "+    try {", "+      mf = modifiers();", "-      case LBRACKET:", "-        ;", "+      case LESS:", "+        typeParameters = TypeParameters();", "-        break label_12;", "+        ;", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "-                  dim++;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case THROWS:", "-      jj_consume_token(THROWS);", "-      exceptions = ReferenceTypeNameList();", "-      break;", "-    default:", "-      jj_la1[30] = jj_gen;", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case LBRACE:", "-      body = block();", "-      break;", "-    case SEMICOLON:", "-      body = emptyStatement();", "-      break;", "-    default:", "-      jj_la1[31] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "-    }", "-        if (mf != null) {", "-          bl    = mf.beginLine;", "-          bc    = mf.beginColumn;", "-          flags = mf.accessFlags;", "-        } else {", "-          bl = typ.getBeginLine();", "-          bc = typ.getBeginColumn();", "+      typ = resultType();", "+      id = jj_consume_token(IDENTIFIER);", "+      params = formalParameters();", "+      label_12:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACKET:", "+          ;", "+          break;", "+        default:", "+          jj_la1[30] = jj_gen;", "+          break label_12;", "-        if (dim > 0) {", "-          typ = new ArrayType(typ, dim,", "-                              filename,", "-                              typ.getBeginLine(), typ.getBeginColumn(),", "-                              typ.getEndLine(),   typ.getEndColumn());", "-        }", "-        if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "+        jj_consume_token(LBRACKET);", "+        jj_consume_token(RBRACKET);", "+                    dim++;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case THROWS:", "+        jj_consume_token(THROWS);", "+        exceptions = ReferenceTypeNameList();", "+        break;", "+      default:", "+        jj_la1[31] = jj_gen;", "+        ;", "+      }", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case LBRACE:", "+        body = block();", "+        break;", "+      case SEMICOLON:", "+        body = emptyStatement();", "+        break;", "+      default:", "+        jj_la1[32] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+          if (mf != null) {", "+            bl    = mf.beginLine;", "+            bc    = mf.beginColumn;", "+            flags = mf.accessFlags;", "+          } else {", "+            bl = typ.getBeginLine();", "+            bc = typ.getBeginColumn();", "+          }", "+          if (dim > 0) {", "+            typ = new ArrayType(typ, dim,", "+                                filename,", "+                                typ.getBeginLine(), typ.getBeginColumn(),", "+                                typ.getEndLine(),   typ.getEndColumn());", "+          }", "+          if(lastFormalParameterIsVarArgs) flags |= 0x00000080; // Modifier.VARARGS == 0x00000080 /**/", "-        if (typeParameters == null){", "+          if (typeParameters == null){", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid method declaration\");", "+    }"]}], "num": 30361}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44f3546b97ca44a3ee85f56e2f7a3994", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d4a3f8ae6dd4aafb86a2b9746474aec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e8e7b9af48836843d95cf762a0065ea193eba11c", "commitAfterChange": "2d7803b4373e597bc80bac74af03902c103ef61c", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "    private void _open()", "signatureAfterChange": "    private void _open()", "diff": ["-      // Switch to existing copy after prompting user", "-      /* This prompt is removed until it can provide a useful revert option. */", "-//       String title = \"File already open\";", "-//       String message = filename + \" is already open.\\n\" +", "-//         \"Click OK to switch to the open copy\\n\" +", "-//         \"or Cancel to return to the previous file.\";", "-//       int choice = JOptionPane.showConfirmDialog(this,", "-//                                                  message,", "-//                                                  title,", "-//                                                  JOptionPane.OK_CANCEL_OPTION);", "-//       if (choice == JOptionPane.OK_OPTION) {", "-", "+      // Always switch to doc", "-//       }", "+      ", "+      // Prompt to revert if modified", "+      if (openDoc.isModifiedSinceSave()) {", "+        String title = \"Revert to Saved?\";", "+        String message = filename + \" is already open and modified.\\n\" +", "+          \"Would you like to revert to the version on disk?\\n\";", "+        int choice = JOptionPane.showConfirmDialog(this,", "+                                                   message,", "+                                                   title,", "+                                                   JOptionPane.YES_NO_OPTION);", "+        if (choice == JOptionPane.YES_OPTION) {", "+          _revert();", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8521c8924894d87c15e143796fbbb4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "f1cdd8ab40ec812de32945f859fe4268e830f213", "commitAfterChange": "03b2d2796342d42693cf58d323df575cbd1df053", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public static boolean checkForJSR14v20()", "signatureAfterChange": "   public static boolean checkForJSR14v20()", "diff": ["+          ", "+          // If we're using Java 1.3, don't allow JSR14v20", "+          if (System.getProperty(\"java.specification.version\").equals(\"1.3\")) {", "+            // Show a warning message, but only if we haven't restarted", "+            if (!_attemptingAugmentedClasspath) {", "+              String msg = \"The JSR-14 v2.0 compiler is not compatible with JDK 1.3.\\n\" +", "+                \"It will not be available in your list of compilers.\";", "+              String title = \"Cannot Load JSR-14 v2.0\";", "+              JOptionPane.showMessageDialog(null, msg, title,", "+                                            JOptionPane.WARNING_MESSAGE);", "+            }", "+            return false;", "+          }", "+          ", "-/* ", "-      try {", "-        URL[] urls = new URL[] { jsr14.toURL() };", "-        URLClassLoader cl = new URLClassLoader(urls);", "-        cl.loadClass(\"com.sun.tools.javac.comp.Check\");", "-        //System.out.println(\"Using JSR14v20 is true!\");", "-        return true;", "-      }", "-      catch (Throwable t) {", "-        // failed to load class, so we're not using jsr14 v2.0", "-      }", "-*/", "-      // this method fails if JSR14 v2.0 is on the classpath but a different", "-      // version is specified in the preferences.", "+"]}], "num": 1165}
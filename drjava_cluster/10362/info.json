{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfaa75f55f837a162fd7ffce98de3a03", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06feb9cca1f6c77e0edf904b2274d864", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)     throws BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(int pos, boolean acceptComments)       throws BadLocationException", "diff": ["+   */", "+  public int getFirstNonWSCharPos(int pos, boolean acceptComments)", "+      throws BadLocationException {", "+    char[] whitespace = {' ', '\\t', '\\n'};", "+    return getFirstNonWSCharPos(pos, whitespace, acceptComments);", "+  }", "-  public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)", "-    throws BadLocationException", "-        // Check if non-ws char is in comment", "-        if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-          /*", "-          int tokenSize = _reduced.currentToken().getSize();", "-          int offset = _reduced.getBlockOffset();", "-          //DrJava.consoleOut().println(\"     token len: \" + tokenSize +", "-          //                            \", offset: \" + offset);", "-          //DrJava.consoleOut().println(\"     token before: \" + _reduced.currentToken().getState());", "-          _reduced.move(tokenSize - offset);", "-          i += tokenSize - offset;", "-          //DrJava.consoleOut().println(\"     token after: \" + _reduced.currentToken().getState());", "-          */", "-          if(_isStartOfComment(text, i - pos)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b2b7e86eb68be9349b2351be53f1d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)     throws BadLocationException", "signatureAfterChange": "   public synchronized int getFirstNonWSCharPos     (int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "diff": ["-  public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)", "-    throws BadLocationException", "+  public synchronized int getFirstNonWSCharPos", "+    (int pos, char[] whitespace, boolean acceptComments) throws BadLocationException", "-        // Check if non-ws char is in comment", "-        if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-           (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+        // Check if non-ws char is in comment, and we want to ignore them.", "+        if (!acceptComments &&", "+            ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+             (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))))", "+        {", "-          /*", "-          int tokenSize = _reduced.currentToken().getSize();", "-          int offset = _reduced.getBlockOffset();", "-          //DrJava.consoleOut().println(\"     token len: \" + tokenSize +", "-          //                            \", offset: \" + offset);", "-          //DrJava.consoleOut().println(\"     token before: \" + _reduced.currentToken().getState());", "-          _reduced.move(tokenSize - offset);", "-          i += tokenSize - offset;", "-          //DrJava.consoleOut().println(\"     token after: \" + _reduced.currentToken().getState());", "-          */", "+//          int tokenSize = _reduced.currentToken().getSize();", "+//          int offset = _reduced.getBlockOffset();", "+//          //DrJava.consoleOut().println(\"     token len: \" + tokenSize +", "+//          //                            \", offset: \" + offset);", "+//          //DrJava.consoleOut().println(\"     token before: \" + _reduced.currentToken().getState());", "+//          _reduced.move(tokenSize - offset);", "+//          i += tokenSize - offset;", "+//          //DrJava.consoleOut().println(\"     token after: \" + _reduced.currentToken().getState());", "+", "-          if(_isStartOfComment(text, i - pos)) {", "+          if(!acceptComments && _isStartOfComment(text, i - pos)) {"]}], "num": 10362}
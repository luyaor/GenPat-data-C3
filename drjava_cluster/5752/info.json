{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b005c86f21d70bcb386cc50ab466979e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08b51e6a5e65ed7e9aad179a87a9340b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testStartsWithPrefixWithText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixWithText() throws BadLocationException", "diff": ["-    assertTrue(\"line of brace (no space)\", !rule.applyRule(_doc, 2));", "-    assertTrue(\"line after brace (no space)\", rule.applyRule(_doc, 8));", "-    assertTrue(\"two lines after brace (no space)\", !rule.applyRule(_doc, 16));", "+    assertTrue(\"line of brace (no space)\", !rule.applyRule(_doc, 2, Indenter.OTHER));", "+    assertTrue(\"line after brace (no space)\", rule.applyRule(_doc, 8, Indenter.OTHER));", "+    assertTrue(\"two lines after brace (no space)\", !rule.applyRule(_doc, 16, Indenter.OTHER));", "-    assertTrue(\"just before star (with space)\", !rule.applyRule(_doc, 4));", "-    assertTrue(\"just after star (with space)\", !rule.applyRule(_doc, 6));", "-    assertTrue(\"line after star (with space)\", rule.applyRule(_doc, 16));", "+    assertTrue(\"just before star (with space)\", !rule.applyRule(_doc, 4, Indenter.OTHER));", "+    assertTrue(\"just after star (with space)\", !rule.applyRule(_doc, 6, Indenter.OTHER));", "+    assertTrue(\"line after star (with space)\", rule.applyRule(_doc, 16, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d255bf9bb77a43da80726e0d82d8780d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "diff": ["-    assertTrue(\"line of star (no space)\", !rule.applyRule(_doc, 8));", "-    assertTrue(\"line after star (no space)\", rule.applyRule(_doc, 10));", "-    assertTrue(\"two lines after star (no space)\", !rule.applyRule(_doc, 16));", "+    assertTrue(\"line of star (no space)\", !rule.applyRule(_doc, 8, Indenter.OTHER));", "+    assertTrue(\"line after star (no space)\", rule.applyRule(_doc, 10, Indenter.OTHER));", "+    assertTrue(\"two lines after star (no space)\", !rule.applyRule(_doc, 16, Indenter.OTHER));", "-    assertTrue(\"line of star (with space)\", !rule.applyRule(_doc, 7));", "-    assertTrue(\"just after star (with space)\", !rule.applyRule(_doc, 11));", "-    assertTrue(\"line after star (with space)\", rule.applyRule(_doc, 13));", "+    assertTrue(\"line of star (with space)\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "+    assertTrue(\"just after star (with space)\", !rule.applyRule(_doc, 11, Indenter.OTHER));", "+    assertTrue(\"line after star (with space)\", rule.applyRule(_doc, 13, Indenter.OTHER));"]}], "num": 5752}
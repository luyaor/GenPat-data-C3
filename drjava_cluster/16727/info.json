{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c7c1c278363af50a604a44988ebd411", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39bd575382815b0db8b7db7f757cbc8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          final String classpath)     throws IOException", "signatureAfterChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver, final String classpath)      throws IOException", "diff": ["-  public void javadocAll(DirectorySelector select, final FileSaveSelector saver,", "-                         final String classpath)", "-    throws IOException", "-  {", "+  public void javadocAll(DirectorySelector select, final FileSaveSelector saver, final String classpath) ", "+    throws IOException {", "+    ", "-", "-    if (_getter.hasModifiedDocuments()) {", "-      // if any files haven't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the operation.", "-      return;", "-    }", "-", "+    if (_getter.hasModifiedDocuments()) { return; }  /* abort if files remain unsaved */", "+    ", "-", "-    boolean noneYet = true;", "-    int numDocs = docs.size();", "-    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "-      OpenDefinitionsDocument doc = docs.get(i);", "-      noneYet = doc.isUntitled();", "+    ", "+    for (OpenDefinitionsDocument doc: docs) {", "+      if (doc.isUntitled()) return;  // ignore javadoc, since a document is still unsaved", "-", "-    // If there are no saved files, ignore the javadoc command.", "-    if (noneYet) {", "-      return;", "-    }", "-", "+    ", "-", "+    ", "-        // This is the default, stock behavior of a new install.", "-        // If no destination is set, don't pass anything to the ui command.", "-        // Let the command object decide what to do.", "+        /* This is the default, stock behavior of a new install. If no destination is set, don't pass ", "+         anything to the ui command. Let the command object decide what to do. */", "-      else {", "+      else", "-      }", "-", "+      ", "-            (\"The directory you chose does not exist:\\\\n\" +", "-             \"'\" + destDir + \"'\\n\" +", "-             \"Would you like to create it?\",", "+            (\"The directory you chose does not exist:\\\\n'\" + destDir + \"'\\nWould you like to create it?\",", "-            if (!dirMade) {", "-              throw new IOException(\"Could not create directory: \" + destDir);", "-            }", "+            if (! dirMade) throw new IOException(\"Could not create directory: \" + destDir);", "-          else {", "-            return;", "-          }", "+          else return;", "-    catch (OperationCanceledException oce) {", "-      // If the user cancels anywhere, silently return.", "-      return;", "-    }", "-", "+    catch (OperationCanceledException oce) { return; } // If the user cancels anywhere, silently return.", "+  ", "-      public void run() {", "-        _javadocAllWorker(destDirF, saver, classpath);", "-      }", "+      public void run() { _javadocAllWorker(destDirF, saver, classpath); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9286361c83397602de01784e010a869", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private void _javadocAllWorker(File destDirFile,                                  FileSaveSelector saver,                                  String classpath)", "signatureAfterChange": "   private void _javadocAllWorker(File destDirFile, FileSaveSelector saver, String classpath)", "diff": ["-  private void _javadocAllWorker(File destDirFile,", "-                                 FileSaveSelector saver,", "-                                 String classpath)", "-  {", "-    if (!_ensureValidToolsJar()) {", "-      return;", "-    }", "+  private void _javadocAllWorker(File destDirFile, FileSaveSelector saver, String classpath) {", "+    ", "+    if (!_ensureValidToolsJar()) return;", "-    HashSet<String> docUnits = new HashSet<String>();  // units to send to Javadoc (packages or files)", "-    HashSet<File> sourceRootSet = new HashSet<File>();  // set of unique source roots for open files", "-    HashSet<File> defaultRoots = new HashSet<File>();  // source roots for files in default package", "-    HashSet<String> topLevelPacks = new HashSet<String>();  // top level package names to include", "+    HashSet<String> docUnits      = new HashSet<String>(); // units to send to Javadoc (packages or files)", "+    HashSet<File>   sourceRootSet = new HashSet<File>();   // set of unique source roots for open files", "+    HashSet<File>   defaultRoots  = new HashSet<File>();   // source roots for files in default package", "+    HashSet<String> topLevelPacks = new HashSet<String>(); // top level package names to include", "-    for (int i = 0; i < docs.size(); i++) {", "-      OpenDefinitionsDocument doc = docs.get(i);", "+    for (OpenDefinitionsDocument doc: docs) {", "-        if (file == null) {", "-          throw new IllegalStateException(\"No file for this document.\");", "-        }", "+        if (file == null) throw new IllegalStateException(\"No file for this document.\");", "-          if (!defaultRoots.contains(sourceRoot)) {", "+          if (! defaultRoots.contains(sourceRoot)) {", "-", "-            for (int j = 0; j < javaFiles.length; j++) {", "-              docUnits.add(javaFiles[j].getAbsolutePath());", "-            }", "+            for (File f: javaFiles) { docUnits.add(f.getAbsolutePath());}", "-            searchRoot = new File(sourceRoot,", "-                                  pack.replace('.', File.separatorChar));", "+            searchRoot = new File(sourceRoot, pack.replace('.', File.separatorChar));", "-          if (!topLevelPacks.contains(topLevelPack)", "-                || !sourceRootSet.contains(sourceRoot)) {", "+          if (! topLevelPacks.contains(topLevelPack) || ! sourceRootSet.contains(sourceRoot)) {", "-    if (docUnits.size() == 0) {", "-      return;", "-    }", "+    if (docUnits.size() == 0) return;", "-      if (a != 0) {", "-        sourcePath.append(separator);", "-      }", "+      if (a != 0)  sourcePath.append(separator);", "-"]}], "num": 16727}
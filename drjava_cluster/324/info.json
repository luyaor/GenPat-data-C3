{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "007e26f167e13180db8282c6195ad4fb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30cacd0d87378217f87ce3f24f9c400f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "606df60980e3cc99d6da6907f3f1ce716cb9aae3", "commitAfterChange": "dbed8a61b502959ade9624734104a39bb55bea38", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ArrayList<String> getLookAndFeels()", "signatureAfterChange": "     public static ArrayList<String> getLookAndFeels()", "diff": ["+      if(!_registered) {", "+        for(String[] newLaf : _registerLAFs) {", "+          try {", "+            Class.forName(newLaf[1]);", "+          } catch(ClassNotFoundException ex) {", "+            continue;", "+          }", "+          UIManager.installLookAndFeel(newLaf[0], newLaf[1]);", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5115e1d08fd5eca35a3b6eb08a4d0ac6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "4539df5303e52babbf266acd5ad130e809adc998", "commitAfterChange": "b695cac3782ec029c31eea7503f645530ef37186", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "      private OpenDefinitionsDocument _openFiles(File[] files)    throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "      private OpenDefinitionsDocument _openFiles(File[] files)    throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["+    LinkedList<File> lof = new LinkedList<File>();", "+    ", "+      }catch(FileNotFoundException e){", "+        lof.add(files[i]);", "+    ", "+    for(File f: lof){", "+      _notifier.fileNotFound(f);", "+    }", "+    ", "+    ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc65c080b41020a32799a4e6c3abbfea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "52434f6649577bc83989d279c33ddbe6369a078c", "commitAfterChange": "bfc3e0843658fe88dfa445991b253f3abfe88628", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 95, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["+    final LinkedList<OpenDefinitionsDocument> filesOpened = new LinkedList<OpenDefinitionsDocument>();", "-        retDoc = _openFile(f.getAbsoluteFile());", "+        retDoc = _rawOpenFile(f.getAbsoluteFile());", "+        filesOpened.add(retDoc);", "+    ", "+    for(final OpenDefinitionsDocument d: filesOpened){", "+      addDocToNavigator(d);", "+      addDocToClasspath(d);", "+      _notifier.fileOpened(d);", "+    }", "+    ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b8461cc9a0beccaeb825dfd9d09602", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void updateLines(R r)", "signatureAfterChange": "   public void updateLines(R firstRegion, R lastRegion)", "diff": ["-    * necessarily a region in this manager.  */", "-  public void updateLines(R r) { ", "+    */", "+  public void updateLines(R firstRegion, R lastRegion) { ", "-    SortedSet<R> tail = getTailSet(r);", "+    SortedSet<R> tail = getTailSet(firstRegion);", "+    LinkedList<R> toBeRemoved = new LinkedList<R>();  // nonsense to avoid concurrent modification exception", "-    for (OrderedDocumentRegion region: tailRegions) {", "-      // The following cast is gross, but the silly erasure based generics won't let me execute new R[0]", "-      if (region.getStartOffset() == region.getEndOffset()) removeRegion((R) region);", "-      region.update();", "+    for (R region: tail) {", "+      if (region.compareTo(lastRegion) > 0) break;", "+      if (region.getStartOffset() == region.getEndOffset()) toBeRemoved.add(region); ", "+      else region.update();  // The bounds of this region must be recomputed.", "+", "+    for (R r: toBeRemoved) removeRegion(r);"]}], "num": 324}
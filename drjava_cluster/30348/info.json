{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e48e135418e80d7a1580b04a65a05d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f2108dead952d19408e9cbc755eae59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "commitAfterChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor)", "signatureAfterChange": "\r   public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor)", "diff": ["-   */", "-  public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor) {", "-    VendorType vendor = VendorType.UNKNOWN;", "-    String vendorString = null;", "-    if (java_runtime_name.toLowerCase().contains(\"openjdk\")) {", "-      vendor = VendorType.OPENJDK;", "-      vendorString = \"OpenJDK\";", "-    }", "-    else if (java_vm_vendor.toLowerCase().contains(\"apple\")) {", "-      vendor = VendorType.APPLE;", "-      vendorString = \"Apple\";", "-    }", "-    else if (java_vm_vendor.toLowerCase().contains(\"sun\")) {", "-      vendor = VendorType.SUN;", "-      vendorString = \"Sun\";", "-    }", "-    ", "-    String number;", "-    String typeString;", "-    int dash = java_version.indexOf('-');", "-    if (dash == -1) { number = java_version; typeString = null; }", "-    else { number = java_version.substring(0, dash); typeString = java_version.substring(dash+1); }", "-    ", "-    int dot1 = number.indexOf('.');", "-    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "-                                             ReleaseType.STABLE, null,", "-                                             vendor, vendorString); }", "-    int dot2 = number.indexOf('.', dot1+1);", "-    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "-                                             ReleaseType.STABLE, null,", "-                                             vendor, vendorString); }", "-    int underscore = number.indexOf('_', dot2+1);", "-    if (underscore == -1) { underscore = number.indexOf('.', dot2+1); }", "-    if (underscore == -1) { underscore = number.length(); }", "-    try {", "-      int major = Integer.parseInt(number.substring(0, dot1));", "-      int feature = Integer.parseInt(number.substring(dot1+1, dot2));", "-      int maintenance = Integer.parseInt(number.substring(dot2+1, underscore));", "-      int update = (underscore >= number.length()) ? 0 : Integer.parseInt(number.substring(underscore+1));", "-      ", "-      ReleaseType type;", "-      if (typeString == null) { type = ReleaseType.STABLE; }", "-      else if (typeString.startsWith(\"ea\")) { type = ReleaseType.EARLY_ACCESS; }", "-      else if (typeString.startsWith(\"beta\")) { type = ReleaseType.BETA; }", "-      else if (typeString.startsWith(\"rc\")) { type = ReleaseType.RELEASE_CANDIDATE; }", "-      else { type = ReleaseType.UNRECOGNIZED; }", "-      ", "-      JavaVersion version = UNRECOGNIZED;", "-      if (major == 1) {", "-        switch (feature) {", "-          case 1: version = JAVA_1_1; break;", "-          case 2: version = JAVA_1_2; break;", "-          case 3: version = JAVA_1_3; break;", "-          case 4: version = JAVA_1_4; break;", "-          case 5: version = JAVA_5; break;", "-          case 6: version = JAVA_6; break;", "-          case 7: version = JAVA_7; break;", "-          default: if (feature > 7) { version = FUTURE; } break;", "-        }", "-      }", "-      ", "-      return new FullVersion(version, maintenance, update,", "-                             type, typeString,", "-                             vendor, vendorString);", "-    }", "-    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0,", "-                                                             ReleaseType.STABLE, null,", "-                                                             vendor, vendorString); }", "-  }", "+   */\r", "+  public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor) {\r", "+    VendorType vendor = VendorType.UNKNOWN;\r", "+    String vendorString = null;\r", "+    if (java_runtime_name.toLowerCase().contains(\"mint\")) {\r", "+      vendor = VendorType.MINT;\r", "+      vendorString = \"Mint\";\r", "+    }\r", "+    if (java_runtime_name.toLowerCase().contains(\"openjdk\")) {\r", "+      vendor = VendorType.OPENJDK;\r", "+      vendorString = \"OpenJDK\";\r", "+    }\r", "+    else if (java_vm_vendor.toLowerCase().contains(\"apple\")) {\r", "+      vendor = VendorType.APPLE;\r", "+      vendorString = \"Apple\";\r", "+    }\r", "+    else if (java_vm_vendor.toLowerCase().contains(\"sun\")) {\r", "+      vendor = VendorType.SUN;\r", "+      vendorString = \"Sun\";\r", "+    }\r", "+    \r", "+    String number;\r", "+    String typeString;\r", "+    int dash = java_version.indexOf('-');\r", "+    if (dash == -1) { number = java_version; typeString = null; }\r", "+    else { number = java_version.substring(0, dash); typeString = java_version.substring(dash+1); }\r", "+    \r", "+    int dot1 = number.indexOf('.');\r", "+    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,\r", "+                                             ReleaseType.STABLE, null,\r", "+                                             vendor, vendorString); }\r", "+    int dot2 = number.indexOf('.', dot1+1);\r", "+    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,\r", "+                                             ReleaseType.STABLE, null,\r", "+                                             vendor, vendorString); }\r", "+    int underscore = number.indexOf('_', dot2+1);\r", "+    if (underscore == -1) { underscore = number.indexOf('.', dot2+1); }\r", "+    if (underscore == -1) { underscore = number.length(); }\r", "+    try {\r", "+      int major = Integer.parseInt(number.substring(0, dot1));\r", "+      int feature = Integer.parseInt(number.substring(dot1+1, dot2));\r", "+      int maintenance = Integer.parseInt(number.substring(dot2+1, underscore));\r", "+      int update = (underscore >= number.length()) ? 0 : Integer.parseInt(number.substring(underscore+1));\r", "+      \r", "+      ReleaseType type;\r", "+      if (typeString == null) { type = ReleaseType.STABLE; }\r", "+      else if (typeString.startsWith(\"ea\")) { type = ReleaseType.EARLY_ACCESS; }\r", "+      else if (typeString.startsWith(\"beta\")) { type = ReleaseType.BETA; }\r", "+      else if (typeString.startsWith(\"rc\")) { type = ReleaseType.RELEASE_CANDIDATE; }\r", "+      else { type = ReleaseType.UNRECOGNIZED; }\r", "+      \r", "+      JavaVersion version = UNRECOGNIZED;\r", "+      if (major == 1) {\r", "+        switch (feature) {\r", "+          case 1: version = JAVA_1_1; break;\r", "+          case 2: version = JAVA_1_2; break;\r", "+          case 3: version = JAVA_1_3; break;\r", "+          case 4: version = JAVA_1_4; break;\r", "+          case 5: version = JAVA_5; break;\r", "+          case 6: version = JAVA_6; break;\r", "+          case 7: version = JAVA_7; break;\r", "+          default: if (feature > 7) { version = FUTURE; } break;\r", "+        }\r", "+      }\r", "+      \r", "+      return new FullVersion(version, maintenance, update,\r", "+                             type, typeString,\r", "+                             vendor, vendorString);\r", "+    }\r", "+    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0,\r", "+                                                             ReleaseType.STABLE, null,\r", "+                                                             vendor, vendorString); }\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e5e93e1d27f18c9c1bfc3dbe173c42b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "e02b291d62bdaa0ea7b37dd3f2ab84515aaa6d58", "commitAfterChange": "8d09927a54fdf6b15f8ba5f6b7e80366b0cf24be", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   protected void colorVariables(final JTextPane pane,                                 final DocumentListener dl,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "signatureAfterChange": "   protected void colorVariables(final JTextPane pane,                                 final PropertyMaps props,                                 final DocumentListener dl,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "diff": ["+                                final PropertyMaps props,", "+        BalancingStreamTokenizer tok = new BalancingStreamTokenizer(new StringReader(str));", "+        tok.wordRange(0,255);", "+        tok.addQuotes(\"${\", \"}\");", "+", "+        int pos = 0;", "+        String next = null;", "-//          int pos = str.indexOf(\"${\");", "-//          int bsPos = str.indexOf(\"\\\\\\\\\");", "-//          if ((bsPos!=-1) && (bsPos<pos)) { pos = bsPos; }", "-          int pos = 0;", "-          SimpleAttributeSet sas = variable;", "-          // LOG.log(str);", "-          while((str.length()>0)&&(pos>=0)&&(pos<str.length())) {", "-            // LOG.log(\"pos = \"+pos); ", "-            // see if this is an escaped \\ (\\\\)", "-            if ((str.charAt(pos)=='\\\\') &&", "-                (pos<str.length()-1) &&", "-                (str.charAt(pos+1)=='\\\\')) {", "-              doc.setCharacterAttributes(pos,pos+1,normal,true);", "-              pos += 2;", "-            }", "-            else if ((str.charAt(pos)=='\\\\') &&", "-                     (pos<str.length()-1) &&", "-                     (str.charAt(pos+1)=='$')) {", "-              // escaped $ (\\$)", "-              doc.setCharacterAttributes(pos,pos+1,normal,true);", "-              pos += 2;", "-            }", "-            else if ((str.charAt(pos)=='$') &&", "-                     (pos<str.length()-1) &&", "-                     (str.charAt(pos+1)=='{')) {", "-              // beginning of what should be a ${variable}", "-              boolean found = false;", "-              for(String category: PropertyMaps.ONLY.getCategories()) {", "-                for(DrJavaProperty prop: PropertyMaps.ONLY.getProperties(category).values()) {", "-                  String key = prop.getName();", "-                  int endPos = pos + key.length() + 3;", "-                  if (str.substring(pos, Math.min(str.length(), endPos)).equals(\"${\"+key+\"}\")) {", "-                    // found property name", "-                    found = true;", "-                    doc.setCharacterAttributes(pos,endPos-pos,variable,true);", "-                    pos = endPos;", "-                    break;", "-                  }", "-                }", "-              }", "-              if (!found) {", "-                int closePos = str.indexOf('}', pos);", "-                if (closePos!=-1) {", "-                  doc.setCharacterAttributes(pos,closePos-pos+1,error,true);", "-                  pos = closePos+1;", "+          while((next=tok.getNextToken())!=null) {", "+            if (next.startsWith(\"${\")) {", "+              if (next.endsWith(\"}\")) {", "+                String key;", "+                String attrList = \"\";", "+                int firstCurly = next.indexOf('}');", "+                int firstSemi = next.indexOf(';');", "+                if (firstSemi<0) {", "+                  key = next.substring(2,firstCurly);", "-                  doc.setCharacterAttributes(pos,1,error,true);", "-                  ++pos;", "+                  key = next.substring(2,firstSemi);", "+                  attrList = next.substring(firstSemi+1,next.length()-1).trim();", "+                boolean found = false;", "+                for(String category: props.getCategories()) {", "+                  DrJavaProperty p = props.getProperty(category, key);", "+                  if (p!=null) {", "+                    found = true;", "+                    doc.setCharacterAttributes(pos,pos+next.length(),variable,true);", "+", "+                    // found property name", "+                    // if we have a list of attributes", "+                    if (attrList.length()>0) {", "+                      int subpos = pos + 2 + key.length() + 1;", "+                      int added = 0;", "+                      BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList));", "+                      atok.wordRange(0,255);", "+                      atok.addQuotes(\"\\\"\", \"\\\"\");", "+                      atok.addKeyword(\";\");", "+                      atok.addKeyword(\"=\");", "+                      // LOG.log(\"\\tProcessing AttrList\");", "+                      String n = null;", "+                      while((n=atok.getNextToken())!=null) {", "+                        if ((n==null) || n.trim().equals(\";\") || n.trim().equals(\"=\") || n.trim().startsWith(\"\\\"\")) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        String name = n.trim();", "+                        n = atok.getNextToken();", "+                        if ((n==null) || (!n.trim().equals(\"=\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        n = atok.getNextToken();", "+                        if ((n==null) || (!n.trim().startsWith(\"\\\"\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        n = atok.getNextToken();", "+                        if ((n!=null) && (!n.trim().equals(\";\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        if (n!=null) { added += n.length(); }", "+                        try {", "+                          p.getAttribute(name);", "+                        }", "+                        catch(IllegalArgumentException e) {", "+                          doc.setCharacterAttributes(subpos,subpos+added,error,true);", "+                        }", "+                        subpos += added;", "+                      }", "+                    }", "+                  }", "+                  if (found) { break; }", "+                }", "+                if (!found) {", "+                  doc.setCharacterAttributes(pos,pos+next.length(),error,true);", "+                }", "+              }", "+              else {", "+                doc.setCharacterAttributes(pos,pos+next.length(),error,true);", "-              doc.setCharacterAttributes(pos,1,normal,true);", "-              ++pos;", "+              doc.setCharacterAttributes(pos,pos+next.length(),normal,true);", "+            pos += next.length();", "+        catch(Exception e) { /* ignore  */ }"]}], "num": 30348}
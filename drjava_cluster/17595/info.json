{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9120218f9b94cb71a4e7b57ffdebc6b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "676731edaf08fd24786b42c2c763c894", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "signatureAfterChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "diff": ["-      int lineNumber = actions.get(i).getLineNumber();", "+      DocumentDebugAction<?> a = actions.get(i);", "+      int lineNumber = a.getLineNumber();", "-            //actions.get(i).setEnabled(false);", "+            String exactClassName = a.getExactClassName();", "+            if ((exactClassName!=null) && (exactClassName.equals(rt.name()))) {", "+              _manager.printMessage(actions.get(i).toString()+\" not on an executable line; disabled.\");", "+              actions.get(i).setEnabled(false);", "+            }", "-            //i++;", "-        // next line was in condition for if", "-        actions.get(i).createRequests(refTypes);  // This type warning will go away in JDK 1.5", "-        // actions.get(i) has raw type because type parameter in actions is the raw approximation to an existential type /**?", "-", "-//        if (!) {", "-          // if no request created, skip this action", "-          //i++;", "-//        }", "-//        else {", "-          // Experiment: try never removing the action or event request.", "-          //  This way, multiple classloads of this class will always have", "-          //  the DebugActions set properly", "-          /*", "-", "-          // if request created, remove the current action and keep i here", "-          actions.remove(i);", "-          // check if the vector is empty", "-          if (actions.size() == 0) {", "-            _pendingActions.remove(className);", "-            _manager.getEventRequestManager().deleteEventRequest(event.request());", "-          }", "-        */", "-//        }", "+        a.createRequests(refTypes);  // This type warning will go away in JDK 1.5", "-        failedActions.add(actions.get(i));", "-        //i++;", "-       // DrJava.consoleOut().println(\"Exception preparing request!! \" + e);", "+        failedActions.add(a);", "+        // DrJava.consoleOut().println(\"Exception preparing request!! \" + e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "728cf14be4979c1dec6a24fb61942bd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "530cb3b64455d081e962324602750973729aa1fb", "commitAfterChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "signatureAfterChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "diff": ["-    Vector<DebugAction> actions = _pendingActions.get(className);", "-    Vector<DebugAction> failedActions = new Vector<DebugAction>();", "+    ", "+    // Get the pending actions for this class (and inner classes)", "+    Vector<DocumentDebugAction> actions = _pendingActions.get(className);", "+    Vector<DocumentDebugAction> failedActions = ", "+      new Vector<DocumentDebugAction>();", "-    for (int i = 0; i < actions.size();) {", "+    for (int i = 0; i < actions.size(); i++) {", "-      /*", "-      System.out.println(\"i: \"+i+\" actions.size(): \" + actions.size() + ", "-                         \" actions.elementAt(i): \" + actions.elementAt(i) +", "-                         \" actions.elementAt(i).getLineNumber(): \" + ", "-                         actions.elementAt(i).getLineNumber());", "-                         */", "-        List lines = new LinkedList();", "-          lines = rt.locationsOfLine(lineNumber);", "+          List lines = rt.locationsOfLine(lineNumber);", "+          if (lines.size() == 0) {", "+            // Requested line number not in reference type, skip this action", "+            //i++;", "+            continue;", "+          }", "-        }", "-        if (lines.size() == 0) {", "-          i++;", "-        if (!actions.elementAt(i).createRequest(rt)) {", "+        Vector<ReferenceType> refTypes = new Vector<ReferenceType>();", "+        refTypes.addElement(rt);", "+        if (!actions.elementAt(i).createRequests(refTypes)) {", "-          i++;", "+          //i++;", "+          // Experiment: try never removing the action or event request.", "+          //  This way, multiple classloads of this class will always have", "+          //  the DebugActions set properly", "+          /*", "+            ", "+        */", "-        i++;", "+        //i++;"]}], "num": 17595}
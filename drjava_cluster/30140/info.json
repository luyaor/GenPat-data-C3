{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45de3068932e9a190905cdefa34ac381", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b172c78a48be5a14039a2602fd58da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   public static Log makeLog(String descriptor, String defaultName)", "diff": ["-  /** Produce a log corresponding to the given type string. */", "-  private static Log makeLog(String type, String tag) {", "-    if (type != null && TextUtil.contains(type, ',')) {", "-      String[] types = type.split(\",\");", "-      if (types.length == 0) { return makeLog(null, tag); }", "-      else {", "-        Log[] logs = new Log[types.length];", "-        for (int i = 0; i < logs.length; i++) { logs[i] = makeLog(types[i], tag); }", "-        return new LogSplitter(logs);", "-      }", "+   */", "+  public static Log makeLog(String descriptor, String defaultName) {", "+    LogSink sink = makeLogSink(descriptor, defaultName);", "+    if (sink == null) { return VoidLog.INSTANCE; }", "+    else { return new StandardLog(sink); }", "+  }", "-      Log result = null;", "-      String factoryName = System.getProperty(\"plt.log.factory\");", "-      if (factoryName != null) {", "-        int dot = factoryName.lastIndexOf('.');", "-        if (dot >= 0) {", "-          String className = factoryName.substring(0, dot);", "-          String methodName = factoryName.substring(dot+1);", "-          try { result = (Log) ReflectUtil.invokeStaticMethod(className, methodName); }", "-          catch (ReflectException e) {", "-            System.err.println(\"Unable to invoke plt.log.factory: \" + e.getCause());", "-          }", "-          catch (ClassCastException e) {", "-            System.err.println(\"Unable to invoke plt.log.factory: \" + e);", "-          }", "-        }", "-      }", "-      if (result == null) {", "-        try {", "-          if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "-          else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "-          else if (type.startsWith(\"System.out:\")) { result = new SystemOutLog(getParam(type)); }", "-          else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "-          else if (type.startsWith(\"stdout:\")) { result = new SystemOutLog(getParam(type)); }", "-          else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "-          else if (type.startsWith(\"System.err:\")) { result = new SystemErrLog(getParam(type)); }", "-          else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "-          else if (type.startsWith(\"stderr\")) { result = new SystemErrLog(getParam(type)); }", "-          else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "-          else if (type.startsWith(\"file:\")) { result = makeFileLog(getParam(type)); }", "-          else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "-          else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "-          else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "-          else { result = VoidLog.INSTANCE; }", "-        }", "-        catch (Exception e) { result = VoidLog.INSTANCE; }", "-      }", "-      return result;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce3d60820fca006452c4f6eebedc6eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "2fc1b48ae47904f12ff70a4157426a6f949b079b", "commitAfterChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   private static Log makeLog(String type, String tag)", "diff": ["-  /** Produce a log corresponding to the given type string.  {@code type} may be {@code null}. */", "+  /** Produce a log corresponding to the given type string. */", "-    if (type == null) { return VoidLog.INSTANCE; }", "-    else if (TextUtil.contains(type, ',')) {", "+    if (type != null && TextUtil.contains(type, ',')) {", "-      if (types.length == 0) { return VoidLog.INSTANCE; }", "+      if (types.length == 0) { return makeLog(null, tag); }", "-    else if (type.equals(\"System.out\")) { return new SystemOutLog(); }", "-    else if (type.equals(\"stdout\")) { return new SystemOutLog(); }", "-    else if (type.equals(\"System.err\")) { return new SystemErrLog(); }", "-    else if (type.equals(\"stderr\")) { return new SystemErrLog(); }", "-    else if (type.equals(\"file\")) { return new FileLog(new File(tag.toLowerCase() + \"-log.txt\")); }", "-    else if (type.equals(\"assert\")) { return new AssertEmptyLog(); }", "-    else if (type.equals(\"popup\")) { return new PopupLog(tag + \" Log\"); }", "-    else { return VoidLog.INSTANCE; }", "+    else {", "+      Log result = null;", "+      String factoryName = System.getProperty(\"plt.log.factory\");", "+      if (factoryName != null) {", "+        int dot = factoryName.lastIndexOf('.');", "+        if (dot >= 0) {", "+          String className = factoryName.substring(0, dot);", "+          String methodName = factoryName.substring(dot+1);", "+          try { result = (Log) ReflectUtil.invokeStaticMethod(className, methodName); }", "+          catch (ReflectException e) {", "+            System.err.println(\"Unable to invoke plt.log.factory: \" + e.getCause());", "+          }", "+          catch (ClassCastException e) {", "+            System.err.println(\"Unable to invoke plt.log.factory: \" + e);", "+          }", "+        }", "+      }", "+      if (result == null) {", "+        if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "+        else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "+        else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "+        else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "+        else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "+        else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "+        else if (type.startsWith(\"file:\")) { result = makeFileLog(type.substring(5)); }", "+        else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "+        else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "+        else { result = VoidLog.INSTANCE; }", "+      }", "+      return result;", "+    }", "+  }"]}], "num": 30140}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "038b9497309c6569389ef64fc973ff69", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06558bfcf830daf87c745b4b658242da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   @Override public TypeContext visit(ImportDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(ImportDeclaration node)", "diff": ["-        if (ts.containsStaticField(t, member)) { result = result.importField(t.ofClass(), member); }", "-        if (ts.containsStaticMethod(t, member)) { result = result.importMethod(t.ofClass(), member); }", "-        if (ts.containsStaticClass(t, member)) { result = result.importMemberClass(t.ofClass(), member); }", "+        if (ts.containsStaticField(t, member, context.accessModule())) {", "+          result = result.importField(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticMethod(t, member, context.accessModule())) {", "+          result = result.importMethod(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticClass(t, member, context.accessModule())) {", "+          result = result.importMemberClass(t.ofClass(), member);", "+        }", "-            if (ts.containsClass(t, split.second())) {", "+            if (ts.containsClass(t, split.second(), context.accessModule())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b7c5561a36ad645538d163abe6f2ee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-            checkAccessibility(c, node);", "-              classType = ts.lookupStaticClass(outer, className, IterUtil.<Type>empty());", "+              classType = ts.lookupStaticClass(outer, className, IterUtil.<Type>empty(), context.accessModule());", "-          if (ts.containsField(classType, memberName.image())) {", "+          if (ts.containsField(classType, memberName.image(), context.accessModule())) {", "-          else if (ts.containsClass(classType, memberName.image())) {", "+          else if (ts.containsClass(classType, memberName.image(), context.accessModule())) {", "-              ClassType memberType = ts.lookupStaticClass(classType, memberName.image(), IterUtil.<Type>empty());", "-              checkAccessibility(memberType.ofClass(), node);", "+              ClassType memberType = ts.lookupStaticClass(classType, memberName.image(), IterUtil.<Type>empty(),", "+                                                          context.accessModule());"]}], "num": 19109}
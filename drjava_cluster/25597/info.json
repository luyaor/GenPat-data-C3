{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9d9d509b4389c235b6c51e8ad4af127", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "058b19663b6ef8f20a2e696fd414ce6e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "               public void testCreateMethodData()", "signatureAfterChange": "               public void testCreateMethodData()", "diff": ["-      MethodDef mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      MethodDef mdef = new ConcreteMethodDef(NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                    new PrimitiveType(NO_INFO, \"int\"), ", "+                                                    new Word(NO_INFO, \"methodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct.\", \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct.\", ", "+                   \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "-      mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      mdef = new ConcreteMethodDef(NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName2\"),", "+                                                    new PrimitiveType(NO_INFO, \"int\"), ", "+                                                    new Word(NO_INFO, \"methodName2\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-", "-      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "-                                   _abstractMav, ", "-                                   new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))},", "-                                   new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                   new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "-                                   new FormalParameter[] {", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-                                                         false", "-                                                           ),", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-                                                         false", "-                                                           )},", "-                                   new ReferenceType[] { new TypeVariable(JExprParser.NO_SOURCE_INFO, \"X\") }", "-                                   );", "-                                   mdata = new MethodData(\"methodName\", ", "-                                                          _abstractMav, ", "-                                                          new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                                                  new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                                                  new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))}, ", "-                                                          SymbolData.VOID_TYPE, ", "-                                                          new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                                                            new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "-                                                          new String[] { \"X\" },", "-                                                          _sd1,", "-                                                          null);", "-                                                          ", "-                                                          mdata.getParams()[0].setEnclosingData(mdata);", "-                                                          mdata.getParams()[1].setEnclosingData(mdata);", "+      UninitializedVariableDeclarator vd1 = ", "+         new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"double\"), new Word(NO_INFO, \"field1\"));", "+      UninitializedVariableDeclarator vd2 = ", "+         new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"int\"), new Word(NO_INFO, \"field1\"));", "+      mdef = ", "+        new AbstractMethodDef(NO_INFO, ", "+                              _abstractMav, ", "+                              new TypeParameter[] { new TypeParameter(NO_INFO,", "+                                                                      new TypeVariable(NO_INFO, \"T\"),", "+                                                                      new TypeVariable(NO_INFO, \"U\"))},", "+                              new VoidReturn(NO_INFO, \"void\"), ", "+                              new Word(NO_INFO, \"methodName\"),", "+                              new FormalParameter[] {", "+                                new FormalParameter(NO_INFO, vd1, false),", "+                                new FormalParameter(NO_INFO, vd2, false)},", "+                              new ReferenceType[] { new TypeVariable(NO_INFO, \"X\") }", "+                              );", "+      mdata =", "+        new MethodData(\"methodName\", ", "+                       _abstractMav, ", "+                       new TypeParameter[] { new TypeParameter(NO_INFO,", "+                                                               new TypeVariable(NO_INFO, \"T\"),", "+                                                               new TypeVariable(NO_INFO, \"U\"))}, ", "+                       SymbolData.VOID_TYPE, ", "+                       new VariableData[] { ", "+                         new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "+                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new String[] { \"X\" },", "+                       _sd1,", "+                       null);", "+      ", "+      mdata.getParams()[0].setEnclosingData(mdata);", "+      mdata.getParams()[1].setEnclosingData(mdata);", "-", "-           MethodData expectedMethod = _av.createMethodData(mdef, _sd1);", "-           ", "-           // have to add the parameters to the vars manually", "-           mdata.getParams()[0].setEnclosingData(expectedMethod);", "-           mdata.getParams()[1].setEnclosingData(expectedMethod);", "-           mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, expectedMethod) });  ", "-           assertEquals(\"Should return the correct MethodData\", mdata, expectedMethod);", "-           assertEquals(\"There should be 2 errors.\", 2, errors.size());", "-           assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+      ", "+      MethodData expectedMethod = _av.createMethodData(mdef, _sd1);", "+      ", "+      // have to add the parameters to the vars manually", "+      mdata.getParams()[0].setEnclosingData(expectedMethod);", "+      mdata.getParams()[1].setEnclosingData(expectedMethod);", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, ", "+                                                          expectedMethod) });  ", "+      assertEquals(\"Should return the correct MethodData\", mdata, expectedMethod);", "+      assertEquals(\"There should be 2 errors.\", 2, errors.size());", "+      assertEquals(\"The second error message should be correct.\", ", "+                   \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062510af2ea3e2011224020b925e2727", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "591ec87995880046281596623701cb5a561fc66e", "commitAfterChange": "ce73fdb27a8e7aa886580e240ca54bfd98e64031", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public void collapse(Iterator iter)", "signatureAfterChange": "     public void collapse(Iterator iter)", "diff": ["-     */", "+      */", "-      int leftPos;", "-      int rightPos;", "-      Node<T> rightPoint;", "-", "-      if (this._pos > iter._pos) {", "-        leftPos = iter._pos;", "-        rightPos = this._pos;", "-        rightPoint = this._point;", "-", "-        this._point.pred = iter._point;", "-        iter._point.succ = this._point;", "-        //determine new length", "-        ModelList.this._length -= this._pos - iter._pos - 1;", "-        notifyOfCollapse(leftPos, rightPos, rightPoint);", "+      int itPos = iter._pos;", "+      int diff = Math.abs(_pos - itPos);", "+      if (diff <= 1) return; // _pos and iter.pos are either equal or adjacent", "+      ", "+      int leftPos, rightPos;", "+      Node<T> leftPoint, rightPoint;", "+      ", "+      if (_pos > itPos) {", "+        leftPos = itPos;", "+        leftPoint = iter._point;", "+        rightPos = _pos;", "+        rightPoint = _point;", "-      else if (this._pos < iter._pos) {", "-        leftPos = this._pos;", "-        rightPos = iter._pos;", "+      else /* _pos < iter._pos */ {", "+        leftPos = _pos;", "+        leftPoint = _point;", "+        rightPos = itPos;", "-", "-        iter._point.pred = this._point;", "-        this._point.succ = iter._point;", "-", "-        ModelList.this._length -= iter._pos - this._pos - 1;", "-        notifyOfCollapse(leftPos, rightPos, rightPoint);", "-      else { // this._pos == iter._pos", "-      }", "+      ", "+      rightPoint.pred = leftPoint;", "+      leftPoint.succ = rightPoint;", "+      _length -= rightPos - leftPos - 1;  //determine new length", "+      notifyOfCollapse(leftPos, rightPos, rightPoint);"]}], "num": 25597}
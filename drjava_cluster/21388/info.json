{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "113663563d549e70095c452997744099", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aee3933867e958b8200486c20fb807d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 364, "signatureBeforeChange": "      private void _setUpTabs()", "signatureAfterChange": "      private void _setUpTabs()", "diff": ["-    if (_model.getDebugger().isAvailable()) { _breakpointsPanel = new BreakpointsPanel(this); }", "+    if (_model.getDebugger().isAvailable()) {", "+      _breakpointsPanel = new BreakpointsPanel(this);", "+      // hook highlighting listener to breakpoint manager", "+      _model.getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+        /* Called when a breakpoint is added. Must be executed in event thread. */", "+        public void regionAdded(final Breakpoint bp) {", "+          DefinitionsPane bpPane = getDefPaneGivenODD(bp.getDocument());", "+          _documentRegionHighlights.", "+            put(bp, bpPane.getHighlightManager().", "+                  addHighlight(bp.getStartOffset(), bp.getEndOffset(), ", "+                               bp.isEnabled() ? DefinitionsPane.BREAKPOINT_PAINTER", "+                                 : DefinitionsPane.DISABLED_BREAKPOINT_PAINTER));", "+          _updateDebugStatus();", "+        }", "+        ", "+        /** Called when a breakpoint is changed. Must execute in event thread. */", "+        public void regionChanged(Breakpoint bp) { ", "+          regionRemoved(bp);", "+          regionAdded(bp);", "+        }", "+        ", "+        /** Called when a breakpoint is removed. Must be executed in event thread. */", "+        public void regionRemoved(final Breakpoint bp) {      ", "+          HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(bp);", "+          if (highlight != null) highlight.remove();", "+          _documentRegionHighlights.remove(bp);", "+        }", "+      });", "+    }", "+", "+    _bookmarksPanel = new BookmarksPanel(this);", "+    // hook highlighting listener to bookmark manager", "+    _model.getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {      ", "+      public void regionAdded(DocumentRegion r) {", "+        DefinitionsPane bpPane = getDefPaneGivenODD(r.getDocument());", "+        _documentRegionHighlights.", "+          put(r, bpPane.getHighlightManager().", "+                addHighlight(r.getStartOffset(), r.getEndOffset(), DefinitionsPane.BOOKMARK_PAINTER));", "+      }", "+      public void regionChanged(DocumentRegion r) { ", "+        regionRemoved(r);", "+        regionAdded(r);", "+      }", "+      public void regionRemoved(DocumentRegion r) {", "+        HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(r);", "+        if (highlight != null) highlight.remove();", "+        _documentRegionHighlights.remove(r);", "+      }", "+    });", "+    _tabs.addLast(_bookmarksPanel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d761ee3b3a10ff60ee0f1ed79f6108be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 417, "methodNumberAfterChange": 367, "signatureBeforeChange": "     public void breakpointSet(final Breakpoint bp)", "signatureAfterChange": "         public void regionAdded(final Breakpoint bp)", "diff": ["+        /* Called when a breakpoint is added. Must be executed in event thread. */", "+        public void regionAdded(final Breakpoint bp) {", "+          DefinitionsPane bpPane = getDefPaneGivenODD(bp.getDocument());", "+          _documentRegionHighlights.", "+            put(bp, bpPane.getHighlightManager().", "+                  addHighlight(bp.getStartOffset(), bp.getEndOffset(), ", "+                               bp.isEnabled() ? DefinitionsPane.BREAKPOINT_PAINTER", "+                                 : DefinitionsPane.DISABLED_BREAKPOINT_PAINTER));", "+          _updateDebugStatus();", "+        }", "-    /* Must be executed in event thread. */", "-    public void breakpointSet(final Breakpoint bp) {", "-//      // Only change GUI from event-dispatching thread", "-//      Runnable command = new Runnable() {", "-//        public void run() {", "-          DefinitionsPane bpPane = getDefPaneGivenODD(bp.getDocument());", "-          _breakpointHighlights.", "-            put(bp, bpPane.getHighlightManager().", "-                    addHighlight(bp.getStartOffset(), bp.getEndOffset(), ", "-                                 bp.isEnabled() ? DefinitionsPane.BREAKPOINT_PAINTER", "-                                                : DefinitionsPane.DISABLED_BREAKPOINT_PAINTER));", "-          _updateDebugStatus();", "-//        }", "-//      };", "-//      Utilities.invokeLater(command);", "-    }"]}], "num": 21388}
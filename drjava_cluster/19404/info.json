{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e1dcb448e48fdc350ea9f9864da4019", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c178f8bba499caedbf89c53f8c1b8053", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "commitAfterChange": "ff142f6bee221c65d8a36e94ac6a2e4478194666", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   final public ForStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-  final public ForStatement forStatement() throws ParseException {", "+  final public ForSlashEachStatement forStatement() throws ParseException {", "-    List<Node>       init   = null;", "+    FormalParameter forEachInit = null;", "+    List       init   = null;", "-    List<Node>       update = null;", "+    List       update = null;", "+    Token      colon  = null;", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FINAL:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case INCREMENT:", "-    case DECREMENT:", "-      init = forInit();", "-      break;", "-    default:", "-      jj_la1[58] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(SEMICOLON);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case BANG:", "-    case TILDE:", "-    case INCREMENT:", "-    case DECREMENT:", "-    case PLUS:", "-    case MINUS:", "+    if (jj_2_24(2147483647)) {", "+      forEachInit = formalParameter();", "+      colon = jj_consume_token(COLON);", "-      break;", "-    default:", "-      jj_la1[59] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(SEMICOLON);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case INCREMENT:", "-    case DECREMENT:", "-      update = statementExpressionList();", "-      break;", "-    default:", "-      jj_la1[60] = jj_gen;", "-      ;", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case LONG_LITERAL:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case SEMICOLON:", "+      case INCREMENT:", "+      case DECREMENT:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCREMENT:", "+        case DECREMENT:", "+          init = forInit();", "+          break;", "+        default:", "+          jj_la1[58] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCREMENT:", "+        case DECREMENT:", "+        case PLUS:", "+        case MINUS:", "+          exp = expression();", "+          break;", "+        default:", "+          jj_la1[59] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCREMENT:", "+        case DECREMENT:", "+          update = statementExpressionList();", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          ;", "+        }", "+        break;", "+      default:", "+        jj_la1[61] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "-      {if (true) return new ForStatement(init, exp, update, stmt,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              stmt.getEndLine(), stmt.getEndColumn());}", "+        if(colon != null){", "+          {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  stmt.getEndLine(), stmt.getEndColumn());}", "+        }else{", "+          {if (true) return new ForStatement(init, exp, update, stmt,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  stmt.getEndLine(), stmt.getEndColumn());}", "+", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3cad28613ece11b0ad856c71102d787", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 78, "signatureBeforeChange": "   final public SwitchStatement switchStatement() throws ParseException", "signatureAfterChange": "   final public SwitchStatement switchStatement() throws ParseException", "diff": ["-    b = jj_consume_token(SWITCH);", "-    jj_consume_token(LPAREN);", "-    sel = expression();", "-    jj_consume_token(RPAREN);", "-    jj_consume_token(LBRACE);", "-    label_24:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case CASE:", "-      case _DEFAULT:", "-        ;", "-        break;", "-      default:", "-        jj_la1[69] = jj_gen;", "-        break label_24;", "-      }", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case CASE:", "-        jj_consume_token(CASE);", "-        val = expression();", "-        break;", "-      case _DEFAULT:", "-        t = jj_consume_token(_DEFAULT);", "-        break;", "-      default:", "-        jj_la1[70] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "-      }", "-      jj_consume_token(COLON);", "-      label_25:", "+    try {", "+      b = jj_consume_token(SWITCH);", "+      jj_consume_token(LPAREN);", "+      sel = expression();", "+      jj_consume_token(RPAREN);", "+      jj_consume_token(LBRACE);", "+      label_24:", "-        case BOOLEAN:", "-        case BREAK:", "-        case BYTE:", "-        case CHAR:", "-        case CLASS:", "-        case CONTINUE:", "-        case DO:", "-        case DOUBLE:", "-        case ENUM:", "-        case FALSE:", "-        case FINAL:", "-        case FLOAT:", "-        case FOR:", "-        case IF:", "-        case INT:", "-        case INTERFACE:", "-        case LONG:", "-        case NEW:", "-        case NULL:", "-        case RETURN:", "-        case SHORT:", "-        case SUPER:", "-        case SWITCH:", "-        case SYNCHRONIZED:", "-        case THIS:", "-        case THROW:", "-        case TRUE:", "-        case TRY:", "-        case VOID:", "-        case WHILE:", "-        case INTEGER_LITERAL:", "-        case LONG_LITERAL:", "-        case FLOAT_LITERAL:", "-        case DOUBLE_LITERAL:", "-        case CHARACTER_LITERAL:", "-        case STRING_LITERAL:", "-        case IDENTIFIER:", "-        case LPAREN:", "-        case LBRACE:", "-        case SEMICOLON:", "-        case INCREMENT:", "-        case DECREMENT:", "+        case CASE:", "+        case _DEFAULT:", "-          jj_la1[71] = jj_gen;", "-          break label_25;", "+          jj_la1[70] = jj_gen;", "+          break label_24;", "-        stat = blockStatement();", "-      list.addAll(stat);", "-      }", "-      int bl, bc, el, ec;", "-      if (t != null) {", "-        bl = t.beginLine;", "-        bc = t.beginColumn;", "-        el = t.endLine;", "-        ec = t.endColumn;", "-      } else {", "-        bl = val.getBeginLine();", "-        bc = val.getBeginColumn();", "-        el = val.getEndLine();", "-        ec = val.getEndColumn();", "-      }", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case CASE:", "+          jj_consume_token(CASE);", "+          val = expression();", "+          break;", "+        case _DEFAULT:", "+          t = jj_consume_token(_DEFAULT);", "+          break;", "+        default:", "+          jj_la1[71] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        jj_consume_token(COLON);", "+        label_25:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BREAK:", "+          case BYTE:", "+          case CHAR:", "+          case CLASS:", "+          case CONTINUE:", "+          case DO:", "+          case DOUBLE:", "+          case ENUM:", "+          case FALSE:", "+          case FINAL:", "+          case FLOAT:", "+          case FOR:", "+          case IF:", "+          case INT:", "+          case INTERFACE:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case RETURN:", "+          case SHORT:", "+          case SUPER:", "+          case SWITCH:", "+          case SYNCHRONIZED:", "+          case THIS:", "+          case THROW:", "+          case TRUE:", "+          case TRY:", "+          case VOID:", "+          case WHILE:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case LBRACE:", "+          case SEMICOLON:", "+          case INCREMENT:", "+          case DECREMENT:", "+            ;", "+            break;", "+          default:", "+            jj_la1[72] = jj_gen;", "+            break label_25;", "+          }", "+          stat = blockStatement();", "+        list.addAll(stat);", "+        }", "+        int bl, bc, el, ec;", "+        if (t != null) {", "+          bl = t.beginLine;", "+          bc = t.beginColumn;", "+          el = t.endLine;", "+          ec = t.endColumn;", "+        } else {", "+          bl = val.getBeginLine();", "+          bc = val.getBeginColumn();", "+          el = val.getEndLine();", "+          ec = val.getEndColumn();", "+        }", "-      if (list.size() != 0) {", "-        Node n = (Node)list.get(list.size() - 1);", "-        el = n.getEndLine();", "-        ec = n.getEndColumn();", "-      }", "+        if (list.size() != 0) {", "+          Node n = (Node)list.get(list.size() - 1);", "+          el = n.getEndLine();", "+          ec = n.getEndColumn();", "+        }", "-      cases.add(new SwitchBlock(val, (list.size() != 0) ? list : null,", "-                                filename,", "-                                bl, bc, el, ec));", "-      val = null;", "-      t   = null;", "-      if (list.size() != 0) {", "-        list = new LinkedList<Node>();", "+        cases.add(new SwitchBlock(val, (list.size() != 0) ? list : null,", "+                                  filename,", "+                                  bl, bc, el, ec));", "+        val = null;", "+        t   = null;", "+        if (list.size() != 0) {", "+          list = new LinkedList<Node>();", "+        }", "+      e = jj_consume_token(RBRACE);", "+        {if (true) return new SwitchStatement(sel, cases,", "+                                   filename,", "+                                   b.beginLine, b.beginColumn,", "+                                   e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid switch statement\");", "-    e = jj_consume_token(RBRACE);", "-      {if (true) return new SwitchStatement(sel, cases,", "-                                 filename,", "-                                 b.beginLine, b.beginColumn,", "-                                 e.endLine,   e.endColumn);}"]}], "num": 19404}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c23b3ddc26ab94f4f876d2b64f996f83", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04b167dd2a1d0a75b844949a11445aa3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   public Expression checkAssignmentStaticRules(Type lc1, Type rc1,                                                Node node, Expression v)", "signatureAfterChange": "   public Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,                                                  Node node, Expression v)", "diff": ["-  public Expression checkAssignmentStaticRules(Type lc1, Type rc1,", "-                                               Node node, Expression v) {", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "-    ", "+  public Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,", "+                                                 Node node, Expression v) {", "-        if (rc.isPrimitive()) {", "-          Type boxedRc1 = _correspondingRefClass(rc);", "-          Class<?> boxedRc = (Class<?>)boxedRc1;", "-          if (lc.isAssignableFrom(boxedRc)) return _box(v,boxedRc);", "-          if (TigerUtilities.boxesTo(rc, lc)) return _box(v, lc); /* I think this statement is unnecessary.  Corky 6/19/04 */", "-          throw new ExecutionError(\"assignment.types\", node);", "-        }", "+          if (rc.isPrimitive()) {", "+            Class<?> boxedRc = _correspondingRefClass(rc);", "+            if (lc.isAssignableFrom(boxedRc)) return _box(v,boxedRc);", "+            if (TigerUtilities.boxesTo(rc, lc)) return _box(v, lc); /* I think this statement is unnecessary.  Corky 6/19/04 */", "+            throw new ExecutionError(\"assignment.types\", node);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51fc256949e23c665d520b59222f3c52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public Type visit(InnerAllocation node)", "signatureAfterChange": "   public Class<?> visit(InnerAllocation node)", "diff": ["-  public Type visit(InnerAllocation node) {", "+  public Class<?> visit(InnerAllocation node) {", "-    Type ec1 = node.getExpression().acceptVisitor(this);", "-    Class<?> ec = (Class<?>)ec1;", "+    Class<?> ec = node.getExpression().acceptVisitor(this);", "+", "-    Type c1 = type.acceptVisitor(this);", "-    Class<?> c = (Class<?>)c1;", "-    Type dc1 = InterpreterUtilities.getDeclaringClass(c);", "-    Class<?> dc = (Class<?>)dc1;", "-    ", "+    Class<?> c = type.acceptVisitor(this);", "+    Class<?> dc = InterpreterUtilities.getDeclaringClass(c);", "+", "-    ", "-    ", "+", "-        ", "+", "-          cargs[i++] = (Class<?>)it.next().acceptVisitor(this);", "+          cargs[i++] = it.next().acceptVisitor(this);", "-    try { cons = context.lookupConstructor(c, cargs); } ", "-    catch (Exception e) { throw new CatchedExceptionError(e, node); }", "-    ", "+    try {", "+      cons = context.lookupConstructor(c, cargs);", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+    }", "+", "-    ", "+"]}], "num": 6140}
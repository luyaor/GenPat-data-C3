{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c39ae67ec6288ce5e102c984b116fa6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c178f8bba499caedbf89c53f8c1b8053", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "commitAfterChange": "ff142f6bee221c65d8a36e94ac6a2e4478194666", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   final public ForStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-  final public ForStatement forStatement() throws ParseException {", "+  final public ForSlashEachStatement forStatement() throws ParseException {", "-    List<Node>       init   = null;", "+    FormalParameter forEachInit = null;", "+    List       init   = null;", "-    List<Node>       update = null;", "+    List       update = null;", "+    Token      colon  = null;", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FINAL:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case INCREMENT:", "-    case DECREMENT:", "-      init = forInit();", "-      break;", "-    default:", "-      jj_la1[58] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(SEMICOLON);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case BANG:", "-    case TILDE:", "-    case INCREMENT:", "-    case DECREMENT:", "-    case PLUS:", "-    case MINUS:", "+    if (jj_2_24(2147483647)) {", "+      forEachInit = formalParameter();", "+      colon = jj_consume_token(COLON);", "-      break;", "-    default:", "-      jj_la1[59] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(SEMICOLON);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case INCREMENT:", "-    case DECREMENT:", "-      update = statementExpressionList();", "-      break;", "-    default:", "-      jj_la1[60] = jj_gen;", "-      ;", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case LONG_LITERAL:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case SEMICOLON:", "+      case INCREMENT:", "+      case DECREMENT:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCREMENT:", "+        case DECREMENT:", "+          init = forInit();", "+          break;", "+        default:", "+          jj_la1[58] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case BANG:", "+        case TILDE:", "+        case INCREMENT:", "+        case DECREMENT:", "+        case PLUS:", "+        case MINUS:", "+          exp = expression();", "+          break;", "+        default:", "+          jj_la1[59] = jj_gen;", "+          ;", "+        }", "+        jj_consume_token(SEMICOLON);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case INCREMENT:", "+        case DECREMENT:", "+          update = statementExpressionList();", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          ;", "+        }", "+        break;", "+      default:", "+        jj_la1[61] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "-      {if (true) return new ForStatement(init, exp, update, stmt,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              stmt.getEndLine(), stmt.getEndColumn());}", "+        if(colon != null){", "+          {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  stmt.getEndLine(), stmt.getEndColumn());}", "+        }else{", "+          {if (true) return new ForStatement(init, exp, update, stmt,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  stmt.getEndLine(), stmt.getEndColumn());}", "+", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73bb66114b3ac3857f09433a9594c37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 79, "signatureBeforeChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-    t = jj_consume_token(FOR);", "-    jj_consume_token(LPAREN);", "-    if (jj_2_31(2147483647)) {", "-      forEachInit = formalParameter();", "-      colon = jj_consume_token(COLON);", "-      exp = expression();", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "+    try {", "+      t = jj_consume_token(FOR);", "+      jj_consume_token(LPAREN);", "+      if (jj_2_42(2147483647)) {", "+        forEachInit = formalParameter();", "+        colon = jj_consume_token(COLON);", "+        exp = expression();", "+      } else {", "+        case SEMICOLON:", "-          init = forInit();", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FINAL:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case INCREMENT:", "+          case DECREMENT:", "+            init = forInit();", "+            break;", "+          default:", "+            jj_la1[73] = jj_gen;", "+            ;", "+          }", "+          jj_consume_token(SEMICOLON);", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case BANG:", "+          case TILDE:", "+          case INCREMENT:", "+          case DECREMENT:", "+          case PLUS:", "+          case MINUS:", "+            exp = expression();", "+            break;", "+          default:", "+            jj_la1[74] = jj_gen;", "+            ;", "+          }", "+          jj_consume_token(SEMICOLON);", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case BOOLEAN:", "+          case BYTE:", "+          case CHAR:", "+          case DOUBLE:", "+          case FALSE:", "+          case FLOAT:", "+          case INT:", "+          case LONG:", "+          case NEW:", "+          case NULL:", "+          case SHORT:", "+          case SUPER:", "+          case THIS:", "+          case TRUE:", "+          case VOID:", "+          case INTEGER_LITERAL:", "+          case LONG_LITERAL:", "+          case FLOAT_LITERAL:", "+          case DOUBLE_LITERAL:", "+          case CHARACTER_LITERAL:", "+          case STRING_LITERAL:", "+          case IDENTIFIER:", "+          case LPAREN:", "+          case INCREMENT:", "+          case DECREMENT:", "+            update = statementExpressionList();", "+            break;", "+          default:", "+            jj_la1[75] = jj_gen;", "+            ;", "+          }", "-          jj_la1[72] = jj_gen;", "-          ;", "+          jj_la1[76] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "-        jj_consume_token(SEMICOLON);", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case BOOLEAN:", "-        case BYTE:", "-        case CHAR:", "-        case DOUBLE:", "-        case FALSE:", "-        case FLOAT:", "-        case INT:", "-        case LONG:", "-        case NEW:", "-        case NULL:", "-        case SHORT:", "-        case SUPER:", "-        case THIS:", "-        case TRUE:", "-        case VOID:", "-        case INTEGER_LITERAL:", "-        case LONG_LITERAL:", "-        case FLOAT_LITERAL:", "-        case DOUBLE_LITERAL:", "-        case CHARACTER_LITERAL:", "-        case STRING_LITERAL:", "-        case IDENTIFIER:", "-        case LPAREN:", "-        case BANG:", "-        case TILDE:", "-        case INCREMENT:", "-        case DECREMENT:", "-        case PLUS:", "-        case MINUS:", "-          exp = expression();", "-          break;", "-        default:", "-          jj_la1[73] = jj_gen;", "-          ;", "-        }", "-        jj_consume_token(SEMICOLON);", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case BOOLEAN:", "-        case BYTE:", "-        case CHAR:", "-        case DOUBLE:", "-        case FALSE:", "-        case FLOAT:", "-        case INT:", "-        case LONG:", "-        case NEW:", "-        case NULL:", "-        case SHORT:", "-        case SUPER:", "-        case THIS:", "-        case TRUE:", "-        case VOID:", "-        case INTEGER_LITERAL:", "-        case LONG_LITERAL:", "-        case FLOAT_LITERAL:", "-        case DOUBLE_LITERAL:", "-        case CHARACTER_LITERAL:", "-        case STRING_LITERAL:", "-        case IDENTIFIER:", "-        case LPAREN:", "-        case INCREMENT:", "-        case DECREMENT:", "-          update = statementExpressionList();", "-          break;", "-        default:", "-          jj_la1[74] = jj_gen;", "-          ;", "-        }", "-        break;", "-      default:", "-        jj_la1[75] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "-    }", "-    jj_consume_token(RPAREN);", "-    stmt = statement();", "-        if(colon != null){", "-          {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "-                                  filename,", "-                                  t.beginLine, t.beginColumn,", "-                                  stmt.getEndLine(), stmt.getEndColumn());}", "-        }else{", "-          {if (true) return new ForStatement(init, exp, update, stmt,", "-                                  filename,", "-                                  t.beginLine, t.beginColumn,", "-                                  stmt.getEndLine(), stmt.getEndColumn());}", "+      jj_consume_token(RPAREN);", "+      stmt = statement();", "+      if(colon != null){", "+        {if (true) return new ForEachStatement(forEachInit, exp, stmt,", "+                                    filename,", "+                                    t.beginLine, t.beginColumn,", "+                                    stmt.getEndLine(), stmt.getEndColumn());}", "+      }else{", "+        {if (true) return new ForStatement(init, exp, update, stmt,", "+                                filename,", "+                                t.beginLine, t.beginColumn,", "+                                stmt.getEndLine(), stmt.getEndColumn());}", "-        }", "+      }", "+    } catch (ParseException pe) {", "+    _throwParseException(pe,\"Invalid for statement\");", "+    }"]}], "num": 19965}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85930c05d41d62b375638d61ad9f9b06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16b0107a1ab8795967ddab82e2637deb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "13fd7a397c83b96c149ac8eb636b988dccbb4bed", "commitAfterChange": "7b6e3a6da13b7dd368ad89b9fff988959ce6f154", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-      Element root = doc.getDefaultRootElement();", "-      int line = root.getElementIndex(offset);", "-      int col = offset - root.getElement(line).getStartOffset();", "-      updateLocation(line + 1, col);  // line numbers are 1-based", "+      String text = doc.getText();", "+      if (offset == _offset + 1 && text.charAt(_offset) != '\\n') {", "+        _col += 1;", "+      }", "+      else {", "+        Element root = doc.getDefaultRootElement();", "+        int line = root.getElementIndex(offset); ", "+        _line = line + 1;     // line numbers are 1-based", "+        _col = offset - root.getElement(line).getStartOffset();", "+      }", "+      updateLocation(_line, _col);  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38e4483b00a7cf371cbb6d94d17f5771", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 714, "methodNumberAfterChange": 716, "signatureBeforeChange": "      public void nonTestCase(boolean isTestAll)", "signatureAfterChange": "      public void nonTestCase(boolean isTestAll, boolean didCompileFail)", "diff": ["-    public void nonTestCase(boolean isTestAll) {", "+    public void nonTestCase(boolean isTestAll, boolean didCompileFail) {", "-      ", "-      final String message = isTestAll ?", "-        \"There are no compiled JUnit TestCases available for execution.\\n\" +", "-        \"Perhaps you have not yet saved and compiled your test files.\"", "-        :", "-        \"The current document is not a valid JUnit test case.\\n\" +", "-        \"Please make sure that:\\n\" +", "-        \"- it has been compiled and\\n\" +", "-        \"- it is a subclass of junit.framework.TestCase.\\n\";", "-      ", "+      String message;", "+      String title = \"Cannot Run JUnit Test Cases\";", "+      if (didCompileFail) {", "+        message = \"Compile failed. Cannot run JUnit TestCases.\\n\" +", "+          \"Please examine the Compiler Output.\";", "+      }", "+      else {        ", "+        if (isTestAll) {", "+          message = \"There are no compiled JUnit TestCases available for execution.\\n\" +", "+            \"Perhaps you have not yet saved and compiled your test files.\";", "+        }", "+        else {", "+          message = \"The current document is not a valid JUnit test case.\\n\" +", "+            \"Please make sure that:\\n\" +", "+            \"- it has been compiled and\\n\" +", "+            \"- it is a subclass of junit.framework.TestCase.\\n\";", "+        }", "+      }", "-                                    \"Test Only Executes JUnit test cases\",", "+                                    title,", "-        showTab(_junitErrorPanel, true);", "+        if (!didCompileFail) showTab(_junitErrorPanel, true);"]}], "num": 18812}
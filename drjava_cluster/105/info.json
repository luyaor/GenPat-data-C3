{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "906ea8e8f62aa35197bd8e02735166e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33dbcee43988f0ac4c745c7ac407e0b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PreemptingClassLoader.java", "commitBeforeChange": "98a0206bc90f5eb73be3e2e6e290a67ee1cd136d", "commitAfterChange": "bd4a771b77ba1887596583ce142a4b7d1fa91b7e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "   protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException", "diff": ["-    Class<?> result = findLoadedClass(name); // check if already loaded", "-    if (result == null) {", "-      if (shouldPreempt(name)) {", "+    if (!shouldPreempt(name)) { return super.loadClass(name, resolve); }", "+    else {", "+      Class<?> result = findLoadedClass(name); // check if already loaded", "+      if (result == null) {", "-      else { result = getParent().loadClass(name); }", "+      if (resolve) { resolveClass(result); }", "+      return result;", "-    if (resolve) { resolveClass(result); }", "-    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "776746e1db06abbbea1424eb763e320f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public synchronized int getLineStartPos(int pos)", "signatureAfterChange": "   public int getLineStartPos(final int pos)", "diff": ["-  public synchronized int getLineStartPos(int pos) {", "-    throwErrorHuh();", "-    if (pos < 0 || pos > getLength()) {", "-      return -1;", "-    }", "+  public int getLineStartPos(final int pos) {", "+    // throwErrorHuh();", "+    if (pos < 0 || pos > getLength()) return -1;", "-    if (cached != null) {", "-      return cached.intValue();", "+    if (cached != null) return cached.intValue();", "+    ", "+    int dist;", "+    synchronized (_reduced) {", "+      int location = _currentLocation;", "+      _reduced.move(pos - location);", "+      dist = _reduced.getDistToPreviousNewline(0);", "+      _reduced.move(location - pos);", "-    int location = _currentLocation;", "-    _reduced.move(pos - location);", "-    int dist = _reduced.getDistToPreviousNewline(0);", "-    _reduced.move(location - pos);", "-    if(dist == -1) {", "-      // If no previous newline was found", "-      // return DOCSTART", "+    if (dist == -1) {", "+      // No previous newline was found; return DOCSTART", "-    else {", "-      _storeInCache(key, new Integer(pos - dist));", "-      return pos - dist;", "-    }", "+    ", "+    _storeInCache(key, new Integer(pos - dist));", "+    return pos - dist;"]}], "num": 105}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4a4e871bf3cf91317611173c175e6c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fa0deef4518618ad6045ade598a0759", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 654, "methodNumberAfterChange": 645, "signatureBeforeChange": "          public void interactionStarted()", "signatureAfterChange": "          public void interactionStarted()", "diff": ["-      Utilities.invokeLater(new Runnable() {", "-        public void run() {", "-          _disableInteractionsPane();", "-          _runAction.setEnabled(false);", "-          _runProjectAction.setEnabled(false);", "-        }", "-      });", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "+      _disableInteractionsPane();", "+      _runAction.setEnabled(false);", "+      _runProjectAction.setEnabled(false);", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fce9ad88a6167181334bc0b016f8a42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-    Utilities.invokeLater(new Runnable() { public void run() { ", "-      ErrorPanel panel = _frame.getSelectedErrorPanel();", "-      if (panel == null) {", "-        // no error panel is currently selected", "-        return;", "-      }", "-      CompilerErrorModel model =  panel.getErrorModel();", "-      ", "-      if (!model.hasErrorsWithPositions(_openDoc)) return;", "-      ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-      ", "-      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-      ", "-      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-      // if no error is on this line, select the (none) item", "-      if (error == null) errorListPane.selectNothing();", "-      else {      ", "-        if (errorListPane.shouldShowHighlightsInSource()) {", "-          // No need to move the caret since it's already here!", "-          _highlightErrorInSource(model.getPosition(error));", "-        }", "-        ", "-        // Select item wants the CompilerError", "-        errorListPane.selectItem(error);", "-      }", "+//    assert EventQueue.isDispatchThread();  // violated during undo in DefinitionsPaneTest", "+//    Utilities.invokeLater(new Runnable() { ", "+//      public void run() { ", "+    ErrorPanel panel = _frame.getSelectedErrorPanel();", "+    if (panel == null) {", "+      // no error panel is currently selected", "+      return;", "-    });", "+    CompilerErrorModel model =  panel.getErrorModel();", "+    ", "+    if (!model.hasErrorsWithPositions(_openDoc)) return;", "+    ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+    ", "+    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+    ", "+    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+    // if no error is on this line, select the (none) item", "+    if (error == null) errorListPane.selectNothing();", "+    else {      ", "+      if (errorListPane.shouldShowHighlightsInSource()) {", "+        // No need to move the caret since it's already here!", "+        _highlightErrorInSource(model.getPosition(error));", "+      }", "+      ", "+      // Select item wants the CompilerError", "+      errorListPane.selectItem(error);", "+    }", "+//      }", "+//    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64bb63ba8707c53f1ed8b5657303f457", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 695, "methodNumberAfterChange": 674, "signatureBeforeChange": "          public void filePathContainsPound()", "signatureAfterChange": "          public void filePathContainsPound()", "diff": ["-      Utilities.invokeLater(new Runnable() {", "-        public void run() {", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "-        }", "-      });", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b6db64432885f32e6a4c3fc9879894", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-    Utilities.invokeLater(new Runnable() { public void run() { ", "-      ErrorPanel panel = _frame.getSelectedErrorPanel();", "-      if (panel == null) {", "-        // no error panel is currently selected", "-        return;", "-      }", "-      CompilerErrorModel model =  panel.getErrorModel();", "-      ", "-      if (!model.hasErrorsWithPositions(_openDoc)) return;", "-      ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-      ", "-      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-      ", "-      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-      // if no error is on this line, select the (none) item", "-      if (error == null) errorListPane.selectNothing();", "-      else {      ", "-        if (errorListPane.shouldShowHighlightsInSource()) {", "-          // No need to move the caret since it's already here!", "-          _highlightErrorInSource(model.getPosition(error));", "-        }", "-        ", "-        // Select item wants the CompilerError", "-        errorListPane.selectItem(error);", "-      }", "+//    assert EventQueue.isDispatchThread();  // violated during undo in DefinitionsPaneTest", "+//    Utilities.invokeLater(new Runnable() { ", "+//      public void run() { ", "+    ErrorPanel panel = _frame.getSelectedErrorPanel();", "+    if (panel == null) {", "+      // no error panel is currently selected", "+      return;", "-    });", "+    CompilerErrorModel model =  panel.getErrorModel();", "+    ", "+    if (!model.hasErrorsWithPositions(_openDoc)) return;", "+    ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+    ", "+    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+    ", "+    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+    // if no error is on this line, select the (none) item", "+    if (error == null) errorListPane.selectNothing();", "+    else {      ", "+      if (errorListPane.shouldShowHighlightsInSource()) {", "+        // No need to move the caret since it's already here!", "+        _highlightErrorInSource(model.getPosition(error));", "+      }", "+      ", "+      // Select item wants the CompilerError", "+      errorListPane.selectItem(error);", "+    }", "+//      }", "+//    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc93c202454eab6a524ff5002f5b147f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 691, "methodNumberAfterChange": 671, "signatureBeforeChange": "          public void saveBeforeJavadoc()", "signatureAfterChange": "          public void saveBeforeJavadoc()", "diff": ["-      Utilities.invokeLater(new Runnable() {", "-        public void run() {", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "-        }", "-      });", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec79c91b49e1e53e09c23dcba7d3eb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 679, "methodNumberAfterChange": 670, "signatureBeforeChange": "          public void junitStarted()", "signatureAfterChange": "     public void junitStarted()", "diff": ["-    ", "+    /** Only runs in event thread. */", "-      /* Note: simpleHourglassOn() is done by various junit commands (other than junitClasses); hourglass must be off ", "+      /* Note: hourglassOn() is done by various junit commands (other than junitClasses); hourglass must be off ", "-      Utilities.invokeLater(new Runnable() {", "-        public void run() {", "-          // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "-          ", "-          try { showTab(_junitErrorPanel, true);", "-            _junitErrorPanel.setJUnitInProgress();", "-            // _junitAction.setEnabled(false);", "-            // _junitAllAction.setEnabled(false);", "-          }", "-          finally { hourglassOff(); }  ", "-        }", "-      });", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "+      // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "+      ", "+      try { showTab(_junitErrorPanel, true);", "+        _junitErrorPanel.setJUnitInProgress();", "+        // _junitAction.setEnabled(false);", "+        // _junitAllAction.setEnabled(false);", "+      }", "+      finally { hourglassOff(); }  ", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10537afbf55cbdb5925353e801f978f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "1c3947ce9682f305287b6afe6b5c5d87597bae6f", "commitAfterChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void removeHighlight()", "signatureAfterChange": "   public void removeHighlight()", "diff": ["-  public void removeHighlight() {", "-    Utilities.invokeLater(new Runnable() { public void run() { _definitionsPane.removeErrorHighlight(); } });", "-  }", "+  public void removeHighlight() { _definitionsPane.removeErrorHighlight(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c77bba304174a35f8ffb39949425d064", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 680, "methodNumberAfterChange": 670, "signatureBeforeChange": "          public void junitStarted()", "signatureAfterChange": "     public void junitStarted()", "diff": ["-    ", "+    /** Only runs in event thread. */", "-      /* Note: simpleHourglassOn() is done by various junit commands (other than junitClasses); hourglass must be off ", "+      /* Note: hourglassOn() is done by various junit commands (other than junitClasses); hourglass must be off ", "-      Utilities.invokeLater(new Runnable() {", "-        public void run() {", "-          // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "-          ", "-          try { showTab(_junitErrorPanel, true);", "-            _junitErrorPanel.setJUnitInProgress();", "-            // _junitAction.setEnabled(false);", "-            // _junitAllAction.setEnabled(false);", "-          }", "-          finally { hourglassOff(); }  ", "-        }", "-      });", "+//      Utilities.invokeLater(new Runnable() {", "+//        public void run() {", "+      // new ScrollableDialog(null, \"Ready for hourglassOn in junitStarted\", \"\", \"\").show();", "+      ", "+      try { showTab(_junitErrorPanel, true);", "+        _junitErrorPanel.setJUnitInProgress();", "+        // _junitAction.setEnabled(false);", "+        // _junitAllAction.setEnabled(false);", "+      }", "+      finally { hourglassOff(); }  ", "+//        }", "+//      });"]}], "num": 15557}
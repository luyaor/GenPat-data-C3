{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a78b796052ff25c7b61845d5c83123dd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2208fcdca26f2836ef3eae2f86102869", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "2ce092662f68aa401d3206a9a3bf36bc4d9e733f", "commitAfterChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      public CustomTreeCellRenderer()", "signatureAfterChange": "     public CustomTreeCellRenderer()", "diff": ["-", "+     */", "-      javaIcon = null;", "+      _javaIcon   = _getIconResource(\"JavaIcon.gif\");", "+      _javaMIcon  = _getIconResource(\"JavaMIcon.gif\");", "+      _beginnerIcon   = _getIconResource(\"BeginnerIcon.gif\");", "+      _beginnerMIcon  = _getIconResource(\"BeginnerMIcon.gif\");", "+      _intermediateIcon   = _getIconResource(\"IntermediateIcon.gif\");", "+      _intermediateMIcon  = _getIconResource(\"IntermediateMIcon.gif\");", "+      _advancedIcon   = _getIconResource(\"AdvancedIcon.gif\");", "+      _advancedMIcon  = _getIconResource(\"AdvancedMIcon.gif\");", "+      _otherIcon  = _getIconResource(\"OtherIcon.gif\");", "+      _otherMIcon = _getIconResource(\"OtherMIcon.gif\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306e40d3ba89ed9f0f88f750a8960c84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/generic/GenericTreeTest.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      public void testBrackets()", "signatureAfterChange": "      public void testBrackets()", "diff": ["-    // left shift", "-    //assertEquals(new Integer(400 << 5),interpret(\"400 << 5;\"));", "-    ", "-      ", "+    ", "-      ", "-/*", "-      // less than", "-      Pair.make(\"5 < 4\", new Boolean(5 < 4)),", "-      // less than or equal to", "-      Pair.make(\"4 <= 4\", new Boolean(4 <= 4)), Pair.make(\"4 <= 5\", new Boolean(4 <= 5)),", "-      // greater than", "-      Pair.make(\"5 > 4\", new Boolean(5 > 4)), Pair.make(\"5 > 5\", new Boolean(5 > 5)),", "-      // greater than or equal to", "-      Pair.make(\"5 >= 4\", new Boolean(5 >= 4)), Pair.make(\"5 >= 5\", new Boolean(5 >= 5)),", "-      ", "-      _interpreter.interpret(\"(false) ? 2/0 : 1 \");", "- */   ", "+    ", "+    ", "+    // left shift", "+    assertEquals(new Integer(400 << 5),interpret(\"400 << 5;\"));", "+    ", "+    // less than", "+    assertEquals(new Boolean(5 < 4), interpret(\"5 < 4;\"));", "+    ", "+    // less than or equal to", "+    assertEquals(new Boolean(4 <= 4), interpret(\"4 <= 4;\"));", "+    assertEquals(new Boolean(4 <= 5), interpret(\"4 <= 5;\"));", "+    ", "+    // greater than", "+    assertEquals(new Boolean(5 > 4), interpret(\"5 > 4;\"));", "+    assertEquals(new Boolean(5 > 5), interpret(\"5 > 5;\"));", "+    ", "+    // greater than or equal to", "+    assertEquals(new Boolean(5 >= 4), interpret(\"5 >= 4;\"));", "+    assertEquals(new Boolean(5 >= 5), interpret(\"5 >= 5;\"));", "+    ", "+    //_interpreter.interpret(\"(false) ? 2/0 : 1 \");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b1cd12cb2b0f069ca2c188a386110ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ColorOptionTest.java", "commitBeforeChange": "4dfc9cf8f984c69d646e954511052a889bd9f415", "commitAfterChange": "c7d2e1d461dd66a96eb2ddd00e3e54ea051914ee", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testFormat()", "signatureAfterChange": "   public void testFormat()", "diff": ["+   */", "+    ColorOption c = new ColorOption(\"blue\", Color.blue);", "+    assertEquals(\"testFormat:\", \"#000000\", c.format(Color.black));", "+    assertEquals(\"testFormat:\", \"#0000ff\", c.format(Color.blue));", "+    assertEquals(\"testFormat:\", \"#00ff00\", c.format(Color.green));", "+    assertEquals(\"testFormat:\", \"#ff0000\", c.format(Color.red));  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8490477360c1139cb0f00805b4d5ec78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    ", "+", "+    interpret(\"innerFoo = 0\");", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch value incorrect\", \"0\", watches.elementAt(1).getValue());", "+", "+    interpret(\"innerFoo = 8\");", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855a63195f8b038be0c97d0bead6721b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentHelperTest.java", "commitBeforeChange": "0d293f065df295b40875d176fa985aae8404680f", "commitAfterChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void testGetFirstNonWSCharPos() throws BadLocationException", "signatureAfterChange": "     public void testGetFirstNonWSCharPos() throws BadLocationException", "diff": ["-    //      _setDocText(\"foo();\\n// comment\\nbar();\\n\");", "-    //      assertEquals(\"Ignore single-line comments\",", "-    //      18,", "-    //      _doc.getFirstNonWSCharPos(9));", "-      ", "-    //      _setDocText(\"foo();\\n /* bar\\nblah */ boo\\n\");", "-    //    assertEquals(\"Ignore multiline comments\",", "-    //\t\t 23,", "-    //\t\t _doc.getFirstNonWSCharPos(6));\t ", "+    _setDocText(\"foo();\\n// comment\\nbar();\\n\");", "+    assertEquals(\"Ignore single-line comments\",", "+\t\t 18,", "+\t\t _doc.getFirstNonWSCharPos(6));", "+    ", "+    _setDocText(\"foo();\\n /* bar\\nblah */ boo\\n\");", "+    assertEquals(\"Ignore multiline comments\",", "+    \t\t 23,", "+    \t\t _doc.getFirstNonWSCharPos(6));\t ", "+    _setDocText(\"foo   /\");", "+    assertEquals(\"Slash at end of document\",", "+\t\t 6,", "+\t\t _doc.getFirstNonWSCharPos(4));", "+    _setDocText(\"foo   //\");", "+    assertEquals(\"// at end\",", "+\t\t -1,", "+\t\t _doc.getFirstNonWSCharPos(4));", "+    _setDocText(\"foo   /*\");", "+    assertEquals(\"/* at end\",", "+\t\t -1,", "+\t\t _doc.getFirstNonWSCharPos(4));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d0547b3d317f78cf69a9e07a376536", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "041023bab0887f54ed814ccd2037595271522c8d", "commitAfterChange": "67e38f766289e5330a2b4079022fb56c6e08bd49", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testAccessFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["-// TEMPORARILY commented out because this test is failing", "-//    interpret(\"foo = 123\");", "-//    assertEquals(\"foo should have been modified\" , \"123\", interpret(\"MonkeyStuff.this.foo\"));", "-//    interpret(\"int foo = 999;\");", "-//    assertEquals(\"foo should refer to defined foo\", \"999\", interpret(\"foo\"));", "-//    assertEquals(\"declaring foo should not change MonkeyStuff.this.foo\", \"123\", interpret(\"MonkeyStuff.this.foo\"));", "-//", "-//    assertEquals(\"call method of outer class #1\", \"-2\", interpret(\"getNegativeTwo()\"));", "-//    assertEquals(\"call method of outer class #2\", \"-2\", interpret(\"MonkeyTwoDeep.this.getNegativeTwo()\"));", "-//    assertEquals(\"call method of outer class #3\", \"-2\",", "-//                 interpret(\"MonkeyInner.MonkeyTwoDeep.this.getNegativeTwo()\"));", "-//    assertEquals(\"call method of outer class #4\", \"-2\",", "-//                 interpret(\"MonkeyStuff.MonkeyInner.MonkeyTwoDeep.this.getNegativeTwo()\"));", "+    interpret(\"foo = 123\");", "+    assertEquals(\"foo should have been modified\" , \"123\", interpret(\"MonkeyStuff.this.foo\"));", "+    interpret(\"int foo = 999;\");", "+    assertEquals(\"foo should refer to defined foo\", \"999\", interpret(\"foo\"));", "+    assertEquals(\"declaring foo should not change MonkeyStuff.this.foo\", \"123\", interpret(\"MonkeyStuff.this.foo\"));", "+", "+    assertEquals(\"call method of outer class #1\", \"-2\", interpret(\"getNegativeTwo()\"));", "+    assertEquals(\"call method of outer class #2\", \"-2\", interpret(\"MonkeyTwoDeep.this.getNegativeTwo()\"));", "+    assertEquals(\"call method of outer class #3\", \"-2\",", "+                 interpret(\"MonkeyInner.MonkeyTwoDeep.this.getNegativeTwo()\"));", "+    assertEquals(\"call method of outer class #4\", \"-2\",", "+                 interpret(\"MonkeyStuff.MonkeyInner.MonkeyTwoDeep.this.getNegativeTwo()\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2f220a2abc1d763b881da8858794038", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/OrderedHashSetTest.java", "commitBeforeChange": "f3c66273d6e4a25b2baea2d938e0f8b9598313de", "commitAfterChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testSearch()", "signatureAfterChange": "      public void testSearch()", "diff": ["+    try {", "+      iTod.get(0);", "+      fail(\"Queue should be empty forcing an Exception to be thrown\");", "+    }", "+    catch(IndexOutOfBoundsException e) { /* silently succeed */ }        ", "+    assertEquals(\"Should find key using index\", int1, iTod.get(0));", "+    ", "+    assertEquals(\"get(1) test\", int2, iTod.get(1));  // we should rename int1, int2, int3 as int0, int1, int2", "+    assertEquals(\"get(2) test\", int3, iTod.get(2));", "-               ", "+           ", "-    iTod.clear();", "+    iTod.remove(0);", "+    assertTrue(\"iTod should be empty\", iTod.isEmpty());", "+    "]}], "num": 13078}
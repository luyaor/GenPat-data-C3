{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a036099dea9967fdd0a204ebde49c53", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d56d1d649f2560d0b08c40fffb41cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public void testOringTwoBooleans()", "signatureAfterChange": "   public void testOringTwoBooleans() throws ExceptionReturnedException", "diff": ["-  public void testOringTwoBooleans() {", "-    Node exp = _parseCode(\"new Boolean(true) || new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testOringTwoBooleans() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) || new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8cf5df9630bbd3e351109dc4fcd8d32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "8212ce9ce43b34bb82672d4de3ee06245bf52614", "commitAfterChange": "d88fb548627bde19f7cf516c794ed4211e0bf63d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public void testAndingTwoBooleans()", "signatureAfterChange": "   public void testAndingTwoBooleans() throws ExceptionReturnedException", "diff": ["-  public void testAndingTwoBooleans() {", "-    Node exp = _parseCode(\"new Boolean(true) && new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testAndingTwoBooleans() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) && new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}], "num": 24229}
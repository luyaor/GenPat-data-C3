{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8373ddc25b6105890ad25bcf6dee8d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdf842fc290bb8e2551bd86318d9fd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "commitAfterChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void addRegion(final R region)", "signatureAfterChange": "   public void addRegion(final R region)", "diff": ["-    if (! docRegions.contains(region)) { // region does not already exist in manager", "+    final boolean alreadyContained = docRegions.contains(region);", "+    if (!alreadyContained) { // region does not already exist in manager", "-    // notify.  invokeLater unnecessary if it only runs in the event thread", "-    Utilities.invokeLater(new Runnable() { public void run() {", "-      _lock.startRead();", "-      try {", "-        for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "-      } finally { _lock.endRead(); }", "-    } });", "+    // only notify if the region was actually added", "+    if (!alreadyContained) {", "+      // notify.  invokeLater unnecessary if it only runs in the event thread", "+      Utilities.invokeLater(new Runnable() { public void run() {", "+        _lock.startRead();", "+        try {", "+          for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "+        } finally { _lock.endRead(); }", "+      } });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc47632ec91a34802f3e20b42b321648", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   private void _threwException(Throwable t)", "signatureAfterChange": "   private void _threwException(Throwable t)", "diff": ["-    ", "-    _interactionsModel.replThrewException(t.getClass().getName(),", "-                                          t.getMessage(), ", "-                                          StringOps.getStackTrace(t),", "-                                          ((t instanceof ParseError) &&  ", "-                                           ((ParseError) t).getParseException() != null)? ((ParseError) t).getMessage() : null);", "-  }                                                                                                                                   // getMessage, in this scenario, will return the same as getShortMessage", "+    String shortMsg = null;", "+    if ((t instanceof ParseError) && ((ParseError) t).getParseException() != null) ", "+      shortMsg = ((ParseError) t).getMessage();  // in this case, getMessage is equivalent to getShortMessage", "+    _interactionsModel.replThrewException(t.getClass().getName(), t.getMessage(), StringOps.getStackTrace(t), shortMsg);                                    ;", "+  } "]}], "num": 15165}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36f8807393a6ddf2a0f4e445fb8fedc3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c58cd9bc383907a37a010a8329f457", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "     public Object visit(BitOrExpression node)", "signatureAfterChange": "   public Class visit(BitOrExpression node)", "diff": ["+   */", "+  public Class visit(BitOrExpression node) {", "+    Class c = visitBitwiseExpression(node);", "+    ", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.bitOr", "+           (c,", "+            ln.getProperty(NodeProperties.VALUE),", "+            rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(BitOrExpression node) {", "-        Class c = visitBitwiseExpression(node);", "-", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.bitOr", "-                     (c,", "-                      ln.getProperty(NodeProperties.VALUE),", "-                      rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8bddf1d2ecddc4fee8549c6b2cedeef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "     public Object visit(BitAndExpression node)", "signatureAfterChange": "   public Class visit(BitAndExpression node)", "diff": ["+   */", "+  public Class visit(BitAndExpression node) {", "+    Class c = visitBitwiseExpression(node);", "+    ", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.bitAnd", "+           (c,", "+            ln.getProperty(NodeProperties.VALUE),", "+            rn.getProperty(NodeProperties.VALUE)));", "+    return c;", "+  }", "-     */", "-    public Object visit(BitAndExpression node) {", "-        Class c = visitBitwiseExpression(node);", "-", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.bitAnd", "-                     (c,", "-                      ln.getProperty(NodeProperties.VALUE),", "-                      rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}], "num": 20771}
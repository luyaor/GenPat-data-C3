{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92ecf6a0e74e9696ca259a5a91d407aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1705b88dff5b70caa08fa8458bf521f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "512658e6d0ae282068e705a86d988618e9ce9c5f", "commitAfterChange": "7d708b4318d2a7ffa9f01174e54dfcf52e139a3d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     @Override public Type visit(SimpleMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SimpleMethodCall node)", "diff": ["-      ClassType t;", "+      Type t;", "-        try {", "-          t = context.typeContainingMethod(node.getMethodName(), ts);", "-          if (t == null) {", "-            setErrorStrings(node, node.getMethodName());", "-            throw new ExecutionError(\"undefined.name\", node);", "-          }", "+        t = context.typeContainingMethod(node.getMethodName(), ts);", "+        if (t == null) {", "+          setErrorStrings(node, node.getMethodName());", "+          throw new ExecutionError(\"undefined.name\", node);", "-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "-      DJClass enclosingThis = enclosingThis(t);", "+      DJClass enclosingThis = context.getThis(t, ts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "738a5d8ac0cf2cde53c3525a31aa1e37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "615ff23a704e8a18c51abf1bd9015de115551141", "commitAfterChange": "512658e6d0ae282068e705a86d988618e9ce9c5f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   @Override public TypeContext visit(SwitchStatement node)", "signatureAfterChange": "   @Override public TypeContext visit(SwitchStatement node)", "diff": ["-    if (!ts.isEnum(t)) {", "+    boolean switchEnum = ts.isEnum(t);", "+    if (!switchEnum) {", "-      ", "-      bk.acceptVisitor(this);", "-      ", "-      ", "+      else if (switchEnum) {", "+        DJField val = new ExpressionChecker(context, opt).checkEnumSwitchCase(bk.getExpression(), t);", "+        if (values.contains(val)) {", "+          throw new ExecutionError(\"duplicate.switch.case\", bk);", "+        }", "+        values.add(val);", "+      }", "+        checkType(exp);", "-          throw new ExecutionError(\"duplicate.switch.case\", node);", "+          throw new ExecutionError(\"duplicate.switch.case\", bk);", "+      ", "+      if (bk.getStatements() != null) { checkList(bk.getStatements()); }", "-    ", "+      "]}], "num": 22017}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7d90f1d07aa969b33a03ca0609d4de5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d15a69522fd3ecb1cfba50ca5bf059c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 105, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-    final ProjectFileIR ir;", "-    final DocFile[] srcFiles;", "-    final DocFile[] auxFiles;", "+    ", "+    final ProjectFileIR ir = ProjectFileParser.ONLY.parse(projectFile);", "+    ", "+    final DocFile[] srcFiles = ir.getSourceFiles();", "+    final DocFile[] auxFiles = ir.getAuxiliaryFiles();", "+    final File buildDir = ir.getBuildDirectory();", "+    final File mainClass = ir.getMainClass();", "+    final File[] projectClasspaths = ir.getClasspaths();", "+    ", "+    final String projfilepath = projectFile.getCanonicalPath();", "+    ", "+    final List<OpenDefinitionsDocument> oldProjDocs = getProjectDocuments();", "+    final FileGroupingState oldState = _state;", "-    //File projectRoot = projectFile.getParentFile();", "-    ir = ProjectFileParser.ONLY.parse(projectFile);", "-    srcFiles = ir.getSourceFiles();", "-    auxFiles = ir.getAuxiliaryFiles();", "-    String projfilepath = projectFile.getCanonicalPath();", "-        return !(d.isProjectFile() || d.isAuxiliaryFile()) || d.isUntitled();", "+        return !(d.inProject() || d.isAuxiliaryFile()) || d.isUntitled();", "-    File buildDir = ir.getBuildDirectory();", "-    File mainClass;", "-    mainClass = ir.getMainClass();", "-    ", "-    File[] projectclasspaths = ir.getClasspaths();", "-    for (File f : projectclasspaths) { extraClasspaths.add(f); }", "+    for (File f : projectClasspaths) { extraClasspaths.add(f); }", "-    setFileGroupingState(_makeProjectFileGroupingState(mainClass, buildDir, projectFile, srcFiles, extraClasspaths));", "-    ", "-//    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "-//    for (int i = 0; i<projectclasspaths.length; i++) {", "-//      currentclasspaths.remove(projectclasspaths[i].getAbsoluteFile());", "-//      currentclasspaths.add(projectclasspaths[i].getAbsoluteFile());", "-//    }", "-//    DrJava.getConfig().setSetting(OptionConstants.EXTRA_CLASSPATH, currentclasspaths);", "-    ", "-    setProjectChanged(false);", "+    setFileGroupingState(makeProjectFileGroupingState(mainClass, buildDir, projectFile, srcFiles, extraClasspaths));", "-//    List<OpenDefinitionsDocument> nonProjDocs = getNonProjectDocuments();", "-    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree", "-    ", "-//    File[] projectFiles = getProjectFiles();   ", "+    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree ", "-    //List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "-          if (d.isProjectFile()) closeFile(d);", "+          if (oldState.inProject(d.file())) closeFile(d);", "-//    resetInteractions(); // Since the classpath is most likely changed.  Clears out test pane as well.", "+    resetInteractions(); // Since the classpath is most likely changed.  Clears out test pane as well."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef71af30e3681d953ff55ef3a560ed25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e90dbd1bb170d6fe2e453ef725d9c5a3af468fcc", "commitAfterChange": "e653942b63325e47383bb429e833afeb308dbf22", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 129, "signatureBeforeChange": "            private void _openProjectHelper(File projectFile)", "signatureAfterChange": "   private void _openProjectHelper(File projectFile)", "diff": ["-  ", "-  private void _openProjectHelper(File projectFile) {", "-    _currentProjFile = projectFile;", "-    final ProjectFileIR ir;", "-    final File[] srcFiles;", "-    IDocumentNavigator new_nav;", "-    ", "-    ", "-    ", "-    ", "-    try", "-    {", "-      ir = ProjectFileParser.ONLY.parse(projectFile);", "-      srcFiles = ir.getSourceFiles();", "-      ", "-      ", "-      _model.setDocumentNavigator(AWTContainerNavigatorFactory.Singleton.makeTreeNavigator(projectFile.getName(),", "-                                                                                             _model.getDocumentNavigator()));", "-      new_nav = _model.getDocumentNavigator();", "-", "-      _setUpContextMenus();", "-      ", "-      ", "-      File projectfile = projectFile;", "-      String projfilepath = projectfile.getCanonicalPath();", "-      String tlp = projfilepath.substring(0, projfilepath.lastIndexOf(File.separator));", "-      ", "-      new_nav.setTopLevelPath(tlp);", "-    }", "-    catch(IOException e)", "-    {", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    _closeAll();", "-", "-    ", "-    List<OpenDefinitionsDocument> old_lod =  _model.getDefinitionsDocuments();", "-", "-    File[] projectclasspaths = ir.getClasspath();", "-    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "-    for(int i = 0; i<projectclasspaths.length; i++)", "-    {", "-      currentclasspaths.add(projectclasspaths[i].getAbsoluteFile());", "-    }", "-    DrJava.getConfig().setSetting(OptionConstants.EXTRA_CLASSPATH, currentclasspaths);", "-", "-    ", "-    ", "-    open(new FileOpenSelector(){", "-      public File[] getFiles() {", "-        return srcFiles; ", "-      }", "-    });", "-    _closeProjectAction.setEnabled(true);    ", "+   */", "+  private void _openProjectHelper(File projectFile) {", "+    _currentProjFile = projectFile;", "+    File[] srcFiles = null;", "+    try{", "+      srcFiles = _model.openProject(projectFile);", "+    }", "+    catch(MalformedProjectFileException e){", "+      _showProjectFileParseError(e);", "+      return;", "+    }", "+    catch(FileNotFoundException e) {", "+      _showFileNotFoundError(e);", "+      return;", "+    }", "+    catch(IOException e){", "+      _showIOError(e);", "+      return;", "+    }", "+    ", "+    _closeAll();", "+    _resetNavigatorPane();", "+    ", "+    final File[] files = srcFiles;", "+    // project could be empty", "+    if(srcFiles.length > 0){", "+      open(new FileOpenSelector(){", "+        public File[] getFiles() {", "+          return files;", "+        }", "+      });", "+    }", "+    _closeProjectAction.setEnabled(true);"]}], "num": 14377}
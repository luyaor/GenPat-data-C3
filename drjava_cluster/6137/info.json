{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "034fa7e232370172f9819e3f8293c3a3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24f14a8250c3a6add5cc32cdaae519c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "signatureAfterChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "diff": ["-    final ArrayList<String> stuff = new ArrayList<String>();", "-    synchronized (stuff) {", "+    final ArrayList<String> testClassNames = new ArrayList<String>();", "+    synchronized (testClassNames) {", "-            synchronized (stuff) {", "+            synchronized (testClassNames) {", "-                    stuff.add(className);", "+                    testClassNames.add(className);", "-              finally {", "-                stuff.notify();", "-              }", "+              finally { testClassNames.notify(); }", "-        stuff.wait();", "+        testClassNames.wait();", "-    return stuff;", "+    return testClassNames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc0e16ddcf85aadc25d50dad9ea31035", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public TypeData forSwitchStatement(SwitchStatement that)", "signatureAfterChange": "   public TypeData forSwitchStatement(SwitchStatement that)", "diff": ["-    final TypeData test_result = that.getTest().visit(etc);", "+    final TypeData testRes = that.getTest().visit(etc);", "-    if (test_result == null || !assertFound(test_result, exp)) {return null;}", "-    if (!(_isAssignableFrom(SymbolData.INT_TYPE, test_result.getSymbolData()) || _isAssignableFrom(SymbolData.CHAR_TYPE, test_result.getSymbolData()))) {", "-      _addError(\"The switch expression must be either an int or a char.  You have used a \" + test_result.getSymbolData().getName(), that.getTest());", "+    if (testRes == null || !assertFound(testRes, exp)) {return null;}", "+    if (!(_isAssignableFrom(SymbolData.INT_TYPE, testRes.getSymbolData()) || _isAssignableFrom(SymbolData.CHAR_TYPE, testRes.getSymbolData()))) {", "+      _addError(\"The switch expression must be either an int or a char.  You have used a \" + testRes.getSymbolData().getName(), that.getTest());", "-    return forSwitchStatementOnly(that, test_result, cases_result, seenDefault);", "+    return forSwitchStatementOnly(that, testRes, cases_result, seenDefault);"]}], "num": 6137}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04e72c73f07201fd1dc5e518bf118f4f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1092cbee53caa307f4e5ad506996cb15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "b1771db3e25f16df4acd21624b8bb5b835b04c2b", "commitAfterChange": "2ae0263391f5d4683c3203bdcfc8dee35aec15c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void _insertGap(int length)", "signatureAfterChange": "   protected void insertGapBetweenMultiCharBrace(int length)", "diff": ["-  */", "-  public void _insertGap(int length) {", "-    if (_cursor.atStart()) {", "-      if (_gapToRight()) {", "-        _cursor.next();", "-        _augmentCurrentGap(length); //increases gap and moves offset", "-      }", "-      else {", "-        _insertNewGap(length);//inserts gap and goes to next item", "-      }", "-    }", "-    else if (_cursor.atEnd()) {", "-      if (_gapToLeft()) {", "-        _augmentGapToLeft(length);", "-        //increases the gap to the left and", "-        //cursor to next item in list leaving offset 0              ", "-      }", "-      else {", "-        _insertNewGap(length); //inserts gap and moves to next item", "-      }", "-    }", "-    //offset should never be greater than 1 here because JAVA only has 2", "-    //char comments  ", "-    else if (_cursor.current().isMultipleCharBrace() && (_cursor.getBlockOffset() > 0)) {    ", "-      if (_cursor.getBlockOffset() > 1) {      ", "-        throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" + _cursor.getBlockOffset());  ", "-      }    ", "-      _cursor._splitCurrentIfCommentBlock(true, true);      ", "-      _cursor.next();", "-      _insertNewGap(length);  //inserts gap and goes to next item  ", "-      // we have to go back two tokens; we don't want to use move because it could", "-      // throw us past start if there was only one character before us and we went", "-      // the usual 2 spaces before.  There would have to be a check and a branch", "-      // depending on conditions that way.", "-      _cursor.prev();", "-      _cursor.prev();", "-      _updateBasedOnCurrentState();   ", "-      // restore cursor state", "-      _cursor.next();", "-      _cursor.next();", "-      return;", "-    }", "-    ", "-    //1", "-    else if (_cursor.current().isGap()) {", "-      _cursor.current().grow(length);", "-      _cursor.setBlockOffset(_cursor.getBlockOffset() + length);", "-    }", "-    //2", "-    else if (!_cursor.atFirstItem() &&", "-             _cursor.prevItem().isGap())", "-    {", "-      //already pointing to next item", "-      _cursor.prevItem().grow(length);", "-    }", "-    //4", "-    else { //between two braces", "-      _insertNewGap(length); //inserts a gap and goes to the next item", "-    }", "+   */", "+  protected void insertGapBetweenMultiCharBrace(int length) {", "+    if (_cursor.getBlockOffset() > 1) {      ", "+      throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" + _cursor.getBlockOffset());  ", "+    }    ", "+    _cursor._splitCurrentIfCommentBlock(true, true);      ", "+    _cursor.next();", "+    _insertNewGap(length);  //inserts gap and goes to next item  ", "+    // we have to go back two tokens; we don't want to use move because it could", "+    // throw us past start if there was only one character before us and we went", "+    // the usual 2 spaces before.  There would have to be a check and a branch", "+    // depending on conditions that way.", "+    _cursor.prev();", "+    _cursor.prev();", "+    _updateBasedOnCurrentState();   ", "+    // restore cursor state", "+    _cursor.next();", "+    _cursor.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4afb113a51c895311581595d92180785", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "b1771db3e25f16df4acd21624b8bb5b835b04c2b", "commitAfterChange": "2ae0263391f5d4683c3203bdcfc8dee35aec15c4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void _insertGap(int length)", "signatureAfterChange": "   protected void insertGapBetweenMultiCharBrace(int length)", "diff": ["-  */", "-  public void _insertGap(int length) {", "-    if (_cursor.atStart()) {", "-      if (_gapToRight()) {", "-        _cursor.next();", "-        _augmentCurrentGap(length); //increases gap and moves offset", "-      }", "-      else {", "-        _insertNewGap(length);//inserts gap and goes to next item", "-      }", "-    }", "-    else if (_cursor.atEnd()) {", "-      if (_gapToLeft()) {", "-        _augmentGapToLeft(length);", "-        //increases the gap to the left and", "-        //cursor to next item in list leaving offset 0              ", "-      }", "-      else {", "-        _insertNewGap(length); //inserts gap and moves to next item", "-      }", "-    }", "-    //offset should never be greater than 1 here because JAVA only has 2", "-    //char comments  ", "-    else if (_cursor.current().isMultipleCharBrace() && (_cursor.getBlockOffset() > 0)) {    ", "-      if (_cursor.getBlockOffset() > 1) {      ", "-        throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" + _cursor.getBlockOffset());  ", "-      }    ", "-      _cursor._splitCurrentIfCommentBlock(true, true);      ", "-      _cursor.next();", "-      _insertNewGap(length);  //inserts gap and goes to next item  ", "-      // we have to go back two tokens; we don't want to use move because it could", "-      // throw us past start if there was only one character before us and we went", "-      // the usual 2 spaces before.  There would have to be a check and a branch", "-      // depending on conditions that way.", "-      _cursor.prev();", "-      _cursor.prev();", "-      _updateBasedOnCurrentState();   ", "-      // restore cursor state", "-      _cursor.next();", "-      _cursor.next();", "-      return;", "-    }", "-    ", "-    //1", "-    else if (_cursor.current().isGap()) {", "-      _cursor.current().grow(length);", "-      _cursor.setBlockOffset(_cursor.getBlockOffset() + length);", "-    }", "-    //2", "-    else if (!_cursor.atFirstItem() &&", "-             _cursor.prevItem().isGap())", "-    {", "-      //already pointing to next item", "-      _cursor.prevItem().grow(length);", "-    }", "-    //4", "-    else { //between two braces", "-      _insertNewGap(length); //inserts a gap and goes to the next item", "-    }", "+   */", "+  protected void insertGapBetweenMultiCharBrace(int length) {", "+    if (_cursor.getBlockOffset() > 1) {      ", "+      throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" + _cursor.getBlockOffset());  ", "+    }    ", "+    _cursor._splitCurrentIfCommentBlock(true, true);      ", "+    _cursor.next();", "+    _insertNewGap(length);  //inserts gap and goes to next item  ", "+    // we have to go back two tokens; we don't want to use move because it could", "+    // throw us past start if there was only one character before us and we went", "+    // the usual 2 spaces before.  There would have to be a check and a branch", "+    // depending on conditions that way.", "+    _cursor.prev();", "+    _cursor.prev();", "+    _updateBasedOnCurrentState();   ", "+    // restore cursor state", "+    _cursor.next();", "+    _cursor.next();"]}], "num": 10540}
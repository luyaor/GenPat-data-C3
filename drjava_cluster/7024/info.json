{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d1fa545cabba0bef8d533d1a1d3e7b2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00aca37628db9123139f88ac3f79b33a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private Method _getMethod(ReferenceType rt, String name)", "signatureAfterChange": "   private Method _getMethod(ReferenceType rt, String name)", "diff": ["-    List methods = rt.methodsByName(name);", "-    Iterator methodsIterator = methods.iterator();", "+    List<Method> methods = rt.methodsByName(name);  // JDK 1.5 will eliminate this warning", "+    Iterator<Method> methodsIterator = methods.iterator();", "-      Method m = (Method)methodsIterator.next();", "+      Method m = methodsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2cd93f96badaaab6a89b145892ce2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private Method _getMethod(ReferenceType rt, String name)", "signatureAfterChange": "   private Method _getMethod(ReferenceType rt, String name)", "diff": ["-    List methods = rt.methodsByName(name);", "-    Iterator methodsIterator = methods.iterator();", "+    List<Method> methods = rt.methodsByName(name);  // JDK 1.5 will eliminate this warning", "+    Iterator<Method> methodsIterator = methods.iterator();", "-      Method m = (Method)methodsIterator.next();", "+      Method m = methodsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673584a9bbd8e095c77e11fca6204f2b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-    List vars = frame.visibleVariables();", "-    Iterator varsIterator = vars.iterator();", "+    List<LocalVariable> vars = frame.visibleVariables();  // Added <LocalVariable> type argument; warning will go away in JDK 1.5", "+    Iterator<LocalVariable> varsIterator = vars.iterator();", "-      LocalVariable localVar = (LocalVariable)varsIterator.next();", "+      LocalVariable localVar = varsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712ebb935cb07ef89b1d5836e33276ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-    List vars = frame.visibleVariables();", "-    Iterator varsIterator = vars.iterator();", "+    List<LocalVariable> vars = frame.visibleVariables();  // Added <LocalVariable> type argument; warning will go away in JDK 1.5", "+    Iterator<LocalVariable> varsIterator = vars.iterator();", "-      LocalVariable localVar = (LocalVariable)varsIterator.next();", "+      LocalVariable localVar = varsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739956e4c903d3a8ad71ed27ffd1c3db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "signatureAfterChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "diff": ["-    List connectors = vmm.attachingConnectors();  // Add parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "+    List<AttachingConnector> connectors = vmm.attachingConnectors();  // Added parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "-    java.util.Iterator iter = connectors.iterator();", "+    java.util.Iterator<AttachingConnector> iter = connectors.iterator();", "-      AttachingConnector conn = (AttachingConnector)iter.next();", "+      AttachingConnector conn = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca232e2730265cf2d111881792094a46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "signatureAfterChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "diff": ["-    List connectors = vmm.attachingConnectors();  // Add parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "+    List<AttachingConnector> connectors = vmm.attachingConnectors();  // Added parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "-    java.util.Iterator iter = connectors.iterator();", "+    java.util.Iterator<AttachingConnector> iter = connectors.iterator();", "-      AttachingConnector conn = (AttachingConnector)iter.next();", "+      AttachingConnector conn = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f2a73293673ec1e078d9df855a0918", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Object visit(TryStatement node)", "signatureAfterChange": "   public Object visit(TryStatement node)", "diff": ["-      Iterator it = node.getCatchStatements().iterator();", "+      Iterator<CatchStatement> it = node.getCatchStatements().iterator();", "-        CatchStatement cs = (CatchStatement)it.next();", "-        Class c = NodeProperties.getType(cs.getException().getType());", "+        CatchStatement cs = it.next();", "+        Class<?> c = NodeProperties.getType(cs.getException().getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8dae36c1c9d456433eb03978208d45b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "6595282fd67e77d6079df1ee1647ba51751bbcec", "commitAfterChange": "de0f38d123822794b2970bd8e5814e75677feb46", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void defineVariables(Set vars)", "signatureAfterChange": "   public void defineVariables(Set<AbstractVariable> vars)", "diff": ["-  public void defineVariables(Set vars) {", "-    Iterator it = vars.iterator();", "+  public void defineVariables(Set<AbstractVariable> vars) {", "+    Iterator<AbstractVariable> it = vars.iterator();", "-      AbstractVariable v = (AbstractVariable)it.next();", "+      AbstractVariable v = it.next();"]}], "num": 7024}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "201349b7a44b55608a480497e2ef84d4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47cd0266dcf85dcffd7f20cbe437ec2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "4fb080a38871d6561e99bfdfdb664ff987fb15c5", "commitAfterChange": "d8298bba22e8675e12094f851d61d88ab6c6f68a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-      // set tooltip", "-      String tooltip = null;", "-      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "-        if (leaf) {", "-          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "-          if (node.getUserObject() instanceof RegionTreeUserObj) {", "-            @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "-            ", "-            OpenDefinitionsDocument doc = r.getDocument();", "-            doc.acquireReadLock();", "-            try {", "-              int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "-              int startOffset = doc.getOffset(lnr - 3);", "-              if (startOffset<0) { startOffset = 0; }", "-              int endOffset = doc.getOffset(lnr + 3);", "-              if (endOffset<0) { endOffset = doc.getLength() - 1; }", "+      if (!_isChanging) {", "+        // set tooltip", "+        String tooltip = null;", "+        if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "+          if (leaf) {", "+            DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "+            if (node.getUserObject() instanceof RegionTreeUserObj) {", "+              @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "-              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "-              String s = doc.getText(startOffset, endOffset-startOffset);", "-              ", "-              // this highlights the actual region in red", "-              int rStart = r.getStartOffset()-startOffset;", "-              if (rStart<0) { rStart = 0; }", "-              int rEnd = r.getEndOffset()-startOffset;", "-              if (rEnd>s.length()) { rEnd = s.length(); }", "-              if ((rStart<=s.length()) && (rEnd>=rStart)) {", "-                String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "-                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "-                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "-                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+              OpenDefinitionsDocument doc = r.getDocument();", "+              doc.acquireReadLock();", "+              try {", "+                int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "+                int startOffset = doc.getOffset(lnr - 3);", "+                if (startOffset<0) { startOffset = 0; }", "+                int endOffset = doc.getOffset(lnr + 3);", "+                if (endOffset<0) { endOffset = doc.getLength() - 1; }", "+                ", "+                // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+                String s = doc.getText(startOffset, endOffset-startOffset);", "+                ", "+                // this highlights the actual region in red", "+                int rStart = r.getStartOffset()-startOffset;", "+                if (rStart<0) { rStart = 0; }", "+                int rEnd = r.getEndOffset()-startOffset;", "+                if (rEnd>s.length()) { rEnd = s.length(); }", "+                if ((rStart<=s.length()) && (rEnd>=rStart)) {", "+                  String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "+                  String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                  String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                  s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+                }", "+                else {", "+                  s = StringOps.encodeHTML(s);", "+                }", "+                tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "-              else {", "-                s = StringOps.encodeHTML(s);", "-              }", "-              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+              catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+              finally { doc.releaseReadLock(); }", "+              setText(node.getUserObject().toString());", "+              renderer = this;", "-            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "-            finally { doc.releaseReadLock(); }", "-            setText(node.getUserObject().toString());", "-            renderer = this;", "+        setToolTipText(tooltip);", "-      setToolTipText(tooltip);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2844d515dae68dd153eeac8fc98ffb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "b9f87cd074abdafacdb2719b29e0803fd0f81cf0", "commitAfterChange": "04d7824a20eb03ad17793ba3198be21442313bdc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded, \r                                                   boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-    /** Overrides the default renderer component to use proper coloring. */\r", "-    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded, \r", "-                                                  boolean leaf, int row, boolean hasFocus) {\r", "-      Component renderer = super.getTreeCellRendererComponent(tree, value, isSelected, isExpanded, leaf, row, hasFocus);\r", "-      \r", "-      if (renderer instanceof JComponent) { ((JComponent) renderer).setOpaque(false); }\r", "-      \r", "-      _setColors(renderer);\r", "-      \r", "-      // set tooltip\r", "-      String tooltip = null;\r", "-      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {\r", "-        if (leaf) {\r", "-          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;\r", "-          if (node.getUserObject() instanceof RegionTreeUserObj) {\r", "-            @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();\r", "-            \r", "-            OpenDefinitionsDocument doc = r.getDocument();\r", "-//            doc.acquireReadLock();\r", "-            try {\r", "-              int lnr = doc.getLineOfOffset(r.getStartOffset())+1;\r", "-              int startOffset = doc._getOffset(lnr - 3);\r", "-              if (startOffset<0) { startOffset = 0; }\r", "-              int endOffset = doc._getOffset(lnr + 3);\r", "-              if (endOffset<0) { endOffset = doc.getLength() - 1; }\r", "-              \r", "-              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)\r", "-              String s = doc.getText(startOffset, endOffset-startOffset);\r", "-              \r", "-              // this highlights the actual region in red\r", "-              int rStart = r.getStartOffset()-startOffset;\r", "-              if (rStart<0) { rStart = 0; }\r", "-              int rEnd = r.getEndOffset()-startOffset;\r", "-              if (rEnd > s.length()) { rEnd = s.length(); }\r", "-              if ((rStart <= s.length()) && (rEnd >= rStart)) {\r", "-                String t1 = StringOps.encodeHTML(s.substring(0, rStart));\r", "-                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));\r", "-                String t3 = StringOps.encodeHTML(s.substring(rEnd));\r", "-                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;\r", "-              }\r", "-              else {\r", "-                s = StringOps.encodeHTML(s);\r", "-              }\r", "-              tooltip = \"<html><pre>\"+s+\"</pre></html>\";\r", "-            }\r", "-            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }\r", "-//            finally { doc.releaseReadLock(); }\r", "-            setText(node.getUserObject().toString());\r", "-            renderer = this;\r", "-          }\r", "-        }\r", "-      }\r", "-      setToolTipText(tooltip);\r", "-      return renderer;\r", "-    }\r", "+    /** Overrides the default renderer component to use proper coloring. */", "+    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded, ", "+                                                  boolean leaf, int row, boolean hasFocus) {", "+      Component renderer = super.getTreeCellRendererComponent(tree, value, isSelected, isExpanded, leaf, row, hasFocus);", "+      ", "+      if (renderer instanceof JComponent) { ((JComponent) renderer).setOpaque(false); }", "+      ", "+      _setColors(renderer);", "+      ", "+      // set tooltip", "+      String tooltip = null;", "+      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "+        if (leaf) {", "+          DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;", "+          Object o = node.getUserObject();", "+          ", "+          if (node.getUserObject() instanceof RegionTreeUserObj) {", "+            @SuppressWarnings(\"unchecked\")", "+            RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) o;", "+            R r = userObject.region();", "+            ", "+            OpenDefinitionsDocument doc = r.getDocument();", "+            try {", "+              int lnr = doc.getLineOfOffset(r.getStartOffset()) + 1;", "+              int startOffset = doc._getOffset(lnr - 3);", "+              if (startOffset < 0) { startOffset = 0; }", "+              int endOffset = doc._getOffset(lnr + 3);", "+              if (endOffset < 0) { endOffset = doc.getLength() - 1; }", "+              ", "+              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+              String s = doc.getText(startOffset, endOffset - startOffset);", "+              ", "+              // this highlights the actual region in red", "+              int rStart = r.getStartOffset()-startOffset;", "+              if (rStart < 0) { rStart = 0; }", "+              int rEnd = r.getEndOffset()-startOffset;", "+              if (rEnd > s.length()) { rEnd = s.length(); }", "+              if ((rStart <= s.length()) && (rEnd >= rStart)) {", "+                String t1 = StringOps.encodeHTML(s.substring(0, rStart));", "+                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+              }", "+              else {", "+                s = StringOps.encodeHTML(s);", "+              }", "+              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+            }", "+            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+//            finally { doc.releaseReadLock(); }", "+            setText(node.getUserObject().toString());", "+            renderer = this;", "+          }", "+        }", "+      }", "+      setToolTipText(tooltip);", "+      return renderer;", "+    }"]}], "num": 3330}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d96f2dbb4401e022f1ed16abb5465559", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d02d8abd2993ada8d420cc46795b2db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "      public void testFormalParameters2TypeDatas()", "signatureAfterChange": "      public void testFormalParameters2TypeDatas()", "diff": ["-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "-      FormalParameter param = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      FormalParameter param = ", "+        new FormalParameter(SourceInfo.NO_INFO,", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, ", "+                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      ClassOrInterfaceType stringt = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.String\", new Type[0]);", "-      FormalParameter param2 = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, stringt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "+      ClassOrInterfaceType stringt = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.String\", new Type[0]);", "+      FormalParameter param2 =", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, stringt, ", "+                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      assertTrue(\"Arrays should be equal\", LanguageLevelVisitor.arrayEquals(result, new TypeData[]{ intData, stringData }));", "+      assertTrue(\"Arrays should be equal\", ", "+                 LanguageLevelVisitor.arrayEquals(result, new TypeData[]{ intData, stringData }));", "+      UninitializedVariableDeclarator vd =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"t\"));", "-      FormalParameter param3 = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO,  new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"Inner\", new Type[0]), new Word(JExprParser.NO_SOURCE_INFO, \"t\")), false);", "+      FormalParameter param3 = ", "+        new FormalParameter(SourceInfo.NO_INFO, vd, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785d76a1f4481db8d982beffec7cb8e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "          public void testGetSymbolData()", "signatureAfterChange": "          public void testGetSymbolData()", "diff": ["-      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "-      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"Object\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "-      _btc.getSymbolData(\"koala\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true);", "+      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"Object\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      _btc.getSymbolData(\"koala\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "-      _btc.getSymbolData(\"Object\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true);", "+      _btc.getSymbolData(\"Object\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "+      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(SourceInfo.NO_INFO)));", "-                    new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+                    new NullLiteral(SourceInfo.NO_INFO));", "-      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(SourceInfo.NO_INFO)));"]}], "num": 20529}
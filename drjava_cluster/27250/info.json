{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6e46b99ebe375e2a21d530b8f999a8a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7204c06f91e16b204a338661a1d56db1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/Configuration.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public String[] getExtraClasspath()", "signatureAfterChange": "     public String[] getExtraClasspath()", "diff": ["-   */", "-  public String[] getExtraClasspath() {", "-    String path = _properties.getProperty(EXTRA_CLASSPATH_KEY);", "-    if (path == null) {", "-      return new String[0];", "-    else {", "-      StringTokenizer tokenizer = new StringTokenizer(path, PATH_SEPARATOR);", "-      String[] ret = new String[tokenizer.countTokens()];", "-      for (int i = 0; i < ret.length; i++) {", "-        ret[i] = tokenizer.nextToken();", "-      }", "-", "-      return ret;", "-  }", "+     */", "+    public String[] getExtraClasspath() {", "+\tVector<String> v = _config.getSetting(EXTRA_CLASSPATH);", "+\tif(v==null) return new String[0];", "+\tString[] ret = new String[v.size()];", "+\tv.copyInto(ret);", "+\treturn ret;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "799acce2f3021f6abc34cb4f7351ddb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Map getConstants()", "signatureAfterChange": "   public Map<String,Object> getConstants()", "diff": ["+   */", "+  public Map<String,Object> getConstants() {", "+    Map<String,Object> result = new HashMap<String,Object>(11);", "+    for (Link l = scopes; l != null; l = l.next) {", "+      Iterator<String> it = l.cscope.keySet().iterator();", "+      while (it.hasNext()) {", "+        String s = it.next();", "+        result.put(s, l.cscope.get(s));", "+      }", "+    }", "+    return result;", "+  }", "-    public Map getConstants() {", "-\tMap result = new HashMap(11);", "-\tfor (Link l = scopes; l != null; l = l.next) {", "-\t    Iterator it = l.cscope.keySet().iterator();", "-\t    while (it.hasNext()) {", "-\t\tString s = (String)it.next();", "-\t\tresult.put(s, l.cscope.get(s));", "-\t    }", "-\t}", "-\treturn result;"]}], "num": 27250}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18f7c6bc59bc72bea2cce35c0a01915f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33187b3196861be600f39957069b57f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v2_0/edu/rice/cs/drjava/model/compiler/JSR14v20Compiler.java", "commitBeforeChange": "9d63ece51633bd296b8befa41ebe70b7a9eca3aa", "commitAfterChange": "cdbdaad69e25ffd684a4d524756e2244b0d16690", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected void _addSourceAndTargetOptions(Options options)", "signatureAfterChange": "   protected void _addSourceAndTargetOptions(Options options)", "diff": ["-    if (_isJSR14v2_4) {", "+    if (System.getProperty(\"java.specification.version\").equals(\"1.5\")) {", "+      options.put(\"-target\", \"1.5\");", "+    }", "+    else if (_isJSR14v2_4) {", "-//    options.put(\"-target\", \"1.5\");", "-    if(! _builtPath.equals(\"\"))", "-      options.put(\"-d\",_builtPath);", "+", "+    if (!_builtPath.equals(\"\")) {", "+      options.put(\"-d\", _builtPath);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462bca991642338aa050c02aeef3cece", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModel.java", "commitBeforeChange": "fa3002b037df55391c4f74b18fce7cb5d20b82f3", "commitAfterChange": "5f12d16bf856e43a5e3999099b39d12f17d7ad32", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 53, "signatureBeforeChange": "   private boolean _isCurrentBraceMatchable( \t\tModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean _isCurrentBraceMatchable( \t\tModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  {", "-    String type = copyCursor.current().getType();", "+\t\t{", "+\t\t\tString type = copyCursor.current().getType();", "-    return !(type.equals(\"/\")  ||", "-             type.equals(\"*\")  ||", "-             type.equals(\"\\n\") ||", "-             type.equals(\"//\"));", "-  }", "+\t\t\treturn (!copyCursor.current().isGap() &&", "+\t\t\t\t\t\t\t!(type.equals(\"/\")  ||", "+\t\t\t\t\t\t\t\ttype.equals(\"*\")  ||", "+\t\t\t\t\t\t\t\ttype.equals(\"\\n\") ||", "+\t\t\t\t\t\t\t\ttype.equals(\"//\")) &&", "+\t\t\t\t\t\t\t!copyCursor.current().isShadowed());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ad5a491f90006f6de97bc3d0104107", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 204, "signatureBeforeChange": "   private void _setUpContextMenus()", "signatureAfterChange": "   private void _setUpContextMenus()", "diff": ["-        _docPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+        if(_model.getDocumentNavigator().selectDocumentAt(e.getX(), e.getY())){", "+          _docPanePopupMenu.show(e.getComponent(), e.getX(), e.getY());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64ace45611150362204c9dbeeec3748e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "bb37c635695368e8cc96440bd6b6d051918112f8", "commitAfterChange": "4ebd25942c79fb901c720903ad892355732a9230", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "    @Override public TypeContext visit(ExpressionStatement node)", "signatureAfterChange": "    @Override public TypeContext visit(ExpressionStatement node)", "diff": ["-    if (node.getExpression() instanceof SimpleAssignExpression) {", "+    if (node.getExpression() instanceof SimpleAssignExpression &&", "+        !opt.requireVariableType() && (node.getHasSemicolon() || !opt.requireSemicolon())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7faf69db5afffc39ff93fab8c837d9bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/SavableConfiguration.java", "commitBeforeChange": "364d0b19a9e3896eddcd174b6cb5aa4a53e74f1f", "commitAfterChange": "65d59a6eb5c83a25b9e6bfdf698fd61ca6d2f695", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "signatureAfterChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "diff": ["+    ", "+    // Write the header", "-    while(keys.hasMoreElements()) {", "+    ", "+    // Write each option", "+    while (keys.hasMoreElements()) {", "-      tmpString = key.getName();", "-      osw.write(tmpString, 0, tmpString.length());", "-      tmpString = \" = \";", "-      osw.write(tmpString, 0, 3);", "-      tmpString = map.getString(key);", "-      // This replaces all backslashes with two backslashes for windows", "-      int index = 0;", "-      int pos;", "-      while (index < tmpString.length() && ", "-             ((pos = tmpString.indexOf('\\\\', index)) >= 0)) {", "-        buff = new StringBuffer(tmpString);", "-        buff.insert(pos, '\\\\');", "-        index = pos + 2;", "-        tmpString = buff.toString();", "+      ", "+      if (!key.getDefault().equals(map.getOption(key))) {", "+      ", "+        // Write name", "+        tmpString = key.getName();", "+        osw.write(tmpString, 0, tmpString.length());", "+        ", "+        // Write equals sign", "+        tmpString = \" = \";", "+        osw.write(tmpString, 0, 3);", "+        ", "+        // Write value", "+        tmpString = map.getString(key);", "+        // This replaces all backslashes with two backslashes for windows", "+        int index = 0;", "+        int pos;", "+        while (index < tmpString.length() && ", "+               ((pos = tmpString.indexOf('\\\\', index)) >= 0)) {", "+          buff = new StringBuffer(tmpString);", "+          buff.insert(pos, '\\\\');", "+          index = pos + 2;", "+          tmpString = buff.toString();", "+        }", "+        osw.write(tmpString, 0, tmpString.length());", "+        osw.write((int)'\\n');", "+        ", "+        // p.setProperty(key.getName(),map.getString(key));", "-      osw.write(tmpString, 0, tmpString.length());", "-      osw.write((int)'\\n');", "-     // p.setProperty(key.getName(),map.getString(key));", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a4c541d9d05ca83248e3e11ce50122", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1cda89f41e5a82d37339ff20e08702987c32bbfc", "commitAfterChange": "3b86afe47e23692474e8facf6c83b275a516f91e", "methodNumberBeforeChange": 631, "methodNumberAfterChange": 634, "signatureBeforeChange": "          public void currThreadSuspended()", "signatureAfterChange": "          public void currThreadSuspended()", "diff": ["-      _model.getInteractionsModel().autoImport();", "+      _model.getInteractionsModel().autoImport();               ", "+      if(_model.getDebugger().isAutomaticTraceEnabled()) {", "+        //System.out.println(\"new _automaticTraceTimer AUTO_STEP_RATE=\"+AUTO_STEP_RATE+\", \"+System.identityHashCode(_automaticTraceTimer));                                ", "+        if(!_automaticTraceTimer.isRunning())", "+          _automaticTraceTimer.start();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9715f648411005a60fc1ebffe5d72d2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "9492cfc4c7a2fa5a757c3f8cff89dccdb4a82cef", "commitAfterChange": "2f086150330979ff4c62e4d5f92d3a639145eafa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private boolean _isJUnitTest(Class c)", "signatureAfterChange": "   private boolean _isJUnitTest(Class c)", "diff": ["-    return Test.class.isAssignableFrom(c);", "+", "+    return Test.class.isAssignableFrom(c) && !Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac8ef04acd88ab9a9bd688723331d88c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JavaClass.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "          public Option<Object> constantValue()", "signatureAfterChange": "          public Option<Object> constantValue()", "diff": ["-      // so we approximate by treating all static final fields as constants.", "-      // (Note that some code my execute here during the type checking phase, before \"run time\".", "+      // so we approximate by treating all static final fields with a primitive/String type as constants.", "+      // (Note that some code may execute here during the type checking phase, before \"run time\".", "-      if (isStatic() && isFinal()) {", "+      if (isStatic() && isFinal() && (_f.getType().isPrimitive() || _f.getType().equals(String.class))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2d26cff55229c85af3e1df5cad1fa1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "0b6da37c0a798afe2afb46cf4cce8524728787cf", "commitAfterChange": "1488cfa1471a9b7ff0b87e0f4602a34d07f0dde9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["+    ", "-    text = \"Arrays.asList(1,2,3,4)\";", "-    res = interpret(text);", "-    assertTrue(\"res should be an instance of a List\", res instanceof java.util.List);", "-    assertEquals(\"size should be 4\", 4, ((java.util.List)res).size());", "-    assertEquals(\"last element should be 4\", new Integer(4), ((java.util.List)res).get(3));", "+    /**/", "+    /* INSERTED FOR NOW, WANNA CHECK WITH CORKY */", "+    ", "+    if(Float.parseFloat(System.getProperty(\"java.specification.version\"))>=1.5){    ", "+      text = \"Arrays.asList(1,2,3,4)\";", "+      res = interpret(text);", "+      assertTrue(\"res should be an instance of a List\", res instanceof java.util.List);", "+      assertEquals(\"size should be 4\", 4, ((java.util.List)res).size());", "+      assertEquals(\"last element should be 4\", new Integer(4), ((java.util.List)res).get(3));", "-        ", "+", "-    ", "+    }        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d409adf1bbd887bc009e0d44f4fe3af5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dd87e87bd7504e54354041075b7fdfd1298dfd10", "commitAfterChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "methodNumberBeforeChange": 353, "methodNumberAfterChange": 353, "signatureBeforeChange": "      private void _setUpTabs()", "signatureAfterChange": "      private void _setUpTabs()", "diff": ["-    _breakpointsPanel = new BreakpointsPanel(this);", "+    if (_model.getDebugger().isAvailable()) { _breakpointsPanel = new BreakpointsPanel(this); }", "-    _tabs.addLast(_breakpointsPanel);", "+    if (_model.getDebugger().isAvailable()) { _tabs.addLast(_breakpointsPanel); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c3c21079d363db08d208b3e2920a18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPane.java", "commitBeforeChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "commitAfterChange": "6cf6212d2242fc41ac00a6496c1e1ba3b53de977", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(DocumentEvent e)", "diff": ["-      ", "-      // Only update caret if it has fallen behind the prompt.", "-      // (And be careful not to move it during a reset, when the", "-      //  frozen pos is temporarily far greater than the length.)", "-      if ((caretPos < frozenPos) && (frozenPos < length)) {", "-        setCaretPosition(frozenPos);", "+", "+      if (((InteractionsDocument)_model.getInteractionsDocument()).inProgress()) {", "+        // Scroll to the end of the document, since output has been", "+        // inserted after the prompt.", "+        setCaretPosition(e.getDocument().getLength());", "+      }", "+      else {", "+        // Only update caret if it has fallen behind the prompt.", "+        // (And be careful not to move it during a reset, when the", "+        //  frozen pos is temporarily far greater than the length.)", "+        if ((caretPos < frozenPos) && (frozenPos < length)) {", "+          setCaretPosition(frozenPos);", "+        }"]}], "num": 29876}
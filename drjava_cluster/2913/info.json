{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9cd2a0f17bc11374aab156225b1c0f6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ba63cb602b06761f282f3e0c6958d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 482, "methodNumberAfterChange": 485, "signatureBeforeChange": "          public void compileBeforeJUnit()", "signatureAfterChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "diff": ["-    public void compileBeforeJUnit() {", "-      Frame parentFrame = JOptionPane.getFrameForComponent(MainFrame.this);  ", "-      if (parentFrame.isVisible()) { /* invisible when running junit test of this functionality */", "-        final BooleanOption option = ALWAYS_COMPILE_BEFORE_JUNIT;", "-        Utilities.invokeLater(new Runnable() {  ", "+     *  dialog to ask if all open source files should be compiled in order to test the program. */", "+    public void compileBeforeJUnit(final CompilerListener testAfterCompile) {", "+      if (DrJava.getConfig().getSetting(ALWAYS_COMPILE_BEFORE_JUNIT).booleanValue() || ! MainFrame.this.isVisible()) {", "+        // Compile all open source files", "+        _model.getCompilerModel().addListener(testAfterCompile);  // listener removes itself", "+        _compileAll();", "+      }", "+      else { // pop up a window to ask if all open files should be compiled before testing", "+       Utilities.invokeLater(new Runnable() {  ", "-            if (!DrJava.getConfig().getSetting(option).booleanValue()) {", "-              ConfirmCheckBoxDialog dialog =", "-                new ConfirmCheckBoxDialog(MainFrame.this,", "-                                          \"Must Compile All Files to Continue\",", "-                                          \"To unit test all documents, you must first compile all out of sync files.\\n\" + ", "-                                          \"Would you like to compile and then test?\",", "-                                          \"Always compile before testing all files\");", "-              int rc = dialog.show();", "-              ", "-              switch (rc) {", "-                case JOptionPane.YES_OPTION:", "-                  _compileAll();", "-                  // Only remember checkbox if they say yes", "-                  if (dialog.getCheckBoxValue())  DrJava.getConfig().setSetting(option, Boolean.TRUE);", "-                  break;", "-                case JOptionPane.NO_OPTION:", "-                case JOptionPane.CANCEL_OPTION:", "-                case JOptionPane.CLOSED_OPTION:", "-                  // do nothing", "-                  break;", "-                default:", "-                  throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "-              }", "-            }", "-            else {", "-//              Utilities.showDebug(\"calling _compileAll\");", "-              _compileAll();", "-//              Utilities.showDebug(\"returned from _compileAll\");", "+            String title = \"Must Compile All Source Files to Run Unit Tests\";", "+            String msg = \"To unit test all documents, you must first compile all out of sync source files.\\n\" + ", "+              \"Would you like to compile all files and run the specified test?\";", "+            int rc = JOptionPane.showConfirmDialog(MainFrame.this, msg, title, JOptionPane.YES_NO_OPTION); ", "+            ", "+            switch (rc) {", "+              case JOptionPane.YES_OPTION:  // compile all open source files and test", "+                _model.getCompilerModel().addListener(testAfterCompile);  // listener removes itself", "+                _compileAll();", "+                break;", "+              case JOptionPane.NO_OPTION:  // abort unit testing", "+                _model.getJUnitModel().nonTestCase(true);  // cleans up", "+                break;", "+              default:", "+                throw new RuntimeException(\"Invalid returnCode from showConfirmDialog: \" + rc);", "-      else _compileAll();  /* automatically compile if running junit test */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8b73a3c3a29d7c062a3b03607d871e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public TypeData forBracedBody(BracedBody that)", "signatureAfterChange": "   public TypeData forBracedBody(BracedBody that)", "diff": ["-   */", "+    */", "+//    System.err.println(\"forBracedBody called in \" + _data.getSymbolData() + \" for \" + that);", "-    if (startIndex == 0) {", "-      implicitSuperConstructor(that);", "-    }", "+    if (startIndex == 0) implicitSuperConstructor(that);", "-    for (int j = 0; j<this._thrown.size(); j++) {", "-      if (isUncaughtCheckedException(this._thrown.get(j).getFirst(), that)) {", "-        handleUncheckedException(this._thrown.get(j).getFirst(), this._thrown.get(j).getSecond());", "+    int thrownSize = _thrown.size();", "+    System.err.println(\"_thrown.size() in \" + _data + \" = \" + thrownSize);", "+    for (int j = 0; j < thrownSize; j++) {", "+      if (isUncaughtCheckedException(_thrown.get(j).getFirst(), that)) {", "+        handleUncheckedException(_thrown.get(j).getFirst(), _thrown.get(j).getSecond());", "-      ", "+    /** The following is supposed to be equivalent to calling SpecialTypeChecker.forBody(that, items_result) */", "-      //walk over what has been thrown and throw an error if it contains an unchecked exception", "-      for (int j = 0; j<this._thrown.size(); j++) {", "-        if (isUncaughtCheckedException(this._thrown.get(j).getFirst(), that)) {", "-          handleUncheckedException(this._thrown.get(j).getFirst(), this._thrown.get(j).getSecond());", "+      // Walk over what has been thrown and throw an error if it contains an unchecked exception", "+      for (int j = thrownSize; j < _thrown.size(); j++) {", "+        if (isUncaughtCheckedException(_thrown.get(j).getFirst(), that)) {", "+          handleUncheckedException(_thrown.get(j).getFirst(), _thrown.get(j).getSecond());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67b761fdac1c5966e0b80f8019071ee8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 47, "signatureBeforeChange": "   protected SymbolData getSymbolDataForClassFile(String className, SourceInfo si)", "signatureAfterChange": "   private SymbolData _identifyType(String name, SourceInfo si, String enclosingClassName)", "diff": ["-    */", "-  protected SymbolData getSymbolDataForClassFile(String className, SourceInfo si) {", "-    SymbolData sd = getSymbolDataHelper(className, si, true, true, true, false);", "-    ", "-    if (sd == null) {", "-      // This is an error in the user's class file so throw an error.", "-      // The NullLiteral is a hack to get a JExpression with the correct SourceInfo inside.", "-      _addAndIgnoreError(\"Class \" + className + \" not found.\", new NullLiteral(si));", "-      return null;", "-    }", "-    sd.setIsContinuation(false);", "-    ", "-    continuations.remove(sd.getName());", "-    return sd;", "-  }", "+    * datas.  We need to use the relative inner class name to do this. */", "+  private SymbolData _identifyType(String name, SourceInfo si, String enclosingClassName) {", "+    System.err.println(\"Calling _identifyType(\" + name  + \") within \" + enclosingClassName);", "+    SymbolData sd = getSymbolData(name, si);  // TODO: uses wrong enclosingClassName!!!", "+    if (sd != null) return sd;", "+    SymbolData enclosingSD = getQualifiedSymbolData(enclosingClassName, SourceInfo.NO_INFO);", "+    if (enclosingSD == null) {", "+      System.err.println(\"***ERROR*** in _identifyType \" + enclosingClassName + \" NOT FOUND\");", "+      return null;  // should only happen in tests", "+    sd = enclosingSD.getInnerClassOrInterface(name);", "+     ", "+    if (sd != null) return sd;", "+//    ", "+//    // Create continuation for new type", "+//    String qualifiedTypeName = enclosingClassName + '.' + name;", "+//    if (_innerClassesInThisBody.contains(qualifiedTypeName)) {  ", "+//      // reference to an inner class that will subsequently be defined", "+//      sd = addInnerSymbolData(si, qualifiedTypeName, enclosingSD);", "+//    }", "+    ", "+    return sd;  // Note: sd is null if name is not identified."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5bb2815c7bdffe5efbb2fe18251d9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean mapInsert(KeyStroke ks, Action a)", "signatureAfterChange": "   private boolean shouldUpdate(KeyStroke ks, Action a)", "diff": ["-  public boolean mapInsert(KeyStroke ks, Action a) {", "+  //precondition ks != KeyStrokeOption.NULL_KEYSTROKE", "+  private boolean shouldUpdate(KeyStroke ks, Action a) {", "+      /*", "-      if (!_keyToActionMap.containsKey(ks) ) { ", "+      */", "+      if (!_keyToDataMap.containsKey(ks) ) { ", "-        _keyToActionMap.put(ks, a);", "+        //_keyToActionMap.put(ks, a);", "+        //need to update map", "+        //KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(a);", "+        //data.setKeyStroke(ks);", "+        //_keyToDataMap.put(ks,data);", "+        ", "-      else if (_keyToActionMap.get(ks).equals(a)) { ", "+      else if (((KeyStrokeData)_keyToDataMap.get(ks)).getAction().equals(a)) { ", "+        KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(ks);", "-        Action oldA = (Action) _keyToActionMap.get(ks);", "-        String text = key + \" is already assigned to \" + _actionToNameMap.get(oldA) + ", "-          \". Would you like to assign \" + key + \" to \" + _actionToNameMap.get(a) + \"?\";", "+        KeyStrokeData newKSD = (KeyStrokeData)_actionToDataMap.get(a);", "+        String text = \"\\\"\"+ key +\"\\\"\" + \" is already assigned to \\\"\" + conflictKSD.getName() + ", "+          \"\\\".\\nWould you like to assign \\\"\" + key + \"\\\" to \\\"\" + newKSD.getName() + \"\\\"?\";", "-            _keyToActionMap.remove(ks);", "-            _keyToActionMap.put(ks,a);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83be7a78104d8d71e63c097da0aa7827", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected void getDistToEnclosingBrace(IndentInfo braceInfo)", "signatureAfterChange": "   public BraceInfo getDistToEnclosingBrace()", "diff": ["+    */", "+  public BraceInfo getDistToEnclosingBrace() {", "+    Stack<Brace> braceStack = new Stack<Brace>();", "+    TokenList.Iterator iter = _cursor._copy();", "+    resetWalkerLocationToCursor();", "+    // this is the distance to in front of the previous newline.", "+    final int distToPrevNewline = _parent.getDistToPreviousNewline();", "+", "+    if (distToPrevNewline == -1) {", "+      iter.dispose();", "+      return BraceInfo.NONE;", "+    }", "+    ", "+    int relDistance = distToPrevNewline + 1;", "+    int distance = relDistance;", "+    ", "+    // move to the proper location, then add the rest of the block and go to the previous.", "+    iter.move(-relDistance);", "+    final int offset = iter.getBlockOffset();", "+    relDistance += offset;", "+    distance += offset;", "+", "+    if (iter.atStart() || iter.atFirstItem()) { // no preceding brace exists", "+      iter.dispose();", "+      return BraceInfo.NONE;", "+    }", "+", "+    iter.prev(); // move to reduced token preceding the newline.", "+", "+    ", "+    String braceType;", "+", "+    // either we get a match and the stack is empty", "+    // or we reach the start of a file and haven't found a match", "+    // or we have a open brace that doesn't have a match,", "+    // so we abort", "+    while (! iter.atStart()) {", "+            ", "+      ReducedToken curToken = iter.current();", "+      int size = curToken.getSize();", "+      distance += size;", "+      relDistance += size;", "+", "+      if (! curToken.isGap()) {", "+        ", "+        Brace curBrace = (Brace) curToken;", "+", "+        if (moveWalkerGetState(-relDistance) == FREE) {", "+              // open", "+              if (curBrace.isOpenBrace()) {", "+                if (braceStack.isEmpty()) {", "+                  braceType = curBrace.getType();", "+                  // distance to brace == distance;", "+                  iter.dispose();", "+                  return new BraceInfo(braceType, distance);", "+                }", "+                Brace popped = braceStack.pop();", "+                if (! curBrace.isMatch(popped)) {", "+                  iter.dispose();", "+                  return BraceInfo.NONE;", "+                }", "+              }", "+              // closed", "+              else braceStack.push(curBrace);", "+            }", "+        relDistance = 0;", "+      }", "+      // no matter what, we always want to increase the distance", "+      // by the size of the token we have just gone over", "+      iter.prev();", "+    }", "+", "+    // Enclosing brace not found", "+    iter.dispose();", "+    return BraceInfo.NONE;", "+  }", "-    int relDistance = braceInfo.distToNewline + 1;", "-    if (braceInfo.distToNewline == -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12ab865fda5d948150027a35eedc947", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "9b3d9c50193384b6879a006d53cc699b70b78101", "commitAfterChange": "18c065824a3025d62c2f6ca04849f79b162fb494", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public static boolean warnIfLinuxWithCompiz()", "signatureAfterChange": "   public static boolean warnIfLinuxWithCompiz()", "diff": ["-      if (!DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.WARN_IF_COMPIZ)) return false; // set to ignore", "+      if (!DrJava.getConfig().getSetting(OptionConstants.WARN_IF_COMPIZ)) return false; // set to ignore", "+      final JavaVersion.FullVersion ver160_20 = JavaVersion.parseFullVersion(\"1.6.0_20\");", "+      if (JavaVersion.CURRENT_FULL.compareTo(ver160_20)>=0) return false; // Java >= 1.6.0_20", "+      ", "-      int res = javax.swing.JOptionPane.showOptionDialog(null,", "-                                                         \"<html>DrJava has detected that you are using Compiz.<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"Compiz and Java Swing are currently incompatible and can cause<br>\" + ", "-                                                         \"DrJava or your computer to crash.<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"We recommend that you <b>disable Compiz</b>. On Ubuntu, go to<br>\" + ", "-                                                         \"System->Preferences->Appearence, display the Visual Effects tab,<br>\" + ", "-                                                         \"and select 'None'.<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"For more information, please go to http://drjava.org/compiz<br>\" + ", "-                                                         \"<br>\" + ", "-                                                         \"Do you want to start DrJava anyway?</html>\",", "-                                                         \"Compiz detected\",", "-                                                         JOptionPane.DEFAULT_OPTION,", "-                                                         javax.swing.JOptionPane.WARNING_MESSAGE,", "-                                                         null,", "-                                                         options,", "-                                                         options[0]);", "+      int res = javax.swing.JOptionPane.", "+        showOptionDialog(null,", "+                         \"<html>DrJava has detected that you are using Compiz with a version<br>\" +", "+                         \"of Java that is older than \" + ver160_20 + \".<br>\" + ", "+                         \"<br>\" + ", "+                         \"Compiz and older versions of Java are incompatible and can cause<br>\" + ", "+                         \"DrJava or your computer to crash.<br>\" + ", "+                         \"<br>\" + ", "+                         \"We recommend that you <b>update to \" + ver160_20 + \" or newer</b>,<br>\" +", "+                         \"or that you disable Compiz if you still experience problems.<br>\" +", "+                         \"On Ubuntu, go to System->Preferences->Appearence, display the<br>\" +", "+                         \"Visual Effects tab, and select 'None'.<br>\" + ", "+                         \"<br>\" + ", "+                         \"For more information, please go to http://drjava.org/compiz<br>\" + ", "+                         \"<br>\" + ", "+                         \"Do you want to start DrJava anyway?</html>\",", "+                         \"Compiz detected\",", "+                         JOptionPane.DEFAULT_OPTION,", "+                         javax.swing.JOptionPane.WARNING_MESSAGE,", "+                         null,", "+                         options,", "+                         options[0]);", "-          DrJava.getConfig().setSetting(edu.rice.cs.drjava.config.OptionConstants.WARN_IF_COMPIZ, false);", "+          DrJava.getConfig().setSetting(OptionConstants.WARN_IF_COMPIZ, false);"]}], "num": 2913}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3c161eba34fd8cfad5f00548c2faaf4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2259017535f7d98dd3d8799a990119ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public synchronized DefinitionsDocument getDocument()        throws IOException, FileMovedException", "signatureAfterChange": "     public DefinitionsDocument getDocument() throws IOException, FileMovedException", "diff": ["-    public synchronized DefinitionsDocument getDocument() ", "-      throws IOException, FileMovedException {", "-        ", "-      if (_stat != FIRST_IN_LRU && _stat != UNMANAGED) makeMeFirst();", "-      else if (_stat == UNMANAGED && _doc !=null && !_doc.isModifiedSinceSave()) _stat = NOT_IN_LRU;", "-", "-      if (_doc != null) return _doc;", "-  ", "-      try {", "-        _doc = _rec.make();", "-        if (_doc == null) throw new IllegalStateException(\"the reconstructor made a null document\");", "+    public DefinitionsDocument getDocument() throws IOException, FileMovedException {", "+      boolean isResident = false;", "+      boolean makeUnmanaged = false;  // makeUnmanaged -> isResident", "+      synchronized (this) {", "+        isResident = _doc != null;", "+        if (isResident) {  // Document is in queue or \"unmanaged\" (a modified doc or a new doc with no file)", "+          if (isUnmanaged() || isUntitled()) return _doc;", "+          makeUnmanaged = _doc.isModifiedSinceSave();", "+          if (makeUnmanaged)  { setUnmanaged(); }", "+        }", "-      catch(BadLocationException e) { throw new UnexpectedException(e); }", "+      if (makeUnmanaged) synchronized (DocumentCache.this) {  _residentQueue.remove(this); }", "+      if (isResident) return _doc;", "+        ", "+      boolean isUntitled = false;", "+      synchronized (this) {", "+        isUntitled = isUntitled();  // This locking may be overkill; once titled, always titled", "+        try { // _doc is not in memory", "+          _doc = _rec.make();", "+          if (_doc == null) throw new IllegalStateException(\"the reconstructor made a null document\");", "+        }", "+        catch(BadLocationException e) { throw new UnexpectedException(e); }", "+      }", "+//      Utilities.showDebug(\"Document \" + _doc + \" reconstructed; _stat = \" + _stat);", "+      if (! isUntitled) synchronized (DocumentCache.this) { addToQueue(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d1c742b9173502039d4626d10b3827a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public DefinitionsDocument getDocument() throws IOException, FileMovedException", "signatureAfterChange": "     public DefinitionsDocument getDocument() throws IOException, FileMovedException", "diff": ["-      boolean isResident = false;", "-      boolean makeUnmanaged = false;  // makeUnmanaged -> isResident", "-      synchronized(_dmLock) { // lock the document manageer so that its state can be updated", "-        isResident = _doc != null;", "-        if (isResident) {  // Document is in queue or \"unmanaged\" (a modified doc or a new doc with no file)", "-          if (isUnmanagedOrUntitled()) return _doc;", "-          makeUnmanaged = _doc.isModifiedSinceSave();", "-          if (makeUnmanaged)  { setUnmanaged(); }", "-        }", "-      }", "-      if (makeUnmanaged) remove(this); // remove this from queue", "-      if (isResident) return _doc;", "-        ", "-      boolean isUntitled = false;", "-      synchronized(_dmLock) {      // Lock dm so that the _doc field can be updated.", "-        isUntitled = isUntitled();  // This locking may be overkill; once titled, always titled", "+//      Utilities.showDebug(\"getDocument called on \" + this + \" with _stat = \" + _stat);", "+      DefinitionsDocument doc = _doc;", "+      if (doc != null) return doc;", "+      synchronized(_cacheLock) { // lock the cache so that this DocManager's state can be updated", "+        if (_doc != null) return _doc;  // _doc may have changed since test outside of _cacheLock", "-          if (_doc == null) throw new IllegalStateException(\"the reconstructor made a null document\");", "+          assert _doc != null;", "+//        Utilities.showDebug(\"Document \" + _doc + \" reconstructed; _stat = \" + _stat);", "+        if (_stat == NOT_IN_QUEUE) add();       // add this to queue ", "+        return _doc;", "-//      Utilities.showDebug(\"Document \" + _doc + \" reconstructed; _stat = \" + _stat);", "-      if (! isUntitled) addToQueue();  // add this to queue if corresponds to a disk file", "-      return _doc;"]}], "num": 10877}
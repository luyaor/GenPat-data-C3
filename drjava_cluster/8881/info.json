{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77b44ae6dbb928e535ed45e53e900376", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38cc548c2649232c36733ca8c9337962", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public synchronized Vector<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-      Iterator<StackFrame> iter = thread.frames().iterator();  // Added <StackFrame> parameterization; warning will go away in JDK 1.5", "-      while (iter.hasNext()) {", "-        frames.add(new JPDAStackData(iter.next()));", "-      }", "+      for (StackFrame f : thread.frames()) { frames.add(new JPDAStackData(f)); }", "-      _log(\"Unable to obtain stack frame.\", itse);", "+      error.log(\"Unable to obtain stack frame.\", itse);", "-      _log(\"VMDisconnected when getting the current stack frame data.\", vmde);", "+      error.log(\"VMDisconnected when getting the current stack frame data.\", vmde);", "-      _log(\"The stack frame requested is invalid.\", isfe);", "+      error.log(\"The stack frame requested is invalid.\", isfe);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e70b57b07b19e5ba5c1afe314d40baa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-nextgen/edu/rice/cs/drjava/model/compiler/descriptors/NextGenDescriptor.java", "commitBeforeChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "commitAfterChange": "2bbdbef8ef11cd93c30f52236eee8443bfc75e9d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Iterable<File> getSearchFiles()", "signatureAfterChange": "   public Iterable<File> getSearchFiles()", "diff": ["-        new File(\"/usr/local/JavaMint/nextgen2/nextgen2.jar\"),", "-        new File(\"/usr/local/JavaMint/nextgen2/jars/nextgen2.jar\"),", "-        new File(\"/home/mgricken/research/Misc/NextGen/nextgen2/nextgen2.jar\"),", "-        new File(\"/home/mgricken/research/Misc/NextGen/nextgen2/jars/nextgen2.jar\"),", "-        new File(edu.rice.cs.util.FileOps.getDrJavaFile().getParentFile(), \"nextgen2.jar\")", "+        new File(\"/usr/local/nextgen2/nextgen2.jar\"),", "+        new File(\"/usr/local/nextgen2/jars/nextgen2.jar\")", "+//        new File(\"/home/mgricken/research/Misc/NextGen/nextgen2/nextgen2.jar\"),", "+//        new File(\"/home/mgricken/research/Misc/NextGen/nextgen2/jars/nextgen2.jar\"),", "+//        new File(edu.rice.cs.util.FileOps.getDrJavaFile().getParentFile(), \"nextgen2.jar\")", "+        files = IterUtil.compose(files, new File(new File(ngc_home), \"jars/nextgen2.jar\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdec36058b3d235ac4fd471e0ff77115", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void testNumListeners()", "signatureAfterChange": "     public void testNumListeners()", "diff": ["-   int numDocListeners = doc1.getDocument().getDocumentListeners().length;", "-   int numUndoListeners = doc1.getDocument().getUndoableEditListeners().length;", "+   int numDocListeners = doc1.getDocumentListeners().length;", "+   int numUndoListeners = doc1.getUndoableEditListeners().length;", "-   doc1.getDocument();", "-   doc2.getDocument();", "-   doc3.getDocument();", "-   doc4.getDocument();", "+   doc1.getLength();", "+   doc2.getLength();", "+   doc3.getLength();", "+   doc4.getLength();", "-   doc5.getDocument();", "+   doc5.getLength();", "-   doc1.getDocument();", "+   doc1.getLength();", "-   assertEquals(\"the number of document listeners is the same after reconstruction\", numDocListeners, doc1.getDocument().getDocumentListeners().length);", "-   assertEquals(\"the number of undoableEditListeners is the same after reconstruction\", numUndoListeners, doc1.getDocument().getUndoableEditListeners().length);", "+   assertEquals(\"the number of document listeners is the same after reconstruction\", numDocListeners, doc1.getDocumentListeners().length);", "+   assertEquals(\"the number of undoableEditListeners is the same after reconstruction\", numUndoListeners, doc1.getUndoableEditListeners().length);"]}], "num": 8881}
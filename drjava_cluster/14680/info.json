{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3936673ebbe42470fbedb233f87bf709", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd507c0987087b7ddf07eaabdd26c49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 142, "signatureBeforeChange": "          public void threadLocationUpdated(OpenDefinitionsDocument doc,                                        final int lineNumber)", "signatureAfterChange": "          public void threadLocationUpdated(final OpenDefinitionsDocument doc,                                        final int lineNumber)", "diff": ["-    ", "-    public void threadLocationUpdated(OpenDefinitionsDocument doc, ", "-                                      final int lineNumber) {", "-      ActionListener setSizeListener = new ActionListener() {", "-        public void actionPerformed(ActionEvent ae) {", "-          _currentDefPane.centerViewOnLine(lineNumber);", "-          _docList.revalidate();", "-          _docList.repaint();", "-          _docSplitPane.revalidate();", "-          _docSplitPane.repaint();", "-      _currentDefPane.addSetSizeListener(setSizeListener);", "-      if (!_model.getActiveDocument().equals(doc)) {", "-        //DrJava.consoleOut().println(\"Don't need to setActiveDocument here\");", "-        _model.setActiveDocument(doc);", "-      }", "-      ", "-      if (_currentDefPane.getSize().getWidth() > 0 &&", "-          _currentDefPane.getSize().getHeight() > 0) {", "-        _currentDefPane.centerViewOnLine(lineNumber); ", "-        _docList.revalidate();", "-        _docList.repaint();", "-        _docSplitPane.revalidate();", "-        _docSplitPane.repaint();", "-      }", "-", "-      if (_currentThreadLocationHighlight != null) {", "-        _currentThreadLocationHighlight.remove();", "-        _currentThreadLocationHighlight = null;", "-        _currentDefPane.revalidate();", "-        _currentDefPane.repaint();", "-      }", "-      DefinitionsDocument defDoc = doc.getDocument();", "-      int startOffset = defDoc.getOffset(lineNumber);", "-      _currentThreadLocationHighlight = _currentDefPane.getHighlightManager().addHighlight(startOffset,", "-                                                         defDoc.getLineEndPos(startOffset),", "-                                                         DefinitionsPane.THREAD_PAINTER);", "+    public void threadLocationUpdated(final OpenDefinitionsDocument doc, ", "+                                      final int lineNumber) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          //DrJava.consoleOut().println(\"MF: thread location updated\");", "+          ", "+          ActionListener setSizeListener = new ActionListener() {", "+            public void actionPerformed(ActionEvent ae) {", "+              //DrJava.consoleOut().println(\"MF: in setSizeListener.actionPerformed\");", "+              _currentDefPane.centerViewOnLine(lineNumber);", "+              _docList.revalidate();", "+              _docList.repaint();", "+              _docSplitPane.revalidate();", "+              _docSplitPane.repaint();", "+            }", "+          };", "+          _currentDefPane.addSetSizeListener(setSizeListener);", "+          ", "+          if (!_model.getActiveDocument().equals(doc)) {", "+            //DrJava.consoleOut().println(\"Don't need to setActiveDocument here\");", "+            _model.setActiveDocument(doc);", "+          }", "+      ", "+          if (_currentDefPane.getSize().getWidth() > 0 &&", "+              _currentDefPane.getSize().getHeight() > 0) {", "+            //DrJava.consoleOut().println(\"MF: centering view\");", "+            _currentDefPane.centerViewOnLine(lineNumber); ", "+            //_docList.revalidate();", "+            //_docList.repaint();", "+            //_docSplitPane.revalidate();", "+            //_docSplitPane.repaint();", "+          }", "+", "+          if (_currentThreadLocationHighlight != null) {", "+            _currentThreadLocationHighlight.remove();", "+            _currentThreadLocationHighlight = null;", "+            //_currentDefPane.revalidate();", "+            //_currentDefPane.repaint();", "+          }", "+          DefinitionsDocument defDoc = doc.getDocument();", "+          int startOffset = defDoc.getOffset(lineNumber);", "+          int endOffset = defDoc.getLineEndPos(startOffset);", "+          _currentThreadLocationHighlight = ", "+            _currentDefPane.getHighlightManager().addHighlight(startOffset,", "+                                                               endOffset,", "+                                                               DefinitionsPane.THREAD_PAINTER);", "+          //DrJava.consoleOut().println(\"MF: done with thread loc update\");", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f3fc6f52a5942fd2be81269cdb022f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "304bb61899a16b4e87269d9bb4c4a3ecbf1bc6d4", "commitAfterChange": "efc072ede22ea55faaadbf97a73c4466d939ffd3", "methodNumberBeforeChange": 427, "methodNumberAfterChange": 427, "signatureBeforeChange": "   public void scrollToDocumentAndLine(final OpenDefinitionsDocument doc, final int lineNumber, final boolean shouldHighlight)", "signatureAfterChange": "   public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, final boolean shouldHighlight)", "diff": ["-  public void scrollToDocumentAndLine(final OpenDefinitionsDocument doc, final int lineNumber, final boolean shouldHighlight) {", "-//    Utilities.invokeLater(new Runnable() {", "-//    public void run() {", "-    // This listener is used when the document to display is", "-    // not the active document. In this case, when setActiveDocument", "-    // is called, the document won't yet have positive size and we", "-    // don't want to scroll to a line until it does, so we wait", "-    // for a call to setSize.", "-    ", "-//    ActionListener setSizeListener = new ActionListener() {", "-//      public void actionPerformed(ActionEvent ae) {", "-//        Utilities.showDebug(\"custon setSizeListener called in MainFrame with event \" + ae);", "-//        _currentDefPane.centerViewOnLine(lineNumber);", "-//        _currentDefPane.requestFocusInWindow();", "-//      }", "-//    };", "-//    _currentDefPane.addSetSizeListener(setSizeListener);", "-    ", "+  public void scrollToDocumentAndOffset(final OpenDefinitionsDocument doc, final int offset, final boolean shouldHighlight) {", "-    // this block occurs if the documents is already open and as such", "-    // has a positive size", "-    if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {", "-//      SwingUtilities.invokeLater(new Runnable() {  ", "-//        public void run() {", "-//          Utilities.showDebug(\"Getting ready to reset defintions pane\");", "-          _currentDefPane.centerViewOnLine(lineNumber);", "-          _currentDefPane.requestFocusInWindow();", "-//        }", "-//      });", "-    }", "-    ", "-    /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.  It is not clear ", "-     * why this deferral works. */", "+        // get the line number after the switch of documents was made", "+        int lineNumber = doc.getLineOfOffset(offset)+1;", "+        ", "+        // this block occurs if the documents is already open and as such", "+        // has a positive size", "+        if (_currentDefPane.getSize().getWidth() > 0 && _currentDefPane.getSize().getHeight() > 0) {      ", "+          _currentDefPane.centerViewOnOffset(offset);", "+          _currentDefPane.requestFocusInWindow();", "+        }", "+        ", "+        /* The execution of this block of code is deferred using SwingUtilties to fix bug #1243993.", "+         * It is not clear why this deferral works.", "+         * Comment by mgricken: Probably because the _currentDefPane hasn't been created yet for", "+         * a new document. That's why I had to move the code above into this Runnable. If this", "+         * method was called for a yet unseen document, the document would be switched, but the cursor", "+         * would not be positioned correctly. */", "-              _currentThreadLocationHighlight =", "-                _currentDefPane.getHighlightManager().", "+              _currentThreadLocationHighlight = _currentDefPane.getHighlightManager().", "-//      }", "-//    });"]}], "num": 14680}
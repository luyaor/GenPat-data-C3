{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39a1abd4086a4015251a926d152dca8a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1440ebf1d3e5965d4aa6f2ec12aa6eb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "   protected void _checkAbstractMethods(SymbolData sd, JExpression classDef)", "signatureAfterChange": "   protected void _checkAbstractMethods(SymbolData sd, JExpression classDef)", "diff": ["-    LinkedList<SymbolData> interfaces = sd.getInterfaces();", "-    Iterator<SymbolData> iter = interfaces.iterator();", "-    while (iter.hasNext()) {", "-      SymbolData next = iter.next();", "-      _checkAbstractMethodsHelper(sd, next, cmds, classDef);", "+    for (SymbolData iSD: sd.getInterfaces()) {", "+      _checkAbstractMethodsHelper(sd, iSD, cmds, classDef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a24dc2ef59943280b2cbe4474f61ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 49, "signatureBeforeChange": "   private void _checkAbstractMethodsHelper(SymbolData origSd, SymbolData sd, LinkedList<MethodData> concreteMds, JExpression classDef)", "signatureAfterChange": "   private void _checkAbstractMethodsHelper(SymbolData origSd, SymbolData sd, LinkedList<MethodData> concreteMds, JExpression classDef)", "diff": ["-            arguments[i] = params[i].getType();", "+            arguments[i] = params[i].getType().getInstanceData();", "-    LinkedList<SymbolData> interfaces = sd.getInterfaces();", "-    Iterator<SymbolData> interiter = interfaces.iterator();", "-    while (interiter.hasNext()) {", "-      _checkAbstractMethodsHelper(origSd, interiter.next(), _cloneMethodDataList(concreteMds), classDef);", "+    for (SymbolData iSD: sd.getInterfaces()) {", "+      _checkAbstractMethodsHelper(origSd, iSD, _cloneMethodDataList(concreteMds), classDef);"]}], "num": 20032}
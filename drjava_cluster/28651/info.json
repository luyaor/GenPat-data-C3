{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52c1d4c58b6c256b647f48a392cbddb5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6daffeba4bffd5e5cf95a04c90b138ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "    public boolean isCastableTo(SymbolData castTo, JavaVersion version)", "signatureAfterChange": "    public boolean isCastableTo(SymbolData castTo, JavaVersion version)", "diff": ["-         if (LanguageLevelConverter.versionSupportsAutoboxing(version)) { //You never box the left, so see if this can be unboxed to be a primitive.", "+         if (LanguageLevelConverter.versionSupportsAutoboxing(version)) { ", "+           //You never box the left, so see if this can be unboxed to be a primitive.", "-       else { //this is an interface", "+       else { // this is an interface", "-         else { //castTo is an interface", "-           //return false if this and castTo contain one or more methods with the same signature but different return types.", "-           if (LanguageLevelConverter.versionSupportsAutoboxing(version)) {return true;} //this check is no longer done in 1.5", "+         else { // castTo is an interface", "+           // return false if this and castTo contain methods with the same signature but different return types.", "+           if (LanguageLevelConverter.versionSupportsAutoboxing(version)) return true; ", "-               //TypeChecker._addError(\"Types \" + this.getName() + \" and \" + castTo.getName() + \" are incompatible.  Both implement \" + md.getName() + \" but have different return types\", md.getSourceInfo());", "+               /* TypeChecker._addError(\"Types \" + this.getName() + \" and \" + castTo.getName() + \" are incompatible.  ", "+                  Both implement \" + md.getName() + \" but have different return types\", md.getSourceInfo()); */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b47463203fd0f1d930af0e974e1f08f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "diff": ["-   */", "+    */", "-      _addError(\"You are trying to cast to an instance of a type, which is not allowed.  Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);", "+      _addError(\"You are trying to cast to an instance of a type, which is not allowed.  \" + ", "+                \"Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);", "-    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + \", which is a class or interface type, not an instance\", that) &&", "-             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "+    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + ", "+                                \", which is a class or interface type, not an instance\", that) &&", "+             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), ", "+                                                        JAVA_VERSION)) {", "-      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + type_result.getName() + \" because they are not related\", that);", "+      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + ", "+                type_result.getName() + \" because they are not related\", that);"]}], "num": 28651}
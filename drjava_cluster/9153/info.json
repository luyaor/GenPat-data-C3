{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d04fde105eeb34c3a1a0f7b59fe04ae8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a63918b757b2198e2b80c0bd57090d5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException", "signatureAfterChange": "   public ProjectFileIR parse(File projFile)      throws IOException, FileNotFoundException, MalformedProjectFileException", "diff": ["-  public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException {", "-    BufferedReader r = new BufferedReader(new FileReader(projFile));", "-    /* we actually want the path to the project file, not the file itself */", "-    if( projFile.isFile() ) {", "-      projFile = projFile.getParentFile();", "-    SourceTag st = TagFactory.makeSourceTag(projFile, r);", "-    ResourceTag rt = TagFactory.makeResourceTag(projFile, r);", "-    BuildDirTag mt = TagFactory.makeBuildDirTag(projFile, r);", "-    ClasspathTag ct = TagFactory.makeClasspathTag(projFile, r);", "-    JarTag jt = TagFactory.makeJarTag(projFile, r);", "+   */", "+  public ProjectFileIR parse(File projFile) ", "+    throws IOException, FileNotFoundException, MalformedProjectFileException{", "+    List<SEList> forest = null;", "+    try {", "+      forest = SExpParser.parse(projFile);", "+    }", "+    catch(SExpParseException e) {", "+      throw new MalformedProjectFileException(\"Parse Error: \" + e.getMessage());", "+    }", "-    return new ProjectFileIRImpl(st, rt, mt, ct, jt);", "+    ProjectFileIRImpl pfir = new ProjectFileIRImpl();", "+    ", "+    try{", "+      for(SEList exp : forest) {", "+        evaluateExpression(exp, pfir);", "+      }", "+    }catch(PrivateProjectException e){", "+      throw new MalformedProjectFileException(\"Parse Error: \" + e.getMessage());", "+    }", "+    ", "+    return pfir;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa338d5b54c5f4a28e5b49877a82ddd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "ef93e6cc3a79f29ed28debb1108f1338b9a974ad", "commitAfterChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                  Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                  Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-      int lastIndex = fileName.lastIndexOf(\".dj\");", "-      if (lastIndex != -1) {", "+      if (DrJavaFileUtils.isLLFile(fileName)) {", "-        File javaFile = new File(fileName.substring(0, lastIndex) + \".java\");", "+        File javaFile = new File(DrJavaFileUtils.getJavaForLLFile(fileName));", "-      ", "-      File canonicalFile = IOUtil.attemptCanonicalFile(f);", "-      String fileName = canonicalFile.getPath();", "-      ", "-      if(files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj0\")) ||", "-         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj1\")) ||", "-         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj2\"))", "-        ) {", "-        files.remove(new File(fileName));", "+      if (files.contains(DrJavaFileUtils.getDJForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ0ForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ1ForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ2ForJavaFile(f))) {", "+        files.remove(f);", "-      ", "-      ", "-//      new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(null, \"Warning: Files need to be closed\",", "-//                                                       \"The following files have matching .dj? files open.\", ", "-//                                                       \"These .java files need to be closed for proper compiling. \\n \\n \\n\"", "-//                                                       + filesToBeClosed.toString().replace(\", \",\"\\n\"),true).show();"]}], "num": 9153}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4803c88c78365b5e698d0f245b262dd6", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b2e3ec2cfebc93d7294ecee2f9d62fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/StateMonitor.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public synchronized T attemptEnsurePredicate(Predicate<? super T> predicate, long timeout)", "signatureAfterChange": "   public T attemptEnsurePredicate(Predicate<? super T> predicate, long timeout)", "diff": ["-  public synchronized T attemptEnsurePredicate(Predicate<? super T> predicate, long timeout) {", "-    if (timeout == 0) { return attemptEnsurePredicate(predicate); }", "-    else if (predicate.contains(_state)) { return _state; }", "-    else {", "-      // must record expected wake-up time to account for spurious wake-ups", "-      long timeoutTime = System.currentTimeMillis() + timeout;", "-      try {", "-        do {", "-          this.wait(timeout);", "-          long currentTime = System.currentTimeMillis();", "-          if (currentTime >= timeoutTime) { break; } // timeout has been reached", "-          else { timeout = timeoutTime - currentTime; }", "-        } while (!predicate.contains(_state));", "-        return _state;", "-      }", "-      catch (InterruptedException e) { return _state; }", "-    }", "+  public T attemptEnsurePredicate(Predicate<? super T> predicate, long timeout) {", "+    try { ensurePredicate(predicate, timeout, TimeUnit.MILLISECONDS); return _state; }", "+    catch (InterruptedException e) { return _state; }", "+    catch (TimeoutException e) { return _state; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "454686a3d463e248284c2b03f5edcf2b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/StateMonitor.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized T attemptEnsureState(T expected, long timeout)", "signatureAfterChange": "   public T attemptEnsureState(T expected, long timeout)", "diff": ["-  public synchronized T attemptEnsureState(T expected, long timeout) {", "-    if (timeout == 0) { return attemptEnsureState(expected); }", "-    else if (inState(expected)) { return _state; }", "-    else {", "-      // must record expected wake-up time to account for spurious wake-ups", "-      long timeoutTime = System.currentTimeMillis() + timeout;", "-      try {", "-        do {", "-          this.wait(timeout);", "-          long currentTime = System.currentTimeMillis();", "-          if (currentTime >= timeoutTime) { break; } // timeout has been reached", "-          else { timeout = timeoutTime - currentTime; }", "-        } while (!inState(expected));", "-        return _state;", "-      }", "-      catch (InterruptedException e) { return _state; }", "-    }", "+  public T attemptEnsureState(T expected, long timeout) {", "+    try { ensureState(expected, timeout, TimeUnit.MILLISECONDS); return _state; }", "+    catch (InterruptedException e) { return _state; }", "+    catch (TimeoutException e) { return _state; }"]}], "num": 12142}
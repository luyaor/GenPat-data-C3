{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34ca867a33f6aa1c50ebd4c44b6cb352", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0790924463b5d94458e6fa0afd6b6f97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "     public File getWorkingDirectory()", "signatureAfterChange": "     public File getWorkingDirectory()", "diff": ["-//      _log.log(\"AbstractGlobalModel.getWorkingDirectory() called\");", "-      try {", "-        File[] roots = getSourceRootSet();", "-        if (roots.length == 0) {", "-          // return getMasterWorkingDirectory();", "-          // use the last directory saved to the configuration", "-          File file = null;", "-//          _log.log(\"STICKY_INTERACTIONS_DIRECTORY flag is \" + DrJava.getConfig().getSetting(STICKY_INTERACTIONS_DIRECTORY));", "-          if (DrJava.getConfig().getSetting(STICKY_INTERACTIONS_DIRECTORY)) {", "-            try {", "-              // restore the path from the configuration", "-              file = FileOps.getValidDirectory(DrJava.getConfig().getSetting(LAST_INTERACTIONS_DIRECTORY));", "-//              _log.log(\"Last interactionsDirectory is \" + file);", "-            }", "-            catch (RuntimeException e) { file = null; }", "-          }", "-          if (file == null) {", "-            // something went wrong, clear the setting and use \"user.home\"", "-            DrJava.getConfig().setSetting(LAST_INTERACTIONS_DIRECTORY, FileOption.NULL_FILE);", "+      Iterable<File> roots = getSourceRootSet();", "+      if (!IterUtil.isEmpty(roots)) { return IterUtil.first(roots); }", "+      else {", "+        // use the last directory saved to the configuration", "+        File file = null;", "+        if (DrJava.getConfig().getSetting(STICKY_INTERACTIONS_DIRECTORY)) {", "+          try {", "+            // restore the path from the configuration", "-          // update the setting and return it", "-          DrJava.getConfig().setSetting(LAST_INTERACTIONS_DIRECTORY, file);", "-//          _log.log(\"Returning \" + file + \" as working directory\");", "-          return file;", "+          catch (RuntimeException e) { file = null; }", "-//         _log.log(\"Returning \" + roots[0].getCanonicalFile() + \" as working directory\");", "-        return roots[0].getCanonicalFile();", "+        if (file == null) {", "+          // something went wrong, clear the setting and use \"user.home\"", "+          file = FileOps.getValidDirectory(new File(System.getProperty(\"user.home\", \".\")));", "+        }", "+        // update the setting and return it", "+        DrJava.getConfig().setSetting(LAST_INTERACTIONS_DIRECTORY, file);", "+        return file;", "-      catch(IOException e) { /* fall through */ }", "-//       _log.log(\"Returning \" + System.getProperty(\"user.home\") + \" as working directory\");", "-      return new File(System.getProperty(\"user.home\"));  // a flat file configuration should have exactly one source root"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bd4133779a7cda7c73039d22e61e075", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void testGetIndentOfCurrStmtDelimiters() throws BadLocationException", "signatureAfterChange": "     public void testGetIndentOfCurrStmtDelimiters() throws BadLocationException", "diff": ["-    assertEquals(\"prev delimiter 0, no indent\", 0, _doc.getIndentOfCurrStmt(3));", "+    assertEquals(\"prev delimiter 0, no indent\", 0, _getIndentOfCurrStmt(3));", "-    assertEquals(\"prev delimiter 0, indent two spaces\", 2, _doc.getIndentOfCurrStmt(7));", "+    assertEquals(\"prev delimiter 0, indent two spaces\", 2, _getIndentOfCurrStmt(7));", "-    assertEquals(\"prev delimiter ';', no indent\", 0, _doc.getIndentOfCurrStmt(7));", "+    assertEquals(\"prev delimiter ';', no indent\", 0, _getIndentOfCurrStmt(7));", "-    assertEquals(\"prev delimiter ';', indent two spaces\", 2, _doc.getIndentOfCurrStmt(9));", "+    assertEquals(\"prev delimiter ';', indent two spaces\", 2, _getIndentOfCurrStmt(9));", "-    assertEquals(\"prev delimiter '{', no indent\", 0, _doc.getIndentOfCurrStmt(13));", "+    assertEquals(\"prev delimiter '{', no indent\", 0, _getIndentOfCurrStmt(13));", "-    assertEquals(\"prev delimiter '{', indent two spaces\", 2, _doc.getIndentOfCurrStmt(13));", "+    assertEquals(\"prev delimiter '{', indent two spaces\", 2, _getIndentOfCurrStmt(13));", "-    assertEquals(\"prev delimiter '}', no indent\", 0, _doc.getIndentOfCurrStmt(2));", "+    assertEquals(\"prev delimiter '}', no indent\", 0, _getIndentOfCurrStmt(2));", "-    assertEquals(\"prev delimiter '}', indent two spaces\", 2, _doc.getIndentOfCurrStmt(2));", "+    assertEquals(\"prev delimiter '}', indent two spaces\", 2, _getIndentOfCurrStmt(2));"]}], "num": 24068}
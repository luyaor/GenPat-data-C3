{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec8b7dafe04c99c2b06cdcdbba9d6bb8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cdbf62d42ef477786fabf8195255cfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "b94ae490d7487e2c6ea7efffdcd27f101f0c9e8e", "commitAfterChange": "c7a49752433e44464dd071fad0e4665a166a6ab9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File>      _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                 Iterable<File> classPath, Iterable<File> bootClassPath) throws IOException", "diff": ["-  private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,", "-                                                           Iterable<File> classPath, Iterable<File> bootClassPath) {", "+  private List<File> ", "+    _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,", "+                                Iterable<File> classPath, Iterable<File> bootClassPath) throws IOException {", "-    LinkedList<File> newFiles = new LinkedList<File>();  // Used to record the LL files that must be converted", "+        if (javaFileSet.contains(javaFile)) { _showConflictingFilesMessage(javaFile); }", "-        newFiles.add(javaFile);", "-      else { javaFileSet.add(canonicalFile); }", "+      else {", "+        if (javaFileSet.contains(canonicalFile)) { // canonicalFile was already added for a corresponding .dj* file", "+          _showConflictingFilesMessage(canonicalFile); }  ", "+        javaFileSet.add(canonicalFile); ", "+      }", "-      ", "-//      // Confirm that the .java files corresponding to .dj* files exist.", "-//      for (File f: newFiles)", "-//        if (! f.exists()) Utilities.show(f + \" does not exist\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ed236a205d6024d60156f8d4e46e34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public Iterable<CompilerInterface> getAvailableCompilers()", "diff": ["-  public CompilerInterface[] getAvailableCompilers() {", "-    return CompilerRegistry.ONLY.getAvailableCompilers();", "+  public Iterable<CompilerInterface> getAvailableCompilers() {", "+    if (_compilers.isEmpty()) { return IterUtil.singleton(NoCompilerAvailable.ONLY); }", "+    else { return IterUtil.snapshot(_compilers); }"]}], "num": 18810}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a5a98ceb82ff57196d1b0ff83ac06f6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d797b39023e01be6a24829a707c472d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 41, "signatureBeforeChange": "   synchronized void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   synchronized void scrollToSource(Location location)", "diff": ["-      // No stored doc, look on the source root set (later, also the sourcepath)", "-      ReferenceType rt = location.declaringType();", "-      String filename = \"\";", "+   */", "+  synchronized void scrollToSource(Location location){", "+    OpenDefinitionsDocument doc = null;", "+    ", "+    // No stored doc, look on the source root set (later, also the sourcepath)", "+    ReferenceType rt = location.declaringType();", "+    String filename = \"\";", "+    try {", "+      filename = rt.sourceName();", "+      filename = getPackageDir(rt.name()) + filename;", "+    }", "+    catch (AbsentInformationException aie) {", "+      // Don't know real source name:", "+      //   assume source name is same as file name", "+      String className = rt.name();", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      ", "+      // crop off the $ if there is one and anything after it", "+      int indexOfDollar = className.indexOf('$');    ", "+      if (indexOfDollar > -1) {", "+        className = className.substring(0, indexOfDollar);", "+      }", "+      ", "+      filename = className + \".java\";", "+    }", "+    ", "+    // Check source root set (open files)", "+    File[] sourceRoots = _model.getSourceRootSet();", "+    Vector<File> roots = new Vector<File>();", "+    for (int i=0; i < sourceRoots.length; i++) {", "+      roots.addElement(sourceRoots[i]);", "+    }", "+    File f = _model.getSourceFileFromPaths(filename, roots);", "+    if (f == null) {", "+      Vector<File> sourcepath = ", "+        DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "+      f = _model.getSourceFileFromPaths(filename, sourcepath);", "+    }", "+    ", "+    if (f != null) {", "+      // Get a document for this file, forcing it to open", "-        filename = rt.sourceName();", "-        filename = getPackageDir(rt.name()) + filename;", "+        doc = _model.getDocumentForFile(f);", "-      catch (AbsentInformationException aie) {", "-        // Don't know real source name:", "-        //   assume source name is same as file name", "-        String className = rt.name();", "-        String ps = System.getProperty(\"file.separator\");", "-        // replace periods with the System's file separator", "-        className = StringOps.replace(className, \".\", ps);", "-        ", "-        // crop off the $ if there is one and anything after it", "-        int indexOfDollar = className.indexOf('$');    ", "-        if (indexOfDollar > -1) {", "-          className = className.substring(0, indexOfDollar);", "-        }", "-      ", "-        filename = className + \".java\";", "+      catch (IOException ioe) {", "+        // No doc, so don't notify listener", "-        ", "-      // Check source root set (open files)", "-      File[] sourceRoots = _model.getSourceRootSet();", "-      Vector<File> roots = new Vector<File>();", "-      for (int i=0; i < sourceRoots.length; i++) {", "-        roots.addElement(sourceRoots[i]);", "-      }", "-      File f = _model.getSourceFileFromPaths(filename, roots);", "-      if (f == null) {", "-        Vector<File> sourcepath = ", "-          DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "-        f = _model.getSourceFileFromPaths(filename, sourcepath);", "-      }", "-      ", "-      if (f != null) {", "-        // Get a document for this file, forcing it to open", "-        try {", "-          doc = _model.getDocumentForFile(f);", "-        }", "-        catch (IOException ioe) {", "-          // No doc, so don't notify listener", "-        }", "-        catch (OperationCanceledException oce) {", "-          // No doc, so don't notify listener", "-        }", "+      catch (OperationCanceledException oce) {", "+        // No doc, so don't notify listener", "+    openAndScroll(doc, location);", "+  }", "-  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5deeea762c6868ba2b7a2c8166df946", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "a9e88c9896a0247806cc1a6d54ae50329689432b", "commitAfterChange": "87dc6eec48d92797c0b33779a71935f55ec078b5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public OpenDefinitionsDocument openFile(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public OpenDefinitionsDocument openFile(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException;", "diff": ["-    throws IOException, OperationCanceledException, AlreadyOpenException", "-  {", "-    DefinitionsDocument tempDoc = (DefinitionsDocument)", "-      _editorKit.createDefaultDocument();", "-    try {", "-      final File file = com.getFile();", "-", "-      OpenDefinitionsDocument openDoc = _getOpenDocument(file);", "-      if (openDoc != null) {", "-        throw new AlreadyOpenException(openDoc);", "-      }", "-", "-      _editorKit.read(new FileReader(file), tempDoc, 0);", "-      tempDoc.setFile(file);", "-      tempDoc.resetModification();", "-", "-      final OpenDefinitionsDocument doc =", "-        new DefinitionsDocumentHandler(tempDoc);", "-      _definitionsDocs.add(doc);", "-", "-      _notifyListeners(new EventNotifier() {", "-        public void notifyListener(GlobalModelListener l) {", "-          l.fileOpened(doc);", "-        }", "-      });", "-", "-      return doc;", "-    }", "-    catch (BadLocationException docFailed) {", "-      throw new UnexpectedException(docFailed);", "-    }", "-  }", "+    throws IOException, OperationCanceledException, AlreadyOpenException;"]}], "num": 20538}
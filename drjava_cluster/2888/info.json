{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b94ec078e1d105657c3360d137597e1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7dbc833e66296db2af04f8ce609559c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testStepInto()      throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testStepInto()      throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-      _debugger.step(Debugger.STEP_INTO);", "+      _asynchStep(Debugger.STEP_INTO);", "-      _debugger.step(Debugger.STEP_OVER);", "+      _asynchStep(Debugger.STEP_OVER);", "-      _debugger.step(Debugger.STEP_OVER);", "+      _asynchStep(Debugger.STEP_OVER);", "-      _debugger.step(Debugger.STEP_OVER);", "+      _asynchStep(Debugger.STEP_OVER);", "-      _debugger.step(Debugger.STEP_OVER);", "+      _asynchStep(Debugger.STEP_OVER);", "-      _debugger.step(Debugger.STEP_OVER);", "-      _waitForNotifies(2);  // interactionEnded, currThreadDied", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(3);  // interactionEnded, currThreadDied, interpreterChanged"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0fa2144872ff657b9ffa1225ed3a7dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "a3941c1000ac76b7c7dfbe2e02df0072cee011b6", "commitAfterChange": "9dde008cc707b0b4af3c382ad06f25fcd30d66ce", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree()", "signatureAfterChange": "   public void buildTree()", "diff": ["-      rule35 = new ActionStartCurrStmtPlus(oneLevel),", "-      rule34 = new ActionStartStmtOfBracePlus(oneLevel),", "-      rule33 = rule35,", "-      rule32 = new QuestionExistsCharInStmt('?', ':', rule33, rule34),", "-      rule31 = new QuestionLineContains(':', rule32, rule35),", "-      rule30 = new ActionStartCurrStmtPlus(\"\"),", "-      rule29 = new QuestionCurrLineStartsWithSkipComments(\"{\", rule30, rule31),", "-      rule28 = new ActionStartPrevStmtPlus(\"\", true),", "-      rule27 = rule34,", "-      rule26 = new ActionStartPrevStmtPlus(\"\", false),", "-      rule25 = new QuestionExistsCharInStmt('?', ':', rule26, rule27),", "-      rule24 = new QuestionLineContains(':', rule25, rule28),", "-      rule23 = new QuestionStartingNewStmt(rule24, rule29),", "-      rule22 = rule23,", "-      rule21 = rule34,", "+      rule37 = new ActionStartCurrStmtPlus(oneLevel),", "+      rule36 = new ActionStartStmtOfBracePlus(oneLevel),", "+      rule35 = rule37,", "+      rule34 = new QuestionExistsCharInStmt('?', ':', rule35, rule36),", "+      rule33 = new QuestionLineContains(':', rule34, rule37),", "+      rule32 = new ActionStartCurrStmtPlus(\"\"),", "+      rule31 = new QuestionCurrLineStartsWithSkipComments(\"{\", rule32, rule33),", "+      rule30 = new ActionStartPrevStmtPlus(\"\", true),", "+      rule29 = rule36,", "+      rule28 = new ActionStartPrevStmtPlus(\"\", false),", "+      rule27 = new QuestionExistsCharInStmt('?', ':', rule28, rule29),", "+      rule26 = new QuestionLineContains(':', rule27, rule30),", "+      rule25 = new QuestionStartingNewStmt(rule26, rule31),", "+      rule24 = rule25,", "+      rule23 = rule36,", "+      rule22 = new QuestionHasCharPrecedingOpenBrace(new char[] {'=',',','{'},rule23,rule24),", "+      rule21 = rule36,", "-      rule17 = new QuestionBraceIsCurly(rule18, rule23),", "+      rule17 = new QuestionBraceIsCurly(rule18, rule25),"]}], "num": 2888}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76e0f72219b6fafb844e9ac93cbcb958", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cee526cb8771a466c3e3c46064652fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void doubleClicked(MouseEvent e)", "signatureAfterChange": "   public void doubleClicked(MouseEvent e)", "diff": ["-            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().doc;", "-            final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "-            final boolean docSwitch = _model.getActiveDocument() != newDoc;", "-            if (docSwitch) _model.setActiveDocument(newDoc);", "-            final int curLine = newDoc.getCurrentLine();", "-            final int last = name.lastIndexOf(':');", "-            if (last >= 0) {", "-              try {", "-                String nend = name.substring(last + 1);", "-                int val = Integer.parseInt(nend);", "-                ", "-                final int lineNum = Math.max(1, val);", "-                Runnable command = new Runnable() {", "-                  public void run() {", "-                    try { _frame._jumpToLine(lineNum); }  // adds this region to browser history", "-                    catch (RuntimeException ex) { _frame._jumpToLine(curLine); }", "+            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+            if (newDoc != null) {", "+              final boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "+              final boolean docSwitch = _model.getActiveDocument() != newDoc;", "+              if (docSwitch) _model.setActiveDocument(newDoc);", "+              final int curLine = newDoc.getCurrentLine();", "+              final int last = name.lastIndexOf(':');", "+              if (last >= 0) {", "+                try {", "+                  String nend = name.substring(last + 1);", "+                  int val = Integer.parseInt(nend);", "+                  ", "+                  final int lineNum = Math.max(1, val);", "+                  Runnable command = new Runnable() {", "+                    public void run() {", "+                      try { _frame._jumpToLine(lineNum); }  // adds this region to browser history", "+                      catch (RuntimeException ex) { _frame._jumpToLine(curLine); }", "+                    }", "+                  };", "+                  if (docSwitch) {", "+                    // postpone running command until after document switch, which is pending in the event queue", "+                    EventQueue.invokeLater(command);", "-                };", "-                if (docSwitch) {", "-                  // postpone running command until after document switch, which is pending in the event queue", "-                  EventQueue.invokeLater(command);", "+                  else command.run();", "-                else command.run();", "+                catch(RuntimeException ex) { /* ignore */ }", "-              catch(RuntimeException ex) { /* ignore */ }", "-            }", "-            else if (docChanged) {", "-              // defer executing this code until after active document switch (if any) is complete", "-              EventQueue.invokeLater(new Runnable() { public void run() { _frame.addToBrowserHistory(); } });", "+              else if (docChanged) {", "+                // defer executing this code until after active document switch (if any) is complete", "+                EventQueue.invokeLater(new Runnable() { public void run() { _frame.addToBrowserHistory(); } });", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e13ff9ab581d3b44856699be76ccad6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void reset()", "signatureAfterChange": "   public void reset()", "diff": ["-    JUnitErrorModel juem = _model.getActiveDocument().getJUnitErrorModel();", "-    boolean testsHaveRun = false;", "-    if (juem != null) {", "-      _numErrors = juem.getErrorsWithoutPositions().length + juem.getErrorsWithPositions().length;", "-      testsHaveRun = juem.haveTestsRun();", "-    } else {", "-      _numErrors = 0;", "+    if (_docBeingTested != null) {", "+      JUnitErrorModel juem = _docBeingTested.getJUnitErrorModel();", "+      boolean testsHaveRun = false;", "+      if (juem != null) {", "+        _numErrors = juem.getErrorsWithoutPositions().length + juem.getErrorsWithPositions().length;", "+        testsHaveRun = juem.haveTestsRun();", "+      } else {", "+        _numErrors = 0;", "+      }", "+      _errorListPane.updateListPane(testsHaveRun);", "-    _errorListPane.updateListPane(testsHaveRun);"]}], "num": 1327}
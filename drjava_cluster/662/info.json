{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30f60fb098627f5a36cf5f615756e10d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2159de05fe9494508bd2cc57f9e9c126", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplacePanel(MainFrame frame, SingleDisplayModel model)", "diff": ["+    boolean ignoreTestCasesSelected = DrJava.getConfig().getSetting(OptionConstants.FIND_NO_TEST_CASES);", "+    _ignoreTestCases = new JCheckBox(\"No Test Cases\", ignoreTestCasesSelected);", "+    _ignoreTestCases.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        boolean isSelected = (e.getStateChange() == ItemEvent.SELECTED);", "+        DrJava.getConfig().setSetting(OptionConstants.FIND_NO_TEST_CASES, isSelected);", "+        _findField.requestFocusInWindow();", "+      }", "+    });", "+", "+", "+    JPanel _ignoreTestCasesPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _ignoreTestCasesPanel.add(_ignoreTestCases);", "+    _ignoreTestCasesPanel.setMaximumSize(new Dimension(200, 40));", "+    optionsPanel.add(_ignoreTestCasesPanel);", "+    gbLayout.setConstraints(_ignoreTestCasesPanel, c);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f17982ede6aea4410de8458315692cec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "df1e36f71885ed44596fe30b7349f6c2af6222fa", "commitAfterChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public TypeChecker makeTypeChecker(final Context context)", "signatureAfterChange": "   public AbstractTypeChecker makeTypeChecker(final Context context)", "diff": ["-  public TypeChecker makeTypeChecker(final Context context) {", "-    return new TypeChecker(context) {", "+  public AbstractTypeChecker makeTypeChecker(final Context context) {", "+    if (Float.valueOf(System.getProperty(\"java.specification.version\")) < 1.5) { ", "+      return new TypeChecker14(context) {", "-    };", "+      };", "+    }", "+    else {", "+      return new TypeChecker15(context) {", "+        /**", "+       * Visits a QualifiedName, returning our class if it is \"this\"", "+       * @param node the node to visit", "+       */", "+      public Class visit(QualifiedName node) {", "+        String var = node.getRepresentation();", "+        if (\"this\".equals(var)) {", "+          //            String cName = _thisClassName.replace('$', '.');", "+          //            if (!_thisPackageName.equals(\"\")) {", "+          //              cName = _thisPackageName + \".\" + cName;", "+          //            }", "+          //            Class c = context.lookupClass(cName);", "+          Class c = _loadClassForThis(context);", "+          node.setProperty(NodeProperties.TYPE, c);", "+          node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+          return c;", "+        }", "+        else return super.visit(node);", "+      }", "+", "+      };", "+    }"]}], "num": 662}
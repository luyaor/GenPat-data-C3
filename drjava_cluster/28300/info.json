{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "713912a6935191783b5c5d6cbde53c82", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b6f7a3264913c80b5b0690cacec1921", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 442, "methodNumberAfterChange": 442, "signatureBeforeChange": "\r \r   public void forMinusExpression(MinusExpression that)", "signatureAfterChange": "    public void forMinusExpression(MinusExpression that)", "diff": ["-\r", "-  public void forMinusExpression(MinusExpression that) {\r", "-    forMinusExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMinusExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMinusExpression(MinusExpression that) {", "+    forMinusExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMinusExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add009d8a08a53f0d0612f2209892a75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 443, "methodNumberAfterChange": 443, "signatureBeforeChange": "\r \r   public void forMultiplyExpression(MultiplyExpression that)", "signatureAfterChange": "    public void forMultiplyExpression(MultiplyExpression that)", "diff": ["-\r", "-  public void forMultiplyExpression(MultiplyExpression that) {\r", "-    forMultiplyExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMultiplyExpressionOnly(that);\r", "-  }\r", "+", "+  public void forMultiplyExpression(MultiplyExpression that) {", "+    forMultiplyExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMultiplyExpressionOnly(that);", "+  }"]}], "num": 28300}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3761e98338b592b176b92a8db59b343d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000c6eed22c1d99e6ac094b1bc9666d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "commitAfterChange": "47940fe74faf2ed044539c32c4d2eb5e5171e259", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final OpenDefinitionsDocument startDoc,                       final RegionManager<MovingDocumentRegion> rm, final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments,  final OpenDefinitionsDocument startDoc,                       final RegionManager<MovingDocumentRegion> rm, final FindResultsPanel panel)", "diff": ["-  public void findAll(String searchStr, final boolean searchAll, final OpenDefinitionsDocument startDoc,", "+  public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,", "+                      final boolean wholeWord, final boolean noComments,  final OpenDefinitionsDocument startDoc,", "-", "+    OpenDefinitionsDocument oldDoc = _machine.getDocument();", "+    OpenDefinitionsDocument oldFirstDoc = _machine.getFirstDoc();", "+    String oldFindWord = _machine.getFindWord();", "+    boolean oldSearchAll = _machine.getSearchAllDocuments();", "+    boolean oldMatchCase = _machine.getMatchCase();", "+    boolean oldWholeWord = _machine.getMatchWholeWord();", "+    boolean oldNoComments = _machine.getIgnoreCommentsAndStrings();", "+    int oldPosition = _machine.getCurrentOffset();", "+    ", "+    _machine.setSearchAllDocuments(searchAll);", "+    _machine.setMatchCase(matchCase);", "+    if (wholeWord) { _machine.setMatchWholeWord(); }", "+    else { _machine.setFindAnyOccurrence(); }", "+    _machine.setIgnoreCommentsAndStrings(noComments);", "+      ", "+      _machine.setDocument(oldDoc);", "+      _machine.setFirstDoc(oldFirstDoc);", "+      _machine.setFindWord(oldFindWord);", "+      _machine.setSearchAllDocuments(oldSearchAll);", "+      _machine.setMatchCase(oldMatchCase);", "+      if (oldWholeWord) { _machine.setMatchWholeWord(); }", "+      else { _machine.setFindAnyOccurrence(); }", "+      _machine.setIgnoreCommentsAndStrings(oldNoComments);", "+      _machine.setPosition(oldPosition);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e97aee32ea6272094d8a2ab008609b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 156, "signatureBeforeChange": "              public void dumpBounds(Runnable1<Type> dumpType)", "signatureAfterChange": "              public void dumpBounds()", "diff": ["-      public void dumpBounds(Runnable1<Type> dumpType) {", "+      public void dumpBounds() {", "-            if (printedFirst) { result.append(\"; \"); }", "+            if (printedFirst) { _result.append(\"; \"); }", "-            result.append(_names.get(v));", "-            result.append(\" <: \");", "-            dumpType.run(upper); // may increase the size of _vars", "+            _result.append(_names.get(v));", "+            _result.append(\" <: \");", "+            TypeWriter.this.run(upper); // may increase the size of _vars", "-            if (printUpper) { result.append(\", \"); }", "-            result.append(_names.get(v));", "-            result.append(\" :> \");", "-            dumpType.run(lower); // may increase the size of _vars", "+            if (printUpper) { _result.append(\", \"); }", "+            _result.append(_names.get(v));", "+            _result.append(\" :> \");", "+            TypeWriter.this.run(lower); // may increase the size of _vars"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e318f1abb7a4d2b053d21f3aa6de587", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "512f2d01a44aebe9e820ea2b6904a7d9ee6beac7", "commitAfterChange": "7f5ff64d986e80db8fa3ceeb1048b991af6a4ea0", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "diff": ["+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.JUNIT_3_8_2_LINK,", "+                                                 \"JUnit 3.8.2 URL\", this,", "+                                                 \"URL for the JUnit 3.8.2 API, for \\\"Open Java API Javadoc\\\".\"));", "+", "+    VectorStringOptionComponent additionalJavadoc =", "+      new VectorStringOptionComponent(OptionConstants.JAVADOC_ADDITIONAL_LINKS, \"Additional Javadoc URLs\", this,", "+                                      \"<html>Additional URLs with Javadoc, for \\\"Open Java API Javadoc\\\"<br>\" +", "+                                      \"and auto-completion.</html>\") {", "+      protected boolean verify(String s) {", "+        // verify that the allclasses-frame.html file exists at that URL. do not actually parse it now", "+        boolean result = true;", "+        try {", "+          java.net.URL url = new java.net.URL(s+\"/allclasses-frame.html\");", "+          java.io.InputStream urls = url.openStream();", "+          java.io.InputStreamReader is = null;", "+          java.io.BufferedReader br = null;", "+          try {", "+            is = new java.io.InputStreamReader(urls);", "+            br = new java.io.BufferedReader(is);", "+            String line = br.readLine();", "+            if (line == null) { result = false; }", "+          }", "+          finally {", "+            if (br!=null) { br.close(); }", "+            if (is!=null) { is.close(); }", "+            if (urls!=null) { urls.close(); }", "+          }", "+        }", "+        catch(java.io.IOException ioe) { result = false; }", "+        if (!result) {", "+          JOptionPane.showMessageDialog(ConfigFrame.this,", "+                                        \"Could not find the Javadoc at the URL\\n\"+", "+                                        s,", "+                                        \"Error Adding Javadoc\",", "+                                        JOptionPane.ERROR_MESSAGE); ", "+        }", "+        return result;", "+      }", "+    };", "+    addOptionComponent(panel, additionalJavadoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ad3a5d84470121fcb37c6f893e83ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testInteractionsAutomaticallySetPackageScope()     throws BadLocationException, IOException", "signatureAfterChange": "     public void testGetMultipleSourceRootsDefaultPackage()     throws BadLocationException, IOException, InvalidPackageException", "diff": ["-   */", "-  public void testInteractionsAutomaticallySetPackageScope()", "-    throws BadLocationException, IOException", "-  {", "-    final File aDir = new File(_tempDir, \"a\");", "-    aDir.mkdir();", "-    final File file = new File(aDir, \"Foo.java\");", "-", "-    setupDocument(\"package a;\\npublic \" + FOO_TEXT);", "-    _model.saveFile(new FileSelector(file));", "-    ", "-    _model.startCompile();", "-", "-    String result = interpret(\"new Foo().getClass().getName()\");", "-", "-    assertEquals(\"interactions result\",", "-                 \"a.Foo\",", "+", "+  public void testGetMultipleSourceRootsDefaultPackage()", "+    throws BadLocationException, IOException, InvalidPackageException", "+  {", "+    // Create temp directory", "+    File baseTempDir = tempDirectory();", "+", "+    // Now make subdirectories a, b", "+    File subdir1 = new File(baseTempDir, \"a\");", "+    subdir1.mkdir();", "+    File subdir2 = new File(baseTempDir, \"b\");", "+    subdir2.mkdir();", "+", "+    // Save the footext to Foo.java in subdirectory 1", "+    File file1 = new File(subdir1, \"Foo.java\");", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_TEXT);", "+    doc1.saveFileAs(new FileSelector(file1));", "+", "+    // Save the bartext to Bar.java in subdirectory 1", "+    File file2 = new File(subdir1, \"Bar.java\");", "+    OpenDefinitionsDocument doc2 = setupDocument(BAR_TEXT);", "+    doc2.saveFileAs(new FileSelector(file2));", "+", "+    // Save the bartext to Bar.java in subdirectory 2", "+    File file3 = new File(subdir2, \"Bar.java\");", "+    OpenDefinitionsDocument doc3 = setupDocument(BAR_TEXT);", "+    doc3.saveFileAs(new FileSelector(file3));", "+", "+    // No events should fire", "+    _model.addListener(new TestListener());", "+", "+    // Get source roots (should be 2: no duplicates)", "+    File[] roots = _model.getSourceRootSet();", "+    assertEquals(\"number of source roots\", 2, roots.length);", "+    File root1 = roots[0];", "+    File root2 = roots[1];", "+", "+    // Make sure both source roots are in set", "+    if (!( (root1.equals(subdir1) && root2.equals(subdir2)) ||", "+           (root1.equals(subdir2) && root2.equals(subdir1)) ))", "+    {", "+      fail(\"source roots did not match\");", "+    }", "+  }"]}], "num": 29446}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8156530776159e4d15a76961fe6fdff0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90eae1c4c07ebe86b4964bb9c491934d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 71, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter() throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ArrayReference _mirrorArray(String elementClass, List<? extends ObjectReference> elts,                                       ThreadReference thread, List<ObjectReference> toRelease)     throws DebugException", "diff": ["-  /** Assumes that this method is only called immedeately after suspending a thread. */", "-  private ObjectReference _getDebugInterpreter() throws InvalidTypeException, ClassNotLoadedException,", "-    IncompatibleThreadStateException, InvocationException, DebugException {", "-    ", "-    ThreadReference threadRef = _suspendedThreads.peek();", "-    String interpreterName = _getUniqueThreadName(threadRef);", "-    return _getDebugInterpreter(interpreterName, threadRef);", "-  }", "+  /** Create an array of the given elements in the VM and prevent it from being garbage collected. */", "+  private ArrayReference _mirrorArray(String elementClass, List<? extends ObjectReference> elts,", "+                                      ThreadReference thread, List<ObjectReference> toRelease)", "+    throws DebugException {", "+    ClassType arrayC = (ClassType) _getClass(\"java.lang.reflect.Array\");", "+    ReferenceType elementC = _getClass(elementClass);", "+    for (int tries = 0; tries < OBJECT_COLLECTED_TRIES; tries++) {", "+      try {", "+        ArrayReference result =", "+          (ArrayReference) _invokeStaticMethod(thread, arrayC, \"newInstance\", NEW_INSTANCE_SIG,", "+                                               elementC.classObject(), _vm.mirrorOf(elts.size()));", "+        result.disableCollection();", "+        if (!result.isCollected()) {", "+          toRelease.add(result);", "+          try { result.setValues(elts); }", "+          catch (InvalidTypeException e) { throw new DebugException(e); }", "+          catch (ClassNotLoadedException e) { throw new DebugException(e); }", "+          return result;", "+        }", "+      }", "+      catch (ObjectCollectedException e) { /* try again */ }", "+    }", "+    throw new DebugException(\"Ran out of OBJECT_COLLECTED_TRIES\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb94758ecf786d765a3dccc1f14aabdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "      private void _attachToVM() throws DebugException", "diff": ["+  ", "+  private void _attachToVM() throws DebugException {", "+    VirtualMachineManager vmm = Bootstrap.virtualMachineManager();", "+    List connectors = vmm.attachingConnectors();", "+    AttachingConnector connector = null;", "+    Iterator iter = connectors.iterator();", "+    while (iter.hasNext()) {", "+      AttachingConnector conn = (AttachingConnector)iter.next();", "+      if (conn.name().equals(\"com.sun.jdi.SocketAttach\")) {", "+        connector = conn;", "+      }", "+    }", "+    if (connector == null) {", "+      throw new DebugException(\"Could not find an AttachingConnector!\");", "+    }", "+    ", "+    // Try to connect", "+    Map args = connector.defaultArguments();", "+    Connector.Argument port = (Connector.Argument) args.get(\"port\");", "+    try {", "+      int debugPort = _model.getDebugPort();", "+      port.setValue(\"\" + debugPort);", "+      _vm = connector.attach(args);", "+      _eventManager = _vm.eventRequestManager();", "+    }", "+    catch (IOException ioe) {", "+      throw new DebugException(\"Could not connect to VM: \" + ioe);", "+    }", "+    catch (IllegalConnectorArgumentsException icae) {", "+      throw new DebugException(\"Could not connect to VM: \" + icae);", "+    }", "+  }"]}], "num": 1913}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e88f9916f4025d511e2744ce6334721f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7194a5e6be77c2c2ec28d941f52de3d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public Node visit(FunctionCall node)", "signatureAfterChange": "     public Object visit(SuperMethodCall node)", "diff": ["-  public Node visit(FunctionCall node) {", "-    LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-      arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "-      Iterator<Expression> it = node.getArguments().iterator();", "-        arguments.add((Expression) it.next().acceptVisitor(this));", "+    public Object visit(SuperMethodCall node) {", "+      LinkedList arguments = null; // Add parameterization <Node>.", "+        arguments = new LinkedList(); // Add parameterization <Node>.", "+        Iterator it = node.getArguments().iterator();", "+          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3a68ee0533151b2d32d474ec3ebfa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public Node visit(ObjectMethodCall node)", "signatureAfterChange": "     public Object visit(ConstructorInvocation node)", "diff": ["-  public Node visit(ObjectMethodCall node) {", "-    LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-      arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "-      Iterator<Expression> it = node.getArguments().iterator();", "-        arguments.add((Expression) it.next().acceptVisitor(this));", "+    public Object visit(ConstructorInvocation node) {", "+      LinkedList arguments = null; // Add parameterization <Node>.", "+        arguments = new LinkedList(); // Add parameterization <Node>.", "+        Iterator it = node.getArguments().iterator();", "+          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));"]}], "num": 4179}
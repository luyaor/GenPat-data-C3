{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3c58c65182cb8c5201b37c57cb57090", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cdf842fc290bb8e2551bd86318d9fd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "commitAfterChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void addRegion(final R region)", "signatureAfterChange": "   public void addRegion(final R region)", "diff": ["-    if (! docRegions.contains(region)) { // region does not already exist in manager", "+    final boolean alreadyContained = docRegions.contains(region);", "+    if (!alreadyContained) { // region does not already exist in manager", "-    // notify.  invokeLater unnecessary if it only runs in the event thread", "-    Utilities.invokeLater(new Runnable() { public void run() {", "-      _lock.startRead();", "-      try {", "-        for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "-      } finally { _lock.endRead(); }", "-    } });", "+    // only notify if the region was actually added", "+    if (!alreadyContained) {", "+      // notify.  invokeLater unnecessary if it only runs in the event thread", "+      Utilities.invokeLater(new Runnable() { public void run() {", "+        _lock.startRead();", "+        try {", "+          for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "+        } finally { _lock.endRead(); }", "+      } });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0715a5aa78633802dfea13993ab13c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "signatureAfterChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "diff": ["-    ArrayList<File> filesToCompile = new ArrayList<File>();", "-    ArrayList<File> excludedFiles = new ArrayList<File>();", "-    ArrayList<CompilerError> packageErrors = new ArrayList<CompilerError>();", "+    final ArrayList<File> filesToCompile = new ArrayList<File>();", "+    final ArrayList<File> excludedFiles = new ArrayList<File>();", "+    final ArrayList<CompilerError> packageErrors = new ArrayList<CompilerError>();", "-    _notifier.compileStarted();", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.compileStarted(); } });", "-      if (!packageErrors.isEmpty()) { _distributeErrors(packageErrors); }", "+      if (! packageErrors.isEmpty()) { _distributeErrors(packageErrors); }", "-    finally { _notifier.compileEnded(_model.getWorkingDirectory(), excludedFiles); }", "+    finally { ", "+      Utilities.invokeLater(new Runnable() { ", "+        public void run() { _notifier.compileEnded(_model.getWorkingDirectory(), excludedFiles); } });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb7c7bc60c89ef705e9fe3f99622d656", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "2aadb81a716e2a196f82baa127c28e3225664fab", "commitAfterChange": "c4ec4fbaa86590f5d9d73c067159d69b14149c37", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void addRegion(final R region)", "signatureAfterChange": "   public void addRegion(final R region)", "diff": ["-      docRegions = Collections.synchronizedSortedSet(new TreeSet<R>()); ", "+      docRegions = new TreeSet<R>(); ", "-    final boolean alreadyContained = docRegions.contains(region);", "-    if (!alreadyContained) { // region does not already exist in manager", "+    final boolean alreadyPresent = docRegions.contains(region);", "+    if (! alreadyPresent) {    // region does not already exist in manager", "-//        Utilities.show(\"Region manager \" + this + \" added region \" + region);", "-//        Utilities.show(\"docRegions for document \" + odd + \" = \" + _regions.get(odd));", "-    ", "-//    _current = region;", "-//      final int regionIndex = getIndexOf(region);", "-//      final String stackTrace = StringOps.getStackTrace();", "-    if (! alreadyContained) {", "+    if (! alreadyPresent) {"]}], "num": 5439}
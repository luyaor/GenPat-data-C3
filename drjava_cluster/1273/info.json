{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4338747b7e67b8a132d38447a1f9c86d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a6282fa39af11346990835e2811af87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/modifier/ArrayModifier.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void modify(Context ctx, Object value)", "signatureAfterChange": "   public void modify(Context ctx, Object value)", "diff": ["+   */", "+  public void modify(Context ctx, Object value) {", "+    try {", "+      Array.set(array, cell.intValue(), value);", "+    } catch (IllegalArgumentException e) {", "+      // !!! Hummm ...", "+      if (e.getMessage().equals(\"array element type mismatch\")) {", "+        throw new ArrayStoreException();", "+      }", "+      throw e;", "+    } finally {", "+      array = arrays.remove(0);", "+      cell  = cells.remove(0);", "-     */", "-    public void modify(Context ctx, Object value) {", "-\ttry {", "-\t    Array.set(array, cell.intValue(), value);", "-\t} catch (IllegalArgumentException e) {", "-\t    // !!! Hummm ...", "-\t    if (e.getMessage().equals(\"array element type mismatch\")) {", "-\t\tthrow new ArrayStoreException();", "-\t    }", "-\t    throw e;", "-\t} finally {", "-\t    array = arrays.remove(0);", "-\t    cell  = (Number)cells.remove(0);", "-\t}", "-    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7af6cc2172963c929bc5db4fe88a2a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/util/text/SWTDocumentAdapter.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void forceRemoveText(int offs, int len) throws DocumentAdapterException", "signatureAfterChange": "   public synchronized void forceRemoveText(final int offs, final int len)      throws DocumentAdapterException", "diff": ["-  public void forceRemoveText(int offs, int len) throws DocumentAdapterException {", "-    try {", "-      _pane.replaceTextRange(offs, len, \"\");", "-    }", "-    catch (IllegalArgumentException e) {", "-      throw new DocumentAdapterException(e);", "+  public synchronized void forceRemoveText(final int offs, final int len) ", "+    throws DocumentAdapterException", "+  {", "+    _editException = null;", "+    _forceRemove = true;", "+", "+    // Do the remove", "+    _pane.getDisplay().syncExec(new Runnable() {", "+      public void run() {", "+        try {", "+          _pane.replaceTextRange(offs, len, \"\");", "+        }", "+        catch (IllegalArgumentException e) {", "+          _editException = new DocumentAdapterException(e);", "+        }", "+      }", "+    });", "+    _forceRemove = false;", "+    if (_editException != null) {", "+      throw _editException;"]}], "num": 1273}
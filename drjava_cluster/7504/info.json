{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5d9142b9a4b1aa12fee6563659eec9e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23af5cf34498ffb764d85d0fe1e8f9d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "68bd63f6034f2863f39ab1e69222ff477d2c17f9", "commitAfterChange": "0fae02937c58237a9087228b753c7aa76d749043", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VariableContext(Set entries)", "signatureAfterChange": "   public VariableContext(Set<AbstractVariable> entries)", "diff": ["-  public VariableContext(Set entries) {", "+  public VariableContext(Set<AbstractVariable> entries) {", "-    Iterator it = entries.iterator();", "+    Iterator<AbstractVariable> it = entries.iterator();", "-      ((AbstractVariable)it.next()).set(this, null);", "+      it.next().set(this, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "416cd9896c46901d8a4147a6706f8b61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public Object visit(InnerAllocation node)", "signatureAfterChange": "   public Object visit(InnerAllocation node)", "diff": ["-     */", "-    public Object visit(InnerAllocation node) {", "-        Constructor cons = (Constructor)node.getProperty(NodeProperties.CONSTRUCTOR);", "-\tClass       c    = NodeProperties.getType(node);", "-", "-        List        larg = node.getArguments();", "-        Object[]    args = null;", "-\t", "-\tif (larg != null) {", "-\t    args = new Object[larg.size() + 1];", "-\t    args[0] = node.getExpression().acceptVisitor(this);", "-", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 1;", "-\t    while (it.hasNext()) {", "-\t\targs[i++] = ((Expression)it.next()).acceptVisitor(this);", "-\t    }", "-\t} else {", "-\t    args = new Object[] { node.getExpression().acceptVisitor(this) };", "-\t}", "-", "-        // Invoke the constructor", "-        try {", "-            return cons.newInstance(args);", "-\t} catch (InvocationTargetException e) {", "-\t    if (e.getTargetException() instanceof Error) {", "-\t\tthrow (Error)e.getTargetException();", "-\t    }  else if (e.getTargetException() instanceof RuntimeException) {", "-\t\tthrow (RuntimeException)e.getTargetException();", "-\t    }", "-\t    throw new ThrownException(e.getTargetException());", "-        } catch (Exception e) {", "-            throw new CatchedExceptionError(e, node);", "-        }", "+   */", "+  public Object visit(InnerAllocation node) {", "+    Constructor cons = (Constructor)node.getProperty(NodeProperties.CONSTRUCTOR);", "+    Class       c    = NodeProperties.getType(node);", "+    ", "+    List<Expression> larg = node.getArguments();", "+    Object[]    args = null;", "+    ", "+    if (larg != null) {", "+      args = new Object[larg.size() + 1];", "+      args[0] = node.getExpression().acceptVisitor(this);", "+      ", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 1;", "+      while (it.hasNext()) {", "+        args[i++] = it.next().acceptVisitor(this);", "+      }", "+    } else {", "+      args = new Object[] { node.getExpression().acceptVisitor(this) };", "+    ", "+    // Invoke the constructor", "+    try {", "+      return cons.newInstance(args);", "+    } catch (InvocationTargetException e) {", "+      if (e.getTargetException() instanceof Error) {", "+        throw (Error)e.getTargetException();", "+      }  else if (e.getTargetException() instanceof RuntimeException) {", "+        throw (RuntimeException)e.getTargetException();", "+      }", "+      throw new ThrownException(e.getTargetException());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5da9d62fba3c0772264504a7df862e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public Object visit(ClassAllocation node)", "signatureAfterChange": "   public Object visit(ClassAllocation node)", "diff": ["-     */", "-    public Object visit(ClassAllocation node) {", "-        List        larg = node.getArguments();", "-        Object[]    args = Constants.EMPTY_OBJECT_ARRAY;", "-\t", "-\t// Fill the arguments", "-\tif (larg != null) {", "-\t    args = new Object[larg.size()];", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    while (it.hasNext()) {", "-\t\targs[i++] = ((Expression)it.next()).acceptVisitor(this);", "-\t    }", "-\t}", "-", "-\treturn context.invokeConstructor(node, args);", "+   */", "+  public Object visit(ClassAllocation node) {", "+    List<Expression> larg = node.getArguments();", "+    Object[]    args = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      args = new Object[larg.size()];", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        args[i++] = it.next().acceptVisitor(this);", "+      }", "+    ", "+    return context.invokeConstructor(node, args);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63badcc8c76028be23151457ec7dee0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Object visit(SuperMethodCall node)", "diff": ["+   */", "+  public Object visit(SuperMethodCall node) {", "+    Method   m     = (Method)node.getProperty(NodeProperties.METHOD);", "+    List<Expression> larg  = node.getArguments();", "+    Object[] args  = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      args        = new Object[larg.size()];", "+      while (it.hasNext()) {", "+        args[i] = it.next().acceptVisitor(this);", "+        i++;", "+      }", "+    // Invoke the method", "+    try {", "+      return m.invoke(context.getHiddenArgument(), args);", "+    } catch (InvocationTargetException e) {", "+      if (e.getTargetException() instanceof Error) {", "+        throw (Error)e.getTargetException();", "+      } else if (e.getTargetException() instanceof RuntimeException) {", "+        throw (RuntimeException)e.getTargetException();", "+      }", "+      throw new ThrownException(e.getTargetException());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "-     */", "-    public Object visit(SuperMethodCall node) {", "-        Method   m     = (Method)node.getProperty(NodeProperties.METHOD);", "-        List     larg  = node.getArguments();", "-        Object[] args  = Constants.EMPTY_OBJECT_ARRAY;", "-", "-        // Fill the arguments", "-\tif (larg != null) {", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    args        = new Object[larg.size()];", "-\t    while (it.hasNext()) {", "-\t\targs[i] = ((Expression)it.next()).acceptVisitor(this);", "-\t\ti++;", "-\t    }", "-\t}", "-", "-        // Invoke the method", "-        try {", "-            return m.invoke(context.getHiddenArgument(), args);", "-        } catch (InvocationTargetException e) {", "-\t    if (e.getTargetException() instanceof Error) {", "-\t\tthrow (Error)e.getTargetException();", "-\t    } else if (e.getTargetException() instanceof RuntimeException) {", "-\t\tthrow (RuntimeException)e.getTargetException();", "-\t    }", "-\t    throw new ThrownException(e.getTargetException());", "-\t} catch (Exception e) {", "-\t    throw new CatchedExceptionError(e, node);", "-\t}", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a12643ea30b00320e476bb76c506d83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Object visit(SimpleAllocation node)", "diff": ["+   */", "+  public Object visit(SimpleAllocation node) {", "+    List<Expression> larg = node.getArguments();", "+    Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      args = new Object[larg.size()];", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        args[i++] = it.next().acceptVisitor(this);", "+      }", "+    ", "+    return context.invokeConstructor(node, args);", "+  }", "-     */", "-    public Object visit(SimpleAllocation node) {", "-        List        larg = node.getArguments();", "-        Object[]    args = Constants.EMPTY_OBJECT_ARRAY;", "-\t", "-\t// Fill the arguments", "-\tif (larg != null) {", "-\t    args = new Object[larg.size()];", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    while (it.hasNext()) {", "-\t\targs[i++] = ((Expression)it.next()).acceptVisitor(this);", "-\t    }", "-\t}", "-", "-\treturn context.invokeConstructor(node, args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "919a76077575a7edd86a1ff5d01110f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5e43ed9b0ccc485edbf101000ea86b2ab5a8036f", "commitAfterChange": "1aafd33bee421dfc8c5f72d0c8fbfbf4f1acd534", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "   private void checkList(List l)", "signatureAfterChange": "   private void checkList(List<? extends Node> l)", "diff": ["-  private void checkList(List l) {", "-    ListIterator it = l.listIterator();", "+  private void checkList(List<? extends Node> l) {", "+    ListIterator<? extends Node> it = l.listIterator();", "-      ((Node)it.next()).acceptVisitor(this);", "+      it.next().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af16b14f4ab3c8b922cadddfe210a8a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "6595282fd67e77d6079df1ee1647ba51751bbcec", "commitAfterChange": "de0f38d123822794b2970bd8e5814e75677feb46", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void enterScope(Set entries)", "signatureAfterChange": "   public void enterScope(Set<AbstractVariable> entries)", "diff": ["-  public void enterScope(Set entries) {", "+  public void enterScope(Set<AbstractVariable> entries) {", "-    Iterator it = entries.iterator();", "+    Iterator<AbstractVariable> it = entries.iterator();", "-      ((AbstractVariable)it.next()).set(this, null);", "+      it.next().set(this, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca94f545fdb72be885097712ef0d6bba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Object visit(StaticMethodCall node)", "diff": ["+   */", "+  public Object visit(StaticMethodCall node) {", "+    Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "+    List<Expression> larg = node.getArguments();", "+    Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      args = new Object[larg.size()];", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        args[i] = it.next().acceptVisitor(this);", "+        i++;", "+      }", "-     */", "-    public Object visit(StaticMethodCall node) {", "-        Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "-        List     larg = node.getArguments();", "-        Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "-        ", "-        // Fill the arguments", "-\tif (larg != null) {", "-\t    args = new Object[larg.size()];", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    while (it.hasNext()) {", "-\t\targs[i] = ((Expression)it.next()).acceptVisitor(this);", "-\t\ti++;", "-\t    }", "-\t}", "-", "-        // Invoke the method", "-        try {", "-            return m.invoke(null, args);", "-        } catch (InvocationTargetException e) {", "-\t    if (e.getTargetException() instanceof Error) {", "-\t\tthrow (Error)e.getTargetException();", "-\t    } else if (e.getTargetException() instanceof RuntimeException) {", "-\t\tthrow (RuntimeException)e.getTargetException();", "-\t    }", "-\t    throw new ThrownException(e.getTargetException());", "-\t} catch (Exception e) {", "-\t    throw new CatchedExceptionError(e, node);", "-\t}", "+    ", "+    // Invoke the method", "+    try {", "+      return m.invoke(null, args);", "+    } catch (InvocationTargetException e) {", "+      if (e.getTargetException() instanceof Error) {", "+        throw (Error)e.getTargetException();", "+      } else if (e.getTargetException() instanceof RuntimeException) {", "+        throw (RuntimeException)e.getTargetException();", "+      }", "+      throw new ThrownException(e.getTargetException());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+  }"]}], "num": 7504}
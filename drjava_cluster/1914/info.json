{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6aac0d9a6a591a616de663b3f11d2dc5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c1977d7cc75416b39c9fb98329422db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testLanguageLevelJUnitErrorLine() throws Exception", "signatureAfterChange": "   public void testLanguageLevelJUnitErrorLine() throws Exception", "diff": ["-    /*", "+    ", "-    if(true) throw new RuntimeException(\"asdf\");", "-    if(true) throw new RuntimeException(\"asdf\");", "-    */", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfa82498d86945990d4cb467d5aec6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "commitAfterChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testErrorsArrayInOrder() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder() throws Exception", "diff": ["-  public void testErrorsArrayInOrder() throws Exception {", "+  public void testErrorsArrayInOrder() throws Exception { ", "-    // Temporarily disabled?  Why?", "- ", "-    /*", "-       ", "-    doc.startCompile();", "+    ", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    synchronized(listener) {", "+      doc.startJUnit();", "+      listener.assertJUnitStartCount(1);", "+      listener.wait();", "+    }", "-    /*final TestResult testResults = doc.startJUnit();", "+    //final TestResult testResults = doc.startJUnit();", "-    assertTrue(\"testResults should not be null\", testResults != null);", "+    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    _m = doc.getJUnitErrorModel();", "-    _m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    //JUnitError[] errorsWithPositions = _m.getErrorsWithPositions();", "+    //JUnitError[] errorsWithoutPositions = _m.getErrorsWithoutPositions();", "+    //assertTrue(\"testResults should not be null\", testResults != null);", "-    assertEquals(\"testResult should have one error and one failure\",", "+    assertEquals(\"the test results should have one error and one failure \"+_m.getErrorsWithPositions().length+\" \"+_m.getErrorsWithoutPositions().length,", "-    */", "+    //_model.setResetAfterCompile(true);", "+    "]}], "num": 1914}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca4323287f6954c875c5073c2fb682c5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d8c8db808fb9ba2f33ffdab875d133", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 70, "signatureBeforeChange": "   final public List<Node> blockStatement() throws ParseException", "signatureAfterChange": "   final public List<Node> blockStatement() throws ParseException", "diff": ["-    if (jj_2_29(2147483647)) {", "-      list = localVariableDeclaration();", "-      jj_consume_token(SEMICOLON);", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        node = statement();", "+    try {", "+      if (jj_2_40(2147483647)) {", "+        list = localVariableDeclaration();", "+        jj_consume_token(SEMICOLON);", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          node = statement();", "+        list.add(node);", "+          break;", "+        case CLASS:", "+          node = unmodifiedClassDeclaration(null);", "-        break;", "-      case CLASS:", "-        node = unmodifiedClassDeclaration(null);", "+          break;", "+        case ENUM:", "+          node = unmodifiedEnumDeclaration(null);", "-        break;", "-      case ENUM:", "-        node = unmodifiedEnumDeclaration(null);", "-           list.add(node);", "-        break;", "-      case INTERFACE:", "-        node = unmodifiedInterfaceDeclaration(null);", "-           list.add(node);", "-        break;", "-      default:", "-        jj_la1[60] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+          break;", "+        case INTERFACE:", "+          node = unmodifiedInterfaceDeclaration(null);", "+         list.add(node);", "+          break;", "+        default:", "+          jj_la1[61] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+         {if (true) return list;}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-       {if (true) return list;}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23b3fcc79b8c0e10e27c3c94c7c4524", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 69, "signatureBeforeChange": "   final public BlockStatement block() throws ParseException", "signatureAfterChange": "   final public BlockStatement block() throws ParseException", "diff": ["-    p1 = jj_consume_token(LBRACE);", "-    label_20:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case ENUM:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        ;", "-        break;", "-      default:", "-        jj_la1[59] = jj_gen;", "-        break label_20;", "+    try {", "+      p1 = jj_consume_token(LBRACE);", "+      label_20:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          break label_20;", "+        }", "+        nodes = blockStatement();", "+        list.addAll(nodes);", "-      nodes = blockStatement();", "-           list.addAll(nodes);", "+      p2 = jj_consume_token(RBRACE);", "+        {if (true) return new BlockStatement(list,", "+                                  filename,", "+                                  p1.beginLine, p1.beginColumn,", "+                                  p2.endLine,   p2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-    p2 = jj_consume_token(RBRACE);", "-      {if (true) return new BlockStatement(list,", "-                                filename,", "-                                p1.beginLine, p1.beginColumn,", "-                                p2.endLine,   p2.endColumn);}"]}], "num": 1466}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ecaed4235cbd8f09d7a3ad4f85db6cf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277202428a1dd84a6254c257dc2d066b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b128df4fa9d8df79a76ba9e19a170c160365e646", "commitAfterChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 179, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["-    // clear browser history", "+    // clear browser, breakpoint, and bookmark histories", "-    ", "-    // set breakpoints", "-    for (DebugBreakpointData dbd: ir.getBreakpoints()) {", "-      try {", "-        int lnr = dbd.getLineNumber();", "-        OpenDefinitionsDocument odd = getDocumentForFile( dbd.getFile());", "-        getDebugger().toggleBreakpoint(odd, odd.getOffset(lnr), lnr, dbd.isEnabled());", "-      }", "-      catch(DebugException de) { /* ignore, just don't add breakpoint */ }", "-    }", "-    ", "-    // set watches", "-    try { getDebugger().removeAllWatches(); }", "-    catch(DebugException de) { /* ignore, just don't remove old watches */ }", "-    for (DebugWatchData dwd: ir.getWatches()) {", "-      try { getDebugger().addWatch( dwd.getName()); }", "-      catch(DebugException de) { /* ignore, just don't add watch */ }", "-    }", "-    ", "-    // set bookmarks", "-    try {", "-      for (final DocumentRegion bm: ir.getBookmarks()) {", "-        final OpenDefinitionsDocument odd = getDocumentForFile(bm.getFile());", "-        final Position startPos = odd.createPosition(bm.getStartOffset());", "-        final Position endPos = odd.createPosition(bm.getEndOffset());", "-        getBookmarkManager().addRegion(new SimpleDocumentRegion(odd, startPos, endPos));", "-      }", "-    }", "-    catch(BadLocationException e) { throw new UnexpectedException(e); }", "-//    final List<OpenDefinitionsDocument> oldDocs = getOpenDefintionsDocuments();", "+//    final List<OpenDefinitionsDocument> oldDocs = getOpenDefinitionsDocuments();", "-    ArrayList<DocumentRegion> expiredBookmarks = new ArrayList<DocumentRegion>();", "-    ArrayList<Breakpoint> expiredBreakpoints = new ArrayList<Breakpoint>();", "+    ", "+    // Collection of documents that have been modified outside of DrJava", "+    ArrayList<DocFile> modifiedFiles = new ArrayList<DocFile>();", "-        for (DocumentRegion r: getBookmarkManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBookmarks.add( r );", "-        for (Breakpoint r: getBreakpointManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBreakpoints.add( r );", "+        modifiedFiles.add(f);", "+", "-        for (DocumentRegion r: getBookmarkManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBookmarks.add( r );", "-        for (Breakpoint r: getBreakpointManager().getRegions())", "-          if (r.getFile().equals( f )) expiredBreakpoints.add( r );", "+        modifiedFiles.add(f);", "-    // Remove bookmarks and breakpoints for files that were modified outside of DrJava", "-    for (DocumentRegion r: expiredBookmarks) getBookmarkManager().removeRegion( r );", "-    for (Breakpoint r: expiredBreakpoints) getBreakpointManager().removeRegion( r );", "-    _notifier.projectOpened(projectFile, new FileOpenSelector() {", "+    _notifier.openProject(projectFile, new FileOpenSelector() {", "+    for (DebugBreakpointData dbd: ir.getBreakpoints()) {", "+      try {", "+        File f = dbd.getFile();", "+        if (! modifiedFiles.contains(f)) {", "+          int lnr = dbd.getLineNumber();", "+          OpenDefinitionsDocument odd = getDocumentForFile(f);", "+          getDebugger().toggleBreakpoint(odd, odd.getOffset(lnr), lnr, dbd.isEnabled());", "+        }", "+      }", "+      catch(DebugException de) { /* ignore, just don't add breakpoint */ }", "+    }", "+", "-    if(active != null) {", "+    if (active != null) {", "+", "+    ", "+    // set watches", "+    try { getDebugger().removeAllWatches(); }", "+    catch(DebugException de) { /* ignore, just don't remove old watches */ }", "+    for (DebugWatchData dwd: ir.getWatches()) {", "+      try { getDebugger().addWatch( dwd.getName()); }", "+      catch(DebugException de) { /* ignore, just don't add watch */ }", "+    }", "+    ", "+    // set bookmarks", "+", "+    try {", "+      for (final Region bm: ir.getBookmarks()) {", "+        File f = bm.getFile();", "+        if (! modifiedFiles.contains(f)) {", "+          final OpenDefinitionsDocument odd = getDocumentForFile(f);", "+          final Position startPos = odd.createPosition(bm.getStartOffset());", "+          final Position endPos = odd.createPosition(bm.getEndOffset());", "+          getBookmarkManager().addRegion(new DocumentRegion(odd, startPos, endPos));", "+        }", "+      }", "+    }", "+    catch(BadLocationException e) { throw new UnexpectedException(e); }", "-    ", "-    // perform a project auto-refresh if specified", "-    if(_state.getAutoRefreshStatus()) { autoRefreshProject(); }", "+", "+    if (_state.getAutoRefreshStatus()) openNewFilesInProject(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2b1e5f27f6ab136ae0b968098ccee09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "117b8e1eefe7632ee450aed6c94318fa28bf80a4", "commitAfterChange": "67e7b92991e4e8f9e841666ccb236411356e233e", "methodNumberBeforeChange": 152, "methodNumberAfterChange": 152, "signatureBeforeChange": "   private void _loadProject(ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(ProjectFileIR ir) throws IOException", "diff": ["-    final File buildDir = ir.getBuildDirectory();", "+    final File buildDir = ir.getBuildDirectory ();", "-    final File createJarFile  = ir.getCreateJarFile();", "+    final File createJarFile  = ir.getCreateJarFile ();", "-      try { ", "-        getDebugger().toggleBreakpoint(getDocumentForFile(dbd.getFile()), dbd.getOffset(), dbd.getLineNumber(), ", "-                                       dbd.isEnabled()); ", "+      try {", "+        getDebugger().toggleBreakpoint(getDocumentForFile( dbd.getFile()), dbd.getOffset(), dbd.getLineNumber(),", "+                                       dbd.isEnabled());", "-      try { getDebugger().addWatch(dwd.getName()); }", "+      try { getDebugger().addWatch( dwd.getName()); }", "-    for (final DocumentRegion bm: ir.getBookmarks()) {", "+    for (final DocumentRegion bm: ir.getBookmarks ()) {", "-          public int getEndOffset() { return bm.getEndOffset(); }", "+          public int getEndOffset() { return bm.getEndOffset (); }", "-    // Sets up the filters that cause documents to load in differentnsections of the tree.  The names of these ", "-    // sections are set from the methods such as getSourceBinTitle().  Changing this changes what is considered ", "+    // Sets up the filters that cause documents to load in differentnsections of the tree.  The names of these", "+    // sections are set from the methods such as getSourceBinTitle().  Changing this changes what is considered", "-    List<Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>> l = ", "+    List<Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>> l =", "-    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getSourceBinTitle(), ", "+    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getSourceBinTitle(),", "-    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getAuxiliaryBinTitle(), ", "+    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getAuxiliaryBinTitle(),", "-    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getExternalBinTitle(), ", "+    l.add(new Pair<String, INavigatorItemFilter<OpenDefinitionsDocument>>(getExternalBinTitle(),", "-    IDocumentNavigator<OpenDefinitionsDocument> newNav = ", "+    IDocumentNavigator<OpenDefinitionsDocument> newNav =", "-      if (f.lastModified() > f.getSavedModDate()) f.setSavedModDate(f.lastModified());", "-      if (f.isActive() && active == null) active = f;", "-      else projFiles.add(f);", "+      if (f.lastModified() > f.getSavedModDate()) f.setSavedModDate (f.lastModified());", "+//      if (f.isActive() && active == null) active = f;", "+//      else projFiles.add(f);", "+      projFiles.add(f);", "-      if (f.lastModified() > f.getSavedModDate()) f.setSavedModDate(f.lastModified());", "-      if (f.isActive() && active == null) active = f;", "-      else projFiles.add(f);", "+      if (f.lastModified() > f.getSavedModDate()) f.setSavedModDate (f.lastModified());", "+//      if (f.isActive() && active == null) active = f;", "+//      else projFiles.add(f);", "+      projFiles.add(f);", "-    if (active != null) projFiles.add(active); ", "+    if (active != null) projFiles.add(active);", "-    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // project source files ", "-    ", "+    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // project source files", "+   ", "-    if (! projDocs.isEmpty()) ", "+    if (! projDocs.isEmpty())", "+    //Set active document from project file", "+//    if(active != null) //TEMP", "+//      setActiveDocument(projDocs.get(projDocs.size() - 1));", "+    //OpenDefinitionsDocument.getCanonicalPath()", "+    //search for active document within opendefdocs", "+//    Utilities.show(\"Setting Active Document...\");", "+//    if(active != null) {", "+//      String path = projFiles.get(projFiles.size() - 1).getCanonicalPath();", "+//      Utilities.show(\"Active document path: \" + path);", "+//      for(OpenDefinitionsDocument doc: projDocs) {", "+//        Utilities.show(\"Searching path: \" + doc.getCanonicalPath());", "+//        if(doc.getCanonicalPath().compareTo(path) == 0) {", "+//          setActiveDocument(doc);", "+//          Utilities.show(\"New active document set\");", "+//          break;", "+//        }", "+//      }", "+//    }", "+     ", "-      ((JTreeSortNavigator<?>)_documentNavigator).collapsePaths(ir.getCollapsedPaths());", "+      ((JTreeSortNavigator<?>)_documentNavigator).collapsePaths( ir.getCollapsedPaths());"]}], "num": 27681}
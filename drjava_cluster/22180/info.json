{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c975ee44f6768d71e08702d067591c4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "144c63cb605405607018c864feb0f075", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "          public void testForModifiersAndVisibilityDoFirst()", "signatureAfterChange": "          public void testForModifiersAndVisibilityDoFirst()", "diff": ["-      ModifiersAndVisibility mavs = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, ", "+      ModifiersAndVisibility mavs = new ModifiersAndVisibility(NO_INFO, ", "-      assertEquals(\"The error message should be correct for private modifier:\", \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct for private modifier:\", ", "+                   \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(0).getFirst());", "-      ModifiersAndVisibility mavs2 = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, ", "+      ModifiersAndVisibility mavs2 = new ModifiersAndVisibility(NO_INFO, ", "-      assertEquals(\"The error message should be correct for 1 bad, 1 good modifier:\", \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(1).getFirst());", "+      assertEquals(\"The error message should be correct for 1 bad, 1 good modifier:\", ", "+                   \"The keyword \\\"volatile\\\" cannot be used at the Advanced level\", errors.get(1).getFirst());", "-      ModifiersAndVisibility mavs3 = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, ", "+      ModifiersAndVisibility mavs3 = new ModifiersAndVisibility(NO_INFO, ", "-      assertEquals(\"The error message should be correct for 2 bad modifiers:\", \"The keywords \\\"synchronized\\\" \\\"native\\\" cannot be used at the Advanced level\", errors.get(2).getFirst());", "+      assertEquals(\"The error message should be correct for 2 bad modifiers:\", ", "+                   \"The keywords \\\"synchronized\\\" \\\"native\\\" cannot be used at the Advanced level\", ", "+                   errors.get(2).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "379a542d75b3c636d79b14bb787959a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void testCheckForCyclicInheritance()", "signatureAfterChange": "          public void testCheckForCyclicInheritance()", "diff": ["-      InterfaceDef nl = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"name\"), new TypeParameter[0], new ReferenceType[0], new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      assertFalse(\"Should not be cyclic inheritance\", _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "+      InterfaceDef nl = ", "+        new InterfaceDef(NONE, _publicMav, new Word(NONE, \"name\"), new TypeParameter[0], new ReferenceType[0], ", "+                         new BracedBody(NONE, new BodyItemI[0]));", "+      assertFalse(\"Should not be cyclic inheritance\", ", "+                  _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "-      assertFalse(\"Should not be cyclic inheritance\", _btc.checkForCyclicInheritance(_sd4, new LinkedList<SymbolData>(), nl));", "+      assertFalse(\"Should not be cyclic inheritance\", ", "+                  _btc.checkForCyclicInheritance(_sd4, new LinkedList<SymbolData>(), nl));", "-      ", "-      assertTrue(\"Should be cyclic inheritance\", _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "+      assertTrue(\"Should be cyclic inheritance\", ", "+                 _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "-      assertEquals(\"The error message should be correct\", \"Cyclic inheritance involving \" + _sd2.getName(), errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", \"Cyclic inheritance involving \" + _sd2.getName(), ", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8b96d0e98f784a1d78ec0f61be8eca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "          public void testForInnerInterfaceDef()", "signatureAfterChange": "          public void testForInnerInterfaceDef()", "diff": ["-      InnerInterfaceDef iid = new InnerInterfaceDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Broken\"),", "-                                                    new TypeParameter[0], new ReferenceType[0], ", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "-      ", "+      InnerInterfaceDef iid = ", "+        new InnerInterfaceDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Broken\"),", "+                              new TypeParameter[0], new ReferenceType[0], ", "+                              new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"Inner interface declarations cannot appear here\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"The error message should be correct\", \"Inner interface declarations cannot appear here\",", "+                   errors.getLast().getFirst());"]}], "num": 22180}
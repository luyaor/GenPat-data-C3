{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0e2f586bb6d8cf97d12325721398da6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b46a923958d0da361a40a90feff620d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public void addInterpreter(String name)", "signatureAfterChange": "   public void addInterpreter(String name)", "diff": ["-    if (_interpreters.containsKey(name)) {", "-      throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "+    synchronized(_stateLock) {", "+      if (isInterpreterName(name)) {", "+        throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "+      }", "+      Interpreter i = new Interpreter(_interpreterOptions, _interpreterLoader);", "+      putInterpreter(name, i);", "-    Interpreter i = new Interpreter(_interpreterOptions, _interpreterLoader);", "-    _interpreters.put(name, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86e7aaa8d2138fae196ba7edbfbc1e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "signatureAfterChange": "   private synchronized void _stepHelper(int flag, boolean shouldNotify)     throws DebugException", "diff": ["-    if (_suspendedThreads.size() <= 0) {", "-      throw new IllegalStateException(\"Cannot step if no threads are suspended.\");", "+    if (_suspendedThreads.size() <= 0 || _runningThread != null) {", "+      throw new IllegalStateException(\"Cannot step if the current thread is not suspended.\");", "-    // copy the variables back into the thread from the appropriate interpreter", "+    // Copy the variables back into the thread from the appropriate interpreter.", "+    // We do this before stepping since DrJava will hang if you try to copy back", "+    // variables after creating the step request."]}], "num": 20883}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9a9cc12395a7df624b9b7d838fa9287", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08cdd782c3f231546e3f8ce6d4fbcb9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void registerSlave(SlaveRemote slave) throws RemoteException", "signatureAfterChange": "   private static void attemptQuit(SlaveRemote slave)", "diff": ["+  /** Make a best attempt to invoke {@code slave.quit()}.  Log an error if it fails. */", "+  private static void attemptQuit(SlaveRemote slave) {", "+    try { slave.quit(); }", "+    catch (RemoteException e) { error.log(\"Unable to complete slave.quit()\", e); }", "-  /* Records the identity and status of the Slave JVM in the Master JVM */", "-  public void registerSlave(SlaveRemote slave) throws RemoteException {", "-    _log.log(this + \" registering Slave \" + slave);", "-    ", "-    boolean quitSlavePending;  // flag used to move quitSlave() call out of synchronized block", "-    ", "-    synchronized(_masterJVMLock) {", "-      _slave = slave;", "-      _startupInProgress = false;", "-      ", "-      _log.log(this + \" calling handleSlaveConnected()\");", "-      ", "-      handleSlaveConnected();", "-      ", "-      quitSlavePending = _quitOnStartup;", "-      if (_quitOnStartup) {", "-        // quitSlave was called before the slave registered, so we now act on the deferred quit request.", "-        _quitOnStartup = false;", "-      }", "-    }", "-    if (quitSlavePending) {", "-      _log.log(this + \" Executing deferred quitSlave() that was called during startUp\");", "-      quitSlave();  // not synchronized; _slave may be null when this code executes", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e40fe965c8c1565280cdb5feea061f4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public final synchronized void quit()", "signatureAfterChange": "   public final synchronized void quit()", "diff": ["-//    _log.log(this + \".quit() called\");", "-//    _master = null;", "-    ", "-    ", "-    _slaveExited = false;", "-//    Utilities.showDebug(\"quit() called\");", "-    ", "-    Thread t = new Thread(_quitSlaveThreadName) {", "+    new Thread(_quitSlaveThreadName) {", "-        try {", "-          // wait for parent RMI calling thread to exit ", "-          synchronized(_slaveJVMLock) { ", "-            while (! _slaveExited) {", "-//              _log.log(\"Waiting for \" + AbstractSlaveJVM.this + \".quit() to exit\");", "-              _slaveJVMLock.wait(); ", "-            }", "-          }", "-          shutdown();", "+        // ensure (as best we can) that the quit() RMI call has returned cleanly", "+        synchronized (AbstractSlaveJVM.this) {", "+          try { System.exit(0); }", "+          catch (RuntimeException e) { error.log(\"Can't invoke System.exit\", e); }", "-        catch(Throwable t) { ", "-          _log.log(this + \".quit() failed!\");", "-          quitFailed(t); ", "+      }", "+    }.start();", "+  }", "-    ", "-    t.start();", "-//    _log.log(this + \".quit() RMI call exited\");", "-    synchronized(_slaveJVMLock) { ", "-      _slaveExited = true; ", "-      _slaveJVMLock.notify();  // There does not appear to be any constraint forcing this thread to exit before shutdown", "-    }"]}], "num": 490}
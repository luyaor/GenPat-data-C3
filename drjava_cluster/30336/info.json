{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "495d6f8e46685e45b295f3c83dbfbed3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3d79c3695666c43e77faa5b8b05006", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelDeleteTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void testStartDeleteInDoubleBrace5()", "signatureAfterChange": "   \tpublic void deleteLineCommentSlashOpensBlockComment()", "diff": ["+", "+\tpublic void deleteLineCommentSlashOpensBlockComment()", "+\t\t{", "+\t\t\tmodel1.insertSlash();", "+", "+\t\t\tassertEquals(\"#0.0\", 9, model1.absOffset());", "+\t\t\tassertEquals(\"#0.1\", ReducedToken.FREE,", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#1.0\", 8, model1.absOffset());", "+\t\t\tassertEquals(\"#1.1\", ReducedToken.FREE,", "+\t\t\tassertEquals(\"#1.2\", \"/\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#2.0\", 7, model1.absOffset());", "+\t\t\tassertEquals(\"#2.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#2.2\", \"*\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#3.0\", 6, model1.absOffset());", "+\t\t\tassertEquals(\"#3.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#3.2\", \"(\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-2);", "+\t\t\tassertEquals(\"#4.0\", 4, model1.absOffset());", "+\t\t\tassertEquals(\"#4.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertTrue(\"#4.2\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#4.3\", 2, model1.currentToken().getSize());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#5.0\", 3, model1.absOffset());", "+\t\t\tassertEquals(\"#5.1\", ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#5.2\", \"\\n\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#6.0\", 2, model1.absOffset());", "+\t\t\tassertEquals(\"#6.1\", ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#6.2\", \"*\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#7.0\", 1, model1.absOffset());", "+\t\t\tassertEquals(\"#7.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#7.2\", \"//\", model1.currentToken().getType());", "+\t\t\t", "+\t\t\tmodel1.delete(-1);", "+\t\t\tassertEquals(\"#8.0\", 0, model1.absOffset());", "+\t\t\tassertEquals(\"#8.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#8.2\", \"/*\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(7);", "+\t\t\tassertEquals(\"#8.0\", 7, model1.absOffset());", "+\t\t\tassertEquals(\"#8.1\", ReducedToken.INSIDE_BLOCK_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#8.2\", \"*/\", model1.currentToken().getType());\t\t\t", "+\t\t\t", "-", "-\tpublic void testStartDeleteInDoubleBrace5()", "-\t\t{", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertGap(2);", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertSlash();", "-\t\t\t//  /*__*/#", "-\t\t\t", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.delete(-3);", "-\t\t\t//  /#*/", "-\t\t\tassertEquals(\"#0.0\",\"/*\",model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#0.1\",\"/\",model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#0.2\",1,model1.getBlockOffset());", "-\t\t\tassertEquals(\"#0.3\",ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tmodel1.move(2);", "-\t\t\tmodel1.delete(-2);", "-\t\t\t//  /#", "-\t\t\tassertEquals(\"#1.0\", \"/\", model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#1.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#1.2\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-", "-\t\t\tmodel1.insertGap(4);", "-\t\t\t// /____#", "-", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertSlash();", "-\t\t\t// /____//#", "-", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.delete(-4);", "-\t\t\t// /#//", "-\t\t\tassertEquals(\"#2.0\", \"//\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#2.1\", \"/\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#2.2\", 1, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#2.3\", ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-", "-\t\t\tmodel1.move(2);", "-\t\t\tmodel1.delete(-3);", "-\t\t\t// <empty>", "-\t\t\tassertTrue(\"#3.0\", model1.getBraces().isEmpty());", "-\t\t\tassertEquals(\"#3.1\", 0, model1.getBlockOffset());", "-", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertGap(3);", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertNewline();", "-\t\t\tmodel1.insertGap(2);", "-\t\t\tmodel1.insertOpenParen();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertSlash();", "-\t\t\t//  /___/*", "-\t\t\t//  __(*/#", "-\t\t\tmodel1.move(-3);", "-\t\t\t//  /___/*", "-\t\t\t//  __#(*/", "-\t\t\tassertEquals(\"#4.0\", \"(\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#4.1\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tassertTrue(\"#4.2\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#4.3\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t\tassertEquals(\"#4.4\", \"*/\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#4.5\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#4.3\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-", "-\t\t\tmodel1.move(-5);", "-\t\t\tmodel1.delete(-3);", "-", "-\t\t\t//  /#/*", "-\t\t\t//  __(*/", "-\t\t\tassertEquals(\"#5.0\", \"//\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#5.1\", 1, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#5.2\", \"*\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#5.3\", ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-", "-\t\t\tmodel1.move(6);", "-\t\t\t//  //*", "-\t\t\t//  __(#*/", "-\t\t\tassertEquals(\"#6.0\", \"*\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#6.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#6.2\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#6.3\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());\t\t\t", "-\t\t\tassertEquals(\"#6.4\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-", "-\t\t\tmodel1.move(-5);", "-\t\t\tmodel1.delete(-1);", "-\t\t\t//  /#*", "-\t\t\t//  __(*/", "-\t\t\tassertEquals(\"#7.0\", \"/*\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#7.1\", 1, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#7.2\", \"\\n\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#7.3\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-", "-\t\t\tmodel1.move(5);", "-\t\t\tassertEquals(\"#8.1\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#8.2\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t\tassertEquals(\"#8.3\", \"*/\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#8.4\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a2ebe7aa529fc1ac1c64a24d773d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelDeleteTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic void testStartDeleteInDoubleBrace5()", "signatureAfterChange": "   \tpublic void deleteLineCommentSlashOpensBlockComment()", "diff": ["+", "+\tpublic void deleteLineCommentSlashOpensBlockComment()", "+\t\t{", "+\t\t\tmodel1.insertSlash();", "+", "+\t\t\tassertEquals(\"#0.0\", 9, model1.absOffset());", "+\t\t\tassertEquals(\"#0.1\", ReducedToken.FREE,", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#1.0\", 8, model1.absOffset());", "+\t\t\tassertEquals(\"#1.1\", ReducedToken.FREE,", "+\t\t\tassertEquals(\"#1.2\", \"/\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#2.0\", 7, model1.absOffset());", "+\t\t\tassertEquals(\"#2.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#2.2\", \"*\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#3.0\", 6, model1.absOffset());", "+\t\t\tassertEquals(\"#3.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#3.2\", \"(\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-2);", "+\t\t\tassertEquals(\"#4.0\", 4, model1.absOffset());", "+\t\t\tassertEquals(\"#4.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertTrue(\"#4.2\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#4.3\", 2, model1.currentToken().getSize());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#5.0\", 3, model1.absOffset());", "+\t\t\tassertEquals(\"#5.1\", ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#5.2\", \"\\n\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#6.0\", 2, model1.absOffset());", "+\t\t\tassertEquals(\"#6.1\", ReducedToken.INSIDE_LINE_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#6.2\", \"*\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(-1);", "+\t\t\tassertEquals(\"#7.0\", 1, model1.absOffset());", "+\t\t\tassertEquals(\"#7.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#7.2\", \"//\", model1.currentToken().getType());", "+\t\t\t", "+\t\t\tmodel1.delete(-1);", "+\t\t\tassertEquals(\"#8.0\", 0, model1.absOffset());", "+\t\t\tassertEquals(\"#8.1\", ReducedToken.FREE,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#8.2\", \"/*\", model1.currentToken().getType());", "+", "+\t\t\tmodel1.move(7);", "+\t\t\tassertEquals(\"#8.0\", 7, model1.absOffset());", "+\t\t\tassertEquals(\"#8.1\", ReducedToken.INSIDE_BLOCK_COMMENT,", "+\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "+\t\t\tassertEquals(\"#8.2\", \"*/\", model1.currentToken().getType());\t\t\t", "+\t\t\t", "-", "-\tpublic void testStartDeleteInDoubleBrace5()", "-\t\t{", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertGap(2);", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertSlash();", "-\t\t\t//  /*__*/#", "-\t\t\t", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.delete(-3);", "-\t\t\t//  /#*/", "-\t\t\tassertEquals(\"#0.0\",\"/*\",model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#0.1\",\"/\",model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#0.2\",1,model1.getBlockOffset());", "-\t\t\tassertEquals(\"#0.3\",ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#0.4\",ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tmodel1.move(2);", "-\t\t\tmodel1.delete(-2);", "-\t\t\t//  /#", "-\t\t\tassertEquals(\"#1.0\", \"/\", model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#1.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#1.2\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-", "-\t\t\tmodel1.insertGap(4);", "-\t\t\t// /____#", "-", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertSlash();", "-\t\t\t// /____//#", "-", "-\t\t\tmodel1.move(-2);", "-\t\t\tmodel1.delete(-4);", "-\t\t\t// /#//", "-\t\t\tassertEquals(\"#2.0\", \"//\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#2.1\", \"/\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#2.2\", 1, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#2.3\", ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-", "-\t\t\tmodel1.move(2);", "-\t\t\tmodel1.delete(-3);", "-\t\t\t// <empty>", "-\t\t\tassertTrue(\"#3.0\", model1.getBraces().isEmpty());", "-\t\t\tassertEquals(\"#3.1\", 0, model1.getBlockOffset());", "-", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertGap(3);", "-\t\t\tmodel1.insertSlash();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertNewline();", "-\t\t\tmodel1.insertGap(2);", "-\t\t\tmodel1.insertOpenParen();", "-\t\t\tmodel1.insertStar();", "-\t\t\tmodel1.insertSlash();", "-\t\t\t//  /___/*", "-\t\t\t//  __(*/#", "-\t\t\tmodel1.move(-3);", "-\t\t\t//  /___/*", "-\t\t\t//  __#(*/", "-\t\t\tassertEquals(\"#4.0\", \"(\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#4.1\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-\t\t\tassertTrue(\"#4.2\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#4.3\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t\tassertEquals(\"#4.4\", \"*/\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#4.5\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-\t\t\tassertEquals(\"#4.3\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-", "-\t\t\tmodel1.move(-5);", "-\t\t\tmodel1.delete(-3);", "-", "-\t\t\t//  /#/*", "-\t\t\t//  __(*/", "-\t\t\tassertEquals(\"#5.0\", \"//\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#5.1\", 1, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#5.2\", \"*\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#5.3\", ReducedToken.INSIDE_LINE_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-", "-\t\t\tmodel1.move(6);", "-\t\t\t//  //*", "-\t\t\t//  __(#*/", "-\t\t\tassertEquals(\"#6.0\", \"*\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#6.1\", 0, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#6.2\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#6.3\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());\t\t\t", "-\t\t\tassertEquals(\"#6.4\", ReducedToken.FREE,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().current().getState());", "-", "-\t\t\tmodel1.move(-5);", "-\t\t\tmodel1.delete(-1);", "-\t\t\t//  /#*", "-\t\t\t//  __(*/", "-\t\t\tassertEquals(\"#7.0\", \"/*\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#7.1\", 1, model1.getBlockOffset());", "-\t\t\tassertEquals(\"#7.2\", \"\\n\", model1.getCursor().nextItem().getType());", "-\t\t\tassertEquals(\"#7.3\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().nextItem().getState());", "-", "-\t\t\tmodel1.move(5);", "-\t\t\tassertEquals(\"#8.1\", \"(\", model1.getCursor().prevItem().getType());", "-\t\t\tassertEquals(\"#8.2\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getCursor().prevItem().getState());", "-\t\t\tassertEquals(\"#8.3\", \"*/\", model1.getCursor().current().getType());", "-\t\t\tassertEquals(\"#8.4\", ReducedToken.INSIDE_BLOCK_COMMENT,", "-\t\t\t\t\t\t\t\t\t model1.getStateAtCurrent());", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fafe96f6604cd3a44afd7e34d2cbea9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void interpret(final String input, final InterpreterData interpreter)", "signatureAfterChange": "          private InterpretResult interpret(String input, Interpreter interpreter)", "diff": ["-   */", "-  public void interpret(final String input, final InterpreterData interpreter) {", "-    _log.log(this + \".interpret(\" + input + \") called\");", "-    try {", "-      synchronized(interpreter) { ", "-        if (interpreter.inProgress()) {", "-            _mainJVM.interpretResult(new InterpreterBusy());", "-          return;", "-        }", "-//      interpretationInProgress = true; ", "-      interpreter.setInProgress(true);  // records that a given interpreter is in progress (used by debugger?)", "-      }", "-      // The following code is NOT synchronized on this. Mutual exclusion is guaranteed by preceding synchronized block.", "-//        Utilities.showDebug(\"InterpreterJVM.interpret(\" + input + \", ...) called\");", "-      Thread thread = new Thread(\"interpret thread: \" + input) {", "-        public void run() {", "-          String s = input;", "-          try {  // Delimiting a catch for RemoteExceptions that might be thrown in catch clauses of enclosed try", "-            try {", "-              _log.log(\"Interpreter thread for \" + input + \" has started\");", "-//              _dialog(\"to interp: \" + s);", "-              ", "-//            Utilities.showDebug(\"Preparing to invoke interpret method on \" + s);", "-              Object result = interpreter.getInterpreter().interpret(s);", "-              String resultString = String.valueOf(result);", "-//            Utilities.showDebug(\"Result string is: \" + resultString);", "-              ", "-              if (result == Interpreter.NO_RESULT) {", "-                //return new VoidResult();", "-                //_dialog(\"void interp ret: \" + resultString);", "-                _mainJVM.interpretResult(new VoidResult());", "-              }", "-              else {", "-                // we use String.valueOf because it deals with result = null!", "-                //_dialog(\"about to tell main result was \" + resultString);", "-                //return new ValueResult(resultString);", "-                String style = InteractionsDocument.OBJECT_RETURN_STYLE;", "-                if (result instanceof String) {", "-                  style = InteractionsDocument.STRING_RETURN_STYLE;", "-                  //Single quotes have already been added to chars by now, so they are read as strings", "-                  String possibleChar = (String)result;", "-                  ", "-                  if (possibleChar.startsWith(\"\\'\") && possibleChar.endsWith(\"\\'\") && possibleChar.length()==3)", "-                    style = InteractionsDocument.CHARACTER_RETURN_STYLE;                ", "-                }", "-                if (result instanceof Number) style = InteractionsDocument.NUMBER_RETURN_STYLE;", "-                _mainJVM.interpretResult(new ValueResult(resultString, style));", "-              }", "-            }", "-            catch (ExceptionReturnedException e) {", "-              Throwable t = e.getContainedException();", "-//            Utilities.showStackTrace(t);", "-              _dialog(\"interp exception: \" + t);", "-              // TODO: replace the following if ladder by dynamic dispatch.  Create a visitor for DynamicJava errors?", "-              if (t instanceof ParseException)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((ParseException) t, input));", "-              else if (t instanceof TokenMgrError)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((TokenMgrError) t, input));", "-              else if (t instanceof ParseError)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((ParseError) t, input));", "-              else {", "-                //Other exceptions are non lexical/parse related exceptions. These include arithmetic exceptions, ", "-                //wrong version exceptions, etc.", "-                ", "-                _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(), t.getMessage(),", "-                                                             InterpreterJVM.getStackTrace(t), null));", "-              }                                                                                                                                        ", "-            }", "-            catch (Throwable t) {", "-              // A user's toString method might throw anything, so we need to be careful", "-              _dialog(\"irregular interp exception: \" + t);", "-//            Utilities.showStackTrace(t);", "-              String shortMsg = null;", "-              if ((t instanceof ParseError) &&  ((ParseError) t).getParseException() != null) ", "-                shortMsg = ((ParseError) t).getMessage(); // in this case, getMessage is equivalent to getShortMessage", "-              _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(), t.getMessage(),", "-                                                           InterpreterJVM.getStackTrace(t), shortMsg));", "-            }", "-          }", "-          catch(RemoteException re) { /* MainJVM no longer accessible.  Cannot recover. */  ", "-            _log.log(\"MainJVM.interpret threw \" + re.toString());", "-          }", "-        }", "-      }; // end of Thread definition", "-      ", "-      thread.setDaemon(true);", "-      thread.start();", "-    } // end of interpretation block including synchronized prelude ", "-    catch(RemoteException re) { /* MainJVM not accessible.  Cannot recover. */  ", "-      _log.log(\"MainJVM.interpret threw\" + re.toString());", "-    }", "-    finally { // fields are volatile so no synchronization is necessary", "-//      interpretationInProgress = false;", "-      interpreter.setInProgress(false); ", "-    }", "-  }", "+   ", "+  private InterpretResult interpret(String input, Interpreter interpreter) {", "+    debug.logStart(\"Interpret \" + input);", "+    ", "+    boolean available = _busyInterpreters.add(interpreter);", "+    if (!available) { debug.logEnd(); return InterpretResult.busy(); }", "+    ", "+    Option<Object> result = null;", "+    try { result = interpreter.interpret(input); }", "+    catch (InterpreterException e) { debug.logEnd(); return InterpretResult.exception(e); }", "+    catch (Throwable e) { debug.logEnd(); return InterpretResult.unexpectedException(e); }", "+    finally { _busyInterpreters.remove(interpreter); }", "+    ", "+    return result.apply(new OptionVisitor<Object, InterpretResult>() {", "+      public InterpretResult forNone() { return InterpretResult.noValue(); }", "+      public InterpretResult forSome(Object obj) {", "+        if (obj instanceof String) { debug.logEnd(); return InterpretResult.stringValue((String) obj); }", "+        else if (obj instanceof Character) { debug.logEnd(); return InterpretResult.charValue((Character) obj); }", "+        else if (obj instanceof Number) { debug.logEnd(); return InterpretResult.numberValue((Number) obj); }", "+        else if (obj instanceof Boolean) { debug.logEnd(); return InterpretResult.booleanValue((Boolean) obj); }", "+        else {", "+          try {", "+            String resultString = TextUtil.toString(obj);", "+            debug.logEnd();", "+            return InterpretResult.objectValue(resultString);", "+          }", "+          catch (Throwable t) {", "+            // an exception occurred during toString", "+            debug.logEnd(); ", "+            return InterpretResult.exception(new EvaluatorException(t));", "+          }", "+        }", "+      }", "+    });", "+  }"]}], "num": 30336}
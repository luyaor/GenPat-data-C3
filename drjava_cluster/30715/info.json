{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9caef0df103e3bd575812d13753f902", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e363549d088412c47e2a8abaaeba7a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testCurly() throws BadLocationException", "signatureAfterChange": "      public void testCurly() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20));", "-      assertTrue(\"START is curly brace.\", !_rule.applyRule(_doc, 21));", "-      assertTrue(\"START is close brace.\", !_rule.applyRule(_doc, 23));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20, Indenter.OTHER));", "+      assertTrue(\"START is curly brace.\", !_rule.applyRule(_doc, 21, Indenter.OTHER));", "+      assertTrue(\"START is close brace.\", !_rule.applyRule(_doc, 23, Indenter.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20));", "-      assertTrue(\"START is curly brace.\", !_rule.applyRule(_doc, 21));", "-      assertTrue(\"START's brace is curly brace.\", !_rule.applyRule(_doc, 23));", "-      assertTrue(\"START is close curly brace.\", !_rule.applyRule(_doc, _text.length() - 1));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20, Indenter.OTHER));", "+      assertTrue(\"START is curly brace.\", !_rule.applyRule(_doc, 21, Indenter.OTHER));", "+      assertTrue(\"START's brace is curly brace.\", !_rule.applyRule(_doc, 23, Indenter.OTHER));", "+      assertTrue(\"START is close curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20));", "-      assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, 21));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 24));", "-      assertTrue(\"START's brace is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 1)); ", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 20, Indenter.OTHER));", "+      assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, 21, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 24, Indenter.OTHER));", "+      assertTrue(\"START's brace is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f189f1ff16b5b1e04a047a6ee0fa95cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "7514c1680e1d7e2676a0d61c09ad444070ccaf0d", "commitAfterChange": "5855aafbaf5a76e18e2b0e646fcf0b45b64b1fe3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "              public void testWithFree() throws BadLocationException", "signatureAfterChange": "              public void testWithFree() throws BadLocationException", "diff": ["-\tassertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 24));\t    ", "-\tassertTrue(\"START immediatly follows an open paren.\", _rule.applyRule(_doc, 25));\t    ", "+\tassertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23));\t    ", "+\tassertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25));\t    ", "-\t/* (6) ", "+\t/* (6) */", "-\t    \"array[\\n\" +", "-\t    \"    new Listener() {\\n\" +", "-\t    \"        method() {\\n\" +", "-\t    \"        }\\n\" +", "-\t    \"    }]\";", "-", "-\t_setDocText(_text);", "-", "-        try { _rule.applyRule(_doc, 0); fail(\"START has no brace.\"); }", "-\tcatch (UnexpectedException e) {}", "-", "-\tassertTrue(\"START's brace ('[') is on previous line.\", _rule.applyRule(_doc, 7));\t    ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 28));\t    ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 50));\t    ", "-\tassertTrue(\"START's brace ('{') is three lines above.\", !_rule.applyRule(_doc, _text.length() - 1));\t    ", "-", "-\t\t_text =", "-\t    \"{ /* block1* / }\\n\" +", "-\t    \"{ /* block2* / }\\n\" +", "-\t    \"{ /* block3* / }\";", "-", "-\t\t\t_text =", "-\t    \"{\\n\" +", "-\t    \"    {\\n\" +", "-\t    \"        {}\\n\" +", "-\t    \"    }\\n\" +", "+\t    \"class Foo {   \\n\" +", "+\t    \"              \\n\" +", "+\t    \"  /*          \\n\" +", "+\t    \"   *          \\n\" +", "+\t    \"   */         \\n\" +", "+\t    \"  int field;  \\n\" +", "-\t", "+ ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 7));\t    ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 8));\t    ", "-\tassertTrue(\"START's brace ('{') is two lines above.\", !_rule.applyRule(_doc, 19));\t    ", "-\tassertTrue(\"START's brace ('{') is four lines above.\", !_rule.applyRule(_doc, _text.length() - 1));\t    ", "-\t*/", "-    }", "+\tassertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 0));", "+\tassertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 14));", "+\tassertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 15));", "+\tassertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 30));", "+\tassertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 44));", "+\tassertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 45));", "+\tassertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 60));", "+\tassertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 77));"]}], "num": 30715}
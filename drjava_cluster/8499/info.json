{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "501700324a06ae354335d4bca59dd4a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c0114ffcba681c078d49b2df8b420b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "d884ae55e9471d604870827048329b58394dd950", "commitAfterChange": "28bca5adabaaf178bdf954808155389f93ed51fa", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void clearRegions()", "signatureAfterChange": "     public void clearRegions()", "diff": ["-  /** Tells the manager to remove all regions. */", "-  public void clearRegions() {", "-    for(OpenDefinitionsDocument doc: _documents) {", "-      for (final R region: _regions.get(doc)) {", "-        // notify", "-        Utilities.invokeLater(new Runnable() { public void run() {", "-          _lock.startRead();", "-          try {", "-            for (RegionManagerListener<R> l: _listeners) { l.regionRemoved(region); }", "-          } finally { _lock.endRead(); }", "-        } });", "-      }", "-    _regions.clear(); ", "-    _documents.clear();", "-  }", "+    /** Tells the manager to remove all regions. */", "+    public void clearRegions() {", "+      final Vector<R> regions = getRegions();", "+      // Remove all regions in this manager", "+      ", "+      // Notify all listeners for this manager that all regions have been removed", "+      Utilities.invokeLater(new Runnable() { public void run() {", "+        _lock.startRead();", "+        try {", "+          for (RegionManagerListener<R> l: _listeners) { ", "+            for (R r: regions) { l.regionRemoved(r); }", "+          }", "+        } ", "+        finally { _lock.endRead(); }", "+      } });", "+      ", "+      _regions.clear();", "+      _documents.clear();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2ca502bc276c323b74d04745902aacb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/BrowserHistoryManager.java", "commitBeforeChange": "29114a3ab27f49e46885f181f9f058e018ee6b61", "commitAfterChange": "667a3b3eeb7df33831045c52d97320979614b89d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void addBrowserRegion(final BrowserDocumentRegion r)", "signatureAfterChange": "      public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "diff": ["-  public synchronized void addBrowserRegion(final BrowserDocumentRegion r) {", "-    ", "-    // ignore addition if the same region is on top of region \"stack\"", "-    if (! _regions.isEmpty() && equals(r, _regions.last())) return;", "+  ", "+  public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) {", "+    if (_current != null) {", "+      // flush the stack of regions above _current", "+//      Utilities.show(\"Flushing elements above current = \" + _current);", "+      SortedSet<BrowserDocumentRegion> tail = _regions.tailSet(_current); ", "+//      Utilities.show(\"Tail set above current is \" + tail);", "+      Iterator<BrowserDocumentRegion> it = tail.iterator();", "+      if (it.hasNext()) {", "+        BrowserDocumentRegion nr = it.next();  // skip over current", "+        assert nr == _current;", "+//        Utilities.show(\"Skipped \" + nr);", "+      }", "+      while (it.hasNext()) { ", "+        BrowserDocumentRegion nr = it.next(); ", "+        it.remove(); ", "+//        Utilities.show(\"Removed \" + nr + \", leaving \" + _regions);", "+      }", "+    }", "+//    Utilities.show(\"Before adding, regions = \" + _regions);", "+    notifier.browserChanged();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef5b8ae3c5351e6fea3d795a300ac516", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "d884ae55e9471d604870827048329b58394dd950", "commitAfterChange": "28bca5adabaaf178bdf954808155389f93ed51fa", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void removeRegions(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public void removeRegions(final OpenDefinitionsDocument doc)", "diff": ["-  /** Remove the specified document from _documents and _regions (removing all of its contained regions). */", "-  public void removeRegions(OpenDefinitionsDocument doc) {", "-    assert doc != null;", "-    boolean found = _documents.remove(doc);", "-    if (found) {", "-      for (final R region: _regions.get(doc)) {", "+    /** Remove the specified document from _documents and _regions (removing all of its contained regions). */", "+    public void removeRegions(final OpenDefinitionsDocument doc) {", "+      assert doc != null;", "+      boolean found = _documents.remove(doc);", "+      if (found) {", "+        final SortedSet<R> regions = _regions.get(doc);", "-            for (RegionManagerListener<R> l: _listeners) { l.regionRemoved(region); }", "-          } finally { _lock.endRead(); }", "+            for (RegionManagerListener<R> l: _listeners) { ", "+              for (final R r: regions) { l.regionRemoved(r); }", "+            } ", "+          } ", "+          finally { _lock.endRead(); }", "+        _regions.remove(doc);", "-      _regions.remove(doc);", "-  }"]}], "num": 8499}
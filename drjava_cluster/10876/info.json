{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7a05d64d4eeceb0dfebd8067a432301", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "140615da7574dce614d3bda3c44ab3e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   final public List<Node> StreamItem() throws ParseException", "signatureAfterChange": "   final public List topLevelStatement() throws ParseException", "diff": ["-  final public List<Node> StreamItem() throws ParseException {", "+  final public List topLevelStatement() throws ParseException {", "-      case PACKAGE:", "-        root = packageDeclaration();", "-        break;", "+      case BREAK:", "+      case CONTINUE:", "+      case DO:", "+      case FOR:", "+      case IF:", "-        root = importDeclaration();", "+      case PACKAGE:", "+      case RETURN:", "+      case SWITCH:", "+      case THROW:", "+      case TRY:", "+      case WHILE:", "+      case LBRACE:", "+      case SEMICOLON:", "+        root = singleLookaheadStatement();", "-        if (jj_2_2(2147483647)) {", "+        if (jj_2_2(2)) {", "+          root = synchronizedStatement();", "+        } else if (jj_2_3(2)) {", "+          root = labeledStatement();", "+        } else if (jj_2_4(2147483647)) {", "-        } else if (jj_2_3(2147483647)) {", "+        } else if (jj_2_5(2147483647)) {", "-        } else if (jj_2_4(2147483647)) {", "-          root = topLevelStatement();", "+        } else if (jj_2_6(2147483647)) {", "+          root = typeDeclaration();", "+        } else if (jj_2_7(2147483647)) {", "+          root = expression();", "+          jj_consume_token(SEMICOLON);", "-          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-          case ABSTRACT:", "-          case CLASS:", "-          case ENUM:", "-          case FINAL:", "-          case INTERFACE:", "-          case NATIVE:", "-          case PRIVATE:", "-          case PROTECTED:", "-          case PUBLIC:", "-          case STATIC:", "-          case SYNCHRONIZED:", "-          case TRANSIENT:", "-          case VOLATILE:", "-            root = typeDeclaration();", "-            break;", "-          default:", "-            jj_la1[4] = jj_gen;", "-            jj_consume_token(-1);", "-            throw new ParseException();", "-          }", "+          jj_consume_token(-1);", "+          throw new ParseException();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da0a614093e0a733554ce3947218491", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "eceb1efda2a64c0d1777a241a780b6640565e74e", "commitAfterChange": "985a2a7aa160a776eff6e6187000ef0ccbcb7ce0", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-    // Indent the lines, so as to trigger a nested compond edit", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented, ", "-                 _defModel.getText(0, _defModel.getLength()));", "-    ", "-    // Try to undo the nested edit", "-    try {", "-      _defModel.getUndoManager().undo();", "-      fail(\"Should not have allowed undoing a nested edit.\");", "-    }", "-    catch (CannotUndoException e) {", "-      // Correct: cannot undo a nested edit", "-    }", "-    ", "+    // Indent the lines, so as to trigger a nested compound edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // We've taken out this part of the test because of our change to", "+    // undo where we close the nearest open compound edit upon undo-ing,", "+    // pasting, commenting, un-commenting, indenting, and backspacing.", "+    // We should never have a nested edit anymore.", "+    ", "+    // Try to undo the nested edit", "+//    try {", "+//      _defModel.getUndoManager().undo();", "+//      fail(\"Should not have allowed undoing a nested edit.\");", "+//    }", "+//    catch (CannotUndoException e) {", "+//      // Correct: cannot undo a nested edit", "+//    }", "+    ", "-    _defModel.getUndoManager().endCompoundEdit(key);", "+//    _defModel.getUndoManager().endCompoundEdit(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30e2d6e2ec0a2889b07fc973b1af319", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocumentTest.java", "commitBeforeChange": "25c6efa4fee666f10304502f8f42fa30cbab79a2", "commitAfterChange": "e193e4674aaab3350b36cbc521ecf3bf9c098bc6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "signatureAfterChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "diff": ["-    assertEquals(\"StylesList before insert should contain 2 pairs\", 2, _adapter.getStylesList().size());", "+    assertEquals(\"StylesList before insert should contain 2 pairs\", 2, _adapter.getStyles().length);", "-                 _adapter.getStylesList().get(1).toString());", "+                 _adapter.getStyles()[1].toString());", "-                 _adapter.getStylesList().get(0).toString());", "+                 _adapter.getStyles()[0].toString());", "-    assertEquals(\"StylesList before reset should contain 3 pairs\", 3, _adapter.getStylesList().size());", "+    assertEquals(\"StylesList before reset should contain 3 pairs\", 3, _adapter.getStyles().length);", "-                 _adapter.getStylesList().get(2).toString());", "+                 _adapter.getStyles()[2].toString());", "-                 _adapter.getStylesList().get(1).toString());", "+                 _adapter.getStyles()[1].toString());", "-                 _adapter.getStylesList().get(0).toString());", "+                 _adapter.getStyles()[0].toString());", "-    //. Wait until interpreter has restarted", "+    // Wait until interpreter has restarted", "-    assertEquals(\"StylesList after reset should contain 2 pairs\", 2, _adapter.getStylesList().size());", "+    // TODO: getStyles() technically requres a ReadLock! ", "+    assertEquals(\"StylesList after reset should contain 2 pairs\", 2, _adapter.getStyles().length);", "-                 _adapter.getStylesList().get(1).toString());", "+                 _adapter.getStyles()[1].toString());", "-                 _adapter.getStylesList().get(0).toString());", "-    ", "-    ", "-", "+                 _adapter.getStyles()[0].toString());"]}], "num": 10876}
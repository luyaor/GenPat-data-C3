{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1c0d1fa73cad3810943647f2e115f0d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e040024654024595a32ef342a7008a90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0010b17f7e497304215b54fd325dae9e3e72e53d", "commitAfterChange": "ea3e6424f15db4c84a4f6218d2ea0c54fb67dfd7", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    // 1", "+    ", "+    ", "+    // 2", "+    ", "+    String commented = ", "+      \"// public class foo {\\n\" +", "+      \"//   int bar;\\n\" +", "+      \"// }\";", "+    ", "+    // Start a compound edit and verify the returned key", "+    key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 2, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // End the outer compound edit trigger a second compound edit", "+    _defModel.getUndoManager().endCompoundEdit(key);", "+    _defModel.commentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have commented correctly.\", commented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Undo the second compound edit", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the commenting.\", indented,", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Undo the first compound edit", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\",", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // 3    ", "+    ", "+    // Start a compound edit and verify the returned key", "+    key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 5, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Try to undo the nested edit", "+    try {", "+      _defModel.getUndoManager().undo();", "+      fail(\"Should not have allowed undoing a nested edit.\");", "+    }", "+    catch (CannotUndoException e) {", "+      // Correct: cannot undo a nested edit", "+    }", "+    ", "+    // Try end the compound edit with a wrong key", "+    try {", "+      _defModel.getUndoManager().endCompoundEdit(key + 1);", "+      fail(\"Should not have allowed ending a compound edit with a wrong key.\");", "+    }", "+    catch (IllegalStateException e) {", "+      assertEquals(\"Should have printed the correct error message.\", ", "+                   \"Improperly nested compound edits.\", e.getMessage());", "+    }", "+    ", "+    // End the compound edit and undo", "+    _defModel.getUndoManager().endCompoundEdit(key);", "+    _defModel.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\",", "+                 _defModel.getText(0, _defModel.getLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd737c2ae03bc4ae87d7a6badc55f86b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-    CompoundUndoManager undoManager = _defModel.getUndoManager();", "+    CompoundUndoManager undoManager = _doc.getUndoManager();", "-    _defModel.addUndoableEditListener(undoManager);", "+    _doc.addUndoableEditListener(undoManager);", "-    _defModel.insertString(0, text, null);", "-    assertEquals(\"Should have inserted the text properly.\", text, _defModel.getText());", "+    _doc.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented,  _defModel.getText());", "+    indentLines(0, _doc.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented,  _doc.getText());", "-    assertEquals(\"Should have undone correctly.\", \"\",  _defModel.getText());", "+    assertEquals(\"Should have undone correctly.\", \"\",  _doc.getText());", "-    key = _defModel.getUndoManager().startCompoundEdit();", "+    key = _doc.getUndoManager().startCompoundEdit();", "-    _defModel.insertString(0, text, null);", "+    _doc.insertString(0, text, null);", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "+    indentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.commentLines(0, _defModel.getLength());", "+    _doc.commentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.getUndoManager().undo();", "+    _doc.getUndoManager().undo();", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.getUndoManager().undo();", "+    _doc.getUndoManager().undo();", "-                 _defModel.getText());", "+                 _doc.getText());", "-    key = _defModel.getUndoManager().startCompoundEdit();", "+    key = _doc.getUndoManager().startCompoundEdit();", "-    _defModel.insertString(0, text, null);", "+    _doc.insertString(0, text, null);", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "+    indentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-//      _defModel.getUndoManager().undo();", "+//      _doc.getUndoManager().undo();", "-//      _defModel.getUndoManager().redo();", "+//      _doc.getUndoManager().redo();", "-      _defModel.getUndoManager().endCompoundEdit(key + 2);", "+      _doc.getUndoManager().endCompoundEdit(key + 2);", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented, _defModel.getText());", "+    indentLines(0, _doc.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, _doc.getText());", "-//      _defModel.getUndoManager().undo();", "+//      _doc.getUndoManager().undo();", "-//    _defModel.getUndoManager().endCompoundEdit(key);", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"Should have undone the indenting and inserting.\", \"\", _defModel.getText());", "+//    _doc.getUndoManager().endCompoundEdit(key);", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\", _doc.getText());"]}], "num": 3603}
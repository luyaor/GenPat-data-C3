{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6de91c2a16c7604ad1624466497bf320", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4672c813894c25f409c10c4889ea7c6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 107, "signatureBeforeChange": "          public void testGetQualifiedSymbolData()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-    public void testGetQualifiedSymbolData() {", "-      testLLVisitor._file = new File(\"testFiles/Fake.dj0\");", "-      SymbolData sd = new SymbolData(\"testPackage.File\");", "-      testLLVisitor._package = \"testPackage\";", "-      LanguageLevelConverter.symbolTable.put(\"testPackage.File\", sd);", "-      ", "-      SymbolData sd1 = new SymbolData(\"java.lang.String\");", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.String\", sd1);", "-      ", "-      //Test that classes not in the symbol table are handled correctly.", "-      assertEquals(\"should the continuation symbol\", sd, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false, true));", "-//      assertEquals(\"should be one error so far.\", 1, errors.size());", "-      ", "-      ", "-      SymbolData sd2 = testLLVisitor._getQualifiedSymbolData(\"java.lang.Integer\", SourceInfo.NO_INFO, true, true, true);", "-      assertEquals(\"should return non-continuation java.lang.Integer\", \"java.lang.Integer\", sd2.getName());", "-      assertFalse(\"should not be a continuation.\", sd2.isContinuation());", "-      ", "-      SymbolData sd3 = testLLVisitor._getQualifiedSymbolData(\"Wow\", SourceInfo.NO_INFO, true, true, true);", "-      assertEquals(\"search should fail\", null, sd3);", "-//      assertEquals(\"should return Wow\", \"Wow\", sd3.getName());", "-//      assertFalse(\"Should not be a continuation.\", sd3.isContinuation());", "-      ", "-      // \"testPackage.File\" has been entered as a continuation in symbolTable.  Why should the following lookup fail?", "-//      //Test that classes in the symbol table are handled correctly", "-//      assertEquals(\"should return null sd--does not exist\", null, ", "-//                   _llv._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, false, false, true));", "-//      assertEquals(\"Should be 1 error\", 1, errors.size());", "-      ", "-      sd.setIsContinuation(false);", "-      assertEquals(\"should return non-continuation sd\", sd, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.File\", SourceInfo.NO_INFO, true, false,  true));", "-      ", "-      ", "-      assertEquals(\"Should return sd1.\", sd1, ", "-                   testLLVisitor._getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, false, true));", "-      assertFalse(\"sd1 should no longer be a continuation.\", sd1.isContinuation());", "-      ", "-      ", "-      ", "-      //check that stuff not in symbol table and packaged incorrectly is handled right.", "-      assertEquals(\"should return null-because it's not a valid class\", null, ", "-                   testLLVisitor._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                                                   SourceInfo.NO_INFO, true, false, true));", "-      ", "-      assertEquals(\"should be two errors so far.\", 2, errors.size());", "-      assertNull(\"should return null\", ", "-                 testLLVisitor._getQualifiedSymbolData(\"testPackage.not.in.symboltable\", ", "-                                                 SourceInfo.NO_INFO, false, false, false));", "-      ", "-      assertNull(\"should return null.\", ", "-                 testLLVisitor._getQualifiedSymbolData(\"notRightPackage\", SourceInfo.NO_INFO, false, false, false));", "-      assertEquals(\"should still be two errors.\", 2, errors.size());", "-    }", "+    public void testGetQualifiedSymbolData() {", "+                   testLLVisitor.getQualifiedSymbolData(\"int\", SourceInfo.NO_INFO, true, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"byte\", SourceInfo.NO_INFO, false, false, false));", "+      SymbolData result = testLLVisitor.getQualifiedSymbolData(\"int[]\", SourceInfo.NO_INFO, true, true, true);", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, false, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, true, false, true));", "+      testLLVisitor._classesInThisFile.add(\"fully.qualified.Qwerty\");", "+                                                       continuations,", "+                                                       fixUps,", "+                                 PACKAGE_MAV, ", "+                                 new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]),", "+      bv._classesInThisFile.add(\"fully.qualified.Qwerty\" /*, new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv)*/);", "+                   bv.getSymbolData(\"Qwerty\", SourceInfo.NO_INFO, true, true));", "+      assertEquals(\"should also return a continuation\", sd, ", "+                   bv.getQualifiedSymbolData(\"fully.qualified.Qwerty\", SourceInfo.NO_INFO, false, false, true));", "+      assertTrue(\"should be a continuation\", sd.isContinuation());", "+//      System.err.println(\"SymbolData for 'a.b.c' is \" + sd);", "+      LanguageLevelConverter.symbolTable.put(\"a.b.c\", sd);", "+//      System.err.println(\"SymbolTable entry for 'a.b.c' is \" + LanguageLevelConverter.symbolTable.get(\"a.b.c\"));", "+//      LanguageLevelConverter.symbolTable.put(\"foobar\", new SymbolData(\"This is strange\"));", "+//      System.err.println(\"SymbolTable entry for 'foobar' is \" + LanguageLevelConverter.symbolTable.get(\"foobar\"));", "+                   testLLVisitor.getQualifiedSymbolData(\"a.b.c\", SourceInfo.NO_INFO, false, true, true));", "+      // TODO: create an import table to look at when no match is found in symbolTable.", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+//                         _llv.getQualifiedSymbolData(\"fully.qualified.Woah\", ", "+//      SourceInfo.NO_INFO, true, true, true));", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      assertEquals(\"Should return sd2, now resolved.\", sd2, result);", "+      assertFalse(\"sd2 should now be resolved\", sd2.isContinuation());", "+                   testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true));", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      SymbolData newsd1 = testLLVisitor.getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, true, true);", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", new SymbolData(\"java.lang.Object\"));", "+      result = testLLVisitor.getSymbolData(\"String\", SourceInfo.NO_INFO);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "668f21e808599126716e1e7d99b329ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 103, "signatureBeforeChange": "               public void testGetSymbolDataHelper()", "signatureAfterChange": "               public void testGetSymbolDataHelper()", "diff": ["-                   _llv.getSymbolDataHelper(\"int\", SourceInfo.NO_INFO, true, true, true, true));", "+                   testLLVisitor.getSymbolDataHelper(\"int\", SourceInfo.NO_INFO, true, true, true, true));", "-                   _llv.getSymbolDataHelper(\"byte\", SourceInfo.NO_INFO, false, false, false, true));", "+                   testLLVisitor.getSymbolDataHelper(\"byte\", SourceInfo.NO_INFO, false, false, false, true));", "-      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, _llv, SourceInfo.NO_INFO);", "-      SymbolData result = _llv.getSymbolDataHelper(\"int[]\", SourceInfo.NO_INFO, true, true, true, true);", "+      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NO_INFO);", "+      SymbolData result = testLLVisitor.getSymbolDataHelper(\"int[]\", SourceInfo.NO_INFO, true, true, true, true);", "-      symbolTable.put(\"java.lang.System\", sd);", "+      LanguageLevelConverter.symbolTable.put(\"java.lang.System\", sd);", "-                   _llv.getSymbolDataHelper(\"java.lang.System\", SourceInfo.NO_INFO, false, true, true, true));", "+                   testLLVisitor.getSymbolDataHelper(\"java.lang.System\", SourceInfo.NO_INFO, false, true, true, true));", "-                   _llv.getSymbolDataHelper(\"java.lang.System\", SourceInfo.NO_INFO, true, false, true, true));", "+                   testLLVisitor.getSymbolDataHelper(\"java.lang.System\", SourceInfo.NO_INFO, true, false, true, true));", "-      symbolTable.put(\"fully.qualified.Qwerty\", sd);", "-      _llv._classNamesInThisFile.addLast(\"fully.qualified.Qwerty\");", "+      LanguageLevelConverter.symbolTable.put(\"fully.qualified.Qwerty\", sd);", "+      testLLVisitor._classNamesInThisFile.addLast(\"fully.qualified.Qwerty\");", "-      ElementaryVisitor bv = new ElementaryVisitor(new File(\"\"), errors, symbolTable, continuations, ", "-                                                   new LinkedList<Pair<LanguageLevelVisitor, SourceFile>>(), _newSDs);", "+      IntermediateVisitor bv = new IntermediateVisitor(new File(\"\"), ", "+                                                       errors, ", "+                                                       continuations, ", "+                                                       new LinkedList<Pair<LanguageLevelVisitor, SourceFile>>());", "-      _llv._importedFiles.addLast(\"a.b.c\");", "+      testLLVisitor._importedFiles.addLast(\"a.b.c\");", "-      symbolTable.put(\"a.b.c.\", sd);", "+      LanguageLevelConverter.symbolTable.put(\"a.b.c.\", sd);", "-                   _llv.getSymbolDataHelper(\"c\", SourceInfo.NO_INFO, false, true, true, true));", "+                   testLLVisitor.getSymbolDataHelper(\"c\", SourceInfo.NO_INFO, false, true, true, true));", "-      _llv._package=\"fully.qualified\";", "-      _llv._file = new File(\"testFiles/fully/qualified/Fake.dj0\");", "-      _llv._importedFiles.addLast(\"fully.qualified.Woah\");", "+      testLLVisitor._package=\"fully.qualified\";", "+      testLLVisitor._file = new File(\"testFiles/fully/qualified/Fake.dj0\");", "+      testLLVisitor._importedFiles.addLast(\"fully.qualified.Woah\");", "-      symbolTable.put(\"fully.qualified.Woah\", sd2);", "-      result = _llv.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, true, false, true, true);", "+      LanguageLevelConverter.symbolTable.put(\"fully.qualified.Woah\", sd2);", "+      result = testLLVisitor.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, true, false, true, true);", "-      _llv._importedFiles.clear();", "-      _llv.visitedFiles.clear();", "-      symbolTable.remove(\"fully.qualified.Woah\");", "+      testLLVisitor._importedFiles.clear();", "+      testLLVisitor.visitedFiles.clear();", "+      LanguageLevelConverter.symbolTable.remove(\"fully.qualified.Woah\");", "-      _llv.symbolTable.put(\"fully.qualified.Woah\", sd2);", "+      LanguageLevelConverter.symbolTable.put(\"fully.qualified.Woah\", sd2);", "-      result = _llv.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, false, false, true, true);", "+      result = testLLVisitor.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, false, false, true, true);", "-      result = _llv.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, false, false, true, true);", "+      result = testLLVisitor.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, false, false, true, true);", "-      symbolTable.remove(\"fully.qualified.Woah\");", "-      _llv.visitedFiles.clear();", "-      _llv._file = new File(\"testFiles/Fake.dj0\");", "-      _llv._package = \"\";", "-      _llv._importedPackages.addLast(\"fully.qualified\");", "+      LanguageLevelConverter.symbolTable.remove(\"fully.qualified.Woah\");", "+      testLLVisitor.visitedFiles.clear();", "+      testLLVisitor._file = new File(\"testFiles/Fake.dj0\");", "+      testLLVisitor._package = \"\";", "+      testLLVisitor._importedPackages.addLast(\"fully.qualified\");", "-      symbolTable.put(\"fully.qualified.Woah\", sd2);", "+      LanguageLevelConverter.symbolTable.put(\"fully.qualified.Woah\", sd2);", "-                   _llv.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, false, false, true, true));", "+                   testLLVisitor.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, false, false, true, true));", "-      result = _llv.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, true, false, true, true);", "+      result = testLLVisitor.getSymbolDataHelper(\"Woah\", SourceInfo.NO_INFO, true, false, true, true);", "-      SymbolData newsd1 = _llv.getSymbolDataHelper(\"String\", SourceInfo.NO_INFO, true, true, true, true);", "+      SymbolData newsd1 = testLLVisitor.getSymbolDataHelper(\"String\", SourceInfo.NO_INFO, true, true, true, true);", "-      symbolTable.put(\"random.package.String\", new SymbolData(\"random.package.String\"));", "-      symbolTable.put(\"java.lang.Object\", new SymbolData(\"java.lang.Object\"));", "-      _llv._importedPackages.addLast(\"random.package\");", "-      result = _llv.getSymbolDataHelper(\"String\", SourceInfo.NO_INFO, true, true, true, true);", "+      LanguageLevelConverter.symbolTable.put(\"random.package.String\", new SymbolData(\"random.package.String\"));", "+      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", new SymbolData(\"java.lang.Object\"));", "+      testLLVisitor._importedPackages.addLast(\"random.package\");", "+      result = testLLVisitor.getSymbolDataHelper(\"String\", SourceInfo.NO_INFO, true, true, true, true);", "-      symbolTable.remove(\"random.package.String\");", "+      LanguageLevelConverter.symbolTable.remove(\"random.package.String\");"]}], "num": 23274}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd1bfb153e1ca8113e0bef235773423d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29fab20c9ca7f7fe34605b3e11e839a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 98, "signatureBeforeChange": "          public String toString()", "signatureAfterChange": "               public String toString()", "diff": ["-        result.append(\"{ \");", "-        boolean first = true;", "-        ", "-        for (Map.Entry<VariableType, Type> entry : _lowerBounds.entrySet()) {", "-          if (!first) { result.append(\", \"); }", "-          first = false;", "-          result.append(entry.getKey() + \" :> \" + userRepresentation(entry.getValue()));", "+        boolean firstScenario = true;", "+        for (ConstraintScenario s : scenarios()) {", "+          if (!firstScenario) { result.append(\" | \"); }", "+          firstScenario = false;", "+          result.append(\"{ \");", "+          boolean firstVar = true;", "+          for (VariableType var : s.boundVariables()) {", "+            if (firstVar) { result.append(\", \"); }", "+            firstVar = false;", "+            result.append(userRepresentation(s.lowerBound(var)));", "+            result.append(\" <: \");", "+            result.append(var.symbol().name());", "+            result.append(\" <: \");", "+            result.append(userRepresentation(s.upperBound(var)));", "+          }", "+          result.append(\" }\");", "-        for (Map.Entry<VariableType, Type> entry : _upperBounds.entrySet()) {", "-          if (!first) { result.append(\", \"); }", "-          first = false;", "-          result.append(entry.getKey() + \" <: \" + userRepresentation(entry.getValue()));", "-        }", "-        result.append(\" }\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72a09218e9863b5a496d91bff70f2949", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "194b7a090e0ed824f08942e6e6efd976dc158404", "commitAfterChange": "c0f3fda00a0dfdfc7ba1813b053360e729d2a0e8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public List<String> findTestClasses(final List<String> classNames, final List<File> files)", "signatureAfterChange": "   public List<String> findTestClasses(final List<String> classNames, final List<File> files)", "diff": ["-    _testRunner = new JUnitTestRunner(_jmc);", "+    _testRunner = makeRunner();", "-   //new ScrollableDialog(null, \"JUnitManager.findTestClasses invoked\", \"Candidate classes are = \" + classNames, \"files = \" + files).show();", "-    ", "-    try {", "-      for (i = 0; i < classNames.size(); i++) {", "-        String cName = classNames.get(i);", "-       //new ScrollableDialog(null, \"Class to be checked in JUnitManager: \" + cName, \"\", \"\").show();", "-        try {", "-          if (_isTestCase(cName)) {", "-            //new ScrollableDialog(null, \"Test class \" + cName + \" found!\", \"\", \"\").show();", "-            _testClassNames.add(cName);", "-            _testFiles.add(files.get(i));", "-            _suite.addTest(_testRunner.getTest(cName));", "-          }", "-        }", "-        catch(LinkageError e) { ", "-          //debug.log(e);", "-          _jmc.classFileError(new ClassFileError(cName, files.get(i).getCanonicalPath(), e));", "+    for (Pair<String, File> pair : IterUtil.zip(classNames, files)) {", "+      String cName = pair.first();", "+      try {", "+        if (_isJUnitTest(_testRunner.loadPossibleTest(cName))) {", "+          _testClassNames.add(cName);", "+          _testFiles.add(pair.second());", "+          _suite.addTest(_testRunner.getTest(cName));", "+      catch (ClassNotFoundException e) { error.log(e); }", "+      catch(LinkageError e) {", "+        //debug.log(e);", "+        String path = IOUtil.attemptAbsoluteFile(pair.second()).getPath();", "+        _jmc.classFileError(new ClassFileError(cName, path, e));", "+      }", "-    catch(IOException e) { throw new UnexpectedException(e); }", "-    //new ScrollableDialog(null, \"TestClassNames are: \" + _testClassNames, \"\", \"\").show();"]}], "num": 5018}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "117f9cdfe4b43dd860c5773e4d64f182", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee04f66f7d9229bf4c8be544f0a6879", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 138, "signatureBeforeChange": "      public void interpreterResetting()", "signatureAfterChange": "          public void interpreterResetting()", "diff": ["+    ", "+    public void interpreterResetting() {", "+      assertInterpreterResettingCount(0);", "+      assertInterpreterReadyCount(0);", "+      synchronized(this) { interpreterResettingCount++; }", "+    }", "-", "-    public void interpreterResetting() {", "-      assertInterpreterResettingCount(0);", "-      assertInterpreterReadyCount(0);", "-      assertCompileStartCount(1);", "-      assertCompileEndCount(1);", "-      // don't care whether interactions or console are reset first", "-      interpreterResettingCount++;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c0db1c16f0f8fb466f3a8f2a2f0d45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "e878d558a99af8934972e8a59e74d6047540f2bd", "commitAfterChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-    try { _svo.parse(\"{11,22}\"); fail(\"Illegal header and footer.\"); } ", "+    // parsing this as a vector of strings is okay, because it will treat it", "+    // as a singleton vector", "+    v = _svo.parse(\"{11,22}\");", "+    assertEquals(1, v.size());", "+    assertEquals(\"{11,22}\", v.get(0));    ", "+    ", "+    // but parsing this as a vector of integers will fail", "+    try { _ivo.parse(\"{11,22}\"); fail(\"Should not have parsed this as singleton list.\"); } "]}], "num": 2058}
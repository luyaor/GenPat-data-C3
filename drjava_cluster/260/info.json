{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca8012ccaa6173f85573e2afe0b3c754", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ddfa9b698beda4ee48f3c7364d5e99d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["-      synchronized(_reduced) {", "-        if (selStart == selEnd) {  // single line to indent", "+//      synchronized(_reduced) {   // Unnecessary. Write access is exclusive.", "+      if (selStart == selEnd) {  // single line to indent", "-          Position oldCurrentPosition = createUnwrappedPosition(_currentLocation);", "-          ", "-          // Indent, updating current location if necessary.", "+        Position oldCurrentPosition = createUnwrappedPosition(_currentLocation);", "+        ", "+        // Indent, updating current location if necessary.", "-          if (_indentLine(reason)) {", "-            _setCurrentLocation(oldCurrentPosition.getOffset());", "-            if (onlyWhiteSpaceBeforeCurrent()) {", "-              int space = getWhiteSpace();", "-              move(space);", "-            }", "+        if (_indentLine(reason)) {", "+          _setCurrentLocation(oldCurrentPosition.getOffset());", "+          if (onlyWhiteSpaceBeforeCurrent()) {", "+            int space = getWhiteSpace();", "+            move(space);", "-        else _indentBlock(selStart, selEnd, reason, pm);", "+      else _indentBlock(selStart, selEnd, reason, pm);", "+//      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8c146217f8a06c1d252071a072fc5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private int _commentBlock(final int start, final int end)", "signatureAfterChange": "   private int _commentBlock(final int start, final int end)", "diff": ["-      int walker = start;", "+      int walker = getLineStartPos(start);", "-          setCurrentLocation(walker);", "-          // Keep pointer to walker position that will stay current", "-          // regardless of how commentLine changes things", "-          Position walkerPos = this.createUnwrappedPosition(walker);", "-          // Comment out current line", "-          _commentLine();  // must be atomic", "+          setCurrentLocation(walker);  // Update cursor", "+          ", "+          _commentLine();              // Comment out current line; must be atomic", "-          // Move back to walker spot", "-          setCurrentLocation(walkerPos.getOffset());", "-          walker = walkerPos.getOffset();", "+", "+          walker = walker + 2;         // Skip over inserted slashes; getDistToNewline(walker) = 0 if not advanced", "+          setCurrentLocation(walker);  // reset currentLocation to position past newline", "+", "-          // We don't actually move yet. That happens at the top of the loop,", "-          // after we check if we're past the end.", "-          //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));"]}], "num": 260}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9d85a7c1523af006f5c3e880d50a958", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89854f955f3fef18fed2d57eae28fa52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public int getOffset(int lineNum)", "signatureAfterChange": "   public int getOffset(int lineNum)", "diff": ["-    if (lineNum < 0) return -1;", "-    String defsText = getText();", "-    int curLine = 1;", "-    int offset = 0; // offset is number of chars from beginning of file", "-    ", "-    // offset is always pointing to the first character in a line at the top of the loop", "-    /* Isn't there a more efficient way to do this? */", "-    while (offset < defsText.length()) {", "-      ", "-      if (curLine == lineNum) return offset;", "-      ", "-      int nextNewline = defsText.indexOf('\\n', offset);", "-      if (nextNewline == -1) return -1; // end of the document, and couldn't find the supplied lineNum", "-      ", "-      curLine++;", "-      offset = nextNewline + 1;", "+    if (lineNum <= 0) return -1;", "+    if (lineNum == 1) return 0;", "+   ", "+", "+    acquireReadLock();", "+    synchronized(_reduced) {", "+      final int origPos = getCurrentLocation();", "+      try {", "+        final int docLen = getLength();", "+        ", "+        _setCurrentLocation(0); // _currentLocation is candidate offset to return", "+        int i;", "+        for (i = 1; (i < lineNum) && (_currentLocation < docLen); i++) {", "+          int dist = _reduced.getDistToNextNewline();     // or end of doc", "+          if (_currentLocation + dist < docLen) dist++;  // skip newline", "+          _move(dist);  // updates _currentLocation to beginning of line # (i + 1)", "+        }", "+        if (i == lineNum) return _currentLocation;", "+        else return -1;", "+      }", "+      finally {", "+        _setCurrentLocation(origPos);", "+        releaseReadLock(); ", "+      }", "-    return -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a44f742a6705a372e9c827de1ea1c8a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 5, "signatureBeforeChange": "   static boolean handleCommandLineArgs(String[] args)", "signatureAfterChange": "   static boolean handleCommandLineArgs(String[] args)", "diff": ["-    int firstFile = 0;", "-", "+    ", "-    for (int i = 0; i < args.length; i++) {", "-      if (args[i].equals(\"-config\")) {", "-        if (args.length > i+1) {", "-          setPropertiesFile(args[i+1]);", "-          firstFile = i+2;", "-          _config = _initConfig();", "+    int firstFile = 0;", "+    int len = args.length;", "+    _filesToOpen = new ArrayList<String>();", "+    ", "+    for (int i = 0; i < len; i++) {", "+      String arg = args[i];", "+      ", "+      if (arg.equals(\"-config\")) {", "+        if (len == i + 1) { ", "+          // config option is missing file name; should we generate an error?", "+          return true;", "-        else firstFile = i+1;", "+        ", "+        // arg.length > i+1 implying args list incudes config file name and perhaps files to open", "+        setPropertiesFile(args[i + 1]);", "+        firstFile = i + 2;", "+        _config = _initConfig();  // read specified .djrava file into _config", "-", "-      else if (args[i].equals(\"-attemptingAugmentedClasspath\"))", "-        _attemptingAugmentedClassPath = true;", "-", "-      else if (args[i].equals(\"-debugConsole\")) _showDrJavaDebugConsole = true;", "-", "-      else if (args[i].equals(\"-help\") || args[i].equals(\"-?\")) {", "+      else if ((arg.length() > 1) && (arg.substring(0,2).equals(\"-X\"))) _jmvArgs.add(arg); ", "+      ", "+      else if (arg.equals(\"-debugConsole\")) _showDebugConsole = true;", "+      ", "+      else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {", "+      else {", "+        firstFile = i;", "+        break;", "+      }", "-    // Open the rest as filenames", "-    int numFiles = args.length - firstFile;", "-    _filesToOpen = new String[numFiles];", "-    System.arraycopy(args, firstFile, _filesToOpen, 0, numFiles);", "+    // Open the remaining args as filenames", "+    for (int i = firstFile; i < len; i++) _filesToOpen.add(args[i]);"]}], "num": 22455}
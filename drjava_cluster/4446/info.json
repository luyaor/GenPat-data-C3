{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90b98459d1b90ccb4883c60bf8138f4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a065303ffdc04dc87d9564eda297c31", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/print/DrJavaBookTest.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void xtestGetPrintable()", "signatureAfterChange": "      public void testGetPrintable()", "diff": ["-  public void xtestGetPrintable(){ // FAILS for some reason // moez & eliot", "+  public void testGetPrintable() { ", "-    try{", "+    try { ", "-    catch(Exception e){", "-      fail(\"testGetPrintable: Unexpected exception!\\n\" + e);", "-    }", "+    catch(Exception e){ fail(\"testGetPrintable: Unexpected exception!\\n\" + e); }", "-    p = book.getPrintable(99);", "-    ", "-    try{", "-      assertEquals(\"testGetPrintable:\", new Integer(Printable.NO_SUCH_PAGE), ", "-                   new Integer(p.print(g, new PageFormat(), 99)));", "+    try {", "+      p = book.getPrintable(99);", "+      fail(\"previous operation should throw an IndexOutOfBoundsException\");", "-    catch(Exception e)", "-    {", "-      fail(\"testGetPrintable: Unexpected exception!\\n\" + e);", "+    catch(IndexOutOfBoundsException e) {", "+      /* test succeeded */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b87d43812f2eabac950899db70d55299", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "1c3947ce9682f305287b6afe6b5c5d87597bae6f", "commitAfterChange": "0acb22a1f5b2329a270795e5839a4690952252ed", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-      try {  /** Run the junit test suite that has already been set up on the slave JVM */", "-        _testInProgress = true;", "+      /** Run the junit test suite that has already been set up on the slave JVM */", "+      _testInProgress = true;", "-        new Thread(new Runnable() {", "-          public void run() { ", "-            try {", "+      new Thread(new Runnable() {", "+        public void run() { ", "+          try {", "-              _notifier.junitStarted(); ", "-              boolean testsPresent = _jvm.runTestSuite();  // The false boolean return value could be changed to an exception.", "-              if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-            }", "-            catch(RemoteException e) { // Unit testing was aborted; cleanup", "-              EventQueue.invokeLater(new Runnable() { public void run() { nonTestCase(allTests); } });", "-            }", "+            _notifier.junitStarted(); ", "+            boolean testsPresent = _jvm.runTestSuite();  // The false return value could be changed to an exception.", "+            if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-        }).start();", "-      }", "-      catch(Exception e) {", "-        _notifier.junitEnded();  // balances junitStarted()", "-        _testInProgress = false;", "-        throw new UnexpectedException(e);", "-      }", "+          catch(RemoteException e) { // Unit testing aborted; cleanup; hourglassOf already called in junitStarted", "+            _notifier.junitEnded();  // balances junitStarted()", "+            _testInProgress = false;", "+          }", "+        }", "+      }).start();"]}], "num": 4446}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b95ae6177c115852a90ec67275d127b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0065fdefb89d19507222bb1c37da8a4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void testGreaterThanEqual()", "signatureAfterChange": "   public void testGreaterThanEqual() throws ExceptionReturnedException", "diff": ["-  public void testGreaterThanEqual() {", "-    Node exp = _parseCode(\"new Float(1) >= new Float(2);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testGreaterThanEqual() throws ExceptionReturnedException {", "+    String text = \"new Float(1) >= new Float(2);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: floatValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Float) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: floatValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Float) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "794a8a42c388bfc6a67024bcb3cc71a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void testGreaterThan()", "signatureAfterChange": "   public void testGreaterThan() throws ExceptionReturnedException", "diff": ["-  public void testGreaterThan() {", "-    Node exp = _parseCode(\"new Double(1) > new Double(2);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testGreaterThan() throws ExceptionReturnedException {", "+    String text = \"new Double(1) > new Double(2);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: doubleValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Double) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: doubleValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Double) [(koala.dynamicjava.tree.IntegerLiteral: 2 2 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8162dca1db3d93107452a173d6fc21a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void testUShiftRight()", "signatureAfterChange": "   public void testUShiftRight() throws ExceptionReturnedException", "diff": ["-  public void testUShiftRight() {", "-    Node exp = _parseCode(\"new Long(-1) >>> new Long(1);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testUShiftRight() throws ExceptionReturnedException {", "+    String text = \"new Long(-1) >>> new Long(1);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.MinusExpression: (koala.dynamicjava.tree.IntegerLiteral: 1 1 int))]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8cf5df9630bbd3e351109dc4fcd8d32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "8212ce9ce43b34bb82672d4de3ee06245bf52614", "commitAfterChange": "d88fb548627bde19f7cf516c794ed4211e0bf63d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public void testAndingTwoBooleans()", "signatureAfterChange": "   public void testAndingTwoBooleans() throws ExceptionReturnedException", "diff": ["-  public void testAndingTwoBooleans() {", "-    Node exp = _parseCode(\"new Boolean(true) && new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testAndingTwoBooleans() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) && new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f72e109c7ec4c20d9e54b2b2f2b3eb9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void testBooleanBitwiseOr()", "signatureAfterChange": "   public void testBooleanBitwiseOr() throws ExceptionReturnedException", "diff": ["-  public void testBooleanBitwiseOr() {", "-    Node exp = _parseCode(\"new Boolean(true) | new Boolean(false);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testBooleanBitwiseOr() throws ExceptionReturnedException {", "+    String text = \"new Boolean(true) | new Boolean(false);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)])\";", "+    String expectedRight = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)])\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+  }"]}], "num": 16600}
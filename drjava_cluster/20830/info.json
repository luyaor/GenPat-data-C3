{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcb2a8f35c6e820b98f36028105c0385", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ab65e96fdbc188c2c5c9b30fc6efa2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/IntegerOptionComponent.java", "commitBeforeChange": "47d5fc81163cac95e4e64b470a149e7ec540b233", "commitAfterChange": "d012414100e088dfd0a2ea6e642cc05f11fbf32b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void update()", "signatureAfterChange": "    public boolean update()", "diff": ["-  public void update() {", "-    DrJava.CONFIG.setSetting(_option, _option.parse(_jtf.getText()));", "-    _jtf.setText(_option.format(DrJava.CONFIG.getSetting(_option)));", "+   */ ", "+  public boolean update() {", "+  ", "+    Integer currentValue = DrJava.CONFIG.getSetting(_option);", "+    String enteredString = _jtf.getText().trim();", "+    //If the current value is the same as the enterd value, there is nothing to do.", "+    if (currentValue.toString().equals(enteredString)) {", "+      return true;", "+    }", "+    ", "+    Integer enteredValue;", "+    try {", "+      enteredValue = _option.parse(enteredString);", "+    }", "+    catch (OptionParseException ope) {", "+      showErrorMessage(\"Invalid Integer!\", ope);", "+      return false;", "+    }", "+    ", "+    DrJava.CONFIG.setSetting(_option, enteredValue);", "+    return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f842dae849b8b32e03f244bfc5fdf83b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 63, "signatureBeforeChange": "   public void javadocAll(String destDir)     throws IOException, JavadocException, InvalidPackageException", "signatureAfterChange": "   public boolean javadocAll(String destDir) throws IOException, InvalidPackageException", "diff": ["-  public void javadocAll(String destDir)", "-    throws IOException, JavadocException, InvalidPackageException {", "-", "+  public boolean javadocAll(String destDir) throws IOException, InvalidPackageException {", "+    ", "+    // Notify all listeners that Javadoc is starting.", "+    this.javadocStarted();", "+    ", "+    if (areAnyModifiedSinceSave()) {", "+      // if any files haven't been saved after we told our", "+      // listeners to do so, don't proceed with the rest", "+      // of the operation.", "+      return false;", "+    }", "+    ", "-        File sourceRoot = doc.getSourceRoot();", "+        // This call will abort the iteration if there is no file.", "+        File sourceRoot = doc.getSourceRoot();", "-            // TO DO: write a unit test for a package name w/ no dot!", "+            // TODO: write a unit test for a package name w/ no dot!", "+    }", "+    ", "+    // Don't attempt to create Javadoc if no files are open, or if open file is unnamed.", "+    if (docUnits.size() == 0) { ", "+      return false;", "-    ", "-    System.out.println(\"javadoc started with args:\\n\" + args);", "-    javadoc_1_3((String[]) args.toArray(new String[0]));", "+    boolean result;", "+    try {", "+      result = javadoc_1_3((String[]) args.toArray(new String[0]));", "+    }", "+    catch (Throwable e) {", "+      throw new UnexpectedException(e);", "+    }", "+    finally {", "+      // Notify all listeners that Javadoc is done.", "+      this.javadocEnded();", "+    }", "+    return result;", "+  }"]}], "num": 20830}
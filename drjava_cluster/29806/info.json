{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd391aadbba0451d3af0a8a91dc03181", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f6d9a60c764537ed94298736663df9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public TypeChecker makeTypeChecker(Context context)", "signatureAfterChange": "   public TypeChecker makeTypeChecker(final Context context)", "diff": ["-  public TypeChecker makeTypeChecker(Context context) {", "+  public TypeChecker makeTypeChecker(final Context context) {", "+      /*", "-        return visit(_convertThisToName(node));", "+        Expression e = visitThis(node);", "+        if (e instanceof QualifiedName) {", "+          return visit((QualifiedName)e);", "+        }", "+        else if (e instanceof ObjectFieldAccess) {", "+          return visit((ObjectFieldAccess)e);", "+        }", "+        else {", "+          throw new UnexpectedException(new IllegalArgumentException(\"Illegal type of Expression\"));", "+        }", "+      }*/", "+      /**", "+       * Visits a QualifiedName, returning our class if it is \"this\"", "+       * @param node the node to visit", "+       */", "+      public Object visit(QualifiedName node) {", "+        String var = node.getRepresentation();", "+        if (\"this\".equals(var)) {", "+          try {", "+            String cName = _thisClassName.replace('$', '.');", "+            if (!_thisPackageName.equals(\"\")) {", "+              cName = _thisPackageName + \".\" + cName;", "+            }", "+            Class c = context.lookupClass(cName);", "+            node.setProperty(NodeProperties.TYPE, c);", "+            node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+            return c;", "+          }", "+          catch (ClassNotFoundException cnfe) {", "+            throw new ExecutionError(\"undefined.class\", node);", "+          }", "+        }", "+        else return super.visit(node);", "-    };", "-  }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3056d3abcfe7d1c6975b748c664f6914", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "6572078744d5462302a5712b2d3e4dd3c67ea5fb", "commitAfterChange": "123a2bf7d0ed947a362f9d9fd67ccb6733aff62d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public CompilerErrorPanel(DefinitionsPane defPane)", "signatureAfterChange": "   public CompilerErrorPanel(DefinitionsPane defPane, GlobalModel model)", "diff": ["-  public CompilerErrorPanel(DefinitionsPane defPane) {", "-    setLayout(new BorderLayout());", "-        ", "+  public CompilerErrorPanel(DefinitionsPane defPane, GlobalModel model) {", "+    _model = model;", "+", "+    _listener = new DefinitionsCaretListener();", "+    // Limitation: Only compiler choices are those that were available", "+    // at the time this box was created.", "+    // Also: The UI will go out of sync with reality if the active compiler", "+    // is later changed somewhere else. This is because there is no way", "+    // to listen on the active compiler.", "+    _compilerChoiceBox = new JComboBox(_model.getAvailableCompilers());", "+    _compilerChoiceBox.setEditable(false);", "+    _compilerChoiceBox.setSelectedItem(_model.getActiveCompiler());", "+    _compilerChoiceBox.addItemListener(new ItemListener() {", "+      public void itemStateChanged(ItemEvent e) {", "+        _model.setActiveCompiler((CompilerInterface)", "+                                 _compilerChoiceBox.getSelectedItem());", "+      }", "+    });", "+", "+    setLayout(new BorderLayout());", "+", "+    Box uiBox = Box.createVerticalBox();", "+    uiBox.add(new JLabel(\"Compiler\", SwingConstants.CENTER));", "+    uiBox.add(_compilerChoiceBox);", "+    uiBox.add(Box.createVerticalGlue());", "+", "+    add(uiBox, BorderLayout.EAST);", "+  }"]}], "num": 29806}
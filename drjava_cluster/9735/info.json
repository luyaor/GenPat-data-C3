{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "649485b4fdbdacbc2b74fdc8fb5d6de8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c9b4ac84fc69838774d9607c36b1ba8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "commitAfterChange": "c0ad820565377d42d023afeab71166682f497054", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-    List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree", "+    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree", "-    for (OpenDefinitionsDocument d: projDocs) {", "-      if (d.isProjectFile()) closeFile(d);", "-      else {", "-        try {", "-          final INavigatorItem idoc = d;", "-          final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "-          Utilities.invokeAndWait(new Runnable() { ", "-            public void run() { _documentNavigator.refreshDocument(idoc, path); }", "-          });", "-        }", "-        catch(IOException e) { ", "-          /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        for (OpenDefinitionsDocument d: projDocs) {", "+          if (d.isProjectFile()) closeFile(d);", "+          else {", "+            try {", "+              final INavigatorItem idoc = d;", "+              final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+              _documentNavigator.refreshDocument(idoc, path);  // this operation must run in event thread", "+            }", "+            catch(IOException e) { ", "+              /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+            }", "+          }", "-    }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fd1c6992889b15b4142ed3ca39dd84f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7cfeeaf9345ca550653b259e08abe84024ba9934", "commitAfterChange": "193d12982052662ec0e78a136e3a67b8a2ade2e4", "methodNumberBeforeChange": 408, "methodNumberAfterChange": 408, "signatureBeforeChange": "          public void caretUpdate(final CaretEvent ce )", "signatureAfterChange": "          public void caretUpdate(final CaretEvent ce )", "diff": ["-      OpenDefinitionsDocument doc = _model.getActiveDocument();", "-      doc.setCurrentLocation(ce.getDot());  // locking is done by setCurrentLocation", "-      final int line = doc.getCurrentLine();", "-      final int col = doc.getCurrentCol();", "-      Utilities.invokeLater(new Runnable() { public void run() { updateLocation(line, col); } });", "+      final OpenDefinitionsDocument doc = _model.getActiveDocument();", "+      ", "+      Utilities.invokeLater(new Runnable() { ", "+        public void run() { ", "+          doc.setCurrentLocation(ce.getDot());  ", "+          int line = doc.getCurrentLine();", "+          int col = doc.getCurrentCol();", "+          updateLocation(line, col); ", "+        } ", "+      });"]}], "num": 9735}
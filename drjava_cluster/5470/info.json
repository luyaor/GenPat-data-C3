{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66b45d897af9bc6a69c4969e9297673a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c557affa9a1ecfd2f4c3f9711df3cff1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   public void testSuccessful()", "signatureAfterChange": "   public void testSuccessful()", "diff": ["-   */\r", "-  public void testSuccessful() {\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj2\");\r", "-      }\r", "-    });\r", "-    \r", "-    \r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(testFiles);\r", "-    \r", "-    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-    \r", "-    \r", "-    /**Now make sure that the resulting java files are correct.*/\r", "-    for(int i = 0; i < testFiles.length; i++) {\r", "-      File currFile = testFiles[i];\r", "-      String fileName = currFile.getAbsolutePath();\r", "-      fileName = fileName.substring(0, fileName.length() -4);\r", "-      File resultingFile = new File(fileName + \".java\");\r", "-      File correctFile = new File(fileName + \".expected\");\r", "-      \r", "-      if (correctFile.exists()) {\r", "-        try {\r", "-          assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                       readFileAsString(correctFile),\r", "-                       readFileAsString(resultingFile));\r", "-        }\r", "-        catch (IOException ioe) {\r", "-          fail(ioe.getMessage());\r", "-          // let JUnit throw the exception\r", "-        }\r", "-      }\r", "-    }\r", "-    \r", "-    //test the subdirectory files as well.\r", "-    File newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles\");\r", "-    testFiles = newDirectory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        String name = pathName.getAbsolutePath();\r", "-        return name.endsWith(\"IsItPackageAndImport.dj1\") || name.endsWith(\"ToReference.dj1\");\r", "-      }});\r", "-      \r", "-      \r", "-      /**Now make sure that the resulting java files are correct.*/\r", "-      for(int i = 0; i < testFiles.length; i++) {\r", "-        File currFile = testFiles[i];\r", "-        String fileName = currFile.getAbsolutePath();\r", "-        fileName = fileName.substring(0, fileName.length() -4);\r", "-        File resultingFile = new File(fileName + \".java\");\r", "-        File correctFile = new File(fileName + \".expected\");\r", "-        \r", "-        if (correctFile.exists()) {\r", "-          try {\r", "-            assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                         readFileAsString(correctFile),\r", "-                         readFileAsString(resultingFile));\r", "-          }\r", "-          catch (IOException ioe) {\r", "-            fail(ioe.getMessage());\r", "-            // let JUnit throw the exception\r", "-          }\r", "-        }\r", "-      }\r", "-      \r", "-      //And make sure that no java file was generated for ToReference2.dj1\r", "-      //(This is testing that we correctly handled what could have been an ambiguous name reference, but wasn't)\r", "-      File f = new File(newDirectory, \"ToReference2.java\");\r", "-      assertFalse(\"ToReference2.java should not exist\", f.exists());\r", "-      \r", "-      newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles2\");\r", "-      testFiles = newDirectory.listFiles(new FileFilter() {\r", "-        public boolean accept(File pathName) {\r", "-          return pathName.getAbsolutePath().endsWith(\"AlsoReferenced.dj1\");\r", "-        }});\r", "-        \r", "-        \r", "-        \r", "-        /**Now make sure that the resulting java files are correct.*/\r", "-        for(int i = 0; i < testFiles.length; i++) {\r", "-          File currFile = testFiles[i];\r", "-          String fileName = currFile.getAbsolutePath();\r", "-          fileName = fileName.substring(0, fileName.length() -4);\r", "-          File resultingFile = new File(fileName + \".java\");\r", "-          File correctFile = new File(fileName + \".expected\");\r", "-          \r", "-          if (correctFile.exists()) {\r", "-            try {\r", "-              assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                           readFileAsString(correctFile),\r", "-                           readFileAsString(resultingFile));\r", "-            }\r", "-            catch (IOException ioe) {\r", "-              fail(ioe.getMessage());\r", "-              // let JUnit throw the exception\r", "-            }\r", "-          }\r", "-        }\r", "-        \r", "-        //And make sure that no java file was generated for ToReference.dj1\r", "-        f = new File(newDirectory, \"ToReference.java\");\r", "-        assertFalse(\"ToReference.java should not exist\", f.exists());\r", "-        \r", "-  }\r", "+   */", "+  public void testSuccessful() {", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj2\");", "+      }", "+    });", "+    ", "+    ", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+    ", "+    ", "+    /**Now make sure that the resulting java files are correct.*/", "+    for(int i = 0; i < testFiles.length; i++) {", "+      File currFile = testFiles[i];", "+      String fileName = currFile.getAbsolutePath();", "+      fileName = fileName.substring(0, fileName.length() -4);", "+      File resultingFile = new File(fileName + \".java\");", "+      File correctFile = new File(fileName + \".expected\");", "+      ", "+      if (correctFile.exists()) {", "+        try {", "+          assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                       IOUtil.toString(correctFile),", "+                       IOUtil.toString(resultingFile));", "+        }", "+        catch (IOException ioe) {", "+          fail(ioe.getMessage());", "+          // let JUnit throw the exception", "+        }", "+      }", "+    }", "+    ", "+    //test the subdirectory files as well.", "+    File newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles\");", "+    testFiles = newDirectory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        String name = pathName.getAbsolutePath();", "+        return name.endsWith(\"IsItPackageAndImport.dj1\") || name.endsWith(\"ToReference.dj1\");", "+      }});", "+      ", "+      ", "+      /**Now make sure that the resulting java files are correct.*/", "+      for(int i = 0; i < testFiles.length; i++) {", "+        File currFile = testFiles[i];", "+        String fileName = currFile.getAbsolutePath();", "+        fileName = fileName.substring(0, fileName.length() -4);", "+        File resultingFile = new File(fileName + \".java\");", "+        File correctFile = new File(fileName + \".expected\");", "+        ", "+        if (correctFile.exists()) {", "+          try {", "+            assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                         IOUtil.toString(correctFile),", "+                         IOUtil.toString(resultingFile));", "+          }", "+          catch (IOException ioe) {", "+            fail(ioe.getMessage());", "+            // let JUnit throw the exception", "+          }", "+        }", "+      }", "+      ", "+      //And make sure that no java file was generated for ToReference2.dj1", "+      //(This is testing that we correctly handled what could have been an ambiguous name reference, but wasn't)", "+      File f = new File(newDirectory, \"ToReference2.java\");", "+      assertFalse(\"ToReference2.java should not exist\", f.exists());", "+      ", "+      newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"importedFiles2\");", "+      testFiles = newDirectory.listFiles(new FileFilter() {", "+        public boolean accept(File pathName) {", "+          return pathName.getAbsolutePath().endsWith(\"AlsoReferenced.dj1\");", "+        }});", "+        ", "+        ", "+        ", "+        /**Now make sure that the resulting java files are correct.*/", "+        for(int i = 0; i < testFiles.length; i++) {", "+          File currFile = testFiles[i];", "+          String fileName = currFile.getAbsolutePath();", "+          fileName = fileName.substring(0, fileName.length() -4);", "+          File resultingFile = new File(fileName + \".java\");", "+          File correctFile = new File(fileName + \".expected\");", "+          ", "+          if (correctFile.exists()) {", "+            try {", "+              assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                           IOUtil.toString(correctFile),", "+                           IOUtil.toString(resultingFile));", "+            }", "+            catch (IOException ioe) {", "+              fail(ioe.getMessage());", "+              // let JUnit throw the exception", "+            }", "+          }", "+        }", "+        ", "+        //And make sure that no java file was generated for ToReference.dj1", "+        f = new File(newDirectory, \"ToReference.java\");", "+        assertFalse(\"ToReference.java should not exist\", f.exists());", "+        ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a8619e86e64948e9a8d74bf88a9a6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r   public void testRequiresAutoboxing()", "signatureAfterChange": "   public void testRequiresAutoboxing()", "diff": ["-  /* Make sure that autoboxing is done appropriately*/\r", "-  public void testRequiresAutoboxing() {\r", "-    directory = new File(directory, \"requiresAutoboxing\");\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".dj0\");\r", "-      }});\r", "-\r", "-      LanguageLevelConverter llc14 = new LanguageLevelConverter(JavaVersion.JAVA_1_4);\r", "-      // JavaVersion doesn't support JSR-14, but if it did, we could modify this\r", "-      LanguageLevelConverter llcJSR14 = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      \r", "-      for (int i = 0; i<testFiles.length; i++) {\r", "-        result = llc14.convert(new File[]{testFiles[i]});\r", "-        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());\r", "-      }\r", "-      \r", "-      result = llcJSR14.convert(testFiles);\r", "-\r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-\r", "-      /**Now make sure that the resulting java files are correct.*/\r", "-      for(int i = 0; i < testFiles.length; i++) {\r", "-        File currFile = testFiles[i];\r", "-        String fileName = currFile.getAbsolutePath();\r", "-        fileName = fileName.substring(0, fileName.length() -4);\r", "-        File resultingFile = new File(fileName + \".java\");\r", "-        File correctFile = new File(fileName + \".expected\");\r", "-        \r", "-        try {\r", "-        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",\r", "-                     readFileAsString(correctFile),\r", "-                     readFileAsString(resultingFile));\r", "-        }\r", "-        catch (IOException ioe) {\r", "-          fail(ioe.getMessage());\r", "-          // let JUnit throw the exception\r", "-        }\r", "-      }\r", "-      \r", "-  }\r", "+  /* Make sure that autoboxing is done appropriately*/", "+  public void testRequiresAutoboxing() {", "+    directory = new File(directory, \"requiresAutoboxing\");", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".dj0\");", "+      }});", "+", "+      LanguageLevelConverter llc14 = new LanguageLevelConverter();", "+      LanguageLevelConverter llc5 = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      ", "+      for (int i = 0; i<testFiles.length; i++) {", "+        result = llc14.convert(new File[]{testFiles[i]}, new Options(JavaVersion.JAVA_1_4, IterUtil.<File>empty()));", "+        assertTrue(\"should be parse exceptions or visitor exceptions\", !result.getFirst().isEmpty() || !result.getSecond().isEmpty());", "+      }", "+      ", "+      result = llc5.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+", "+      /**Now make sure that the resulting java files are correct.*/", "+      for(int i = 0; i < testFiles.length; i++) {", "+        File currFile = testFiles[i];", "+        String fileName = currFile.getAbsolutePath();", "+        fileName = fileName.substring(0, fileName.length() -4);", "+        File resultingFile = new File(fileName + \".java\");", "+        File correctFile = new File(fileName + \".expected\");", "+        ", "+        try {", "+        assertEquals(\"File \" + currFile.getName() + \" should have been parsed and augmented correctly.\",", "+                     IOUtil.toString(correctFile),", "+                     IOUtil.toString(resultingFile));", "+        }", "+        catch (IOException ioe) {", "+          fail(ioe.getMessage());", "+          // let JUnit throw the exception", "+        }", "+      }", "+      ", "+  }"]}], "num": 5470}
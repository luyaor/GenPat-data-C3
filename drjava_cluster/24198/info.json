{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2355a34bbd200d776a5ba9313c31afa3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "431e5667c6414801a54ebdd3b452f965", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "          public void testForClassImportStatement()", "signatureAfterChange": "          public void testForClassImportStatement()", "diff": ["-        new Word(SourceInfo.NO_INFO, \"alpha\"),", "-        new Word(SourceInfo.NO_INFO, \"beta\")};", "-      CompoundWord cw = new CompoundWord(SourceInfo.NO_INFO, words);", "-      ClassImportStatement cis = new ClassImportStatement(SourceInfo.NO_INFO, cw);", "+        new Word(NONE, \"alpha\"),", "+        new Word(NONE, \"beta\")};", "+      CompoundWord cw = new CompoundWord(NONE, words);", "+      ClassImportStatement cis = new ClassImportStatement(NONE, cw);", "-      assertEquals(\"The error message should be correct\", \"The class alpha.beta is not in the right package. Perhaps you meant to package it?\", errors.get(0).getFirst());", "-      ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The class alpha.beta is not in the right package. Perhaps you meant to package it?\", ", "+                   errors.get(0).getFirst()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9297f1ff1d3420ce17ee7b4b80136394", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "         public void testforValueReturnStatementOnly()", "signatureAfterChange": "         public void testforValueReturnStatementOnly()", "diff": ["-      BracedBody bb1 = new BracedBody(SourceInfo.NO_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "-                                                                                 new BooleanLiteral(SourceInfo.NO_INFO, true))});", "+      BodyItemI[] bis = ", "+        new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "+                                                   new BooleanLiteral(SourceInfo.NO_INFO, true))};", "+      BracedBody bb1 = new BracedBody(SourceInfo.NO_INFO, bis);", "-      assertEquals(\"Error message should be correct\", \"You cannot return a value from a class's constructor\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"You cannot return a value from a class's constructor\", ", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8b96d0e98f784a1d78ec0f61be8eca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "          public void testForInnerInterfaceDef()", "signatureAfterChange": "          public void testForInnerInterfaceDef()", "diff": ["-      InnerInterfaceDef iid = new InnerInterfaceDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Broken\"),", "-                                                    new TypeParameter[0], new ReferenceType[0], ", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "-      ", "+      InnerInterfaceDef iid = ", "+        new InnerInterfaceDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Broken\"),", "+                              new TypeParameter[0], new ReferenceType[0], ", "+                              new BracedBody(NO_INFO, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"Inner interface declarations cannot appear here\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"The error message should be correct\", \"Inner interface declarations cannot appear here\",", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddefbf5083cdcd9f87af4ae3dbd00987", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "               public void testForBooleanExpressionOnly()", "signatureAfterChange": "               public void testForBooleanExpressionOnly()", "diff": ["-      BooleanExpression be = new OrExpression(SourceInfo.NO_INFO, new BooleanLiteral(SourceInfo.NO_INFO, true), new BooleanLiteral(SourceInfo.NO_INFO, false));", "+      BooleanExpression be = new OrExpression(SourceInfo.NONE, new BooleanLiteral(SourceInfo.NONE, true), new BooleanLiteral(SourceInfo.NONE, false));", "-      assertEquals(\"The error message should be correct\", \"The right side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The right side of this expression is not a boolean value.  Therefore, you cannot apply a Boolean Operator (&&, ||) to it\", errors.getLast().getFirst());"]}], "num": 24198}
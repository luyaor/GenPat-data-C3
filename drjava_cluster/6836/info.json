{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2d6dd3565abd9b9b4cf485e4a767755", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b6ecc590732e8003e0b4b3d8c5524d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void testSimpleAnonymousClassInstantiationHelper()", "signatureAfterChange": "          public void testSimpleAnonymousClassInstantiationHelper()", "diff": ["-     SimpleAnonymousClassInstantiation basic = ", "-       new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                             new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                             new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-     _iv._package = \"i.like\";", "-     _iv.simpleAnonymousClassInstantiationHelper(basic, _sd1);", "-     assertEquals(\"There should be no errors\", 0, errors.size());", "-     SymbolData obj = symbolTable.get(\"java.lang.Object\");", "-     assertNotNull(\"Object should be in the symbol table\", obj);", "-     assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "-     SymbolData inner = _sd1.getInnerClasses().get(0);", "-     assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "-     assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "-     assertEquals(\"The inner class should have proper super class\", obj, inner.getSuperClass());", "-     assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "-     assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());", "+      SimpleAnonymousClassInstantiation basic = ", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      _iv._package = \"i.like\";", "+      _iv.simpleAnonymousClassInstantiationHelper(basic, _sd1);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+      assertNotNull(\"Object should be in the symbol table\", obj);", "+      assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "+      SymbolData inner = _sd1.getInnerClasses().get(0);", "+      assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "+      assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "+      assertEquals(\"The inner class should have proper super class\", obj, inner.getSuperClass());", "+      assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "+      assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06e472afed19b8a217533dad1c3acc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 91, "signatureBeforeChange": "          public void setUp()", "signatureAfterChange": "          public void setUp()", "diff": ["-      _classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+      _llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();"]}], "num": 6836}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fea81d11e9cc2a656fdd9228f4e49d5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16a9a2814828cffa18eccc32b3904960", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "98f0c27d2704f53c27c12dba8736793eeeac44cf", "commitAfterChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-      if (!_isChanging) {", "-        // set tooltip", "-        String tooltip = null;", "-        if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "-          if (leaf) {", "-            DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "-            if (node.getUserObject() instanceof RegionTreeUserObj) {", "-              @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "+      // set tooltip", "+      String tooltip = null;", "+      if (DrJava.getConfig().getSetting(OptionConstants.SHOW_CODE_PREVIEW_POPUPS).booleanValue()) {", "+        if (leaf) {", "+          DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "+          if (node.getUserObject() instanceof RegionTreeUserObj) {", "+            @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>)(node.getUserObject())).region();", "+            ", "+            OpenDefinitionsDocument doc = r.getDocument();", "+            doc.acquireReadLock();", "+            try {", "+              int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "+              int startOffset = doc.getOffset(lnr - 3);", "+              if (startOffset<0) { startOffset = 0; }", "+              int endOffset = doc.getOffset(lnr + 3);", "+              if (endOffset<0) { endOffset = doc.getLength() - 1; }", "-              OpenDefinitionsDocument doc = r.getDocument();", "-              doc.acquireReadLock();", "-              try {", "-                int lnr = doc.getLineOfOffset(r.getStartOffset())+1;", "-                int startOffset = doc.getOffset(lnr - 3);", "-                if (startOffset<0) { startOffset = 0; }", "-                int endOffset = doc.getOffset(lnr + 3);", "-                if (endOffset<0) { endOffset = doc.getLength() - 1; }", "-                ", "-                // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "-                String s = doc.getText(startOffset, endOffset-startOffset);", "-                ", "-                // this highlights the actual region in red", "-                int rStart = r.getStartOffset()-startOffset;", "-                if (rStart<0) { rStart = 0; }", "-                int rEnd = r.getEndOffset()-startOffset;", "-                if (rEnd>s.length()) { rEnd = s.length(); }", "-                if ((rStart<=s.length()) && (rEnd>=rStart)) {", "-                  String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "-                  String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "-                  String t3 = StringOps.encodeHTML(s.substring(rEnd));", "-                  s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "-                }", "-                else {", "-                  s = StringOps.encodeHTML(s);", "-                }", "-                tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+              String s = doc.getText(startOffset, endOffset-startOffset);", "+              ", "+              // this highlights the actual region in red", "+              int rStart = r.getStartOffset()-startOffset;", "+              if (rStart<0) { rStart = 0; }", "+              int rEnd = r.getEndOffset()-startOffset;", "+              if (rEnd>s.length()) { rEnd = s.length(); }", "+              if ((rStart<=s.length()) && (rEnd>=rStart)) {", "+                String t1 = StringOps.encodeHTML(s.substring(0,rStart));", "+                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "-              catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "-              finally { doc.releaseReadLock(); }", "-              setText(node.getUserObject().toString());", "-              renderer = this;", "+              else {", "+                s = StringOps.encodeHTML(s);", "+              }", "+              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "+            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+            finally { doc.releaseReadLock(); }", "+            setText(node.getUserObject().toString());", "+            renderer = this;", "-        setToolTipText(tooltip);", "+      setToolTipText(tooltip);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e9ffab05b3459f1b1a7694d247db9a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 796, "methodNumberAfterChange": 804, "signatureBeforeChange": "   private void _showAutoImportDialog(String s)", "signatureAfterChange": "   private void _showAutoImportDialog(final String s)", "diff": ["-  private void _showAutoImportDialog(String s) {", "-    Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "-    if (apiSet == null) return;", "+  private void _showAutoImportDialog(final String s) {", "+    hourglassOn();", "+    new Thread() {", "+      public void run() {", "+        // run this in a thread other than the main thread        ", "+        final Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "+        if (apiSet == null) {", "+          hourglassOff();", "+          return;", "+        }", "-    List<JavaAPIListEntry> autoImportList = new ArrayList<JavaAPIListEntry>(apiSet);", "-    if (DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue() &&", "-        _autoImportClassSet.size() > 0) {", "-      autoImportList.addAll(_autoImportClassSet);", "-    }", "-    else {", "-      File projectRoot = _model.getProjectRoot();", "-      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-      if (docs != null) {", "-        for (OpenDefinitionsDocument d: docs) {", "-          if (d.isUntitled()) continue;", "-          try {", "-            String rel = FileOps.stringMakeRelativeTo(d.getRawFile(), projectRoot);", "-            String full = rel.replace(File.separatorChar, '.');", "-            for (String ext: edu.rice.cs.drjava.model.compiler.CompilerModel.EXTENSIONS) {", "-              if (full.endsWith(ext)) {", "-                full = full.substring(0, full.lastIndexOf(ext));", "-                break;", "+        Utilities.invokeLater(new Runnable() {", "+          public void run() {", "+            // but now run this in the event thread again", "+            List<JavaAPIListEntry> autoImportList = new ArrayList<JavaAPIListEntry>(apiSet);", "+            if (DrJava.getConfig().getSetting(DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue() &&", "+                _autoImportClassSet.size() > 0) {", "+              autoImportList.addAll(_autoImportClassSet);", "+            }", "+            else {", "+              File projectRoot = _model.getProjectRoot();", "+              List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+              if (docs != null) {", "+                for (OpenDefinitionsDocument d: docs) {", "+                  if (d.isUntitled()) continue;", "+                  try {", "+                    String rel = FileOps.stringMakeRelativeTo(d.getRawFile(), projectRoot);", "+                    String full = rel.replace(File.separatorChar, '.');", "+                    for (String ext: edu.rice.cs.drjava.model.compiler.CompilerModel.EXTENSIONS) {", "+                      if (full.endsWith(ext)) {", "+                        full = full.substring(0, full.lastIndexOf(ext));", "+                        break;", "+                      }", "+                    }", "+                    String simple = full;", "+                    if (simple.lastIndexOf('.') >= 0) simple = simple.substring(simple.lastIndexOf('.') + 1);", "+                    ", "+                    JavaAPIListEntry entry = new JavaAPIListEntry(simple, full, null);", "+                    if (! autoImportList.contains(entry)) { autoImportList.add(entry); }", "+                  }", "+                  catch(IOException ioe) { /* ignore, just don't add this one */ }", "+                  catch(SecurityException se) { /* ignore, just don't add this one */ }", "+                }", "-            String simple = full;", "-            if (simple.lastIndexOf('.') >= 0) simple = simple.substring(simple.lastIndexOf('.') + 1);", "-            ", "-            JavaAPIListEntry entry = new JavaAPIListEntry(simple, full, null);", "-            if (! autoImportList.contains(entry)) { autoImportList.add(entry); }", "+            PredictiveInputModel<JavaAPIListEntry> pim =", "+              new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), autoImportList);", "+            pim.setMask(s);", "+            _initAutoImportDialog();", "+            _autoImportDialog.setModel(true, pim); // ignore case", "+            _autoImportPackageCheckbox.setSelected(false);", "+            _autoImportDialog.setVisible(true);", "-          catch(IOException ioe) { /* ignore, just don't add this one */ }", "-          catch(SecurityException se) { /* ignore, just don't add this one */ }", "-        }", "+        });", "-    }", "-    PredictiveInputModel<JavaAPIListEntry> pim =", "-      new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), autoImportList);", "-    pim.setMask(s);", "-    _initAutoImportDialog();", "-    _autoImportDialog.setModel(true, pim); // ignore case", "-    hourglassOn();", "-    _autoImportPackageCheckbox.setSelected(false);", "-    _autoImportDialog.setVisible(true);", "+    }.start();"]}], "num": 21244}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c15eb20d4b145ddc567b845137311fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e21d30227d614d6d611e9eacf18df8a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */", "+    */", "-    if (left_result == null || right_result == null) {return null;}", "+    if (left_result == null || right_result == null) return null;", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "-      return null;", "-    }", "-", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) return null;", "-    if (left_result.getSymbolData().isPrimitiveType() || right_result.getSymbolData().isPrimitiveType()) {", "-      if (!((left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion()) &&", "-             right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-            (left_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())", "-               && right_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())))) {", "-        _addError(\"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type \" + left_result.getName() + \" and \" + right_result.getName(), that);", "+    SymbolData left = left_result.getSymbolData();", "+    SymbolData right = right_result.getSymbolData();", "+    if (left.isPrimitiveType() || right.isPrimitiveType()) {", "+      if (!((left.isNumberType(JAVA_VERSION) &&", "+             right.isNumberType(JAVA_VERSION)) ||", "+            (left.isAssignableTo(SymbolData.BOOLEAN_TYPE, JAVA_VERSION)", "+               && right.isAssignableTo(SymbolData.BOOLEAN_TYPE, JAVA_VERSION)))) {", "+        _addError(\"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they \" + ", "+                  \"must either both be number types or both be boolean types.  You have specified expressions with type \" +", "+                  left_result.getName() + \" and \" + right_result.getName(), that);", "-    assertInstanceType(left_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the left side\", that);", "-    assertInstanceType(right_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the right side\", that);", "+    assertInstanceType(left_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  \" +", "+                       \"Instead, you have referenced a type name on the left side\", that);", "+    assertInstanceType(right_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  \" + ", "+                       \"Instead, you have referenced a type name on the right side\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fc3b8dce1a9211d19cd89e37c2eebda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public TypeData forPlusExpressionOnly(PlusExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forPlusExpressionOnly(PlusExpression that, TypeData left_result, TypeData right_result)", "diff": ["-    if (left_result.getSymbolData().isAssignableTo(string, LanguageLevelConverter.OPT.javaVersion()) ||", "-        right_result.getSymbolData().isAssignableTo(string, LanguageLevelConverter.OPT.javaVersion())) {", "+    if (left_result.getSymbolData().isAssignableTo(string, JAVA_VERSION) ||", "+        right_result.getSymbolData().isAssignableTo(string, JAVA_VERSION)) {", "-      assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "-      assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "+      assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, \" + ", "+                         \"but you have specified a type name\", that);", "+      assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, \" + ", "+                         \"but you have specified a type name\", that);", "-      if (!left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion()) ||", "-          !right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"The arguments to the Plus Operator (+) must either include an instance of a String or both be numbers.  You have specified arguments of type \" + left_result.getName() + \" and \" + right_result.getName(), that);", "+      if (!left_result.getSymbolData().isNumberType(JAVA_VERSION) ||", "+          !right_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+        _addError(\"The arguments to the Plus Operator (+) must either include an instance of a String or both be\" + ", "+                  \" numbers.  You have specified arguments of type \" + left_result.getName() + \" and \" + ", "+                  right_result.getName(), that);", "-        assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "-        assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name\", that);", "+        assertInstanceType(left_result, \"The arguments to the Plus Operator (+) must both be instances, but you have\" + ", "+                           \" specified a type name\", that);", "+        assertInstanceType(right_result, \"The arguments to the Plus Operator (+) must both be instances, but you have\" + ", "+                           \" specified a type name\", that);"]}], "num": 12304}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f77fa35adac9a0f9c3919228cdddd3c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5bb2815c7bdffe5efbb2fe18251d9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean mapInsert(KeyStroke ks, Action a)", "signatureAfterChange": "   private boolean shouldUpdate(KeyStroke ks, Action a)", "diff": ["-  public boolean mapInsert(KeyStroke ks, Action a) {", "+  //precondition ks != KeyStrokeOption.NULL_KEYSTROKE", "+  private boolean shouldUpdate(KeyStroke ks, Action a) {", "+      /*", "-      if (!_keyToActionMap.containsKey(ks) ) { ", "+      */", "+      if (!_keyToDataMap.containsKey(ks) ) { ", "-        _keyToActionMap.put(ks, a);", "+        //_keyToActionMap.put(ks, a);", "+        //need to update map", "+        //KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(a);", "+        //data.setKeyStroke(ks);", "+        //_keyToDataMap.put(ks,data);", "+        ", "-      else if (_keyToActionMap.get(ks).equals(a)) { ", "+      else if (((KeyStrokeData)_keyToDataMap.get(ks)).getAction().equals(a)) { ", "+        KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(ks);", "-        Action oldA = (Action) _keyToActionMap.get(ks);", "-        String text = key + \" is already assigned to \" + _actionToNameMap.get(oldA) + ", "-          \". Would you like to assign \" + key + \" to \" + _actionToNameMap.get(a) + \"?\";", "+        KeyStrokeData newKSD = (KeyStrokeData)_actionToDataMap.get(a);", "+        String text = \"\\\"\"+ key +\"\\\"\" + \" is already assigned to \\\"\" + conflictKSD.getName() + ", "+          \"\\\".\\nWould you like to assign \\\"\" + key + \"\\\" to \\\"\" + newKSD.getName() + \"\\\"?\";", "-            _keyToActionMap.remove(ks);", "-            _keyToActionMap.put(ks,a);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b81337f2462bd341a40c39e954fdd4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "1824c23d7190107a20690dc4a2840a5d74f14a93", "commitAfterChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 62, "signatureBeforeChange": "   protected static boolean _isReversteStartOfComment(String text, int pos)", "signatureAfterChange": "   public BraceInfo getEnclosingBrace()", "diff": ["-    */", "-  protected static boolean _isReversteStartOfComment(String text, int pos) {", "-    char currChar = text.charAt(pos);", "-    if ((currChar == '/')||(currChar == '*')) {", "-      try {", "-        char beforeCurrChar = text.charAt(pos - 1);", "-        if (beforeCurrChar == '/')  return true;", "-      } catch (StringIndexOutOfBoundsException e) { /* do nothing */ }", "-    }", "-    return false;", "-  }", "+  /** Cached version of _reduced.getEnclosingBrace().  Assumes that read lock and reduced lock are already held. */", "+  public BraceInfo getEnclosingBrace() {", "+    int pos = _currentLocation;", "+    // Check cache", "+    final Query key = new Query.EnclosingBrace(pos);", "+    final BraceInfo cached = (BraceInfo) _checkCache(key);", "+    if (cached != null) return cached;", "+    BraceInfo b = _reduced.getEnclosingBrace();", "+    _storeInCache(key, b, pos - 1);", "+    return b;", "+  }"]}], "num": 13748}
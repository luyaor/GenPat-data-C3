{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff520be22b12ad33b87c0cdb96e3582b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26b33e977f658dbb7551d0942c0f2050", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "1acb63fa1c578959b54f9766299c6e0a8865f601", "commitAfterChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public static LinkedList<String> packageExplore(String prefix, File root)", "signatureAfterChange": "   public static LinkedList<String> packageExplore(String prefix, File root)", "diff": ["-    //This set makes sure we don't get caught in a loop if the filesystem has symbolic links", "-    //that form a circle by tracking the directories we have already explored", "+    // This set makes sure we don't get caught in a loop if the filesystem has symbolic links", "+    // that form a circle by tracking the directories we have already explored", "-    //This filter allows only directories, and accepts each directory", "-    //only once", "+    // This filter allows only directories, and accepts each directory only once", "-    //Explore each directory, adding (unique) subdirectories to the", "-    //working list.  If a directory has .java files, add the associated", "-    //package to the list of packages", "-    while (!working.empty()){", "+    // Explore each directory, adding (unique) subdirectories to the working list.  If a directory has .java ", "+    // files, add the associated package to the list of packages", "+    while (! working.empty()) {", "-      for(int a = 0; a < subDirectories.length; a++){", "-        File dir = subDirectories[a];", "+      for (File dir: subDirectories) {", "-        if (current.prefix.equals(\"\")){", "-          paf = new PrefixAndFile(dir.getName(), dir);", "-        } else {", "-          paf = new PrefixAndFile(current.prefix + \".\" + dir.getName(), dir);", "-        }", "+        if (current.prefix.equals(\"\")) paf = new PrefixAndFile(dir.getName(), dir);", "+        else  paf = new PrefixAndFile(current.prefix + \".\" + dir.getName(), dir);", "-      if (javaFiles.length != 0 && !current.prefix.equals(\"\")){", "+      if (javaFiles.length != 0 && !current.prefix.equals(\"\")) {", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48ad225b7ca30c48f05eca2cd80dd7a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "fbab2bd705dc6109a68454696cb8f397eb070aa2", "commitAfterChange": "f36b72faed8290534c0d76809ee0a1b473552163", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-  boolean applyRule(AbstractDJDocument doc, int reason)", "-  {", "+  boolean applyRule(AbstractDJDocument doc, int reason) {", "-    ", "-      for (int i=0; i<_prefix.length; i++) {", "-        char prefix = _prefix[i];", "-        if (c == prefix) {", "-          return true;", "-        } ", "-      }", "+      for (char pchar: _prefix) if (c == pchar) return true;"]}], "num": 25963}
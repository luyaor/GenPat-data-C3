{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53f41b11cac8b8e29d6082fdc9e43943", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44362c156f08d3f6354eeea94c650cc9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e8f48651b4fb31b2a1907635fbd654b3f66a98b2", "commitAfterChange": "2499b0018a7f137bb1baaaf2d077c26486e3f12e", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 138, "signatureBeforeChange": "   private void _openProjectHelper(File projectFile)", "signatureAfterChange": "   private void _openProjectHelper(File projectFile)", "diff": ["-    ", "-    /**", "-     * now the model", "-     */", "+    File[] projectFiles = _model.getProjectFiles();", "-    ", "-    /**", "-     * close all project files", "-     */", "-//    for(OpenDefinitionsDocument d: projDocs){", "-//      _model.closeFile(d);", "-//    }", "-      ", "-    closeFiles(projDocs);", "-//    nav.clear();", "-//    for(OpenDefinitionsDocument d: nonProjDocs){", "-//      System.err.println(\"adding\" + d);", "-//      try{", "-//        /* transfer docs with files to new navigator */", "-//        nav.addDocument(_model.getIDocGivenODD(d), d.getFile().getParentFile().getAbsolutePath());", "-//      }catch(IllegalStateException e){", "-//        /* transfer untitled docs to new navigator */", "-//        nav.addDocument(_model.getIDocGivenODD(d));", "-//      }catch(FileMovedException e){", "-//        /* if the file has moved or been deleted,", "-//         * then add it to external files, since it's", "-//         * \"no longer in the project directory\"", "-//         */", "-//        nav.addDocument(_model.getIDocGivenODD(d));", "-//      }", "-//    }", "+    // close all project files", "+    List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "+    for(OpenDefinitionsDocument d: projDocs){", "+      if(d.isProjectFile()){", "+        docsToClose.add(d);", "+      }else{", "+        try{", "+          nav.refreshDocument(_model.getIDocGivenODD(d), d.getFile().getParentFile().getCanonicalPath());", "+        }catch(IOException e){", "+          // noop", "+        }", "+      }", "+    }", "+", "+    closeFiles(docsToClose);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e565647a23202dc94e279c79310e2798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void _rawCompile(File[] sourceRoots, File[] files, File[] excludedFiles) throws IOException", "signatureAfterChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "diff": ["+  /** Compile the given documents. */", "+  private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException {", "+    for (OpenDefinitionsDocument doc : docs) {", "+        File f = doc.getFile();", "+        // Check for null in case the file is untitled (not sure this is the correct check)", "+        if (f != null) { filesToCompile.add(f); }", "-  ", "-  private void _rawCompile(File[] sourceRoots, File[] files, File[] excludedFiles) throws IOException {", "-    ", "-//    Utilities.show(\"_rawCompile(\" + Arrays.toString(sourceRoots) + \", \" + ", "-//                   Arrays.toString(files) + \", \" + Arrays.toString(excludedFiles) + \")\");", "-//    System.err.println(\"sourceRoots are: \" + Arrays.toString(sourceRoots));", "-//    System.err.println(\"sourceFiles are: \" + Arrays.toString(files));", "-//    System.err.println(\"BuildDir is: \" + buildDir);", "-    ", "-    try {", "-      // Compile the files", "-      _compileFiles(sourceRoots, files, buildDir);", "-    }", "+    try { _compileFiles(filesToCompile, buildDir); }", "-      CompilerError[] errors = new CompilerError[] { err };", "-      _distributeErrors(errors);", "+      _distributeErrors(Arrays.asList(err));"]}], "num": 24401}
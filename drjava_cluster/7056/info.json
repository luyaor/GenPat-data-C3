{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6437c7fd65d108d45bd65cc9fce90689", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f80eac1e466508ba1a86664567fb710", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "1c36c4f5a2718b62938a20268edf5b2f24819a2b", "commitAfterChange": "25faf15b00b7a598b085089c43f0beac765b2716", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["-    try { return new ProcessTaskController<Remote>(jvmBuilder, DIRECT_EXECUTOR, task, onExit).get(); }", "+    // no need to spawn a thread if we don't need to wait for the process to quit", "+    Executor exec = (onExit == null) ? DIRECT_EXECUTOR : THREAD_EXECUTOR;", "+    try { return new ProcessTaskController<Remote>(jvmBuilder, exec, task, onExit).get(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4701d8f562cf95e4e83045b3a216c959", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerProxy.java", "commitBeforeChange": "8c2314b5dfceee12617fb14cefef6ab6a1e38ab8", "commitAfterChange": "d49cbdbddda87e8c405e1611614405c2c7bd203d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "diff": ["-    return _realCompiler.compile(sourceRoot, files);", "+    CompilerError[] ret =  _realCompiler.compile(sourceRoot, files);", "+    _recreateCompiler();", "+    return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a9e3652f3834235506ccb4516b30d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "e1cae1f7b6aae460aab41e86b032251abb119211", "commitAfterChange": "d1929cdbc61164d9dd0af29defc1992f3c759cb6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "diff": ["-//    System.err.println(\"Removing ODD \" + doc + \" in \" + this);", "+//    System.err.println(\"Removing regions from ODD \" + doc + \" in \" + this);", "+//    System.err.println(\"_documents = \" + _documents);", "+//    System.err.println(\"ODD \" + doc + \" exists in \" + this);", "-//      System.err.println(\"Removing document regions for \" + doc + \" in \" + this);", "-      // The following ugly line of code is dictated by the \"fail fast\" semantics of Java iterators", "-      while (! regions.isEmpty()) regions.remove(regions.first());", "+//      System.err.println(\"Before removal, regions = \" + regions);", "+      // The following ugly loop is dictated by the \"fail fast\" semantics of Java iterators", "+      while (! regions.isEmpty()) {", "+        R r = regions.first();", "+        regions.remove(r);  ", "+        _notifyRegionRemoved(r);", "+      }", "+//      System.err.println(\"After removal, regions = \" + regions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fd979f7b63b7c8e9d747595a645986", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "4e55340834f8e6032cf1387752575fd19cb935fe", "commitAfterChange": "de413eda4232899a577fad80816630301e25a4de", "methodNumberBeforeChange": 697, "methodNumberAfterChange": 697, "signatureBeforeChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "signatureAfterChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "diff": ["-            _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);  // interactions, console always shown", "+            Icon icon = (c instanceof FindResultsPanel) ? FIND_ICON : null;", "+            _tabbedPane.insertTab(tp.getName(), icon, tp, null, numVisible + 2);  // interactions, console always shown"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8914d4ef8606600054c3b81084a5f54", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "c05ac2d48bb80dc65372963918fd5adaf608e0fe", "commitAfterChange": "344e9873c99b5d6c091b8e9d7277e515b117d21d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "diff": ["-    return compilerLog.getErrors();", "+    CompilerError[] errors = compilerLog.getErrors();", "+", "+    // null out things to not keep pointers to dead data", "+    compiler = null;", "+    compilerLog = null;", "+    return errors;"]}], "num": 7056}
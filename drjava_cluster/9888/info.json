{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b1069c1d6e404da61651fb6af5dd5fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "831132eabf3cda2a4d48935bd17492fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData value_result)", "signatureAfterChange": "   public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData valueRes)", "diff": ["-  public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData value_result) {", "+  public TypeData forValueReturnStatementOnly(ValueReturnStatement that, TypeData valueRes) {", "-      return value_result;", "+      return valueRes;", "-    if (value_result == null || ! assertFound(value_result, that)) { ", "+    if (valueRes == null || ! assertFound(valueRes, that)) { ", "-    if (value_result != null && !value_result.isInstanceType()) {", "-     _addError(\"You cannot return a class or interface name.  Perhaps you meant to say \" + value_result.getName() +", "+    if (valueRes != null && !valueRes.isInstanceType()) {", "+     _addError(\"You cannot return a class or interface name.  Perhaps you meant to say \" + valueRes.getName() +", "-     return value_result.getInstanceData();", "+     return valueRes.getInstanceData();", "-    else if (!_isAssignableFrom(expected, value_result.getSymbolData())) {", "+    else if (!_isAssignableFrom(expected, valueRes.getSymbolData())) {", "-                  + \" but here returned type: \" + '\"' + value_result.getName() + '\"', ", "+                  + \" but here returned type: \" + '\"' + valueRes.getName() + '\"', ", "-    return value_result;", "+    return valueRes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb78d12d5dd6dc3addb5f68be3cdc17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData valueRes)", "diff": ["-  public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result) {", "-    if (value_result == null) {return null;}", "+  public TypeData forNotExpressionOnly(NotExpression that, TypeData valueRes) {", "+    if (valueRes == null) {return null;}", "-    if (!assertFound(value_result, that)) {", "+    if (!assertFound(valueRes, that)) {", "-    if (assertInstanceType(value_result, ", "-                           \"You cannot use the not (!) operator with \" + value_result.getName() + ", "+    if (assertInstanceType(valueRes, ", "+                           \"You cannot use the not (!) operator with \" + valueRes.getName() + ", "-        ! value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, ", "+        ! valueRes.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, ", "-      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + ", "+      _addError(\"You cannot use the not (!) operator with something of type \" + valueRes.getName() + "]}], "num": 9888}
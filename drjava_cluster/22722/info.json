{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9e5d6c7007a705eb0e7c258ef00fe9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49b9c504d2abeffa7b8efe95411e25a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object visit(TypeExpression node)", "signatureAfterChange": "     public Object visit(TypeExpression node)", "diff": ["-      node.setType((ReferenceType)((Type)node.getType().acceptVisitor(this)));", "+      // For some reason, the setType expression in node only takes in", "+      // ReferenceTypes so we have to create a new TypeExpression in", "+      // case the visitor returns a PrimitiveType (e.g. int.class used", "+      // to cause a ClassCastException).", "+      node = new TypeExpression((Type)node.getType().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c56f4482c3106e1b89f0a3d1091a9843", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void setFindWord(String word)", "signatureAfterChange": "   public void setFindWord(String word)", "diff": ["+   */", "+  public void setFindWord(String word) { _findWord = word; }", "-    */", "-    public void setFindWord(String word) { _state.setFindWord(word); }"]}], "num": 22722}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93762d43b7888433a598c8e88c94870f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3334a583eab6230f0fed47ffd8b68bfe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Void forInnerInterfaceDefDoFirst(InnerInterfaceDef that)", "signatureAfterChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name)", "diff": ["+    */", "+  protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name) {", "+    System.err.println(\"Processing InnerInterfaceDef for \" + name);", "+    forInnerInterfaceDefDoFirst(that);", "+    if (prune(that)) return;", "+    ", "+    that.getMav().visit(this);", "+    that.getName().visit(this);", "+    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    for (int i = 0; i < that.getInterfaces().length; i++) that.getInterfaces()[i].visit(this);", "+    ", "+    SymbolData sd = defineInnerSymbolData(that, name, data);", "+    if (sd != null) {", "+      ", "+      that.getBody().visit(new InterfaceBodyIntermediateVisitor(sd, ", "+                                                                _file, ", "+                                                                _package,", "+                                                                _importedFiles, ", "+                                                                _importedPackages,", "+                                                                _classNamesInThisFile, ", "+                                                                continuations));", "+    }", "+    ", "+    forInnerInterfaceDefOnly(that);", "-  /**Do not allow inner interfaces at the Intermediate Level.*/", "-    public Void forInnerInterfaceDefDoFirst(InnerInterfaceDef that) {", "-    _addError(\"Nested interfaces cannot be used at the Intermediate level\", that);", "-    return null;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca9f66dbaf0db414c32d3ffd134324aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String relName, String name)", "diff": ["-  protected void handleInnerClassDef(InnerClassDef that, Data data, String name) {", "+  protected void handleInnerClassDef(InnerClassDef that, Data data, String relName, String name) {", "+    System.err.println(\"Processing InnerClassDef for \" + name + \" defined in \" + data.getName());", "+    ", "+    assert (data instanceof SymbolData) || (data instanceof MethodData);", "+//    assert (data instanceof SymbolData) ? data.getName().equals(_enclosingClassName) : true;", "+    ", "-    SymbolData sd = defineInnerSymbolData(that, name, data);", "-    if (sd != null) { //we have a symbol data to work with, so visit the body and augment", "-      that.getBody().visit(new ClassBodyFullJavaVisitor(sd, \"\", _file, _package, _importedFiles,", "-                                                        _importedPackages, _classNamesInThisFile, continuations));", "+    SymbolData sd = defineInnerSymbolData(that, relName, name, data);", "+    if (sd != null) { // We have a symbol data to work with, so visit the body and augment", "+", "+      that.getBody().visit(new ClassBodyFullJavaVisitor(sd, sd.getName(), _file, _package, _importedFiles,", "+                                                        _importedPackages, _classesInThisFile, continuations, fixUps));", "-    // Inner classes are not put into _classesToBeParsed since they are parsed whenever their outer classes are parsed.", "+    // Inner classes are not put into _classesInThisFile since they are parsed whenever their outer classes are parsed."]}], "num": 24435}
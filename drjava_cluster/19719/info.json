{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ae1b73a2d6f18f20ffe3463ecdc8e5e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0545af7d767ce88898047ef2444fb63d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-        throw new InterpreterException(e);", "+        throw new InteractionsException(\"There was a syntax error in the \" +", "+                                        \"previous input.\");", "+        //throw new InterpreterException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb1618c1500d5e16aaf903867a3eba5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e7fa83968a0076b95166203c3ff9a5bddde8dfee", "commitAfterChange": "b2bccf49a3d470addd7a5aec1fd2eaf00accbe3b", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "   @Override public Type visit(ArrayTypeName node)", "signatureAfterChange": "   @Override public Type visit(ArrayTypeName node)", "diff": ["-    return setType(node, new SimpleArrayType(elementType));", "+    Type arrayT = node.isVararg() ? new VarargArrayType(elementType) :", "+                                    new SimpleArrayType(elementType);", "+    return setType(node, arrayT);"]}], "num": 19719}
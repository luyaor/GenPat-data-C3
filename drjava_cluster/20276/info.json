{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25c11d32c8e6dd57e5c29cd3edae154f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ba63cb602b06761f282f3e0c6958d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 482, "methodNumberAfterChange": 485, "signatureBeforeChange": "          public void compileBeforeJUnit()", "signatureAfterChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "diff": ["-    public void compileBeforeJUnit() {", "-      Frame parentFrame = JOptionPane.getFrameForComponent(MainFrame.this);  ", "-      if (parentFrame.isVisible()) { /* invisible when running junit test of this functionality */", "-        final BooleanOption option = ALWAYS_COMPILE_BEFORE_JUNIT;", "-        Utilities.invokeLater(new Runnable() {  ", "+     *  dialog to ask if all open source files should be compiled in order to test the program. */", "+    public void compileBeforeJUnit(final CompilerListener testAfterCompile) {", "+      if (DrJava.getConfig().getSetting(ALWAYS_COMPILE_BEFORE_JUNIT).booleanValue() || ! MainFrame.this.isVisible()) {", "+        // Compile all open source files", "+        _model.getCompilerModel().addListener(testAfterCompile);  // listener removes itself", "+        _compileAll();", "+      }", "+      else { // pop up a window to ask if all open files should be compiled before testing", "+       Utilities.invokeLater(new Runnable() {  ", "-            if (!DrJava.getConfig().getSetting(option).booleanValue()) {", "-              ConfirmCheckBoxDialog dialog =", "-                new ConfirmCheckBoxDialog(MainFrame.this,", "-                                          \"Must Compile All Files to Continue\",", "-                                          \"To unit test all documents, you must first compile all out of sync files.\\n\" + ", "-                                          \"Would you like to compile and then test?\",", "-                                          \"Always compile before testing all files\");", "-              int rc = dialog.show();", "-              ", "-              switch (rc) {", "-                case JOptionPane.YES_OPTION:", "-                  _compileAll();", "-                  // Only remember checkbox if they say yes", "-                  if (dialog.getCheckBoxValue())  DrJava.getConfig().setSetting(option, Boolean.TRUE);", "-                  break;", "-                case JOptionPane.NO_OPTION:", "-                case JOptionPane.CANCEL_OPTION:", "-                case JOptionPane.CLOSED_OPTION:", "-                  // do nothing", "-                  break;", "-                default:", "-                  throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "-              }", "-            }", "-            else {", "-//              Utilities.showDebug(\"calling _compileAll\");", "-              _compileAll();", "-//              Utilities.showDebug(\"returned from _compileAll\");", "+            String title = \"Must Compile All Source Files to Run Unit Tests\";", "+            String msg = \"To unit test all documents, you must first compile all out of sync source files.\\n\" + ", "+              \"Would you like to compile all files and run the specified test?\";", "+            int rc = JOptionPane.showConfirmDialog(MainFrame.this, msg, title, JOptionPane.YES_NO_OPTION); ", "+            ", "+            switch (rc) {", "+              case JOptionPane.YES_OPTION:  // compile all open source files and test", "+                _model.getCompilerModel().addListener(testAfterCompile);  // listener removes itself", "+                _compileAll();", "+                break;", "+              case JOptionPane.NO_OPTION:  // abort unit testing", "+                _model.getJUnitModel().nonTestCase(true);  // cleans up", "+                break;", "+              default:", "+                throw new RuntimeException(\"Invalid returnCode from showConfirmDialog: \" + rc);", "-      else _compileAll();  /* automatically compile if running junit test */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7792bcf144f655d66ff03176600ff0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "commitAfterChange": "97f3497fff8964fcbfb5676986b962bdda4668d8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "      public void write(OutputStream os) throws IOException", "signatureAfterChange": "      public void write(OutputStream os) throws IOException", "diff": ["-    String path = FileOps.makeRelativeTo(_projectRoot, _projectFile).getPath();", "+    String path = FileOps.stringMakeRelativeTo(_projectRoot, _projectFile);", "-    path = FileOps.makeRelativeTo(_workDir, _projectFile).getPath();", "+    path = FileOps.stringMakeRelativeTo(_workDir, _projectFile);", "-      path = FileOps.makeRelativeTo(_buildDir, _projectFile).getPath();", "+      path = FileOps.stringMakeRelativeTo(_buildDir, _projectFile);", "-      path = FileOps.makeRelativeTo(_mainClass, _projectFile).getPath();", "+      path = FileOps.stringMakeRelativeTo(_mainClass, _projectFile);", "-      path = FileOps.makeRelativeTo(_createJarFile, _createJarFile).getPath();", "+      path = FileOps.stringMakeRelativeTo(_createJarFile, _createJarFile);", "-        path = FileOps.makeRelativeTo(df, _projectRoot).getPath();", "+        path = FileOps.stringMakeRelativeTo(df, _projectRoot);", "-        path = FileOps.makeRelativeTo(bp.getFile(), _projectRoot).getPath();", "+        path = FileOps.stringMakeRelativeTo(bp.getFile(), _projectRoot);", "-        path = FileOps.makeRelativeTo(bm.getFile(), _projectRoot).getPath();", "+        path = FileOps.stringMakeRelativeTo(bm.getFile(), _projectRoot);"]}], "num": 20276}
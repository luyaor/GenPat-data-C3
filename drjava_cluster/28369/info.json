{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b756a3e4f5315d5bf61e00c6c468a7d7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97594cd35f5a4d4584c382a739c46572", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachineTest.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "   protected void setUp()", "signatureAfterChange": "   protected void setUp()", "diff": ["-    doc = new PlainDocument();", "-    docPrev = new PlainDocument();", "-    docNext = new PlainDocument();", "-    frm = new FindReplaceMachine(new DocumentIterator() {", "+    _doc = new PlainDocument();", "+    _docPrev = new PlainDocument();", "+    _docNext = new PlainDocument();", "+    _frm = new FindReplaceMachine(new DocumentIterator() {", "-        if (d == doc) {", "-          return docPrev;", "+        if (d == _doc) {", "+          return _docPrev;", "-        else if (d == docPrev) {", "-          return docNext;", "+        else if (d == _docPrev) {", "+          return _docNext;", "-          return doc;", "+          return _doc;", "+", "-        if (d == doc) {", "-          return docNext;", "+        if (d == _doc) {", "+          return _docNext;", "-        else if (d == docPrev) {", "-          return doc;", "+        else if (d == _docPrev) {", "+          return _doc;", "-          return docPrev;", "+          return _docPrev;", "-    frm.setDocument(doc);", "+    _frm.setDocument(_doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3785d035de760f8b8f14d895eb4ea1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "    public boolean isSubClassOf(SymbolData superClass)", "signatureAfterChange": "    public boolean isSubClassOf(SymbolData sd)", "diff": ["-   public boolean isSubClassOf(SymbolData superClass) {", "-    if (superClass == null) return false;", "-    if (this == superClass) return true;", "-    if (superClass.isInterface()) {", "-      Iterator<SymbolData> iter = _interfaces.iterator();", "-      while (iter.hasNext()) {", "-        SymbolData d = iter.next();", "-        if (d == null) {", "-          continue;", "-        }", "-        if (d == superClass) {", "-          return true;", "-        }", "-        if (d.isSubClassOf(superClass)) {", "-          return true;", "-        }", "+   public boolean isSubClassOf(SymbolData sd) {", "+    if (sd == null) return false;", "+    if (this.equals(sd)) return true;", "+    if (sd.isInterface()) {", "+      for (SymbolData i: _interfaces) {", "+        if (i == null) continue;", "+        if (i.equals(sd)) return true;", "+        if (i.isSubClassOf(sd)) return true;", "-    if (_superClass != null) {", "-      return this._superClass.isSubClassOf(superClass);", "-    }", "+    if (_superClass != null) return _superClass.isSubClassOf(sd);"]}], "num": 28369}
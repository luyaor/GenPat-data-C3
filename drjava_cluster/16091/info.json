{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c509d37a4c12996af38fbfca7bec210c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00defd0fb0c240a93185f354b96809f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "0c9c5a75525682387d63b99c765334c10ec1f0a7", "commitAfterChange": "623dbae8bf369adeb4e3b2a78ab2b5a3f4b29e9b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-      if (!_checkInteraction(text)) {", "-        return;", "+      try {", "+//        _checkInteraction(text);", "+        toEval = _interactionsProcessor.preProcess(toEval);", "+", "+        _prepareToInterpret(text);", "+        interpret(toEval);", "-", "-      // there is no return at the end of the last line", "-      // better to put it on now and not later.", "-      _docAppend(_newLine, InteractionsDocument.DEFAULT_STYLE);", "-", "-      _notifyInteractionStarted();", "-", "-      _document.setInProgress(true);", "-      _document.addToHistory(text);", "-", "-      interpret(toEval);", "+      catch (ParseException pe) {", "+        // A ParseException indicates a syntax error in the input window", "+        String errMsg = pe.getInteractionsMessage();", "+//        javax.swing.JOptionPane.showMessageDialog(null, \"ParseException:\\n\" + errMsg);", "+        if (errMsg.endsWith(\"<EOF>\\\"\")) {", "+          _notifier.interactionIncomplete();", "+        }", "+        else {", "+          _prepareToInterpret(text);", "+          replReturnedSyntaxError(errMsg, text, pe.getBeginLine(),", "+                                  pe.getBeginColumn(), pe.getEndLine(), pe.getEndColumn());", "+        }", "+      }", "+      catch (TokenMgrError tme) {", "+        // A TokenMgrError indicates some lexical difficulty with input.", "+//        javax.swing.JOptionPane.showMessageDialog(null, \"TokenMgrError:\\n\" + tme.getMessage());", "+        _prepareToInterpret(text);", "+        int row = tme.getErrorRow();", "+        int col = tme.getErrorColumn() - 1;", "+        replReturnedSyntaxError(tme.getMessage(), text, row, col, row, col);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ccfd1f88bb4876046c31b215ec77b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedSetCurrentThread()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    BreakpointTestListener debugListener = new BreakpointTestListener();", "-   ", "-    // Compile the class", "-    OpenDefinitionsDocument doc = doCompile(SUSPEND_CLASS, tempFile());", "-    _debugger.addListener(debugListener);", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);", "-      _notifierLock.wait();", "-    }", "-    debugListener.assertDebuggerStartedCount(1);", "-    debugListener.assertDebuggerShutdownCount(0);", "-    assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "+     BreakpointTestListener debugListener = new BreakpointTestListener();", "-    int index = SUSPEND_CLASS.indexOf(\"int a = 1;\");", "-    _debugger.toggleBreakpoint(doc,index,5);", "-    ", "-     // Run the main() method, hitting breakpoints", "-    synchronized(_notifierLock) {", "-      interpretIgnoreResult(\"java Suspender\");", "-      _waitForNotifies(3); // suspended, updated, breakpointReached", "-      _notifierLock.wait();", "-    }    ", "-    final DebugThreadData thread = new DebugThreadData(_debugger.getCurrentThread());", "-    synchronized(_notifierLock){", "-      _debugger.resume();", "-      /** _debugger.setCurrentThread(...); ", "-       * must be executed in another thread because otherwise the notifies", "-       * will be received before the _notifierLock is released", "-       */", "-      new Thread() {", "-        public void run(){", "-          doSetCurrentThread(thread);", "-        }", "-      }.start();", "-      _waitForNotifies(2);  // suspended, updated", "-      _notifierLock.wait();", "-    }", "-    // Ensure thread suspended", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "-    ", "-      // Close doc and make sure breakpoints are removed", "-    _model.closeFile(doc);", "-    ", "-    // Shutdown the debugger", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(1);  // shutdown", "-      _notifierLock.wait();", "-    }", "-    ", "-    debugListener.assertDebuggerShutdownCount(1);  //fires", "-    if (printMessages) System.out.println(\"Shut down.\");", "-    _debugger.removeListener(debugListener);", "+     // Compile the class", "+     OpenDefinitionsDocument doc = doCompile(MONKEY_CLASS, tempFile());", "+     _debugger.addListener(debugListener);", "+     // Start debugger", "+     synchronized(_notifierLock) {", "+       _debugger.startup();", "+       _waitForNotifies(1);", "+       _notifierLock.wait();", "+     }", "+     debugListener.assertDebuggerStartedCount(1);", "+     debugListener.assertDebuggerShutdownCount(0);", "+     assertTrue(\"Debug Manager should be ready\", _debugger.isReady());", "+     ", "+     int index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I\\'m a thread! Yeah!\\\");\");", "+     _debugger.toggleBreakpoint(doc,index,11);", "+     index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"James likes bananas!\\\");\");", "+     _debugger.toggleBreakpoint(doc,index,17);", "+     ", "+      // Run the main() method, hitting breakpoints", "+     synchronized(_notifierLock) {", "+       interpretIgnoreResult(\"java Monkey\");", "+       _waitForNotifies(6); // suspended, updated, breakpointReached", "+       _notifierLock.wait();", "+     }    ", "+     DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+     DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+     synchronized(_notifierLock){", "+       _asynchDoSetCurrentThread(threadB);", "+       _waitForNotifies(2);  // updated, interpreterChanged", "+       _notifierLock.wait();", "+     }", "+     ", "+     DebugThreadData thread1 = new DebugThreadData(_debugger.getThreadAt(1));", "+     DebugThreadData thread2 = new DebugThreadData(_debugger.getCurrentThread());", "+     ", "+     /** make sure threads have switched places */", "+     assertTrue(thread1.getUniqueID() == threadA.getUniqueID());", "+     assertTrue(thread2.getUniqueID() == threadB.getUniqueID());", "+     ", "+       // Close doc and make sure breakpoints are removed", "+     _model.closeFile(doc);", "+     ", "+     // Shutdown the debugger", "+     if (printMessages) System.out.println(\"Shutting down...\");", "+     InterpretListener interpretListener = new InterpretListener();", "+     _model.addListener(interpretListener);", "+     synchronized(_notifierLock) {", "+       //_asynchResume();", "+       //_asynchResume();", "+       _debugger.shutdown();", "+       _waitForNotifies(2);  // shutdown, interactionEnded", "+       _notifierLock.wait();", "+     }", "+     ", "+     debugListener.assertDebuggerShutdownCount(1);  //fires", "+     if (printMessages) System.out.println(\"Shut down.\");", "+     _model.removeListener(interpretListener);", "+     _debugger.removeListener(debugListener);"]}], "num": 16091}
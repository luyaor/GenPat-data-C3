{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dca35ce0602e3d58b9717551a3d8b25b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1502c312a40611e65b0c3e02df528b30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public ErrorPanel(SingleDisplayModel model, MainFrame frame, String s)", "signatureAfterChange": "    public ErrorPanel(SingleDisplayModel model, MainFrame frame, String tabString, String labelString)", "diff": ["-  public ErrorPanel(SingleDisplayModel model, MainFrame frame, String s){", "-    super(frame, s);", "+  public ErrorPanel(SingleDisplayModel model, MainFrame frame, String tabString, String labelString){", "+    super(frame, tabString);", "+    ", "+    _mainPanel.setLayout(new BorderLayout());", "+    ", "+    _leftPanel = new JPanel(new BorderLayout());", "+    ", "+    _errorNavPanel = new JPanel(new GridBagLayout());", "+    ", "+    ", "+    /******** Initialize the error navigation buttons ********/", "+    _errorNavButtonsPanel = new JPanel(new BorderLayout());", "+    ", "+    _nextErrorButton = new JButton(MainFrame.getIcon(\"Down16.gif\"));//new JButton(\"Next Error\");", "+    _prevErrorButton = new JButton(MainFrame.getIcon(\"Up16.gif\"));//new JButton(\"Prev Error\");", "+", "+    _nextErrorButton.setMargin(new Insets(0,0,0,0));", "+    _nextErrorButton.setToolTipText(\"Go to the next error\");", "+    _prevErrorButton.setMargin(new Insets(0,0,0,0));", "+    _prevErrorButton.setToolTipText(\"Go to the previous error\");", "+", "+    ", "+//    _errorPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 3)); ", "+//    _errorPanel.setPreferredSize(new Dimension(27,35));", "+//    _errorPanel.add(_prevErrorButton);", "+//    _errorPanel.add(_nextErrorButton);", "+//    _uiBox.add(_errorPanel, BorderLayout.WEST);", "+    _errorNavButtonsPanel.add(_prevErrorButton, BorderLayout.NORTH);", "+    _errorNavButtonsPanel.add(_nextErrorButton, BorderLayout.SOUTH);", "+    _errorNavButtonsPanel.setBorder(new EmptyBorder(18,5,18,5)); // 5 pix padding on sides", "+    ", "+//    JPanel middlePanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0));", "+//    middlePanel.add(_errorNavButtonsPanel);", "+    ", "+    _errorNavPanel.add(_errorNavButtonsPanel);//, BorderLayout.CENTER);", "+    _showHighlightsCheckBox = new JCheckBox( \"Highlight source\", true);", "+    ", "+//    _mainPanel.setMinimumSize(new Dimension(225,60));", "+    // We make the vertical scrollbar always there.", "+    // If we don't, when it pops up it cuts away the right edge of the", "+    // text. Very bad.", "+    _scroller = new BorderlessScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,", "+                                         JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);", "+    ", "+    _leftPanel.add(_scroller, BorderLayout.CENTER);", "+    _leftPanel.add(_errorNavPanel, BorderLayout.EAST);", "+", "+    customPanel = new JPanel(new BorderLayout());", "+    _rightPanel = new JPanel(new BorderLayout());", "+    _rightPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix padding on sides", "+//    uiBox.setBorder(new EmptyBorder(5,0,0,0)); // 5 pix padding on top", "+    _rightPanel.add(new JLabel(labelString, SwingConstants.LEFT), BorderLayout.NORTH);", "+    _rightPanel.add(customPanel, BorderLayout.CENTER);", "+    _rightPanel.add(_showHighlightsCheckBox, BorderLayout.SOUTH);", "+    ", "+    _mainPanel.add(_leftPanel, BorderLayout.CENTER);", "+    _mainPanel.add(_rightPanel, BorderLayout.EAST);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0fb405e03ec6c71b440dc33a4e56e90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public DefinitionsPane(MainFrame mf,                          OpenDefinitionsDocument doc)", "signatureAfterChange": "   public DefinitionsPane(MainFrame mf,                          OpenDefinitionsDocument doc)", "diff": ["+    ", "+    // Start the pane out with the NULL_DOCUMENT so that", "+    // it doesn't start out with a reference to the defdoc", "-    setDocument(_doc);", "+    super.setDocument(NULL_DOCUMENT);", "+    _resetUndo();", "+    ", "-    Keymap ourMap = addKeymap(\"INDENT_KEYMAP\", getKeymap());", "+    ourMap = addKeymap(INDENT_KEYMAP_NAME, getKeymap());", "+    ", "+    OptionListener<Color> temp;", "+    Pair<Option<Color>, OptionListener<Color>> pair;", "+    ", "+        ", "-    new ForegroundColorListener(this);", "-    new BackgroundColorListener(this);", "+    // NOTE: the Foreground/Background listeners add themselves to ", "+    //   DrJava.getConfig() in their own constructors.", "+    //   Rather than refactor it, we decided to work with that ", "+    //   design decision.", "+    temp = new ForegroundColorListener(this);", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEFINITIONS_NORMAL_COLOR,temp);", "+    _colorOptionListeners.add(pair);", "+    ", "+    temp = new BackgroundColorListener(this);", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEFINITIONS_BACKGROUND_COLOR,temp);", "+    _colorOptionListeners.add(pair);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_MATCH_COLOR,", "-                                         new MatchColorOptionListener());", "-    DrJava.getConfig().addOptionListener( OptionConstants.COMPILER_ERROR_COLOR,", "-                                         new ErrorColorOptionListener());", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_BREAKPOINT_COLOR,", "-                                         new BreakpointColorOptionListener());", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_THREAD_COLOR,", "-                                         new ThreadColorOptionListener());", "+    // These listeners do not register themselves in their own constructors.  We do.", "+    temp = new MatchColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEFINITIONS_MATCH_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_MATCH_COLOR, temp);", "+    ", "+    temp = new ErrorColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.COMPILER_ERROR_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.COMPILER_ERROR_COLOR, temp);", "+    ", "+    temp = new BreakpointColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEBUG_BREAKPOINT_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_BREAKPOINT_COLOR, temp);", "+    ", "+    temp = new ThreadColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEBUG_THREAD_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_THREAD_COLOR, temp);", "+", "-      DrJava.getConfig().addOptionListener( OptionConstants.TEXT_ANTIALIAS,", "-                                           new AntiAliasOptionListener());", "+      OptionListener<Boolean> aaTemp = new AntiAliasOptionListener();", "+      Pair<Option<Boolean>, OptionListener<Boolean>> aaPair = new Pair<Option<Boolean>, OptionListener<Boolean>>(OptionConstants.TEXT_ANTIALIAS, aaTemp);", "+      _booleanOptionListeners.add(aaPair);", "+      DrJava.getConfig().addOptionListener( OptionConstants.TEXT_ANTIALIAS, aaTemp);"]}], "num": 4207}
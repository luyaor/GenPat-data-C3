{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19609f8afd09ce6df12ff9fdfb3410ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "607aff60151d86abd1d5005f39d7151a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "commitAfterChange": "a6f0da7db6181f31273ee7bf3cfd92ed3fabb503", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private void _javadocAllWorker(File destDirFile, FileSaveSelector saver,                                  String[] classpath,                                  JavadocListener listener)", "signatureAfterChange": "   private void _javadocAllWorker(File destDirFile, FileSaveSelector saver,                                  String[] classpath,                                  JavadocListener listener)", "diff": ["+    if (!_ensureValidToolsJar(listener)) {", "+      return;", "+    }", "+    ", "-        _showThrowableAsCompilerError(ioe, file, listener);", "+        _showCompilerError(ioe.getMessage(), file, listener);", "-        _showThrowableAsCompilerError(ipe, file, listener);", "+        _showCompilerError(ipe.getMessage(), file, listener);", "-    _runJavadoc(args, classpath, destDirFile, listener);", "+    _runJavadoc(args, classpath, destDirFile, listener, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8164e4dc2b4ed4a5f37010a66322324a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private InterpreterJVMRemoteI _interpreterJVM()", "signatureAfterChange": "   private InterpreterJVMRemoteI _accessInterpreterJVM()", "diff": ["-  /**Accessor for the remote interface to the Interpreter JVM; _slave is protected field of the supserclass. */", "-  private InterpreterJVMRemoteI _interpreterJVM() { return (InterpreterJVMRemoteI) _slave; }", "+  private InterpreterJVMRemoteI _accessInterpreterJVM() {", "+    if (!_restart) { return _interpreterJVM.value(); }", "+    else { return _interpreterJVM.attemptEnsureNotState(null, STARTUP_TIMEOUT); }", "+  }"]}], "num": 13588}
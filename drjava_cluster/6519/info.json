{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40018a11a98294b36f613804d601fefa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e33deeaeca854d6638cb1c767556df2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocumentTest.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStylesListContentAndReset() throws EditDocumentException", "signatureAfterChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "diff": ["+  /** Tests that the styles list is updated and reset properly */", "+  public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException {", "+    /* The banner and the prompt are inserted in the styles list when the document is constructed; the corresponding", "+       offsets are computed in the tests below. ", "+     */", "+    ", "+    final Object _restartLock = new Object();", "+    ", "+    assertEquals(\"StylesList before insert should contain 2 pairs\", 2, _adapter.getStylesList().size());", "+    ", "+    int blen = InteractionsModel.getStartUpBanner().length();", "+    ", "+    /** Elt1, Elt2 are first two elements pushed on the StylesList stack */", "+    String styleElt1 = \"((0, \" + blen + \"), object.return.style)\";", "+    String styleElt2 = \"((\" + blen + \", \" + (blen + 2) + \"), default)\";", "-   */", "-  public void testStylesListContentAndReset() throws EditDocumentException {", "-    // the banner and the prompt are inserted in the styles list when the document is constructed", "-    assertEquals(\"StylesList before insert should contain 2 pairs\",", "-                 2, _adapter.getStylesList().size());", "-", "+    assertEquals(\"The first element pushed on StylesList before insertion should be\", styleElt1,", "+                 _adapter.getStylesList().get(1).toString());", "+    assertEquals(\"The second element pushed on StylesList before insertion should be\", styleElt2,", "+                 _adapter.getStylesList().get(0).toString());", "+    ", "+    ", "+    /* Third element pushed StylesList stack before reset */", "+    String styleElt3 = \"((\" + (blen + 2) + \", \" + (blen + 3) + \"), number.return.style)\";", "-    assertEquals(\"StylesList before reset should contain 3 pairs\",", "-                 3, _adapter.getStylesList().size());", "+    assertEquals(\"StylesList before reset should contain 3 pairs\", 3, _adapter.getStylesList().size());", "+    ", "+    assertEquals(\"The first element pushed on StylesList before reset should be\", styleElt1,", "+                 _adapter.getStylesList().get(2).toString());", "+    assertEquals(\"The second element pushed on StylesList before reset should be\", styleElt2,", "+                 _adapter.getStylesList().get(1).toString());", "+    assertEquals(\"The last element pushed on StylesList before reset should be\", styleElt3,", "+                 _adapter.getStylesList().get(0).toString());", "+    ", "+//    System.err.println(\"Doc text: \" + _adapter.getText());", "+//    System.err.println(\"The styles list is: \" + _adapter.getStylesList());", "+//    System.err.println(\"The length of the startup banner is: \" + InteractionsModel.getStartUpBanner().length());", "+    ", "+    /* Reset interactions and wait until it completes */", "-    assertEquals(\"The first element of StylesList before reset should be\",", "-                 \"((21, 22), number.return.style)\", _adapter.getStylesList().get(0).toString());", "-    assertEquals(\"The second element of StylesList before reset should be\",", "-                 \"((19, 21), default)\", _adapter.getStylesList().get(1).toString());", "-    assertEquals(\"The third element of StylesList before reset should be\",", "-                 \"((0, 19), object.return.style)\", _adapter.getStylesList().get(2).toString());", "-//    System.out.println(_doc); ", "-    synchronized(_model) {", "-      // Reset should clear", "-      _model.setWaitingForFirstInterpreter(false);", "-      //this adds the \"Resetting Interactions\"", "-      _model.resetInterpreter();", "-      Utilities.clearEventQueue();", "-      _model.interpreterResetting();", "-      Utilities.clearEventQueue();", "-//      Utilities.clearEventQueue();", "- ", "-      assertEquals(\"StylesList after reset should contain 1 pair\", 1, _adapter.getStylesList().size());", "-      //Resetting Interactions piece", "-//      int returnNum = System.getProperty(\"line.separator\").length();", "-//      assertEquals(\"The only element of the StylesList after reset should be\",", "-//                   \"((\"+(47+returnNum)+\", \"+(72+returnNum*2)+\"), error)\", _adapter.getStylesList().get(0).toString());", "-      assertTrue(\"The only element of the StylesList after reset should be similar to ((48, 74), error)\",", "-                 _adapter.getStylesList().get(0).toString().matches(\"\\\\(\\\\(4\\\\d, 7\\\\d\\\\)\\\\, error\\\\)\"));", "-    }", "+    InteractionsListener restartCommand = new DummyGlobalModelListener() {", "+      public void interpreterReady(File wd) {", "+        synchronized (_restartLock) {", "+          _interpreterRestarted = true;", "+          _restartLock.notify();", "+        }", "+      }};", "+    _model.addListener(restartCommand);", "+                                   ", "+    // Reset should clear", "+    _model.setWaitingForFirstInterpreter(false);", "+    ", "+    synchronized(_restartLock) { _interpreterRestarted = false; }", "+      ", "+    // Reset the interactions pane, restarting the interpreter", "+    File f = new File(System.getProperty(\"user.dir\"));", "+    _model.resetInterpreter(f);  ", "+", "+    //. Wait until interpreter has restarted", "+    synchronized(_restartLock) { while (! _interpreterRestarted) _restartLock.wait(); }", "+    _model.removeListener(restartCommand);", "+    ", "+//    System.err.println(\"Doc text: \" + _adapter.getText());", "+//    System.err.println(\"Text length: \" + _adapter.getLength());", "+//    System.err.println(\"The styles list is: \" + _adapter.getStylesList());", "+   ", "+    assertEquals(\"StylesList after reset should contain 2 pairs\", 2, _adapter.getStylesList().size());", "+    ", "+    assertEquals(\"The first element pushed on StylesList after reset should be\", styleElt1,", "+                 _adapter.getStylesList().get(1).toString());", "+    assertEquals(\"The second element pushed on StylesList after reset should be\", styleElt2,", "+                 _adapter.getStylesList().get(0).toString());", "+    ", "+    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27d75159c4f0b3fd113d186cc1739da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "commitAfterChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testClearOthersWhenJUnitRun() throws Exception", "signatureAfterChange": "   public void testClearOthersWhenJUnitRun() throws Exception", "diff": ["-    /*", "-    OpenDefinitionsDocument doc1 = setupDocument(MONKEYTEST_FAIL_TEXT);", "-    OpenDefinitionsDocument doc2 = setupDocument(NONPUBLIC_TEXT);", "-    final File file1 = new File(_tempDir, \"MonkeyTestFail.java\");", "-    final File file2 = new File(_tempDir, \"NonPublic.java\");", "-    doc1.saveFile(new FileSelector(file1));", "-    doc1.startCompile();", "-", "-    doc2.saveFile(new FileSelector(file2));", "-    doc2.startCompile();", "-    /*final TestResult tr1 = doc1.startJUnit();", "+    OpenDefinitionsDocument doc1 = setupDocument(MONKEYTEST_FAIL_TEXT);", "+    final File file1 = new File(_tempDir, \"MonkeyTestFail.java\");", "+    doc1.saveFile(new FileSelector(file1));", "+    ", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc1.startCompile();", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    synchronized(listener) {", "+      doc1.startJUnit();", "+      listener.assertJUnitStartCount(1);", "+      listener.wait();", "+    }", "+    //final TestResult tr1 = doc1.startJUnit();", "-    final TestResult tr2 = doc2.startJUnit();", "-", "+    _model.removeListener(listener);", "+    OpenDefinitionsDocument doc2 = setupDocument(NONPUBLIC_TEXT);", "+    final File file2 = new File(_tempDir, \"NonPublic.java\");", "+    doc2.saveFile(new FileSelector(file2));", "+    //final TestResult tr2 = doc2.startJUnit();", "+    TestShouldSucceedListener listener2 = new TestShouldSucceedListener();", "+    _model.addListener(listener2);", "+    ", "+    synchronized(listener2) {", "+      doc2.startCompile();", "+      listener2.wait();", "+    }", "+    ", "+    listener2.checkCompileOccurred();", "+    synchronized(listener2) {", "+      doc2.startJUnit();", "+      listener2.assertJUnitStartCount(1);", "+      listener2.wait();", "+    }", "-                 m1before.getErrorsWithPositions().length,", "-                 2", "+                 2,", "+                 m1before.getNumErrors()", "-                 m2.getErrorsWithoutPositions().length,", "-                 1", "+                 1,", "+                 m2.getNumErrors()", "-                 m1after.getErrorsWithPositions().length,", "-                 0", "+                 0,", "+                 m1after.getNumErrors()", "-    */", "+    _model.removeListener(listener2);"]}], "num": 6519}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d49b58e51c7d2ce97953f7eecc5084e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02cb9a3c175f4185aab86465c04b9e79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void addExternalFilesClassPath(URL path)", "signatureAfterChange": "      public void addExternalFilesClassPath(File f)", "diff": ["-  public void addExternalFilesClassPath(URL path) { _jvm.addExternalFilesClassPath(path); }", "+  public void addExternalFilesClassPath(File f) { _jvm.addExternalFilesClassPath(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06eb1200fc2aac380f67a0bfdd5d239a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/JavaCCParserFactory.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public SourceCodeParser createParser(InputStream is, String fname)", "signatureAfterChange": "   public SourceCodeParser createParser(InputStream is, File f)", "diff": ["-   */", "-  public SourceCodeParser createParser(InputStream is, String fname) {", "-    return new JavaCCParser(is, fname);", "+  public SourceCodeParser createParser(InputStream is, File f) {", "+    return new JavaCCParser(is, f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07db087dc1c426ca29f03fb5575c7e03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack3.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3>     void run(Command3<? super V1, ? super V2, ? super V3> c, V1 arg1, V2 arg2, V3 arg3)", "signatureAfterChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3>     void run(Runnable3<? super V1, ? super V2, ? super V3> r, V1 arg1, V2 arg2, V3 arg3)", "diff": ["-    void run(Command3<? super V1, ? super V2, ? super V3> c, V1 arg1, V2 arg2, V3 arg3) {", "+    void run(Runnable3<? super V1, ? super V2, ? super V3> r, V1 arg1, V2 arg2, V3 arg3) {", "-      try { c.run(arg1, arg2, arg3); }", "+      try { r.run(arg1, arg2, arg3); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0abb99621981978f866e0508fe3a279e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack2.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void run(Command c, T1 arg1, T2 arg2)", "signatureAfterChange": "   public void run(Runnable r, T1 arg1, T2 arg2)", "diff": ["-  public void run(Command c, T1 arg1, T2 arg2) {", "+  public void run(Runnable r, T1 arg1, T2 arg2) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b19f9ed3aea43bebcf5475e31fa1894", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "f8bbe10df4c611d46e38b444998362529994b559", "commitAfterChange": "84a2e5bc04f326e6b7de95f0109d8486b696d5bd", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void setSearchSelectedText(boolean searchSelectedText)", "signatureAfterChange": "      public void setSearchSelectionOnly(boolean searchSelectionOnly)", "diff": ["-  public void setSearchSelectedText(boolean searchSelectedText) { _searchSelectedText = searchSelectedText; }", "+  public void setSearchSelectionOnly(boolean searchSelectionOnly) { _searchSelectionOnly = searchSelectionOnly; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f21559206df875c484ddb9981cc62b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefaultInteractionsModel(DefaultGlobalModel model, MainJVM control, EditDocumentInterface adapter, File wd)", "signatureAfterChange": "   public DefaultInteractionsModel(DefaultGlobalModel model, MainJVM jvm, ConsoleDocumentInterface adapter, File wd)", "diff": ["-   */", "-  public DefaultInteractionsModel(DefaultGlobalModel model, MainJVM control, EditDocumentInterface adapter, File wd) {", "-    super(control, adapter, wd, DrJava.getConfig().getSetting(OptionConstants.HISTORY_MAX_SIZE).intValue(),", "+    */", "+  public DefaultInteractionsModel(DefaultGlobalModel model, MainJVM jvm, ConsoleDocumentInterface adapter, File wd) {", "+    super(jvm, adapter, wd, DrJava.getConfig().getSetting(OptionConstants.HISTORY_MAX_SIZE).intValue(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f4a8e74b091fce3e384ec1a24135522", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void addProjectFilesClassPath(URL path)", "signatureAfterChange": "      public void addProjectFilesClassPath(File f)", "diff": ["-  public void addProjectFilesClassPath(URL path) { ", "+  public void addProjectFilesClassPath(File f) { ", "-    _jvm.addProjectFilesClassPath(path); ", "+    _jvm.addProjectFilesClassPath(f); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1276b95c521ce7e12c32326475b2345a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack4.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void run(Command c, T1 arg1, T2 arg2, T3 arg3, T4 arg4, int threshold)", "signatureAfterChange": "   public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3, T4 arg4, int threshold)", "diff": ["-  public void run(Command c, T1 arg1, T2 arg2, T3 arg3, T4 arg4, int threshold) {", "+  public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3, T4 arg4, int threshold) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "135524a2c349cc50958e2ce5331a0831", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/Query.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "          public AnonymousInnerClass(int pos, int openSquigglyPos)", "signatureAfterChange": "          public AnonymousInnerClass(int pos, int openCurlyPos)", "diff": ["-    public AnonymousInnerClass(int pos, int openSquigglyPos) {", "+    public AnonymousInnerClass(int pos, int openCurlyPos) {", "-      _openSquigglyPos = openSquigglyPos;", "+      _openCurlyPos = openCurlyPos;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13c5ea053eff7e43ba6851a653b31cce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack4.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3, V4 extends T4>     void run(Command4<? super V1, ? super V2, ? super V3, ? super V4> c, V1 arg1, V2 arg2,               V3 arg3, V4 arg4, int threshold)", "signatureAfterChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3, V4 extends T4>     void run(Runnable4<? super V1, ? super V2, ? super V3, ? super V4> r, V1 arg1, V2 arg2,               V3 arg3, V4 arg4, int threshold)", "diff": ["-    void run(Command4<? super V1, ? super V2, ? super V3, ? super V4> c, V1 arg1, V2 arg2, ", "+    void run(Runnable4<? super V1, ? super V2, ? super V3, ? super V4> r, V1 arg1, V2 arg2, ", "-      try { c.run(arg1, arg2, arg3, arg4); }", "+      try { r.run(arg1, arg2, arg3, arg4); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1442ec4019cdf3c7db910455adcc8efb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 143, "signatureBeforeChange": "   public static <T1, T2, R> Lambda2<T1, T2, R> asLambda(final Command2<? super T1, ? super T2> c,                                                   final R result)", "signatureAfterChange": "   public static <T1, T2, R> Lambda2<T1, T2, R> asLambda(final Runnable2<? super T1, ? super T2> r,                                                          final R result)", "diff": ["-  /** @return  A lambda that executes the given command, then returns {@code result} */", "-  public static <T1, T2, R> Lambda2<T1, T2, R> asLambda(final Command2<? super T1, ? super T2> c, ", "-                                                 final R result) {", "+  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "+  public static <T1, T2, R> Lambda2<T1, T2, R> asLambda(final Runnable2<? super T1, ? super T2> r, ", "+                                                        final R result) {", "-      public R value(T1 arg1, T2 arg2) { c.run(arg1, arg2); return result; }", "+      public R value(T1 arg1, T2 arg2) { r.run(arg1, arg2); return result; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166b2466b3a7e8a2db92923a09d4d9f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/IndentFiles.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void indentFiles(Vector<String> filenames, int indentLevel, boolean silent)", "signatureAfterChange": "   public static void indentFiles(Vector<String> fileNames, int indentLevel, boolean silent)", "diff": ["-  public static void indentFiles(Vector<String> filenames, int indentLevel, boolean silent) {", "+  public static void indentFiles(Vector<String> fileNames, int indentLevel, boolean silent) {", "-    for (int i = 0; i < filenames.size(); i++) {", "-      String fname = filenames.get(i);", "+    for (int i = 0; i < fileNames.size(); i++) {", "+      String fname = fileNames.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5d17146b3b8064ee4d58676755f031", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "94495305a8fb1d1ea8c2b8ae2ef82ea7d92dd639", "commitAfterChange": "ae025ece2387b12ae04306fdd94dd1060cdc00c5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public ProjectFileBuilder(String projectpath)", "signatureAfterChange": "      public ProjectFileBuilder(String projectPath)", "diff": ["-  public ProjectFileBuilder(String projectpath)", "+  public ProjectFileBuilder(String projectPath)", "-    _projectpath = projectpath.replace('\\\\', '/');", "+    _projectPath = projectPath.replace('\\\\', '/');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5c16ec6f9e3947e22de82b081afca1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException", "diff": ["-  private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException {", "+  private boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException {", "-    final Query key = new Query.AnonymousInnerClass(pos, openSquigglyPos);", "+    final Query key = new Query.AnonymousInnerClass(pos, openCurlyPos);", "-      String text = getText(0, openSquigglyPos+1);", "+      String text = getText(0, openCurlyPos+1);", "-              cached = (afterParen == openSquigglyPos); ", "+              cached = (afterParen == openCurlyPos); ", "-      _storeInCache(key, cached, openSquigglyPos);", "+      _storeInCache(key, cached, openCurlyPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "382bca1240613a8f431f7adee395c951", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/VariableDeclaration.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public VariableDeclaration(boolean fin, TypeName type, String name, Expression init)", "signatureAfterChange": "   public VariableDeclaration(ModifierSet mods, TypeName type, String name, Expression init)", "diff": ["-  public VariableDeclaration(boolean fin, TypeName type, String name, Expression init) {", "-    this(fin, type, name, init, SourceInfo.NONE);", "+  public VariableDeclaration(ModifierSet mods, TypeName type, String name, Expression init) {", "+    this(mods, type, name, init, SourceInfo.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384bdd74403a05153416043cc040df14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 138, "methodNumberAfterChange": 139, "signatureBeforeChange": "   public static <R> Thunk<R> asThunk(final Command c, final R result)", "signatureAfterChange": "   public static <R> Thunk<R> asThunk(final Runnable r, final R result)", "diff": ["-  /** @return  A thunk that executes the given command, then returns {@code result} */", "-  public static <R> Thunk<R> asThunk(final Command c, final R result) {", "-    return new Thunk<R>() { public R value() { c.run(); return result; } };", "+  /** @return  A thunk that executes the given runnable, then returns {@code result} */", "+  public static <R> Thunk<R> asThunk(final Runnable r, final R result) {", "+    return new Thunk<R>() { public R value() { r.run(); return result; } };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "449311e226b26b2930b24a48857550c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "eccc0f4ca399d1b769babc36cdb28f136cc1e3a4", "commitAfterChange": "cd4dd52c44e1088dca0dd0286c0899f125ae070a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      EventHandler (DebugManager debugManager, VirtualMachine vm)", "signatureAfterChange": "      EventHandler (DebugManager manager, VirtualMachine vm)", "diff": ["-  EventHandler (DebugManager debugManager, VirtualMachine vm) {", "-    _debugManager = debugManager;", "+  EventHandler (DebugManager manager, VirtualMachine vm) {", "+    _manager = manager;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "483b2c88054223d9046d64a28211ef84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Append(ConsList<? extends T> rest)", "signatureAfterChange": "     public Append(ConsList<? extends T> toAppend)", "diff": ["-    private final ConsList<? extends T> _rest;", "-    public Append(ConsList<? extends T> rest) { _rest = rest; }", "+    private final ConsList<? extends T> _toAppend;", "+    public Append(ConsList<? extends T> toAppend) { _toAppend = toAppend; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c754c30a59f6eba3b9fa3cde93fe7bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 141, "signatureBeforeChange": "   public static <T, R> Lambda<T, R> asLambda(final Command1<? super T> c, final R result)", "signatureAfterChange": "   public static <T, R> Lambda<T, R> asLambda(final Runnable1<? super T> r, final R result)", "diff": ["-  /** @return  A lambda that executes the given command, then returns {@code result} */", "-  public static <T, R> Lambda<T, R> asLambda(final Command1<? super T> c, final R result) {", "-    return new Lambda<T, R>() { public R value(T arg) { c.run(arg); return result; } };", "+  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "+  public static <T, R> Lambda<T, R> asLambda(final Runnable1<? super T> r, final R result) {", "+    return new Lambda<T, R>() { public R value(T arg) { r.run(arg); return result; } };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d2f0ec285daabe3491a478be27fed7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack4.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void run(Command c, T1 arg1, T2 arg2, T3 arg3, T4 arg4)", "signatureAfterChange": "   public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3, T4 arg4)", "diff": ["-  public void run(Command c, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {", "+  public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3, T4 arg4) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "504754e63ec027bb7711c33d4afa0a3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 188, "signatureBeforeChange": "     public CharSequenceWrapper(CharSequence s, boolean fixed)", "signatureAfterChange": "     public CharSequenceWrapper(CharSequence s, boolean mutable)", "diff": ["-    private final boolean _fixed;", "-    public CharSequenceWrapper(CharSequence s, boolean fixed) { _s = s; _fixed = fixed; }", "+    private final boolean _mutable; // whether this sequence is possibly mutable", "+    public CharSequenceWrapper(CharSequence s, boolean mutable) { _s = s; _mutable = mutable; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ec46470b8a13869aad4bfbe4c7b53d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void addProjectClassPath(URL path)", "signatureAfterChange": "   public void addProjectClassPath(File f)", "diff": ["-  public void addProjectClassPath(URL path) { _jvm.addProjectClassPath(path); }", "+  public void addProjectClassPath(File f) { _jvm.addProjectClassPath(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a39bed6680ccc47307d235dfbb993ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack2.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public <V1 extends T1, V2 extends T2> void run(Command2<? super V1, ? super V2> c, V1 arg1,                                                   V2 arg2)", "signatureAfterChange": "   public <V1 extends T1, V2 extends T2> void run(Runnable2<? super V1, ? super V2> r, V1 arg1,                                                   V2 arg2)", "diff": ["-  public <V1 extends T1, V2 extends T2> void run(Command2<? super V1, ? super V2> c, V1 arg1, ", "+  public <V1 extends T1, V2 extends T2> void run(Runnable2<? super V1, ? super V2> r, V1 arg1, ", "-      try { c.run(arg1, arg2); }", "+      try { r.run(arg1, arg2); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c885eec23e948c69d6c7c128e3b09b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack3.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void run(Command c, T1 arg1, T2 arg2, T3 arg3)", "signatureAfterChange": "   public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3)", "diff": ["-  public void run(Command c, T1 arg1, T2 arg2, T3 arg3) {", "+  public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640fb090d0d0f94e32bac242ddece943", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack2.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void run(Command c, T1 arg1, T2 arg2, int threshold)", "signatureAfterChange": "   public void run(Runnable r, T1 arg1, T2 arg2, int threshold)", "diff": ["-  public void run(Command c, T1 arg1, T2 arg2, int threshold) {", "+  public void run(Runnable r, T1 arg1, T2 arg2, int threshold) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669dc9f0fe83e00450a6f4fc2ab9a444", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public static <T1, T2, T3, T4, R> Lambda4<T1, T2, T3, T4, R>      asLambda(final Command4<? super T1, ? super T2, ? super T3, ? super T4> c, final R result)", "signatureAfterChange": "   public static <T1, T2, T3, T4, R> Lambda4<T1, T2, T3, T4, R>      asLambda(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r, final R result)", "diff": ["-  /** @return  A lambda that executes the given command, then returns {@code result} */", "+  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "-    asLambda(final Command4<? super T1, ? super T2, ? super T3, ? super T4> c, final R result) {", "+    asLambda(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r, final R result) {", "-      public R value(T1 a1, T2 a2, T3 a3, T4 a4) { c.run(a1, a2, a3, a4); return result; }", "+      public R value(T1 a1, T2 a2, T3 a3, T4 a4) { r.run(a1, a2, a3, a4); return result; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69285d485567d6c33bcbdbeff2ffb9b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "signatureAfterChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String programRoot)", "diff": ["-  private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName) {", "+  private SymbolData _classFile2SymbolData(String qualifiedClassName, String programRoot) {", "-      if (stream == null && directoryName != null) {", "-        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(directoryName));", "+      if (stream == null && programRoot != null) {", "+        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(programRoot));", "-    if (sdLookup == null) {", "+    if (sdLookup == null)  { // create dummy continuation for sd"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2d06eb9cf25c9039fe3d5960e6a78e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack3.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void run(Command c, T1 arg1, T2 arg2, T3 arg3, int threshold)", "signatureAfterChange": "   public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3, int threshold)", "diff": ["-  public void run(Command c, T1 arg1, T2 arg2, T3 arg3, int threshold) {", "+  public void run(Runnable r, T1 arg1, T2 arg2, T3 arg3, int threshold) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b37033fdd2a541686102904581c7a05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public void addBuildDirectoryClassPath(URL path)", "signatureAfterChange": "    public void addBuildDirectoryClassPath(File f)", "diff": ["-  public void addBuildDirectoryClassPath(URL path) { _jvm.addBuildDirectoryClassPath(path); }", "+  public void addBuildDirectoryClassPath(File f) { _jvm.addBuildDirectoryClassPath(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dfacbf2f43358d0d71b04fc2e085dcb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b818b8a0f0981edaebaa07c3dc3e655c941dcd48", "commitAfterChange": "e02b291d62bdaa0ea7b37dd3f2ab84515aaa6d58", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException", "diff": ["-  private boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException {", "-//    String t = getText(0, openCurlyPos+1);", "-//    System.out.print (\"_isAnonymousInnerClass(\"+newPos+\", \"+openCurlyPos+\")\");", "-//    System.out.println(\"_isAnonymousInnerClass(\"+newPos+\", \"+openCurlyPos+\"): `\"+", "-//                       t.substring(newPos, openCurlyPos+1)+\"`\");", "+  private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException {", "+//    String t = getText(0, openSquigglyPos+1);", "+//    System.out.print (\"_isAnonymousInnerClass(\"+newPos+\", \"+openSquigglyPos+\")\");", "+//    System.out.println(\"_isAnonymousInnerClass(\"+newPos+\", \"+openSquigglyPos+\"): `\"+", "+//                       t.substring(newPos, openSquigglyPos+1)+\"`\");", "-    final Query key = new Query.AnonymousInnerClass(pos, openCurlyPos);", "+    final Query key = new Query.AnonymousInnerClass(pos, openSquigglyPos);", "-      String text = getText(0, openCurlyPos+1);", "+      String text = getText(0, openSquigglyPos+1);", "-              cached = (afterParen == openCurlyPos); ", "+              cached = (afterParen == openSquigglyPos); ", "-      _storeInCache(key, cached, openCurlyPos);", "+      _storeInCache(key, cached, openSquigglyPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7850384f8b92bd77d13f6740e2b28157", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "f8bbe10df4c611d46e38b444998362529994b559", "commitAfterChange": "84a2e5bc04f326e6b7de95f0109d8486b696d5bd", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   private int replaceAll(boolean searchAll, boolean searchSelectedText)", "signatureAfterChange": "   private int replaceAll(boolean searchAll, boolean searchSelectionOnly)", "diff": ["-  private int replaceAll(boolean searchAll, boolean searchSelectedText) {", "+  private int replaceAll(boolean searchAll, boolean searchSelectionOnly) {", "-    else if(searchSelectedText) {", "+    else if(searchSelectionOnly) {", "-      count += _replaceAllInCurrentDoc(searchSelectedText);", "+      count += _replaceAllInCurrentDoc(searchSelectionOnly);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d887a12521f6f9b9dbd709da788253b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/Log.java", "commitBeforeChange": "14164b6a15fd606e897810fd89f2e7edec0280c4", "commitAfterChange": "52c187d5d51895f0b58a56680e35117f80ff45ef", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public Log(String name, boolean enabled)", "signatureAfterChange": "   public Log(String name, boolean isEnabled)", "diff": ["-  public Log(String name, boolean enabled) {", "+  public Log(String name, boolean isEnabled) {", "-    _enabled = enabled;", "+    _isEnabled = isEnabled;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85595b1a61fa440e5326f894ddfcb177", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public BreakpointPropertyVisitor(String parentDir)", "signatureAfterChange": "     public BreakpointPropertyVisitor(String pr)", "diff": ["-    private String _parentDir;", "-    public BreakpointPropertyVisitor(String parentDir) { _parentDir = parentDir; }", "+    private String pathRoot;", "+    public BreakpointPropertyVisitor(String pr) { pathRoot = pr; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855bc58348850218962b931b518c0c5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public TypeData forDoStatementOnly(DoStatement that, TypeData code_result, TypeData condition_result)", "signatureAfterChange": "   public TypeData forDoStatementOnly(DoStatement that, TypeData codeRes, TypeData condition_result)", "diff": ["-  public TypeData forDoStatementOnly(DoStatement that, TypeData code_result, TypeData condition_result) {", "+  public TypeData forDoStatementOnly(DoStatement that, TypeData codeRes, TypeData condition_result) {", "-    if (code_result == null) {return null;}", "-    return code_result.getInstanceData();", "+    if (codeRes == null) {return null;}", "+    return codeRes.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "893515877a93c1ee27a4d320ed0a0ff9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack3.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3>     void run(Command3<? super V1, ? super V2, ? super V3> c, V1 arg1, V2 arg2, V3 arg3,               int threshold)", "signatureAfterChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3>     void run(Runnable3<? super V1, ? super V2, ? super V3> r, V1 arg1, V2 arg2, V3 arg3,               int threshold)", "diff": ["-    void run(Command3<? super V1, ? super V2, ? super V3> c, V1 arg1, V2 arg2, V3 arg3, ", "+    void run(Runnable3<? super V1, ? super V2, ? super V3> r, V1 arg1, V2 arg2, V3 arg3, ", "-      try { c.run(arg1, arg2, arg3); }", "+      try { r.run(arg1, arg2, arg3); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8d9e4fed1542806c82138ec1571c46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public FilePropertyVisitor(String parentDir)", "signatureAfterChange": "     public FilePropertyVisitor(String pr)", "diff": ["-    private String _parentDir;", "-    public FilePropertyVisitor(String parentDir) { _parentDir = parentDir; }", "+    private String pathRoot;", "+    public FilePropertyVisitor(String pr) { pathRoot = pr; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97b4db72ad28e182d4fecb1d471ce9ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void run(Command c, T arg, int threshold)", "signatureAfterChange": "   public void run(Runnable r, T arg, int threshold)", "diff": ["-  public void run(Command c, T arg, int threshold) {", "+  public void run(Runnable r, T arg, int threshold) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98b7ab8464c64299982c0b8e5019cd35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "f8bbe10df4c611d46e38b444998362529994b559", "commitAfterChange": "84a2e5bc04f326e6b7de95f0109d8486b696d5bd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public FindResultsPanel(MainFrame frame, RegionManager<MovingDocumentRegion> regionManager, MovingDocumentRegion region, String title,                            String searchString, boolean searchAll, boolean searchSelectedText, boolean matchCase, boolean wholeWord,                            boolean noComments, boolean noTestCases, WeakReference<OpenDefinitionsDocument> doc,                            FindReplacePanel findReplace)", "signatureAfterChange": "\r   public FindResultsPanel(MainFrame frame, RegionManager<MovingDocumentRegion> regionManager, MovingDocumentRegion region, String title, \r                           String searchString, boolean searchAll, boolean searchSelectionOnly, boolean matchCase, boolean wholeWord, \r                           boolean noComments, boolean noTestCases, WeakReference<OpenDefinitionsDocument> doc, \r                           FindReplacePanel findReplace)", "diff": ["-    */", "-  public FindResultsPanel(MainFrame frame, RegionManager<MovingDocumentRegion> regionManager, MovingDocumentRegion region, String title, ", "-                          String searchString, boolean searchAll, boolean searchSelectedText, boolean matchCase, boolean wholeWord, ", "-                          boolean noComments, boolean noTestCases, WeakReference<OpenDefinitionsDocument> doc, ", "-                          FindReplacePanel findReplace) {", "-    super(frame, title, regionManager);", "-    ", "-//  _regionManager is inherited from RegionsTreePanel", "-    _region = region;", "-    _searchString = searchString;", "-    _searchAll    = searchAll;", "-    _searchSelectedText = searchSelectedText;", "-    _matchCase    = matchCase;", "-    _wholeWord    = wholeWord;", "-    _noComments   = noComments;", "-    _noTestCases  = noTestCases;", "-    _doc          = doc;", "-    _findReplace  = findReplace;", "-    ", "-    // Similar (but NOT identical) code found in BookmarksPanel and BreakpointsPanel", "-    _regionManager.addListener(new RegionManagerListener<MovingDocumentRegion>() {      ", "-      public void regionAdded(MovingDocumentRegion r) { addRegion(r); }", "-      public void regionChanged(MovingDocumentRegion r) { ", "-        regionRemoved(r);", "-        regionAdded(r);", "-      }", "-      public void regionRemoved(MovingDocumentRegion r) { removeRegion(r); }", "-    });", "-    ", "-    for(int i = 0; i < OptionConstants.FIND_RESULTS_COLORS.length; ++i) {", "-      final OptionListener<Color> listener = new FindResultsColorOptionListener(i);", "-      final Pair<Option<Color>, OptionListener<Color>> pair = ", "-        new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.FIND_RESULTS_COLORS[i], listener);", "-      _colorOptionListeners.add(pair);", "-      DrJava.getConfig().addOptionListener(OptionConstants.FIND_RESULTS_COLORS[i], listener);", "-    }", "-  }", "+    */\r", "+  public FindResultsPanel(MainFrame frame, RegionManager<MovingDocumentRegion> regionManager, MovingDocumentRegion region, String title, \r", "+                          String searchString, boolean searchAll, boolean searchSelectionOnly, boolean matchCase, boolean wholeWord, \r", "+                          boolean noComments, boolean noTestCases, WeakReference<OpenDefinitionsDocument> doc, \r", "+                          FindReplacePanel findReplace) {\r", "+    super(frame, title, regionManager);\r", "+    \r", "+//  _regionManager is inherited from RegionsTreePanel\r", "+    _region = region;\r", "+    _searchString = searchString;\r", "+    _searchAll    = searchAll;\r", "+    _searchSelectionOnly = searchSelectionOnly;\r", "+    _matchCase    = matchCase;\r", "+    _wholeWord    = wholeWord;\r", "+    _noComments   = noComments;\r", "+    _noTestCases  = noTestCases;\r", "+    _doc          = doc;\r", "+    _findReplace  = findReplace;\r", "+    \r", "+    // Similar (but NOT identical) code found in BookmarksPanel and BreakpointsPanel\r", "+    _regionManager.addListener(new RegionManagerListener<MovingDocumentRegion>() {      \r", "+      public void regionAdded(MovingDocumentRegion r) { addRegion(r); }\r", "+      public void regionChanged(MovingDocumentRegion r) { \r", "+        regionRemoved(r);\r", "+        regionAdded(r);\r", "+      }\r", "+      public void regionRemoved(MovingDocumentRegion r) { removeRegion(r); }\r", "+    });\r", "+    \r", "+    for(int i = 0; i < OptionConstants.FIND_RESULTS_COLORS.length; ++i) {\r", "+      final OptionListener<Color> listener = new FindResultsColorOptionListener(i);\r", "+      final Pair<Option<Color>, OptionListener<Color>> pair = \r", "+        new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.FIND_RESULTS_COLORS[i], listener);\r", "+      _colorOptionListeners.add(pair);\r", "+      DrJava.getConfig().addOptionListener(OptionConstants.FIND_RESULTS_COLORS[i], listener);\r", "+    }\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2186c32b8b86f8bd4a4e66da40c4aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Option.java", "commitBeforeChange": "4edad8e8a80e806b7e00866e949c609589a8b7ed", "commitAfterChange": "cc82a53c954ef1f5f73e07c1b2635f700fdc3084", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public <T> Option(String key)", "signatureAfterChange": "     public <T> Option(String name)", "diff": ["+     */", "+    public <T> Option(String name) { this.name = name; }", "-  ", "-  public <T> Option(String key) { this.key = key; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a306e626b47526136a530b91fff13883", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 145, "signatureBeforeChange": "   public static <T1, T2, T3, R> Lambda3<T1, T2, T3, R>      asLambda(final Command3<? super T1, ? super T2, ? super T3> c, final R result)", "signatureAfterChange": "   public static <T1, T2, T3, R> Lambda3<T1, T2, T3, R>      asLambda(final Runnable3<? super T1, ? super T2, ? super T3> r, final R result)", "diff": ["-  /** @return  A lambda that executes the given command, then returns {@code result} */", "+  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "-    asLambda(final Command3<? super T1, ? super T2, ? super T3> c, final R result) {", "+    asLambda(final Runnable3<? super T1, ? super T2, ? super T3> r, final R result) {", "-      public R value(T1 arg1, T2 arg2, T3 arg3) { c.run(arg1, arg2, arg3); return result; }", "+      public R value(T1 arg1, T2 arg2, T3 arg3) { r.run(arg1, arg2, arg3); return result; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9511c372d8130ae73102260e95685f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitError.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JUnitError(File file, int lineNumber, int startColumn, String message,       boolean isWarning, String test)", "signatureAfterChange": "   public JUnitError(File file, int lineNumber, int startColumn, String message,       boolean isError, String test)", "diff": ["-      boolean isWarning, String test) {", "+      boolean isError, String test) {", "-    _isWarning = isWarning;", "+    _isError = isError;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5a9b83b6c42f802329e160774704f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public <V extends T> void run(Command1<? super V> c, V arg)", "signatureAfterChange": "   public <V extends T> void run(Runnable1<? super V> r, V arg)", "diff": ["-  public <V extends T> void run(Command1<? super V> c, V arg) {", "+  public <V extends T> void run(Runnable1<? super V> r, V arg) {", "-      try { c.run(arg); }", "+      try { r.run(arg); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c41e314b4f7291bd57ea104147763d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "54a2d5af359edd99cce3e2b74ded93b4c8c0d9e9", "commitAfterChange": "7c8486700bb21647b6fbe2818464471123c8ab80", "methodNumberBeforeChange": 533, "methodNumberAfterChange": 533, "signatureBeforeChange": "      private void _setUpAction(Action a, String name, String icon, String shortDesc)", "signatureAfterChange": "      private void _setUpAction(Action a, String name, String icon, String longDesc)", "diff": ["-  private void _setUpAction(Action a, String name, String icon, String shortDesc) {", "+  private void _setUpAction(Action a, String name, String icon, String longDesc) {", "-    a.putValue(Action.SHORT_DESCRIPTION, shortDesc);", "+    a.putValue(Action.LONG_DESCRIPTION, longDesc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c41b155fcc7f9b2fd8467d947084ac3c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "c9a582a01c4727c2040c438bfb469bb6c612160b", "commitAfterChange": "8871133812a093ff5b818f6e8694af02431a4702", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public LanguageLevelStackTraceMapper(GlobalModel AGM)", "signatureAfterChange": "   public LanguageLevelStackTraceMapper(GlobalModel aGM)", "diff": ["-  public LanguageLevelStackTraceMapper(GlobalModel AGM){", "-    AGmodel = AGM;", "+  public LanguageLevelStackTraceMapper(GlobalModel aGM){", "+    aGModel = aGM;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2703c86fd2cb94540f3924ed6cb31f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack2.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public <V1 extends T1, V2 extends T2> void run(Command2<? super V1, ? super V2> c, V1 arg1,                                                   V2 arg2, int threshold)", "signatureAfterChange": "   public <V1 extends T1, V2 extends T2> void run(Runnable2<? super V1, ? super V2> r, V1 arg1,                                                   V2 arg2, int threshold)", "diff": ["-  public <V1 extends T1, V2 extends T2> void run(Command2<? super V1, ? super V2> c, V1 arg1, ", "+  public <V1 extends T1, V2 extends T2> void run(Runnable2<? super V1, ? super V2> r, V1 arg1, ", "-      try { c.run(arg1, arg2); }", "+      try { r.run(arg1, arg2); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5738fbd97f42927afff4d5b18e7def5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack4.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3, V4 extends T4>     void run(Command4<? super V1, ? super V2, ? super V3, ? super V4> c, V1 arg1, V2 arg2,               V3 arg3, V4 arg4)", "signatureAfterChange": "   public <V1 extends T1, V2 extends T2, V3 extends T3, V4 extends T4>     void run(Runnable4<? super V1, ? super V2, ? super V3, ? super V4> r, V1 arg1, V2 arg2,               V3 arg3, V4 arg4)", "diff": ["-    void run(Command4<? super V1, ? super V2, ? super V3, ? super V4> c, V1 arg1, V2 arg2, ", "+    void run(Runnable4<? super V1, ? super V2, ? super V3, ? super V4> r, V1 arg1, V2 arg2, ", "-      try { c.run(arg1, arg2, arg3, arg4); }", "+      try { r.run(arg1, arg2, arg3, arg4); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b53f570cf71696c7f08ad058036f36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugAction.java", "commitBeforeChange": "14164b6a15fd606e897810fd89f2e7edec0280c4", "commitAfterChange": "52c187d5d51895f0b58a56680e35117f80ff45ef", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void setEnabled(boolean enabled)", "signatureAfterChange": "   public void setEnabled(boolean isEnabled)", "diff": ["-  public void setEnabled(boolean enabled) {", "-    _enabled = enabled;", "+  public void setEnabled(boolean isEnabled) {", "+    _isEnabled = isEnabled;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d762e5f72dab196826b54e51f6931b82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/FormalParameter.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public FormalParameter(boolean f, TypeName t, String n)", "signatureAfterChange": "   public FormalParameter(ModifierSet mods, TypeName t, String n)", "diff": ["-  public FormalParameter(boolean f, TypeName t, String n) {", "-    this(f, t, n, SourceInfo.NONE);", "+  public FormalParameter(ModifierSet mods, TypeName t, String n) {", "+    this(mods, t, n, SourceInfo.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3647e5090cf4bcb675455a8a05799a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public <V extends T> void run(Command1<? super V> c, V arg, int threshold)", "signatureAfterChange": "   public <V extends T> void run(Runnable1<? super V> r, V arg, int threshold)", "diff": ["-  public <V extends T> void run(Command1<? super V> c, V arg, int threshold) {", "+  public <V extends T> void run(Runnable1<? super V> r, V arg, int threshold) {", "-      try { c.run(arg); }", "+      try { r.run(arg); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2241515c20b17bc5ef8cde24f1ced76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/RMIInteractionsModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void addExtraClassPath(URL path)", "signatureAfterChange": "      public void addExtraClassPath(File f)", "diff": ["-  public void addExtraClassPath(URL path) { _jvm.addExtraClassPath(path); }", "+  public void addExtraClassPath(File f) { _jvm.addExtraClassPath(f); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4472685506d4b422e613d95a16fe78c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecursionStack.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void run(Command c, T arg)", "signatureAfterChange": "   public void run(Runnable r, T arg)", "diff": ["-  public void run(Command c, T arg) {", "+  public void run(Runnable r, T arg) {", "-      try { c.run(); }", "+      try { r.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef91c2c35b46f97318f8add6093b4f9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/Log.java", "commitBeforeChange": "14164b6a15fd606e897810fd89f2e7edec0280c4", "commitAfterChange": "52c187d5d51895f0b58a56680e35117f80ff45ef", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void setEnabled(boolean enabled)", "signatureAfterChange": "   public void setEnabled(boolean isEnabled)", "diff": ["-  public void setEnabled(boolean enabled) {", "-    _enabled = enabled;", "+  public void setEnabled(boolean isEnabled) {", "+    _isEnabled = isEnabled;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f02f848a818961fdf94886df5cfca43c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "7ddc8e7f78b66ef8e4ed5561c33d8ef661ee32e6", "commitAfterChange": "b818b8a0f0981edaebaa07c3dc3e655c941dcd48", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException", "diff": ["-  private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException {", "-//    String t = getText(0, openSquigglyPos+1);", "-//    System.out.print (\"_isAnonymousInnerClass(\"+newPos+\", \"+openSquigglyPos+\")\");", "-//    System.out.println(\"_isAnonymousInnerClass(\"+newPos+\", \"+openSquigglyPos+\"): `\"+", "-//                       t.substring(newPos, openSquigglyPos+1)+\"`\");", "+  private boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException {", "+//    String t = getText(0, openCurlyPos+1);", "+//    System.out.print (\"_isAnonymousInnerClass(\"+newPos+\", \"+openCurlyPos+\")\");", "+//    System.out.println(\"_isAnonymousInnerClass(\"+newPos+\", \"+openCurlyPos+\"): `\"+", "+//                       t.substring(newPos, openCurlyPos+1)+\"`\");", "-    final Query key = new Query.AnonymousInnerClass(pos, openSquigglyPos);", "+    final Query key = new Query.AnonymousInnerClass(pos, openCurlyPos);", "-      String text = getText(0, openSquigglyPos+1);", "+      String text = getText(0, openCurlyPos+1);", "-              cached = (afterParen == openSquigglyPos); ", "+              cached = (afterParen == openCurlyPos); ", "-      _storeInCache(key, cached, openSquigglyPos);", "+      _storeInCache(key, cached, openCurlyPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f8793c8cadc6843d6377e3eff83517", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "f8bbe10df4c611d46e38b444998362529994b559", "commitAfterChange": "84a2e5bc04f326e6b7de95f0109d8486b696d5bd", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private int processAll(Runnable1<FindResult> findAction, boolean searchAll, boolean searchSelectedText)", "signatureAfterChange": "   private int processAll(Runnable1<FindResult> findAction, boolean searchAll, boolean searchSelectionOnly)", "diff": ["-  private int processAll(Runnable1<FindResult> findAction, boolean searchAll, boolean searchSelectedText) {", "+  private int processAll(Runnable1<FindResult> findAction, boolean searchAll, boolean searchSelectionOnly) {", "-    else if(searchSelectedText) {", "+    else if(searchSelectionOnly) {", "-      count += _processAllInCurrentDoc(findAction, searchSelectedText);", "+      count += _processAllInCurrentDoc(findAction, searchSelectionOnly);"]}], "num": 18256}
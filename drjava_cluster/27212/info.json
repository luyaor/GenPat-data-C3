{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd5cea9d6ac7dbe7edbbcbdfb0a199e0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00fb899eb665103aec0d201a815b83b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "bffcae721f8dbc844dc8a667963f0caab39047ea", "commitAfterChange": "0af0c72004872701891228fa18659a3204fb6e2f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private static FullVersion guessVersion(File f, CompoundJDKDescriptor desc)", "signatureAfterChange": "      private static FullVersion guessVersion(File f)", "diff": ["-  private static FullVersion guessVersion(File f, CompoundJDKDescriptor desc) {", "+  private static FullVersion guessVersion(File f) {", "-    List<Lambda3<String,String,String,String>> detectors;", "-    if (desc!=null) {", "-      detectors = Collections.<Lambda3<String,String,String,String>>singletonList(desc.getDetector());", "-    }", "-    else {", "-      detectors = Collections.<Lambda3<String,String,String,String>>emptyList();", "-    }", "-", "-      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor,detectors); }", "-      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor,detectors); }", "-      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor,detectors); }", "+      else if (path.toLowerCase().contains(\"sun\")) vendor = \"sun\";", "+      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor); }", "+      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor); }", "+      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor); }", "-            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor,detectors);", "+            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor);", "-    // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "-    if ((result == null) ||", "-        (result.vendor()==JavaVersion.VendorType.UNKNOWN &&", "-         result.majorVersion().compareTo(JavaVersion.JAVA_6)>=0) ||", "-        (f.getAbsolutePath().toLowerCase().contains(\"mint\"))) {", "-      JarFile jf = null;", "-      try {", "-        jf = new JarFile(f);", "-        if (jf.getJarEntry(\"edu/rice/cs/mint/comp/TransStaging.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/BracketExprTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/BracketStatTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/EscapeExprTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/EscapeStatTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null) {", "-          vendor = \"mint\";", "-        }    ", "-        else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null) {", "-          vendor = \"openjdk\";", "-        }", "-        else {", "-          vendor = \"sun\";", "-        }", "-        result = JavaVersion.parseFullVersion(parsedVersion,vendor,vendor,detectors);", "+    ", "+    if ((result == null) || (result.vendor()==JavaVersion.VendorType.UNKNOWN)) {", "+      if (result.majorVersion().compareTo(JavaVersion.JAVA_6)<0) {", "+        // Java 5 or earlier, assume Sun", "+        vendor = \"sun\";", "-      catch(IOException ioe) { /* keep existing version */ }", "-      finally {", "+      else {", "+        // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "+        JarFile jf = null;", "-          if (jf != null) jf.close();", "+          jf = new JarFile(f);", "+          if (jf.getJarEntry(\"com/sun/tools/javac/util/JavacFileManager.class\")!=null) {", "+            // NOTE: this may cause Sun's Java 7 to also be recognized as openjdk", "+            vendor = \"openjdk\";", "+          }", "+          else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")!=null) {", "+            vendor = \"sun\";", "+          }", "-        catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+        catch(IOException ioe) { /* keep existing version */ }", "+        finally {", "+          try {", "+            if (jf != null) jf.close();", "+          }", "+          catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+        }", "+      result = JavaVersion.parseFullVersion(parsedVersion,vendor,vendor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa338d5b54c5f4a28e5b49877a82ddd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "ef93e6cc3a79f29ed28debb1108f1338b9a974ad", "commitAfterChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                  Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                  Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-      int lastIndex = fileName.lastIndexOf(\".dj\");", "-      if (lastIndex != -1) {", "+      if (DrJavaFileUtils.isLLFile(fileName)) {", "-        File javaFile = new File(fileName.substring(0, lastIndex) + \".java\");", "+        File javaFile = new File(DrJavaFileUtils.getJavaForLLFile(fileName));", "-      ", "-      File canonicalFile = IOUtil.attemptCanonicalFile(f);", "-      String fileName = canonicalFile.getPath();", "-      ", "-      if(files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj0\")) ||", "-         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj1\")) ||", "-         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj2\"))", "-        ) {", "-        files.remove(new File(fileName));", "+      if (files.contains(DrJavaFileUtils.getDJForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ0ForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ1ForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ2ForJavaFile(f))) {", "+        files.remove(f);", "-      ", "-      ", "-//      new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(null, \"Warning: Files need to be closed\",", "-//                                                       \"The following files have matching .dj? files open.\", ", "-//                                                       \"These .java files need to be closed for proper compiling. \\n \\n \\n\"", "-//                                                       + filesToBeClosed.toString().replace(\", \",\"\\n\"),true).show();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d5092e1c34c0f8b8899b34a27d02d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ed1069955672117b4c9aac0875c5704fb5071788", "commitAfterChange": "bd123d07912360358a1a9262bb626bfc554bdb6a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    Map<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>> results =", "-      new TreeMap<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>>();", "+    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "-        putLib(results,", "-               fromConfig.version().vendor(),", "-               fvOnly(fromConfig.version()),", "-               fromConfig);", "+        results.put(coarsenVersion(fromConfig.version()), fromConfig);", "-      if ((getLib(results, runtimeVersion.vendor(), fvOnly(runtimeVersion))==null)) {", "+      if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "-        putLib(results,", "-               runtimeVersion.vendor(),", "-               fvOnly(runtimeVersion),", "-               fromRuntime);", "+        results.put(coarsenVersion(runtimeVersion), fromRuntime);", "-      if (getLib(results, tVersion.vendor(), fvOnly(tVersion))==null) {", "+      if (!results.containsKey(coarsenVersion(tVersion))) {", "-        putLib(results,", "-               tVersion.vendor(),", "-               fvOnly(tVersion),", "-               t);", "+        results.put(coarsenVersion(tVersion), t);", "-    Iterable<JDKToolsLibrary> acc = IterUtil.empty();", "-    for(Map<JavaVersion.FullVersion, JDKToolsLibrary> vmap: results.values()) {", "-      acc = IterUtil.compose(acc, vmap.values());", "-    }", "-    return IterUtil.reverse(acc);", "+    return IterUtil.reverse(results.values());"]}], "num": 27212}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7caa40f7e733a0aab9e7042e03e7fec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "151c04ec1d0d7fe99886b8d8266ef15f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d)", "signatureAfterChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d)", "diff": ["+//    Utilities.show(\"formalParameters2VariableData called on \" + fps);", "-    //This is something of a hack.  The parameters to a static method can be referened within the method itself,", "-    //even though they are not declared to be static fields.  Since making them static has no effect on any other processing, go", "-    //ahead and make them static so that the type checking stage will be easier.", "+    // This is something of a hack.  The parameters to a static method can be referened within the method itself,", "+    // even though they are not declared to be static fields.  Since making them static has no effect on any other processing, go", "+    // ahead and make them static so that the type checking stage will be easier.", "-    ", "+", "-      SymbolData type = getSymbolData(vd.getType().getName(), si);", "+      String typeName = vd.getType().getName();", "+      SymbolData type = getSymbolData(typeName, si);", "-        type = d.getInnerClassOrInterface(vd.getType().getName());", "+        type = d.getInnerClassOrInterface(typeName);", "-        //if we still couldn't resolve sd, create a continuation for it.", "-        type = new SymbolData(d.getSymbolData().getName() + \"$\" + vd.getType().getName());", "-        d.getSymbolData().addInnerClass(type);", "-        type.setOuterData(d.getSymbolData());", "+        // If we still couldn't resolve sd, create a continuation for it.", "+        String qualifiedTypeName = d.getSymbolData().getName() + \".\" + typeName;", "+//        type.setOuterData(d.getSymbolData());", "+        if (_innerClassesToBeParsed.contains(qualifiedTypeName))", "+          type = addInnerSymbolData(si, qualifiedTypeName, d);", "+        else type = addSymbolData(si, typeName);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b26213bf4738adbb46c907692ca2191e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d)", "signatureAfterChange": "   protected String[] getFormalParameterMav(Data d)", "diff": ["-  protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d) {", "-    VariableData[] varData = new VariableData[fps.length];", "-    VariableDeclarator vd;", "-    String[] mav;", "-    ", "-    // This is something of a hack.  The parameters to a static method can be referenced within the method itself,", "-    // even though they are not declared to be static fields.  Making them static has no effect on any other processing.", "-    if (d instanceof MethodData && d.hasModifier(\"static\"))", "-      mav = new String[] {\"final\", \"static\"};", "-    else", "-      mav = new String[] {\"final\"};", "-    ", "-    for (int i = 0; i < varData.length; i++) {", "-      vd = fps[i].getDeclarator();", "-      String name = vd.getName().getText();", "-      SymbolData type = getSymbolData(vd.getType().getName(), vd.getType().getSourceInfo());", "-      ", "-      if (type == null) {", "-        //see if this is a partially qualified field reference", "-        type = d.getInnerClassOrInterface(vd.getType().getName());", "-      }", "-      ", "-      if (type == null) {", "-        //if we still couldn't resolve sd, create a continuation for it.", "-        String typeName = d.getSymbolData().getName() + \".\" + vd.getType().getName();", "-        type = new SymbolData(typeName);", "-        d.getSymbolData().addInnerClass(type);", "-        type.setOuterData(d.getSymbolData());", "-//        System.err.println(\"Creating continuation for \" + typeName + \" at FJV:232\");", "-        continuations.put(typeName, new Pair<SourceInfo, LanguageLevelVisitor>(vd.getType().getSourceInfo(), this));", "-      }", "-      ", "-      varData[i] = ", "-        new VariableData(name, new ModifiersAndVisibility(SourceInfo.NO_INFO, mav), type, true, d);", "-      varData[i].gotValue();", "-", "-    }", "-    return varData;", "+  protected String[] getFormalParameterMav(Data d) { ", "+    return (d.hasModifier(\"static\")) ? new String[] {\"static\"} : new String[] { };"]}], "num": 4747}
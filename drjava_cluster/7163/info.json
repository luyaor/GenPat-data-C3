{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ddeb80902ee131105880592ca81a11e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce775ba7e8a68a3b88eb32bb1cba0e47", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "commitAfterChange": "a2262b2230c42b5cda2b42cb16829b87b361f597", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public Object visit(ClassAllocation node)", "signatureAfterChange": "   public Object visit(ClassAllocation node)", "diff": ["+    Constructor cons = (Constructor)node.getProperty(NodeProperties.CONSTRUCTOR);", "+    Class[] typs = cons.getParameterTypes();", "+    ", "-      args = new Object[larg.size()];", "+      args = new Object[typs.length];", "-      while (it.hasNext()) {", "+      while (i < typs.length-1) {", "+      if(typs.length > 0){", "+        if(!cons.isVarArgs()){", "+          args[i++] = it.next().acceptVisitor(this);", "+        } else {", "+          args[i] = buildArrayOfRemainingArgs(typs, larg.size(), it);", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ece3706615d266d4f48be9f23a858a08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "2fc4395eb72dbc8caeb586fbd5d1fef990083e71", "commitAfterChange": "a2262b2230c42b5cda2b42cb16829b87b361f597", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Object visit(SimpleAllocation node)", "diff": ["+    Constructor cons = (Constructor)node.getProperty(NodeProperties.CONSTRUCTOR);", "+    Class[] typs = cons.getParameterTypes();", "+", "-      args = new Object[larg.size()];", "+      args = new Object[typs.length];", "-      while (it.hasNext()) {", "+      while (i < typs.length-1) {", "+      }", "+    ", "+      if(typs.length > 0){", "+        if(!cons.isVarArgs()){", "+          args[i++] = it.next().acceptVisitor(this);", "+        } else {", "+          args[i] = buildArrayOfRemainingArgs(typs, larg.size(), it);", "+        }"]}], "num": 7163}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcb4319f08cc5ae504d2a6c01c1d40e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ac86233cf8c265db3241cc7c572268", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 267, "signatureBeforeChange": "      public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs,                                      Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-  public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)", "+  public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs,", "+                                     Access.Module accessModule)", "-    return new ClassFinder(name, typeArgs, true).findSingleClass(t);", "+    return new ClassFinder(name, typeArgs, accessModule, true).findSingleClass(t);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a63e5509b68f80bdd60df011aa5cc5f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 247, "signatureBeforeChange": "      public boolean containsMethod(Type t, String name)", "signatureAfterChange": "      public boolean containsMethod(Type t, String name, Access.Module accessModule)", "diff": ["-  public boolean containsMethod(Type t, String name) { return new MethodFinder(name, false).hasMatch(t); }", "+  public boolean containsMethod(Type t, String name, Access.Module accessModule) {", "+    return new MethodFinder(name, accessModule, false).hasMatch(t);", "+  }"]}], "num": 19205}
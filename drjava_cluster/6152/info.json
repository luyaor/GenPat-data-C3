{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f9e88c73b778bc1e31282730792baec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b06b4e9fdd1d6a09a5056a557e0404e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 322, "methodNumberAfterChange": 342, "signatureBeforeChange": "           public StaticMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "     public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings, Options options)          throws EvaluatorException", "diff": ["+    public Access.Module accessModule() { return _delegate.accessModule(); }", "+    public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings, Options options) ", "+        throws EvaluatorException {", "+      return _delegate.evaluate(receiver, args, bindings, options); ", "+    }", "-          new Lambda2<DJMethod, SignatureChecker, StaticMethodInvocation>() {", "-          public StaticMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), ", "-                                                        checker.typeArguments());", "-            Type rawReturned = m.returnType();", "-            Type returned = substitute(substitute(rawReturned, classSigma), sigma);", "-            // TODO: Handle the thrown types", "-            return new StaticMethodInvocation(m, returned, checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd269f09d394677310b59828b439942a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 357, "signatureBeforeChange": "       public Predicate<DJClass> value(final Boolean includePrivate)", "signatureAfterChange": "     public Object evaluate(Object outer, Iterable<Object> args, RuntimeBindings bindings, Options options)          throws EvaluatorException", "diff": ["+    public Access.Module accessModule() { return _delegate.accessModule(); }", "+    public Object evaluate(Object outer, Iterable<Object> args, RuntimeBindings bindings, Options options) ", "+        throws EvaluatorException {", "+      return _delegate.evaluate(outer, args, bindings, options); ", "+    }", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }"]}], "num": 6152}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bca510c7290e19581ef18a3d8ef8694f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57acc8c1f3d7efafb31ed3fc79b6058b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessSequence.java", "commitBeforeChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "commitAfterChange": "fdb0eba529d65804f971cdb52c673713ef0d4616", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void connectProcess(Process p)", "signatureAfterChange": "   protected void connectProcess(Process p)", "diff": ["-    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+_index,", "-                                                      p.getInputStream(),", "-                                                      _combinedStdOutStream,", "-                                                      false,", "-                                                      PROCESS_SEQUENCE_THREAD_GROUP);", "-    _redirectors.add(r);", "-    r.start();", "-    r = new StreamRedirectThread(\"stderr Redirector \"+_index,", "-                                 p.getErrorStream(),", "-                                 _combinedStdErrStream,", "-                                 false,", "-                                 PROCESS_SEQUENCE_THREAD_GROUP);", "-    _redirectors.add(r);", "-    r.start();", "+    if (_stdOutRedirector==null) {", "+      _stdOutRedirector = new StreamRedirectThread(\"stdout Redirector \"+_index,", "+                                                   p.getInputStream(),", "+                                                   _combinedStdOutStream,", "+                                                   false/*close*/,", "+                                                   new ProcessSequenceThreadGroup(_combinedStdErrStream),", "+                                                   true/*keepRunning*/);", "+      _stdOutRedirector.start();", "+    }", "+    else {", "+      _stdOutRedirector.setInputStream(p.getInputStream());", "+    }", "+    if (_stdErrRedirector==null) {", "+      _stdErrRedirector = new StreamRedirectThread(\"stderr Redirector \"+_index,", "+                                                   p.getErrorStream(),", "+                                                   _combinedStdErrStream,", "+                                                   false/*close*/,", "+                                                   new ProcessSequenceThreadGroup(_combinedStdErrStream),", "+                                                   true/*keepRunning*/);", "+      _stdErrRedirector.start();", "+    }", "+    else {", "+      _stdErrRedirector.setInputStream(p.getErrorStream());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "972f1377b45fce0bcb7fdc17aca90e3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private synchronized void remove(DocManager toRemove)", "signatureAfterChange": "   private void add(DocManager dm)", "diff": ["-  private synchronized void remove(DocManager toRemove) {", "-    _lru.remove(toRemove);", "-    if (toRemove.isFirst()) toRemove.kickOut();", "-    if (_lru.size() > 0 )", "-      _lru.getFirst().setFirst(); // just in case the one removed was first", "+  private void add(DocManager dm) {", "+//    Utilities.showDebug(\"add \" + dm + \" to the QUEUE\\n\" + \"QUEUE = \" + _residentQueue);", "+    synchronized (dm) {", "+      if (dm == null) throw ", "+        new IllegalArgumentException(\"Cannot add a null document to the DocumentCache\");", "+      if (dm.isUnmanaged() || dm.isUntitled() ) return;", "+    }", "+    DocManager removed = null;", "+    synchronized (this) {", "+      if (_residentQueue.contains(dm)) return;", "+      _residentQueue.add(dm);", "+      if (_residentQueue.size() > CACHE_SIZE) removed = _residentQueue.remove(0);", "+    }", "+    if (removed != null) synchronized (removed) { removed.kickOut(); }"]}], "num": 30569}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68590a1a85b5263d45d587ebcf93d6a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b6ecc590732e8003e0b4b3d8c5524d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void testSimpleAnonymousClassInstantiationHelper()", "signatureAfterChange": "          public void testSimpleAnonymousClassInstantiationHelper()", "diff": ["-     SimpleAnonymousClassInstantiation basic = ", "-       new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                             new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                             new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-     _iv._package = \"i.like\";", "-     _iv.simpleAnonymousClassInstantiationHelper(basic, _sd1);", "-     assertEquals(\"There should be no errors\", 0, errors.size());", "-     SymbolData obj = symbolTable.get(\"java.lang.Object\");", "-     assertNotNull(\"Object should be in the symbol table\", obj);", "-     assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "-     SymbolData inner = _sd1.getInnerClasses().get(0);", "-     assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "-     assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "-     assertEquals(\"The inner class should have proper super class\", obj, inner.getSuperClass());", "-     assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "-     assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());", "+      SimpleAnonymousClassInstantiation basic = ", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      _iv._package = \"i.like\";", "+      _iv.simpleAnonymousClassInstantiationHelper(basic, _sd1);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+      assertNotNull(\"Object should be in the symbol table\", obj);", "+      assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "+      SymbolData inner = _sd1.getInnerClasses().get(0);", "+      assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "+      assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "+      assertEquals(\"The inner class should have proper super class\", obj, inner.getSuperClass());", "+      assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "+      assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6acb47df34fd9c92bef8f0446c237ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 33, "signatureBeforeChange": "           public void testComplexAnonymousClassInstantiationHelper()", "signatureAfterChange": "               public void testComplexAnonymousClassInstantiationHelper()", "diff": ["-     ComplexAnonymousClassInstantiation basic = new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java.lang.Object\")),", "-                                                                                new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]), ", "-                                                                                new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                                                                new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-", "-     _iv._package = \"i.like\";", "-     _iv.complexAnonymousClassInstantiationHelper(basic, _sd1);", "-     assertEquals(\"There should be no errors\", 0, errors.size());", "-     SymbolData obj = symbolTable.get(\"java.lang.Object\");", "-     assertNotNull(\"Object should be in the symbol table\", obj);", "-     SymbolData objInner = symbolTable.get(\"java.lang.Object.Inner\");", "-     assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "-     SymbolData inner = _sd1.getInnerClasses().get(0);", "-     assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "-     assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "-     assertEquals(\"The inner class should have null as its super class\", null, inner.getSuperClass());", "-     assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "-     assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());", "+      ComplexAnonymousClassInstantiation basic = new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java.lang.Object\")),", "+                                                                                        new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]), ", "+                                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                                                                        new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ", "+      _iv._package = \"i.like\";", "+      _iv.complexAnonymousClassInstantiationHelper(basic, _sd1);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+      assertNotNull(\"Object should be in the symbol table\", obj);", "+      SymbolData objInner = LanguageLevelConverter.symbolTable.get(\"java.lang.Object.Inner\");", "+      assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "+      SymbolData inner = _sd1.getInnerClasses().get(0);", "+      assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "+      assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "+      assertEquals(\"The inner class should have null as its super class\", null, inner.getSuperClass());", "+      assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "+      assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());"]}], "num": 11631}
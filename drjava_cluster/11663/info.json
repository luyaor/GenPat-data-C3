{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "753c58d5ed66363b33027378a7a61cb6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33e7b94cbd8c48c9f4c87457c0eef316", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "37449cba11f74bdf3921e2b515b5228eef23235b", "commitAfterChange": "43a72be50c3246f8e631a488321fd0367ada5a58", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-   */", "+    */", "-    Iterable<JarJDKToolsLibrary> collapsed = IterUtil.reverse(IterUtil.collapse(results.values()));", "-    Iterable<JarJDKToolsLibrary> compoundCollapsed = IterUtil.reverse(IterUtil.collapse(compoundResults.values()));", "-    ", "-    // Get completed compound JDKs by going through the list of compound JDKs and finding full JDKs that", "-    // complete them", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> completedResults =", "-      getCompletedCompoundResults(model, collapsed, compoundCollapsed);", "-    ", "-    JDKToolsLibrary.msg(\"Result:\");", "-    Iterable<JarJDKToolsLibrary> result = IterUtil.", "-      compose(collapsed,IterUtil.reverse(IterUtil.collapse(completedResults.values())));", "-    for(JarJDKToolsLibrary lib: result) {", "-      JDKToolsLibrary.msg(\"Found library: \"+lib);", "+    Iterable<JarJDKToolsLibrary> collapsed = IterUtil.reverse(IterUtil.collapse(results.values()));  // Are versions in results subsequently ignored?", "+        ", "+    JDKToolsLibrary.msg(\"***** Found the following base libraries *****\");", "+    for (JarJDKToolsLibrary lib: collapsed) {", "+      JDKToolsLibrary.msg(\"  Base library: \" + lib);", "+    Iterable<JarJDKToolsLibrary> compoundCollapsed = IterUtil.reverse(IterUtil.collapse(compoundResults.values()));", "+    ", "+    // Get completed compound JDKs by going through the list of compound JDKs and finding full JDKs that complete them", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> completedResults =", "+      getCompletedCompoundResults(model, collapsed, compoundCollapsed);", "+", "+    JDKToolsLibrary.msg(\"***** Found the following completed compound libraries *****\");", "+    for (JarJDKToolsLibrary lib: IterUtil.collapse(completedResults.values())) {", "+      JDKToolsLibrary.msg(\"  Compound library: \" + lib);", "+    }", "+    ", "+    Iterable<JarJDKToolsLibrary> result = ", "+      IterUtil.compose(collapsed, IterUtil.reverse(IterUtil.collapse(completedResults.values())));", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6beda617b811265045be02869706f5f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "37449cba11f74bdf3921e2b515b5228eef23235b", "commitAfterChange": "43a72be50c3246f8e631a488321fd0367ada5a58", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected static Map<FullVersion, Iterable<JarJDKToolsLibrary>>     getCompletedCompoundResults(GlobalModel model,                                 Iterable<JarJDKToolsLibrary> collapsed,                                 Iterable<JarJDKToolsLibrary> compoundCollapsed)", "signatureAfterChange": "   protected static Map<FullVersion, Iterable<JarJDKToolsLibrary>>     getCompletedCompoundResults(GlobalModel model, Iterable<JarJDKToolsLibrary> collapsed,                                 Iterable<JarJDKToolsLibrary> compoundCollapsed)", "diff": ["-    getCompletedCompoundResults(GlobalModel model,", "-                                Iterable<JarJDKToolsLibrary> collapsed,", "+    getCompletedCompoundResults(GlobalModel model, Iterable<JarJDKToolsLibrary> collapsed,", "-      JDKToolsLibrary.msg(\"compoundLib: \"+compoundLib);", "-      JDKToolsLibrary.msg(\"    \"+compoundLib.location());", "+      JDKToolsLibrary.msg(\"compoundLib: \" + compoundLib);", "+      JDKToolsLibrary.msg(\"    \" + compoundLib.location());", "-        if (!javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "-        JDKToolsLibrary.msg(\"    exact? \"+javaLib);", "+        if (! javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "+        JDKToolsLibrary.msg(\"    exact? \" + javaLib);  // Is exact comparison necessary?  It never seems to match.", "-            (javaVersion.maintenance()==compoundVersion.maintenance()) &&", "-            (javaVersion.update()==compoundVersion.update()) &&", "-            (javaVersion.release()==compoundVersion.release()) &&", "+            (javaVersion.maintenance() == compoundVersion.maintenance()) &&", "+            (javaVersion.update() == compoundVersion.update()) &&", "+            (javaVersion.release() == compoundVersion.release()) &&", "-      if (found==null) {", "+      if (found == null) {", "-          if (!javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "-          JDKToolsLibrary.msg(\"    major? \"+javaLib);", "+          if (! javaLib.jdkDescriptor().isBaseForCompound()) continue; // javaLib not suitable as base", "+          JDKToolsLibrary.msg(\"    major? \" + javaLib);", "-      if (found!=null) {", "+      if (found != null) {", "-          JDKToolsLibrary.msg(\"    ==> \"+lib.version());", "+          JDKToolsLibrary.msg(\"    based on version \" + lib.version());"]}], "num": 11663}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aff9403d713993c56f1e021736603726", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddca4202b51b9ac107a84cd2df43e8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "            public void testForInstanceOfExpressionOnly()", "signatureAfterChange": "            public void testForInstanceOfExpressionOnly()", "diff": ["-      InstanceofExpression ioe = new InstanceofExpression(SourceInfo.NO_INFO,          ", "-                                                          new NullLiteral(SourceInfo.NO_INFO),", "-                                                          JExprParser.NO_TYPE);  // Object type", "-      ", "-      assertEquals(\"When value_result is subtype of type_result, return BOOLEAN type_result.\", sd2.getInstanceData(), ", "+      InstanceofExpression ioe = new InstanceofExpression(SourceInfo.NONE, NULL_LITERAL, JExprParser.NO_TYPE);", "+      assertEquals(\"When valueRes is subtype of typeRes, return BOOLEAN typeRes.\", sd2.getInstanceData(), ", "-      assertEquals(\"When type_result is subtype of value_result, return BOOLEAN type_result.\", sd2.getInstanceData(), ", "+      assertEquals(\"When typeRes is subtype of valueRes, return BOOLEAN typeRes.\", sd2.getInstanceData(), ", "-      assertEquals(\"When type_result and value_result are not subtypes of each other, return BOOLEAN type_result\", ", "+      assertEquals(\"When typeRes and valueRes are not subtypes of each other, return BOOLEAN typeRes\", ", "-      assertEquals(\"When value_result is a SymbolData, return BOOLEAN type_result\",  sd2.getInstanceData(), ", "+      assertEquals(\"When valueRes is a SymbolData, return BOOLEAN typeRes\",  sd2.getInstanceData(), "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd89af75c1f6ed3d30607eb90e780e0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "          public void testForCastExpressionOnly()", "signatureAfterChange": "          public void testForCastExpressionOnly()", "diff": ["-      CastExpression cd = new CastExpression(SourceInfo.NO_INFO, ", "-                                             JExprParser.NO_TYPE, ", "-                                             new NullLiteral(SourceInfo.NO_INFO));", "-      ", "-      assertEquals(\"When value_result is subtype of type_result, return type_result.\", sd1.getInstanceData(), ", "+      CastExpression cd = new CastExpression(SourceInfo.NONE, JExprParser.NO_TYPE, NULL_LITERAL);", "+      assertEquals(\"When valueRes is subtype of typeRes, return typeRes.\", sd1.getInstanceData(), ", "-      assertEquals(\"When type_result is subtype of value_result, return type_result.\", sd3.getInstanceData(), ", "+      assertEquals(\"When typeRes is subtype of valueRes, return typeRes.\", sd3.getInstanceData(), ", "-      assertEquals(\"When type_result and value_result are not subtypes of each other, return type_result\", ", "+      assertEquals(\"When typeRes and valueRes are not subtypes of each other, return typeRes\", ", "-      assertEquals(\"When value_result is a SymbolData, return type_result\", fooMama.getInstanceData(), ", "+      assertEquals(\"When valueRes is a SymbolData, return typeRes\", fooMama.getInstanceData(), "]}], "num": 3462}
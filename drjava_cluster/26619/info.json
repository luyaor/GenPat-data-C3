{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cf04b283a894efe0a9b0d9b30d2366b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0185ac99dc8d3a0f43046df2c65e52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "6cf7109c051951c37bb5c3d5a185c43cb04511a0", "commitAfterChange": "5a0b0e9e35705d89ba0a2d05c390e3df356c459c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "signatureAfterChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-      Collection<INavigationListener<? super ItemT>> listeners = parent.getNavigatorListeners();", "-      Iterator<INavigationListener<? super ItemT>> it = listeners.iterator();", "-      while (it.hasNext()) {", "-        INavigationListener<? super ItemT> listener = it.next();", "-        child.addNavigationListener(listener);", "-        parent.removeNavigationListener(listener);", "-        ", "-        // I don't understand the motivation behind this line.  Is it possible for", "-        // it to become invalid?  If so, what's to prevent that from happening", "-        // again after this line but before we call next()?", "-        it = listeners.iterator();", "-      }", "+      for (INavigationListener nl: parent.getNavigatorListeners())  child.addNavigationListener(nl);", "+      for (FocusListener fl: parent.getFocusListeners())  child.addFocusListener(fl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f6277329f56fcc1f51e6181712b00e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void migrateNavigatorItems(IDocumentNavigator child, IDocumentNavigator parent)", "signatureAfterChange": "     private void migrateNavigatorItems(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-    private void migrateNavigatorItems(IDocumentNavigator child, IDocumentNavigator parent) {", "-      Enumeration<INavigatorItem> enumerator =  parent.getDocuments();", "+    // long as it extends ItemT.", "+    private void migrateNavigatorItems(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent) {", "+      Enumeration<ItemT> enumerator =  parent.getDocuments();", "-        INavigatorItem navitem = enumerator.nextElement();", "+        ItemT navitem = enumerator.nextElement();", "-        enumerator = parent.getDocuments();", "+        ", "+        // I don't understand the motivation behind this line.  Is it possible for", "+        // enumerator to become invalid?  If so, what's to prevent that from happening", "+        // again after this line but before we call nextElement()?", "+        enumerator = parent.getDocuments(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2498322bd09ff0ce69f51997fee03f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void migrateListeners(IDocumentNavigator child, IDocumentNavigator parent)", "signatureAfterChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-    private void migrateListeners(IDocumentNavigator child, IDocumentNavigator parent) {", "-      Collection<INavigationListener> listeners = parent.getNavigatorListeners();", "-      Iterator<INavigationListener> it = listeners.iterator();", "+    // long as it extends ItemT.", "+    private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent) {", "+      Collection<INavigationListener<? super ItemT>> listeners = parent.getNavigatorListeners();", "+      Iterator<INavigationListener<? super ItemT>> it = listeners.iterator();", "-        INavigationListener listener = it.next();", "+        INavigationListener<? super ItemT> listener = it.next();", "+        ", "+        // I don't understand the motivation behind this line.  Is it possible for", "+        // it to become invalid?  If so, what's to prevent that from happening", "+        // again after this line but before we call next()?"]}], "num": 26619}
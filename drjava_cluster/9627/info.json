{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d0a53773e9e9144ff1f9a29d7276fa1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4495f3e69694d0425582e377bb57118c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "91dc93d09494b5a49c2be62b759aefe74644dd8b", "commitAfterChange": "6e79548f1347834e92c51c9baf527da686346e86", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testRelativePath() throws IOException, InvalidPackageException", "signatureAfterChange": "   public void testRelativePath() throws IOException, InvalidPackageException", "diff": ["-    // OK, we have to create a directory with a hard-coded name in the", "-    // current working directory, so we'll make it strange. If this ", "-    // directory happens to exist, it'll be deleted.", "-    File newDirectory = new File(funnyName);", "-    if (newDirectory.exists()) {", "-      FileOps.deleteDirectory(newDirectory);", "-    }", "-", "-    assertTrue(\"directory created OK\", newDirectory.mkdir());", "+    File newDirectory = mkTempDir(funnyName);", "-      FileOps.writeStringToFile(relativeFile,", "-                                \"package \" + funnyName + \"; class X {}\");", "-      assertTrue(\"file exists\", relativeFile.exists());", "-", "-      String path = relativeFile.getPath();", "-      DrJava.openCommandLineFiles(_mf, new String[] { path });", "-", "-      List<OpenDefinitionsDocument> docs = _mf.getModel().getDefinitionsDocuments();", "-      assertEquals(\"Number of open documents\", 1, docs.size());", "-", "-      OpenDefinitionsDocument doc = docs.get(0);", "-", "-      assertEquals(\"OpenDefDoc file is the right one and is absolute\",", "-                   relativeFile.getAbsoluteFile(),", "-                   doc.getFile());", "-", "-      // The source root should be the current directory (as", "-      // an absolute path, of course).", "-      File root = doc.getSourceRoot();", "-      assertEquals(\"source root\", new File(\"\").getAbsoluteFile(), root);", "+      checkFile(relativeFile, funnyName);", "+    }", "+    catch (Exception e) {", "+      fail(\"Exception thrown: \" + StringOps.getStackTrace(e));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47b63ecd348d9936ac52e54a96994567", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtilTest.java", "commitBeforeChange": "fb074680a667c1bef445c8882705c591e6d2e32a", "commitAfterChange": "cf20ebf3ed8f70fab233d795a534c6fbf0907d4b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testCharSequenceIterable()", "signatureAfterChange": "      public void testCharSequenceIterable()", "diff": ["-    assertTrue(iter.hasNext());", "-    assertEquals('H', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('a', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('p', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('p', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('y', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals(' ', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('d', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('a', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('y', iter.next());", "-    assertFalse(iter.hasNext());", "+    assertIterator(iter, 'H', 'a', 'p', 'p', 'y', ' ', 'd', 'a', 'y');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1b85848d0e6eecee0689a8703b20cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtilTest.java", "commitBeforeChange": "fb074680a667c1bef445c8882705c591e6d2e32a", "commitAfterChange": "cf20ebf3ed8f70fab233d795a534c6fbf0907d4b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public void testArrayIterable()", "signatureAfterChange": "    public void testArrayIterable()", "diff": ["-    assertTrue(intIter.hasNext());", "-    assertEquals(1, intIter.next());", "-    assertTrue(intIter.hasNext());", "-    assertEquals(1, intIter.next());", "-    assertTrue(intIter.hasNext());", "-    assertEquals(2, intIter.next());", "-    assertTrue(intIter.hasNext());", "-    assertEquals(3, intIter.next());", "-    assertTrue(intIter.hasNext());", "-    assertEquals(5, intIter.next());", "-    assertFalse(intIter.hasNext());", "+    assertIterator(intIter, 1, 1, 2, 3, 5);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db69c378ea26f324495a008e8c5110cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionMapLoaderTest.java", "commitBeforeChange": "ab56c47a9f6c097d16c8c38565dec5edb6fb4d6f", "commitAfterChange": "0d80b47fa71022c1d579ad193bcaa14dd927885e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testProperConfigSet() throws IOException", "signatureAfterChange": "          public void testProperConfigSet() throws IOException", "diff": ["-\tInputStream is = new StringInputStream(OPTION_DOC);", "+\tcheckSet(OPTION_DOC,new Integer(-1),\"foo\",\"bar\",\"baz\",1);", "+    }", "-\t\t     map.getOption(INDENT_LEVEL),new Integer(-1));", "-\tassertEquals(map.getOption(JAVAC_LOCATION),\"foo\");", "-\tassertEquals(map.getOption(JSR14_LOCATION),\"bar\");", "-\tassertEquals(map.getOption(JSR14_COLLECTIONSPATH),\"baz\");", "-\tassertEquals(map.getOption(EXTRA_CLASSPATH).elementAt(0),\"bam\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df501c5b245faab0ac70bae7a91a19b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-        resultExp = new VariableAccess(first.image(), node.getFilename(), first.beginLine(),", "-                                       first.beginColumn(), first.endLine(), first.endColumn());", "+        resultExp = new VariableAccess(first.image(), first.getSourceInfo()); ", "-        resultExp = new SimpleFieldAccess(first.image(), node.getFilename(), first.beginLine(),", "-                                          first.beginColumn(), first.endLine(), first.endColumn());", "+        resultExp = new SimpleFieldAccess(first.image(), first.getSourceInfo());", "-            ReferenceTypeName rt = new ReferenceTypeName(classIds, node.getFilename(),", "-                                                         first.beginLine(), first.beginColumn(),", "-                                                         last.endLine(),  last.endColumn());", "-            resultExp = new StaticFieldAccess(rt, memberName.image(), rt.getFilename(),", "-                                              first.beginLine(), first.beginColumn(),", "-                                              memberName.endLine(), memberName.endColumn());", "+            ReferenceTypeName rt = new ReferenceTypeName(classIds, SourceInfo.span(first, last)); ", "+            resultExp = new StaticFieldAccess(rt, memberName.image(), SourceInfo.span(first, memberName)); ", "-          return new ReferenceTypeName(classIds, node.getFilename(),", "-                                       first.beginLine(), first.beginColumn(),", "-                                       last.endLine(),  last.endColumn());", "+          return new ReferenceTypeName(classIds, SourceInfo.span(first, last));", "-        resultExp = new ObjectFieldAccess(resultExp, field.image(), node.getFilename(), ", "-                                          first.beginLine(), first.beginColumn(),", "-                                          field.endLine(), field.endColumn());", "+        resultExp = new ObjectFieldAccess(resultExp, field.image(), SourceInfo.span(first, field));"]}], "num": 9627}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c138ede106239a540b972265b2713eb1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ea359f19aeef4c505daf18591d1909", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "4fb080a38871d6561e99bfdfdb664ff987fb15c5", "commitAfterChange": "d8298bba22e8675e12094f851d61d88ab6c6f68a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public R getRegionAt(OpenDefinitionsDocument odd, int offset)", "signatureAfterChange": "   public R getRegionAt(OpenDefinitionsDocument odd, int start, int end)", "diff": ["+    */", "+  public R getRegionAt(OpenDefinitionsDocument odd, int start, int end) {", "+    final int lineStartOffset = odd.getLineStartPos(start);", "+    final int lineEndOffset = odd.getLineEndPos(end);", "+    // get all the regions after the beginning of the start line and before the end of the end line", "+    SortedSet<R> range = getRangeSet((R) newDocumentRegion(odd, lineStartOffset, lineStartOffset),", "+                                     (R) newDocumentRegion(odd, lineEndOffset+1, lineEndOffset+1));", "+    if (range.isEmpty()) return null;", "-      */", "-    public R getRegionAt(OpenDefinitionsDocument odd, int offset) {", "-      ", "-      @SuppressWarnings(\"unchecked\")", "-      SortedSet<R> tail = getTailSet((R) newDocumentRegion(odd, offset, offset));", "-      if (tail.isEmpty()) return null;", "-      R match = tail.first();", "-      if (match.getStartOffset() == offset) return match;", "-      return null;", "-    }", "+    // now see if there is a region that overlaps with the region [start,end]", "+    for(R r: range) {", "+      final int rStart = r.getStartOffset();", "+      final int rEnd = r.getEndOffset();", "+      // is rStart not past the [start,end] region?", "+      if  (rStart<=end) {", "+        // is rEnd inside [start,end]?", "+        if ((rEnd>=start) && (rEnd<=end)) {", "+//          // r contained? [start...<rStart...rEnd>...end]", "+//          if (rStart>=start) { return r; }", "+          // r overlaps left? <rStart...[start...rEnd>...end]", "+          if (rStart<=start) { return r; }", "+        }", "+        // is rEnd on the right side of [start,end]?", "+        else if ((rEnd>=start) && (rEnd>=end)) {", "+          // r encloses? <rStart...[start...end]...rEnd>", "+          if (rStart<=start) { return r; }", "+          // r overlaps right? [start...<rStart...end]...rEnd>", "+          if (rStart>=start) { return r; }", "+        }", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6008c1bb30ef0c03abafe27d2ff81971", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "d884ae55e9471d604870827048329b58394dd950", "commitAfterChange": "28bca5adabaaf178bdf954808155389f93ed51fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public R getRegionAt(OpenDefinitionsDocument odd, int start, int end)", "signatureAfterChange": "     public R getRegionAt(OpenDefinitionsDocument odd, int offset)", "diff": ["-    */", "-  public R getRegionAt(OpenDefinitionsDocument odd, int start, int end) {", "-    final int lineStartOffset = odd.getLineStartPos(start);", "-    final int lineEndOffset = odd.getLineEndPos(end);", "-    // get all the regions after the beginning of the start line and before the end of the end line", "-    @SuppressWarnings(\"unchecked\")", "-    SortedSet<R> range = getRangeSet((R) newDocumentRegion(odd, lineStartOffset, lineStartOffset),", "-                                     (R) newDocumentRegion(odd, lineEndOffset+1, lineEndOffset+1));", "-    if (range.isEmpty()) return null;", "-    // now see if there is a region that overlaps with the region [start,end]", "-    for(R r: range) {", "-      final int rStart = r.getStartOffset();", "-      final int rEnd = r.getEndOffset();", "-      // is rStart not past the [start,end] region?", "-      if  (rStart<=end) {", "-        // is rEnd inside [start,end]?", "-        if ((rEnd>=start) && (rEnd<=end)) {", "-//          // r contained? [start...<rStart...rEnd>...end]", "-//          if (rStart>=start) { return r; }", "-          // r overlaps left? <rStart...[start...rEnd>...end]", "-          if (rStart<=start) { return r; }", "-        }", "-        // is rEnd on the right side of [start,end]?", "-        else if ((rEnd>=start) && (rEnd>=end)) {", "-          // r encloses? <rStart...[start...end]...rEnd>", "-          if (rStart<=start) { return r; }", "-          // r overlaps right? [start...<rStart...end]...rEnd>", "-          if (rStart>=start) { return r; }", "-        }", "-      }", "-    }", "-    return null;", "-  }", "+      */", "+    public R getRegionAt(OpenDefinitionsDocument odd, int offset) { return getRegionContaining(odd, offset, offset); }"]}], "num": 15061}
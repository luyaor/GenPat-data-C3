{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6832ed4bea3cbfca42265c69875ad8e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a062a915be0a09007c7c51d89157f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "   public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["+        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    _model.newFile().addFinalizationListener(fldoc);", "+    _frame.getCurrentDefPane().addFinalizationListener(fl);", "+    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    assertEquals(\"all the panes have been garbage collected\", 5, _finalCount);", "-    assertEquals(\"all the defdocs have been garbage collected\", 5, _finalDocCount);", "+    System.out.println(\"Current: \" + _frame.getCurrentDefPane().hashCode());", "+    ", "+//    assertEquals(\"all the panes should have been garbage collected\", 6, _finalCount);", "+    assertEquals(\"all the defdocs should have been garbage collected\", 6, _finalDocCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4614078fc66bd454287cb37ecfcdcb98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "e9b6b2fb912f9bb858bd9b4e8c93160bab9b774c", "commitAfterChange": "9d83c5e72c3c3a4b777224dfc83ca830e4a2d380", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public static FullVersion guessVersion(File f, JDKDescriptor desc)", "signatureAfterChange": "      public static FullVersion guessVersion(File f, JDKDescriptor desc)", "diff": ["-    if (result == null || result.majorVersion().equals(JavaVersion.UNRECOGNIZED)) {", "+    System.out.println(f+\" After walking directories: \"+result);", "+    if (result == null || result.majorVersion().equals(JavaVersion.UNRECOGNIZED) ||", "+        result.majorVersion().equals(JavaVersion.FUTURE)) {", "+      System.out.println(f+\" null or UNRECOGNIZED or FUTURE\");", "+        ", "+        System.out.println(f+\" After manifest: \"+result);", "+        ", "+        // still unknown or future", "+        if (result == null || result.majorVersion().equals(JavaVersion.UNRECOGNIZED) ||", "+            result.majorVersion().equals(JavaVersion.FUTURE)) {", "+          System.out.println(f+\" null or UNRECOGNIZED or FUTURE\");", "+          // look for the first class file", "+          Enumeration<JarEntry> jes = jf.entries();", "+          while(jes.hasMoreElements()) {", "+            JarEntry je = jes.nextElement();", "+            if (je.getName().endsWith(\".class\")) {", "+              result = JavaVersion.parseClassVersion(jf.getInputStream(je)).fullVersion();", "+              break;", "+            }", "+          }", "+        }", "+      ", "+      System.out.println(f+\" After all: \"+result);", "+      ", "+        System.out.println(f+\" null or UNRECOGNIZED or FUTURE\");", "-        parsedVersion = result.versionString();", "+      ", "+      parsedVersion = result.versionString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e29ed7ffc29047dbe5cf52b4379bd3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "          public void end()", "signatureAfterChange": "          public void end()", "diff": ["-      System.out.println(\"Statements with errors: \" + sizeString(_errors));", "-      if (_verbose) { dump(_errors.secondSet()); }", "+      System.out.println(\"Common statements with errors: \" + sizeString(_commonErrors));", "+      if (_verbose) { dump(_commonErrors.secondSet()); }", "+      System.out.println(\"Left statements with errors: \" + sizeString(_leftErrors));", "+      if (_verbose) { dump(_leftErrors.secondSet()); }", "+      System.out.println(\"Right statements with errors: \" + sizeString(_rightErrors));", "+      if (_verbose) { dump(_rightErrors.secondSet()); }", "+      System.out.println(\"Polymorphic declarations: \" + sizeString(_polymorphicDeclarations));", "+      if (_verbose) { dump(_polymorphicDeclarations.secondSet()); }", "+      System.out.println(\"Simple wildcards: \" + sizeString(_simpleWildcards));", "+      if (_verbose) { dump(_simpleWildcards.secondSet()); }", "+      System.out.println(\"Upper-bounded wildcards: \" + sizeString(_extendsWildcards));", "+      if (_verbose) { dump(_extendsWildcards.secondSet()); }", "+      System.out.println(\"Lower-bounded wildcards: \" + sizeString(_superWildcards));", "+      if (_verbose) { dump(_superWildcards.secondSet()); }"]}], "num": 19853}
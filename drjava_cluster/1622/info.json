{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da186fa462a03057f9519692b53c4958", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd8d21b01a3a884f187bfe7d4823a46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+   ", "-      int start, len;", "+      int start, len, docLen;", "-      if (!_searchBackwards) {", "-        start = _current.getOffset();", "-        len = _doc.getLength() - start;", "+      _doc.acquireReadLock();  ", "+      try {", "+        docLen = _doc.getLength();", "+        if (!_searchBackwards) {", "+          start = _current.getOffset();", "+          len = docLen - start;", "+        }", "+        else {", "+          start = 0;", "+          len = _current.getOffset();", "+        }", "+        findSpace = _doc.getText(start, len);", "-      else {", "-        start = 0;", "-        len = _current.getOffset();", "-      }", "-      findSpace = _doc.getText(start, len);", "+      finally { _doc.releaseReadLock(); }", "+      ", "-        _current = _doc.createPosition(foundOffset);", "+        _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc", "-          if (!_searchBackwards) {", "-            start = 0;", "-            len = _current.getOffset() + (_findWord.length() - 1);", "-            if (len > _doc.getLength()) len = _doc.getLength();", "+          ", "+          _doc.acquireReadLock();  ", "+          try { ", "+            docLen = _doc.getLength(); ", "+            if (!_searchBackwards) {", "+              start = 0;", "+              len = _current.getOffset() + (_findWord.length() - 1);", "+              if (len > docLen) len = docLen;", "+            }", "+            else {  // found it", "+              start = _current.getOffset() - (_findWord.length() - 1);", "+              if (start < 0) start = 0;", "+              len = docLen - start;", "+            }", "+            findSpace = _doc.getText(start, len);", "-          else {  // found it", "-            start = _current.getOffset() - (_findWord.length() - 1);", "-            if (start < 0) start = 0;", "-            len = _doc.getLength() - start;", "-          }", "-          findSpace = _doc.getText(start, len);", "+          finally { _doc.releaseReadLock(); }", "-            _current = _doc.createPosition(foundOffset);", "+            _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5a17e1f11654b2b555c768c123a1c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "commitAfterChange": "d61b8181e3991377c3e72e5da1d438e3d26d3479", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-    */", "-    public FindResult findNext() {", "-        try", "-        {", "-            //String searchDocument =", "-            //    _doc.getText(searchOriginLocation, _doc.getLength() - searchOriginLocation) + ", "-            //    _doc.getText(0, searchOriginLocation);", "+   */", "+  public FindResult findNext() {", "+    try {", "+      //String searchDocument =", "+      //    _doc.getText(searchOriginLocation, _doc.getLength() - searchOriginLocation) +", "+      //    _doc.getText(0, searchOriginLocation);", "-\t    // If the user just found and toggled the \"Search Backwards\"", "-\t    // option, we should skip the first find.", "-\t    if (_skipOneFind) {", "-                ", "-\t\tint wordLength = _lastFindWord.length();", "-\t\tif (!_searchBackwards) {", "-\t\t    setPosition(getCurrentOffset() + wordLength);", "-\t\t}", "-\t\telse {", "-\t\t    setPosition(getCurrentOffset() - wordLength);", "-\t\t}", "-\t\tpositionChanged();", "-\t    }", "-            ", "+      // If the user just found and toggled the \"Search Backwards\"", "+      // option, we should skip the first find.", "+      if (_skipOneFind) {", "-            int searchOriginLocation = getCurrentOffset();", "-            this._wrapped = false;", "-            String searchDocument = _doc.getText(0, _doc.getLength());", "-", "-            if(indexOf(searchDocument, this._findWord) != -1)", "-            {", "-                return findNextHelp(searchDocument, searchOriginLocation);", "-            }", "-            else", "-            { ", "-                return new FindResult(_doc, -1, true);", "-            }", "+        int wordLength = _lastFindWord.length();", "+        if (!_searchBackwards) {", "+          setPosition(getCurrentOffset() + wordLength);", "-        catch(BadLocationException e)", "-        {", "-            throw new RuntimeException(e.getMessage());", "+        else {", "+          setPosition(getCurrentOffset() - wordLength);", "+        positionChanged();", "+      }", "+", "+", "+      int searchOriginLocation = getCurrentOffset();", "+      _wrapped = false;", "+      String searchDocument = _doc.getText(0, _doc.getLength());", "+", "+      if (indexOf(searchDocument, _findWord) != -1) {", "+        return findNextHelp(searchDocument, searchOriginLocation);", "+      }", "+      else {", "+        return new FindResult(_doc, -1, true);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      throw new RuntimeException(e.getMessage());", "+    }", "+  }"]}], "num": 1622}
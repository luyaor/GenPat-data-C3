{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cd112e0374ff3854d2701b4745be39c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13cbc042501294915f3de9771e21ac0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "commitAfterChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private void _setupResourceLocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupResourceLocPanel(ConfigPanel panel)", "diff": ["-                                                         \"<html>Restore last working directory of<br>the Interactions pane on start up</html>\", this,", "+                                                         \"<html><p align=\\\"right\\\">\"+StringOps.splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",", "+                                                                                                                           33, \"<br>\", SEPS), this,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf7da843583ae678108697b7d2e6b9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "commitAfterChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 58, "signatureBeforeChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "signatureAfterChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "diff": ["+  ", "-    _model.printDebugMessage(\"The current thread has been set.\");", "+    _model.printDebugMessage(\"The current thread is now \" + thread.getName() + \".\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37ddc3f0476d081b2a613d92969163a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "commitAfterChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "methodNumberBeforeChange": 522, "methodNumberAfterChange": 522, "signatureBeforeChange": "      private void _showError(Throwable e, String title, String message)", "signatureAfterChange": "      private void _showError(Throwable e, String title, String message)", "diff": ["-  private void _showError(Throwable e, String title, String message) {", "-    JOptionPane.showMessageDialog(this, message + \"\\n\" + e, title, JOptionPane.ERROR_MESSAGE);", "+  private void _showError(Throwable e, String title, String message) {    ", "+    JOptionPane.showMessageDialog(this, message + \"\\n\" + e + \"\\n\"+ StringOps.getStackTrace(e),", "+                                  title, JOptionPane.ERROR_MESSAGE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e657d2358c93e038e1628eb8ed7ae31", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentTest.java", "commitBeforeChange": "5944dd2b12a74ebad6e3549d813d2dd557403c7e", "commitAfterChange": "53735c967d2add6a16ab5776bac9111426f41996", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testInsertNewLine() throws DocumentAdapterException", "signatureAfterChange": "   public void testInsertNewLine() throws DocumentAdapterException", "diff": ["-                 \"co\\nmmand\",", "+                 \"co\" + System.getProperty(\"line.separator\") + \"mmand\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ae3013c5c0a15607909f3bc1992ac48", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaSurveyPopup.java", "commitBeforeChange": "2f4a42f54aaa74c25ba0a929e664640f896ec43a", "commitAfterChange": "d73d2cacf79884db0dae830f87bb3795eb5cd6ef", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected void yesAction()", "signatureAfterChange": "      protected void yesAction()", "diff": ["-      String result = getSurveyURL();", "+      // append build time here so it does not change when comparing the survey information", "+      // to the information submitted the last time; the revision number does matter, though", "+      String result = getSurveyURL()+\"&buildtime=\"+Version.getBuildTimeString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5460a7d07159955974a2c591eb322f32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dd4842ca8ba89600798d5ff08666825edfadfb74", "commitAfterChange": "3e6dcdfe0dc2a3a2b00da441b478134258a2740f", "methodNumberBeforeChange": 613, "methodNumberAfterChange": 616, "signatureBeforeChange": "   public static void setPopupLoc(Window popup)", "signatureAfterChange": "   public void setPopupLoc(Window popup)", "diff": ["-  public static void setPopupLoc(Window popup) {", "-    MainFrame.setPopupLoc(popup, popup.getOwner());", "+  public void setPopupLoc(Window popup) {", "+    MainFrame.setPopupLoc(popup, (popup.getOwner()!=null)?popup.getOwner():this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9800985d4977b64e78aacc378775595e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData defineSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-  protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName) {", "-    String name = qualifiedClassName;", "+  protected SymbolData defineSymbolData(TypeDefBase typeDefBase, String qualifiedClassName) {", "+    String name = qualifiedClassName;  // may be an interface", "-    if (sd != null && !sd.isContinuation()) {", "-      _addAndIgnoreError(\"This class has already been defined.\", typeDefBase);", "+    if (sd != null && ! sd.isContinuation()) {", "+      _addAndIgnoreError(\"The class or interface \" + name + \" has already been defined.\", typeDefBase);", "+    ", "+    // Create SymbolDatas (continuations) for the interfaces if they do not already exist", "+    // Create a SymbolData for the superclass of typeDefBase", "+    ", "+//      if (superClassName.equals(\"TestCase\") || superClassName.equals(\"junit.framework.TestCase\")) {", "+//            System.out.println(\"WARNING! \" + superClassName + \" encountered as superclass\");", "+//            assert false;", "+//      }", "-      superClass = getSymbolData(superClassName, si, false); //TODO: change this back to true?", "+      // The following line generates an infinite recursion in some cases if resolve (the 3rd parm) is true.  Yet", "+      // when superclass is TestCase and TestCase is not imported", "+      superClass = getSymbolData(superClassName, si, false); //TODO: if true can generate infinite loop in helper", "+      }", "+      sd.setInterface(false);", "+    }", "+    ", "+    else { throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                      \"  Please report this bug.\"); }", "+    ", "+    // get the SymbolData of the superclass which must be in the symbol table", "+    // since we visited the type in forClassDef() although it may be a continuation. ", "+    ", "+    // there is a continuation in the symbol table, update the fields", "+    sd.setMav(typeDefBase.getMav());", "+    sd.setTypeParameters(typeDefBase.getTypeParameters());", "+    sd.setSuperClass(superClass);", "+    sd.setInterfaces(interfaces);", "+    sd.setIsContinuation(false);", "+    _log.log(\"REMOVING continuation \" + sd.getName());", "+    continuations.remove(sd.getName());", "+    ", "+    if (! sd.isInterface()) { LanguageLevelConverter._newSDs.put(sd, this); }", "+    return sd;", "+  }", "-    ", "-    if (! sd.isInterface()) {_newSDs.put(sd, this); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0fae93d713fa65f392838278b79d152", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentFileManager.java", "commitBeforeChange": "5c83f089e25fccbca0e9bbad3fc54a6c66548714", "commitAfterChange": "5a2afd347f47a6bc08b7f21fb8ab49faa2b374ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void addMirroredMenu(JMenu mirroredMenu)", "signatureAfterChange": "   public void addMirroredMenu(JMenu mirroredMenu)", "diff": ["-      JMenuItem newItem = new JMenuItem(\"\");", "+      JMenuItem newItem = new JMenuItem((i+1) + \". \" + file.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e30c767cdea6d8a81e406fd45e1e4eb5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "785973c3139c615cf62589c63d8216d8eae75cbb", "commitAfterChange": "589d008e681155a4eba9e61cd7d559555f927792", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testInteractionsHistoryStoredCorrectly() throws DocumentAdapterException", "signatureAfterChange": "   public void testInteractionsHistoryStoredCorrectly() throws DocumentAdapterException", "diff": ["-    assertEquals(\"Current interaction should still be there - should not have interpreted\", \"public class A {\\n\\n\", doc.getCurrentInteraction());", "+    assertEquals(\"Current interaction should still be there - should not have interpreted\", \"public class A {\\n\" + System.getProperty(\"line.separator\"),", "+                 doc.getCurrentInteraction());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68106d6487b0fe3cc3068475096d72c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "bffcae721f8dbc844dc8a667963f0caab39047ea", "commitAfterChange": "0af0c72004872701891228fa18659a3204fb6e2f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["-  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,", "-    FullVersion version = guessVersion(f, desc);", "-    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+    FullVersion version = guessVersion(f);", "+    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version+\", vendor: \"+version.vendor());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6cb300fe8b7ddcc03a35cf3daf17a72", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public void testLoadHistoryWithAndWithoutSemicolons() throws BadLocationException,     InterruptedException, IOException, DocumentAdapterException", "signatureAfterChange": "   public void testLoadHistoryWithAndWithoutSemicolons() throws BadLocationException,     InterruptedException, IOException, DocumentAdapterException", "diff": ["-                 \"x = 5\"+'\\n'+\"x = 5\",", "+                 \"x = 5\"+System.getProperty(\"line.separator\")+\"x = 5\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc107eefff1d9e2aa460eb9c9962daf5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "fcd44b069955d5a8c8e628fd06f8d74718eca4f0", "commitAfterChange": "61b9a404e491e16ca3ff41abdf2517de0d9b5a07", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void write() throws IOException", "signatureAfterChange": "   public void write() throws IOException", "diff": ["-    fw.write(\";; DrJava project file, written by build \" + Version.getBuildTimeString());", "+    fw.write(\";; DrJava project file, written by build \" + Version.getBuildTimeString() + \", revision \" + Version.getRevisionNumber());"]}], "num": 25076}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce22a0afc69249a063ef5efb3b4d118a", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d963388a61bed4bb0588e647a069ddf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Object visit(IfThenElseStatement node)", "signatureAfterChange": "   public Node visit(IfThenElseStatement node)", "diff": ["+   */", "+  public Node visit(IfThenElseStatement node) {", "+    // Visits the components of this node", "+    Node n = node.getCondition();", "+    Node o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setCondition((Expression)o);", "+    }", "+    ", "+    n = node.getThenStatement();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setThenStatement(o);", "+    }", "+    ", "+    n = node.getElseStatement();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setElseStatement(o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(IfThenElseStatement node) {", "-        // Visits the components of this node", "-\tNode   n = node.getCondition();", "-        Object o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setCondition((Expression)o);", "-        }", "-\t", "-\tn = node.getThenStatement();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setThenStatement((Node)o);", "-        }", "-\t", "-\tn = node.getElseStatement();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setElseStatement((Node)o);", "-        }", "-        return null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc656400d60c054e5a76bf6533b77c87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "     public Object visit(ConditionalExpression node)", "signatureAfterChange": "   public Node visit(ConditionalExpression node)", "diff": ["+   */", "+  public Node visit(ConditionalExpression node) {", "+    // Check each subexpression", "+    Node   n = node.getConditionExpression();", "+    Node o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setConditionExpression((Expression)o);", "+    }", "+    ", "+    n = node.getIfTrueExpression();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setIfTrueExpression((Expression)o);", "+    }", "+    ", "+    n = node.getIfFalseExpression();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setIfFalseExpression((Expression)o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(ConditionalExpression node) {", "-        // Check each subexpression", "-\tNode   n = node.getConditionExpression();", "-        Object o = n.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setConditionExpression((Expression)o);", "-        }", "-", "-\tn = node.getIfTrueExpression();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.second.operand\", n);", "-\t    }", "-\t    node.setIfTrueExpression((Expression)o);", "-        }", "-\t", "-\tn = node.getIfFalseExpression();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.third.operand\", n);", "-\t    }", "-\t    node.setIfFalseExpression((Expression)o);", "-        }", "-\treturn null;", "-    }"]}], "num": 7269}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0bf191e41b296299e22d0a06a84baf1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33fcbc4a8c977c12cec25bc7ea8c79d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DynamicJavaAdapter.java", "commitBeforeChange": "033aac7fee734ccfb2c6b4f19a0a8e7eeefbb09b", "commitAfterChange": "54b182f5505ddc2ea033f760c3fa41ccb41eb248", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ClassLoaderExtension(Interpreter i)", "signatureAfterChange": "     public ClassLoaderExtension(Interpreter i)", "diff": ["+", "+      // The protected variable classLoader contains the class loader to use", "+      // to find classes. When a new class path is added to the loader,", "+      // it adds on an auxilary classloader and chains the old classLoader", "+      // onto the end.", "+      // Here we initialize classLoader to be the system class loader.", "+      // This makes sure that we can find classes that are in the system's", "+      // class path, even though we don't fully delegate to the system", "+      // loader. (We just ask the system loader to get us the bytes of the", "+      // class, and then we call defineClass ourselves.)", "+      classLoader = ClassLoader.getSystemClassLoader();", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583a3e03a9f93f8da44105e6db61ed10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "9d671cad5f849049059b2e199aea7279dd398525", "commitAfterChange": "ef7e8ed674f3435dc8cfe861d137f1cab241f5c2", "methodNumberBeforeChange": 495, "methodNumberAfterChange": 497, "signatureBeforeChange": "   private void _restoreJUnitActionsEnabled()", "signatureAfterChange": "   private void _restoreJUnitActionsEnabled()", "diff": ["+    _runAppletAction = _junit_runAppletDecoratedAction.getUpdatedDecoree();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b901f35d8d4eea04814c2ab43a30589", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fee21edb1b15f1499b5409a250cdb90d3f204739", "commitAfterChange": "e100da4da75b9cbdfc04df45bf52679ed811f23a", "methodNumberBeforeChange": 420, "methodNumberAfterChange": 431, "signatureBeforeChange": "   private void _restoreJUnitActionsEnabled()", "signatureAfterChange": "   private void _restoreJUnitActionsEnabled()", "diff": ["+    _autoRefreshAction = _junit_autoRefreshDecoratedAction.getUpdatedDecoree();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79843acfb14004091fa2e8724e70df5c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "afda437000b953ac5d61ee69781723d29e664271", "commitAfterChange": "de9a557f090086de80e9723b0612333c5fd32e24", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "   public void openFolder(DirectoryChooser chooser)", "signatureAfterChange": "   public void openFolder(DirectoryChooser chooser)", "diff": ["-    chooser.setDialogTitle(\"Open All \" + type + \"Files In...\");", "+    chooser.setDialogTitle(\"Open All \" + type + \"Files in ...\");", "-      if (activeFile != null) openDir = activeFile.getParentFile(); }", "+      if (activeFile != null) openDir = activeFile.getParentFile();", "+      else openDir = _model.getProjectRoot();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66e2b1c74c0c78a9ee4f847ab14f987", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "033aac7fee734ccfb2c6b4f19a0a8e7eeefbb09b", "commitAfterChange": "54b182f5505ddc2ea033f760c3fa41ccb41eb248", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ClassLoaderExtension(Interpreter i)", "signatureAfterChange": "     public ClassLoaderExtension(Interpreter i)", "diff": ["+", "+      // The protected variable classLoader contains the class loader to use", "+      // to find classes. When a new class path is added to the loader,", "+      // it adds on an auxilary classloader and chains the old classLoader", "+      // onto the end.", "+      // Here we initialize classLoader to be the system class loader.", "+      // This makes sure that we can find classes that are in the system's", "+      // class path, even though we don't fully delegate to the system", "+      // loader. (We just ask the system loader to get us the bytes of the", "+      // class, and then we call defineClass ourselves.)", "+      classLoader = ClassLoader.getSystemClassLoader();", "+      "]}], "num": 7129}
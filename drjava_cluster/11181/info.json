{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55d75a623ad5767d0278f26532977b74", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d608f111b2865bf3c5ed4e34252e09a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testInsertGapAfterGap()", "signatureAfterChange": "  \tpublic void testInsertGapAfterGap()", "diff": ["-\t\t\tassertTrue(\"#0.0\", model1.getCursor().atEnd());", "-\t\t\tassertTrue(\"#0.1\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#0.2\", 3, model1.getCursor().prevItem().getSize());\t", "+\t\t\tassertTrue(\"#0.0\", model1.atEnd());", "+\t\t\tmodel1.move(-3);", "+\t\t\tassertTrue(\"#0.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#0.2\", 3, model1.currentToken().getSize());\t", "-\t\t\tassertTrue(\"#1.0\", model1.getCursor().atEnd());", "-\t\t\tassertTrue(\"#1.1\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#1.2\", 7, model1.getCursor().prevItem().getSize());", "+\t\t\tassertTrue(\"#1.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 7, model1.currentToken().getSize());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d368765bc4894ebe27f6ae42fa1dc513", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testInsertGapAfterGap()", "signatureAfterChange": "  \tpublic void testInsertGapAfterGap()", "diff": ["-\t\t\tassertTrue(\"#0.0\", model1.getCursor().atEnd());", "-\t\t\tassertTrue(\"#0.1\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#0.2\", 3, model1.getCursor().prevItem().getSize());\t", "+\t\t\tassertTrue(\"#0.0\", model1.atEnd());", "+\t\t\tmodel1.move(-3);", "+\t\t\tassertTrue(\"#0.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#0.2\", 3, model1.currentToken().getSize());\t", "-\t\t\tassertTrue(\"#1.0\", model1.getCursor().atEnd());", "-\t\t\tassertTrue(\"#1.1\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#1.2\", 7, model1.getCursor().prevItem().getSize());", "+\t\t\tassertTrue(\"#1.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 7, model1.currentToken().getSize());"]}], "num": 11181}
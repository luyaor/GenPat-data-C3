{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a06d0149cb3b3ee05b0a45953986fd3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570e47c9e9658ade9e34fe42fcaa6fb4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void insertBackSlash()", "signatureAfterChange": "   public void insertBackSlash()", "diff": ["-\t */", "-\tpublic void insertBackSlash()", "-\t\t{\t\t\t", "-\t\t\t//check if empty", "-\t\t\tif (_braces.isEmpty())", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewBrace(\"\\\\\",_cursor);//now pointing to tail.", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t//check if at start", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t_cursor.next();", "-\t\t\t//not empty, not at start, if at end check the previous brace", "-\t\t\tif (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertBackSlash(_cursor);", "-\t\t\t\t}", "-\t\t\t//if inside a double character brace, break it.", "-\t\t\telse if ((_offset > 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t_splitCurrentIfCommentBlock(true,true,_cursor);", "-          //leaving us at the start", "-\t\t\t\t\t_cursor.next(); //leaving us after first char", "-\t\t\t\t\t//System.out.println(this.simpleString());", "-\t\t\t\t\t_insertNewBrace(\"\\\\\",_cursor); //leaves us after /", "-\t\t\t\t\t_cursor.prev();", "-\t\t\t\t\t_cursor.prev(); //puts us back on first char in double comment", "-\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\tif (!_cursor.current().isMultipleCharBrace())", "-\t\t\t\t\t\t_cursor.next();", "-\t\t\t\t\t_cursor.next();", "-\t\t\t\t}", "-", "-\t\t\telse if ((_offset > 0) && (_cursor.current().isGap()))", "-\t\t\t\t{", "-\t\t\t\t\t_insertBraceToGap(\"\\\\\", _cursor);", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//if at start of double character brace, break it.", "-\t\t\telse if ((_offset == 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t//if we're free there won't be a block comment close so if there", "-\t\t\t\t\t//is then we don't want to break it.", "-\t\t\t\t\t_splitCurrentIfCommentBlock(false,true,_cursor);//leaving us at start", "-\t\t\t\t\t_checkPreviousInsertBackSlash(_cursor);", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertBackSlash(_cursor);", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void insertBackSlash() {      ", "+    //check if empty", "+    if (_braces.isEmpty()) {", "+      _insertNewBrace(\"\\\\\",_cursor);//now pointing to tail.", "+      return;", "+    }", "+    //check if at start", "+    if (_cursor.atStart()) {", "+      _cursor.next();", "+    }", "+    //not empty, not at start, if at end check the previous brace", "+    if (_cursor.atEnd()) {", "+      _checkPreviousInsertBackSlash(_cursor);", "+    }", "+    //if inside a double character brace, break it.", "+    else if ((_offset > 0) && _cursor.current().isMultipleCharBrace()) {", "+      _splitCurrentIfCommentBlock(true,true,_cursor);", "+      //leaving us at the start", "+      _cursor.next(); //leaving us after first char", "+      //System.out.println(this.simpleString());", "+      _insertNewBrace(\"\\\\\",_cursor); //leaves us after /", "+      _cursor.prev();", "+      _cursor.prev(); //puts us back on first char in double comment", "+      _updateBasedOnCurrentState();", "+      if (!_cursor.current().isMultipleCharBrace()) {", "+        _cursor.next();", "+      }", "+      _cursor.next();", "+    }", "+    ", "+    else if ((_offset > 0) && (_cursor.current().isGap())) {", "+      _insertBraceToGap(\"\\\\\", _cursor);", "+    }", "+    ", "+    //if at start of double character brace, break it.", "+    else if ((_offset == 0) && _cursor.current().isMultipleCharBrace()) {", "+      //if we're free there won't be a block comment close so if there", "+      //is then we don't want to break it.", "+      _splitCurrentIfCommentBlock(false,true,_cursor);//leaving us at start", "+      _checkPreviousInsertBackSlash(_cursor);", "+    }", "+    else {", "+      _checkPreviousInsertBackSlash(_cursor);", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c92c9533f05f84e9e7c6c9f0ef73145", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tpublic void insertBackSlash()", "signatureAfterChange": "   public void insertBackSlash()", "diff": ["-\t */", "-\tpublic void insertBackSlash()", "-\t\t{\t\t\t", "-\t\t\t//check if empty", "-\t\t\tif (_braces.isEmpty())", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewBrace(\"\\\\\",_cursor);//now pointing to tail.", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t//check if at start", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t_cursor.next();", "-\t\t\t//not empty, not at start, if at end check the previous brace", "-\t\t\tif (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertBackSlash(_cursor);", "-\t\t\t\t}", "-\t\t\t//if inside a double character brace, break it.", "-\t\t\telse if ((_offset > 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t_splitCurrentIfCommentBlock(true,true,_cursor);", "-          //leaving us at the start", "-\t\t\t\t\t_cursor.next(); //leaving us after first char", "-\t\t\t\t\t//System.out.println(this.simpleString());", "-\t\t\t\t\t_insertNewBrace(\"\\\\\",_cursor); //leaves us after /", "-\t\t\t\t\t_cursor.prev();", "-\t\t\t\t\t_cursor.prev(); //puts us back on first char in double comment", "-\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\tif (!_cursor.current().isMultipleCharBrace())", "-\t\t\t\t\t\t_cursor.next();", "-\t\t\t\t\t_cursor.next();", "-\t\t\t\t}", "-", "-\t\t\telse if ((_offset > 0) && (_cursor.current().isGap()))", "-\t\t\t\t{", "-\t\t\t\t\t_insertBraceToGap(\"\\\\\", _cursor);", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//if at start of double character brace, break it.", "-\t\t\telse if ((_offset == 0) && _cursor.current().isMultipleCharBrace())", "-\t\t\t\t{", "-\t\t\t\t\t//if we're free there won't be a block comment close so if there", "-\t\t\t\t\t//is then we don't want to break it.", "-\t\t\t\t\t_splitCurrentIfCommentBlock(false,true,_cursor);//leaving us at start", "-\t\t\t\t\t_checkPreviousInsertBackSlash(_cursor);", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\t{", "-\t\t\t\t\t_checkPreviousInsertBackSlash(_cursor);", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void insertBackSlash() {      ", "+    //check if empty", "+    if (_braces.isEmpty()) {", "+      _insertNewBrace(\"\\\\\",_cursor);//now pointing to tail.", "+      return;", "+    }", "+    //check if at start", "+    if (_cursor.atStart()) {", "+      _cursor.next();", "+    }", "+    //not empty, not at start, if at end check the previous brace", "+    if (_cursor.atEnd()) {", "+      _checkPreviousInsertBackSlash(_cursor);", "+    }", "+    //if inside a double character brace, break it.", "+    else if ((_offset > 0) && _cursor.current().isMultipleCharBrace()) {", "+      _splitCurrentIfCommentBlock(true,true,_cursor);", "+      //leaving us at the start", "+      _cursor.next(); //leaving us after first char", "+      //System.out.println(this.simpleString());", "+      _insertNewBrace(\"\\\\\",_cursor); //leaves us after /", "+      _cursor.prev();", "+      _cursor.prev(); //puts us back on first char in double comment", "+      _updateBasedOnCurrentState();", "+      if (!_cursor.current().isMultipleCharBrace()) {", "+        _cursor.next();", "+      }", "+      _cursor.next();", "+    }", "+    ", "+    else if ((_offset > 0) && (_cursor.current().isGap())) {", "+      _insertBraceToGap(\"\\\\\", _cursor);", "+    }", "+    ", "+    //if at start of double character brace, break it.", "+    else if ((_offset == 0) && _cursor.current().isMultipleCharBrace()) {", "+      //if we're free there won't be a block comment close so if there", "+      //is then we don't want to break it.", "+      _splitCurrentIfCommentBlock(false,true,_cursor);//leaving us at start", "+      _checkPreviousInsertBackSlash(_cursor);", "+    }", "+    else {", "+      _checkPreviousInsertBackSlash(_cursor);", "+    }", "+    return;", "+  }"]}], "num": 12811}
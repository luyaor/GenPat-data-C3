{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c86c4e54b7010ab952dbc73f67f18733", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9924197771f763875bcffbb6209223", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "50d7405dbdeb05d9fc0520b24d57e1f92428ff65", "commitAfterChange": "7ff90c83877cc5b21bb771b7b8f391533604640f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "signatureAfterChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "diff": ["-    Iterable<File> searchPath = IterUtil.compose(LanguageLevelConverter.OPT.bootClassPath(),", "-                                                 LanguageLevelConverter.OPT.classPath());", "-    if (directoryName != null) { searchPath = IterUtil.compose(searchPath, new File(directoryName)); }", "-    ", "-      /** We'll use this class loader to look up resources (*not* to load classes) */", "-      PathClassLoader loader = new PathClassLoader(EmptyClassLoader.INSTANCE, searchPath);", "-      InputStream stream = loader.getResourceAsStream(qualifiedClassName.replace('.', '/') + \".class\");", "+      String fileName = qualifiedClassName.replace('.', '/') + \".class\";", "+      InputStream stream = RESOURCES.value().getResourceAsStream(fileName);", "+      if (stream == null && directoryName != null) {", "+        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(directoryName));", "+      }", "-    //This is done so that the SymbolData in the Symboltable is updated and returned.", "+    // This is done so that the SymbolData in the Symboltable is updated and returned.", "-    //make it be a non-continuation, since we are filing it in", "+    // make it be a non-continuation, since we are filling it in"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2886e95fff904fcbd3805e6e257274", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _compileFiles(List<? extends File> files, File buildDir) throws IOException", "signatureAfterChange": "   private void _compileFiles(List<? extends File> files, File buildDir) throws IOException", "diff": ["-      if (System.getProperty(\"drjava.bootclasspath\") != null) {", "-        bootClassPath = new LinkedList<File>();", "-        StringTokenizer st = new StringTokenizer(System.getProperty(\"drjava.bootclasspath\"), File.pathSeparator);", "-        while (st.hasMoreTokens()) {", "-          bootClassPath.add(new File(st.nextToken()));", "-        }", "-      }", "+      String bootProp = System.getProperty(\"drjava.bootclasspath\");", "+      if (bootProp != null) { bootClassPath = IterUtil.asList(IOUtil.parsePath(bootProp)); }", "-        CompilerInterface compiler = CompilerRegistry.ONLY.getActiveCompiler();", "+        CompilerInterface compiler = getActiveCompiler();"]}], "num": 623}
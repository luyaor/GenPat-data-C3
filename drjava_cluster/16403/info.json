{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfa44b9da14949537df4a2501ce6247d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d31c529d390132b192fdcd4255ad41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   private void emitUnbox(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack)", "signatureAfterChange": "   private void emitConvert(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack)", "diff": ["-  /** Convert the value on the stack to the given type, unboxing if necessary. */", "-  private void emitUnbox(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack) {", "-    expectedT.apply(new TypeAbstractVisitor_void() {", "-      @Override public void defaultCase(Type t) { /* do nothing */ }", "-      ", "+  /** Convert the value on the stack to the given type, casting or unboxing if necessary. */", "+  private void emitConvert(final MethodVisitor mv, Type expectedT, final StackSizeTracker stack) {", "+    _opt.typeSystem().erase(expectedT).apply(new TypeAbstractVisitor_void() {", "+      @Override public void forClassType(ClassType t) {", "+        if (!t.equals(TypeSystem.OBJECT)) {", "+          mv.visitTypeInsn(CHECKCAST, className(t.ofClass()));", "+        }", "+      }", "-", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa85c3b95cd247926d4bce353e021e5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f85f20b04a845bc5f3cc15aa220d5ca52f7ac620", "commitAfterChange": "65a7277b66a8820a81606e41a75578dc0c567fde", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private DJClass enclosingThis(Type expected)", "signatureAfterChange": "     private DJClass enclosingThis(Type expected)", "diff": ["-      DJClass candidate = context.getThis();", "-      while (candidate != null) {", "-        if (ts.isSubtype(SymbolUtil.thisType(candidate), expected)) { return candidate; }", "-        candidate = SymbolUtil.dynamicOuterClass(candidate);", "-      }", "-      return null;", "+      return expected.apply(new TypeAbstractVisitor<DJClass>() {", "+        @Override public DJClass defaultCase(Type t) { return null; }", "+        @Override public DJClass forClassType(ClassType t) {", "+          if (context.hasThis(t.ofClass()) && ts.isSubtype(SymbolUtil.thisType(t.ofClass()), t)) {", "+            return t.ofClass();", "+          }", "+          else { return null; }", "+        }", "+      });"]}], "num": 16403}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c0d1990408fbbd89562a774d88fa716", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8621ad273ffc998230d50060cff06f79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean hasLappedOriginalLocation(int searchOriginLocation)", "signatureAfterChange": "    private boolean hasLappedOriginalLocation(int searchOriginLocation)", "diff": ["-    if (!_searchBackwards) {", "-      if (_wrapped && searchOriginLocation <= getCurrentOffset()) {", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-    }", "-    else {", "-      if (_wrapped && searchOriginLocation >= getCurrentOffset()) {", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-    }", "+    if (!_searchBackwards) return _wrapped && searchOriginLocation <= getCurrentOffset();", "+    return _wrapped && searchOriginLocation >= getCurrentOffset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a348c5c38ba536514239bc1e709ce5fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    private boolean wholeWordFoundAtCurrent(String searchDocument)", "signatureAfterChange": "    private boolean wholeWordFoundAtCurrent(String searchDocument)", "diff": ["-    try {", "-      leftOfMatch = new Character(searchDocument.charAt(leftLocation));", "-    }", "-    catch (IndexOutOfBoundsException e) {", "-      leftOutOfBounds = true;", "-    }", "+    try { leftOfMatch = new Character(searchDocument.charAt(leftLocation)); }", "+    catch (IndexOutOfBoundsException e) { leftOutOfBounds = true; }", "-    try {", "-      rightOfMatch = new Character(searchDocument.charAt(rightLocation));", "-    }", "-    catch (IndexOutOfBoundsException e) {", "-      rightOutOfBounds = true;", "-    }", "+    try { rightOfMatch = new Character(searchDocument.charAt(rightLocation)); }", "+    catch (IndexOutOfBoundsException e) { rightOutOfBounds = true; }", "-    if (!leftOutOfBounds && !rightOutOfBounds) {", "-      if (isDelimter(rightOfMatch) && isDelimter(leftOfMatch)) {", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-    }", "-    else if (!leftOutOfBounds) {", "-      if (isDelimter(leftOfMatch)) {", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-", "-    }", "-    else if (!rightOutOfBounds) {", "-      if (isDelimter(rightOfMatch)) {", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-    }", "-    else {", "-      //return false;", "-      return true;", "-    }", "+    if (!leftOutOfBounds && !rightOutOfBounds) ", "+      return isDelimter(rightOfMatch) && isDelimter(leftOfMatch);", "+    if (!leftOutOfBounds) return isDelimter(leftOfMatch);", "+    if (!rightOutOfBounds) return isDelimter(rightOfMatch);", "+    return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f3bce00860e650b36079359d251e2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionFollowedByStar.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-      if (charPos == AbstractDJDocument.ERROR_INDEX) {", "-        return false;", "-      } ", "-      else if (doc.getText(charPos, 1).equals(\"*\")) {", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "+      ", "+      return !(charPos == AbstractDJDocument.ERROR_INDEX) && doc.getText(charPos, 1).equals(\"*\");", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}], "num": 1447}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d04b80c6fa3d5d70c3d3fe75fb3dc19", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c65deff3634809fdf67caf510e1514", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "6f501e5fca95aec34d7430b68d9d987e33ec6129", "commitAfterChange": "f175bd951be0706c1171fa45b387f5428c58ddb3", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public static <T1, T2, R> Iterable<R>      valuesOf(Iterable<? extends Lambda2<? super T1, ? super T2, ? extends R>> iter, T1 arg1, T2 arg2)", "signatureAfterChange": "   public static <T1, T2, R> Iterable<R>      valuesOf(Iterable<? extends Lambda2<? super T1, ? super T2, ? extends R>> iter, T1 arg1, T2 arg2)", "diff": ["-    return new MappedIterable<Lambda2<? super T1, ? super T2, ? extends R>, R>", "-                 (iter, new Lambda2Value<T1, T2, R>(arg1, arg2));", "+    Lambda<Lambda2<? super T1, ? super T2, ? extends R>, R> l = ", "+      LambdaUtil.bindSecond(LambdaUtil.bindThird(LambdaUtil.<T1, T2, R>binaryApplicationLambda(), arg2), arg1);", "+    return new MappedIterable<Lambda2<? super T1, ? super T2, ? extends R>, R>(iter, l);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85074e55494669ddb4c20a14cc106f93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "6f501e5fca95aec34d7430b68d9d987e33ec6129", "commitAfterChange": "f175bd951be0706c1171fa45b387f5428c58ddb3", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 236, "signatureBeforeChange": "   public static <T1, T2, T3, R> Iterable<R>     valuesOf(Iterable<? extends Lambda3<? super T1, ? super T2, ? super T3, ? extends R>> iter,               T1 arg1, T2 arg2, T3 arg3)", "signatureAfterChange": "   public static <T1, T2, T3, R> Iterable<R>     valuesOf(Iterable<? extends Lambda3<? super T1, ? super T2, ? super T3, ? extends R>> iter,               T1 arg1, T2 arg2, T3 arg3)", "diff": ["-    return new MappedIterable<Lambda3<? super T1, ? super T2, ? super T3, ? extends R>, R>", "-                 (iter, new Lambda3Value<T1, T2, T3, R>(arg1, arg2, arg3));", "+    Lambda<Lambda3<? super T1, ? super T2, ? super T3, ? extends R>, R> l = ", "+      LambdaUtil.bindSecond(LambdaUtil.bindThird(LambdaUtil.bindFourth(", "+                            LambdaUtil.<T1, T2, T3, R>ternaryApplicationLambda(), arg3), arg2), arg1);", "+    return new MappedIterable<Lambda3<? super T1, ? super T2, ? super T3, ? extends R>, R>(iter, l);"]}], "num": 23146}
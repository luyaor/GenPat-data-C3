{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2476fd0690fd614e42328ecf6a15ab53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbdd8d10533299f26cace82c76f107c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "signatureAfterChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "diff": ["+    ", "-        if(mapInsert(oce.value, _a)) // if overwrite, remove accelerator of overwritten menuitem", "+        if (oce.value == KeyStrokeOption.NULL_KEYSTROKE) return; ", "+        ", "+        if(shouldUpdate(oce.value, _a)) ", "-          if (_jmi != null) { // otherwise this keystroke should map to an action that isn't in the menu", "-            JMenuItem overwrittenMenuItem = (JMenuItem) _keyToMenuItemMap.get(oce.value);", "-            if (overwrittenMenuItem != null) {", "-              overwrittenMenuItem.setAccelerator(null);", "-            }", "-            _jmi.setAccelerator(oce.value);", "-          }", "-          // change shift-version's binding", "-          Action shiftAction = (Action) _actionToShiftActionMap.get(_a);", "-          if (shiftAction != null) {", "-            _keyToActionMap.remove(addShiftModifier(_ks));", "-            mapInsert(addShiftModifier(oce.value), shiftAction);", "+          KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a);", "+          _keyToDataMap.remove(_ks);", "+          ", "+          //check for conflicting key binding", "+          if (_keyToDataMap.containsKey(oce.value)) {", "+            //if new key in map, and shouldUpdate returns true, we are overwriting it", "+            KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "+            conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "+            _updateMenuItem(conflictKSD);", "+            _keyToDataMap.remove(oce.value);", "+            DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-          _keyToActionMap.remove(_ks);", "-          _ks = oce.value;", "+          ", "+          _keyToDataMap.put(oce.value,data);", "+          data.setKeyStroke(oce.value);", "+          _updateMenuItem(data);", "+          ", "+          //Check associated shift-version's binding", "+          Action shiftAction = (Action) data.getShiftAction();", "+          if (shiftAction != null) {", "+            //_keyToActionMap.remove(addShiftModifier(_ks));", "+            KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "+            _keyToDataMap.remove(shiftKSD.getKeyStroke());", "+            shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "+            _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "+            //mapInsert(addShiftModifier(oce.value), shiftAction);", "+          }", "+          ", "+          _ks = oce.value;          ", "+        else if (_ks != oce.value)", "+          DrJava.CONFIG.setSetting(oce.option, _ks);", "+   ", "+    ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3aa3292804436349746f7caf84edac1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ff65482ac0c34f9d18b211e3b1fa05371a07fb91", "commitAfterChange": "43bd3e08ba052e97e1d0271e7f1e324beac2ba86", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public String getDisplayFullPath(OpenDefinitionsDocument doc)", "signatureAfterChange": "      public void saveProject(String filename) throws IOException", "diff": ["+  ", "+  public void saveProject(String filename) throws IOException {", "+    ", "+    String base = filename.substring(0, filename.lastIndexOf(File.separator));", "+    System.out.println(\"base is \" + base);", "+    ProjectFileBuilder builder = new ProjectFileBuilder(base);", "+    ", "+    // add opendefinitionsdocument", "+    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "+    while(odds.hasNext())", "+    {", "+      OpenDefinitionsDocument doc = odds.next();", "+      builder.addSourceFile(doc.getFile());", "+    }", "+    ", "+    // add classpath info", "+    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "+    for(int i = 0; i<currentclasspaths.size(); i++)", "+    {", "+      builder.addClasspathFile(currentclasspaths.get(i));", "+    }", "+    ", "+    // write to disk", "+    FileWriter fw = new FileWriter(filename);", "+    fw.write(builder.makeProjectFile());", "+    fw.close();", "+    ", "+    ", "-   */", "-  public String getDisplayFullPath(OpenDefinitionsDocument doc) {", "-    String path = \"(untitled)\";", "-    try {", "-      File file = doc.getFile();", "-      path = file.getAbsolutePath();", "-    }", "-    catch (IllegalStateException ise) {", "-      // No file, filename stays \"Untitled\"", "-    }", "-    catch (FileMovedException fme) {", "-      // Recover, even though file was deleted", "-      File file = fme.getFile();", "-      path = file.getAbsolutePath();", "-    }", "-", "-    // Mark if modified", "-    if (doc.isModifiedSinceSave()) {", "-      path = path + \" *\";", "-    }", "-", "-    return path;", "-  }"]}], "num": 16657}
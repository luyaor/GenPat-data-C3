{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bf4c82b9d70b49b9294bdcea19f436f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1aae47b1c38010e6d6e21ca76942650", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 314, "methodNumberAfterChange": 315, "signatureBeforeChange": "              @Override public Iterable<StaticMethodInvocation> forSimpleClassType(SimpleClassType t)", "signatureAfterChange": "     public ObjectMethodInvocation invocation()", "diff": ["+    }", "+    public ObjectMethodInvocation invocation() {", "+      SubstitutionMap sigma = substitution();", "+      Type returnType = substitute(_method.returnType(), sigma);", "+      Expression receiver = makeCast(_declaringType, _object);", "+      Iterable<? extends Type> targs = _matcher.typeArguments();", "+      Iterable<? extends Expression> args = _matcher.arguments();", "+      Iterable<? extends Type> thrown = substitute(_method.thrownTypes(), sigma);", "+      return new ObjectMethodInvocation(_declaredMethod, returnType, receiver,targs, args, thrown);", "+    }", "-      ", "-      @Override public Iterable<StaticMethodInvocation> forSimpleClassType(SimpleClassType t) {", "-        Iterable<DJMethod> methods = IterUtil.filter(t.ofClass().declaredMethods(), _matchMethod);", "-//        System.out.println(\"Matching methods in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(matchingMethods));", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m),", "-                               args, m.returnType(), expected);", "-          }", "-        };", "-        Lambda2<DJMethod, SignatureChecker, StaticMethodInvocation> makeResult = ", "-          new Lambda2<DJMethod, SignatureChecker, StaticMethodInvocation>() {", "-          public StaticMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type returned = substitute(m.returnType(), sigma);", "-            // TODO: Handle the thrown types", "-            return new StaticMethodInvocation(m, returned, checker.typeArguments(), checker.arguments(),", "-                                              m.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(methods, makeChecker, makeResult);", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c84ad295f3cd0dbcdc6062608abb836e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 281, "methodNumberAfterChange": 358, "signatureBeforeChange": "              @Override public Iterable<ConstructorInvocation> forSimpleClassType(final SimpleClassType t)", "signatureAfterChange": "     public ErasedConstructor(DJConstructor k)", "diff": ["+  private class ErasedConstructor extends DelegatingConstructor {", "+    public ErasedConstructor(DJConstructor k) { super(k); }", "-      ", "-      @Override public Iterable<ConstructorInvocation> forSimpleClassType(final SimpleClassType t) {", "-        Iterable<DJConstructor> allConstructors = t.ofClass().declaredConstructors();", "-        Lambda<DJConstructor, SignatureChecker> makeChecker = ", "-          new Lambda<DJConstructor, SignatureChecker>() {", "-          public SignatureChecker value(DJConstructor k) {", "-            //debug.logValues(new String[]{\"k\", \"declaredParameterTypes\"}, k, SymbolUtil.declaredParameterTypes(k));", "-            return makeChecker(k.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(k),", "-                               args, t, expected);", "-          }", "-        };", "-        Lambda2<DJConstructor, SignatureChecker, ConstructorInvocation> makeResult = ", "-          new Lambda2<DJConstructor, SignatureChecker, ConstructorInvocation>() {", "-          public ConstructorInvocation value(DJConstructor k, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(),", "-                                                        checker.typeArguments());", "-            // TODO: Handle the thrown types (using sigma)", "-            return new ConstructorInvocation(k, checker.typeArguments(), checker.arguments(), ", "-                                             k.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(allConstructors, makeChecker, makeResult);", "-      }"]}], "num": 2294}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aaecb1e69ac17c107c93ee728cbd4ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32d65516b98d4e995b7a071030d426f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5, Indenter.IndentReason.OTHER));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13, Indenter.IndentReason.OTHER));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after open paren\", rule.testApplyRule(_doc, 5, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.testApplyRule(_doc, 6, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after semicolon\", rule.testApplyRule(_doc, 13, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.testApplyRule(_doc, 16, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a9bd32e56fb63b15f9ece904fc6163", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after open paren\", rule.testApplyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.testApplyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after semicolon\", rule.testApplyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.testApplyRule(_doc, 28, Indenter.IndentReason.OTHER));"]}], "num": 24180}
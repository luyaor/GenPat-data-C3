{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "190c6b2b22ba40a660590029e372ab55", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c3c6e804559ce8624ffd1256324a1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateWithErrors() throws BadLocationException", "diff": ["-      JUnitError[] errors = errorModel.getErrors();", "-", "-      if (errors.length > 0) {", "+      JUnitError[] errorsWithPositions = errorModel.getErrorsWithPositions();", "+      JUnitError[] errorsWithoutPositions = errorModel.getErrorsWithoutPositions();", "+      ", "+      if ((errorsWithoutPositions.length > 0) ||", "+            (errorsWithPositions.length > 0)) {", "+        ", "+        // Show errors without source locations", "+        for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "+          int startPos = doc.getLength();", "+          ", "+          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "+          ", "+          doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), filename + \"\\n\", NORMAL_ATTRIBUTES);", "-        // Show errors", "-        for (int j = 0; j < errors.length; j++, errorNum++) {", "+          _insertErrorText(errorsWithoutPositions, j, doc);", "+          ", "+          // Note to user that there is no source info for this error", "+          doc.insertString(doc.getLength(),", "+                           \" (no source location)\",", "+                           NORMAL_ATTRIBUTES);", "+          doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "+          ", "+          Position pos = doc.createPosition(startPos);", "+          _errorListPositions[errorNum] = pos;", "+          _errorTable.put(pos, errorsWithoutPositions[j]);", "+        }", "+        ", "+        ", "+        // Show errors with source locations", "+        for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "+          //WARNING: the height of the highlight box in JUnitError panel is dependent on the ", "+          // presence of this extra line. If removed, code must be changed in order to account for its", "+          // absence.", "+          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "+          ", "-          _insertErrorText(errors, j, doc);", "+          _insertErrorText(errorsWithPositions, j, doc);", "-          _errorTable.put(pos, errors[j]);", "+          _errorTable.put(pos, errorsWithPositions[j]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf5b9eccbc7da30d13552e79bb2bcfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void _updateWithErrors() throws BadLocationException", "signatureAfterChange": "     protected void _updateWithErrors() throws BadLocationException", "diff": ["+     */", "+    protected void _updateWithErrors() throws BadLocationException {", "+      DefaultStyledDocument doc = new DefaultStyledDocument();", "+      _checkSync(doc);", "+      _updateWithErrors(\"test\", \"failed\", doc);", "+    }", "-     */", "-    private void _updateWithErrors() throws BadLocationException {", "-      DefaultStyledDocument doc = new DefaultStyledDocument();", "-      _checkSync(doc);", "-      int errorNum = 0;", "-      ", "-      // Print how many errors", "-      StringBuffer numErrMsg = new StringBuffer(\"\" + _numErrors);", "-      numErrMsg.append(\" test\");", "-      if (_numErrors > 1) {", "-        numErrMsg.append(\"s\");", "-      }", "-      numErrMsg.append(\" failed:\\n\");", "-      doc.insertString(doc.getLength(), numErrMsg.toString(), BOLD_ATTRIBUTES);", "-", "-      // Show errors for each file", "-      JUnitErrorModel errorModel = _docBeingTested.getJUnitErrorModel();", "-      JUnitError[] errorsWithPositions = errorModel.getErrorsWithPositions();", "-      JUnitError[] errorsWithoutPositions = errorModel.getErrorsWithoutPositions();", "-      ", "-      if ((errorsWithoutPositions.length > 0) ||", "-            (errorsWithPositions.length > 0)) {", "-", "-        // Grab filename for this set of errors", "-        String filename = _docBeingTested.getFilename();", "-        ", "-        // Show errors without source locations", "-        for (int j = 0; j < errorsWithoutPositions.length; j++, errorNum++) {", "-          int startPos = doc.getLength();", "-          ", "-          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "-          ", "-          doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "-          doc.insertString(doc.getLength(), filename + \"\\n\", NORMAL_ATTRIBUTES);", "-", "-          _insertErrorText(errorsWithoutPositions, j, doc);", "-          ", "-          // Note to user that there is no source info for this error", "-          doc.insertString(doc.getLength(),", "-                           \" (no source location)\",", "-                           NORMAL_ATTRIBUTES);", "-          doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-          ", "-          Position pos = doc.createPosition(startPos);", "-          _errorListPositions[errorNum] = pos;", "-          _errorTable.put(pos, errorsWithoutPositions[j]);", "-        }", "-        ", "-        ", "-        // Show errors with source locations", "-        for (int j = 0; j < errorsWithPositions.length; j++, errorNum++) {", "-          int startPos = doc.getLength();", "-          JUnitError currError = errorsWithPositions[j];", "-          ", "-          //WARNING: the height of the highlight box in JUnitError panel is dependent on the ", "-          // presence of this extra line. If removed, code must be changed in order to account for its", "-          // absence.", "-          doc.insertString(doc.getLength(), \"================\\n\", NORMAL_ATTRIBUTES);", "-          ", "-          // Show file", "-          doc.insertString(doc.getLength(), \"File: \", BOLD_ATTRIBUTES);", "-          String fileAndLineNumber = filename + \"  [line: \" + (currError.lineNumber()+1) + \"]\";", "-          doc.insertString(doc.getLength(), fileAndLineNumber + \"\\n\", NORMAL_ATTRIBUTES);", "-", "-          // Show error", "-          _insertErrorText(errorsWithPositions, j, doc);", "-          doc.insertString(doc.getLength(), \"\\n\", NORMAL_ATTRIBUTES);", "-          Position pos = doc.createPosition(startPos);", "-          _errorListPositions[errorNum] = pos;", "-          _errorTable.put(pos, errorsWithPositions[j]);", "-        }", "-      }", "-", "-      setDocument(doc);", "-", "-      // Select the first error", "-      _errorListPane.switchToError(0);", "-    }"]}], "num": 25276}
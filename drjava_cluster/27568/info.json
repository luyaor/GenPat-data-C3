{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3e04f9b1e28491bb281aac82e93a04d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8383a49b4cd555ac6cd4f174a460c1c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 35, "signatureBeforeChange": "   @Override public Type visit(ArrayAccess node)", "signatureAfterChange": "     @Override public Type visit(ArrayAccess node)", "diff": ["-   */", "-  @Override public Type visit(ArrayAccess node) {", "-    Type arrayType = node.getExpression().acceptVisitor(this);", "-    if (!ts.isArray(arrayType)) {", "-      setErrorStrings(node, ts.userRepresentation(arrayType));", "-      throw new ExecutionError(\"array.required\", node);", "-    }", "-    Type elementType = ts.arrayElementType(arrayType);", "-    node.getCellNumber().acceptVisitor(this);", "-    try {", "-      Expression cell = ts.unaryPromote(ts.makePrimitive(node.getCellNumber()));", "-      if (!(getType(cell) instanceof IntType)) {", "+     */", "+    @Override public Type visit(ArrayAccess node) {", "+      Type arrayType = check(node.getExpression());", "+      if (!ts.isArray(arrayType)) {", "+        setErrorStrings(node, ts.userRepresentation(arrayType));", "+        throw new ExecutionError(\"array.required\", node);", "+      }", "+      Type elementType = ts.arrayElementType(arrayType);", "+      ", "+      check(node.getCellNumber(), TypeSystem.INT);", "+      try {", "+        Expression cell = ts.unaryPromote(ts.makePrimitive(node.getCellNumber()));", "+        if (!(getType(cell) instanceof IntType)) {", "+          throw new ExecutionError(\"array.index.type\", node);", "+        }", "+        node.setCellNumber(cell);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setCellNumber(cell);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"array.index.type\", node);", "+      ", "+      setVariableType(node, elementType);", "+      return setType(node, ts.capture(elementType));", "+      // TODO: Does there need to be a runtime check here, as in field accesses?", "-    setVariableType(node, elementType);", "-    return setType(node, ts.capture(elementType));", "-    // TODO: Does there need to be a runtime check here, as in field accesses?", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5606eaab198c3d9c865fa3dd29fe23e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": "   private Type handleBooleanExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleBooleanExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleBooleanExpression(BinaryExpression node) {", "-    node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());    ", "-      if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+     */", "+    private Type handleBooleanExpression(BinaryExpression node) {", "+      check(node.getLeftExpression(), TypeSystem.BOOLEAN);", "+      check(node.getRightExpression(), TypeSystem.BOOLEAN);", "+      try {", "+        Expression left = ts.makePrimitive(node.getLeftExpression());", "+        Expression right = ts.makePrimitive(node.getRightExpression());    ", "+        if (!(getType(left) instanceof BooleanType) || !(getType(right) instanceof BooleanType)) {", "+          throw new ExecutionError(\"boolean.expression.type\", node);", "+        }", "+        node.setLeftExpression(left);", "+        node.setRightExpression(right);", "+        return setType(node, TypeSystem.BOOLEAN);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      node.setLeftExpression(left);", "-      node.setRightExpression(right);", "+    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"boolean.expression.type\", node);", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f647519f5e73a99cfaf216a932e1b317", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": "   @Override public Type visit(ArrayAllocation node)", "signatureAfterChange": "     @Override public Type visit(ArrayAllocation node)", "diff": ["-    */", "-  @Override public Type visit(ArrayAllocation node) {", "-    Type elementType = node.getElementType().acceptVisitor(this);", "-    if (! ts.isReifiable(elementType)) {", "-      throw new ExecutionError(\"reifiable.type\", node);", "-    }", "-    ", "-    checkList(node.getSizes());", "-    List<Expression> newSizes = new ArrayList<Expression>(node.getSizes().size());", "-    for (Expression exp : node.getSizes()) {", "-      try {", "-        Expression newExp = ts.unaryPromote(ts.makePrimitive(exp));", "-        if (!(getType(newExp) instanceof IntType)) {", "-          throw new ExecutionError(\"array.dimension.type\", node);", "-        }", "-        newSizes.add(newExp);", "-      }", "-      catch (UnsupportedConversionException e) {", "-        throw new ExecutionError(\"array.dimension.type\", node);", "-      }", "-    }", "-    node.setSizes(newSizes);", "-    ", "-    if (node.getInitialization() != null) { node.getInitialization().acceptVisitor(this); }", "-    ", "-    Type result = elementType;", "-    for (int i = 0; i < node.getDimension(); i++) {", "-      result = new SimpleArrayType(result);", "-    }", "-    setErasedType(node, ts.erasedClass(result));", "-    return setType(node, result);", "-  }", "+      */", "+    @Override public Type visit(ArrayAllocation node) {", "+      Type elementType = checkTypeName(node.getElementType());", "+      if (! ts.isReifiable(elementType)) {", "+        throw new ExecutionError(\"reifiable.type\", node);", "+      }", "+      Type result = elementType;", "+      for (int i = 0; i < node.getDimension(); i++) {", "+        result = new SimpleArrayType(result);", "+      }", "+      ", "+      checkList(node.getSizes(), TypeSystem.INT);", "+      List<Expression> newSizes = new ArrayList<Expression>(node.getSizes().size());", "+      for (Expression exp : node.getSizes()) {", "+        try {", "+          Expression newExp = ts.unaryPromote(ts.makePrimitive(exp));", "+          if (!(getType(newExp) instanceof IntType)) {", "+            throw new ExecutionError(\"array.dimension.type\", node);", "+          }", "+          newSizes.add(newExp);", "+        }", "+        catch (UnsupportedConversionException e) {", "+          throw new ExecutionError(\"array.dimension.type\", node);", "+        }", "+      }", "+      node.setSizes(newSizes);", "+      ", "+      if (node.getInitialization() != null) { check(node.getInitialization(), result); }", "+      ", "+      setErasedType(node, ts.erasedClass(result));", "+      return setType(node, result);", "+    }"]}], "num": 27568}
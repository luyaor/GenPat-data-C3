{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3962484fbc502dbd7085994b85982304", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247e452d7d16fd1885b9a9fcef9061e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "signatureAfterChange": "   protected void saveAllFilesHelper(FileSaveSelector com) throws IOException", "diff": ["-    ", "+    boolean first = true;", "-          if (doc.getFile().canWrite()) {", "+          final File docFile = doc.getFile();", "+          if (!docFile.exists() || docFile.canWrite()) {", "-          else {", "-            // file is read-only, ask user about it", "+          else if (first) {", "+            // file is read-only, ask user about it once", "-        File[] res = _notifier.filesReadOnly(com, files.toArray(new File[files.size()]));", "+        File[] res = _notifier.filesReadOnly(files.toArray(new File[files.size()]));", "-          try {", "-            File roFile = odd.getFile();", "-            if (rewriteFiles.contains(roFile)) {", "-              docsToWrite.add(odd);", "-              // try to make the file writable", "-              // strangely enough, there is a File.setReadOnly() method, but", "-              // no built-in way to make the file writable", "-              // Sun recommends deleting the read-only file (does that work?)", "-              File backup = new File(roFile.getAbsolutePath()+\"~\");", "-              boolean noBackup = true;", "-              if (backup.exists()) {", "-                try {", "-                  noBackup = backup.delete();", "-                }", "-                catch(SecurityException se) {", "-                  noBackup = false;", "-                }", "-              }", "-              if (noBackup) {", "-                try {", "-                  noBackup = roFile.renameTo(backup);", "-                  roFile.createNewFile();", "-                }", "-                catch(SecurityException se) {", "-                  noBackup = false;", "-                }", "-                catch(IOException ioe) { }", "-                try {", "-                  roFile.createNewFile();", "-                }", "-                catch(SecurityException se) { }", "-                catch(IOException ioe) { }", "-              }", "-              if (!noBackup) {", "-                try {", "-                  roFile.delete();", "-                }", "-                catch(SecurityException se) { /* can't do anything about it */ }", "-              }", "-              try {", "-                edu.rice.cs.plt.io.IOUtil.copyFile(backup, roFile);", "-              }", "-              catch(SecurityException se) {", "-                /* can't do anything about it */", "-              }", "-              catch(IOException ioe) {", "-                /* can't do anything about it */", "-              }", "-            }", "+          File roFile = odd.getFile();", "+          if (rewriteFiles.contains(roFile)) {", "+            docsToWrite.add(odd);", "+            FileOps.makeWritable(roFile);", "-          catch(FileMovedException fme) { /* ignore, don't know what to do here */ }", "+      first = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ed1fa7bf8f2a26d923bae50488f64d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "6dc623f6cf84dd216f6949b3ebdd52b19c8912b4", "commitAfterChange": "3bfda0ffd8a22eda2f2daab913b510305e1ef801", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-        try {", "-          RemoteControlClient.openFile(null);", "-          if (RemoteControlClient.isServerRunning()) {", "-            // existing instance is running and responding", "-            for (int i = 0; i < _filesToOpen.size(); ++i) {", "-              RemoteControlClient.openFile(new File(_filesToOpen.get(i)));", "-            }", "-            // files opened in existing instance, quit", "-            System.exit(0);", "-          }", "-        }", "-        catch(IOException ioe) {", "-          ioe.printStackTrace();", "-        }      ", "+        if (openWithRemoteControl(_filesToOpen,1)) System.exit(0); // files opened in existing instance, quit", "-        boolean restart = (getConfig().getSetting(MASTER_JVM_ARGS).length() > 0)", "+        boolean _doRestart = (getConfig().getSetting(MASTER_JVM_ARGS).length() > 0)", "-        _log.log(\"restart: \"+restart);", "+        _log.log(\"_doRestart: \"+_doRestart);", "-        classArgs.addAll(_filesToOpen);", "-        if (restart) {", "+        synchronized(DrJava.class) {", "+          classArgs.addAll(_filesToOpen);", "+          clearFilesToOpen();", "+          _log.log(\"_filesToOpen copied into class arguments, clearing _filesToOpen\");", "+        }", "+        ", "+        if (_doRestart) {", "+          if (DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.REMOTE_CONTROL_ENABLED)) {", "+            // at this time, OUR remote control server hasn't been started yet", "+            // if one is running, then we won't be able to contact the restarted DrJava", "+           _restartedDrJavaUsesRemoteControl = !RemoteControlClient.isServerRunning();", "+          } else {", "+            // no remote control", "+            _restartedDrJavaUsesRemoteControl = false;", "+          }", "+            _log.log(\"JVMBuilder: mainParams = \"+classArgs);", "+            _alreadyRestarted = true;", "+            _log.log(\"_alreadyRestarted = true\");", "+            _log.log(\"failed = \"+failed);", "-                System.exit(0);", "+                System.exit(1);", "+            else {", "+              // check if there are any files left in _filesToOpen", "+              _log.log(\"not failed, send remaining files via remote control: \"+_filesToOpen);", "+              openWithRemoteControl(_filesToOpen, NUM_REMOTE_CONTROL_RETRIES);", "+            }", "+          // when we return from here, DrJavaRoot._mainFrame has been initialized", "+          // but we may still have files in _filesToOpen that were not processed", "+          // do that now", "+          ArrayList<String> fs = new ArrayList<String>(_filesToOpen);", "+          for(String f: fs) {", "+            DrJavaRoot.handleRemoteOpenFile(new File(f), -1);", "+          }"]}], "num": 14051}
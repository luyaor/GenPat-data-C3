{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d94be71fef65856ef8c692fce218d11", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0479330369e473573dc6091d7ef11712", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ClasspathFilter.java", "commitBeforeChange": "8f8a64864bd9c3c9658401188aaec5c9c0dfe4f7", "commitAfterChange": "9e1a29777c7e5973840e817aca59ceea66af7a9c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static String getExtension(File f)", "signatureAfterChange": "   public static String getExtension(File f)", "diff": ["-   */", "+  /* Get the extension of a file. */", "-    if (i > 0 && i < s.length() - 1) {", "-      ext = s.substring(i + 1).toLowerCase();", "-    }", "+    if (i > 0 && i < s.length() - 1) ext = s.substring(i + 1).toLowerCase();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c59170c418bb4034867d168b50bb08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    private int indexOf(String str, String findword)", "signatureAfterChange": "    private int indexOf(String str, String findword)", "diff": ["-    if (_matchCase) {", "-      return str.indexOf(findword);", "-    }", "+    if (_matchCase) return str.indexOf(findword);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72b17643b3aad2b6f77820df90bbed2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["-        //      System.out.println(\"Keystroke was null\");", "+//        System.out.println(\"Keystroke was null\");", "-          if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "-            endCompoundEdit();", "-          }", "+          if (e.getKeyCode() == KeyEvent.VK_ENTER) endCompoundEdit();", "-          ", "-             CompoundUndoManager undoMan = _doc.getUndoManager();", "-          //int key = undoMan.startCompoundEdit();", "-          //        System.out.println(\"supering 1 \" + isAltF4);", "+          CompoundUndoManager undoMan = _doc.getUndoManager();", "+//          int key = undoMan.startCompoundEdit();", "+//          System.out.println(\"supering 1 \" + isAltF4);", "-             super.processKeyEvent(e);", "-          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          super.processKeyEvent(e);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes ", "+          // (see the definition of _undoListener).", "-          //        e.consume();", "+//          e.consume();", "-", "-          ", "-          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down", "-          // and fixes bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when", "-          // the alt key is down.", "-          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "+          // The following conditional fixes bug #676586 by ignoring typed events when the meta key is down and fixes", "+          // bug #905405 \"Undo Alt+Anything Causes Exception\" by ignoring typed events when the alt key is down.", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit ", "+          // actually happened.", "+          if ((e.getModifiers() & InputEvent.META_MASK) != 0 ", "+                // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) // omitted for frenchkeyboard support", "-            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "+//            System.out.println(\"not supering 1 \" + isAltF4);", "-          ", "-                    ", "+                        ", "-          /* If the KeyEvent is not a pressed event, process it before we do", "-           * granular undo or _inCompoundEdit may get set incorrectly.", "-           * This code breaks Alt-F4, and may break other system keybindings", "-           * since the event is consumed by us.  For now, just check Alt-F4. */", "+          /* If the KeyEvent is not a pressed event, process it before we do granular undo or _inCompoundEdit may ", "+           * get set incorrectly. This code breaks Alt-F4, and may break other system keybindings since the event ", "+           * is consumed by us. */", "-          ", "-          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87cba1b71cb50aa5847f69186200bdf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineEmptyOrEnterPress.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-    if (reason == Indenter.ENTER_KEY_PRESS) {", "-      return true;", "-    }", "+    if (reason == Indenter.ENTER_KEY_PRESS) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2e987ea0ffc2973231b90ebb6190ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 322, "methodNumberAfterChange": 326, "signatureBeforeChange": "   private OpenDefinitionsDocument _rawOpenFile(File file) throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _rawOpenFile(File file) throws IOException, AlreadyOpenException", "diff": ["-    if (openDoc != null) {", "-      throw new AlreadyOpenException(openDoc);", "-    }", "+    if (openDoc != null) throw new AlreadyOpenException(openDoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a999e452fcecef83325359d64b5f8c7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 206, "signatureBeforeChange": "     public void print() throws PrinterException, BadLocationException,       FileMovedException", "signatureAfterChange": "     public void print() throws PrinterException, BadLocationException, FileMovedException", "diff": ["-     */", "-    public void print() throws PrinterException, BadLocationException,", "-      FileMovedException {", "+    /** Prints the given document by bringing up a \"Print\" window. */", "+    public void print() throws PrinterException, BadLocationException, FileMovedException {", "-      if (printJob.printDialog()) {", "-        printJob.print();", "-      }", "+      if (printJob.printDialog()) printJob.print();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7f875dff67e00fed21fd67a86c7e950", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, InterruptedException", "diff": ["-  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, ", "-    InterruptedException {", "+  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, InterruptedException {", "+    ", "-    catch (DocumentAdapterException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (DocumentAdapterException e) { throw new UnexpectedException(e); }", "-      if (_model.getCompilerModel().getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "+      if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5f7a20e3dee185476f9301e99fa9b15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private File mkTempDir(String funnyName)", "signatureAfterChange": "   private File mkTempDir(String funnyName)", "diff": ["-   */", "+  /** Helper for testRelativeFile and testDotPaths. */", "-    // OK, we have to create a directory with a hard-coded name in the", "-    // current working directory, so we'll make it strange. If this", "-    // directory happens to exist, it'll be deleted.", "+    // OK, we have to create a directory with a hard-coded name in the current working directory, so we'll make it", "+    // strange. If this directory happens to exist, it'll be deleted.", "-    if (newDirectory.exists()) {", "-      FileOps.deleteDirectory(newDirectory);", "-    }", "+    if (newDirectory.exists()) FileOps.deleteDirectory(newDirectory);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d72b4baa119ad042fd611496be181e3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 226, "methodNumberAfterChange": 230, "signatureBeforeChange": "     public Breakpoint getBreakpointAt( int offset)", "signatureAfterChange": "     public Breakpoint getBreakpointAt(int offset)", "diff": ["-    public Breakpoint getBreakpointAt( int offset) {", "+    public Breakpoint getBreakpointAt(int offset) {", "-      for (int i =0; i<_breakpoints.size(); i++) {", "+      for (int i = 0; i < _breakpoints.size(); i++) {", "-        if (offset >= bp.getStartOffset() && offset <= bp.getEndOffset()) {", "-          return bp;", "-        }", "+        if (offset >= bp.getStartOffset() && offset <= bp.getEndOffset()) return bp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9628acd58a113cff203563ad4b7605d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 203, "signatureBeforeChange": "     public void setFile(File file)", "signatureAfterChange": "     public void setFile(File file)", "diff": ["-     */", "+    /** Sets the file for this openDefinitionsDocument. */", "-      if (_file != null) { _timestamp = _file.lastModified(); }", "+      if (_file != null) _timestamp = _file.lastModified();"]}], "num": 7616}
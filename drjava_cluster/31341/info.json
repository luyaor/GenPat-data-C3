{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d8510073c8275d2ae6d4f58e512bd303", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7726ad98c5c9d6698cdd7c5bdab19f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/Java5Class.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private static Type classAsType(Class<?> c)", "signatureAfterChange": "   private static Type classAsType(Class<?> c)", "diff": ["-    if (c.isPrimitive()) {", "-      if (c.equals(boolean.class)) { return TypeSystem.BOOLEAN; }", "-      else if (c.equals(int.class)) { return TypeSystem.INT; }", "-      else if (c.equals(double.class)) { return TypeSystem.DOUBLE; }", "-      else if (c.equals(char.class)) { return TypeSystem.CHAR; }", "-      else if (c.equals(void.class)) { return TypeSystem.VOID; }", "-      else if (c.equals(long.class)) { return TypeSystem.LONG; }", "-      else if (c.equals(byte.class)) { return TypeSystem.BYTE; }", "-      else if (c.equals(short.class)) { return TypeSystem.SHORT; }", "-      else if (c.equals(float.class)) { return TypeSystem.FLOAT; }", "-      else { throw new IllegalArgumentException(\"Unrecongized primitive: \" + c); }", "-    }", "+    if (c.isPrimitive()) { return SymbolUtil.typeOfPrimitiveClass(c); }", "-  }    ", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7b80806143beebe6a9f95f5700075af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JavaClass.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private static Type classAsType(Class<?> c)", "signatureAfterChange": "   private static Type classAsType(Class<?> c)", "diff": ["-    if (c.isPrimitive()) {", "-      if (c.equals(boolean.class)) { return TypeSystem.BOOLEAN; }", "-      else if (c.equals(int.class)) { return TypeSystem.INT; }", "-      else if (c.equals(double.class)) { return TypeSystem.DOUBLE; }", "-      else if (c.equals(char.class)) { return TypeSystem.CHAR; }", "-      else if (c.equals(void.class)) { return TypeSystem.VOID; }", "-      else if (c.equals(long.class)) { return TypeSystem.LONG; }", "-      else if (c.equals(byte.class)) { return TypeSystem.BYTE; }", "-      else if (c.equals(short.class)) { return TypeSystem.SHORT; }", "-      else if (c.equals(float.class)) { return TypeSystem.FLOAT; }", "-      else { throw new IllegalArgumentException(\"Unrecongized primitive: \" + c); }", "-    }", "+    if (c.isPrimitive()) { return SymbolUtil.typeOfPrimitiveClass(c); }"]}], "num": 31341}
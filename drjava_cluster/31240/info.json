{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f46d6491460042fda1e5988ec70ab3b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f65ab3ad5d0d217822ac544237c81d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data)", "signatureAfterChange": "   public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, SymbolData enclosing)", "diff": ["-  public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, Data data) {", "+  public void complexAnonymousClassInstantiationHelper(ComplexAnonymousClassInstantiation that, SymbolData enclosing) {", "-    // No need to resolve the super class of the type being instantiated, because it is a complex type, so its enclosing ", "-    // data should get added to the symbolTable along with it wherever we resolved its enclosing data.", "-    ", "-    // Originally, make super class null.  This will be updated in the TypeChecker pass.", "-    anonymousClassInstantiationHelper(that, data, null);", "-    ", "+    String superName = that.getType().getName();", "+    anonymousClassInstantiationHelper(that, enclosing, superName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1797583eb7f49956900cdcc2eef04e91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementEvaluator.java", "commitBeforeChange": "12b972c6351f6122675c003ccbc59ef481c89cda", "commitAfterChange": "b10686f6739b4554b283179f3edc2b09ee48a09a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    @Override public Result visit(VariableDeclaration node)", "signatureAfterChange": "    @Override public Result visit(VariableDeclaration node)", "diff": ["-    RuntimeBindings newB = new RuntimeBindings(_bindings, getVariable(node), null);", "+    // even when an initializer is present, there may be a reference to the uninitialized", "+    // variable in the initializer", "+    Object init = SymbolUtil.initialValue(getErasedType(node).value());", "+    RuntimeBindings newB = new RuntimeBindings(_bindings, getVariable(node), init);"]}], "num": 31240}
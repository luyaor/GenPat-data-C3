{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0331812e2e40972d2a80e4a88b054b1e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de20205e06ef24d42f9aed0ae83795e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public synchronized ClassPathVector getClassPath()", "signatureAfterChange": "      public synchronized Iterable<File> getClassPath()", "diff": ["+  public synchronized Iterable<File> getClassPath() {", "+    Iterable<File> result = IterUtil.empty();", "+    result = IterUtil.compose(result, _classPathManager.getProjectCP());", "+    result = IterUtil.compose(result, _classPathManager.getBuildDirectoryCP());", "+    result = IterUtil.compose(result, _classPathManager.getProjectFilesCP());", "+    result = IterUtil.compose(result, _classPathManager.getExternalFilesCP());", "+    result = IterUtil.compose(result, _classPathManager.getExtraCP());", "+    return result;", "-   */", "-  public synchronized ClassPathVector getClassPath() {", "-    ClassPathVector ret = new ClassPathVector();", "-    ", "-    for (ClassPathEntry e: _classPathManager.getProjectCP()) ret.add(e.getEntry());", "-    ", "-    for (ClassPathEntry e: _classPathManager.getBuildDirectoryCP()) ret.add(e.getEntry());", "-    ", "-    for (ClassPathEntry e: _classPathManager.getProjectFilesCP()) ret.add(e.getEntry());", "-    ", "-    for (ClassPathEntry e: _classPathManager.getExternalFilesCP()) ret.add(e.getEntry());", "-    ", "-    for (ClassPathEntry e: _classPathManager.getExtraCP()) ret.add(e.getEntry());", "-    ", "-    return ret;", "-  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4faa86a3226014671e3673091717e251", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   public ClassPathVector getClassPath()", "signatureAfterChange": "   public Iterable<File> getClassPath()", "diff": ["-  public ClassPathVector getClassPath() {", "-    ClassPathVector result = new ClassPathVector();", "+  public Iterable<File> getClassPath() {", "+    Iterable<File> result = IterUtil.empty();", "-      if (buildDir != null) { _addFileToClassPath(buildDir, result); }", "+      if (buildDir != null) { result = IterUtil.compose(result, buildDir); }", "-      if (projRoot != null) { _addFileToClassPath(projRoot, result); }", "+      if (projRoot != null) { result = IterUtil.compose(result, projRoot); }", "-      ClassPathVector projectExtras = getExtraClassPath();", "-      if (projectExtras != null) { result.addAll(projectExtras); }", "+      Iterable<File> projectExtras = getExtraClassPath();", "+      if (projectExtras != null) { result = IterUtil.compose(result, projectExtras); }", "-    else {", "-      for (File f : getSourceRootSet()) { _addFileToClassPath(f, result); }", "-    }", "-      ", "+    else { result = IterUtil.compose(result, getSourceRootSet()); }", "+    ", "-    if (globalExtras != null) {", "-      for (File f : globalExtras) { _addFileToClassPath(f, result); }", "-    }", "+    if (globalExtras != null) { result = IterUtil.compose(result, globalExtras); }", "-    String currentClassPath = System.getProperty(\"java.class.path\");", "-    if (currentClassPath != null) {", "-      // TODO: Parsing this string needs to only happen once, not every time this method is invoked.", "-      StringTokenizer tokens = new StringTokenizer(currentClassPath, File.pathSeparator);", "-      while (tokens.hasMoreTokens()) {", "-        _addFileToClassPath(new File(tokens.nextToken()), result);", "-      }", "-    }", "+    // TODO: Parsing this string needs to only happen once, not every time this method is invoked.", "+    String systemPath = System.getProperty(\"java.class.path\", \"\");", "+    result = IterUtil.compose(result, IOUtil.attemptAbsoluteFiles(IOUtil.parsePath(systemPath)));"]}], "num": 10600}
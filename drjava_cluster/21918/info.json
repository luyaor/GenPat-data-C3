{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efaa1ce198fc2bc4efb098b8f50f23c8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da9cee4fc3482949fb3c20034b672d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "          public void testForTryCatchFinallyStatement()", "signatureAfterChange": "          public void testForTryCatchFinallyStatement()", "diff": ["-      TypeData result = tcfs2.visit(_bbtc);", "+      TypeData result = tcfs2.visit(_bbtc);  // Duplicates previous error", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(1).getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "+                   \"which needs to be caught or declared to be thrown\", ", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Should still be 2 errors\", 2, errors.size());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "-      assertEquals(\"Should still still be 2 errors\", 2, errors.size());", "+      assertEquals(\"Should still still be 1 error\", 1, errors.size());", "-      nested.visit(_bbtc);", "-      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException which needs to be caught or declared to be thrown\", errors.get(2).getFirst());", "+      nested.visit(_bbtc);  // Duplicates existing error", "+      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", \"This statement throws the exception java.util.prefs.BackingStoreException \" +", "+                   \"which needs to be caught or declared to be thrown\", errors.get(0).getFirst());", "-      assertEquals(\"There should still be 3 errors\", 3, errors.size());", "+      assertEquals(\"There should still be 1 error\", 1, errors.size());", "-      assertEquals(\"There should still be 3 errors\", 3, errors.size());", "+      assertEquals(\"There should still be 1 errors\", 1, errors.size());", "-      assertEquals(\"There should still be 3 errors!\", 3, errors.size());", "+      assertEquals(\"There should still be 1 error!\", 1, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6d658bf853b3f37ff988ff65f87624", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "7159df222d88dee270188fe2cbffe74bb173d159", "commitAfterChange": "c73227da8024bfd14e7a2df3af6435d7a78133b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-    // The documents should not be activated upon creation", "+    // The model already has an active empty document", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc1));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc1));", "+    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc2));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc2));", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc3));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc3));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc4));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc4));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc5));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc6));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertEquals(\"There should still be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d693e53431c5e0575b9140b9b2e0bc4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachineTest.java", "commitBeforeChange": "ec1234c8205fc39cf1fac2ca94b073f8a0c191b4", "commitAfterChange": "dc012dd7d972609a38d1836c72ebe86b07df0e53", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "      public void testAnyOccurrenceSearchIgnore() throws BadLocationException", "signatureAfterChange": "      public void testAnyOccurrenceSearchIgnore() throws BadLocationException", "diff": ["-    System.err.println(IGNORE_TEXT);", "+//    System.err.println(IGNORE_TEXT);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 62);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 72);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 82);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 66);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 75);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 85);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 95);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 70);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 60);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 83);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 73);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 64);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 80);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 93);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 139);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 193);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 345);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 152);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 206);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 358);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 189);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 135);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 341);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 202);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 148);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 354);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 278);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 291);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 277);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 290);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 233);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 246);", "-    _testFindNextSucceeds(_frm, CONTINUE, 0, 229);", "+    _testFindNextSucceeds(_frm, CONTINUE, 0, 242);"]}], "num": 21918}
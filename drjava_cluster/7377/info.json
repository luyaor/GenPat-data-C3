{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9eaac354dfbdc3c247486b2eecb1eb5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e00967a167a822614c4e234ccf4a5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testLoadObjectThrowsCorrectException()", "signatureAfterChange": "         public void testInvokeStaticMethod() throws Exception", "diff": ["-  ", "-  public void testLoadObjectThrowsCorrectException() {", "-    try { loadObject(\"fishing.boats\"); }", "-    try { loadObject(\"edu.rice.cs.plt.reflect.ReflectUtilTest\", 23); }", "-    try { loadObject(\"java.lang.Comparable\"); }", "-    try { loadObject(\"edu.rice.cs.plt.lambda.LazyThunk\", LambdaUtil.nullThunk()); }", "-    try { loadObject(\"java.lang.String\", new char[]{'a', 'b'}, -1, 23); }", "-    try { loadObject(\"edu.rice.cs.plt.reflect.ReflectUtilTest\", new Class[0], 23); }", "-    try { loadObject(\"edu.rice.cs.plt.lambda.LazyThunk\", new Class<?>[]{Thunk.class}, LambdaUtil.nullLambda()); }", "+  ", "+  public void testInvokeStaticMethod() throws Exception {", "+    Thunk<?> nullThunk = (Thunk<?>) invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"nullLambda\");", "+    assertEquals(null, nullThunk.value());", "+    ", "+    Object o = new Object();", "+    Thunk<?> valueThunk1 = (Thunk<?>) invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\", o);", "+    assertSame(o, valueThunk1.value());", "+    ", "+    Thunk<?> valueThunk2 = (Thunk<?>) invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\",", "+                                                         new Class<?>[]{ Object.class }, 2.83);", "+    assertEquals(2.83, valueThunk2.value());", "+    ", "+    assertEquals(\"123\", invokeStaticMethod(\"java.lang.String\", \"valueOf\", new Class<?>[]{ int.class }, 123));", "+    ", "+    ClassLoader l = new PathClassLoader(INTBOX_DIR, A_DIR, B_DIR, C_DIR, D_DIR);", "+    assertEquals(\"A\", invokeStaticMethod(l, \"A\", \"getName\"));", "+    assertEquals(\"B\", invokeStaticMethod(l, \"B\", \"getName\"));", "+    assertEquals(\"C\", invokeStaticMethod(l, \"C\", \"getName\"));", "+    assertEquals(\"D\", invokeStaticMethod(l, \"D\", \"getName\"));", "+    ", "+    try { invokeStaticMethod(\"A\", \"getName\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"ClassNotFound\"); }", "+    ", "+    try { invokeStaticMethod(\"fishing.boats\", \"foo\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"ClassNotFound\"); }", "+    ", "+    try { invokeStaticMethod(\"edu.rice.cs.plt.reflect.ReflectUtilTest\", \"mom\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NoSuchMethod\"); }", "+    ", "+    try { invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NoSuchMethod\"); }", "+    ", "+    try { invokeStaticMethod(\"edu.rice.cs.plt.lambda.LambdaUtil\", \"valueLambda\", 2.83); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NoSuchMethod\"); }", "+    ", "+    try { invokeStaticMethod(\"java.lang.String\", \"length\"); fail(\"expected exception\"); }", "+    catch (ReflectException e) { assertCorrectException(e, \"NullPointer\"); }", "+    ", "+    try {", "+      invokeStaticMethod(\"java.lang.String\", \"valueOf\", new Class<?>[]{ int.class }, 12.3);", "+      fail(\"expected exception\");", "+    }", "+    catch (ReflectException e) { assertCorrectException(e, \"IllegalArgument\"); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7eb68d0f099e4dc7a35d29fded86889", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "    private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                               boolean addError)", "signatureAfterChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError)", "diff": ["-    */ ", "-  private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "-                                             boolean addError) {", "-    _log.log(\"_getQualifiedSymbolData called on '\" + className + \"'\");", "-   ", "-    // We assume a period in a class name means it is qualified, make sure it's either in", "-    // this package, is imported specifically, is in an imported package, or is in java.lang.", "-    // We can't directly check it, because parsing class files adds every class that is recursively", "-    // referenced by that class file, and we shouldn't be allowed to see some of them.", "-    SymbolData sd = symbolTable.get(className);", "-//    if (className.equals(\"fully.qualified.Woah\")) System.err.println(\"_getQualifiedSymbolData(\" + className + \", ...) called\" +", "-//                                                                    \"\\nsd = \" + sd);", "-    /* If sd is not null then return it unless it is a continuation that we are resolving.", "-     * If we're from a class file, then a continuation is ok because we assume", "-     * that we'll find it later. (?)  If you don't return here, you can get into", "-     * an infinite loop if there's a self-referencing class.", "-     */", "-    _log.log(\"Corresponding symbolTable entry = \" + sd);", "-    if (sd != null && (! resolve || ! sd.isContinuation() || fromClassFile)) { ", "-      _log.log(\"Returning \" + sd);", "-      return sd; ", "-    }", "-    ", "-    // Look it up in the symbol table, see if it's a Java library class, look it up from the filesystem.", "-    if (isJavaLibraryClass(className)) {", "-      _log.log(\"Calling  _classFile2SymbolData\");", "-      return _classFile2SymbolData(className, null);", "-    }", "-    else if (resolve) {  // Look for class file if resolving a continuation", "-      SymbolData newSd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "-      if (newSd != SymbolData.NOT_FOUND) {", "-        _log.log(\"Returning \" + sd + \" from file system\");", "-        return newSd;", "-      }", "-      else if (sd != null && sd.isContinuation()) return sd;", "-      if (addError) {", "-        _addAndIgnoreError(\"The class \" + className + \" was not found.\", new NullLiteral(si));", "-      }", "-    }", "-    _log.log(\"Returning null\");", "-    return null;", "-  }", "+  protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si, boolean resolve, boolean fromClassFile, ", "+                                           boolean addError) {", "+    assert qualClassName != null;", "+//    if (qualClassName.startsWith(\"RefInnerClassCrazy\")) ", "+//      System.err.println(\"ALARM: getQualifiedSymbolData called for '\" + qualClassName + \"'\");", "+//    ", "+    if (qualClassName.equals(\"java.lang.Throwable\")) {", "+      System.err.println(\"***ALARM: getQualifiedSymbolData called for '\" + qualClassName + \"'\");", "+      if (symbolTable.get(qualClassName) != null) System.err.println(\"***ALARM: java.lang.Throwable already exists\");", "+    assert (qualClassName != null && ! qualClassName.equals(\"\"));", "+    ", "+    // Check for primitive types.", "+    SymbolData sd = LanguageLevelConverter._getPrimitiveSymbolData(qualClassName);", "+    if (sd != null) { return sd; }", "+    ", "+    // Check for already defined types", "+    SymbolData existingSD = symbolTable.get(qualClassName);", "+    if (existingSD != null && (! resolve || ! existingSD.isContinuation())) return existingSD;", "+    ", "+    // Check for array types.", "+    if (qualClassName.endsWith(\"[]\"))", "+      return _getQualifiedArraySymbolData(qualClassName.substring(0, qualClassName.length() - 2), si, resolve, ", "+                                       fromClassFile);", "+    // If qualClassName is a library file, resolve it immediately by reading its class file.", "+    if (isJavaLibraryClass(qualClassName)) {", "+      _log.log(\"Calling  _classFile2SymbolData\");", "+      SymbolData cfSD = LanguageLevelConverter._classFile2SymbolData(qualClassName, null);", "+      if (! qualClassName.startsWith(\"java.\") && ! qualClassName.startsWith(\"sun.\"))", "+        System.err.println(\"Defining class file symbol \" + qualClassName);", "+      assert cfSD == null || symbolTable.contains(cfSD);", "+      return cfSD;", "+    }", "+    ", "+    if (_classesInThisFile.contains(qualClassName))  // Make continuation for top level class not yet parsed in this file", "+      return makeContinuation(si, qualClassName);", "+    ", "+    // If performing post-visit resolution, read the signature info for this symbol from a class file", "+    if (resolve) {  // Look for up-to-date class file", "+      SymbolData newSd = _getSymbolDataFromFileSystem(qualClassName, si, true, true);  // resolve, addError = true", "+      if (newSd != null && newSd != SymbolData.NOT_FOUND) {", "+        _log.log(\"Returning \" + sd + \" from file system\");", "+        return newSd;", "+      }", "+      else {", "+        System.err.println(\"***ALARM*** The class \" + qualClassName + \" was not found.\");", "+        _addAndIgnoreError(\"The class \" + qualClassName + \" was not found.\", new NullLiteral(si));", "+        assert false;", "+    return null;    // qualClassName not found"]}], "num": 7377}
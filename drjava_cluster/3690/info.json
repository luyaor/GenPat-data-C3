{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e982116aa4473e1f3800cc2792ede646", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dbd17486f4ef8db1ddfb28058d17a12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testRenameDocument()", "signatureAfterChange": "   public void testRenameDocument()", "diff": ["-    String name = \"MyTest.dj0\";", "-    String newName = \"MyTest.dj0*\";", "-    DummyINavigatorItem item = new DummyINavigatorItem(name);", "-    DummyINavigatorItem newItem = new DummyINavigatorItem(newName);", "-//    Object _lock = new Object();", "-//    synchronized(_lock) {", "-      tree.addDocument(item, \"folder3\");", "-//    }", "+    final String name = \"MyTest.dj0\";", "+    final String newName = \"MyTest.dj0*\";", "+    final DummyINavigatorItem item = new DummyINavigatorItem(name);", "+    final DummyINavigatorItem newItem = new DummyINavigatorItem(newName);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { tree.addDocument(item, \"folder3\"); } });", "-//    synchronized(_lock) {", "-      tree.refreshDocument(item, \"folder3\");", "-//    }", "-//    synchronized(_lock) {", "-      assertEquals(\"folder3 should have 1 children\", 1, folder3.getChildCount());", "-      LeafNode<?> node = (LeafNode<?>)folder3.getChildAt(0);", "-      assertEquals(\"node should have correct name\", name, node.toString());", "-      tree.removeDocument(item);", "-      tree.addDocument(newItem, \"folder3\");", "-      folder3 = (InnerNode)source.getChildAt(2);", "-      LeafNode<?> newNode = (LeafNode<?>)folder3.getChildAt(0);", "-      ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { tree.refreshDocument(item, \"folder3\"); } });", "+    assertEquals(\"folder3 should have 1 children\", 1, folder3.getChildCount());", "+    LeafNode<?> node = (LeafNode<?>)folder3.getChildAt(0);", "+    assertEquals(\"node should have correct name\", name, node.toString());", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        tree.removeDocument(item);", "+        tree.addDocument(newItem, \"folder3\");", "+      }", "+    });", "+    folder3 = (InnerNode)source.getChildAt(2);", "+    LeafNode<?> newNode = (LeafNode<?>)folder3.getChildAt(0);", "+    ", "-      assertEquals(\"should have been renamed\", newName, newNode.toString());", "-      assertEquals(\"node should have same parent\", folder3, newNode.getParent());", "-      tree.removeDocument(newItem);", "-//    }", "+    assertEquals(\"should have been renamed\", newName, newNode.toString());", "+    assertEquals(\"node should have same parent\", folder3, newNode.getParent());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { tree.removeDocument(newItem); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7e961bc1ff0c9be4be7d83a6db4d5ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void testGranularUndo() throws BadLocationException", "signatureAfterChange": "      public void testGranularUndo() throws BadLocationException", "diff": ["-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    assertEquals(\"Should start out empty.\", \"\",", "-                 doc.getText());", "+    assertEquals(\"Should start out empty.\", \"\",  doc.getText());", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_A, KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_TYPED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_UNDEFINED, 'a'));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_A, KeyEvent.CHAR_UNDEFINED));", "-    definitions.setCaretPosition(doc.getLength());", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_A, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_UNDEFINED, 'a'));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_A, KeyEvent.CHAR_UNDEFINED));", "+        definitions.setCaretPosition(doc.getLength());", "+        ", "+        // Type '!'", "+        definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                 KeyEvent.KEY_PRESSED,", "+                                                 (new Date()).getTime(),", "+                                                 0,", "+                                                 KeyEvent.VK_EXCLAMATION_MARK, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                 KeyEvent.KEY_TYPED,", "+                                                 (new Date()).getTime(),", "+                                                 0,", "+                                                 KeyEvent.VK_UNDEFINED, '!'));", "+        definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                 KeyEvent.KEY_RELEASED,", "+                                                 (new Date()).getTime(),", "+                                                 0,", "+                                                 KeyEvent.VK_EXCLAMATION_MARK, KeyEvent.CHAR_UNDEFINED));", "+        definitions.setCaretPosition(doc.getLength());", "+        ", "+        // Type 'B'", "+        definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                 KeyEvent.KEY_PRESSED,", "+                                                 (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK,", "+                                                 KeyEvent.VK_B, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                 KeyEvent.KEY_TYPED,", "+                                                 (new Date()).getTime(),", "+                                                 0,", "+                                                 KeyEvent.VK_UNDEFINED, 'B'));", "+        definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                 KeyEvent.KEY_RELEASED,", "+                                                 (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK,", "+                                                 KeyEvent.VK_B, KeyEvent.CHAR_UNDEFINED));", "+        definitions.setCaretPosition(doc.getLength());", "+        ", "+        // Type '9'", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_9, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_UNDEFINED, '9'));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+                                                 KeyEvent.VK_9, KeyEvent.CHAR_UNDEFINED));", "+        definitions.setCaretPosition(doc.getLength());", "+      } ", "+    });", "-    // Type '!'", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_EXCLAMATION_MARK, KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_TYPED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_UNDEFINED, '!'));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_EXCLAMATION_MARK, KeyEvent.CHAR_UNDEFINED));", "-    definitions.setCaretPosition(doc.getLength());", "-    ", "-    // Type 'B'", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             KeyEvent.VK_B, KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_TYPED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_UNDEFINED, 'B'));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             KeyEvent.VK_B, KeyEvent.CHAR_UNDEFINED));", "-    definitions.setCaretPosition(doc.getLength());", "-    ", "-    // Type '9'", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_9, KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_TYPED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_UNDEFINED, '9'));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             0,", "-                                             KeyEvent.VK_9, KeyEvent.CHAR_UNDEFINED));", "-    definitions.setCaretPosition(doc.getLength());", "-    assertEquals(\"The text should have been inserted\", \"a!B9\",", "-                 doc.getText());", "+    assertEquals(\"The text should have been inserted\", \"a!B9\",  doc.getText());", "-    final KeyEvent e = new KeyEvent(definitions,", "-                                    KeyEvent.KEY_PRESSED,", "-                                    0,", "-                                    ks.getModifiers(),", "-                                    ks.getKeyCode(),", "+    final KeyEvent e = new KeyEvent(definitions, KeyEvent.KEY_PRESSED, 0, ks.getModifiers(), ks.getKeyCode(),", "-    definitions.processKeyEvent(e);", "-    //                              ks.getKeyChar());", "-    // Performs the action a", "-    //    SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "-    //    doc.getUndoManager().undo();", "-    assertEquals(\"Should have undone correctly.\", \"\",", "-                 doc.getText());", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.processKeyEvent(e); } });", "+  ", "+    assertEquals(\"Should have undone correctly.\", \"\", doc.getText());", "-    // Type 'Alt-B'", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.ALT_MASK,", "-                                             KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_TYPED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.ALT_MASK,", "-                                             KeyEvent.VK_UNDEFINED, 'Q'));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.ALT_MASK,", "-                                             KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+    // What does the following code test?  There are no assertions!  -- Corky 5/9/06", "-    /*", "-     * If the bug is not fixed in DefinitionsPane.processKeyEvent, this test", "-     * will not fail because the exception is thrown in another thread.", "-     * However, the stack trace will get printed onto the console.  I don't", "-     * know how to fix this problem in case someone unfixes the bug.", "-     */", "-    SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "+    // Type 'Alt-B'", "+     Utilities.invokeAndWait(new Runnable() {", "+       public void run() {", "+         definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                  KeyEvent.KEY_PRESSED,", "+                                                  (new Date()).getTime(),", "+                                                  InputEvent.ALT_MASK,", "+                                                  KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+         definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                  KeyEvent.KEY_TYPED,", "+                                                  (new Date()).getTime(),", "+                                                  InputEvent.ALT_MASK,", "+                                                  KeyEvent.VK_UNDEFINED, 'Q'));", "+         definitions.processKeyEvent(new KeyEvent(definitions,", "+                                                  KeyEvent.KEY_RELEASED,", "+                                                  (new Date()).getTime(),", "+                                                  InputEvent.ALT_MASK,", "+                                                  KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+         ", "+         /*", "+          * If the bug is not fixed in DefinitionsPane.processKeyEvent, this test", "+          * will not fail because the exception is thrown in another thread.", "+          * However, the stack trace will get printed onto the console.  I don't", "+          * know how to fix this problem in case someone unfixes the bug.", "+          */", "+         SwingUtilities.notifyAction(a, ks, e, e.getSource(), e.getModifiers());", "+       }", "+     });", "+     ", "+     _log.log(\"testGranularUndo completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca11cff7162029843bbea499e21098e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testShiftBackspace() throws BadLocationException", "signatureAfterChange": "   public void testShiftBackspace() throws BadLocationException", "diff": ["-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+//    _log.log(\"Starting testShiftBackSpace\");", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    doc.insertString(0, \"test\", null);", "-    definitions.setCaretPosition(4);", "-    int shiftBackspaceCode =", "-      OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "-    // The following is the sequence of key events for shift+backspace", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftBackspaceCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftBackspaceCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(\"test\", null);", "+        definitions.setCaretPosition(4);", "+    ", "+        int shiftBackspaceCode = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "+        ", "+        // The following is the sequence of key events for shift+backspace", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        _log.log(\"first key event processed\");", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        _log.log(\"second key event processed\");", "+      }", "+    });", "+    _log.log(\"Halfway through testShiftBackspace\");", "-    int shiftDeleteCode =", "-      OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "-    definitions.setCaretPosition(1);", "-    // The following is the sequence of key events for shift+delete", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftDeleteCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftDeleteCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        int shiftDeleteCode =", "+          OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "+        definitions.setCaretPosition(1);", "+        // The following is the sequence of key events for shift+delete", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "+                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "+                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+      }", "+    });", "+    ", "+    _log.log(\"testShiftBackSpace completed\");"]}], "num": 3690}
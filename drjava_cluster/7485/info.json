{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "848dcd5066f60596af46b204466fe810", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa3d15c7337ee7e69c35e31a43a7fa3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void _insertGap( int length )", "signatureAfterChange": "   public void _insertGap(int length)", "diff": ["-   */", "-  public void _insertGap( int length )", "-\t\t{", "-\t\t\t//0 - a", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToRight())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_cursor.next();", "-\t\t\t\t\t\t\t_augmentCurrentGap(length); //increases gap and moves offset", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length);//inserts gap and goes to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//0 - b", "-\t\t\telse if (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToLeft())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_augmentGapToLeft(length);", "-              //increases the gap to the left and", "-\t\t\t\t\t\t\t//cursor to next item in list leaving offset 0\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length); //inserts gap and moves to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t//5", "-\t\t\t//offset should never be greater than 1 here because JAVA only has 2", "-\t\t\t//char comments", "-\t\t\telse if (_cursor.current().isMultipleCharBrace() && (_offset > 0))", "-\t\t\t\t{", "-\t\t\t\t\tif (_offset > 1)", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"OFFSET TOO BIG:  \"+", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _offset);", "-\t\t\t\t\t", "-\t\t\t\t\t_breakComment(_cursor); //leaves us inside comment", "-\t\t\t\t\t_insertNewGap(length); //inserts gap and goes to next item", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//1", "-\t\t\telse if (_cursor.current().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t_cursor.current().grow(length);", "-\t\t\t\t\t_offset += length;", "-\t\t\t\t}", "-\t\t\t//2", "-\t\t\telse if (!_cursor.atFirstItem() &&", "-\t\t\t\t\t\t\t _cursor.prevItem().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t//already pointing to next item", "-\t\t\t\t\t_cursor.prevItem().grow(length);", "-\t\t\t\t}", "-\t\t\t//4", "-\t\t\telse //between two braces", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewGap(length); //inserts a gap and goes to the next item", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void _insertGap(int length) {", "+    //0 - a", "+    if (_cursor.atStart()) {", "+      if (_gapToRight()) {", "+        _cursor.next();", "+        _augmentCurrentGap(length); //increases gap and moves offset", "+      }", "+      else {", "+        _insertNewGap(length);//inserts gap and goes to next item", "+      }", "+    }", "+    //0 - b", "+    else if (_cursor.atEnd()) {", "+      if (_gapToLeft()) {", "+        _augmentGapToLeft(length);", "+        //increases the gap to the left and", "+        //cursor to next item in list leaving offset 0              ", "+      }", "+      else {", "+        _insertNewGap(length); //inserts gap and moves to next item", "+      }", "+    }", "+    ", "+    //5", "+    //offset should never be greater than 1 here because JAVA only has 2", "+    //char comments", "+    else if (_cursor.current().isMultipleCharBrace() && (_offset > 0)) {", "+      if (_offset > 1) {", "+        throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" +", "+                                           _offset);", "+      }", "+      _breakComment(_cursor); //leaves us inside comment", "+      _insertNewGap(length); //inserts gap and goes to next item", "+      return;", "+    }", "+    ", "+    //1", "+    else if (_cursor.current().isGap()) {", "+      _cursor.current().grow(length);", "+      _offset += length;", "+    }", "+    //2", "+    else if (!_cursor.atFirstItem() &&", "+             _cursor.prevItem().isGap())", "+    {", "+      //already pointing to next item", "+      _cursor.prevItem().grow(length);", "+    }", "+    //4", "+    else { //between two braces", "+      _insertNewGap(length); //inserts a gap and goes to the next item", "+    }", "+    return;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5f52ec49ce84d8d03f65bacbb576aa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void _insertGap( int length )", "signatureAfterChange": "   public void _insertGap(int length)", "diff": ["-   */", "-  public void _insertGap( int length )", "-\t\t{", "-\t\t\t//0 - a", "-\t\t\tif (_cursor.atStart())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToRight())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_cursor.next();", "-\t\t\t\t\t\t\t_augmentCurrentGap(length); //increases gap and moves offset", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length);//inserts gap and goes to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//0 - b", "-\t\t\telse if (_cursor.atEnd())", "-\t\t\t\t{", "-\t\t\t\t\tif (_gapToLeft())", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_augmentGapToLeft(length);", "-              //increases the gap to the left and", "-\t\t\t\t\t\t\t//cursor to next item in list leaving offset 0\t\t\t\t\t\t\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t_insertNewGap(length); //inserts gap and moves to next item", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-", "-\t\t\t//5", "-\t\t\t//offset should never be greater than 1 here because JAVA only has 2", "-\t\t\t//char comments", "-\t\t\telse if (_cursor.current().isMultipleCharBrace() && (_offset > 0))", "-\t\t\t\t{", "-\t\t\t\t\tif (_offset > 1)", "-\t\t\t\t\t\tthrow new IllegalArgumentException(\"OFFSET TOO BIG:  \"+", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t _offset);", "-\t\t\t\t\t", "-\t\t\t\t\t_breakComment(_cursor); //leaves us inside comment", "-\t\t\t\t\t_insertNewGap(length); //inserts gap and goes to next item", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t", "-\t\t\t//1", "-\t\t\telse if (_cursor.current().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t_cursor.current().grow(length);", "-\t\t\t\t\t_offset += length;", "-\t\t\t\t}", "-\t\t\t//2", "-\t\t\telse if (!_cursor.atFirstItem() &&", "-\t\t\t\t\t\t\t _cursor.prevItem().isGap())", "-\t\t\t\t{", "-\t\t\t\t\t//already pointing to next item", "-\t\t\t\t\t_cursor.prevItem().grow(length);", "-\t\t\t\t}", "-\t\t\t//4", "-\t\t\telse //between two braces", "-\t\t\t\t{", "-\t\t\t\t\t_insertNewGap(length); //inserts a gap and goes to the next item", "-\t\t\t\t}", "-\t\t\treturn;", "-\t\t}", "+  */", "+  public void _insertGap(int length) {", "+    //0 - a", "+    if (_cursor.atStart()) {", "+      if (_gapToRight()) {", "+        _cursor.next();", "+        _augmentCurrentGap(length); //increases gap and moves offset", "+      }", "+      else {", "+        _insertNewGap(length);//inserts gap and goes to next item", "+      }", "+    }", "+    //0 - b", "+    else if (_cursor.atEnd()) {", "+      if (_gapToLeft()) {", "+        _augmentGapToLeft(length);", "+        //increases the gap to the left and", "+        //cursor to next item in list leaving offset 0              ", "+      }", "+      else {", "+        _insertNewGap(length); //inserts gap and moves to next item", "+      }", "+    }", "+    ", "+    //5", "+    //offset should never be greater than 1 here because JAVA only has 2", "+    //char comments", "+    else if (_cursor.current().isMultipleCharBrace() && (_offset > 0)) {", "+      if (_offset > 1) {", "+        throw new IllegalArgumentException(\"OFFSET TOO BIG:  \" +", "+                                           _offset);", "+      }", "+      _breakComment(_cursor); //leaves us inside comment", "+      _insertNewGap(length); //inserts gap and goes to next item", "+      return;", "+    }", "+    ", "+    //1", "+    else if (_cursor.current().isGap()) {", "+      _cursor.current().grow(length);", "+      _offset += length;", "+    }", "+    //2", "+    else if (!_cursor.atFirstItem() &&", "+             _cursor.prevItem().isGap())", "+    {", "+      //already pointing to next item", "+      _cursor.prevItem().grow(length);", "+    }", "+    //4", "+    else { //between two braces", "+      _insertNewGap(length); //inserts a gap and goes to the next item", "+    }", "+    return;", "+  }"]}], "num": 7485}
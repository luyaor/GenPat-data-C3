{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9fb03dabec41b866072e43eef07dc73", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7d6c7ae81987b1c8d8dcdd04d5ccc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void junitAll(List<String> qualifiedClassnames, List<File> files)", "signatureAfterChange": "   public void junitAll(List<String> qualifiedClassnames, List<File> files)", "diff": ["-  public void junitAll(List<String> qualifiedClassnames, List<File> files){", "-    _notifier.junitAllStarted();", "-    List<String> tests = _jvm.runTestSuite(qualifiedClassnames, files, true);", "-    _isTestInProgress = true;", "+  public void junitAll(List<String> qualifiedClassnames, List<File> files) {", "+    synchronized (_compilerModel) {", "+      synchronized (this) {", "+        if (_testInProgress) return;", "+        _testInProgress = true;", "+      }", "+      try {", "+        List<String> testClasses = _jvm.findTestClasses(qualifiedClassnames, files);", "+        if (testClasses.isEmpty()) {", "+          nonTestCase(true);", "+          return;", "+        } ", "+        _notifier.junitAllStarted(); ", "+        _jvm.runTestSuite();", "+      }", "+      catch(IOException e) { ", "+        _notifier.junitEnded();", "+        throw new UnexpectedException(e); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93655b1abd2f9b5c226556b48efc8ec8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "688e157c7573e27d29048be4b5c2986e80d14e52", "commitAfterChange": "b8ed4d4bbe5cb36f7fb86bf02c301a4f948a603e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void removeAllListeners()", "signatureAfterChange": "   public void removeAllListeners()", "diff": ["-  /** Removes all listeners from this notifier.  */", "+    * Note: It is NOT guaranteed that the listener will not be executed again. */", "-    _lock.startWrite();", "-    try { _listeners.clear(); }", "-    finally {", "-      _lock.endWrite();", "+    try { ", "+      _lock.startWrite();", "+      try { _listeners.clear(); }", "+      finally {", "+        _lock.endWrite();", "+      }", "+    }", "+    catch(ReaderWriterLock.DeadlockException e) {", "+      // couldn't remove right now because this thread already owns a lock", "+      // remember to remove it later", "+      new Thread(new Runnable() {", "+        public void run() {", "+          _lock.startWrite();", "+          try { _listeners.clear(); }", "+          finally { _lock.endWrite(); }", "+        }", "+      }, \"Pending Listener Removal\").start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95c13416be68b6e5b1ed9b15f9bbd4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "688e157c7573e27d29048be4b5c2986e80d14e52", "commitAfterChange": "b8ed4d4bbe5cb36f7fb86bf02c301a4f948a603e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void removeListener(T listener)", "signatureAfterChange": "   public void removeListener(final T listener)", "diff": ["-   */", "-  public void removeListener(T listener) {", "+    */", "+  public void removeListener(final T listener) {", "-    _lock.startWrite();", "-    try { _listeners.remove(listener); }", "-    finally {", "-      _lock.endWrite();", "+    try {", "+      _lock.startWrite();", "+      try { _listeners.remove(listener); }", "+      finally {", "+        _lock.endWrite();", "+      }", "+    }", "+    catch(ReaderWriterLock.DeadlockException e) {", "+      // couldn't remove right now because this thread already owns a lock", "+      // remember to remove it later", "+      new Thread(new Runnable() {", "+        public void run() {", "+          _lock.startWrite();", "+          try { _listeners.remove(listener); }", "+          finally { _lock.endWrite(); }", "+        }", "+      }, \"Pending Listener Removal\").start();", "+//      synchronized(_listenersToRemove) {", "+//        _listenersToRemove.add(listener);", "+//      }"]}], "num": 3858}
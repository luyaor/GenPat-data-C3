{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d7d2900d0d37f0bc0a59f459b6a9176", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d59a8ba097c37116a73484a9e0a001", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result,                                                       TypeData value_result)", "diff": ["-   */", "-  public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, TypeData value_result) {", "+    */", "+  public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, ", "+                                                     TypeData value_result) {", "-    if (assertInstanceType(name_result, \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type \" + name_result.getName(), that) &&", "-        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + \" on the left hand side of a numeric assignment (-=, %=, *=, /=)\", that)) {", "+    if (assertInstanceType(name_result, \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type \" + ", "+                           name_result.getName(), that) &&", "+        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + ", "+                           \" on the left hand side of a numeric assignment (-=, %=, *=, /=)\", that)) {", "-      if (!name_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);", "+      if (!name_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+        _addError(\"The left side of this expression is not a number.  \" + ", "+                  \"Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);", "-      if (!value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);", "+      if (!value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+        _addError(\"The right side of this expression is not a number.  \" + ", "+                  \"Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", that);", "-      //make sure the lhs is parent type of rhs  NOTE: technically, this is allowable in full java (try int i = 0; i+= 4.2), but it is inconsistent", "-      //with the fact that you cannot say int i = 0; i = i + 4.2;  To avoid student confusion, we will not allow it.", "-      if (!error && !value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type \" + name_result.getName() + \" with something of type \" + value_result.getName(), that);", "+      // Make sure the lhs is parent type of rhs  NOTE: technically this is allowable in full java but inconsistent", "+      // with the fact that you cannot say int i = 0; i = i + 4.2;  To avoid student confusion, we will not allow it.", "+      if (!error && !value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), ", "+                                                                 JAVA_VERSION)) {", "+        _addError(\"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type \" + name_result.getName() + ", "+                  \" with something of type \" + value_result.getName(), that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6444b6a1b183e68d29607cfa2c112b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */", "+    */", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "-      return null;", "-    }", "-", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) return null;", "-    if (!left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    if (!left_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator\" +", "+                \" (<, >; <=, >=) to it\", that);", "-    if (!right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    if (!right_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator\" +", "+                \" (<, >; <=, >=) to it\", that);"]}], "num": 25203}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0aff5bc4f020a9637e84b396d9015b2a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58763006fb131adf47d419d0346e4684", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public void forModifiersAndVisibilityDoFirst(ModifiersAndVisibility that)", "signatureAfterChange": "   public void forModifiersAndVisibilityDoFirst(ModifiersAndVisibility that)", "diff": ["-   */", "+    */", "-          if (!visibility.equals(\"package\")) {", "-            _badModifiers(visibility, s, that);", "-          }", "-          else if (s.equals(\"private\") && isAbstract) {", "-            _badModifiers(\"private\", \"abstract\", that);", "-          }", "-          else {", "-            visibility = s;", "-          }", "+          if (! visibility.equals(\"package\")) _badModifiers(visibility, s, that);", "+          else if (s.equals(\"private\") && isAbstract) _badModifiers(\"private\", \"abstract\", that);", "+          else visibility = s;", "-        else if (s.equals(\"abstract\")) {", "-          isAbstract = true;", "-        }", "+        else if (s.equals(\"abstract\")) isAbstract = true;", "-          if (isAbstract) {", "-            _badModifiers(\"final\", \"abstract\", that);", "-          }", "+          if (isAbstract) _badModifiers(\"final\", \"abstract\", that);", "-          if (isAbstract) {", "-            _badModifiers(\"static\", \"abstract\", that);", "-          }", "+          if (isAbstract)  _badModifiers(\"static\", \"abstract\", that);", "-          if (isAbstract) {", "-            _badModifiers(\"native\", \"abstract\", that);", "-          }", "+          if (isAbstract) _badModifiers(\"native\", \"abstract\", that);", "-          if (isAbstract) {", "-            _badModifiers(\"synchronized\", \"abstract\", that);", "-          }", "+          if (isAbstract) _badModifiers(\"synchronized\", \"abstract\", that);", "-          if (isFinal) {", "-            _badModifiers(\"final\", \"volatile\", that);", "-          }", "+          if (isFinal) _badModifiers(\"final\", \"volatile\", that);", "-      forJExpressionDoFirst(that);", "+      forJExpressionDoFirst(that);  // Does nothing!"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c904f999154a16d30ef1becfe9e1f3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c68bda7492524887225ee8f4963e9d7935485197", "commitAfterChange": "7e14052430c5a0fbe8641ad3a0f464f6b201c49d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private ModifiersAndVisibility _createMav(AccessFlags af)", "signatureAfterChange": "   private ModifiersAndVisibility _createMav(int flags)", "diff": ["-  private ModifiersAndVisibility _createMav(AccessFlags af) {", "+  private ModifiersAndVisibility _createMav(int flags) {", "-    if (af.isAbstract()) {", "-      strings.addLast(\"abstract\");", "-    }", "-    if (af.isFinal()) {", "-      strings.addLast(\"final\");", "-    }", "-    if (af.isNative()) {", "-      strings.addLast(\"native\");", "-    }", "-    if (af.isPrivate()) {", "-      strings.addLast(\"private\");", "-    }", "-    if (af.isProtected()) {", "-      strings.addLast(\"protected\");", "-    }", "-    if (af.isPublic()) {", "-      strings.addLast(\"public\");", "-    }", "-    if (af.isStatic()) {", "-      strings.addLast(\"static\");", "-    }", "-    if (af.isStrictfp()) {", "-      strings.addLast(\"strictfp\");", "-    }", "-    if (af.isSynchronized()) {", "-      strings.addLast(\"synchronized\");", "-    }", "-    if (af.isTransient()) {", "-      strings.addLast(\"transient\");", "-    }", "-    if (af.isVolatile()) {", "-      strings.addLast(\"volatile\");", "-    }", "+    if (Modifier.isAbstract(flags)) { strings.addLast(\"abstract\"); }", "+    if (Modifier.isFinal(flags)) { strings.addLast(\"final\"); }", "+    if (Modifier.isNative(flags)) { strings.addLast(\"native\"); }", "+    if (Modifier.isPrivate(flags)) { strings.addLast(\"private\"); }", "+    if (Modifier.isProtected(flags)) { strings.addLast(\"protected\"); }", "+    if (Modifier.isPublic(flags)) { strings.addLast(\"public\"); }", "+    if (Modifier.isStatic(flags)) { strings.addLast(\"static\"); }", "+    if (Modifier.isStrict(flags)) { strings.addLast(\"strictfp\"); }", "+    if (Modifier.isSynchronized(flags)) { strings.addLast(\"synchronized\"); }", "+    if (Modifier.isTransient(flags)) { strings.addLast(\"transient\"); }", "+    if (Modifier.isVolatile(flags)) { strings.addLast(\"volatile\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "713a3052278edf40c7048c54a7f8c094", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 211, "methodNumberAfterChange": 213, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+//        System.err.println(\"saveFileAs called\");", "+//        System.err.println(\"saveFileAs called on \" + file);", "-        boolean shouldSave = false;", "-        boolean openInOtherDoc = ((otherDoc != null) && (openDoc != otherDoc));", "+", "-        if (openInOtherDoc) shouldSave = com.warnFileOpen(file);", "-          // Can't save over an open document", "+        boolean openInOtherDoc = ((otherDoc != null) && (openDoc != otherDoc));", "-        // If the file exists, make sure it's ok to overwrite it", "-        if ((shouldSave && openInOtherDoc) || ", "-            (!openInOtherDoc && (!file.exists() || com.verifyOverwrite()))) {", "+        // If the file is open in another document, abort if user does not confirm overwriting it", "+        if (openInOtherDoc) {", "+          boolean shouldOverwrite = com.warnFileOpen(file);", "+          if (! shouldOverwrite) return true; // operation not cancelled?  Strange", "+        }", "+        ", "+        if (! file.exists() || com.verifyOverwrite()) {  // confirm that existing file can be overwritten", "+          ", "+//          System.err.println(\"Writing file \" + file);", "+//          System.err.println(\"Calling FileOps.saveFile to save it\");", "-              try { _editorKit.write(os, doc, 0, doc.getLength()); } ", "+              try { ", "+                doc.acquireReadLock();  // Technically required, but looks like overkill.", "+                _editorKit.write(os, doc, 0, doc.getLength());", "+                doc.releaseReadLock();", "+//                Utilities.show(\"Wrote file containing:\\n\" + doc.getText());", "+              } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71cad6897ec776bf180356fef35e5165", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "+        if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+        else setPosition(getCurrentOffset() - wordLength);", "-      // if we've found it", "-      if (foundOffset >= 0) {", "+", "+      if (foundOffset >= 0) { // we have found it", "-        if (!_searchBackwards) {", "-          foundOffset += findWord.length();", "-        }", "+        if (!_searchBackwards) foundOffset += findWord.length();", "-      else {", "-        // if we haven't found it", "+      else { // we haven't found it yet", "-        // we still haven't found it", "-        if (foundOffset == -1) {", "+        if (foundOffset == -1) {  // we still haven't found it", "-            if (len > _doc.getLength()) {", "-              len = _doc.getLength();", "-            }", "+            if (len > _doc.getLength()) len = _doc.getLength();", "-          else {", "+          else {  // found it", "-            if (start < 0) {", "-              start = 0;", "-            }", "+            if (start < 0) start = 0;", "-          if (!_matchCase) {", "-            findSpace = findSpace.toLowerCase();", "-          }", "+          if (!_matchCase) findSpace = findSpace.toLowerCase();", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-            }", "+            if (!_searchBackwards) foundOffset += findWord.length();", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9af590235f1c0004e911e7a7fdcd030d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "93940c21f6995f648e815e21c209f78be7209afc", "commitAfterChange": "a81421c85ea0de5b8b8c763de6071719d4028205", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "   private File[] getChosenFiles(JFileChooser fc, int choice)     throws OperationCanceledException", "signatureAfterChange": "   private File[] getChosenFiles(JFileChooser fc, int choice)     throws OperationCanceledException", "diff": ["-            throw new RuntimeException(\"filechooser returned null file\");", "+            throw new UnexpectedException(new OperationCanceledException(), \"filechooser returned null file\");", "-        ", "-        // this new File[] { null } is totally unaccounted for in originating", "-        // method calls", "-        //if (chosen.length == 0) chosen = new File[] { null };", "-        if (chosen.length == 0) { throw new OperationCanceledException(); }", "-        ", "-        if (chosen[0] == null) { ", "-          // why was this here? we shouldn't expect to get", "-          // something totally new from fc.", "-          //chosen[0] = fc.getSelectedFile();", "-          throw new OperationCanceledException();", "+        // If this is a single-selection dialog, getSelectedFiles() will always", "+        // return a zero-size array -- handle it differently.", "+        if (chosen.length == 0) {", "+          if (!fc.isMultiSelectionEnabled()) {", "+            return new File[] { fc.getSelectedFile() };", "+          }", "+          else {", "+            /* This is the workaround for bug 70902: sometimes Mac OS X will return", "+             * APPROVE_OPTION when the user clicks the close (x) control button", "+             * on the dialog window, even though nothing is selected.", "+             */", "+            throw new OperationCanceledException();", "+          }", "-        return chosen;", "+        else {", "+          return chosen;", "+        }", "-        throw  new RuntimeException(\"filechooser returned bad rc \" + choice);", "+        throw new UnexpectedException(new OperationCanceledException(), \"filechooser returned bad rc \" + choice);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a311ff941ee646509ab826e1c260c472", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "d8dc2cdeba22db2fb0316de83a445bb83f56ae4d", "commitAfterChange": "fecb09777cd63cca239611fe19e85d2f0e8401e9", "methodNumberBeforeChange": 637, "methodNumberAfterChange": 7, "signatureBeforeChange": "    final private boolean jj_3R_556()", "signatureAfterChange": "    private void checkModifiers(int flags, int notAllowed) throws ParseException", "diff": ["+  private void checkModifiers(int flags, int notAllowed) throws ParseException {", "+    if(Modifier.isPublic(flags) && Modifier.isPublic(notAllowed))", "+      _throwParseException(\"Modifier public is not allowed here\");", "+    if(Modifier.isPrivate(flags) && Modifier.isPrivate(notAllowed))", "+      _throwParseException(\"Modifier private is not allowed here\");", "+    if(Modifier.isProtected(flags) && Modifier.isProtected(notAllowed))", "+      _throwParseException(\"Modifier protected is not allowed here\");", "+    if(Modifier.isAbstract(flags) && Modifier.isAbstract(notAllowed))", "+      _throwParseException(\"Modifier abstract is not allowed here\");", "+    if(Modifier.isFinal(flags) && Modifier.isFinal(notAllowed))", "+      _throwParseException(\"Modifier final is not allowed here\");", "+    if(Modifier.isStatic(flags) && Modifier.isStatic(notAllowed))", "+      _throwParseException(\"Modifier static is not allowed here\");", "+    if(Modifier.isNative(flags) && Modifier.isNative(notAllowed))", "+      _throwParseException(\"Modifier native is not allowed here\");", "+    if(Modifier.isSynchronized(flags) && Modifier.isSynchronized(notAllowed))", "+      _throwParseException(\"Modifier synchronized is not allowed here\");", "+    if(Modifier.isTransient(flags) && Modifier.isTransient(notAllowed))", "+      _throwParseException(\"Modifier transient is not allowed here\");", "+    if(Modifier.isVolatile(flags) && Modifier.isVolatile(notAllowed))", "+      _throwParseException(\"Modifier volatile is not allowed here\");", "+  }", "-  final private boolean jj_3R_556() {", "-    if (jj_scan_token(PROTECTED)) return true;"]}], "num": 20635}
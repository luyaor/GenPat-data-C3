{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da7d9df84d8602f62a6511fa011ed7a3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9924197771f763875bcffbb6209223", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "50d7405dbdeb05d9fc0520b24d57e1f92428ff65", "commitAfterChange": "7ff90c83877cc5b21bb771b7b8f391533604640f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "signatureAfterChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "diff": ["-    Iterable<File> searchPath = IterUtil.compose(LanguageLevelConverter.OPT.bootClassPath(),", "-                                                 LanguageLevelConverter.OPT.classPath());", "-    if (directoryName != null) { searchPath = IterUtil.compose(searchPath, new File(directoryName)); }", "-    ", "-      /** We'll use this class loader to look up resources (*not* to load classes) */", "-      PathClassLoader loader = new PathClassLoader(EmptyClassLoader.INSTANCE, searchPath);", "-      InputStream stream = loader.getResourceAsStream(qualifiedClassName.replace('.', '/') + \".class\");", "+      String fileName = qualifiedClassName.replace('.', '/') + \".class\";", "+      InputStream stream = RESOURCES.value().getResourceAsStream(fileName);", "+      if (stream == null && directoryName != null) {", "+        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(directoryName));", "+      }", "-    //This is done so that the SymbolData in the Symboltable is updated and returned.", "+    // This is done so that the SymbolData in the Symboltable is updated and returned.", "-    //make it be a non-continuation, since we are filing it in", "+    // make it be a non-continuation, since we are filling it in"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c2532364bf5df3a0e228ee594c3aa9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["+    assert desc != null;", "+    ", "-    JDKToolsLibrary.msg(\"\\tdesc = \"+desc);", "+    JDKToolsLibrary.msg(\"    desc = \"+desc);", "-    if (desc!=null) {", "-      isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "-      try {", "-        additionalCompilerFiles = desc.getAdditionalCompilerFiles(f);", "-      }", "-      catch(FileNotFoundException fnfe) {", "-        // not all additional compiler files were found", "-        isSupported = false;", "-      }", "+", "+    // JDKDescriptor.NONE will require JavaVersion.CURRENT to be at least JavaVersion.JAVA_1_1,", "+    // i.e. it will always be supported", "+    isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "+    try {", "+      additionalCompilerFiles = desc.getAdditionalCompilerFiles(f);", "+    }", "+    catch(FileNotFoundException fnfe) {", "+      // not all additional compiler files were found", "+      isSupported = false;", "-      String compilerAdapter = adapterForCompiler(version);", "-      if (desc!=null) {", "-        compilerAdapter = desc.getAdapterForCompiler();", "-      }", "+      String compilerAdapter = desc.getAdapterForCompiler(version);", "-      String debuggerAdapter = adapterForDebugger(version);", "-      if (desc!=null) {", "-        debuggerAdapter = desc.getAdapterForDebugger();", "-      }", "+      String debuggerAdapter = desc.getAdapterForDebugger(version);"]}], "num": 23949}
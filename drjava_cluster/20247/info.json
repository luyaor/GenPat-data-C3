{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c6eb5c17ef09805fb67273807e55458", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aff8526bedb7678e301408051cd1b11d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "    protected static Object performCast(Class tc, Object o)", "signatureAfterChange": "   protected static Object performCast(Class tc, Object o)", "diff": ["+     */", "-    return EvaluationVisitor.performCast(tc, o);", "+    Class ec = (o != null) ? o.getClass() : null;", "+    ", "+    if (tc != ec && tc.isPrimitive() && ec != null) {", "+      if (tc != char.class && ec == Character.class) {", "+        o = new Integer(((Character)o).charValue());", "+      } else if (tc == byte.class) {", "+        o = new Byte(((Number)o).byteValue());", "+      } else if (tc == short.class) {", "+        o = new Short(((Number)o).shortValue());", "+      } else if (tc == int.class) {", "+        o = new Integer(((Number)o).intValue());", "+      } else if (tc == long.class) {", "+        o = new Long(((Number)o).longValue());", "+      } else if (tc == float.class) {", "+        o = new Float(((Number)o).floatValue());", "+      } else if (tc == double.class) {", "+        o = new Double(((Number)o).doubleValue());", "+      } else if (tc == char.class && ec != Character.class) {", "+        o = new Character((char)((Number)o).shortValue());", "+      }", "+    }", "+    return o;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4bcb40f73983ec24a7bf76f37a8bf24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "7f62f2f9bc3bd568f4385528634c331480fbe08e", "commitAfterChange": "d55b82d942f5baa7bd5bf3a1d9f1f1f9dce04a39", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Object visit(VariableDeclaration node)", "diff": ["-        _context.set(node.getName(), UninitializedObject.INSTANCE);", "+        // Non-final variables have default values, and are not uninitialized.", "+        // Primitive variables have special default values, Objects default to null.", "+        // Fixes bug #797515.", "+//        _context.set(node.getName(), UninitializedObject.INSTANCE);", "+        Object value = null;", "+        if (!c.isPrimitive()) {", "+          value = null;", "+        }", "+        else if (c == byte.class) {", "+          value = new Byte((byte)0);", "+        }", "+        else if (c == short.class) {", "+          value = new Short((short)0);", "+        }", "+        else if (c == int.class) {", "+          value = new Integer(0);", "+        }", "+        else if (c == long.class) {", "+          value = new Long(0L);", "+        }", "+        else if (c == float.class) {", "+          value = new Float(0.0f);", "+        }", "+        else if (c == double.class) {", "+          value = new Double(0.0d);", "+        }", "+        else if (c == char.class) {", "+          value = new Character('\\u0000');", "+        }", "+        else if (c == boolean.class) {", "+          value = new Boolean(false);", "+        }", "+        _context.set(node.getName(), value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7cb6e814391e260b92a7b0fb2a33820", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "4d3fa64499badc01be2d089cba1394a47c2f30de", "commitAfterChange": "ed48d6b9cb86b6e63d0852d1106c5aba17823c84", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   private Object buildArrayOfRemainingArgs(Class[] typs, int larg_size, Iterator<Expression> it)", "signatureAfterChange": "   private Object buildArrayOfRemainingArgs(Class[] typs, int larg_size, Iterator<Expression> it)", "diff": ["-      Array.set(argArray, j, performCast(componentType, p));", "+      Object casted = performCast(componentType, p);", "+      if (componentType.isPrimitive()) {", "+        if (componentType == boolean.class && casted instanceof Boolean) {", "+          Array.setBoolean(argArray, j, ((Boolean)casted).booleanValue());", "+        }", "+        else if (componentType == char.class && casted instanceof Character) {", "+          Array.setChar(argArray, j, ((Character)casted).charValue());", "+        }", "+        else if (casted instanceof Number) {", "+          if (componentType == char.class) { // just in case", "+            Array.setChar(argArray, j, (char)((Number)casted).intValue());", "+          }", "+          else if (componentType == byte.class) {", "+            Array.setByte(argArray, j, ((Number)casted).byteValue());", "+          }", "+          else if (componentType == short.class) {", "+            Array.setShort(argArray, j, ((Number)casted).shortValue());", "+          }", "+          else if (componentType == int.class) {", "+            Array.setInt(argArray, j, ((Number)casted).intValue());", "+          }", "+          else if (componentType == long.class) {", "+            Array.setLong(argArray, j, ((Number)casted).longValue());", "+          }", "+          else if (componentType == float.class) {", "+            Array.setFloat(argArray, j, ((Number)casted).floatValue());", "+          }", "+          else { // double", "+            Array.setDouble(argArray, j, ((Number)casted).doubleValue());", "+          }", "+        }", "+        else {", "+          throw new ClassCastException(\"Cannot insert object of type \" + casted.getClass() + \" into primitive array\");", "+        }", "+      }", "+      else {", "+        Array.set(argArray, j, casted);", "+      }"]}], "num": 20247}
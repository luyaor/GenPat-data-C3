{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be5b7ea9212e24a9206a3b648d7a46da", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c1c9ccdaa5b7f2ad1765140aa3818e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-  /** Abstracted out since this is called from find and replace/find. */", "+  /** Abstracted out since this is called from findNext and findPrevious. */", "-//      _model.addToBrowserHistory();", "-      _updateMachine();", "+//      _updateMachine();", "-      FindResult fr = _machine.findNext();", "-      OpenDefinitionsDocument doc = fr.getDocument();", "-      OpenDefinitionsDocument matchDoc = _model.getODDForDocument(doc);", "-      OpenDefinitionsDocument openDoc = _defPane.getOpenDefDocument();", "-      final boolean docChanged = ! matchDoc.equals(openDoc);", "-      ", "-      final int pos = fr.getFoundOffset();", "-      ", "-      if (searchAll) {  // if search was global, reset the active document", "-        if (docChanged) _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "-        else _model.refreshActiveDocument();  // the unmodified active document may have been kicked out of the cache!", "-      } ", "-      ", "-      if (fr.getWrapped() && ! searchAll) {", "-        Toolkit.getDefaultToolkit().beep();", "-        if (! _machine.isSearchBackwards()) _frame.setStatusMessage(\"Search wrapped to beginning.\");", "-        else _frame.setStatusMessage(\"Search wrapped to end.\");", "-      }", "-      ", "-      if (fr.getAllWrapped() && searchAll) {", "-        Toolkit.getDefaultToolkit().beep();", "-        _frame.setStatusMessage(\"Search wrapped around all documents.\");", "-      }", "-      ", "-      if (pos >= 0) { // found a match", "-        Caret c = _defPane.getCaret();", "-        c.setDot(c.getDot());", "-        _defPane.setCaretPosition(pos);", "-        _caretChanged = true;", "-        _updateMachine();", "+      _frame.hourglassOn();", "+      try {", "+        FindResult fr = _machine.findNext();", "+        OpenDefinitionsDocument matchDoc = fr.getDocument();", "+//      OpenDefinitionsDocument matchDoc = _model.getODDForDocument(doc);", "+        OpenDefinitionsDocument openDoc = _defPane.getOpenDefDocument();", "+        final boolean docChanged = matchDoc != openDoc;", "-        final Runnable command = new Runnable() {", "-          public void run() {", "-            _selectFoundOrReplacedItem(findWord.length());", "-            _replaceAction.setEnabled(true);", "-            _replaceFindNextAction.setEnabled(true);", "-            _replaceFindPreviousAction.setEnabled(true);", "-            _machine.setLastFindWord();", "-            _model.addToBrowserHistory();", "-          } };", "+        final int pos = fr.getFoundOffset();", "-        if (docChanged)", "-          // defer executing this code until after active document switch is complete", "-          SwingUtilities.invokeLater(command);", "-        else command.run();", "+        if (pos >= 0) _model.addToBrowserHistory();  // pos >= 0  <=> search succeeded", "+        ", "+        if (searchAll) {  // if search was global, reset the active document", "+          if (docChanged) _model.setActiveDocument(matchDoc);  // set active doc if matchDoc != openDoc", "+          else _model.refreshActiveDocument();  // the unmodified active document may have been kicked out of the cache!", "+        } ", "+        ", "+        if (fr.getWrapped() && ! searchAll) {", "+          Toolkit.getDefaultToolkit().beep();", "+          if (! _machine.isSearchBackwards()) _frame.setStatusMessage(\"Search wrapped to beginning.\");", "+          else _frame.setStatusMessage(\"Search wrapped to end.\");", "+        }", "+        ", "+        if (fr.getAllWrapped() && searchAll) {", "+          Toolkit.getDefaultToolkit().beep();", "+          _frame.setStatusMessage(\"Search wrapped around all documents.\");", "+        }", "+        ", "+        if (pos >= 0) { // found a match", "+//        Caret c = _defPane.getCaret();", "+//        c.setDot(c.getDot());", "+          _defPane.setCaretPosition(pos);", "+          _caretChanged = true;", "+          _updateMachine();", "+          ", "+          final Runnable command = new Runnable() {", "+            public void run() {", "+              _selectFoundOrReplacedItem(findWord.length());", "+              _replaceAction.setEnabled(true);", "+              _replaceFindNextAction.setEnabled(true);", "+              _replaceFindPreviousAction.setEnabled(true);", "+              _machine.setLastFindWord();", "+              _model.addToBrowserHistory();", "+            } };", "+          ", "+          if (docChanged)", "+            // defer executing this code until after active document switch is complete", "+            EventQueue.invokeLater(command);", "+          else command.run();", "+        }", "+        // else the entire document was searched and no instance of the string", "+        // was found. display at most 50 characters of the non-found string", "+        else {", "+          Toolkit.getDefaultToolkit().beep();", "+          final StringBuilder statusMessage = new StringBuilder(\"Search text \\\"\");", "+          if (findWord.length() <= 50) statusMessage.append(findWord);", "+          else statusMessage.append(findWord.substring(0, 49) + \"...\");", "+          statusMessage.append(\"\\\" not found.\");", "+          _frame.setStatusMessage(statusMessage.toString());", "+        }", "-      // else the entire document was searched and no instance of the string", "-      // was found. display at most 50 characters of the non-found string", "-      else {", "-        Toolkit.getDefaultToolkit().beep();", "-        final StringBuilder statusMessage = new StringBuilder(\"Search text \\\"\");", "-        if (findWord.length() <= 50) statusMessage.append(findWord);", "-        else statusMessage.append(findWord.substring(0, 49) + \"...\");", "-        statusMessage.append(\"\\\" not found.\");", "-        _frame.setStatusMessage(statusMessage.toString());", "-      }", "+      finally { _frame.hourglassOff(); }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3ab0bab0754e8d7e354d7baeeb7434", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "diff": ["-   */", "+  /** Runs JUnit on the current document.  Forces the user to compile all open source documents before proceeding. */", "-    try {", "-      // try to get the file, to make sure it's not untitled. if it is, it'll throw an IllegalStateException", "-      File testFile = doc.getFile();", "-      LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "-      lod.add(doc);", "-      junitOpenDefDocs(lod, false);", "-    }", "-    catch (IllegalStateException e) {", "-      // No file exists, don't try to compile and test", "-      nonTestCase(false);", "-      return;", "-    }", "-    catch (NoClassDefFoundError e) {", "-      // Method getTest in junit.framework.BaseTestRunner can throw a NoClassDefFoundError (via reflection).", "-        _notifier.junitEnded();  // balances junitStarted()", "-        synchronized(_testLock) { _testInProgress = false; }", "-        throw e;", "-    }", "-    catch (ExitingNotAllowedException enae) {  // test attempted to call System.exit", "-      _notifier.junitEnded();  // balances junitStarted()", "-      synchronized(_testLock) { _testInProgress = false; }", "-      throw enae;", "-    }", "+    File testFile;", "+    try { testFile = doc.getFile(); ", "+      if (testFile == null) {  // document is untitiled: abort unit testing and return", "+        nonTestCase(false);", "+        return;", "+      }", "+    } ", "+    catch(FileMovedException fme) { /* do nothing */ }", "+    ", "+    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+    lod.add(doc);", "+    junitOpenDefDocs(lod, false);"]}], "num": 9195}
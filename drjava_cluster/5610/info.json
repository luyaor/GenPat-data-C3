{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "688367b2609ee6970d4189fb2bb73219", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e68b9d7bb80f1863ef8baaae2b7895", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringGlyphPainter.java", "commitBeforeChange": "3e1f0b197711c09bcaa8e8cd1c64fcbd3cdc889e", "commitAfterChange": "2b724606da56c514a2b323ed8ed64e67941fe5f2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      void sync(GlyphView v)", "signatureAfterChange": "      void sync(GlyphView v)", "diff": ["-    if ((metrics == null) || (! f.equals(metrics.getFont()))) {", "+    if ((_metrics == null) || (! f.equals(_metrics.getFont()))) {", "-      metrics = kit.getFontMetrics(f);", "+      /* Use of the deprecated method here is necessary to get a handle on", "+       * a FontMetrics object.  This is required by our dependence on the", "+       * javax.swing.text.Utilities class, which does a lot of Java 1.1-style", "+       * calculation (presumably these methods should be deprecated, too).", "+       * The deprecated use can't be fixed without an in-depth understanding", "+       * of fonts, glyphs, and font rendering.  Where _metrics is currently used,", "+       * the Font methods getLineMetrics, getStringBounds, getHeight, getAscent,", "+       * and getDescent will probably be helpful.", "+       */", "+      @SuppressWarnings(\"deprecation\") FontMetrics newMetrics = kit.getFontMetrics(f);", "+      _metrics = newMetrics;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f814dba2d97cbe1b871986af39654ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "commitAfterChange": "fc098bf0e8c385557d32ed3c183745582612add6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public InterpreterExtension()", "signatureAfterChange": "     public InterpreterExtension()", "diff": ["-      classLoader = new ClassLoaderExtension(this);", "+      ", "+      /** ", "+       * The following block was commented out because we are no longer using", "+       * the StickyClassLoader because 1) since we restart the InteractionsJVM", "+       * every time we reset or compile, the StickyClassLoader is unnecessary", "+       * and 2) the DebugManager will not work in its present form with the ", "+       * StickyClassLoader. In the future, an optimization can be made by", "+       * reenabling the StickyClassLoader and changing the DebugManager to ", "+       * use it (changes will have to be made in many places starting in ", "+       * getReferenceType since it just grabs the first class that ", "+       * classesByName returns right now) such that if no threads are still", "+       * running, only the StickyClassLoader has to be replaced.", "+       */", "+      ", "+      /*", "+       classLoader = new ClassLoaderExtension(this);", "+      */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af9bd095d99c791fc4d5f78dff91c484", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "530cb3b64455d081e962324602750973729aa1fb", "commitAfterChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public InterpreterExtension()", "signatureAfterChange": "     public InterpreterExtension()", "diff": ["-      /** ", "-       * The following block was commented out because we are no longer using", "-       * the StickyClassLoader because 1) since we restart the InteractionsJVM", "-       * every time we reset or compile, the StickyClassLoader is unnecessary", "-       * and 2) the DebugManager will not work in its present form with the ", "-       * StickyClassLoader. In the future, an optimization can be made by", "-       * reenabling the StickyClassLoader and changing the DebugManager to ", "-       * use it (changes will have to be made in many places starting in ", "-       * getReferenceType since it just grabs the first class that ", "-       * classesByName returns right now) such that if no threads are still", "-       * running, only the StickyClassLoader has to be replaced.", "-       */", "-      ", "-      /*", "-      */", "+      "]}], "num": 5610}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c47df5f51b5a07574225d5e744e3555", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a29c9e117f1124bcbb44a65eb83951", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "6f501e5fca95aec34d7430b68d9d987e33ec6129", "commitAfterChange": "f175bd951be0706c1171fa45b387f5428c58ddb3", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 211, "signatureBeforeChange": "   public static <T1, T2, T3, T4, R> Iterable<R>     valuesOf(Iterable<? extends Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ? extends R>> iter,               T1 arg1, T2 arg2, T3 arg3, T4 arg4)", "signatureAfterChange": "   public static <T1, T2, R> SizedIterable<R> map(Iterable<? extends T1> iter1, Iterable<? extends T2> iter2,                                                   Lambda2<? super T1, ? super T2, ? extends R> map)", "diff": ["+  public static <T1, T2, R> SizedIterable<R> map(Iterable<? extends T1> iter1, Iterable<? extends T2> iter2, ", "+                                                 Lambda2<? super T1, ? super T2, ? extends R> map) {", "+    return new BinaryMappedIterable<T1, T2, R>(iter1, iter2, map);", "-  /** Lazily create an iterable containing the values of the application of the given lambdas. */", "-  public static <T1, T2, T3, T4, R> Iterable<R>", "-    valuesOf(Iterable<? extends Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ? extends R>> iter, ", "-             T1 arg1, T2 arg2, T3 arg3, T4 arg4) {", "-    return new MappedIterable<Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ? extends R>, R>", "-                 (iter, new Lambda4Value<T1, T2, T3, T4, R>(arg1, arg2, arg3, arg4));", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9978cf12498f3036f8ae8ac4db1f3813", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 167, "signatureBeforeChange": "   public static <T, R> Iterable<R>      valuesOf(Iterable<? extends Lambda<? super T, ? extends R>> iter, final T arg)", "signatureAfterChange": "   public static <T, R> Iterable<R> valuesOf(Iterable<? extends Lambda<? super T, ? extends R>> iter, T arg)", "diff": ["-  /** @return  An iterable containing the values of the application of the given lambdas */", "-  public static <T, R> Iterable<R> ", "-    valuesOf(Iterable<? extends Lambda<? super T, ? extends R>> iter, final T arg) {", "-    Lambda<Lambda<? super T, ? extends R>, R> lambdaValue = ", "-      new Lambda<Lambda<? super T, ? extends R>, R>() {", "-        public R value(Lambda<? super T, ? extends R> lam) { return lam.value(arg); }", "-      };", "-    return new MappedIterable<Lambda<? super T, ? extends R>, R>(iter, lambdaValue);", "+  /** Lazily create an iterable containing the values of the application of the given lambdas. */", "+  public static <T, R> Iterable<R> valuesOf(Iterable<? extends Lambda<? super T, ? extends R>> iter, T arg) {", "+    return new MappedIterable<Lambda<? super T, ? extends R>, R>(iter, new LambdaValue<T, R>(arg));", "+  }"]}], "num": 22669}
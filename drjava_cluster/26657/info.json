{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18a73a645de245ef27d128682b8dc99a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "104883248b20d01975bb6995ea2e9203", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "   @Override public Type visit(StaticMethodCall node)", "signatureAfterChange": "     @Override public Type visit(StaticMethodCall node)", "diff": ["-   */", "-  @Override public Type visit(StaticMethodCall node) {", "-    Type t = node.getMethodType().acceptVisitor(this);", "-    ", "-    Iterable<? extends Expression> args = IterUtil.empty();", "-    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-    ", "-    Iterable<Type> targs = IterUtil.empty();", "-    if (node instanceof PolymorphicStaticMethodCall) {", "-      targs = checkTypeNameList(((PolymorphicStaticMethodCall) node).getTypeArguments());", "-    }", "-    ", "-    try {", "-      // Note: Changes made below may also need to be made in the TypeSystem's boxing & unboxing implementations", "-      TypeSystem.MethodInvocation inv = ts.lookupStaticMethod(t, node.getMethodName(), targs, args);", "-      // TODO: Check accessibility of method", "-      checkThrownExceptions(inv.thrown(), node);", "-      node.setArguments(CollectUtil.makeList(inv.args()));", "-      setMethod(node, inv.method());", "-      Type result = ts.capture(inv.returnType());", "-      debug.logValue(\"Type of method call \" + node.getMethodName(), ts.wrap(result));", "-      addRuntimeCheck(node, result, inv.method().returnType());", "-      return setType(node, result);", "-    }", "-    catch (InvalidTypeArgumentException e) {", "-      throw new ExecutionError(\"type.argument\", node);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "-      throw new ExecutionError(\"no.such.method\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(StaticMethodCall node) {", "+      Type t = checkTypeName(node.getMethodType());", "+      ", "+      Iterable<? extends Expression> args = IterUtil.empty();", "+      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      ", "+      Iterable<Type> targs = IterUtil.empty();", "+      if (node instanceof PolymorphicStaticMethodCall) {", "+        targs = checkTypeNameList(((PolymorphicStaticMethodCall) node).getTypeArguments());", "+      }", "+      ", "+      try {", "+        // Note: Changes made below may also need to be made in the TypeSystem's boxing & unboxing implementations", "+        MethodInvocation inv = ts.lookupStaticMethod(t, node.getMethodName(), targs, args, expected);", "+        // TODO: Check accessibility of method", "+        checkThrownExceptions(inv.thrown(), node);", "+        node.setArguments(CollectUtil.makeList(inv.args()));", "+        setMethod(node, inv.method());", "+        Type result = ts.capture(inv.returnType());", "+        debug.logValue(\"Type of method call \" + node.getMethodName(), ts.wrap(result));", "+        addRuntimeCheck(node, result, inv.method().returnType());", "+        return setType(node, result);", "+      }", "+      catch (InvalidTypeArgumentException e) {", "+        throw new ExecutionError(\"type.argument\", node);", "+      }", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "+        throw new ExecutionError(\"no.such.method\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26d9fce65bbad57c77ea417829bc96a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "   @Override public Type visit(SuperMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SuperMethodCall node)", "diff": ["-   */", "-  @Override public Type visit(SuperMethodCall node) {", "-    Type t = context.getSuperType(ts);", "-    if (t == null) {", "-      throw new ExecutionError(\"super.undefined\", node);", "-    }", "-", "-    Iterable<? extends Expression> args = IterUtil.empty();", "-    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-    ", "-    Iterable<Type> targs = IterUtil.empty();", "-    if (node instanceof PolymorphicSuperMethodCall) {", "-      targs = checkTypeNameList(((PolymorphicSuperMethodCall) node).getTypeArguments());", "-    }", "-    ", "-    Expression obj = TypeUtil.makeEmptyExpression(node);", "-    setType(obj, t);", "-    try {", "-      TypeSystem.MethodInvocation inv = ts.lookupMethod(obj, node.getMethodName(), targs, args);", "-      // TODO: Check accessibility of method", "-      checkThrownExceptions(inv.thrown(), node);", "-      node.setArguments(CollectUtil.makeList(inv.args()));", "-      setMethod(node, inv.method());", "-      setDJClass(node, context.getThis());", "-      Type result = ts.capture(inv.returnType());", "-      debug.logValue(\"Type of method call \" + node.getMethodName(), ts.wrap(result));", "-      addRuntimeCheck(node, result, inv.method().returnType());", "-      return setType(node, result);", "-    }", "-    catch (InvalidTypeArgumentException e) {", "-      throw new ExecutionError(\"type.argument\", node);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "-      throw new ExecutionError(\"no.such.method\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(SuperMethodCall node) {", "+      Type t = context.getSuperType(ts);", "+      if (t == null) {", "+        throw new ExecutionError(\"super.undefined\", node);", "+      }", "+      ", "+      Iterable<? extends Expression> args = IterUtil.empty();", "+      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      ", "+      Iterable<Type> targs = IterUtil.empty();", "+      if (node instanceof PolymorphicSuperMethodCall) {", "+        targs = checkTypeNameList(((PolymorphicSuperMethodCall) node).getTypeArguments());", "+      }", "+      ", "+      Expression obj = TypeUtil.makeEmptyExpression(node);", "+      setType(obj, t);", "+      try {", "+        MethodInvocation inv = ts.lookupMethod(obj, node.getMethodName(), targs, args, expected);", "+        // TODO: Check accessibility of method", "+        checkThrownExceptions(inv.thrown(), node);", "+        node.setArguments(CollectUtil.makeList(inv.args()));", "+        setMethod(node, inv.method());", "+        setDJClass(node, context.getThis());", "+        Type result = ts.capture(inv.returnType());", "+        debug.logValue(\"Type of method call \" + node.getMethodName(), ts.wrap(result));", "+        addRuntimeCheck(node, result, inv.method().returnType());", "+        return setType(node, result);", "+      }", "+      catch (InvalidTypeArgumentException e) {", "+        throw new ExecutionError(\"type.argument\", node);", "+      }", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "+        throw new ExecutionError(\"no.such.method\", node);", "+      }", "+    }"]}], "num": 26657}
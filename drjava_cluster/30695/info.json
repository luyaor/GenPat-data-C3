{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5986f6973782a64d9ca695b37ad2d98", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac9492ddebb3fbb496fdf5dc8366f3be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlusTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "       public void testSpaceSuffix() throws BadLocationException", "signatureAfterChange": "       public void testSpaceSuffix() throws BadLocationException", "diff": ["-    _action.indentLine(_doc, 0, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 0, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 18, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 18, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 20, Indenter.OTHER); // Aligns second line.", "+    _action.indentLine(_doc, 20, Indenter.IndentReason.OTHER); // Aligns second line.", "-    _action.indentLine(_doc, 0, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 0, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 15, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 15, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 16, Indenter.OTHER); // Aligns second line.", "+    _action.indentLine(_doc, 16, Indenter.IndentReason.OTHER); // Aligns second line.", "-    _action.indentLine(_doc, 0, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 0, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 15, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 15, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 20, Indenter.OTHER); // Aligns second line.", "+    _action.indentLine(_doc, 20, Indenter.IndentReason.OTHER); // Aligns second line.", "-    _action.indentLine(_doc, 0, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 0, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 6, Indenter.OTHER); // Does nothing.", "+    _action.indentLine(_doc, 6, Indenter.IndentReason.OTHER); // Does nothing.", "-    _action.indentLine(_doc, 10, Indenter.OTHER); // Aligns second line.", "+    _action.indentLine(_doc, 10, Indenter.IndentReason.OTHER); // Aligns second line."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da02bf9374c78cc8a3fc6ba5799e49c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBraceTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testIsIn2DArray() throws BadLocationException", "signatureAfterChange": "   public void testIsIn2DArray() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\", ! rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.OTHER));", "-    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.OTHER));", "+    assertTrue(\"At DOCSTART.\", ! rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At identifier.\",  ! rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of outer array\", !rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.OTHER));", "+    assertTrue(\"Before start of inner array\", rule.applyRule(_doc, 50, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.OTHER));", "-    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.OTHER));", "-    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.OTHER));", "+    assertTrue(\"Same line as inner {.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line after inner {.\", !rule.applyRule(_doc, 75, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is stil in first.\", !rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.OTHER));", "-    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.OTHER));", "+    assertTrue(\"Second pseudo array element.\",  rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"In multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.OTHER));", "+    assertTrue(\"multi-line comment w/ = {.\",  ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", !rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.OTHER));", "-    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.OTHER));", "+    assertTrue(\"Last close brace\",  rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\",  rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}], "num": 30695}
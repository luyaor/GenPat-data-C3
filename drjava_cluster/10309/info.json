{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "248477e0ddebe71cf4a10c924cf013f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d33e21983cc7ccb4faa0dadbf06b17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorWindow.java", "commitBeforeChange": "b55243374fd344a99b71e152a523bbe523612b7b", "commitAfterChange": "21f40abc1b1e49110febfbe137665f4ad897576b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private void updateErrorInfo()", "signatureAfterChange": "   private void updateErrorInfo()", "diff": ["-      b.append(\"\\n\\nSystem Properties:\\n\");", "-      b.append(\"DrJava Version \");", "-      b.append(edu.rice.cs.drjava.Version.getBuildTimeString());", "-      b.append('\\n');", "-      java.util.Properties props = System.getProperties();", "-      int size = props.size();", "-      java.util.Iterator entries = props.entrySet().iterator();", "-      while(entries.hasNext()) {", "-        java.util.Map.Entry entry = (java.util.Map.Entry)entries.next();", "-        b.append(entry.getKey());", "-        b.append(\" = \");", "-        if (entry.getKey().equals(\"line.separator\")) {", "-          b.append(\"\\\"\");", "-          String ls = (String)entry.getValue();", "-          for(int i=0; i<ls.length(); ++i) {", "-            int ch = ls.charAt(i);", "-            b.append(\"\\\\u\");", "-            String hexString = \"0000\" + Integer.toHexString(ch);", "-            b.append(hexString.substring(hexString.length()-4));", "-          }", "-          b.append(\"\\\"\");", "-        }", "-        else {", "-          b.append(entry.getValue());", "-        }", "-        b.append('\\n');", "-      }", "-      b.append('\\n');", "-      ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-      try {", "-        DrJava.getConfig().saveConfiguration(baos, \"DrJava configuration file\");", "-        b.append(baos.toString());", "-      }", "-      catch(java.io.IOException ioe) {", "-        b.append(\"IOException when trying to print DrJava configuration file\");", "-      }", "-      ", "-      b.append(\"\\n\\nUsed memory: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory()));", "-      b.append(\"\\nFree memory: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().freeMemory()));", "-      b.append(\"\\nTotal memory: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()));", "-      b.append(\"\\nTotal memory can expand to: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().maxMemory()));", "+      b.append(getSystemAndDrJavaInfo());", "-      // filter out user.dir, user.home and user.name", "-      String infoText = b.toString();", "-", "-      String userHome = System.getProperty(\"user.home\");", "-      String anonUserHome = \"<anonymized user.home>\";", "-      infoText = replaceString(infoText, userHome, anonUserHome);", "-      ", "-      String userDir = System.getProperty(\"user.dir\");", "-      String anonUserDir = \"<anonymized user.dir>\";", "-      infoText = replaceString(infoText, userDir, anonUserDir);", "-      ", "-      String userName = System.getProperty(\"user.name\");", "-      String anonUserName = \"<anonymized user.name>\";", "-      infoText = replaceString(infoText, userName, anonUserName);", "-      ", "-      _stackTrace.setText(infoText);", "+      _stackTrace.setText(b.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f1b087d24c1565c7adbd5e3690a589", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "5944dd2b12a74ebad6e3549d813d2dd557403c7e", "commitAfterChange": "53735c967d2add6a16ab5776bac9111426f41996", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver,                               List<String> classpaths,                               JavadocListener listener)", "signatureAfterChange": "   private void _javadocAllWorker(File destDirFile, FileSaveSelector saver,                                  String[] classpath,                                  JavadocListener listener)", "diff": ["-  private void _javadocWorker(File destDirFile, FileSaveSelector saver,", "-                              List<String> classpaths,", "-                              JavadocListener listener) {", "+  private void _javadocAllWorker(File destDirFile, FileSaveSelector saver,", "+                                 String[] classpath,", "+                                 JavadocListener listener)", "+  {", "-    List<OpenDefinitionsDocument> docs = getter.getDefinitionsDocuments();", "+    List<OpenDefinitionsDocument> docs = _getter.getDefinitionsDocuments();", "-        try {", "-          // This call will abort the iteration if there is no file,", "-          // unless we can recover (like for a FileMovedException).", "-          file = doc.getFile();", "+        // This will throw an IllegalStateException if no file can be found", "+        file = _getFileFromDocument(doc, saver);", "+        ", "+        // File shouldn't be null here, but just in case...", "+        if (file == null) {", "+          throw new IllegalStateException(\"No file for this document.\");", "-        catch (FileMovedException fme) {", "-          // The file has moved - prompt the user to recover.", "-          // XXX: This is probably not thread safe!", "-          if (saver.shouldSaveAfterFileMoved(doc, fme.getFile())) {", "-            try {", "-              doc.saveFileAs(saver);", "-              file = doc.getFile();", "-            }", "-            catch (FileMovedException fme2) {", "-              // If the user is this intent on shooting themselves in the foot,", "-              // get out of the way.", "-              throw new UnexpectedException(fme2);", "-            }", "-            catch (IOException ioe) {", "-              throw new UnexpectedException(ioe);", "-            }", "-          }", "-          else {", "-            continue;", "-          }", "-        }", "-        // After all this garbage, file should be properly initialized.", "+        ", "+          // No package name for this file", "+          // There is a package name", "+            //  (This was broken before, but it works now)", "+      catch (IOException ioe) {", "+        // There was a problem getting the file for this document.", "+        // Kill javadoc and display the exception as an error.", "+        listener.javadocStarted();  // fire first so it can fire javadocEnded", "+        _showThrowableAsCompilerError(ioe, file, listener);", "+        return;", "+      }", "-        _javadocErrorModel = new CompilerErrorModel", "-          (new CompilerError[] { new CompilerError(file, -1, -1,", "-                                                   ipe.getMessage(),", "-                                                   false) },", "-           getter);", "-         listener.javadocStarted();", "-         listener.javadocEnded(false, null);", "+        listener.javadocStarted();  // fire first so it can fire javadocEnded", "+        _showThrowableAsCompilerError(ipe, file, listener);", "-    for(int a = 0 ; a  < sourceRoots.length; a++){", "-      if (a != 0){", "+    for(int a = 0 ; a  < sourceRoots.length; a++) {", "+      if (a != 0) {", "-    // Build the \"command-line\" arguments.", "-    Configuration config = DrJava.getConfig();", "-    String accLevel = config.getSetting(OptionConstants.JAVADOC_ACCESS_LEVEL);", "-    StringBuffer accArg = new StringBuffer(10);", "-    accArg.append('-');", "-    accArg.append(accLevel);", "-    ArrayList<String> args = new ArrayList<String>();", "-    args.add(accArg.toString());", "-    args.add(\"-sourcepath\");", "-    args.add(sourcePath.toString());", "-    args.add(\"-d\");", "-    args.add(destDir);", "-    ", "-    // Add classpath", "-    args.add(\"-classpath\");", "-    String[] classpath = classpaths.toArray(new String[0]);", "-    StringBuffer cp = new StringBuffer();", "-    String sep = System.getProperty(\"path.separator\");", "-    for (int i=0; i < classpath.length; i++) {", "-      cp.append(classpath[i]);", "-      cp.append(sep);", "-    }", "-    args.add(cp.toString());", "-    ", "-    String linkVersion = config.getSetting(OptionConstants.JAVADOC_LINK_VERSION);", "-    if (linkVersion.equals(OptionConstants.JAVADOC_1_3_TEXT)) {", "-      args.add(\"-link\");", "-      args.add(config.getSetting(OptionConstants.JAVADOC_1_3_LINK));", "-    }", "-    else if (linkVersion.equals(OptionConstants.JAVADOC_1_4_TEXT)) {", "-      args.add(\"-link\");", "-      args.add(config.getSetting(OptionConstants.JAVADOC_1_4_LINK));", "-    }", "-    ", "-    String custom = config.getSetting(OptionConstants.JAVADOC_CUSTOM_PARAMS);", "-    args.addAll(ArgumentTokenizer.tokenize(custom));", "-/*    StreamTokenizer st = new StreamTokenizer(new StringReader(custom));", "-    st.ordinaryChars('\\u0021','\\u00ff');", "-    st.wordChars('\\u0021','\\u00ff');", "-    ", "-    try {", "-      while (st.nextToken() != StreamTokenizer.TT_EOF) {", "-        if ((st.ttype == StreamTokenizer.TT_WORD)", "-              || (st.ttype == '\"'))", "-        {", "-          args.add(st.sval);", "-        }", "-        else {", "-          throw new IllegalArgumentException(\"Unknown token type: \" + st.ttype);", "-        }", "-      }", "-    }", "-    catch (IOException ioe) {", "-      // Can't happen with a StringReader.", "-      throw new UnexpectedException(ioe);", "-    }", "-    */", "-    args.addAll(docUnits);", "-    ", "+    // Generate all command line arguments", "+    ArrayList<String> args = _buildCommandLineArgs(docUnits, destDir,", "+                                                   sourcePath.toString(),", "+                                                   classpath);", "-    // Start a new Thread to execute Javadoc and tell listeners it has started", "+    // Run the actual Javadoc process", "+    _runJavadoc(args, classpath, destDirFile, listener);", "+  }", "-    }", "-    catch (Throwable e) {", "-      e.printStackTrace();", "-      throw new UnexpectedException(e);", "-    }", "-    finally {", "-      // Notify all listeners that Javadoc is done."]}], "num": 10309}
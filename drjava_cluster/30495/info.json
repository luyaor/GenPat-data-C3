{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1f7e9364bd82511fd9be05c12f73782", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022d7aa2f2a9a82ccf6b486bb40742c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public synchronized void setBreakpoint(final Breakpoint breakpoint)     throws DebugException", "signatureAfterChange": "   public synchronized void setBreakpoint(final Breakpoint breakpoint) throws DebugException", "diff": ["-  public synchronized void setBreakpoint(final Breakpoint breakpoint)", "-    throws DebugException", "-  {", "+  public synchronized void setBreakpoint(final Breakpoint breakpoint) throws DebugException {", "+    ", "-", "-    _notifier.breakpointSet(breakpoint);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointSet(breakpoint); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09dc72dedae9a2544fbad9b7c5dcea10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint) throws DebugException", "signatureAfterChange": "   public synchronized void removeBreakpoint(final Breakpoint breakpoint) throws DebugException", "diff": ["-    _notifier.breakpointRemoved(breakpoint);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointRemoved(breakpoint); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "291f6e4e250dfb385d94683dbf03925c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "0912ab7ed35ec7cfa4a9c45641294748135ef6a8", "commitAfterChange": "8419e1669ab708db7794d94c63980b50f479093f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private static void createAndShowGUI(final String[] args)", "signatureAfterChange": "    private static void createAndShowGUI(final String[] args)", "diff": ["-//        enableSecurityManager();  // makes no sense; this code is only run in the main JVM which does not need a SecurityManager", "-        openCommandLineFiles(mf, _filesToOpen);", "-        mf.setVisible(true);", "+", "+        _openCommandLineFiles(mf, _filesToOpen);", "+        /* setVibible is moved to the end of the eventqueue to be sure all files has finished loading and added to the fileview before the MainFrame is set visible.", "+         * When this was not done, occassionally a NullPointerException was encountered on startup when specifying a file (ex: java -jar drjava.jar somefile.java)", "+         */", "+        Utilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37bc829ac191ec555a210a90c3f9775b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "72a0d444dc62ca781c9b91acdee71819a6f4cdd3", "commitAfterChange": "7144a04f8cef658fdd6189df9de3fd59eb678bec", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "signatureAfterChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "diff": ["-    String text =", "+    final String text =", "-    String indented =", "+    final String indented =", "-    doc.append(text, null);", "+", "+        doc.append(text, null);", "-    doc.indentLines(0, doc.getLength()); ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { doc.indentLines(0, doc.getLength()); }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0e2f20307a1164159ad61c712d2b80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public void replThrewException(String message)", "signatureAfterChange": "   public void replThrewException(final String message)", "diff": ["-  public void replThrewException(String message) {", "+  public void replThrewException(final String message) {", "-      _document.appendExceptionResult(message, InteractionsDocument.ERROR_STYLE);", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { _document.appendExceptionResult(message, InteractionsDocument.ERROR_STYLE); }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4229f35a4b5deda2a9373a223d8790e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 229, "methodNumberAfterChange": 229, "signatureBeforeChange": "      private DirectoryChooser makeFolderChooser(File workDir)", "signatureAfterChange": "      private DirectoryChooser makeFolderChooser(final File workDir)", "diff": ["-  private DirectoryChooser makeFolderChooser(File workDir) {", "-    DirectoryChooser dc = new DirectoryChooser(this);", "-    dc.setSelectedFile(workDir);", "-    dc.setApproveButtonText(\"Select\");", "-    dc.setDialogTitle(\"Open Folder\");", "-    dc.setAccessory(_openRecursiveCheckBox);", "+  private DirectoryChooser makeFolderChooser(final File workDir) {", "+    final DirectoryChooser dc = new DirectoryChooser(this);", "+    /* The following code fragement was moved to the event thread because setSelectedFile occasionally generates an ", "+     * ArrayOutOfBoundsException otherwise. */", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        dc.setSelectedFile(workDir);", "+        dc.setApproveButtonText(\"Select\");", "+        dc.setDialogTitle(\"Open Folder\");", "+        dc.setAccessory(_openRecursiveCheckBox);", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f7e538266d7d4b84515a9820e7fd97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "commitAfterChange": "ee2a4f62f26e8f47974ad5d674dd24e422820bcc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testGlassPaneHidesKeyEvents()", "signatureAfterChange": "   public void testGlassPaneHidesKeyEvents()", "diff": ["-        _frame.simpleHourglassOn();", "+        _frame.hourglassOn();", "-    _frame.hourglassOff();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _frame.hourglassOff(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "664a25d4dbefef4067de414e94a7c705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public CompilerErrorModel(DJError[] errors, GlobalModel model)", "signatureAfterChange": "   public CompilerErrorModel(DJError[] errors, GlobalModel model)", "diff": ["-    // Populates _positions.", "-    _calculatePositions();", "+    // Populates _positions.  Must run in event thread because it may open files.", "+    Utilities.invokeLater(new Runnable() { public void run() { _calculatePositions(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "747aa355afbeedadb455971962d120b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 409, "methodNumberAfterChange": 408, "signatureBeforeChange": "          public void caretUpdate( CaretEvent ce )", "signatureAfterChange": "          public void caretUpdate(final CaretEvent ce )", "diff": ["-    public void caretUpdate( CaretEvent ce ) {", "+    public void caretUpdate(final CaretEvent ce ) {", "-      updateLocation();", "+      Utilities.invokeLater(new Runnable() { // previously invokeAndWait forcing all other listeners to wait (why?)", "+        public void run() { updateLocation(); }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "946464f62c1c3f0f1aacc66bf69fa274", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void _assertProcessedContents(String typed, String expected) throws EditDocumentException", "signatureAfterChange": "   protected void _assertProcessedContents(final String typed, final String expected) throws EditDocumentException", "diff": ["-  protected void _assertProcessedContents(String typed, String expected) throws EditDocumentException {", "+  protected void _assertProcessedContents(final String typed, final String expected) throws EditDocumentException {", "-    TestInteractionsModel model = (TestInteractionsModel)_model;", "-    InteractionsDocument doc = model.getDocument();", "-    doc.reset(\"This is a test\");", "-    doc.append(typed, InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "-    model.interpretCurrentInteraction();", "+    final TestInteractionsModel model = (TestInteractionsModel)_model;", "+    final InteractionsDocument doc = model.getDocument();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ", "+      doc.reset(\"This is a test\"); ", "+      doc.append(typed, InteractionsDocument.DEFAULT_STYLE); ", "+      model.interpretCurrentInteraction(); } ", "+    });", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a25c16fa16650e66b15e4e1c727d5e96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "signatureAfterChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "diff": ["-    OpenDefinitionsDocument untitled = docs.get(0);", "+    final OpenDefinitionsDocument untitled = docs.get(0);", "-    untitled.quitFile();", "-    _model.closeFileWithoutPrompt(untitled);", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        untitled.quitFile();", "+        _model.closeFileWithoutPrompt(untitled);", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fa9320379b9ec054934b3585faba0c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void _assertProcessedContents(String typed, String expected) throws EditDocumentException", "signatureAfterChange": "   protected void _assertProcessedContents(final String typed, final String expected) throws EditDocumentException", "diff": ["-  protected void _assertProcessedContents(String typed, String expected) throws EditDocumentException {", "+  protected void _assertProcessedContents(final String typed, final String expected) throws EditDocumentException {", "-    TestInteractionsModel model = (TestInteractionsModel)_model;", "-    InteractionsDocument doc = model.getDocument();", "-    doc.reset(\"This is a test\");", "-    doc.append(typed, InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();  // required because subsequent interpretCurrentInteraction is not run in event thread.", "-    model.interpretCurrentInteraction();", "+    final TestInteractionsModel model = (TestInteractionsModel)_model;", "+    final InteractionsDocument doc = model.getDocument();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ", "+      doc.reset(\"This is a test\"); ", "+      doc.append(typed, InteractionsDocument.DEFAULT_STYLE); ", "+      model.interpretCurrentInteraction(); } ", "+    });", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c960213b161024ef3c6eff65c2ada03a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-      throw new UnexpectedException(e); ", "+      throw new UnexpectedException(e); // triggers _junitInterrupted which runs hourglassOff", "-//    finally { ", "-//      new ScrollableDialog(null, \"junit setup loop terminated\", classNames.toString(), \"\").show();", "-//    }", "-      try {", "+     try {  /** Run the junit test suite that has already been set up on the slave JVM */", "-        /** Run the junit test suite that has already been set up on the slave JVM */", "-        _notifier.junitStarted(); // notify listeners that JUnit testing has finally started!", "-        //          new ScrollableDialog(null, \"junitStarted executed in DefaultJunitModel\", \"\", \"\").show();", "+        ", "+        // notify listeners that JUnit testing has finally started!", "+        Utilities.invokeLater(new Runnable() { public void run() { _notifier.junitStarted(); } });", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9951b37c65a2bfa1979806d070efdaa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 222, "signatureBeforeChange": "   public void resetConsole()", "signatureAfterChange": "   public void resetConsole()", "diff": ["-    _notifier.consoleReset();", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.consoleReset(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea473b0585d5ca7607bdf82bf2198b1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 88, "signatureBeforeChange": "   synchronized void currThreadResumed() throws DebugException", "signatureAfterChange": "   synchronized void currThreadResumed() throws DebugException", "diff": ["-    if (printMessages) {", "-      System.out.println(\"In currThreadResumed()\");", "-    }", "-", "-    _notifier.currThreadResumed();", "+    if (printMessages) { System.out.println(\"In currThreadResumed()\"); }", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.currThreadResumed(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f66cff3b0ec0bf86cbdf16e455ed93dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public AbstractGlobalModel()", "signatureAfterChange": "   public AbstractGlobalModel()", "diff": ["-    _notifier.projectRunnableChanged();", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.projectRunnableChanged(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6b3eea25102d89e27d821f40da42934", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "   synchronized void reachedBreakpoint(BreakpointRequest request)", "signatureAfterChange": "   synchronized void reachedBreakpoint(BreakpointRequest request)", "diff": ["+//    Utilities.showDebug(\"JPDADebugger.reachedBreakPoint(\" + request + \") called\");", "-      _notifier.breakpointReached(breakpoint);", "+      Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointReached(breakpoint); } });"]}], "num": 30495}
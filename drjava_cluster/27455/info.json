{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6627c70545e8875c25fbbcd8f8a63a3d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc2a7fb3ca31df4dfc1cb3ee46f5c726", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public boolean findCharInStmtBeforePos(char findChar, int position)", "signatureAfterChange": "   public boolean findCharInStmtBeforePos(char findChar, int position)", "diff": ["-  public boolean findCharInStmtBeforePos(char findChar, int position){", "-    // throwErrorHuh();", "+  public boolean findCharInStmtBeforePos(char findChar, int position) {", "-      String mesg = \"Argument endChar to QuestionExistsCharInStmt must be a char \" +", "-        \"that exists on the current line.\";", "-      // Should not happen", "+      String mesg = ", "+        \"Argument endChar to QuestionExistsCharInStmt must be a char that exists on the current line.\";", "-    // Find the position of the previous occurence findChar from the", "-    // position of endChar (looking in paren phrases as well)", "+    // Find the position of the preceding occurrence findChar position (looking in paren phrases as well)", "+    boolean found;", "+    ", "+    readLock();", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) ||", "-        (prevFindChar < 0)) {", "-      // Couldn't find a previous occurence findChar", "-      return false;", "-    }", "-    ", "-    // Determine if prevFindChar was findChar, rather than end", "-    //  of statement delimiter", "-    boolean found;", "-    try {", "+      ", "+      if ((prevFindChar == DefinitionsDocument.ERROR_INDEX) || (prevFindChar < 0)) return false; // no such char", "+      ", "+      // Determine if prevFindChar is findChar or the end of statement delimiter", "-    catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "+    catch (Throwable t) { throw new UnexpectedException(t); }", "+    finally { readUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdaf8e8b3441e22ead4678eb6de4855f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "diff": ["-    ", "-    //long start = System.currentTimeMillis();", "-    // Get the start of the current line", "-    int lineStart = getLineStartPos(pos);", "-    ", "-    // Find the previous delimiter that closes a statement", "-    boolean reachedStart = false;", "-    int prevDelimiter = lineStart;", "-    boolean ignoreParens = posInParenPhrase(prevDelimiter);", "-    ", "-    //long mid = System.currentTimeMillis();  // START STAGE 2", "-    do {", "-      prevDelimiter = findPrevDelimiter(prevDelimiter, delims, ignoreParens);", "-      try {", "-        if (prevDelimiter > 0 && prevDelimiter < getLength() && getText(prevDelimiter,1).charAt(0) == '{')", "-          break;", "-      }", "-      catch (BadLocationException e) { throw new UnexpectedException(e); }", "-      ", "-      // Check delimiter found was start of document", "-      if (prevDelimiter == ERROR_INDEX) {", "-        reachedStart = true;", "-        break;", "-      }", "-      ignoreParens = posInParenPhrase(prevDelimiter);", "-    } while (ignoreParens);  ", "-    ", "-    //long mid2 = System.currentTimeMillis();  // START STAGE 3", "-    ", "-    // From the previous delimiter, find the next non-whitespace character", "-    int nextNonWSChar;", "-    if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "-    else", "-      nextNonWSChar = getFirstNonWSCharPos(prevDelimiter+1, whitespace, false);", "-    ", "-    //long mid3 = System.currentTimeMillis();  // START STAGE 4", "-    ", "-    // If the end of the document was reached", "-    if (nextNonWSChar == ERROR_INDEX) nextNonWSChar = getLength();", "-    ", "-    // Get the start of the line of the non-ws char", "-    int lineStartStmt = getLineStartPos(nextNonWSChar);", "-    ", "-    // Get the position of the first non-ws character on this line", "-    int lineFirstNonWS = getLineFirstCharPos(lineStartStmt);", "-    try { lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt); }", "-    catch(BadLocationException e) { throw new UnexpectedException(e); }", "+    ", "+    readLock();", "+    try {", "+      synchronized (_reduced) {", "+        // Get the start of the current line", "+        int lineStart = getLineStartPos(pos);", "+        ", "+        // Find the previous delimiter that closes a statement", "+        boolean reachedStart = false;", "+        int prevDelim = lineStart;", "+        boolean ignoreParens = posInParenPhrase(prevDelim);", "+        ", "+        do {", "+          prevDelim = findPrevDelimiter(prevDelim, delims, ignoreParens);", "+          if (prevDelim > 0 && prevDelim < getLength() && getText(prevDelim,1).charAt(0) == '{') break;", "+          if (prevDelim == ERROR_INDEX) { // no delimiter found", "+            reachedStart = true;", "+            break;", "+          }", "+          ignoreParens = posInParenPhrase(prevDelim);", "+        } while (ignoreParens);  ", "+    ", "+        // From the previous delimiter, find the next non-whitespace character", "+        int nextNonWSChar;", "+        if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "+        else nextNonWSChar = getFirstNonWSCharPos(prevDelim+1, whitespace, false);", "+        ", "+        // If the end of the document was reached", "+        if (nextNonWSChar == ERROR_INDEX) nextNonWSChar = getLength();", "+        ", "+        // Get the start of the line of the non-ws char", "+        int lineStartStmt = getLineStartPos(nextNonWSChar);", "+        ", "+        // Get the position of the first non-ws character on this line", "+        int lineFirstNonWS = getLineFirstCharPos(lineStartStmt);", "+        lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt); ", "+      }", "+    }", "+    catch(Throwable t) { throw new UnexpectedException(t); }", "+    finally { readUnlock(); }", "-    /*", "-     long end = System.currentTimeMillis();", "-     if (maxKey.equals(key)) {", "-     DrJava.consoleOut().print(\"     getIndent: [\" + (mid-start));", "-     DrJava.consoleOut().print(\"] (\" + (mid2-start));", "-     DrJava.consoleOut().print(\") [\" + (mid3-start));", "-     DrJava.consoleOut().println(\"] total: \" + (end-start) + \"ms\");", "-     }", "-     */"]}], "num": 27455}
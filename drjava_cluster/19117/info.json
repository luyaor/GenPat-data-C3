{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3454983548e412ea33fea5b6473af3da", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147148a5ab615b8d7b458fbe71ef942e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws IOException", "signatureAfterChange": "    public void setUp() throws IOException", "diff": ["+", "-    super.setUp();", "+//    super.setUp();", "+    createModel();", "+    ", "+    String user = System.getProperty(\"user.name\");", "+    _tempDir = FileOps.createTempDirectory(\"DrJava-test-\" + user);", "+    ", "+    _adapterTable = new Hashtable<OpenDefinitionsDocument, DCacheAdapter> ();", "+    _cache.addRegistrationListener(new DocumentCache.RegistrationListener() {", "+      public void registered(OpenDefinitionsDocument odd, DCacheAdapter a) {", "+        _adapterTable.put(odd, a);", "+      }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d8199edaab5ac4f4fab1771ce0019c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "b7d4cb04f4bb848380a14b3825abe047db8dc58f", "commitAfterChange": "101c103fed282ea73966b5bc0dce7152a188fba5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, JDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["+    Iterable<File> additionalCompilerFiles = IterUtil.empty();", "+      try {", "+        additionalCompilerFiles = desc.getAdditionalCompilerFiles(f);", "+      }", "+      catch(FileNotFoundException fnfe) {", "+        // not all additional compiler files were found", "+        isSupported = false;", "+      }", "-      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));", "+      Iterable<File> path = IterUtil.map(IterUtil.compose(additionalCompilerFiles, f), new Lambda<File,File>() {", "+        public File value(File arg) { return IOUtil.attemptAbsoluteFile(arg); }", "+      });"]}], "num": 19117}
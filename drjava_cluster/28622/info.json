{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83a9b3d20784878927a160c0ba9b4940", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f5513340e4e7abb5486e678a897496", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   @Override public TypeContext visit(MethodDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(MethodDeclaration node)", "diff": ["-    ExpressionChecker sigChecker = new ExpressionChecker(sigContext, opt);", "+    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-    Type returnT = node.getReturnType().acceptVisitor(sigChecker);", "+    Type returnT = sigChecker.check(node.getReturnType());", "-      Type t = p.getType().acceptVisitor(sigChecker);", "+      Type t = sigChecker.check(p.getType());", "-    for (ReferenceTypeName n : node.getExceptions()) { n.acceptVisitor(sigChecker); }", "+    for (ReferenceTypeName n : node.getExceptions()) { sigChecker.check(n); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "356dbf086d87dcacd74bdd1227c3e9f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Override public TypeContext visit(ClassDeclaration node)", "signatureAfterChange": "      @Override public TypeContext visit(ClassDeclaration node)", "diff": ["-    ExpressionChecker sigChecker = new ExpressionChecker(sigContext, opt);", "+    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-    node.getSuperclass().acceptVisitor(sigChecker);", "+    sigChecker.check(node.getSuperclass());", "-      for (TypeName tn : node.getInterfaces()) { tn.acceptVisitor(sigChecker); }", "+      for (TypeName tn : node.getInterfaces()) { sigChecker.check(tn); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6834dfd408b42963f57c51fc5fc1da3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 7, "signatureBeforeChange": "          @Override public Void visit(ConstructorDeclaration node)", "signatureAfterChange": "          @Override public Void visit(ConstructorDeclaration node)", "diff": ["-      ExpressionChecker sigChecker = new ExpressionChecker(sigContext, _opt);", "+      TypeNameChecker sigChecker = new TypeNameChecker(sigContext, _opt);", "-        Type t = param.getType().acceptVisitor(sigChecker);", "+        Type t = sigChecker.check(param.getType());", "-      for (TypeName tn : node.getExceptions()) { tn.acceptVisitor(sigChecker); }", "+      for (TypeName tn : node.getExceptions()) { sigChecker.check(tn); }"]}], "num": 28622}
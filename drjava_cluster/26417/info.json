{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c9ac57e5fbc47b5a47ccc156b176325", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d294fa5336c3c8c77df1aa7088cf407", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "81f7bc68ef7285bacd5689ea0a54ea5647d9a1d8", "commitAfterChange": "12384109e03448701c98d404f37be617f6e32fee", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "signatureAfterChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "diff": ["-    // invokeMethod could execute. This happened infrequently so by trying this", "-    // multiple times, the chance of failure each time should be acceptably low.", "-     ", "-    int tries = 0;", "-    while (tries < MAXINVOKETRIES) {", "-      List args = new LinkedList();", "-      args.add(_vm.mirrorOf(name));", "-      args.add(val);", "-      if (type == null) {", "-        args.add(null);", "-      }", "-      else if (type instanceof ReferenceType) {", "-        args.add(((ReferenceType)type).classObject());", "-      }", "-      ", "-      /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "-      try {", "-        debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args,", "-                                      ObjectReference.INVOKE_SINGLE_THREADED);", "-        return;", "-      }", "-      catch (ObjectCollectedException oce) {", "-        tries++;", "-      }", "+    // invokeMethod could execute. We now just disable collection until after the", "+    // method is invoked.", "+    ", "+    List args = new LinkedList();", "+    StringReference sr = _vm.mirrorOf(name);", "+    sr.disableCollection();", "+    args.add(sr);", "+    args.add(val);", "+    if (type == null) {", "+      args.add(null);", "-    throw new DebugException(\"The variable: \" + name +", "-                             \" could not be defined in the debug interpreter\");", "-  }  ", "+    else if (type instanceof ReferenceType) {", "+      args.add(((ReferenceType)type).classObject());", "+    }", "+    ", "+    /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "+    try {", "+      debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args,", "+                                    ObjectReference.INVOKE_SINGLE_THREADED);", "+      return;", "+    }", "+    catch (ObjectCollectedException oce) {", "+      throw new DebugException(\"The variable: \" + name +", "+                               \" could not be defined in the debug interpreter\");", "+    }", "+    finally {", "+      sr.enableCollection();", "+    } ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89cdfa513fbfd231b3ac70bf170a8fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7bb9a22e4cbbae8f1b760058a6f336d0a39bb871", "commitAfterChange": "14e7dcc7e0d6b6b7a5f38bdc40af083f2a31ac1c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "signatureAfterChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "diff": ["-    List args = new LinkedList();", "-    StringReference sr = _vm.mirrorOf(name);", "-    sr.disableCollection();", "-    args.add(sr);", "-    args.add(val);", "-    if (type == null) {", "-      args.add(null);", "+    int tries = 0;", "+    StringReference sr = null;", "+    while (tries < OBJECT_COLLECTED_TRIES) {", "+      try {", "+        List args = new LinkedList();", "+        sr = _vm.mirrorOf(name);", "+        sr.disableCollection();", "+        args.add(sr);", "+        args.add(val);", "+        if (type == null) {", "+          args.add(null);", "+        }", "+        else if (type instanceof ReferenceType) {", "+          args.add(((ReferenceType)type).classObject());", "+        }", "+        ", "+        /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "+        debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args,", "+                                      ObjectReference.INVOKE_SINGLE_THREADED);", "+        return;", "+      }", "+      catch (ObjectCollectedException oce) {", "+        tries++;", "+      }", "+      finally {", "+        sr.enableCollection();", "+      }", "-    else if (type instanceof ReferenceType) {", "-      args.add(((ReferenceType)type).classObject());", "-    }", "-", "-    /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "-    try {", "-      debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args,", "-                                    ObjectReference.INVOKE_SINGLE_THREADED);", "-      return;", "-    }", "-    catch (ObjectCollectedException oce) {", "-      throw new DebugException(\"The variable: \" + name +", "-                               \" could not be defined in the debug interpreter\");", "-    }", "-    finally {", "-      sr.enableCollection();", "-    }", "+    throw new DebugException(\"The variable: \" + name +", "+                             \" could not be defined in the debug interpreter\");"]}], "num": 26417}
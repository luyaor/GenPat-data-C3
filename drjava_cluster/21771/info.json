{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f450d9c452126e9efee5c42445a5c19", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c5f953836fbfd69540459aa621c66b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void testGetFirstNonWSCharPos() throws BadLocationException", "signatureAfterChange": "     public void testGetFirstNonWSCharPos() throws BadLocationException", "diff": ["-    assertEquals(\"Current position is non-whitespace\", 0, _doc.getFirstNonWSCharPos(0));", "-    assertEquals(\"Current position is non-whitespace, end of line\", 5, _doc.getFirstNonWSCharPos(5));", "-    assertEquals(\"Next non-whitespace is 1 '\\\\n' ahead.\", 7, _doc.getFirstNonWSCharPos(6));", "-    assertEquals(\"Next non-whitespace is 2 '\\\\t' ahead.\", 13, _doc.getFirstNonWSCharPos(12));", "-    assertEquals(\"Next non-whitespace is 3 spaces ahead.\", 22, _doc.getFirstNonWSCharPos(20));", "+    assertEquals(\"Current position is non-whitespace\", 0, _getFirstNonWSCharPos(0));", "+    assertEquals(\"Current position is non-whitespace, end of line\", 5, _getFirstNonWSCharPos(5));", "+    assertEquals(\"Next non-whitespace is 1 '\\\\n' ahead.\", 7, _getFirstNonWSCharPos(6));", "+    assertEquals(\"Next non-whitespace is 2 '\\\\t' ahead.\", 13, _getFirstNonWSCharPos(12));", "+    assertEquals(\"Next non-whitespace is 3 spaces ahead.\", 22, _getFirstNonWSCharPos(20));", "-                 _doc.getFirstNonWSCharPos(27));", "+                 _getFirstNonWSCharPos(27));", "-                 _doc.getFirstNonWSCharPos(39));", "+                 _getFirstNonWSCharPos(39));", "-                 _doc.getFirstNonWSCharPos(6));", "+                 _getFirstNonWSCharPos(6));", "-                 _doc.getFirstNonWSCharPos(6));  ", "+                 _getFirstNonWSCharPos(6));  ", "-                 _doc.getFirstNonWSCharPos(4));", "+                 _getFirstNonWSCharPos(4));", "-                 _doc.getFirstNonWSCharPos(4));", "+                 _getFirstNonWSCharPos(4));", "-                 _doc.getFirstNonWSCharPos(4));", "+                 _getFirstNonWSCharPos(4));", "-    _doc.getLineFirstCharPos(5);", "+    _getLineFirstCharPos(5);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee31e8cf91293a94ed60ebe86ee0ca0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "462c4a613a015a2dbcac948815ea1318bb028f22", "commitAfterChange": "0709b991a23f9136532fa9ea3471d8a6bc4cbcfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws java.io.IOException", "signatureAfterChange": "      public void setUp() throws java.io.IOException", "diff": ["-    _interpreter = new DynamicJavaAdapter();", "+    parserFactory = new JavaCCParserFactory();", "+    astInterpreter = new TreeInterpreter(null); // No ParserFactory needed to interpret an AST", "+    strInterpreter = new TreeInterpreter(parserFactory); // ParserFactory is needed to interpret a string", "-      _interpreter.interpret(\"int x = 0;\");", "-      _interpreter.interpret(\"Integer X = new Integer(0);\");", "-      _interpreter.interpret(\"Boolean B = Boolean.FALSE;\");", "-      _interpreter.interpret(\"boolean b = false;\");", "-      _interpreter.interpret(\"int[] i = {1, 2, 3};\");", "-      _interpreter.interpret(\"Integer[] I = {1, 2, 3};\");", "+      interpret(\"int x = 0;\");", "+      interpret(\"Integer X = new Integer(0);\");", "+      interpret(\"Boolean B = Boolean.FALSE;\");", "+      interpret(\"boolean b = false;\");", "+      interpret(\"int[] i = {1, 2, 3};\");", "+      interpret(\"Integer[] I = {1, 2, 3};\");", "-    catch (ExceptionReturnedException ere) {", "+    catch (InterpreterException ie) {"]}], "num": 21771}
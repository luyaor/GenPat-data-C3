{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94b0fcc16865916a9662cf593a620120", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31fc1e6fb6a283c10d8a0d6f883c2b2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "28f25bd26b80a613db9b4dbda669e268d23dbaf1", "commitAfterChange": "8212ce9ce43b34bb82672d4de3ee06245bf52614", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Node visit(ForEachStatement node)", "signatureAfterChange": "   public Node visit(ForEachStatement node)", "diff": ["+    String s1, s2;", "+    context.enterScope();", "+", "+    ", "+    name_counter = new Integer(name_counter.intValue() + 1);", "+    s1 = \"#_foreach_var_\" + name_counter;", "+    name_counter = new Integer(name_counter.intValue() + 1);", "+    s2 = \"#_foreach_var_\" + name_counter;", "+    context.define(s1, null);", "+    context.define(s2, null);", "+      ", "+    node.addVar(s1);", "+    node.addVar(s2);", "+", "+    ", "+    ", "+    ", "+    FormalParameter param = node.getParameter();", "+    Expression coll = node.getCollection();", "+    Node body = node.getBody();", "+    Node o;", "+    ", "+    o = param.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType (o,param);", "+      node.setParameter((FormalParameter)o);  ", "+    }", "+    ", "+    o = coll.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType (o,coll);", "+      node.setCollection((Expression)o);", "+    }", "+    ", "+    o = body.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType (o,body);", "+      node.setBody(o);  ", "+    }", "+    ", "+    ", "+    context.leaveScope();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a541143ad8e6dc1c20faaf21a61e680c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public Object visit(SwitchStatement node)", "signatureAfterChange": "   public Node visit(SwitchStatement node)", "diff": ["+   */", "+  public Node visit(SwitchStatement node) {", "+    // Visits the components of this node", "+    Expression exp = node.getSelector();", "+    Node o = exp.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,exp);", "+      node.setSelector((Expression) o);", "+    }", "+    ", "+    Iterator<SwitchBlock> it = node.getBindings().iterator();", "+    while (it.hasNext()) {", "+      it.next().acceptVisitor(this);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(SwitchStatement node) {", "-        // Visits the components of this node", "-\tExpression exp = node.getSelector();", "-        Object o = exp.acceptVisitor(this);", "-        if (o != null) {", "-            if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"malformed.expression\", exp);", "-\t    }", "-\t    node.setSelector((Expression)o);", "-        }", "-", "-        Iterator it = node.getBindings().iterator();", "-        while (it.hasNext()) {", "-            ((Node)it.next()).acceptVisitor(this);", "-        }", "-        return null;", "-    }"]}], "num": 13735}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e7a50ef0706c134c58a84aba8e72f8b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "142c6d9b755b394d94e1e1b19f1b50b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "      public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"At 0.\", rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At start of block.\", rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At 0.\", rule.testApplyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of block.\", rule.testApplyRule(_doc, 25, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts one-line comment.\", ! rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts one-line comment.\", ! rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", ! rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", ! rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside javadoc comment.\", ! rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes javadoc comment.\", ! rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", ! rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", ! rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "-    assertTrue(\"At end of document.\", rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", ! rule.testApplyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", ! rule.testApplyRule(_doc, 60, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", ! rule.testApplyRule(_doc, 104, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", ! rule.testApplyRule(_doc, 110, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside javadoc comment.\", ! rule.testApplyRule(_doc, 130, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes javadoc comment.\", ! rule.testApplyRule(_doc, 150, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.testApplyRule(_doc, 180, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.testApplyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts multi-line comment.\", ! rule.testApplyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", ! rule.testApplyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", ! rule.testApplyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", ! rule.testApplyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.testApplyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\", rule.testApplyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f98a4835e5c0b404a72ffcf39d5618f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "      public void testNoPrefix() throws BadLocationException", "diff": ["-    assertTrue(\"At DOCSTART.\", rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"At start of block.\", rule.applyRule(_doc, 25, Indenter.OTHER));", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 54, Indenter.OTHER));", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 60, Indenter.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 104, Indenter.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 110, Indenter.OTHER));", "-    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130, Indenter.OTHER));", "-    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150, Indenter.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 180, Indenter.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 230, Indenter.OTHER));", "-    assertTrue(\"START starts multi-line comment.\", rule.applyRule(_doc, 260, Indenter.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275, Indenter.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399, Indenter.OTHER));", "-    assertTrue(\"START is free.\", rule.applyRule(_doc, 400, Indenter.OTHER));", "-    assertTrue(\"At end of document.\", rule.applyRule(_doc, 401, Indenter.OTHER));", "+    assertTrue(\"At DOCSTART.\", rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At start of block.\", rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.applyRule(_doc, 180, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.applyRule(_doc, 230, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts multi-line comment.\", rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is free.\", rule.applyRule(_doc, 400, Indenter.IndentReason.OTHER));", "+    assertTrue(\"At end of document.\", rule.applyRule(_doc, 401, Indenter.IndentReason.OTHER));"]}], "num": 435}
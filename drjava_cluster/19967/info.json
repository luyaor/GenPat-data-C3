{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6fc6011fa737cf9b9ad3066eda84e8e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f9ddfee6e83112f07010774953fb92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments, final boolean noTestCases,                       final OpenDefinitionsDocument startDoc, final RegionManager<MovingDocumentRegion> rm,                       final FindResultsPanel panel)", "diff": ["-//      Utilities.show(\"Searching complete\");", "-      // Set of documents that have been reverted in the process of \"find all\"", "-//      HashSet<OpenDefinitionsDocument> reverted = new HashSet<OpenDefinitionsDocument>();", "-      ", "-//      panel.startChanging();", "-//        if (reverted.contains(fr.getDocument())) {", "-//          // skipping document because we have previously noticed that it has been modified,", "-//          // i.e. the document is in the reverted list", "-//          continue;", "-//        }", "-        ", "-//        // get the original time stamp", "-//        long origts = fr.getDocument().getTimestamp();", "-        try {", "-          final Position startPos = doc.createPosition(start);", "-          final Position endPos = doc.createPosition(end);", "-          ", "-          // lazily create excerpt string", "-          ", "-          Thunk<String> ss = new Thunk<String>() {", "-            public String value() {", "-              try {", "-                int endSel = endPos.getOffset();", "-                int startSel = startPos.getOffset();", "-                int selLength = endSel - startSel;", "-                if (selLength == 0) return \"\";  // excerpt has been deleted by prior editing", "-                assert selLength > 0;", "-               ", "-                int excerptEnd = doc._getLineEndPos(endSel);", "-                int excerptStart = doc._getLineStartPos(startSel);", "-                assert excerptStart <= startSel;", "-", "-                // the offsets within the excerpted string of the selection (figuratively in \"Red\")", "-                int startRed = startSel - excerptStart;", "-                int endRed = endSel - excerptStart;", "-                ", "-                int excerptLength = Math.min(120, excerptEnd - excerptStart);", "-                String text = doc.getText(excerptStart, excerptLength);", "-                ", "-                // Construct the matching string and compressed selection prefix and suffix strings within text", "-                String prefix = StringOps.compress(text.substring(0, startRed));", "-                String match, suffix;", "-                if (excerptLength < startRed + selLength) { // selection extends beyond excerpt", "-                  match = text.substring(startRed) + \"...\";", "-                  suffix = \"\";", "-                }", "-                else {", "-                  match = text.substring(startRed, endRed);", "-                  suffix = StringOps.compress(text.substring(endRed, excerptLength));", "-                }", "-", "-                // COMMENT: We need a global invariant concerning non-displayable characters.  ", "-                ", "-                // create the excerpt string", "-                StringBuilder sb = new StringBuilder(edu.rice.cs.plt.text.TextUtil.htmlEscape(prefix));", "-                sb.append(\"<font color=#ff0000>\");", "-//                sb.append(LEFT);", "-                sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(match));", "-                sb.append(\"</font>\");", "-//                sb.append(RIGHT);", "-                sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(suffix));", "-//                sb.append(\"</html>\");", "-//                sb.append(StringOps.getBlankString(120 - sLength));  // move getBank to StringOps", "-                return sb.toString();", "-              }", "-              catch(BadLocationException e) { return \"\";  /* Ignore the exception. */ }", "-            }", "-          };", "-          ", "-          rm.addRegion(new MovingDocumentRegion(doc, doc.getFile(), startPos, endPos, ss));", "-//          rm.addRegion(new MovingDocumentRegion(doc, doc.getFile(), startPos, endPos, s));", "-        }", "-        catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "-        catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+        int lineStart = doc._getLineStartPos(start);", "+        int lineEnd = doc._getLineEndPos(end);                                          ", "+        ", "+        rm.addRegion(new MovingDocumentRegion(doc, start, end, lineStart, lineEnd));", "-//      panel.finishChanging();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4e6c94afebe7f174fc9bdb62a789f37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "a9501033c36d04c8d30e61d0390a87ad553ac022", "commitAfterChange": "e38424ed07a882ee616fdf02e69d28f304b8294c", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public String toString()", "signatureAfterChange": "     public String toString()", "diff": ["-    public FindResultsRegionTreeUserObj(DocumentRegion r) { super(r); }", "+//    }", "-      _region.getDocument().acquireReadLock();", "-      try {", "-        sb.append(\"<html>\");", "-        sb.append(lineNumber());", "-        try {", "-          sb.append(\": \");", "-          int endSel = _region.getDocument().getLineEndPos(_region.getEndOffset());", "-          int startSel = _region.getDocument().getLineStartPos(_region.getStartOffset());", "-          int length = Math.min(120, endSel-startSel);", "-          ", "-          // this highlights the actual region in red", "-          int startRed = _region.getStartOffset() - startSel;", "-          int endRed = _region.getEndOffset() - startSel;", "-          String s = _region.getDocument().getText(startSel, length);", "-          for(int i=0; i<s.length(); ++i) {", "-            if (!Character.isWhitespace(s.charAt(i))) {", "-              break;", "-            }", "-            --startRed;", "-            --endRed;", "-          }", "-          s = s.trim();", "-          if (startRed<0) { startRed = 0; }", "-          if (startRed>s.length()) { startRed = s.length(); }", "-          if (endRed<startRed) { endRed = startRed; }", "-          if (endRed>s.length()) { endRed = s.length(); }", "-          sb.append(StringOps.encodeHTML(s.substring(0, startRed)));", "-          sb.append(\"<font color=#ff0000>\");", "-          sb.append(StringOps.encodeHTML(s.substring(startRed, endRed)));", "-          sb.append(\"</font>\");", "-          sb.append(StringOps.encodeHTML(s.substring(endRed)));", "-          sb.append(\"</html>\");", "-        } catch(BadLocationException bpe) { /* ignore, just don't display line */ }        ", "-      } finally { _region.getDocument().releaseReadLock(); }", "+      sb.append(\"<html>\");", "+      sb.append(lineNumber());", "+      sb.append(\": \");", "+      sb.append(_region.getString());", "+      sb.append(\"</html>\");"]}], "num": 19967}
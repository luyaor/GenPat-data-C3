{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a162f4bcad6045ef0762d2ca7e6d6266", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a65070198f1b5782b6c4060e4a8413a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private TypeContext checkList(Iterable<? extends Node> l)", "signatureAfterChange": "      private TypeContext checkList(Iterable<? extends Node> l)", "diff": ["-    for (Node n : l) { c = n.acceptVisitor(new StatementChecker(c, opt)); }", "+    for (Node n : l) {", "+      // TODO: fix the parser so there aren't any Expressions here", "+      if (n instanceof Expression) { n.acceptVisitor(new ExpressionChecker(c, opt)); }", "+      else { c = n.acceptVisitor(new StatementChecker(c, opt)); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c1e4af2a7814d5a3044672e2a78a5bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "6f501e5fca95aec34d7430b68d9d987e33ec6129", "commitAfterChange": "f175bd951be0706c1171fa45b387f5428c58ddb3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public static String toString(Iterable<?> iter, String prefix, String delimiter, String suffix)", "signatureAfterChange": "   public static String toString(Iterable<?> iter, String prefix, String delimiter, String suffix)", "diff": ["+    if (isInfinite(iter)) { iter = compose(new TruncatedIterable<Object>(iter, 8), \"...\"); }"]}], "num": 205}
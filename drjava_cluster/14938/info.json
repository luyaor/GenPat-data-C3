{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47b65b964fa980aca30d4c946fda2d7e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de48a159b1677c56fcd350c4cd15180", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsView.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void setEditable(boolean editable)", "signatureAfterChange": "   public void setEditable(final boolean editable)", "diff": ["-  public void setEditable(boolean editable) {", "-    _styledText.setEditable(editable);", "+  public void setEditable(final boolean editable) {", "+    _styledText.getDisplay().syncExec(new Runnable() {", "+      public void run() {", "+        _styledText.setEditable(editable);", "+      }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85290dadb3a84b491bce47afbd90c2b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 394, "signatureBeforeChange": "          public void interactionErrorOccurred(int offset, int length)", "signatureAfterChange": "          public void interactionErrorOccurred(final int offset, final int length)", "diff": ["-    public void interactionErrorOccurred(int offset, int length) {", "-      _interactionsPane.highlightError(offset, length);", "+    public void interactionErrorOccurred(final int offset, final int length) {", "+      Utilities.invokeLater(new Runnable() { public void run() { _interactionsPane.highlightError(offset, length); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89caac31417885bdf7516493fcb8bbb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "1e64dff50a32582d182c950c323629608db6f054", "commitAfterChange": "d999f0af23b00e87ee091cf6b7f8d16576621e4d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(final DocumentEvent e)", "diff": ["-    public void insertUpdate(DocumentEvent e) {", "-      ConsoleDocument doc = getConsoleDoc();", "-      int caretPos = _pane.getCaretPosition();", "-      int promptPos = doc.getPromptPos();", "-      int length = doc.getDocLength();", "-", "-      // Figure out where the prompt was before the update", "-      int prevPromptPos = promptPos;", "-      if (e.getOffset() < promptPos) {", "-        // Insert happened before prompt,", "-        //  so previous position was further back", "-        prevPromptPos = promptPos - e.getLength();", "-      }", "-", "-      if (!doc.hasPrompt()) {", "-        // Scroll to the end of the document, since output has been", "-        // inserted after the prompt.", "-        moveToEnd();", "-      }", "-      // (Be careful not to move caret during a reset, when the", "-      //  prompt pos is temporarily far greater than the length.)", "-      else if (promptPos <= length) {", "-        if (caretPos < prevPromptPos) {", "-          // Caret has fallen behind prompt, so make it catch up so", "-          //  the new input is visible.", "-          moveToPrompt();", "-        }", "-        else {", "-          // Caret was on or after prompt, so move it right by the size", "-          //  of the insert.", "-          int size = promptPos - prevPromptPos;", "-          if (size > 0) {", "-            moveTo(caretPos + size);", "+    public void insertUpdate(final DocumentEvent e) {", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          ConsoleDocument doc = getConsoleDoc();", "+          int caretPos = _pane.getCaretPosition();", "+          int promptPos = doc.getPromptPos();", "+          int length = doc.getDocLength();", "+          ", "+          // Figure out where the prompt was before the update", "+          int prevPromptPos = promptPos;", "+          if (e.getOffset() < promptPos) {", "+            // Insert happened before prompt,", "+            //  so previous position was further back", "+            prevPromptPos = promptPos - e.getLength();", "+          }", "+          ", "+          if (!doc.hasPrompt()) {", "+            // Scroll to the end of the document, since output has been", "+            // inserted after the prompt.", "+            moveToEnd();", "+          }", "+          // (Be careful not to move caret during a reset, when the", "+          //  prompt pos is temporarily far greater than the length.)", "+          else if (promptPos <= length) {", "+            if (caretPos < prevPromptPos) {", "+              // Caret has fallen behind prompt, so make it catch up so", "+              //  the new input is visible.", "+              moveToPrompt();", "+            }", "+            else {", "+              // Caret was on or after prompt, so move it right by the size", "+              //  of the insert.", "+              int size = promptPos - prevPromptPos;", "+              if (size > 0)  moveTo(caretPos + size);", "+            }", "-      }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aad37626c4003f480cb160d607fa562", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorHandler.java", "commitBeforeChange": "f8e4975fc86eccfc2e1e190be55c64d1a287745a", "commitAfterChange": "1b5ef0eebd43a246e897081eb432b396efa2d20e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static void record(Throwable thrown)", "signatureAfterChange": "   public static void record(final Throwable thrown)", "diff": ["-  public static void record(Throwable thrown) {", "-    _errors.add(thrown);", "-    if (_errorsButton != null) {", "-      _errorsButton.setVisible(true);", "-    }", "-    if (_errors.size() == 1 && DrJava.getConfig().getSetting(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED).booleanValue()) {", "-      DrJavaErrorPopup popup = new DrJavaErrorPopup(DrJavaErrorWindow.getFrame(), thrown);", "-      MainFrame.setPopupLoc(popup, popup.getOwner());", "-      popup.setVisible(true);", "-    }", "+  public static void record(final Throwable thrown) {", "+    SwingUtil.invokeLater(new Runnable() {", "+      public void run() {", "+        _errors.add(thrown);", "+        if (_errorsButton != null) {", "+          _errorsButton.setVisible(true);", "+        }", "+        if (_errors.size() == 1 && DrJava.getConfig().getSetting(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED).booleanValue()) {", "+          DrJavaErrorPopup popup = new DrJavaErrorPopup(DrJavaErrorWindow.getFrame(), thrown);", "+          MainFrame.setPopupLoc(popup, popup.getOwner());", "+          popup.setVisible(true);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec5ba17a3f997cfe1ead8539d31327fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void notifyRegistrationListeners(OpenDefinitionsDocument odd, DocManager man)", "signatureAfterChange": "   private void notifyRegistrationListeners(final OpenDefinitionsDocument odd, final DocManager man)", "diff": ["-  private void notifyRegistrationListeners(OpenDefinitionsDocument odd, DocManager man) {", "-    for (RegistrationListener list : _regListeners) { list.registered(odd,man); }", "+  private void notifyRegistrationListeners(final OpenDefinitionsDocument odd, final DocManager man) {", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { for (RegistrationListener list : _regListeners) { list.registered(odd, man); } }", "+    });"]}], "num": 14938}
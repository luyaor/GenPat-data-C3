{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "268332fbf94060c777921d5ca2242f31", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "376d440f170be683310fdb2f2cbd7da7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   public Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,                                                  Node node, Expression v)", "signatureAfterChange": "   public Expression checkAssignmentStaticRules(Type lc1, Type rc1,                                                Node node, Expression v)", "diff": ["-  public Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,", "-                                                 Node node, Expression v) {", "+  public Expression checkAssignmentStaticRules(Type lc1, Type rc1,", "+                                               Node node, Expression v) {", "+    Class<?> lc = (Class<?>)lc1;", "+    Class<?> rc = (Class<?>)rc1;", "+    ", "-          if (rc.isPrimitive()) {", "-            Class<?> boxedRc = _correspondingRefClass(rc);", "-            if (lc.isAssignableFrom(boxedRc)) return _box(v,boxedRc);", "-            if (TigerUtilities.boxesTo(rc, lc)) return _box(v, lc); /* I think this statement is unnecessary.  Corky 6/19/04 */", "-            throw new ExecutionError(\"assignment.types\", node);", "-          }", "+        if (rc.isPrimitive()) {", "+          Type boxedRc1 = _correspondingRefClass(rc);", "+          Class<?> boxedRc = (Class<?>)boxedRc1;", "+          if (lc.isAssignableFrom(boxedRc)) return _box(v,boxedRc);", "+          if (TigerUtilities.boxesTo(rc, lc)) return _box(v, lc); /* I think this statement is unnecessary.  Corky 6/19/04 */", "+          throw new ExecutionError(\"assignment.types\", node);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f74a7885546e038a6a3035dac8dd0c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "   private void checkCastStaticRules(Class<?> tc, Class<?> ec, CastExpression castExp)", "signatureAfterChange": "   private void checkCastStaticRules(Type tc1, Type ec1, CastExpression castExp)", "diff": ["-  private void checkCastStaticRules(Class<?> tc, Class<?> ec, CastExpression castExp) {", "+  private void checkCastStaticRules(Type tc1, Type ec1, CastExpression castExp) {", "+    ", "+    Class<?> tc = (Class<?>)tc1;", "+    Class<?> ec = (Class<?>)ec1;", "+    ", "-            Class<?> tec = tc.getComponentType();", "-            Class<?> eec = ec.getComponentType();", "+            Type tec1 = tc.getComponentType();", "+            Type eec1 = ec.getComponentType();", "+            ", "+            Class<?> tec = (Class<?>)tec1;", "+            Class<?> eec = (Class<?>)eec1;", "+            ", "-           if (tc.isArray()) {", "-             if (!Cloneable.class.isAssignableFrom(ec)) {", "-               throw new ExecutionError(\"cast\", castExp);", "-             }", "-           }", "+          if (tc.isArray()) {", "+            if (!Cloneable.class.isAssignableFrom(ec)) {", "+              throw new ExecutionError(\"cast\", castExp);", "+            }", "+          }", "-                throw new ExecutionError(\"cast\", castExp);", "+              throw new ExecutionError(\"cast\", castExp);", "-              throw new ExecutionError(\"cast\", castExp);", "-            }", "-          } // both ec and tc are classes or primitives", "+            throw new ExecutionError(\"cast\", castExp);", "+          }", "+        } // both ec and tc are classes or primitives"]}], "num": 21168}
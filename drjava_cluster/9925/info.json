{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0617813ab99a5ae377a0027ba368615", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d8cf8585270321cef1e198105820f4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "7b462e5cdfbc488a99d67df352bda94ace89024b", "commitAfterChange": "885cfecca904bc390539dbda728502710df6c2d9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File>      _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                 Iterable<File> classPath, Iterable<File> bootClassPath) throws IOException", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-  private List<File> ", "-    _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,", "-                                Iterable<File> classPath, Iterable<File> bootClassPath) throws IOException {", "+  private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,", "+                                                           Iterable<File> classPath, Iterable<File> bootClassPath) {", "+    LinkedList<File> newFiles = new LinkedList<File>();  // Used to record the LL files that must be converted", "+    LinkedList<File> filesToBeClosed = new LinkedList<File>(); // Used to record .java files that are open at the same time as their .dj? files.", "+        ", "-        if (javaFileSet.contains(javaFile)) { _showConflictingFilesMessage(javaFile); }", "+        ", "+        //checks if .dj? file has a matching .java file open in project. Eventually warns user (later on in code)", "+        if(files.contains(javaFile)){", "+          ", "+          filesToBeClosed.add(javaFile);", "+          ", "+        } ", "-", "+        newFiles.add(javaFile);", "+        ", "+      }   ", "+      else{  ", "+        javaFileSet.add(canonicalFile);", "-      else {", "-        if (javaFileSet.contains(canonicalFile)) { // canonicalFile was already added for a corresponding .dj* file", "-          _showConflictingFilesMessage(canonicalFile); }  ", "-        javaFileSet.add(canonicalFile); ", "+    }", "+    ", "+    for(File f: filesToBeClosed) {", "+      ", "+      File canonicalFile = IOUtil.attemptCanonicalFile(f);", "+      String fileName = canonicalFile.getPath();", "+      ", "+      if(files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\"))+\".dj0\")) ||", "+         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\"))+\".dj1\")) ||", "+         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\"))+\".dj2\"))", "+        ) {", "+        files.remove(new File(fileName));", "+      ", "+      ", "+    }", "+    ", "+    if(!filesToBeClosed.isEmpty()){", "+      new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(null, \"Warning: Files need to be closed\",", "+                                                       \"The following files have matching .dj? files open.\", ", "+                                                       \"These .java files need to be closed for proper compiling. \\n \\n \\n\" +", "+                                                       filesToBeClosed.toString().replace(\", \",\"\\n\"),true).show();", "+      ", "+//      // Confirm that the .java files corresponding to .dj* files exist.", "+//      for (File f: newFiles)", "+//        if (! f.exists()) Utilities.show(f + \" does not exist\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa338d5b54c5f4a28e5b49877a82ddd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "ef93e6cc3a79f29ed28debb1108f1338b9a974ad", "commitAfterChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                  Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                  Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-      int lastIndex = fileName.lastIndexOf(\".dj\");", "-      if (lastIndex != -1) {", "+      if (DrJavaFileUtils.isLLFile(fileName)) {", "-        File javaFile = new File(fileName.substring(0, lastIndex) + \".java\");", "+        File javaFile = new File(DrJavaFileUtils.getJavaForLLFile(fileName));", "-      ", "-      File canonicalFile = IOUtil.attemptCanonicalFile(f);", "-      String fileName = canonicalFile.getPath();", "-      ", "-      if(files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj0\")) ||", "-         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj1\")) ||", "-         files.contains(new File(fileName.substring(0,fileName.lastIndexOf(\".java\")) + \".dj2\"))", "-        ) {", "-        files.remove(new File(fileName));", "+      if (files.contains(DrJavaFileUtils.getDJForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ0ForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ1ForJavaFile(f)) ||", "+          files.contains(DrJavaFileUtils.getDJ2ForJavaFile(f))) {", "+        files.remove(f);", "-      ", "-      ", "-//      new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(null, \"Warning: Files need to be closed\",", "-//                                                       \"The following files have matching .dj? files open.\", ", "-//                                                       \"These .java files need to be closed for proper compiling. \\n \\n \\n\"", "-//                                                       + filesToBeClosed.toString().replace(\", \",\"\\n\"),true).show();"]}], "num": 9925}
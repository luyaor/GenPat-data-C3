{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2e7a53ca9e001a0a047bfd45bc24ab8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530a0096019dd12a89a6a47994ef2f7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "commitAfterChange": "7fcdc5820c7f1c50a17a282e38bc904783e87e7f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private void _ok()", "signatureAfterChange": "   private void _ok()", "diff": ["-   */", "+  /** Do the Jar. */", "-    _worker = new SwingWorker() {", "+    ", "+    File jarOut = _jarFileSelector.getFileFromField();", "+    if (jarOut == null) {", "+      JOptionPane.showMessageDialog(JarOptionsDialog.this,", "+                                    \"You must specify an output file\",", "+                                    \"Error: No File Specified\",", "+                                    JOptionPane.ERROR_MESSAGE);", "+      return;", "+    }", "+    else if (jarOut.exists()) {", "+      if (JOptionPane.showConfirmDialog(JarOptionsDialog.this,", "+                                        \"Are you sure you want to overwrite the file '\" + jarOut.getPath() + \"'?\",", "+                                        \"Overwrite file?\",", "+                                        JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {", "+        // I want to focus back to the dialog", "+        return;", "+      }", "+    }", "+", "+    setEnabled(false);", "+    _processingFrame.setVisible(true);", "+    SwingWorker worker = new SwingWorker() {", "+      boolean _success = false;", "-       * @param model the SingleDisplayModel that the files are to come out of", "+       * @param model the GlobalModel that the files are to come out of", "-      private boolean jarSources(SingleDisplayModel model, JarBuilder jar) {", "+      private boolean jarSources(GlobalModel model, JarBuilder jar) {", "+        try {", "-          if (jarOut == null) {", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this,", "-                    \"You must specify an output file\",", "-                    \"Error: No File Specified\",", "-                    JOptionPane.OK_OPTION);", "-            return null;", "+          if (!jarOut.exists()) {", "+            jarOut.createNewFile();", "-          else if (jarOut.exists()) {", "-            if (JOptionPane.showConfirmDialog(JarOptionsDialog.this,", "-                    \"Are you sure you want to overwrite the file '\" + jarOut.getPath() + \"'?\",", "-                    \"Overwrite file?\",", "-                    JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {", "-              // I want to focus back to the dialog", "-              return null;", "+          ", "+          if (_jarClasses.isSelected() && _jarSources.isSelected()) {", "+            JarBuilder mainJar = null;", "+            if (_makeExecutable.isSelected()) {", "+              ManifestWriter mw = new ManifestWriter();", "+              mw.setMainClass(_mainClassField.getText());", "+              mainJar = new JarBuilder(jarOut, mw.getManifest());", "+            else {", "+              mainJar = new JarBuilder(jarOut);", "+            }", "+            ", "+            jarBuildDirectory(_model.getBuildDirectory(), mainJar);", "+            ", "+            File sourceJarFile = File.createTempFile(_model.getBuildDirectory().getName(), \".jar\");", "+            JarBuilder sourceJar = new JarBuilder(sourceJarFile);", "+            jarSources(_model, sourceJar);", "+            sourceJar.close();", "+            mainJar.addFile(sourceJarFile, \"\", \"source.jar\");", "+            ", "+            mainJar.close();", "+            sourceJarFile.delete();", "+          }", "+          else if (_jarClasses.isSelected()) {", "+            JarBuilder jb;", "+            if (_makeExecutable.isSelected()) {", "+              ManifestWriter mw = new ManifestWriter();", "+              mw.setMainClass(_mainClassField.getText());", "+              jb = new JarBuilder(jarOut, mw.getManifest());", "+            }", "+            else {", "+              jb = new JarBuilder(jarOut);", "+            }", "+            jarBuildDirectory(_model.getBuildDirectory(), jb);", "+            jb.close();", "-            try {", "-              jarOut.createNewFile();", "-            }", "-            catch (IOException e) {", "-              JarOptionsDialog.this.setVisible(false);", "-              e.printStackTrace();", "-              throw new UnexpectedException(e);", "-            }", "+            JarBuilder jb = new JarBuilder(jarOut);", "+            jarSources(_model, jb);", "+            jb.close();", "-", "-          // If the classes are going to be bundled, we compile them", "-          if (_jarClasses.isSelected()) {", "-            try {", "-              _model.getCompilerModel().compileAll();", "-            }", "-            catch (IOException e) {", "-              return null;", "-            }", "+          _success = true;", "+        }", "+        catch (Exception e) {", "+          e.printStackTrace();", "+        }", "+        return null;", "+      }", "+      public void finished() {", "+        _processingFrame.setVisible(false);", "+        JarOptionsDialog.this.setEnabled(true);", "+        if (_success) {", "+          if (_makeExecutable.isSelected()) {", "+             Object[] options = { \"OK\", \"Run\" };", "+             int res = JOptionPane.showOptionDialog(JarOptionsDialog.this, \"Jar file successfully written to '\"+_jarFileSelector.getFileFromField().getName()+\"'\",", "+                                                    \"Jar Creation Successful\", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,", "+                                                    null, options, options[0]);", "+             JarOptionsDialog.this.setVisible(false);", "+             if (1==res) {", "+               SwingWorker jarRunner = new SwingWorker() {", "+                 public Object construct() {", "+                   try {", "+                     Process jarFileProcess = ExecJVM.runJVM(_mainClassField.getText(), // mainClass", "+                                                             new String[] {}, // classParams,", "+                                                             new String[] { _jarFileSelector.getFileFromField().getAbsolutePath() }, // classPath,", "+                                                             new String[] {}, // jvmParams,", "+                                                             _jarFileSelector.getFileFromField().getParentFile());", "+                                                             ", "+                     StreamRedirectThread errThread = new StreamRedirectThread(\"error reader\", jarFileProcess.getErrorStream(), System.err);", "+                     StreamRedirectThread outThread = new StreamRedirectThread(\"output reader\", jarFileProcess.getInputStream(), System.out);", "+                     errThread.start();", "+                     outThread.start();", "+                     boolean notDead = true;", "+                     while(notDead) {", "+                       try {", "+                         errThread.join();", "+                         outThread.join();", "+                         notDead = false;", "+                       }", "+                       catch (InterruptedException exc) {", "+                         // ignore, we don't interrupt", "+                       }", "+                     }", "+                     JOptionPane.showMessageDialog(JarOptionsDialog.this,\"Execution of jar file terminated (exit value = \"+", "+                                                   jarFileProcess.exitValue()+\")\", \"Execution terminated.\",", "+                                                   JOptionPane.INFORMATION_MESSAGE);", "+                   }", "+                   catch(IOException ioe) {", "+                     JOptionPane.showMessageDialog(JarOptionsDialog.this, \"An error occured while running the jar file.\", \"Error: File Access\", JOptionPane.ERROR_MESSAGE);", "+                   }", "+                   return null;", "+                 }", "+               };", "+               jarRunner.start();", "+             }", "-", "-          if (_jarClasses.isSelected() && _jarSources.isSelected()) {", "-            try {", "-              File classJarFile = File.createTempFile(_model.getBuildDirectory().getName(), \".jar\");", "-              JarBuilder classJar = new JarBuilder(classJarFile);", "-              jarBuildDirectory(_model.getBuildDirectory(), classJar);", "-              classJar.close();", "-", "-              JarBuilder mainJar = null;", "-              if (_makeExecutable.isSelected()) {", "-                ManifestWriter mw = new ManifestWriter();", "-                mw.addClassPath(_model.getBuildDirectory().getName() + \".jar\");", "-                mw.setMainClass(_mainClassField.getText());", "-                mainJar = new JarBuilder(jarOut, mw.getManifest());", "-              }", "-              else {", "-                ManifestWriter mw = new ManifestWriter();", "-                mw.addClassPath(_model.getBuildDirectory().getName() + \".jar\");", "-                mainJar = new JarBuilder(jarOut, mw.getManifest());", "-              }", "-              mainJar.addFile(classJarFile, \"\", _model.getBuildDirectory().getName() + \".jar\");", "-", "-              jarSources(_model, mainJar);", "-", "-              mainJar.close();", "-              classJarFile.delete();", "-              JarOptionsDialog.this.setVisible(false);", "-            }", "-            catch (IOException e) {", "-              // There was a file access error of some sort", "-              JOptionPane.showConfirmDialog(JarOptionsDialog.this, \"An error occured while writing the jar file. This could be becasue the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.OK_OPTION);", "-            }", "-          }", "-          else if (_jarClasses.isSelected() && !_jarSources.isSelected()) {", "-            try {", "-              JarBuilder jb;", "-              if (_makeExecutable.isSelected()) {", "-                ManifestWriter mw = new ManifestWriter();", "-                mw.setMainClass(_mainClassField.getText());", "-                jb = new JarBuilder(jarOut, mw.getManifest());", "-              }", "-              else {", "-                jb = new JarBuilder(jarOut);", "-              }", "-              jarBuildDirectory(_model.getBuildDirectory(), jb);", "-              jb.close();", "-              JarOptionsDialog.this.setVisible(false);", "-            }", "-            catch (IOException e) {", "-              // There was a file access error of some sort", "-              JOptionPane.showConfirmDialog(JarOptionsDialog.this, \"An error occured while writing the jar file. This could be becasue the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.OK_OPTION);", "-            }", "-          }", "-          else if (!_jarClasses.isSelected() && _jarSources.isSelected()) {", "-            try {", "-              JarBuilder jb = new JarBuilder(jarOut);", "-              jarSources(_model, jb);", "-              jb.close();", "-              JarOptionsDialog.this.setVisible(false);", "-            }", "-            catch (IOException e) {", "-              // There was a file access error of some sort", "-              JOptionPane.showConfirmDialog(JarOptionsDialog.this, \"An error occured while writing the jar file. This could be becasue the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.OK_OPTION);", "-            }", "-          }", "-          else if (!_jarClasses.isSelected() && !_jarSources.isSelected()) {", "+          else {", "+            JOptionPane.showMessageDialog(JarOptionsDialog.this,\"Jar file successfully written to '\"+_jarFileSelector.getFileFromField().getName()+\"'\", \"Jar Creation Successful\", JOptionPane.INFORMATION_MESSAGE);", "-            // We aren't jarring anything", "-            return null;", "-          JOptionPane.showConfirmDialog(JarOptionsDialog.this,\"Jar file successfully written to '\"+jarOut.getName()+\"'\", \"Jar Creation Successful\", JOptionPane.OK_CANCEL_OPTION);", "-          return null;", "+        }", "+        else {", "+          JOptionPane.showMessageDialog(JarOptionsDialog.this, \"An error occured while creating the jar file. This could be because the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.ERROR_MESSAGE);", "+          JarOptionsDialog.this.setVisible(false);", "+        }", "-    _worker.start();", "+    worker.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec61b35c644825b8da40334f6f93486", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "ade6daf6528722698c362806dd26e5adcee8870d", "commitAfterChange": "666cd0e1854560c3c8c100e519e7096ee8bf81c6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+    ", "+    /******** Text Field Initializations ********/", "+    // Sets font for the \"Find\" field", "+    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "+    setFieldFont(font);", "+", "+    // Create the Structure for the replace label", "+    _replaceLabelTop = new JLabel(\"Replace\", SwingConstants.RIGHT);", "+    _replaceLabelBot = new JLabel(\"With\", SwingConstants.RIGHT);", "+    ", "+    JPanel replaceLabelPanelTop = new JPanel(new BorderLayout(5,5));", "+    JPanel replaceLabelPanelBot = new JPanel(new BorderLayout(5,5));", "+    JPanel replaceLabelPanel = new JPanel(new GridLayout(2,1));", "+    ", "+    replaceLabelPanelTop.add(_replaceLabelTop, BorderLayout.SOUTH);", "+    replaceLabelPanelBot.add(_replaceLabelBot, BorderLayout.NORTH);", "+    ", "+    replaceLabelPanel.add(replaceLabelPanelTop);", "+    replaceLabelPanel.add(replaceLabelPanelBot);", "+    ", "+    ", "+    // Create the stucture for the find label", "+    _findLabelTop = new JLabel(\"Find\", SwingConstants.RIGHT);", "+    _findLabelBot = new JLabel(\"Next\", SwingConstants.RIGHT);", "+    ", "+    JPanel findLabelPanelTop = new JPanel(new BorderLayout(5,5));", "+    JPanel findLabelPanelBot = new JPanel(new BorderLayout(5,5));", "+    JPanel findLabelPanel = new JPanel(new GridLayout(2,1));", "+    ", "+    findLabelPanelTop.add(_findLabelTop, BorderLayout.SOUTH);", "+    findLabelPanelBot.add(_findLabelBot, BorderLayout.NORTH);", "+    ", "+    findLabelPanel.add(findLabelPanelTop);", "+    findLabelPanel.add(findLabelPanelBot);                     ", "+", "+    ", "+//    // need separate label and field panels so that the find and", "+//    // replace textfields line up", "+//    _labelPanel = new JPanel(new GridLayout(2,1));", "+//    _labelPanel.add(_findLabel);", "+//    _labelPanel.add(_replaceLabel);", "+//    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "+//    _labelPanel.setFocusable(false);", "+    ", "+    /******** Button Panel ********/", "-    ", "-", "-    /******** Text Field Initializations ********/", "-    // Sets font for the \"Find\" field", "-    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "-    setFieldFont(font);", "-", "-    // Create the Labels", "-    _findLabel = new JLabel(\"Find Next\", SwingConstants.LEFT);", "-    _findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-", "-    _replaceLabel = new JLabel(\"Replace With\", SwingConstants.LEFT);", "-    _replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-    ", "-", "-    // need separate label and field panels so that the find and", "-    // replace textfields line up", "-    _labelPanel = new JPanel(new GridLayout(2,1));", "-    _labelPanel.add(_findLabel);", "-    _labelPanel.add(_replaceLabel);", "-    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "-    _labelPanel.setFocusable(false);", "+    _lowerCheckPanel.setMaximumSize(new Dimension(1000, 40));", "-    _matchCaseAndAllDocsPanel.add(_searchAllDocuments); ", "+    _matchCaseAndAllDocsPanel.add(_searchAllDocuments);", "+    _matchCaseAndAllDocsPanel.setMaximumSize(new Dimension(1000, 40));", "-    ", "-    ", "-    /******** Set up the Panel containing the Text Fields ********/", "-    JPanel fieldsPanel = new JPanel(new GridLayout(2,1));", "-    fieldsPanel.add(_findPane);", "-    fieldsPanel.add(_replacePane);", "+", "+    _findPane.setHorizontalScrollBarPolicy(BorderlessScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    _replacePane.setHorizontalScrollBarPolicy(BorderlessScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    ", "+    JPanel findPanel = new JPanel(new BorderLayout(5,5));", "+    findPanel.add(findLabelPanel, BorderLayout.WEST);", "+    findPanel.add(_findPane, BorderLayout.CENTER);", "+//    findPanel.add(Box.createVerticalGlue());", "+    ", "+    JPanel replacePanel = new JPanel(new BorderLayout(5,5));", "+    replacePanel.add(replaceLabelPanel, BorderLayout.WEST);", "+    replacePanel.add(_replacePane, BorderLayout.CENTER);", "+//    replacePanel.add(Box.createVerticalGlue());", "+        ", "+    /******** Set up the Panel containing the Text Fields ********/", "+    JPanel leftPanel = new JPanel(new GridLayout(1,2,5,5));", "+    leftPanel.add(findPanel);", "+    leftPanel.add(replacePanel);", "-    JPanel optionsPanel = new JPanel(new GridLayout(2,1));", "+    Box optionsPanel = new Box(BoxLayout.Y_AXIS);", "+    optionsPanel.add(Box.createGlue());", "-    midPanel.add(fieldsPanel, BorderLayout.CENTER);", "+    midPanel.add(leftPanel, BorderLayout.CENTER);", "-    _rightPanel.add(_closePanel, BorderLayout.EAST);    ", "+    _rightPanel.add(_closePanel, BorderLayout.EAST); ", "+    ", "+    JPanel newPanel = new JPanel();", "+    newPanel.setLayout(new BoxLayout(newPanel, BoxLayout.Y_AXIS));", "+    newPanel.add(_rightPanel);", "+    newPanel.add(Box.createVerticalStrut(5));", "+    newPanel.add(buttons);", "+    newPanel.add(Box.createVerticalStrut(5));", "+    ", "+    this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));", "+    this.add(Box.createHorizontalStrut(5));", "+    this.add(newPanel);", "-    hookComponents(this, _rightPanel, _labelPanel, buttons);", "+//    hookComponents(this, _rightPanel, new JPanel(), buttons);", "+            updateUI();"]}], "num": 5794}
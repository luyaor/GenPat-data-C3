{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b82d87db6eff71965cdaf20d12ea33e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e057438d40aba350c631325c7f2121", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "commitAfterChange": "df716c1c0097e3026300a60a646a72121f921c3d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent,                                            String value,                                            final OptionListener<String> l)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent,                                            String value,                                            final OptionListener<String> l)", "diff": ["+  ", "+  @SuppressWarnings(\"fallthrough\")", "+  public static void sanitizeMasterJVMArgs(JFrame parent,", "+                                           String value,", "+                                           final OptionListener<String> l) {", "+    int pos = value.indexOf(\"-Xmx\");", "+    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "+        (pos==0)) {", "+      int endpos = pos+(\"-Xmx\".length());", "+      while((endpos<value.length()) &&", "+            (!Character.isWhitespace(value.charAt(endpos)))) {", "+        ++endpos;", "+      }", "+      ", "+      int startpos = pos+(\"-Xmx\".length());", "+      String size = value.substring(startpos,endpos);", "-  ", "-  @SuppressWarnings(\"fallthrough\")", "-  public static void sanitizeMasterJVMArgs(JFrame parent,", "-                                           String value,", "-                                           final OptionListener<String> l) {", "-    int pos = value.indexOf(\"-Xmx\");", "-    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "-        (pos==0)) {", "-      int startpos = pos+(\"-Xmx\".length());", "-      int endpos = startpos;", "-      while((endpos<value.length()) &&", "-            (!Character.isWhitespace(value.charAt(endpos)))) {", "-        ++endpos;", "-      }", "-", "-      String size = value.substring(startpos,endpos);", "-      long factor = 1;", "-      long heapSize;", "-      switch(size.toLowerCase().charAt(size.length()-1)) {", "-        case 'g':", "-          factor *= 1024; // fall-through intended", "-        case 'm':", "-          factor *= 1024; // fall-through intended", "-        case 'k':", "-          factor *= 1024; // fall-through intended", "-        default:", "-          try{", "-          heapSize = new Long(size.substring(0,size.length()-2)) * factor;", "-        }", "-          catch(NumberFormatException nfe) {", "-            heapSize = -1; // invalid", "-          }", "-      }", "+      long heapSizeMB = (heapSize / 1024) / 1024;", "+      // find the next bigger of the choices", "+      String newSetting = getNextBiggerHeapSize(heapSizeMB);", "-          \"Clean \\\"Main JVM Args\\\"\",", "+          \"Clean \\\"Master JVM Args\\\"\",", "-                           \"Would you like to copy the value\\n\\\"\"+size+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "+                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "-          DrJava.getConfig().setSetting(MASTER_JVM_XMX, size);", "+          DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);", "-        JOptionPane.showMessageDialog(parent,", "-                                      \"You will have to restart DrJava before the change takes effect.\");", "+        else {", "+          JOptionPane.showMessageDialog(parent,", "+                                        \"You will have to restart DrJava before the change takes effect.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aa8ec82b5df2fe4b859ae5a7ab52ed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "2de5de833fec6c0fefce3e0dfbb07764b1900707", "commitAfterChange": "fa036878036cfa9b3fdfb0b92616499d17bb99f7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public Vector<T> parse(String s)", "signatureAfterChange": "   public Vector<T> parse(String s)", "diff": ["+   */", "+  public Vector<T> parse(String s) {  ", "+    int startFirstElement = header.length();", "+    int startFooter = s.length() - footer.length(); ", "+    if (startFooter < startFirstElement || ", "+        !s.startsWith(header) || ", "+        !s.endsWith(footer)) {", "+      throw new OptionParseException(name, s, ", "+                                     \"Value must start with \"+header+\" and end \"+", "+                                     \"with \"+footer+\" to be a valid vector.\");", "+    s = s.substring(startFirstElement, startFooter);", "+    String d = String.valueOf(delim);", "+    StringTokenizer st = new StringTokenizer(s,d,true);", "+    Vector<T> res = new Vector<T>();", "+    boolean sawDelim = st.hasMoreTokens();", "-     */", "-    public Vector<T> parse(String s) {  ", "-        int startFirstElement = header.length();", "-        int startFooter = s.length() - footer.length(); ", "- ", "-        if (startFooter < startFirstElement || ", "-            !s.startsWith(header) || ", "-            !s.endsWith(footer)) {", "-            throw new IllegalArgumentException(\"String argument does not match format \" +", "-                                               \"specified by this VectorOption and its \" +", "-                                               \"delimiters.\");", "-        }", "-        s = s.substring(startFirstElement, startFooter);", "-        String d = String.valueOf(delim);", "-        StringTokenizer st = new StringTokenizer(s,d,true);", "- ", "-        Vector<T> res = new Vector<T>();", "-        boolean sawDelim = st.hasMoreTokens();", "-", "-        while(st.hasMoreTokens()) {", "-            String token = st.nextToken();", "-            boolean isDelim = token.equals(d);", "-     ", "-            if(!isDelim) {", "-                res.addElement(parser.parse(token));", "-            } else if(sawDelim) { // isDelim & sawDelim (two delims in a row)", "-                throw new IllegalArgumentException(\" String argument contains delimiter with no preceding list element.\");", "-            } ", "-            sawDelim = isDelim;", "-        }", "-        if(sawDelim) {", "-            throw new IllegalArgumentException(\"String argument ends with delimiter.\");", "-        }", "-        return res;", "+    while(st.hasMoreTokens()) {", "+      String token = st.nextToken();", "+      boolean isDelim = token.equals(d);", "+      ", "+      if(!isDelim) {", "+        res.addElement(parser.parse(token));", "+      } else if(sawDelim) { // isDelim & sawDelim (two delims in a row)", "+        throw new OptionParseException(name, s,", "+                                       \"Argument contains delimiter with no preceding list element.\");", "+      } ", "+      sawDelim = isDelim;", "+    if(sawDelim) {", "+      throw new OptionParseException(name, s,", "+                                     \"Value shouldn't end with a delimiter.\");", "+    }", "+    return res;", "+  }"]}], "num": 7310}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "976678370238b8067f93e8d0178dec48", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d58d0e992f45e86f429d4ec63fd1d88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 59, "signatureBeforeChange": "      public void testArrayAllocation()", "signatureAfterChange": "      public void testArrayAllocation() throws ExceptionReturnedException", "diff": ["-  public void testArrayAllocation() {", "+  ", "+  public void testArrayAllocation() throws ExceptionReturnedException {", "+    String text = \"new int[new Integer(5)];\";", "+    String sizeExpected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 5 5 int)]))\";", "+    ArrayAllocation exp = (ArrayAllocation) _parseCode(text).get(0);", "+    Class type = exp.acceptVisitor(_typeChecker);", "+    String actual = exp.getSizes().get(0).toString();", "+    assertEquals(\"The size should have been unboxed.\", sizeExpected, actual);", "+    _interpreter.interpret(text);", "+ ", "+    text = \"new int[new Long(0)];\";", "+    exp = (ArrayAllocation) _parseCode(text).get(0);", "+    try {", "+      type = exp.acceptVisitor(_typeChecker);", "+      fail(\"Should have thrown an exception.\");", "+    }", "+    catch (ExecutionError e) {", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d8b52ca9e4bd65a6adc5416ff81c8e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 60, "signatureBeforeChange": "      public void testArrayAccess()", "signatureAfterChange": "      public void testArrayAccess() throws ExceptionReturnedException", "diff": ["-  public void testArrayAccess() {", "+  ", "+  public void testArrayAccess() throws ExceptionReturnedException {", "+    String text = \"I[new Integer(0)];\";", "+    String idxExpected = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 0 0 int)]))\";", "+    ArrayAccess exp = (ArrayAccess)_parseCode(text).get(0);", "+    Class type = exp.acceptVisitor(_typeChecker);", "+    String actual = exp.getCellNumber().toString();", "+    assertEquals(\"The index should have been unboxed.\", idxExpected, actual);", "+    _interpreter.interpret(text);", "+ ", "+    text = \"I[new Long(0)];\";", "+    exp = (ArrayAccess)_parseCode(text).get(0);", "+    try {", "+      type = exp.acceptVisitor(_typeChecker);", "+      fail(\"Should have thrown an exception.\");", "+    }", "+    catch (ExecutionError e) {", "+    }"]}], "num": 145}
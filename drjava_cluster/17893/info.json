{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "284e1c9b2375382218762ba91fd5bfaf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d15f92f630821ef03008c1b0a25da06a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "5773100ff7952edc8eb0f89e80206dce37ad4cad", "commitAfterChange": "3f0c0f16eb25bfdbc97c69501ad410c3633d0a1b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static Process runJVMPropagateClassPath(String mainClass, String[] classParams, String[] jvmParams, File workDir)     throws IOException", "signatureAfterChange": "   public static Process runJVMPropagateClassPath(String mainClass, String[] classParams, String[] jvmParams, File workDir)     throws IOException", "diff": ["-    String cp = System.getProperty(\"java.class.path\");", "-    return runJVM(mainClass, classParams, cp, jvmParams, workDir);", "+    Iterable<File> cp = IOUtil.parsePath(System.getProperty(\"java.class.path\"));", "+    cp = IOUtil.getAbsoluteFiles(cp);", "+    return runJVM(mainClass, classParams, IOUtil.pathToString(cp), jvmParams, workDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe81659d25558c266f393adb7bce22c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtilTest.java", "commitBeforeChange": "14999011605e2c3a05dc56c0f62a941e8b525311", "commitAfterChange": "9ac999ce828a3f9b8d41d5a1d9e3b21904fde907", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "    private void checkProcessOutput(Process p, String classPath, String workingDir, Iterable<String> args)      throws IOException", "signatureAfterChange": "    private void checkProcessOutput(Process p, String classPath, String workingDir, Iterable<String> args)      throws IOException", "diff": ["-      assertTrue(TextUtil.contains(in.readLine(), classPath));", "+      Iterable<File> expectedPath = IOUtil.parsePath(classPath);", "+      Iterable<File> actualPath = IOUtil.parsePath(in.readLine());", "+      assertTrue(IterUtil.containsAll(actualPath, expectedPath));"]}], "num": 17893}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c87e5802092c5e9d4ea254f742e30a83", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33739bb7befbffeb2e360bdf100417cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "43b808b9e05f3378c0faae83fe4225562adc4c6e", "commitAfterChange": "723910d837b2fcdd9f4127559df4832f71fb62e8", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "     public void runMain()       throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain()       throws ClassNameNotFoundException, IOException", "diff": ["-        this.startCompile();", "+        // compile only if class file out of sync", "+        if (!checkIfClassFileInSync()) {", "+          startCompile();", "+        }", "-          ", "-          // Then clear the current interaction and replace it with a \"java X\" line.", "-          InteractionsDocument iDoc = _interactionsModel.getDocument();", "+        }", "+        // Then clear the current interaction and replace it with a \"java X\" line.", "+        InteractionsDocument iDoc = _interactionsModel.getDocument();", "+//        if (iDoc.inProgress()) {", "+//          addListener(_notifyListener);", "+//          _shouldRun = true;", "+//          synchronized(_notifyListener) {", "+//            try {", "+//              _notifyListener.wait();", "+//            }", "+//            catch(InterruptedException ie) {", "+//            }", "+//          }", "+//          removeListener(_notifyListener);", "+//          if (!_shouldRun) {", "+//            // The interactions pane was reset during another interaction.", "+//            //  Don't run the main method.", "+//            return;", "+//          }", "+//        }", "+        synchronized (_interpreterControl) {", "-          ", "+        ", "-          ", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8e88992625914164a475ee4fd646de6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public void commentLines(int selStart, int selEnd)", "signatureAfterChange": "   public void commentLines(int selStart, int selEnd)", "diff": ["-    try {", "-        Position oldCurrentPosition = createPosition(_currentLocation);", "-        _commentLine();", "-        //int caretPos = getCaretPosition();", "-        //_doc().setCurrentLocation(caretPos);", "-        setCurrentLocation(oldCurrentPosition.getOffset());", "+        writeLock();", "+        try {", "+          ", "+          synchronized (_reduced) {", "+            Position oldCurrentPosition = createPosition(_currentLocation);", "+            _commentLine();", "+            //int caretPos = getCaretPosition();", "+            //_doc().setCurrentLocation(caretPos);", "+          }", "+        }", "+        catch (BadLocationException e) { throw new UnexpectedException(e); }", "+        finally { writeUnlock(); }", "-      else {", "-        _commentBlock(selStart, selEnd);", "-      }", "+      else _commentBlock(selStart, selEnd);", "+        ", "-    }", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 31190}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86b1e8f0ea1d074770f451dd3a6bfb19", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f8541e7b118fbf61a1d39f43de876e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void resumeThread(ThreadReference thread)", "signatureAfterChange": "      private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException", "diff": ["-  private void resumeThread(ThreadReference thread){", "+  private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException{", "+    ", "+    if( printMessages )  System.out.println(\"Getting suspendCount = \" + suspendCount);", "+", "-    currThreadResumed();", "+    if( shouldCopyBack ){", "+      _doCopyBack(); /* copy variables back into the thread */", "+    }", "+    try{", "+      currThreadResumed();", "+    }", "+    catch(DebugException e){", "+      throw new UnexpectedException(e);", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79f3c4195c16fbfaccf6be947112c74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   protected synchronized void _resumeHelper(boolean fromStep)     throws DebugException", "signatureAfterChange": "   private void _resumeHelper(boolean fromStep) throws DebugException", "diff": ["-  protected synchronized void _resumeHelper(boolean fromStep)", "-    throws DebugException", "-  {", "+  private void _resumeHelper(boolean fromStep) throws DebugException {", "-      if (printMessages) {", "-        printStream.println(\"In resumeThread()\");", "-      }", "+      if (printMessages) printStream.println(\"In resumeThread()\");", "-    catch (NoSuchElementException e) {", "-      throw new DebugException(\"No thread to resume.\");", "-    }", "+    catch (NoSuchElementException e) { throw new DebugException(\"No thread to resume.\"); }"]}], "num": 336}
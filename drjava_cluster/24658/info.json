{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "119aadc5aaecb2a30753c03abe6a5d56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071e6238179947e3d893ee443e9e2765", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "    public Object visit(StaticMethodCall node)", "signatureAfterChange": "    public Object visit(StaticMethodCall node)", "diff": ["-    return super.visit(node);", "+    Method m = (Method) node.getProperty(NodeProperties.METHOD);", "+", "+    // DynamicJava doesn't check that the method is really static!", "+    if (! Modifier.isStatic(m.getModifiers())) {", "+      StringBuffer buf = new StringBuffer();", "+      buf.append(m.getDeclaringClass());", "+      buf.append(\".\");", "+      buf.append(m.getName());", "+      buf.append(\"(\");", "+      ", "+      boolean first = true;", "+      Class[] params = m.getParameterTypes();", "+      for (int i = 0; i < params.length; i++) {", "+        if (first) {", "+          first = false;", "+        }", "+        else {", "+          buf.append(\", \");", "+        }", "+", "+        buf.append(params[i].getName());", "+      }", "+      ", "+      buf.append(\")\");", "+      buf.append(\" is not a static method.\");", "+", "+      throw new InteractionsException(buf.toString());", "+    }", "+", "+    Object ret = super.visit(node);", "+    ", "+    // workaround to not return null for void returns", "+    if (m.getReturnType().equals(Void.TYPE)) {", "+      return JavaInterpreter.NO_RESULT;", "+    }", "+    else {", "+      return ret;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2c2ef64f91e79c794fec7977372234", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-    // For testing only", "-    doc.setTab(\"---\", doc.getCurrentLocation());", "+    int here = doc.getCurrentLocation();", "+    int startLine = doc.getLineStartPos(here);", "+    doc.setCurrentLocation(startLine);", "+    IndentInfo ii = doc.getReduced().getIndentInformation();", "+    ", "+    // Check preconditions", "+    if ((ii.braceType.equals(\"\")) ||", "+        (ii.distToBrace < 0)) {", "+      // Can't find brace, so do nothing.", "+      return;", "+    }", "+", "+    // Find length to brace", "+    int bracePos = startLine - ii.distToBrace;", "+    int braceNewLine = 0;", "+    if (ii.distToNewline >=0) {", "+      braceNewLine = startLine - ii.distToNewline;", "+    }", "+    int braceLen = bracePos - braceNewLine;", "+", "+    // Create tab string", "+    StringBuffer tab = new StringBuffer(_suffix.length() + braceLen);", "+    for (int i=0; i < braceLen; i++) {", "+      tab.append(\" \");", "+    }", "+    tab.append(_suffix);", "+    ", "+    if (here >= doc.getLength()) {", "+      here = doc.getLength() - 1;", "+    }", "+    doc.setCurrentLocation(here);", "+    ", "+    doc.setTab(tab.toString(), here);"]}], "num": 24658}
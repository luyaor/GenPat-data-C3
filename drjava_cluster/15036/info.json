{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c46412357ad9c836b64dcfd0aee32dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8d186965c9695266a2e9499f77e999", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "commitAfterChange": "691bffe1c74bde71a4cf5e7ed44b9a42c3c86fd0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private static Class visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "   private static Class visitNumericExpression(BinaryExpression node, String s)", "diff": ["-    Class c  = null;", "-    ", "-    if (lc == null           || rc == null          ||", "-        lc == boolean.class  || rc == boolean.class ||", "-        !lc.isPrimitive()    || !rc.isPrimitive()   ||", "-        lc == void.class     || rc == void.class) {", "+", "+    if (lc == null          || rc == null          ||", "+        lc == boolean.class || rc == boolean.class ||", "+        !lc.isPrimitive()   || !rc.isPrimitive()   ||", "+        lc == void.class    || rc == void.class)", "+    {", "-    } else if (lc == double.class || rc == double.class) {", "-      node.setProperty(NodeProperties.TYPE, c = double.class);", "-    } else if (lc == float.class || rc == float.class) {", "-      node.setProperty(NodeProperties.TYPE, c = float.class);", "-    } else if (lc == long.class || rc == long.class) {", "-      node.setProperty(NodeProperties.TYPE, c = long.class);", "-    } else {", "-      node.setProperty(NodeProperties.TYPE, c = int.class);", "-    return c;", "+    else if (lc == double.class || rc == double.class) {", "+      node.setProperty(NodeProperties.TYPE, double.class);", "+      return double.class;", "+    }", "+    else if (lc == float.class || rc == float.class) {", "+      node.setProperty(NodeProperties.TYPE, float.class);", "+      return float.class;", "+    }", "+    else if (lc == long.class || rc == long.class) {", "+      node.setProperty(NodeProperties.TYPE, long.class);", "+      return long.class;", "+    }", "+    else {", "+      node.setProperty(NodeProperties.TYPE, int.class);", "+      return int.class;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12dde43802151469d77a54aeb546ecd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private static Class visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "   private static Class visitNumericExpression(BinaryExpression node, String s)", "diff": ["+    Expression leftExp = node.getLeftExpression();", "+    Expression rightExp = node.getRightExpression();", "+    ", "-    Class lc = NodeProperties.getType(node.getLeftExpression());", "-    Class rc = NodeProperties.getType(node.getRightExpression());", "+    Class lc = NodeProperties.getType(leftExp);", "+    Class rc = NodeProperties.getType(rightExp);", "+    // Check to make sure the left and right types are valid", "-        !lc.isPrimitive()    || !rc.isPrimitive()   ||", "+        !(lc.isPrimitive()   || _isBoxingType(lc))  || ", "+        !(rc.isPrimitive()   || _isBoxingType(rc))  ||", "-    } else if (lc == double.class || rc == double.class) {", "-      node.setProperty(NodeProperties.TYPE, c = double.class);", "-    } else if (lc == float.class || rc == float.class) {", "-      node.setProperty(NodeProperties.TYPE, c = float.class);", "-    } else if (lc == long.class || rc == long.class) {", "-      node.setProperty(NodeProperties.TYPE, c = long.class);", "-    } else {", "-      node.setProperty(NodeProperties.TYPE, c = int.class);", "+    } ", "+", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(lc)) {", "+      node.setLeftExpression(_unbox(leftExp, lc));", "+    if (_isBoxingType(rc)) {", "+      node.setRightExpression(_unbox(rightExp, rc));", "+    }", "+    ", "+    // Set the type of the node to be the binary promotion", "+    if (lc == double.class || lc == Double.class || ", "+        rc == double.class || rc == Double.class) {", "+      c = double.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } ", "+    else if (lc == float.class || lc == Float.class ||", "+             rc == float.class || rc == Float.class) {", "+      c = float.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } ", "+    else if (lc == long.class || lc == Long.class ||", "+             rc == long.class || rc == Long.class) {", "+      c = long.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    } ", "+    else {", "+      c = int.class;", "+      node.setProperty(NodeProperties.TYPE, c);", "+    }", "+    ", "+    // Return the type of the node"]}], "num": 15036}
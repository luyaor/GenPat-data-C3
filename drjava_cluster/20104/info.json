{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "411f4087a108f312684f159057b03f76", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78faccfbd08c3df3d5c0e3070c3fac2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "015f584d4fd84a66059ace3c33a4092f1db5bd4c", "commitAfterChange": "d76a1ef24ee4d923e6ea3f06169ea8196ce68877", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 160, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["-                                                      builder.getSourceFiles(), builder.getAuxiliaryFiles(),", "+                                                      builder.getSourceFiles(), builder.getAuxiliaryFiles(), ", "+                                                      builder.getExcludedFiles(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f04b8c0d2554774279f445b6d64a30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public abstract ConstructorInvocation lookupConstructor(Type t, Iterable<? extends Type> typeArgs,                                                            Iterable<? extends Expression> args)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException;", "signatureAfterChange": "   public abstract ConstructorInvocation lookupConstructor(Type t, Iterable<? extends Type> typeArgs,                                                            Iterable<? extends Expression> args,                                                           Option<Type> expected)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException;", "diff": ["-                                                          Iterable<? extends Expression> args)", "+                                                          Iterable<? extends Expression> args,", "+                                                          Option<Type> expected)"]}], "num": 20104}
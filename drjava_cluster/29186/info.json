{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0a24a0394c9c67a11afaf72ef1370d1", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4a4499bc1f26da55f4a2cc198dbb19e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testCancelOpenFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCancelOpenFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestIOListener() {", "+    final TestListener listener = new TestIOListener() {", "-    try {", "-      //OpenDefinitionsDocument newDoc =", "-      _model.openFile(new CancelingSelector());", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // we expect this to be thrown", "-    }", "-    finally {", "-      assertNumOpenDocs(2);", "-      listener.assertOpenCount(0);", "-      listener.assertCloseCount(0);", "-      ", "-      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-      doc = docs.get(1);", "-      assertModified(true, doc);", "-      assertContents(FOO_TEXT, doc);", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          //OpenDefinitionsDocument newDoc =", "+          _model.openFile(new CancelingSelector());", "+        }", "+        catch(AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch(OperationCanceledException oce) {", "+          // we expect this to be thrown", "+        }", "+        catch(Exception e) {  // should never happen", "+          throw new UnexpectedException(e);  ", "+        }", "+        finally {", "+          assertNumOpenDocs(2);", "+          listener.assertOpenCount(0);", "+          listener.assertCloseCount(0);", "+          ", "+          List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+          OpenDefinitionsDocument doc = docs.get(1);", "+          assertModified(true, doc);", "+          try { assertContents(FOO_TEXT, doc); }", "+          catch(BadLocationException e) { ", "+            fail(\"BadLocation in assertContents test. Traceback: \" + e);", "+          }", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d7426a0e3b19f9a78d60fd29d8e191", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testCancelOpenMultipleFiles() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCancelOpenMultipleFiles() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestIOListener() {", "+    final TestListener listener = new TestIOListener() {", "-    try {", "-      //OpenDefinitionsDocument newDoc =", "-      _model.openFiles(new CancelingSelector());", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // we expect this to be thrown", "-    }", "-    finally {", "-      assertNumOpenDocs(3);", "-      listener.assertOpenCount(0);", "-      listener.assertCloseCount(0);", "-      ", "-      List<OpenDefinitionsDocument> docs = _model.getSortedOpenDefinitionsDocuments();", "-      doc1 = docs.get(1);", "-      assertModified(true, doc1);", "-      assertContents(FOO_TEXT, doc1);", "-      ", "-      doc2 = docs.get(2);", "-      assertModified(true, doc2);", "-      assertContents(BAR_TEXT, doc2);", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          try {", "+            //OpenDefinitionsDocument newDoc =", "+            _model.openFiles(new CancelingSelector());", "+          }", "+          catch (AlreadyOpenException aoe) {", "+            // Should not be open", "+            fail(\"File was already open!\");", "+          }", "+          catch (OperationCanceledException oce) {", "+            // we expect this to be thrown", "+          }", "+          finally {", "+            assertNumOpenDocs(3);", "+            listener.assertOpenCount(0);", "+            listener.assertCloseCount(0);", "+            ", "+            List<OpenDefinitionsDocument> docs = _model.getSortedOpenDefinitionsDocuments();", "+            OpenDefinitionsDocument newDoc1 = docs.get(1);", "+            assertModified(true, newDoc1);", "+            assertContents(FOO_TEXT, newDoc1);", "+            ", "+            OpenDefinitionsDocument newDoc2 = docs.get(2);", "+            assertModified(true, newDoc2);", "+            assertContents(BAR_TEXT, newDoc2);", "+          }", "+        }", "+        catch (Exception e) {", "+          // should never happen", "+          fail(\"Exception thrown in testCancelOpenMultipleFiles.  Traceback: \\n\" + e);", "+        }", "+      }", "+    });"]}], "num": 29186}
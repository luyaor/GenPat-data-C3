{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef84d00e6886ea008bf0aadba92660c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000a1322994e9e1d2f46e40adc179baf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "cdddd415c8ee9888478b5a253ffbb086fce1ed57", "commitAfterChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "signatureAfterChange": "   public void setBreakpoint(Breakpoint breakpoint)     throws DebugException", "diff": ["-  public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+  public void setBreakpoint(Breakpoint breakpoint)", "-    Breakpoint breakpoint = new Breakpoint (doc, lineNumber, _vm);", "-", "-    System.out.println(breakpoint);", "+    System.out.println(\"setting: \" + breakpoint);", "-    doc.addBreakpoint(breakpoint);", "+    breakpoint.getDocument().addBreakpoint(breakpoint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "542b5bd2784f5a50f309a0ac0a2d2dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractDJPane.java", "commitBeforeChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "commitAfterChange": "fe008ef5062ac4e4b569352517b1df11133d4fdd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["-     *  caretPostion and pass it as the cursor location for the insertLine operation (relevant for single line insert).", "+     *  caretPostion and set the current location to that value before calling the insertLine operation.  The logic", "+     *  for a single line insert is very dependent on the current location.", "-    DJDocument doc = getDJDocument();", "-    int loc = getCaretPosition();", "+    getDJDocument().setCurrentLocation(getCaretPosition());", "-    //  Prompt if more than 10000 characters to be indented", "-    boolean doIndent = shouldIndent(selStart,selEnd);", "-    ", "-    // Do the indent", "-    if (doIndent) { indentLines(selStart, selEnd, reason, pm, loc); }", "+    //  Prompt if more than 10000 characters to be indented, then do the indent", "+    if (shouldIndent(selStart,selEnd)) { indentLines(selStart, selEnd, reason, pm); }"]}], "num": 9421}
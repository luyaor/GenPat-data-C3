{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c60bd858025acbef65b896dbdb47ee2a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ad14c6cbc4eb8a464686e95a20750ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["+    assert isWriteLocked();", "+    ", "-    acquireWriteLock();", "+//    acquireWriteLock();", "-        Position oldCurrentPosition = createUnwrappedPosition(_currentLocation);", "-        int lineStart = getLineStartPos(selStart);", "-        if (lineStart <  0) lineStart = 0;", "-        setCurrentLocation(lineStart);", "+        Position oldPosition = createUnwrappedPosition(_currentLocation);", "+        int lineStart = _getLineStartPos(selStart);", "+        if (lineStart <  0) lineStart = 0;  // selStart on first line", "+        _setCurrentLocation(lineStart);", "-          _setCurrentLocation(oldCurrentPosition.getOffset());", "-          if (onlyWhiteSpaceBeforeCurrent()) {", "-            int space = getWhiteSpace();", "-            _reduced.move(space);", "-            _currentLocation = _currentLocation + space;", "-          }", "+          _setCurrentLocation(oldPosition.getOffset()); // moves currentLocation back to original offset on line", "+          if (onlyWhiteSpaceBeforeCurrent()) _move(_getWhiteSpace());  // passes any additional spaces before firstNonWS", "-    catch (Throwable t) { throw new UnexpectedException(t); }", "-    finally { releaseWriteLock(); } ", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+//    finally { releaseWriteLock(); } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489fec3147500a1adb73a660809ddcb1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "commitAfterChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "    private void _updateWatches()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["-    //DrJava.consoleOut().println(\"stack frame: \" + frames);", "-    //DrJava.consoleOut().println(\"all fields: \" + rt.allFields());", "-        //DrJava.consoleOut().println(\"No line number information for this method\");", "-        // ReferenceType's scope, keep further out in scope.", "+        // ReferenceType's scope, keep going further out in scope.", "+          if (rt == null) {", "+            currWatch.setValue(null);", "+            currWatch.setType(null);", "+            break;", "+          }", "-            // check if the frame represents a native or static method and", "+            // Check if the frame represents a native or static method and", "-            // This is a hack, remove it to improve performance, it will", "-            // work sometimes, but not always.", "-            //DrJava.consoleOut().println(\"checking frames *\");", "+            // This is a hack, remove it to slightly improve performance but", "+            // at the loss of ever being able to watch outer instance", "+            // fields. If unremoved, this will work sometimes, but not always.", "-              //DrJava.consoleOut().println(\"outerFrame: \" + outerFrame);"]}], "num": 7879}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbc772ce5fd658d4a0bad763b0779289", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4847969082b4378adfeb5eabcfa73d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "         public void testForIfThenStatement()", "signatureAfterChange": "         public void testForIfThenStatement()", "diff": ["-      Expression te = new LessThanExpression(SourceInfo.NO_INFO, ", "-                                             new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                     new Word(SourceInfo.NO_INFO, \"j\")),", "-                                             new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NONE, ", "+                                             new SimpleNameReference(SourceInfo.NONE, ", "+                                                                     new Word(SourceInfo.NONE, \"j\")),", "+                                             new IntegerLiteral(SourceInfo.NONE, 5));", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      IfThenStatement ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                       new Word(SourceInfo.NONE, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 10)));", "+      IfThenStatement ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "-        new FormalParameter(SourceInfo.NO_INFO, ", "-                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, ", "-                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { ", "-        new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+        new FormalParameter(SourceInfo.NONE, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NONE, intt, ", "+                                                                new Word(SourceInfo.NONE, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] { ", "+        new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, ", "-                                  new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                          new Word(SourceInfo.NO_INFO, \"j\")),", "-                                  new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      te = new LessThanExpression(SourceInfo.NONE, ", "+                                  new SimpleNameReference(SourceInfo.NONE, ", "+                                                          new Word(SourceInfo.NONE, \"j\")),", "+                                  new IntegerLiteral(SourceInfo.NONE, 5));", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                       new Word(SourceInfo.NONE, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 10)));", "-        new ValueReturnStatement(SourceInfo.NO_INFO, ", "-                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+        new ValueReturnStatement(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      ts = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      vd1 = new VariableData(\"j\", _packageMav, SymbolData.INT_TYPE, true, null);", "+      vd1 = new VariableData(\"b\", _packageMav, SymbolData.BOOLEAN_TYPE, true, null);", "-      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+      te = new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"b\")),", "+        new BooleanLiteral(SourceInfo.NONE, true));", "+      ts = new ExpressionStatement(SourceInfo.NONE, ", "+                                   new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                                  new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                          new Word(SourceInfo.NONE, \"i\")), ", "+                                                                  new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      assertEquals(\"Error message should be correct\", \"You cannot use an assignment expression in the conditional expression of an if-then statement at any language level\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"You cannot use an assignment expression in the conditional \" +", "+                   \"expression of an if-then statement at any language level.  Perhaps you meant to compare two \" +", "+                   \"values with '=='\",", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d9e8d6c576469dc6ecf0a86263ed8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "               public void testForComplexNameReference()", "signatureAfterChange": "               public void testForComplexNameReference()", "diff": ["-        new ComplexNameReference(SourceInfo.NO_INFO, ", "-                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java\")), ", "-                                 new Word(SourceInfo.NO_INFO, \"lang\"));", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"java\")), ", "+                                 new Word(SourceInfo.NONE, \"lang\"));", "-      //if reference builds to a class in the symbol table, return that class", "+      // if reference builds to a class in the symbol table, return that class", "-        new ComplexNameReference(SourceInfo.NO_INFO, ref1, new Word(SourceInfo.NO_INFO, \"String\"));", "-      SymbolData string = new SymbolData(\"java.lang.String\");", "-      string.setPackage(\"java.lang\");", "-      string.setMav(_publicMav);", "-      string.setIsContinuation(false);", "-      symbolTable.put(\"java.lang.String\", string);", "+        new ComplexNameReference(SourceInfo.NONE, ref1, new Word(SourceInfo.NONE, \"String\"));", "+      assertTrue(\"symbol table already contains String\", symbolTable.containsKey(\"java.lang.String\"));", "+      SymbolData string = symbolTable.get(\"java.lang.String\");          ", "+//      SymbolData string = new SymbolData(\"java.lang.String\");", "+//      string.setPackage(\"java.lang\");", "+//      string.setMav(_publicMav);", "+//      string.setIsContinuation(false);", "+//      symbolTable.put(\"java.lang.String\", string);", "-      ComplexNameReference varRef1 = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"myVar\"));", "+      ComplexNameReference varRef1 = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"myVar\"));", "-      //static var from static context", "+      // static var from static context", "-      //static uninitialized var from static context", "+      // Static uninitialized var from static context", "-      assertEquals(\"Error message should be correct\", \"You cannot use myVar here, because it may not have been given a value\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use myVar here, because it may not have been given a value\", ", "+                   errors.getLast().getFirst());", "-      //non-static var--this is a static context", "+      // Non-static var--this is a static context", "-      assertEquals(\"Error message should be correct\", \"Non-static variable myVar cannot be accessed from the static context java.lang.String.  Perhaps you meant to instantiate an instance of java.lang.String\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Non-static variable myVar cannot be accessed from the static context java.lang.String.  \"", "+                     + \"Perhaps you meant to instantiate an instance of java.lang.String\", ", "+                   errors.getLast().getFirst());", "-      ", "-      //non-static context, okay to reference non-static var", "-      VariableData stringVar = new VariableData(\"s\", _publicMav, string, true, _etc._data);", "+      // Non-static context, okay to reference non-static var", "+      VariableData stringVar = new VariableData(\"s\", _publicMav, string, true, _etc._data);  ", "-      ComplexNameReference varRef2 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"myVar\"));", "+      ComplexNameReference varRef2 = ", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), ", "+                                 new Word(SourceInfo.NONE, \"myVar\"));", "-      //if it is a variable of the super class, you should still be able to see it.  Check this case.", "+      // Non-static context, okay to reference private non-static var", "+      VariableData privateStringVar = new VariableData(\"ps\", _privateMav, string, true, _etc._data);", "+      _etc._vars.add(privateStringVar);", "+      ComplexNameReference varRef25 = ", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"ps\")), ", "+                                 new Word(SourceInfo.NONE, \"myVar\"));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), varRef25.visit(_etc));", "+      assertEquals(\"Should still just be 2 errors\", 2, errors.size());", "+      ", "+      // if it is a variable of the super class, you should still be able to see it.  Check this case.", "-      //here's a complex multiple variable reference case:", "-      VariableData vd1 = new VariableData(\"Mojo\", _publicMav, SymbolData.INT_TYPE, true, _sd1);", "-      VariableData vd2 = new VariableData(\"Santa's Little Helper\", _publicMav, _sd1, true, _sd2);", "-      VariableData vd3 = new VariableData(\"Snowball1\", _publicMav, _sd2, true, _sd3);", "+      // a complex multiple variable reference case:", "+      VariableData vd1 = new VariableData(\"Mojo\", _publicMav, SymbolData.INT_TYPE, true, _sd1);   // was _publicMav", "+      VariableData vd2 = new VariableData(\"Santa's Little Helper\", _publicMav, _sd1, true, _sd2); // was _publicMav", "+      VariableData vd3 = new VariableData(\"Snowball1\", _publicMav, _sd2, true, _sd3);             // was _publicMav", "-      ComplexNameReference varRef3 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Snowball1\")),", "-                                                              new Word(SourceInfo.NO_INFO, \"Santa's Little Helper\"));", "-      ComplexNameReference varRef4 = new ComplexNameReference(SourceInfo.NO_INFO, varRef3, new Word(SourceInfo.NO_INFO, \"Mojo\"));", "+      ComplexNameReference varRef3 = ", "+        new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, ", "+                                                                                                    \"Snowball1\")),", "+                                 new Word(SourceInfo.NONE, \"Santa's Little Helper\"));", "+      ComplexNameReference varRef4 = ", "+        new ComplexNameReference(SourceInfo.NONE, varRef3, new Word(SourceInfo.NONE, \"Mojo\"));", "-      ", "-      ", "-      ", "-      //what if what we have is an inner class?", "+", "+      // What if what we have is an inner class?", "-      ComplexNameReference innerRef0 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef0 = ", "+        new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, ", "+                                                                          new Word(SourceInfo.NONE, \"s\")),", "+                                 new Word(SourceInfo.NONE, \"Inner\"));", "-      assertEquals(\"Error message should be correct\", \"The class or interface java.lang.String.Inner is package protected because there is no access specifier and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface java.lang.String.Inner is package protected because there is no access \"", "+                     + \"specifier and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      ComplexNameReference innerRef1 = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef1 = ", "+        new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"Inner\"));", "-      assertEquals(\"Error message should be correct\", \"Non-static inner class java.lang.String.Inner cannot be accessed from this context.  Perhaps you meant to instantiate it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Non-static inner class java.lang.String.Inner cannot be accessed from this context.  \"", "+                     + \"Perhaps you meant to instantiate it\", errors.getLast().getFirst());", "-      ComplexNameReference innerRef2 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef2 = ", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), ", "+                                 new Word(SourceInfo.NONE, \"Inner\"));", "-      assertEquals(\"Error message should be correct\", \"Non-static inner class java.lang.String.Inner cannot be accessed from this context.  Perhaps you meant to instantiate it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Non-static inner class java.lang.String.Inner cannot be accessed from this context.  \"", "+                     + \"Perhaps you meant to instantiate it\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"You cannot reference the static inner class java.lang.String.Inner from an instance of java.lang.String.  Perhaps you meant to say java.lang.String.Inner\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference the static inner class java.lang.String.Inner from an instance of \"", "+                     + \"java.lang.String.  Perhaps you meant to say java.lang.String.Inner\", ", "+                   errors.getLast().getFirst());", "-      ComplexNameReference noSense = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"nonsense\"));", "+      ComplexNameReference noSense = ", "+        new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"nonsense\"));", "-      assertEquals(\"Error message should be correct\", \"Could not resolve nonsense from the context of java.lang.String\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"Could not resolve nonsense from the context of java.lang.String\", ", "+                   errors.getLast().getFirst());", "-      ComplexNameReference ambigRef = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"cebu\")), new Word(SourceInfo.NO_INFO, \"ambigThing\"));", "+      ComplexNameReference ambigRef = ", "+        new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, ", "+                                                                          new Word(SourceInfo.NONE, \"cebu\")), ", "+                                 new Word(SourceInfo.NONE, \"ambigThing\"));", "-      assertEquals(\"Error message should be correct\", \"Ambiguous reference to class or interface ambigThing\", errors.getLast().getFirst());    ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Ambiguous reference to class or interface ambigThing\", ", "+                   errors.getLast().getFirst());    ", "-      ", "-      //if lhs is not visibile, should throw error", "-      //if inner is not visible, throw error", "+      //if lhs is not visible or inner is not visible, should throw error", "-      assertEquals(\"Error message should be correct\", \"The class or interface java.lang.String is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface java.lang.String in java.lang.String is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}], "num": 24490}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15fb2a7f5ae6580ed6530d5b57bc1656", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e755a2b7eb57bce0d793d9e56272dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   @Override public TypeContext visit(SwitchStatement node)", "signatureAfterChange": "   @Override public TypeContext visit(SwitchStatement node)", "diff": ["-        if (!hasValue(bk) || getValue(bk) == null) {", "-          throw new ExecutionError(\"invalid.constant\", bk);", "+        Expression exp = bk.getExpression();", "+        if (!hasValue(exp) || getValue(exp) == null) {", "+          throw new ExecutionError(\"invalid.constant\", exp);", "-        if (!ts.isAssignable(t, getType(bk), getValue(bk))) {", "-          setErrorStrings(node, ts.userRepresentation(getType(bk)));", "-          throw new ExecutionError(\"switch.label.type\", bk);", "+        if (!ts.isAssignable(t, getType(exp), getValue(exp))) {", "+          setErrorStrings(node, ts.userRepresentation(getType(exp)));", "+          throw new ExecutionError(\"switch.label.type\", exp);", "-        if (values.contains(getValue(bk))) { ", "+        if (values.contains(getValue(exp))) { ", "-        values.add(getValue(bk));", "+        values.add(getValue(exp));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dc24e68301742b51c4f60b606a3447e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "b578b7b4c7a4a91c29761e9d3bf28b378645bfda", "commitAfterChange": "7d20b14faca1d500f599ed54f40d60f42cf8097e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIRImpl pfir)", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIRImpl pfir, FileListVisitor flv)", "diff": ["-  private void evaluateExpression(SEList e, ProjectFileIRImpl pfir) {", "+  private void evaluateExpression(SEList e, ProjectFileIRImpl pfir, FileListVisitor flv) {", "-    String name = exp.accept(_nameVisitor);", "+    String name = exp.accept(NameVisitor.ONLY);", "-      List<DocFile> fList = exp.getRest().accept(_fileListVisitor);", "+      List<DocFile> fList = exp.getRest().accept(flv);", "-      List<DocFile> fList = exp.getRest().accept(_fileListVisitor);", "+      List<DocFile> fList = exp.getRest().accept(flv);", "-      List<DocFile> fList = exp.getRest().accept(_fileListVisitor);", "+      List<DocFile> fList = exp.getRest().accept(new FileListVisitor(null));", "-      List<DocFile> fList = exp.getRest().accept(_fileListVisitor);", "+      List<DocFile> fList = exp.getRest().accept(flv);", "-      List<DocFile> fList = exp.getRest().accept(_fileListVisitor);", "+      List<DocFile> fList = exp.getRest().accept(flv);", "-      List<DocFile> fList = exp.getRest().accept(_fileListVisitor);", "+      List<DocFile> fList = exp.getRest().accept(flv);"]}], "num": 13662}
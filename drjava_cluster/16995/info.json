{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39015c487c7b331439261e18f5cd3f71", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdc7fcf2eb9949f6ca5399f12477f249", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 348, "signatureBeforeChange": "              public LookupMethod(final boolean includePrivate)", "signatureAfterChange": "     public InstantiatedMethod(DJMethod m, Iterable<VariableType> classTParams, Iterable<? extends Type> classTArgs)", "diff": ["+    private final Iterable<VariableType> _tparams;", "+    public InstantiatedMethod(DJMethod m, Iterable<VariableType> classTParams, Iterable<? extends Type> classTArgs) {", "+      super(m);", "+      Pair<Iterable<VariableType>, SubstitutionMap> p = instantiateTypeParameters(m, classTParams, classTArgs);", "+      _tparams = p.first();", "+      _sigma = p.second();", "+    }", "-      ", "-      public LookupMethod(final boolean includePrivate) {", "-        _matchMethod = new Predicate<DJMethod>() {", "-          public boolean contains(DJMethod m) {", "-            if (m.declaredName().equals(name)) {", "-              return includePrivate || !m.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd269f09d394677310b59828b439942a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 347, "methodNumberAfterChange": 357, "signatureBeforeChange": "       public Predicate<DJClass> value(final Boolean includePrivate)", "signatureAfterChange": "     public Object evaluate(Object outer, Iterable<Object> args, RuntimeBindings bindings, Options options)          throws EvaluatorException", "diff": ["+    public Access.Module accessModule() { return _delegate.accessModule(); }", "+    public Object evaluate(Object outer, Iterable<Object> args, RuntimeBindings bindings, Options options) ", "+        throws EvaluatorException {", "+      return _delegate.evaluate(outer, args, bindings, options); ", "+    }", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }"]}], "num": 16995}
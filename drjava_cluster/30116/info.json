{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "028a4fa8bc78b9992c8f4c3d32b196d5", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33fcbc4a8c977c12cec25bc7ea8c79d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DynamicJavaAdapter.java", "commitBeforeChange": "033aac7fee734ccfb2c6b4f19a0a8e7eeefbb09b", "commitAfterChange": "54b182f5505ddc2ea033f760c3fa41ccb41eb248", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ClassLoaderExtension(Interpreter i)", "signatureAfterChange": "     public ClassLoaderExtension(Interpreter i)", "diff": ["+", "+      // The protected variable classLoader contains the class loader to use", "+      // to find classes. When a new class path is added to the loader,", "+      // it adds on an auxilary classloader and chains the old classLoader", "+      // onto the end.", "+      // Here we initialize classLoader to be the system class loader.", "+      // This makes sure that we can find classes that are in the system's", "+      // class path, even though we don't fully delegate to the system", "+      // loader. (We just ask the system loader to get us the bytes of the", "+      // class, and then we call defineClass ourselves.)", "+      classLoader = ClassLoader.getSystemClassLoader();", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66e2b1c74c0c78a9ee4f847ab14f987", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "033aac7fee734ccfb2c6b4f19a0a8e7eeefbb09b", "commitAfterChange": "54b182f5505ddc2ea033f760c3fa41ccb41eb248", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ClassLoaderExtension(Interpreter i)", "signatureAfterChange": "     public ClassLoaderExtension(Interpreter i)", "diff": ["+", "+      // The protected variable classLoader contains the class loader to use", "+      // to find classes. When a new class path is added to the loader,", "+      // it adds on an auxilary classloader and chains the old classLoader", "+      // onto the end.", "+      // Here we initialize classLoader to be the system class loader.", "+      // This makes sure that we can find classes that are in the system's", "+      // class path, even though we don't fully delegate to the system", "+      // loader. (We just ask the system loader to get us the bytes of the", "+      // class, and then we call defineClass ourselves.)", "+      classLoader = ClassLoader.getSystemClassLoader();", "+      "]}], "num": 30116}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa1f001b5a5f5e2f40ff51c9ce1589ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66e41d53f2be73191a7cf000b611db3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public Object visit(InnerClassAllocation node)", "signatureAfterChange": "     public Node visit(InnerClassAllocation node)", "diff": ["-    public Object visit(InnerClassAllocation node) {", "+    public Node visit(InnerClassAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expression>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));", "-      LinkedList members = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getMembers().iterator();", "+      LinkedList<Node> members = new LinkedList<Node>(); // Add parameterization <Node>.", "+      Iterator<Node> it = node.getMembers().iterator();", "-        members.add((Node)((Node)it.next()).acceptVisitor(this));", "+        members.add(it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e08ec0254e3a911502714c8634ce9c95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public Object visit(ClassAllocation node)", "signatureAfterChange": "     public Node visit(ClassAllocation node)", "diff": ["-    public Object visit(ClassAllocation node) {", "+    public Node visit(ClassAllocation node) {", "-      LinkedList arguments = null; // Add parameterization <Expression>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Expression>.", "-        arguments = new LinkedList(); // Add parameterization <Expression>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));", "-      LinkedList members = new LinkedList(); // Add parameterization <Node>.", "-      Iterator it = node.getMembers().iterator();", "+      LinkedList<Node> members = new LinkedList<Node>(); // Add parameterization <Node>.", "+      Iterator<Node> it = node.getMembers().iterator();", "-        members.add((Node)((Node)it.next()).acceptVisitor(this));", "+        members.add(it.next().acceptVisitor(this));"]}], "num": 2931}
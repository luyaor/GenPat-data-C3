{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3da619b4e51ecb4f342151ab225a4f68", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92303c5041681aad58abfd69707bf11c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ArrayCloneMethod.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings,                           Options options) throws EvaluatorException", "signatureAfterChange": "      protected Method implementation() throws NoSuchMethodException", "diff": ["-  public DJMethod declaredSignature() { return this; }", "-  public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings, ", "-                         Options options) throws EvaluatorException {", "-    if (receiver == null) {", "-      throw new WrappedException(new EvaluatorException(new NullPointerException()));", "-    }", "-    try {", "-      Method clone = Object.class.getDeclaredMethod(\"clone\");", "-      try { clone.setAccessible(true); /* override protected access */ }", "-      catch (SecurityException e) { debug.log(e); /* ignore -- we can't relax accessibility */ }", "-      return clone.invoke(receiver, IterUtil.toArray(args, Object.class));", "-    }", "-    catch (NoSuchMethodException e) { throw new RuntimeException(e); }", "-    catch (InvocationTargetException e) { throw new EvaluatorException(e.getCause(), EXTRA_STACK); }", "-    catch (IllegalAccessException e) { throw new RuntimeException(e); }", "+  protected Method implementation() throws NoSuchMethodException {", "+    return Object.class.getDeclaredMethod(\"clone\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1290bf3800b6e3dbfa932a085a88cb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 267, "signatureBeforeChange": "     public I findSingleMethod(Type t) throws UnmatchedLookupException", "signatureAfterChange": "     public FunctionInvocationCandidate<DJMethod>         findSingleMethod(Type t, Iterable<? extends Type> targs, Iterable<? extends Expression> args,                          Option<Type> expected) throws UnmatchedLookupException", "diff": ["-    public I findSingleMethod(Type t) throws UnmatchedLookupException {", "+    public FunctionInvocationCandidate<DJMethod>", "+        findSingleMethod(Type t, Iterable<? extends Type> targs, Iterable<? extends Expression> args,", "+                         Option<Type> expected) throws UnmatchedLookupException {", "-      PredicateSet<MethodInvocationCandidate<I>> candidates = findAll(t);", "-      Iterable<MethodInvocationCandidate<I>> best = bestMatches(candidates);", "+      PredicateSet<DJMethod> candidates = findAll(t);", "+      Iterable<FunctionInvocationCandidate<DJMethod>> best = bestInvocations(candidates, targs, args, expected);", "-      if (matches != 1) { throw new UnmatchedLookupException(matches); }", "-      else { return IterUtil.first(best).invocation(); }", "+      if (matches == 0) { throw new UnmatchedFunctionLookupException(candidates); }", "+      else if (matches > 1) {", "+        Iterable<DJMethod> ms = IterUtil.map(best, new Lambda<FunctionInvocationCandidate<DJMethod>, DJMethod>() {", "+          public DJMethod value(FunctionInvocationCandidate<DJMethod> c) { return c.function(); }", "+        });", "+        throw new AmbiguousFunctionLookupException(ms);", "+      }", "+      else { return IterUtil.first(best); }"]}], "num": 9555}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdc9a19907a777d064359a0bb82dc6e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a2743bd1e09db8ac479f3a689a59799", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "bb37c635695368e8cc96440bd6b6d051918112f8", "commitAfterChange": "4ebd25942c79fb901c720903ad892355732a9230", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "diff": ["-        Type t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs);", "-        // TODO: Check that t is not a static member of enclosing", "+        ClassType t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs);", "+        checkAccessibility(t.ofClass(), node);", "+        if (t.ofClass().isStatic()) {", "+          setErrorStrings(node, node.getClassName(), ts.userRepresentation(getType(node.getExpression())));", "+          throw new ExecutionError(\"static.inner.allocation\", node);", "+        }", "-          // TODO: Check accessibility of constructor", "+          checkAccessibility(inv.constructor(), node);", "-      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node, loader, opt);", "+      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, context.accessModule(), node, loader, opt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1f4b5d8dcbb163019938d187b5d0296", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "bb37c635695368e8cc96440bd6b6d051918112f8", "commitAfterChange": "4ebd25942c79fb901c720903ad892355732a9230", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 36, "signatureBeforeChange": "     @Override public Type visit(InnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(InnerAllocation node)", "diff": ["-        Type t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs);", "-        // TODO: Check that t is not a static member of enclosing", "+        ClassType t = ts.lookupClass(node.getExpression(), node.getClassName(), classTargs);", "+        checkAccessibility(t.ofClass(), node);", "+        if (t.ofClass().isStatic()) {", "+          setErrorStrings(node, node.getClassName(), ts.userRepresentation(getType(node.getExpression())));", "+          throw new ExecutionError(\"static.inner.allocation\", node);", "+        }", "-          // TODO: Check accessibility of constructor", "+          checkAccessibility(inv.constructor(), node);"]}], "num": 1940}
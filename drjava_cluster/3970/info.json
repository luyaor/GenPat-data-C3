{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c091e1770a0397ec28407f043957e08a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0453ca6db1d9ee1ed441d60b1364cbaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "27cb6e93149c6a1991393a8ca4c655137f9f0cb6", "commitAfterChange": "dd2df9abefe60137729d1e2ed7d31fad6497b670", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "signatureAfterChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "diff": ["-      final File file = new File(currFileName);", "+      final File file = new File(currFileName).getAbsoluteFile();", "+      catch (SecurityException se) {", "+        // TODO: show a dialog? (file not found)", "+      }", "+      }", "+      catch (IOException ex) {", "+        // TODO: show a dialog? (file not found)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "296401b77c583597d3e91f51392a8cb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private DefinitionsDocument makeDocument()", "signatureAfterChange": "     private DefinitionsDocument makeDocument()", "diff": ["-        if (_keywords!=null) {", "+        if (_keywords != null) {", "-      catch(Exception e) { throw new UnexpectedException(e); }", "+      catch(IOException e) { throw new UnexpectedException(e); }", "+      catch(BadLocationException e) { throw new UnexpectedException(e); }      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba59888107f4f664b387173c7e36120", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public FrameState(String s)", "signatureAfterChange": "     public FrameState(String s)", "diff": ["+      catch(NullPointerException npe) {", "+        throw new IllegalArgumentException(\"Wrong FrameState string: \" + npe);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57fdaf875dfc7d400d883794b52399fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "commitAfterChange": "3d97d4e9732e553ec694cfc208cfcad91b929426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static void openCommandLineFiles(MainFrame mf, String[] args)", "signatureAfterChange": "   public static void openCommandLineFiles(MainFrame mf, String[] args)", "diff": ["-     */", "-    public static void openCommandLineFiles(MainFrame mf, String[] args) {", "-        int i;", "-        for(i=0; i<args.length; i++) {", "-            final File file = new File(args[i]);", "-            FileOpenSelector command = new FileOpenSelector() {", "-                    public File getFile() {", "-                        return file;", "-                    }", "-                };", "-            try {", "-                OpenDefinitionsDocument doc = mf.getModel().openFile(command);", "-            } catch (FileNotFoundException ex) {", "-                //dialog: file not found", "-            } catch (Exception ex) {", "-        ", "-            }", "-        }", "-    }", "+   */", "+  public static void openCommandLineFiles(MainFrame mf, String[] args) {", "+    int i;", "+    for(i=0; i<args.length; i++) {", "+      final File file = new File(args[i]);", "+      FileOpenSelector command = new FileOpenSelector() {", "+        public File getFile() {", "+          return file;", "+        }", "+      };", "+      try {", "+        OpenDefinitionsDocument doc = mf.getModel().openFile(command);", "+      } catch (FileNotFoundException ex) {", "+        //dialog: file not found", "+      } catch (AlreadyOpenException aoe) {", "+        // This explicitly does nothing to ignore duplicate files.", "+      } catch (Exception ex) {", "+        throw new UnexpectedException(ex);", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61117e4715b859a1a7ae7064fbffcfd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "commitAfterChange": "97f3497fff8964fcbfb5676986b962bdda4668d8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["+    catch (StringIndexOutOfBoundsException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1fa39094fc487c4e421862f269ef2af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "commitAfterChange": "97f3497fff8964fcbfb5676986b962bdda4668d8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public CompilerError getErrorAtOffset(OpenDefinitionsDocument odd, int offset)", "signatureAfterChange": "   public CompilerError getErrorAtOffset(OpenDefinitionsDocument odd, int offset)", "diff": ["+      catch (StringIndexOutOfBoundsException e) { /* source document has been edited; fail silently */ }", "+      catch (StringIndexOutOfBoundsException e) { /* source document has been edited; fail silently */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7c88610504a7d34a6ec2549d846ab6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public OpenDefinitionsDocument getDocumentForFile(File file)      throws IOException, OperationCanceledException", "signatureAfterChange": "   public OpenDefinitionsDocument getDocumentForFile(File file)     throws IOException", "diff": ["-  public OpenDefinitionsDocument getDocumentForFile(File file) ", "-    throws IOException, OperationCanceledException", "+  public OpenDefinitionsDocument getDocumentForFile(File file)", "+    throws IOException", "+      }", "+      catch (OperationCanceledException oce) {", "+        // Cannot happen, since we don't throw it in our selector", "+        throw new UnexpectedException(oce);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d961f011c630258d7bb1af45525e8d78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionConstants.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static ArrayList<String> getLookAndFeels()", "signatureAfterChange": "     public static ArrayList<String> getLookAndFeels()", "diff": ["-          catch (Exception ex) {", "-            // failed to load/instantiate class, or it is not supported.", "-            // It is not a valid choice.", "-          }", "+          // failed to load/instantiate class, or it is not supported; it is not a valid choice.", "+          catch (ClassNotFoundException e) { /* do nothing */ }", "+          catch (InstantiationException e) { /* do nothing */ }", "+          catch (IllegalAccessException e) { /* do nothing */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff8b992c2873c8e968ed4a07f51ca0ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForEachStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["-      }catch(NoSuchMethodException e){", "-        /* this is very bad */", "+      }", "+      catch(NoSuchMethodException e) { ", "+        throw new UnexpectedException(e); ", "-      }catch(MethodModificationError e){", "-        /* ths is very bad */", "+      }", "+      catch(MethodModificationError e) {", "+        throw new UnexpectedException(e); ", "-      exp.setProperty(NodeProperties.TYPE,   m.getReturnType());", "+      exp.setProperty(NodeProperties.TYPE, m.getReturnType());", "-      try {", "-        m2 = context.lookupMethod(exp, \"hasNext\", Constants.EMPTY_CLASS_ARRAY);", "-      }catch(NoSuchMethodException e){", "+      try { m2 = context.lookupMethod(exp, \"hasNext\", Constants.EMPTY_CLASS_ARRAY); }", "+      catch(NoSuchMethodException e){", "-      }catch(MethodModificationError e){", "+      }", "+      catch(MethodModificationError e){", "-      condition.setProperty(NodeProperties.TYPE,   m2.getReturnType());", "+      condition.setProperty(NodeProperties.TYPE, m2.getReturnType());"]}], "num": 3970}
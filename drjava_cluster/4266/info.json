{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce5a5c4bf8372b2ea72e3c2ad4974088", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "667d994c7d235f42afe593fafce1a9f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "6cf6212d2242fc41ac00a6496c1e1ba3b53de977", "commitAfterChange": "04e763507593a06a56de16c4b3641de0dbca16f7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-      if (delim == '}') {", "-        BraceReduction reduced = doc.getReduced();", "-        reduced.resetLocation();", "+      if (delim == '}') {       ", "+        //BraceReduction reduced = doc.getReduced();", "+        //we're pretty sure the doc is in sync.", "+        doc.resetReducedModelLocation();", "-        reduced.move(dist);", "-        prevDelimiterPos -= reduced.balanceBackward() - 1;", "-        reduced.move(-dist);", "+        synchronized(doc){", "+          doc.move(dist);", "+          prevDelimiterPos -= doc.balanceBackward() - 1;", "+          doc.move(-dist);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da09935beb809437af0307503eefb2f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "6cf6212d2242fc41ac00a6496c1e1ba3b53de977", "commitAfterChange": "04e763507593a06a56de16c4b3641de0dbca16f7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["+   */", "+  boolean applyRule(DefinitionsDocument doc)", "+  {", "+    try", "+      // Find the first non-whitespace character on the current line.", "+      ", "+      int currentPos = doc.getCurrentLocation(),", "+        startPos   = doc.getLineFirstCharPos(currentPos),", "+        endPos     = doc.getLineEndPos(currentPos),", "+        lineLength = endPos - startPos;", "+      ", "+      char currentChar, previousChar = '\\0';", "+      String text = doc.getText(startPos, lineLength);", "+      ", "+      for (int i = 0; i < lineLength; i++)", "+      {", "+        // Get state for walker position.", "+        //BraceReduction reduced = doc.getReduced();", "+        ", "+        synchronized(doc){", "+          doc.move( startPos - currentPos + i);", "+          ReducedModelState state = doc.getStateAtCurrent();", "+          doc.move(-startPos + currentPos - i);", "+          ", "+          ", "+          currentChar = text.charAt(i);", "+          ", "+          if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ", "+          {", "+            return false;", "+          }", "+          if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT))", "+          {", "+            // Handle case: ...*/*", "+            previousChar = '\\0'; continue;", "+          }", "+          if (state.equals(ReducedModelState.FREE))", "+          {", "+            // Can prefix still fit on the current line?", "+            if (_prefix.length() > lineLength - i)", "+            {", "+              return false;", "+            }", "+            else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/')", "+            {", "+              // '/' is the only non-WS character that we consume without", "+              // immediately returning false. When we try to match the prefix,", "+              // we also need to reflect this implicit lookahead mechanism.", "+              return true;", "+            }", "+            else if (currentChar == '/')", "+            {", "+              if (previousChar == '/') { return false; }", "+            }", "+            else if (currentChar == ' ' || currentChar == '\\t')", "+            {", "+            }", "+            else if (!(currentChar == '*' && previousChar == '/'))", "+            {", "+              return false;", "+            }", "+          }", "+        }", "+        if (previousChar == '/' && currentChar != '*')", "+        {", "+          return false;", "+        }", "+        previousChar = currentChar;", "+      }", "+      return false;", "-     */", "-    boolean applyRule(DefinitionsDocument doc)", "+    catch (BadLocationException e)", "-\ttry", "-\t{", "-\t    // Find the first non-whitespace character on the current line.", "-\t    ", "-\t    int currentPos = doc.getCurrentLocation(),", "-\t\tstartPos   = doc.getLineFirstCharPos(currentPos),", "-\t\tendPos     = doc.getLineEndPos(currentPos),", "-\t\tlineLength = endPos - startPos;", "-\t    ", "-\t    char currentChar, previousChar = '\\0';", "-\t    String text = doc.getText(startPos, lineLength);", "-\t    ", "-\t    for (int i = 0; i < lineLength; i++)", "-\t    {", "-\t\t// Get state for walker position.", "-\t\tBraceReduction reduced = doc.getReduced();", "-\t\treduced.move( startPos - currentPos + i);", "-\t\tReducedModelState state = reduced.getStateAtCurrent();", "-\t\treduced.move(-startPos + currentPos - i);", "-\t\t", "-\t\tcurrentChar = text.charAt(i);", "-\t    ", "-\t\tif (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ", "-\t\t{", "-\t\t    return false;", "-\t\t}", "-\t\tif (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT))", "-\t\t{", "-\t\t    // Handle case: ...*/*", "-\t\t    previousChar = '\\0'; continue;", "-\t\t}", "-\t\tif (state.equals(ReducedModelState.FREE))", "-\t\t{", "-\t\t    // Can prefix still fit on the current line?", "-\t\t    if (_prefix.length() > lineLength - i)", "-\t\t    {", "-\t\t\treturn false;", "-\t\t    }", "-\t\t    else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/')", "-\t\t    {", "-\t\t\t// '/' is the only non-WS character that we consume without", "-\t\t\t// immediately returning false. When we try to match the prefix,", "-\t\t\t// we also need to reflect this implicit lookahead mechanism.", "-\t\t\treturn true;", "-\t\t    }", "-\t\t    else if (currentChar == '/')", "-\t\t    {", "-\t\t\tif (previousChar == '/') { return false; }", "-\t\t    }", "-\t\t    else if (currentChar == ' ' || currentChar == '\\t')", "-\t\t    {", "-\t\t    }", "-\t\t    else if (!(currentChar == '*' && previousChar == '/'))", "-\t\t    {", "-\t\t\treturn false;", "-\t\t    }", "-\t\t}", "-\t\tif (previousChar == '/' && currentChar != '*')", "-\t\t{", "-\t\t    return false;", "-\t\t}", "-\t\tpreviousChar = currentChar;", "-\t    }", "-\t    return false;", "-\t}", "-\tcatch (BadLocationException e)", "-\t{", "-\t    // Control flow should never reach this point!", "-\t    throw new UnexpectedException(new RuntimeException(\"Bug in QuestionCurrLineStartsWithSkipComments\"));", "-\t}", "+      // Control flow should never reach this point!", "+      throw new UnexpectedException(new RuntimeException(\"Bug in QuestionCurrLineStartsWithSkipComments\"));", "+  }"]}], "num": 4266}
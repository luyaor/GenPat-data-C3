{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be0427d7f071459f9f3224714ca44f64", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c356e730419c1d7344347eeaf9fbc1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "e70766c672e058ab37ae5757bf5008b997a8ff63", "commitAfterChange": "5089bb7a50fb7750f9e599079bf91522d8072d34", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void declareMemberStaticImport(String member)", "signatureAfterChange": "     public void declareMemberStaticImport(String member)", "diff": ["-    //First, check for all static inner classes by the given name", "+    String name = member.substring(i+1,member.length());", "+    ", "+    ", "+    //First, check for a static inner class by the given name", "+    //**//Note, all static inner classes imported with \"import static\" have to be added to the list twice, once with a '.' and once with a '$'. ", "+    //The first class in the list which successfully works is the one used when the user actually instantiates the class, and both are needed because ", "+    //Different methods require different formats, and having both can't hurt anything. Any of the methods that use the list of classes try and catch through the", "+    //list until they come across a class that fits", "+      try {", "+        Class.forName(member, true, classLoader);", "+      } catch (ClassNotFoundException cnfe) {", "+        findInnerClass(member);", "+      }", "-      Field f = surroundingClass.getField(member);", "+      Field f = surroundingClass.getField(name);", "-        if(isPublicAndStatic(methodArray[j].getModifiers())) {", "+        if(isPublicAndStatic(methodArray[j].getModifiers()) && methodArray[j].getName().equals(name)) {", "-    if(foundSecurityException || ! foundSomethingToImport)", "-      throw new RuntimeException(\"No public members of the name \" + member);", "+    if(foundSomethingToImport)", "+      return;", "+    ", "+    throw new RuntimeException(\"No public members of the name \" + member);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ee1e6e7de2890886b09ebfa9ecbcb3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset) throws DebugException", "signatureAfterChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset) throws DebugException", "diff": ["+    _exactClassName = null;", "+//    try {", "+      if (offset >= 0) {", "+// getEnclosingClassName is incorrect right now and numbers anonymous inner classes incorrectly", "+//        if (doc.getNumberOfLines()<500) {", "+//          // only do this on short files", "+//          // in long files, getEnclosingClassName might take too long", "+//          _exactClassName = doc.getEnclosingClassName(offset, true);", "+//        }", "+      }", "+//    }", "+//    catch(ClassNameNotFoundException cnnfe) { /* ignore, we don't need the exact class name */ }", "+//    catch(BadLocationException ble) { /* ignore, we don't need the exact class name */ }", "-        _exactClassName = doc.getEnclosingClassName(offset, true);", "+        _className = doc.getQualifiedClassName(offset);", "-    }", "-    catch(ClassNameNotFoundException cnnfe) {", "-      _exactClassName = null;", "-    }", "-    catch(BadLocationException ble) {", "-      _exactClassName = null;", "-    }", "-    try {", "-      _className = doc.getQualifiedClassName(offset);", "-      // Couldn't find class name at offset, use the first class name", "-      // found.", "-      try {", "-        _className = doc.getQualifiedClassName();", "-      }", "-      catch (ClassNameNotFoundException cnnfe2) {", "-        // Still couldn't find a class name, use \"\"", "-        _className = \"\";", "-      }", "+      // Still couldn't find a class name, use \"\"", "+      _className = \"\";"]}], "num": 6749}
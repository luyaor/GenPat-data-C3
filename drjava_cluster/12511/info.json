{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af33dc05cce7f2c88b44e7a14a20f76b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34c6dc3fbc7d95f37c168305fb18d64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 106, "signatureBeforeChange": "   final public Expression literal() throws ParseException", "signatureAfterChange": "   final public Expression literal() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case INTEGER_LITERAL:", "-      t = jj_consume_token(INTEGER_LITERAL);", "-      {if (true) return new IntegerLiteral(t.image,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case LONG_LITERAL:", "-      t = jj_consume_token(LONG_LITERAL);", "-      {if (true) return new LongLiteral(t.image,", "-                             filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    case FLOAT_LITERAL:", "-      t = jj_consume_token(FLOAT_LITERAL);", "-      {if (true) return new FloatLiteral(t.image,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              t.endLine,   t.endColumn);}", "-      break;", "-    case DOUBLE_LITERAL:", "-      t = jj_consume_token(DOUBLE_LITERAL);", "-      {if (true) return new DoubleLiteral(t.image,", "-                               filename,", "-                               t.beginLine, t.beginColumn,", "-                               t.endLine,   t.endColumn);}", "-      break;", "-    case CHARACTER_LITERAL:", "-      t = jj_consume_token(CHARACTER_LITERAL);", "-      {if (true) return new CharacterLiteral(t.image,", "+    try {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case INTEGER_LITERAL:", "+        t = jj_consume_token(INTEGER_LITERAL);", "+        {if (true) return new IntegerLiteral(t.image,", "-      break;", "-    case STRING_LITERAL:", "-      t = jj_consume_token(STRING_LITERAL);", "-      {if (true) return new StringLiteral(t.image,", "+        break;", "+      case LONG_LITERAL:", "+        t = jj_consume_token(LONG_LITERAL);", "+        {if (true) return new LongLiteral(t.image,", "-      break;", "-    case TRUE:", "-      t = jj_consume_token(TRUE);", "-      {if (true) return new BooleanLiteral(true,", "+        break;", "+      case FLOAT_LITERAL:", "+        t = jj_consume_token(FLOAT_LITERAL);", "+        {if (true) return new FloatLiteral(t.image,", "-      break;", "-    case FALSE:", "-      t = jj_consume_token(FALSE);", "-      {if (true) return new BooleanLiteral(false,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case NULL:", "-      t = jj_consume_token(NULL);", "-      {if (true) return new NullLiteral(filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    default:", "-      jj_la1[109] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "+        break;", "+      case DOUBLE_LITERAL:", "+        t = jj_consume_token(DOUBLE_LITERAL);", "+        {if (true) return new DoubleLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case CHARACTER_LITERAL:", "+        t = jj_consume_token(CHARACTER_LITERAL);", "+        {if (true) return new CharacterLiteral(t.image,", "+                                    filename,", "+                                    t.beginLine, t.beginColumn,", "+                                    t.endLine,   t.endColumn);}", "+        break;", "+      case STRING_LITERAL:", "+        t = jj_consume_token(STRING_LITERAL);", "+        {if (true) return new StringLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case TRUE:", "+        t = jj_consume_token(TRUE);", "+        {if (true) return new BooleanLiteral(true,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case FALSE:", "+        t = jj_consume_token(FALSE);", "+        {if (true) return new BooleanLiteral(false,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case NULL:", "+        t = jj_consume_token(NULL);", "+        {if (true) return new NullLiteral(filename,", "+                               t.beginLine, t.beginColumn,", "+                               t.endLine,   t.endColumn);}", "+        break;", "+      default:", "+        jj_la1[110] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"This is an illegal literal!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8086f6dcb1a3091d44dac0bf0269ee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "signatureAfterChange": "   final public ConstructorInvocation explicitConstructorInvocation() throws ParseException", "diff": ["-    if (jj_2_20(2147483647)) {", "-      b = jj_consume_token(THIS);", "-      args = arguments();", "-      e = jj_consume_token(SEMICOLON);", "-    } else {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case DOUBLE:", "-      case FALSE:", "-      case FLOAT:", "-      case INT:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case SHORT:", "-      case SUPER:", "-      case THIS:", "-      case TRUE:", "-      case VOID:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-        if (jj_2_19(2)) {", "-          exp = primaryExpression();", "-          jj_consume_token(DOT);", "-        } else {", "-          ;", "-        }", "-        b = jj_consume_token(SUPER);", "+    try {", "+      if (jj_2_20(2147483647)) {", "+        b = jj_consume_token(THIS);", "-        break;", "-      default:", "-        jj_la1[43] = jj_gen;", "-        jj_consume_token(-1);", "-        throw new ParseException();", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FALSE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case SHORT:", "+        case SUPER:", "+        case THIS:", "+        case TRUE:", "+        case VOID:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+          if (jj_2_19(2)) {", "+            exp = primaryExpression();", "+            jj_consume_token(DOT);", "+          } else {", "+            ;", "+          }", "+          b = jj_consume_token(SUPER);", "+          args = arguments();", "+          e = jj_consume_token(SEMICOLON);", "+          break;", "+        default:", "+          jj_la1[44] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "-    }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid constructor invocation\");", "+    }"]}], "num": 12511}
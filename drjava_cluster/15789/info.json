{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8554472e0a0c4b69e9c3d68ba158132", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6affc16c303db04c7a106a15a920b879", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleCommentLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18, Indenter.OTHER));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25, Indenter.OTHER));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28, Indenter.OTHER));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 25, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 28, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c64b371054e4e538b5c0499c20b728ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhraseTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "signatureAfterChange": "   public void testMultipleBlankLinesBack() throws BadLocationException", "diff": ["-    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5, Indenter.OTHER));", "-    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6, Indenter.OTHER));", "-    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13, Indenter.OTHER));", "-    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16, Indenter.OTHER));", "+    assertTrue(\"line after open paren\", rule.applyRule(_doc, 5, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after open paren\", rule.applyRule(_doc, 6, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after semicolon\", rule.applyRule(_doc, 13, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after semicolon\", rule.applyRule(_doc, 16, Indenter.IndentReason.OTHER));"]}], "num": 15789}
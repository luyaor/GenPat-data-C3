{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4a92d308ea5fbc2be1b22f20357dced", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7370b49095ac75776d858a31438e655a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 451, "methodNumberAfterChange": 451, "signatureBeforeChange": "\r \r   public void forPositiveExpression(PositiveExpression that)", "signatureAfterChange": "    public void forPositiveExpression(PositiveExpression that)", "diff": ["-\r", "-  public void forPositiveExpression(PositiveExpression that) {\r", "-    forPositiveExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forPositiveExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPositiveExpression(PositiveExpression that) {", "+    forPositiveExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forPositiveExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a8ae022e952a5ff5da89f9e0b31404", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 452, "methodNumberAfterChange": 452, "signatureBeforeChange": "\r \r   public void forNegativeExpression(NegativeExpression that)", "signatureAfterChange": "    public void forNegativeExpression(NegativeExpression that)", "diff": ["-\r", "-  public void forNegativeExpression(NegativeExpression that) {\r", "-    forNegativeExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNegativeExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNegativeExpression(NegativeExpression that) {", "+    forNegativeExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNegativeExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf442e98d9340abb04b8a87d60ba2288", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 455, "methodNumberAfterChange": 455, "signatureBeforeChange": "\r \r   public void forConditionalExpression(ConditionalExpression that)", "signatureAfterChange": "    public void forConditionalExpression(ConditionalExpression that)", "diff": ["-\r", "-  public void forConditionalExpression(ConditionalExpression that) {\r", "-    forConditionalExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCondition().visit(this);\r", "-    that.getForTrue().visit(this);\r", "-    that.getForFalse().visit(this);\r", "-    forConditionalExpressionOnly(that);\r", "-  }\r", "+", "+  public void forConditionalExpression(ConditionalExpression that) {", "+    forConditionalExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCondition().visit(this);", "+    that.getForTrue().visit(this);", "+    that.getForFalse().visit(this);", "+    forConditionalExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dad533bf7ca90eb4ac70bae3d7b9bb0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 453, "methodNumberAfterChange": 453, "signatureBeforeChange": "\r \r   public void forBitwiseNotExpression(BitwiseNotExpression that)", "signatureAfterChange": "    public void forBitwiseNotExpression(BitwiseNotExpression that)", "diff": ["-\r", "-  public void forBitwiseNotExpression(BitwiseNotExpression that) {\r", "-    forBitwiseNotExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forBitwiseNotExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseNotExpression(BitwiseNotExpression that) {", "+    forBitwiseNotExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forBitwiseNotExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa06c6793ab31a84052958b473d97228", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 454, "methodNumberAfterChange": 454, "signatureBeforeChange": "\r \r   public void forNotExpression(NotExpression that)", "signatureAfterChange": "    public void forNotExpression(NotExpression that)", "diff": ["-\r", "-  public void forNotExpression(NotExpression that) {\r", "-    forNotExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forNotExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNotExpression(NotExpression that) {", "+    forNotExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forNotExpressionOnly(that);", "+  }"]}], "num": 14023}
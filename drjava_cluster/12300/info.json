{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f44695d62fed69ba72538f96ca53b800", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67d75a6404df6fb7d277c3697ec07d4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void resetErrors(CompilerError[] errors)", "signatureAfterChange": "   public void reset()", "diff": ["-  public void resetErrors(CompilerError[] errors) {", "-    // Get rid of any old highlights", "-    _removePreviousHighlight();", "-", "-    // sort the errors by location", "-    Arrays.sort(errors);", "-", "-    // Filter out those with invalid source info.", "-    // They will be first since errors are sorted by line number,", "-    // and invalid source info is for negative line numbers.", "-    int numInvalid = 0;", "-    for (int i = 0; i < errors.length; i++) {", "-      if (errors[i].lineNumber() < 0) {", "-        numInvalid++;", "-      }", "-      else {", "-        // Since they were sorted, we must be done looking ", "-        // for invalid source coordinates, since we found this valid one.", "-        break;", "-      }", "-    }", "-", "-    _errorsWithoutPositions = new CompilerError[numInvalid];", "-    System.arraycopy(errors,", "-                     0,", "-                     _errorsWithoutPositions,", "-                     0,", "-                     numInvalid);", "-", "-    int numValid = errors.length - numInvalid;", "-    _errors = new CompilerError[numValid];", "-    System.arraycopy(errors,", "-                     numInvalid,", "-                     _errors,", "-                     0,", "-                     numValid);", "-", "-    _createPositionsArray();", "-    _resetEnabledStatus();", "-", "-    for (int i = 0; i < _errors.length; i++) {", "-      DrJava.consoleErr().println(\"error #\" + i + \": \" + _errors[i]);", "-    }", "-", "-    DrJava.consoleErr().println();", "-    for (int i = 0; i < _errorPositions.length; i++) {", "-      DrJava.consoleErr().println(\"POS #\" + i + \": \" + _errorPositions[i]);", "-    }", "-", "-    DrJava.consoleErr().println();", "-    for (int i = 0; i < _errorsWithoutPositions.length; i++) {", "-      DrJava.consoleErr().println(\"errorNOP #\" + i + \": \" + _errorsWithoutPositions[i]);", "-    }", "+  public void reset() {", "+    _numErrors = _model.getNumErrors();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78280d023358904158c025685bd8a222", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "commitAfterChange": "65fb8db1fb3e7570ae4fa352a26deb0e151b48ac", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     public void testCreateConstructor()", "signatureAfterChange": "     public void testCreateConstructor()", "diff": ["-      System.err.println(\"****** Creating constructor for \" + _sd1);", "+//      System.err.println(\"****** Creating constructor for \" + _sd1);", "-      System.err.println(\"****** Before creating Classname constructor, ClassName methods = \" + sd.getMethods());", "-      System.err.println(\"****** Creating constructor for \" + sd);", "+//      System.err.println(\"****** Before creating Classname constructor, ClassName methods = \" + sd.getMethods());", "+//      System.err.println(\"****** Creating constructor for \" + sd);", "-      System.err.println(\"****** After creating constructor, ClassName method = \" + sd.getMethods());", "+//      System.err.println(\"****** After creating constructor, ClassName method = \" + sd.getMethods());", "-      System.err.println(\"****** Generated MethodData: \" + conSD.toBigString());", "-      System.err.println(\"****** Expectred MethodData: \" + md.toBigString());", "+//      System.err.println(\"****** Generated MethodData: \" + conSD.toBigString());", "+//      System.err.println(\"****** Expectred MethodData: \" + md.toBigString());", "-      System.err.println(\"****** Expected params = \" + Arrays.toString(md2.getParams()));", "-      System.err.println(\"****** Results  params = \" + Arrays.toString(conSD.getParams()));", "+//      System.err.println(\"****** Expected params = \" + Arrays.toString(md2.getParams()));", "+//      System.err.println(\"****** Results  params = \" + Arrays.toString(conSD.getParams()));", "-      System.err.println(\"****** Expected vars = \" + md2.getVars());", "-      System.err.println(\"****** Results  vars = \" + conSD.getVars());", "+//      System.err.println(\"****** Expected vars = \" + md2.getVars());", "+//      System.err.println(\"****** Results  vars = \" + conSD.getVars());", "-      System.err.println(\"****** Constructor for Subclass is: \" + conSD.toBigString());", "-      System.err.println(\"****** Expected MethodData is: \" + md2.toBigString());", "+//      System.err.println(\"****** Constructor for Subclass is: \" + conSD.toBigString());", "+//      System.err.println(\"****** Expected MethodData is: \" + md2.toBigString());", "-        System.err.println(\"****** EnclosingData of mVars \" + i + \" = \" + mVars.get(i).getEnclosingData());", "-        System.err.println(\"****** EnclosingData of cVars \" + i + \" = \" + cVars.get(i).getEnclosingData());", "+//        System.err.println(\"****** EnclosingData of mVars \" + i + \" = \" + mVars.get(i).getEnclosingData());", "+//        System.err.println(\"****** EnclosingData of cVars \" + i + \" = \" + cVars.get(i).getEnclosingData());"]}], "num": 12300}
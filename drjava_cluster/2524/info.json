{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78ab916d4912f602ba8a7d473ba25a40", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2819b1e9637b20127b5af03850a23e04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testInteractionPreventedFromExit() throws BadLocationException", "signatureAfterChange": "   public void testInteractionPreventedFromExit()     throws BadLocationException, InterruptedException", "diff": ["-  public void testInteractionPreventedFromExit() throws BadLocationException", "+  public void testInteractionPreventedFromExit()", "+    throws BadLocationException, InterruptedException", "-    String result = interpret(\"System.exit(-1);\");", "+    TestListener listener = new TestListener() {", "+      public void interactionStarted() {", "+        interactionStartCount++;", "+      }", "-    assertEquals(\"interactions result\",", "-                 DefaultGlobalModel.EXIT_CALLED_MESSAGE,", "-                 result);", "+      public void interactionsExited(int status) {", "+        assertInteractionStartCount(1);", "+        interactionsExitedCount++;", "+        lastExitStatus = status;", "+      }", "+", "+      public void interactionsReset() {", "+        synchronized(this) {", "+          assertInteractionStartCount(1);", "+          assertInteractionsExitedCount(1);", "+          interactionsResetCount++;", "+          this.notify();", "+        }", "+      }", "+    };", "+", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      interpretIgnoreResult(\"System.exit(23);\");", "+      listener.wait();", "+    }", "+", "+    listener.assertInteractionStartCount(1);", "+    listener.assertInteractionsResetCount(1);", "+    listener.assertInteractionsExitedCount(1);", "+    assertEquals(\"exit status\", 23, listener.lastExitStatus);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76d6fcddbb968edc90364026693114e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOpsTest.java", "commitBeforeChange": "a3b94da025d35ad7aeb4080660309a66820eaabc", "commitAfterChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testSaveFile() throws IOException", "signatureAfterChange": "   public void testSaveFile() throws IOException", "diff": ["-    } catch (IOException ioe){}//do nothing, this is expected", "+    } ", "+    catch (IOException ioe){}//do nothing, this is expected", "-    } catch(IOException ioe){} //do nothing, we expected this", "+    }", "+    catch(IOException ioe){} //do nothing, we expected this", "+    ", "+    // Make sure that the backup file no longer exists since it was ", "+    // copied over the original", "+    try {", "+      FileOps.readFileAsString(backup);", "+      fail(\"The backup file should no longer exist.\");", "+    }", "+    catch(FileNotFoundException e) {} //do nothing, we expected this", "+    ", "+    // Test that save fails if the file is write-protected.", "+    writeTo.setReadOnly();", "+    try {", "+      FileOps.saveFile(new FileOps.DefaultFileSaver(writeTo) {", "+        public boolean shouldBackup () {", "+          return true;", "+        }", "+        public void saveTo(OutputStream os) throws IOException {", "+          String output =  \"version 6\";", "+          os.write(output.getBytes());", "+        }", "+      });", "+      fail(\"The file to be saved was read-only!\");", "+    }", "+    catch(IOException ioe){} //do nothing, we expected this", "+    assertEquals(\"failed save6 w backup\", \"version 3\",", "+                 FileOps.readFileAsString(writeTo));", "+    ", "+    // Make sure that the backup file still doesn't exist since the file", "+    // was read-only.", "+    try {", "+      FileOps.readFileAsString(backup);", "+      fail(\"The backup file should no longer exist.\");", "+    }", "+    catch(FileNotFoundException e) {} //do nothing, we expected this"]}], "num": 2524}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "339674f9e8e7bc3c573a975feb08b66f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33f99d3770ff56221520a7202c82e6a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Void forCatchBlock(CatchBlock that)", "signatureAfterChange": "   public Void forCatchBlock(CatchBlock that)", "diff": ["-    VariableData exceptionVar = formalParameters2VariableData(new FormalParameter[]{ that.getException() }, bd)[0];", "+    SymbolData enclosing = getQualifiedSymbolData(_enclosingClassName);", "+    VariableData exceptionVar = ", "+      formalParameters2VariableData(new FormalParameter[]{ that.getException() }, enclosing)[0];", "-    b.getStatements().visit(new BodyBodyFullJavaVisitor(bd, _file, _package, _importedFiles, _importedPackages, ", "-                                                        _classNamesInThisFile, continuations, ", "-                                                        _innerClassesToBeParsed));", "+    BodyBodyFullJavaVisitor bbfjv = ", "+      new BodyBodyFullJavaVisitor(bd, _file, _package, _enclosingClassName, _importedFiles,", "+                                  _importedPackages, _classesInThisFile, continuations, fixUps,", "+                                  new HashSet<String>());", "+    b.getStatements().visit(bbfjv);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79c57a236f845fd86d77d9a2b9f501bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Void forCatchBlock(CatchBlock that)", "signatureAfterChange": "   public Void forCatchBlock(CatchBlock that)", "diff": ["-  /** Visit the block as in forBlock(), but first add the exception parameter as a variable in that block. */", "+    * TODO: move this method into LanguageLevelVisitor. */", "+    System.err.println(\"***ALARM*** BodyBodyIntermediateVisitor is visiting catch block\");", "-    VariableData exceptionVar = formalParameters2VariableData(new FormalParameter[]{ that.getException() }, bd)[0];", "+    SymbolData enclosing = getQualifiedSymbolData(_enclosingClassName);", "+   ", "+    VariableData exceptionVar = ", "+      formalParameters2VariableData(new FormalParameter[]{ that.getException() }, enclosing)[0];", "-    b.getStatements().visit(new BodyBodyIntermediateVisitor(bd, _file, _package, _importedFiles, _importedPackages, ", "-                                                            _classNamesInThisFile, continuations, ", "-                                                            _innerClassesToBeParsed));", "+    System.err.println(\"Visiting augmented catch block with new visitor!\");", "+    BodyBodyIntermediateVisitor bbijv = ", "+      new BodyBodyIntermediateVisitor(bd, _file, _package, _enclosingClassName, _importedFiles,", "+                                      _importedPackages, _classesInThisFile, continuations, fixUps,", "+                                      new HashSet<String>());", "+    b.getStatements().visit(bbijv);"]}], "num": 2857}
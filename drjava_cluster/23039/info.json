{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6d1f7531558c53ab9480ac75b7f4444", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bba3928dd75400bac3a729f5c07076d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "    private void _editPreferences()", "signatureAfterChange": "    private void _editPreferences()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {  // no preferences action in stable", "-      if (_configFrame == null) {", "-        _configFrame = new ConfigFrame(this);", "-      }", "-      _configFrame.show();", "+    if (_configFrame == null) {", "+      _configFrame = new ConfigFrame(this);", "+    _configFrame.show();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463c23a6c3e1b579f8aad83fdd0bbd09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testFormat()", "signatureAfterChange": "   public void testFormat()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "-      KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "-                                            InputEvent.ALT_MASK | InputEvent.META_MASK);", "-      assertEquals(ks, io.parse(io.format(ks)));", "-      ks = KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN,", "-                                  InputEvent.ALT_MASK | InputEvent.CTRL_MASK);", "-      assertEquals(ks, io.parse(io.format(ks)));", "-      // behaves correctly in 1.3, but the test will not work for some reason", "-      /*ks = KeyStroke.getKeyStroke(new Character('!'),", "-                                  InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK);", "-      assertEquals(ks, io.parse(io.format(ks)));*/", "-      ks = KeyStroke.getKeyStroke('!');", "-      assertEquals(ks, io.parse(io.format(ks)));", "-      ks = KeyStroke.getKeyStroke(KeyEvent.VK_F10,", "-                                  InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                  true);", "-      assertEquals(ks, io.parse(io.format(ks)));", "-    }", "+    KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "+    KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "+                                          InputEvent.ALT_MASK | InputEvent.META_MASK);", "+    assertEquals(ks, io.parse(io.format(ks)));", "+    ks = KeyStroke.getKeyStroke(KeyEvent.VK_NUMBER_SIGN,", "+                                InputEvent.ALT_MASK | InputEvent.CTRL_MASK);", "+    assertEquals(ks, io.parse(io.format(ks)));", "+    // behaves correctly in 1.3, but the test will not work for some reason", "+    /*ks = KeyStroke.getKeyStroke(new Character('!'),", "+     InputEvent.CTRL_MASK | InputEvent.SHIFT_MASK);", "+     assertEquals(ks, io.parse(io.format(ks)));*/", "+    ks = KeyStroke.getKeyStroke('!');", "+    assertEquals(ks, io.parse(io.format(ks)));", "+    ks = KeyStroke.getKeyStroke(KeyEvent.VK_F10,", "+                                InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "+                                true);", "+    assertEquals(ks, io.parse(io.format(ks)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556d70cb105164c6efd7f50f1d78fdd3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testGetName()", "signatureAfterChange": "      public void testGetName()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStrokeOption io1 = new KeyStrokeOption(\"indent_size\",null);", "-      KeyStrokeOption io2 = new KeyStrokeOption(\"max_files\",null);", "-      ", "-      assertEquals(\"indent_size\", io1.getName());", "-      assertEquals(\"max_files\",   io2.getName());", "-    }", "+    KeyStrokeOption io1 = new KeyStrokeOption(\"indent_size\",null);", "+    KeyStrokeOption io2 = new KeyStrokeOption(\"max_files\",null);", "+    ", "+    assertEquals(\"indent_size\", io1.getName());", "+    assertEquals(\"max_files\",   io2.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b1588030cd82e95cb3bd5f3002c1f23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/FontOptionTest.java", "commitBeforeChange": "45f11437d24a95250c66e3a94437d7de4d6682c1", "commitAfterChange": "97bb3c70440590a053a3f2aff064ff2a0f94447e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testFormat()", "signatureAfterChange": "      public void testFormat()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      FontOption fO1 = new FontOption(\"font.test2\", Font.decode(null));", "-      ", "-      assertEquals(\"monospaced-PLAIN-12\",  fO1.format(new Font(\"monospaced\", 0, 12)));", "-      assertEquals(\"sansserif-BOLD-10\", fO1.format(new Font(\"sansserif\", 1, 10)));", "-      assertEquals(\"sansserif-BOLDITALIC-10\", fO1.format(new Font(\"sansserif\", 3, 10)));", "-    }", "+    ", "+    FontOption fO1 = new FontOption(\"font.test2\", Font.decode(null));", "+    ", "+    assertEquals(\"monospaced-PLAIN-12\",  fO1.format(new Font(\"monospaced\", 0, 12)));", "+    assertEquals(\"sansserif-BOLD-10\", fO1.format(new Font(\"sansserif\", 1, 10)));", "+    assertEquals(\"sansserif-BOLDITALIC-10\", fO1.format(new Font(\"sansserif\", 3, 10)));", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54bd05a77f57aa0a9cf0bf0f232ac41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOptionTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testParse()", "signatureAfterChange": "      public void testParse()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "-      assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "-                                          InputEvent.CTRL_MASK),", "-                   io.parse(\"ctrl ENTER\"));", "-      assertEquals(KeyStrokeOption.NULL_KEYSTROKE,", "-                   io.parse(\"<none>\"));", "-      assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_NUM_LOCK,", "-                                          InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                          true),", "-                   io.parse(\"alt shift released NUM_LOCK\"));", "-      assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA,", "-                                          InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "-                                          false),", "-                   io.parse(\"alt shift COMMA\"));", "-      assertEquals(KeyStroke.getKeyStroke('%'),", "-                   io.parse(\"typed %\"));", "-      // behaves correctly in 1.3, but the test will not work for some reason", "-      /*assertEquals(KeyStroke.getKeyStroke(new Character('%'),", "-                                          InputEvent.ALT_MASK | InputEvent.CTRL_MASK),", "-                   io.parse(\"ctrl alt typed %\"));*/", "-      ", "-      try { io.parse(\"true\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-      ", "-      try { io.parse(\".33\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-      ", "-      try { io.parse(\"Alt Z\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-      ", "-      try { io.parse(\"ctrl alt shift typed F1\"); fail(); }", "-      catch (IllegalArgumentException e) {}", "-    }", "+    KeyStrokeOption io = new KeyStrokeOption(\"max_files\",null);", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,", "+                                        InputEvent.CTRL_MASK),", "+                 io.parse(\"ctrl ENTER\"));", "+    assertEquals(KeyStrokeOption.NULL_KEYSTROKE,", "+                 io.parse(\"<none>\"));", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_NUM_LOCK,", "+                                        InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "+                                        true),", "+                 io.parse(\"alt shift released NUM_LOCK\"));", "+    assertEquals(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA,", "+                                        InputEvent.ALT_MASK | InputEvent.SHIFT_MASK,", "+                                        false),", "+                 io.parse(\"alt shift COMMA\"));", "+    assertEquals(KeyStroke.getKeyStroke('%'),", "+                 io.parse(\"typed %\"));", "+    // behaves correctly in 1.3, but the test will not work for some reason", "+    /*assertEquals(KeyStroke.getKeyStroke(new Character('%'),", "+     InputEvent.ALT_MASK | InputEvent.CTRL_MASK),", "+     io.parse(\"ctrl alt typed %\"));*/", "+    ", "+    try { io.parse(\"true\"); fail(); }", "+    catch (IllegalArgumentException e) {}", "+    ", "+    try { io.parse(\".33\"); fail(); }", "+    catch (IllegalArgumentException e) {}", "+    ", "+    try { io.parse(\"Alt Z\"); fail(); }", "+    catch (IllegalArgumentException e) {}", "+    ", "+    try { io.parse(\"ctrl alt shift typed F1\"); fail(); }", "+    catch (IllegalArgumentException e) {}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c951410c1e5e01d6054d0d7951c2220c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/HistoryTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testLiveUpdateOfHistoryMaxSize()", "signatureAfterChange": "      public void testLiveUpdateOfHistoryMaxSize()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      int maxLength = 20;", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(20));", "-      ", "-      for (int i = 0; i < maxLength; i++) {", "-        _history.add(\"testing \" + i);", "-      }", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(10));", "-      ", "-      assertEquals(\"History size should be 10\",", "-                   10, _history.size());", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(100));", "-      ", "-      assertEquals(\"History size should still be 10\",", "-                   10,", "-                   _history.size());", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(0));", "-      ", "-      assertEquals(\"History size should be 0\",", "-                   0,", "-                   _history.size());", "-      ", "-      CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(-1));", "-      ", "-      assertEquals(\"History size should still be 0\",", "-                   0,", "-                   _history.size());", "+    int maxLength = 20;", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(20));", "+    ", "+    for (int i = 0; i < maxLength; i++) {", "+      _history.add(\"testing \" + i);", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(10));", "+    ", "+    assertEquals(\"History size should be 10\",", "+                 10, _history.size());", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(100));", "+    ", "+    assertEquals(\"History size should still be 10\",", "+                 10,", "+                 _history.size());", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(0));", "+    ", "+    assertEquals(\"History size should be 0\",", "+                 0,", "+                 _history.size());", "+    ", "+    CONFIG.setSetting(HISTORY_MAX_SIZE, new Integer(-1));", "+    ", "+    assertEquals(\"History size should still be 0\",", "+                 0,", "+                 _history.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d134b82a3ef4102af9c7b75f15be8ad0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": "    private void _updateToolbarButtons()", "signatureAfterChange": "    private void _updateToolbarButtons()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      Component[] buttons = _toolBar.getComponents();", "+    Component[] buttons = _toolBar.getComponents();", "+    ", "+    for (int i = 0; i< buttons.length; i++) {", "-      for (int i = 0; i< buttons.length; i++) {", "+      if (buttons[i] instanceof JButton) {", "-        if (buttons[i] instanceof JButton) {", "-          ", "-          JButton b = (JButton) buttons[i];", "-          Action a = b.getAction();", "+        JButton b = (JButton) buttons[i];", "+        Action a = b.getAction();", "-          // Work-around for strange configuration of undo/redo buttons", "-          /**if (a == null) {", "-            ActionListener[] al = b.getActionListeners(); // 1.4 only", "+        // Work-around for strange configuration of undo/redo buttons", "+        /**if (a == null) {", "+          ActionListener[] al = b.getActionListeners(); // 1.4 only", "-            for (int j=0; j<al.length; j++) {", "-              if (al[j] instanceof Action) {", "-                a = (Action) al[j];", "-                break;", "-              }", "+          for (int j=0; j<al.length; j++) {", "+            if (al[j] instanceof Action) {", "+              a = (Action) al[j];", "+              break;", "+          }", "-            */", "+          */", "-          Font toolbarFont = DrJava.CONFIG.getSetting(FONT_TOOLBAR);", "-          ", "-          b.setFont(toolbarFont);", "+        Font toolbarFont = DrJava.CONFIG.getSetting(FONT_TOOLBAR);", "+        b.setFont(toolbarFont);", "-            if (a==null) continue;", "-          //}", "+        if (a==null) continue;", "+        //}", "-          boolean iconsEnabled = DrJava.CONFIG.getSetting(TOOLBAR_ICONS_ENABLED).booleanValue();", "+        boolean iconsEnabled = DrJava.CONFIG.getSetting(TOOLBAR_ICONS_ENABLED).booleanValue();", "-          if (b.getIcon() == null) {", "-            if (iconsEnabled) {", "-              b.setIcon( (Icon) a.getValue(Action.SMALL_ICON));", "-            }", "+        if (b.getIcon() == null) {", "+          if (iconsEnabled) {", "+            b.setIcon( (Icon) a.getValue(Action.SMALL_ICON));", "-          else {", "-            if (!iconsEnabled && b.getText() != \"\") {", "-              b.setIcon(null);", "-            }", "-          }", "-          ", "-          boolean textEnabled = DrJava.CONFIG.getSetting(TOOLBAR_TEXT_ENABLED).booleanValue();", "-          ", "-          if (b.getText() == \"\") {", "-            if (textEnabled) {", "-              b.setText( (String) a.getValue(Action.DEFAULT));", "-            }", "-          }", "-          else {", "-            if (!textEnabled && b.getIcon() != null) {", "-              b.setText(\"\");", "-            }", "-          }", "-          ", "-          ", "+        else {", "+          if (!iconsEnabled && b.getText() != \"\") {", "+            b.setIcon(null);", "+          }", "+        }", "+          ", "+        boolean textEnabled = DrJava.CONFIG.getSetting(TOOLBAR_TEXT_ENABLED).booleanValue();", "+          ", "+        if (b.getText() == \"\") {", "+          if (textEnabled) {", "+            b.setText( (String) a.getValue(Action.DEFAULT));", "+          }", "+        }", "+        else {", "+          if (!textEnabled && b.getIcon() != null) {", "+            b.setText(\"\");", "+          }", "+        }", "+          ", "-    }   ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc378851927eb53a1b198b5dd7df31d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": "   private void _updateDefScrollRowHeader()", "signatureAfterChange": "   private void _updateDefScrollRowHeader()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {  // no line enumeration in stable", "-      boolean ruleEnabled = DrJava.CONFIG.getSetting(LINEENUM_ENABLED).booleanValue();", "-      ", "-      Iterator scrollPanes = _defScrollPanes.values().iterator();", "-      while (scrollPanes.hasNext()) {  ", "-        JScrollPane scroll = (JScrollPane) scrollPanes.next();", "-        if (scroll != null) {", "-          DefinitionsPane pane = (DefinitionsPane) scroll.getViewport().getView();", "-          if (scroll.getRowHeader() == null || scroll.getRowHeader().getView() == null) {", "-            if (ruleEnabled) {", "-              scroll.setRowHeaderView(new LineEnumRule(pane));", "-            }", "+    boolean ruleEnabled = DrJava.CONFIG.getSetting(LINEENUM_ENABLED).booleanValue();", "+    ", "+    Iterator scrollPanes = _defScrollPanes.values().iterator();", "+    while (scrollPanes.hasNext()) {  ", "+      JScrollPane scroll = (JScrollPane) scrollPanes.next();", "+      if (scroll != null) {", "+        DefinitionsPane pane = (DefinitionsPane) scroll.getViewport().getView();", "+        if (scroll.getRowHeader() == null || scroll.getRowHeader().getView() == null) {", "+          if (ruleEnabled) {", "+            scroll.setRowHeaderView(new LineEnumRule(pane));", "-          else {", "-            if (!ruleEnabled) {", "-              scroll.setRowHeaderView(null);", "-            }", "+        }", "+        else {", "+          if (!ruleEnabled) {", "+            scroll.setRowHeaderView(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4735e93e97d00d97206dcb5910d45b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringView.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public void updateColors()", "signatureAfterChange": "    public void updateColors()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      ", "-      COMMENTED_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_COMMENT_COLOR);", "-      DOUBLE_QUOTED_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_DOUBLE_QUOTED_COLOR);", "-      SINGLE_QUOTED_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_SINGLE_QUOTED_COLOR);", "-      NORMAL_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_NORMAL_COLOR);", "-      KEYWORD_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_KEYWORD_COLOR);", "-      NUMBER_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_NUMBER_COLOR);", "-      TYPE_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_TYPE_COLOR);", "-        ", "-      //Avoid the ColoringView that does not have a container.", "-      if ( getContainer() != null) {", "-        getContainer().repaint();", "-      }", "-      ", "+    COMMENTED_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_COMMENT_COLOR);", "+    DOUBLE_QUOTED_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_DOUBLE_QUOTED_COLOR);", "+    SINGLE_QUOTED_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_SINGLE_QUOTED_COLOR);", "+    NORMAL_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_NORMAL_COLOR);", "+    KEYWORD_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_KEYWORD_COLOR);", "+    NUMBER_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_NUMBER_COLOR);", "+    TYPE_COLOR = DrJava.CONFIG.getSetting(DEFINITIONS_TYPE_COLOR);", "+    ", "+    //Avoid the ColoringView that does not have a container.", "+    if ( getContainer() != null) {", "+      getContainer().repaint();", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd0b9e6f58fb47709224c9468d6ac2db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/FontOptionTest.java", "commitBeforeChange": "45f11437d24a95250c66e3a94437d7de4d6682c1", "commitAfterChange": "97bb3c70440590a053a3f2aff064ff2a0f94447e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testParse()", "signatureAfterChange": "      public void testParse()", "diff": ["-  public void testParse()", "-  {", "-    if (CodeStatus.DEVELOPMENT) {", "-      FontOption fo = new FontOption(\"font.test1\", Font.decode(null));", "-      ", "-      assertEquals(new Font(\"monospaced\", 0, 12), fo.parse(\"monospaced-PLAIN-12\"));", "-      assertEquals(new Font(\"sansserif\", 1, 10), fo.parse(\"sansserif-BOLD-10\"));", "-      assertEquals(new Font(\"sansserif\", 3, 10), fo.parse(\"sansserif-BOLDITALIC-10\"));", "-      ", "-      // Any failed parse attempts return some platform-dependent default font", "-      assertTrue(\"defaults to a font\", (fo.parse(\"true\") instanceof Font));", "-    }", "-", "+  public void testParse() {", "+    ", "+    FontOption fo = new FontOption(\"font.test1\", Font.decode(null));", "+    ", "+    assertEquals(new Font(\"monospaced\", 0, 12), fo.parse(\"monospaced-PLAIN-12\"));", "+    assertEquals(new Font(\"sansserif\", 1, 10), fo.parse(\"sansserif-BOLD-10\"));", "+    assertEquals(new Font(\"sansserif\", 3, 10), fo.parse(\"sansserif-BOLDITALIC-10\"));", "+    ", "+    // Any failed parse attempts return some platform-dependent default font", "+    assertTrue(\"defaults to a font\", (fo.parse(\"true\") instanceof Font));", "+    "]}], "num": 23039}
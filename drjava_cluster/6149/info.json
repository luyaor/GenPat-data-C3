{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdd7390ad13e2fcbf427dbb71d0bee4e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53670a86b0c896167bb8b5de0c86a1a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "d33d42f5f56aa9f97fa7ee5954a0170706bf34dc", "commitAfterChange": "d94a1a3c2d24d89ea1f580460a5e45b2a0d432b1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden)", "signatureAfterChange": "   private void _init(Component owner, final File root, boolean allowMultiple, boolean showHidden)", "diff": ["-  private void _init(Component owner, File root, boolean allowMultiple, boolean showHidden) {", "+  private void _init(Component owner, final File root, boolean allowMultiple, boolean showHidden) {", "-    if (root != null && ! root.isDirectory()) setCurrentDirectory(root.getAbsoluteFile().getParentFile());", "+    ", "+//    if (root != null && root.exists()) {", "+//      setFileView(new FileView() { ", "+//                    public Boolean isTraversable(File f) { ", "+//                      return Boolean.valueOf(f.isDirectory() && FileOps.isInFileTree(f, root)); ", "+//                    }});", "+//    }", "-    ", "+    _root = root; // may be null", "+    if (root != null) {", "+      if (! root.exists()) _root = null;", "+      else if (! root.isDirectory()) _root = root.getParentFile();", "+    }", "+", "-    setApproveButtonText(\"Choose\");", "+    setApproveButtonText(\"Select\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c00a88102f7be58f4b47b569cc62e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-  private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,", "-                                     boolean isError, List<File> files) {", "+  private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files) {", "-    /**", "-     * junit can come back with a string in two different formats:", "-     * so we'll parse both formats, and then decide which one to use", "-     */", "+    /** junit can return a string in two different formats; we parse both formats, and then decide which one to use. */", "-//    String ps = System.getProperty(\"file.separator\");", "-//    // replace periods with the System's file separator", "-//    className = StringOps.replace(className, \".\", ps);", "-//", "-//    // crop off the $ if there is one and anything after it", "-//    int indexOfDollar = className.indexOf('$');", "-//    if (indexOfDollar > -1) {", "-//      className = className.substring(0, indexOfDollar);", "-//    }", "-//", "-//    String filename = className + \".java\";", "-", "-    /**", "-     * if the classname is not in the stacktrace, then the test that", "-     * failed was inherited by a superclass. let's look for that classname", "+    /** If the classname is not in the stacktrace, then the test that failed was inherited from a superclass. let's look", "+     *  for that classname", "-      return new JUnitError(new File(\"nofile\"), 0,  //lineNum, ", "-                          0, exception, !isFailure, testName, className, stackTrace);", "+      return new JUnitError(new File(\"nofile\"), 0, 0, exception, !isFailure, testName, className, stackTrace);", "-    //The conditional has been added because of the augmented code in the .dj0 files - it causes the error to be highlighted on the wrong line", "-    //At the elementary level it should always be off by one", "-    //NOTE: this presupposes that ", "-    return new JUnitError(file, (file.getName().endsWith(\".dj0\") ? lineNum-1 : lineNum),  //lineNum, ", "-                          0, exception, !isFailure, testName, className, stackTrace);", "+    // The code augmentation for elementary and intermediate level files causes the error to be highlighted on", "+    // the wrong line.  The following code adjusts for this discrepancy.", "+    String name = file.getName();", "+    int adjLineNum;", "+    if (name.endsWith(\".dj0\") || name.endsWith(\".dj0\")) adjLineNum = lineNum - 1;", "+    else adjLineNum = lineNum;", "+    ", "+    return new JUnitError(file, adjLineNum, 0, exception, !isFailure, testName, className, stackTrace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff5013057784971d575506ee05c749bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void setSearchBackwards(boolean searchBackwards)", "signatureAfterChange": "    public void setSearchBackwards(boolean searchBackwards)", "diff": ["+  public void setSearchBackwards(boolean searchBackwards) {", "+    if (_searchBackwards != searchBackwards) {", "+      // If we switch from searching forward to searching backwards or viceversa,", "+      // isOnMatch is true, and _findword is the same as the _lastFindWord,", "+      // we know the user just found _findWord, so skip one find.", "+      if (isOnMatch() && _findWord.equals(_lastFindWord))  _skipOneFind = true;", "+      else _skipOneFind = false;", "+    _searchBackwards = searchBackwards;", "+  }", "-    public void setSearchBackwards(boolean searchBackwards) { _state.setSearchBackwards(searchBackwards); }"]}], "num": 6149}
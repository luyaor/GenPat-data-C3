{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b697c2765c8b17e613a84bcd335f63e2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0305de4f03a14d72bec383d3902be0df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isCompatible(Class c1, Class c2)", "diff": ["+    return isBoxCompatible(c1, c2, Float.valueOf(System.getProperty(\"java.specification.version\")) >= 1.5);", "+    ", "+    /** Commented by Jonathan Lugo 2004-05-18.  Code moved to isBoxCompatible**/", "+//    if (c1.isPrimitive()) {", "+//      if (c1 != c2) {", "+//        if (c1 == int.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == char.class);", "+//        } ", "+//        else if (c1 == long.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == int.class);", "+//        } ", "+//        else if (c1 == short.class) {", "+//          return c2 == byte.class;", "+//        } ", "+//        else if (c1 == float.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == int.class   ||", "+//                  c2 == long.class);", "+//        } ", "+//        else if (c1 == double.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == int.class   ||", "+//                  c2 == long.class  ||", "+//                  c2 == float.class);", "+//        } ", "+//        else { // it's a boolean && c1 != c2", "+//          return false;", "+//        }", "+//      }", "+//      else { // c1 == c2", "+//        return true;", "+//      }", "+//    } ", "+//    else { // It's a reference type", "+//      return (c2 == null) ? true : c1.isAssignableFrom(c2);", "+//    }", "+  }", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == char.class;", "-        } else if (c1 == long.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class;", "-        } else if (c1 == short.class) {", "-        } else if (c1 == float.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class;", "-        } else if (c1 == double.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class  ||", "-            c2 == float.class;", "-        } else {", "-      } else {", "-    } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "724c9cbc2dea1f4b61a05fba29cbb00c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "8f229bab538b43dd12abaa1c01f1cf3b469a6628", "commitAfterChange": "dc0befa68595a5c499b8803df615b4dd1cb06eb6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static boolean boxesTo(Class prim, Class ref)", "signatureAfterChange": "     public static boolean boxesTo(Class prim, Class ref)", "diff": ["-      (prim == int.class     && (ref == Integer.class   || ", "-                                 ref == Long.class      || ", "-                                 ref == Double.class    || ", "-                                 ref == Float.class))   ||", "-      (prim == long.class    && (ref == Long.class      || ", "-                                 ref == Double.class    || ", "-                                 ref == Float.class))   ||", "-      (prim == byte.class    && (ref == Byte.class      || ", "-                                 ref == Short.class     || ", "-                                 ref == Integer.class   || ", "-                                 ref == Long.class      || ", "-                                 ref == Double.class    || ", "-                                 ref == Float.class))   ||", "-      (prim == char.class    && (ref == Character.class || ", "-                                 ref == Integer.class   || ", "-                                 ref == Long.class      || ", "-                                 ref == Double.class    || ", "-                                 ref == Float.class))   ||", "-      (prim == short.class   && (ref == Short.class     || ", "-                                 ref == Integer.class   || ", "-                                 ref == Long.class      || ", "-                                 ref == Double.class    || ", "-                                 ref == Float.class))   ||", "-      (prim == boolean.class && ref == Boolean.class)   ||", "-      (prim == float.class   && (ref == Float.class     || ", "-                                 ref == Double.class))  ||", "-      (prim == double.class  && ref == Double.class);", "+      ((prim == int.class    && ref == Integer.class)     ||", "+      (prim == long.class    && ref == Long.class)        ||", "+      (prim == byte.class    && ref == Byte.class)        ||", "+      (prim == char.class    && ref == Character.class)   ||", "+      (prim == short.class   && ref == Short.class)       ||", "+      (prim == boolean.class && ref == Boolean.class)     ||", "+      (prim == float.class   && ref == Float.class)       ||", "+      (prim == double.class  && ref == Double.class));"]}], "num": 2902}
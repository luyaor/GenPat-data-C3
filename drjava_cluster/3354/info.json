{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67ee1de0d517600ded47ec824069fd45", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea40d272c03edf3ffad78df9cb40bfb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionEvaluator.java", "commitBeforeChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "commitAfterChange": "b5cc61b9509dcda722d6dd7d5605a055e9915381", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "      @Override public Box<Object> visit(SimpleFieldAccess node)", "signatureAfterChange": "      @Override public Box<Object> visit(SimpleFieldAccess node)", "diff": ["-      return getField(node).boxForReceiver(_bindings.getThis(getDJClass(node)));", "+      Object receiver = hasDJClass(node) ? _bindings.getThis(getDJClass(node)) : null;", "+      return getField(node).boxForReceiver(receiver);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5303ea9f616173b576dd934c9dae8c89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected synchronized void _ensureReady() throws DebugException", "signatureAfterChange": "   protected synchronized void _ensureReady() throws DebugException", "diff": ["-      throw new DebugException(\"Error in Debugger Event Handler: \" +", "-                               _eventHandlerError);", "+      Throwable t = _eventHandlerError;", "+      _eventHandlerError = null;", "+      throw new DebugException(\"Error in Debugger Event Handler: \" + t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae8c834299bb30c95a7f576b0ecad21c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "b0d972d74202b06a8aec19804a46939a0aac3bf3", "commitAfterChange": "f81eb3cdab335666760ab0cb868fe3567723e9df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public boolean addEdit(UndoableEdit e)", "signatureAfterChange": "   public boolean addEdit(UndoableEdit e)", "diff": ["-      return super.addEdit(e);", "+      boolean result = super.addEdit(e);", "+      _notifyUndoHappened();", "+      return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7512bec349680f82ffdf4c910b1bcad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "a24082414064ecb42431a2e612770e1ab3e9fefa", "commitAfterChange": "b2a145d8d3ea1ad947e0937f542b0780baf31d45", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public Type check(TypeName t)", "signatureAfterChange": "   public Type check(TypeName t)", "diff": ["+  /** Get the type corresponding to {@code t}; verify that it is well-formed. */", "+    Type result = t.acceptVisitor(visitor);", "+    ensureWellFormed(t);", "+    return result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9aff973689b9ade1b9a9fcf99f6e75e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "98199cff1a4c3f1ef86520681f1e57a0f8ce3066", "commitAfterChange": "70e840b0f758fadcf27d7a77218d5182a9597a0d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["+      boolean initialized = (node.getInitializer() != null);", "-      LocalVariable v = new LocalVariable(node.getName(), t, node.getModifiers().isFinal());", "+      LocalVariable v = new LocalVariable(node.getName(), t, initialized && node.getModifiers().isFinal());", "-      if (node.getInitializer() != null) {", "+      if (initialized) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8567f8e867c4c77215b76ab7863a6b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "commitAfterChange": "739371db1261b11c3be5fd70233012a49b45b7ca", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     @Override public Type visit(AddExpression node)", "signatureAfterChange": "     @Override public Type visit(AddExpression node)", "diff": ["-          return setType(node, TypeSystem.STRING);", "+          setType(node, TypeSystem.STRING);", "+          evaluateConstantExpression(node);", "+          return TypeSystem.STRING;", "-          return setType(node, getType(promoted.first()));", "+          Type result = setType(node, getType(promoted.first()));", "+          evaluateConstantExpression(node);", "+          return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb35d0b96cfc1a79bf1fe9e27de8f2a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "a24082414064ecb42431a2e612770e1ab3e9fefa", "commitAfterChange": "b2a145d8d3ea1ad947e0937f542b0780baf31d45", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public Iterable<Type> checkList(Iterable<? extends TypeName> l)", "signatureAfterChange": "   public Iterable<Type> checkList(Iterable<? extends TypeName> l)", "diff": ["+  /** Invoke {@link #check} on each element of a list. */", "-    return IterUtil.mapSnapshot(l, visitor);", "+    Iterable<Type> result = IterUtil.mapSnapshot(l, visitor);", "+    ensureWellFormedList(l);", "+    return result;"]}], "num": 3354}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc78eb79baad872dd406cfbcc80cd0f2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8c426517b643060f67a6a762b0de94f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": "               public void testForComplexThisReferenceOnly()", "signatureAfterChange": "               public void testForComplexThisReferenceOnly()", "diff": ["-      ComplexThisReference ctr = new ComplexThisReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"context\")));", "+      ComplexThisReference ctr = ", "+        new ComplexThisReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"context\")));", "-      //if enclosing_result is null, return null", "+      // if enclosing_result is null, return null", "-      ", "-      //if enclosing result is a PackageData, give appropriate error and return null", "+      // if enclosing result is a PackageData, give appropriate error and return null", "-      //if enclosing_result is not an outer data of the current context, give an error", "+      // if enclosing_result is not an outer data of the current context, give an error", "-      ", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"You cannot reference context.this from here, because context is not an outer class of i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"You cannot reference context.this from here, \"", "+                     + \"because context is not an outer class of i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      //if enclosing_result is an outer data of current context, everything is peachy", "+      // if enclosing_result is an outer data of current context, everything is peachy", "-      ", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      //if we are in a static method, throw appropriate error", "+      // if we are in a static method, throw appropriate error", "-      ", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      assertEquals(\"The error message should be correct\", \"'this' cannot be referenced from within a static method\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", \"'this' cannot be referenced from within a static method\", ", "+                   errors.getLast().getFirst());", "-      //if the enclosing result is an instance type, throw an error", "+      // if the enclosing result is an instance type, throw an error", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass.getInstanceData()));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass.getInstanceData()));", "-      assertEquals(\"The error message should be correct\", \"'this' can only be referenced from a type name, but you have specified an instance of that type.\", errors.getLast().getFirst());", "-      ", "-      ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"'this' can only be referenced from a type name, but you have specified an instance of that type.\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), _etc.forComplexThisReferenceOnly(ctr, contextClass));", "+      assertEquals(\"Should return instance of this\", contextClass.getInstanceData(), ", "+                   _etc.forComplexThisReferenceOnly(ctr, contextClass));", "-      assertEquals(\"Error message should be correct\", \"You cannot reference context.this from here, because i.like.monkey or one of its enclosing classes is static.  Thus, an enclosing instance of context does not exist\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference context.this from here, because i.like.monkey or one of its enclosing \"", "+                     + \"classes is static.  Thus, an enclosing instance of context does not exist\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb47b315d240048e5558e64e8e30c399", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "                    public void testForNumericUnaryExpressionOnly()", "signatureAfterChange": "                    public void testForNumericUnaryExpressionOnly()", "diff": ["-      NumericUnaryExpression nue = new PositiveExpression(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      NumericUnaryExpression nue = new PositiveExpression(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BYTE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BYTE_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.INT_TYPE));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric unary operator (+, -) with int, because it is a class name, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric unary operator (+, -) with int, because it is a class name, \"", "+                     + \"not an instance.  Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forNumericUnaryExpressionOnly(nue, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"You cannot apply this unary operator to something of type boolean.  You can only apply it to a numeric type such as double, int, or char\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot apply this unary operator to something of type boolean.  You can only apply it \"", "+                     + \"to a numeric type such as double, int, or char\", errors.getLast().getFirst());"]}], "num": 16477}
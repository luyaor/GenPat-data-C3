{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd7a2575ec9215caad71495c586ae8b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3608fca7f66e0a4792a7ff5981c7a95c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   private int _findKeywordAtToplevel(String keyword, String text, int textOffset)", "signatureAfterChange": "   private int _findKeywordAtToplevel(String keyword, String text, int textOffset)", "diff": ["-   */", "-  private int _findKeywordAtToplevel(String keyword, String text, int textOffset) {", "-      int oldLocation = getCurrentLocation();", "-      ", "-      int index = 0;", "-      ", "-      while (true) {", "-        index = text.indexOf(keyword, index);", "-        if (index == -1) break; // not found", "-          // found a match, check quality", "-          setCurrentLocation(textOffset + index);", "-          ", "-          // check that the keyword is not in a comment and is followed by whitespace", "-          ReducedToken rt = _reduced.currentToken();", "-          int indexPastKeyword = index + keyword.length();", "-          if (indexPastKeyword < text.length()) {", "-            if (rt.getState() == ReducedModelStates.FREE &&", "-                Character.isWhitespace(text.charAt(indexPastKeyword))) {", "-              // found a match but may not be at top level", "-              if (!posNotInBlock(index)) index = -1; //in a paren phrase, gone too far", "-              break;", "-            }", "-            else index++;  //move past so we can search again", "-          }", "-          else { // No space found past the keyword", "-            index = -1;", "-      setCurrentLocation(oldLocation);", "-      return index;", "+  private int _findKeywordAtToplevel(String keyword, String text, int textOffset) {", "+    ", "+    readLock();", "+    synchronized (_reduced) {", "+      int oldLocation = _currentLocation;", "+      int index = 0;", "+      try {", "+        while (true) {", "+          index = text.indexOf(keyword, index);", "+          if (index == -1) break; // not found", "+          else {", "+            // found a match, check quality", "+            setCurrentLocation(textOffset + index);", "+            ", "+            // check that the keyword is not in a comment and is followed by whitespace", "+            ReducedToken rt = _reduced.currentToken();", "+            int indexPastKeyword = index + keyword.length();", "+            if (indexPastKeyword < text.length()) {", "+              if (rt.getState() == ReducedModelStates.FREE &&", "+                  Character.isWhitespace(text.charAt(indexPastKeyword))) {", "+                // found a match but may not be at top level", "+                if (!posNotInBlock(index)) index = -1; //in a paren phrase, gone too far", "+                break;", "+              }", "+              else index++;  //move past so we can search again", "+            }", "+            else { // No space found past the keyword", "+              index = -1;", "+              break;", "+            }", "+          }", "+        }", "+        setCurrentLocation(oldLocation);", "+        return index;", "+      }", "+      finally { readUnlock(); }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc6e463711c197f5f928be07626a8322", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private synchronized int _findKeywordAtToplevel(String keyword,                                                   String text,                                                   int textOffset)", "signatureAfterChange": "   private int _findKeywordAtToplevel(String keyword,                                                   String text,                                                   int textOffset)", "diff": ["-  private synchronized int _findKeywordAtToplevel(String keyword,", "+  private int _findKeywordAtToplevel(String keyword,", "-    throwErrorHuh();", "-    int oldLocation = getCurrentLocation();", "-", "-    int index = 0;", "-    boolean done = false;", "-", "-    while (!done) {", "-      index = text.indexOf(keyword, index);", "-      if (index == -1) {  //not found", "-        done = true;", "-        break;", "-      }", "-      else {", "-        //found a match, check quality", "-        setCurrentLocation(textOffset + index);", "-", "-        // check that the keyword is not in a comment and is followed by whitespace", "-        ReducedToken rt = _reduced.currentToken();", "-        int indexPastKeyword = index + keyword.length();", "-        if (indexPastKeyword < text.length()) {", "-          if (rt.getState() == ReducedModelStates.FREE &&", "-              Character.isWhitespace(text.charAt(indexPastKeyword))) {", "-            //if (!_isCommentedOrSpace(index,text)) {", "-            done = true;", "-            if (!posNotInBlock(index)) { //in a paren phrase, gone too far", "-              index = -1;", "+    // throwErrorHuh();", "+    ", "+    synchronized (_reduced) {", "+      int oldLocation = getCurrentLocation();", "+      ", "+      int index = 0;", "+      boolean done = false;", "+      ", "+      while (!done) {", "+        index = text.indexOf(keyword, index);", "+        if (index == -1) {  //not found", "+          done = true;", "+          break;", "+        }", "+        else {", "+          //found a match, check quality", "+          setCurrentLocation(textOffset + index);", "+          ", "+          // check that the keyword is not in a comment and is followed by whitespace", "+          ReducedToken rt = _reduced.currentToken();", "+          int indexPastKeyword = index + keyword.length();", "+          if (indexPastKeyword < text.length()) {", "+            if (rt.getState() == ReducedModelStates.FREE &&", "+                Character.isWhitespace(text.charAt(indexPastKeyword))) {", "+              //if (!_isCommentedOrSpace(index,text)) {", "+              done = true;", "+              if (!posNotInBlock(index)) { //in a paren phrase, gone too far", "+                index = -1;", "+              }", "+            }", "+            else {", "+              index++;  //move past so we can search again", "-            index++;  //move past so we can search again", "+            // No space found past the keyword", "+            index = -1;", "+            done = true;", "-        else {", "-          // No space found past the keyword", "-          index = -1;", "-          done = true;", "-        }", "+      setCurrentLocation(oldLocation);", "+      return index;", "-    setCurrentLocation(oldLocation);", "-    return index;"]}], "num": 17478}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1afc652774a7698a4d7ad5a70135e116", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ab7f114b90e4c1018fe61aa8a6a3c03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "df2b79c4755a48b6d68cea0053ee5b504fa8b5d0", "commitAfterChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 134, "signatureBeforeChange": "   void initCompleteWordDialog()", "signatureAfterChange": "   void initCompleteWordDialog()", "diff": ["-            List<GoToFileListEntry> l = _completeWordDialog.getList();", "+            List<ClassNameAndPackageEntry> l = _completeWordDialog.getList();", "-            List<GoToFileListEntry> l = _completeWordDialog.getList();", "-            List<GoToFileListEntry> n = new ArrayList<GoToFileListEntry>();", "-            for(GoToFileListEntry entry: l) {", "-              if (!(entry instanceof NoDocumentFileListEntry)) { n.add(entry); }", "+            List<ClassNameAndPackageEntry> l = _completeWordDialog.getList();", "+            generateJavaAPIList();", "+            if (_javaAPIList==null) {", "+              DrJava.getConfig().setSetting(OptionConstants.DIALOG_COMPLETE_JAVAAPI, Boolean.FALSE);", "+              _completeJavaAPICheckbox.setSelected(false);", "+              _completeJavaAPICheckbox.setEnabled(false);", "+              List<ClassNameAndPackageEntry> n = new ArrayList<ClassNameAndPackageEntry>();", "+              for(ClassNameAndPackageEntry entry: l) {", "+                if (!(entry instanceof JavaAPIListEntry)) { n.add(entry); }", "+              }", "+              _completeWordDialog.setItems(true,n);", "-            _completeWordDialog.setItems(true,n);", "+            else {", "+              for(JavaAPIListEntry entry: _javaAPIList) { l.remove(entry); }", "+              _completeWordDialog.setItems(true,l);", "+            }", "-      PredictiveInputFrame.InfoSupplier<GoToFileListEntry> info = ", "-        new PredictiveInputFrame.InfoSupplier<GoToFileListEntry>() {", "-        public String apply(GoToFileListEntry entry) {", "+      PredictiveInputFrame.InfoSupplier<ClassNameAndPackageEntry> info = ", "+        new PredictiveInputFrame.InfoSupplier<ClassNameAndPackageEntry>() {", "+        public String apply(ClassNameAndPackageEntry entry) {", "-          sb.append(entry.toString());", "+          sb.append(entry.getClassName());", "-      PredictiveInputFrame.CloseAction<GoToFileListEntry> okAction = new PredictiveInputFrame.CloseAction<GoToFileListEntry>() {", "+      PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry> okAction =", "+        new PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>() {", "-        public Object apply(PredictiveInputFrame<GoToFileListEntry> p) {", "+        public Object apply(PredictiveInputFrame<ClassNameAndPackageEntry> p) {", "-                odd.insertString(start, p.getItem().toString(), null);", "+                odd.insertString(start, p.getItem().getClassName(), null);", "-      PredictiveInputFrame.CloseAction<GoToFileListEntry> fullAction = new PredictiveInputFrame.CloseAction<GoToFileListEntry>() {", "+      PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry> fullAction =", "+        new PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>() {", "-        public Object apply(PredictiveInputFrame<GoToFileListEntry> p) {", "+        public Object apply(PredictiveInputFrame<ClassNameAndPackageEntry> p) {", "-                sb.append(p.getItem().toString());", "+                sb.append(p.getItem().getClassName());", "-      PredictiveInputFrame.CloseAction<GoToFileListEntry> cancelAction = ", "-        new PredictiveInputFrame.CloseAction<GoToFileListEntry>() {", "+      PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry> cancelAction = ", "+        new PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>() {", "-        public Object apply(PredictiveInputFrame<GoToFileListEntry> p) {", "+        public Object apply(PredictiveInputFrame<ClassNameAndPackageEntry> p) {", "-      java.util.ArrayList<PredictiveInputModel.MatchingStrategy<GoToFileListEntry>> strategies =", "-        new java.util.ArrayList<PredictiveInputModel.MatchingStrategy<GoToFileListEntry>>();", "-      strategies.add(new PredictiveInputModel.FragmentStrategy<GoToFileListEntry>());", "-      strategies.add(new PredictiveInputModel.PrefixStrategy<GoToFileListEntry>());", "-      strategies.add(new PredictiveInputModel.RegExStrategy<GoToFileListEntry>());", "-      List<PredictiveInputFrame.CloseAction<GoToFileListEntry>> actions", "-        = new ArrayList<PredictiveInputFrame.CloseAction<GoToFileListEntry>>();", "+      java.util.ArrayList<PredictiveInputModel.MatchingStrategy<ClassNameAndPackageEntry>> strategies =", "+        new java.util.ArrayList<PredictiveInputModel.MatchingStrategy<ClassNameAndPackageEntry>>();", "+      strategies.add(new PredictiveInputModel.FragmentStrategy<ClassNameAndPackageEntry>());", "+      strategies.add(new PredictiveInputModel.PrefixStrategy<ClassNameAndPackageEntry>());", "+      strategies.add(new PredictiveInputModel.RegExStrategy<ClassNameAndPackageEntry>());", "+      List<PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>> actions", "+        = new ArrayList<PredictiveInputFrame.CloseAction<ClassNameAndPackageEntry>>();", "-        new PredictiveInputFrame<GoToFileListEntry>(MainFrame.this,", "-                                                    \"Auto-Complete Word\",", "-                                                    true, // force", "-                                                    true, // ignore case", "-                                                    info,", "-                                                    strategies,", "-                                                    actions,", "-                                                    new GoToFileListEntry(null, \"dummy\")) {", "+        new PredictiveInputFrame<ClassNameAndPackageEntry>(MainFrame.this,", "+                                                           \"Auto-Complete Word\",", "+                                                           true, // force", "+                                                           true, // ignore case", "+                                                           info,", "+                                                           strategies,", "+                                                           actions,", "+                                                           new GoToFileListEntry(new DummyOpenDefDoc() {", "+        public String getPackageNameFromDocument() { return \"\"; }", "+      }, \"dummyComplete\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef239ad875a1bf861784fe6e74789c0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "commitAfterChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public Object[] getVariable(String var)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public Pair<Object,String>[] getVariable(String var)", "diff": ["-  public Object[] getVariable(String var) {", "+    */", "+  @SuppressWarnings(\"unchecked\")", "+  public Pair<Object,String>[] getVariable(String var) {", "-    return ir.apply(new InterpretResult.Visitor<Object[]>() {", "-      public Object[] forNoValue() { return new Object[0]; }", "-      public Object[] forStringValue(String val) { return new Object[] { val }; }", "-      public Object[] forCharValue(Character val) { return new Object[] { val }; }", "-      public Object[] forNumberValue(Number val) { return new Object[] { val }; }", "-      public Object[] forBooleanValue(Boolean val) { return new Object[] { val }; }", "-      public Object[] forObjectValue(String valString) { return new Object[] { valString }; }", "-      public Object[] forException(String message) { return new Object[0]; }", "-      public Object[] forEvalException(String message, StackTraceElement[] stackTrace) { return new Object[0]; }", "-      public Object[] forUnexpectedException(Throwable t) { return new Object[0]; }", "-      public Object[] forBusy() { return new Object[0]; }", "+    return ir.apply(new InterpretResult.Visitor<Pair<Object,String>[]>() {", "+        public Pair<Object,String>[] fail() { return new Pair[0]; }", "+        public Pair<Object,String>[] value(Object val) {", "+          return new Pair[] { new Pair<Object,String>(val, getClassName(val.getClass())) };", "+        }", "+        public Pair<Object,String>[] forNoValue() { return fail(); }", "+        public Pair<Object,String>[] forStringValue(String val) { return value(val); }", "+        public Pair<Object,String>[] forCharValue(Character val) { return value(val); }", "+        public Pair<Object,String>[] forNumberValue(Number val) { return value(val); }", "+        public Pair<Object,String>[] forBooleanValue(Boolean val) { return value(val); }", "+        public Pair<Object,String>[] forObjectValue(String valString, String objTypeString) {", "+            return new Pair[] { new Pair<Object,String>(valString, objTypeString) }; }", "+        public Pair<Object,String>[] forException(String message) { return fail(); }", "+        public Pair<Object,String>[] forEvalException(String message, StackTraceElement[] stackTrace) { return fail(); }", "+        public Pair<Object,String>[] forUnexpectedException(Throwable t) { return fail(); }", "+        public Pair<Object,String>[] forBusy() { return fail(); }"]}], "num": 10291}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0730c37e1af9ed4bb7e437726f88e6f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c09a94afbe28ca6592387ba58d83f90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "diff": ["-   */", "+    */", "-    if (assertInstanceType(value_result, \"You cannot use the not (!) operator with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "-        !value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+    if (assertInstanceType(value_result, ", "+                           \"You cannot use the not (!) operator with \" + value_result.getName() + ", "+                           \", because it is a class name, not an instance\", that) &&", "+        ! value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, ", "+                                                      JAVA_VERSION)) {", "-      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + \". Instead, it should be used with an expression of boolean type\", that);", "+      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + ", "+                \". Instead, it should be used with an expression of boolean type\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b47463203fd0f1d930af0e974e1f08f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "diff": ["-   */", "+    */", "-      _addError(\"You are trying to cast to an instance of a type, which is not allowed.  Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);", "+      _addError(\"You are trying to cast to an instance of a type, which is not allowed.  \" + ", "+                \"Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);", "-    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + \", which is a class or interface type, not an instance\", that) &&", "-             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "+    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + ", "+                                \", which is a class or interface type, not an instance\", that) &&", "+             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), ", "+                                                        JAVA_VERSION)) {", "-      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + type_result.getName() + \" because they are not related\", that);", "+      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + ", "+                type_result.getName() + \" because they are not related\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20d0c715afd7a88793961f47f500a99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "diff": ["-    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "-        !value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + ", "+                           \", because it is a class name, not an instance\", that) &&", "+        !value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + \".  You can only apply it to a numeric type such as double, int, or char\", that);", "+      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + ", "+                \".  You can only apply it to a numeric type such as double, int, or char\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5cbe0243bbd704dc940604cb132d681", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "diff": ["-   */", "+    */", "-    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + \", because it is a class name not an instance\", that)) {", "-      if (!value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + value_result.getName(), that);", "+    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + ", "+                           \", because it is a class name not an instance\", that)) {", "+      if (!value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+        _addError(\"You cannot increment or decrement something that is not a number type.\" + ", "+                  \"  You have specified something of type \" + value_result.getName(), that);"]}], "num": 15266}
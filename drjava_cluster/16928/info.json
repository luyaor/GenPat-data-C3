{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67d34daa7f3ed1d3462e8c00bdab91cb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8531bd265332306cba36c93c3c7d93a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewJavaClassDialog.java", "commitBeforeChange": "6207c0d4b83ee23d6d4624c513f270e47c43cc83", "commitAfterChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 24, "signatureBeforeChange": "   static String createClassNameDecleration(String accessMod, String modifier, String name,                                             String superclass, String interfaces)", "signatureAfterChange": "      static String getClassDeclaration(String accessMod, String modifier, String name,                                             String superclass, String interfaces,                                            boolean elementaryOrFunctionalJava)", "diff": ["-  //newclass addition", "-  static String createClassNameDecleration(String accessMod, String modifier, String name, ", "-                                           String superclass, String interfaces) {", "+  static String getClassDeclaration(String accessMod, String modifier, String name, ", "+                                           String superclass, String interfaces,", "+                                           boolean elementaryOrFunctionalJava) {", "-    sb.append(getModifier(accessMod));", "-    sb.append(getModifier(modifier));", "+    if (!elementaryOrFunctionalJava) {", "+      sb.append(getModifier(accessMod));", "+      sb.append(getModifier(modifier));", "+    }", "-      sb.append(capitalizeClassName(name)); ", "+      sb.append(getCapitalizedClassName(name)); ", "-      sb.append(capitalizeClassName(superclass));", "+      sb.append(getCapitalizedSuperClassName(superclass));", "-      sb.append(capitalizeInterfacesNames(interfaces));", "+      sb.append(getCapitalizedInterfacesNames(interfaces));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0136b15c4a8011a5f68fefc8eda4603", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewJavaClassDialog.java", "commitBeforeChange": "6207c0d4b83ee23d6d4624c513f270e47c43cc83", "commitAfterChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public static String createClassContent(String accessMod, String modifier, String className,                                            boolean mainMethod, boolean classConstructor, String inheritance,                                            String interfaces)", "signatureAfterChange": "      public static String getClassContent(String accessMod, String modifier, String className,                                         boolean mainMethod, boolean classConstructor, String inheritance,                                         String interfaces,                                        boolean elementaryOrFunctionalJava)", "diff": ["-  public static String createClassContent(String accessMod, String modifier, String className, ", "-                                          boolean mainMethod, boolean classConstructor, String inheritance, ", "-                                          String interfaces){", "+  public static String getClassContent(String accessMod, String modifier, String className, ", "+                                       boolean mainMethod, boolean classConstructor, String inheritance, ", "+                                       String interfaces,", "+                                       boolean elementaryOrFunctionalJava) {", "-    sb.append(\"* Auto Generated Java Class.\\n\");", "+    if (elementaryOrFunctionalJava) {", "+      sb.append(\"* Auto Generated Java Language Level Class.\\n\");", "+    }", "+    else {", "+      sb.append(\"* Auto Generated Java Class.\\n\");", "+    }", "-    sb.append(createClassNameDecleration(accessMod, modifier, className, inheritance, interfaces));", "+    sb.append(getClassDeclaration(accessMod, modifier, className, inheritance, interfaces,", "+                                  elementaryOrFunctionalJava));", "-    if(classConstructor) {", "-      sb.append(\"public \" + capitalizeClassName(className) + \"() { \\n\");", "+    if(classConstructor && !elementaryOrFunctionalJava) {", "+      sb.append(\"public \" + getCapitalizedClassName(className) + \"() { \\n\");", "-    if(mainMethod) {", "+    if(mainMethod && !elementaryOrFunctionalJava) {"]}], "num": 16928}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "502940b582cef4843ba65e4576f8bf5a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813efdaf207d6e6e503fb5c6b8944132", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "58507a81b298eda1c95791a37194e9f75288a8af", "commitAfterChange": "d752877ce93bbc024f3929677c06eafffafcc3e8", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": "   private void _insertVariableCommand()", "signatureAfterChange": "   private void _insertVariableCommand()", "diff": ["-    ", "+    _windowListenerActive = false;", "+    _insertVarDialogMonitor.reset();", "+    _insertVarDialog.setVisible(true);", "+    // start a new thread to wait for the dialog to finish", "+    // this waiting cannot happen in the event thread, as that would block the other dialog", "+    new Thread(new Runnable() {", "+      public void run() {", "+        _insertVarDialogMonitor.waitOne();", "+        // dialog has finished, figure out the results in the event thread", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            SwingUtilities.invokeLater(new Runnable() {", "+              public void run() {", "+                ExecuteExternalDialog.this.toFront();", "+              }", "+            });", "+            _windowListenerActive = true;", "+            edu.rice.cs.plt.tuple.Pair<String,String> selected = _insertVarDialog.getSelected();", "+            if (selected!=null) {", "+              String text = _commandLine.getText();", "+              Caret caret = _commandLine.getCaret();", "+              int min = Math.min(caret.getDot(), caret.getMark());", "+              int max = Math.max(caret.getDot(), caret.getMark());", "+              if (min!=max) {", "+                text = text.substring(0, min) + text.substring(max);", "+              }", "+              text = text.substring(0,min) + \"%\" + selected.first() + \"%\" + text.substring(min);", "+              _commandLine.setText(text);", "+              caret.setDot(min+selected.first().length()+2);", "+              _commandLine.setCaret(caret);", "+            }", "+          }", "+        });", "+      }", "+    }).start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820ec5fea6973030c39c26fc129b5a91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "58507a81b298eda1c95791a37194e9f75288a8af", "commitAfterChange": "d752877ce93bbc024f3929677c06eafffafcc3e8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 58, "signatureBeforeChange": "   private void _insertVariableJava()", "signatureAfterChange": "   private void _insertVariableJava()", "diff": ["-    ", "+    _windowListenerActive = false;", "+    _insertVarDialogMonitor.reset();", "+    _insertVarDialog.setVisible(true);", "+    // start a new thread to wait for the dialog to finish", "+    // this waiting cannot happen in the event thread, as that would block the other dialog", "+    new Thread(new Runnable() {", "+      public void run() {", "+        _insertVarDialogMonitor.waitOne();", "+        // dialog has finished, figure out the results in the event thread", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            SwingUtilities.invokeLater(new Runnable() {", "+              public void run() {", "+                ExecuteExternalDialog.this.toFront();", "+              }", "+            });", "+            _windowListenerActive = true;", "+            edu.rice.cs.plt.tuple.Pair<String,String> selected = _insertVarDialog.getSelected();", "+            if (selected!=null) {", "+              String text = _lastJavaFocus.getText();", "+              Caret caret = _lastJavaFocus.getCaret();", "+              int min = Math.min(caret.getDot(), caret.getMark());", "+              int max = Math.max(caret.getDot(), caret.getMark());", "+              if (min!=max) {", "+                text = text.substring(0, min) + text.substring(max);", "+              }", "+              text = text.substring(0,min) + \"%\" + selected.first() + \"%\" + text.substring(min);", "+              _lastJavaFocus.setText(text);", "+              caret.setDot(min+selected.first().length()+2);", "+              _lastJavaFocus.setCaret(caret);", "+            }", "+          }", "+        });", "+      }", "+    }).start();"]}], "num": 28515}
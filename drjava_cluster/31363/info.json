{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a4799836582980e70b92c19c27424f9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49e63ac75ecab9117a03690c215beafe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "4d3fa64499badc01be2d089cba1394a47c2f30de", "commitAfterChange": "ed48d6b9cb86b6e63d0852d1106c5aba17823c84", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "signatureAfterChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "diff": ["+    // test6() -> method not found", "+    try {", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test6\", new Class[]{});", "+      fail(\"test6() didn't throw a NoSuchMethodException\");", "+    }", "+    catch(NoSuchMethodException e) { }", "+      ", "+    // java.util.Arrays.asList(Object...) with Integer[]", "+    m = ReflectionUtilities.lookupMethod(java.util.Arrays.class, \"asList\", new Class[]{Integer[].class});", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66497cc001b8a16f0d2672dc240bd23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "e3e15711ffe62e7b19032f1eefe26e2aca48b4e2", "commitAfterChange": "816e415ebd3619964409d5b7c5a5d20fa993a7b5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "signatureAfterChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "diff": ["+    ", "+    // test5(ONE) -> test5(int,int...)", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test7\", new Class[]{Integer.class});", "+    result = ((Integer)m.invoke(null, new Object[]{ONE})).intValue();", "+    assertEquals(\"lookup with test5 ound wrong method\", TestClass.test5(new Integer(1)), result);"]}], "num": 31363}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "924d5c2ab9037898882f43bfb69ae968", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04238b822a7fbc22bcb5df442d2d64a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "328f627f0b6ac099c1b27f12b1572d901deb00c4", "commitAfterChange": "8907059ef43f15e7b338686159e3333fd997b238", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "      public int replaceAll(ContinueCommand startFromTop)", "signatureAfterChange": "      public int replaceAll()", "diff": ["-  public int replaceAll(ContinueCommand startFromTop) {", "+  public int replaceAll() {", "-    try {", "-      Position midpoint = _doc.createPosition(_current.getOffset());", "-      count += _replaceAllWithinBounds(_current, _doc.getEndPosition());", "-      if (startFromTop.shouldContinue()) {", "-        _current = _doc.getStartPosition();", "-        count += _replaceAllWithinBounds(_current, midpoint);", "-      }", "-      return count;", "-    }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }", "+    int found = findNext().getFoundOffset();", "+      found = findNext().getFoundOffset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96b87c14f19a35b1e6a6acb1d0aa200", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "   public void _toggleBookmark(int pos1, int pos2)", "signatureAfterChange": "   public void _toggleBookmark(int pos1, int pos2)", "diff": ["-", "+    ", "-    try {", "-      final RegionManager<OrderedDocumentRegion> rm = getBookmarkManager();", "-      ", "-      // Check for match against existing bookmark and remove if present; find rightmost region containing selection", "-      OrderedDocumentRegion match = rm.getRegionContaining(doc, startSel, endSel);", "-      if (match != null) {", "-        rm.removeRegion(match);", "-        return;", "-      }", "-      ", "-      // No match against existing bookmark", "-      if (startSel == endSel) {  // offset only; no selection", "-        endSel = doc._getLineEndPos(startSel);", "-        startSel = doc._getLineStartPos(startSel);", "-      }", "-      final Position startPos = doc.createPosition(startSel);", "-      final Position endPos = doc.createPosition(endSel);", "-      ", "-      OrderedDocumentRegion r = new DocumentRegion(doc, startPos, endPos);", "-//      Utilities.show(\"Adding bookmark \" + r);", "-      rm.addRegion(r);", "+//    try {", "+    RegionManager<OrderedDocumentRegion> bm = _bookmarkManager;", "+    if (startSel == endSel) {  // offset only; bookmark the entire line", "+      endSel = doc._getLineEndPos(startSel);", "+      startSel = doc._getLineStartPos(startSel);", "-//    catch (FileMovedException fme) { throw new UnexpectedException(fme); }", "-    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+    ", "+    Collection<OrderedDocumentRegion> conflictingRegions = bm.getRegionsOverlapping(doc, startSel, endSel);", "+    ", "+    if (conflictingRegions.size() > 0) {", "+      for (OrderedDocumentRegion cr: conflictingRegions) bm.removeRegion(cr);", "+    }", "+    else {", "+", "+      OrderedDocumentRegion newR = new DocumentRegion(doc, startSel, endSel);", "+      bm.addRegion(newR);", "+    }", "+//    }", "+//    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1fd3b1c411f6cbc246291b403fb6ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c7a49752433e44464dd071fad0e4665a166a6ab9", "commitAfterChange": "107fa8349165ba7d9ae39eaeec1028249c6a8a48", "methodNumberBeforeChange": 496, "methodNumberAfterChange": 496, "signatureBeforeChange": "   void debuggerAutomaticTrace()", "signatureAfterChange": "   void debuggerAutomaticTrace()", "diff": ["-        String rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "+        int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "-        if(!rate.equals(\"\")) ", "-          AUTO_STEP_RATE = Integer.parseInt(rate);", "-        ", "-        _automaticTraceTimer = new Timer(AUTO_STEP_RATE, new ActionListener() {", "+        _automaticTraceTimer = new Timer(rate, new ActionListener() {", "-            try { //System.out.println(\"_automaticTraceTimer.actionPerformed \"+System.identityHashCode(a[0]));", "-              _model.getDebugger().automaticTrace(); }", "-            catch (IllegalStateException ise) {", "-              // This may happen if the user if stepping very frequently,", "-              // and is even more likely if they are using both hotkeys", "-              // and UI buttons. Ignore it in this case.", "-              // Hopefully, there are no other situations where", "-              // the user can be trying to step while there are no", "-              // suspended threads.", "-            }", "-            catch (DebugException de) {", "-              _showError(de, \"Debugger Error\",", "-                         \"Could not create a step request.\");", "+            if (_model.getDebugger().isAutomaticTraceEnabled()) {", "+              // hasn't been disabled in the meantime", "+              debuggerStep(Debugger.StepType.STEP_INTO);", "-        _automaticTraceTimer.setRepeats(false); ", "-        _model.getDebugger().automaticTrace(); ", "-        _model.getDebugger().enableAutomaticTrace();", "+        _automaticTraceTimer.setRepeats(false);", "+        _model.getDebugger().setAutomaticTraceEnabled(true);", "+        debuggerStep(Debugger.StepType.STEP_INTO);", "-      }", "-      catch (DebugException de) {", "-        _showError(de, \"Debugger Error\",", "-                   \"Could not create a step request.\");"]}], "num": 10530}
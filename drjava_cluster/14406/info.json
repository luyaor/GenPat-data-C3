{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bcf158f847be897c485dfcb94f2c175", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f1d8b0429f856cc1331d34a75e0d7b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "commitAfterChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   private void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "-      ", "-      if(name.indexOf(\"[\") != -1 && name.indexOf(\"]\") != -1) {", "-        name = name.substring(0, name.indexOf(\"[\"));", "-        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "-        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "-          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "-          while(iter.indexOf(\"[\") != -1 && iter.indexOf(\"]\") != -1) {", "-            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "-            if(iter.indexOf(\"]\")<(iter.length()-1))", "-              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "-            else ", "-              iter = \"\";", "-          }", "-        }", "-      }", "-     ", "-      int [] indices = new int[arr_index.size()];", "-      for (int i = 0; i < arr_index.size(); i++) {", "-        indices[i] = arr_index.get(i);", "-      }", "-      val = _model.getInteractionsModel().getVariableToString(name, indices);", "-      type = _model.getInteractionsModel().getVariableType(name, indices);", "+//      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "+//      ", "+//      if(name.indexOf(\"[\") != -1 && name.indexOf(\"]\") != -1) {", "+//        name = name.substring(0, name.indexOf(\"[\"));", "+//        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "+//        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "+//          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "+//          while(iter.indexOf(\"[\") != -1 && iter.indexOf(\"]\") != -1) {", "+//            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "+//            if(iter.indexOf(\"]\")<(iter.length()-1))", "+//              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "+//            else ", "+//              iter = \"\";", "+//          }", "+//        }", "+//      }", "+//     ", "+//      int [] indices = new int[arr_index.size()];", "+//      for (int i = 0; i < arr_index.size(); i++) {", "+//        indices[i] = arr_index.get(i);", "+//      }", "+      val = _model.getInteractionsModel().getVariableToString(name);", "+      type = _model.getInteractionsModel().getVariableType(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a50553d5c3358dafebb6e7bc069df90f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 48, "signatureBeforeChange": "     public void breakpointSet(final Breakpoint bp)", "signatureAfterChange": "     public void breakpointSet(final Breakpoint bp)", "diff": ["-     */", "-    public void breakpointSet(final Breakpoint bp) {", "-//      // Only change GUI from event-dispatching thread", "-//      Runnable doCommand = new Runnable() {", "-//        public void run() {", "-          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "-", "-          // Look for matching document node", "-          // Raw type here due to Swing's use of raw types.", "-          Enumeration documents = _breakpointRootNode.children();", "-          while (documents.hasMoreElements()) {", "-            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "-", "-              // Create a new breakpoint in this node", "-              //Sort breakpoints by line number.", "-              // Raw type here due to Swing's use of raw types.", "-              Enumeration lineNumbers = doc.children();", "-              while (lineNumbers.hasMoreElements()) {", "-                DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "-", "-                //if line number of indexed breakpoint is less than new breakpoint, continue", "-                if (((Integer)lineNumber.getUserObject()).intValue() > bp.getLineNumber()) {", "-", "-                  //else, add to the list", "-                  DefaultMutableTreeNode newBreakpoint =", "-                    new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-                  _bpTreeModel.insertNodeInto(newBreakpoint, doc, doc.getIndex(lineNumber));", "-", "-                  // Make sure this node is visible", "-                  _bpTree.scrollPathToVisible(new TreePath(newBreakpoint.getPath()));", "-                  return;", "-                }", "-              }", "-              //if none are greater, add at the end", "-              DefaultMutableTreeNode newBreakpoint =", "-                new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-              _bpTreeModel.insertNodeInto(newBreakpoint, doc, doc.getChildCount());", "-", "-              // Make sure this node is visible", "-              _bpTree.scrollPathToVisible(new TreePath(newBreakpoint.getPath()));", "-              return;", "-            }", "-          }", "-          // No matching document node was found, so create one", "-          _bpTreeModel.insertNodeInto(bpDocNode, _breakpointRootNode, _breakpointRootNode.getChildCount());", "-          DefaultMutableTreeNode newBreakpoint =", "-            new DefaultMutableTreeNode(new Integer(bp.getLineNumber()));", "-          _bpTreeModel.insertNodeInto(newBreakpoint, bpDocNode, bpDocNode.getChildCount());", "-", "-          // Make visible", "-          TreePath pathToNewBreakpoint = new TreePath(newBreakpoint.getPath());", "-          _bpTree.scrollPathToVisible(pathToNewBreakpoint);", "-//        }", "-//      };", "-//      Utilities.invokeLater(doCommand);", "-    }", "+    /** Called when a breakpoint is set in a document. Must be executed in event thread. */", "+    public void breakpointSet(final Breakpoint bp) { }"]}], "num": 14406}
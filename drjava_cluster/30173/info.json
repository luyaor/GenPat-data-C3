{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9fd44bc16cbc52a0ad8397cbb52b6f2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d633e18b8ee897473bc51ab6cc2db28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "65add9d9f0de9278803d6c9a77b3294a4ab082f3", "commitAfterChange": "1ad8d0f619615b40333c2ef2eca24506e4639e2b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "signatureAfterChange": "     public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "diff": ["+    assertTrue(\"first doc should have errors\", positions.length > 0);", "+    assertTrue(\"second doc should have errors\", positions2.length > 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5486058963a41f150dfe3f091924688a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-        catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+        catch (AmbiguousNameException e) {", "+          setErrorStrings(node, className);", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }", "-          else { throw new ExecutionError(\"ambiguous.name\", node); }", "+          else {", "+            setErrorStrings(node, className);", "+            throw new ExecutionError(\"ambiguous.name\", node);", "+          }", "-              else { throw new ExecutionError(\"ambiguous.name\", node); }", "+              else {", "+                setErrorStrings(node, memberName.image());", "+                throw new ExecutionError(\"ambiguous.name\", node);", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9039289bd85e3bbe8bdb10385f2ab185", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "12b972c6351f6122675c003ccbc59ef481c89cda", "commitAfterChange": "b10686f6739b4554b283179f3edc2b09ee48a09a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["+      setErasedType(node, ts.erasedClass(initT));", "+      setErasedType(node, ts.erasedClass(t));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daac0ba64952332f71ec749e963d3261", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(SimpleFieldAccess node)", "diff": ["-      catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+      catch (AmbiguousNameException e) {", "+        setErrorStrings(node, node.getFieldName());", "+        throw new ExecutionError(\"ambiguous.name\", node);", "+      }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "+        else {", "+          setErrorStrings(node, node.getFieldName());", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98d69586f77f04b827d23897c057419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileIOTest.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testClassFileSynchronization()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testClassFileSynchronization() throws BadLocationException, IOException, InterruptedException", "diff": ["-  public void testClassFileSynchronization()", "-    throws BadLocationException, IOException, InterruptedException", "-  {", "+  public void testClassFileSynchronization() throws BadLocationException, IOException, InterruptedException {", "-    assertTrue(\"Class file should not exist before compile\",", "-               doc.getCachedClassFile() == null);", "-    assertTrue(\"should not be in sync before compile\",", "-               !doc.checkIfClassFileInSync());", "+    assertTrue(\"Class file should not exist before compile\", doc.getCachedClassFile() == null);", "+    assertTrue(\"should not be in sync before compile\", ! doc.checkIfClassFileInSync());", "+    assertTrue(\"The state of all open documents should be out of sync\", _model.hasOutOfSyncDocuments());", "-    assertTrue(\"should be in sync after compile\",", "-               doc.checkIfClassFileInSync());", "+    assertTrue(\"should be in sync after compile\", doc.checkIfClassFileInSync());", "+//    System.err.println(_model.getOpenDefinitionsDocuments());", "+    assertTrue(\"The state of all open documents should be in sync\", ! _model.hasOutOfSyncDocuments());", "-    assertTrue(\"should not be in sync after modification\",", "-               !doc.checkIfClassFileInSync());", "+    assertTrue(\"should not be in sync after modification\", ! doc.checkIfClassFileInSync());", "-    assertTrue(\"should not be in sync after save\",", "-               !doc.checkIfClassFileInSync());", "+    assertTrue(\"should not be in sync after save\", ! doc.checkIfClassFileInSync());"]}], "num": 30173}
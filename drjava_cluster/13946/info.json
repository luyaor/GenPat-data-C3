{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f71aa47772a5581cf832f4a83885146f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b65915ea51122ff5ddfb29898d6a55b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ClassAndInterfaceFinder.java", "commitBeforeChange": "816e415ebd3619964409d5b7c5a5d20fa993a7b5", "commitAfterChange": "79e38a44be6c4c379730bdfb5468461330077836", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private boolean foundClassOrInterfaceKeyword(int type, StreamTokenizer tokenizer)", "signatureAfterChange": "   private boolean isClassOrInterfaceWord(int tt, boolean interfaceOK)", "diff": ["-  private boolean foundClassOrInterfaceKeyword(int type, StreamTokenizer tokenizer){", "-    return (type == StreamTokenizer.TT_WORD && tokenizer.sval.equals(\"class\") ||", "-            type == StreamTokenizer.TT_WORD && tokenizer.sval.equals(\"interface\") ||", "-            type == StreamTokenizer.TT_EOF);", "+   */", "+  private boolean isClassOrInterfaceWord(int tt, boolean interfaceOK) {", "+    return  isEOF(tt) || ", "+      (tt == StreamTokenizer.TT_WORD && tokenizer.sval.equals(\"class\")) ||", "+      (tt == StreamTokenizer.TT_WORD && interfaceOK && tokenizer.sval.equals(\"interface\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a71cc7f09481b5648cf32014d77e46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 274, "signatureBeforeChange": "     public boolean overrides(FunctionInvocationCandidate<I> c)", "signatureAfterChange": "     private boolean overrides(DJMethod child, DJMethod parent)", "diff": ["+    /** True iff child is override-compatible with the parent.  (See JLS 8.4.2.) */", "+    private boolean overrides(DJMethod child, DJMethod parent) {", "+      if (child.declaredName().equals(parent.declaredName())) {", "+        Iterable<Type> subParams = SymbolUtil.parameterTypes(child);", "+        Iterable<Type> supParams = SymbolUtil.parameterTypes(parent);", "+        Iterable<VariableType> subTParams = child.typeParameters();", "+        Iterable<VariableType> supTParams = parent.typeParameters();", "+        if (IterUtil.sizeOf(subParams) == IterUtil.sizeOf(supParams)) {", "+          Iterable<? extends Type> supParamsToCompare;", "+          if (IterUtil.isEmpty(subTParams) && !IterUtil.isEmpty(supTParams)) {", "+            supParamsToCompare = IterUtil.map(supParams, ERASE);", "+          }", "+          else if (IterUtil.sizeOf(subTParams) == IterUtil.sizeOf(supTParams)) {", "+            supParamsToCompare = substitute(supParams, supTParams, subTParams);", "+          }", "+          else { return false; }", "+          for (Pair<Type, Type> p : IterUtil.zip(subParams, supParamsToCompare)) {", "+            if (!isEqual(p.first(), p.second())) { return false; }", "+          }", "+          return true;", "+        }", "+        else { return false; }", "+      }", "+      else { return false; }", "+    }", "-     */", "-    public boolean overrides(FunctionInvocationCandidate<I> c) {", "-      if (_f.declaredName().equals(c._f.declaredName())) {", "-        Iterable<Type> subParams = parameterTypes();", "-        Iterable<Type> supParams = c.parameterTypes();", "-        Iterable<VariableType> subTParams = typeParameters();", "-        Iterable<VariableType> supTParams = c.typeParameters();", "-        if (IterUtil.sizeOf(subParams) == IterUtil.sizeOf(supParams)) {", "-          Iterable<? extends Type> supParamsToCompare;", "-          if (IterUtil.isEmpty(subTParams) && !IterUtil.isEmpty(supTParams)) {", "-            supParamsToCompare = IterUtil.map(supParams, ERASE);", "-          }", "-          else if (IterUtil.sizeOf(subTParams) == IterUtil.sizeOf(supTParams)) {", "-            supParamsToCompare = substitute(supParams, supTParams, subTParams);", "-          }", "-          else { return false; }", "-          for (Pair<Type, Type> p : IterUtil.zip(subParams, supParamsToCompare)) {", "-            if (!isEqual(p.first(), p.second())) { return false; }", "-          }", "-          return true;", "-        }", "-        else { return false; }", "-      }", "-      else { return false; }", "-    }"]}], "num": 13946}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92ebe949a5f1decdf2c8b63f5b73d565", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f4c33ab7bf5d76156480dbee6163ec2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "55616341e09a5f807767173122a231f2db20106c", "commitAfterChange": "ddcbad2909e9c9411b7283368e21d7790422a21d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testStepOut()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testStepOut()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["+        //  _notifyObject(_notifierLock);", "+        //}", "+      }", "+      ", "+      public void stepRequested() {", "+        //synchronized(_notifierLock) {", "+          stepRequestedCount++;", "+          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertStepRequestedCount(2);  // fires (don't wait)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d021902cba1cacadebd0460ea93a6877", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "544421971f950fddb0a2cb99f1a22ae9b799a06f", "commitAfterChange": "dab158c5d408db6c4f930265bca0246d6ef37f1b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["+      public synchronized void interpreterReady(File wd) { interpreterReadyCount++; }", "-    ", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "-", "+    // we want a ready notification here; closeAllFiles is supposed to reset", "+    // the interactions pane, but the interpreter is supposed to be in a fresh running state", "+    // so it should immediately say \"ready\" without resetting the interpreter itself", "+    listener.assertInterpreterReadyCount(1);", "-    assertLength(0, _model.getActiveDocument()); ", "+    assertLength(0, _model.getActiveDocument());", "-", "+    "]}], "num": 28075}
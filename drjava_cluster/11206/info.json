{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c6ef2dcccfb9275c295317e1c393312", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31fc1e6fb6a283c10d8a0d6f883c2b2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "28f25bd26b80a613db9b4dbda669e268d23dbaf1", "commitAfterChange": "8212ce9ce43b34bb82672d4de3ee06245bf52614", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Node visit(ForEachStatement node)", "signatureAfterChange": "   public Node visit(ForEachStatement node)", "diff": ["+    String s1, s2;", "+    context.enterScope();", "+", "+    ", "+    name_counter = new Integer(name_counter.intValue() + 1);", "+    s1 = \"#_foreach_var_\" + name_counter;", "+    name_counter = new Integer(name_counter.intValue() + 1);", "+    s2 = \"#_foreach_var_\" + name_counter;", "+    context.define(s1, null);", "+    context.define(s2, null);", "+      ", "+    node.addVar(s1);", "+    node.addVar(s2);", "+", "+    ", "+    ", "+    ", "+    FormalParameter param = node.getParameter();", "+    Expression coll = node.getCollection();", "+    Node body = node.getBody();", "+    Node o;", "+    ", "+    o = param.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType (o,param);", "+      node.setParameter((FormalParameter)o);  ", "+    }", "+    ", "+    o = coll.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType (o,coll);", "+      node.setCollection((Expression)o);", "+    }", "+    ", "+    o = body.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType (o,body);", "+      node.setBody(o);  ", "+    }", "+    ", "+    ", "+    context.leaveScope();", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45b2b977a43492acb7a4b19cdde690f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker15.java", "commitBeforeChange": "7f334b2431ad2a57c508d4ce8fe5d18ce3fccebf", "commitAfterChange": "43a2124ad4386a02628eedfc537948ebb05ea232", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Class visit(ForEachStatement node)", "signatureAfterChange": "   public Class visit(ForEachStatement node)", "diff": ["-    /* to be filled in shortly */", "+    // Enter a new scope", "+    context.enterScope();", "+    context.define(node.getVars().get(0), null);", "+    context.define(node.getVars().get(1), null);", "+    ", "+    Class paramTypeClass;", "+    Class collTypeClass;", "-  ", "-        /*examples*/", "-    /*", "-     * Collection<String> c = ... ;", "-     * for(String s: c){", "-     *   ...", "-     * }", "-     * translates to:", "-     * for(Iterator<E> #i = Expression.iterator(); #i.hasNext(); ){", "-     *    FormalParameter = #i.next();", "-     *    statement...", "-     * }", "-     * ", "-     * ", "-     * create a variable name #i", "-     * get the generic type of the collection and create an iterator with the", "-     *   same generic type and give it the name #i", "-     * create an expressio for #i.iterator();", "-     * create an AssignmentExpression for the iterator and the expression.iterator", "-     * create an expression for #i.hasNext();", "-     * create an expression for #i.next();", "-     * create an assignemntExpression for FormalParameter = #i.next();", "-     * create a new for body expression and add the assigment to it's first", "-     * create a new for statement.", "-     * ", "-     * ============================================================================", "-     * ", "-     * Collection c = ... ;", "-     * for(Object o: c){", "-     *   String s = (String) o;", "-     *   ...", "-     * }", "-     * translates to:", "-     * for(Iterator #i = Expression.iterator(); #i.hasNext(); ){", "-     *    FormalParameter = #i.next();", "-     *    statement...", "-     * }", "-     * ", "-     * int sum(int[] a){", "-     *    int sum = 0;", "-     *    for(int i:a){", "-     *      sum+=i;", "-     *    return sum", "-     * }", "-     * translates to:", "-     * for(int #i=0; #i<a.length; #i++){", "-     *   FormalParameter=a[#i];", "-     *   statement...", "-     * }", "-     */", "-return null;", "+    FormalParameter param = node.getParameter();", "+    Expression coll = node.getCollection();", "+    Node body = node.getBody();", "+    Class component;", "+    ", "+    paramTypeClass = param.acceptVisitor(this);", "+    collTypeClass = coll.acceptVisitor(this);", "+    body.acceptVisitor(this);", "+    ", "+    /*for array access */", "+    /* remember to type check potential unbox/box situations */", "+    /* ie, an array of ints -> Integer or array of Integers -> int */", "+    if(collTypeClass.isArray()){", "+      component = collTypeClass.getComponentType();", "+      if(paramTypeClass.isAssignableFrom(component)){", "+        // noop, we typed checked ok.", "+      }else{", "+        // error, the parameter is not the same type as the collection items", "+        throw new ExecutionError(\"collection.type\", node);", "+      }", "+      ", "+    }else if(java.util.Collection.class.isAssignableFrom(collTypeClass)){", "+      // the collection is a Collection.", "+      // we still need to check it's component type", "+      ", "+    }else{", "+      throw new ExecutionError(\"collection.type\", node);", "+    }", "+    ", "+    ", "+    //---------------------------------------------", "+    ", "+    node.getBody().acceptVisitor(this);", "+", "+    // Leave the current scope and store the defined variables", "+    // (a map of String-Class mappings) in the \"variables\" property", "+    node.setProperty(NodeProperties.VARIABLES, context.leaveScope());", "+    ", "+    ", "+  return null;"]}], "num": 11206}
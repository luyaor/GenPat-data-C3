{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f8863b1fd2a9fc16899f30a6a8e1d41", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071d011bff01ec78c2b6e267c9caca15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public Object visit(PreIncrement node)", "signatureAfterChange": "   public Object visit(PreIncrement node)", "diff": ["-    mod.modify(context,", "-               v = InterpreterUtilities.add(NodeProperties.getType(node),", "-                                            v,", "-                                            InterpreterUtilities.ONE));", "-    return v;", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "+    // Perform the operation", "+    Object result = InterpreterUtilities.add(calcType, v, InterpreterUtilities.ONE);", "+", "+    // Cast the result", "+    mod.modify(context, result);", "+    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45b507667c401035964942af4f627fb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public Object visit(PreDecrement node)", "signatureAfterChange": "   public Object visit(PreDecrement node)", "diff": ["-    mod.modify(context,", "-               v = InterpreterUtilities.subtract(NodeProperties.getType(node),", "-                                                 v,", "-                                                 InterpreterUtilities.ONE));", "-    return v;", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "+    // Perform the operation", "+    Object result = InterpreterUtilities.subtract(calcType, v, InterpreterUtilities.ONE);", "+", "+    // Cast the result", "+    mod.modify(context, result);", "+    return result;"]}], "num": 29131}
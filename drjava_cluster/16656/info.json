{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c336e94a2707dd5a363f44e69d1b1607", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84fec1bf8e9e18542ffe7c5d7f15199b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 91, "signatureBeforeChange": "    public static boolean arrayEquals(Object[] array1, Object[] array2)", "signatureAfterChange": "    public static boolean arrayEquals(Object[] array1, Object[] array2)", "diff": ["-  public static boolean arrayEquals(Object[] array1, Object[] array2) { return Arrays.equals(array1, array2); }", "+  public static boolean arrayEquals(Object[] array1, Object[] array2) {", "+//    return Arrays.equals(array1, array2); ", "+    int n = array1.length;", "+    if (n != array2.length) return false;", "+    for (int i = 0; i < n; i++) {", "+      Object o1 = array1[i];", "+      Object o2 = array2[i];", "+      if (o1 == null && o2 != null) return false;", "+      if (! o1.equals(o2)) return false;", "+    };", "+    return true;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86ed2d084e1f61a35340e693f1f222fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public synchronized int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public synchronized int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "diff": ["-  public synchronized int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException {", "+  public synchronized int findPrevCharPos(int pos, char[] whitespace)", "+    throws BadLocationException", "+  {", "+    // Check cache", "+    String key = \"findPrevCharPos:\" + pos;", "+    for (int i=0; i < whitespace.length; i++) {", "+      key += \":\" + whitespace[i];", "+    }", "+    Integer cached = (Integer) _checkCache(key);", "+    if (cached != null) {", "+      return cached.intValue();", "+    }", "+    ", "-    final int origLocation = _reduced.absOffset();", "+    final int origLocation = _currentLocation;", "-             // Ignore matching char", "-           } else { ", "-             if(_isEndOfComment(text, i)) {", "-               // Move i past the start of comment characters", "-               // and continue searching", "-               i = i - 1;", "-               _reduced.move(-1);", "-             } else {", "-               // Return position of matching char", "-               _reduced.move(origLocation - i);", "-               return i;", "-             }", "-           }", "+          // Ignore matching char", "+        }", "+        else { ", "+          if(_isEndOfComment(text, i)) {", "+            // Move i past the start of comment characters", "+            // and continue searching", "+            i = i - 1;", "+            _reduced.move(-1);", "+          }", "+          else {", "+            // Return position of matching char", "+            _reduced.move(origLocation - i);", "+            _storeInCache(key, new Integer(i));", "+            return i;", "+          }", "+        }", "+    _storeInCache(key, new Integer(ERROR_INDEX));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9321385c44b433483ce0346de2a49d63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)     throws BadLocationException", "diff": ["-  public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace) throws BadLocationException {", "+  public synchronized int getFirstNonWSCharPos(int pos,char[] whitespace)", "+    throws BadLocationException", "+  {", "+    // Check cache", "+    String key = \"getFirstNonWSCharPos:\" + pos;", "+    for (int i=0; i < whitespace.length; i++) {", "+      key += \":\" + whitespace[i];", "+    }", "+    Integer cached = (Integer) _checkCache(key);", "+    if (cached != null) {", "+      return cached.intValue();", "+    }", "+    ", "-    final int origLocation = _reduced.absOffset();", "+    final int origLocation = _currentLocation;", "-           } else { ", "-             if(_isStartOfComment(text, i - pos)) {", "-               // Move i past the start of comment characters", "-               // and continue searching", "-               i = i + 1;", "-               _reduced.move(1);", "-             } else {", "-               // Return position of matching char", "-               _reduced.move(origLocation - i);", "-               return i;", "-             }", "-           }", "+        }", "+        else { ", "+          if(_isStartOfComment(text, i - pos)) {", "+            // Move i past the start of comment characters", "+            // and continue searching", "+            i = i + 1;", "+            _reduced.move(1);", "+          }", "+          else {", "+            // Return position of matching char", "+            _reduced.move(origLocation - i);", "+            _storeInCache(key, new Integer(i));", "+            return i;", "+          }", "+        }", "+    _storeInCache(key, new Integer(ERROR_INDEX));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7250fa6ad9103da855d87690a103302", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims) throws BadLocationException", "diff": ["-", "+    // Check cache", "+    String key = \"getIndentOfCurrStmt:\" + pos;", "+    for (int i=0; i < delims.length; i++) {", "+      key += \":\" + delims[i];", "+    }", "+    String cached = (String) _checkCache(key);", "+    if (cached != null) {", "+      return cached;", "+    }", "+    ", "-      if (getText(prevDelimiter,1).charAt(0) == '{') {", "-        break;", "+        if ((prevDelimiter > 0) && (prevDelimiter < getLength()) &&", "+            (getText(prevDelimiter,1).charAt(0) == '{')) {", "+          break;", "+        }", "-      } catch (BadLocationException e) { }", "+      catch (BadLocationException e) {", "+        // Shouldn't happen", "+        throw new UnexpectedException(e);", "+      }", "-    } else {", "+    }", "+    else {", "-    } catch(BadLocationException e) {", "-      // Should not be here", "+    }", "+    catch(BadLocationException e) {", "+      // Should not happen", "+    _storeInCache(key, lineText);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d540e4087d18ee6ef95c1456d72a6607", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a3306545963d95b8e7f45728ebf6e03a4f716f60", "commitAfterChange": "cc830d3cfb835e44d2498e98729c28536d682aad", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public synchronized int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public synchronized int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "diff": ["+    // Check cache", "+    String key = \"findPrevDelimiter:\" + pos;", "+    for (int i=0; i < delims.length; i++) {", "+      key += \":\" + delims[i];", "+    }", "+    key += \":\" + skipParenPhrases;", "+    Integer cached = (Integer) _checkCache(key);", "+    if (cached != null) {", "+      return cached.intValue();", "+    }", "+    ", "-    final int origLocation = _reduced.absOffset();", "+    final int origLocation = _currentLocation;", "-            if (skipParenPhrases && posInParenPhrase(i)) {", "+            if (skipParenPhrases && posInParenPhrase()) {", "+              _storeInCache(key, new Integer(i));", "+    _storeInCache(\"findPrevDelimiter:\" + pos, new Integer(ERROR_INDEX));"]}], "num": 16656}
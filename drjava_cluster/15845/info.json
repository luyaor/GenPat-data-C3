{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66cd22ad44eb35740c84bfc0711a71b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e93e3741a6a6f672a1e497107ae703", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/AbstractLog.java", "commitBeforeChange": "2f448ba8b87bf5374806fe43042efcc34e6f744e", "commitAfterChange": "93219856772483abc62cf5ad83d3a2500e77f448", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void logValues(String[] names, Object... values)", "signatureAfterChange": "   public void logValues(String[] names, Object... values)", "diff": ["-      if (names.length == values.length) {", "-        Iterable<String> namesIter = IterUtil.arrayIterable(names);", "-        Iterable<Object> valuesIter = IterUtil.arrayIterable(values);", "-        SizedIterable<SizedIterable<String>> messages = BinaryMappedIterable.make(namesIter, valuesIter, PROCESS_VALUE);", "-        write(new Date(), th, e, IterUtil.collapse(messages));", "-      }", "-      else {", "-        String err = \"Invalid invocation of logValues() with \" + names.length + \" names and \"  + values.length + \" values\";", "-        write(new Date(), th, e, IterUtil.singleton(err));", "-      }", "+      write(new Date(), th, e, processValues(names, values));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3c03d7194e070387a9a8e6f7f00b75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "signatureAfterChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "diff": ["-  /** Tag the given type parameters with a new VariableType, and set the bounds appropriately. */", "+   */", "+    checkStructureForTypeParameters(tparams);", "+    ensureWellFormedTypeParameters(tparams);", "+  }", "-      Iterable<ReferenceTypeName> bounds = IterUtil.compose(param.getBound(), param.getInterfaceBounds());", "-      // meet is guaranteed to be nonempty, and thus not TOP", "-      Type upperBound = ts.meet(checkList(bounds));"]}], "num": 15845}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d6c637dc35c989ef3184d6102f83429", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820621d3c2d75885063bc832af82ad78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "          public void testForForStatement()", "signatureAfterChange": "          public void testForForStatement()", "diff": ["-      Expression te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "-      UnparenthesizedExpressionList sel = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      ForStatement fs = new ForStatement(SourceInfo.NO_INFO, sel, te, new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), new EmptyStatement(SourceInfo.NO_INFO));", "-      //      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "+      UnparenthesizedExpressionList sel = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      ForStatement fs = new ForStatement(SourceInfo.NONE, sel, te, new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[0]), new EmptyStatement(SourceInfo.NONE));", "+      //      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, new EmptyStatement(SourceInfo.NONE));", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), fs});", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "+      FormalParameter param = new FormalParameter(SourceInfo.NONE, new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), fs});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                                     intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                                     intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      VariableDeclaration vd = new VariableDeclaration (SourceInfo.NO_INFO, _publicMav, new VariableDeclarator[] { new InitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      UnparenthesizedExpressionList sel2 = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {te});", "-      fs = new ForStatement(SourceInfo.NO_INFO, sel, te, sel2, new ExpressionStatement(SourceInfo.NO_INFO, te));", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      VariableDeclaration vd = new VariableDeclaration (SourceInfo.NONE, _publicMav, new VariableDeclarator[] { new InitializedVariableDeclarator(SourceInfo.NONE, new PrimitiveType(SourceInfo.NONE, \"int\"), new Word(SourceInfo.NONE, \"i\"), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      UnparenthesizedExpressionList sel2 = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {te});", "+      fs = new ForStatement(SourceInfo.NONE, sel, te, sel2, new ExpressionStatement(SourceInfo.NONE, te));", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {fs});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {fs});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      Statement ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-//      te = new Expression(SourceInfo.NO_INFO, new ExpressionPiece[] { new Word(SourceInfo.NO_INFO, \"j\"),", "-//        new Operator(SourceInfo.NO_INFO, \"<\"), new IntegerLiteral(SourceInfo.NO_INFO, 5)});", "-      sel = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      fs = new ForStatement(SourceInfo.NO_INFO, sel, new EmptyForCondition(SourceInfo.NO_INFO), new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {ts})));", "-      //      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "+      Statement ts = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+//      te = new Expression(SourceInfo.NONE, new ExpressionPiece[] { new Word(SourceInfo.NONE, \"j\"),", "+//        new Operator(SourceInfo.NONE, \"<\"), new IntegerLiteral(SourceInfo.NONE, 5)});", "+      sel = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      fs = new ForStatement(SourceInfo.NONE, sel, new EmptyForCondition(SourceInfo.NONE), new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[0]), new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {ts})));", "+      //      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, new EmptyStatement(SourceInfo.NONE));", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), fs});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), fs});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                                     intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                                     intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-//      te = new Expression(SourceInfo.NO_INFO, new ExpressionPiece[] { new Word(SourceInfo.NO_INFO, \"j\"),", "-//        new Operator(SourceInfo.NO_INFO, \"<\"), new IntegerLiteral(SourceInfo.NO_INFO, 5)});", "-      sel = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      fs = new ForStatement(SourceInfo.NO_INFO, sel, new EmptyForCondition(SourceInfo.NO_INFO), new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), new EmptyStatement(SourceInfo.NO_INFO));", "-      //      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "+//      te = new Expression(SourceInfo.NONE, new ExpressionPiece[] { new Word(SourceInfo.NONE, \"j\"),", "+//        new Operator(SourceInfo.NONE, \"<\"), new IntegerLiteral(SourceInfo.NONE, 5)});", "+      sel = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      fs = new ForStatement(SourceInfo.NONE, sel, new EmptyForCondition(SourceInfo.NONE), new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[0]), new EmptyStatement(SourceInfo.NONE));", "+      //      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, new EmptyStatement(SourceInfo.NONE));", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), fs});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), fs});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                                     intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                                     intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      vd = new VariableDeclaration (SourceInfo.NO_INFO, _publicMav, new VariableDeclarator[] { new InitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      sel2 = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {te});", "-      fs = new ForStatement(SourceInfo.NO_INFO, sel, te, sel2, new EmptyStatement(SourceInfo.NO_INFO));", "+      te = new PlusAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")), new IntegerLiteral(SourceInfo.NONE, 5));", "+      vd = new VariableDeclaration (SourceInfo.NONE, _publicMav, new VariableDeclarator[] { new InitializedVariableDeclarator(SourceInfo.NONE, new PrimitiveType(SourceInfo.NONE, \"int\"), new Word(SourceInfo.NONE, \"i\"), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      sel2 = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {te});", "+      fs = new ForStatement(SourceInfo.NONE, sel, te, sel2, new EmptyStatement(SourceInfo.NONE));", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {fs});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {fs});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")));", "-      vd = new VariableDeclaration (SourceInfo.NO_INFO, _publicMav, new VariableDeclarator[] { new InitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "-      sel2 = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {te});", "-      fs = new ForStatement(SourceInfo.NO_INFO, sel, te, sel2, new EmptyStatement(SourceInfo.NO_INFO));", "+      te = new PositivePrefixIncrementExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")));", "+      vd = new VariableDeclaration (SourceInfo.NONE, _publicMav, new VariableDeclarator[] { new InitializedVariableDeclarator(SourceInfo.NONE, new PrimitiveType(SourceInfo.NONE, \"int\"), new Word(SourceInfo.NONE, \"i\"), new IntegerLiteral(SourceInfo.NONE, 10))});", "+      sel2 = new UnparenthesizedExpressionList(SourceInfo.NONE, new Expression[] {te});", "+      fs = new ForStatement(SourceInfo.NONE, sel, te, sel2, new EmptyStatement(SourceInfo.NONE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6f6143e05234e1fa9db75a1080b384e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "          public void testForIfThenElseStatement()", "signatureAfterChange": "          public void testForIfThenElseStatement()", "diff": ["-      Expression te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      Statement ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      Expression te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      Statement ts = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "-      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "+      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, new EmptyStatement(SourceInfo.NONE));", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "+      FormalParameter param = new FormalParameter(SourceInfo.NONE, new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      Statement assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, new EmptyStatement(SourceInfo.NO_INFO), ts);", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      Statement assignStatement = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NONE, te, new EmptyStatement(SourceInfo.NONE), ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      Statement returnStatement = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      Statement returnStatement = new ValueReturnStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, new EmptyStatement(SourceInfo.NONE));", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new ExpressionStatement(SourceInfo.NO_INFO, new EqualsExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word (SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 32))));", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, new ExpressionStatement(SourceInfo.NONE, new EqualsExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word (SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 32))));", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, ts);", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));      ", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, new EmptyStatement(SourceInfo.NO_INFO), ts);", "+      te = new PlusAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));      ", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NONE, te, new EmptyStatement(SourceInfo.NONE), ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      returnStatement = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {returnStatement}));", "-      BreakStatement bs = new UnlabeledBreakStatement(SourceInfo.NO_INFO);", "-      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, bs);", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      returnStatement = new ValueReturnStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {returnStatement}));", "+      BreakStatement bs = new UnlabeledBreakStatement(SourceInfo.NONE);", "+      ift = new IfThenElseStatement(SourceInfo.NONE, te, ts, bs);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, "]}], "num": 8691}
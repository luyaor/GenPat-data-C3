{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58265433768c794a9fe083dc18b56ef7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749f5659680d246a7b3f2689a020b284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "335e15356f81cc767efd4886353e6890e8c905fa", "commitAfterChange": "8ccb5b5787c23c1ec149415240d859632e14b0eb", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["+    if (active != null) al.add(active);", "+    ", "+    List<OpenDefinitionsDocument> nonProjDocs = getNonProjectDocuments();", "+    List<OpenDefinitionsDocument> projDocs = getProjectDocuments();", "+    File[] projectFiles = getProjectFiles();   ", "+    // keep all nonproject files open.  External files in the previous project", "+    // may become project files in the new project and must be closed while external", "+    // files in the previous project that are still external to the new project ", "+    // should be kept open.", "+     ", "+    //List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "+    for(OpenDefinitionsDocument d: projDocs){", "+      if(d.isProjectFile()){", "+        closeFile(d);", "+      }else{", "+        try{", "+          INavigatorItem idoc = getIDocGivenODD(d);", "+          String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+          _documentNavigator.refreshDocument(idoc, path);", "+        }catch(IOException e){", "+          // noop", "+        }", "+      }", "+    }", "-    return al.toArray(new File[0]);", "+    // call on the GUI to finish up by opening the files and making", "+    // necessary gui component changes", "+    final File[] filesToOpen = al.toArray(new File[0]);", "+    _notifier.projectOpened(projectFile, new FileOpenSelector(){", "+      public File[] getFiles() {", "+        return filesToOpen;", "+      }", "+    });", "+    ", "+    if (_documentNavigator instanceof JTreeSortNavigator) {", "+      ((JTreeSortNavigator)_documentNavigator).collapsePaths(ir.getCollapsedPaths());", "+    }", "+    ", "+    return srcFiles; // Unnecessarily returns src files in keeping with the previous interface."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ff15623fdb079545e91f64b2a3dbe4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "754c5c6ad2cb355b22670132dd3802b39cd047ad", "commitAfterChange": "96733f3b5667642e9fe604cf00e9cf6d6a2ed1f5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp)     throws IOException, RemoteException", "signatureAfterChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp)     throws IOException, RemoteException", "diff": ["+    ", "+    //*******************************************", "+    // first, we we export ourselves to a file...", "+    //*******************************************", "+    ", "-        synchronized(AbstractMasterJVM.this) {", "+        synchronized(lock) {", "-          AbstractMasterJVM.this.notify();", "+          lock.notify();", "-", "-    t.start();", "-    while (_stub == null) {", "-      try {", "-        wait();", "-      }", "-      catch (InterruptedException ie) {", "-        throw new edu.rice.cs.util.UnexpectedException(ie);", "+    synchronized(lock){", "+      t.start();", "+      while (_stub == null) {", "+        try {", "+          lock.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new edu.rice.cs.util.UnexpectedException(ie);", "+        }", "-", "-", "+", "+    //*******************************************", "+    // done exporting ourselves to a file...", "+    // now lets export our classloader", "+    // this will be used to handle classloading ", "+    // requests from the slave jvm", "+    //*******************************************", "+    final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+    t = new Thread(_exportMasterThreadName) {", "+      public void run() {", "+        synchronized(lock) {", "+          try {", "+            _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "+            ", "+            // Debug: check that the IP address is 127.0.0.1", "+            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+          }", "+          catch (RemoteException re) {", "+            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+            throw new edu.rice.cs.util.UnexpectedException(re);", "+          }", "+          lock.notify();", "+        }", "+      }", "+    };", "+    synchronized(lock){", "+      t.start();", "+      while (_classLoaderStub == null) {", "+        try {", "+          lock.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new edu.rice.cs.util.UnexpectedException(ie);", "+        }", "+      }", "+    }", "+    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+    _classLoaderStubFile.deleteOnExit();", "+    // serialize stub to _stubFile", "+    fstream = new FileOutputStream(_classLoaderStubFile);", "+    ostream = new ObjectOutputStream(fstream);", "+    ostream.writeObject(_classLoaderStub);", "+    ostream.flush();", "+    fstream.close();", "+    ", "-      _slaveClassName", "+      _slaveClassName,", "+      _classLoaderStubFile.getAbsolutePath()", "-    // When it dies,", "+    // When it dies, restart it"]}], "num": 707}
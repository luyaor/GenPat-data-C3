{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a3fac4e77458c889ab92264b0e1fec9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a312b12708b2f4d79c28e55c61148c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "                public void testForNumericAssignmentExpressionOnly()", "signatureAfterChange": "      public void testForNumericAssignmentExpressionOnly()", "diff": ["-      NumericAssignmentExpression nae = new MinusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      NumericAssignmentExpression nae = ", "+        new MinusAssignmentExpression(SourceInfo.NO_INFO, ", "+                                      new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "+                                      new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());  // Generated duplicate error message", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type int.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "-      //if rhs not instance data, give error", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());  // Generated a duplicate error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type int.  Perhaps you meant to create \" +", "+                   \"a new instance of int\", ", "+                   errors.get(1).getFirst());", "+      // if rhs not instance data, give error", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use the type name char on the left hand side of a numeric assignment (-=, %=, *=, /=).  Perhaps you meant to create a new instance of char\", errors.getLast().getFirst());", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the type name char on the left hand side of a numeric assignment (-=, %=, *=, /=).\" +", "+                   \"  Perhaps you meant to create a new instance of char\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, _sd2.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, _sd2.getInstanceData(), ", "+                                                           SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is not a number.  Therefore, you cannot apply \" + ", "+                   \"a numeric assignment (-=, %=, *=, /=) to it\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, SymbolData.INT_TYPE.getInstanceData(), _sd2.getInstanceData()));", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, ", "+                                                           SymbolData.INT_TYPE.getInstanceData(), ", "+                                                           _sd2.getInstanceData()));", "+      assertEquals(\"Should still be 5 errors\", 5, errors.size());  // Generated a duplicate error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply \" +", "+                   \"a numeric assignment (-=, %=, *=, /=) to it\", ", "+                   errors.get(4).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 7 errors\", 7, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type int with something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, ", "+                                                           SymbolData.INT_TYPE.getInstanceData(), ", "+                                                           SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should be 6 errors\", 6, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type int with something of \" +", "+                   \"type double\", ", "+                   errors.get(5).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90484ddee24d3e2e349aa0ca4573b8b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "cd56f7a2a82093e6e34728c0b5dc6babe9356e0a", "commitAfterChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, EditDocumentException, IOException, InterruptedException", "signatureAfterChange": "   public void testAccessStaticFieldsAndMethodsOfOuterClasses()     throws DebugException, BadLocationException, EditDocumentException, IOException, InterruptedException", "diff": ["-   */", "+  /** Tests that the user can access static fields of outer classes in the debug interpreter. */", "-    assertEquals(\"Should have successfully shadowed field of static outer class\",", "-                 \"-10\",", "-                 interpret(\"twoDeepFoo\"));", "-    assertEquals(\"should have assigned the field of static outer class\",", "-                 \"100\",", "+    assertEquals(\"Should have successfully shadowed field of static outer class\", \"-10\", interpret(\"twoDeepFoo\"));", "+    ", "+    assertEquals(\"should have assigned the field of static outer class\", \"100\",", "-    assertEquals(\"should have assigned the field of static outer class\",", "-                 \"100\",", "+    ", "+    assertEquals(\"should have assigned the field of static outer class\", \"100\",", "-    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "-                 \"6\",", "-                 interpret(\"foo\"));", "-    assertEquals(\"Should be able to access a static field of a non-static outer class\",", "-                 \"6\",", "+    assertEquals(\"Should be able to access a static field of a non-static outer class\", \"6\", interpret(\"foo\"));", "+    assertEquals(\"Should be able to access a static field of a non-static outer class\", \"6\",", "-    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "-                 \"987\",", "+    assertEquals(\"Should have changed the value of a static field of a non-static outer class\", \"987\",", "-    assertEquals(\"Should have changed the value of a static field of a non-static outer class\",", "-                 \"987\",", "+    ", "+    assertEquals(\"Should have changed the value of a static field of a non-static outer class\", \"987\",", "-    assertEquals(\"Should have defined a new variable\",", "-                 \"56\",", "-                 interpret(\"foo\"));", "-    assertEquals(\"Should have shadowed the value of a static field of a non-static outer class\",", "-                 \"987\",", "+    assertEquals(\"Should have defined a new variable\", \"56\", interpret(\"foo\"));", "+    assertEquals(\"Should have shadowed the value of a static field of a non-static outer class\", \"987\",", "-    assertEquals(\"should be able to call method of outer class\",", "-                 \"-2\",", "-                 interpret(\"getNegativeTwo()\"));", "-    assertEquals(\"should be able to call method of outer class\",", "-                 \"-2\",", "-                 interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "-    assertEquals(\"should be able to call method of outer class\",", "-                 \"-2\",", "+    assertEquals(\"should be able to call method of outer class\", \"-2\", interpret(\"getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\", \"-2\", interpret(\"MonkeyTwoDeep.getNegativeTwo()\"));", "+    assertEquals(\"should be able to call method of outer class\", \"-2\",", "-    assertEquals(\"should be able to call method of outer class\",", "-                 \"-2\",", "+    assertEquals(\"should be able to call method of outer class\", \"-2\",", "-    if (printMessages) {", "-      System.out.println(\"Shutting down...\");", "-    }", "+    if (printMessages) System.out.println(\"Shutting down...\");", "+", "-    if (printMessages) {", "-      System.out.println(\"Shut down.\");", "-    }", "+    if (printMessages) System.out.println(\"Shut down.\");", "+"]}], "num": 21470}
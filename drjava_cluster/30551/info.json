{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "baf43d015b4687bbfcd196b0f1783680", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00403974bcddd44944034cb2d3827dab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecurUtil.java", "commitBeforeChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "commitAfterChange": "34d03e4ba66c612a034017381b72d822fe9c84d0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private static boolean isAnonymousClass(Class<?> c)", "signatureAfterChange": "       protected String prefix()", "diff": ["-  /** An implementation of {@link Class#isAnonymousClass}, which is unavailable prior to Java 5.0 */", "-  private static boolean isAnonymousClass(Class<?> c) {", "-    String name = c.getName();", "-    String nameEnd = name.substring(name.lastIndexOf('$') + 1); // index is -1 if there is none", "-    for (int i = 0; i < nameEnd.length(); i++) {", "-      if (Character.isJavaIdentifierStart(nameEnd.charAt(i))) { return false; }", "-    }", "-    return true;", "-  }", "+    SHALLOW_MULTILINE {", "+      protected String prefix() { return \"\"; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58862e569f7b0a044f17cd5c956e5aea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static <T> T cast(Class<T> c, Object o)", "signatureAfterChange": "   public static <T> T cast(Class<? extends T> c, Object o) throws ClassCastException", "diff": ["-  /** An implementation of {@link Class#cast}, which is unavailable prior to Java 5.0 */", "-  public static <T> T cast(Class<T> c, Object o) {", "-    if (c.isInstance(o)) {", "+   */", "+  public static <T> T cast(Class<? extends T> c, Object o) throws ClassCastException {", "+    if (box(c).isInstance(o)) {", "-    else { throw new ClassCastException(o.getClass().getName()); }", "+    else { throw new ClassCastException(\"Casting to \" + c.getName() + \" from \" + o.getClass().getName()); }", "+  }"]}], "num": 30551}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6659c2b2c9952797df39dadcbe29bf58", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "104883248b20d01975bb6995ea2e9203", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "   @Override public Type visit(StaticMethodCall node)", "signatureAfterChange": "     @Override public Type visit(StaticMethodCall node)", "diff": ["-   */", "-  @Override public Type visit(StaticMethodCall node) {", "-    Type t = node.getMethodType().acceptVisitor(this);", "-    ", "-    Iterable<? extends Expression> args = IterUtil.empty();", "-    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-    ", "-    Iterable<Type> targs = IterUtil.empty();", "-    if (node instanceof PolymorphicStaticMethodCall) {", "-      targs = checkTypeNameList(((PolymorphicStaticMethodCall) node).getTypeArguments());", "-    }", "-    ", "-    try {", "-      // Note: Changes made below may also need to be made in the TypeSystem's boxing & unboxing implementations", "-      TypeSystem.MethodInvocation inv = ts.lookupStaticMethod(t, node.getMethodName(), targs, args);", "-      // TODO: Check accessibility of method", "-      checkThrownExceptions(inv.thrown(), node);", "-      node.setArguments(CollectUtil.makeList(inv.args()));", "-      setMethod(node, inv.method());", "-      Type result = ts.capture(inv.returnType());", "-      debug.logValue(\"Type of method call \" + node.getMethodName(), ts.wrap(result));", "-      addRuntimeCheck(node, result, inv.method().returnType());", "-      return setType(node, result);", "-    }", "-    catch (InvalidTypeArgumentException e) {", "-      throw new ExecutionError(\"type.argument\", node);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "-      throw new ExecutionError(\"no.such.method\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(StaticMethodCall node) {", "+      Type t = checkTypeName(node.getMethodType());", "+      ", "+      Iterable<? extends Expression> args = IterUtil.empty();", "+      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      ", "+      Iterable<Type> targs = IterUtil.empty();", "+      if (node instanceof PolymorphicStaticMethodCall) {", "+        targs = checkTypeNameList(((PolymorphicStaticMethodCall) node).getTypeArguments());", "+      }", "+      ", "+      try {", "+        // Note: Changes made below may also need to be made in the TypeSystem's boxing & unboxing implementations", "+        MethodInvocation inv = ts.lookupStaticMethod(t, node.getMethodName(), targs, args, expected);", "+        // TODO: Check accessibility of method", "+        checkThrownExceptions(inv.thrown(), node);", "+        node.setArguments(CollectUtil.makeList(inv.args()));", "+        setMethod(node, inv.method());", "+        Type result = ts.capture(inv.returnType());", "+        debug.logValue(\"Type of method call \" + node.getMethodName(), ts.wrap(result));", "+        addRuntimeCheck(node, result, inv.method().returnType());", "+        return setType(node, result);", "+      }", "+      catch (InvalidTypeArgumentException e) {", "+        throw new ExecutionError(\"type.argument\", node);", "+      }", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "+        throw new ExecutionError(\"no.such.method\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18657faf68e4629ce0d9da836d6dd6fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 30, "signatureBeforeChange": "   @Override public Type visit(AnonymousAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousAllocation node)", "diff": ["-   */", "-  @Override public Type visit(AnonymousAllocation node) {", "-    Type t = node.getCreationType().acceptVisitor(this);", "-    // TODO: Allow a simple allocation of a dynamic inner class defined in the current context (as above)", "-    if (!ts.isStatic(t) || (!ts.isExtendable(t) && !ts.isImplementable(t))) {", "-      throw new ExecutionError(\"allocation.type\", node);", "-    }", "-    ", "-    Iterable<? extends Expression> args = IterUtil.empty();", "-    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-    ", "-    Iterable<Type> targs = IterUtil.empty();", "-    if (node instanceof PolymorphicAnonymousAllocation) {", "-      targs = checkTypeNameList(((PolymorphicAnonymousAllocation) node).getTypeArguments());", "-    }", "-    ", "-    if (!(IterUtil.isEmpty(args) && IterUtil.isEmpty(targs) && ts.isImplementable(t))) {", "-      // Super constructor invocation is something besides Object()", "-      try {", "-        TypeSystem.ConstructorInvocation inv = ts.lookupConstructor(t, targs, args);", "-        // TODO: Check accessibility of constructor", "-        setErrorStrings(node, ts.userRepresentation(t), nodeTypesString(args));", "-        throw new ExecutionError(\"no.such.constructor\", node);", "-", "-    TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node,", "-                                new TreeClassLoader(context.getClassLoader(), opt), opt);", "-    setDJClass(node, c);", "-    new ClassMemberChecker(new ClassContext(context, c), opt).checkMembers(node.getMembers());", "-    setConstructor(node, IterUtil.first(c.declaredConstructors()));", "-    return setType(node, ts.makeClassType(c));", "-  }", "+     */", "+    @Override public Type visit(AnonymousAllocation node) {", "+      Type t = checkTypeName(node.getCreationType());", "+      // TODO: Allow a simple allocation of a dynamic inner class defined in the current context (as above)", "+      if (!ts.isStatic(t) || (!ts.isExtendable(t) && !ts.isImplementable(t))) {", "+      if (node instanceof PolymorphicAnonymousAllocation) {", "+        targs = checkTypeNameList(((PolymorphicAnonymousAllocation) node).getTypeArguments());", "+      }", "+      ", "+      if (!(IterUtil.isEmpty(args) && IterUtil.isEmpty(targs) && ts.isImplementable(t))) {", "+        // Super constructor invocation is something besides Object()", "+        try {", "+          ConstructorInvocation inv = ts.lookupConstructor(t, targs, args, expected);", "+          // TODO: Check accessibility of constructor", "+          checkThrownExceptions(inv.thrown(), node);", "+          node.setArguments(CollectUtil.makeList(inv.args()));", "+        }", "+        catch (InvalidTypeArgumentException e) {", "+          throw new ExecutionError(\"type.argument\", node);", "+        }", "+        catch (TypeSystemException e) {", "+          setErrorStrings(node, ts.userRepresentation(t), nodeTypesString(args));", "+          throw new ExecutionError(\"no.such.constructor\", node);", "+        }", "+      }", "+      ", "+      TreeClass c = new TreeClass(context.makeAnonymousClassName(), null, node,", "+                                  new TreeClassLoader(context.getClassLoader(), opt), opt);", "+      setDJClass(node, c);", "+      new ClassMemberChecker(new ClassContext(context, c), opt).checkMembers(node.getMembers());", "+      ", "+      setConstructor(node, IterUtil.first(c.declaredConstructors()));", "+      return setType(node, ts.makeClassType(c));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df0e4a0f3c146937dc2b892ff3ef4994", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 29, "signatureBeforeChange": "   @Override public Type visit(SimpleAllocation node)", "signatureAfterChange": "     @Override public Type visit(SimpleAllocation node)", "diff": ["-   */", "-  @Override public Type visit(SimpleAllocation node) {", "-    Type t = node.getCreationType().acceptVisitor(this);", "-    // TODO: Allow a simple allocation of a dynamic inner class defined in the current context", "-    //       (where \"new Inner()\" is the equivalent of \"this.new Inner()\" or \"SomeOuter.this.new Inner()\")", "-    if (!ts.isConcrete(t) || !ts.isStatic(t)) {", "-      throw new ExecutionError(\"allocation.type\", node);", "-    }", "-    ", "-    Iterable<? extends Expression> args = IterUtil.empty();", "-    if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-    ", "-    Iterable<Type> targs = IterUtil.empty();", "-    if (node instanceof PolymorphicSimpleAllocation) {", "-      targs = checkTypeNameList(((PolymorphicSimpleAllocation) node).getTypeArguments());", "-    }", "-    ", "-    try {", "-      TypeSystem.ConstructorInvocation inv = ts.lookupConstructor(t, targs, args);", "-      // TODO: Check accessibility of constructor", "-      checkThrownExceptions(inv.thrown(), node);", "-      node.setArguments(CollectUtil.makeList(inv.args()));", "-      setConstructor(node, inv.constructor());", "-      return setType(node, t);", "-    }", "-    catch (InvalidTypeArgumentException e) {", "-      throw new ExecutionError(\"type.argument\", node);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), nodeTypesString(args));", "-      throw new ExecutionError(\"no.such.constructor\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(SimpleAllocation node) {", "+      Type t = checkTypeName(node.getCreationType());", "+      // TODO: Allow a simple allocation of a dynamic inner class defined in the current context", "+      //       (where \"new Inner()\" is the equivalent of \"this.new Inner()\" or \"SomeOuter.this.new Inner()\")", "+      if (!ts.isConcrete(t) || !ts.isStatic(t)) {", "+      if (node instanceof PolymorphicSimpleAllocation) {", "+        targs = checkTypeNameList(((PolymorphicSimpleAllocation) node).getTypeArguments());", "+      ", "+        ConstructorInvocation inv = ts.lookupConstructor(t, targs, args, expected);"]}], "num": 18047}
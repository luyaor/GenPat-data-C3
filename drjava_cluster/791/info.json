{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a76ab28ab81768d6e6e4b2c3c339a59", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c9ae3b53a7997a0a041e2ce40122318", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 156, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["-    ClassPathVector exCp = new ClassPathVector();", "-    for (File f : builder.getClassPaths()) { exCp.add(f); }", "-                                                      builder.getSourceFiles(), builder.getAuxiliaryFiles(), exCp, ", "-                                                      builder.getCreateJarFile(), builder.getCreateJarFlags()));", "+                                                      builder.getSourceFiles(), builder.getAuxiliaryFiles(),", "+                                                      builder.getClassPaths(), builder.getCreateJarFile(), ", "+                                                      builder.getCreateJarFlags()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9f9d41abba69a162caf6c2253a86ad4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f1270b4a562e0ecd61507987f82e57d121a23edd", "commitAfterChange": "12067b12cea198f72f8758eab77d6f544c743a53", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 136, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["-  public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException {", "-    ", "-    // add opendefinitionsdocument", "-    ", "+   */", "+  public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException {", "+    ProjectProfile builder = _makeProjectProfile(file, info);", "+    ", "-    // set the state if all went well", "-    File[] srcFiles = srcFileList.toArray(new File[srcFileList.size()]);", "+    synchronized(_auxiliaryFiles) { ", "+      _auxiliaryFiles = new LinkedList<File>();", "+      for (File f: builder.getAuxiliaryFiles()) { _auxiliaryFiles.add(f); }", "+    }", "-    synchronized(_auxiliaryFiles) { _auxiliaryFiles = auxFileList;  }", "-    ", "-    setFileGroupingState(makeProjectFileGroupingState(pr, mainClass, bd, wd, file, srcFiles, exCp, createJarFile, ", "-                                                      createJarFlags));", "+    ClassPathVector exCp = new ClassPathVector();", "+    for (File f : builder.getClassPaths()) { exCp.add(f); }", "+    setFileGroupingState(makeProjectFileGroupingState(builder.getProjectRoot(), builder.getMainClass(), builder.getBuildDirectory(),", "+                                                      builder.getWorkingDirectory(), file, builder.getSourceFiles(), exCp, builder.getCreateJarFile(), ", "+                                                      builder.getCreateJarFlags()));", "+  }"]}], "num": 791}
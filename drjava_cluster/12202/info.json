{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ae2d1f52631976e1852b95a613c7b3d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66cd410c34018ad4f20d4005889fdd69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "\r     \r     public void test_isAssignable()", "signatureAfterChange": "          public void test_isAssignable()", "diff": ["-    \r", "-    public void test_isAssignable() {\r", "-      MethodData md = new MethodData(\"Overwritten\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));\r", "-      MethodData md2 = new MethodData(\"Overwriting\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));\r", "-\r", "-      //tests a wide variety of possibilities, but not all possibilities.\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md.setMav(_protectedMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md.setMav(_privateMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md.setMav(_packageMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md2.setMav(_protectedMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      md2.setMav(_privateMav);\r", "-      assertFalse(\"Should not be assignable\", _isAssignable(md, md2));\r", "-      md2.setMav(_packageMav);\r", "-      assertTrue(\"Should be assignable\", _isAssignable(md, md2));\r", "-      \r", "-    }\r", "+    ", "+    public void test_isAssignable() {", "+      MethodData md = new MethodData(\"Overwritten\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData md2 = new MethodData(\"Overwriting\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+", "+      //tests a wide variety of possibilities, but not all possibilities.", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md.setMav(_protectedMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md.setMav(_privateMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md.setMav(_packageMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md2.setMav(_protectedMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      md2.setMav(_privateMav);", "+      assertFalse(\"Should not be assignable\", _isCompatible(md, md2));", "+      md2.setMav(_packageMav);", "+      assertTrue(\"Should be assignable\", _isCompatible(md, md2));", "+      ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a3c0958fac8a6d5c5e0099fcf9d0fbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), new ReferenceType[0], ", "+                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-      Lisa.setSuperClass(new SymbolData(\"super\", _publicMav, new TypeParameter[0], null, new LinkedList<SymbolData>(), null));", "+      Lisa.setSuperClass(new SymbolData(\"super\", _publicMav, new TypeParameter[0], null, new ArrayList<SymbolData>(), null));", "-      sd2.setIsContinuation(false);", "-      sd2.setMav(_publicMav);", "-      sd2.setPackage(\"java.lang\");", "-      MethodData objMd = new MethodData(\"Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "+//      sd2.setIsContinuation(false);", "+//      sd2.setMav(_publicMav);", "+//      sd2.setPackage(\"java.lang\");", "+      MethodData objMd = new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "-      sd.setInterfaces(new LinkedList<SymbolData>());", "+      sd.setInterfaces(new ArrayList<SymbolData>());", "-      SymbolData t = new SymbolData(\"junit.framework.TestCase\");", "-      t.setIsContinuation(false);", "-      t.setMav(_publicMav);", "-      t.setPackage(\"junit.framework\");", "-      symbolTable.remove(\"junit.framework.TestCase\");", "-      symbolTable.put(\"junit.framework.TestCase\", t);", "-      sd.setSuperClass(t);", "+      ", "+      SymbolData testCase = defineTestCaseClass();", "+      sd.setSuperClass(testCase);", "+      ", "-      _btc._file=new File(\"Hspia.dj0\");", "+      _btc._file = new File(\"Hspia.dj0\");", "-      t = new SymbolData(\"junit.framework.TestCase\");", "-      t.setIsContinuation(false);", "-      t.setMav(_publicMav);", "-      t.setPackage(\"junit.framework\");", "-      symbolTable.remove(\"junit.framework.TestCase\");", "-      symbolTable.put(\"junit.framework.TestCase\", t);", "-      sd.setSuperClass(t);", "+      ", "+//      SymbolData testCase = defineTestCase();", "+//      symbolTable.put(\"junit.framework.TestCase\", testCase);", "+//      sd.setSuperClass(testCase);", "+      "]}], "num": 12202}
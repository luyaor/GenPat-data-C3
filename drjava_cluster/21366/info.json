{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc627b0532909e1927119863b826adcc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038acc11992a46f1bce80fc283f09819", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaInterpreterTest.java", "commitBeforeChange": "60148071cbc4c79594332b98a132b525b5109e02", "commitAfterChange": "3a6e74bbf98ddc5180a8b7f90656bf9c0a78b5b3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public void testTypeCheckerExtension()", "signatureAfterChange": "   public void testTypeCheckerExtension()", "diff": ["-//    try { _interpreter.interpret(\"(false) ? 2/0 : 1 \"); }", "-//    catch(InterpreterException e) {", "-//      if ( e.getCause() instanceof ArithmeticException ) {", "-//        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "-//      }", "-//    }", "-//", "-//    try { _interpreter.interpret(\"(false) ? 2%0 : 1 \"); }", "-//    catch(InterpreterException e) {", "-//      if ( e.getCause() instanceof ArithmeticException ) {", "-//        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "-//      }", "-//    }", "+    try { _interpreter.interpret(\"(false) ? 2/0 : 1 \"); }", "+    catch(InterpreterException e) {", "+      if ( e.getCause() instanceof ArithmeticException ) {", "+        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "+      }", "+    }", "+", "+    try { _interpreter.interpret(\"(false) ? 2%0 : 1 \"); }", "+    catch(InterpreterException e) {", "+      if ( e.getCause() instanceof ArithmeticException ) {", "+        fail(\"testTypeCheckerExtension failed to prevent short circuit DivideByZeroException\");", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38bda3c52cf6bc2133606ea44893b44a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, DebugManager manager)      throws DebugException, IllegalStateException", "signatureAfterChange": "   public Breakpoint( OpenDefinitionsDocument doc, int offset, int lineNumber, DebugManager manager)      throws DebugException, IllegalStateException", "diff": ["-  public Breakpoint( OpenDefinitionsDocument doc, int lineNumber, DebugManager manager) ", "+  public Breakpoint( OpenDefinitionsDocument doc, int offset, int lineNumber, DebugManager manager) ", "+    ", "+    DefinitionsDocument defDoc = doc.getDocument();", "+    ", "+    try {", "+      _startPos = defDoc.createPosition(defDoc.getLineStartPos(offset));", "+      _endPos = defDoc.createPosition( defDoc.getLineEndPos(offset));", "+    }", "+    catch (BadLocationException ble) {", "+      throw new UnexpectedException(ble);", "+    }", "+    ", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1486d791119dce085562804fcaa1579", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e8f48651b4fb31b2a1907635fbd654b3f66a98b2", "commitAfterChange": "2499b0018a7f137bb1baaaf2d077c26486e3f12e", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 68, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException", "diff": ["-    setFileGroupingState(_makeProjectFileGroupingState(buildDir, projectFile, srcFiles));", "+    File mainClass;", "+    try{", "+      mainClass = ir.getJarMainClass();", "+      if(mainClass != null){", "+        mainClass = new File(projectFile.getParentFile().getPath(), mainClass.getPath()).getCanonicalFile();", "+      }", "+    }catch(IOException e){", "+      mainClass = null;", "+    }", "+    ", "+    setFileGroupingState(_makeProjectFileGroupingState(mainClass, buildDir, projectFile, srcFiles));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea29a2aa89fbbb2ca3760a0ab5047f5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "9de352299088533a44cc17c1ffd7938654146b70", "commitAfterChange": "fb275f71eca23e6f93c695458f20ebc27e058287", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException", "signatureAfterChange": "      protected Class loadClass(String name, boolean resolve)       throws ClassNotFoundException", "diff": ["-     */", "-    protected Class loadClass(String name, boolean resolve) throws ClassNotFoundException {", "-      //System.err.println(\"loadClass: \" + name);", "-      if (_checker.mustUseSystemLoader(name)) {", "-        return  super.loadClass(name, resolve);", "-      } ", "-      else {", "-        return  findClass(name);", "+", "+    protected Class loadClass(String name, boolean resolve)", "+      throws ClassNotFoundException", "+    {", "+      Class clazz;", "+", "+        clazz = (Class) classes.get(name);", "+        try {", "+          clazz = _stickyLoader.loadClass(name);", "+        }", "+        catch (ClassNotFoundException e) {", "+          // If it exceptions, just fall through to here to try the interpreter.", "+          // If all else fails, try loading the class through the interpreter.", "+          // That's used for classes defined in the interpreter.", "+          clazz = interpreter.loadClass(name);", "+", "+", "+        }", "+      if (resolve) {", "+        resolveClass(clazz);", "+      return clazz;"]}], "num": 21366}
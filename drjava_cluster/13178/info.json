{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e7b6f7e7cd7200b21f2aa11b3c644c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026b83087c5d6d93d60e469d2a914b5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public IDocumentNavigator makeTreeNavigator(String name, final IDocumentNavigator parent,                                                  final List<Pair<String, INavigatorItemFilter>> l)", "signatureAfterChange": "     public IDocumentNavigator<ItemT> makeTreeNavigator(String name, final IDocumentNavigator<ItemT> parent,                                                  final List<Pair<String, INavigatorItemFilter<ItemT>>> l)", "diff": ["-    public IDocumentNavigator makeTreeNavigator(String name, final IDocumentNavigator parent, ", "-                                                final List<Pair<String, INavigatorItemFilter>> l) {", "+    public IDocumentNavigator<ItemT> makeTreeNavigator(String name, final IDocumentNavigator<ItemT> parent, ", "+                                                final List<Pair<String, INavigatorItemFilter<ItemT>>> l) {", "-      final IDocumentNavigator tbr = makeTreeNavigator(name);", "+      final IDocumentNavigator<ItemT> tbr = makeTreeNavigator(name);", "-          for(Pair<String, INavigatorItemFilter> p: l) { tbr.addTopLevelGroup(p.getFirst(), p.getSecond()); }", "+          for(Pair<String, INavigatorItemFilter<ItemT>> p: l) { tbr.addTopLevelGroup(p.getFirst(), p.getSecond()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5fcea2582f461a9c9b5da7174fab5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb)", "signatureAfterChange": "   public Class<?> setProperties(ClassAllocation node, Class<?> c, Class<?>[] args, List<Node> memb)", "diff": ["-  public Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb) {", "+  public Class<?> setProperties(ClassAllocation node, Class<?> c, Class<?>[] args, List<Node> memb) {", "-    Class cl = new TreeCompiler(interpreter).compileTree(this, type);", "+    Class<?> cl = new TreeCompiler(interpreter).compileTree(this, type);", "-    Class[] tmp = new Class[args.length+2];", "+    Class<?>[] tmp = new Class[args.length+2];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c2c886be687ae82e187277079e2978b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/TreeClassInfo.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tMembersVisitor()", "signatureAfterChange": "     MembersVisitor()", "diff": ["+    MembersVisitor() {", "+      if (!isArray()) {", "+        Iterator<Node> it = classTree.getMembers().iterator();", "+        while (it.hasNext()) {", "+          ((Node)it.next()).acceptVisitor(this);", "+        }", "+        ", "+        if (!classTree.hasProperty(TREE_VISITED)) {", "+          ClassInfo dc = getDeclaringClass();", "+          if (dc != null && !Modifier.isStatic(getModifiers())) {", "+            // Add a reference to the outer instance", "+            FieldDeclaration fd;", "+            fd = new FieldDeclaration(Modifier.PUBLIC,", "+                                      new ReferenceType(dc.getName()),", "+                                      \"this$\" + getNestingLevel(),", "+                                      null);", "+            fd.acceptVisitor(this);", "+            classTree.getMembers().add(fd);", "+          }", "+          ", "+          if (constructors.size() == 0 &&", "+              !isInterface() &&", "+              !isPrimitive()) {", "+            ", "+            // Add a default constructor", "+            ConstructorInvocation  ci;", "+            ci = new ConstructorInvocation(null, null, true);", "+            ConstructorDeclaration cd;", "+            cd = new ConstructorDeclaration(Modifier.PUBLIC,", "+                                            classTree.getName(),", "+                                            new LinkedList<FormalParameter>(),", "+                                            new LinkedList<List<IdentifierToken>>(),", "+                                            ci,", "+                                            new LinkedList<Node>());", "+            cd.acceptVisitor(this);", "+            classTree.getMembers().add(cd);", "+          }", "+        }", "+      }", "-\t */", "-\tMembersVisitor() {", "-\t    if (!isArray()) {", "-\t\tIterator it = classTree.getMembers().iterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    ((Node)it.next()).acceptVisitor(this);", "-\t\t}", "-", "-\t\tif (!classTree.hasProperty(TREE_VISITED)) {", "-\t\t    ClassInfo dc = getDeclaringClass();", "-\t\t    if (dc != null && !Modifier.isStatic(getModifiers())) {", "-\t\t\t// Add a reference to the outer instance", "-\t\t\tFieldDeclaration fd;", "-\t\t\tfd = new FieldDeclaration(Modifier.PUBLIC,", "-\t\t\t\t\t\t  new ReferenceType(dc.getName()),", "-\t\t\t\t\t\t  \"this$\" + getNestingLevel(),", "-\t\t\t\t\t\t  null);", "-\t\t\tfd.acceptVisitor(this);", "-\t\t\tclassTree.getMembers().add(fd);", "-\t\t    }", "-", "-\t\t    if (constructors.size() == 0 &&", "-\t\t\t!isInterface() &&", "-\t\t\t!isPrimitive()) {", "-\t\t    ", "-\t\t\t// Add a default constructor", "-\t\t\tConstructorInvocation  ci;", "-\t\t\tci = new ConstructorInvocation(null, null, true);", "-\t\t\tConstructorDeclaration cd;", "-\t\t\tcd = new ConstructorDeclaration(Modifier.PUBLIC,", "-\t\t\t\t\t\t\tclassTree.getName(),", "-\t\t\t\t\t\t\tnew LinkedList(),", "-\t\t\t\t\t\t\tnew LinkedList(),", "-\t\t\t\t\t\t\tci,", "-\t\t\t\t\t\t\tnew LinkedList());", "-\t\t\tcd.acceptVisitor(this);", "-\t\t\tclassTree.getMembers().add(cd);", "-\t\t    }", "-\t\t}", "-\t    }", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5049692a8d9af65a9abc2d8543e2aa16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "b583f95ca38940907816c4beb7118ff0df1017e2", "commitAfterChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public static LinkedList packageExplore(String prefix, File root)", "signatureAfterChange": "   public static LinkedList<String> packageExplore(String prefix, File root)", "diff": ["-  public static LinkedList packageExplore(String prefix, File root) {", "+  public static LinkedList<String> packageExplore(String prefix, File root) {", "-    final Set exploredDirectories = new HashSet();", "+    final Set<File> exploredDirectories = new HashSet<File>();", "-    LinkedList output = new LinkedList();", "+    LinkedList<String> output = new LinkedList<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68cabfa5a7a72546e25293e246df9bbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected Class compileClass(ClassInfo ci, String name)", "signatureAfterChange": "   protected Class<?> compileClass(ClassInfo ci, String name)", "diff": ["-  protected Class compileClass(ClassInfo ci, String name) {", "-    Class result = null;", "+  protected Class<?> compileClass(ClassInfo ci, String name) {", "+    Class<?> result = null;", "-      Class c = compileClass(t, name);", "+      Class<?> c = compileClass(t, name);", "-        Class c = compileClass(t, name);", "+        Class<?> c = compileClass(t, name);", "-    Class c = new ClassInfoCompiler(ci).compile();", "+    Class<?> c = new ClassInfoCompiler(ci).compile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f1866e7cab7a2c501d1af513c7aec61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacCompiler.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public static void runCommand(String s, Class c) throws Throwable", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static void runCommand(String s, Class<?> c) throws Throwable", "diff": ["-  public static void runCommand(String s, Class c) throws Throwable {", "+  public static void runCommand(String s, Class<?> c) throws Throwable {", "-    Class oldC = c;", "+    Class<?> oldC = c;", "-            Constructor ctor = c.getConstructor();", "+            Constructor<?> ctor = c.getConstructor();", "-              Constructor ctor = c.getConstructor(String[].class);", "+              Constructor<?> ctor = c.getConstructor(String[].class);", "-            Constructor ctor = c.getConstructor(String[].class);", "+            Constructor<?> ctor = c.getConstructor(String[].class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8213d76b450b05cc9ab36d97601eed05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class<?> visit(ConditionalExpression node)", "diff": ["-  public Class visit(ConditionalExpression node) {", "+  public Class<?> visit(ConditionalExpression node) {", "-    Class type = condExp.acceptVisitor(this);", "+    Class<?> type = condExp.acceptVisitor(this);", "-    Class c1 = exp1.acceptVisitor(this);", "-    Class c2 = exp2.acceptVisitor(this);", "-    Class ec = null;", "+    Class<?> c1 = exp1.acceptVisitor(this);", "+    Class<?> c2 = exp2.acceptVisitor(this);", "+    Class<?> ec = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2498322bd09ff0ce69f51997fee03f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void migrateListeners(IDocumentNavigator child, IDocumentNavigator parent)", "signatureAfterChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-    private void migrateListeners(IDocumentNavigator child, IDocumentNavigator parent) {", "-      Collection<INavigationListener> listeners = parent.getNavigatorListeners();", "-      Iterator<INavigationListener> it = listeners.iterator();", "+    // long as it extends ItemT.", "+    private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent) {", "+      Collection<INavigationListener<? super ItemT>> listeners = parent.getNavigatorListeners();", "+      Iterator<INavigationListener<? super ItemT>> it = listeners.iterator();", "-        INavigationListener listener = it.next();", "+        INavigationListener<? super ItemT> listener = it.next();", "+        ", "+        // I don't understand the motivation behind this line.  Is it possible for", "+        // it to become invalid?  If so, what's to prevent that from happening", "+        // again after this line but before we call next()?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1ea9cef8039284f436366b8f2dc877", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private boolean _javadoc_1_3(String[] args, String[] classpath)     throws IOException, ClassNotFoundException, InterruptedException", "signatureAfterChange": "   private boolean _javadoc_1_3(String[] args, String[] classpath)     throws IOException, ClassNotFoundException, InterruptedException", "diff": ["-    LinkedList outLines = new LinkedList();", "-    LinkedList errLines = new LinkedList();", "+    LinkedList<String> outLines = new LinkedList<String>();", "+    LinkedList<String> errLines = new LinkedList<String>();", "-    ArrayList errors = extractErrors(outLines);", "+    ArrayList<CompilerError> errors = extractErrors(outLines);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea96e4175321d38ce6831c84f53bd60c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/StaticContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb)", "signatureAfterChange": "   public Class<?> setProperties(ClassAllocation node, Class<?> c, Class<?>[] args, List<Node> memb)", "diff": ["-  public Class setProperties(ClassAllocation node, Class c, Class[] args, List<Node> memb) {", "+  public Class<?> setProperties(ClassAllocation node, Class<?> c, Class<?>[] args, List<Node> memb) {", "-    Class cl = new TreeCompiler(interpreter).compileTree(this, type);", "+    Class<?> cl = new TreeCompiler(interpreter).compileTree(this, type);", "-    Class[] tmp = new Class[args.length+1];", "+    Class<?>[] tmp = new Class[args.length+1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaba410404e5e8bb109abbb2378f26b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void addConstructor(TreeConstructorInfo ci)", "signatureAfterChange": "   protected void addConstructor(TreeConstructorInfo ci)", "diff": ["-     */", "-    protected void addConstructor(TreeConstructorInfo ci) {", "-\t// Get the parameter types", "-\tClassInfo[] cinf   = ci.getParameterTypes();", "-\tString[]    params = new String[cinf.length];", "-\tfor (int i = 0; i < cinf.length; i++) {", "-\t    params[i] = cinf[i].getName();", "-\t}", "-", "-\t// Get the exceptions", "-\tcinf = ci.getExceptionTypes();", "-\tString[] ex = new String[cinf.length];", "-\tfor (int i = 0; i < cinf.length; i++) {", "-\t    ex[i] = cinf[i].getName();", "-\t}", "-", "-\tString sig = ClassFactory.getMethodIdentifier", "-\t    (classInfo.getName(),", "-\t     \"<init>\",", "-\t     params,", "-\t     interpreter.getClassLoader().toString());", "-\tConstructorDeclaration cd = ci.getConstructorDeclaration();", "-", "-\t// Check the constructor's name", "-\tif (!cd.getName().equals(typeDeclaration.getName())) {", "-\t    cd.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t   new String[] { cd.getName() });", "-           throw new ExecutionError(\"constructor.name\", cd);", "-\t}", "-", "-\t// Register the constructor", "-\tConstructorInvocation civ = cd.getConstructorInvocation();", "-\tConstructorVisitor    cv = new ConstructorVisitor();", "-", "-\tif (civ != null) {", "-\t    Iterator it = cd.getParameters().iterator();", "-\t    while (it.hasNext()) {", "-\t\t((Node)it.next()).acceptVisitor(cv);", "-\t    }", "-\t    civ.acceptVisitor(cv);", "-", "-\t    interpreter.registerConstructorArguments", "-\t\t(sig,", "-\t\t cd.getParameters(),", "-\t\t civ.getArguments(),", "-\t\t importationManager);", "-\t} else {", "-\t    interpreter.registerConstructorArguments", "-\t\t(sig,", "-\t\t new LinkedList(),", "-\t\t new LinkedList(),", "-\t\t importationManager);", "-\t}", "-", "-\tMethodDeclaration md =", "-\t    new MethodDeclaration(cd.getAccessFlags(),", "-\t\t\t\t  new VoidType(),", "-\t\t\t\t  \"<init>\",", "-\t\t\t\t  cd.getParameters(),", "-\t\t\t\t  new LinkedList(),", "-\t\t\t\t  new BlockStatement(cd.getStatements()));", "-\tinterpreter.registerMethod(sig, md, importationManager);", "-\t", "-\t// Add the instance initialization statement to the constructor statement", "-\tif (!cv.superConstructor.equals(classInfo.getName())) {", "-\t    ListIterator lit = cd.getStatements().listIterator();", "-\t    Iterator it = instanceInitializer.iterator();", "-\t    while (it.hasNext()) {", "-\t\tlit.add(it.next());", "-\t    }", "-\t}", "-", "-\t// Create the constructor", "-\tclassFactory.addConstructor(cd.getAccessFlags(), params, ex,", "-\t\t\t\t    cv.superConstructor,", "-\t\t\t\t    cv.constructorParameters);", "+   */", "+  protected void addConstructor(TreeConstructorInfo ci) {", "+    // Get the parameter types", "+    ClassInfo[] cinf   = ci.getParameterTypes();", "+    String[]    params = new String[cinf.length];", "+    for (int i = 0; i < cinf.length; i++) {", "+      params[i] = cinf[i].getName();", "+    }", "+    ", "+    // Get the exceptions", "+    cinf = ci.getExceptionTypes();", "+    String[] ex = new String[cinf.length];", "+    for (int i = 0; i < cinf.length; i++) {", "+      ex[i] = cinf[i].getName();", "+    }", "+    ", "+    String sig = ClassFactory.getMethodIdentifier", "+      (classInfo.getName(),", "+       \"<init>\",", "+       params,", "+       interpreter.getClassLoader().toString());", "+    ConstructorDeclaration cd = ci.getConstructorDeclaration();", "+    ", "+    // Check the constructor's name", "+    if (!cd.getName().equals(typeDeclaration.getName())) {", "+      cd.setProperty(NodeProperties.ERROR_STRINGS,", "+                     new String[] { cd.getName() });", "+      throw new ExecutionError(\"constructor.name\", cd);", "+    }", "+    ", "+    // Register the constructor", "+    ConstructorInvocation civ = cd.getConstructorInvocation();", "+    ConstructorVisitor    cv = new ConstructorVisitor();", "+    ", "+    if (civ != null) {", "+      Iterator it = cd.getParameters().iterator();", "+      while (it.hasNext()) {", "+        ((Node)it.next()).acceptVisitor(cv);", "+      }", "+      civ.acceptVisitor(cv);", "+      ", "+      interpreter.registerConstructorArguments", "+        (sig,", "+         cd.getParameters(),", "+         civ.getArguments(),", "+         importationManager);", "+    } else {", "+      interpreter.registerConstructorArguments", "+        (sig,", "+         new LinkedList<FormalParameter>(),", "+         new LinkedList<Expression>(),", "+         importationManager);", "+    }", "+    ", "+    MethodDeclaration md =", "+      new MethodDeclaration(cd.getAccessFlags(),", "+                            new VoidType(),", "+                            \"<init>\",", "+                            cd.getParameters(),", "+                            new LinkedList<List<IdentifierToken>>(),", "+                            new BlockStatement(cd.getStatements()));", "+    interpreter.registerMethod(sig, md, importationManager);", "+    ", "+    // Add the instance initialization statement to the constructor statement", "+    if (!cv.superConstructor.equals(classInfo.getName())) {", "+      ListIterator<Node> lit = cd.getStatements().listIterator();", "+      Iterator<Node> it = instanceInitializer.iterator();", "+      while (it.hasNext()) {", "+        lit.add(it.next());", "+      }", "+    }", "+    ", "+    // Create the constructor", "+    classFactory.addConstructor(cd.getAccessFlags(), params, ex,", "+                                cv.superConstructor,", "+                                cv.constructorParameters);", "+  }"]}], "num": 13178}
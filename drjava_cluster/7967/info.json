{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1365f710291f687385ab750a5c7f6dcc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2412ab33d506dbd6cf51454e977552eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void testMatchBraceText()", "signatureAfterChange": "   public void testMatchBraceText()", "diff": ["-    try{", "-      DefinitionsPane definitions = _frame.getCurrentDefPane();", "-      OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-      _assertDocumentEmpty(doc, \"before testing\");", "-      doc.insertString(0, ", "-                       \"{\\n\" +", "-                       \"public class Foo {\\n\" + //21", "-                       \"  private int whatev\\n\" + //42", "-                       \"  private void _method()\\n\" + //67", "-                       \"  {\\n\" + //71", "-                       \"     do stuff\\n\" + //85", "-                       \"     new Object() {\\n\" + //105", "-                       \"         }\\n\" + //116", "-                       \"  }\\n\" +", "-                       \"}\" +", "-                       \"}\"", "-                         , null);", "-      ", "-      String fileName = doc.getCompletePath();", "-      ", "-      definitions.setCaretPosition(4);", "-      assertEquals(\"Should display the document path\", fileName, _frame.getFileNameField());", "-      definitions.setCaretPosition(115);", "-      assertEquals(\"Should display the line matched\", \"Matches:      new Object() {\", _frame.getFileNameField());", "-      definitions.setCaretPosition(102);", "-      assertEquals(\"Should display the document matched\", fileName, _frame.getFileNameField());", "-      definitions.setCaretPosition(119);", "-      assertEquals(\"Should display the line matched\", \"Matches:   private void _method()...{\", _frame.getFileNameField());", "-      definitions.setCaretPosition(121);", "-      assertEquals(\"Should display the line matched\", \"Matches: public class Foo {\", _frame.getFileNameField());", "-      definitions.setCaretPosition(122);", "-      assertEquals(\"Should display only one brace when matching an open brace that is the first character in a line\",", "-                   \"Matches: {\", _frame.getFileNameField());", "-    }", "-    catch (BadLocationException e) {throw new UnexpectedException(e);}", "-  }", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    Utilities.clearEventQueue();", "+    ", "+    _assertDocumentEmpty(doc, \"before testing\");", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append( ", "+                   \"{\\n\" +", "+                   \"public class Foo {\\n\" + //21", "+                   \"  private int whatev\\n\" + //42", "+                   \"  private void _method()\\n\" + //67", "+                   \"  {\\n\" + //71", "+                   \"     do stuff\\n\" + //85", "+                   \"     new Object() {\\n\" + //105", "+                   \"         }\\n\" + //116", "+                   \"  }\\n\" +", "+                   \"}\" +", "+                   \"}\"", "+                     , null);", "+        ", "+        definitions.setCaretPosition(4); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    ", "+    /* Ensure that DocumentListeners complete. */", "+    Utilities.clearEventQueue(); ", "+    ", "+    final String fileName = doc.getCompletePath();", "+", "+    assertEquals(\"Should display the document path\", fileName, _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(115); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the line matched\", \"Matches:      new Object() {\", _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(102);", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the document matched\", fileName, _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(119); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the line matched\", \"Matches:   private void _method()...{\", _result);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(121); ", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display the line matched\", \"Matches: public class Foo {\", _frame.getFileNameField());", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        definitions.setCaretPosition(122);", "+        _result = _frame.getFileNameField();", "+      } ", "+    });", "+    assertEquals(\"Should display only one brace when matching an open brace that is the first character in a line\",", "+                 \"Matches: {\", _result);", "+    ", "+    _log.log(\"testMatchBraceTest completed\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530180ea545a909378bfa8a3c0049b99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "commitAfterChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testScriptLoading() throws Exception", "signatureAfterChange": "   public void testScriptLoading() throws Exception", "diff": ["-    try {", "-      ism.prevInteraction();", "-      fail(\"Should not have been able to get previous interaction!\");", "-    }", "-    catch (IllegalStateException ise) {", "-      // good, continue", "-    }", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.prevInteraction();", "+          fail(\"Should not have been able to get previous interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "-    ism.nextInteraction();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.nextInteraction(); } });", "+    ", "+//    Utilities.clearEventQueue();", "-    try {", "-      ism.prevInteraction();", "-      fail(\"Should not have been able to get previous interaction!\");", "-    }", "-    catch (IllegalStateException ise) {", "-      // good, continue", "-    }", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.prevInteraction();", "+          fail(\"Should not have been able to get previous interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "-    ism.nextInteraction();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.nextInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    Utilities.clearEventQueue();", "+//    Utilities.clearEventQueue();", "-    try {", "-      ism.nextInteraction();", "-      fail(\"Should not have been able to get next interaction!\");", "-    }", "-    catch (IllegalStateException ise) {", "-      // good, continue", "-    }", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.nextInteraction();", "+          fail(\"Should not have been able to get next interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "+    ", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    try {", "-      ism.prevInteraction();", "-      fail(\"Should not have been able to get previous interaction!\");", "-    }", "-    catch (IllegalStateException ise) { /* good, continue */ }", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.prevInteraction();", "+          fail(\"Should not have been able to get previous interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "+    "]}], "num": 7967}
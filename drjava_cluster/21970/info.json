{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cb176eed352c77244de8ee8caafed22", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6b407f4f4f4a696b17a39003bfa1c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   public TypeData forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that)", "signatureAfterChange": "   public TypeData forSimpleUninitializedArrayInstantiation(SimpleUninitializedArrayInstantiation that)", "diff": ["-    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType());", "+    final SymbolData typeRes = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType());", "-    return forUninitializedArrayInstantiationOnly(that, type_result, dimensions_result);", "+    return forUninitializedArrayInstantiationOnly(that, typeRes, dimensions_result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "333596691fb59524127218d229a51304", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SpecialTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public TypeData forUninitializedVariableDeclarator(UninitializedVariableDeclarator that)", "signatureAfterChange": "   public TypeData forUninitializedVariableDeclarator(UninitializedVariableDeclarator that)", "diff": ["-    final TypeData type_result = getSymbolData(that.getType().getName(), _data, that.getType());", "-    final TypeData name_result = that.getName().visit(this);", "-    return forUninitializedVariableDeclaratorOnly(that, type_result, name_result);", "+    final TypeData typeRes = getSymbolData(that.getType().getName(), _data, that.getType());", "+    final TypeData nameRes = that.getName().visit(this);", "+    return forUninitializedVariableDeclaratorOnly(that, typeRes, nameRes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59050202a46f17026e4d3601312edda3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "   public TypeData forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that)", "signatureAfterChange": "   public TypeData forSimpleInitializedArrayInstantiation(SimpleInitializedArrayInstantiation that)", "diff": ["-    SymbolData type_result = getSymbolData(that.getType().getName(), _data, that.getType());", "-    TypeData elementResult = forArrayInitializerHelper(that.getInitializer(), type_result);", "-    if (type_result == null) {return null;}", "-    return type_result.getInstanceData();", "+    SymbolData typeRes = getSymbolData(that.getType().getName(), _data, that.getType());", "+    TypeData elementResult = forArrayInitializerHelper(that.getInitializer(), typeRes);", "+    if (typeRes == null) {return null;}", "+    return typeRes.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c479fd9418ec500d560d7abb375f9b62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public TypeData forCastExpression(CastExpression that)", "signatureAfterChange": "   public TypeData forCastExpression(CastExpression that)", "diff": ["-    final TypeData type_result = that.getType().visit(this);", "-    final TypeData value_result = that.getValue().visit(this);", "-    if (value_result == null) {", "+    final TypeData typeRes = that.getType().visit(this);", "+    final TypeData valueRes = that.getValue().visit(this);", "+    if (valueRes == null) {", "-      return type_result;", "+      return typeRes;", "-    return forCastExpressionOnly(that, type_result, value_result);", "+    return forCastExpressionOnly(that, typeRes, valueRes);"]}], "num": 21970}
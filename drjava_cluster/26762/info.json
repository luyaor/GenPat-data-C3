{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f0e82c87faf7ceb50fced9df2b8625c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cccdbc04fde8ef74c485eab8ffbef29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "a7e3e055ae9aaae858bddacb7f1970b753865e99", "commitAfterChange": "d028ff865526d4b7b4597a44ca4c386e858c8df7", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 84, "signatureBeforeChange": "      public static void main(String[] args)", "signatureAfterChange": "      public static void main(String[] args)", "diff": ["+    d._showFiles = true;", "-        return f.getName().equals(\"foo\");", "+        try {", "+          return !f.isDirectory();", "+        }", "+        catch (Exception e) {", "+          System.out.println(f);", "+          throw new RuntimeException(e);", "+        }", "+    d.addFileFilter(new FileFilter() {", "+      public boolean accept(File f) {", "+        String name = f.getName();", "+        int idx = name.lastIndexOf(\".\");", "+        return (name.substring(idx+1).equalsIgnoreCase(\"java\"));", "+      }", "+      public String getDescription() { return \"Only allow java files\"; };", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86831ad75368dcafc95ae534d6cc0e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "b432c2a5363ca609f111d7dec3ae5ed814c173ea", "commitAfterChange": "9d11311a2c8fe69828f38bf3b0da9037a3e51914", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "signatureAfterChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "diff": ["+        ", "-    ", "-        return Class.forName(s, false, classLoader);", "+        try", "+        {", "+          return Class.forName(s, false, classLoader);", "+        } catch (ClassNotFoundException e) {", "+          return findInnerClass(s);         ", "+        }        ", "+     ", "+      } catch (ClassNotFoundException e) {", "+      }", "+    }", "+    //Now look through classes staticly imported with .*; for a static inner class ", "+    it = importOnDemandStaticClauses.iterator();", "+    while (it.hasNext()) {", "+      String s = it.next();", "+      try {", "+        return Class.forName(s+\"$\"+str, false, classLoader);"]}], "num": 26762}
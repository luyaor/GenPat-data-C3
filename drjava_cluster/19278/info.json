{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da5d199e46d93538a0278e88109e9a21", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b7862eb2d48614f49b88622b1a417da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "8fa41241e2ac3011c3058f056c6e4c222dae479c", "commitAfterChange": "75615d6339345db6e253403db9b318fe78732c66", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": "   private int _calculateOffset(int delToSizePrev, String delToTypePrev,                                int delToSizeCurr, String delToTypeCurr,                                ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": "   private int _calculateOffset(int delToSizePrev, String delToTypePrev,                                int delToSizeCurr, String delToTypeCurr,                                ModelList<ReducedToken>.Iterator delTo)", "diff": ["+    int offset;", "-    ", "-    // case of /", "-    if (delToTypePrev.equals(\"/\")) {", "-      //  /-/* becoming //-*", "-      if(delToTypeCurr.equals(\"/*\") && ", "-         _checkPrevEquals(delTo,\"//\")) { //because pointer will be at *", "-           delTo.prev();", "-           return 1;", "-         }", "-      else if (delToTypeCurr.equals(\"//\") &&", "-               _checkPrevEquals(delTo,\"//\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"*/\") && //changed", "-               delTo.current().getType().equals(\"/*\")) {                    ", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"*\") &&", "-               delTo.current().getType().equals(\"/*\")) {", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"/\") &&", "-               delTo.current().getType().equals(\"//\")) {", "-                 return 1;", "-               }", "+         ", "+    // In this if clause, special characters are initially separated by some text", "+    // (represented here as ellipses), and when the text is deleted, the special", "+    // characters come together.  Sometimes, this breaks up the second token if", "+    // it is a multiple character brace.  Each in-line comment demonstrates", "+    // the individual case that occurs and for which we check with this if.", "+    // In this branch, both the cursor is off and the offset is also not correct.", "+    if (((delToTypePrev.equals(\"/\")) &&", "+         // /.../* => //-*", "+         ((delToTypeCurr.equals(\"/*\") && ", "+           _checkPrevEquals(delTo,\"//\")) ||", "+          // /...// => //-/", "+          (delToTypeCurr.equals(\"//\") &&", "+           _checkPrevEquals(delTo,\"//\")))) ||", "+        ", "+        ((delToTypePrev.equals(\"*\")) &&", "+         // *.../* => */-*", "+         ((delToTypeCurr.equals(\"/*\") && ", "+           _checkPrevEquals(delTo,\"*/\")) ||", "+          // *...// => */-/", "+          (delToTypeCurr.equals(\"//\") &&", "+           _checkPrevEquals(delTo,\"*/\")))) ||", "+        ", "+        ((delToTypePrev.equals(\"\\\\\")) &&", "+         // \\...\\\\ => \\\\-\\", "+         ((delToTypeCurr.equals(\"\\\\\\\\\") && ", "+           _checkPrevEquals(delTo,\"\\\\\")) ||", "+          // \\...\\' => \\\\-'", "+          (delToTypeCurr.equals(\"\\\\'\") &&", "+           _checkPrevEquals(delTo,\"'\")) ||", "+          // \\...\\\" => \\\\-\"", "+          (delToTypeCurr.equals(\"\\\\\\\"\") &&", "+           _checkPrevEquals(delTo,\"\\\"\"))))) {", "+             delTo.prev();", "+             offset = 1;", "+           }", "+    // In this branch, the cursor is on the right token, but the offset is not correct. ", "+    else if (((delToTypePrev.equals(\"/\")) &&", "+              // /-*/", "+              ((delToTypeCurr.equals(\"*/\") && ", "+                delTo.current().getType().equals(\"/*\")) ||", "+               (delToTypeCurr.equals(\"*\") &&", "+                delTo.current().getType().equals(\"/*\")) ||", "+               (delToTypeCurr.equals(\"/\") &&", "+                delTo.current().getType().equals(\"//\")))) ||", "+             ", "+             ((delToTypePrev.equals(\"*\")) &&", "+              ((delToTypeCurr.equals(\"/\") &&", "+                delTo.current().getType().equals(\"*/\")))) ||", "+             ", "+             ((delToTypePrev.equals(\"\\\\\")) &&", "+              ((delToTypeCurr.equals(\"\\\\\") &&", "+                delTo.current().getType().equals(\"\\\\\\\\\")) ||", "+               (delToTypeCurr.equals(\"'\") &&", "+                delTo.current().getType().equals(\"\\\\'\")) ||", "+               (delToTypeCurr.equals(\"\\\"\") &&", "+                delTo.current().getType().equals(\"\\\\\\\"\"))))) {", "+                  offset = 1;", "+                }", "+    // otherwise, we're on the right token and our offset is correct ", "+    // because no recombinations occurred", "+    else {", "+      offset = 0;", "-    //case of *", "-    else if (delToTypePrev.equals(\"*\")) {", "-      //  /-/* becoming //-*", "-      if(delToTypeCurr.equals(\"/*\") && ", "-         _checkPrevEquals(delTo,\"*/\")) { //because pointer will be at *", "-           delTo.prev();", "-           return 1;", "-         }", "-      else if (delToTypeCurr.equals(\"//\") &&", "-               _checkPrevEquals(delTo,\"*/\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"/\") &&", "-               delTo.current().getType().equals(\"*/\")) {", "-                 return 1;              ", "-               }", "-    }", "-    else if (delToTypePrev.equals(\"\\\\\")){", "-      if(delToTypeCurr.equals(\"\\\\\\\\\") && ", "-         _checkPrevEquals(delTo,\"\\\\\")) { //because pointer will be at *", "-           delTo.prev();", "-           return 1;", "-         }", "-      else if (delToTypeCurr.equals(\"\\\\'\") &&", "-               _checkPrevEquals(delTo,\"'\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }      ", "-      else if (delToTypeCurr.equals(\"\\\\\\\"\") &&", "-               _checkPrevEquals(delTo,\"\\\"\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"\\\\\") &&", "-               delTo.current().getType().equals(\"\\\\\\\\\")) ", "-               {", "-                 return 1;", "-               }", "-", "-      else if (delToTypeCurr.equals(\"'\") &&", "-               delTo.current().getType().equals(\"\\\\'\"))", "-               {", "-                 return 1;", "-               }", "-", "-      else if (delToTypeCurr.equals(\"\\\"\") &&", "-               delTo.current().getType().equals(\"\\\\\\\"\"))", "-               {", "-                 return 1;", "-               }", "-      ", "-    }", "-    ", "-    return 0;", "+    return offset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb76d1c2fa98af4fed176bacf697945f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "8fa41241e2ac3011c3058f056c6e4c222dae479c", "commitAfterChange": "75615d6339345db6e253403db9b318fe78732c66", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": "   private int _calculateOffset(int delToSizePrev, String delToTypePrev,                                int delToSizeCurr, String delToTypeCurr,                                ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": "   private int _calculateOffset(int delToSizePrev, String delToTypePrev,                                int delToSizeCurr, String delToTypeCurr,                                ModelList<ReducedToken>.Iterator delTo)", "diff": ["+    int offset;", "-    ", "-    // case of /", "-    if (delToTypePrev.equals(\"/\")) {", "-      //  /-/* becoming //-*", "-      if(delToTypeCurr.equals(\"/*\") && ", "-         _checkPrevEquals(delTo,\"//\")) { //because pointer will be at *", "-           delTo.prev();", "-           return 1;", "-         }", "-      else if (delToTypeCurr.equals(\"//\") &&", "-               _checkPrevEquals(delTo,\"//\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"*/\") && //changed", "-               delTo.current().getType().equals(\"/*\")) {                    ", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"*\") &&", "-               delTo.current().getType().equals(\"/*\")) {", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"/\") &&", "-               delTo.current().getType().equals(\"//\")) {", "-                 return 1;", "-               }", "+         ", "+    // In this if clause, special characters are initially separated by some text", "+    // (represented here as ellipses), and when the text is deleted, the special", "+    // characters come together.  Sometimes, this breaks up the second token if", "+    // it is a multiple character brace.  Each in-line comment demonstrates", "+    // the individual case that occurs and for which we check with this if.", "+    // In this branch, both the cursor is off and the offset is also not correct.", "+    if (((delToTypePrev.equals(\"/\")) &&", "+         // /.../* => //-*", "+         ((delToTypeCurr.equals(\"/*\") && ", "+           _checkPrevEquals(delTo,\"//\")) ||", "+          // /...// => //-/", "+          (delToTypeCurr.equals(\"//\") &&", "+           _checkPrevEquals(delTo,\"//\")))) ||", "+        ", "+        ((delToTypePrev.equals(\"*\")) &&", "+         // *.../* => */-*", "+         ((delToTypeCurr.equals(\"/*\") && ", "+           _checkPrevEquals(delTo,\"*/\")) ||", "+          // *...// => */-/", "+          (delToTypeCurr.equals(\"//\") &&", "+           _checkPrevEquals(delTo,\"*/\")))) ||", "+        ", "+        ((delToTypePrev.equals(\"\\\\\")) &&", "+         // \\...\\\\ => \\\\-\\", "+         ((delToTypeCurr.equals(\"\\\\\\\\\") && ", "+           _checkPrevEquals(delTo,\"\\\\\")) ||", "+          // \\...\\' => \\\\-'", "+          (delToTypeCurr.equals(\"\\\\'\") &&", "+           _checkPrevEquals(delTo,\"'\")) ||", "+          // \\...\\\" => \\\\-\"", "+          (delToTypeCurr.equals(\"\\\\\\\"\") &&", "+           _checkPrevEquals(delTo,\"\\\"\"))))) {", "+             delTo.prev();", "+             offset = 1;", "+           }", "+    // In this branch, the cursor is on the right token, but the offset is not correct. ", "+    else if (((delToTypePrev.equals(\"/\")) &&", "+              // /-*/", "+              ((delToTypeCurr.equals(\"*/\") && ", "+                delTo.current().getType().equals(\"/*\")) ||", "+               (delToTypeCurr.equals(\"*\") &&", "+                delTo.current().getType().equals(\"/*\")) ||", "+               (delToTypeCurr.equals(\"/\") &&", "+                delTo.current().getType().equals(\"//\")))) ||", "+             ", "+             ((delToTypePrev.equals(\"*\")) &&", "+              ((delToTypeCurr.equals(\"/\") &&", "+                delTo.current().getType().equals(\"*/\")))) ||", "+             ", "+             ((delToTypePrev.equals(\"\\\\\")) &&", "+              ((delToTypeCurr.equals(\"\\\\\") &&", "+                delTo.current().getType().equals(\"\\\\\\\\\")) ||", "+               (delToTypeCurr.equals(\"'\") &&", "+                delTo.current().getType().equals(\"\\\\'\")) ||", "+               (delToTypeCurr.equals(\"\\\"\") &&", "+                delTo.current().getType().equals(\"\\\\\\\"\"))))) {", "+                  offset = 1;", "+                }", "+    // otherwise, we're on the right token and our offset is correct ", "+    // because no recombinations occurred", "+    else {", "+      offset = 0;", "-    //case of *", "-    else if (delToTypePrev.equals(\"*\")) {", "-      //  /-/* becoming //-*", "-      if(delToTypeCurr.equals(\"/*\") && ", "-         _checkPrevEquals(delTo,\"*/\")) { //because pointer will be at *", "-           delTo.prev();", "-           return 1;", "-         }", "-      else if (delToTypeCurr.equals(\"//\") &&", "-               _checkPrevEquals(delTo,\"*/\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"/\") &&", "-               delTo.current().getType().equals(\"*/\")) {", "-                 return 1;              ", "-               }", "-    }", "-    else if (delToTypePrev.equals(\"\\\\\")){", "-      if(delToTypeCurr.equals(\"\\\\\\\\\") && ", "-         _checkPrevEquals(delTo,\"\\\\\")) { //because pointer will be at *", "-           delTo.prev();", "-           return 1;", "-         }", "-      else if (delToTypeCurr.equals(\"\\\\'\") &&", "-               _checkPrevEquals(delTo,\"'\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }      ", "-      else if (delToTypeCurr.equals(\"\\\\\\\"\") &&", "-               _checkPrevEquals(delTo,\"\\\"\")) {", "-                 delTo.prev();", "-                 return 1;", "-               }", "-      else if (delToTypeCurr.equals(\"\\\\\") &&", "-               delTo.current().getType().equals(\"\\\\\\\\\")) ", "-               {", "-                 return 1;", "-               }", "-", "-      else if (delToTypeCurr.equals(\"'\") &&", "-               delTo.current().getType().equals(\"\\\\'\"))", "-               {", "-                 return 1;", "-               }", "-", "-      else if (delToTypeCurr.equals(\"\\\"\") &&", "-               delTo.current().getType().equals(\"\\\\\\\"\"))", "-               {", "-                 return 1;", "-               }", "-      ", "-    }", "-    ", "-    return 0;", "+    return offset;"]}], "num": 19278}
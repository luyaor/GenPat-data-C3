{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3daaa3f87529d43f206421930baa800", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b06b4e9fdd1d6a09a5056a557e0404e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 322, "methodNumberAfterChange": 342, "signatureBeforeChange": "           public StaticMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "     public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings, Options options)          throws EvaluatorException", "diff": ["+    public Access.Module accessModule() { return _delegate.accessModule(); }", "+    public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings, Options options) ", "+        throws EvaluatorException {", "+      return _delegate.evaluate(receiver, args, bindings, options); ", "+    }", "-          new Lambda2<DJMethod, SignatureChecker, StaticMethodInvocation>() {", "-          public StaticMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), ", "-                                                        checker.typeArguments());", "-            Type rawReturned = m.returnType();", "-            Type returned = substitute(substitute(rawReturned, classSigma), sigma);", "-            // TODO: Handle the thrown types", "-            return new StaticMethodInvocation(m, returned, checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6557ca34b9b248b40e8bc9d7e7a64618", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 312, "signatureBeforeChange": "           public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "     protected MethodInvocationCandidate(DJMethod declaredMethod, Type declaringType,                                         Iterable<? extends Type> targs,                                         Iterable<? extends Expression> args,                                         Option<Type> expected)", "diff": ["+    protected final DJMethod _method; // the method, after conversions based on the declaring type", "+    protected MethodInvocationCandidate(DJMethod declaredMethod, Type declaringType,", "+                                        Iterable<? extends Type> targs,", "+                                        Iterable<? extends Expression> args,", "+                                        Option<Type> expected) {", "+      super(instantiateMethod(declaredMethod, declaringType), targs, args, expected);", "+      _declaredMethod = declaredMethod;", "+      _declaringType = declaringType;", "+      _method = (DJMethod) _f;", "+    }", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type rawReturned = m.returnType();", "-            Type returned = substitute(substitute(rawReturned, classSigma), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed33245714c9e34a2bebebfe5abf77c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 303, "methodNumberAfterChange": 319, "signatureBeforeChange": "           public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "     public ConstructorInvocation invocation()", "diff": ["+    }", "+    public ConstructorInvocation invocation() {", "+      SubstitutionMap sigma = substitution();", "+      Iterable<? extends Type> targs = _matcher.typeArguments();", "+      Iterable<? extends Expression> args = _matcher.arguments();", "+      Iterable<? extends Type> thrown = substitute(_f.thrownTypes(), sigma);", "+      return new ConstructorInvocation(_declaredConstructor, targs, args, thrown);", "+    }", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type returned = substitute(m.returnType(), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}], "num": 2073}
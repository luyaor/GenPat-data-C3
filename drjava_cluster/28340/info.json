{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52d0d31adfd07b1943f7d9977d28c7d7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03dfce0061b49eaf24fdfe09baf42a97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "      public void testForIncrementExpression()", "signatureAfterChange": "      public void testForIncrementExpression()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"Ned\")), new Word(JExprParser.NO_SOURCE_INFO, \"Flanders\"));", "-      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, nf);", "+      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "+      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, nf);", "-      PositivePrefixIncrementExpression ppi2 = new PositivePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\")));", "+      PositivePrefixIncrementExpression ppi2 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "-      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, new Parenthesized(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\"))));", "+      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "-      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(JExprParser.NO_SOURCE_INFO, nf);", "+      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, nf);", "-      NegativePostfixIncrementExpression npi2 = new NegativePostfixIncrementExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\")));", "+      NegativePostfixIncrementExpression npi2 = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "-      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(JExprParser.NO_SOURCE_INFO, new Parenthesized(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\"))));", "+      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "-      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, new Parenthesized(JExprParser.NO_SOURCE_INFO, new NegativePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "-      PositivePrefixIncrementExpression ppi5 = new PositivePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"s\")));", "+      PositivePrefixIncrementExpression ppi5 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")));", "-      PositivePrefixIncrementExpression ppi6 = new PositivePrefixIncrementExpression(JExprParser.NO_SOURCE_INFO, new Parenthesized(JExprParser.NO_SOURCE_INFO, new Parenthesized(JExprParser.NO_SOURCE_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi6 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, nf)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2430446c5b8b3d9a911cb22f63da2c36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "          public void testForIncrementExpression()", "signatureAfterChange": "          public void testForIncrementExpression()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "-      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, nf);", "+      ComplexNameReference nf = ", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Ned\")), ", "+                                 new Word(SourceInfo.NONE, \"Flanders\"));", "+      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NONE, nf);", "-      PositivePrefixIncrementExpression ppi2 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "+      PositivePrefixIncrementExpression ppi2 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "-      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "+      Parenthesized p1 = ", "+        new Parenthesized(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "+      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NONE, p1);", "-      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // For some reason, generated error is not a duplicate", "+      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // Generated error is not a duplicate", "-      //test that words with a post-decrement operator afterwards only work if they already have a value and aren't final.", "+      // Test that words with post-decrement operator only work if they already have a value and aren't final.", "-      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, nf);", "+      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NONE, nf);", "-      // test that attempting to decrement the value of a field that doesn't have a value will throw an error", "+      // Test that attempting to decrement the value of a field that doesn't have a value will throw an error", "-        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "-                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                       new Word(SourceInfo.NO_INFO, \"int\")));", "+        new NegativePostfixIncrementExpression(SourceInfo.NONE, ", "+                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                       new Word(SourceInfo.NONE, \"int\")));", "-      NegativePostfixIncrementExpression npi3 = ", "-        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "-                                               new Parenthesized(SourceInfo.NO_INFO, ", "-                                                                 new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                         new Word(SourceInfo.NO_INFO, \"int\"))));", "+      Parenthesized p2 = ", "+        new Parenthesized(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "+      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(SourceInfo.NONE, p2);", "-      PositivePrefixIncrementExpression ppi4 = ", "-        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "-                                              new Parenthesized(SourceInfo.NO_INFO, ", "-                                                                new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "+      Parenthesized p3 = new Parenthesized(SourceInfo.NONE, new NegativePrefixIncrementExpression(SourceInfo.NONE, nf));", "+      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(SourceInfo.NONE, p3);", "-        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "-                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                      new Word(SourceInfo.NO_INFO, \"s\")));", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, ", "+                                                                      new Word(SourceInfo.NONE, \"s\")));", "-      PositivePrefixIncrementExpression ppi6 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi6 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, new Parenthesized(SourceInfo.NONE, ", "+                                                                                 new Parenthesized(SourceInfo.NONE, nf)));"]}], "num": 28340}
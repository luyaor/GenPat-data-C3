{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4925d5a5b40d5751798a60b338c91f2f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187d7cc22a1bab2b2ac7768710e5edf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/TreeUtilitiesTest.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public void testClassToType()", "signatureAfterChange": "    public void testClassToType()", "diff": ["-                   equals(TreeUtilities.classToType(int.class)));", "+                   equals(TreeUtilities.classToTypeName(int.class)));", "-                   equals(TreeUtilities.classToType(double.class)));", "+                   equals(TreeUtilities.classToTypeName(double.class)));", "-                   equals(TreeUtilities.classToType(long.class)));", "+                   equals(TreeUtilities.classToTypeName(long.class)));", "-                   equals(TreeUtilities.classToType(float.class)));", "+                   equals(TreeUtilities.classToTypeName(float.class)));", "-                   equals(TreeUtilities.classToType(char.class)));", "+                   equals(TreeUtilities.classToTypeName(char.class)));", "-                   equals(TreeUtilities.classToType(byte.class)));", "+                   equals(TreeUtilities.classToTypeName(byte.class)));", "-                   equals(TreeUtilities.classToType(short.class)));", "+                   equals(TreeUtilities.classToTypeName(short.class)));", "-                   equals(TreeUtilities.classToType(boolean.class)));", "+                   equals(TreeUtilities.classToTypeName(boolean.class)));", "-                   equals(TreeUtilities.classToType(void.class)));", "+                   equals(TreeUtilities.classToTypeName(void.class)));", "-                   equals(TreeUtilities.classToType(int[].class)));", "+                   equals(TreeUtilities.classToTypeName(int[].class)));", "-                   equals(TreeUtilities.classToType(Integer.class)));", "+                   equals(TreeUtilities.classToTypeName(Integer.class)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63434ef62f95f26ea82886fa4961e47b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentHelperTest.java", "commitBeforeChange": "6d23d799552cf55313f22433cb12915906b19690", "commitAfterChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["-\t\t \"comments are ignored\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(23, delimiters1));", "-", "+                 \"comments are ignored\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(23, delimiters1));", "+    ", "-\t\t \"comments are ignored\",", "-\t\t 5,", "-\t\t _doc.findPrevDelimiter(16, delimiters1));", "-", "+                 \"comments are ignored\",", "+                 5,", "+                 _doc.findPrevDelimiter(16, delimiters1));", "+    ", "-\t\t \"are ignored\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(5, delimiters1));", "-", "+                 \"are ignored\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(5, delimiters1));", "+    ", "-\t\t \"are ignored\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(5, delimiters1));    ", "-", "+                 \"are ignored\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(5, delimiters1));", "+    ", "+    _setDocText(\"foo();\\nfor(;;)\\n\");", "+    assertEquals(\"Check that delimiters in paren phrases \" +", "+                 \"are usually ignored\",", "+                 5,", "+                 _doc.findPrevDelimiter(14, delimiters1));", "+    ", "+    _setDocText(\"foo();\\nfor(;;)\\n\");", "+    assertEquals(\"Check that delimiters in paren phrases \" +", "+                 \"can be detected\",", "+                 12,", "+                 _doc.findPrevDelimiter(14, delimiters1, false));", "+    ", "-\t\t DefinitionsDocument.ERROR_INDEX, ", "-\t\t _doc.findPrevDelimiter(20, delimiters2)); ", "+                 DefinitionsDocument.ERROR_INDEX, ", "+                 _doc.findPrevDelimiter(20, delimiters2)); ", "-\t\t 0,", "-\t\t _doc.findPrevDelimiter(20, delimiters3));", "+                 0,", "+                 _doc.findPrevDelimiter(20, delimiters3));", "-\t\t \"it is at cursor's position\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(5, delimiters1));", "+                 \"it is at cursor's position\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(5, delimiters1));", "-\t\t 17,", "-\t\t _doc.findPrevDelimiter(19, delimiters1));", "+                 17,", "+                 _doc.findPrevDelimiter(19, delimiters1));", "-\t\t 13,", "-\t\t _doc.findPrevDelimiter(17, delimiters1));", "+                 13,", "+                 _doc.findPrevDelimiter(17, delimiters1));", "-\t\t 5,", "-\t\t _doc.findPrevDelimiter(13, delimiters1));", "-", "+                 5,", "+                 _doc.findPrevDelimiter(13, delimiters1));", "+    ", "-\t\t \"after call to findPrevDelimiter\",", "-\t\t reducedModelPos,", "-\t\t _doc.getReduced().absOffset());", "+                 \"after call to findPrevDelimiter\",", "+                 reducedModelPos,", "+                 _doc.getReduced().absOffset());"]}], "num": 7466}
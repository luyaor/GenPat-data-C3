{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85a7e0eb01b87059ed6172e8f9f43207", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283b108e5809f10b68feb26808760ff5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "diff": ["-  /**Make sure that the condition statement of the while returns type boolean. */", "+  /** Make sure that the condition statement of the while returns type boolean. */", "-      if (!condition_result.isInstanceType()) {", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      if (! condition_result.isInstanceType()) {", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or \" +", "+                    \"interface name\", that);", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  condition_result.getName(), that.getCondition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761be2fa476c293df7fb5d0e001e5cc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result,                                        TypeData update_result, TypeData code_result)", "diff": ["-  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {", "+  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, ", "+                                      TypeData update_result, TypeData code_result) {", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or \" +", "+                  \"interface name\", that);", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + ", "+                  condition_result.getName(), that);"]}], "num": 26875}
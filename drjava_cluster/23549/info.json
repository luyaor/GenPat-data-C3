{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0c70d459642d58a88809874164ec615", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38e4c291984bc8cddc59c7e92d8d361", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "20a2512e394be5865ddd8dc1ebd648c5dfb08d0c", "commitAfterChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public int replaceAll()", "signatureAfterChange": "   public int replaceAll()", "diff": ["+    if (_searchAllDocuments) {", "+      Document startDoc = _doc;", "+      _searchAllDocuments = false;", "+      int count = _replaceAllInCurrentDoc();", "+      _doc = _docIterator.getNextDocument(_doc);", "+      while (startDoc != _doc) {", "+        count += _replaceAllInCurrentDoc();", "+        _doc = _docIterator.getNextDocument(_doc);", "+      }", "+      _searchAllDocuments = true;", "+      return count;", "+    }", "+    else {", "+      return _replaceAllInCurrentDoc();", "+    }", "+  }", "-    } catch (BadLocationException e) {", "-//    int found = fr.getFoundOffset();", "-    int wrapped = 0;", "-    if (fr.getWrapped())", "-      wrapped++;", "-    while(wrapped == 0) {", "-//      found = fr.getFoundOffset();", "-      if (fr.getWrapped())", "-        wrapped++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff336ada90828c075f9e7184f90af8b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TopLevelContext.java", "commitBeforeChange": "6b936f625ceea21472b90559f34694154e802e14", "commitAfterChange": "8d43ad99265fb94492eb304c2a9128684a27d753", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public DJClass getTopLevelClass(String name, TypeSystem ts) throws AmbiguousNameException", "signatureAfterChange": "   public DJClass getTopLevelClass(String name, TypeSystem ts) throws AmbiguousNameException", "diff": ["-    if (TextUtil.contains(name, '.')) {", "-      try { return SymbolUtil.wrapClass(_loader.loadClass(name)); }", "-      catch (ClassNotFoundException e) { return null; }", "-      catch (LinkageError e) { return null; }", "-    }", "+    if (TextUtil.contains(name, '.')) { return super.getTopLevelClass(name, ts); }", "-        try { result = SymbolUtil.wrapClass(_loader.loadClass(makeClassName(name))); }", "-        catch (ClassNotFoundException e) { /* ignore -- class is not in the imported/default package */ }", "-        catch (LinkageError e) { /* ignore -- class is not in the imported/default package */ }", "+        result = super.getTopLevelClass(makeClassName(name), ts);", "-          LinkedList<Class<?>> onDemandMatches = new LinkedList<Class<?>>();", "+          LinkedList<String> onDemandNames = new LinkedList<String>();", "-            try { onDemandMatches.add(_loader.loadClass(p + \".\" + name)); }", "-            catch (ClassNotFoundException e2) { /* ignore -- class is not in this package */ }", "-            catch (LinkageError e) { /* ignore -- class is not in this package */ }", "+            String fullName = p + \".\" + name;", "+            if (super.topLevelClassExists(fullName, ts)) { onDemandNames.add(fullName); }", "-          if (onDemandMatches.size() > 1) { throw new AmbiguousNameException(); }", "-          else if (onDemandMatches.size() == 1) { result = SymbolUtil.wrapClass(onDemandMatches.getFirst()); }", "+          if (onDemandNames.size() > 1) { throw new AmbiguousNameException(); }", "+          else if (onDemandNames.size() == 1) { result = super.getTopLevelClass(onDemandNames.get(0), ts); }"]}], "num": 23549}
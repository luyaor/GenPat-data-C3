{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d61c5be591e1829d910584e3444cdaf9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7bd9707c67b5767467ca6299d8ee92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AboutDialog.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public static String getLicense()", "signatureAfterChange": "    public static String getLicense()", "diff": ["-      if(is!=null) {", "+      if (is != null) {", "-        StringBuffer sb = new StringBuffer();", "-        for(String s = r.readLine(); s != null; s = r.readLine()) {", "-          int lastSig = s.length()-1; // the last char index", "-", "-          while(lastSig >= 0 && Character.isWhitespace(s.charAt(lastSig))) {", "-            lastSig--;", "+        try {", "+          ", "+          StringBuffer sb = new StringBuffer();", "+          for(String s = r.readLine(); s != null; s = r.readLine()) {", "+            int lastSig = s.length()-1; // the last char index", "+            ", "+            while(lastSig >= 0 && Character.isWhitespace(s.charAt(lastSig))) lastSig--;", "+            if (lastSig < 0) sb.append(\"\\n\"); // empty line, so insert two newlines.", "+            else {", "+              sb.append(s.substring(0,lastSig+1));", "+              sb.append('\\n');", "+            }", "-          if(lastSig<0) {", "-            sb.append(\"\\n\"); // empty line, so insert two newlines.", "-          } else {", "-            sb.append(s.substring(0,lastSig+1));", "-            sb.append('\\n');", "-          }", "+          LICENSE = sb.toString();", "+          LICENSE = LICENSE.trim();", "+          if (LICENSE.length() == 0) LICENSE = null;", "-        LICENSE = sb.toString();", "-        LICENSE = LICENSE.trim();", "-        if(LICENSE.length() == 0) {", "-          LICENSE = null;", "+        finally { ", "+          is.close();", "+          r.close();", "-    catch(Exception e) {", "-      throw new UnexpectedException(e, StringOps.getStackTrace(e));", "-//      LICENSE = null;", "-    }", "+    catch(Exception e) { throw new UnexpectedException(e, StringOps.getStackTrace(e)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71cad6897ec776bf180356fef35e5165", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "+        if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+        else setPosition(getCurrentOffset() - wordLength);", "-      // if we've found it", "-      if (foundOffset >= 0) {", "+", "+      if (foundOffset >= 0) { // we have found it", "-        if (!_searchBackwards) {", "-          foundOffset += findWord.length();", "-        }", "+        if (!_searchBackwards) foundOffset += findWord.length();", "-      else {", "-        // if we haven't found it", "+      else { // we haven't found it yet", "-        // we still haven't found it", "-        if (foundOffset == -1) {", "+        if (foundOffset == -1) {  // we still haven't found it", "-            if (len > _doc.getLength()) {", "-              len = _doc.getLength();", "-            }", "+            if (len > _doc.getLength()) len = _doc.getLength();", "-          else {", "+          else {  // found it", "-            if (start < 0) {", "-              start = 0;", "-            }", "+            if (start < 0) start = 0;", "-          if (!_matchCase) {", "-            findSpace = findSpace.toLowerCase();", "-          }", "+          if (!_matchCase) findSpace = findSpace.toLowerCase();", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-            }", "+            if (!_searchBackwards) foundOffset += findWord.length();", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7730bdc0d2aaa5131069d53e4917a8a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "+        if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+        else setPosition(getCurrentOffset() - wordLength);", "-", "+      String searchDocument;", "-      String searchDocument = _doc.getText(0, _doc.getLength());", "+      _doc.acquireReadLock();", "+      try { searchDocument = _doc.getText(0, _doc.getLength()); }", "+      finally { _doc.releaseReadLock(); }", "-      if (indexOf(searchDocument, _findWord) != -1) {", "-        return findNextHelp(searchDocument, searchOriginLocation);", "-      }", "-      else {", "-        return new FindResult(_doc, -1, true);", "-      }", "+      if (indexOf(searchDocument, _findWord) == -1) return new FindResult(_doc, -1, true);", "+      return findNextHelp(searchDocument, searchOriginLocation);", "-    catch (BadLocationException e) {", "-      throw new RuntimeException(e.getMessage());", "-    }", "+    catch (BadLocationException e) { throw new RuntimeException(e.getMessage()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8f3d141d99beb46ed066e94a0ef419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-   */", "+  /** If we're on a match for the find word, replace it with the replace word. */", "-        if (!_searchBackwards) {", "-          position -= _findWord.length();", "-        }", "+        if (!_searchBackwards) position -= _findWord.length();", "-        if (position == 0) {", "-          atStart = true;", "-        }", "+        if (position == 0) atStart = true;", "-        if (atStart && !_searchBackwards) {", "-          setPosition(_replaceWord.length());", "-        }", "-        if (!atStart && _searchBackwards) {", "-          setPosition(getCurrentOffset() - _replaceWord.length());", "-        }", "+        if (atStart && !_searchBackwards) setPosition(_replaceWord.length());", "+        else if (!atStart && _searchBackwards) setPosition(getCurrentOffset() - _replaceWord.length());", "-      else {", "-        return false;", "-      }", "+      return false;", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 18287}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f5dda20ce00ce9742806530442ecddf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42be2572ab1794737f4a2e26d6cffec2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/SavableConfiguration.java", "commitBeforeChange": "3e99371826dd4ffe9dc805b1632e784bb19f7af4", "commitAfterChange": "f1019f9568774298366441c3a10efdd63f48057e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "signatureAfterChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "diff": ["-    Iterator<OptionParser> keys = map.keys();", "+    Iterator<OptionParser<?>> keys = map.keys();", "-    OptionParser key;", "-", "+    OptionParser<?> key;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "994451e3674b3fc18ad71a2a2d46bdfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "37449cba11f74bdf3921e2b515b5228eef23235b", "commitAfterChange": "43a72be50c3246f8e631a488321fd0367ada5a58", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected JComponent[] makeButtons()", "signatureAfterChange": "   protected JComponent[] makeButtons()", "diff": ["-    _colorBox = new JComboBox();    ", "+    _colorBox = new JComboBox<Color>();    ", "-    _colorBox.addItem(\"None\");", "+    _colorBox.addItem(null);  // formerly \"None\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d620169dd908f1b9840e079d41cb2db6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static AbstractTypeChecker makeTypeChecker(Context ctx)", "signatureAfterChange": "   public static AbstractTypeChecker makeTypeChecker(Context<Type> ctx)", "diff": ["-  public static AbstractTypeChecker makeTypeChecker(Context ctx) {", "-    if(!TigerUtilities.isTigerEnabled()) {", "-      return new TypeChecker14(ctx);", "-    }", "-    else {", "-      return new TypeChecker15(ctx);", "-    }    ", "+  /** Builds an appropriate type checker object. */", "+  public static AbstractTypeChecker makeTypeChecker(Context<Type> ctx) {", "+    if (!TigerUtilities.isTigerEnabled()) return new TypeChecker14(ctx);", "+    return new TypeChecker15(ctx);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd31007be70aef6f2dac0f6aeee1e7e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class compile()", "signatureAfterChange": "   public Class compile()", "diff": ["+   */", "+  public Class compile() {", "+    // Create a class factory", "+    ClassInfo dc = classInfo.getDeclaringClass();", "+    String outer = (dc != null) ? dc.getName() : null;", "+    int       af = typeDeclaration.getAccessFlags();", "+    String  name = classInfo.getName();", "+    ", "+    if (isInterface) {", "+      af |= Modifier.INTERFACE;", "-     */", "-    public Class compile() {", "-\t// Create a class factory", "-\tClassInfo dc = classInfo.getDeclaringClass();", "-\tString outer = (dc != null) ? dc.getName() : null;", "-\tint       af = typeDeclaration.getAccessFlags();", "-\tString  name = classInfo.getName();", "-", "-\tif (isInterface) {", "-\t    af |= Modifier.INTERFACE;", "-\t}", "-", "-\tclassFactory = new ClassFactory(af,", "-\t\t\t\t\tname,", "-\t\t\t\t\tclassInfo.getSuperclass().getName(),", "-\t\t\t\t\tinterpreter.getClass(),", "-\t\t\t\t\tinterpreter.getExceptionClass(),", "-\t\t\t\t\tinterpreter.getClassLoader().toString());", "-", "-\t// Add the innerclass attributes", "-\tif (dc != null) {", "-\t    addInnerClassesAttribute(classInfo);", "-\t}", "-", "-\tClassInfo[] inners = classInfo.getDeclaredClasses();", "-\tfor (int i = 0; i < inners.length; i++) {", "-\t    String ciname = inners[i].getName();", "-", "-\t    InnerClassesEntry ice = classFactory.addInnerClassesEntry();", "-\t    ice.setInnerClassInfo(ciname);", "-\t    ice.setOuterClassInfo(name);", "-\t    ice.setInnerName(ciname.substring(name.length() + 1, ciname.length()));", "-\t    ice.setInnerClassAccessFlags((short)inners[i].getModifiers());", "-\t}", "-", "-\t// Add the interfaces", "-\tClassInfo[] ci = classInfo.getInterfaces();", "-\tfor (int i = 0; i < ci.length; i++) {", "-\t    classFactory.addInterface(ci[i].getName());", "-\t}", "-", "-\t// Check and create the members", "-\tIterator it = typeDeclaration.getMembers().iterator();", "-\twhile (it.hasNext()) {", "-\t    ((Node)it.next()).acceptVisitor(membersVisitor);", "-\t}", "-", "-\tif (!isInterface &&", "-\t    hasAbstractMethod &&", "-\t    !Modifier.isAbstract(af)) {", "-\t    typeDeclaration.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t\t\tnew String[] { name });", "-\t    throw new ExecutionError(\"misplaced.abstract\", typeDeclaration );", "-\t}", "-", "-\t// Create the constructor(s)", "-\tif (!isInterface) {", "-\t    ConstructorInfo[] cons = classInfo.getConstructors();", "-\t    for (int i = 0; i < cons.length; i++) {", "-\t\taddConstructor((TreeConstructorInfo)cons[i]);", "-\t    }", "-\t}", "-", "-\t// Create the class initializer", "-\tif (classInitializer.size() > 0) {", "-\t    interpreter.registerMethod", "-\t\t(classFactory.createClassInitializer(),", "-\t\t new MethodDeclaration(Modifier.PUBLIC,", "-\t\t\t\t       new VoidType(),", "-\t\t\t\t       \"<clinit>\",", "-\t\t\t\t       new LinkedList(),", "-\t\t\t\t       new LinkedList(),", "-\t\t\t\t       new BlockStatement(classInitializer)),", "-\t\t importationManager);", "-\t}", "-", "-\t// Define the class", "-\tTreeClassLoader classLoader = (TreeClassLoader)interpreter.getClassLoader();", "-\treturn classLoader.defineClass(name, classFactory.getByteCode());", "+    ", "+    classFactory = new ClassFactory(af,", "+                                    name,", "+                                    classInfo.getSuperclass().getName(),", "+                                    interpreter.getClass(),", "+                                    interpreter.getExceptionClass(),", "+                                    interpreter.getClassLoader().toString());", "+    ", "+    // Add the innerclass attributes", "+    if (dc != null) {", "+      addInnerClassesAttribute(classInfo);", "+    ", "+    ClassInfo[] inners = classInfo.getDeclaredClasses();", "+    for (int i = 0; i < inners.length; i++) {", "+      String ciname = inners[i].getName();", "+      ", "+      InnerClassesEntry ice = classFactory.addInnerClassesEntry();", "+      ice.setInnerClassInfo(ciname);", "+      ice.setOuterClassInfo(name);", "+      ice.setInnerName(ciname.substring(name.length() + 1, ciname.length()));", "+      ice.setInnerClassAccessFlags((short)inners[i].getModifiers());", "+    ", "+    // Add the interfaces", "+    ClassInfo[] ci = classInfo.getInterfaces();", "+    for (int i = 0; i < ci.length; i++) {", "+      classFactory.addInterface(ci[i].getName());", "+    ", "+    // Check and create the members", "+    Iterator it = typeDeclaration.getMembers().iterator();", "+    while (it.hasNext()) {", "+      ((Node)it.next()).acceptVisitor(membersVisitor);", "+    }", "+    ", "+    if (!isInterface &&", "+        hasAbstractMethod &&", "+        !Modifier.isAbstract(af)) {", "+      typeDeclaration.setProperty(NodeProperties.ERROR_STRINGS,", "+                                  new String[] { name });", "+      throw new ExecutionError(\"misplaced.abstract\", typeDeclaration );", "+    }", "+    ", "+    // Create the constructor(s)", "+    if (!isInterface) {", "+      ConstructorInfo[] cons = classInfo.getConstructors();", "+      for (int i = 0; i < cons.length; i++) {", "+        addConstructor((TreeConstructorInfo)cons[i]);", "+      }", "+    }", "+    ", "+    // Create the class initializer", "+    if (classInitializer.size() > 0) {", "+      interpreter.registerMethod", "+        (classFactory.createClassInitializer(),", "+         new MethodDeclaration(Modifier.PUBLIC,", "+                               new VoidType(),", "+                               \"<clinit>\",", "+                               new LinkedList<FormalParameter>(),", "+                               new LinkedList<List<IdentifierToken>>(),", "+                               new BlockStatement(classInitializer)),", "+         importationManager);", "+    }", "+    ", "+    // Define the class", "+    TreeClassLoader classLoader = (TreeClassLoader)interpreter.getClassLoader();", "+    return classLoader.defineClass(name, classFactory.getByteCode());", "+  }"]}], "num": 20183}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54dae7efd092bee8daf3cbcafc658711", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a5d27a9b7e12f128cdd9eb53260063", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "          @Override public Void visit(FieldDeclaration node)", "signatureAfterChange": "          @Override public Void visit(MethodDeclaration node)", "diff": ["+    ", "+    @Override public Void visit(MethodDeclaration node) {", "+      super.visit(node);", "+      int access = node.getAccessFlags();", "+      if (Modifier.isAbstract(access) && node.getBody() != null) {", "+        setErrorStrings(node, node.getName());", "+        throw new ExecutionError(\"abstract.method.body\", node);", "+      }", "+      else if (!Modifier.isAbstract(access) && node.getBody() == null) {", "+        setErrorStrings(node, node.getName());", "+        throw new ExecutionError(\"missing.method.body\", node);", "+      }", "-      Type expectedT = getType(node.getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daac0ba64952332f71ec749e963d3261", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "8c59b6d09078dbcf117925bc686cacee46ca999f", "commitAfterChange": "f8e25255cc9b1c52f4c1874e15c63efdafe32091", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(SimpleFieldAccess node)", "diff": ["-      catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "+      catch (AmbiguousNameException e) {", "+        setErrorStrings(node, node.getFieldName());", "+        throw new ExecutionError(\"ambiguous.name\", node);", "+      }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "+        else {", "+          setErrorStrings(node, node.getFieldName());", "+          throw new ExecutionError(\"ambiguous.name\", node);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd6ace8989087245a5541b7d094612d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "128dfa585f73f276b6d45e70cb656b74c7a3ac52", "commitAfterChange": "75d6ee48e583e9a62b38304dae2bad1322e37e97", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "     @Override public Type visit(ThisExpression node)", "signatureAfterChange": "     @Override public Type visit(ThisExpression node)", "diff": ["-      String name = node.getClassName();", "-      DJClass thisC;", "-      if (name.equals(\"\")) {", "-        thisC = context.getThis();", "-        if (thisC == null) { throw new ExecutionError(\"this.undefined\", node); }", "-      }", "-      else {", "-        thisC = context.getThis(name);", "-        if (thisC == null) {", "-          setErrorStrings(node, name);", "-          throw new ExecutionError(\"undefined.class\", node);", "-        }", "-      }", "+      DJClass thisC = resolveThis(node.getClassName(), node);"]}], "num": 1107}
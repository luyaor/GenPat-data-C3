{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9682b70f4f56cd6b8aaf9219996a3a6f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03af600c879f44347fade3010e20f303", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 247, "signatureBeforeChange": "      private Expression box(Expression exp, ClassType boxedType)", "signatureAfterChange": "      private Expression box(Expression exp, ClassType boxedType)", "diff": ["-      StaticMethodCall m = new StaticMethodCall(boxedTypeName, \"valueOf\", arguments, ", "-                                                exp.getFilename(), exp.getBeginLine(), exp.getBeginColumn(), ", "-                                                exp.getEndLine(), exp.getEndColumn());", "+      StaticMethodCall m = new StaticMethodCall(boxedTypeName, \"valueOf\", arguments, exp.getSourceInfo());", "-      SimpleAllocation k = new SimpleAllocation(boxedTypeName, arguments, exp.getFilename(), exp.getBeginLine(),", "-                                                exp.getBeginColumn(), exp.getEndLine(), exp.getEndColumn());", "+      SimpleAllocation k = new SimpleAllocation(boxedTypeName, arguments, exp.getSourceInfo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39764e7541d38b6c1dea28c43049409a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "6a5c20e1ee845b9752ac481574f6a7bee8c034e1", "commitAfterChange": "dd020118801905f09871a55ddb6fe47a118916d4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void _updateNoErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateNoErrors() throws BadLocationException", "diff": ["+      String message;", "-        doc.insertString(0,", "-                         \"Last compilation completed successfully.\",", "-                         NORMAL_ATTRIBUTES);", "+        message = \"Last compilation completed successfully.\";", "+      else {", "+        if (_model.getAvailableCompilers().length == 0) {", "+          message = \"No compiler is available.  Please specify one in\\n\" +", "+                    \"the Preferences dialog in the Edit menu.\";", "+        }", "+        else {", "+          message = _model.getActiveCompiler().getName() +", "+            \" compiler ready.\";", "+        }", "+      }", "+      ", "+      doc.insertString(0, message, NORMAL_ATTRIBUTES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd3d9d772bb080a734fbc2d6538c04d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JavaClass.java", "commitBeforeChange": "bd4a771b77ba1887596583ce142a4b7d1fa91b7e", "commitAfterChange": "f8e4975fc86eccfc2e1e190be55c64d1a287745a", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "          public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings,                             Options options) throws EvaluatorException", "signatureAfterChange": "          public Object evaluate(Object receiver, Iterable<Object> args, RuntimeBindings bindings,                             Options options) throws EvaluatorException", "diff": ["-        throw new EvaluatorException(e.getCause(),", "-                                      \"java.lang.reflect.Method.invoke\",", "-                                      \"sun.reflect.DelegatingMethodAccessorImpl.invoke\",", "-                                      \"sun.reflect.NativeMethodAccessorImpl.invoke\",", "-                                      \"sun.reflect.NativeMethodAccessorImpl.invoke0\");", "+        throw new EvaluatorException(e.getCause(), METHOD_EXTRA_STACK);", "+      }", "+      catch (ExceptionInInitializerError e) {", "+        throw new EvaluatorException(e, METHOD_EXTRA_STACK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc24b47b5cfb2d9d29511ef81404325", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-                                              node.getFilename(), node.getBeginLine(), node.getBeginColumn(),", "-                                              node.getEndLine(), node.getEndColumn());", "+                                              node.getSourceInfo());", "-                                               node.getArguments(), node.getFilename(), node.getBeginLine(),", "-                                               node.getBeginColumn(), node.getEndLine(), node.getEndColumn());", "+                                               node.getArguments(), node.getSourceInfo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae2ed51ab86cae789a253c5d0e7c3e35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/HistoryTest.java", "commitBeforeChange": "4982367a9f8342b35bf4d2b855165f1464002815", "commitAfterChange": "53e98ff57787e0706379741f49fd137430e3549b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testLiveUpdateOfHistoryMaxSize()", "signatureAfterChange": "   public void testLiveUpdateOfHistoryMaxSize()", "diff": ["+   */", "+    assertEquals(\"History size should be 20\",", "+                 20, _history.size());", "+    ", "-    DrJava.getConfig().setSetting(HISTORY_MAX_SIZE, new Integer(100));", "+    _history.setMaxSize(100);", "-                 10,", "-                 _history.size());", "+                 10, _history.size());", "-    DrJava.getConfig().setSetting(HISTORY_MAX_SIZE, new Integer(0));", "+    _history.setMaxSize(0);", "-                 0,", "-                 _history.size());", "+                 0, _history.size());", "-                 0,", "-                 _history.size());", "+                 0, _history.size());"]}], "num": 6158}
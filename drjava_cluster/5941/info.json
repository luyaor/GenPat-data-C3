{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "feb24b7a7ff1336572f6be34c384d27b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a940136c8ffdace392984b38af3c4668", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "       public int hashCode()", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static <K extends Comparable<? super K>, V> Thunk<Map<K, V>> treeMapFactory()", "diff": ["+   */", "+  @SuppressWarnings(\"unchecked\")", "+  public static <K extends Comparable<? super K>, V> Thunk<Map<K, V>> treeMapFactory() {", "+    // not sure why the weakening cast is necessary here but not elsewhere", "+    return (Thunk<Map<K, V>>) (Thunk<? extends Map<?, ?>>) DefaultTreeMapFactory.INSTANCE;", "+  }", "-      }", "-      public int hashCode() {", "-        V val = map.get(key);", "-        return (key == null ? 0 : key.hashCode()) ^ (val == null ? 0 : val.hashCode());", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1c4b4e09e2bbd1e83974b5f7501eef5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "0e1d09dde6936169177bd564168991351deb65d8", "commitAfterChange": "a4e2145de592013fb29da195ee7f505ebce1be18", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 16, "signatureBeforeChange": "      public static <T> Set<T> functionClosure(Set<T> base, Lambda<? super T, ? extends T> function)", "signatureAfterChange": "      public static <T> Set<T> functionClosure(Set<? extends T> base, final Lambda<? super T, ? extends T> function)", "diff": ["-  public static <T> Set<T> functionClosure(Set<T> base, Lambda<? super T, ? extends T> function) {", "-    @SuppressWarnings(\"unchecked\")", "-    SingletonSetLambda<T> factory = (SingletonSetLambda<T>) SingletonSetLambda.INSTANCE;", "-    return graphClosure(base, LambdaUtil.<T, T, Set<T>>compose(function, factory));", "+  public static <T> Set<T> functionClosure(Set<? extends T> base, final Lambda<? super T, ? extends T> function) {", "+    Lambda<T, Set<T>> neighbors = new Lambda<T, Set<T>>() {", "+      public Set<T> value(T node) { return Collections.singleton(function.value(node)); }", "+    };", "+    return graphClosure(base, neighbors);"]}], "num": 5941}
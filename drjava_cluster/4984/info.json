{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "690839dbec3ad71aa3a97fa1bf1779c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164eefc50435432078f05fb8cd352bda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public String getClasspathString()", "signatureAfterChange": "   public String getClasspathString()", "diff": ["-   */", "-  public String getClasspathString() {", "-    StringBuffer cp = new StringBuffer();", "-    for (int i=0; i < _classpath.size(); i++) {", "-      cp.append(_classpath.get(i));", "-      cp.append(System.getProperty(\"path.separator\"));", "-    }", "-    return cp.toString();", "-  }", "+   */", "+  public String getClasspathString() {", "+    StringBuffer cp = new StringBuffer();", "+    List<ClasspathEntry> locpe = classpathManager.getProjectCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getBuildDirectoryCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getProjectFilesCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getExternalFilesCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+", "+    locpe = classpathManager.getExtraCP();", "+    for (ClasspathEntry e: locpe) {", "+      cp.append(e.getEntry().toString());", "+      cp.append(System.getProperty(\"path.separator\"));", "+    }", "+    ", "+    // append system path last", "+    cp.append(System.getProperty(\"java.class.path\"));", "+", "+    return cp.toString();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "839881196b5e7795b5c57e5184980af7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "cf1b07a5f122d4faa57c9cb7ed7def1489ba2183", "commitAfterChange": "cf133e63dac33b490f37f86f2c16723ac73d3ddb", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public String getClasspathString()", "signatureAfterChange": "   public ClasspathVector getClasspath()", "diff": ["-  public String getClasspathString() {", "-    StringBuffer cp = new StringBuffer();", "+  public ClasspathVector getClasspath() {", "+    ClasspathVector ret = new ClasspathVector();", "+    List<ClasspathEntry> locpe;", "-    appendAllClasspaths(classpathManager.getProjectCP(),        cp);", "-    appendAllClasspaths(classpathManager.getBuildDirectoryCP(), cp);", "-    appendAllClasspaths(classpathManager.getProjectFilesCP(),   cp);", "-    appendAllClasspaths(classpathManager.getExternalFilesCP(),  cp);", "-    appendAllClasspaths(classpathManager.getExtraCP(),          cp);", "-    ", "-    // append system path last", "-    cp.append(System.getProperty(\"java.class.path\"));", "+    locpe = classpathManager.getProjectCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "-    return cp.toString();", "-  }", "+    locpe = classpathManager.getBuildDirectoryCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    locpe = classpathManager.getProjectFilesCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    locpe = classpathManager.getExternalFilesCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    locpe = classpathManager.getExtraCP();", "+    for (ClasspathEntry e: locpe) ret.add(e.getEntry());", "+    ", "+    return ret;", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06fefa9e5c9ecd2ecbabe4ef7872528", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public Vector<String> getAugmentedClasspath()", "signatureAfterChange": "   public Vector<URL> getAugmentedClasspath()", "diff": ["-   */", "-  public Vector<String> getAugmentedClasspath() {", "-    return _classpath;", "-  }", "+   */", "+  public Vector<URL> getAugmentedClasspath() {", "+    Vector<URL> ret = new Vector<URL>();", "+    List<ClasspathEntry> locpe = classpathManager.getProjectCP();", "+    for (ClasspathEntry e: locpe) {", "+      ret.add(e.getEntry());", "+    }", "+", "+    locpe = classpathManager.getBuildDirectoryCP();", "+    for (ClasspathEntry e: locpe) {", "+      ret.add(e.getEntry());", "+    }", "+", "+    locpe = classpathManager.getProjectFilesCP();", "+    for (ClasspathEntry e: locpe) {", "+      ret.add(e.getEntry());", "+    }", "+", "+    locpe = classpathManager.getExternalFilesCP();", "+    for (ClasspathEntry e: locpe) {", "+      ret.add(e.getEntry());", "+    }", "+", "+    locpe = classpathManager.getExtraCP();", "+    for (ClasspathEntry e: locpe) {", "+      ret.add(e.getEntry());", "+    }", "+    return ret;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a777b466781101a0d5dbba371556ef45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 106, "signatureBeforeChange": "          public ConstraintSet and(ConstraintSet s)", "signatureAfterChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "diff": ["-    ", "-    public ConstraintSet and(ConstraintSet s) {", "-      if (!s.isSatisfiable()) { return s; }", "-      else if (s.isEmpty()) { return this; }", "-      else {", "-        ConstraintSet result = new ConstraintSet(this);", "-        for (Map.Entry<VariableType, Type> entry : s._lowerBounds.entrySet()) {", "-          result = result.andLowerBound(entry.getKey(), entry.getValue());", "-        }", "-        for (Map.Entry<VariableType, Type> entry : s._upperBounds.entrySet()) {", "-          result = result.andUpperBound(entry.getKey(), entry.getValue());", "-        }", "-        return result;", "-      }", "-    }", "+    ", "+    public Option<ConstraintScenario> and(ConstraintScenario that) {", "+      ConstraintScenario result = new ConstraintScenario();", "+      for (VariableType var : union(_lowerBounds.keySet(), that._lowerBounds.keySet())) {", "+        result._lowerBounds.put(var, JOIN_NORM.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "+      }", "+      for (VariableType var : union(_upperBounds.keySet(), that._upperBounds.keySet())) {", "+        result._upperBounds.put(var, MEET_NORM.value(IterUtil.make(upperBound(var), that.upperBound(var))));", "+      }", "+      return result.isWellFormed() ? Option.some(result) : Option.<ConstraintScenario>none(); ", "+    }"]}], "num": 4984}
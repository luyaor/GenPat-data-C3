{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "999717091409167d06df277e216275be", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9213b518d572958bba3e65b679a4a7c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "a757cd8e27c11c0cc6bf4ab20e64c2d65c2b4076", "commitAfterChange": "0fb45818396fd0f22d5caa4d32dda7936589092c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      public boolean showFile(SourceSource src, int line, int count)", "signatureAfterChange": "      public boolean showFile(SourceSource src, int line, int count)", "diff": ["-      DrJava.consoleErr().println(\"DP: showFile()...\");", "+      //DrJava.consoleErr().println(\"DP: showFile()...\");", "-\t      //            DrJava.consoleOut().println(\"DebugPanel: file: \" + file.getName());", "+       //            DrJava.consoleOut().println(\"DebugPanel: file: \" + file.getName());", "-            _model.setActiveDocument(doc);\t    ", "-\t    //            DrJava.consoleErr().println(\"Showing line \" + line);\t    ", "+            _model.setActiveDocument(doc);     ", "+     //            DrJava.consoleErr().println(\"Showing line \" + line);     ", "-\t\t/*", "- \t      if (_curBP>0 && line != _curBP) // remove existing bp", "-\t\t_frame.getCurrentDefPane().getHighlighter().removeHighlight(_curBreakpointTag);", "+  /*", "+        if (_curBP>0 && line != _curBP) // remove existing bp", "+  _frame.getCurrentDefPane().getHighlighter().removeHighlight(_curBreakpointTag);", "-\t      _curBreakpointTag = highlightLine(line, _activeBreakpointHighlightPainter);", "-\t      _curBP = line;", "-\t\t*/    ", "-\t      // _frame.getCurrentDefPane().setCaretPosition(doc.getDocument().getCurrentLocation());", "-\t      ", "+       _curBreakpointTag = highlightLine(line, _activeBreakpointHighlightPainter);", "+       _curBP = line;", "+  */    ", "+       // _frame.getCurrentDefPane().setCaretPosition(doc.getDocument().getCurrentLocation());", "+       ", "-              DrJava.consoleOut().println(\"DebugPanel: file: \" + file.getName());", "-              DrJava.consoleOut().println(\" NEEDED HACK.\");", "+              //DrJava.consoleOut().println(\"DebugPanel: file: \" + file.getName());", "+              //DrJava.consoleOut().println(\" NEEDED HACK.\");", "-\t      //              DrJava.consoleErr().println(\"Showing line \" + line);", "+       //              DrJava.consoleErr().println(\"Showing line \" + line);", "-\t\t  /* no highlighting", "-\t\tif (_curBP>0 && line != _curBP) // remove existing bp", "-\t\t  _frame.getCurrentDefPane().getHighlighter().removeHighlight(_curBreakpointTag);", "+    /* no highlighting", "+  if (_curBP>0 && line != _curBP) // remove existing bp", "+    _frame.getCurrentDefPane().getHighlighter().removeHighlight(_curBreakpointTag);", "-  \t        _curBreakpointTag = highlightLine(line, _activeBreakpointHighlightPainter);", "-\t        _curBP = line;", "-\t\t  */", "-\t        // _frame.getCurrentDefPane().setCaretPosition(doc.getDocument().getCurrentLocation());", "+           _curBreakpointTag = highlightLine(line, _activeBreakpointHighlightPainter);", "+         _curBP = line;", "+    */", "+         // _frame.getCurrentDefPane().setCaretPosition(doc.getDocument().getCurrentLocation());", "-              DrJava.consoleOut().println(\"DebugPanel: file: \" + file.getName());", "-              DrJava.consoleOut().println(\"  didn't exist.\");", "+              //DrJava.consoleOut().println(\"DebugPanel: file: \" + file.getName());", "+              //DrJava.consoleOut().println(\"  didn't exist.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a17e5725d246468f2af7eddbdbb989cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "signatureAfterChange": "   public void testVarArgsWithMethodInvocation() throws InterpreterException", "diff": ["+    ", "+    text = \"Arrays.asList(1,2,3,4)\";", "+    res = interpret(text);", "+    assertTrue(\"res should be an instance of a List\", res instanceof java.util.List);", "+    assertEquals(\"size should be 4\", 4, ((java.util.List)res).size());", "+    assertEquals(\"last element should be 4\", new Integer(4), ((java.util.List)res).get(3));", "+    ", "+    text = ", "+      \"class ClassD { \" +", "+      \"  public String m(String ... args) { \" +", "+      \"    String ret = \\\"\\\"; \" +", "+      \"    for(String s : args) ret += s; \" +", "+      \"    return ret; \" + ", "+      \"  }\" +", "+      \"}\\n\" +", "+      \"new ClassD().m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\");\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong output.\", \"abcd\", res);", "+", "+    text = ", "+      \"public class ClassE { \" +", "+      \"  public class Inner { \" +", "+      \"    public String m(String ... args) { \" +", "+      \"      String ret = \\\"\\\"; \" +", "+      \"      for(String s : args) ret += s; \" +", "+      \"      return ret; \" + ", "+      \"    }\" +", "+      \"  }\" +", "+      \"}\\n\" +", "+      \"(new ClassE()).new Inner().m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\");\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong output.\", \"abcd\", res);", "+    ", "+    text = ", "+      \"public class ClassF { \" +", "+      \"  public ClassF(String ... args) { \" +", "+      \"    for (String s : args) \" +", "+      \"      System.out.println(s);\" +", "+      \"  } \" + ", "+      \"  public String m(String ... args) { \" +", "+      \"    String ret = \\\"\\\"; \" +", "+      \"    for(String s : args) ret += s; \" +", "+      \"    return ret; \" + ", "+      \"  }\" +", "+      \"}\\n\" +", "+      \"new ClassF(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\").m(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\")\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong output.\", \"abcd\", res);", "+    ", "+    text =", "+      \"public class ClassG {\\n\"+", "+      \"  public class Inner {\\n\"+", "+      \"    String str = \\\"\\\";\\n\"+", "+      \"    public Inner(String ... args){\\n\"+", "+      \"      for(String  s: args) {\\n\"+", "+      \"        str = str+s;\\n\"+", "+      \"      }\\n\"+", "+      \"    }\\n\"+", "+      \"    public String getStr(){\\n\"+", "+      \"      return str;\\n\"+", "+      \"    }\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"(new ClassG()).new Inner(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\").getStr();\\n\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong Output.\", \"abcd\", res);", "+    ", "+    text =", "+      \"public class B {\\n\"+", "+      \"  public class C {\\n\"+", "+      \"    String str = \\\"\\\";\\n\"+", "+      \"    public C(String ... args){\\n\"+", "+      \"      for(String  s: args) {\\n\"+", "+      \"        str = str+s;\\n\"+", "+      \"      }\\n\"+", "+//      \"      for(int i=0;i<s.length;i++) {\\n\"+", "+//      \"        str = str+s[i];\\n\"+", "+//      \"      }\\n\"+", "+      \"    }\\n\"+", "+      \"    public String getStr(){\\n\"+", "+      \"      return str;\\n\"+", "+      \"    }\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"(new B()).new C(\\\"Str1\\\",\\\"Str2\\\",\\\"Str3\\\",\\\"Str4\\\").getStr();\\n\";", "+    res = interpret(text);", "+    assertEquals(\"Wrong Output.\", \"Str1Str2Str3Str4\", res);"]}], "num": 17924}
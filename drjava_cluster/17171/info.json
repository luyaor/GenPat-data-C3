{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78ec8b5377ad60446b56010cd1c9b59a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02aad6a21e094ff49d5b8e16b6e35d40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "commitAfterChange": "b35a353aefac369485a6c43b1b1d62dab2d5057c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["-  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath) {", "-    FullVersion version = guessVersion(f);", "-//    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,", "+                                                List<File> additionalBootClassPath) {", "+    FullVersion version = guessVersion(f);", "+    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+    JDKToolsLibrary.msg(\"\\tdesc = \"+desc);", "+    ", "+    boolean isSupported = JavaVersion.CURRENT.supports(version.majorVersion());", "+    if (desc!=null) {", "+      isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "+    }", "+    ", "-    if (JavaVersion.CURRENT.supports(version.majorVersion())) {", "+    if (isSupported) {", "+      if (desc!=null) {", "+        compilerAdapter = desc.getAdapterForCompiler();", "+      }", "+      ", "+      if (desc!=null) {", "+        debuggerAdapter = desc.getAdapterForDebugger();", "+      }", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc, bootClassPath);", "+    return new JarJDKToolsLibrary(f, version, desc, compiler, debugger, javadoc, bootClassPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a64a58b3e1787d7a6acaff7d1affca77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "f1daacb1f9c546b2b765d3fc6cc41bd412931a0f", "commitAfterChange": "591ec87995880046281596623701cb5a561fc66e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "      public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "diff": ["+    JavadocModel javadoc = new NoJavadocAvailable(model);", "-      Iterable<File> path = IterUtil.singleton(f);", "+      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));", "-          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(path), debuggerPackage);", "+          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(loader, path), debuggerPackage);", "+      ", "+      try {", "+        new PathClassLoader(loader, path).loadClass(\"com.sun.tools.javadoc.Main\");", "+        File bin = new File(f.getParentFile(), \"../bin\");", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(f.getParentFile(), \"../Home/bin\"); }", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(System.getProperty(\"java.home\", f.getParent())); }", "+        javadoc = new DefaultJavadocModel(model, bin, path);", "+      }", "+      catch (ClassNotFoundException e) { /* can't load */ }", "+      catch (LinkageError e) { /* can't load (probably not necessary, but might as well catch it) */ }", "+        ", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger);", "+    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);"]}], "num": 17171}
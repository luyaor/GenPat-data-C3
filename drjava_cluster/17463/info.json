{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26250910503e1310e46668be108799ca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00b24a9780de40d815d6c7404b991579", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses() throws Exception", "signatureAfterChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses() throws Exception", "diff": ["-    if (printMessages) System.out.println(\"----testBreakpointsAndStepsInNonPublicClasses----\");", "+    if (printMessages) printStream.println(\"----testBreakpointsAndStepsInNonPublicClasses----\");", "-    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"Baz Line 1\"), 14);", "+    _debugger.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"Baz Line 1\"), 14,true);", "-    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+    if (printMessages) printStream.println(\"----After breakpoint:\\n\" + getInteractionsText());", "-    if (printMessages) System.out.println(\"adding another breakpoint\");", "+    if (printMessages) printStream.println(\"adding another breakpoint\");", "-    _debugger.toggleBreakpoint(doc, DEBUG_CLASS.indexOf(\"System.out.println(\\\"Bar Line 2\\\")\"), 9);", "+    _debugger.toggleBreakpoint(doc, DEBUG_CLASS.indexOf(\"System.out.println(\\\"Bar Line 2\\\")\"), 9,true);", "-    if (printMessages) System.out.println(\"****\"+getInteractionsText());", "+    if (printMessages) printStream.println(\"****\"+getInteractionsText());", "-      if (printMessages) System.out.println(\"resuming\");", "+      if (printMessages) printStream.println(\"resuming\");", "-    if (printMessages) System.out.println(\"----After one resume:\\n\" + getInteractionsText());", "+    if (printMessages) printStream.println(\"----After one resume:\\n\" + getInteractionsText());", "-    if ( printMessages ) System.out.println(\"-------- Adding interpret listener --------\");", "+    if ( printMessages ) printStream.println(\"-------- Adding interpret listener --------\");", "-      if ( printMessages ) System.out.println(\"-------- resuming --------\");", "+      if ( printMessages ) printStream.println(\"-------- resuming --------\");", "-    if (printMessages) System.out.println(\"----After second resume:\\n\" + getInteractionsText());", "+    if (printMessages) printStream.println(\"----After second resume:\\n\" + getInteractionsText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06fb8b80c3d8d43751bd482e30487957", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "6b9d21c46904df78c4c42153380af1416ff61bab", "commitAfterChange": "7ee1de808f3f616f32f05bbcf5fc74efb00c8d4a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "signatureAfterChange": "          private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "diff": ["+    ", "-      final int caretPos = _pane.getCaretPosition();", "+      final int oldCaretPos = _cachedCaretPos;", "+      final int oldPromptPos = _cachedPromptPos;", "+      // If caret preceded the previous prompt, move it to the new prompPos.  ", "+      if (oldCaretPos < oldPromptPos) return promptPos;", "-      // Figure out where the prompt was before the insertion; printed output precedes the prompt", "-      final int prevPromptPos = (insertPos < promptPos) ? promptPos - insertLen : promptPos;", "-      // If caret was at previous prompt (or before), move it to the new prompPos.  ", "-      if (caretPos <= prevPromptPos) return promptPos;", "-      /* Otherwise, caret was embedded in pending input following the previous prompt, advance it to preserve its", "-       * relative position to the prompt. (On keyboard input, prevPromptPos == promptPos, making this a no-op. */", "-      final int diff = caretPos - prevPromptPos;", "-      return Math.min(promptPos + diff, docLen);  ", "+//      System.err.println(\"oldPromptPos = \" + oldPromptPos + \" oldCaretPos = \" + oldCaretPos + \" insertPos = \" + insertPos", "+//                           + \" insertLen = \" + insertLen + \" promptPos = \" + promptPos + \" caretPos = \" + ", "+//                         _pane.getCaretPosition()); ", "+ ", "+      // Advance caret by insertion length (works both for echoed keyboard input and for writes to System.out", "+      int newCaretPos = oldCaretPos + insertLen;", "+      return Math.min(newCaretPos, docLen);"]}], "num": 17463}
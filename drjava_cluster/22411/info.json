{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "011d0aaeaac75a9779d573ad45664dec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79aa1d9f2ad0e48fbe4416f102589949", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "640d94c961319de37237c21816ee469b313568b5", "commitAfterChange": "dbdd53c636f6618ffbae999ad0ee607bc3e2b6a3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Node visit(ObjectMethodCall node)", "signatureAfterChange": "   public Node visit(ObjectMethodCall node)", "diff": ["+    ", "+        AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(typeCheckerContext);", "-            params[i]=(args.get(i).acceptVisitor(AbstractTypeChecker.makeTypeChecker(typeCheckerContext)));", "+            params[i]=(args.get(i).acceptVisitor(tc));", "-        }   ", "+        }", "+        boolean existsInCurrentScope = false;", "+        ", "+        if(o == defaultQualifier) {", "+          try {", "+            ReflectionUtilities.lookupMethod((Class)((Node)o).acceptVisitor(tc),node.getMethodName(),params);", "+            existsInCurrentScope = true;", "+          }", "+          catch(Exception nsme) {", "+            //Expected to throw an Exception whenever the method call is to a method that does not exist in ", "+            //the class specified by the default qualifier. If caught, the method does not exist in current scope and the ", "+            //new Qualified name should be looked up, or if o is not of type Node.", "+          } ", "+        }", "+          ", "+        ", "-        o = new ReferenceType(ids);", "+        if (! existsInCurrentScope)", "+          o = new ReferenceType(ids);", "-        o = defaultQualifier;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebc3ceb4335f6419434018606d9e7409", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "f1270b4a562e0ecd61507987f82e57d121a23edd", "commitAfterChange": "12067b12cea198f72f8758eab77d6f544c743a53", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public boolean saveSettings()", "signatureAfterChange": "   public boolean saveSettings()", "diff": ["+    boolean projRootChanged = false;", "-    _model.setProjectRoot(pr);", "+    if (!pr.equals(_model.getProjectRoot())) {", "+      _model.setProjectRoot(pr);", "+      projRootChanged = true;", "+    }", "+    if (projRootChanged) {", "+      try {", "+        _model.reloadProject(_mainFrame.getCurrentProject(), _mainFrame.gatherProjectDocInfo());", "+      } catch(IOException e) { throw new edu.rice.cs.util.UnexpectedException(e, \"I/O error while reloading project\"); }", "+    }"]}], "num": 22411}
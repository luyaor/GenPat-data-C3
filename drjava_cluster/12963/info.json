{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e44bd9ad7ea2a8f10dc19d15f6736fc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5f1905261e37d11ec6947f79fe2fa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 2, "signatureBeforeChange": "   @Override public Type visit(ReferenceTypeName node)", "signatureAfterChange": "      public Type check(Expression e, Type expected)", "diff": ["+  public Type check(Expression e, Type expected) {", "+    return e.acceptVisitor(new ExpressionVisitor(Option.some(expected)));", "+  }", "-   */", "-  @Override public Type visit(ReferenceTypeName node) {", "-    Iterator<? extends IdentifierToken> ids = node.getIdentifiers().iterator();", "-    String name = \"\";", "-    Type t = null;", "-    boolean first = true;", "-    while (t == null && ids.hasNext()) {", "-      if (!first) { name += \".\"; }", "-      first = false;", "-      name += ids.next().image();", "-      ", "-        DJClass c = context.getTopLevelClass(name, ts);", "-        if (c != null) { t = ts.makeClassType(c); }", "-        else {", "-          t = context.getTypeVariable(name, ts);", "-          if (t == null) {", "-            Type outer = context.typeContainingMemberClass(name, ts);", "-            if (outer != null) { t = ts.lookupClass(outer, name, IterUtil.<Type>empty()); }", "-          }", "-        }", "-      catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "-      catch (InvalidTargetException e) { throw new RuntimeException(\"context produced bad type\"); }", "-      catch (InvalidTypeArgumentException e) { throw new ExecutionError(\"type.argument.arity\", node); }", "-      catch (UnmatchedLookupException e) {", "-        if (e.matches() == 0) { throw new ExecutionError(\"undefined.name.noinfo\", node); }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "-    while (ids.hasNext()) {", "-      try { t = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty()); }", "-      catch (InvalidTargetException e) { throw new RuntimeException(\"lookup produced bad type\"); }", "-      catch (InvalidTypeArgumentException e) { throw new ExecutionError(\"type.argument.arity\", node); }", "-      catch (UnmatchedLookupException e) {", "-        if (e.matches() == 0) { throw new ExecutionError(\"undefined.name.noinfo\", node); }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "-      }", "-    }", "-    ", "-    if (t == null) { ", "-      setErrorStrings(node, node.getRepresentation());", "-      throw new ExecutionError(\"undefined.class\", node);", "-    }", "-    return setType(node, t);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "667a213d0d7b8c93d6470bd9240823d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public TypeChecker makeTypeChecker(Context context)", "signatureAfterChange": "   public TypeChecker makeTypeChecker(Context context)", "diff": ["-    return new TypeChecker(context) {", "-      /**", "-       * Overrides TypeChecker's default behavior on an InstanceOfExpression,", "-       * since it caused a NullPointerException on \"null instanceof Object\"", "-       * @param node the node to visit", "-       */", "-      public Object visit(InstanceOfExpression node) {", "-        node.getReferenceType().acceptVisitor(this);", "-        ", "-        // The expression must not have a primitive type", "-        Class c = (Class) node.getExpression().acceptVisitor(this);", "-        if ((c != null) && c.isPrimitive()) {", "-          throw new ExecutionError(\"left.expression\", node);", "-        }", "-        ", "-        // Set the type property", "-        node.setProperty(NodeProperties.TYPE, boolean.class);", "-        return boolean.class;", "-      }", "-      ", "-      public Object visit(MethodDeclaration node) {", "-        super.visit(node);", "-        Class c = (Class)node.getProperty(NodeProperties.TYPE);", "-        BlockStatement bs = node.getBody();", "-        List l = bs.getStatements();", "-        Iterator iter = l.iterator();", "-        boolean foundCorrectType = false;", "-        while(iter.hasNext()) {", "-          Statement s = (Statement)iter.next();", "-          if (s instanceof ReturnStatement) {", "-            Class returnExpClass;", "-            Expression expression = ((ReturnStatement)s).getExpression();", "-            if (expression == null) {", "-              returnExpClass = null;", "-            }", "-            else {", "-              returnExpClass = (Class)expression.acceptVisitor(this);", "-            }", "-            // will void return type mean c is null?", "-            if (c == null) {", "-              if (returnExpClass != null) {", "-                // returning a value in a void method", "-                throw new ExecutionError(\"assignment.types\", node);", "-              }", "-            }", "-            else if (returnExpClass == null) {", "-              // returning nothing in a non-void method", "-                throw new ExecutionError(\"assignment.types\", node);    ", "-            }", "-            else if (!c.isAssignableFrom(returnExpClass)) {", "-              // returning an unassignable type", "-              throw new ExecutionError(\"assignment.types\", node);", "-            }", "-            else {", "-              // returning an assignable type", "-              foundCorrectType = true;", "-            }", "-          }", "-        }", "-        if (c != null) {", "-          if (!foundCorrectType) {", "-            // we were supposed to return a type, but did not", "-            throw new ExecutionError(\"assignment.types\", node);", "-          }", "-        }", "-        return null;", "-      }", "-      ", "-      public Object visit(ReturnStatement node) {", "-        Expression e = node.getExpression();", "-        if (e != null) {", "-          return e.acceptVisitor(this);", "-        }", "-        return null;", "-      }     ", "-    };", "+    return new TypeCheckerExtension(context);      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec60c08202913477bed142a694498954", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": "          protected R getValue() throws InterruptedException, InvocationTargetException", "signatureAfterChange": "   public static <I, R>     IncrementalTaskController<I, R> computeInThread(IncrementalTask<? extends I, ? extends R> task,                                                      boolean start, boolean ignoreIntermediate)", "diff": ["-    ", "-    protected R getValue() throws InterruptedException, InvocationTargetException {", "-      start(); // make sure the thread is running", "-      _t.join(); // guarantees that the result and exception are set", "-      if (_exception != null) { throw new InvocationTargetException(_exception); }", "-      else { return _result; }", "-    }", "+   */", "+  public static <I, R>", "+    IncrementalTaskController<I, R> computeInThread(IncrementalTask<? extends I, ? extends R> task, ", "+                                                    boolean start, boolean ignoreIntermediate) {", "+    return computeWithExecutor(task, THREAD_EXECUTOR, start, ignoreIntermediate);"]}], "num": 12963}
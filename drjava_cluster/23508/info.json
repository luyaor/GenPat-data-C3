{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf21e5f6a87c1095bc5396ac1f818784", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ac4f8be467cac46d75b3f0c93079eb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWith.java", "commitBeforeChange": "42669dc5656697beebfecb16842ba181e2bab301", "commitAfterChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /** FIXME: don't look in comments if _searchComments == false", "-    int start = startOfPrevLine(doc, pos);", "-    int end = endOfLine(doc, start);", "-    String text = doc.getText(start, end);", "-    int prefixPos = text.indexOf(_prefix);", "-    return (prefixPos == 0);", "-    */", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine > DefinitionsDocument.DOCSTART) {", "+        // Find start of previous line", "+        int startPrevLine = doc.getLineStartPos(startLine - 1);", "+        int firstChar = doc.getLineFirstCharPos(startPrevLine);", "+        ", "+        // Compare prefix", "+        String actualPrefix = doc.getText(firstChar, _prefix.length());", "+        return _prefix.equals(actualPrefix);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+    // On first line", "+    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d353bab680ec916dd436264914b9dde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevLinePlus.java", "commitBeforeChange": "42669dc5656697beebfecb16842ba181e2bab301", "commitAfterChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-    // START = findPrevDelimiter", "-    // START' = scoot behind the delimiter we just found", "-    // PREVSTART = findPrevDelimiter(START')              -- prev line's START", "-    // sol = startOfLine(PREVSTART);                      -- 1st non-WS on prev line", "-    // prevWS = dist btw. PREVSTART and sol", "-    // replace area btw. START and startOfLine(START) with prevWS", "-    return;", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine > DefinitionsDocument.DOCSTART) {", "+        // Find prefix of previous line", "+        int startPrevLine = doc.getLineStartPos(startLine - 1);", "+        int firstChar = doc.getLineFirstCharPos(startPrevLine);", "+        String prefix = doc.getText(startPrevLine, firstChar - startPrevLine);", "+        doc.setTab(prefix + _suffix, here);", "+      }", "+      else {", "+        // On first line", "+        doc.setTab(_suffix, here);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }"]}], "num": 23508}
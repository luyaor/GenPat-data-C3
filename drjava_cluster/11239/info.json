{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e805a63dccb0ed332858260d1fb65a0b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9987f57a6f27fd2ed6782017dadc1719", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "b796c376864058d232f1be02ccfb0bd7548b3f89", "commitAfterChange": "ba6275930e25f1b0898c45319a21c16860b3e177", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public OpenDefinitionsDocument newTestCase(String name, boolean makeSetUp, boolean makeTearDown)", "signatureAfterChange": "   public OpenDefinitionsDocument newTestCase(String name, boolean makeSetUp, boolean makeTearDown)", "diff": ["-    buf.append(\"/**\\n* \");", "-    buf.append(\"JUnit test class.\");", "-    buf.append(\"\\n*/\\n\");", "+    buf.append(\"/**\\n\");", "+    buf.append(\"* A JUnit test case class.\\n\");", "+    buf.append(\"* Every method starting with the word \\\"test\\\" will be called when running\\n\");", "+    buf.append(\"* the test with JUnit.\\n\");", "+    buf.append(\"*/\\n\");", "-      buf.append(\"/**\\n* \");", "-      buf.append(\"Sets up each test.\");", "-      buf.append(\"\\n*/\\n\");", "+      buf.append(\"/**\\n\");", "+      buf.append(\"* This method is called before each test method, to perform any common\\n\");", "+      buf.append(\"* setup if necessary.\\n\");", "+      buf.append(\"*/\\n\");", "-      buf.append(\"/**\\n* \");", "-      buf.append(\"Cleans up after each test.\");", "-      buf.append(\"\\n*/\\n\");", "+      buf.append(\"/**\\n\");", "+      buf.append(\"* This method is called after each test method, to perform any common\\n\");", "+      buf.append(\"* clean-up if necessary.\\n\");", "+      buf.append(\"*/\\n\");", "-    buf.append(\"/**\\n* \");", "-    buf.append(\"Test method.\");", "-    buf.append(\"\\n*/\\n\");", "-    buf.append(\"public void test() {\\n}\\n\");", "+    buf.append(\"/**\\n\");", "+    buf.append(\"* A test method.\\n\");", "+    buf.append(\"* (Replace \\\"X\\\" with a few words describing the test.  You may write\\n\");", "+    buf.append(\"* as many \\\"testSomething\\\" methods in this class as you wish,\\n\");", "+    buf.append(\"* and each one will be executed when running JUnit over this class.)\\n\");", "+    buf.append(\"*/\\n\");", "+    buf.append(\"public void testX() {\\n}\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a162080c1db5ca37e1129ec8cce6dc35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "28db8fb2942dc00cad50f5244fe215d573867721", "commitAfterChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "methodNumberBeforeChange": 495, "methodNumberAfterChange": 495, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-      OpenDefinitionsDocument doc = _model.getActiveDocument();", "+      DefinitionsDocument doc = _model.getActiveDocument().getDocument();", "-      try {", "-        if (offset == _offset + 1 && doc.getText(_offset, 1).charAt(0) != '\\n') {", "-          _col += 1;", "-          updateLocation(_line, _col); ", "-          return;", "-        }", "+       ", "+      doc.acquireReadLock();", "+      try { ", "+        synchronized(doc.getReduced()) {", "+          _currentDefPane.matchUpdate(offset);  // updates _currentLocation", "+          if (offset == _offset + 1 && offset < doc.getLength() && doc.getText(_offset, 1).charAt(0) != '\\n') {", "+            _col += 1;", "+            updateLocation(_line, _col); ", "+          }", "+          else {", "+            Element root = doc.getDefaultRootElement();", "+            int line = root.getElementIndex(offset); ", "+            _line = line + 1;     // line numbers are 1-based", "+            _col = offset - root.getElement(line).getStartOffset();", "+            _offset = offset;", "+            updateLocation(_line, _col);", "+          }", "+          ", "+        }  // end synchronized", "-      catch(BadLocationException e) { /* fall through */ }", "-      ", "-      Element root = doc.getDefaultRootElement();", "-      int line = root.getElementIndex(offset); ", "-      _line = line + 1;     // line numbers are 1-based", "-      _col = offset - root.getElement(line).getStartOffset();", "-      updateLocation(_line, _col);  ", "+      catch(BadLocationException e) { /* do nothing */ }", "+      finally { doc.releaseReadLock(); }"]}], "num": 11239}
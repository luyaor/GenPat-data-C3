{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d568936a0faa24955a4144f3cdcf803", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f23f542b3ab6a1f4510ca075e59628f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected ObjectFieldAccess _getObjectFieldAccessForField(String field, Context context)", "signatureAfterChange": "   protected ObjectFieldAccess _getObjectFieldAccessForField(String field, Context context)", "diff": ["-    for (int i = 0; i <= numDollars; i++) {          ", "-      expr = _buildObjectFieldAccess(i, numDollars);", "-      expr = new ObjectFieldAccess(expr, field);", "+    Expression newExpr = null;", "+    ", "+    // Check if this has an anonymous inner class", "+    if (hasAnonymous(_thisClassName)) { ", "+      // Get the class", "+      Class c;", "-        // the type checker will tell us if it's a field", "-        tc.visit((ObjectFieldAccess)expr);", "-        return (ObjectFieldAccess)expr;", "+        c = context.lookupClass(_thisClassName);", "-      catch (ExecutionError e2) {", "-        // do nothing, try an outer class", "+      catch (ClassNotFoundException e) {", "+        throw new UnexpectedException (e);", "+      }", "+      Field[] fields = c.getDeclaredFields();    ", "+      int numToWalk;", "+      String outerClassName = null;", "+      // Check for a field that begins with this$", "+      for (int i = 0; i < fields.length; i++) {", "+        if (fields[i].getName().startsWith(\"this$\")) {", "+          String fieldName = fields[i].getName();", "+          int lastIndex = fieldName.lastIndexOf(\"$\");", "+          numDollars = Integer.valueOf(fieldName.substring(lastIndex+1, fieldName.length())).intValue() + 1;", "+          break;", "+        }", "+    for (int i = 0; i <= numDollars; i++) {          ", "+      expr = _buildObjectFieldAccess(i, numDollars);", "+      newExpr = new ObjectFieldAccess(expr, field);", "+      try {", "+        // the type checker will tell us if it's a field", "+        tc.visit((ObjectFieldAccess)newExpr);", "+        return (ObjectFieldAccess)newExpr;", "+      }", "+      catch (ExecutionError e) {", "+        // try concatenating \"val$\" to the beginning of field", "+        newExpr = new ObjectFieldAccess(expr, \"val$\" + field);", "+        try {", "+          // the type checker will tell us if it's a field", "+          tc.visit((ObjectFieldAccess)newExpr);", "+          return (ObjectFieldAccess)newExpr;", "+        }", "+        catch (ExecutionError e2) {", "+          // do nothing, try an outer class", "+        }", "+      }", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90eae1c4c07ebe86b4964bb9c491934d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 71, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter() throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ArrayReference _mirrorArray(String elementClass, List<? extends ObjectReference> elts,                                       ThreadReference thread, List<ObjectReference> toRelease)     throws DebugException", "diff": ["-  /** Assumes that this method is only called immedeately after suspending a thread. */", "-  private ObjectReference _getDebugInterpreter() throws InvalidTypeException, ClassNotLoadedException,", "-    IncompatibleThreadStateException, InvocationException, DebugException {", "-    ", "-    ThreadReference threadRef = _suspendedThreads.peek();", "-    String interpreterName = _getUniqueThreadName(threadRef);", "-    return _getDebugInterpreter(interpreterName, threadRef);", "-  }", "+  /** Create an array of the given elements in the VM and prevent it from being garbage collected. */", "+  private ArrayReference _mirrorArray(String elementClass, List<? extends ObjectReference> elts,", "+                                      ThreadReference thread, List<ObjectReference> toRelease)", "+    throws DebugException {", "+    ClassType arrayC = (ClassType) _getClass(\"java.lang.reflect.Array\");", "+    ReferenceType elementC = _getClass(elementClass);", "+    for (int tries = 0; tries < OBJECT_COLLECTED_TRIES; tries++) {", "+      try {", "+        ArrayReference result =", "+          (ArrayReference) _invokeStaticMethod(thread, arrayC, \"newInstance\", NEW_INSTANCE_SIG,", "+                                               elementC.classObject(), _vm.mirrorOf(elts.size()));", "+        result.disableCollection();", "+        if (!result.isCollected()) {", "+          toRelease.add(result);", "+          try { result.setValues(elts); }", "+          catch (InvalidTypeException e) { throw new DebugException(e); }", "+          catch (ClassNotLoadedException e) { throw new DebugException(e); }", "+          return result;", "+        }", "+      }", "+      catch (ObjectCollectedException e) { /* try again */ }", "+    }", "+    throw new DebugException(\"Ran out of OBJECT_COLLECTED_TRIES\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb94758ecf786d765a3dccc1f14aabdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "      private void _attachToVM() throws DebugException", "diff": ["+  ", "+  private void _attachToVM() throws DebugException {", "+    VirtualMachineManager vmm = Bootstrap.virtualMachineManager();", "+    List connectors = vmm.attachingConnectors();", "+    AttachingConnector connector = null;", "+    Iterator iter = connectors.iterator();", "+    while (iter.hasNext()) {", "+      AttachingConnector conn = (AttachingConnector)iter.next();", "+      if (conn.name().equals(\"com.sun.jdi.SocketAttach\")) {", "+        connector = conn;", "+      }", "+    }", "+    if (connector == null) {", "+      throw new DebugException(\"Could not find an AttachingConnector!\");", "+    }", "+    ", "+    // Try to connect", "+    Map args = connector.defaultArguments();", "+    Connector.Argument port = (Connector.Argument) args.get(\"port\");", "+    try {", "+      int debugPort = _model.getDebugPort();", "+      port.setValue(\"\" + debugPort);", "+      _vm = connector.attach(args);", "+      _eventManager = _vm.eventRequestManager();", "+    }", "+    catch (IOException ioe) {", "+      throw new DebugException(\"Could not connect to VM: \" + ioe);", "+    }", "+    catch (IllegalConnectorArgumentsException icae) {", "+      throw new DebugException(\"Could not connect to VM: \" + icae);", "+    }", "+  }"]}], "num": 16814}
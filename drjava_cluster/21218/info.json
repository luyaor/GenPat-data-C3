{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be8a8fdead7c1cff7f978b2322ec20a4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b2f1d5329ee3606c3d8cadde8d176e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "01c62517d281ffc6534fc475329bd814c0e2c112", "commitAfterChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void setInterpreterPrivateAccessible(boolean accessible)", "signatureAfterChange": "   public void setRequireVariableType(boolean require)", "diff": ["-  /** Sets whether protected and private variables and methods can be accessed from within the interpreter. */", "-  public void setInterpreterPrivateAccessible(boolean accessible) {", "-    // TODO: implement this with the Options object", "-    //_interpreter.setPrivateAccessible(accessible);", "-  }", "+  /** Require variable declarations to include an explicit type. */", "+  public void setRequireVariableType(boolean require) { _interpreterOptions.setRequireVariableType(require); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe92af1b01abdc22253773c1361d74f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "01c62517d281ffc6534fc475329bd814c0e2c112", "commitAfterChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public synchronized void setPrivateAccessible(boolean allow)", "signatureAfterChange": "   public synchronized void setEnforcePrivateAccess(boolean enforce)", "diff": ["-  /** Sets the interpreter to allow access to private members. */", "-  public synchronized void setPrivateAccessible(boolean allow) {", "-    // TODO: implement with Options values", "+  /** Check that access of private class members is permitted (irrelevant if setEnforceAllAccess() is set to true). */", "+  public synchronized void setEnforcePrivateAccess(boolean enforce) {", "+    _interpreterOptions.setEnforcePrivateAccess(enforce);", "+  }"]}], "num": 21218}
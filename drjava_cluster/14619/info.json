{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d6cfa4ac48c2740541d5770a36b5ae4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a71e311995672625ce0eb25e430704", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "17b59cf1640c29fbcc5ed0fdfe96f8053eaa1da0", "commitAfterChange": "eef32107e75e031eb7210130ce310e1714e51b91", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "     @Override public Type visit(SimpleAssignExpression node)", "signatureAfterChange": "     @Override public Type visit(SimpleAssignExpression node)", "diff": ["-      if (hasVariable(left) && getVariable(left).isFinal() ||", "-          hasField(left) && getField(left).isFinal()) {", "-        throw new ExecutionError(\"cannot.modify\", node);", "+      if (!context.inConstructorBody()) {", "+        if (hasVariable(left) && getVariable(left).isFinal()) {", "+          setErrorStrings(node, getVariable(left).declaredName());", "+          throw new ExecutionError(\"cannot.modify\", node);", "+        }", "+        else if (hasField(left) && getField(left).isFinal()) {", "+          setErrorStrings(node, getField(left).declaredName());", "+          throw new ExecutionError(\"cannot.modify\", node);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9322ec4e6106bc68c8230b608b97429", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "commitAfterChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _setupCompilerPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupCompilerPanel(ConfigPanel panel)", "diff": ["-                                                  \"<html>Warn about unchecked conversions involving parameterized types.</html>\"));", "+                                                  \"<html>Warn about unchecked conversions involving parameterized types.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"<html>Warn about each use or override of a deprecated method, field, or class.</html>\"));", "+                                                  \"<html>Warn about each use or override of a deprecated method, field, or class.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"<html>Warn about nonexistent members of the classpath and sourcepath.</html>\"));", "+                                                  \"<html>Warn about nonexistent members of the classpath and sourcepath.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"<html>Warn about missing <code>serialVersionUID</code> definitions on serializable classes.</html>\"));", "+                                                  \"<html>Warn about missing <code>serialVersionUID</code> definitions on serializable classes.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"<html>Warn about <code>finally</code> clauses that cannot complete normally.</html>\"));", "+                                                  \"<html>Warn about <code>finally</code> clauses that cannot complete normally.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"<html>Warn about <code>switch</code> block cases that fall through to the next case.</html>\"));", "-    addOptionComponent(panel, new LabelComponent(\"<html><br><br>Note: Compiler warnings not shown if<br>compiling any Java language level files.</html>\", this, true));", "+                                                  \"<html>Warn about <code>switch</code> block cases that fall through to the next case.</html>\", false)", "+                         .setEntireColumn(true));", "+    addOptionComponent(panel, new LabelComponent(\"<html><br><br>Note: Compiler warnings not shown if compiling any Java language level files.</html>\", this, true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcb68ca22aed3886487d3d9ecb0b29fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "117b8e1eefe7632ee450aed6c94318fa28bf80a4", "commitAfterChange": "67e7b92991e4e8f9e841666ccb236411356e233e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void write() throws IOException", "signatureAfterChange": "   public void write() throws IOException", "diff": ["-      for(DocFile df: _sourceFiles) { fw.write(\"\\n\" + encodeDocFileRelative(df, \"  \")); }", "+      DocFile active = null;", "+      for(DocFile df: _sourceFiles) {", "+        if(df.isActive()) {", "+          active = df;", "+          fw.write(\"\\n\" + encodeDocFileRelative(df, \"  \"));", "+          break; //Assert that there is only one active document in the project", "+        }", "+      }", "+      for(DocFile df: _sourceFiles) { ", "+        if(df != active)", "+          fw.write(\"\\n\" + encodeDocFileRelative(df, \"  \"));", "+      }"]}], "num": 14619}
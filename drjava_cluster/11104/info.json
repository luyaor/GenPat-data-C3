{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "203e5de33416a572890e282d7cd6e82a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4345a7b8e5971a245795ab17b179cd4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-//    int origin = doc.getCurrentLocation();", "-    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    int origin = doc.getCurrentLocation();", "+    int lineStart = doc._getLineStartPos(origin);", "+    if (lineStart <= 1) return false;  // linestart follows a newLine, which must be preceded by a brace to return true", "-//    doc.setCurrentLocation(lineStart);", "-    BraceInfo info = doc.getLineEnclosingBrace();", "-//    doc.setCurrentLocation(origin);    ", "+    doc._setCurrentLocation(lineStart);", "+    BraceInfo info = doc._getLineEnclosingBrace();", "+    doc._setCurrentLocation(origin);    ", "-    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || info.distance() < 0)", "+    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || info.distance() <= 0)", "-    // Get brace's end of line", "-    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+//    // Get brace's end of line", "+    int braceEndLinePos = doc._getLineEndPos(bracePos);", "-    try { nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos); }", "+//    System.err.println(\"bracePos = \" + bracePos + \" docLength = \" + doc.getLength());", "+    try { nextNonWS = doc._getFirstNonWSCharPos(braceEndLinePos /* bracePos + 1*/); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c2924dc37ff28600820c93d339eade2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b128df4fa9d8df79a76ba9e19a170c160365e646", "commitAfterChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 344, "signatureBeforeChange": "     public int compareTo(OpenDefinitionsDocument o)", "signatureAfterChange": "     public int compareTo(OpenDefinitionsDocument o)", "diff": ["-    /** Orders ODDs by their id's. */", "-    public int compareTo(OpenDefinitionsDocument o) { return _id - o.id(); }", "+    /** Orders ODDs by their lexical names.  Note that equals defines a finer equivalence relation than compareTo. */", "+    public int compareTo(OpenDefinitionsDocument o) { ", "+      int diff = hashCode() - o.hashCode();", "+      if (diff != 0) return diff;", "+      return _lexiName.compareTo(o.getLexiName()); ", "+    }"]}], "num": 11104}
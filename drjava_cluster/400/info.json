{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36129bcd5b2a5f55d0f93019a8b410c8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "765e6884750d77b92b3f6825661e4aa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "481944e3395dcc7a19e81902c59977be65ba633a", "commitAfterChange": "c682fca099b13e765e0e1f201629222d04fb1339", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 130, "signatureBeforeChange": "   public OpenDefinitionsDocument getNextDocument(AbstractDocumentInterface d)", "signatureAfterChange": "   public OpenDefinitionsDocument getNextDocument(AbstractDocumentInterface d)", "diff": ["-    try {", "+    OpenDefinitionsDocument nextdoc = null; // irrelevant initialization required by javac", "+//    try {", "-      OpenDefinitionsDocument nextdoc = _documentNavigator.getNext(doc);", "-      if (nextdoc != doc) return getNextDocHelper(nextdoc);", "-      // We are at the end of the list, so we need to rewind and return doc at the very beginning", "-      do { // FIX THIS: Go directly to the first document", "-        doc = nextdoc;", "-        nextdoc = _documentNavigator.getPrevious(doc);", "-      }", "-      while (doc != nextdoc);", "-      return getNextDocHelper(nextdoc);  ", "-    } ", "-    catch(DocumentClosedException dce) { return getNextDocument(d); }  // Won't this produce an infinite loop?", "+      nextdoc = _documentNavigator.getNext(doc);", "+      if (nextdoc == doc) nextdoc = _documentNavigator.getFirst();  // wrap around if necessary", "+      return getNextDocHelper(nextdoc);", "+//    } ", "+//    catch(DocumentClosedException dce) { return getNextDocument(nextdoc); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84b387397248df33a9842ec7d0757e81", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "481944e3395dcc7a19e81902c59977be65ba633a", "commitAfterChange": "c682fca099b13e765e0e1f201629222d04fb1339", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 132, "signatureBeforeChange": "   public OpenDefinitionsDocument getPrevDocument(AbstractDocumentInterface d)", "signatureAfterChange": "   public OpenDefinitionsDocument getPrevDocument(AbstractDocumentInterface d)", "diff": ["-    try {", "+    OpenDefinitionsDocument prevdoc = null;  // irrelevant initialization required by javac", "+//    try {", "-      OpenDefinitionsDocument nextdoc = _documentNavigator.getPrevious(doc);", "-      if (nextdoc != doc) return getPrevDocHelper(nextdoc);", "-      // we're at the end, so we need to rewind", "-      // and return doc at the very beginning", "-      do {", "-        doc = nextdoc;", "-        nextdoc = _documentNavigator.getNext(doc);", "-      } while (nextdoc != doc);", "-      return getPrevDocHelper(nextdoc);", "-    }", "-    catch(DocumentClosedException dce) { return getPrevDocument(d); }  // doesn't this line create an infinite loop?", "+      prevdoc = _documentNavigator.getPrevious(doc);", "+      if (prevdoc == doc) prevdoc = _documentNavigator.getLast(); // wrap around if necessary", "+      return getPrevDocHelper(prevdoc);", "+//    }", "+//    catch(DocumentClosedException dce) { return getPrevDocument(prevdoc); }"]}], "num": 400}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "300765ae0378a4032e6994b5aa4c1540", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0158db0368203500758349ad9aae769b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-    // check to make sure it transitions from flat file mode to project mode well", "-    _frame.open(new FileOpenSelector() {", "-      public File[] getFiles() throws OperationCanceledException {", "-        return new File[] {_file2};", "-      }", "-    });", "+    // open a new file and make it an auxiliary file", "-    ", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    assertEquals(\"One empty document remaining\", 1, docs.size());", "+    assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "+    ", "+//    System.err.println(Arrays.toString(src));", "+//    System.err.println(Arrays.toString(aux));", "-    assertEquals(\"Wrong file name\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "+    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[0].getCanonicalPath()); // assumes reverse order", "+    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[1].getCanonicalPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb4d5b94b58a58ea3718fabcf8034ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testNewFileDisallowAbandon() throws BadLocationException", "signatureAfterChange": "   public void testMultipleFiles() throws BadLocationException", "diff": ["+  public void testMultipleFiles() throws BadLocationException {", "+    assertNumOpenDocs(0);", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_TEXT);", "+    assertNumOpenDocs(1);", "+", "+    // Create a second, empty document", "+    OpenDefinitionsDocument doc2 = _model.newFile();", "+    assertNumOpenDocs(2);", "+    assertModified(true, doc1);", "+    assertModified(false, doc2);", "+    assertContents(FOO_TEXT, doc1);", "+    assertLength(0, doc2);", "+", "+    // Modify second document", "+    changeDocumentText(BAR_TEXT, doc2);", "+    assertModified(true, doc2);", "+    assertContents(FOO_TEXT, doc1);", "+    assertContents(BAR_TEXT, doc2);", "+  }", "-   */", "-  public void testNewFileDisallowAbandon() throws BadLocationException {", "-    setupDocument(FOO_TEXT);", "-", "-    TestListener listener = new TestListener() {", "-      public boolean canAbandonFile(File file) {", "-        canAbandonCount++;", "-        return false; // no, don't abandon our document!!!", "-    _model.newFile();", "-    listener.assertAbandonCount(1);", "-    assertModified(true);", "-    assertContents(FOO_TEXT);"]}], "num": 12340}
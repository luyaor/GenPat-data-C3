{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d05202e482d72f33b1f14e79d9e58bb1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3713b3b5bdac619660a2f7ecfdc65c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "12aaa1ddc474cfa046da07f830508d72c218a8f6", "commitAfterChange": "47d5fc81163cac95e4e64b470a149e7ec540b233", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         public void optionChanged (OptionEvent<Integer> oce)", "signatureAfterChange": "         public void optionChanged (OptionEvent<Integer> oce)", "diff": ["-      int historySize = oce.value.intValue();", "+      int newSize = oce.value.intValue();", "-      if (size() > historySize) {", "+      // Sanity check", "+      if (newSize < 0) newSize = 0;", "+      ", "+      // Remove old elements if the new size is less than current size", "+      if (size() > newSize) {", "-        int numberOfElements = size() - historySize;", "+        int numToDelete = size() - newSize;", "-        for (int i=0; i< numberOfElements; i++) {", "+        for (int i=0; i< numToDelete; i++) {", "-      MAX_SIZE = historySize;", "+      MAX_SIZE = newSize;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7fff5c9f04de59c33aa2c21fd4e8ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "25c6efa4fee666f10304502f8f42fa30cbab79a2", "commitAfterChange": "e193e4674aaab3350b36cbc521ecf3bf9c098bc6", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public BraceInfo getLineEnclosingBrace()", "signatureAfterChange": "   public BraceInfo getLineEnclosingBrace()", "diff": ["-    int pos = _currentLocation;", "+    int origPos = _currentLocation;", "-    final Query key = new Query.LineEnclosingBrace(pos);", "+    int keyPos = getLineStartPos(_currentLocation);", "+    if (keyPos == -1) keyPos = origPos;", "+    final Query key = new Query.LineEnclosingBrace(keyPos);", "+    ", "+//    if (getLength() > 0 && lineStart > 0) {", "+//      char ch = getText().charAt(lineStart - 1);", "+//      if (ch != '\\n') System.err.println(\"In doc:\" + getText() + \"'\\nchar at pos \" + (lineStart - 1) + \" is not a newline\");", "+//      }", "+    ", "+//    setCurrentLocation(lineStart);", "-    _storeInCache(key, b, pos - 1);", "+//    setCurrentLocation(origPos);", "+    _storeInCache(key, b, origPos - 1);"]}], "num": 5935}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5287309dbbe91912cd714d5ef2713976", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b7712180fabc685216c0dd352fec70", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "commitAfterChange": "ee2a4f62f26e8f47974ad5d674dd24e422820bcc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void addRegistrationListener(RegistrationListener list)", "signatureAfterChange": "      public void addRegistrationListener(RegistrationListener list)", "diff": ["-  public void addRegistrationListener(RegistrationListener list) { _regListeners.add(list); }", "+  public void addRegistrationListener(RegistrationListener list) { synchronized(_regListeners) { _regListeners.add(list); } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e735b8346331bd7565910f955032c13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "      public String toString()", "signatureAfterChange": "      public String toString()", "diff": ["-  public String toString() { return _model.toString(); } ", "+  ", "+  public String toString() { synchronized (_model) { return _model.toString(); } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ea4f509efbdc7ceb407d227d04ad60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void addColoring(int start, int end, String style)", "signatureAfterChange": "   public void addColoring(int start, int end, String style)", "diff": ["-    if(_toClear) {", "-      _stylesList.clear();    ", "-      _toClear = false;", "+    synchronized(_lock) {", "+      ", "+      if(_toClear) {", "+        _stylesList.clear();    ", "+        _toClear = false;", "+      }", "+      _stylesList.add(new Pair<Pair<Integer,Integer>,String>", "+                      (new Pair<Integer,Integer>(start,end), style));", "-    _stylesList.add(new Pair<Pair<Integer,Integer>,String>", "-                    (new Pair<Integer,Integer>(start,end), style));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a474889af3522f71169c3b636fc2e0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public synchronized void killInterpreter(boolean shouldRestart)", "signatureAfterChange": "   public void killInterpreter(boolean shouldRestart)", "diff": ["-  public synchronized void killInterpreter(boolean shouldRestart) {", "-    try {", "-      _enabled = shouldRestart;", "-      _cleanlyRestarting = true;", "-      if (shouldRestart)  _interactionsModel.interpreterResetting();", "-      quitSlave();", "+  public void killInterpreter(boolean shouldRestart) {", "+    synchronized(_masterJVMLock) {", "+      try {", "+        _enabled = shouldRestart;", "+        _cleanlyRestarting = true;", "+        if (shouldRestart)  _interactionsModel.interpreterResetting();", "+        quitSlave();", "+      }", "+      catch (ConnectException ce) {", "+        _log.logTime(\"Could not connect to the interpreterJVM while trying to kill it\", ce);", "+      }", "+      catch (RemoteException re) { _threwException(re); }", "-    catch (ConnectException ce) {", "-      _log.logTime(\"Could not connect to the interpreterJVM while trying to kill it\", ce);", "-    }", "-    catch (RemoteException re) { _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a9470b7174eed24a7f700733bc2cfee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "1824c23d7190107a20690dc4a2840a5d74f14a93", "commitAfterChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["-    try { _setCurrentLocation(loc); }", "+    try { synchronized(_reduced) {_setCurrentLocation(loc); } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ac912d40d0e5d9c9079a57410182a55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public synchronized void valueChanged(TreeSelectionEvent e)", "signatureAfterChange": "   public void valueChanged(TreeSelectionEvent e)", "diff": ["-  public synchronized void valueChanged(TreeSelectionEvent e) {", "-    Object treeNode = this.getLastSelectedPathComponent();", "-    if(treeNode == null || !(treeNode instanceof NodeData)) {", "-      return;", "-    }", "-    NodeData newSelection = (NodeData)treeNode;", "-    if(_current != newSelection) {", "-      for(INavigationListener listener : navListeners) {", "-        listener.lostSelection(_current);", "-        listener.gainedSelection(newSelection);", "+  public void valueChanged(TreeSelectionEvent e) {", "+    synchronized (_model) {", "+      Object treeNode = this.getLastSelectedPathComponent();", "+      if (treeNode == null || !(treeNode instanceof NodeData)) return;", "+      NodeData newSelection = (NodeData)treeNode;", "+      if(_current != newSelection) {", "+        for(INavigationListener listener : navListeners) {", "+          listener.lostSelection(_current);", "+          listener.gainedSelection(newSelection);", "+        }", "+        _current = newSelection;", "-      _current = newSelection;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "214948c50f7e1a06c369902a389f3678", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public InteractionsDocumentAdapter()", "signatureAfterChange": "      public InteractionsDocumentAdapter()", "diff": ["-    ", "-    DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_IN_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_OUT_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_ERR_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.INTERACTIONS_ERROR_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_MESSAGE_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "-    DrJava.getConfig().addOptionListener( OptionConstants.FONT_MAIN, fol); ", "-    ", "+    synchronized(_lock) {", "+      DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_IN_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_OUT_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.SYSTEM_ERR_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.INTERACTIONS_ERROR_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_MESSAGE_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NUMBER_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_NORMAL_COLOR, col);", "+      DrJava.getConfig().addOptionListener( OptionConstants.FONT_MAIN, fol); ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243403278b62e750fd4b96f8f3b692ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public synchronized INavigatorItem getPrevious(INavigatorItem doc)", "signatureAfterChange": "   public INavigatorItem getPrevious(INavigatorItem doc)", "diff": ["-  public synchronized INavigatorItem getPrevious(INavigatorItem doc) {", "-    DefaultMutableTreeNode node = _doc2node.get(doc);", "-    // TODO: check for \"package\" case", "-    DefaultMutableTreeNode prev = node.getPreviousLeaf();", "-    if (prev == null || prev == _model.getRoot()) return doc;", "-    return  (INavigatorItem) prev.getUserObject();", "+  public INavigatorItem getPrevious(INavigatorItem doc) {", "+    ", "+    synchronized (_model) {", "+      DefaultMutableTreeNode node = _doc2node.get(doc);", "+      // TODO: check for \"package\" case", "+      DefaultMutableTreeNode prev = node.getPreviousLeaf();", "+      if (prev == null || prev == _model.getRoot()) return doc;", "+      return  (INavigatorItem) prev.getUserObject();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28ad404c3a2756ac439b28d692693c29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["-  public void setCurrentLocation(int loc)  { move(loc - _currentLocation); }", "+  public void setCurrentLocation(int loc)  { ", "+    synchronized(_reduced) { // locked because reading _currentLocation is not protected by locking in move", "+    move(loc - _currentLocation); ", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3149c4135759f7d03ad94ff05de7b8ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected synchronized final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected final void quitSlave() throws RemoteException", "diff": ["-  protected synchronized final void quitSlave() throws RemoteException {", "-    if (isStartupInProgress())", "-      // There is a slave to be quit, but we don't have a handle to it yet.", "-      // Instead we set this flag, which makes it quit immediately after it", "-      // registers in registerSlave.", "-      _quitOnStartup = true;", "-    ", "-    else if (_slave == null)", "-      throw new IllegalStateException(\"tried to quit when no slave running\" +", "-                                      \" and startup not in progress\");", "-    else  _slave.quit();", "+  protected final void quitSlave() throws RemoteException {", "+    synchronized(_masterJVMLock) {", "+      if (isStartupInProgress())", "+        // There is a slave to be quit, but we don't have a handle to it yet.", "+        // Instead we set this flag, which makes it quit immediately after it", "+        // registers in registerSlave.", "+        _quitOnStartup = true;", "+      ", "+      else if (_slave == null)", "+        throw new IllegalStateException(\"tried to quit when no slave running\" +", "+                                        \" and startup not in progress\");", "+      else  _slave.quit();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32287dc37ede4bae1b14cefc49f3176f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "8cfaf2efb8ae59b79b9538e0bd5eaf251c6db08b", "commitAfterChange": "b732820bc2f8849bda78001b782e555a753cad1e", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "   public int getOpenDefinitionsDocumentsSize()", "signatureAfterChange": "   public int getOpenDefinitionsDocumentsSize()", "diff": ["-  public int getOpenDefinitionsDocumentsSize() { return _documentsRepos.size(); }", "+  public int getOpenDefinitionsDocumentsSize() { synchronized(_documentsRepos) { return _documentsRepos.size(); } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "367b91fdf89f0a006575e79c6f27b322", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "8470bac42027a288eff50252d965c363d15d41dc", "commitAfterChange": "cb029f12bd6c2fdcdba02605492a4baf5ca47e02", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void _handleClassPrepareEvent(ClassPrepareEvent e)", "signatureAfterChange": "      private void _handleClassPrepareEvent(ClassPrepareEvent e)", "diff": ["-    try {", "-      _manager.getPendingRequestManager().classPrepared(e);", "+    synchronized(_manager) {", "+      try {", "+        _manager.getPendingRequestManager().classPrepared(e);", "+      }", "+      catch(DebugException de) {", "+      }", "+      // resumes this thread which was suspended because its ", "+      // suspend policy was SUSPEND_EVENT_THREAD", "+      e.thread().resume();", "-    catch(DebugException de) {", "-    }", "-    // resumes this thread which was suspended because its ", "-    // suspend policy was SUSPEND_EVENT_THREAD", "-    e.thread().resume();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c6e86fd689e5633419aa9535e5f3d7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public synchronized void addColoring(int start, int end, String style)", "signatureAfterChange": "   public void addColoring(int start, int end, String style)", "diff": ["-  public synchronized void addColoring(int start, int end, String style) {      ", "-    if(_toClear) {", "-      _stylesList.clear();    ", "-      _toClear = false;", "+  public void addColoring(int start, int end, String style) {", "+    synchronized(_stylesList) {", "+      if (_toClear) {", "+        _stylesList.clear();    ", "+        _toClear = false;", "+      }", "+      if (style != null)", "+        _stylesList.add(0, new Pair<Pair<Integer,Integer>,String>", "+                        (new Pair<Integer,Integer>(new Integer(start),new Integer(end)), style));", "-    if(style != null)", "-      _stylesList.add(0, new Pair<Pair<Integer,Integer>,String>", "-                      (new Pair<Integer,Integer>(new Integer(start),new Integer(end)), style));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d4a04948d25d3020e27ad366fe2da11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "9cb55009db1cb8bd2aab8df62ce303060f475c4b", "commitAfterChange": "5212beeea100a9dddc0602b719065f41bdf8e3cc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void _handleStepEvent(StepEvent e)", "signatureAfterChange": "      private void _handleStepEvent(StepEvent e)", "diff": ["-    _manager.currThreadSuspended();", "-    _manager.printMessage(\"Stepped to \" + ", "-                          e.location().declaringType().name() + \".\" +", "-                          e.location().method().name() + \"(...)  [line \" + ", "-                          e.location().lineNumber() + \"]\");", "-    _manager.scrollToSource(e);", "-    _manager.getEventRequestManager().deleteEventRequest(e.request());", "+    synchronized(_manager){", "+      _manager.printMessage(\"Stepped to \" + ", "+                            e.location().declaringType().name() + \".\" +", "+                            e.location().method().name() + \"(...)  [line \" + ", "+                            e.location().lineNumber() + \"]\");", "+      _manager.getEventRequestManager().deleteEventRequest(e.request());", "+      _manager.currThreadSuspended();", "+      _manager.scrollToSource(e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f3bad31ef228870bc5299e6051fd5aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public void quitFailed(Throwable th) throws RemoteException", "signatureAfterChange": "   public void quitFailed(Throwable th) throws RemoteException", "diff": ["-    _interactionsModel.interpreterResetFailed(th);", "-    _cleanlyRestarting = false;", "+    synchronized(_masterJVMLock) {", "+      _interactionsModel.interpreterResetFailed(th);", "+      _cleanlyRestarting = false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4061208d820365bea4d005eb765b6afe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "f5e6f060cad653c11888e30b69842047d7693a32", "commitAfterChange": "dba0ccac56f5e3245b525afd7781147d259a9d94", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void addNavigationListener(INavigationListener listener)", "signatureAfterChange": "   public void addNavigationListener(INavigationListener listener)", "diff": ["-  public void addNavigationListener(INavigationListener listener) { navListeners.add(listener); }", "+  public void addNavigationListener(INavigationListener listener) { ", "+    synchronized(_model) { navListeners.add(listener); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4314b69a71e81bb87f473a5d33cc5730", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public synchronized void clear()", "signatureAfterChange": "   public void clear()", "diff": ["-  public synchronized void clear() { ", "-    _doc2node.clear();", "-    ((DefaultMutableTreeNode)_model.getRoot()).removeAllChildren();", "+  public void clear() { ", "+    synchronized (_model) {", "+      _doc2node.clear();", "+      ((DefaultMutableTreeNode)_model.getRoot()).removeAllChildren();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4419d6c42d401920251576e032e57a9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "bdf0d961e3094e45012183b3b2277f169c5827d7", "commitAfterChange": "8782e19ccfa5357f9b140c38d08e98757ee04270", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         private void kickOut(boolean isClosing)", "signatureAfterChange": "         private void kickOut(boolean isClosing)", "diff": ["-      if (! isClosing) {", "-        /* virtualize this document */", "+      synchronized(_dmLock) {", "+        if (! isClosing) {", "+          /* virtualize this document */", "-        _rec.saveDocInfo(_doc);", "+          _rec.saveDocInfo(_doc);", "+        }", "+        if (_doc != null) {", "+          _doc.close();  // done elsewhere when isClosing is true?", "+          _doc = null;", "+        }", "+        _stat = NOT_IN_QUEUE;", "-      if (_doc != null) {", "-        _doc.close();  // done elsewhere when isClosing is true?", "-        _doc = null;", "-      }", "-      _stat = NOT_IN_QUEUE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b5f6ec811507440cdc1138ba33d73d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public synchronized void setEnforcePrivateAccess(boolean enforce)", "signatureAfterChange": "   public void setEnforcePrivateAccess(boolean enforce)", "diff": ["-  public synchronized void setEnforcePrivateAccess(boolean enforce) {", "-    _interpreterOptions.setEnforcePrivateAccess(enforce);", "+  public void setEnforcePrivateAccess(boolean enforce) {", "+    synchronized(_stateLock) {", "+      _interpreterOptions.setEnforcePrivateAccess(enforce);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef0ab345a6d2baef74cd071e51e3342", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "8a6aa1a4952b620a2a0738d8a36f5b0059482f99", "commitAfterChange": "ddbef72a194d17966584ef9d18603b05f8480094", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "       private LeafNode getNodeForDoc(INavigatorItem doc)", "signatureAfterChange": "       private LeafNode getNodeForDoc(INavigatorItem doc)", "diff": ["-  private LeafNode getNodeForDoc(INavigatorItem doc) { return _doc2node.get(doc); }", "+  private LeafNode getNodeForDoc(INavigatorItem doc) { ", "+    synchronized(_model) { return _doc2node.get(doc); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52da706ca77252462646b82672c8d606", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public void addFinalizationListener(FinalizationListener<DefinitionsDocument> fl)", "signatureAfterChange": "   public void addFinalizationListener(FinalizationListener<DefinitionsDocument> fl)", "diff": ["-    _finalizationListeners.add(fl);", "+    synchronized (_finalizationListeners) { _finalizationListeners.add(fl); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f639802af7db0f1e4f9449f739eb85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public synchronized boolean contains(INavigatorItem doc)", "signatureAfterChange": "   public boolean contains(INavigatorItem doc)", "diff": ["-  public synchronized boolean contains(INavigatorItem doc) { return _doc2node.containsKey(doc); }", "+  public boolean contains(INavigatorItem doc) { ", "+    synchronized (_model) {", "+      return _doc2node.containsKey(doc); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "560e1db88e992f3489f25f3398a1a161", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void clear()", "signatureAfterChange": "   public void clear()", "diff": ["-  public void clear() { _model.clear(); }", "+  public void clear() { ", "+    synchronized(_model) { _model.clear(); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f059d7ae671b397fe756ce565778a9d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testEnded(final String testName, final boolean wasSuccessful,                         final boolean causedError)", "signatureAfterChange": "   public void testEnded(final String testName, final boolean wasSuccessful,                         final boolean causedError)", "diff": ["-    _notifier.junitTestEnded(testName, wasSuccessful, causedError);", "+    synchronized(_notifier) { // so that it's not called until junitStarted is fired", "+      _notifier.junitTestEnded(testName, wasSuccessful, causedError);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61794e4bad4a7079ab5339c2916b50e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void setBoldFonts(int point, Graphics g)", "signatureAfterChange": "      public void setBoldFonts(int point, Graphics g)", "diff": ["-    for(Pair<Pair<Integer,Integer>,String> p :  _stylesList) {", "-      Pair<Integer,Integer> loc = p.getFirst();", "-      if(loc.getFirst() <= point && loc.getSecond() >= point) {", "-        if(p.getSecond().equals(InteractionsDocument.ERROR_STYLE)) {", "-          g.setFont(g.getFont().deriveFont(Font.BOLD));", "+    synchronized(_lock) {", "+      for(Pair<Pair<Integer,Integer>,String> p :  _stylesList) {", "+        Pair<Integer,Integer> loc = p.getFirst();", "+        if(loc.getFirst() <= point && loc.getSecond() >= point) {", "+          if(p.getSecond().equals(InteractionsDocument.ERROR_STYLE)) {", "+            g.setFont(g.getFont().deriveFont(Font.BOLD));", "+          }", "+          else if(p.getSecond().equals(InteractionsDocument.DEBUGGER_STYLE)) {", "+            g.setFont(g.getFont().deriveFont(Font.BOLD));", "+          }", "+          else {", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          return;", "-        else if(p.getSecond().equals(InteractionsDocument.DEBUGGER_STYLE)) {", "-          g.setFont(g.getFont().deriveFont(Font.BOLD));", "-        }", "-        else {", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64093876809f4bd86c81f8daff067293", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public synchronized void requestSelectionUpdate(INavigatorItem ini)", "signatureAfterChange": "   public void requestSelectionUpdate(INavigatorItem ini)", "diff": ["-   */", "-  public synchronized void requestSelectionUpdate(INavigatorItem ini) {", "-    if (getCurrentSelectedLeaf() == null) { // the currently selected node is not a leaf", "-      setActiveDoc(ini);", "+  /** If the currently selected item is not an INavigatorItem, select the one given. */", "+  public void requestSelectionUpdate(INavigatorItem ini) {", "+    synchronized (_model) {", "+      if (getCurrentSelectedLeaf() == null) { // the currently selected node is not a leaf", "+        setActiveDoc(ini);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be3f09df10e0ae957ca2c7c27f9ced3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public synchronized boolean isGroupSelected()", "signatureAfterChange": "   public boolean isGroupSelected()", "diff": ["-   */", "-  public synchronized boolean isGroupSelected() {", "-    TreePath p = getSelectionPath();", "-    TreeNode n = (TreeNode) p.getLastPathComponent();", "-    return (n instanceof InnerNode);", "+  /** @return true if a group if INavigatorItems selected */", "+  public boolean isGroupSelected() {", "+    synchronized (_model) {", "+      TreePath p = getSelectionPath();", "+      TreeNode n = (TreeNode) p.getLastPathComponent();", "+      return (n instanceof InnerNode);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c35bdbe229c1e939f9f591863770332", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 47, "signatureBeforeChange": "      synchronized void collapsePaths(HashSet<String> paths)", "signatureAfterChange": "      void collapsePaths(HashSet<String> paths)", "diff": ["-  synchronized void collapsePaths(HashSet<String> paths) {", "-    DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)_model.getRoot();", "-    Enumeration<TreeNode> nodes = rootNode.depthFirstEnumeration(); /** This warning is expected **/", "-    ArrayList<String> list = new ArrayList<String>();", "-    while (nodes.hasMoreElements()) {", "-      DefaultMutableTreeNode tn = (DefaultMutableTreeNode)nodes.nextElement();", "-      if (tn instanceof InnerNode) {", "-        TreePath tp = new TreePath(tn.getPath());", "-        String s = generatePathString(tp);", "-        boolean shouldCollapse = paths.contains(s);", "-        if (shouldCollapse) { ", "-          collapsePath(tp);", "+  void collapsePaths(HashSet<String> paths) {", "+    synchronized (_model) {", "+      DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)_model.getRoot();", "+      Enumeration<TreeNode> nodes = rootNode.depthFirstEnumeration(); /** This warning is expected **/", "+      ArrayList<String> list = new ArrayList<String>();", "+      while (nodes.hasMoreElements()) {", "+        DefaultMutableTreeNode tn = (DefaultMutableTreeNode)nodes.nextElement();", "+        if (tn instanceof InnerNode) {", "+          TreePath tp = new TreePath(tn.getPath());", "+          String s = generatePathString(tp);", "+          boolean shouldCollapse = paths.contains(s);", "+          if (shouldCollapse) { ", "+            collapsePath(tp);", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c7bd84f605d25a28448f89f4839c63e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 183, "signatureBeforeChange": "          public void logCompileStart()", "signatureAfterChange": "          public void logCompileStart()", "diff": ["-    public void logCompileStart() {  _compileDone = false; }", "+    public void logCompileStart() {", "+      synchronized(_compileLock) { _compileDone = false; }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70c44f9ed33ae12a73ca434215fbed7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void addDocument(INavigatorItem doc)", "signatureAfterChange": "   public void addDocument(INavigatorItem doc)", "diff": ["-  public void addDocument(INavigatorItem doc) { _model.addElement(doc); }", "+  public void addDocument(INavigatorItem doc) { ", "+    synchronized(_model) { _model.addElement(doc); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7151ec5e25317265848ecc8013d5f0f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "0a93533cf1b555344278f97d8d989cd2f113c958", "commitAfterChange": "c950bf1122c303a9137db70374c1cd2e2fc01d08", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void nonTestCase(final boolean isTestAll)", "signatureAfterChange": "   public void nonTestCase(final boolean isTestAll)", "diff": ["-    _isTestInProgress = false;", "-    _notifier.nonTestCase(isTestAll);", "-    _notifier.junitEnded();", "+    // NOTE: junitStarted is called in a different thread from the testing thread,", "+    //       so it is possible that this is called before the other thread calls ", "+    //       the junitStarted.  We want the test to terminate AFTER it starts. Otherwise", "+    //       any thread that starts waiting for the test to end after the firing of", "+    //       junitStarted will never be notified. (same with all terminal events)", "+    //       The synchronization over _notifier takes care of this problem.", "+    synchronized(_notifier) { ", "+      _notifier.nonTestCase(isTestAll);", "+      _isTestInProgress = false;", "+      _notifier.junitEnded();", "+    } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7220be55b12c7bd3f56789b3bdb6dde1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public synchronized void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-  public synchronized void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "+  public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-    LeafNode node = getNodeForDoc(doc);", "-    if (node == null) addDocument(doc, path);", "-    ", "-    InnerNode oldParent = (InnerNode)node.getParent();", "-    // Check to see if the new parent (could be same) exists already", "-    String newPath = path;", "-    if (newPath.length() > 0) {", "-      if (newPath.substring(0,1).equals(\"/\")) newPath = newPath.substring(1);", "-      if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "-    }", "-    InnerNode newParent = _path2node.getValue(newPath); // node that should be parent", "-    ", "-    //    System.out.println(\"path=\"+path);", "-    //    System.out.println(\"newPath=\"+newPath);", "-    //    System.out.println(\"oldParent=\"+oldParent);", "-    //    System.out.println(\"newParent=\"+newParent);", "-    //    System.out.println(_path2node);", "-    ", "-    if (newParent == oldParent) { ", "-      if (!node.toString().equals(doc.getName())) {", "-        LeafNode newLeaf= new LeafNode(doc);", "-        _doc2node.put(doc,newLeaf);", "-        insertNodeSortedInto(newLeaf, newParent);", "-        _model.removeNodeFromParent(node);", "-      }", "-      // don't do anything if its name or parents haven't changed", "-    } else {", "-      removeNode(node);", "-      addDocument(doc, path);", "-    }", "-  }", "+    synchronized(_model) {", "+      LeafNode node = getNodeForDoc(doc);", "+      if (node == null) addDocument(doc, path);", "+      InnerNode oldParent = (InnerNode)node.getParent();", "+      // Check to see if the new parent (could be same) exists already", "+      String newPath = path;", "+      if (newPath.length() > 0) {", "+        if (newPath.substring(0,1).equals(\"/\")) newPath = newPath.substring(1);", "+        if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "+      }", "+      InnerNode newParent = _path2node.getValue(newPath); // node that should be parent", "+      ", "+      //    System.out.println(\"path=\"+path);", "+      //    System.out.println(\"newPath=\"+newPath);", "+      //    System.out.println(\"oldParent=\"+oldParent);", "+      //    System.out.println(\"newParent=\"+newParent);", "+      //    System.out.println(_path2node);", "+      ", "+      if (newParent == oldParent) { ", "+        if (!node.toString().equals(doc.getName())) {", "+          LeafNode newLeaf= new LeafNode(doc);", "+          _doc2node.put(doc,newLeaf);", "+          insertNodeSortedInto(newLeaf, newParent);", "+          _model.removeNodeFromParent(node);", "+        }", "+        // don't do anything if its name or parents haven't changed", "+      } else {", "+        removeNode(node);", "+        addDocument(doc, path);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74e21faf68d5ece1612bccc7d529b3b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void addTopLevelGroupToRoot(InnerNode parent)", "signatureAfterChange": "      private void addTopLevelGroupToRoot(InnerNode parent)", "diff": ["-  private void addTopLevelGroupToRoot(InnerNode parent){", "-", "-    int indexInRoots = _roots.indexOf(parent);", "-    int num = _model.getChildCount(_model.getRoot());", "-    int i;", "-    for (i = 0; i < num; i++) {", "-      TreeNode n = (TreeNode)_model.getChild(_model.getRoot(), i);", "-      if(_roots.indexOf(n) > indexInRoots) break;", "+  private void addTopLevelGroupToRoot(InnerNode parent) {", "+    ", "+    synchronized(_model) {", "+      ", "+      int indexInRoots = _roots.indexOf(parent);", "+      int num = _model.getChildCount(_model.getRoot());", "+      int i;", "+      for (i = 0; i < num; i++) {", "+        TreeNode n = (TreeNode)_model.getChild(_model.getRoot(), i);", "+        if(_roots.indexOf(n) > indexInRoots) break;", "+      }", "+      _model.insertNodeInto(parent, (MutableTreeNode)_model.getRoot(), i);", "-    _model.insertNodeInto(parent, (MutableTreeNode)_model.getRoot(), i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75665eca18b5ffb751ca81a36b2fd985", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public final void interpret(String toEval)", "signatureAfterChange": "   public final void interpret(String toEval)", "diff": ["-   */", "+   *  @param toEval command to be evaluated. */", "-    _interpreterUsed = true;", "-    _interpret(toEval);", "+    synchronized (_interpreterLock) {", "+      _interpreterUsed = true;", "+      _interpret(toEval);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a0f288475511fcd802e14257f487e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public synchronized void setActiveDoc(INavigatorItem doc)", "signatureAfterChange": "   public void setActiveDoc(INavigatorItem doc)", "diff": ["-  /** sets the input document to be active */", "-  public synchronized void setActiveDoc(INavigatorItem doc){", "-    ", "-    DefaultMutableTreeNode node = _doc2node.get(doc);", "-    if (this.contains(doc)) {", "-      TreeNode[] nodes = node.getPath();", "-      TreePath path = new TreePath(nodes);", "-      this.expandPath(path);", "-      this.setSelectionPath(path);", "-      this.scrollPathToVisible(path);", "+  /** Sets the input document to be active */", "+  public void setActiveDoc(INavigatorItem doc){", "+    ", "+    synchronized (_model) {", "+      DefaultMutableTreeNode node = _doc2node.get(doc);", "+      if (this.contains(doc)) {", "+        TreeNode[] nodes = node.getPath();", "+        TreePath path = new TreePath(nodes);", "+        this.expandPath(path);", "+        ", "+        this.setSelectionPath(path);", "+        this.scrollPathToVisible(path);", "+      }", "+    }", "+  }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a262d327953c108aa407bec76e105dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": "      public OpenDefinitionsDocument getODDGivenIDoc(INavigatorItem idoc)", "signatureAfterChange": "      public OpenDefinitionsDocument getODDGivenIDoc(INavigatorItem idoc)", "diff": ["-  public OpenDefinitionsDocument getODDGivenIDoc(INavigatorItem idoc)", "-  {", "-    return _documentsRepos.getValue(idoc);", "-  }", "+  public OpenDefinitionsDocument getODDGivenIDoc(INavigatorItem idoc) {", "+    synchronized (_documentsRepos) { return _documentsRepos.getValue(idoc); }", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "811506a67c2fa665082457f63f956897", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public synchronized void setRequireVariableType(boolean require)", "signatureAfterChange": "   public void setRequireVariableType(boolean require)", "diff": ["-  public synchronized void setRequireVariableType(boolean require) {", "-    _interpreterOptions.setRequireVariableType(require);", "+  public void setRequireVariableType(boolean require) {", "+    synchronized(_stateLock) {", "+      _interpreterOptions.setRequireVariableType(require);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "818fbae92c638122fa43e70d8715315c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListSortNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public String toString()", "signatureAfterChange": "      public String toString()", "diff": ["-  public String toString() { return _model.toString(); }", "+  public String toString() { ", "+    synchronized(_model) { return _model.toString(); } ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81eb6645b64b0510f1a4a191aec4aa4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public synchronized void setRequireSemicolon(boolean require)", "signatureAfterChange": "   public void setRequireSemicolon(boolean require)", "diff": ["-  public synchronized void setRequireSemicolon(boolean require) {", "-    _interpreterOptions.setRequireSemicolon(require);", "+  public void setRequireSemicolon(boolean require) {", "+    synchronized(_stateLock) {", "+      _interpreterOptions.setRequireSemicolon(require);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85374498019b8f2bf98a68fbe293680a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void removeDocumentClosedListener(DocumentClosedListener l)", "signatureAfterChange": "      public synchronized void removeDocumentClosedListener(DocumentClosedListener l)", "diff": ["-  public void removeDocumentClosedListener(DocumentClosedListener l){", "-    _closedListeners.remove(l);", "+  public synchronized void removeDocumentClosedListener(DocumentClosedListener l) { ", "+    synchronized (_closedListeners) { _closedListeners.remove(l); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f04206799b303fb6b1e6191cafeaf20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "6d55d86705248616cac5b324a7c528485ceb6104", "commitAfterChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "     public void remAuxFile(File file)", "signatureAfterChange": "     public void remAuxFile(File file)", "diff": ["-      int newLen = _auxFiles.length - 1;", "-      File[] newAuxFiles = new File[newLen];", "-      try {", "-        int j = 0;", "-        for (File f: _auxFiles) {", "-          if (! f.equals(file)) {", "-            newAuxFiles[j] = file;", "-            j++;", "+      synchronized(_auxFiles) {", "+        int newLen = _auxFiles.length - 1;", "+        File[] newAuxFiles = new File[newLen];", "+        try {", "+          int j = 0;", "+          for (File f: _auxFiles) {", "+            if (! f.equals(file)) {", "+              newAuxFiles[j] = file;", "+              j++;", "+            }", "+          if (j < newLen) throw new IllegalStateException(\"auxFiles list contain two copies of \" + file);", "+          _auxFiles = newAuxFiles;", "-        if (j < newLen) throw new IllegalStateException(\"auxFiles list contain two copies of \" + file);", "-        _auxFiles = newAuxFiles;", "-      }", "-      catch(Exception e) { // negative array size or index out of bounds", "-        throw new UnexpectedException(e);", "+        catch(Exception e) { // negative array size or index out of bounds", "+          throw new UnexpectedException(e);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "910a92416f05d8b55805ca5a14bfee79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "diff": ["-          final int origLocation = _currentLocation;", "-          _reduced.move(parenStart+1 - origLocation);  // reduced model points to pos == parenStart+1", "-          int parenEnd = balanceForward();", "-          _reduced.move(origLocation - (parenStart+1));    // Restore the state of the reduced model;", "-          if (parenEnd > -1) {", "-            parenEnd = parenEnd + parenStart+1;", "-            // System.out.println(\"\\tafter closing paren = \"+parenEnd);", "-            int afterParen = getFirstNonWSCharPos(parenEnd);", "-            // System.out.println(\"\\tfirst non-whitespace after paren = \"+parenStart+\" `\"+text.charAt(afterParen)+\"`\");", "-            cached = (afterParen==openSquigglyPos);          ", "+          synchronized(_reduced) {", "+            final int origLocation = _currentLocation;", "+            _reduced.move(parenStart+1 - origLocation);  // reduced model points to pos == parenStart+1", "+            int parenEnd = balanceForward();", "+            _reduced.move(origLocation - (parenStart+1));    // Restore the state of the reduced model;", "+            if (parenEnd > -1) {", "+              parenEnd = parenEnd + parenStart+1;", "+              // System.out.println(\"\\tafter closing paren = \"+parenEnd);", "+              int afterParen = getFirstNonWSCharPos(parenEnd);", "+              // System.out.println(\"\\tfirst non-whitespace after paren = \"+parenStart+\" `\"+text.charAt(afterParen)+\"`\");", "+              cached = (afterParen==openSquigglyPos);          ", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "915e92d687c681706b8ebce26df352ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsController.java", "commitBeforeChange": "8ec56b2c1078507e922e0c2657dbc71dde965ce2", "commitAfterChange": "4982367a9f8342b35bf4d2b855165f1464002815", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void interpreterExited(int status)", "signatureAfterChange": "          public void interpreterExited(int status)", "diff": ["-      String title = \"Interactions terminated by System.exit(\" + status + \")\";", "-      String msg = \"The interactions window was terminated by a call \" +", "-              \"to System.exit(\" + status + \").\\n\" +", "-              \"The interactions window will now be restarted.\";", "-      _view.showInfoDialog(title, msg);", "+      if (_promptIfExited) {", "+        String title = \"Interactions terminated by System.exit(\" + status + \")\";", "+        String msg = \"The interactions window was terminated by a call \" +", "+          \"to System.exit(\" + status + \").\\n\" +", "+          \"The interactions window will now be restarted.\";", "+        _view.showInfoDialog(title, msg);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9389bb66545610d24ba754de9702e5e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void enableRestart()", "signatureAfterChange": "   public void enableRestart()", "diff": ["+  /** Re-enables restarting the slave if it has been turned off by repeated startup failures. */", "+  public void enableRestart() {", "+    synchronized (_startupLock) { _restart = true; }", "+  }", "-  /** ReEnables restarting the slave if it has been turned off by repeated startup failures. */", "-  public void enableRestart() { _restart = true; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "965ba3372d65bd3e7b6291fdd7c79a25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void removeListener(GlobalModelListener listener)", "signatureAfterChange": "   public void removeListener(GlobalModelListener listener)", "diff": ["-    _listeners.remove(listener);", "+    synchronized(_listeners) {", "+      _listeners.remove(listener);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9be09f4c9c1fc47a83b0bd54785ca758", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": "      public INavigatorItem getIDocGivenODD(OpenDefinitionsDocument odd)", "signatureAfterChange": "       public INavigatorItem getIDocGivenODD(OpenDefinitionsDocument odd)", "diff": ["-  public INavigatorItem getIDocGivenODD(OpenDefinitionsDocument odd)", "-  {", "-    return _documentsRepos.getKey(odd);", "+  public INavigatorItem getIDocGivenODD(OpenDefinitionsDocument odd) {", "+    synchronized (_documentsRepos) { return _documentsRepos.getKey(odd); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dadd293852eff5d0d32f4cbce30aa8d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(String[] jvmArgs, String cp) throws IOException, RemoteException", "diff": ["-  protected synchronized final void invokeSlave(String[] jvmArgs, String cp) throws IOException, ", "-    RemoteException {", "-    if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "+  protected final void invokeSlave(String[] jvmArgs, String cp) throws IOException, RemoteException {", "-    if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "-    _startupInProgress = true;", "-    ", "-    //*******************************************", "-    // first, we we export ourselves to a file...", "-    //*******************************************", "-    ", "-    Thread t = new Thread(_exportMasterThreadName) {", "-      public void run() {", "-        synchronized(lock) {", "-          try {", "-            _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "-            ", "-            // Debug: check that the IP address is 127.0.0.1", "-            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-          }", "-          catch (RemoteException re) {", "-            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-            throw new edu.rice.cs.util.UnexpectedException(re);", "-          }", "-          lock.notify();", "-        }", "-      }", "-    };", "-    synchronized (lock) {", "-      t.start();", "-      while (_stub == null) {", "-        try { lock.wait(); }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-      }", "-    }", "-    _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _stubFile.deleteOnExit();", "-    // serialize stub to _stubFile", "-    FileOutputStream fstream = new FileOutputStream(_stubFile);", "-    ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_stub);", "-    ostream.flush();", "-    fstream.close();", "-", "-    //*******************************************", "-    // done exporting ourselves to a file...", "-    // now lets export our classloader", "-    // this will be used to handle classloading ", "-    // requests from the slave jvm", "-    //*******************************************", "-    final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "-    t = new Thread(_exportMasterThreadName) {", "-      public void run() {", "-        synchronized(lock) {", "-          try {", "-            _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "-            ", "-            // Debug: check that the IP address is 127.0.0.1", "-            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-          }", "-          catch (RemoteException re) {", "-            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-            throw new edu.rice.cs.util.UnexpectedException(re);", "-          }", "-          lock.notify();", "-        }", "-      }", "-    };", "-    synchronized(lock){", "-      t.start();", "-      while (_classLoaderStub == null) {", "-        try { lock.wait(); }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-      }", "-    }", "-    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _classLoaderStubFile.deleteOnExit();", "-    // serialize stub to _stubFile", "-    fstream = new FileOutputStream(_classLoaderStubFile);", "-    ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_classLoaderStub);", "-    ostream.flush();", "-    fstream.close();", "-    ", "-    String[] args = new String[] { ", "-      _stubFile.getAbsolutePath(),", "-      _slaveClassName,", "-      _classLoaderStubFile.getAbsolutePath()", "-    };", "-    ", "-    final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs);", "-    ", "-    // Start a thread to wait for the slave to die.  When it dies, restart it.", "-    Thread thread = new Thread(_waitForQuitThreadName) {", "-      public void run() {", "-        try {", "-          int status = process.waitFor();", "-          synchronized(AbstractMasterJVM.this) {", "-            if (_startupInProgress) {", "-              // If we get here, the process died without registering.", "-              //  (This might be the case if something was wrong with the", "-              //   classpath, or if the new JVM couldn't acquire a port", "-              //   for debugging.)", "-              //", "-              // Proper behavior in this case is unclear, so we'll let", "-              //  our subclasses decide.  By default, we print a stack", "-              //  trace and do not proceed, to avoid going into a loop.", "-              slaveQuitDuringStartup(status);", "+    synchronized(_masterJVMLock) {", "+      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "+      ", "+      if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "+      _startupInProgress = true;", "+      ", "+      //*******************************************", "+      // first, we we export ourselves to a file...", "+      //*******************************************", "+      ", "+      Thread t = new Thread(_exportMasterThreadName) {", "+        public void run() {", "+          synchronized(lock) {", "+            try {", "+              _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "+              ", "+              // Debug: check that the IP address is 127.0.0.1", "+              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            _slave = null;", "-            UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-            handleSlaveQuit(status);", "+            catch (RemoteException re) {", "+              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+              throw new edu.rice.cs.util.UnexpectedException(re);", "+            }", "+            lock.notify();", "-        catch (NoSuchObjectException e) {", "-          throw new edu.rice.cs.util.UnexpectedException(e);", "-        }", "-        catch (InterruptedException ie) {", "-          throw new edu.rice.cs.util.UnexpectedException(ie);", "+      };", "+      synchronized (lock) {", "+        t.start();", "+        while (_stub == null) {", "+          try { lock.wait(); }", "+          catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-    };", "-    ", "-    thread.start();", "+      _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _stubFile.deleteOnExit();", "+      // serialize stub to _stubFile", "+      FileOutputStream fstream = new FileOutputStream(_stubFile);", "+      ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_stub);", "+      ostream.flush();", "+      fstream.close();", "+      ", "+      //*******************************************", "+      // done exporting ourselves to a file...", "+      // now lets export our classloader", "+      // this will be used to handle classloading ", "+      // requests from the slave jvm", "+      //*******************************************", "+      final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      t = new Thread(_exportMasterThreadName) {", "+        public void run() {", "+          synchronized(lock) {", "+            try {", "+              _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "+              ", "+              // Debug: check that the IP address is 127.0.0.1", "+              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+            }", "+            catch (RemoteException re) {", "+              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+              throw new edu.rice.cs.util.UnexpectedException(re);", "+            }", "+            lock.notify();", "+          }", "+        }", "+      };", "+      synchronized(lock){", "+        t.start();", "+        while (_classLoaderStub == null) {", "+          try { lock.wait(); }", "+          catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        }", "+      }", "+      _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _classLoaderStubFile.deleteOnExit();", "+      // serialize stub to _stubFile", "+      fstream = new FileOutputStream(_classLoaderStubFile);", "+      ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_classLoaderStub);", "+      ostream.flush();", "+      fstream.close();", "+      ", "+      String[] args = new String[] { ", "+        _stubFile.getAbsolutePath(),", "+          _slaveClassName,", "+          _classLoaderStubFile.getAbsolutePath()", "+      };", "+      ", "+      final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs);", "+      ", "+      // Start a thread to wait for the slave to die.  When it dies, restart it.", "+      Thread thread = new Thread(_waitForQuitThreadName) {", "+        public void run() {", "+          try {", "+            int status = process.waitFor();", "+            synchronized(AbstractMasterJVM.this) {", "+              if (_startupInProgress) {", "+                // If we get here, the process died without registering.", "+                //  (This might be the case if something was wrong with the", "+                //   classpath, or if the new JVM couldn't acquire a port", "+                //   for debugging.)", "+                //", "+                // Proper behavior in this case is unclear, so we'll let", "+                //  our subclasses decide.  By default, we print a stack", "+                //  trace and do not proceed, to avoid going into a loop.", "+                slaveQuitDuringStartup(status);", "+              }", "+              _slave = null;", "+              UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "+              handleSlaveQuit(status);", "+            }", "+          }", "+          catch (NoSuchObjectException e) {", "+            throw new edu.rice.cs.util.UnexpectedException(e);", "+          }", "+          catch (InterruptedException ie) {", "+            throw new edu.rice.cs.util.UnexpectedException(ie);", "+          }", "+        }", "+      };", "+      ", "+      thread.start();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fd7efa232f046a4cbe7e29600162619", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public synchronized INavigatorItem removeDocument(INavigatorItem doc) throws IllegalArgumentException", "signatureAfterChange": "   public INavigatorItem removeDocument(INavigatorItem doc) throws IllegalArgumentException", "diff": ["-  public synchronized INavigatorItem removeDocument(INavigatorItem doc) throws IllegalArgumentException {", "-    return removeNode(getNodeForDoc(doc));", "+  public INavigatorItem removeDocument(INavigatorItem doc) throws IllegalArgumentException {", "+    synchronized(_model) {", "+      return removeNode(getNodeForDoc(doc));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a407c3905e87b908e42bc35d6adaa6ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public synchronized String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "signatureAfterChange": "   public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "diff": ["-  public synchronized String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException{", "-    TreePath p = getSelectionPath();", "-    TreeNode n = (TreeNode) p.getLastPathComponent();", "-    ", "-    if(n == _model.getRoot())", "-      throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\");", "-    ", "-    while(!_roots.contains(n)) { n = n.getParent(); }", "-    ", "-    return ((GroupNode)n).getData();", "+  public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException {", "+    synchronized (_model) {", "+      TreePath p = getSelectionPath();", "+      TreeNode n = (TreeNode) p.getLastPathComponent();", "+      ", "+      if (n == _model.getRoot())", "+        throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\");", "+      ", "+      while(!_roots.contains(n)) { n = n.getParent(); }", "+      ", "+      return ((GroupNode)n).getData();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab98ba5a19a9d2ec948e8accb82b989e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "commitAfterChange": "ee2a4f62f26e8f47974ad5d674dd24e422820bcc", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void removeRegistrationListener(RegistrationListener list)", "signatureAfterChange": "     public void removeRegistrationListener(RegistrationListener list)", "diff": ["-  public void addRegistrationListener(RegistrationListener list) { _regListeners.add(list); }", "-  public void removeRegistrationListener(RegistrationListener list) { _regListeners.remove(list); }", "+  public void addRegistrationListener(RegistrationListener list) { synchronized(_regListeners) { _regListeners.add(list); } }", "+    public void removeRegistrationListener(RegistrationListener list) { synchronized(_regListeners) { _regListeners.remove(list); } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afaafd3ce1f8aa151377d5ce93b97f24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void clearColoring()", "signatureAfterChange": "   public void clearColoring()", "diff": ["-  //Called when the Interactions pane is reset", "-  public synchronized void clearColoring() {", "-    //Don't clear immediately or else the colors will disappear while the interactions pane resets", "-    //_stylesList.clear();", "-    _toClear = true;", "+  /** Called when the Interactions pane is reset. */", "+  public void clearColoring() { synchronized (_stylesList) { _toClear = true; } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e28be62ee35ad052e078ca42d8ffa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void addDocumentClosedListener(DocumentClosedListener l)", "signatureAfterChange": "      public void addDocumentClosedListener(DocumentClosedListener l)", "diff": ["-  public void addDocumentClosedListener(DocumentClosedListener l){", "-    _closedListeners.add(l);", "+  public void addDocumentClosedListener(DocumentClosedListener l) { ", "+    synchronized (_closedListeners) { _closedListeners.add(l); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b523d79b38df4fbb62a09f2e035b345d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "f5e6f060cad653c11888e30b69842047d7693a32", "commitAfterChange": "dba0ccac56f5e3245b525afd7781147d259a9d94", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void removeNavigationListener(INavigationListener listener)", "signatureAfterChange": "   public void removeNavigationListener(INavigationListener listener)", "diff": ["-  public void removeNavigationListener(INavigationListener listener) { navListeners.remove(listener); }", "+  public void removeNavigationListener(INavigationListener listener) { ", "+    synchronized (_model) { navListeners.remove(listener); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6053aa4287bee9eadb547742e8531d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public boolean isReady()", "signatureAfterChange": "     public boolean isReady()", "diff": ["-    public boolean isReady() { return _doc != null; }", "+    public boolean isReady() { synchronized (_cacheLock) { return _doc != null; } }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b688dd4a5464ec08906af9b8cfc41d3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean setColoring(int point, Graphics g)", "signatureAfterChange": "   public boolean setColoring(int point, Graphics g)", "diff": ["-    ", "-    for(Pair<Pair<Integer,Integer>,String> p :  _stylesList) {", "-      Pair<Integer,Integer> loc = p.getFirst();", "-      if(loc.getFirst() <= point && loc.getSecond() >= point) {", "-        if(p.getSecond().equals(InteractionsDocument.ERROR_STYLE)) {", "-          //DrJava.consoleErr().println(\"Error Style\");", "-          g.setColor(INTERACTIONS_STANDARD_ERROR_COLOR);   ", "-          g.setFont(g.getFont().deriveFont(Font.BOLD));", "+    synchronized(_lock) {", "+      for(Pair<Pair<Integer,Integer>,String> p :  _stylesList) {", "+        Pair<Integer,Integer> loc = p.getFirst();", "+        if(loc.getFirst() <= point && loc.getSecond() >= point) {", "+          if(p.getSecond().equals(InteractionsDocument.ERROR_STYLE)) {", "+            //DrJava.consoleErr().println(\"Error Style\");", "+            g.setColor(INTERACTIONS_STANDARD_ERROR_COLOR);   ", "+            g.setFont(g.getFont().deriveFont(Font.BOLD));", "+          }", "+          else if(p.getSecond().equals(InteractionsDocument.DEBUGGER_STYLE)) {", "+            //DrJava.consoleErr().println(\"Debugger Style\");", "+            g.setColor(INTERACTIONS_DEBUGGER_COLOR);", "+            g.setFont(g.getFont().deriveFont(Font.BOLD));", "+          }", "+          else if(p.getSecond().equals(ConsoleDocument.SYSTEM_OUT_STYLE)) {", "+            //DrJava.consoleErr().println(\"System.out Style\");", "+            g.setColor(INTERACTIONS_SYSTEM_OUT_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else if(p.getSecond().equals(ConsoleDocument.SYSTEM_IN_STYLE)) {", "+            //DrJava.consoleErr().println(\"System.in Style\");", "+            g.setColor(INTERACTIONS_SYSTEM_IN_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else if(p.getSecond().equals(ConsoleDocument.SYSTEM_ERR_STYLE)) {", "+            //DrJava.consoleErr().println(\"System.err Style\");", "+            g.setColor(INTERACTIONS_SYSTEM_ERR_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else if(p.getSecond().equals(InteractionsDocument.OBJECT_RETURN_STYLE)) {", "+            g.setColor(INTERACTIONS_OBJECT_RETURN_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else if(p.getSecond().equals(InteractionsDocument.STRING_RETURN_STYLE)) {", "+            g.setColor(INTERACTIONS_STRING_RETURN_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else if(p.getSecond().equals(InteractionsDocument.NUMBER_RETURN_STYLE)) {", "+            g.setColor(INTERACTIONS_NUMBER_RETURN_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else if(p.getSecond().equals(InteractionsDocument.CHARACTER_RETURN_STYLE)) {", "+            g.setColor(INTERACTIONS_CHARACTER_RETURN_COLOR);", "+            g.setFont(INTERACTIONS_MAIN_FONT);", "+          }", "+          else { //Normal text color", "+            return false; ", "+          }", "+          return true;", "-        else if(p.getSecond().equals(InteractionsDocument.DEBUGGER_STYLE)) {", "-          //DrJava.consoleErr().println(\"Debugger Style\");", "-          g.setColor(INTERACTIONS_DEBUGGER_COLOR);", "-          g.setFont(g.getFont().deriveFont(Font.BOLD));", "-        }", "-        else if(p.getSecond().equals(ConsoleDocument.SYSTEM_OUT_STYLE)) {", "-          //DrJava.consoleErr().println(\"System.out Style\");", "-          g.setColor(INTERACTIONS_SYSTEM_OUT_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else if(p.getSecond().equals(ConsoleDocument.SYSTEM_IN_STYLE)) {", "-          //DrJava.consoleErr().println(\"System.in Style\");", "-          g.setColor(INTERACTIONS_SYSTEM_IN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else if(p.getSecond().equals(ConsoleDocument.SYSTEM_ERR_STYLE)) {", "-          //DrJava.consoleErr().println(\"System.err Style\");", "-          g.setColor(INTERACTIONS_SYSTEM_ERR_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else if(p.getSecond().equals(InteractionsDocument.OBJECT_RETURN_STYLE)) {", "-          g.setColor(INTERACTIONS_OBJECT_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else if(p.getSecond().equals(InteractionsDocument.STRING_RETURN_STYLE)) {", "-          g.setColor(INTERACTIONS_STRING_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else if(p.getSecond().equals(InteractionsDocument.NUMBER_RETURN_STYLE)) {", "-          g.setColor(INTERACTIONS_NUMBER_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else if(p.getSecond().equals(InteractionsDocument.CHARACTER_RETURN_STYLE)) {", "-          g.setColor(INTERACTIONS_CHARACTER_RETURN_COLOR);", "-          g.setFont(INTERACTIONS_MAIN_FONT);", "-        }", "-        else { //Normal text color", "-          return false; ", "-        }", "-        return true;", "+      return false;", "-    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8e9a87aa9bb75c90ffe5b01ce330764", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "4b6c56880670c4bb0f37de6a58c9d30d501c274a", "commitAfterChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected void _handleThreadStartEvent(ThreadStartEvent e)", "signatureAfterChange": "   protected void _handleThreadStartEvent(ThreadStartEvent e)", "diff": ["-    _debugger.threadStarted();", "+    synchronized(_debugger) {", "+      _debugger.threadStarted();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b99079dbc8c03119bebf78bef5f5b4eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public synchronized void removeNavigationListener(INavigationListener listener)", "signatureAfterChange": "   public void removeNavigationListener(INavigationListener listener)", "diff": ["-  public synchronized void removeNavigationListener(INavigationListener listener) {", "-    navListeners.remove(listener);", "+  public void removeNavigationListener(INavigationListener listener) {", "+    synchronized (_model) { navListeners.remove(listener); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfb58eadf5c362ee9391ded388d743f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public boolean selectDocumentAt(final int x, final int y)", "signatureAfterChange": "   public boolean selectDocumentAt(final int x, final int y)", "diff": ["-    final int idx = locationToIndex(new java.awt.Point(x,y));", "-    java.awt.Rectangle rect = getCellBounds(idx, idx);", "-    if (rect.contains(x, y)) {", "-      setActiveDoc((INavigatorItem) _model.getElementAt(idx));", "-      return true;", "+    synchronized (_model) {", "+      final int idx = locationToIndex(new java.awt.Point(x,y));", "+      java.awt.Rectangle rect = getCellBounds(idx, idx);", "+      if (rect.contains(x, y)) {", "+        setActiveDoc((INavigatorItem) _model.getElementAt(idx));", "+        return true;", "+      }", "+      return false;", "-    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20fb88388d827efcbd0049cc39298c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "4b6c56880670c4bb0f37de6a58c9d30d501c274a", "commitAfterChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected void _cleanUp(Event e) throws DebugException", "signatureAfterChange": "   protected void _cleanUp(Event e) throws DebugException", "diff": ["-    _connected = false;", "-    if (_debugger.isReady()) {", "-      if (_debugger.hasSuspendedThreads()) {", "-        _debugger.currThreadDied();", "+    synchronized(_debugger) {", "+      _connected = false;", "+      if (_debugger.isReady()) {", "+        if (_debugger.hasSuspendedThreads()) {", "+          _debugger.currThreadDied();", "+        }", "+        _debugger.shutdown();", "-      _debugger.shutdown();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c49929ecd820632d22c876d6f047cf82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 18, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public Pair<Object,String>[] getVariable(String var)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public Pair<Object,String>[] getVariable(String var)", "diff": ["-    InterpretResult ir = interpret(var);", "-    return ir.apply(new InterpretResult.Visitor<Pair<Object,String>[]>() {", "+    synchronized(_stateLock) {", "+      InterpretResult ir = interpret(var);", "+      return ir.apply(new InterpretResult.Visitor<Pair<Object,String>[]>() {", "-            return new Pair[] { new Pair<Object,String>(valString, objTypeString) }; }", "+          return new Pair[] { new Pair<Object,String>(valString, objTypeString) }; }", "-    });", "+      });", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c659c87e3ae78e14c5e110c362a9d2b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void setStartupClasspath(String classpath)", "signatureAfterChange": "   public void setStartupClasspath(String classpath)", "diff": ["-    _startupClasspath = classpath;", "-    _parseStartupClasspath();", "+    synchronized(_masterJVMLock) {", "+      _startupClasspath = classpath;", "+      _parseStartupClasspath();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c75da759cb4bcbced231d97b6ba89fb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 79, "signatureBeforeChange": "   protected void notifyListeners(EventNotifier n)", "signatureAfterChange": "   protected void notifyListeners(EventNotifier n)", "diff": ["-    ListIterator i = _listeners.listIterator();", "+    synchronized(_listeners) {", "+      ListIterator i = _listeners.listIterator();", "-    while(i.hasNext()) {", "-      GlobalModelListener cur = (GlobalModelListener) i.next();", "-      n.notifyListener(cur);", "+      while(i.hasNext()) {", "+        GlobalModelListener cur = (GlobalModelListener) i.next();", "+        n.notifyListener(cur);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c794c3c84e9c9ab3857a997a1ccb7f33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public synchronized INavigatorItem getNext(INavigatorItem doc)", "signatureAfterChange": "   public INavigatorItem getNext(INavigatorItem doc)", "diff": ["-  public synchronized INavigatorItem getNext(INavigatorItem doc) {", "-    DefaultMutableTreeNode node = _doc2node.get(doc);", "-    // TODO: check for \"package\" case", "-    DefaultMutableTreeNode next = node.getNextLeaf();", "-    if (next == null || next == _model.getRoot()) return doc;", "-    return  (INavigatorItem) next.getUserObject();", "+  public INavigatorItem getNext(INavigatorItem doc) {", "+    synchronized (_model) {", "+      DefaultMutableTreeNode node = _doc2node.get(doc);", "+      // TODO: check for \"package\" case", "+      DefaultMutableTreeNode next = node.getNextLeaf();", "+      if (next == null || next == _model.getRoot()) return doc;", "+      return  (INavigatorItem) next.getUserObject();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0409492b61c8ab242f86e1efa0e35f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public synchronized void registerSlave(SlaveRemote slave)     throws RemoteException", "signatureAfterChange": "    public void registerSlave(SlaveRemote slave) throws RemoteException", "diff": ["-  public synchronized void registerSlave(SlaveRemote slave)", "-    throws RemoteException {", "-    _slave = slave;", "-    _startupInProgress = false;", "-    _stubFile.delete();", "-    _stub = null;", "-    _classLoaderStub = null;", "-    _classLoaderStubFile.delete();", "-    ", "-    handleSlaveConnected();", "-", "-    if (_quitOnStartup) {", "-      // quitSlave was called before the slave registered, so we now act on", "-      // the deferred quit request.", "-      _quitOnStartup = false;", "-      quitSlave();", "+  public void registerSlave(SlaveRemote slave) throws RemoteException {", "+    synchronized(_masterJVMLock) {", "+      _slave = slave;", "+      _startupInProgress = false;", "+      _stubFile.delete();", "+      _stub = null;", "+      _classLoaderStub = null;", "+      _classLoaderStubFile.delete();", "+      ", "+      handleSlaveConnected();", "+      ", "+      if (_quitOnStartup) {", "+        // quitSlave was called before the slave registered, so we now act on", "+        // the deferred quit request.", "+        _quitOnStartup = false;", "+        quitSlave();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d35148fd252df48b901ed48b6e53be86", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void _handleBreakpointEvent(BreakpointEvent e)", "signatureAfterChange": "      private void _handleBreakpointEvent(BreakpointEvent e)", "diff": ["-    _manager.setCurrentThread(e.thread());", "-    _manager.currThreadSuspended();", "-    _manager.scrollToSource(e);", "-    _manager.reachedBreakpoint((BreakpointRequest)e.request());", "+    synchronized(_manager){", "+      _manager.setCurrentThread(e.thread());", "+      _manager.currThreadSuspended();", "+      _manager.scrollToSource(e);", "+      _manager.reachedBreakpoint((BreakpointRequest)e.request());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d35c8e986e9097897e0942dbdb009051", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public boolean contains(INavigatorItem doc)", "signatureAfterChange": "   public boolean contains(INavigatorItem doc)", "diff": ["-  public boolean contains(INavigatorItem doc) { return _model.contains(doc); }", "+  public boolean contains(INavigatorItem doc) { ", "+    synchronized(_model) { return _model.contains(doc); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3dfaca6110eebb8c75baf43d2e6f6c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public synchronized void addNavigationListener(INavigationListener listener)", "signatureAfterChange": "   public void addNavigationListener(INavigationListener listener)", "diff": ["-  public synchronized void addNavigationListener(INavigationListener listener) {", "-    navListeners.add(listener);", "+  public void addNavigationListener(INavigationListener listener) {", "+    synchronized (_model) { navListeners.add(listener); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da9da7ecc9da98d4d0cf247359dcfdf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public Pair<String,String> getVariableToString(String var)", "signatureAfterChange": "   public Pair<String,String> getVariableToString(String var)", "diff": ["+    synchronized(_stateLock) {", "-    Pair<Object,String>[] val = getVariable(var);", "-    if (val.length == 0) { return new Pair<String,String>(null,null); }", "-    else {", "-      Object o = val[0].first();", "-      try { return new Pair<String,String>(TextUtil.toString(o),val[0].second()); }", "-      catch (Throwable t) { return new Pair<String,String>(\"<error in toString()>\",\"\"); }", "+      Pair<Object,String>[] val = getVariable(var);  // recursive locking", "+      if (val.length == 0) { return new Pair<String,String>(null,null); }", "+      else {", "+        Object o = val[0].first();", "+        try { return new Pair<String,String>(TextUtil.toString(o),val[0].second()); }", "+        catch (Throwable t) { return new Pair<String,String>(\"<error in toString()>\",\"\"); }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbe61f9c1138c99b0addf2a0d86ca48c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public boolean _isShadowed(int pos)", "signatureAfterChange": "   public boolean _isShadowed(int pos)", "diff": ["-//    synchronized(_reduced) {", "+    synchronized(_reduced) {", "-//    }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dca937ff95c266115b744edc4df084dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public synchronized void setEnforceAllAccess(boolean enforce)", "signatureAfterChange": "   public void setEnforceAllAccess(boolean enforce)", "diff": ["-  public synchronized void setEnforceAllAccess(boolean enforce) {", "-    _interpreterOptions.setEnforceAllAccess(enforce);", "+  public void setEnforceAllAccess(boolean enforce) {", "+    synchronized(_stateLock) {", "+      _interpreterOptions.setEnforceAllAccess(enforce);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff72c0822ccf9c1014dfc20decce355", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void addListener(GlobalModelListener listener)", "signatureAfterChange": "   public void addListener(GlobalModelListener listener)", "diff": ["-    _listeners.addLast(listener);", "+    synchronized(_listeners) {", "+      _listeners.addLast(listener);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16c29f8d02ad22cb79a522ff572b329", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JListNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public <T extends INavigatorItem> Enumeration<T> getDocuments()", "signatureAfterChange": "   public <T extends INavigatorItem> Enumeration<T> getDocuments()", "diff": ["-    return (Enumeration<T>) _model.elements();  // Cast forced by lousy generic typing of DefaultListModel in Java 1.5", "+    synchronized (_model) {", "+      return (Enumeration<T>) _model.elements();  // Cast forced by lousy generic typing of DefaultListModel in Java 1.5", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28dd85bc2d81b62f000f19cd5da19dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public synchronized boolean selectDocumentAt(int x, int y)", "signatureAfterChange": "   public boolean selectDocumentAt(int x, int y)", "diff": ["-  public synchronized boolean selectDocumentAt(int x, int y) {", "-    TreePath path = getPathForLocation(x, y);", "-    if (path == null) return false;", "-    else {", "-      DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();", "-      if (node instanceof LeafNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else if (node instanceof InnerNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else if (node instanceof RootNode) {", "-        this.expandPath(path);", "-        this.setSelectionPath(path);", "-        this.scrollPathToVisible(path);", "-        return true;", "-      } ", "-      else return false;", "+  public boolean selectDocumentAt(int x, int y) {", "+    synchronized (_model) {", "+      TreePath path = getPathForLocation(x, y);", "+      if (path == null) return false;", "+      else {", "+        DefaultMutableTreeNode node = (DefaultMutableTreeNode)path.getLastPathComponent();", "+        if (node instanceof LeafNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else if (node instanceof InnerNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else if (node instanceof RootNode) {", "+          this.expandPath(path);", "+          this.setSelectionPath(path);", "+          this.scrollPathToVisible(path);", "+          return true;", "+        } ", "+        else return false;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7673e10cf41460666517d95242e646e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public synchronized boolean isSelectedInGroup(INavigatorItem i)", "signatureAfterChange": "   public boolean isSelectedInGroup(INavigatorItem i)", "diff": ["-   */", "-  public synchronized boolean isSelectedInGroup(INavigatorItem i){", "-    TreePath p = getSelectionPath();", "-    TreeNode n = (TreeNode) p.getLastPathComponent();", "-    TreeNode l = _doc2node.get(i);", "-    ", "-    if (n == _model.getRoot()) return true;", "-    ", "-    while (l.getParent() != _model.getRoot()) {", "-      if(l.getParent() == n) return true;", "-      l = l.getParent();", "+  /** @return true if the INavigatorItem is in the selected group. */", "+  public boolean isSelectedInGroup(INavigatorItem i) {", "+    synchronized (_model) {", "+      TreePath p = getSelectionPath();", "+      TreeNode n = (TreeNode) p.getLastPathComponent();", "+      TreeNode l = _doc2node.get(i);", "+      ", "+      if (n == _model.getRoot()) return true;", "+      ", "+      while (l.getParent() != _model.getRoot()) {", "+        if(l.getParent() == n) return true;", "+        l = l.getParent();", "+      }", "+      ", "+      return false;", "-    ", "-    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d281aa72556fed40b858b43825962b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "commitAfterChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void cleanFolderNode(DefaultMutableTreeNode node)", "signatureAfterChange": "   private void cleanFolderNode(DefaultMutableTreeNode node)", "diff": ["-    if (node instanceof InnerNode && node.getChildCount() == 0) {", "-      DefaultMutableTreeNode parent = (DefaultMutableTreeNode)node.getParent();", "-      _model.removeNodeFromParent(node);", "-      _path2node.removeKey((InnerNode)node);", "-      cleanFolderNode(parent);", "+    synchronized(_model) {", "+      if (node instanceof InnerNode && node.getChildCount() == 0) {", "+        DefaultMutableTreeNode parent = (DefaultMutableTreeNode)node.getParent();", "+        _model.removeNodeFromParent(node);", "+        _path2node.removeKey((InnerNode)node);", "+        cleanFolderNode(parent);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8bd263faef860fb0dca5715b9b77458", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public synchronized boolean isTopLevelGroupSelected()", "signatureAfterChange": "   public boolean isTopLevelGroupSelected()", "diff": ["-   */", "-  public synchronized boolean isTopLevelGroupSelected(){", "-    TreePath p = getSelectionPath();", "-    TreeNode n = (TreeNode) p.getLastPathComponent();", "-    return (n instanceof GroupNode);", "+  /** Returns true if a top level group is selected */", "+  public boolean isTopLevelGroupSelected() {", "+    synchronized (_model) {", "+      TreePath p = getSelectionPath();", "+      TreeNode n = (TreeNode) p.getLastPathComponent();", "+      return (n instanceof GroupNode);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7c8947c36607f5afe7e45c575d1b99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentAdapter.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public synchronized boolean isInCommentBlock()", "signatureAfterChange": "   public boolean isInCommentBlock()", "diff": ["+   */", "+  public boolean isInCommentBlock() {", "+    synchronized(_reduced) {", "+      resetReducedModelLocation();", "+      ReducedModelState state = stateAtRelLocation(getLength() - _currentLocation);", "+      boolean toReturn = (state.equals(ReducedModelStates.INSIDE_BLOCK_COMMENT));", "+      return toReturn;", "+    }", "-   */", "-  public synchronized boolean isInCommentBlock() {", "-    resetReducedModelLocation();", "-    ReducedModelState state = stateAtRelLocation(getLength()-_currentLocation);", "-    boolean toReturn = (state.equals(ReducedModelStates.INSIDE_BLOCK_COMMENT));", "-    return toReturn;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed9012148521cfd6946902d39e7c607f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public void setKeywords(Set<String> keywords)", "signatureAfterChange": "     public void setKeywords(Set<String> keywords)", "diff": ["-      if (_doc != null) {", "-        // resident", "-        _doc.setKeywords(keywords);", "-      }", "-      else {", "-        // virtualized", "-        _keywords = new HashSet<String>(keywords);", "+      synchronized(_cacheLock) {", "+        if (_doc != null) {", "+          // resident", "+          _doc.setKeywords(keywords);", "+        }", "+        else {", "+          // virtualized", "+          _keywords = new HashSet<String>(keywords);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbbdd2501a1473285a9642be8c13667f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public synchronized INavigatorItem getCurrentSelectedLeaf()", "signatureAfterChange": "   public INavigatorItem getCurrentSelectedLeaf()", "diff": ["-  public synchronized INavigatorItem getCurrentSelectedLeaf(){", "-    if (_current == null) return null;", "-    return _current.execute(_leafVisitor);", "+  public INavigatorItem getCurrentSelectedLeaf() {", "+    synchronized (_model) {", "+      if (_current == null) return null;", "+      return _current.execute(_leafVisitor);", "+    }"]}], "num": 30168}
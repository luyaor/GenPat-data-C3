{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ae2d8859debad749eeef9234662f32a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c48256243c70a7b9444638444c46486", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "          public void test_NotAllowed()", "signatureAfterChange": "          public void test_NotAllowed()", "diff": ["-      SourceInfo noInfo = JExprParser.NO_SOURCE_INFO;", "-      Word w = new Word(JExprParser.NO_SOURCE_INFO, \"word\");", "+      Word w = new Word(NO_INFO, \"word\");", "-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      UnbracedBody emptyUnbracedBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      ClassOrInterfaceType superClass = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]);", "+      BracedBody emptyBody = new BracedBody(NO_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyUnbracedBody = new UnbracedBody(NO_INFO, new BodyItemI[0]);", "+      ClassOrInterfaceType superClass = new ClassOrInterfaceType(NO_INFO, \"java.lang.Object\", new Type[0]);", "-      CompoundWord cw = new CompoundWord(noInfo, new Word[0]);", "-      Statement stmt = new EmptyStatement(noInfo);", "-      Expression e = new EmptyExpression(noInfo);", "-      Block b = new Block(noInfo, emptyBody);", "+      CompoundWord cw = new CompoundWord(NO_INFO, new Word[0]);", "+      Statement stmt = new EmptyStatement(NO_INFO);", "+      Expression e = new EmptyExpression(NO_INFO);", "+      Block b = new Block(NO_INFO, emptyBody);", "-      TypeVariable tv = new TypeVariable(noInfo, \"name\");", "+      TypeVariable tv = new TypeVariable(NO_INFO, \"name\");", "-      InnerInterfaceDef ii = new InnerInterfaceDef(noInfo, _publicMav, w, tps, rts, emptyBody);", "-      InnerClassDef ic = new InnerClassDef(noInfo, _publicMav, w, tps, superClass, rts, emptyBody);", "+      InnerInterfaceDef ii = new InnerInterfaceDef(NO_INFO, _publicMav, w, tps, rts, emptyBody);", "+      InnerClassDef ic = new InnerClassDef(NO_INFO, _publicMav, w, tps, superClass, rts, emptyBody);", "-      StaticInitializer si = new StaticInitializer(noInfo, b);", "-      LabeledStatement ls = new LabeledStatement(noInfo, new Word(noInfo, \"label\"), stmt);", "+      StaticInitializer si = new StaticInitializer(NO_INFO, b);", "+      LabeledStatement ls = new LabeledStatement(NO_INFO, new Word(NO_INFO, \"label\"), stmt);", "-      LabeledBreakStatement bs = new LabeledBreakStatement(noInfo, new Word(noInfo, \"myLabel\"));", "-      LabeledContinueStatement cs = new LabeledContinueStatement(noInfo, new Word(noInfo, \"yourLabel\"));", "-      SynchronizedStatement syncs = new SynchronizedStatement(noInfo, e, b);", "-      TypeParameter tp = new TypeParameter(noInfo, tv, superClass);", "-      ConditionalExpression ce = new ConditionalExpression(noInfo, e, e, e);", "+      LabeledBreakStatement bs = new LabeledBreakStatement(NO_INFO, new Word(NO_INFO, \"myLabel\"));", "+      LabeledContinueStatement cs = new LabeledContinueStatement(NO_INFO, new Word(NO_INFO, \"yourLabel\"));", "+      SynchronizedStatement syncs = new SynchronizedStatement(NO_INFO, e, b);", "+      TypeParameter tp = new TypeParameter(NO_INFO, tv, superClass);", "+      ConditionalExpression ce = new ConditionalExpression(NO_INFO, e, e, e);", "-      TryCatchStatement tcs = new NormalTryCatchStatement(noInfo, b, new CatchBlock[0]);", "-      SwitchCase defaultSc = new DefaultCase(JExprParser.NO_SOURCE_INFO, emptyUnbracedBody);", "-      SwitchStatement ssBadDefault = new SwitchStatement(noInfo, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), new SwitchCase[]{defaultSc, defaultSc});", "+      TryCatchStatement tcs = new NormalTryCatchStatement(NO_INFO, b, new CatchBlock[0]);", "+      SwitchCase defaultSc = new DefaultCase(NO_INFO, emptyUnbracedBody);", "+      SwitchStatement ssBadDefault = new SwitchStatement(NO_INFO, new IntegerLiteral(NO_INFO, 5), ", "+                                                         new SwitchCase[]{defaultSc, defaultSc});", "-     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"StaticInitializer is not allowed\", \"Static initializers cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"Labeled Statement is not allowed\", \"Labeled statements cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"LabeledBreakStatement is not allowed\", \"Labeled statements cannot be used at the Advanced level, so you cannot break to a label\", errors.getLast().getFirst());", "+     assertEquals(\"LabeledBreakStatement is not allowed\",", "+                  \"Labeled statements cannot be used at the Advanced level, so you cannot break to a label\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"ContinueStatement is not allowed\", \"Labeled statements cannot be used at the Advanced level, so you cannot use a labeled continue statement\", errors.getLast().getFirst());", "+     assertEquals(\"ContinueStatement is not allowed\", ", "+                  \"Labeled statements cannot be used at the Advanced level, so you cannot use a labeled \" + ", "+                  \"continue statement\", errors.getLast().getFirst());", "-     assertEquals(\"SynchronizedStatement is not allowed\", \"Synchronized statements cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"SynchronizedStatement is not allowed\", ", "+                  \"Synchronized statements cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"TypeParameters is not allowed\", \"Type Parameters cannot be used at the Advanced level\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"ConditionalExpression is not allowed\", \"Conditional expressions cannot be used at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"ConditionalExpression is not allowed\", ", "+                  \"Conditional expressions cannot be used at the Advanced level\", errors.getLast().getFirst());", "-     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", errors.getLast().getFirst());", "+     assertEquals(\"try-catch statements are not allowed\", \"A try-catch statement cannot appear here\", ", "+                  errors.getLast().getFirst());", "-     assertEquals(\"Default case has to be last case\", \"Default case must be the last case of a switch statement at the Advanced level\", errors.getLast().getFirst());", "+     assertEquals(\"Default case has to be last case\", ", "+                  \"Default case must be the last case of a switch statement at the Advanced level\", ", "+                  errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39a3b138f57b6f8bb7fa2d1dab1fb06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "                   public void testForTryCatchStatement()", "diff": ["+      ", "-      //make sure that if there is an error in one of the bodies, it is caught:", "-      BracedBody errorBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new BitwiseOrExpression(SourceInfo.NO_INFO, ", "-                                                        new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                        new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "-      Block errorBlock = new Block(SourceInfo.NO_INFO, errorBody);", "+//      //make sure that if there is an error in one of the bodies, it is caught:", "+//      BracedBody errorBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "+//        new ExpressionStatement(SourceInfo.NO_INFO, ", "+//                                new BitwiseOrExpression(SourceInfo.NO_INFO, ", "+//                                                        new SimpleNameReference(SourceInfo.NO_INFO, ", "+//                                                                                new Word(SourceInfo.NO_INFO, \"i\")), ", "+//                                                        new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "+//      Block errorBlock = new Block(SourceInfo.NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, errorBlock, new CatchBlock[0]);", "+//      assert ! SourceInfo.TEST_0.equals(SourceInfo.TEST_1);", "+      ntcs = new NormalTryCatchStatement(SourceInfo.TEST_0, _generateErrorBlock(0), new CatchBlock[0]);", "-                   \"Bitwise or expressions cannot be used at any language level.  \" ", "+                   \"Bitwise or expressions cannot be used in the functional language level.  \" ", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(SourceInfo.NO_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(SourceInfo.TEST_1, ", "+                                            new PrimitiveType(SourceInfo.TEST_1, \"int\"), ", "+                                            new Word(SourceInfo.TEST_1, \"i\"));", "+      FormalParameter fp = new FormalParameter(SourceInfo.TEST_1, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {", "-        new CatchBlock(SourceInfo.NO_INFO, fp, errorBlock)}, b);", "-        ", "+      tcfs = new TryCatchFinallyStatement(SourceInfo.TEST_1, b, new CatchBlock[] {", "+        new CatchBlock(SourceInfo.TEST_1, fp, _generateErrorBlock(1))", "+      }, b);", "+      ", "+     assertEquals(\"Should be one error\", 1, errors.size());", "-     assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+     assertEquals(\"Error message should be correct\", ", "+                  \"Bitwise or expressions cannot be used in the functional language level.\"", "+                  + \"  Perhaps you meant to compare two values using regular or (||)\", ", "+                  errors.getLast().getFirst());"]}], "num": 16624}
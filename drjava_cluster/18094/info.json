{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1362e216724a5a57f361dd1e0fad6902", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90302e649fd1a63433651da0a1739582", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk15/edu/rice/cs/drjava/model/compiler/Javac150Compiler.java", "commitBeforeChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "commitAfterChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public CompilerError[] compile(File sourceRoot, File[] files)", "signatureAfterChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-   */", "-  public CompilerError[] compile(File sourceRoot, File[] files) {", "-    File[] sourceRoots = new File[] { sourceRoot };", "-    return compile(sourceRoots, files);", "-  }", "+  */", "+  public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath, ", "+                                               List<? extends File> sourcePath, File destination, ", "+                                               List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {", "+    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    OurLog log = new OurLog(context);", "+    JavaCompiler compiler = _makeCompiler(context);", "+    ", "+    com.sun.tools.javac.util.List<String> filesToCompile = _emptyStringList();", "+    for (File f : files) {", "+      // TODO: Can we assume the files are canonical/absolute?  If not, we should use the util methods here.", "+      filesToCompile = filesToCompile.prepend(f.getAbsolutePath());", "+    }", "+    ", "+      // GJ defines the compile method to throw Throwable?!", "+      //Added to account for error in javac whereby a variable that was not declared will", "+      //cause an out of memory error. This change allows us to output both errors and not", "+      //just the out of memory error", "+      LinkedList<CompilerError> errors = log.getErrors();", "+      errors.addFirst(new CompilerError(\"Compile exception: \" + t, false));", "+      return errors;", "+    return log.getErrors();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1a05f514a49bdb1d116d4123dbf3ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk16/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "commitAfterChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "signatureAfterChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-   */", "-  public CompilerError[] compile(File[] sourceRoots, File[] files) {", "+    */", "+  public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath, ", "+                                               List<? extends File> sourcePath, File destination, ", "+                                               List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {", "+    Context context = createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    LinkedList<CompilerError> errors = new LinkedList<CompilerError>();", "+    new CompilerErrorListener(context, errors);", "-    initCompiler(sourceRoots);  // binds compiler to a compiler with our DiagnosticListener", "+    JavaCompiler compiler = JavaCompiler.instance(context);", "-    DefaultFileManager fileManager = (DefaultFileManager) _context.get(JavaFileManager.class);", "-    ", "-    /** List of FileObjects to compile. */", "+    DefaultFileManager fileManager = (DefaultFileManager) context.get(JavaFileManager.class);", "-//    Utilities.show(\"Compiling \" + fileObjects);", "-//    Utilities.show(\"Javac160Compiler is: \" + _compiler); ", "-    try { _compiler.compile(fileObjects); }", "-    ", "+    try { compiler.compile(fileObjects); }", "-      _errors.addFirst(new CompilerError(\"Compile exception: \" + t, false));", "-//      Utilities.showTrace(t);", "+      errors.addFirst(new CompilerError(\"Compile exception: \" + t, false));", "-", "-    // null out things to not keep pointers to dead data", "-    _compiler = null;", "-    return _errors.toArray(new CompilerError[_errors.size()]);", "+    ", "+    return errors;"]}], "num": 18094}
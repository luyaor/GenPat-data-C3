{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e090147c2822d18457077211a403796d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a938e8dcc60f9bdfb2b5faf17e82b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/ConsoleDocument.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected void _clearCurrentInputText()", "signatureAfterChange": "   protected void _clearCurrentInputText()", "diff": ["+    acquireWriteLock();", "-      removeText(_promptPos, getDocLength() - _promptPos);", "+      removeText(_promptPos, _document.getDocLength() - _promptPos);", "+    finally { releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "600037c3b6583525d49cea343327c9aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   private int commentBlock(final int start, final int end)", "signatureAfterChange": "   private int commentBlock(final int start, final int end)", "diff": ["-//    acquireWriteLock();", "+    acquireWriteLock();", "-//      synchronized(_reduced) {", "+      synchronized(_reduced) {", "-//      }", "+      }", "-//    finally { releaseWriteLock(); }", "+    finally { releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c239a5f412dfb9b58764eeab00f811c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "diff": ["-  public String getNextTopLevelClassName(int startPos, int endPos)", "-    throws ClassNameNotFoundException {", "-    // throwErrorHuh();", "+  public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException {", "-    int oldLocation = getCurrentLocation();", "-", "-    try {", "-      setCurrentLocation(startPos);", "-      final int textLength = endPos - startPos;", "-      final String text = getText(startPos, textLength);", "-", "-      boolean done;", "-      int index;", "-", "-      int indexOfClass = _findKeywordAtToplevel(\"class\", text, startPos);", "-      int indexOfInterface = _findKeywordAtToplevel(\"interface\", text, startPos);", "-      int indexOfEnum = _findKeywordAtToplevel(\"enum\",text,startPos);", "-        ", "-      //If class exists at top level AND either there is no interface at top level or the index of class precedes the index of the top", "-      //level interface, AND the same for top level enum, then the class is the first top level declaration", "-      if( (indexOfClass > -1) ", "-           && (indexOfInterface <= -1 || indexOfClass < indexOfInterface) ", "-           && (indexOfEnum <= -1 || indexOfClass < indexOfEnum) ) {", "-        index = indexOfClass + \"class\".length();", "-      }", "-      else if( (indexOfInterface > -1) ", "-                && (indexOfClass <= -1 || indexOfInterface < indexOfClass) ", "-                && (indexOfEnum <= -1 || indexOfInterface < indexOfEnum) ) {", "-        index = indexOfInterface + \"interface\".length();", "-      }", "-      else if( (indexOfEnum > -1)", "-                && (indexOfClass <= -1 || indexOfEnum < indexOfClass)   ", "-                && (indexOfInterface <= -1 || indexOfEnum < indexOfInterface)) {", "-        index = indexOfEnum + \"enum\".length();", "-      }", "-      else {", "-        // no index was valid", "-        throw new ClassNameNotFoundException(\"No top level class name found\");", "-      }", "-        ", "-      ", "-//      if (indexOfClass > -1) {", "-//", "-//        if (indexOfInterface > -1) {", "-//          // compare indices to find the lesser", "-//          index = (indexOfClass < indexOfInterface) ?", "-//            indexOfClass + \"class\".length() :", "-//            indexOfInterface + \"interface\".length();", "-//        }", "-//        else {", "-//          //top level class declaration found", "-//          index = indexOfClass + \"class\".length();", "-//        }", "-//      }", "-//      else {", "-//        if (indexOfInterface > -1) {", "-//          index = indexOfInterface + \"interface\".length();", "-//        }", "-//        else {", "-//          // neither index was valid", "-//          throw new ClassNameNotFoundException(\"No top level class name found\");", "-//        }", "-//      }", "-", "-      //if we make it here we have a valid index", "-", "-      //first find index of first non whitespace (from the index in document)", "-      index = getFirstNonWSCharPos(startPos + index) - startPos;", "-      if (index == -1) throw new ClassNameNotFoundException(\"No top level class name found\");", "-", "-      int endIndex = textLength; //just in case no whitespace at end of file", "-", "-      //find index of next delimiter or whitespace", "-      char c;", "-      for (int i = index; i < textLength; i++) {", "-        c = text.charAt(i);", "-        if (!Character.isJavaIdentifierPart(c)) {", "-          endIndex = i;", "-          break;", "-        }", "-      }", "-", "-      setCurrentLocation(oldLocation);", "-      return text.substring(index,endIndex);", "-    }", "-    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "-    finally { setCurrentLocation(oldLocation); }", "-  }", "+    int oldLocation = _currentLocation;", "+    readLock();", "+      try {", "+        setCurrentLocation(startPos);", "+        final int textLength = endPos - startPos;", "+        final String text = getText(startPos, textLength);", "+        ", "+        boolean done;", "+        int index;", "+        ", "+        int indexOfClass = _findKeywordAtToplevel(\"class\", text, startPos);", "+        int indexOfInterface = _findKeywordAtToplevel(\"interface\", text, startPos);", "+        int indexOfEnum = _findKeywordAtToplevel(\"enum\",text,startPos);", "+        ", "+        //If class exists at top level AND either there is no interface at top level or the index of class precedes the index of the top", "+        //level interface, AND the same for top level enum, then the class is the first top level declaration", "+        if (indexOfClass > -1 && (indexOfInterface <= -1 || indexOfClass < indexOfInterface) ", "+              && (indexOfEnum <= -1 || indexOfClass < indexOfEnum)) {", "+          index = indexOfClass + \"class\".length();", "+        }", "+        else if (indexOfInterface > -1 && (indexOfClass <= -1 || indexOfInterface < indexOfClass) ", "+                  && (indexOfEnum <= -1 || indexOfInterface < indexOfEnum)) {", "+          index = indexOfInterface + \"interface\".length();", "+        }", "+        else if (indexOfEnum > -1 && (indexOfClass <= -1 || indexOfEnum < indexOfClass)   ", "+                   && (indexOfInterface <= -1 || indexOfEnum < indexOfInterface)) {", "+          index = indexOfEnum + \"enum\".length();", "+        }", "+          // no index was valid", "+          throw new ClassNameNotFoundException(\"No top level class name found\");", "+        }", "+        //if we make it here we have a valid index", "+        ", "+        //first find index of first non whitespace (from the index in document)", "+        index = getFirstNonWSCharPos(startPos + index) - startPos;", "+        if (index == -1) throw new ClassNameNotFoundException(\"No top level class name found\");", "+        ", "+        int endIndex = textLength; //just in case no whitespace at end of file", "+        ", "+        //find index of next delimiter or whitespace", "+        char c;", "+        for (int i = index; i < textLength; i++) {", "+          c = text.charAt(i);", "+          if (!Character.isJavaIdentifierPart(c)) {", "+            endIndex = i;", "+        ", "+        setCurrentLocation(oldLocation);", "+        return text.substring(index,endIndex);", "+      catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+      finally { ", "+        setCurrentLocation(oldLocation);", "+        readUnlock();", "+      }"]}], "num": 16737}
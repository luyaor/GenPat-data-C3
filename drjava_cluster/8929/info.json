{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f685cd4d193a0f7a3d859e9f2d98ae1b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95b3218d3fe04814886392a3378ade3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/util/Utilities.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public static String getStackTrace()", "signatureAfterChange": "   public static String getStackTrace()", "diff": ["-  public static String getStackTrace() {", "-    try { throw new Exception(); } // Thread.getStackTrace() might be more efficient, but is new in Java 5.0", "-    catch (Exception e) {", "+  public static String getStackTrace() { ", "+    // TODO: Thread.getStackTrace() which is new to Java 5.0 might be more efficient", "+    try { throw new Exception(); } ", "+    catch (Exception e) {   ", "-      for(StackTraceElement ste: stes) {", "-        if (skip>0) { --skip; } else { pw.print(\"at \"); pw.println(ste); }", "+      for(StackTraceElement ste: stes) { ", "+        if (skip > 0) --skip; ", "+        else { pw.print(\"at \"); pw.println(ste); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebad55f74db9c9a758cfaf0ce9a35594", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "62576619cd7807c5f69fcfd17360a8dd0c064ad9", "commitAfterChange": "bb97cd9f73d55ae676f0ba1f2e25693ba56b3a94", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static String getStackTrace()", "signatureAfterChange": "   public static String getStackTrace()", "diff": ["-    StringWriter sw = new StringWriter();", "-    PrintWriter pw = new PrintWriter(sw);", "-    StackTraceElement[] stes = Thread.currentThread().getStackTrace();", "-    int skip = 3;", "-    for(StackTraceElement ste: stes) {", "-      if (skip>0) { --skip; } else { pw.print(\"at \"); pw.println(ste); }", "+    try { throw new Exception(); } // Thread.getStackTrace() might be more efficient, but is new in Java 5.0", "+    catch (Exception e) {", "+      StringWriter sw = new StringWriter();", "+      PrintWriter pw = new PrintWriter(sw);", "+      StackTraceElement[] stes = e.getStackTrace();", "+      int skip = 1;", "+      for(StackTraceElement ste: stes) {", "+        if (skip>0) { --skip; } else { pw.print(\"at \"); pw.println(ste); }", "+      }", "+      return sw.toString();", "-    return sw.toString();"]}], "num": 8929}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03a2fe3cb2f461de0ed443e768cdad5a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "841bd7f65cf899128b3ab1ef91c3cb00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 60, "signatureBeforeChange": "    private ObjectReference getDebugInterpreter(String interpreterName, ThreadReference threadRef)      throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                 ThreadReference threadRef)      throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-  private ObjectReference getDebugInterpreter(String interpreterName, ThreadReference threadRef) ", "-    throws InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException{", "-    int i = 0;", "-    if( printMessages ) System.out.println(\"Getting methods...\");", "-    List methods = _interpreterJVM.referenceType().methodsByName(\"getJavaInterpreter\");", "-", "-    Method m = (Method)methods.get(0);", "-    while(m.isAbstract()){", "-      ++i;", "-      m = (Method)methods.get(i);", "+   */", "+  private ObjectReference _getDebugInterpreter(String interpreterName, ", "+                                               ThreadReference threadRef) ", "+    throws InvalidTypeException, ClassNotLoadedException,", "+    IncompatibleThreadStateException, InvocationException, DebugException", "+  {", "+    if (!threadRef.isSuspended()) {", "+      throw new IllegalStateException(\"threadRef must be suspended to \" +", "+                                      \"get a debug interpreter.\");", "+    // Get the method to return the interpreter", "+    Method m = _getMethod(_interpreterJVM.referenceType(),", "+                          \"getJavaInterpreter\");", "+    ", "-    args.add(_vm.mirrorOf(interpreterName)); /** make the String a JDI Value **/", "-    if( printMessages ) System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-    if( printMessages ) System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-    ObjectReference tmpInterpreter = (ObjectReference)_interpreterJVM.invokeMethod(threadRef, m, args, ", "-                                                                                   ObjectReference.INVOKE_SINGLE_THREADED);", "+    args.add(_vm.mirrorOf(interpreterName)); // make the String a JDI Value", "+    if( printMessages ) { ", "+      System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+      System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+    }", "+    ObjectReference tmpInterpreter = (ObjectReference)", "+      _interpreterJVM.invokeMethod(threadRef, m, args, ", "+                                   ObjectReference.INVOKE_SINGLE_THREADED);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ca6b5ed7b9c5229bac563543de0433", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "b17c3d3d0edf27a5d35f38839287840198b5808d", "commitAfterChange": "80e5b2a4860b03c09786e96e9454b1209681f568", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    doc.move(lineStart - origin);  // TODO: use setCurrentLocation instead of move", "-    IndentInfo info = doc.getIndentInformation();  // TODO: revise to use getLineEnclosingBrace", "-    doc.move(origin - lineStart);  // TODO: use setCurrentLocation instead of move", "+//    doc.setCurrentLocation(lineStart);  ", "+    BraceInfo info = doc.getLineEnclosingBrace();  ", "+//    doc.setCurrentLocation(origin);  ", "-    if (! info.lineEnclosingBraceType().equals(IndentInfo.OPEN_CURLY) || info.distToLineEnclosingBrace() < 0) {  // How can distTo... be < 0?", "+    int dist = info.distance();", "+    ", "+    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || dist < 0) {  // dist < 0 means no such brace exists", "-    int bracePos = lineStart - info.distToLineEnclosingBrace();", "+    int bracePos = lineStart - dist;", "-      prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "-      char c = doc.getText(prevNonWS,1).charAt(0);", "-      for (char pchar: _prefix) if (c == pchar) return true;", "+      int loc = doc.findPrevNonWSCharPos(bracePos);", "+      char ch = doc.getText(loc,1).charAt(0);", "+      for (char pch: _prefix) if (ch == pch) return true;"]}], "num": 9710}
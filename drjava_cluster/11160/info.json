{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dcffa043ba259abdfd8db52effd5f26", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c436bbc35727d5c4af93339e574d3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "80e5b2a4860b03c09786e96e9454b1209681f568", "commitAfterChange": "fcd44b069955d5a8c8e628fd06f8d74718eca4f0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "diff": ["-    _document.clearCurrentInteraction();", "-", "-    // Insert into the document and interpret", "-    final StringBuilder buf = new StringBuilder();", "-    for (String hist: histories) {", "-      ArrayList<String> interactions = _removeSeparators(hist);", "-      for (String curr: interactions) {", "-        int len = curr.length();", "-        buf.append(curr);", "-        if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "-        buf.append(StringOps.EOL);", "+    _document.acquireWriteLock();", "+    try {", "+      _document.clearCurrentInteraction();", "+      ", "+      // Insert into the document and interpret", "+      final StringBuilder buf = new StringBuilder();", "+      for (String hist: histories) {", "+        ArrayList<String> interactions = _removeSeparators(hist);", "+        for (String curr: interactions) {", "+          int len = curr.length();", "+          buf.append(curr);", "+          if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "+          buf.append(StringOps.EOL);", "+        }", "+      append(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "-    append(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "+    finally { _document.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e9acab8b13fcf54140f0352fd3ebfe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "5523fc1c8420b6c9512186f7b1faddd6cd1960a0", "commitAfterChange": "0e447714063de4343f51d85c5c1b4138c2abd929", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void loadHistory(final FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(final FileOpenSelector selector) throws IOException", "diff": ["-    Utilities.invokeAndWait(new Runnable() {  // must run in event thread because caret is updated indivisibly", "-      public void run() {", "-        _document.clearCurrentInteraction();", "-        ", "-        // Insert into the document and interpret", "-        final StringBuilder buf = new StringBuilder();", "-        for (String hist: _histories) {", "-          ArrayList<String> interactions = _removeSeparators(hist);", "-          for (String curr: interactions) {", "-            int len = curr.length();", "-            buf.append(curr);", "-            if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "-            buf.append(StringOps.EOL);", "-          }", "-        }", "-        String text = buf.toString().trim();", "-//          System.err.println(\"Histtory is: '\" + text + \"'\");", "-        append(text, InteractionsDocument.DEFAULT_STYLE);", "-        interpretCurrentInteraction();  // Must be executed in event thread", "+    _document.clearCurrentInteraction();", "+    ", "+    // Insert into the document and interpret", "+    final StringBuilder buf = new StringBuilder();", "+    for (String hist: _histories) {", "+      ArrayList<String> interactions = _removeSeparators(hist);", "+      for (String curr: interactions) {", "+        int len = curr.length();", "+        buf.append(curr);", "+        if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "+        buf.append(StringOps.EOL);", "-    });", "-    // Wait is necessary because interpretation can only be applied after history is loaded", "+    }", "+    String text = buf.toString().trim();", "+//          System.err.println(\"Histtory is: '\" + text + \"'\");", "+    append(text, InteractionsDocument.DEFAULT_STYLE);", "+    interpretCurrentInteraction();  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27ef0e6a36b2cc1f4fdae1f8fc9520f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(final FileOpenSelector selector) throws IOException", "diff": ["-  public void loadHistory(FileOpenSelector selector) throws IOException {", "+  public void loadHistory(final FileOpenSelector selector) throws IOException {", "-    _document.acquireWriteLock();", "-    try {", "-      _document.clearCurrentInteraction();", "-      ", "-      // Insert into the document and interpret", "-      final StringBuilder buf = new StringBuilder();", "-      for (String hist: histories) {", "-        ArrayList<String> interactions = _removeSeparators(hist);", "-        for (String curr: interactions) {", "-          int len = curr.length();", "-          buf.append(curr);", "-          if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "-          buf.append(StringOps.EOL);", "+    final ArrayList<String> _histories = histories;", "+", "+    Utilities.invokeAndWait(new Runnable() {  // must run in event thread because caret is updated indivisibly", "+      public void run() {", "+        _document.acquireWriteLock();", "+        try {", "+          _document.clearCurrentInteraction();", "+          ", "+          // Insert into the document and interpret", "+          final StringBuilder buf = new StringBuilder();", "+          for (String hist: _histories) {", "+            ArrayList<String> interactions = _removeSeparators(hist);", "+            for (String curr: interactions) {", "+              int len = curr.length();", "+              buf.append(curr);", "+              if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');", "+              buf.append(StringOps.EOL);", "+            }", "+          }", "+          String text = buf.toString().trim();", "+//          System.err.println(\"Histtory is: '\" + text + \"'\");", "+          append(text, InteractionsDocument.DEFAULT_STYLE);", "+        finally { _document.releaseWriteLock(); }", "+        interpretCurrentInteraction();  // Must be executed in event thread", "-      append(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "-    }", "-    finally { _document.releaseWriteLock(); }", "-    interpretCurrentInteraction();", "+    });", "+    // Wait is necessary because interpretation can only be applied after history is loaded", "+//    System.err.println(\"Interpreting loaded history\");", "+"]}], "num": 11160}
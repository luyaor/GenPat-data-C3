{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b674912e97354feea60e338183593e0a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fcc4ad0a0eae467d7b8eac3e23887d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 129, "signatureBeforeChange": "   public static Command asCommand(final Thunk<?> thunk)", "signatureAfterChange": "   public static Runnable asRunnable(final Thunk<?> thunk)", "diff": ["-  /** @return  A command that executes the given thunk (ignoring the result) */", "-  public static Command asCommand(final Thunk<?> thunk) {", "-    return new Command() { public void run() { thunk.value(); } };", "+  /** @return  A runnable that executes the given thunk (ignoring the result) */", "+  public static Runnable asRunnable(final Thunk<?> thunk) {", "+    return new Runnable() { public void run() { thunk.value(); } };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d63cf133e7cef84f3975c9b6434cc439", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 268, "signatureBeforeChange": "   public static Runnable asRunnable(final Thunk<?> thunk)", "signatureAfterChange": "   public static Runnable asRunnable(Thunk<?> thunk)", "diff": ["-  /** @return  A runnable that executes the given thunk (ignoring the result) */", "-  public static Runnable asRunnable(final Thunk<?> thunk) {", "-    return new Runnable() { public void run() { thunk.value(); } };", "-  }", "+  /** Create a runnable that executes the given thunk (ignoring the result). */", "+  public static Runnable asRunnable(Thunk<?> thunk) { return new ThunkRunnable(thunk); }"]}], "num": 23979}
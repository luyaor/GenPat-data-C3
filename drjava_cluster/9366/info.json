{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e139a8ca7a87c8943d1d5602a89fea9c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac1f2ab5793076048544cea0a1ac5ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private boolean\t_combineCurrentAndNextIfFind(String first, String second, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private boolean\t_combineCurrentAndNextIfFind(String first, String second,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-", "-\t\t\tif (copyCursor.atStart() ||", "-\t\t\t\t\tcopyCursor.atEnd() ||", "-\t\t\t\t\tcopyCursor.atLastItem() ||", "-\t\t\t\t\t!copyCursor.current().getType().equals(first))", "-\t\t\t\treturn false;", "-", "-\t\t\tcopyCursor.next(); // move to second one to check if we can combine", "-", "-\t\t\t// The second one is eligible to combine if it exists (atLast is false),", "-\t\t\t// if it has the right brace type, and if it has no gap.", "-\t\t\tif (copyCursor.current().getType().equals(second))        ", "-\t\t\t\t{", "-\t\t\t\t\tif ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{//now pointing to //", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// delete first Gap and augment the second", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tint growth = copyCursor.current().getSize();", "-\t\t\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\t\t\tcopyCursor.current().grow(growth);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// the backslash examples.", "-\t\t\t\t\t// \\-\\\\", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} // \\-\\\"", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\"\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-// delete the first Brace and augment the second", "-\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\tcopyCursor.current().setType(first + second);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-", "-\t\t\t// we couldn't combine, so move back and return", "-\t\t\tcopyCursor.prev();", "-\t\t\treturn false;", "-\t\t}", "+  private boolean  _combineCurrentAndNextIfFind", "+    (String first, ", "+     String second, ", "+     ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atStart() ||", "+        copyCursor.atEnd() ||", "+        copyCursor.atLastItem() ||", "+        !copyCursor.current().getType().equals(first))", "+    {", "+      return false;", "+    }", "+    copyCursor.next(); // move to second one to check if we can combine", "+    ", "+    // The second one is eligible to combine if it exists (atLast is false),", "+    // if it has the right brace type, and if it has no gap.", "+    if (copyCursor.current().getType().equals(second)) {", "+      if ((copyCursor.current().getType().equals(\"//\"))&&", "+          (copyCursor.prevItem().getType().equals(\"*\")))", "+      { // now pointing to", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"*\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"//\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\")))", "+     {", "+       // delete first Gap and augment the second", "+       copyCursor.prev();", "+       int growth = copyCursor.current().getSize();", "+       copyCursor.remove();", "+       copyCursor.current().grow(growth);", "+       return true;", "+     }", "+      // the backslash examples.", "+      // \\-\\\\", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\\\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      } // \\-\\\"", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\"\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      // delete the first Brace and augment the second", "+      copyCursor.prev();", "+      copyCursor.remove();", "+      copyCursor.current().setType(first + second);", "+      return true;", "+    }", "+    ", "+    // we couldn't combine, so move back and return", "+    copyCursor.prev();", "+    return false;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cc59ac9d8e60eff431316d049bc0898", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private boolean\t_combineCurrentAndNextIfFind(String first, String second, \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-  private boolean\t_combineCurrentAndNextIfFind(String first, String second,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator copyCursor)", "-\t\t{", "-", "-\t\t\tif (copyCursor.atStart() ||", "-\t\t\t\t\tcopyCursor.atEnd() ||", "-\t\t\t\t\tcopyCursor.atLastItem() ||", "-\t\t\t\t\t!copyCursor.current().getType().equals(first))", "-\t\t\t\treturn false;", "-", "-\t\t\tcopyCursor.next(); // move to second one to check if we can combine", "-", "-\t\t\t// The second one is eligible to combine if it exists (atLast is false),", "-\t\t\t// if it has the right brace type, and if it has no gap.", "-\t\t\tif (copyCursor.current().getType().equals(second))        ", "-\t\t\t\t{", "-\t\t\t\t\tif ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{//now pointing to //", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"*\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"/*\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"*\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"//\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"/\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"/\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"//\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\"))&&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\t// delete first Gap and augment the second", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tint growth = copyCursor.current().getSize();", "-\t\t\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\t\t\tcopyCursor.current().grow(growth);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// the backslash examples.", "-\t\t\t\t\t// \\-\\\\", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t} // \\-\\\"", "-\t\t\t\t\telse if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "-\t\t\t\t\t\t\t\t\t (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\"\");", "-\t\t\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\t\t\tcopyCursor.current().setType(\"\\\\\\\\\");", "-\t\t\t\t\t\t\tcopyCursor.current().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\treturn true;", "-\t\t\t\t\t\t}", "-// delete the first Brace and augment the second", "-\t\t\t\t\tcopyCursor.prev();", "-\t\t\t\t\tcopyCursor.remove();", "-\t\t\t\t\tcopyCursor.current().setType(first + second);", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-", "-\t\t\t// we couldn't combine, so move back and return", "-\t\t\tcopyCursor.prev();", "-\t\t\treturn false;", "-\t\t}", "+  private boolean  _combineCurrentAndNextIfFind", "+    (String first, ", "+     String second, ", "+     ModelList<ReducedToken>.Iterator copyCursor)", "+  {", "+    if (copyCursor.atStart() ||", "+        copyCursor.atEnd() ||", "+        copyCursor.atLastItem() ||", "+        !copyCursor.current().getType().equals(first))", "+    {", "+      return false;", "+    }", "+    copyCursor.next(); // move to second one to check if we can combine", "+    ", "+    // The second one is eligible to combine if it exists (atLast is false),", "+    // if it has the right brace type, and if it has no gap.", "+    if (copyCursor.current().getType().equals(second)) {", "+      if ((copyCursor.current().getType().equals(\"//\"))&&", "+          (copyCursor.prevItem().getType().equals(\"*\")))", "+      { // now pointing to", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"*\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"*\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"//\")) &&", "+               (copyCursor.prevItem().getType().equals(\"/\")))", "+      {", "+        copyCursor.current().setType(\"/\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"//\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      else if ((copyCursor.current().getType().equals(\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\")))", "+     {", "+       // delete first Gap and augment the second", "+       copyCursor.prev();", "+       int growth = copyCursor.current().getSize();", "+       copyCursor.remove();", "+       copyCursor.current().grow(growth);", "+       return true;", "+     }", "+      // the backslash examples.", "+      // \\-\\\\", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\\\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      } // \\-\\\"", "+      else if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "+               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "+      {", "+        copyCursor.current().setType(\"\\\"\");", "+        copyCursor.prev();", "+        copyCursor.current().setType(\"\\\\\\\\\");", "+        copyCursor.current().setState(ReducedToken.FREE);", "+        return true;", "+      }", "+      // delete the first Brace and augment the second", "+      copyCursor.prev();", "+      copyCursor.remove();", "+      copyCursor.current().setType(first + second);", "+      return true;", "+    }", "+    ", "+    // we couldn't combine, so move back and return", "+    copyCursor.prev();", "+    return false;", "+  }"]}], "num": 9366}
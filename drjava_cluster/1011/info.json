{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d66d68245e54863e20fe49651aee629e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "695e03fedf195f1bc5a10a546eeccc4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                 ObjectReference debugInterpreter,                                String name, Value val)      throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "signatureAfterChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                 ObjectReference debugInterpreter,                                String name, Value val)      throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "diff": ["-    List args = new LinkedList();", "-    args.add(_vm.mirrorOf(name));", "-    args.add(val);", "-    /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "-    debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args, ", "-                                  ObjectReference.INVOKE_SINGLE_THREADED);", "+    // invokeMethod would throw an ObjectCollectedException if the StringReference ", "+    // declared by _vm.mirrorOf(name) had been garbage collected before ", "+    // invokeMethod could execute. This happened infrequently so by trying this", "+    // multiple times, the chance of failure each time should be acceptably low.", "+     ", "+    int tries = 0;", "+    while (tries < MAXINVOKETRIES) {", "+      List args = new LinkedList();", "+      args.add(_vm.mirrorOf(name));", "+      args.add(val);", "+      ", "+      /* System.out.println(\"Calling \" + method2Call.toString() + \"with \" + args.get(0).toString()); */", "+      try {", "+        debugInterpreter.invokeMethod(suspendedThreadRef, method2Call, args, ", "+                                      ObjectReference.INVOKE_SINGLE_THREADED);", "+        return;", "+      }", "+      catch (ObjectCollectedException oce) {", "+        tries++;", "+      }", "+    }", "+    throw new DebugException(\"The variable: \" + name + \" could not be defined in the debug interpreter\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7bb8926d8850a34b6ae1309664e7328", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e783b76611d7e152e89196e486dc2b772b1c80a9", "commitAfterChange": "b796c376864058d232f1be02ccfb0bd7548b3f89", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 79, "signatureBeforeChange": "      private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "      private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["+  ", "-    List args = new LinkedList();", "-    args.add(_vm.mirrorOf(var.name()));", "-    Value v = interpreter.invokeMethod(thread, method2Call, args,", "-                                       ObjectReference.INVOKE_SINGLE_THREADED);", "+    Value v = null;", "+    ", "+    // invokeMethod would throw an ObjectCollectedException if the StringReference", "+    // declared by _vm.mirrorOf(name) had been garbage collected before", "+    // invokeMethod could execute. This happened infrequently so by trying this", "+    // multiple times, the chance of failure each time should be acceptably low.", "+    int tries = 0;", "+    while (tries < MAXINVOKETRIES) {", "+      try {", "+        List args = new LinkedList();", "+        args.add(_vm.mirrorOf(var.name()));", "+        v = interpreter.invokeMethod(thread, method2Call, args,", "+                                           ObjectReference.INVOKE_SINGLE_THREADED);", "+        break;", "+      }", "+      catch (ObjectCollectedException oce) {", "+        if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "+        tries++;      ", "+      }", "+    }"]}], "num": 1011}
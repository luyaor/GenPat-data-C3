{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9877224ab9407f6e3ebd1ae8e7e960ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "813aa3d817fe8fd28c62e8bf8431051b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 22, "signatureBeforeChange": "          public void testLookupFromClassesToBeParsed()", "signatureAfterChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName)", "diff": ["+    * searches imported files, primitive types, as well as types in the symbol table. */", "+  protected SymbolData getQualifiedSymbolData(String qualClassName) {", "+    return getQualifiedSymbolData(qualClassName, SourceInfo.NO_INFO);", "+  }", "-    public void testLookupFromClassesToBeParsed() {", "-      // Create a ClassDef.  Recreate the ClassOrInterfaceType for Object instead of using ", "-      // JExprParser.NO_TYPE since otherwise the ElementaryVisitor will complain that the", "-      // user must explicitly extend Object.", "-      ClassDef cd = ", "-        new ClassDef(SourceInfo.NO_INFO, _publicMav, ", "-                     new Word(SourceInfo.NO_INFO, \"Lisa\"),", "-                     new TypeParameter[0], ", "-                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                     new ReferenceType[0], ", "-                     new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      ", "-      // Use a ElementaryVisitor so lookupFromClassesToBeParsed will actually visit the ClassDef.", "-      IntermediateVisitor bv = new IntermediateVisitor(new File(\"\"), ", "-                                                       errors, ", "-                                                       continuations, ", "-                                                       new LinkedList<Pair<LanguageLevelVisitor, SourceFile>>());", "-      ", "-      // Test that passing resolve equals false returns a continuation.", "-      assertTrue(\"Should return a continuation\", ", "-                 testLLVisitor._lookupFromClassesToBeParsed(\"Lisa\", SourceInfo.NO_INFO, false).isContinuation());", "-      // Put Lisa in the hierarchy and test that there is one error and that the message", "-      // says that there is cyclic inheritance.", "-//      _hierarchy.put(\"Lisa\", cd);", "-//      _classesToBeParsed.put(\"Lisa\", new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv));", "-//      assertEquals(\"Should return null because Lisa is in the hierarchy\", ", "-//                   null,", "-//                   _llv._lookupFromClassesToBeParsed(\"Lisa\", SourceInfo.NO_INFO, true));", "-//      assertEquals(\"Should be one error\", 1, errors.size());", "-//      assertEquals(\"Error message should be correct\", \"Cyclic inheritance involving Lisa\", errors.get(0).getFirst());", "-//      _hierarchy.remove(\"Lisa\");", "-      //Re-add Lisa because the first call with resolve set to true removed it and", "-      // test that Lisa is actually visited and added to the symbolTable.", "-      testLLVisitor._classesToBeParsed.put(\"Lisa\", new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv));", "-      assertFalse(\"Should return a non-continuation\", ", "-                  testLLVisitor._lookupFromClassesToBeParsed(\"Lisa\", ", "-                                                    SourceInfo.NO_INFO,", "-                                                    true).isContinuation());", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3cbe99717f124e583fbf728e7eb9eb7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "          public void testGetSymbolData()", "signatureAfterChange": "          public void testGetSymbolData()", "diff": ["-      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      _btc.getSymbolData(\"koala\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "+      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, ", "+                   _btc.getSymbolData(\"zebra\", NULL_LITERAL, true, true));", "+      assertEquals(\"Should get sd from the Symboltable.\", sd, ", "+                   _btc.getSymbolData(\"java.lang.Object\", NULL_LITERAL, true, true));", "+      _btc.getSymbolData(\"koala\", NULL_LITERAL, true, true);", "-      _btc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "+      _btc.getSymbolData(\"java.lang.Object\", NULL_LITERAL, true, true);", "-      assertEquals(\"Error message should be correct\", \"The class java.lang.Object is not in the right package. Perhaps you meant to package it?\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class java.lang.Object is not in the right package. Perhaps you meant to package it?\",", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", NULL_LITERAL, true, ", "+                                                                  true));", "-      assertEquals(\"Error message should be correct\", \"java.lang.Thread implements the Runnable interface, which is not allowed at any language level\", errors.get(1).getFirst());", "+      assertEquals(\"Error message should be correct\", \"java.lang.Thread implements the Runnable interface, \" +", "+                   \"which is not allowed at any language level\", errors.get(1).getFirst());", "-      //a class that implements Runnable, but was not user defined and is not one of our specific classes known to extend Runnable will", "-      //not give an error", "+      // a class that implements Runnable, but was not user defined and is not one of our specific classes known to ", "+      // extend Runnable will not give an error", "-      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", NULL_LITERAL, ", "+                                                                        true, true));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, ", "+                                                                        NULL_LITERAL));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, ", "+                                                                        NULL_LITERAL));", "-      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, NULL_LITERAL));", "+      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, NULL_LITERAL));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, NULL_LITERAL));", "+      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, NULL_LITERAL));", "+      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, NULL_LITERAL));", "-                    new NullLiteral(SourceInfo.NO_INFO));", "+                    NULL_LITERAL);", "-      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, NULL_LITERAL));"]}], "num": 13056}
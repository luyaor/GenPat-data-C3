{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc83e30b2c722ccdb231c0d0542f644c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "428f37c9b94c7040957c1afa8deb2b39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "signatureAfterChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "diff": ["+        Type type;", "+        if (val != null) {", "+          type = val.type();", "+        }", "+        else {", "+          try {", "+            type = localVar.type();", "+          }", "+          catch(ClassNotLoadedException e) {", "+            List classes = _vm.classesByName(localVar.typeName());", "+            if (!classes.isEmpty()) {", "+              type = (Type)classes.get(0);", "+            }", "+            else {", "+              type = null;", "+            }", "+          }", "+        }", "-                        localVar.name(), val);", "+                        localVar.name(), val, type);", "-                        \"this\", thisVal);", "+                        \"this\", thisVal, thisVal.type());", "+      if (printMessages) {", "+        System.out.println(\"setting active interpreter\");", "+      }", "+      if (printMessages) {", "+        System.out.println(\"got active interpreter\");", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c969da9f0988f4b24be53bf8042f8903", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e783b76611d7e152e89196e486dc2b772b1c80a9", "commitAfterChange": "b796c376864058d232f1be02ccfb0bd7548b3f89", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["-", "-          // If we don't find it here, loop through any enclosing classes", "-          //  Start at this$N, where N is the number of dollar signs in", "-          //  the reference type's name, minus one.", "-          int outerIndex = numDollars - 1;", "-          Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-          while ((field == null) && (outerThis != null)) {", "-            outer = (ObjectReference) outer.getValue(outerThis);", "-            outerRt = outer.referenceType();", "-            field = outerRt.fieldByName(currName);", "+          ", "+          if (obj != null) {", "+            // We're not in a static context", "-            if (field == null) {", "-              // Enter the loop again with the next outer enclosing class", "-              outerIndex--;", "-              outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+            // If we don't find it in this class, loop through any enclosing ", "+            // classes. Start at this$N, where N is the number of dollar signs in", "+            // the reference type's name, minus one.", "+            int outerIndex = numDollars - 1;", "+            Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+            while ((field == null) && (outerThis != null)) {", "+              outer = (ObjectReference) outer.getValue(outerThis);", "+              outerRt = outer.referenceType();", "+              field = outerRt.fieldByName(currName);", "+              ", "+              if (field == null) {", "+                // Enter the loop again with the next outer enclosing class", "+                outerIndex--;", "+                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+              }", "+            }", "+          }", "+          else {", "+            // We're in a static context", "+            ", "+            // If we don't find it in this class, loop through any enclosing", "+            // classes. Do this by loading any outer classes by invoking the ", "+            // method on the class loader that loaded this class and passing", "+            // it the class name with the last class removed each time.", "+            String rtClassName = outerRt.name();", "+            int index = rtClassName.lastIndexOf(\"$\");", "+            while ((field == null) && (index != -1)) {", "+              rtClassName = rtClassName.substring(0, index);", "+              List l = _vm.classesByName(rtClassName);", "+              if (l.isEmpty()) {", "+                // field is null, we will end up setting", "+                // the value to no value", "+                break;", "+              }", "+              outerRt = (ReferenceType)l.get(0);", "+              field = outerRt.fieldByName(currName);", "+              ", "+              if (field == null) {", "+                // Enter the loop again with the next outer enclosing class", "+                index = rtClassName.lastIndexOf(\"$\");", "+              }"]}], "num": 4557}
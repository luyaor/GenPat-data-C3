{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68318448345a14ecbb9563cb6de21e04", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0ac002074060789faba94fc34aeac3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "commitAfterChange": "0a07e9e014b16c2f39cd8c33e92a5be46fcf341e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "signatureAfterChange": "      public void testLookupMethod()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException", "diff": ["-      m = lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class});", "+      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class});", "-      m = lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class, int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(Integer.class, \"toString\", new Class[]{Integer.class, int.class, int.class});", "-    m = lookupMethod(LinkedList.class, \"add\", pTypes);", "+    m = ReflectionUtilities.lookupMethod(LinkedList.class, \"add\", pTypes);", "-    TigerUtilities.resetVersion();", "-    TigerUtilities.assertTigerEnabled(\"1.5 needed for this UnitTest\");", "+    TigerUtilities.setTigerEnabled(true);", "-    m = lookupMethod(Vector.class, \"add\", new Class[]{int.class});", "+    m = ReflectionUtilities.lookupMethod(Vector.class, \"add\", new Class[]{int.class});", "-    m = lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class, Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test\", new Class[]{int.class, int.class, Integer.class});", "+    // test0(1) -> test0(int)", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test0\", new Class[]{int.class});", "+    assertEquals(\"Wrong number of arguments chosen for test0: \" + m, 1, m.getParameterTypes().length);", "+    result = ((Integer)m.invoke(null, new Object[]{ONE})).intValue();", "+    assertEquals(\"lookup with test0 found wrong method\", TestClass.test0(1), result);", "+    ", "-      m = lookupMethod(TestClass.class, \"test1\", new Class[]{int.class, int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test1\", new Class[]{int.class, int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test2\", new Class[]{int.class, int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test2\", new Class[]{int.class, int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test3\", new Class[]{int.class, int.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test3\", new Class[]{int.class, int.class});", "-    m = lookupMethod(TestClass.class, \"test4\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test4\", new Class[]{Integer.class});", "-    m = lookupMethod(TestClass.class, \"test5\", new Class[]{Integer.class});", "+    m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class[]{Integer.class});", "-      m = lookupMethod(TestClass.class, \"test5\", new Class[]{int.class, int.class});", "+      m = ReflectionUtilities.lookupMethod(TestClass.class, \"test5\", new Class[]{int.class, int.class});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a56d4762cf6fa3e94d3d7eaab4767ea7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "01c62517d281ffc6534fc475329bd814c0e2c112", "commitAfterChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 68, "signatureBeforeChange": "      @Override public void started(InterpreterJVMRemoteI i)", "signatureAfterChange": "      @Override public void started(InterpreterJVMRemoteI i)", "diff": ["-        Boolean allowAccess = DrJava.getConfig().getSetting(OptionConstants.ALLOW_PRIVATE_ACCESS);", "-        try { i.setPrivateAccessible(allowAccess); }", "+        boolean enforceAllAccess = DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL)", "+          .equals(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL_CHOICES.get(2)); // \"all\"", "+        try { i.setEnforceAllAccess(enforceAllAccess); }", "+        ", "+        boolean enforcePrivateAccess = !DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL)", "+          .equals(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL_CHOICES.get(0)); // not \"none\"", "+        try { i.setEnforcePrivateAccess(enforcePrivateAccess); }", "+        catch (RemoteException re) { _handleRemoteException(re); }", "+        ", "+        Boolean requireSemicolon = DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_REQUIRE_SEMICOLON);", "+        try { i.setRequireSemicolon(requireSemicolon); }", "+        catch (RemoteException re) { _handleRemoteException(re); }", "+        ", "+        Boolean requireVariableType = DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_REQUIRE_VARIABLE_TYPE);", "+        try { i.setRequireVariableType(requireVariableType); }", "+        catch (RemoteException re) { _handleRemoteException(re); }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b14757e38b2090c3b383a306acd729c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "f0e93e8f70d74090c83524f565ab98d73710c2e7", "commitAfterChange": "cea95770b041dbb7494d9ea4d762c8077631d283", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+    ", "+    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "+", "+    _updateMachine();", "+    ", "-    _matchCase = new JCheckBox(\"Match Case\", true);", "+    _matchCase = new JCheckBox(\"Match Case\", DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "+    _machine.setMatchCase(DrJava.getConfig().getSetting(OptionConstants.FIND_MATCH_CASE));", "-    _searchBackwards = new JCheckBox(\"Search Backwards\", false);", "+    _searchBackwards = new JCheckBox(\"Search Backwards\", DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "+    _machine.setSearchBackwards(DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "-    _searchAllDocuments = new JCheckBox(\"Search All Documents\", false);", "+    _searchAllDocuments = new JCheckBox(\"Search All Documents\", DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "+    _machine.setSearchAllDocuments(DrJava.getConfig().getSetting(OptionConstants.FIND_ALL_DOCUMENTS));", "-    _matchWholeWord = new JCheckBox(\"Whole Word\");// new JRadioButton(\"Whole Word\"); // JL", "+    _matchWholeWord = new JCheckBox(\"Whole Word\", DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD));// new JRadioButton(\"Whole Word\"); // JL", "+    if(DrJava.getConfig().getSetting(OptionConstants.FIND_WHOLE_WORD)){", "+      _machine.setMatchWholeWord();", "+    }else{", "+      _machine.setFindAnyOccurrence();", "+    }", "-", "-    _machine = new FindReplaceMachine(_model.getDocumentIterator());"]}], "num": 24217}
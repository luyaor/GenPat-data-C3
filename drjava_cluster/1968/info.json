{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcba8a3e3b17558752408f6c5229f4d0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c4cee065666501746efb29f5575198", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "           public void testForInnerInterfaceDef()", "signatureAfterChange": "           public void testForInnerInterfaceDef()", "diff": ["-       assertEquals(\"There should be no errors\", 0, errors.size());", "+       assertEquals(\"There should be one error\", 1, errors.size());", "+       assertEquals(\"The error message should be correct\", ", "+                   \"Local interfaces are illegal in Java.\", errors.get(0).getFirst());", "+       SymbolData innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"Broken\");", "+       assertNull(\"Should NOT have a inner interface named Broken\", innerInterface);", "-       SymbolData obj = new SymbolData(\"java.lang.Object\");", "-       LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-       assertEquals(\"There should be no errors\", 0, errors.size());", "-       SymbolData innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"RodInterface\");", "-       assertNotNull(\"Should have a inner interface named RodInterface\", innerInterface);", "+       assertEquals(\"There should be 2 errors\", 2, errors.size());", "+       assertEquals(\"The error message should be correct\", ", "+                    \"Local interfaces are illegal in Java.\", errors.get(1).getFirst());", "+       innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"RodInterface\");", "+       assertNull(\"Should NOT have a inner interface named RodInterface\", innerInterface);", "-      assertEquals(\"There should be no errors\", 0, errors.size());  // class modifiers are allowed", "+      assertEquals(\"There should be three errors\", 3, errors.size());  // class modifiers are allowed", "+      assertEquals(\"The error message should be correct\", ", "+                   \"Local interfaces are illegal in Java.\", errors.get(2).getFirst());", "+      innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"Todd\");", "+      assertNull(\"Should NOT have a inner interface named Todd\", innerInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f34ddddcef0e15018032db86c98d5f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "          public void testGetInnerClassOrInterface()", "signatureAfterChange": "          public void testGetInnerClassOrInterface()", "diff": ["-      ", "-      //one level can be found", "+      // One level can be found", "-      //dollars or dots are okay, and nested inner classes can be found", "+      // Dollars or dots are okay, and nested inner classes can be found", "-      //dollars or dots are okay, and nested inner classes can be found", "+      // Dollars or dots are okay, and nested inner classes can be found", "-      //null is returned when a non-present inner class is looked for.", "+      // null is returned when a non-present inner class is looked for.", "-      ", "-      //one level can be found", "+      // One level can be found", "-      ", "-      assertEquals(\"Should return SymbolData.AMBIGUOUS_REFERENCE\", SymbolData.AMBIGUOUS_REFERENCE, me.getInnerClassOrInterface(\"MyInner\"));", "+      assertEquals(\"Should return SymbolData.AMBIGUOUS_REFERENCE\", SymbolData.AMBIGUOUS_REFERENCE, ", "+                   me.getInnerClassOrInterface(\"MyInner\"));", "-      //Test a case where the inner class is private in one, but not the other", "+      // Test a case where the inner class is private in one, but not the other", "-      //Test a case where the inner class is private in both--returns one of them", "+      // Test a case where the inner class is private in both--returns one of them", "-      //Test a case where the inner most class is private, but one layer is public", "+      // Test a case where the inner most class is private, but one layer is public", "-      assertEquals(\"Should return innerInterfaceInner\", innerInterfaceInner, me.getInnerClassOrInterface(\"MyInner.Inner\"));", "+      assertEquals(\"Should return innerInterfaceInner\", innerInterfaceInner, ", "+                   me.getInnerClassOrInterface(\"MyInner.Inner\"));", "+      ", "+      System.err.println(\"testGetInnerClassOrInterface finished\");"]}], "num": 1968}
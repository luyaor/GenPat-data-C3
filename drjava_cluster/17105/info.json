{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e147ff4ffb31aa6a2db11f6d70d97667", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1561b1c456dd1140bf12c77a0b22ec20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JUnitErrorModel(DefinitionsDocument doc, JUnitError[] errors)", "signatureAfterChange": "   public JUnitErrorModel(JUnitError[] errors, GlobalModel model, boolean testsHaveRun)", "diff": ["-  public JUnitErrorModel(DefinitionsDocument doc, JUnitError[] errors) {", "-    _document = doc;", "-    _testsHaveRun = true;", "-    _numErrors = errors.length;", "-    try {", "-      _file = doc.getFile();", "-    }", "-    catch (FileMovedException fme) {", "-      // Recover, even though file was deleted", "-      _file = fme.getFile();", "-    }", "-    catch (IllegalStateException ise) {", "-      _file = null;", "-    }", "-    ", "-    //Create the array of errors and failures, ordered by line number", "-    ", "-    /* while ( (i < errors.length) && ( (tFail != null) || (tErr != null) ) ) {", "-     ", "-      if ( (jFail != null) && ( (jErr == null) || (jFail.lineNumber() < jErr.lineNumber()) ) ) {", "-        errors[i] = jFail;", "-        System.out.println(jFail.lineNumber());", "-        if (failures.hasMoreElements()) {", "-          tFail = (TestFailure)failures.nextElement();", "-          jFail = _makeJUnitError(tFail, theclass, false);", "-        }", "-        else {", "-          tFail = null;", "-          jFail = null;", "-        }", "-      }", "-      ", "-      else if ( (jErr != null) && ( (jFail == null) || (jErr.lineNumber() <= jFail.lineNumber()) ) ) {", "-        errors[i] = jErr;", "-        System.out.println(jErr.lineNumber());", "-        if (errEnum.hasMoreElements()) {", "-          tErr = (TestFailure)errEnum.nextElement();", "-          jErr = _makeJUnitError(tErr, theclass, true);", "-        }", "-        else {", "-          tErr = null;", "-          jErr = null;", "-        }", "-      }", "-       ", "-      i++;", "-    }*/", "-   ", "-    _groupErrors(errors);", "+  public JUnitErrorModel(JUnitError[] errors, GlobalModel model, boolean testsHaveRun) {", "+    super(errors, model);", "+    _testsHaveRun = testsHaveRun;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e11fb407b39cdf28c46a678f2d2ac62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDABreakpoint.java", "commitBeforeChange": "9297bd3255995599281a9a548fcd6e849eecaf7b", "commitAfterChange": "b8d26b54d9d0d791e5e97a6dd352ae0f9f5f3b20", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JPDABreakpoint(OpenDefinitionsDocument doc, int offset, int lineNumber, boolean isEnabled, JPDADebugger manager)     throws DebugException", "signatureAfterChange": "   public JPDABreakpoint(OpenDefinitionsDocument doc, int offset, boolean isEnabled, JPDADebugger manager)     throws DebugException", "diff": ["-  public JPDABreakpoint(OpenDefinitionsDocument doc, int offset, int lineNumber, boolean isEnabled, JPDADebugger manager)", "+  public JPDABreakpoint(OpenDefinitionsDocument doc, int offset, boolean isEnabled, JPDADebugger manager)", "-    _lineNumber = lineNumber;", "-    ", "-    try {", "-      _startPos = doc.createPosition(_doc._getLineStartPos(offset));", "-      _endPos = doc.createPosition(_doc._getLineEndPos(offset));", "-    }", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    update();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c3177f894e2c9b30ea094956fb6612", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "328f627f0b6ac099c1b27f12b1572d901deb00c4", "commitAfterChange": "8907059ef43f15e7b338686159e3333fd997b238", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public FindReplaceMachine(Document doc, int position)      throws BadLocationException", "signatureAfterChange": "   public FindReplaceMachine()", "diff": ["-  public FindReplaceMachine(Document doc, int position) ", "-    throws BadLocationException", "-  {", "-    // we have to put this in here because createPosition", "-    // will not catch these cases for us.  Better safe than", "-    // sorry, and we shouldn't have to deal later with positions", "-    // that are not within the bounds of the document.", "-    if ((position < 0) ||", "-        (position > doc.getLength())) ", "-    {", "-      throw new BadLocationException(\"position outside document bounds\",", "-                                     position);", "-    }", "-    _doc = doc;", "-    _start = _doc.createPosition(position);", "-    _current = _doc.createPosition(position);", "+   */", "+  public FindReplaceMachine() {"]}], "num": 17105}
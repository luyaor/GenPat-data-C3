{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b00f8cd5a91c251ccad4f0b1105e2b28", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e331c27c28931c0f9c16733d8f29f86", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceOnPrevLine.java", "commitBeforeChange": "33157731339c994882aa1f63ed4a691707c328ca", "commitAfterChange": "fa574fcc12a57f48a5de7be234043f4f78711418", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    ", "+      ", "+      ", "+    int distToBrace = info.distToBrace;", "+      ", "+    // If there is no brace, s.th. went wrong!", "+      ", "+    if (distToBrace == -1) ", "+      throw new UnexpectedException(new RuntimeException(\"Precondition for QuestionBraceOnPrevLine \" +", "+\t\t\t\t\t\t\t \"not met: there is no brace.\"));", "-    //info.distToPrevNewline;    //______|\\n_____x___", "-    //info.distToNewline;        //______\\n|____{_____x___", "-    //info.distToBrace;          //______|{_____x___", "+    int distToNewline = info.distToPrevNewline;", "-    return true;", "+    // If we are on the first line of the document,", "+    // then there is no previous line. If the brace", "+    // is on the same line, we return false.", "+    ", "+    if (distToNewline == -1 || distToNewline > distToBrace) return false;", "+    ", "+    int location = doc.getCurrentLocation();", "+    String text;", "-    /*", "-     * pos := START", "-     * counter := 0", "-     *", "-     * while (pos > DOCSTART)   ", "-     *    if char[pos] = '{' ", "-     *       return (counter = 1)     [if pos is not in // comment!!]", "-     *  ", "-     *    else if char[pos] = '\\n'", "-     *       counter := counter + 1", "-     *       pos := pos - 1", "-     *", "-     * return false", "-     *", "-     */", "+    try", "+    {", "+      text = doc.getText(location-distToBrace+1, distToBrace-distToNewline-2);", "+    }", "+    catch (BadLocationException e)", "+    {", "+      throw new UnexpectedException(new RuntimeException(\"doc.getText() failed.\"));", "+    }", "+", "+    // There should be no further '\\n' between our newline and ", "+    // our brace for this rule to apply.", "+ ", "+    for(int i = distToBrace-distToNewline-3; i >= 0; i--)", "+    {", "+      if (text.charAt(i) == '\\n') return false;", "+    }", "+    return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ca0547aae9b936d11e9a215320a7ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceOnPrevLine.java", "commitBeforeChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "commitAfterChange": "0d293f065df295b40875d176fa985aae8404680f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented!\");", "+    IndentInfo info = doc.getReduced().getIndentInformation();", "+    //info.distToPrevNewline;    //______|\\n_____x___", "+    //info.distToNewline;        //______\\n|____{_____x___", "+    //info.distToBrace;          //______|{_____x___", "+    ", "+    return true;", "+", "-    * pos := START", "-    * counter := 0", "-    *", "-    * while (pos > DOCSTART)   ", "-    *    if char[pos] = '{' ", "-    *       return (counter = 1)     [if pos is not in // comment!!]", "-    *  ", "-    *    else if char[pos] = '\\n'", "-    *       counter := counter + 1", "-    *       pos := pos - 1", "-    *", "-    * return false", "-    *", "-    */", "+     * pos := START", "+     * counter := 0", "+     *", "+     * while (pos > DOCSTART)   ", "+     *    if char[pos] = '{' ", "+     *       return (counter = 1)     [if pos is not in // comment!!]", "+     *  ", "+     *    else if char[pos] = '\\n'", "+     *       counter := counter + 1", "+     *       pos := pos - 1", "+     *", "+     * return false", "+     *", "+     */"]}], "num": 4481}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78ce18b5a18ea812b54b310e22c217ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "078fa6aa5199973f3810d6d2cd4ba056", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d0676f5bb147afbea8208cddab28a86ea8a71ce1", "commitAfterChange": "554902896b1f96c3839ea73c44260e0ca63ab535", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public ClassPathVector getClassPath()", "signatureAfterChange": "   public ClassPathVector getClassPath()", "diff": ["-//        ClassPathVector classPath = new ClassPathVector(strClassPath.size() + _startupClassPathVector.size());", "-        ", "-        classPath.addAll(_startupClassPathVector);", "-        //        for(int i = 0; i < _startupClasspathVector.size(); i++) {", "-        //          classpath.addElement(_startupClasspathVector.elementAt(i));", "-        //        }", "-        //        Vector<String> augmentedClasspath = _interpreterJVM().getAugmentedClasspath();", "-        //        for(int i = 0; i < augmentedClasspath.size(); i++) {", "-        //          classpdElement(augmentedClasspath.ementAt(i));", "-        //        }", "+        for (File f : _startupClassPath) {", "+          try { classPath.add(FileOps.toURL(f)); }", "+          catch (MalformedURLException e) { /* just ignore bad classpath entry */ }", "+        }", "-      catch (RemoteException re) { _threwException(re); }", "+      catch (RemoteException re) { _threwException(re); return new ClassPathVector(); }", "-    return new ClassPathVector();", "+    else { return new ClassPathVector(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da3dad8886f3cbee08e07cd954817389", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    private void _parseStartupClasspath()", "signatureAfterChange": "      private void _parseStartupClasspath()", "diff": ["-", "+  ", "-    _startupClasspathVector = new Vector<String>();", "+    _startupClasspathVector = new Vector<URL>();", "-      _startupClasspathVector.add(_startupClasspath.substring(lastIndex, index));", "+      try{", "+        _startupClasspathVector.add(new File(_startupClasspath.substring(lastIndex, index)).toURL());", "+      }catch(MalformedURLException murle){", "+        // just don't add bad classpath entry", "+      }", "-    _startupClasspathVector.add(_startupClasspath.substring(lastIndex, index));", "+    try{", "+      _startupClasspathVector.add(new File(_startupClasspath.substring(lastIndex, index)).toURL());", "+    }catch(MalformedURLException murle){", "+      // fail silently if the classpath entry is bad", "+    }"]}], "num": 23151}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7db798447dd9641f363214e395036858", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c357d2f25d814a678077ba9b2a493089", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "1e77c64ba83c36855cc971f17dd702002ed1f841", "commitAfterChange": "7f1dfe0049dc6481ecb6545fa089b139bb9c72af", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void updateLines(R firstRegion, R lastRegion)", "signatureAfterChange": "   public void updateLines(R firstRegion, R lastRegion)", "diff": ["-/* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();", "+    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();", "-    /* Get the tailSet consisting of the ordered set of regions >= r. */", "+    /* Get the tailSet consisting of the ordered set of regions >= firstRegion. */", "-    if (tail.size() == 0) return;", "+    if (tail.size() == 0) return; // tail can be empty if firstRegion is a constructed DocumentRegion", "-    // tail can be empty if r is a constructed DocumentRegion", "+      region.update();  // The bounds of this region must be recomputed.", "-      else region.update();  // The bounds of this region must be recomputed.", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa470b922b833fbed8890f9590ffc06f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "5e007ed2a02c59f9c5f0ddad6c5fd3c21d5bb370", "commitAfterChange": "098248186c2cd94be6c7bc9bfe60fa3101b5a0ba", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void updateLines(R region)", "signatureAfterChange": "   public void updateLines(R r)", "diff": ["-  /** Updates _lineStartPos, _lineEndPos in regions following (and including) r.   Assumes this contains r. */", "-  public void updateLines(R region) { ", "+    * necessarily a region in this manager.  */", "+  public void updateLines(R r) { ", "-    /* Get the tailSet consisting of the ordered set of regions [start, end) such that end > offset. */", "+    /* Get the tailSet consisting of the ordered set of regions >= r. */", "-    SortedSet<R> tail = getTailSet(region);", "+    SortedSet<R> tail = getTailSet(r);", "-    assert (tail.size() > 0);", "-    for (R r: tail) r.update();", "+    // tail can be empty if r is a constructed DocumentRegion", "+    for (R region: tail) {", "+      if (region.getStartOffset() == region.getEndOffset()) removeRegion(region);", "+      region.update();", "+    }"]}], "num": 12143}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e51e2a81cd427cbe9a6350cec38c9892", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32b98a458b6b3a2388b1153299c1d077", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testCompileUnsavedButSaveWhenAsked()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileUnsavedButSaveWhenAsked()     throws BadLocationException, IOException", "diff": ["-    setupDocument(FOO_TEXT);", "+    final OpenDefinitionsDocument doc = setupDocument(FOO_TEXT);", "-        assertModified(true);", "+        assertModified(true, doc);", "-          _model.saveFile(new FileSelector(file));", "+          doc.saveFile(new FileSelector(file));", "-        assertModified(false);", "+        assertModified(false, doc);", "-    _model.startCompile();", "+    doc.startCompile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684da9a21010b9a0be0ca23d9032e08a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private void compileMethod(MethodDeclaration ast)", "signatureAfterChange": "      private void compileMethod(MethodDeclaration ast)", "diff": ["-      emitUnbox(mv, returnT, stack);", "+      emitConvert(mv, returnT, stack);", "-        @Override public void forClassType(ClassType t) {", "-          // The bytecode verifier requires this cast", "-          mv.visitTypeInsn(CHECKCAST, className(t.ofClass()));", "-          mv.visitInsn(ARETURN);", "-        }", "+        @Override public void forClassType(ClassType t) { mv.visitInsn(ARETURN); }"]}], "num": 1428}
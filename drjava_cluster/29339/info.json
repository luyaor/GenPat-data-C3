{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "192e5307146b6711c2658c79699019ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d46e5bc2b69f4e4a3456a756f4f1b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "commitAfterChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void _setupTabPanes()", "signatureAfterChange": "   public void _setupTabPanes()", "diff": ["+", "-    // Thread table (maybe only show if debug.show.threads is enabled?)", "-    _threadTable = new JTable( new ThreadTableModel());", "-    _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable));", "-    ", "+    // Thread table", "+    if (DrJava.CONFIG.getSetting(DEBUG_SHOW_THREADS).booleanValue()) {", "+      _threadTable = new JTable( new ThreadTableModel());", "+      _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable)); ", "+      // Sets the name column to always be 2 times as wide as the status column", "+      TableColumn nameColumn = null;", "+      TableColumn statusColumn = null;", "+      nameColumn = _threadTable.getColumnModel().getColumn(0);", "+      statusColumn = _threadTable.getColumnModel().getColumn(1);", "+      nameColumn.setPreferredWidth(2*statusColumn.getPreferredWidth()); ", "+    }", "+    DrJava.CONFIG.addOptionListener( OptionConstants.DEBUG_SHOW_THREADS, ", "+                                    new OptionListener<Boolean>() {", "+      public void optionChanged(OptionEvent<Boolean> oce) {", "+        if (oce.value.booleanValue()) {", "+          if (_threadTable == null) {", "+            _threadTable = new JTable( new ThreadTableModel());", "+            _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable));", "+            // Sets the name column to always be 2 times as wide as the status column", "+            TableColumn nameColumn = null;", "+            TableColumn statusColumn = null;", "+            nameColumn = _threadTable.getColumnModel().getColumn(0);", "+            statusColumn = _threadTable.getColumnModel().getColumn(1);", "+            nameColumn.setPreferredWidth(2*statusColumn.getPreferredWidth()); ", "+          }          ", "+        }", "+        else {", "+          if (_threadTable != null) {", "+            _threadTable = null;", "+            _rightPane.remove(1);", "+          }", "+        }", "+      }", "+    });", "+    // Sets the method column to always be 7 times as wide as the line column", "+    TableColumn methodColumn = null;", "+    TableColumn lineColumn = null;", "+    methodColumn = _stackTable.getColumnModel().getColumn(0);", "+    lineColumn = _stackTable.getColumnModel().getColumn(1);", "+    methodColumn.setPreferredWidth(7*lineColumn.getPreferredWidth());  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d773392e702ace20e2ff28757d02a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"echo\",", "+                                                                 \"Echo text to the console.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\ttext=\\\"<text to echo>\\\"\") {", "+      public void update(PropertyMaps pm) {", "+        String text = _attributes.get(\"text\");", "+        if (text==null) {", "+          _value = \"(echo Error: text missing...)\";", "+          return;", "+        }", "+        StringBuilder sb = new StringBuilder();", "+        final String osName = System.getProperty(\"os.name\");", "+        if ((osName.indexOf(\"Windows\")>=0)) {", "+          String exe = \"cmd\";", "+          if ((osName.indexOf(\"95\")>=0) || (osName.indexOf(\"98\")>=0)) { exe = \"command\"; }", "+          if (JavaVersion.CURRENT.supports(JavaVersion.JAVA_5)) {", "+            // System.getenv is deprecated under 1.3 and 1.4, and may throw a java.lang.Error (!),", "+            // which we'd rather not have to catch", "+            String var = System.getenv(\"ComSpec\");", "+            if (var!=null) { sb.append(var); }", "+            else {", "+              var = System.getenv(\"WinDir\");", "+              if (var!=null) {", "+                sb.append(var);", "+                sb.append(\"\\\\System32\\\\\");", "+              }", "+              sb.append(exe);", "+            }", "+          }", "+          else {", "+            sb.append(exe);", "+          }", "+          sb.append(\" /c echo \");", "+          sb.append(text);", "+        }", "+        else {", "+          sb.append(\"echo \");", "+          sb.append(text);", "+        }", "+        _value = sb.toString();", "+      }", "+      public boolean isCurrent() { return false; }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"text\", null);", "+      }", "+      public String toString() { return \"--uninitialized--\"; }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960acd112b9bb56481ca8f7ee0060086", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "commitAfterChange": "e753017eccbd872714e58c93831cb488b5045d2a", "methodNumberBeforeChange": 276, "methodNumberAfterChange": 276, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-        long millis = System.currentTimeMillis();", "-        String f = _attributes.get(\"fmt\").toLowerCase();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "-    ", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.auto.refresh\",", "+                                                               \"Evaluates to true if project auto-refresh is enabled.\") {", "+      public void update() {", "+        Boolean b = _model.getAutoRefreshStatus();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        if (f.equals(\"int\")) _value = b ? \"1\" : \"0\";", "+        else if (f.equals(\"yes\")) _value = b ? \"yes\" : \"no\";", "+        else _value = b.toString();", "+      }", "+      ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"boolean\");", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.excluded.files\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files that are excluded from DrJava's \"+", "+                                                                       \"project auto-refresh.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExcludedFiles()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.extra.class.path\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files in the project's extra \"+", "+                                                                       \"class path.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExtraClassPath()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+", "+    // Actions"]}], "num": 29339}
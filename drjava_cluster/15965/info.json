{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "835a1856ba4a4fc4639ccf309416061e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3697ab8466246ca435ed150008fce0b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void testForceFileOpen() throws BadLocationException, IOException, OperationCanceledException,     AlreadyOpenException", "signatureAfterChange": "   public void testForceFileOpen() throws BadLocationException, IOException, OperationCanceledException,     AlreadyOpenException", "diff": ["-    TestListener listener = new TestIOListener();", "+    final TestListener listener = new TestIOListener();", "-    // Open file 1", "-    OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile1));", "-    listener.assertOpenCount(1);", "-    listener.assertCloseCount(1);  // closed Untitled document", "-    assertModified(false, doc);", "-    assertContents(FOO_TEXT, doc);", "-    ", "-    // Get file 1", "-    OpenDefinitionsDocument doc1 = _model.getDocumentForFile(tempFile1);", "-    listener.assertOpenCount(1);", "-    listener.assertCloseCount(1);   // closed Untitled document", "-    assertEquals(\"opened document\", doc, doc1);", "-    assertContents(FOO_TEXT, doc1);", "-    ", "-    // Get file 2, forcing it to be opened", "-    OpenDefinitionsDocument doc2 = _model.getDocumentForFile(tempFile2);", "-    listener.assertOpenCount(2);", "-    listener.assertCloseCount(1);  // closed Untitled document", "-    assertContents(BAR_TEXT, doc2);", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {    ", "+          // Open file 1", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile1));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  // closed Untitled document", "+          assertModified(false, doc);", "+          assertContents(FOO_TEXT, doc);", "+          ", "+          // Get file 1", "+          OpenDefinitionsDocument doc1 = _model.getDocumentForFile(tempFile1);", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);   // closed Untitled document", "+          assertEquals(\"opened document\", doc, doc1);", "+          assertContents(FOO_TEXT, doc1);", "+          ", "+          // Get file 2, forcing it to be opened", "+          OpenDefinitionsDocument doc2 = _model.getDocumentForFile(tempFile2);", "+          listener.assertOpenCount(2);", "+          listener.assertCloseCount(1);  // closed Untitled document", "+          assertContents(BAR_TEXT, doc2);", "+        }", "+        catch (Exception e) {", "+          // should never happen", "+          fail(\"Exception thrown in testForceFileOpen. Traceback: \\n\" + e);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef419be855c994d712c1051b275bbe7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestFileIOListener(tempFile); ", "+    final TestListener listener = new TestFileIOListener(tempFile); ", "-    try {", "-      OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  // Untitled document is closed when doc is opened", "-      assertModified(false, doc);", "-      assertContents(BAR_TEXT, doc);", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  // Untitled document is closed when doc is opened", "+          assertModified(false, doc);", "+          assertContents(BAR_TEXT, doc);", "+        }", "+        catch(AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch(OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch(Exception e) { ", "+          // Should never happen", "+          fail(\"Exception thrown in testOpenRealFile.  Traceback: \" + e);", "+        }", "+      }", "+    });"]}], "num": 15965}
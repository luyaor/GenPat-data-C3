{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0961074638eb21f69d7592fe7f663333", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e13e87716983aa97ed1d6463c9dd6329", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 26, "signatureBeforeChange": "          protected void addResult(I result)", "signatureAfterChange": "   public static <I, R>       IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task,                                                            Executor exec, boolean start)", "diff": ["-    ", "-    protected void addResult(I result) {", "-      synchronized (_intermediateResults) {", "-        _intermediateResults.value().add(result);", "-        _intermediateResults.notifyAll();", "-      }", "-    }", "+   */", "+  public static <I, R>", "+      IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task, ", "+                                                          Executor exec, boolean start) {", "+    return computeWithExecutor(task, exec, start, false);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c5e1fed8873de02c1617c7fa98806e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 27, "signatureBeforeChange": "          public boolean hasIntermediateValue()", "signatureAfterChange": "   public static <I, R>     IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task,                                                          Executor exec, boolean start, boolean ignoreIntermediate)", "diff": ["-    ", "-    public boolean hasIntermediateValue() {", "-      synchronized (_intermediateResults) { return ! _intermediateResults.value().isEmpty(); }", "-    }", "+   */", "+  public static <I, R>", "+    IncrementalTaskController<I, R> computeWithExecutor(IncrementalTask<? extends I, ? extends R> task, ", "+                                                        Executor exec, boolean start, boolean ignoreIntermediate) {", "+    IncrementalTaskController<I, R> result =", "+      new ExecutorIncrementalTaskController<I, R>(exec, task, ignoreIntermediate);", "+    if (start) { result.start(); }", "+    return result;", "+  }"]}], "num": 12636}
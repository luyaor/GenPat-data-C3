{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c99df79f2bb4b564a91670405530a0b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8349a66cca65e808b84febfe8bf8e705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "1333ad40debe120f6d8fd5fb5ff36c57ce6b1ccf", "commitAfterChange": "3907c0e8430f2d380a191d1ad8364cbfdd1d1b28", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public InterpretResult interpret(final String s)", "signatureAfterChange": "   public void interpret(final String s)", "diff": ["-  public InterpretResult interpret(final String s) {", "-    try {", "-      _dialog(\"to interp: \" + s);", "-      Object result = _interpreter.interpret(s);", "-      _dialog(\"interp ret: \" + result);", "-", "-      if (result == JavaInterpreter.NO_RESULT) {", "-        return new VoidResult();", "+  //public InterpretResult interpret(final String s) {", "+  public void interpret(final String s) {", "+    Thread thread = new Thread(\"interpret thread: \" + s) {", "+      public void run() {", "+        try {", "+          try {", "+            _dialog(\"to interp: \" + s);", "+            Object result = _interpreter.interpret(s);", "+            _dialog(\"interp ret: \" + result);", "+            ", "+            if (result == JavaInterpreter.NO_RESULT) {", "+              //return new VoidResult();", "+              _mainJVM.interpretResult(new VoidResult());", "+            }", "+            else {", "+              // we use String.valueOf because it deals with result = null!", "+              _dialog(\"about to tell main result was \" + result);", "+              //return new ValueResult(String.valueOf(result));", "+              _mainJVM.interpretResult(new ValueResult(String.valueOf(result)));", "+            }", "+          }", "+          catch (ExceptionReturnedException e) {", "+            Throwable t = e.getContainedException();", "+            ", "+            //_dialog(\"before call to threwException\");", "+            //return new ExceptionResult(t.getClass().getName(),", "+            //                           t.getMessage(),", "+            //                           getStackTrace(t));", "+            _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(),", "+                                                         t.getMessage(),", "+                                                         getStackTrace(t)));", "+          }", "+          catch (Throwable t) {", "+            // A user's toString method might throw anything, so we need to be careful", "+            //_dialog(\"thrown by toString: \" + t);", "+            //return new ExceptionResult(t.getClass().getName(),", "+            //                           t.getMessage(),", "+            //                           getStackTrace(t));", "+            _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(),", "+                                                         t.getMessage(),", "+                                                         getStackTrace(t)));", "+          }", "+        }", "+        catch (RemoteException re) {", "+          // Can't communicate with MainJVM?  Nothing to do...", "+          _log.log(re.toString());", "+        }", "-      else {", "-        // we use String.valueOf because it deals with result = null!", "-        _dialog(\"about to tell main result was \" + result);", "-        return new ValueResult(String.valueOf(result));", "-      }", "-    }", "-    catch (ExceptionReturnedException e) {", "-      Throwable t = e.getContainedException();", "+    };", "-      //_dialog(\"before call to threwException\");", "-      return new ExceptionResult(t.getClass().getName(),", "-                                 t.getMessage(),", "-                                 getStackTrace(t));", "-    }", "-    catch (Throwable t) {", "-      // A user's toString method might throw anything, so we need to be careful", "-      //_dialog(\"thrown by toString: \" + t);", "-      return new ExceptionResult(t.getClass().getName(),", "-                                 t.getMessage(),", "-                                 getStackTrace(t));", "-    }", "+    thread.setDaemon(true);", "+    thread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4aa3e9b9a4168bff59740929f0d1a7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void interpret(final String s) throws RemoteException", "signatureAfterChange": "    public InterpretResult interpret(final String s)", "diff": ["+  public InterpretResult interpret(final String s) {", "+    try {", "+      _dialog(\"to interp: \" + s);", "+      Object result = _interpreter.interpret(s);", "+      _dialog(\"interp ret: \" + result);", "-  public void interpret(final String s) throws RemoteException {", "-    // fire off thread to interpret to keep from blocking the caller", "-    // it's all asynchronous anyhow ...", "-    Thread thread = new Thread() {", "-      public void run() {", "-        try {", "-          //_dialog(\"to interp: \" + s);", "-          Object result = _interpreter.interpret(s);", "-          //_dialog(\"interp ret: \" + result);", "-          if (result == JavaInterpreter.NO_RESULT) {", "-            _mainJVM.returnedVoid();", "-          }", "-          else {", "-            // we use String.valueOf because it deals with result = null!", "-            _mainJVM.returnedResult(String.valueOf(result));", "-          }", "-        }", "-        catch (RemoteException re) {", "-          // what do do? nothing I guess. main jvm is dead!", "-        }", "-        catch (ExceptionReturnedException e) {", "-          Throwable t = e.getContainedException();", "-", "-          try {", "-            //_dialog(\"before call to threwException\");", "-            _mainJVM.threwException(t.getClass().getName(),", "-                                    t.getMessage(),", "-                                    getStackTrace(t));", "-          }", "-          catch (RemoteException re) {", "-            // what do do? nothing I guess. main jvm is dead!", "-          }", "-        }", "-        catch (Throwable t) {", "-          // A toString method might throw anything, so we need to be careful", "-          //_dialog(\"thrown by toString: \" + t);", "-          try {", "-            _mainJVM.threwException(t.getClass().getName(),", "-                                    t.getMessage(),", "-                                    getStackTrace(t));", "-          }", "-          catch (RemoteException re) {", "-            // what do do? nothing I guess. main jvm is dead!", "-          }", "-        }", "+      if (result == JavaInterpreter.NO_RESULT) {", "+        return new VoidResult();", "-    };", "+      else {", "+        // we use String.valueOf because it deals with result = null!", "+        _dialog(\"about to tell main result was \" + result);", "+        return new ValueResult(String.valueOf(result));", "+      }", "+    }", "+    catch (ExceptionReturnedException e) {", "+      Throwable t = e.getContainedException();", "-    thread.start();", "+      //_dialog(\"before call to threwException\");", "+      return new ExceptionResult(t.getClass().getName(),", "+                                 t.getMessage(),", "+                                 getStackTrace(t));", "+    }", "+    catch (Throwable t) {", "+      // A user's toString method might throw anything, so we need to be careful", "+      //_dialog(\"thrown by toString: \" + t);", "+      return new ExceptionResult(t.getClass().getName(),", "+                                 t.getMessage(),", "+                                 getStackTrace(t));", "+    }"]}], "num": 25241}
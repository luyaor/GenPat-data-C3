{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8fe8b88844effc7289c934f47a4a949", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "defea5749b90f5d23baf9509a86bfc6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public void testExactClassName() throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public void testExactClassName() throws BadLocationException, ClassNameNotFoundException", "diff": ["-    _defModel.insertString(0, NESTED_CLASSES_TEXT, null);", "+    _doc.insertString(0, NESTED_CLASSES_TEXT, null);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);", "-    act1   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "-    act2   = _defModel.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp1+\"`, act=`\"+act1+\"`\", exp1, act1);", "-    assertEquals(\"class name at \"+substr+\" exp=`\"+exp2+\"`, act=`\"+act2+\"`\", exp2, act2);", "+    act1   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), true);", "+    act2   = _doc.getEnclosingClassName(NESTED_CLASSES_TEXT.indexOf(substr), false);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp1 + \"`, act=`\" + act1 + \"`\", exp1, act1);", "+    assertEquals(\"class name at \" + substr + \" exp=`\" + exp2 + \"`, act=`\" + act2 + \"`\", exp2, act2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed7676cecc7552ad704e9f0967021de9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "          public void testForIfThenElseStatement()", "signatureAfterChange": "          public void testForIfThenElseStatement()", "diff": ["-      Expression te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      Statement ts = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "+      Expression te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      Statement ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      IfThenElseStatement ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, ts, new EmptyStatement(JExprParser.NO_SOURCE_INFO));", "+      IfThenElseStatement ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      Statement assignStatement = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, new EmptyStatement(JExprParser.NO_SOURCE_INFO), ts);", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      Statement assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, new EmptyStatement(SourceInfo.NO_INFO), ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      assignStatement = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      Statement returnStatement = new ValueReturnStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, ts, new EmptyStatement(JExprParser.NO_SOURCE_INFO));", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      Statement returnStatement = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new EmptyStatement(SourceInfo.NO_INFO));", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      assignStatement = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, ts, new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new EqualsExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word (JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 32))));", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, new ExpressionStatement(SourceInfo.NO_INFO, new EqualsExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word (SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 32))));", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      assignStatement = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, ts, ts);", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new PlusAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      assignStatement = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));      ", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement}));", "-      ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, new EmptyStatement(JExprParser.NO_SOURCE_INFO), ts);", "+      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));      ", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement}));", "+      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, new EmptyStatement(SourceInfo.NO_INFO), ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      returnStatement = new ValueReturnStatement(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {returnStatement}));", "-      BreakStatement bs = new UnlabeledBreakStatement(JExprParser.NO_SOURCE_INFO);", "-      ift = new IfThenElseStatement(JExprParser.NO_SOURCE_INFO, te, ts, bs);", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      returnStatement = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {returnStatement}));", "+      BreakStatement bs = new UnlabeledBreakStatement(SourceInfo.NO_INFO);", "+      ift = new IfThenElseStatement(SourceInfo.NO_INFO, te, ts, bs);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, "]}], "num": 15677}
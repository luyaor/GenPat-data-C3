{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "714647544260e68b17c175894ec52f56", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01a3175df2f0c2f489788a7f6a09307c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "commitAfterChange": "a31b2c97ecb1660744788e96501356f9c0219d19", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public int balanceBackward()", "signatureAfterChange": "   public int balanceBackward()", "diff": ["-    Stack<ReducedToken> braceStack = new Stack<ReducedToken>();", "+    Stack<Brace> braceStack = new Stack<Brace>();", "-    int relDistance;", "-    int distance = 0;", "-    if (iter.atStart() || iter.atFirstItem() || !closedBraceImmediatelyLeft()) {", "+ ", "+    if (iter.atStart() || iter.atFirstItem() || ! closedBraceImmediatelyLeft()) {", "-    relDistance = iter.current().getSize();", "-    // here we check to make sure there is an open significant brace", "-    // immediately to the right of the cursor", "-    if (iter.current().isClosedBrace()) {", "-      if (moveWalkerGetState(-relDistance) == FREE) {", "-        // initialize the distance and the stack with the first brace,", "-        // the one we are balancing", "+    assert iter.current() instanceof Brace;  // In fact, it is a significant closed brace.", "+    ", "+    int relDistance = 0; // distance to right edge of nearest brace ", "+    int distance = 0;    // distance to original cursor       ", "-        braceStack.push(iter.current());", "-        distance += iter.current().getSize();", "-        iter.prev();", "-        if (!iter.atStart()) {", "-          distance += iter.current().getSize();", "-          relDistance = iter.current().getSize();", "-        }", "-      }", "-      else {", "-        iter.dispose();", "-        //System.out.println(\"! state at relative location != FREE\");", "-        return -1;", "-      }", "-    }", "-    else {", "-      iter.dispose();", "-      //System.out.println(\"! no open brace to immediate right of cursor\");", "-      return -1;", "-    }", "-    // either we get a match and the stack is empty", "-    // or we reach the start of a file and haven't found a match", "-    // or we have a open brace that doesn't have a match,", "-    // so we abort", "-    while (!iter.atStart() && !braceStack.isEmpty()) {", "-      if (!iter.current().isGap()) {", "-        if (moveWalkerGetState(-relDistance) ==", "-            FREE) {", "-              // open", "-              if (iter.current().isOpenBrace()) {", "-                ReducedToken popped = braceStack.pop();", "-                if (!iter.current().isMatch(popped)) {", "-                  iter.dispose();", "-                  //System.out.println(\"! encountered open brace that didn't match\");", "-                  return -1;", "-                }", "-              }", "-              // closed", "-              else {", "-                braceStack.push(iter.current());", "-              }", "+    /* We loop until:", "+     * (i)   we get a match and the stack is empty and report success", "+     * (ii)  we reach the start of a file and haven't found a match and aborrt", "+     * (iii) we reach an open brace that doesn't have a match and abort", "+     */", "+    do {", "+      ReducedToken curToken = iter.current();", "+      int size = curToken.getSize();", "+      distance += size;", "+      relDistance += size;", "+      ", "+      if (! curToken.isGap()) {  // curToken is a Brace", "+        Brace curBrace = (Brace) curToken;", "+        if (moveWalkerGetState(- relDistance) == FREE) {", "+          if (curBrace.isOpenBrace()) {", "+            Brace popped = braceStack.pop();", "+            if (! curBrace.isMatch(popped)) {", "+              iter.dispose();", "+              //System.out.println(\"! encountered open brace that didn't match\");", "+              return -1;", "+          }", "+          // closed", "+          else braceStack.push(curBrace);", "+        }", "-      // no matter what, we always want to increase the distance", "-      // by the size of the token we have just gone over", "+      ", "-      if (!iter.atStart() && !braceStack.isEmpty()) {", "-        distance += iter.current().getSize();", "-        relDistance += iter.current().getSize();", "-      }", "+    while (! iter.atStart() && ! braceStack.isEmpty());", "-    // we couldn't find a match", "-    if (!braceStack.isEmpty()) {", "+", "+    // test to see if we exited without a match", "+    if (! braceStack.isEmpty()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7956e59423d6ff5575388007764aaa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "commitAfterChange": "a31b2c97ecb1660744788e96501356f9c0219d19", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public int balanceForward()", "signatureAfterChange": "   public int balanceForward()", "diff": ["-    Stack<ReducedToken> braceStack = new Stack<ReducedToken>();", "+    Stack<Brace> braceStack = new Stack<Brace>();", "-    int relDistance;", "-    int distance = 0;", "-    if (iter.atStart() || iter.atFirstItem() || !openBraceImmediatelyLeft()) {", "+    ", "+    if (iter.atStart() || iter.atFirstItem() || ! openBraceImmediatelyLeft()) {", "-    relDistance = -iter.current().getSize();", "-    // here we check to make sure there is an open significant brace", "-    // immediately to the left of the cursor", "-    if (iter.current().isOpenBrace()) {", "-      if (moveWalkerGetState(relDistance) == FREE) {", "-        // initialize the stack with the first brace, the one we are balancing", "-        braceStack.push(iter.current());", "+    ReducedToken curToken = iter.current();", "+    ", "+    assert curToken instanceof Brace; // In fact, it is a significant matchable open brace.", "+    ", "+    int openBraceDistance = - curToken.getSize();", "+  ", "+    moveWalkerGetState(openBraceDistance);", "+    braceStack.push((Brace) curToken);", "+    iter.next();", "+    moveWalkerGetState(-openBraceDistance);", "+    ", "+    int relDistance = 0;  // distance to closest preceding Brace (non-gap)", "+    int distance = 0;     // distance to end of original open Brace (immediately left of cursor on entry)", "+   ", "-        // reset the walker and iter to where we started", "-        iter.next();", "-        moveWalkerGetState(-relDistance);", "-        relDistance = 0;", "-      }", "-      else {", "-        // the open brace is in a comment or quotation => ignore it", "-        iter.dispose();", "-//        System.out.println(\"! state at relative location != FREE\");", "-        return -1;", "-      }", "-    }", "-    else {", "-      // this isn't an open brace => ignore it", "-      iter.dispose();", "-//      System.out.println(\"! no open brace to immediate left of cursor\");", "-      return -1;", "-    }", "-    // either we get a match and the stack is empty", "-    // or we reach the end of a file and haven't found a match", "-    // or we have a close brace that doesn't have a match,", "-    // so we abort", "-    while (!iter.atEnd() && !braceStack.isEmpty()) {", "-      if (!iter.current().isGap()) {", "+    /* Loop until either:", "+     * (i)   we get a match and the stack is empty (success);", "+     * (ii)  we reach the end of a file and haven't found a match and abort; or", "+     * (iii) we reach a close brace that doesn't have a match and abort.", "+     */", "+    while (! iter.atEnd() && ! braceStack.isEmpty()) {", "+      curToken = iter.current(); // a ReducedToken is either a Gap or a Brace", "+      if (! curToken.isGap()) {  // curToken is a Brace", "+        Brace curBrace = (Brace) curToken;", "-              // check for closed brace", "-              if (iter.current().isClosedBrace()) {", "-                ReducedToken popped = braceStack.pop();", "-                if (!iter.current().isMatch(popped)) {", "-                  iter.dispose();", "+          // check for closed brace", "+          if (curBrace.isClosedBrace()) {", "+            Brace popped = braceStack.pop();", "+            if (! curBrace.isMatch(popped)) {", "+              iter.dispose();", "-                  return -1;", "-                }", "-              }", "-              // otherwise, this must be an open brace", "-              else {", "-                braceStack.push(iter.current());", "-              }", "+              return -1;", "-        relDistance = 0;", "+          }", "+          // otherwise, this must be an open brace", "+          else braceStack.push(curBrace);", "+        }", "+        relDistance = 0; // we moved the walker back to the right edge of the curBrace", "-      // no matter what, we always want to increase the distance", "-      // by the size of the token we have just gone over", "-        distance += iter.current().getSize();", "-        relDistance += iter.current().getSize();", "-        iter.next();", "+      // increment distances of size of current token", "+      int size = curToken.getSize();", "+      distance += size;", "+      relDistance += size;", "+      iter.next();", "-", "-    // we couldn't find a match", "-    if (!braceStack.isEmpty()) {", "+    ", "+    // check if we exited because of failure", "+    if (! braceStack.isEmpty()) {"]}], "num": 7921}
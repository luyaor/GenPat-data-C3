{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7abc1e68d0076d8cbad8d4bac1b1c8a0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23eeec61d8ad2a7957aaf67c0e7424f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsCurlyTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testOnlyCurly() throws BadLocationException", "signatureAfterChange": "      public void testOnlyCurly() throws BadLocationException", "diff": ["-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 28, Indenter.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 30, Indenter.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 28, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 18, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 19, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 19, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Close brace immediately after open brace.\", _rule.applyRule(_doc, 12, Indenter.OTHER));", "+    assertTrue(\"Close brace immediately after open brace.\", _rule.applyRule(_doc, 12, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Close brace immediately after open brace.\", _rule.applyRule(_doc, 29, Indenter.OTHER));", "+    assertTrue(\"Close brace immediately after open brace.\", _rule.applyRule(_doc, 29, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b722fd15e4d24da2a4737296f2c1d435", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testParen() throws BadLocationException", "signatureAfterChange": "      public void testParen() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86c99954f8b32cc24fabfb6c3292227", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsCurlyTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testWithParen() throws BadLocationException", "signatureAfterChange": "      public void testWithParen() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 18, Indenter.OTHER));", "-    assertTrue(\"START's brace is curly brace.\", _rule.applyRule(_doc, 19, Indenter.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 18, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is curly brace.\", _rule.applyRule(_doc, 19, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 2, Indenter.OTHER));", "-    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "+    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 2, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START is open curly brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's brace is open curly brace.\", _rule.applyRule(_doc, 14, Indenter.OTHER));", "-    assertTrue(\"START's brace is open curly brace.\", _rule.applyRule(_doc, 22, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open paren.\", !_rule.applyRule(_doc, 23, Indenter.OTHER));", "+    assertTrue(\"START's brace is open curly brace.\", _rule.applyRule(_doc, 14, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is open curly brace.\", _rule.applyRule(_doc, 22, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open paren.\", !_rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"START's brace is open bracket.\", !_rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 28, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 30, Indenter.OTHER));", "-    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));", "+    assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is open bracket.\", !_rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 28, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, _text.length() - 1, Indenter.IndentReason.OTHER));"]}], "num": 15314}
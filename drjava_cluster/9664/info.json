{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80e350ae380681587fe8c6deffc25d2a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dee2871ecc30f6feab02c234cb4ae25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public static <T> SizedIterable<T> arrayIterable(final T[] array)", "signatureAfterChange": "   public static <T> SizedIterable<T> asIterable(T[] array)", "diff": ["+   */", "+  public static <T> SizedIterable<T> asIterable(T[] array) {", "+    return new ObjectArrayWrapper<T>(array);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static <T> SizedIterable<T> arrayIterable(final T[] array) {", "-    class Wrapper extends AbstractIterable<T> implements SizedIterable<T> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<T> iterator() {", "-        return new IndexedIterator<T>() {", "-          protected int size() { return array.length; }", "-          protected T get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e65e7cb7328530aa7e9e690fe20b8f33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 121, "signatureBeforeChange": "   public static <T> SizedIterable<T> asSizedIterable(final Collection<T> coll)", "signatureAfterChange": "   public static <T> SizedIterable<T> asIterable(Collection<T> coll)", "diff": ["-   */", "-  public static <T> SizedIterable<T> asSizedIterable(final Collection<T> coll) {", "-    class Wrapper extends AbstractIterable<T> implements SizedIterable<T> {", "-      public Iterator<T> iterator() { return coll.iterator(); }", "-      public int size() { return coll.size(); }", "-      public boolean isFixed() { return isFixedCollection(coll); }", "-    }", "-    return new Wrapper();", "-  }", "+   */", "+  public static <T> SizedIterable<T> asIterable(Collection<T> coll) {", "+    return new CollectionWrapper<T>(coll);", "+  }"]}], "num": 9664}
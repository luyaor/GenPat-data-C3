{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f76605a7254efb9523fec1037b842eb1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f12c6c4f9675158bd7855871b95aec2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ExternallySortedMultiMap.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 2, "signatureBeforeChange": "       public Iterator<V> iterator()", "signatureAfterChange": "   public int size(int bound)", "diff": ["+  /** @return  The current number of (key, value) pairs in the map, or {@code bound} if it is less. */", "+  public int size(int bound) { return _size <= bound ? _size : bound; }", "-    return new Iterable<V>() {", "-      public Iterator<V> iterator() {", "-        Iterator<V> result = _emptyIterator;", "-        for (ExternallySortedSet<V, C> set : _map.values()) {", "-          result = new ComposedIterator<V>(set.iterator(), result);", "-        }", "-        return new ImmutableIterator<V>(result);", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9cb9fcfde30c6e8991dac5453e59b2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/PermutationIterable.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public int size()", "signatureAfterChange": "      public int size(int bound)", "diff": ["-  public int size() {", "-    int n = IterUtil.sizeOf(_original);", "-    int result = 1;", "-    for (int i = 2; i < n; i++) { result *= i; }", "-    return result;", "+  ", "+  public int size(int bound) {", "+    int n = IterUtil.sizeOf(_original, bound);", "+    long result = 1; // won't overflow -- worst case is 2^31 * 2^31 = 2^62 < 2^63", "+    for (int i = 2; i < n && result < bound; i++) { result *= i; }", "+    return result <= bound ? (int) result : bound;"]}], "num": 3242}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd39ee810efb1ea9ce85e20ad3c6e7ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a822ac90bd671207f5191a131d4572ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 195, "signatureBeforeChange": "     public boolean saveFile(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFile(FileSaveSelector com) throws IOException", "diff": ["-        if (isUntitled()) {", "-          realCommand = com;", "-        }", "-        else {", "+        if (isUntitled()) realCommand = com;", "+        else", "-            file = getFile();", "-            realCommand = new TrivialFSS(file);", "-          }", "-          catch (FileMovedException fme) {", "-            // getFile() failed, prompt the user if a new one should be selected", "-            if (com.shouldSaveAfterFileMoved(this, fme.getFile())) {", "-              realCommand = com;", "-            }", "-            else {", "-              // User declines to save as a new file, so don't save", "-              return false;", "-            }", "-          }", "+          file = getFile();", "+          realCommand = new TrivialFSS(file);", "+        }", "+        catch (FileMovedException fme) {", "+          // getFile() failed, prompt the user if a new one should be selected", "+          if (com.shouldSaveAfterFileMoved(this, fme.getFile())) realCommand = com;", "+          else", "+            // User declines to save as a new file, so don't save", "+            return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5194904d6688935460cf72bf69a2db4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": "    final public TypeParameter TypeParameter() throws ParseException", "signatureAfterChange": "    final public TypeParameter TypeParameter() throws ParseException", "diff": ["-      jj_la1[211] = jj_gen;", "+      jj_la1[210] = jj_gen;", "-          //if(hook == null){", "-        if(bound instanceof ReferenceType){", "-          {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "-        } else {", "-          {if (true) throw new ParseException(\"Primitives are not allowed as bound\"+", "-                                   \"types, and array types are temporarily disabled due to a \"+", "-                                   \"DynamicJava AST hierarchy bug!\");}", "-        }", "-          //} else { // process wildcard", "-          //  throw new ParseException(\"DynamicJava Parser does not support wildcards yet\");", "-          //}", "-", "+      if(bound instanceof ReferenceType){", "+        {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "+      } else {", "+        {if (true) throw new ParseException(\"Primitives are not allowed as bound\"+", "+                                 \"types, and array types are temporarily disabled due to a \"+", "+                                 \"DynamicJava AST hierarchy bug!\");}", "+      }"]}], "num": 24296}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53fe69cc7f10aa37416f5adc6e56f8f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158a079f52521636285ea12757dea57f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 709, "methodNumberAfterChange": 709, "signatureBeforeChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "signatureAfterChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile, List<OpenDefinitionsDocument> outOfSync)", "diff": ["-    public void compileBeforeJUnit(final CompilerListener testAfterCompile) {", "+    public void compileBeforeJUnit(final CompilerListener testAfterCompile, List<OpenDefinitionsDocument> outOfSync) {", "-      else { // pop up a window to ask if all open files should be compiled before testing", "-        String title = \"Must Compile All Source Files to Run Unit Tests\";", "-        String msg = \"Before you can run unit tests, you must first compile all out of sync source files.\\n\" + ", "-          \"Would you like to compile all files and run the specified test(s)?\";", "-        int rc = JOptionPane.showConfirmDialog(MainFrame.this, msg, title, JOptionPane.YES_NO_OPTION); ", "-        ", "-        switch (rc) {", "-          case JOptionPane.YES_OPTION:  // compile all open source files and test", "+      else { // pop up a window to ask if all open files should be compiled before testing        ", "+        final JButton yesButton = new JButton(new AbstractAction(\"Yes\") {", "+          public void actionPerformed(ActionEvent e) {", "+            // compile all open source files and test", "-            break;", "-          case JOptionPane.CLOSED_OPTION:", "-          case JOptionPane.NO_OPTION:  // abort unit testing", "-//            _model.getJUnitModel().nonTestCase(true);  // cleans up", "+          }", "+        });", "+        final JButton noButton = new JButton(new AbstractAction(\"No\") {", "+          public void actionPerformed(ActionEvent e) {", "+            // abort unit testing", "+            // _model.getJUnitModel().nonTestCase(true);  // cleans up", "-            break;", "-          default:", "-            throw new UnexpectedException(\"Invalid returnCode from showConfirmDialog: \" + rc);", "-        }", "+          }", "+        });", "+        ScrollableListDialog<OpenDefinitionsDocument> dialog = new ScrollableListDialog.Builder<OpenDefinitionsDocument>()", "+          .setOwner(MainFrame.this)", "+          .setTitle(\"Must Compile All Source Files to Run Unit Tests\")", "+          .setText(\"Before you can run unit tests, you must first compile all out of sync source files.\\n\"+", "+                   \"The files below are out of sync. Would you like to compile all files and\\n\"+", "+                   \"run the specified test(s)?\")", "+          .setItems(outOfSync)", "+          .setMessageType(JOptionPane.QUESTION_MESSAGE)", "+          .setFitToScreen(true)", "+          .clearButtons()", "+          .addButton(yesButton)", "+          .addButton(noButton)", "+          .build();", "+        ", "+        dialog.showDialog();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2287552731926dc2e9a916df299fa4e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e56c3e65e7bcf825d7bbbc53538aa94699792774", "commitAfterChange": "a16de484c1abb580ef9842328449e698b77dfd64", "methodNumberBeforeChange": 763, "methodNumberAfterChange": 763, "signatureBeforeChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "diff": ["-        public void windowDeactivated(WindowEvent we) {", "+        final HashSet<Window> trumpedBy = new HashSet<Window>(); // set of windows that trumped this window in getting to the front", "+        final WindowAdapter regainFront = new WindowAdapter() {", "+          public void windowClosed(WindowEvent we) {", "+            // the window that trumped w was closed, so we're moving w back to the front", "+            w.toFront();", "+            w.requestFocus();", "+            toFrontAction.run(we);", "+            // then we remove the window that trumped w from the set of trump windows", "+            Window o = we.getOppositeWindow();", "+            trumpedBy.remove(o);", "+            // and we remove this listener", "+            o.removeWindowListener(this);", "+          }", "+        };", "+        public void toFront(WindowEvent we) {", "+          Window opposite = we.getOppositeWindow();", "+          if (opposite instanceof Dialog) {", "+            Dialog d = (Dialog)opposite;", "+            if (d.isModal()) {", "+              // the other window is a real modal dialog, we'll leave it on top -- the window trumped this window", "+              if (!trumpedBy.contains(d)) {", "+                // add a listener to move this window back to the front when the opposite window has been closed", "+                d.addWindowListener(regainFront);", "+                // add trump window to set of windows that have trumped this window", "+                trumpedBy.add(d);", "+              }", "+              return; ", "+            }", "+          }", "-        public void windowIconified(WindowEvent we) {", "-          we.getWindow().toFront();", "-          we.getWindow().requestFocus();", "-          toFrontAction.run(we);", "-        }", "-        public void windowLostFocus(WindowEvent we) {", "-          we.getWindow().toFront();", "-          we.getWindow().requestFocus();", "-          toFrontAction.run(we);", "-        }", "+        public void windowDeactivated(WindowEvent we) { toFront(we); }", "+        public void windowIconified(WindowEvent we) { toFront(we); }", "+        public void windowLostFocus(WindowEvent we) { toFront(we); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4442c1a947198fbcfb36a286336789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "91d926f5e8557085503ecb402ffa610f4022f505", "commitAfterChange": "97f4d18b1b96ab5f6fef892b2420a830c7869018", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private void initComponents()", "signatureAfterChange": "   private void initComponents()", "diff": ["-    Action okCommandAction = new AbstractAction(\"Run Command Line\") {", "+     _tabbedPane = new JTabbedPane();", "+ ", "+    Action runCommandAction = new AbstractAction(\"Run Command Line\") {", "-        _okCommand();", "+        _runCommand();", "-    _okCommandButton = new JButton(okCommandAction);", "-    Action okJavaAction = new AbstractAction(\"Run Java Class\") {", "+    _runCommandButton = new JButton(runCommandAction);", "+    Action runJavaAction = new AbstractAction(\"Run Java Class\") {", "-        _okJava();", "+        _runJava();", "-    _okJavaButton = new JButton(okJavaAction);", "+    _runJavaButton = new JButton(runJavaAction);", "-    _insertVarDialog = new InsertVariableDialog(_mainFrame, System.getProperties(), _insertVarDialogMonitor);", "-    Action insertCommandAction = new AbstractAction(\"Insert Variable\") {", "+    Action saveCommandAction = new AbstractAction(\"Save to Menu...\") {", "+      public void actionPerformed(ActionEvent e) {", "+        _saveCommand();", "+      }", "+    };", "+    _saveCommandButton = new JButton(saveCommandAction);", "+    Action saveJavaAction = new AbstractAction(\"Save to Menu...\") {", "+      public void actionPerformed(ActionEvent e) {", "+        _saveJava();", "+      }", "+    };", "+    _saveJavaButton = new JButton(saveJavaAction);", "+", "+    HashMap<String, Properties> m = new HashMap<String, Properties>();", "+    m.put(\"Java\", System.getProperties());", "+    m.put(\"DrJava\", System.getProperties());", "+    m.put(\"Project\", System.getProperties());", "+    _insertVarDialog = new InsertVariableDialog(_mainFrame, m, _insertVarDialogMonitor);", "+    Action insertCommandAction = new AbstractAction(\"Insert Variable...\") {", "-    Action insertJavaAction = new AbstractAction(\"Insert Variable\") {", "+    _insertCommandButton.setEnabled(false);", "+    Action insertJavaAction = new AbstractAction(\"Insert Variable...\") {", "+    _insertJavaButton.setEnabled(false);", "-    super.setResizable(false);", "-    // pack();", "-", "+    super.setResizable(true);", "+    ", "+    SwingUtilities.invokeLater(new Runnable() {", "+      public void run() {", "+        _commandLine.requestFocus();", "+      }", "+    });"]}], "num": 5947}
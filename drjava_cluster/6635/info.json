{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d5e3bdd65fe31648d8e5b59139301a9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44286b6f8128a85d171532f6fe8a922d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpret(final String s)", "signatureAfterChange": "   public void interpret(final String s)", "diff": ["-    //  (will receive result in the interpretResult(...) method)", "-      _log.log(this + \".interpret(\" + s + \")\");", "+      debug.logStart(\"Interpreting \" + s);", "-      slave.interpret(s);", "+      InterpretResult result = slave.interpret(s);", "+      debug.logEnd();", "+      debug.logValue(\"result\", result);", "+      result.apply(getResultHandler());", "-    catch (java.rmi.UnmarshalException ume) {", "-      // Could not receive result from interpret; system probably exited.", "-      // We will silently fail and let the interpreter restart.", "-      _log.log(this + \".interpret threw UnmarshalException, so interpreter is dead:\\n\" + ume);", "+    catch (UnmarshalException ume) {", "+      debug.logEnd();", "+      Throwable cause = ume.getCause();", "+      if (cause != null && cause instanceof EOFException) {", "+        // Interpreter JVM has disappeared (perhaps reset); just ignore error and wait", "+        // for reset.", "+      }", "+      else { _threwException(ume); }", "-    catch (RemoteException re) { _threwException(re); }", "+    catch (RemoteException re) { debug.logEnd(); _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f94fb688664b8d9bed961a9f7ebca5dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void killInterpreter(File wd)", "signatureAfterChange": "   public void killInterpreterJVM(File wd)", "diff": ["+   */", "+  public void killInterpreterJVM(File wd) {", "+    debug.logStart();", "+    _startupComplete.attemptEnsureSignaled();", "+    boolean restart = (wd != null);", "+    InterpreterJVMRemoteI current;", "+    synchronized (_startupLock) {", "+      _workingDir = wd;", "+      _restart = restart;", "+      _cleanlyRestarting = true;", "+      current = _interpreterJVM.getAndSet(null);", "+    }", "+    if (current != null) {", "+      if (restart) _interactionsModel.interpreterResetting();", "+      quitSlave();", "+      // new slave JVM is started by in handleSlaveQuit()", "+    }", "+    debug.logEnd();", "+  }", "-  ", "-  public void killInterpreter(File wd) {", "-    boolean restart;", "-    synchronized(_masterJVMLock) {", "-      _workDir = wd;", "-      _restart = (wd != null);", "-      _cleanlyRestarting = true;", "-      restart = _restart;", "-    }", "-    ", "-    /* Dropping lock before performing operations on the interactions document/pane and making remote call. */", "-    try { ", "-      if (restart) _interactionsModel.interpreterResetting();", "-      quitSlave(); ", "-    } // new slave JVM is restarted by call on startInterpreterJVM on death of current slave", "-    catch (RemoteException e) {", "-      _log.log(this + \"could not connect to the interpreterJVM while trying to kill it.  Threw \" + e);", "-    }"]}], "num": 6635}
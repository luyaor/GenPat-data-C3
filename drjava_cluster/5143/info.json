{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7698c4710787a313e4666052fd7543fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12fa043c165eeb249c8d7ba232665f76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void testGetLineStartPos() throws BadLocationException", "signatureAfterChange": "    public void testGetLineStartPos() throws BadLocationException", "diff": ["-    assertEquals(\"Returns position after the previous newline\",", "-                 4,", "-                 _doc.getLineStartPos(6));", "-    assertEquals(\"Returns position after previous newline when cursor \" +", "-                 \"is at the position after the previous newline\",", "+    assertEquals(\"Returns position after the previous newline\", 4, _doc.getLineStartPos(6));", "+    assertEquals(\"Returns position after previous newline when cursor is at the position after the previous newline\",", "-    assertEquals(\"Returns 0 when there's no previous newline\",", "-                 0,", "-                 _doc.getLineStartPos(2));", "-    assertEquals(\"Returns 0 when the cursor is at 0\",", "-                 0,", "-                 _doc.getLineStartPos(0));", "+    assertEquals(\"Returns 0 when there's no previous newline\", 0, _doc.getLineStartPos(2));", "+    assertEquals(\"Returns 0 when the cursor is at 0\", 0, _doc.getLineStartPos(0));", "-    assertEquals(\"Check that position in reduced model is unaffected \" +", "-                 \"after call to getLineStartPos\",", "+    assertEquals(\"Check that position in reduced model is unaffected after call to getLineStartPos\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a055f1ed916597fb096c3f9a2de1e666", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    public void testGetIndentOfCurrStmtMultipleLines()     throws BadLocationException", "signatureAfterChange": "    public void testGetIndentOfCurrStmtMultipleLines()     throws BadLocationException", "diff": ["-    assertEquals(\"start stmt on previous line, indent two spaces\",", "-                 \"  \",", "-                 _doc.getIndentOfCurrStmt(24));", "-    assertEquals(\"start stmt before previous line, \" +", "-                 \"cursor inside single-line comment \" +", "-                 \"indent two spaces\",", "-                 \"  \",", "+    assertEquals(\"start stmt on previous line, indent two spaces\", 2, _doc.getIndentOfCurrStmt(24));", "+    assertEquals(\"start stmt before previous line, cursor inside single-line comment indent two spaces\", 2,", "-    assertEquals(\"start stmt before single-line comment, \" +", "-                 \"cursor inside multi-line comment \" +", "-                 \"indent two spaces\",", "-                 \"  \",", "+    assertEquals(\"start stmt before single-line comment, cursor inside multi-line comment indent two spaces\", 2,", "-    assertEquals(\"start stmt before multi-line comment, \" +", "-                 \"indent two spaces\",", "-                 \"  \",", "-                 _doc.getIndentOfCurrStmt(88));", "+    assertEquals(\"start stmt before multi-line comment, indent two spaces\", 2, _doc.getIndentOfCurrStmt(88));"]}], "num": 5143}
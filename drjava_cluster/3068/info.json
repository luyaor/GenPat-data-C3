{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7fe481ea2d858ce12cec1338c366ef8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f1d8b0429f856cc1331d34a75e0d7b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "commitAfterChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   private void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "-      ", "-      if(name.indexOf(\"[\") != -1 && name.indexOf(\"]\") != -1) {", "-        name = name.substring(0, name.indexOf(\"[\"));", "-        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "-        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "-          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "-          while(iter.indexOf(\"[\") != -1 && iter.indexOf(\"]\") != -1) {", "-            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "-            if(iter.indexOf(\"]\")<(iter.length()-1))", "-              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "-            else ", "-              iter = \"\";", "-          }", "-        }", "-      }", "-     ", "-      int [] indices = new int[arr_index.size()];", "-      for (int i = 0; i < arr_index.size(); i++) {", "-        indices[i] = arr_index.get(i);", "-      }", "-      val = _model.getInteractionsModel().getVariableToString(name, indices);", "-      type = _model.getInteractionsModel().getVariableType(name, indices);", "+//      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "+//      ", "+//      if(name.indexOf(\"[\") != -1 && name.indexOf(\"]\") != -1) {", "+//        name = name.substring(0, name.indexOf(\"[\"));", "+//        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "+//        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "+//          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "+//          while(iter.indexOf(\"[\") != -1 && iter.indexOf(\"]\") != -1) {", "+//            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "+//            if(iter.indexOf(\"]\")<(iter.length()-1))", "+//              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "+//            else ", "+//              iter = \"\";", "+//          }", "+//        }", "+//      }", "+//     ", "+//      int [] indices = new int[arr_index.size()];", "+//      for (int i = 0; i < arr_index.size(); i++) {", "+//        indices[i] = arr_index.get(i);", "+//      }", "+      val = _model.getInteractionsModel().getVariableToString(name);", "+      type = _model.getInteractionsModel().getVariableType(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b26213bf4738adbb46c907692ca2191e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d)", "signatureAfterChange": "   protected String[] getFormalParameterMav(Data d)", "diff": ["-  protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d) {", "-    VariableData[] varData = new VariableData[fps.length];", "-    VariableDeclarator vd;", "-    String[] mav;", "-    ", "-    // This is something of a hack.  The parameters to a static method can be referenced within the method itself,", "-    // even though they are not declared to be static fields.  Making them static has no effect on any other processing.", "-    if (d instanceof MethodData && d.hasModifier(\"static\"))", "-      mav = new String[] {\"final\", \"static\"};", "-    else", "-      mav = new String[] {\"final\"};", "-    ", "-    for (int i = 0; i < varData.length; i++) {", "-      vd = fps[i].getDeclarator();", "-      String name = vd.getName().getText();", "-      SymbolData type = getSymbolData(vd.getType().getName(), vd.getType().getSourceInfo());", "-      ", "-      if (type == null) {", "-        //see if this is a partially qualified field reference", "-        type = d.getInnerClassOrInterface(vd.getType().getName());", "-      }", "-      ", "-      if (type == null) {", "-        //if we still couldn't resolve sd, create a continuation for it.", "-        String typeName = d.getSymbolData().getName() + \".\" + vd.getType().getName();", "-        type = new SymbolData(typeName);", "-        d.getSymbolData().addInnerClass(type);", "-        type.setOuterData(d.getSymbolData());", "-//        System.err.println(\"Creating continuation for \" + typeName + \" at FJV:232\");", "-        continuations.put(typeName, new Pair<SourceInfo, LanguageLevelVisitor>(vd.getType().getSourceInfo(), this));", "-      }", "-      ", "-      varData[i] = ", "-        new VariableData(name, new ModifiersAndVisibility(SourceInfo.NO_INFO, mav), type, true, d);", "-      varData[i].gotValue();", "-", "-    }", "-    return varData;", "+  protected String[] getFormalParameterMav(Data d) { ", "+    return (d.hasModifier(\"static\")) ? new String[] {\"static\"} : new String[] { };"]}], "num": 3068}
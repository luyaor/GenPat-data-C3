{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c02e6c3be1d15457bee0abbfc266bd2f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c41cef6a2caf83f701190e314cca341", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(QualifiedName node)", "signatureAfterChange": "   public Class visit(QualifiedName node)", "diff": ["-     */", "-    public Object visit(QualifiedName node) {", "-\tString var = node.getRepresentation();", "-\t", "-\t// Set the modifier", "-\tClass c = (Class)context.get(var);", "-\tnode.setProperty(NodeProperties.TYPE, c);", "-\t", "-\tnode.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "-\treturn c;", "-    }", "+   */", "+  public Class visit(QualifiedName node) {", "+    String var = node.getRepresentation();", "+    ", "+    // Set the modifier", "+    Class c = (Class)context.get(var);", "+    node.setProperty(NodeProperties.TYPE, c);", "+    ", "+    node.setProperty(NodeProperties.MODIFIER, context.getModifier(node));", "+    return c;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a59561dc4bf12a227a1efac9b61e32b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(TypeExpression node)", "signatureAfterChange": "   public Class visit(TypeExpression node)", "diff": ["-     */", "-    public Object visit(TypeExpression node) {", "-\tClass c = (Class)node.getType().acceptVisitor(this);", "-        node.setProperty(NodeProperties.TYPE, Class.class);", "-        node.setProperty(NodeProperties.VALUE, c);", "-\treturn Class.class;", "+   */", "+  public Class visit(TypeExpression node) {", "+    Class c = (Class)node.getType().acceptVisitor(this);", "+    node.setProperty(NodeProperties.TYPE, Class.class);", "+    node.setProperty(NodeProperties.VALUE, c);", "+    return Class.class;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "857fc4cf6f6315b7b09f04303506b035", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public Object visit(ArrayType node)", "signatureAfterChange": "   public Class visit(ArrayType node)", "diff": ["-     */", "-    public Object visit(ArrayType node) {", "-        Node eType = node.getElementType();", "-        Class c = (Class)eType.acceptVisitor(this);", "-        Class ac = Array.newInstance(c, 0).getClass();", "-        ", "-        // Set the type property of this node", "-        node.setProperty(NodeProperties.TYPE, ac);", "-        return ac;", "+   */", "+  public Class visit(ArrayType node) {", "+    Node eType = node.getElementType();", "+    Class c = (Class)eType.acceptVisitor(this);", "+    Class ac = Array.newInstance(c, 0).getClass();", "+    ", "+    // Set the type property of this node", "+    node.setProperty(NodeProperties.TYPE, ac);", "+    return ac;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86c99e62914d379c112f9704c9bdd802", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Object visit(Literal node)", "signatureAfterChange": "   public Class visit(Literal node)", "diff": ["-     */", "-    public Object visit(Literal node) {", "-        // Set the properties of the node ", "-\tClass c = node.getType();", "-        node.setProperty(NodeProperties.VALUE, node.getValue());", "-        node.setProperty(NodeProperties.TYPE, c);", "-        return c;", "-    }", "+   */", "+  public Class visit(Literal node) {", "+    // Set the properties of the node ", "+    Class c = node.getType();", "+    node.setProperty(NodeProperties.VALUE, node.getValue());", "+    node.setProperty(NodeProperties.TYPE, c);", "+    return c;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d607387e58ed28b0787c4fed2cb7a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object visit(DivideExpression node)", "signatureAfterChange": "   public Object visit(InstanceOfExpression node)", "diff": ["+   */", "+  public Object visit(InstanceOfExpression node) {", "+    node.getReferenceType().acceptVisitor(this);", "+    ", "+    // The expression must not have a primitive type", "+    Class c = (Class) node.getExpression().acceptVisitor(this);", "+    if ((c != null) && c.isPrimitive()) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4d5054f75d92807725c66caa11235e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "     public Object visit(CastExpression node)", "signatureAfterChange": "   public Class visit(CastExpression node)", "diff": ["+   */", "+  public Class visit(CastExpression node) {", "+    Class c = (Class)node.getTargetType().acceptVisitor(this);", "+    checkCastStaticRules(c, (Class)node.getExpression().acceptVisitor(this), node);", "+    ", "+    node.setProperty(NodeProperties.TYPE, c);", "+    return c;", "+  }", "-     */", "-    public Object visit(CastExpression node) {", "-        Class c = (Class)node.getTargetType().acceptVisitor(this);", "-        checkCastStaticRules(c, (Class)node.getExpression().acceptVisitor(this), node);", "-", "-        node.setProperty(NodeProperties.TYPE, c);", "-        return c;", "-    }"]}], "num": 15648}
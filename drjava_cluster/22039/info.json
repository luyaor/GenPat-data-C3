{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41e95d96de4da41ba41473a11bf9fc10", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac67fb79a7e9c8c19ea4c2ab31bf6c68", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["+//    System.err.println(\"compile(\" + defDocs + \") called\");", "+    ", "-      try {", "-        f = doc.getFile();", "-        if (endsWithExt(f, exts)) filesToCompile.add(f);", "-      }", "-      catch (IllegalStateException ise) {", "-        // No file for this document; skip it", "-      }", "+      f = doc.getFile();", "+//      System.err.println(\"File name for \" + doc + \" is \" + f);", "+      if (f == null) continue; // No file for this document; skip it", "+      if (endsWithExt(f, exts)) filesToCompile.add(f);", "+    ", "+//    System.err.println(\"Filtered list of docs to compile: \" + filesToCompile);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de75ff3c4aed07d8f43bca52ebbc3df8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "6a45646226e9121c2e31495774499cc0cdf516c3", "commitAfterChange": "558f3e76b0939d235eb8771fbc6a284d80a06f72", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["+      //System.err.print(\"compiler \" + name + \" check: \");", "+          //System.err.println(\"ok.\");", "+", "+          // can't use getActiveCompiler() because it will call back to", "+          // getAvailableCompiler, forming an infinite recursion!!", "+          if (_activeCompiler == NoCompilerAvailable.ONLY) {", "+            //System.err.println(\"\\tset to active.\");", "+            _activeCompiler = compiler;", "+          }", "+", "+        }", "+        else {", "+          //System.err.println(\"! .isAvailable.\");", "+        //System.err.println(\"failed to load:\");", "+        //t.printStackTrace();", "+        //System.err.println();"]}], "num": 22039}
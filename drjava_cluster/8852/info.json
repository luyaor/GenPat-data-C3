{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e34e8280346f2ed0f678b882f1eaa56", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3191493a1a7d7286dda733b07cb456a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "1902ca9428bb3bc3eae3550e478cc24cc107999e", "commitAfterChange": "c171c7d908dc3eacd710969c309add95e9a47bb0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static <T> ConsVisitor<T, ConsList<? extends T>> reverse()", "signatureAfterChange": "   public static <T> ConsVisitor<T, ConsList<? extends T>> reverse()", "diff": ["-    /** Reverses the list and appends {@code toAppend} to the end of it */", "-    class ReverseHelper extends ConsVisitor<T, ConsList<? extends T>> {", "-      private ConsList<? extends T> _toAppend;", "-      ", "-      public ReverseHelper(ConsList<? extends T> toAppend) { _toAppend = toAppend; }", "-", "-      public ConsList<? extends T> forEmpty(ConsList.Empty<? extends T> list) { return _toAppend; }", "-", "-      public ConsList<? extends T> forNonempty(ConsList.Nonempty<? extends T> list) {", "-        return list.rest().apply(new ReverseHelper(ConsList.cons(list.first(), _toAppend)));", "-      }", "-    }", "-    ", "-    return new ReverseHelper(ConsList.<T>empty());", "+    return new ReverseHelper<T>(ConsList.<T>empty());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a729e901cc463c0804cf934f19f9d4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private Pair<Integer,Integer> parseIntPair(SExp s)", "signatureAfterChange": "      private Pair<Integer,Integer> parseIntPair(SExp s)", "diff": ["-    /**", "-     * we're getting in a \"(select # #)\"", "-     */", "+    ", "+    /* we're getting in a \"(select # #)\" */", "-      public List<Integer> forEmpty(Empty e) {", "-        return intList;", "-      }", "+      public List<Integer> forEmpty(Empty e) { return intList; }", "-    if (li.size() == 2) {", "-      return new Pair<Integer,Integer>(li.get(0), li.get(1));", "-    }else{", "-      throw new PrivateProjectException(\"expected a list of 2 ints for select, found list of size \" + li.size());", "-    }", "+    if (li.size() == 2) return new Pair<Integer,Integer>(li.get(0), li.get(1));", "+    else throw new PrivateProjectException(\"expected a list of 2 ints for select, found list of size \" + li.size());"]}], "num": 8852}
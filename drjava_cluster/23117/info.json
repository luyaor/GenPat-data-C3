{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2ea325b7c7b7a0f8b74b5413864fbc7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240d1542353c86c2c3215db08b7989a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, InvocationTargetException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["-      throws InterruptedException, InvocationTargetException, IOException {", "-    try { return computeInProcess(new ExportRemoteTask(factory), jvmBuilder, onExit).value(); }", "+      throws InterruptedException, ExecutionException, IOException {", "+    Thunk<Remote> task = new ExportRemoteTask(factory);", "+    try { return new ProcessTaskController<Remote>(jvmBuilder, DIRECT_EXECUTOR, task, onExit).get(); }", "+    // an interrupt on this thread translates into a \"cancel\" because DIRECT_EXECUTOR runs the task on this thread", "+    catch (CancellationException e) { throw new InterruptedException(); }", "-      Throwable cause = e.getCause();", "-      if (cause instanceof InterruptedException) { throw (InterruptedException) cause; }", "-      else if (cause instanceof InvocationTargetException) { throw (InvocationTargetException) cause; }", "-      else if (cause instanceof IOException) { throw (IOException) cause; }", "+      if (e.getCause() instanceof IOException) { throw (IOException) e.getCause(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bcf0466989f41aea7a711a84c27dcdf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 98, "signatureBeforeChange": "          public void setUp()", "signatureAfterChange": "          public void setUp()", "diff": ["+      Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>> continuations =", "+        new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "+      LinkedList<Command> fixUps = new LinkedList<Command>();", "+      // The following ensures that essential symbols have been loaded into the symbolTable, a static field of ", "+      // LanguageLevelConverter.", "-                                               \"\", ", "+                                               \"\",", "+                                               \"i.like.monkey\",", "-                                               new LinkedList<String>(), ", "-                                               new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-", "+                                               new HashSet<String>(), ", "+                                               continuations,", "+                                               fixUps);", "-      _errorAdded=false;", "-      LanguageLevelConverter.symbolTable.clear();", "+      _errorAdded = false;", "-      testLLVisitor.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "-      _hierarchy = new Hashtable<String, TypeDefBase>();", "-      testLLVisitor._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "-      testLLVisitor._resetNonStaticFields();", "-      testLLVisitor._importedPackages.add(\"java.lang\");", "+//      _hierarchy = new Hashtable<String, TypeDefBase>();", "+      testLLVisitor._classesInThisFile = new HashSet<String>();", "+      if (! testLLVisitor._importedPackages.contains(\"java.lang\")) testLLVisitor._importedPackages.add(\"java.lang\");"]}], "num": 23117}
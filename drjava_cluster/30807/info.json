{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fc5a3ff5b179582e8431111e18b348a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39e68b9d7bb80f1863ef8baaae2b7895", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringGlyphPainter.java", "commitBeforeChange": "3e1f0b197711c09bcaa8e8cd1c64fcbd3cdc889e", "commitAfterChange": "2b724606da56c514a2b323ed8ed64e67941fe5f2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      void sync(GlyphView v)", "signatureAfterChange": "      void sync(GlyphView v)", "diff": ["-    if ((metrics == null) || (! f.equals(metrics.getFont()))) {", "+    if ((_metrics == null) || (! f.equals(_metrics.getFont()))) {", "-      metrics = kit.getFontMetrics(f);", "+      /* Use of the deprecated method here is necessary to get a handle on", "+       * a FontMetrics object.  This is required by our dependence on the", "+       * javax.swing.text.Utilities class, which does a lot of Java 1.1-style", "+       * calculation (presumably these methods should be deprecated, too).", "+       * The deprecated use can't be fixed without an in-depth understanding", "+       * of fonts, glyphs, and font rendering.  Where _metrics is currently used,", "+       * the Font methods getLineMetrics, getStringBounds, getHeight, getAscent,", "+       * and getDescent will probably be helpful.", "+       */", "+      @SuppressWarnings(\"deprecation\") FontMetrics newMetrics = kit.getFontMetrics(f);", "+      _metrics = newMetrics;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e25b27f7de9fbca2d5cac4e8c3efded3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "   void _gotoFileUnderCursor()", "signatureAfterChange": "   void _gotoFileUnderCursor()", "diff": ["-    if ((docs==null) || (docs.size() == 0)) return; // do nothing", "+    if ((docs == null) || (docs.size() == 0)) return; // do nothing", "-    odd.readLock();", "+    odd.acquireReadLock();", "-        if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+        if (! Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "-        if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "+        if (! Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "-    finally { odd.readUnlock(); }", "+    finally { odd.releaseReadLock(); }", "-        _gotoFileDialog.setVisible(true);", "+        /* The following predicate suppresses the display of the dialog during unit testing.  If the unit test is revised", "+         * to confirm that the dialog is displayed, this test must be removed. */", "+        if (MainFrame.this.isVisible()) _gotoFileDialog.setVisible(true);  // predicate suppresses display in unit tests"]}], "num": 30807}
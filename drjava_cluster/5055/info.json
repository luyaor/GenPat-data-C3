{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b562692def22e9dd56d85668f205339", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69cf2e48107ad04e4219306eae67f454", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "7800062ae81518c3396891f7a26a405437cbcbf7", "commitAfterChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void updateLines(R r)", "signatureAfterChange": "   public void updateLines(R r)", "diff": ["+    if (tail.size() == 0) return;", "+    OrderedDocumentRegion[] tailRegions = tail.toArray(new OrderedDocumentRegion[0]);", "-    for (R region: tail) {", "-      if (region.getStartOffset() == region.getEndOffset()) removeRegion(region);", "+    for (OrderedDocumentRegion region: tailRegions) {", "+      // The following cast is gross, but the silly erasure based generics won't let me execute new R[0]", "+      if (region.getStartOffset() == region.getEndOffset()) removeRegion((R) region);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87c1a30396d4febbb6a1fc9fe277a793", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "fbaecba32a4936f7aab208313b312f73181698a7", "commitAfterChange": "6bd1f449c6b6476464bf38d05b5455668d0d2ac5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void setCacheSize(int size)", "signatureAfterChange": "   public synchronized void setCacheSize(int size)", "diff": ["+    if(size <= 0)", "+    {", "+      throw new IllegalArgumentException(\"Cannot set the cache size to zero or less.\");", "+    }", "-    if (_lru.size() >= CACHE_SIZE) {", "+    DocManager current;", "+    if (_lru.size() > CACHE_SIZE) {", "-      int i = 0;", "+      int i = 1;", "-        it.next();", "-        if (i >= CACHE_SIZE) {", "+        current = it.next();", "+        if (i > CACHE_SIZE) {", "+          current.kickOut();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6302cae54e29716c9494d733031dd11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "   @Override public TypeContext visit(MethodDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(MethodDeclaration node)", "diff": ["+    if (node.getBody() == null) {", "+      setErrorStrings(node, node.getName());", "+      throw new ExecutionError(\"missing.method.body\", node);", "+    }"]}], "num": 5055}
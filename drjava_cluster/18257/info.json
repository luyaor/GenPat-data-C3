{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21cf6dbbc506758d18058583fb8c4c14", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3305ea46b541025b87f8b36f5dc053cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "714a91a3f9a91ffe3e5ee9ae0bd0c977c7aa4e31", "commitAfterChange": "86cce18ff80f67b178e899650f588fd3636436b4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public static void deleteDirectoryOnExit(final File dir)", "signatureAfterChange": "   public static void deleteDirectoryOnExit(final File dir)", "diff": ["-    // Delete this on exit, whether it's a directory or file", "-    dir.deleteOnExit();", "-    // If it's a directory, visit its children.", "-    //  For some reason, this has to be done after calling deleteOnExit", "-    //  on the directory itself.", "+    // Delete this on exit, whether it's a directory or file", "+    _log.log(\"Deleting file/directory \" + dir + \" on exit\");", "+    dir.deleteOnExit(); ", "+    ", "+    // If it's a directory, visit its children.  This recursive walk has to be done AFTER calling deleteOnExit", "+    //  on the directory itself because Java closes the list of files to deleted on exit in reverse order.", "-      if (childFiles!=null) { // listFiles may return null if there's an IO error", "+      if (childFiles != null) { // listFiles may return null if there's an IO error", "+", "+  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf840d03f144f7ebce1a0dcdfdac412", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": "   public Void forSourceFile(SourceFile that)", "signatureAfterChange": "   public Void forSourceFile(SourceFile that)", "diff": ["-   */", "+    */", "-    if (! _importedPackages.contains(\"java.lang\"))", "-      _importedPackages.addFirst(\"java.lang\");", "+    if (! _importedPackages.contains(\"java.lang\")) _importedPackages.addFirst(\"java.lang\");", "-      _classesToBeParsed.put(qualifiedClassName, ", "-                             new Pair<TypeDefBase, LanguageLevelVisitor>(types[i], this));", "+      _log.log(\"Adding \" + qualifiedClassName + \" to _classesToBeParsed\");", "+      _classesToBeParsed.put(qualifiedClassName, new Pair<TypeDefBase, LanguageLevelVisitor>(types[i], this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91c3cf5f2fb596704088fc3398db52a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": "   public boolean closeFiles(List<OpenDefinitionsDocument> docs)", "signatureAfterChange": "   public boolean closeFiles(List<OpenDefinitionsDocument> docs)", "diff": ["+    _log.log(\"closeFiles(\" + docs + \") called\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a56dfabe65607d157d3782214c7c9cb7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": "   public void quit(boolean force)", "signatureAfterChange": "   public void quit(boolean force)", "diff": ["+    _log.log(\"quit(\" + force + \") called\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9b23f4e7b1a117644437a2d4b24335e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected OpenDefinitionsDocument setupDocument(String text) throws BadLocationException", "signatureAfterChange": "   protected OpenDefinitionsDocument setupDocument(String text) throws BadLocationException", "diff": ["-      public void newFileCreated(OpenDefinitionsDocument doc) { newCount++; }", "-      public void activeDocumentChanged(OpenDefinitionsDocument doc) { switchCount++; }", "+      public synchronized void newFileCreated(OpenDefinitionsDocument doc) { newCount++; }", "+      public synchronized void activeDocumentChanged(OpenDefinitionsDocument doc) { switchCount++; }", "-    changeDocumentText(text, doc);", "+    changeDocumentText(text, doc);  // not atomic but no other thread is trying to modify doc", "-//    _log.log(\"New File \" + doc + \" created\");", "+    _log.log(\"New File \" + doc + \" created\");", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff7daa02c09d7e2d0a4a4fc3b2b94187", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/NewJVMTest.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "       public Object forValueResult(ValueResult that)", "signatureAfterChange": "       public Object forValueResult(ValueResult that)", "diff": ["-          //System.out.println(\"notify returned\");", "+          _log.log(\"NewJVMTest: \" + returnBuf + \" returned by interpretResult callback\");"]}], "num": 18257}
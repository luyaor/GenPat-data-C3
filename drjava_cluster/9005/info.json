{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbe9939c2854bef3ad5f27a453e5e503", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c96d11ba8c8736e85d5d6a0994eeba8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r   public void testEmptyFileNoAction()", "signatureAfterChange": "   public void testEmptyFileNoAction()", "diff": ["-   */\r", "-  public void testEmptyFileNoAction() {\r", "-    directory = new File(directory, \"emptyFile\");\r", "-    File[] files = new File[]{ new File(directory, \"EmptyFile.dj0\")};\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(files);\r", "-    \r", "-    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-    assertEquals(\"should be no visitor exceptions\", 0, result.getSecond().size());\r", "-    \r", "-    assertFalse(\"Should be no .java file\", (new File(directory, \"EmptyFile.java\")).exists());\r", "-    \r", "-    \r", "-    \r", "-  }\r", "+   */", "+  public void testEmptyFileNoAction() {", "+    directory = new File(directory, \"emptyFile\");", "+    File[] files = new File[]{ new File(directory, \"EmptyFile.dj0\")};", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    assertEquals(\"should be no visitor exceptions\", 0, result.getSecond().size());", "+    ", "+    assertFalse(\"Should be no .java file\", (new File(directory, \"EmptyFile.java\")).exists());", "+    ", "+    ", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6e9a32b4e54689b86d2541bdaaf63cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public void testPackagedOrderMatters()", "signatureAfterChange": "   public void testPackagedOrderMatters()", "diff": ["-   */\r", "-  public void testPackagedOrderMatters() {\r", "-     File newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"lists-dj2\" + System.getProperty(\"file.separator\") + \"src\" + System.getProperty(\"file.separator\") + \"listFW\");\r", "-     File[] testFiles = new File[]{new File(newDirectory, \"NEList.dj2\"),\r", "-                                   new File(newDirectory, \"MTList.dj2\"),\r", "-                                   new File(newDirectory, \"IList.dj2\")};\r", "-\r", "-          System.out.flush();\r", "-\r", "-      LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-      result = llc.convert(testFiles);\r", "-      \r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      \r", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());\r", "-\r", "-      //don't worry about checking the .java files for correctness...just make sure there weren't any exceptions\r", "-      }\r", "+   */", "+  public void testPackagedOrderMatters() {", "+     File newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"lists-dj2\" + System.getProperty(\"file.separator\") + \"src\" + System.getProperty(\"file.separator\") + \"listFW\");", "+     File[] testFiles = new File[]{new File(newDirectory, \"NEList.dj2\"),", "+                                   new File(newDirectory, \"MTList.dj2\"),", "+                                   new File(newDirectory, \"IList.dj2\")};", "+", "+          System.out.flush();", "+", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+      result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+      ", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      ", "+      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+", "+      //don't worry about checking the .java files for correctness...just make sure there weren't any exceptions", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f757305edd8f8ffb6c31d94aa983b62e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void testOrderMatters()", "signatureAfterChange": "   public void testOrderMatters()", "diff": ["-  /*Make sure that successful compilation is not dependant on visiting the file with no dependencies first.*/\r", "-  public void testOrderMatters() {\r", "-    directory = new File(directory, \"orderMatters\");\r", "-    File[] files = new File[]{ new File(directory, \"Empty.dj0\"), new File(directory, \"List.dj0\"), new File(directory, \"NonEmpty.dj0\") };\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(files);\r", "-    \r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      assertEquals(\"should be 1 visitor exception\", 1, result.getSecond().size());\r", "-      assertEquals(\"the error message should be correct\", \"Could not resolve symbol f\", result.getSecond().getFirst().getFirst());\r", "-    \r", "-  }\r", "+  /*Make sure that successful compilation is not dependant on visiting the file with no dependencies first.*/", "+  public void testOrderMatters() {", "+    directory = new File(directory, \"orderMatters\");", "+    File[] files = new File[]{ new File(directory, \"Empty.dj0\"), new File(directory, \"List.dj0\"), new File(directory, \"NonEmpty.dj0\") };", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      assertEquals(\"should be 1 visitor exception\", 1, result.getSecond().size());", "+      assertEquals(\"the error message should be correct\", \"Could not resolve symbol f\", result.getSecond().getFirst().getFirst());", "+    ", "+  }"]}], "num": 9005}
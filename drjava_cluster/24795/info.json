{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "339c53631c6c6c6fe1d3cf9eb9a63a17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4177025157c6d1f210e5dd44839246de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "3944766b414e9b28f72d0266991dc3ced69d30b0", "commitAfterChange": "30114c083c07270248f814f8a3cab4ee5196d9c1", "methodNumberBeforeChange": 327, "methodNumberAfterChange": 328, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["-          resetModification();", "-          if (! oldFile.equals(file)) {", "-            /* remove regions for this document */", "-            removeFromDebugger();", "-            _breakpointManager.removeRegions(this);", "-            _bookmarkManager.removeRegions(this);", "-            for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "-            clearBrowserRegions();", "-          }", "-          synchronized(_documentsRepos) {", "-            File f = getRawFile();", "-//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "-            // d == this except in some unit tests where documents are not entered in _documentsRepos", "-//            assert d == this;", "-            _documentsRepos.remove(f);", "-            _documentsRepos.put(file, this);", "-          }", "-          setFile(file);", "-          // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "+          if (com.shouldUpdateDocumentState()) {", "+            resetModification();", "+            if (! oldFile.equals(file)) {", "+              /* remove regions for this document */", "+              removeFromDebugger();", "+              _breakpointManager.removeRegions(this);", "+              _bookmarkManager.removeRegions(this);", "+              for (RegionManager<MovingDocumentRegion> rm: getFindResultsManagers()) rm.removeRegions(this);", "+              clearBrowserRegions();", "+            }", "+            synchronized(_documentsRepos) {", "+              File f = getRawFile();", "+//            OpenDefinitionsDocument d = _documentsRepos.get(f);", "+              // d == this except in some unit tests where documents are not entered in _documentsRepos", "+//            assert d == this;", "+              _documentsRepos.remove(f);", "+              _documentsRepos.put(file, this);", "+            }", "+            setFile(file);", "+            ", "+            // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "-          setCachedClassFile(FileOps.NULL_FILE);", "-          checkIfClassFileInSync();", "-          ", "+            setCachedClassFile(FileOps.NULL_FILE);", "+            checkIfClassFileInSync();", "+            ", "-          _notifier.fileSaved(openDoc);", "-          ", "-          // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "-          addDocToClassPath(this);", "-          ", "-          /* update the navigator */", "-          _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "-          ", "-          /* set project changed flag */", "-          setProjectChanged(true);          ", "+            _notifier.fileSaved(openDoc);", "+            ", "+            // Make sure this file is on the appropriate classpaths (does nothing in AbstractGlobalModel)", "+            addDocToClassPath(this);", "+            ", "+            /* update the navigator */", "+            _documentNavigator.refreshDocument(this, fixPathForNavigator(file.getCanonicalPath()));", "+            ", "+            /* set project changed flag */", "+            setProjectChanged(true);          ", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846ab97e144a3e7790e3d1b7730d58f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testDebugSourcepath()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-    DebugTestListener debugListener = new DebugTestListener() {", "-      public void breakpointSet(Breakpoint bp) {", "-        breakpointSetCount++;", "-      }", "-      public void breakpointReached(Breakpoint bp) {", "-        synchronized(_notifierLock) {", "-          breakpointReachedCount++;", "-          if (printEvents) System.out.println(\"breakpointReached \" + breakpointReachedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void breakpointRemoved(Breakpoint bp) {", "-        //synchronized(_notifierLock) {", "-        breakpointRemovedCount++;", "-        if (printEvents) System.out.println(\"breakpointRemoved \" + breakpointRemovedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void stepRequested() {", "-        //synchronized(_notifierLock) {", "-          stepRequestedCount++;", "-          if (printEvents) System.out.println(\"stepRequested \" + stepRequestedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadSuspended() {", "-        synchronized(_notifierLock) {", "-          currThreadSuspendedCount++;", "-          if (printEvents) System.out.println(\"threadSuspended \" + currThreadSuspendedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void currThreadResumed() {", "-        //synchronized(_notifierLock) {", "-        currThreadResumedCount++;", "-        if (printEvents) System.out.println(\"threadResumed \" + currThreadResumedCount);", "-        //  _notifyObject(_notifierLock);", "-        //}", "-      }", "-      ", "-      public void currThreadDied() {", "-        synchronized(_notifierLock) {", "-          currThreadDiedCount++;", "-          if (printEvents) System.out.println(\"threadDied \" + currThreadDiedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber){", "-        synchronized(_notifierLock) {", "-          threadLocationUpdatedCount++;", "-          if (printEvents) System.out.println(\"threadUpdated \" + threadLocationUpdatedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerShutdown() {", "-        synchronized(_notifierLock) {", "-          debuggerShutdownCount++;", "-          if (printEvents) System.out.println(\"debuggerShutdown \" + debuggerShutdownCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "-    };", "+    StepTestListener debugListener = new StepTestListener();", "-      _startup();  //_debugManager.startup();", "+      _debugManager.startup();", "-    // Source is highlighted because doc is on breakpoint object", "+    // Source is highlighted because document is stored in breakpoint", "-    // Source is highlighted because file is on sourcepath", "+    // Source is highlighted because file is now on sourcepath"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a470be59e885618acce788bcb799d86c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AutoCompletePopup.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void show(final Component parent,                    final String title,                    final String initial,                    final int loc,                    final SizedIterable<String> actionNames,                    final SizedIterable<KeyStroke> actionKeyStrokes,                    final int oneMatchActionIndex,                    final Runnable canceledAction,                    final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions)", "signatureAfterChange": "   public void show(final Component parent,                    final String title,                    final String initial,                    final int loc,                    final SizedIterable<String> actionNames,                    final SizedIterable<KeyStroke> actionKeyStrokes,                    final int oneMatchActionIndex,                    final Runnable canceledAction,                    final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions)", "diff": ["-                   final SizedIterable<Runnable4<String,String,Integer,Integer>> acceptedActions) {", "+                   final SizedIterable<Runnable3<AutoCompletePopupEntry,Integer,Integer>> acceptedActions) {", "-        ClassNameAndPackageEntry currentEntry = null;", "-        HashSet<ClassNameAndPackageEntry> set;", "-        if ((DrJava.getConfig().getSetting(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES).booleanValue()) &&", "-            (_mainFrame.getCompleteClassSet().size() > 0)) {", "-          set = new HashSet<ClassNameAndPackageEntry>(_mainFrame.getCompleteClassSet());", "-        }", "-        else {", "-          set = new HashSet<ClassNameAndPackageEntry>(docs.size());", "-          for(OpenDefinitionsDocument d: docs) {", "-            if (d.isUntitled()) continue;", "-            String str = d.toString();", "-            if (str.lastIndexOf('.')>=0) {", "-              str = str.substring(0, str.lastIndexOf('.'));", "-            }", "-            GoToFileListEntry entry = new GoToFileListEntry(d, str);", "-            if (d.equals(_mainFrame.getModel().getActiveDocument())) currentEntry = entry;", "-            set.add(entry);", "+        AutoCompletePopupEntry currentEntry = null;", "+        _docEntries.clear();", "+        for(OpenDefinitionsDocument d: docs) {", "+          if (d.isUntitled()) continue;", "+          String str = d.toString();", "+          if (str.lastIndexOf('.')>=0) {", "+            str = str.substring(0, str.lastIndexOf('.'));", "+          GoToFileListEntry entry = new GoToFileListEntry(d, str);", "+          if (d.equals(_mainFrame.getModel().getActiveDocument())) currentEntry = entry;", "+          _docEntries.add(entry);", "-          addJavaAPIToSet(set);", "+          addJavaAPI();", "-        final PredictiveInputModel<ClassNameAndPackageEntry> pim = ", "-          new PredictiveInputModel<ClassNameAndPackageEntry>(true, new PrefixStrategy<ClassNameAndPackageEntry>(), set);", "+        final PredictiveInputModel<AutoCompletePopupEntry> pim = ", "+          new PredictiveInputModel<AutoCompletePopupEntry>(true, new PrefixStrategy<AutoCompletePopupEntry>(), _allEntries);", "-                Iterator<Runnable4<String,String,Integer,Integer>> actionIt =", "+                Iterator<Runnable3<AutoCompletePopupEntry,Integer,Integer>> actionIt =", "-                Runnable4<String,String,Integer,Integer> action;", "+                Runnable3<AutoCompletePopupEntry,Integer,Integer> action;", "-                action.run(pim.getCurrentItem().getClassName(),", "-                           pim.getCurrentItem().getFullPackage()+pim.getCurrentItem().getClassName(),", "-                           finalStart, loc);", "+                action.run(pim.getCurrentItem(), finalStart, loc);", "-        final PredictiveInputFrame<ClassNameAndPackageEntry> completeWordDialog = ", "+        final PredictiveInputFrame<AutoCompletePopupEntry> completeWordDialog = ", "-        final ClassNameAndPackageEntry finalCurrentEntry = currentEntry;", "+        final AutoCompletePopupEntry finalCurrentEntry = currentEntry;", "+            ", "+            if (_lastState != null) {", "+              completeWordDialog.setFrameState(_lastState);", "+            }", "+            "]}], "num": 24795}
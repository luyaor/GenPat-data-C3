{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce73428b1447165e09b0c5dfff2a779f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b45ef329921e4f39af717e85dab8657", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": "     private void visitExpressionContainer(ExpressionContainer node)", "signatureAfterChange": "   private void visitExpressionContainer(ExpressionContainer node)", "diff": ["+   */", "+  private void visitExpressionContainer(ExpressionContainer node) {", "+    Expression exp = node.getExpression();", "+    Node o = exp.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,exp);", "+      node.setExpression((Expression)o);", "+    }", "+  }", "-     */", "-    private void visitExpressionContainer(ExpressionContainer node) {", "-\tExpression exp = node.getExpression();", "-\tObject o = exp.acceptVisitor(this);", "-\tif (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.expression\", exp);", "-\t    }", "-\t    node.setExpression((Expression)o);", "-\t}", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "556443cbf76edd38f3c654ab1efe00d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Node visit(VariableDeclaration node)", "diff": ["+   */", "+  public Node visit(VariableDeclaration node) {", "+    // Define the variable", "+    String s = node.getName();", "+    if (context.isDefinedVariable(s)) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { s });", "+      throw new ExecutionError(\"variable.redefinition\", node);", "+    }", "+    ", "+    if (node.isFinal()) {", "+      context.defineConstant(s, null);", "+    } else {", "+      context.define(s, null);", "+    }", "+    ", "+    // Visit the initializer", "+    Node n = node.getInitializer();", "+    if (n != null) {", "+      Node o = n.acceptVisitor(this);", "+      if (o != null) {", "+        rejectReferenceType(o,n);", "+        node.setInitializer((Expression)o);", "+      }", "+    } ", "+    return null;", "+  }", "-     */", "-    public Object visit(VariableDeclaration node) {", "-\t// Define the variable", "-\tString s = node.getName();", "-        if (context.isDefinedVariable(s)) {", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t     new String[] { s });", "-            throw new ExecutionError(\"variable.redefinition\", node);", "-        }", "-", "-        if (node.isFinal()) {", "-            context.defineConstant(s, null);", "-        } else {", "-            context.define(s, null);", "-        }", "-", "-\t// Visit the initializer", "-\tNode n = node.getInitializer();", "-        if (n != null) {", "-            Object o = n.acceptVisitor(this);", "-            if (o != null) {", "-\t\tif (o instanceof ReferenceType) {", "-                    throw new ExecutionError(\"malformed.expression\", n);", "-\t\t}", "-\t\tnode.setInitializer((Expression)o);", "-            }", "-\t}\t", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5034378d29a0f826dae8639f828da4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public Object visit(ArrayAccess node)", "signatureAfterChange": "   public Node visit(ArrayAccess node)", "diff": ["+   */", "+  public Node visit(ArrayAccess node) {", "+    visitExpressionContainer(node);", "+    ", "+    // Visits the cell number expression", "+    Node   n = node.getCellNumber();", "+    Node o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setCellNumber((Expression)o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(ArrayAccess node) {", "-\tvisitExpressionContainer(node);", "-", "-        // Visits the cell number expression", "-\tNode   n = node.getCellNumber();", "-        Object o = n.acceptVisitor(this);", "-\tif (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setCellNumber((Expression)o);", "-\t}", "-\treturn null;", "-    }"]}], "num": 25616}
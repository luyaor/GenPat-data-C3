{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83c17e8ccb06d37dc7dc32d25da06286", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "300b9433c7e465b7c2828cc491ed0c50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "14ecd0c683c3a654631edbe7cd556951ec682439", "commitAfterChange": "b4e48852da60211c31b0141438d3f04d6c627263", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void createPopupMenu()", "signatureAfterChange": "   private void createPopupMenu()", "diff": ["-      ", "-      // Watch", "-      /*", "-      JMenuItem watchItem = new JMenuItem(\"Add Watch\");", "-      watchItem.addActionListener( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae ) {", "-          //Make sure that the watch is set on the *clicked* line, if within a selection block.", "-          setCaretPosition(viewToModel(_popupMenuMA.getLastMouseClick().getPoint()));", "-          _mainFrame.debuggerAddWatch();", "-        }", "-      });", "-      _addWatchMenuItem = _popMenu.add(watchItem);", "-      _addWatchMenuItem.setEnabled(false);", "-      */", "-    /*", "-     * Flag to enable various presets for testing the functionality of highlights", "-     */", "-    boolean functionTest = false;", "-    ", "-    if (functionTest) {", "-      ", "-      JMenuItem highlightItem1 = new JMenuItem(\"Add Error\");", "-      highlightItem1.addActionListener ( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae) {", "-          _highlightTest1();", "-        }", "-      });", "-      _popMenu.add(highlightItem1);", "-      ", "-      JMenuItem highlightItem2 = new JMenuItem(\"Add Breakpoint\");", "-      highlightItem2.addActionListener ( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae) {", "-          _highlightTest2();", "-        }", "-      });", "-      _popMenu.add(highlightItem2);", "-      ", "-      JMenuItem highlightItem5= new JMenuItem(\"Add Selection\");", "-      highlightItem5.addActionListener ( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae) {", "-          _highlightTest5();", "-        }", "-      });", "-      _popMenu.add(highlightItem5);", "-      ", "-      JMenuItem highlightItem3 = new JMenuItem(\"Remove Error\");", "-      highlightItem3.addActionListener ( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae) {", "-          _highlightTest3();", "-        }", "-      });", "-      _popMenu.add(highlightItem3);", "-      ", "-      JMenuItem highlightItem4= new JMenuItem(\"Remove Breakpoint\");", "-      highlightItem4.addActionListener ( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae) {", "-          _highlightTest4();", "-        }", "-      });", "-      _popMenu.add(highlightItem4);", "-      ", "-      JMenuItem highlightItem6 = new JMenuItem(\"Remove Selection\");", "-      highlightItem6.addActionListener ( new AbstractAction() {", "-        public void actionPerformed( ActionEvent ae) {", "-          _highlightTest6();", "-        }", "-      });", "-      _popMenu.add(highlightItem6);", "-    }", "-    ", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb6d8e64ce239f32429bf8c8c4d05a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-    String commented =", "+    final String commented =", "-    final int newPos = 20;", "-    ", "-    // The following statement hung when run in the main test thread.  There must be a pending access to doc in a", "-    // task on the event queue that sometimes has not yet executed.", "-    ", "-    Utilities.invokeAndWait(new Runnable() { public void run() { doc.append(text, null); } });", "-    Utilities.clearEventQueue();", "-    ", "-    assertEquals(\"insertion\", text, doc.getText());", "-    // I can't run the test here because I'm not sure how to select the text so that we can comment it.", "-", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "-     ", "-    doc.acquireWriteLock();", "-    try { doc.commentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "-    ", "-    //    pane.endCompoundEdit();", "-    assertEquals(\"commenting\", commented, doc.getText());", "-    ", "-    int oldPos = pane.getCaretPosition();", "+    // I can't run the test here because I'm not sure how to select the text so that we can comment it", "-        pane.setCaretPosition(newPos); ", "-        _frame.validate();", "-      } ", "+        doc.append(text, null);", "+        assertEquals(\"insertion\", text, doc.getText());", "+//        System.err.println(\"Compound? \" + pane._inCompoundEdit);", "+//        System.err.println(\"After append, loc = \" + doc.getCurrentLocation());", "+        pane.endCompoundEdit();", "+        doc.commentLines(0, doc.getLength()); ", "+", "+        assertEquals(\"commenting\", commented, doc.getText());", "+        int newPos = doc.getCurrentLocation();", "+//        System.err.println(\"newPos = \" + newPos);", "+", "+        doc.getUndoManager().undo(); ", "+//        System.err.println(\"cursor pos = \" + doc.getCurrentLocation());", "+//        int pos = doc.getCurrentLocation();", "+        assertEquals(\"undo commenting\", text, doc.getText());", "+//        System.err.println(\"cursor pos = \" + pos + \"\\n\");", "+//        // doc.commentLines moves the cursor to 0 before inserting wing comment chars", "+//", "+//        assertTrue(\"dummy test\", true);", "+//        System.err.println(\"undone text = '\" + doc.getText() + \"'\");", "+//        assertTrue(\"dummy test\", true);", "+", "+        assertEquals(\"undoing commenting restores cursor position\", 0, doc.getCurrentLocation());", "+        ", "+        doc.getUndoManager().redo();", "+        assertEquals(\"redo commenting\", commented, doc.getText());", "+        assertEquals(\"redoing commenting restores cursor position\", newPos, doc.getCurrentLocation());", "+", "+        pane.endCompoundEdit(); ", "+        doc.uncommentLines(0, doc.getLength()); ", "+        assertEquals(\"uncommenting\", text, doc.getText());", "+", "+        _redoPos = doc.getCurrentLocation();  ", "+    ", "+        doc.getUndoManager().undo();", "+        ", "+      } });", "+    ", "+    // undo may spawn new events that fix up the value of _currentLocation; must break our of invokeAndWait to let", "+    // them execute", "+", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        ", "+//        System.err.println(\"cursor pos = \" + doc.getCurrentLocation());", "+    ", "+        assertEquals(\"undo uncommenting\", commented, doc.getText());", "+//        System.err.println(\"cursor pos = \" + doc.getCurrentLocation());", "+", "+        // doc.uncommentLines moves the cursor to 0 before removing the wing comment chars", "+        assertEquals(\"undoing uncommenting restores cursor position\", 0, doc.getCurrentLocation());", "+    ", "+        doc.getUndoManager().redo();", "+        assertEquals(\"redo uncommenting\",text, doc.getText());", "+        assertEquals(\"redoing uncommenting restores cursor position\", _redoPos, doc.getCurrentLocation());", "+                                                        ", "+//        fail(\"print System.err\");", "+      }", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().undo();  ", "-    assertEquals(\"undo commenting\", text, doc.getText());", "-    assertEquals(\"undoing commenting restores caret position\", oldPos, pane.getCaretPosition());", "-    ", "-    // Perturb the caret position and redo", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().redo();", "-    assertEquals(\"redo commenting\", commented, doc.getText());", "-    assertEquals(\"redoing commenting restores caret position\", oldPos, pane.getCaretPosition());", "-    ", "-    // Need to do this here since the commentLines action in MainFrame usually takes care of this.  ", "-    // I can't simulate a keystroke here because I'm not sure how to select the text so that we can comment it.", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.acquireWriteLock();", "-    try { doc.uncommentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "-    ", "-    //    pane.endCompoundEdit();", "-    assertEquals(\"uncommenting\", text, doc.getText());", "-    ", "-    oldPos = pane.getCaretPosition();  // executing this method call outside of the event thread is borderline", "-    ", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos);  } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().undo();", "-    ", "-    assertEquals(\"undo uncommenting\", commented, doc.getText());", "-    assertEquals(\"undoing uncommenting restores caret position\", oldPos, pane.getCaretPosition());", "-    ", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().redo();", "-    assertEquals(\"redo uncommenting\",text, doc.getText());", "-    assertEquals(\"redoing uncommenting restores caret position\", oldPos, pane.getCaretPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99c6cfaa7c4f0d3976472363dc7a562d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "      public FileGroupingState _makeFlatFileGroupingState()", "signatureAfterChange": "      protected FileGroupingState makeFlatFileGroupingState()", "diff": ["-  public FileGroupingState _makeFlatFileGroupingState() {", "-    return new FileGroupingState() {", "-      public File getBuildDirectory() { return null; }", "-      public boolean isProjectActive() { return false; }", "-      public boolean isInProjectPath(OpenDefinitionsDocument doc) { return false; }", "-      public File getProjectFile() { return null; }", "-      public void setBuildDirectory(File f) {", "-        // noop, this action is not applicable for flat file", "-      }", "-      public File[] getProjectFiles() { return null; }", "-      public boolean isProjectFile(File f) { return false; }", "-      public File getMainClass() { return null; }", "-      public void setJarMainClass(File f) {", "-        // noop, this action is not applicable for flat file", "-      }", "-      ", "-      public boolean isProjectChanged() { return false; }", "-      ", "-      public void setProjectChanged(boolean changed) { /* Do nothing  */  }", "-      ", "-      public boolean isAuxiliaryFile(File f) { return false; }", "-      ", "-      //throws UnsupportedOperationException", "-      public void compileAll() {", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not suport compilation\");", "-      }", "-      ", "-      //throws UnsupportedOperationException", "-      public void junitAll() { ", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not support unit tests\");", "-      }", "-      public void cleanBuildDirectory() throws FileMovedException, IOException {", "-        //System.out.println(\"not cleaning\");", "-      }", "-      /** Jars all the open files. ", "-       throws UnsupportedOperationException */", "-      public void jarAll() { ", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not support jarring\");", "-      }", "-      ", "-      /* Flat grouping states have no extra entries. */", "-      public ClasspathVector getExtraClasspath() { return new ClasspathVector(); }", "-      ", "-      public void setExtraClasspath(ClasspathVector cp) {", "-        throw new UnsupportedOperationException(\"Flat grouping states do not have extra classpath entries.\");", "-      }", "-    };", "+  protected FileGroupingState makeFlatFileGroupingState() { return new FlatFileGroupingState(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3dd5818e84456433713e0da8500377e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ColorOptionComponent.java", "commitBeforeChange": "27c256ec9281e0464172656b15ccb73506c1cbc1", "commitAfterChange": "efe2cdfa860877c37343dbc5d29e380b33344492", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ColorOptionComponent(ColorOption opt, String text, Frame parent,                               boolean isBackgroundColor)", "signatureAfterChange": "   public ColorOptionComponent(ColorOption opt, String text, Frame parent,                               boolean isBackgroundColor)", "diff": ["-                              boolean isBackgroundColor)", "-  {", "+                              boolean isBackgroundColor) {", "+    this(opt, text, parent, isBackgroundColor, false);", "+  }"]}], "num": 29438}
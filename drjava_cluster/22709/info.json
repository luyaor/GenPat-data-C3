{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aeaa567c8f3bb0c26c9ac0ca8bcec0b7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061e0ef7d5effa7025e5282af326c40a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "391e45139a20d29595a89151324a2e220b5d12fb", "commitAfterChange": "b3945c97981b1413d538a04b218b57bbc9b0fda9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public String transformCommands(String interactionsString)", "signatureAfterChange": "   public String transformCommands(String interactionsString)", "diff": ["-    if (interactionsString.startsWith(\"mint \") ||", "+    if (interactionsString.startsWith(\"applet \")) {", "+      throw new RuntimeException(\"Applets not supported by Mint.\");", "+    }", "+    if (interactionsString.startsWith(\"run \") ||", "+        interactionsString.startsWith(\"applet \") ||", "+        interactionsString.startsWith(\"mint \") ||"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "170a9ec9ff30375d59e205c270108d5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "commitAfterChange": "608d05e2a10d21cbc190b09334cd60b3c39fbc37", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 123, "signatureBeforeChange": "   public String userRepresentation(Type t)", "signatureAfterChange": "      public String userRepresentation(Iterable<? extends Type> ts)", "diff": ["-   */", "-  public String userRepresentation(Type t) {", "+  ", "+  public String userRepresentation(Iterable<? extends Type> ts) {", "-    dumpType.run(t);", "+    boolean first = true;", "+    for (Type t : ts) {", "+      if (first) { first = false; }", "+      else { result.append(\", \"); }", "+      dumpType.run(t);", "+    }", "-      result.append(\" (\");", "+      result.append(\" [\");", "-      result.append(\")\");", "+      result.append(\"]\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2274986a18cc4ee97dfd75e747ae3762", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e8f4cbce06d140e9a09dd38237b848b4f27d8a", "commitAfterChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 139, "signatureBeforeChange": "   public void generateJavaAPIList()", "signatureAfterChange": "   public void generateJavaAPIList()", "diff": ["+      ", "+      // the string that will be ADDED to the beginning of the link to form the full URL", "+      ", "+      // the string that will be REMOVED from the beginning of the link to form the fully-qualified class name", "+      String stripPrefix = \"\";", "+      ", "+      // the HTML file name that contains all the links", "+        stripPrefix = \"\"; // nothing needs to be stripped, links in 1.3 Javadoc are relative", "+        stripPrefix = \"\"; // nothing needs to be stripped, links in 1.4 Javadoc are relative", "+        stripPrefix = \"\"; // nothing needs to be stripped, links in 1.5 Javadoc are relative", "-        base = \"\";", "+        base = \"\"; // links in 1.6 Javadoc are absolute, so nothing needs to be added to get an absolute URL", "+        // but we do need to strip the absolute part to get correct fully-qualified class names", "+        // and we take the default string here, not what the user entered, because the links in", "+        // our allclasses-1.6.html file go to the original Sun website.", "+        stripPrefix = JAVADOC_1_6_LINK.getDefaultString() + \"/\";", "-              String fullClassName = link.replace('/', '.');", "+              String fullClassName = link.substring(stripPrefix.length()).replace('/', '.');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af98087130c581ff885d8ea62577ad7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "0af0c72004872701891228fa18659a3204fb6e2f", "commitAfterChange": "b121ed20db87231f3836df8854d99256d5781f05", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private static FullVersion guessVersion(File f)", "signatureAfterChange": "      private static FullVersion guessVersion(File f)", "diff": ["-      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor); }", "-      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor); }", "-      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor); }", "+      if (name.startsWith(\"jdk-\")) {", "+        result = JavaVersion.parseFullVersion(parsedVersion = name.substring(4),vendor,vendor);", "+      }", "+      else if (name.startsWith(\"jdk\")) {", "+        result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor);", "+      }", "+      else if (name.startsWith(\"j2sdk\")) {", "+        result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor);", "+      }", "+      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) {", "+        result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bb428d73d0bc9ab5e627349af356149", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "deb4bbe3644e2d17508378353337903e5f2c956b", "commitAfterChange": "f9f9b40d76f2ccbda12717eda0af359f2105ef7b", "methodNumberBeforeChange": 403, "methodNumberAfterChange": 403, "signatureBeforeChange": "   public File getSaveFile(JFileChooser jfc) throws OperationCanceledException", "signatureAfterChange": "   public File getSaveFile(JFileChooser jfc) throws OperationCanceledException", "diff": ["+    File previous = null;", "-    //if (active.isUntitled()) {", "-    try {", "-      String className = active.getFirstTopLevelClassName();", "-      if (!className.equals(\"\")) {", "-        jfc.setSelectedFile(new File(jfc.getCurrentDirectory(), className));", "+    if (active.isUntitled()) {", "+      try {", "+        String className = active.getFirstTopLevelClassName();", "+        if (!className.equals(\"\")) {", "+          jfc.setSelectedFile(new File(jfc.getCurrentDirectory(), className));", "+        }", "+      }", "+      catch (ClassNameNotFoundException e) {", "+        // Don't set selected file", "-    catch (ClassNameNotFoundException e) {", "-      // Don't set selected file", "+    else {", "+      // not untitled, select previous name", "+      previous = active.getRawFile();", "+      jfc.setSelectedFile(previous);", "-    return getChosenFile(jfc, rc);", "+    return getChosenFile(jfc, rc, previous);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cad78b8c2f4d3cdbb5b849cffc663cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 110, "signatureBeforeChange": "     public boolean isModifiedOnDisk()", "signatureAfterChange": "     public boolean isModifiedOnDisk()", "diff": ["-      return getDocument().isModifiedOnDisk();", "+      boolean ret = false;", "+      try {", "+        getDocument().aquireReadLock();", "+        if (_file == null) {", "+        } else {", "+          ret = (_file.lastModified() > _timestamp);", "+        }", "+      }", "+      finally {", "+        getDocument().releaseReadLock();", "+      }", "+      return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e461ad938e2eac3db11385f167c79c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "6e331e9844f73cd6f98ef32e034b0175583aeba8", "commitAfterChange": "6730b2e413a99565d4307ad95e1ac5e98eebdf83", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "   synchronized public void compile(OpenDefinitionsDocument doc)       throws IOException", "signatureAfterChange": "   synchronized public void compile(OpenDefinitionsDocument doc)       throws IOException", "diff": ["+    File buildDir = null;", "+    if (doc.isProjectFile()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+    }", "+    ", "-          _compileFiles(sourceRoots, files);", "+          _compileFiles(sourceRoots, files, buildDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a98c218d84b2a4a1f57071002aba4fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "commitAfterChange": "798fcd5fdec1efc6698cb1c49cd62bdab41daffc", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   final public List<FormalParameter> formalParameters() throws ParseException", "signatureAfterChange": "   final public List<FormalParameter> formalParameters() throws ParseException", "diff": ["+    FormalParameter lastVarArgsParam = null;", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FINAL:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case SHORT:", "-    case IDENTIFIER:", "+    if (jj_2_15(2147483647)) {", "+    } else {", "+      ;", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case BOOLEAN:", "+    case BYTE:", "+    case CHAR:", "+    case DOUBLE:", "+    case FINAL:", "+    case FLOAT:", "+    case INT:", "+    case LONG:", "+    case SHORT:", "+    case IDENTIFIER:", "+      lastVarArgsParam = varArgsFormalParameter();", "+           lastFormalParameterIsVarArgs = (lastVarArgsParam != null);", "+           if(lastFormalParameterIsVarArgs) {", "+             list.add(lastVarArgsParam);", "+           }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8347283ea0d24f37182e06c41696a4cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "signatureAfterChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "diff": ["-      final File file = new File(filesToOpen[i]);", "+      String currFileName = filesToOpen[i];", "+      boolean isProjectFile = currFileName.endsWith(\".pjt\");", "+      final File file = new File(currFileName);", "-        mf.getModel().openFile(command);", "+        if (isProjectFile) {", "+          mf.openProject(command);", "+        }", "+        else {", "+          mf.getModel().openFile(command);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963f92582e20dd1e51bbd3db277da9db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevLinePlus.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-", "+      String prefix;", "+      ", "-        String prefix = doc.getText(startPrevLine, firstChar - startPrevLine);", "-        doc.setTab(prefix + _suffix, here);", "+        String prevPrefix = doc.getText(startPrevLine, firstChar - startPrevLine);", "+        prefix = prevPrefix + _suffix;", "-      else {", "-        // On first line", "-        doc.setTab(_suffix, here);", "-      }", "+      else prefix = _suffix;  // On first line", "+      ", "+      if (AbstractDJDocument.hasOnlySpaces(prefix)) doc.setTab(prefix.length(), here);", "+      else doc.setTab(prefix, here);", "+      ", "-    catch (BadLocationException e) {", "-      // Shouldn't happen", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); } // Shouldn't happen"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a704a62d7bc77bb02157fc556f13686e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionParseException.java", "commitBeforeChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "commitAfterChange": "442c59b932709a9e16b8bf4afb9e7306f5a80d8b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["+    OptionParseException ope = this;", "+    if (causes!=null) {", "+      if (causes.length!=1) return \"Could not parse configuration options.\";", "+      ope = causes[0];", "+    }", "-    sb.append(key);", "+    sb.append(ope.key);", "-    sb.append(value);", "+    sb.append(ope.value);", "-    sb.append(message);", "+    sb.append(ope.message);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a93d6c60d4034d191fea03a8e7e44dba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PathClassLoader.java", "commitBeforeChange": "65f321398af60af439b02583f002515a69ff1dba", "commitAfterChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override protected Class<?> findClass(String name) throws ClassNotFoundException", "signatureAfterChange": "      @Override protected Class<?> findClass(String name) throws ClassNotFoundException", "diff": ["-        byte[] bytes = IOUtil.toByteArray(resource.openStream());", "-        ", "-        // define package", "-        definePackageForClass(name);", "-      ", "-        return defineClass(name, bytes, 0, bytes.length);", "+        InputStream stream = resource.openStream();", "+        try {", "+          byte[] bytes = IOUtil.toByteArray(stream);", "+          Class<?> result = defineClass(name, bytes, 0, bytes.length);", "+          definePackageForClass(name);", "+          return result;", "+        }", "+        finally { stream.close(); }", "-      catch (IOException e) { throw new ClassNotFoundException(); }", "+      catch (IOException e) { throw new ClassNotFoundException(\"Can't access class file\", e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc371d1533fd45fbf62557a59c92179", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "c6a161a5a4f58810a30c95aeb5df1cdc34d75882", "commitAfterChange": "f28cc1df1806224e361f5125bf0fdd8c055cbda8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static void initializeLogs()", "signatureAfterChange": "   public static void initializeLogs()", "diff": ["-    debug = makeLog(System.getProperty(\"plt.debug.log\", \"void\"), \"Debug\");", "-    error = makeLog(System.getProperty(\"plt.error.log\", \"void\"), \"Error\");", "+    String debugProp = System.getProperty(\"plt.debug.log\");", "+    debug = (debugProp == null) ? VoidLog.INSTANCE : makeLog(debugProp, \"Debug\");", "+    String errorProp = System.getProperty(\"plt.error.log\");", "+    error = (errorProp == null) ? VoidLog.INSTANCE : makeLog(errorProp, \"Error\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2730c1c0f1a442dd7619c8867da0bfe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(final String[] args)", "signatureAfterChange": "   public static void main(final String[] args)", "diff": ["-        if (CodeStatus.DEVELOPMENT) {", "-          UIManager.setLookAndFeel(_config.getSetting(LOOK_AND_FEEL));", "+        String configLAFName = _config.getSetting(LOOK_AND_FEEL);", "+        String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "+        if (!configLAFName.equals(currLAFName)) {", "+          UIManager.setLookAndFeel(configLAFName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb11f29d1373cb0578f57f861d6e6e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "commitAfterChange": "462c4a613a015a2dbcac948815ea1318bb028f22", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message,                                     String stackTrace, String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String exceptionClass, String message,                                     String stackTrace, String styleName)", "diff": ["-", "+      ", "-      insertText(getDocLength(),", "-                 exceptionClass + \": \" + message + \"\\n\", styleName);", "+      String c = exceptionClass;", "+      if(c.indexOf('.') != -1) ", "+        c = c.substring(c.lastIndexOf('.')+1,c.length());      ", "+      insertText(getDocLength(), c + \": \" + message + \"\\n\", styleName);", "+      ", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8dbdf1fec7eeb84c0103651a359b2f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "73b7f0a42ebcf824c132189e958d58c40bbacf0e", "commitAfterChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected void updateButtons()", "signatureAfterChange": "   protected void updateButtons()", "diff": ["+    OpenDefinitionsDocument odd = null;", "+    if (_doc!=null) { odd = _doc.get(); }", "+    _findAgainButton.setEnabled((odd!=null) || _searchAll);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcacb6b4959d480f0dc73b5c6f2e3272", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/javadoc/DefaultJavadocModel.java", "commitBeforeChange": "43f44f4c8f4836b9b47858083bf7fd620a01ca0f", "commitAfterChange": "49fbb04f9de74558b9f313ec344990376732d8ce", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefaultJavadocModel(GlobalModel model, File javaCommand, Iterable<File> toolsPath)", "signatureAfterChange": "   public DefaultJavadocModel(GlobalModel model, File javaCommand, Iterable<File> toolsPath)", "diff": ["-    _javaCommand = javaCommand;", "-    _toolsPath = toolsPath;", "+    JVMBuilder builder = JVMBuilder.DEFAULT;", "+    if (javaCommand != null) { builder = builder.javaCommand(javaCommand); }", "+    if (toolsPath != null) { builder = builder.classPath(toolsPath); }", "+    _jvmBuilder = builder;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4e2e5de8087b6e5cfc162ac53b4234f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "0b6da37c0a798afe2afb46cf4cce8524728787cf", "commitAfterChange": "1488cfa1471a9b7ff0b87e0f4602a34d07f0dde9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   protected static Method selectTheMostSpecificMethod(List<Method> list)", "signatureAfterChange": "   protected static Method selectTheMostSpecificMethod(List<Method> list)", "diff": ["+    while(TigerUtilities.isBridge(best)){", "+\tif(it.hasNext()){", "+\t    best=it.next();", "+\t}", "+\telse{", "+\t    return null;  //as if the list were empty, indicating nothing in the list could be used, shouldnt really happen, but added for completion.", "+\t}", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75b637106669d1a48d3a10ed1cd5a32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FileOptionComponent.java", "commitBeforeChange": "5b5854a74ae4104fe98919ec137a82ddfe0b03d0", "commitAfterChange": "1ee842fd21d172ce428a3353cc0f74580e95bff8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public boolean updateConfig()", "signatureAfterChange": "   public boolean updateConfig()", "diff": ["-    if (!chooseFileFromField()) {", "-      return false;", "-    }", "-", "+    File componentFile = _component.getFileFromField();", "-    if (!_file.equals(currentFile)) {", "-      DrJava.getConfig().setSetting(_option, _file);", "+    ", "+    if (componentFile != null && !componentFile.equals(currentFile)) {", "+      DrJava.getConfig().setSetting(_option, componentFile);", "+    }", "+    else if (componentFile == null) {", "+      DrJava.getConfig().setSetting(_option, _option.getDefault());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec7fad0e6aa00e49dd1a645c62205a5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "dbdd53c636f6618ffbae999ad0ee607bc3e2b6a3", "commitAfterChange": "689d9f23e5437e0982e3819c2bbd111dd456dac2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void declareMemberStaticImport(String member)", "signatureAfterChange": "     public void declareMemberStaticImport(String member)", "diff": ["+      Class c;", "-        Class.forName(member, true, classLoader);", "+        c = Class.forName(member, true, classLoader);", "-        findInnerClass(member);", "+        c = findInnerClass(member);", "-      declareClassImport(member);", "-      foundSomethingToImport = true;", "+      if(isPublicAndStatic(c.getModifiers())) {", "+        declareClassImport(member);", "+        foundSomethingToImport = true;", "+      }", "-      singleTypeImportStaticFieldClauses.remove(f);", "-      singleTypeImportStaticFieldClauses.add(0,f);", "-      foundSomethingToImport = true;", "+      if(isPublicAndStatic(f.getModifiers())) {", "+        singleTypeImportStaticFieldClauses.remove(f);", "+        singleTypeImportStaticFieldClauses.add(0,f);", "+        foundSomethingToImport = true;", "+      }", "-          singleTypeImportStaticMethodClauses.remove(m);", "-          singleTypeImportStaticMethodClauses.add(0,m);", "-          foundSomethingToImport = true;", "+          if(isPublicAndStatic(m.getModifiers())) {", "+            singleTypeImportStaticMethodClauses.remove(m);", "+            singleTypeImportStaticMethodClauses.add(0,m);", "+            foundSomethingToImport = true;", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9737ec14385ef6d325fe3ec5f20f7a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-openjdk6/edu/rice/cs/drjava/model/compiler/Javac160OpenJDKCompiler.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    public String getName()", "signatureAfterChange": "    public String getName()", "diff": ["-  public String getName() { return \"OpenJDK \" + _version.versionString(); }", "+  public String getName() {", "+    String versionString = _version.toString();", "+    String prefix = \"Java \";", "+    if (versionString.startsWith(prefix)) versionString = versionString.substring(prefix.length());", "+    return \"OpenJDK \" + versionString;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff004ac2dd50c2ea90a979580a648fa1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "commitAfterChange": "442c59b932709a9e16b8bf4afb9e7306f5a80d8b", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public static Date getBuildTime(URL url, Box<String> versionStringRef)", "signatureAfterChange": "   public static Date getBuildTime(URL url, Box<String> versionStringRef)", "diff": ["+      // remove \"weekly-\" prefix", "+      final String WEEKLY_PREFIX = \"weekly-\";", "+      if (line.startsWith(WEEKLY_PREFIX)) { line = line.substring(WEEKLY_PREFIX.length()); }"]}], "num": 22709}
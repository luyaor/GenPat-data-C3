{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4599186c5e0b73550b96c984bff744cb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d0edfba0cad0ac39aae2a22c7fd1a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelTest.java", "commitBeforeChange": "b400b9a6647834c824c840f4cbeb6ad51c113120", "commitAfterChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testInsertGapAfterGap()", "signatureAfterChange": "  \tpublic void testInsertGapAfterGap()", "diff": ["-\t\t\tassertTrue(\"#0.0\", model1._cursor.atEnd());", "-\t\t\tassertTrue(\"#0.1\", model1._cursor.prevItem().isGap());", "-\t\t\tassertEquals(\"#0.2\", 3, model1._cursor.prevItem().getSize());\t", "+\t\t\tassertTrue(\"#0.0\", model1.getCursor().atEnd());", "+\t\t\tassertTrue(\"#0.1\", model1.getCursor().prevItem().isGap());", "+\t\t\tassertEquals(\"#0.2\", 3, model1.getCursor().prevItem().getSize());\t", "-\t\t\tassertTrue(\"#1.0\", model1._cursor.atEnd());", "-\t\t\tassertTrue(\"#1.1\", model1._cursor.prevItem().isGap());", "-\t\t\tassertEquals(\"#1.2\", 7, model1._cursor.prevItem().getSize());", "+\t\t\tassertTrue(\"#1.0\", model1.getCursor().atEnd());", "+\t\t\tassertTrue(\"#1.1\", model1.getCursor().prevItem().isGap());", "+\t\t\tassertEquals(\"#1.2\", 7, model1.getCursor().prevItem().getSize());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "573e73a67a085a0b8cb99e01cc76553e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelTest.java", "commitBeforeChange": "b400b9a6647834c824c840f4cbeb6ad51c113120", "commitAfterChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic void testInsertGapAfterGap()", "signatureAfterChange": "  \tpublic void testInsertGapAfterGap()", "diff": ["-\t\t\tassertTrue(\"#0.0\", model1._cursor.atEnd());", "-\t\t\tassertTrue(\"#0.1\", model1._cursor.prevItem().isGap());", "-\t\t\tassertEquals(\"#0.2\", 3, model1._cursor.prevItem().getSize());\t", "+\t\t\tassertTrue(\"#0.0\", model1.getCursor().atEnd());", "+\t\t\tassertTrue(\"#0.1\", model1.getCursor().prevItem().isGap());", "+\t\t\tassertEquals(\"#0.2\", 3, model1.getCursor().prevItem().getSize());\t", "-\t\t\tassertTrue(\"#1.0\", model1._cursor.atEnd());", "-\t\t\tassertTrue(\"#1.1\", model1._cursor.prevItem().isGap());", "-\t\t\tassertEquals(\"#1.2\", 7, model1._cursor.prevItem().getSize());", "+\t\t\tassertTrue(\"#1.0\", model1.getCursor().atEnd());", "+\t\t\tassertTrue(\"#1.1\", model1.getCursor().prevItem().isGap());", "+\t\t\tassertEquals(\"#1.2\", 7, model1.getCursor().prevItem().getSize());"]}], "num": 30356}
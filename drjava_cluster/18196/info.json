{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d61217de24679d6749d314635d0412d5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aca8d40aa6451a32babf6e9e3cc9170", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "signatureAfterChange": "     public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "diff": ["-    ", "-    Position[] positions = doc.getCompilerErrorModel().getPositions();", "-    Position[] positions2 = doc2.getCompilerErrorModel().getPositions();", "-    assertTrue(\"first doc should have errors\", positions.length > 0);", "-    assertTrue(\"second doc should have errors\", positions2.length > 0);", "-    assertTrue(\"location of first error should be between 20 and 29 inclusive (line 2)\",", "-        positions[0].getOffset() <= 20 && positions[0].getOffset() <= 29);", "-    assertTrue(\"location of error should be after 34 (line 3 or 4)\", positions2[0].getOffset() >= 34);", "+    //TODO: rewrite these lines for the new interface", "+    //Position[] positions = doc.getCompilerErrorModel().getPositions();", "+    //Position[] positions2 = doc2.getCompilerErrorModel().getPositions();", "+", "+    //assertTrue(\"first doc should have errors\", positions.length > 0);", "+    //assertTrue(\"second doc should have errors\", positions2.length > 0);", "+    //assertTrue(\"location of first error should be between 20 and 29 inclusive (line 2)\",", "+    //    positions[0].getOffset() <= 20 && positions[0].getOffset() <= 29);", "+    //assertTrue(\"location of error should be after 34 (line 3 or 4)\", positions2[0].getOffset() >= 34);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c01c405d77cab5cb9564207d00dcf614", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "signatureAfterChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException, InterruptedException", "diff": ["-    doc.acquireWriteLock();", "-    ", "-    try { doc.indentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "+//    doc.acquireWriteLock();", "+//    try { ", "+    doc.indentLines(0, doc.getLength()); ", "+//    }", "+//    finally { doc.releaseWriteLock(); }", "-    final int oldPos = pane.getCaretPosition();", "-//    System.err.println(\"Old position is: \" + oldPos);", "-    ", "-        pane.setCaretPosition(newPos);", "+        doc.getUndoManager().undo();", "-    Utilities.clearEventQueue();", "-    // Moving this statement to the event thread breaks \"Undo should have restored ...\"  Why?  Timing.  ", "-    // Inserting Thread.sleep(500) does the same thing", "-    doc.getUndoManager().undo();", "-    ", "+", "-    int rePos = pane.getCaretPosition();", "+    int rePos = doc.getCurrentLocation();", "-    assertEquals(\"Undo should have restored caret position.\", oldPos, rePos);", "+    // cursor will be located at beginning of first line that is changed", "+//    assertEquals(\"Undo should have restored cursor position.\", oldPos, rePos);", "-    assertEquals(\"redo restores caret position\", oldPos, pane.getCaretPosition());", "+//    assertEquals(\"redo restores caret position\", oldPos, pane.getCaretPosition());"]}], "num": 18196}
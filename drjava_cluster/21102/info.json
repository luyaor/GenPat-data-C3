{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff82b8cc4cf7fbd5fe7b39db66c413ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82664149c9bc679648cd4e68a35dc3f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public boolean runTestSuite() throws RemoteException", "signatureAfterChange": "   public boolean runTestSuite()", "diff": ["-    */", "-  public boolean runTestSuite() throws RemoteException { ", "-//    System.err.println(\"Calling _interpreterJVM().runTestSuite()\");", "-    return _interpreterJVM().runTestSuite(); ", "+   */", "+  public boolean runTestSuite() { ", "+    InterpreterJVMRemoteI remote = _accessInterpreterJVM();", "+    if (remote == null) { return false; }", "+    try { return remote.runTestSuite(); }", "+    catch (RemoteException e) { _handleRemoteException(e); return false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5c733f12497eae4cedbc7aa6af346d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e74335063a2dc1cb98926543c84ea2e27a36e2a9", "commitAfterChange": "3bb036ab3161534d45eab93583296ad61d1878a0", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 105, "signatureBeforeChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "diff": ["-    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "-    for (File f: currentclasspaths) { builder.addClasspathFile(f); }", "+//    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "+//    for (File f: currentclasspaths) { builder.addClasspathFile(f); }", "+    // New behavior: only save project-specific classpaths.", "+    ClasspathVector exCp = getProjectExtraClasspath();", "+    if(exCp != null) {", "+      Vector<File> exCpF = exCp.asFileVector();", "+      for(File f : exCpF) {", "+        builder.addClasspathFile(f);", "+      }", "+    } else {", "+      System.err.println(\"Project ClasspathVector is null!\");", "+    }"]}], "num": 21102}
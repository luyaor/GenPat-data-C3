{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a8fddeee14fd52ebe470634bf26fafb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c39ecafd8bd626172f1f6874582f82a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "commitAfterChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 82, "signatureBeforeChange": "     public void startJUnit() throws ClassNotFoundException, IOException", "signatureAfterChange": "     public void startJUnit() throws ClassNotFoundException, IOException", "diff": ["-      synchronized(_compilerLock) {", "-        //JUnit started, so throw out all JUnitErrorModels now, regardless of whether", "-        //  the tests succeed, etc.", "-", "-        // if a test is running, don't start another one", "-//        if (_docBeingTested != null) {", "-        if (_isTestInProgress) {", "-          return;", "-        }", "-", "-        //reset the JUnitErrorModel", "-        // TODO: does this need to be done here?", "-        _junitErrorModel = new JUnitErrorModel(new JUnitError[0], null, false);", "-", "-        // Compile and save before proceeding.", "-        /*saveAllBeforeProceeding(GlobalModelListener.JUNIT_REASON);", "-        if (areAnyModifiedSinceSave()) {", "-          return;", "-        }*/", "-        try {", "-          File testFile = getFile();", "-          /*", "-          compileAll();", "-          if(getNumErrors() > 0) {", "-            _notifier.notifyListeners(new EventNotifier.Notifier() {", "-              public void notifyListener(GlobalModelListener l) {", "-                l.compileErrorDuringJUnit();", "-              }", "-            });", "-            return;", "-          }", "-          */", "-          ArrayList<OpenDefinitionsDocument> thisList = new ArrayList<OpenDefinitionsDocument>();", "-          thisList.add(this);", "-          _notifier.junitStarted(thisList);", "-", "-          try {", "-            getJUnitDocument().remove(0, getJUnitDocument().getLength() - 1);", "-          }", "-          catch (BadLocationException e) {", "-            nonTestCase(false);", "-            return;", "-          }", "-", "-          String testFilename = testFile.getName();", "-          if (testFilename.toLowerCase().endsWith(\".java\")) {", "-            testFilename = testFilename.substring(0, testFilename.length() - 5);", "-          }", "-          else {", "-            nonTestCase(false);", "-            return;", "-          }", "-          String packageName;", "-          try {", "-            packageName = _doc.getPackageName();", "-          }", "-          catch (InvalidPackageException e) {", "-            nonTestCase(false);", "-            return;", "-          }", "-          if(!packageName.equals(\"\")) {", "-            testFilename = packageName + \".\" + testFilename;", "-          }", "-          ArrayList<String> classNames = new ArrayList<String>();", "-          classNames.add(testFilename);", "-          ArrayList<File> files = new ArrayList<File>();", "-          files.add(testFile);", "-          _interpreterControl.runTestSuite(classNames, files, false);", "-          // Assign _docBeingTested after calling runTest because we know at", "-          // this point that the interpreterJVM has registered itself. We also", "-          // know that the testFinished cannot be entered before this because", "-          // it has to acquire the same lock as this method.", "-//          _docBeingTested = this;", "-          _isTestInProgress = true;", "-        }", "-        catch (IllegalStateException e) {", "-          // No file exists, don't try to compile and test", "-          nonTestCase(false);", "-          return;", "-        }", "-        catch (NoClassDefFoundError e) {", "-          // Method getTest in junit.framework.BaseTestRunner can throw a", "-          // NoClassDefFoundError (via reflection).", "-//          _docBeingTested = null;", "-          _isTestInProgress = false;", "-          _notifier.junitEnded();", "-          throw e;", "-        }", "-        catch (ExitingNotAllowedException enae) {", "-//          _docBeingTested = null;", "-          _isTestInProgress = false;", "-          _notifier.junitEnded();", "-          throw enae;", "-        }", "-      }", "+      _junitModel.junit(DefinitionsDocumentHandler.this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8c412e4fb6a491dd6a84b3ad07fba8f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "eeab4bd745c9b7c513ba67239c4619739d7387ef", "commitAfterChange": "cfea3e13a321911fb98c8bdb6bf527cebe9e8065", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc)       throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc)     throws ClassNotFoundException, IOException", "diff": ["-      throws ClassNotFoundException, IOException {", "-      synchronized(_compilerModel) {", "-        //JUnit started, so throw out all JUnitErrorModels now, regardless of whether", "-        //  the tests succeed, etc.", "+    throws ClassNotFoundException, IOException {", "+    try {", "+      // try to get the file, to make sure it's not untitled. if it is, it'll throw an IllegalStateException", "+      File testFile = doc.getFile();", "+      LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+      lod.add(doc);", "+      junitOpenDefDocs(lod, false);", "+    }", "+    catch (IllegalStateException e) {", "+      // No file exists, don't try to compile and test", "+      nonTestCase(false);", "+      return;", "+    }", "+    catch (NoClassDefFoundError e) {", "+      // Method getTest in junit.framework.BaseTestRunner can throw a", "+      // NoClassDefFoundError (via reflection).", "+      _isTestInProgress = false;", "+      _notifier.junitEnded();", "+      throw e;", "+    }", "+    catch (ExitingNotAllowedException enae) {", "+      _isTestInProgress = false;", "+      _notifier.junitEnded();", "+      throw enae;", "+    }", "+  }", "-        // if a test is running, don't start another one", "-        if (_isTestInProgress) {", "-          return;", "-        }", "-", "-        //reset the JUnitErrorModel", "-        _junitErrorModel = new JUnitErrorModel(new JUnitError[0], null, false);", "-", "-        // Compile and save before proceeding.", "-//        saveAllBeforeProceeding(GlobalModelListener.JUNIT_REASON);", "-//        if (areAnyModifiedSinceSave()) {", "-//          return;", "-//        }", "-          File testFile = doc.getFile();", "-", "-//          compileAll();", "-//          if(getNumErrors() > 0) {", "-//            _notifier.notifyListeners(new EventNotifier.Notifier() {", "-//              public void notifyListener(GlobalModelListener l) {", "-//                l.compileErrorDuringJUnit();", "-//              }", "-//            });", "-//            return;", "-//          }", "-", "-          ArrayList<OpenDefinitionsDocument> thisList = new ArrayList<OpenDefinitionsDocument>();", "-          thisList.add(doc);", "-          _notifier.junitStarted(thisList);", "-", "-          try {", "-            // TODO: should this happen here, or should we make a \"clear\" method?", "-            StyledDocument junitDoc = getJUnitDocument();", "-            junitDoc.remove(0, junitDoc.getLength() - 1);", "-          }", "-          catch (BadLocationException e) {", "-            nonTestCase(false);", "-            return;", "-          }", "-", "-          String testFilename = testFile.getName();", "-          String lowerCaseName = testFilename.toLowerCase();", "-          if (lowerCaseName.endsWith(\".java\")) {", "-            testFilename = testFilename.substring(0, testFilename.length() - 5);", "-          }", "-          else if (lowerCaseName.endsWith(\".dj0\") || lowerCaseName.endsWith(\".dj1\") || lowerCaseName.endsWith(\".dj2\")) {", "-            testFilename = testFilename.substring(0, testFilename.length() - 4);", "-          }", "-          else {", "-            nonTestCase(false);", "-            return;", "-          }", "-          try {", "-          catch (InvalidPackageException e) {", "-            nonTestCase(false);", "-            return;", "-          if(!packageName.equals(\"\")) {", "-            testFilename = packageName + \".\" + testFilename;", "-          ArrayList<String> classNames = new ArrayList<String>();", "-          classNames.add(testFilename);", "-          ArrayList<File> files = new ArrayList<File>();", "-          files.add(testFile);", "-          _jvm.runTestSuite(classNames, files, false);", "-", "-          // Assign _isTestInProgress after calling runTest because we know at", "-          // this point that the interpreterJVM has registered itself. We also", "-          // know that the testFinished cannot be entered before this because", "-          // it has to acquire the same lock as this method.", "-          _isTestInProgress = true;", "-        catch (IllegalStateException e) {", "-          // No file exists, don't try to compile and test", "-          nonTestCase(false);", "-          return;", "-        }", "-        catch (NoClassDefFoundError e) {", "-          // Method getTest in junit.framework.BaseTestRunner can throw a", "-          // NoClassDefFoundError (via reflection).", "-          _isTestInProgress = false;", "-          _notifier.junitEnded();", "-          throw e;", "-        }", "-        catch (ExitingNotAllowedException enae) {", "-          _isTestInProgress = false;", "-          _notifier.junitEnded();", "-          throw enae;", "-  }"]}], "num": 15082}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed3a990484c54e2cc0a273cc9d6cd1b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ad36b27c6fd896fd5ebacabea11626c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testInsertGapInsideGap()", "signatureAfterChange": " \tpublic void testInsertGapInsideGap()", "diff": ["+\t/**Inserts one gap inside of the other*/", "-\t\t\tassertTrue(\"#0.0\", model1.getCursor().atEnd());", "-\t\t\tassertTrue(\"#0.1\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#0.2\", 3, model1.getCursor().prevItem().getSize());\t\t\t", "-\t\t\tmodel1.getCursor().prev();", "+\t\t\tassertTrue(\"#0.0\", model1.atEnd());", "+\t\t\tmodel1.move(-3);", "+\t\t\tassertTrue(\"#0.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#0.2\", 3, model1.currentToken().getSize());\t\t\t", "-\t\t\tassertTrue(\"#1.0\", model1.getCursor().atLastItem());", "-\t\t\tassertTrue(\"#1.1\", model1.getCursor().current().isGap());", "-\t\t\tassertEquals(\"#1.2\", 6, model1.getCursor().current().getSize());", "-\t\t\tassertEquals(\"#1.3\", 3, model1.getBlockOffset());", "-\t\t\tmodel1.insertGap(3);", "-\t\t\tassertTrue(\"#1.0\", model1.getCursor().atLastItem());", "-\t\t\tassertTrue(\"#1.1\", model1.getCursor().current().isGap());", "-\t\t\tassertEquals(\"#1.2\", 9, model1.getCursor().current().getSize());", "-\t\t\tassertEquals(\"#1.3\", 6, model1.getBlockOffset());\t\t\t", "+\t\t\tassertTrue(\"#1.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 6, model1.currentToken().getSize());", "+\t\t\tassertEquals(\"#1.3\", 3, model1.absOffset());", "+\t\t\tmodel1.insertGap(4);", "+\t\t\tassertTrue(\"#1.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 10, model1.currentToken().getSize());", "+\t\t\tassertEquals(\"#1.3\", 7, model1._offset);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c02ba36440ccd3ced88e44b211146f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelTest.java", "commitBeforeChange": "fe0e37592e5cd7b76c2dc7349707c8f34b36b273", "commitAfterChange": "28c4be6b04d5867405916840b451c47e4acad060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void testInsertGapInsideGap()", "signatureAfterChange": " \tpublic void testInsertGapInsideGap()", "diff": ["+\t/**Inserts one gap inside of the other*/", "-\t\t\tassertTrue(\"#0.0\", model1.getCursor().atEnd());", "-\t\t\tassertTrue(\"#0.1\", model1.getCursor().prevItem().isGap());", "-\t\t\tassertEquals(\"#0.2\", 3, model1.getCursor().prevItem().getSize());\t\t\t", "-\t\t\tmodel1.getCursor().prev();", "+\t\t\tassertTrue(\"#0.0\", model1.atEnd());", "+\t\t\tmodel1.move(-3);", "+\t\t\tassertTrue(\"#0.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#0.2\", 3, model1.currentToken().getSize());\t\t\t", "-\t\t\tassertTrue(\"#1.0\", model1.getCursor().atLastItem());", "-\t\t\tassertTrue(\"#1.1\", model1.getCursor().current().isGap());", "-\t\t\tassertEquals(\"#1.2\", 6, model1.getCursor().current().getSize());", "-\t\t\tassertEquals(\"#1.3\", 3, model1.getBlockOffset());", "-\t\t\tmodel1.insertGap(3);", "-\t\t\tassertTrue(\"#1.0\", model1.getCursor().atLastItem());", "-\t\t\tassertTrue(\"#1.1\", model1.getCursor().current().isGap());", "-\t\t\tassertEquals(\"#1.2\", 9, model1.getCursor().current().getSize());", "-\t\t\tassertEquals(\"#1.3\", 6, model1.getBlockOffset());\t\t\t", "+\t\t\tassertTrue(\"#1.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 6, model1.currentToken().getSize());", "+\t\t\tassertEquals(\"#1.3\", 3, model1.absOffset());", "+\t\t\tmodel1.insertGap(4);", "+\t\t\tassertTrue(\"#1.1\", model1.currentToken().isGap());", "+\t\t\tassertEquals(\"#1.2\", 10, model1.currentToken().getSize());", "+\t\t\tassertEquals(\"#1.3\", 7, model1._offset);\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a5d27a9b7e12f128cdd9eb53260063", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "          @Override public Void visit(FieldDeclaration node)", "signatureAfterChange": "          @Override public Void visit(MethodDeclaration node)", "diff": ["+    ", "+    @Override public Void visit(MethodDeclaration node) {", "+      super.visit(node);", "+      int access = node.getAccessFlags();", "+      if (Modifier.isAbstract(access) && node.getBody() != null) {", "+        setErrorStrings(node, node.getName());", "+        throw new ExecutionError(\"abstract.method.body\", node);", "+      }", "+      else if (!Modifier.isAbstract(access) && node.getBody() == null) {", "+        setErrorStrings(node, node.getName());", "+        throw new ExecutionError(\"missing.method.body\", node);", "+      }", "-      Type expectedT = getType(node.getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff336ada90828c075f9e7184f90af8b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TopLevelContext.java", "commitBeforeChange": "6b936f625ceea21472b90559f34694154e802e14", "commitAfterChange": "8d43ad99265fb94492eb304c2a9128684a27d753", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public DJClass getTopLevelClass(String name, TypeSystem ts) throws AmbiguousNameException", "signatureAfterChange": "   public DJClass getTopLevelClass(String name, TypeSystem ts) throws AmbiguousNameException", "diff": ["-    if (TextUtil.contains(name, '.')) {", "-      try { return SymbolUtil.wrapClass(_loader.loadClass(name)); }", "-      catch (ClassNotFoundException e) { return null; }", "-      catch (LinkageError e) { return null; }", "-    }", "+    if (TextUtil.contains(name, '.')) { return super.getTopLevelClass(name, ts); }", "-        try { result = SymbolUtil.wrapClass(_loader.loadClass(makeClassName(name))); }", "-        catch (ClassNotFoundException e) { /* ignore -- class is not in the imported/default package */ }", "-        catch (LinkageError e) { /* ignore -- class is not in the imported/default package */ }", "+        result = super.getTopLevelClass(makeClassName(name), ts);", "-          LinkedList<Class<?>> onDemandMatches = new LinkedList<Class<?>>();", "+          LinkedList<String> onDemandNames = new LinkedList<String>();", "-            try { onDemandMatches.add(_loader.loadClass(p + \".\" + name)); }", "-            catch (ClassNotFoundException e2) { /* ignore -- class is not in this package */ }", "-            catch (LinkageError e) { /* ignore -- class is not in this package */ }", "+            String fullName = p + \".\" + name;", "+            if (super.topLevelClassExists(fullName, ts)) { onDemandNames.add(fullName); }", "-          if (onDemandMatches.size() > 1) { throw new AmbiguousNameException(); }", "-          else if (onDemandMatches.size() == 1) { result = SymbolUtil.wrapClass(onDemandMatches.getFirst()); }", "+          if (onDemandNames.size() > 1) { throw new AmbiguousNameException(); }", "+          else if (onDemandNames.size() == 1) { result = super.getTopLevelClass(onDemandNames.get(0), ts); }"]}], "num": 25348}
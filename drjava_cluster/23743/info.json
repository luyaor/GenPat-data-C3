{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "011c3a22f2f7638f4e42fdee9a619088", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c7ad22bbc8f57f7e53c12f30df14c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "a068a65da96363415d4ffc6e29a7efc1f9fab2cd", "commitAfterChange": "dfe6c6e73e062ff4ec08707a0c96aef62a0a1709", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 55, "signatureBeforeChange": "          public InputBox(boolean endOfStream)", "signatureAfterChange": "               public InputBox(boolean endOfStream)", "diff": ["+      final InputMap im = getInputMap(WHEN_FOCUSED);", "+      final ActionMap am = getActionMap();", "+      ", "-      };", "-      ", "-      final InputMap im = getInputMap(WHEN_FOCUSED);", "+      };      ", "-      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);", "-      ", "-      final ActionMap am = getActionMap();", "+      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);      ", "+      ", "+      // Link undo/redo to this InputBox", "+      final UndoManager undo = new UndoManager();", "+      final Document doc = getDocument(); ", "+      ", "+      // Listen for undo and redo events", "+      doc.addUndoableEditListener(new UndoableEditListener() {", "+        public void undoableEditHappened(UndoableEditEvent evt) {", "+          undo.addEdit(evt.getEdit());", "+        }", "+      }); ", "+      ", "+      final Action undoAction = new AbstractAction(\"Undo\") {", "+        public void actionPerformed(ActionEvent e) {", "+          try {", "+            if (undo.canUndo()) { undo.undo(); }", "+          }", "+          catch (CannotUndoException cue) { } ", "+        }", "+      };", "+      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO)) { im.put(ks, UNDO_NAME); }", "+      am.put(UNDO_NAME, undoAction);", "+      final Action redoAction = new AbstractAction(\"Redo\") {", "+        public void actionPerformed(ActionEvent e) {", "+          try {", "+            if (undo.canRedo()) { undo.redo(); }", "+          }", "+          catch (CannotRedoException cue) { }", "+        }", "+      };", "+      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_REDO)) { im.put(ks, REDO_NAME); }", "+      am.put(REDO_NAME, redoAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9850a49cce6a77e0ef7ebd61d724f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "e390ee17a6b432f8b404fb9fd5d85ab72141897f", "commitAfterChange": "12aaa1ddc474cfa046da07f830508d72c218a8f6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ConfigFrame ()", "signatureAfterChange": "   public ConfigFrame ()", "diff": ["+    ", "-    _mainPanel= new JPanel();", "-    _tree.addTreeSelectionListener( new PanelTreeSelectionListener());", "+    _mainPanel= new JPanel();", "+    _mainPanel.setLayout(new BorderLayout());", "+    _tree.addTreeSelectionListener( new PanelTreeSelectionListener());", "+        ", "-    cp.add(_mainPanel, BorderLayout.CENTER);", "+    cp.setLayout(new BorderLayout());", "+    //cp.add(_mainPanel, BorderLayout.CENTER);", "-    JScrollPane scroll = new JScrollPane(_tree);", "-    //scroll.setMinimumSize( new Dimension( 100 , scroll.getHeight()));", "-    cp.add(scroll, BorderLayout.WEST);", "+    JScrollPane treeScroll = new JScrollPane(_tree);", "+    //cp.add(treeScroll, BorderLayout.WEST);", "+    ", "+    _splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,", "+                                treeScroll,", "+                                _mainPanel);", "+    cp.add(_splitPane, BorderLayout.CENTER);", "+    ", "+        apply();", "+        ConfigFrame.this.hide();", "+      }", "+    });", "+    ", "+    _applyButton = new JButton(\"Apply\");", "+    _applyButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        apply();", "+      }", "+    });", "+    ", "+    _cancelButton = new JButton(\"Cancel\");", "+    _cancelButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        reset();", "+    bottom.add(_applyButton);", "+    bottom.add(_cancelButton);", "-    //pack();", "-    /**setSize((int) (owner.getWidth() * (4f/5f)),", "-            (int) (owner.getHeight() * (4f/5f)));*/", "+    ", "+    // Set all dimensions ----", "+    int width = getWidth() / 4;", "+    System.out.println(\"width: \" + getWidth());", "+    System.out.println(\"width for divider: \" + width);", "+    _splitPane.setDividerLocation(width);", "+    _mainPanel.setPreferredSize(new Dimension(getWidth() - width, _splitPane.getHeight()));"]}], "num": 23743}
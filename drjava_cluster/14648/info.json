{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bbbcb83cf008bd30055eccca9a743f0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ceb1ce0366270fad8676c8b518ffe0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 21, "signatureBeforeChange": "   @Override public Type visit(StaticFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(StaticFieldAccess node)", "diff": ["-   */", "-  @Override public Type visit(StaticFieldAccess node) {", "-    Type t = node.getFieldType().acceptVisitor(this);", "-    try {", "-      TypeSystem.FieldReference ref = ts.lookupStaticField(t, node.getFieldName());", "-      // TODO: Check accessibility of field", "-      setField(node, ref.field());", "-      setVariableType(node, ref.type());", "-      Type result = ts.capture(ref.type());", "-      addRuntimeCheck(node, result, ref.field().type());", "-      return setType(node, result);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(t), node.getFieldName());", "-      throw new ExecutionError(\"no.such.field\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(StaticFieldAccess node) {", "+      Type t = checkTypeName(node.getFieldType());", "+      try {", "+        FieldReference ref = ts.lookupStaticField(t, node.getFieldName());", "+        // TODO: Check accessibility of field", "+        setField(node, ref.field());", "+        setVariableType(node, ref.type());", "+        Type result = ts.capture(ref.type());", "+        addRuntimeCheck(node, result, ref.field().type());", "+        return setType(node, result);", "+      }", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(t), node.getFieldName());", "+        throw new ExecutionError(\"no.such.field\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e62fec5e6421f484af85d895c24a0ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 19, "signatureBeforeChange": "   @Override public Type visit(ObjectFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(ObjectFieldAccess node)", "diff": ["+     */", "+    @Override public Type visit(ObjectFieldAccess node) {", "+      Expression receiver = node.getExpression();", "+      if (receiver instanceof AmbiguousName) {", "+        Node resolved = resolveAmbiguousName((AmbiguousName) receiver);", "+        if (resolved instanceof ReferenceTypeName) {", "+          // this is actually a StaticFieldAccess", "+          Expression translation =", "+            new StaticFieldAccess((ReferenceTypeName) resolved, node.getFieldName(), node.getFilename(),", "+                                  node.getBeginLine(), node.getBeginColumn(), node.getEndLine(),", "+                                  node.getEndColumn());", "+          translation.acceptVisitor(this);", "+          setTranslation(node, translation);", "+          setVariableType(node, getVariableType(translation));", "+          return setType(node, getType(translation));", "+        else { receiver = (Expression) resolved; }", "+      Type receiverT = check(receiver);", "+      try {", "+        ObjectFieldReference ref = ts.lookupField(receiver, node.getFieldName());", "+        node.setExpression(ref.object());", "+        // TODO: Check accessibility of field", "+        setField(node, ref.field());", "+        setVariableType(node, ref.type());", "+        Type result = ts.capture(ref.type());", "+        addRuntimeCheck(node, result, ref.field().type());", "+        return setType(node, result);", "+      }", "+      catch (TypeSystemException e) {", "+        setErrorStrings(node, ts.userRepresentation(receiverT), node.getFieldName());", "+        throw new ExecutionError(\"no.such.field\", node);", "-   */", "-  @Override public Type visit(ObjectFieldAccess node) {", "-    Expression receiver = node.getExpression();", "-    if (receiver instanceof AmbiguousName) {", "-      Node resolved = resolveAmbiguousName((AmbiguousName) receiver);", "-      if (resolved instanceof ReferenceTypeName) {", "-        // this is actually a StaticFieldAccess", "-        Expression translation =", "-          new StaticFieldAccess((ReferenceTypeName) resolved, node.getFieldName(), node.getFilename(),", "-                                node.getBeginLine(), node.getBeginColumn(), node.getEndLine(),", "-                                node.getEndColumn());", "-        translation.acceptVisitor(this);", "-        setTranslation(node, translation);", "-        setVariableType(node, getVariableType(translation));", "-        return setType(node, getType(translation));", "-      }", "-      else { receiver = (Expression) resolved; }", "-    }", "-    ", "-    Type receiverT = receiver.acceptVisitor(this);", "-    try {", "-      TypeSystem.ObjectFieldReference ref = ts.lookupField(receiver, node.getFieldName());", "-      node.setExpression(ref.object());", "-      // TODO: Check accessibility of field", "-      setField(node, ref.field());", "-      setVariableType(node, ref.type());", "-      Type result = ts.capture(ref.type());", "-      addRuntimeCheck(node, result, ref.field().type());", "-      return setType(node, result);", "-    }", "-    catch (TypeSystemException e) {", "-      setErrorStrings(node, ts.userRepresentation(receiverT), node.getFieldName());", "-      throw new ExecutionError(\"no.such.field\", node);", "-    }", "-  }"]}], "num": 14648}
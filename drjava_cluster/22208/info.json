{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a957c53e8ee420bbba30a6588ac5a86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3838071702788d82044e15226b9c8684", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsEditorKit.java", "commitBeforeChange": "83bfa3db7cd314c7293a9c4dbfac25d41d093c45", "commitAfterChange": "b05d6101d72721dc72e1089de24af7a09f520884", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "signatureAfterChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "diff": ["-  public DefinitionsEditorKit(GlobalEventNotifier notifier) { _notifier = notifier; }", "+  public DefinitionsEditorKit(GlobalEventNotifier notifier) {", "+    _notifier = notifier;", "+    Action[] supActions = super.getActions();", "+    _actions = new Action[supActions.length];", "+    LOG.log(\"DefinitionsEditorKit ctor\");", "+    for(int i=0; i<_actions.length; ++i) {", "+      Action a = supActions[i];", "+      Object name = a.getValue(\"Name\");", "+      LOG.log(name.toString());", "+      if (name.equals(beginWordAction)) {", "+        _actions[i] = new BeginWordAction(beginWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(endWordAction)) {", "+        _actions[i] = new EndWordAction(endWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(nextWordAction)){", "+        _actions[i] = new NextWordAction(nextWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(previousWordAction)) {", "+        _actions[i] = new PreviousWordAction(previousWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(selectWordAction)) {", "+        _actions[i] = new SelectWordAction();", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else _actions[i] = a;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7976ba7960f937c0f94ed941740d5dd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "37eb7cd9abe39acb853d1fd344f27a2631ce2406", "commitAfterChange": "361de0d9250b2bd2a609e33fa8a02de61b7273c1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public CompilerErrorModel(DJError[] errors, GlobalModel model)", "signatureAfterChange": "   public CompilerErrorModel(DJError[] errors, GlobalModel model)", "diff": ["+       ", "+    // legacy support for old .dj2 language level files:", "+    // see DrJava feature request 2990660", "+    // As of revisions 5225-5227, .dj2 files aren't converted by the LanguageLevelConverter anymore,", "+    // they are just copied. That means the compiler errors now happen in the .java file, not in the", "+    // .dj2 file anymore. When we get a compiler error in a .java file, and we have a corresponding", "+    // .dj2 file open, but not the .java file, then we change the error to refer to the .dj2 file", "+    // instead.", "+    if (model!=null) {", "+      HashSet<File> odds = new HashSet<File>();", "+      for(OpenDefinitionsDocument odd: model.getOpenDefinitionsDocuments()) {", "+        odds.add(odd.getRawFile());", "+      }", "+      for(int i=0; i<errors.length; ++i) {", "+        DJError e = errors[i];", "+        if (e.fileName().endsWith(edu.rice.cs.drjava.config.OptionConstants.JAVA_FILE_EXTENSION)) {", "+          // only needs to be done for .java files", "+          File javaFile = e.file();", "+          if (!odds.contains(javaFile)) {", "+            // .java file is not open", "+            File dj2File = DrJavaFileUtils.getDJ2ForJavaFile(javaFile);", "+            if (odds.contains(dj2File)) {", "+              // but corresponding .dj2 file is open, change error to refer to .dj2 file", "+              errors[i] = new DJError(dj2File, e.lineNumber(), e.startColumn(), e.message(), e.isWarning());", "+            }", "+          }", "+        }", "+      }", "+    }", "+"]}], "num": 22208}
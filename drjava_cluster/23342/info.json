{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f1d16cfa5e06f3f9998d6dc9f001633", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af5fd3dc1c700e313907a80baecc0f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 328, "signatureBeforeChange": "   private Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params,                                             Iterable<? extends Type> args)", "signatureAfterChange": "   private Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-                                            Iterable<? extends Type> params,", "-                                            Iterable<? extends Type> args) {", "-    //debug.logValues(\"Beginning inferTypeArguments\", new String[]{ \"tparams\", \"params\", \"args\" },", "-    //                wrap(tparams), wrap(params), wrap(args));", "+                                            Iterable<? extends Type> params, Type returned,", "+                                            Iterable<? extends Type> args, Option<Type> expected) {", "+    //debug.logValues(\"Beginning inferTypeArguments\",", "+    //                new String[]{ \"tparams\", \"params\", \"returned\", \"args\", \"expected\" },", "+    //                wrap(tparams), wrap(params), wrap(returned), wrap(args), wrap(expected));", "+    if (expected.isSome() && constraintsBuilder.isSatisfiable()) {", "+      constraintsBuilder = constraintsBuilder.and(inferFromSupertype(expected.unwrap(), returned,", "+                                                                     tparamSet, stack));", "+    }", "+    //debug.logValue(\"constraints\", constraints);", "-    if (constraints.isSatisfiable()) {", "-      return IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "-        public Type value(VariableType param) { return constraints.lowerBound(param); }", "-        // TODO: Handle the case where the lower bound is BOTTOM (following the JLS)", "-      });", "+    if (!constraints.isSatisfiable()) { return null; }", "+", "+    Iterable<Type> result = IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "+      public Type value(VariableType param) { return constraints.lowerBound(param); }", "+    });", "+    if (inBounds(tparams, result)) { return result; }", "+    ", "+    List<Wildcard> constraintWs = new LinkedList<Wildcard>();", "+    for (VariableType param : tparams) {", "+      BoundedSymbol s = new BoundedSymbol(new Object(), constraints.upperBound(param), constraints.lowerBound(param));", "+      constraintWs.add(new Wildcard(s));", "-    else { return null; }", "+    result = captureTypeArgs(constraintWs, tparams);", "+    if (IterUtil.and(result, WELL_FORMED)) { return result; }", "+", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120e9200c9f5a793be3d1bb9131e9a29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "eb8f1a08f585431afff35aec705cfd9169bfce44", "commitAfterChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-      for (StackFrame f : thread.frames()) { frames.add(new JPDAStackData(f)); }", "+      // get a list of language level files whose line numbers need to be translated ", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+      for (StackFrame f : thread.frames()) {", "+        // map Java line numbers to LL line numbers", "+        String method = JPDAStackData.methodName(f);", "+        int lineNum = f.location().lineNumber();", "+        String sourceName = null;", "+        try {", "+          sourceName = f.location().sourceName();", "+        }", "+        catch(com.sun.jdi.AbsentInformationException aie) { sourceName = null; }", "+        StackTraceElement ste = new StackTraceElement(f.location().declaringType().name(),", "+                                                      f.location().method().name(),", "+                                                      sourceName,", "+                                                      f.location().lineNumber());", "+        ste = getLLSTM().replaceStackTraceElement(ste, files);", "+        frames.add(new JPDAStackData(method, ste.getLineNumber()));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16ccfb16f20a39d6d2f380da43071a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "commitAfterChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static FullVersion parseFullVersion(String text)", "signatureAfterChange": "   public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor)", "diff": ["-  public static FullVersion parseFullVersion(String text) {", "+  public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor) {", "+    VendorType vendor = VendorType.UNKNOWN;", "+    String vendorString = null;", "+    if (java_runtime_name.toLowerCase().contains(\"openjdk\")) {", "+      vendor = VendorType.OPENJDK;", "+      vendorString = \"OpenJDK\";", "+    }", "+    else if (java_vm_vendor.toLowerCase().contains(\"apple\")) {", "+      vendor = VendorType.APPLE;", "+      vendorString = \"Apple\";", "+    }", "+    else if (java_vm_vendor.toLowerCase().contains(\"sun\")) {", "+      vendor = VendorType.SUN;", "+      vendorString = \"Sun\";", "+    }", "+    ", "-    int dash = text.indexOf('-');", "-    if (dash == -1) { number = text; typeString = null; }", "-    else { number = text.substring(0, dash); typeString = text.substring(dash+1); }", "+    int dash = java_version.indexOf('-');", "+    if (dash == -1) { number = java_version; typeString = null; }", "+    else { number = java_version.substring(0, dash); typeString = java_version.substring(dash+1); }", "-    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "+    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "+                                             ReleaseType.STABLE, null,", "+                                             vendor, vendorString); }", "-    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "+    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "+                                             ReleaseType.STABLE, null,", "+                                             vendor, vendorString); }", "-      return new FullVersion(version, maintenance, update, type, typeString);", "+      return new FullVersion(version, maintenance, update,", "+                             type, typeString,", "+                             vendor, vendorString);", "-    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "+    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0,", "+                                                             ReleaseType.STABLE, null,", "+                                                             vendor, vendorString); }", "+  }"]}], "num": 23342}
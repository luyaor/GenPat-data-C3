{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c578ec0f61f04590c20205e17fb83aa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04039411d73cc1a7ce30ee9f58070d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 88, "signatureBeforeChange": "   public static SizedIterable<Integer> arrayIterable(final int[] array)", "signatureAfterChange": "   public static SizedIterable<Integer> asIterable(int[] values)", "diff": ["+   */", "+  public static SizedIterable<Integer> asIterable(int[] values) {", "+    return new IntArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Integer> arrayIterable(final int[] array) {", "-    class Wrapper extends AbstractIterable<Integer> implements SizedIterable<Integer> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Integer> iterator() {", "-        return new IndexedIterator<Integer>() {", "-          protected int size() { return array.length; }", "-          protected Integer get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cf447018098efad3fabecfc9468d762", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 96, "signatureBeforeChange": "   public static SizedIterable<Long> arrayIterable(final long[] array)", "signatureAfterChange": "   public static SizedIterable<Long> asIterable(long[] values)", "diff": ["+   */", "+  public static SizedIterable<Long> asIterable(long[] values) {", "+    return new LongArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Long> arrayIterable(final long[] array) {", "-    class Wrapper extends AbstractIterable<Long> implements SizedIterable<Long> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Long> iterator() {", "-        return new IndexedIterator<Long>() {", "-          protected int size() { return array.length; }", "-          protected Long get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}], "num": 14979}
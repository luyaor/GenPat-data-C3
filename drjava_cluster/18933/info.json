{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95bf1bd6c8b2382553f704c419bebd7d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c3dc5204eb4196d01d7f941eba5de9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorAbsRelFileOptionComponent.java", "commitBeforeChange": "b59ea5c5062a947f96790df7fe854009e693434a", "commitAfterChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public void setValue(ArrayList<File> files)", "signatureAfterChange": "       public void setValueAt(Object value, int row, int col)", "diff": ["-  /** Displays the given value. */\r", "-  public void setValue(ArrayList<File> files) {\r", "-    _listModel.clear();\r", "-    for (File f: files) _listModel.addElement(f);\r", "-  }\r", "+      }", "+      public void setValueAt(Object value, int row, int col) {", "+        AbsRelFile f = _data.get(row);", "+        switch(col) {", "+          case 1:", "+            f.keepAbsolute((Boolean)value);", "+            break;", "+          default:", "+            throw new IllegalArgumentException(\"Illegal column\");", "+        }", "+        fireTableCellUpdated(row, col);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa31b51ee6c765bc370314b9c1247d5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public static <T1, T2, T3>      Runnable4<T1, T2, T3, Object> promote(final Runnable3<? super T1, ? super T2, ? super T3> r)", "signatureAfterChange": "   public static <T1, T2, T3> Runnable4<T1, T2, T3, Object> promote(Runnable3<? super T1, ? super T2, ? super T3> r)", "diff": ["-  /** @return A {@code Runnable4} equivalent to {@code r} with an additional, ignored argument */", "-  public static <T1, T2, T3> ", "-    Runnable4<T1, T2, T3, Object> promote(final Runnable3<? super T1, ? super T2, ? super T3> r) {", "-    return new Runnable4<T1, T2, T3, Object>() {", "-      public void run(T1 arg1, T2 arg2, T3 arg3, Object arg4) { r.run(arg1, arg2, arg3); }", "-    };", "+  /** Create a {@code Runnable4} equivalent to {@code r} with an additional, ignored argument. */", "+  public static <T1, T2, T3> Runnable4<T1, T2, T3, Object> promote(Runnable3<? super T1, ? super T2, ? super T3> r) {", "+    return new PromotedRunnable4<T1, T2, T3>(r);", "+  }"]}], "num": 18933}
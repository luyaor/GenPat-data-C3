{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cb8f48467cc0c3a57b516a6da33ac95", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0086c400470ac360e125e3152b529a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "   public Class visit(ArrayAllocation node)", "diff": ["-     */", "-    public Object visit(ArrayAllocation node) {", "-        // Do the checking of the size expressions", "-        Iterator it = node.getSizes().iterator();", "-            Class c = (Class)((Node)it.next()).acceptVisitor(this);", "-            // Dimension expression must be of an integral type, but not long", "-            if (c != byte.class && c != short.class && c != int.class) {", "-                throw new ExecutionError(\"array.dimension.type\", node);", "-            }", "-        Class c = (Class)node.getCreationType().acceptVisitor(this);", "-", "-        // Visits the initializer if one", "-        if (node.getInitialization() != null) {", "-            node.getInitialization().acceptVisitor(this);", "-", "-        // Set the type properties of this node", "-        Class  ac = Array.newInstance(c, new int[node.getDimension()]).getClass();", "-", "-        node.setProperty(NodeProperties.TYPE, ac);", "-        node.setProperty(NodeProperties.COMPONENT_TYPE, c);", "-        return ac;", "+   */", "+  public Class visit(ArrayAllocation node) {", "+    // Do the checking of the size expressions", "+    Iterator it = node.getSizes().iterator();", "+    while (it.hasNext()) {", "+      Class c = (Class)((Node)it.next()).acceptVisitor(this);", "+      // Dimension expression must be of an integral type, but not long", "+      if (c != byte.class && c != short.class && c != int.class) {", "+        throw new ExecutionError(\"array.dimension.type\", node);", "+      }", "+    ", "+    Class c = (Class)node.getCreationType().acceptVisitor(this);", "+    ", "+    // Visits the initializer if one", "+    if (node.getInitialization() != null) {", "+      node.getInitialization().acceptVisitor(this);", "+    ", "+    // Set the type properties of this node", "+    Class  ac = Array.newInstance(c, new int[node.getDimension()]).getClass();", "+    ", "+    node.setProperty(NodeProperties.TYPE, ac);", "+    node.setProperty(NodeProperties.COMPONENT_TYPE, c);", "+    return ac;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb5e1f040af936923f2cdd370a29337f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public Object visit(SimpleAssignExpression node)", "signatureAfterChange": "   public Class visit(SimpleAssignExpression node)", "diff": ["-     */", "-    public Object visit(SimpleAssignExpression node) {", "-        Expression left  = node.getLeftExpression();", "-        Expression right = node.getRightExpression();", "-        Class rc = (Class)right.acceptVisitor(this);", "-", "-        // Perhaps is this assignment a variable declaration ?", "-        if (left instanceof QualifiedName) {", "-            String var = ((QualifiedName)left).getRepresentation();", "-            if (!context.exists(var)) {", "-\t\tcontext.define(var, (rc == null) ? Object.class : rc);", "-\t    }", "-\t}", "-", "-        Class lc = (Class)left.acceptVisitor(this);", "-", "-\t// The left subexpression must be a variable", "-        if (!left.hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"left.expression\", node);", "-        }", "-\t", "-        // Check the validity of the assignment", "-        checkAssignmentStaticRules(lc, rc, node, right);", "-", "-        node.setProperty(NodeProperties.TYPE, lc);", "-\treturn lc;", "-    }", "+   */", "+  public Class visit(SimpleAssignExpression node) {", "+    Expression left  = node.getLeftExpression();", "+    Expression right = node.getRightExpression();", "+    Class rc = (Class)right.acceptVisitor(this);", "+    ", "+    // Perhaps is this assignment a variable declaration ?", "+    if (left instanceof QualifiedName) {", "+      String var = ((QualifiedName)left).getRepresentation();", "+      if (!context.exists(var)) {", "+        context.define(var, (rc == null) ? Object.class : rc);", "+      }", "+    }", "+    ", "+    Class lc = (Class)left.acceptVisitor(this);", "+    ", "+    // The left subexpression must be a variable", "+    if (!left.hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"left.expression\", node);", "+    }", "+    ", "+    // Check the validity of the assignment", "+    checkAssignmentStaticRules(lc, rc, node, right);", "+    ", "+    node.setProperty(NodeProperties.TYPE, lc);", "+    return lc;", "+  }"]}], "num": 28982}
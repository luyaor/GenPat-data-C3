{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d375c6e69bab9cd9880ad980b7b96c7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b40e4d5bfcefed557810955be384158", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "d933be24919e2ab110f61a795910708e74f868c4", "commitAfterChange": "e58ae584c79a105cf065f585a2d99664f4ef8788", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-      ", "-      //Test that if the interface extends java.lang.Runnable, then an error is thrown.", "-      InterfaceDef id3 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "-                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      SymbolData sd = new SymbolData(\"JimesH\");", "-      sd.setIsContinuation(false);", "-      sd.setInterface(true);", "-      ", "-      symbolTable.clear();", "-      SymbolData runnableSd = new SymbolData(\"java.lang.Runnable\");", "-      runnableSd.setMav(_publicMav);", "-      runnableSd.setIsContinuation(false);", "-      runnableSd.setPackage(\"java.lang\");", "-      runnableSd.setInterface(true);", "-      sd.addInterface(runnableSd);", "-      symbolTable.put(\"JimesH\", sd);", "-      symbolTable.remove(\"java.lang.Runnable\");", "-      symbolTable.put(\"java.lang.Runnable\", runnableSd);", "+      /* The Runnable restriction has been dropped. */", "+//      //Test that if the interface extends java.lang.Runnable, then an error is thrown.", "+//      InterfaceDef id3 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "+//                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+//      SymbolData sd = new SymbolData(\"JimesH\");", "+//      sd.setIsContinuation(false);", "+//      sd.setInterface(true);", "+//      ", "+//      symbolTable.clear();", "+//      SymbolData runnableSd = new SymbolData(\"java.lang.Runnable\");", "+//      runnableSd.setMav(_publicMav);", "+//      runnableSd.setIsContinuation(false);", "+//      runnableSd.setPackage(\"java.lang\");", "+//      runnableSd.setInterface(true);", "+//      sd.addInterface(runnableSd);", "+//      symbolTable.put(\"JimesH\", sd);", "+//      symbolTable.remove(\"java.lang.Runnable\");", "+//      symbolTable.put(\"java.lang.Runnable\", runnableSd);", "+//", "+//      id3.visit(_btc);", "+//      assertEquals(\"There should be 3 errors now\", 3, errors.size());", "+//      assertEquals(\"The error message should be correct\", \"JimesH extends the Runnable interface, which is not allowed at any language level\", errors.get(2).getFirst());", "-      id3.visit(_btc);", "-      assertEquals(\"There should be 3 errors now\", 3, errors.size());", "-      assertEquals(\"The error message should be correct\", \"JimesH extends the Runnable interface, which is not allowed at any language level\", errors.get(2).getFirst());", "-", "-      //Test that an error is thrown if you implement a class", "+      // Test that an error is thrown if you implement a class", "-      assertEquals(\"There should be 4 errors now \", 4, errors.size());", "-      assertEquals(\"The error message should be correct\", \"superC is not an interface and thus cannot appear after the keyword 'extends' here\", errors.get(3).getFirst());", "+      assertEquals(\"There should be 3 errors now \", 3, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"superC is not an interface and thus cannot appear after the keyword 'extends' here\", ", "+                   errors.getLast().getFirst());", "-      //Test that no error is thrown if you implement an interface", "+      // Test that no error is thrown if you implement an interface", "-      assertEquals(\"There should still just be 4 errors\", 4, errors.size());", "+      assertEquals(\"There should still just be 3 errors\", 3, errors.size());", "-      //Test that if a public interface is in a file of the wrong name, an error is thrown.", "+      // Test that if a public interface is in a file of the wrong name, an error is thrown.", "-      assertEquals(\"There should be 5 errorrs\", 5, errors.size());", "-      assertEquals(\"The error message should be correct\", \"Bart is public thus must be defined in a file with the same name.\", errors.get(4).getFirst());", "+      assertEquals(\"There should be 4 errorrs\", 4, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"Bart is public thus must be defined in a file with the same name.\", ", "+                   errors.getLast().getFirst());", "-      //Test that if a public interface is in a file of the right name, no error is thrown.", "+      // Test that if a public interface is in a file of the right name, no error is thrown.", "-      assertEquals(\"There should still just be 5 errors\", 5, errors.size());", "+      assertEquals(\"There should still just be 4 errors\", 4, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1391a74050e64ae250887b70363467e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-                                                       _packageMav,", "-                                                       new VariableDeclarator[] {", "+                                                          _packageMav,", "+                                                          new VariableDeclarator[] {", "-                               new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                               new Word (SourceInfo.NO_INFO, \"field1\")),", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                               new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "-                               new Word (SourceInfo.NO_INFO, \"field2\"))});", "-      VariableData vd1 = new VariableData(\"field1\", _finalPrivateMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-      VariableData vd2 = new VariableData(\"field2\", _finalPrivateMav, SymbolData.BOOLEAN_TYPE, false, _cbiv._classData);", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field1\")),", "+          new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                              new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "+                                              new Word (SourceInfo.NO_INFO, \"field2\"))});", "+      VariableData vd1 = new VariableData(\"field1\", _privateFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "+      VariableData vd2 = new VariableData(\"field2\", _privateFinalMav, SymbolData.BOOLEAN_TYPE, false, _cbiv._classData);", "+//      VariableData vd0 = _sd1.getVars().get(0);", "+//      System.err.println(\"Errors were: \" + errors);", "+//      System.err.println(\"_sd1.getVars() = \" + _sd1.getVars());", "+//      ", "+//      System.err.println(\"vd1 = \" + vd1);", "+//      System.err.println(\"vd1.getMav() = \" + vd1.getMav());", "+//      System.err.println(\"vd1.getType() = \" + vd1.getType());", "+//      System.err.println(\"vd1.getMav().getModifiers() = \" + vd1.getMav().getModifiers());", "+//      assertEquals(\"enclosingData are equal\", vd1.getEnclosingData(), vd0.getEnclosingData());", "+//      assertEquals(\"mavs are equal\", vd1.getMav(), vd0.getMav());", "+//      assertEquals(\"vd1.equals(vd0)\", vd1, vd0);", "-      VariableData vd3 = new VariableData(\"field3\", _finalPrivateMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "+      VariableData vd3 = new VariableData(\"field3\", _privateFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-      //Check a non-static field that has been assigned.  (won't work);", "+      // Check a non-static field that has been assigned.", "-      VariableData vd5 = new VariableData(\"field5\", _publicFinalMav, SymbolData.DOUBLE_TYPE, true, _cbiv._classData);", "-      assertEquals(\"There should be three errors\", 3, errors.size());", "-      assertEquals(\"The new error message should be correct\", \"Only static fields may be initialized outside of a constructor at the Intermediate level\", errors.get(2).getFirst());", "-      assertFalse(\"Field 5 was not added.\", _sd1.getVars().contains(vd5));", "+      VariableData vd5 = new VariableData(\"field5\", _privateFinalMav, SymbolData.DOUBLE_TYPE, true, _cbiv._classData);", "+      vd5.setHasInitializer(true);", "+//      VariableData vd0 = _sd1.getVars().get(4);", "+//      System.err.println(\"vd5 = \" + vd5);", "+//      System.err.println(\"vd0 = \" + vd0);", "+//      System.err.println(\"vd5.getMav() = \" + vd5.getMav());", "+//      System.err.println(\"vd5.getType() = \" + vd5.getType());", "+//      System.err.println(\"vd0.getMav() = \" + vd0.getMav());", "+//      System.err.println(\"vd0.getType() = \" + vd0.getType());", "+//      assertEquals(\"mavs are equal\", vd5.getMav(), vd0.getMav());", "+//      assertEquals(\"enclosingData are equal\", vd5.getEnclosingData(), vd0.getEnclosingData());", "+//      assertEquals(\"vd5.equals(vd0)\", vd5, vd0);", "+      assertTrue(\"Field 5 was added.\", _sd1.getVars().contains(vd5));", "-      VariableData vd6 = new VariableData(\"field6\", _finalPrivateMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "+      VariableData vd6 = new VariableData(\"field6\", _privateFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-      assertEquals(\"There should be four errors.\", 4, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot have two fields with the same name.  Either you already have a field by that name in this class, or one of your superclasses or interfaces has a field by that name\", errors.get(3).getFirst());", "+      assertEquals(\"There should be three errors.\", 3, errors.size());", "+      assertEquals(\"The error message should be correct\", \"You cannot have two fields with the same name.  Either you\" +", "+                   \" already have a field by that name in this class, or one of your superclasses or interfaces has a\" +", "+                   \" field by that name\", ", "+                   errors.get(2).getFirst());"]}], "num": 9280}
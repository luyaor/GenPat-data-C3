{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4b14e44df7761289bc93e0d9905f84a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "728c2d65fdf1c2dbba02069e9754902a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 43, "signatureBeforeChange": "          public void testHandleInnerClassDef()", "signatureAfterChange": "          public void testHandleInnerClassDef()", "diff": ["-    public void testHandleInnerClassDef() {      ", "-      SymbolData obj = new SymbolData(\"java.lang.Object\");", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "+    public void testHandleInnerClassDef() { ", "+      System.err.println(\"**** Starting testHandleInnerClassDef\");", "+      // setUp has created a FullJavaVisitor which initializes the symbolTable", "+      ", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", _objectSD);", "-                          new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {cd1}));", "+                          new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { cd1 }));", "-      SymbolData outerData = new SymbolData(\"i.eat.potato\");", "-      SymbolData sd0 = ", "-        new SymbolData(outerData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], obj, ", "-                       new LinkedList<SymbolData>(), null); ", "-      SymbolData sd1 = ", "-        new SymbolData(outerData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], obj, ", "-                       new LinkedList<SymbolData>(), null); ", "-      ", "-      outerData.addInnerClass(sd0);", "-      sd0.setOuterData(outerData);", "+//      SymbolData outerData = new SymbolData(\"i.eat.potato\");", "+//      outerData.setIsContinuation(false);", "+//      outerData.setSuperClass(_objectSD);", "+                                         ", "+//      SymbolData sd0 = ", "+//        new SymbolData(outerData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], _objectSD, ", "+//                       new ArrayList<SymbolData>(), null); ", "+//      SymbolData sd1 = ", "+//        new SymbolData(outerData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], _objectSD, ", "+//                       new ArrayList<SymbolData>(), null); ", "+//      ", "+//      outerData.addInnerClass(sd0);", "+//      sd0.setOuterData(outerData);", "+//", "+//      sd0.addInnerClass(sd1);", "+//      sd1.setOuterData(sd0);", "-      sd0.addInnerClass(sd1);", "-      sd1.setOuterData(sd0);", "-", "-      sd0.setIsContinuation(true);", "-      sd1.setIsContinuation(true);", "-      ", "+//      sd0.setIsContinuation(true);", "+//      sd1.setIsContinuation(true);      ", "-      LanguageLevelConverter.symbolTable.put(outerData.getName() + \"$Lisa\", sd0);", "+//      LanguageLevelConverter.symbolTable.put(outerData.getName() + \"$Lisa\", sd0);", "-      _fv.handleInnerClassDef(cd0, outerData, outerData.getName() + \"$Lisa\");", "-", "-      SymbolData sd = outerData.getInnerClassOrInterface(\"Lisa\");", "+      _fv.handleInnerClassDef(cd0, _sd1, \"Lisa\", _sd1.getName() + \".Lisa\");                        ", "+                              ", "+      SymbolData sd0 = _sd1.getInnerClassOrInterface(\"Lisa\");", "-      assertEquals(\"This symbolData should now have sd0 as an inner class\", sd0, sd);", "-      assertEquals(\"sd0 should have the correct outer data\", outerData, sd0.getOuterData());", "-      assertEquals(\"sd1 should have the correct outer data\", sd0, sd1.getOuterData());", "-      assertEquals(\"Sd should now have sd1 as an inner class\", sd1, sd.getInnerClassOrInterface(\"Bart\"));", "-      ", "-      ", "+      assertNotNull(\"Lisa is inner class of i.like.monkey\", sd0);", "+      assertEquals(\"sd0 should have the correct outer data\", _sd1, sd0.getOuterData());", "+      assertNotNull(\"symbolTable contains fully qualified name for Lisa\", ", "+                    _fv.getQualifiedSymbolData(\"i.like.monkey.Lisa\"));", "+      ", "+      SymbolData sd1 = sd0.getInnerClassOrInterface(\"Bart\");", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      assertNotNull(\"Bart is inner class of Lisa\", sd1);", "+      assertEquals(\"sd1 should have the correct outer data\", sd0, sd1.getOuterData());", "+      assertEquals(\"Bart should have 0 methods\", 0, sd1.getMethods().size());", "+      assertNotNull(\"symbolTable contains fully qualified name for Bart\", ", "+                    _fv.getQualifiedSymbolData(\"i.like.monkey.Lisa.Bart\"));", "+      System.err.println(\"**** Ending testHandleInnerClassDef\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb83bd31153bc41a4a61ca2d35cef13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "          public void testForInnerInterfaceDef()", "signatureAfterChange": "          public void testForInnerInterfaceDef()", "diff": ["-      _ibfv._symbolData = new SymbolData(\"MyInterface\");", "-      _ibfv._symbolData.setInterface(true);", "-      ", "-      SymbolData obj = new SymbolData(\"java.lang.Object\");", "-      LanguageLevelConverter._newSDs.clear();", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-      SymbolData sd0 = new SymbolData(_ibfv._symbolData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], ", "-                                      new LinkedList<SymbolData>(), null); ", "-      SymbolData sd1 = new SymbolData(_ibfv._symbolData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], ", "-                                      new LinkedList<SymbolData>(), null);", "-      sd0.addInnerInterface(sd1);", "-", "-      ", "-      _ibfv._symbolData.addInnerInterface(sd0);", "-      sd0.setOuterData(_ibfv._symbolData);", "-", "-      sd0.addInnerInterface(sd1);", "-      sd1.setOuterData(sd0);", "-", "-      ", "-      sd0.setIsContinuation(true);", "-      sd1.setIsContinuation(true);", "-      LanguageLevelConverter._newSDs.clear();", "-      LanguageLevelConverter.symbolTable.put(_ibfv._symbolData.getName() + \"$Lisa\", sd0);", "-      LanguageLevelConverter._newSDs.clear();", "-      LanguageLevelConverter.symbolTable.put(_ibfv._symbolData.getName() + \"$Lisa$Bart\", sd1);", "+//      SymbolData sd0 = new SymbolData(_ibfv._symbolData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], ", "+//                                      new ArrayList<SymbolData>(), null); ", "+//      SymbolData sd1 = new SymbolData(_ibfv._symbolData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], ", "+//                                      new ArrayList<SymbolData>(), null);", "+//      sd0.addInnerInterface(sd1);", "+//", "+//      ", "+//      _ibfv._symbolData.addInnerInterface(sd0);", "+//      sd0.setOuterData(_ibfv._symbolData);", "+//", "+//      sd0.addInnerInterface(sd1);", "+//      sd1.setOuterData(sd0);", "+//", "+//      ", "+//      sd0.setIsContinuation(true);", "+//      sd1.setIsContinuation(true);", "+//      LanguageLevelConverter._newSDs.clear();", "+//      LanguageLevelConverter.symbolTable.put(_ibfv._symbolData.getName() + \"$Lisa\", sd0);", "+//      LanguageLevelConverter._newSDs.clear();", "+//      LanguageLevelConverter.symbolTable.put(_ibfv._symbolData.getName() + \"$Lisa$Bart\", sd1);", "-      SymbolData sd = _ibfv._symbolData.getInnerClassOrInterface(\"Lisa\");", "+      SymbolData sd0 = _ibfv._symbolData.getInnerClassOrInterface(\"Lisa\");", "+      assertNotNull(\"Inner interfacae Lisa exists\", sd0);", "-      assertEquals(\"This symbolData should now have sd0 as an inner interface\", sd0, sd);", "-      assertEquals(\"sd0 should have the correct outer data\", _ibfv._symbolData, sd0.getOuterData());", "-      assertEquals(\"sd1 should have the correct outer data\", sd0, sd1.getOuterData());", "-      assertEquals(\"Sd should now have sd1 as an inner interface\", sd1, sd.getInnerClassOrInterface(\"Bart\"));", "-      assertTrue(\"Lisa should be an interface\", sd0.isInterface());", "-      assertTrue(\"Bart should be an interface\", sd1.isInterface());", "-      assertTrue(\"The outer data should be an interface\", _ibfv._symbolData.isInterface());      ", "+      assertEquals(\"Lisa should have the correct outer data\", _ibfv._symbolData, sd0.getOuterData());", "+      assertTrue(\"_sd1 should be an interface\", _sd1.isInterface());", "+      assertTrue(\"sd0 should be a interface\", sd0.isInterface());", "+      assertEquals(\"Lisa should have 0 methods\", 0, sd0.getMethods().size());  ", "+      ", "+      SymbolData sd1 = sd0.getInnerClassOrInterface(\"Bart\");", "+      assertNotNull(\"Inner interface Bart exists\", sd1);", "+      ", "+      assertEquals(\"Bart should have the correct outer data\", sd0, sd1.getOuterData());", "+      assertTrue(\"sd1 should be an interface\", sd1.isInterface());", "+      assertEquals(\"Bart should have 0 methods\", 0, sd1.getMethods().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6592bde664c313ce0617865d07418e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "           public void testForInnerClassDef()", "signatureAfterChange": "           public void testForInnerClassDef()", "diff": ["-      SymbolData obj = new SymbolData(\"java.lang.Object\");", "+//      SymbolData obj = new SymbolData(\"java.lang.Object\");", "-      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "+//      LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-      SymbolData sd0 = new SymbolData(_ibfv._symbolData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], obj, ", "-                                      new LinkedList<SymbolData>(), null); ", "-      SymbolData sd1 = ", "-        new SymbolData(_ibfv._symbolData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], obj, ", "-                       new LinkedList<SymbolData>(), null); ", "+//      SymbolData sd0 = new SymbolData(_ibfv._symbolData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], obj, ", "+//                                      new ArrayList<SymbolData>(), null); ", "+//      SymbolData sd1 = ", "+//        new SymbolData(_ibfv._symbolData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], obj, ", "+//                       new ArrayList<SymbolData>(), null); ", "-      _ibfv._symbolData.addInnerClass(sd0);", "-      sd0.setOuterData(_ibfv._symbolData);", "+//      _ibfv._symbolData.addInnerClass(sd0);", "+//      sd0.setOuterData(_ibfv._symbolData);", "-      sd0.addInnerClass(sd1);", "-      sd1.setOuterData(sd0);", "-", "-      sd0.setIsContinuation(true);", "-      sd1.setIsContinuation(true);", "-      LanguageLevelConverter._newSDs.clear();", "-      LanguageLevelConverter.symbolTable.put(_ibfv._symbolData.getName() + \"$Lisa\", sd0);", "+//      sd0.addInnerClass(sd1);", "+//      sd1.setOuterData(sd0);", "+//", "+//      sd0.setIsContinuation(true);", "+//      sd1.setIsContinuation(true);", "+//      LanguageLevelConverter._newSDs.clear();", "+//      LanguageLevelConverter.symbolTable.put(_ibfv._symbolData.getName() + \"$Lisa\", sd0);", "-      SymbolData sd = _ibfv._symbolData.getInnerClassOrInterface(\"Lisa\");", "+      SymbolData sd0 = _ibfv._symbolData.getInnerClassOrInterface(\"Lisa\");", "+      assertNotNull(\"Inner class Lisa exists\", sd0);", "-      assertEquals(\"This symbolData should now have sd0 as an inner class\", sd0, sd);", "-      assertEquals(\"sd0 should have the correct outer data\", _ibfv._symbolData, sd0.getOuterData());", "+      assertEquals(\"Lisa should have the correct outer data\", _ibfv._symbolData, sd0.getOuterData());", "+      assertTrue(\"_sd1 should be an interface\", _sd1.isInterface());", "-      assertFalse(\"sd1 should be a class\", sd1.isInterface());", "-      assertTrue(\"Top symbol data should be an interface\", _ibfv._symbolData.isInterface());", "-      assertEquals(\"sd1 should have the correct outer data\", sd0, sd1.getOuterData());", "-      assertEquals(\"Sd should now have sd1 as an inner class\", sd1, sd.getInnerClassOrInterface(\"Bart\"));", "+      assertEquals(\"Lisa should have 0 methods\", 0, sd0.getMethods().size());  ", "-      assertEquals(\"Lisa should have 0 methods\", 0, sd0.getMethods().size());", "+      SymbolData sd1 = sd0.getInnerClassOrInterface(\"Bart\");", "+      assertNotNull(\"Inner class Bart exists\", sd1);", "+      ", "+      assertEquals(\"Bart should have the correct outer data\", sd0, sd1.getOuterData());", "+      assertFalse(\"sd1 should be a class\", sd1.isInterface());", "+      assertEquals(\"Bart should have 0 methods\", 0, sd1.getMethods().size());"]}], "num": 21430}
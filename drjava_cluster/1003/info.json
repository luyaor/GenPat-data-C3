{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d66c2a173d4c9ad6c89795f1033bf10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4412000db0b75af98d1ddcf7921619d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "9b6f07f2b132c681f98fe8fb44100b84e5395f40", "commitAfterChange": "7bd20caf83d6124a213367b39b105aa050de6539", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(                             JTree tree,                             Object value,                             boolean sel,                             boolean expanded,                             boolean leaf,                             int row,                             boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(                             JTree tree,                             Object value,                             boolean sel,                             boolean expanded,                             boolean leaf,                             int row,                             boolean hasFocus)", "diff": ["-", "-            super.getTreeCellRendererComponent(", "-                            tree, value, sel,", "-                            expanded, leaf, row,", "-                            hasFocus);", "-            DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "-            if (node instanceof RootNode) {", "-              setIcon(_projectIcon);", "-            }else", "-            if(node.getUserObject() instanceof INavigatorItem){", "-              INavigatorItem doc = (INavigatorItem)(node.getUserObject());", "-              _filename = doc.toString();", "-              if (leaf) {", "-                if (_javaIcon != null && _filename.endsWith(\".java  \")) {", "-                  setIcon(_javaIcon);", "-                }", "-                else if (_javaMIcon != null && _filename.endsWith(\".java *\")) {", "-                  setIcon(_javaMIcon);", "-                }", "-                else if (_elementaryIcon != null && _filename.endsWith(\".dj0  \")) {", "-                  setIcon(_elementaryIcon);", "-                }", "-                else if (_elementaryMIcon != null && _filename.endsWith(\".dj0 *\")) {", "-                  setIcon(_elementaryMIcon);", "-                }", "-                else if (_intermediateIcon != null && _filename.endsWith(\".dj1  \")) {", "-                  setIcon(_intermediateIcon);", "-                }", "-                else if (_intermediateMIcon != null && _filename.endsWith(\".dj1 *\")) {", "-                  setIcon(_intermediateMIcon);", "-                }", "-                else if (_intermediateIcon != null && _filename.endsWith(\".dj2  \")) {", "-                  setIcon(_advancedIcon);", "-                }", "-                else if (_advancedMIcon != null && _filename.endsWith(\".dj2 *\")) {", "-                  setIcon(_advancedMIcon);", "-                }", "-                else if (_otherMIcon != null && _filename.endsWith(\" *\")) {", "-                  setIcon(_otherMIcon);", "-                }", "-                else if (_otherIcon != null) {", "-                  setIcon(_otherIcon);", "-                }", "-              }", "-            }else if(value instanceof String){", "-              // a directory", "-            }", "-            ", "-            return this;", "+      ", "+      super.getTreeCellRendererComponent(", "+                                         tree, value, sel,", "+                                         expanded, leaf, row,", "+                                         hasFocus);", "+      DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;", "+      if (node instanceof RootNode) {", "+        setIcon(_projectIcon);", "+      }else if(node.getUserObject() instanceof INavigatorItem){", "+        INavigatorItem doc = (INavigatorItem)(node.getUserObject());", "+        if (leaf) {", "+          if (_displayManager != null) {", "+            setIcon(_displayManager.getIcon(doc));", "+          }", "+        }", "+      }else if(value instanceof String){", "+        // a directory", "+      }", "+      return this;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3813ee3e1c9d81638a605cf63f455a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-   *  (JUnitStarted) and performs the tests. */", "-  private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests) {", "-    // Set _testInProgress flag", "+   *  classes by searching the build directories for the documents. */", "+  private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests) {", "+", "-", "-    // Gets system classpaths from the main JVM so that junit tests can find every class file.", "-    // Given as one long String, this separates the paths into a list of strings. 3/12/05", "-", "-//    LinkedList<String> classpaths = separateClasspath(getClasspath().toString());", "-    // new ScrollableDialog(null, \"classpaths assembled in junitOpenDefDocs: \" + classpaths, \"\", \"\").show();", "-    ", "-    if (_model.hasOutOfSyncDocuments()) {", "-//      System.err.println(\"Calling compileBeforeJunit\");", "-      _notifier.compileBeforeJUnit();", "-      if (_model.hasOutOfSyncDocuments()) {", "-        nonTestCase(true);", "-        return;", "-      }", "-      // We should probably display some form of dialog box saying that testing is being abandoned", "-    }", "-", "-    // Initialize openDocFiles and classDirsAndRoots  ", "+    // Initialize openDocFiles and classDirsAndRoots", "+    // All packageNames should be valid because all source files are compiled", "-      if (! doc.isUntitled())", "-        try {", "-        String canonPathName = doc.getFile().getCanonicalPath();", "-        // Ensure that file name ends with \".java\" or \".dji\" extension to .java", "-        if (! (canonPathName.endsWith(\".java\") || canonPathName.endsWith(\".dj0\") || canonPathName.endsWith(\".dj1\") || ", "-               canonPathName.endsWith(\".dj2\"))) ", "-              continue;", "-//        System.err.println(\"Adding \" + canonPathName + \" to openDocFiles\");", "-        ", "-        String packageName = null;", "-        try { packageName = doc.getPackageName(); }", "-        catch(InvalidPackageException e) { ", "-//          System.out.println(doc + \" has illegal package name\");", "-          continue; ", "-        }", "+      if (doc.isSourceFile())  { // excludes Untitled documents and open non-source files", "-        openDocFiles.add(canonPathName);", "+        openDocFiles.add(doc.getCanonicalPath());", "-        packageName = packageName.replace('.', File.separatorChar);", "+        String packagePath = doc.getPackageName().replace('.', File.separatorChar);", "-        File classFileDir = new File(buildRoot.getCanonicalPath() + File.separator + packageName);", "+        File classFileDir = new File(FileOps.getCanonicalPath(buildRoot) + File.separator + packagePath);", "-        File sourceDir = (buildDir == null) ? classFileDir : new File(sourceRoot.getCanonicalPath() + File.separator + packageName);", "+        File sourceDir = ", "+          (buildDir == null) ? classFileDir : new File(FileOps.getCanonicalPath(sourceRoot) + File.separator + packagePath);", "-//          System.err.println(\"Adding \" + classFileDir + \" with source root \" + sourceRoot + \" to list of class directories\");", "+//          System.err.println(\"Adding \" + classFileDir + \" with source root \" + sourceRoot + ", "+//          \" to list of class directories\");", "-      ", "-      catch(IOException e) { /* do nothing b/c the directory doesn't exist */ }", "-      catch(InvalidPackageException e) { /* do nothing, b/c it's package is bogus */ }", "-", "+            // Add this class and the corrresponding source file to classNames and files, respectively.", "+            // Finding the source file is non-trivial because it may be a language-levels file", "+            ", "-              /** The absolute pathname for the file (including the file name) */", "-", "+              ", "+              /** The canonical pathname for the file (including the file name) */", "+              File sourceFile = new File(sourceFileName);", "-              files.add(new File(sourceFileName));", "+              files.add(sourceFile);", "-    finally { ", "+//    finally { ", "-    }", "+//    }", "-    // This is the WRONG way to ensure mutually exclusive compilation and testing because it invites deadlock.", "-    // Simply disable compile commands while testing.", "+    // TODO: should we disable compile commands while testing?  Should we use protected flag instead of lock?", "+//        Utilities.show(\"Set of test classes is empty!\");", "-        synchronized(_testLock) { _testInProgress = false;}", "+        _testInProgress = false;"]}], "num": 1003}
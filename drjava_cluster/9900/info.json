{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa2464440e69cb7d1ff0883b732aafbb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06498c3a93417efb544f370abb8159fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/DelayedInterrupter.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public DelayedInterrupter(Thread worker, final int timeToInterrupt)", "signatureAfterChange": "   public DelayedInterrupter(Thread worker, final long timeToInterrupt)", "diff": ["-  public DelayedInterrupter(Thread worker, final int timeToInterrupt) {", "+  public DelayedInterrupter(Thread worker, final long timeToInterrupt) {", "-    _interrupter = new Thread(\"DelayedInterrupter\") {", "-      public void run() {", "-        try {", "-          sleep(timeToInterrupt);", "-          _worker.interrupt();", "-        }", "-        catch (InterruptedException e) { /* abort has occurred */ }", "-      }", "+    _task = new TimerTask() {", "+      public void run() { _worker.interrupt(); }", "-    _interrupter.setDaemon(true);", "-    _interrupter.start();", "+    TIMER.value().schedule(_task, timeToInterrupt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3a3805bb263730663268f452aca79d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "6f65660ac59d60c67824b69ecafc847d84a92da8", "commitAfterChange": "8279bc33117c74621df6401dedd10a0cae247a2c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public abstract void start(MasterRemote master) throws RemoteException;", "signatureAfterChange": "   public final void start(final MasterRemote master) throws RemoteException", "diff": ["-  public abstract void start(MasterRemote master) throws RemoteException;", "+   */", "+  public final void start(final MasterRemote master) throws RemoteException {", "+    Thread thread = new Thread() {", "+      public void run() {", "+        while (true) {", "+          try {", "+            Thread.currentThread().sleep(CHECK_MAIN_VM_ALIVE_MINUTES*60*1000);", "+          }", "+          catch (InterruptedException ie) {", "+          }", "+", "+          try {", "+            master.checkStillAlive();", "+          }", "+          catch (RemoteException re) {", "+            // not there anymore. quit!", "+            quit();", "+          }", "+        }", "+      }", "+    };", "+", "+    thread.setDaemon(true);", "+    thread.start();", "+", "+    handleStart(master);", "+  }"]}], "num": 9900}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de2194727641cee7f906f861c8201e9b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1951173be20b6e755b6f2184346bd737", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected boolean isConstructor(Data d)", "signatureAfterChange": "   protected boolean isConstructor(Data d)", "diff": ["-    if (!(d instanceof MethodData)) return false;", "+    if ( !(d instanceof MethodData) ) return false;", "+    SymbolData rt = md.getReturnType();", "+    SymbolData sd = md.getSymbolData();  // if this is a constructor, sd must be a defined symbol", "-    return (md.getReturnType() != null) && (md.getSymbolData() != null) &&", "-      (md.getReturnType().getName().indexOf(md.getName()) != -1) && ", "-      (md.getReturnType() == md.getSymbolData());", "+    return (rt != null && sd != null && rt.getName().indexOf(md.getName()) != -1 && rt == sd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a30ee3c6ea96b2bea5a19bfb8692c667", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f85f20b04a845bc5f3cc15aa220d5ca52f7ac620", "commitAfterChange": "65a7277b66a8820a81606e41a75578dc0c567fde", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(SimpleFieldAccess node)", "diff": ["+        DJClass enclosingThis = enclosingThis(t);", "+        boolean onlyStatic = (enclosingThis == null);", "-        if (context.getThis() == null) {", "+        if (onlyStatic) {", "-        if (!ref.field().isStatic()) {", "-          setDJClass(node, t.ofClass());", "-        }", "+        if (!onlyStatic) { setDJClass(node, enclosingThis); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acb5b55b22976f95f55b4b8e65b9a5e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "37449cba11f74bdf3921e2b515b5228eef23235b", "commitAfterChange": "43a72be50c3246f8e631a488321fd0367ada5a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public NewVersionPopup(MainFrame parent)", "signatureAfterChange": "   public NewVersionPopup(MainFrame parent)", "diff": ["-    _modeBox = new JComboBox(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.toArray());", "-    for(int i = 0; i < OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.size(); ++i) {", "-      if (DrJava.getConfig().getSetting(OptionConstants.NEW_VERSION_NOTIFICATION)", "-            .equals(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(i))) {", "+    final ArrayList<String> choices = OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES;", "+    final int size = choices.size();", "+    _modeBox = new JComboBox<String>(choices.toArray(new String[size]));", "+    for(int i = 0; i < size; ++i) {", "+      if (DrJava.getConfig().getSetting(OptionConstants.NEW_VERSION_NOTIFICATION).equals(choices.get(i))) {", "-        DrJava.getConfig().setSetting(OptionConstants.NEW_VERSION_NOTIFICATION,", "-                                      OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(_modeBox.getSelectedIndex()));", "+        DrJava.getConfig().setSetting(OptionConstants.NEW_VERSION_NOTIFICATION, choices.get(_modeBox.getSelectedIndex()));"]}], "num": 27265}
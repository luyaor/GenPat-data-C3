{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e146a56ac124149f30024014dd77441", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2708a7368b25a802b88a421b320c591d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "               public void testForInterfaceDef()", "signatureAfterChange": "               public void testForInterfaceDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      InterfaceDef id = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "-                                                        new BodyItemI[] {amd}));", "-      InterfaceDef id2 = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"id\", new Type[0])}, ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "-                                                        new BodyItemI[] {amd2}));", "+      AbstractMethodDef amd = ", "+        new AbstractMethodDef(NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(NO_INFO, \"int\"),", "+                              new Word(NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      AbstractMethodDef amd2 = ", "+        new AbstractMethodDef(NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(NO_INFO, \"int\"),", "+                              new Word(NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      InterfaceDef id =", "+        new InterfaceDef(NO_INFO, _publicMav, new Word(NO_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "+                                         new BracedBody(NO_INFO, new BodyItemI[] {amd}));", "+      InterfaceDef id2 =", "+        new InterfaceDef(NO_INFO, _publicMav, new Word(NO_INFO, \"id2\"), new TypeParameter[0],", "+                         new ReferenceType[] {new ClassOrInterfaceType(NO_INFO, \"id\", new Type[0])}, ", "+                         new BracedBody(NO_INFO, new BodyItemI[] {amd2}));", "+      ", "-      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], new String[0], sd, amd);", "+      MethodData md = ", "+        new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], ", "+                       new String[0], sd, amd);", "-      MethodData md2 = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], new String[0], sd2, amd2);", "+      MethodData md2 = ", "+        new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0],", "+                       new String[0], sd2, amd2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e709e02ede6180984a2d31d4b349bbb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                                                    new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      AbstractMethodDef amd2 = new AbstractMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                                                     new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "-                                         new BracedBody(SourceInfo.NO_INFO, ", "-                                                        new BodyItemI[] {amd}));", "-      InterfaceDef id2 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"id\", new Type[0])}, ", "-                                          new BracedBody(SourceInfo.NO_INFO, ", "-                                                         new BodyItemI[] {amd2}));", "-      SymbolData sd = new SymbolData(\"id\", _publicMav, new TypeParameter[0], new LinkedList<SymbolData>(), null);", "+      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+                                                    PUBLIC_MAV, ", "+                                                    new TypeParameter[0], ", "+                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                                    new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                                                    new FormalParameter[0], ", "+                                                    new ReferenceType[0]);", "+      AbstractMethodDef amd2 = new AbstractMethodDef(SourceInfo.NO_INFO, ", "+                                                     PUBLIC_MAV, ", "+                                                     new TypeParameter[0], ", "+                                                     new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                                     new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                                                     new FormalParameter[0], ", "+                                                     new ReferenceType[0]);", "+      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, ", "+                                         PUBLIC_MAV, ", "+                                         new Word(SourceInfo.NO_INFO, \"id\"), ", "+                                         new TypeParameter[0], ", "+                                         new ReferenceType[0], ", "+                                         new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {amd}));", "+      InterfaceDef id2 = ", "+        new InterfaceDef(SourceInfo.NO_INFO, ", "+                         PUBLIC_MAV, ", "+                         new Word(SourceInfo.NO_INFO, \"id2\"), ", "+                         new TypeParameter[0], ", "+                         new ReferenceType[] { new ClassOrInterfaceType(SourceInfo.NO_INFO, \"id\", new Type[0]) }, ", "+                         new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { amd2 }));", "+      SymbolData sd = new SymbolData(\"id\", PUBLIC_MAV, new TypeParameter[0], new ArrayList<SymbolData>(), null);", "-      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], new String[0], sd, amd);", "+      MethodData md = ", "+        new MethodData(\"myMethod\", PUBLIC_MAV, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], ", "+                       new String[0], sd, amd);", "-      LinkedList<SymbolData> interfaces = new LinkedList<SymbolData>();", "-      interfaces.addLast(sd);", "-      SymbolData sd2 = new SymbolData(\"id2\", _publicMav, new TypeParameter[0], interfaces, null);", "+      ArrayList<SymbolData> interfaces = new ArrayList<SymbolData>();", "+      interfaces.add(sd);", "+      SymbolData sd2 = new SymbolData(\"id2\", PUBLIC_MAV, new TypeParameter[0], interfaces, null);", "-      MethodData md2 = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], new String[0], sd2, amd2);", "-      ", "+      MethodData md2 = ", "+        new MethodData(\"myMethod\", PUBLIC_MAV, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[0], ", "+                       new String[0], sd2, amd2);"]}], "num": 28384}
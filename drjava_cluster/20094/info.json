{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "663da0b29b7c4f165ba01eda5b8bcf4e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d5130958c747f974a3fbcf4d49b7e25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "signatureAfterChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "diff": ["-    if ((sd1.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "-         sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-        (sd2.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "-         sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+    if ((sd1.isDoubleType(JAVA_VERSION) &&", "+         sd2.isNumberType(JAVA_VERSION)) ||", "+        (sd2.isDoubleType(JAVA_VERSION) &&", "+         sd1.isNumberType(JAVA_VERSION))) {", "-    else if ((sd1.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-             (sd2.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+    else if ((sd1.isFloatType(JAVA_VERSION) &&", "+              sd2.isNumberType(JAVA_VERSION)) ||", "+             (sd2.isFloatType(JAVA_VERSION) &&", "+              sd1.isNumberType(JAVA_VERSION))) {", "-    else if ((sd1.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-             (sd2.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+    else if ((sd1.isLongType(JAVA_VERSION) &&", "+              sd2.isNumberType(JAVA_VERSION)) ||", "+             (sd2.isLongType(JAVA_VERSION) &&", "+              sd1.isNumberType(JAVA_VERSION))) {", "-    else if (sd1.isBooleanType(LanguageLevelConverter.OPT.javaVersion()) &&", "-             sd2.isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+    else if (sd1.isBooleanType(JAVA_VERSION) &&", "+             sd2.isBooleanType(JAVA_VERSION)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27999ca61854f046fd85efda968272b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "signatureAfterChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "diff": ["-   */\r", "-  protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2) {\r", "-    if ((sd1.isDoubleType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-        (sd2.isDoubleType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.DOUBLE_TYPE;\r", "-    }\r", "-    else if ((sd1.isFloatType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-             (sd2.isFloatType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.FLOAT_TYPE;\r", "-    }\r", "-    else if ((sd1.isLongType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-             (sd2.isLongType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.LONG_TYPE;\r", "-    }\r", "-    else if (sd1.isBooleanType(_targetVersion) && sd2.isBooleanType(_targetVersion)) {\r", "-      return SymbolData.BOOLEAN_TYPE;\r", "-    }\r", "-    else return SymbolData.INT_TYPE; // NOTE: It seems like any binary operation on number types with only ints, shorts, chars, or bytes will return an int\r", "-  }\r", "+   */", "+  protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2) {", "+    if ((sd1.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "+         sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+        (sd2.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "+         sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.DOUBLE_TYPE;", "+    }", "+    else if ((sd1.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+             (sd2.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.FLOAT_TYPE;", "+    }", "+    else if ((sd1.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+             (sd2.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.LONG_TYPE;", "+    }", "+    else if (sd1.isBooleanType(LanguageLevelConverter.OPT.javaVersion()) &&", "+             sd2.isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+      return SymbolData.BOOLEAN_TYPE;", "+    }", "+    else return SymbolData.INT_TYPE; // NOTE: It seems like any binary operation on number types with only ints, shorts, chars, or bytes will return an int", "+  }"]}], "num": 20094}
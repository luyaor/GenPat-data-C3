{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faa2865619fdab33996227ab0e4fa4a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d313956b76e6865cddd3b8b0515c840", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/CheckBoxJList.java", "commitBeforeChange": "2c8ce62ae485e784b2bec820cb7bf72ad52ae36f", "commitAfterChange": "b59ea5c5062a947f96790df7fe854009e693434a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      protected void init(Vector<?> listData, Vector<?> selData)", "signatureAfterChange": "\r   \r   protected void init(Vector<?> listData, Vector<?> selData)", "diff": ["-  ", "-  protected void init(Vector<?> listData, Vector<?> selData) {", "-    CheckBoxListCellRenderer r = new CheckBoxListCellRenderer();", "-    if (selData!=null) {", "-      int i = 0;", "-      for(Object t: listData) {", "-        boolean sel = false;", "-        if (selData.contains(t)) {", "-          selectionCache.add(i);", "-          getSelectionModel().addSelectionInterval(i, i);", "-          sel = true;", "-        }", "-        r.getListCellRendererComponent(this,", "-                                       listData.get(i),", "-                                       i,", "-                                       sel,", "-                                       (i==0));", "-        ++i;", "-      }", "-    }    ", "-    setCellRenderer(r);", "-    addListSelectionListener(this);", "-  }", "+  \r", "+  protected void init(Vector<?> listData, Vector<?> selData) {\r", "+    setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);\r", "+    CheckBoxListCellRenderer r = new CheckBoxListCellRenderer();\r", "+    if (selData!=null) {\r", "+      int i = 0;\r", "+      for(Object t: listData) {\r", "+        boolean sel = false;\r", "+        if (selData.contains(t)) {\r", "+          selectionCache.add(i);\r", "+          getSelectionModel().addSelectionInterval(i, i);\r", "+          sel = true;\r", "+        }\r", "+        r.getListCellRendererComponent(this,\r", "+                                       listData.get(i),\r", "+                                       i,\r", "+                                       sel,\r", "+                                       (i==0));\r", "+        ++i;\r", "+      }\r", "+    }    \r", "+    setCellRenderer(r);\r", "+    addListSelectionListener(this);\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaf02182968ffbc0f0d9535d24331b99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 83, "signatureBeforeChange": "   protected static void createAccessors(SymbolData sd, File file)", "signatureAfterChange": "   protected static void createAccessors(SymbolData sd, File file)", "diff": ["-    Iterator<VariableData> iter = fields.iterator();", "-    while (iter.hasNext()) {", "-      VariableData vd = iter.next();      ", "-      if (!vd.hasModifier(\"static\")) { ", "+    for (final VariableData vd: fields) {     ", "+      if (! vd.hasModifier(\"static\")) { ", "-        String[] mavStrings;", "-        mavStrings = new String[] {\"public\"};", "-        MethodData md = new MethodData(name,", "-                                       new ModifiersAndVisibility(SourceInfo.NO_INFO, mavStrings), ", "-                                       new TypeParameter[0], ", "-                                       vd.getType().getSymbolData(), ", "-                                       new VariableData[0],", "-                                       new String[0], ", "-                                       sd,", "-                                       null); // no SourceInfo", "+        SymbolData returnTypeSD = vd.getType();", "+        final MethodData md = new MethodData(name,", "+                                             PUBLIC_MAV, ", "+                                             new TypeParameter[0], ", "+                                             returnTypeSD, ", "+                                             new VariableData[0],", "+                                             new String[0], ", "+                                             sd,", "+                                             null); // no SourceInfo", "+        if (returnTypeSD == null) { // create a fixup to patch the return type of md; vd may have pending return type", "+          Command fixUp = new Command() {", "+            public void execute() { md.setReturnType(vd.getType()); }", "+          };", "+          fixUps.add(fixUp);", "+        } ", "-  }", "+  } "]}], "num": 23041}
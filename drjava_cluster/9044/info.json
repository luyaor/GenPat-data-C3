{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abe6f1301f682e3474170f8992f47685", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00aca37628db9123139f88ac3f79b33a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private Method _getMethod(ReferenceType rt, String name)", "signatureAfterChange": "   private Method _getMethod(ReferenceType rt, String name)", "diff": ["-    List methods = rt.methodsByName(name);", "-    Iterator methodsIterator = methods.iterator();", "+    List<Method> methods = rt.methodsByName(name);  // JDK 1.5 will eliminate this warning", "+    Iterator<Method> methodsIterator = methods.iterator();", "-      Method m = (Method)methodsIterator.next();", "+      Method m = methodsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c2cd93f96badaaab6a89b145892ce2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private Method _getMethod(ReferenceType rt, String name)", "signatureAfterChange": "   private Method _getMethod(ReferenceType rt, String name)", "diff": ["-    List methods = rt.methodsByName(name);", "-    Iterator methodsIterator = methods.iterator();", "+    List<Method> methods = rt.methodsByName(name);  // JDK 1.5 will eliminate this warning", "+    Iterator<Method> methodsIterator = methods.iterator();", "-      Method m = (Method)methodsIterator.next();", "+      Method m = methodsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2243e0cbfd49bf871777910b8b97e383", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/gui/Editor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "          protected void update()", "signatureAfterChange": "          protected void update()", "diff": ["+    ", "+    protected void update() {", "+      Iterator<JComponent> it = components.iterator();", "+      while (it.hasNext()) {", "+        it.next().setEnabled(undo.canRedo());", "+      }", "+    }", "-", "-        protected void update() {", "-\t    Iterator it = components.iterator();", "-\t    while (it.hasNext()) {", "-\t\t((JComponent)it.next()).setEnabled(undo.canRedo());", "-\t    }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e14fd26e19972ea53a10ed33e5b94d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/gui/Main.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          protected void update()", "signatureAfterChange": "          protected void update()", "diff": ["-", "-        protected void update() {", "-\t    Iterator it = components.iterator();", "-\t    while (it.hasNext()) {", "-\t\t((JComponent)it.next()).setEnabled(!isRunning);", "-\t    }", "+    ", "+    protected void update() {", "+      Iterator<JComponent> it = components.iterator();", "+      while (it.hasNext()) {", "+        it.next().setEnabled(!isRunning);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "380f8fe84d16ef46ddb398e89aecd64c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/gui/Main.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "          protected void update()", "signatureAfterChange": "          protected void update()", "diff": ["+    ", "+    protected void update() {", "+      Iterator<JComponent> it = components.iterator();", "+      while (it.hasNext()) {", "+        it.next().setEnabled(selectionStart != -1 && !isRunning);", "+      }", "+    }", "-", "-        protected void update() {", "-\t    Iterator it = components.iterator();", "-\t    while (it.hasNext()) {", "-\t\t((JComponent)it.next()).setEnabled(selectionStart != -1 && !isRunning);", "-\t    }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "387ad9e99466128110a6f9863eba89c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/gui/Editor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          protected void update()", "signatureAfterChange": "          protected void update()", "diff": ["+    ", "+    protected void update() {", "+      documentModified = undo.canUndo();", "+      Iterator<JComponent> it = components.iterator();", "+      while (it.hasNext()) {", "+        it.next().setEnabled(documentModified);", "+      }", "+    }", "-", "-        protected void update() {", "-            documentModified = undo.canUndo();", "-\t    Iterator it = components.iterator();", "-\t    while (it.hasNext()) {", "-\t\t((JComponent)it.next()).setEnabled(documentModified);", "-\t    }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "673584a9bbd8e095c77e11fca6204f2b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-    List vars = frame.visibleVariables();", "-    Iterator varsIterator = vars.iterator();", "+    List<LocalVariable> vars = frame.visibleVariables();  // Added <LocalVariable> type argument; warning will go away in JDK 1.5", "+    Iterator<LocalVariable> varsIterator = vars.iterator();", "-      LocalVariable localVar = (LocalVariable)varsIterator.next();", "+      LocalVariable localVar = varsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712ebb935cb07ef89b1d5836e33276ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-    List vars = frame.visibleVariables();", "-    Iterator varsIterator = vars.iterator();", "+    List<LocalVariable> vars = frame.visibleVariables();  // Added <LocalVariable> type argument; warning will go away in JDK 1.5", "+    Iterator<LocalVariable> varsIterator = vars.iterator();", "-      LocalVariable localVar = (LocalVariable)varsIterator.next();", "+      LocalVariable localVar = varsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "739956e4c903d3a8ad71ed27ffd1c3db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "signatureAfterChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "diff": ["-    List connectors = vmm.attachingConnectors();  // Add parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "+    List<AttachingConnector> connectors = vmm.attachingConnectors();  // Added parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "-    java.util.Iterator iter = connectors.iterator();", "+    java.util.Iterator<AttachingConnector> iter = connectors.iterator();", "-      AttachingConnector conn = (AttachingConnector)iter.next();", "+      AttachingConnector conn = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f75551a708810cf320e3c0cd528108c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "   public Object visit(ArrayAllocation node)", "diff": ["+   */", "+  public Object visit(ArrayAllocation node) {", "+    // Visits the initializer if one", "+    if (node.getInitialization() != null) {", "+      return node.getInitialization().acceptVisitor(this);", "+    ", "+    // Evaluate the size expressions", "+    int[]    dims = new int[node.getSizes().size()];", "+    Iterator<Expression> it = node.getSizes().iterator();", "+    int i  = 0;", "+    while (it.hasNext()) {", "+      Number n = (Number)it.next().acceptVisitor(this);", "+      dims[i++] = n.intValue();", "-     */", "-    public Object visit(ArrayAllocation node) {", "-\t// Visits the initializer if one", "-\tif (node.getInitialization() != null) {", "-\t    return node.getInitialization().acceptVisitor(this);", "-\t}", "-", "-\t// Evaluate the size expressions", "-\tint[]    dims = new int[node.getSizes().size()];", "-\tIterator it = node.getSizes().iterator();", "-\tint      i  = 0;", "-\twhile (it.hasNext()) {", "-\t    Number n = (Number)((Expression)it.next()).acceptVisitor(this);", "-\t    dims[i++] = n.intValue();", "-\t}", "-", "-\t// Create the array", "-\tif (node.getDimension() != dims.length) {", "-\t    Class c = NodeProperties.getComponentType(node);", "-\t    c = Array.newInstance(c, 0).getClass();", "-\t    return Array.newInstance(c, dims);", "-\t} else {", "-\t    return Array.newInstance(NodeProperties.getComponentType(node), dims);", "-\t}", "+    ", "+    // Create the array", "+    if (node.getDimension() != dims.length) {", "+      Class c = NodeProperties.getComponentType(node);", "+      c = Array.newInstance(c, 0).getClass();", "+      return Array.newInstance(c, dims);", "+    } else {", "+      return Array.newInstance(NodeProperties.getComponentType(node), dims);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad41bb281bf7f5da3fa2b1bba3a44af7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Object visit(BlockStatement node)", "signatureAfterChange": "   public Object visit(BlockStatement node)", "diff": ["-      Iterator it = node.getStatements().iterator();", "+      Iterator<Node> it = node.getStatements().iterator();", "-        ((Node)it.next()).acceptVisitor(this);", "+        it.next().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca232e2730265cf2d111881792094a46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "signatureAfterChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "diff": ["-    List connectors = vmm.attachingConnectors();  // Add parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "+    List<AttachingConnector> connectors = vmm.attachingConnectors();  // Added parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "-    java.util.Iterator iter = connectors.iterator();", "+    java.util.Iterator<AttachingConnector> iter = connectors.iterator();", "-      AttachingConnector conn = (AttachingConnector)iter.next();", "+      AttachingConnector conn = iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f2a73293673ec1e078d9df855a0918", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Object visit(TryStatement node)", "signatureAfterChange": "   public Object visit(TryStatement node)", "diff": ["-      Iterator it = node.getCatchStatements().iterator();", "+      Iterator<CatchStatement> it = node.getCatchStatements().iterator();", "-        CatchStatement cs = (CatchStatement)it.next();", "-        Class c = NodeProperties.getType(cs.getException().getType());", "+        CatchStatement cs = it.next();", "+        Class<?> c = NodeProperties.getType(cs.getException().getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8bb76e7e28d1f315c7920f386796f2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(ArrayInitializer node)", "signatureAfterChange": "   public Object visit(ArrayInitializer node)", "diff": ["-     */", "-    public Object visit(ArrayInitializer node) {", "-\tObject result = Array.newInstance(NodeProperties.getType(node.getElementType()),", "-\t\t\t\t\t  node.getCells().size());", "-", "-\tIterator it = node.getCells().iterator();", "-\tint      i  = 0;", "-\twhile (it.hasNext()) {", "-\t    Object o = ((Expression)it.next()).acceptVisitor(this);", "-\t    Array.set(result, i++, o);", "-\t}", "-\treturn result;", "+   */", "+  public Object visit(ArrayInitializer node) {", "+    Object result = Array.newInstance(NodeProperties.getType(node.getElementType()),", "+                                      node.getCells().size());", "+    ", "+    Iterator<Expression> it = node.getCells().iterator();", "+    int      i  = 0;", "+    while (it.hasNext()) {", "+      Object o = it.next().acceptVisitor(this);", "+      Array.set(result, i++, o);", "+    return result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8dae36c1c9d456433eb03978208d45b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "6595282fd67e77d6079df1ee1647ba51751bbcec", "commitAfterChange": "de0f38d123822794b2970bd8e5814e75677feb46", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void defineVariables(Set vars)", "signatureAfterChange": "   public void defineVariables(Set<AbstractVariable> vars)", "diff": ["-  public void defineVariables(Set vars) {", "-    Iterator it = vars.iterator();", "+  public void defineVariables(Set<AbstractVariable> vars) {", "+    Iterator<AbstractVariable> it = vars.iterator();", "-      AbstractVariable v = (AbstractVariable)it.next();", "+      AbstractVariable v = it.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f20bc2c74483a3a8538dd61fc2d15b97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/gui/Main.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "          protected void update()", "signatureAfterChange": "          protected void update()", "diff": ["+    ", "+    protected void update() {", "+      Iterator<JComponent> it = components.iterator();", "+      while (it.hasNext()) {", "+        it.next().setEnabled(isRunning);", "+      }", "+    }", "-", "-        protected void update() {", "-\t    Iterator it = components.iterator();", "-\t    while (it.hasNext()) {", "-\t\t((JComponent)it.next()).setEnabled(isRunning);", "-\t    }", "-        }"]}], "num": 9044}
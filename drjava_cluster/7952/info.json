{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "233158686089acfa8c8b84d10452fda8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "037effcb913396e3e02428f862cbeb58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1555d1cb14e076ea1030f08b3fde8f9710fe3a1d", "commitAfterChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private int _replaceAllInCurrentDoc()", "signatureAfterChange": "   private int _replaceAllInCurrentDoc()", "diff": ["-//    System.err.println(\"_replaceAllInCurrentDoc() called; _doc = [\" + _doc.getText() + \"]\");", "-    _doc.acquireWriteLock();", "-    try {", "-      if (_isForward) setPosition(0);", "-      else setPosition(_doc.getLength());", "-      ", "-      int count = 0;", "-      FindResult fr = findNext(false);  // find next match in current doc   ", "+", "+    assert EventQueue.isDispatchThread();", "+    ", "+    if (_isForward) setPosition(0);", "+    else setPosition(_doc.getLength());", "+    ", "+    int count = 0;", "+    FindResult fr = findNext(false);  // find next match in current doc   ", "-      ", "-      while (! fr.getWrapped()) {", "-        replaceCurrent();", "-        count++;", "+    ", "+    while (! fr.getWrapped()) {", "+      replaceCurrent();  // sets writeLock so that other threads do not see inconsistent state", "+      count++;", "-        fr = findNext(false);           // find next match in current doc", "+      fr = findNext(false);           // find next match in current doc", "-      }", "-      return count;", "-    finally { _doc.releaseWriteLock(); }", "+    return count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2643090eea6d4d84c801943ef08cefa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 154, "signatureBeforeChange": "   public void toggleBookmark(int pos1, int pos2)", "signatureAfterChange": "   public void _toggleBookmark(int pos1, int pos2)", "diff": ["-  public void toggleBookmark(int pos1, int pos2) {", "+    * @param pos2 second selection position */", "+  public void _toggleBookmark(int pos1, int pos2) {", "+    assert doc.isReadLocked();", "-    int startSel = Math.min(pos1,pos2);", "-    int endSel = Math.max(pos1,pos2);", "-    doc.acquireReadLock();  // Must follow readers/writers protocol even in event thread", "+    int startSel = Math.min(pos1, pos2);", "+    int endSel = Math.max(pos1, pos2);", "+//    doc.acquireReadLock();  // Must follow readers/writers protocol even in event thread", "-        endSel = doc.getLineEndPos(startSel);", "-        startSel = doc.getLineStartPos(startSel);", "+        endSel = doc._getLineEndPos(startSel);", "+        startSel = doc._getLineStartPos(startSel);", "-    finally { doc.releaseReadLock(); }", "+//    finally { doc.releaseReadLock(); }"]}], "num": 7952}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d686061b113b91117e188b0fc1d4caae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d9defb1137969f54dddfc9833495f01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 156, "methodNumberAfterChange": 246, "signatureBeforeChange": "           public File getFile() throws FileMovedException", "signatureAfterChange": "   public synchronized void addToBrowserHistory()", "diff": ["-          public OpenDefinitionsDocument getDocument() { return odd; }", "-          public File getFile() throws FileMovedException { return odd.getFile(); }", "+  /** Add the current location to the browser history. */", "+  public synchronized void addToBrowserHistory() {", "+    final OpenDefinitionsDocument doc = getActiveDocument();", "+    ", "+    if (doc!=null) {", "+      doc.acquireReadLock();", "+      try {", "+        final Position startPos = doc.createPosition(doc.getCaretPosition());", "+        final Position endPos = doc.createPosition(doc.getLineEndPos(doc.getCaretPosition()));", "+        getBrowserHistoryManager().addRegion(new SimpleDocumentRegion(doc, doc.getFile(), startPos.getOffset(), endPos.getOffset()));", "+      }", "+      catch (FileMovedException fme) {", "+        throw new UnexpectedException(fme);", "+      }", "+      catch (BadLocationException ble) {", "+        throw new UnexpectedException(ble);", "+      }", "+      finally { doc.releaseReadLock(); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3409b5bc26bc7013779879b2aae059a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "signatureAfterChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "diff": ["+    final Object _lock = new Object();", "-    OpenDefinitionsDocument doc = pane.getOpenDefDocument();//.getDocument();", "+    OpenDefinitionsDocument doc;", "+    synchronized(_lock) {", "+      doc = pane.getOpenDefDocument();//.getDocument();", "+    }", "-    try {", "-      Thread.sleep(1000); ", "+    /**", "+     * UPDATE: 7/16/2004 by pakruse. Synchronizing the two statements prevents this test from hanging. Still don't know why", "+     * this happens, but no more need for the Thread.sleep command.", "+     * If this test ever takes more than two minutes to run, then it's hanging, and the following lines should be added back in:", "+     */", "+//    try {", "+//      Thread.sleep(1000); ", "+//    }", "+//    catch(java.lang.InterruptedException e) {", "+//    ", "+//    }", "+       ", "+    synchronized(_lock) {", "+      doc.insertString(0, \"abcd\", null);", "-    catch(java.lang.InterruptedException e) {", "-    }", "-        ", "-    doc.insertString(0, \"abcd\", null);", "-"]}], "num": 28412}
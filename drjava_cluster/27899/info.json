{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb2507f598781cce5fec126891f347fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb416e2ece8232a90ecb49484d9fd5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "          public void testAutoBoxingAndUnboxing()", "signatureAfterChange": "          public void testAutoBoxingAndUnboxing()", "diff": ["-      Expression e = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO,", "-                                                new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"),", "-                                                new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{", "-        new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\"))}));", "-      BodyItemI[] bii = new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, e)};", "-      BracedBody b = new BracedBody(JExprParser.NO_SOURCE_INFO, bii);", "+      Expression e = new SimpleMethodInvocation(SourceInfo.NO_INFO,", "+                                                new Word(SourceInfo.NO_INFO, \"myMethod\"),", "+                                                new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{", "+        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "+      BodyItemI[] bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "+      BracedBody b = new BracedBody(SourceInfo.NO_INFO, bii);", "-      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO));", "-      bii = new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, e)};", "-      b = new BracedBody(JExprParser.NO_SOURCE_INFO, bii);", "+      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "+      b = new BracedBody(SourceInfo.NO_INFO, bii);", "-      md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1}, new String[0], null, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO));", "-      _sd1.addMethod(new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      _sd1.addMethod(new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO)));", "-      Expression e2 = new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO,", "-                                                     new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"t\")),", "+      Expression e2 = new SimpleAssignmentExpression(SourceInfo.NO_INFO,", "+                                                     new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"t\")),", "-      BodyItemI[] bii2 = new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, e2)};", "-      BracedBody b2 = new BracedBody(JExprParser.NO_SOURCE_INFO, bii2);", "+      BodyItemI[] bii2 = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e2)};", "+      BracedBody b2 = new BracedBody(SourceInfo.NO_INFO, bii2);", "-      e = new SimpleNamedClassInstantiation(JExprParser.NO_SOURCE_INFO,", "-                                              new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"i.like.monkey\", new Type[0]),", "-                                              new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[] {new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\"))}));", "+      e = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO,", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"i.like.monkey\", new Type[0]),", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "-      bii = new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, e)};", "-      b = new BracedBody(JExprParser.NO_SOURCE_INFO, bii);", "+      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "+      b = new BracedBody(SourceInfo.NO_INFO, bii);", "-      md = new MethodData(\"monkey\", _publicMav, new TypeParameter[0], _sd1, new VariableData[]{vd2}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      md = new MethodData(\"monkey\", _publicMav, new TypeParameter[0], _sd1, new VariableData[]{vd2}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      ExpressionStatement se = new ExpressionStatement(JExprParser.NO_SOURCE_INFO,", "-                                   new PlusAssignmentExpression(JExprParser.NO_SOURCE_INFO,", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")),", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\"))));", "+      ExpressionStatement se = new ExpressionStatement(SourceInfo.NO_INFO,", "+                                   new PlusAssignmentExpression(SourceInfo.NO_INFO,", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\"))));", "-      MethodData md1 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      MethodData md2 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1Obj, vd2Obj}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData md1 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData md2 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1Obj, vd2Obj}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      e = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO,", "-                                                new Word(JExprParser.NO_SOURCE_INFO, \"myMethod2\"),", "-                                     new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{", "-                                                                                new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")),", "-                                                                                  new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\"))}));", "-      bii = new BodyItemI[] {new ExpressionStatement(JExprParser.NO_SOURCE_INFO, e)};", "-      b = new BracedBody(JExprParser.NO_SOURCE_INFO, bii);", "+      e = new SimpleMethodInvocation(SourceInfo.NO_INFO,", "+                                                new Word(SourceInfo.NO_INFO, \"myMethod2\"),", "+                                     new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{", "+                                                                                new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "+                                                                                  new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\"))}));", "+      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "+      b = new BracedBody(SourceInfo.NO_INFO, bii);", "-      MethodData md3 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData md3 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e53116da5abd3d84db894d064458e6dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "          public void testAutoBoxingAndUnboxing()", "signatureAfterChange": "          public void testAutoBoxingAndUnboxing()", "diff": ["-      Expression e = new SimpleMethodInvocation(SourceInfo.NO_INFO,", "-                                                new Word(SourceInfo.NO_INFO, \"myMethod\"),", "-                                                new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{", "-        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "-      BodyItemI[] bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      BracedBody b = new BracedBody(SourceInfo.NO_INFO, bii);", "+      Expression e = new SimpleMethodInvocation(NONE,", "+                                                new Word(NONE, \"myMethod\"),", "+                                                new ParenthesizedExpressionList(NONE, new Expression[]{", "+        new SimpleNameReference(NONE, new Word(NONE, \"i\"))}));", "+      BodyItemI[] bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      BracedBody b = new BracedBody(NONE, bii);", "-      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData md = ", "+        new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd2},", "+                       new String[0], null, NULL_LITERAL);", "-      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      b = new BracedBody(SourceInfo.NO_INFO, bii);", "+      bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      b = new BracedBody(NONE, bii);", "-      md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO));", "+      md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1}, ", "+                          new String[0], null, NULL_LITERAL);", "-      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      _sd1.addMethod(new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO)));", "+      _sd1.addMethod(new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], ", "+                                    SymbolData.BOOLEAN_TYPE, new VariableData[] {vd2}, new String[0], null, ", "+                                    NULL_LITERAL));", "-      Expression e2 = new SimpleAssignmentExpression(SourceInfo.NO_INFO,", "-                                                     new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"t\")),", "+      Expression e2 = new SimpleAssignmentExpression(NONE,", "+                                                     new SimpleNameReference(NONE, new Word(NONE, \"t\")),", "-      BodyItemI[] bii2 = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e2)};", "-      BracedBody b2 = new BracedBody(SourceInfo.NO_INFO, bii2);", "+      BodyItemI[] bii2 = new BodyItemI[] {new ExpressionStatement(NONE, e2)};", "+      BracedBody b2 = new BracedBody(NONE, bii2);", "-      b2.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b2.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                        _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      ", "-      e = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"i.like.monkey\", new Type[0]),", "-                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "+      Expression[] expr1 = new Expression[] {new SimpleNameReference(NONE, new Word(NONE, \"i\"))};", "+      e = new SimpleNamedClassInstantiation(NONE,", "+                                            new ClassOrInterfaceType(NONE, \"i.like.monkey\", new Type[0]),", "+                                            new ParenthesizedExpressionList(NONE, expr1));", "-      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      b = new BracedBody(SourceInfo.NO_INFO, bii);", "+      bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      b = new BracedBody(NONE, bii);", "-                          _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+                          _sd1, NULL_LITERAL);", "-      ExpressionStatement se = new ExpressionStatement(SourceInfo.NO_INFO,", "-                                   new PlusAssignmentExpression(SourceInfo.NO_INFO,", "-                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "-                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\"))));", "+      ExpressionStatement se = new ExpressionStatement(NONE,", "+                                   new PlusAssignmentExpression(NONE,", "+                                       new SimpleNameReference(NONE, new Word(NONE, \"i\")),", "+                                       new SimpleNameReference(NONE, new Word(NONE, \"j\"))));", "-      MethodData md1 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData md2 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1Obj, vd2Obj}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData md1 = ", "+        new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                       new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, NULL_LITERAL);", "+      MethodData md2 = ", "+        new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+                       new VariableData[] {vd1Obj, vd2Obj}, new String[0], _sd1, NULL_LITERAL);", "+      Expression[] expr2 = ", "+        new Expression[]{new SimpleNameReference(NONE, new Word(NONE, \"i\")), ", "+                         new SimpleNameReference(NONE, new Word(NONE, \"j\"))};", "+      e = new SimpleMethodInvocation(NONE,", "+                                     new Word(NONE, \"myMethod2\"),", "+                                     new ParenthesizedExpressionList(NONE, expr2));", "+      bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      b = new BracedBody(NONE, bii);", "-      e = new SimpleMethodInvocation(SourceInfo.NO_INFO,", "-                                                new Word(SourceInfo.NO_INFO, \"myMethod2\"),", "-                                     new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{", "-                                                                                new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "-                                                                                  new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\"))}));", "-      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      b = new BracedBody(SourceInfo.NO_INFO, bii);", "-      ", "-      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-                                      new NullLiteral(SourceInfo.NO_INFO));", "+                                      NULL_LITERAL);", "-      // test that if a sd1 has something that's ambiguous, so the superclass is ambiguous, the error is only thrown once when calling the method in the subclass.", "+      // test that if a sd1 has something that's ambiguous, so the superclass is ambiguous, the error is only thrown ", "+      // once when calling the method in the subclass.", "-      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));"]}], "num": 27899}
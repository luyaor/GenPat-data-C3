{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4f69049c59237d95211e46845e10706", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af5fd3dc1c700e313907a80baecc0f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 328, "signatureBeforeChange": "   private Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params,                                             Iterable<? extends Type> args)", "signatureAfterChange": "   private Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-                                            Iterable<? extends Type> params,", "-                                            Iterable<? extends Type> args) {", "-    //debug.logValues(\"Beginning inferTypeArguments\", new String[]{ \"tparams\", \"params\", \"args\" },", "-    //                wrap(tparams), wrap(params), wrap(args));", "+                                            Iterable<? extends Type> params, Type returned,", "+                                            Iterable<? extends Type> args, Option<Type> expected) {", "+    //debug.logValues(\"Beginning inferTypeArguments\",", "+    //                new String[]{ \"tparams\", \"params\", \"returned\", \"args\", \"expected\" },", "+    //                wrap(tparams), wrap(params), wrap(returned), wrap(args), wrap(expected));", "+    if (expected.isSome() && constraintsBuilder.isSatisfiable()) {", "+      constraintsBuilder = constraintsBuilder.and(inferFromSupertype(expected.unwrap(), returned,", "+                                                                     tparamSet, stack));", "+    }", "+    //debug.logValue(\"constraints\", constraints);", "-    if (constraints.isSatisfiable()) {", "-      return IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "-        public Type value(VariableType param) { return constraints.lowerBound(param); }", "-        // TODO: Handle the case where the lower bound is BOTTOM (following the JLS)", "-      });", "+    if (!constraints.isSatisfiable()) { return null; }", "+", "+    Iterable<Type> result = IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "+      public Type value(VariableType param) { return constraints.lowerBound(param); }", "+    });", "+    if (inBounds(tparams, result)) { return result; }", "+    ", "+    List<Wildcard> constraintWs = new LinkedList<Wildcard>();", "+    for (VariableType param : tparams) {", "+      BoundedSymbol s = new BoundedSymbol(new Object(), constraints.upperBound(param), constraints.lowerBound(param));", "+      constraintWs.add(new Wildcard(s));", "-    else { return null; }", "+    result = captureTypeArgs(constraintWs, tparams);", "+    if (IterUtil.and(result, WELL_FORMED)) { return result; }", "+", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcbd338ce239e5d94f47c5541afbfaeb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 200, "signatureBeforeChange": "      private boolean containsInferenceVariable(Type t, final Set<? extends VariableType> vars,                                              final RecursionStack<Type> stack)", "signatureAfterChange": "       @Override public Boolean forVariableType(VariableType t)", "diff": ["-  ", "-  private boolean containsInferenceVariable(Type t, final Set<? extends VariableType> vars, ", "-                                            final RecursionStack<Type> stack) {", "-    return t.apply(new TypeAbstractVisitor<Boolean>() {", "-      public Boolean defaultCase(Type t) { return false; }", "-      ", "-      @Override public Boolean forArrayType(ArrayType t) { ", "-        return containsInferenceVariable(t.ofType(), vars, stack);", "-      }", "-      ", "-      @Override public Boolean forParameterizedClassType(ParameterizedClassType t) { ", "-        return checkList(t.typeArguments());", "-      }", "-      ", "-      @Override public Boolean forIntersectionType(IntersectionType t) { ", "-        return checkList(t.ofTypes());", "-      }", "-      ", "-      private Boolean checkList(Iterable<? extends Type> types) {", "-        for (Type t : types) { ", "-          if (containsInferenceVariable(t, vars, stack)) { return true; }", "-        }", "-        return false;", "-      }", "-      ", "-      @Override public Boolean forVariableType(final VariableType t) {", "-        if (vars.contains(t)) { return true; }", "-        else {", "-          Thunk<Boolean> handleBounds = new Thunk<Boolean>() {", "-            public Boolean value() {", "-              return containsInferenceVariable(t.symbol().lowerBound(), vars, stack) ||", "-                containsInferenceVariable(t.symbol().upperBound(), vars, stack);", "-            }", "-          };", "-          return stack.apply(handleBounds, false, t);", "-        }", "-      }", "-      ", "-      @Override public Boolean forWildcard(final Wildcard t) {", "-        Thunk<Boolean> handleBounds = new Thunk<Boolean>() {", "-          public Boolean value() {", "-            return containsInferenceVariable(t.symbol().lowerBound(), vars, stack) ||", "-              containsInferenceVariable(t.symbol().upperBound(), vars, stack);", "-          }", "-        };", "-        return stack.apply(handleBounds, false, t);", "-      }", "-      ", "-    });", "-  }", "+      @Override public Boolean forBoundType(BoundType t) {  return checkList(t.ofTypes()); }", "+      @Override public Boolean forVariableType(VariableType t) {", "+        return _vars.contains(t) || checkBoundedSymbol(t, t.symbol());", "+      }"]}], "num": 27822}
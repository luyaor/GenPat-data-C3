{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0650d3769c54bc2932762f1ed3c0c97a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d110787146ad92358996698ac374d1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    @SuppressWarnings(\"fallthrough\")   public static void sanitizeSlaveJVMArgs(JFrame parent,                                           String value,                                           final OptionListener<String> l)", "signatureAfterChange": "\r \r   @SuppressWarnings(\"fallthrough\")\r   public static void sanitizeSlaveJVMArgs(JFrame parent,\r                                           String value,\r                                           final OptionListener<String> l)", "diff": ["-", "-  @SuppressWarnings(\"fallthrough\")", "-  public static void sanitizeSlaveJVMArgs(JFrame parent,", "-                                          String value,", "-                                          final OptionListener<String> l) {", "-    int pos = value.indexOf(\"-Xmx\");", "-    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "-        (pos==0)) {", "-      int endpos = pos+(\"-Xmx\".length());", "-      while((endpos<value.length()) &&", "-            (!Character.isWhitespace(value.charAt(endpos)))) {", "-        ++endpos;", "-      }", "-      ", "-      int startpos = pos+(\"-Xmx\".length());", "-      String size = value.substring(startpos,endpos);", "-      long factor = 1;", "-      long heapSize;", "-      switch(size.toLowerCase().charAt(size.length()-1)) {", "-        case 'g': {", "-          factor *= 1024; // fall-through intended", "-        }", "-        case 'm': {", "-          factor *= 1024; // fall-through intended", "-        }", "-        case 'k': {", "-          factor *= 1024; // fall-through intended", "-          break;", "-        }", "-        default: {", "-          if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1))) {", "-            factor = 0;", "-          }", "-        }", "-      }", "-      try {", "-        if (factor==1) {", "-          heapSize = new Long(size);", "-        }", "-        else if (factor>1) {", "-          heapSize = new Long(size.substring(0,size.length()-1)) * factor;", "-        }", "-        else {", "-          heapSize = -1;", "-        }", "-      }", "-      catch(NumberFormatException nfe) {", "-        heapSize = -1; // invalid", "-      }", "-      long heapSizeMB = (heapSize / 1024) / 1024;", "-      // find the next bigger of the choices", "-      String newSetting = getNextBiggerHeapSize(heapSizeMB);", "-      int result;", "-      if (heapSize>=0) {", "-        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\",", "-          \"Clean \\\"Slave JVM Args\\\"\",", "-          \"Ignore\" };", "-        result = JOptionPane.", "-          showOptionDialog(parent,", "-                           \"You seem to have specified the maximum heap size as part of the\\n\" +", "-                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+", "-                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\"+", "-                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "-                           \"just clean up \\\"JVM Args for Interactions JVM\\\", or ignore this potential problem?\",", "-                           \"Maximum Heap Size Set in JVM Arguments\",", "-                           0,", "-                           JOptionPane.QUESTION_MESSAGE,", "-                           null,", "-                           options,", "-                           options[0]);", "-      }", "-      else {", "-        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\",", "-          \"Ignore\" };", "-        result = JOptionPane.", "-          showOptionDialog(parent,", "-                           \"You seem to have specified the maximum heap size as part of the\\n\" +", "-                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+", "-                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\"+", "-                           \"Furthermore, the specified heap size \\\"\"+size+\"\\\" is invalid.\\n\"+", "-                           \"Would you like to clean up the \\\"JVM Args for Interactions JVM\\\"\\n\"+", "-                           \"or ignore this potential problem?\",", "-                           \"Maximum Heap Size Set in JVM Arguments\",", "-                           0,", "-                           JOptionPane.QUESTION_MESSAGE,", "-                           null,", "-                           options,", "-                           options[0]);", "-        if (result==1) { result = 2; }", "-      }", "-      if (result!=2) {", "-        // clean up", "-        while((endpos<value.length()) &&", "-              (Character.isWhitespace(value.charAt(endpos)))) {", "-          ++endpos;", "-        }", "-        String newValue = value.substring(0,pos) + value.substring(endpos);", "-        DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, l);", "-        DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, new OptionListener<String>() {", "-          public void optionChanged(OptionEvent<String> oe) {", "-            DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, this);", "-            SwingUtilities.invokeLater(new Runnable() { ", "-              public void run() {", "-                DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, l);", "-              }", "-            });", "-          }", "-        });", "-        DrJava.getConfig().setSetting(SLAVE_JVM_ARGS, newValue);", "-        if (result==0) {", "-          // copy", "-          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, newSetting);", "-        }", "-        else {", "-          JOptionPane.showMessageDialog(parent,", "-                                        \"You will have to reset the interactions pane before changes take effect.\");", "-        }", "-      }", "-    }", "-  }", "+\r", "+  @SuppressWarnings(\"fallthrough\")\r", "+  public static void sanitizeSlaveJVMArgs(JFrame parent,\r", "+                                          String value,\r", "+                                          final OptionListener<String> l) {\r", "+    int pos = value.indexOf(\"-Xmx\");\r", "+    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||\r", "+        (pos==0)) {\r", "+      int endpos = pos+(\"-Xmx\".length());\r", "+      while(endpos<value.length() && (! Character.isWhitespace(value.charAt(endpos)))) {\r", "+        ++endpos;\r", "+      }\r", "+      \r", "+      int startpos = pos+(\"-Xmx\".length());\r", "+      String size = value.substring(startpos,endpos);\r", "+      long factor = 1;\r", "+      long heapSize;\r", "+      switch(size.toLowerCase().charAt(size.length()-1)) {\r", "+        case 'g': {\r", "+          factor *= 1024; // fall-through intended\r", "+        }\r", "+        case 'm': {\r", "+          factor *= 1024; // fall-through intended\r", "+        }\r", "+        case 'k': {\r", "+          factor *= 1024; // fall-through intended\r", "+          break;\r", "+        }\r", "+        default: {\r", "+          if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1))) factor = 0;\r", "+        }\r", "+      }\r", "+      try {\r", "+        if (factor == 1)  heapSize = new Long(size);\r", "+        else if (factor > 1) heapSize = new Long(size.substring(0,size.length()-1)) * factor;\r", "+        else heapSize = -1;\r", "+      }\r", "+      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }\r", "+      long heapSizeMB = (heapSize / 1024) / 1024;\r", "+      // find the next bigger of the choices\r", "+      String newSetting = getNextBiggerHeapSize(heapSizeMB);\r", "+      int result;\r", "+      if (heapSize>=0) {\r", "+        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Slave JVM Args\\\"\", \"Ignore\" };\r", "+        result = JOptionPane.\r", "+          showOptionDialog(parent,\r", "+                           \"You seem to have specified the maximum heap size as part of the\\n\" +\r", "+                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+\r", "+                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\"+\r", "+                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+\r", "+                           \"just clean up \\\"JVM Args for Interactions JVM\\\", or ignore this potential problem?\",\r", "+                           \"Maximum Heap Size Set in JVM Arguments\",\r", "+                           0,\r", "+                           JOptionPane.QUESTION_MESSAGE,\r", "+                           null,\r", "+                           options,\r", "+                           options[0]);\r", "+      }\r", "+      else {\r", "+        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\",\r", "+          \"Ignore\" };\r", "+        result = JOptionPane.\r", "+          showOptionDialog(parent,\r", "+                           \"You seem to have specified the maximum heap size as part of the\\n\" +\r", "+                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+\r", "+                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\"+\r", "+                           \"Furthermore, the specified heap size \\\"\"+size+\"\\\" is invalid.\\n\"+\r", "+                           \"Would you like to clean up the \\\"JVM Args for Interactions JVM\\\"\\n\"+\r", "+                           \"or ignore this potential problem?\",\r", "+                           \"Maximum Heap Size Set in JVM Arguments\",\r", "+                           0,\r", "+                           JOptionPane.QUESTION_MESSAGE,\r", "+                           null,\r", "+                           options,\r", "+                           options[0]);\r", "+        if (result==1) { result = 2; }\r", "+      }\r", "+      if (result!=2) {\r", "+        // clean up\r", "+        while((endpos<value.length()) &&\r", "+              (Character.isWhitespace(value.charAt(endpos)))) {\r", "+          ++endpos;\r", "+        }\r", "+        String newValue = value.substring(0,pos) + value.substring(endpos);\r", "+        DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, l);\r", "+        DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, new OptionListener<String>() {\r", "+          public void optionChanged(OptionEvent<String> oe) {\r", "+            DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, this);\r", "+            SwingUtilities.invokeLater(new Runnable() { \r", "+              public void run() { DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, l); }\r", "+            });\r", "+          }\r", "+        });\r", "+        DrJava.getConfig().setSetting(SLAVE_JVM_ARGS, newValue);\r", "+        if (result==0) {\r", "+          // copy\r", "+          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, newSetting);\r", "+        }\r", "+        else {\r", "+          JOptionPane.showMessageDialog(parent,\r", "+                                        \"You will have to reset the interactions pane before changes take effect.\");\r", "+        }\r", "+      }\r", "+    }\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4af7088c396b16a9f946ad6b5f19fca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   \r   @SuppressWarnings(\"fallthrough\")\r   public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)", "diff": ["-  \r", "-  @SuppressWarnings(\"fallthrough\")\r", "-  public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l) {\r", "-    int pos = value.indexOf(\"-Xmx\");\r", "-    if ((pos > 1 && Character.isWhitespace(value.charAt(pos-1))) || pos == 0) {\r", "-      int endpos = pos+(\"-Xmx\".length());\r", "-      while((endpos<value.length()) &&\r", "-            (!Character.isWhitespace(value.charAt(endpos)))) {\r", "-        ++endpos;\r", "-      }\r", "-      \r", "-      int startpos = pos+(\"-Xmx\".length());\r", "-      String size = value.substring(startpos,endpos);\r", "-      long factor = 1;\r", "-      long heapSize;\r", "-      switch(size.toLowerCase().charAt(size.length()-1)) {\r", "-        case 'g': {\r", "-          factor *= 1024; // fall-through intended\r", "-        }\r", "-        case 'm': {\r", "-          factor *= 1024; // fall-through intended\r", "-        }\r", "-        case 'k': {\r", "-          factor *= 1024; // fall-through intended\r", "-          break;\r", "-        }\r", "-        default: {\r", "-          if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1))) {\r", "-            factor = 0;\r", "-          }\r", "-        }\r", "-      }\r", "-      try {\r", "-        if (factor==1) {\r", "-          heapSize = new Long(size);\r", "-        }\r", "-        else if (factor>1) {\r", "-          heapSize = new Long(size.substring(0,size.length()-1)) * factor;\r", "-        }\r", "-        else {\r", "-          heapSize = -1;\r", "-        }\r", "-      }\r", "-      catch(NumberFormatException nfe) {\r", "-        heapSize = -1; // invalid\r", "-      }\r", "-      long heapSizeMB = (heapSize / 1024) / 1024;\r", "-      // find the next bigger of the choices\r", "-      String newSetting = getNextBiggerHeapSize(heapSizeMB);\r", "-      int result;\r", "-      if (heapSize>=0) {\r", "-        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\",\r", "-          \"Clean \\\"Master JVM Args\\\"\",\r", "-          \"Ignore\" };\r", "-        result = JOptionPane.\r", "-          showOptionDialog(parent,\r", "-                           \"You seem to have specified the maximum heap size as part of the\\n\" +\r", "-                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+\r", "-                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+\r", "-                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+\r", "-                           \"just clean up \\\"JVM Args for Main JVM\\\", or ignore this potential problem?\",\r", "-                           \"Maximum Heap Size Set in JVM Arguments\",\r", "-                           0,\r", "-                           JOptionPane.QUESTION_MESSAGE,\r", "-                           null,\r", "-                           options,\r", "-                           options[0]);\r", "-      }\r", "-      else {\r", "-        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\",\r", "-          \"Ignore\" };\r", "-        result = JOptionPane.\r", "-          showOptionDialog(parent,\r", "-                           \"You seem to have specified the maximum heap size as part of the\\n\" +\r", "-                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+\r", "-                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+\r", "-                           \"Furthermore, the specified heap size \\\"\"+size+\"\\\" is invalid.\\n\"+\r", "-                           \"Would you like to clean up the \\\"JVM Args for Main JVM\\\"\\n\"+\r", "-                           \"or ignore this potential problem?\",\r", "-                           \"Maximum Heap Size Set in JVM Arguments\",\r", "-                           0,\r", "-                           JOptionPane.QUESTION_MESSAGE,\r", "-                           null,\r", "-                           options,\r", "-                           options[0]);\r", "-        if (result==1) { result = 2; }\r", "-      }\r", "-      if (result!=2) {\r", "-        // clean up\r", "-        while((endpos<value.length()) &&\r", "-              (Character.isWhitespace(value.charAt(endpos)))) {\r", "-          ++endpos;\r", "-        }\r", "-        String newValue = value.substring(0,pos) + value.substring(endpos);\r", "-        DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, l);\r", "-        DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, new OptionListener<String>() {\r", "-          public void optionChanged(OptionEvent<String> oe) {\r", "-            DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);\r", "-            SwingUtilities.invokeLater(new Runnable() { \r", "-              public void run() {\r", "-                DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, l);\r", "-              }\r", "-            });\r", "-          }\r", "-        });\r", "-        DrJava.getConfig().setSetting(MASTER_JVM_ARGS, newValue);\r", "-        if (result==0) {\r", "-          // copy\r", "-          DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);\r", "-        }\r", "-        else {\r", "-          JOptionPane.showMessageDialog(parent,\r", "-                                        \"You will have to restart DrJava before the change takes effect.\");\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+  ", "+  @SuppressWarnings(\"fallthrough\")", "+  public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l) {", "+    int pos = value.indexOf(\"-Xmx\");", "+    if ((pos > 1 && Character.isWhitespace(value.charAt(pos-1))) || pos == 0) {", "+      int endpos = pos+(\"-Xmx\".length());", "+      while((endpos<value.length()) &&", "+            (!Character.isWhitespace(value.charAt(endpos)))) {", "+        ++endpos;", "+      }", "+      ", "+      int startpos = pos+(\"-Xmx\".length());", "+      String size = value.substring(startpos,endpos);", "+      long factor = 1;", "+      long heapSize;", "+      switch(size.toLowerCase().charAt(size.length()-1)) {", "+        case 'g': { factor *= 1024; /* fall-through intended */ }", "+        case 'm': { factor *= 1024; /* fall-through intended */ }", "+        case 'k': {", "+          factor *= 1024; /* fall-through intended */", "+          break;", "+        }", "+        default: { if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1)))  factor = 0; }", "+      }", "+      try {", "+        if (factor==1)  heapSize = new Long(size);", "+        else if (factor>1)  heapSize = new Long(size.substring(0,size.length()-1)) * factor;", "+        else  heapSize = -1;", "+      }", "+      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }", "+      long heapSizeMB = (heapSize / 1024) / 1024;", "+      ", "+      // find the next bigger of the choices", "+      String newSetting = getNextBiggerHeapSize(heapSizeMB);", "+      int result;", "+      if (heapSize>=0) {", "+        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Master JVM Args\\\"\", \"Ignore\" };", "+        result = JOptionPane.", "+          showOptionDialog(parent,", "+                           \"You seem to have specified the maximum heap size as part of the\\n\" +", "+                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+", "+                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+", "+                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "+                           \"just clean up \\\"JVM Args for Main JVM\\\", or ignore this potential problem?\",", "+                           \"Maximum Heap Size Set in JVM Arguments\",", "+                           0,", "+                           JOptionPane.QUESTION_MESSAGE,", "+                           null,", "+                           options,", "+                           options[0]);", "+      }", "+      else {", "+        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\", \"Ignore\" };", "+        result = JOptionPane.", "+          showOptionDialog(parent,", "+                           \"You seem to have specified the maximum heap size as part of the\\n\" +", "+                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+", "+                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+", "+                           \"Furthermore, the specified heap size \\\"\"+size+\"\\\" is invalid.\\n\"+", "+                           \"Would you like to clean up the \\\"JVM Args for Main JVM\\\"\\n\"+", "+                           \"or ignore this potential problem?\",", "+                           \"Maximum Heap Size Set in JVM Arguments\",", "+                           0,", "+                           JOptionPane.QUESTION_MESSAGE,", "+                           null,", "+                           options,", "+                           options[0]);", "+        if (result==1) { result = 2; }", "+      }", "+      if (result!=2) {", "+        // clean up", "+        while(endpos<value.length() && Character.isWhitespace(value.charAt(endpos))) ++endpos;", "+", "+        String newValue = value.substring(0,pos) + value.substring(endpos);", "+        DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, l);", "+        DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, new OptionListener<String>() {", "+          public void optionChanged(OptionEvent<String> oe) {", "+            DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);", "+            SwingUtilities.invokeLater(new Runnable() { ", "+              public void run() { DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, l); }", "+            });", "+          }", "+        });", "+        DrJava.getConfig().setSetting(MASTER_JVM_ARGS, newValue);", "+        if (result == 0) DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);   // copy", "+        else JOptionPane.showMessageDialog(parent, \"You will have to restart DrJava before the change takes effect.\");", "+      }", "+    }", "+  }"]}], "num": 11941}
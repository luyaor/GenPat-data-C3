{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da11a76ee496f8a374107a295a213a7d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7381e74aa6f2f6104dd6a9c1a49c07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "diff": ["-    final Object _lock = new Object();", "-    ", "-    CompileShouldFailListener listener = new CompileShouldFailListener() {", "-      public void compileEnded() {", "-        super.compileEnded();", "-        _compileDone = true;", "-        synchronized (_lock) { _lock.notify(); }", "-      }", "-    };", "-    ", "+    _model.addListener(_failListener);", "-    _model.addListener(listener);", "-    synchronized (_lock) {", "-      try { while (! _compileDone) _lock.wait(); }", "-      catch (InterruptedException ie) {", "-        fail(\"Unexpected interrupted exception: \" + ie.getMessage());", "-      }", "-    }", "+    _waitCompileDone();", "+    ", "-    listener.checkCompileOccurred();", "-    _model.removeListener(listener);", "+    _failListener.checkCompileOccurred();", "+    _model.removeListener(_failListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa16903ced7a5fabed601d373710a1fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected String interpret(String input) throws BadLocationException", "signatureAfterChange": "   protected String interpret(String input) throws BadLocationException", "diff": ["+", "+    TestListener listener = new TestListener() {", "+      public void interactionStarted() {", "+        interactionStartCount++;", "+      }", "+", "+      public void interactionEnded() {", "+        assertInteractionStartCount(1);", "+", "+        synchronized(this) {", "+          interactionEndCount++;", "+          this.notify();", "+        }", "+      }", "+    };", "+", "+    _model.addListener(listener);", "+", "+    // wait for interpret over", "+    while (listener.interactionEndCount == 0) {", "+      synchronized(listener) {", "+        try {", "+          listener.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new UnexpectedException(ie);", "+        }", "+      }", "+    }", "+", "+    _model.removeListener(listener);", "+    listener.assertInteractionStartCount(1);", "+    listener.assertInteractionEndCount(1);", "+"]}], "num": 3844}
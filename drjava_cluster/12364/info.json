{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3284cf04f350625c0403f48ae93d2cc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35700eaafd8c8fac90e858f8d83e4860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-      ClassDef cd = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Lisa\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      ClassDef cd2 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Me\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Parent\", new Type[0]), new ReferenceType[0], ", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd2 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Me\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"Parent\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"2nd Error message should be correct\", \"Class Me cannot extend the final class Parent\", errors.get(1).getFirst());", "+      assertEquals(\"2nd Error message should be correct\", \"Class Me cannot extend the final class Parent\", ", "+                   errors.get(1).getFirst());", "-      ClassDef cd3 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"somewhereElse.Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd3 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"somewhereElse.Lisa\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                     new ReferenceType[0], ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"3rd error message should be correct\", \"The class hungry is package protected because there is no access specifier and cannot be accessed from somewhereElse.Lisa\", errors.get(2).getFirst());", "+      assertEquals(\"3rd error message should be correct\", ", "+                   \"The class hungry is package protected because there is no access specifier and cannot be \"", "+                     + \"accessed from somewhereElse.Lisa\", ", "+                   errors.get(2).getFirst());", "-      ClassDef cd4 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"somewhereElse.Lisa\"),", "-                                  new TypeParameter[0], new TypeVariable(SourceInfo.NO_INFO, \"super\"), new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superI\",  new Type[0])},", "-                                  new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd4 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"somewhereElse.Lisa\"),", "+                     new TypeParameter[0], new TypeVariable(NONE, \"super\"), ", "+                     new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superI\",  new Type[0])},", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"The 4th error message should be correct\", \"The interface superI is package protected because there is no access specifier and cannot be accessed from somewhereElse.Lisa\", errors.get(3).getFirst());", "+      assertEquals(\"The 4th error message should be correct\", ", "+                   \"The interface superI is package protected because there is no access specifier and cannot be \"", "+                     + \"accessed from somewhereElse.Lisa\", ", "+                   errors.get(3).getFirst());", "-      VariableDeclaration vd = new VariableDeclaration(SourceInfo.NO_INFO, _finalMav, new VariableDeclarator[] {new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"))});", "-      ExpressionStatement se = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 1)));      ", "-      BracedBody cbb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {se});", "-      ConstructorDef consD = new ConstructorDef(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Jimes\"), _publicMav, new FormalParameter[0], new ReferenceType[0], cbb);", "-      BracedBody b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd, consD});", "-      ClassDef cd5 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Jimes\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd, consD}));", "+      VariableDeclarator vdec = ", "+        new UninitializedVariableDeclarator(NONE, new PrimitiveType(NONE, \"int\"), new Word(NONE, \"i\"));", "+      VariableDeclaration vd = new VariableDeclaration(NONE, _finalMav, new VariableDeclarator[] {vdec});", "+      ExpressionStatement se = ", "+        new ExpressionStatement(NONE, ", "+                                new SimpleAssignmentExpression(NONE, new SimpleNameReference(NONE, new Word(NONE, \"i\")), ", "+                                                                     new IntegerLiteral(NONE, 1)));      ", "+      BracedBody cbb = new BracedBody(NONE, new BodyItemI[] {se});", "+      ConstructorDef consD = ", "+        new ConstructorDef(NONE, new Word(NONE, \"Jimes\"), _publicMav, new FormalParameter[0], new ReferenceType[0], cbb);", "+      BracedBody b = new BracedBody(NONE, new BodyItemI[] {vd, consD});", "+      ClassDef cd5 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Jimes\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                     new ReferenceType[0], new BracedBody(NONE, new BodyItemI[] {vd, consD}));", "-      MethodData objMd = new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "+      MethodData objMd = ", "+        new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], ", "+                       sd2, cd);", "-      MethodData md = new MethodData(\"Jimes\", _publicMav, new TypeParameter[0], sd, new VariableData[0], new String[0], sd, cd);", "+      MethodData md = new MethodData(\"Jimes\", _publicMav, new TypeParameter[0], sd, new VariableData[0], new String[0], ", "+                                     sd, cd);", "-      // Test that if a class has a final field, that if there are no constructors, an error is thrown since the value of the field cannot be set.", "+      // Test that if a class has a final field, that if there are no constructors, an error is thrown since the value ", "+      // of the field cannot be set.", "-      b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd});", "-      cd5 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Jimes\"), new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], b);", "+      b = new BracedBody(NONE, new BodyItemI[] {vd});", "+      cd5 = new ClassDef(NONE, _publicMav, new Word(NONE, \"Jimes\"), new TypeParameter[0], ", "+                         new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                         new ReferenceType[0], b);", "-      assertEquals(\"The error message should be correct\", \"The final field i has not been initialized\", errors.get(4).getFirst());", "+      assertEquals(\"The error message should be correct\", \"The final field i has not been initialized\", ", "+                   errors.get(4).getFirst());", "-      ClassDef cd6 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd6 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"JimesH\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                     new ReferenceType[] {new ClassOrInterfaceType(NONE, \"java.lang.Runnable\", new Type[0])}, ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"JimesH implements the Runnable interface, which is not allowed at any language level\", errors.get(5).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"JimesH implements the Runnable interface, which is not allowed at any language level\", ", "+                   errors.get(5).getFirst());", "-      ClassDef cd7 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Hspia\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superSD\", new Type[0]), new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.String\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd7 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Hspia\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"superSD\", new Type[0]), ", "+                     new ReferenceType[] {new ClassOrInterfaceType(NONE, \"java.lang.String\", new Type[0])}, ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"java.lang.String is not an interface and thus cannot appear after the keyword 'implements' here.  Perhaps you meant to say 'extends'?\" , errors.get(6).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"java.lang.String is not an interface and thus cannot appear after the keyword 'implements' here.\"", "+                     + \"  Perhaps you meant to say 'extends'?\" , ", "+                   errors.get(6).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e53116da5abd3d84db894d064458e6dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "          public void testAutoBoxingAndUnboxing()", "signatureAfterChange": "          public void testAutoBoxingAndUnboxing()", "diff": ["-      Expression e = new SimpleMethodInvocation(SourceInfo.NO_INFO,", "-                                                new Word(SourceInfo.NO_INFO, \"myMethod\"),", "-                                                new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{", "-        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "-      BodyItemI[] bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      BracedBody b = new BracedBody(SourceInfo.NO_INFO, bii);", "+      Expression e = new SimpleMethodInvocation(NONE,", "+                                                new Word(NONE, \"myMethod\"),", "+                                                new ParenthesizedExpressionList(NONE, new Expression[]{", "+        new SimpleNameReference(NONE, new Word(NONE, \"i\"))}));", "+      BodyItemI[] bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      BracedBody b = new BracedBody(NONE, bii);", "-      MethodData md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData md = ", "+        new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd2},", "+                       new String[0], null, NULL_LITERAL);", "-      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      b = new BracedBody(SourceInfo.NO_INFO, bii);", "+      bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      b = new BracedBody(NONE, bii);", "-      md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO));", "+      md = new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1}, ", "+                          new String[0], null, NULL_LITERAL);", "-      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      _sd1.addMethod(new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd2}, new String[0], null, new NullLiteral(SourceInfo.NO_INFO)));", "+      _sd1.addMethod(new MethodData(\"myMethod\", _publicMav, new TypeParameter[0], ", "+                                    SymbolData.BOOLEAN_TYPE, new VariableData[] {vd2}, new String[0], null, ", "+                                    NULL_LITERAL));", "-      Expression e2 = new SimpleAssignmentExpression(SourceInfo.NO_INFO,", "-                                                     new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"t\")),", "+      Expression e2 = new SimpleAssignmentExpression(NONE,", "+                                                     new SimpleNameReference(NONE, new Word(NONE, \"t\")),", "-      BodyItemI[] bii2 = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e2)};", "-      BracedBody b2 = new BracedBody(SourceInfo.NO_INFO, bii2);", "+      BodyItemI[] bii2 = new BodyItemI[] {new ExpressionStatement(NONE, e2)};", "+      BracedBody b2 = new BracedBody(NONE, bii2);", "-      b2.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b2.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                        _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      ", "-      e = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"i.like.monkey\", new Type[0]),", "-                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "+      Expression[] expr1 = new Expression[] {new SimpleNameReference(NONE, new Word(NONE, \"i\"))};", "+      e = new SimpleNamedClassInstantiation(NONE,", "+                                            new ClassOrInterfaceType(NONE, \"i.like.monkey\", new Type[0]),", "+                                            new ParenthesizedExpressionList(NONE, expr1));", "-      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      b = new BracedBody(SourceInfo.NO_INFO, bii);", "+      bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      b = new BracedBody(NONE, bii);", "-                          _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+                          _sd1, NULL_LITERAL);", "-      ExpressionStatement se = new ExpressionStatement(SourceInfo.NO_INFO,", "-                                   new PlusAssignmentExpression(SourceInfo.NO_INFO,", "-                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "-                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\"))));", "+      ExpressionStatement se = new ExpressionStatement(NONE,", "+                                   new PlusAssignmentExpression(NONE,", "+                                       new SimpleNameReference(NONE, new Word(NONE, \"i\")),", "+                                       new SimpleNameReference(NONE, new Word(NONE, \"j\"))));", "-      MethodData md1 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData md2 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, new VariableData[] {vd1Obj, vd2Obj}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData md1 = ", "+        new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                       new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, NULL_LITERAL);", "+      MethodData md2 = ", "+        new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+                       new VariableData[] {vd1Obj, vd2Obj}, new String[0], _sd1, NULL_LITERAL);", "+      Expression[] expr2 = ", "+        new Expression[]{new SimpleNameReference(NONE, new Word(NONE, \"i\")), ", "+                         new SimpleNameReference(NONE, new Word(NONE, \"j\"))};", "+      e = new SimpleMethodInvocation(NONE,", "+                                     new Word(NONE, \"myMethod2\"),", "+                                     new ParenthesizedExpressionList(NONE, expr2));", "+      bii = new BodyItemI[] {new ExpressionStatement(NONE, e)};", "+      b = new BracedBody(NONE, bii);", "-      e = new SimpleMethodInvocation(SourceInfo.NO_INFO,", "-                                                new Word(SourceInfo.NO_INFO, \"myMethod2\"),", "-                                     new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{", "-                                                                                new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "-                                                                                  new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\"))}));", "-      bii = new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, e)};", "-      b = new BracedBody(SourceInfo.NO_INFO, bii);", "-      ", "-      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(_sd1, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-                                      new NullLiteral(SourceInfo.NO_INFO));", "+                                      NULL_LITERAL);", "-      // test that if a sd1 has something that's ambiguous, so the superclass is ambiguous, the error is only thrown once when calling the method in the subclass.", "+      // test that if a sd1 has something that's ambiguous, so the superclass is ambiguous, the error is only thrown ", "+      // once when calling the method in the subclass.", "-      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));"]}], "num": 12364}
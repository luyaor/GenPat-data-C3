{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "533f1741b9291f305f4026ada47f957c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b1023200a3b254c2ae289aaa31b95ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 693, "methodNumberAfterChange": 693, "signatureBeforeChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "signatureAfterChange": "   public void showTab(final Component c, boolean showDetachedWindow)", "diff": ["-      int numVisible = 0;      ", "-//        System.err.println(\"showTab called with c = \" + c);", "-      if (c == _interactionsContainer) {", "-//          Utilities.show(\"InteractionsTab selected\");", "-        _tabbedPane.setSelectedIndex(INTERACTIONS_TAB);", "-        c.requestFocusInWindow();", "-      }", "-      else if (c == _consoleScroll) {", "-        _tabbedPane.setSelectedIndex(CONSOLE_TAB);", "-        c.requestFocusInWindow();", "-      }", "-      else {", "+      if (c instanceof TabbedPanel) {", "+        int numVisible = 0;", "-            // 2 right now is a magic number for the number of tabs always visible: interactions & console", "-            if (! tp.isDisplayed()) {", "-              _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "-              tp.setVisible(true);", "-              tp.setDisplayed(true);", "-              tp.repaint();", "-            }", "-            _tabbedPane.setSelectedIndex(numVisible + 2);", "-            ", "-            c.requestFocusInWindow();", "-            return;", "+            _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);  // interactions, console always shown", "+            tp.setVisible(true);", "+            tp.setDisplayed(true);", "+            tp.repaint();", "+            break;", "-          if (tp.isDisplayed()) numVisible++;", "+          else if (tp.isDisplayed()) numVisible++;", "-      }", "-      if (_mainSplit.getDividerLocation() > _mainSplit.getMaximumDividerLocation()) ", "-        _mainSplit.resetToPreferredSizes(); ", "+      };", "+      ", "+      _tabbedPane.setSelectedComponent(c);", "+      c.requestFocusInWindow();", "+", "+      if (_mainSplit.getDividerLocation() > _mainSplit.getMaximumDividerLocation()) _mainSplit.resetToPreferredSizes();", "-      if (showDetachedWindow && (_tabbedPanesFrame!=null) && (_tabbedPanesFrame.isVisible())) { _tabbedPanesFrame.toFront(); }", "+      if (showDetachedWindow && (_tabbedPanesFrame!=null) && (_tabbedPanesFrame.isVisible())) { ", "+        _tabbedPanesFrame.toFront(); ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3ab0bab0754e8d7e354d7baeeb7434", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "diff": ["-   */", "+  /** Runs JUnit on the current document.  Forces the user to compile all open source documents before proceeding. */", "-    try {", "-      // try to get the file, to make sure it's not untitled. if it is, it'll throw an IllegalStateException", "-      File testFile = doc.getFile();", "-      LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "-      lod.add(doc);", "-      junitOpenDefDocs(lod, false);", "-    }", "-    catch (IllegalStateException e) {", "-      // No file exists, don't try to compile and test", "-      nonTestCase(false);", "-      return;", "-    }", "-    catch (NoClassDefFoundError e) {", "-      // Method getTest in junit.framework.BaseTestRunner can throw a NoClassDefFoundError (via reflection).", "-        _notifier.junitEnded();  // balances junitStarted()", "-        synchronized(_testLock) { _testInProgress = false; }", "-        throw e;", "-    }", "-    catch (ExitingNotAllowedException enae) {  // test attempted to call System.exit", "-      _notifier.junitEnded();  // balances junitStarted()", "-      synchronized(_testLock) { _testInProgress = false; }", "-      throw enae;", "-    }", "+    File testFile;", "+    try { testFile = doc.getFile(); ", "+      if (testFile == null) {  // document is untitiled: abort unit testing and return", "+        nonTestCase(false);", "+        return;", "+      }", "+    } ", "+    catch(FileMovedException fme) { /* do nothing */ }", "+    ", "+    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+    lod.add(doc);", "+    junitOpenDefDocs(lod, false);"]}], "num": 9385}
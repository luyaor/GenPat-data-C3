{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c7d801b73f30eabc974a5c257209ff5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a6a3a8bf3e2be22b0f482ea0b6c84e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "5497ac60fa563e6e67c580081d99fbd842e52332", "commitAfterChange": "5fa866685226be5aebbebdfba9d7d34d29108e50", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "diff": ["-    try { text = getText(0, pos); }", "-    finally { readUnlock(); }", "-    ", "-    synchronized(_reduced) {", "+    try { ", "+      text = getText(0, pos); ", "-      final int origLocation = _currentLocation;", "-      // Move reduced model to location pos", "-      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-      ", "-      // Walk backward from specified position", "-      ", "-      while (i >= 0) { ", "-        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "-         * text[i+1:pos-1] contains invalid chars */", "+      synchronized(_reduced) {", "-        if (match(text.charAt(i), whitespace)) {", "-          // ith char is whitespace", "-          i--;", "-          continue;", "+        final int origLocation = _currentLocation;", "+        // Move reduced model to location pos", "+        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+        ", "+        // Walk backward from specified position", "+        ", "+        while (i >= 0) { ", "+          /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+           * text[i+1:pos-1] contains invalid chars */", "+          ", "+          if (match(text.charAt(i), whitespace)) {", "+            // ith char is whitespace", "+            i--;", "+            continue;", "+          }", "+          ", "+          // Found a non-whitespace char;  move reduced model to location i", "+          _reduced.move(i - reducedPos);", "+          reducedPos = i;                  // reduced model points to i == reducedPos", "+          ", "+          // Check if matching char is within a comment (not including opening two characters)", "+          if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+              (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+            i--;", "+            continue;", "+          }", "+          ", "+          if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+            // Move i past the first comment character and continue searching", "+            i = i - 2;", "+            continue;", "+          }", "+          ", "+          // Found valid previous character", "+          break;", "-        // Found a non-whitespace char;  move reduced model to location i", "-        _reduced.move(i - reducedPos);", "-        reducedPos = i;                  // reduced model points to i == reducedPos", "-        ", "-        // Check if matching char is within a comment (not including opening two characters)", "-        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-          i--;", "-          continue;", "-        }", "-        ", "-        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "-          // Move i past the first comment character and continue searching", "-          i = i - 2;", "-          continue;", "-        }", "-        ", "-        // Found valid previous character", "-        break;", "+        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+        _reduced.move(origLocation - reducedPos);", "-      ", "-      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-      _reduced.move(origLocation - reducedPos);", "-    ", "+    finally { readUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2e2c7725e37887dee7453ec52c2e59a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace)     throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "diff": ["-  public int findPrevCharPos(int pos, char[] whitespace)", "-    throws BadLocationException {", "-    // throwErrorHuh();", "+  public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException {", "-    String text = getText(0, pos);", "-    ", "-    synchronized(_reduced) {", "-      ", "-      final int origLocation = _currentLocation;", "-      // Move reduced model to location pos", "-      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-      ", "-      // Walk backward from specified position", "-      ", "-      while (i >= 0) { ", "-        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "-         * text[i+1:pos-1] contains invalid chars */", "+    readLock();", "+    try {", "+      String text = getText(0, pos);", "+      synchronized(_reduced) {", "-        if (match(text.charAt(i), whitespace)) {", "-          // ith char is whitespace", "-          i--;", "-          continue;", "+        final int origLocation = _currentLocation;", "+        // Move reduced model to location pos", "+        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+        ", "+        // Walk backward from specified position", "+        ", "+        while (i >= 0) { ", "+          /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+           * text[i+1:pos-1] contains invalid chars */", "+          ", "+          if (match(text.charAt(i), whitespace)) {", "+            // ith char is whitespace", "+            i--;", "+            continue;", "+          }", "+          ", "+          // Found a non-whitespace char;  move reduced model to location i", "+          _reduced.move(i - reducedPos);", "+          reducedPos = i;                  // reduced model points to i == reducedPos", "+          ", "+          // Check if matching char is within a comment (not including opening two characters)", "+          if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+              (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+            i--;", "+            continue;", "+          }", "+          ", "+          if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+            // Move i past the first comment character and continue searching", "+            i = i - 2;", "+            continue;", "+          }", "+          ", "+          // Found valid previous character", "+          break;", "-        // Found a non-whitespace char;  move reduced model to location i", "-        _reduced.move(i - reducedPos);", "-        reducedPos = i;                  // reduced model points to i == reducedPos", "-        ", "-        // Check if matching char is within a comment (not including opening two characters)", "-        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-          i--;", "-          continue;", "-        }", "-        ", "-        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "-          // Move i past the first comment character and continue searching", "-          i = i - 2;", "-          continue;", "-        }", "-        ", "-        // Found valid previous character", "-        break;", "+        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+        _reduced.move(origLocation - reducedPos);", "-      ", "-      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-      _reduced.move(origLocation - reducedPos);", "+    finally { readUnlock(); }"]}], "num": 24957}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4acd81df7ca453c489ce720eae9f15f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47d96c38505f1149d99585285a935c8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["+          _log.log(\"\\nCONTINUATIONS AFTER PHASE 1 PROCESSING OF \" + f + \"\\n\\n\" + llv.continuations + \"\\n\");", "+          _log.log(\"\\nERRORS AFTER PHASE 1 PROCESSING OF \" + f + \"\\n\\n\" + llv.errors + \"\\n\");", "+//          if (! llv.errors.isEmpty()) Utilities.show(\"errors after \" + f + \"\\n\" + llv.errors);", "+//    System.err.println(\"Resolving continuations \" + continuations);", "+//        System.err.println(\"Attempting to resolve \" + className + \"\\n  Result = \" + returnedSd);", "-          LanguageLevelVisitor.errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, ", "+          LanguageLevelVisitor.errors.add(new Pair<String, JExpressionIF>(\"Converter could not resolve \" + className, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "965aacf6274fd45522c7b8c9c873d57d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "e75c44dca53d5633e70ed3badd03d3667a23d4c8", "commitAfterChange": "c11896795d0041b0e5728ede27aa1fce3454d97c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   protected String interpret(String input) throws EditDocumentException", "signatureAfterChange": "   protected String interpret(String input) throws EditDocumentException", "diff": ["-   */", "+    */", "-    final int newLineLen = System.getProperty(\"line.separator\").length();", "+    final int newLineLen = 1; // Was StringOps.EOL.length(); but Swing uses '\\n' for newLine", "-      //System.out.println(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "-      // There was no output from this interaction", "+      _log.log(\"resultsStartLoc = \" + resultsStartLocation + \" resultsEndLocation = \" + resultsEndLocation);", "+      _log.log(\"Contents = '\" + interactionsDoc.getDocText(0, resultsEndLocation+1) + \"'\");"]}], "num": 17424}
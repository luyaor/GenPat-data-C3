{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3040b25b54f931eedb457472bdb623f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b73cf9acde188854592b93fd59cb8b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public String getEnclosingTopLevelClassName(int pos) throws ClassNameNotFoundException", "signatureAfterChange": "   public String getEnclosingTopLevelClassName(int pos) throws ClassNameNotFoundException", "diff": ["-    ", "+    readLock();", "-      int oldLocation = getCurrentLocation();", "-      ", "+      int oldLocation = _currentLocation;", "-        ", "-            topLevelBracePos = getCurrentLocation() - info.distToBraceCurrent;", "+            topLevelBracePos = _currentLocation - info.distToBraceCurrent;", "-        else {", "-          prevDelimPos++;", "-        }", "+        else prevDelimPos++;", "-      catch (BadLocationException ble) {", "-        // All positions here should be legal", "-        throw new UnexpectedException(ble);", "+      catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+      finally { ", "+        setCurrentLocation(oldLocation);", "+        readUnlock();", "-      finally { setCurrentLocation(oldLocation); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8483c5acfeced6e649024b655ce35215", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "commitAfterChange": "bd0c5f6fb57379a8699a4cf01148b0c907e9220d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "    private void _startNameServiceIfNeeded()", "signatureAfterChange": "   private void _startNameServiceIfNeeded()", "diff": ["+   */", "+      // Get a safe port to use.", "+      //  If each copy of DrJava used the same port (or the same port as", "+      //  another program's rmiregistry), then when the previous copy/program", "+      //  quit, we would lose our registry and not be able to reset!", "-        LocateRegistry.createRegistry(Registry.REGISTRY_PORT);", "+        ServerSocket socket = new ServerSocket(0);", "+        _rmiPort = socket.getLocalPort();", "+        socket.close();", "+        LocateRegistry.createRegistry(_rmiPort);", "-      catch (RemoteException re) {", "-        throw new edu.rice.cs.util.UnexpectedException(re);", "+      catch (Exception e2) {", "+        throw new UnexpectedException(new RuntimeException(", "+          \"Could not find a usable RMI Port: \" + e2.toString()));", "+      //DrJava.consoleOut().println(\"Created rmiregistry on port: \" + _rmiPort);"]}], "num": 29132}
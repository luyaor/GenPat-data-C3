{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24dedb4407fd846f3eedf7c760b09c80", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b39a4e39690fee5e2620557879fc27b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "diff": ["-          throw new ClassNameNotFoundException(\"No top level class name found\");", "+          throw ClassNameNotFoundException.DEFAULT;", "-        //if we make it here we have a valid index", "-        //first find index of first non whitespace (from the index in document)", "-        index = getFirstNonWSCharPos(startPos + index) - startPos;", "-        if (index == -1) throw new ClassNameNotFoundException(\"No top level class name found\");", "-        ", "-        int endIndex = textLength; //just in case no whitespace at end of file", "-        ", "-        //find index of next delimiter or whitespace", "-        char c;", "-        for (int i = index; i < textLength; i++) {", "-          c = text.charAt(i);", "-          if (!Character.isJavaIdentifierPart(c)) {", "-            endIndex = i;", "-            break;", "-          }", "-        }", "-        return text.substring(index,endIndex);", "+        // we have a valid index", "+        return getNextIdentifier(startPos + index);", "+      catch (IllegalStateException e) { throw new ClassNameNotFoundException(\"No top level class name found\"); }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d18c324ca2b7a24a1170b1b59241ba80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static FullVersion parseFullVersion(String text)", "signatureAfterChange": "   public static FullVersion parseFullVersion(String text)", "diff": ["-    if (dot1 == -1) { return UNRECOGNIZED.new FullVersion(0, 0, ReleaseType.STABLE, null); }", "+    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "-    if (dot2 == -1) { return UNRECOGNIZED.new FullVersion(0, 0, ReleaseType.STABLE, null); }", "+    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "-      return version.new FullVersion(maintenance, update, type, typeString);", "+      return new FullVersion(version, maintenance, update, type, typeString);", "-    catch (NumberFormatException e) { return UNRECOGNIZED.new FullVersion(0, 0, ReleaseType.STABLE, null); }", "+    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }"]}], "num": 19585}
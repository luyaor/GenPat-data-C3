{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9141727fc80d9dd71213e41478d12955", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812f02b0525b5106243aa5bc0dedf2c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessChain.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public ProcessChain(ProcessCreator[] pcs)", "signatureAfterChange": "   public ProcessChain(ProcessCreator[] pcs)", "diff": ["-    * @param pcs array of ProcessCreators */\r", "-  public ProcessChain(ProcessCreator[] pcs) {\r", "-    _creators = pcs;\r", "-    _processes = new Process[_creators.length];\r", "-\r", "-    _combinedInputStream = new PipedInputStream();\r", "-    try {\r", "-      _combinedStdOutStream = new PipedOutputStream(_combinedInputStream);\r", "-      _combinedInputStream.connect(_combinedStdOutStream);\r", "-    }\r", "-    catch(IOException e) { /* ignore, no output if this goes wrong */ }\r", "-    _combinedErrorStream = new PipedInputStream();\r", "-    try {\r", "-      _combinedStdErrStream = new PipedOutputStream(_combinedErrorStream);\r", "-      _combinedErrorStream.connect(_combinedStdErrStream);\r", "-    }\r", "-    catch(IOException e) { /* ignore, no output if this goes wrong */ }\r", "-\r", "-    // _deathThreads = new Thread[_creators.length];\r", "-    for(int i=0; i<_processes.length; ++i) {\r", "-      final int index = i;\r", "-      try {\r", "-        _processes[i] = _creators[i].start();\r", "-//        _deathThreads[i] = new Thread(new Runnable() {\r", "-//          public void run() {\r", "-//            boolean interrupted = false;\r", "-//            do {\r", "-//              interrupted = false;\r", "-//              try {\r", "-//                _processes[index].waitFor();\r", "-//              }\r", "-//              catch(InterruptedException e) { interrupted = true; }\r", "-//            } while(interrupted);\r", "-//            GeneralProcessCreator.LOG.log(\"Process \"+index+\" has terminated\");\r", "-//          }\r", "-//        });\r", "-//        _deathThreads[i].start();\r", "-      }\r", "-      catch(IOException e) {\r", "-        _aborted = true;\r", "-        destroy();\r", "-        return;\r", "-      }\r", "-    }\r", "-    \r", "-    for(int i=0; i<_processes.length-1; ++i) {\r", "-      // _processes.length-1 because we're processing the gaps between the processes:\r", "-      // (P0 P1 P2) has two gaps: P0-P1 and P1-P2. There's always one less gap than processes.\r", "-      StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+i,\r", "-                                                        _processes[i].getInputStream(),\r", "-                                                        _processes[i+1].getOutputStream(),\r", "-                                                        new ProcessChainThreadGroup(this));\r", "-      _redirectors.add(r);\r", "-      r.start();\r", "-      r = new StreamRedirectThread(\"stderr Redirector \"+i,\r", "-                                   _processes[i].getErrorStream(),\r", "-                                   _processes[i+1].getOutputStream(),\r", "-                                   new ProcessChainThreadGroup(this));\r", "-      _redirectors.add(r);\r", "-      r.start();\r", "-    }\r", "-    // now pipe output from the last process into our output streams\r", "-    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+(_processes.length-1),\r", "-                                                      _processes[_processes.length-1].getInputStream(),\r", "-                                                      _combinedStdOutStream,\r", "-                                                      new ProcessChainThreadGroup(this));\r", "-    _redirectors.add(r);\r", "-    r.start();\r", "-    r = new StreamRedirectThread(\"stderr Redirector \"+(_processes.length-1),\r", "-                                 _processes[_processes.length-1].getErrorStream(),\r", "-                                 _combinedStdErrStream,\r", "-                                 new ProcessChainThreadGroup(this));\r", "-    _redirectors.add(r);\r", "-    r.start();\r", "-  }\r", "+    * @param pcs array of ProcessCreators */", "+  public ProcessChain(ProcessCreator[] pcs) {", "+    _creators = pcs;", "+    _processes = new Process[_creators.length];", "+", "+    _combinedInputStream = new PipedInputStream();", "+    try {", "+      _combinedStdOutStream = new PipedOutputStream(_combinedInputStream);", "+      _combinedInputStream.connect(_combinedStdOutStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+    ", "+    _debugInputStream = new PipedInputStream();", "+    try {", "+      _debugOutputStream = new PipedOutputStream(_debugInputStream);", "+      _debugInputStream.connect(_debugOutputStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+     _combinedInputJoinedWithDebugStream = new JoinInputStream(_combinedInputStream, _debugInputStream);", "+    _debugOutput = new PrintWriter(new OutputStreamWriter(_debugOutputStream));", "+", "+    _combinedErrorStream = new PipedInputStream();", "+    try {", "+      _combinedStdErrStream = new PipedOutputStream(_combinedErrorStream);", "+      _combinedErrorStream.connect(_combinedStdErrStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+", "+    // _deathThreads = new Thread[_creators.length];", "+    for(int i=0; i<_processes.length; ++i) {", "+      final int index = i;", "+      try {", "+        _processes[i] = _creators[i].start();", "+//        _deathThreads[i] = new Thread(new Runnable() {", "+//          public void run() {", "+//            boolean interrupted = false;", "+//            do {", "+//              interrupted = false;", "+//              try {", "+//                _processes[index].waitFor();", "+//              }", "+//              catch(InterruptedException e) { interrupted = true; }", "+//            } while(interrupted);", "+//            GeneralProcessCreator.LOG.log(\"Process \"+index+\" has terminated\");", "+//          }", "+//        });", "+//        _deathThreads[i].start();", "+      }", "+      catch(IOException e) {", "+        GeneralProcessCreator.LOG.log(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+        // could not start the process, record error and abort", "+        _debugOutput.println(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+        _debugOutput.flush();", "+        _aborted = true;", "+        destroy();", "+        return;", "+      }", "+    }", "+    ", "+    for(int i=0; i<_processes.length-1; ++i) {", "+      // _processes.length-1 because we're processing the gaps between the processes:", "+      // (P0 P1 P2) has two gaps: P0-P1 and P1-P2. There's always one less gap than processes.", "+      StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+i,", "+                                                        _processes[i].getInputStream(),", "+                                                        _processes[i+1].getOutputStream(),", "+                                                        new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "+      r.start();", "+      r = new StreamRedirectThread(\"stderr Redirector \"+i,", "+                                   _processes[i].getErrorStream(),", "+                                   _processes[i+1].getOutputStream(),", "+                                   new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "+      r.start();", "+    }", "+    // now pipe output from the last process into our output streams", "+    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+(_processes.length-1),", "+                                                      _processes[_processes.length-1].getInputStream(),", "+                                                      _combinedStdOutStream,", "+                                                      new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();", "+    r = new StreamRedirectThread(\"stderr Redirector \"+(_processes.length-1),", "+                                 _processes[_processes.length-1].getErrorStream(),", "+                                 _combinedStdErrStream,", "+                                 new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();", "+//    _debugOutput.println(\"\\n\\nProcessChain started\\n\\n\");", "+//    _debugOutput.flush();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02ddb59ba24ad991a351b7f80129c43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessSequence.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ProcessSequence(ProcessCreator[] pcs)", "signatureAfterChange": "   public ProcessSequence(ProcessCreator[] pcs)", "diff": ["+    ", "+    _debugInputStream = new PipedInputStream();", "+    try {", "+      _debugOutputStream = new PipedOutputStream(_debugInputStream);", "+      _debugInputStream.connect(_debugOutputStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+     _combinedInputJoinedWithDebugStream = new JoinInputStream(_combinedInputStream, _debugInputStream);", "+    _debugOutput = new PrintWriter(new OutputStreamWriter(_debugOutputStream));", "+", "+              GeneralProcessCreator.LOG.log(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "-              // TODO-MGR: find a way to record the error in the ExternalProcessPanel (mgricken)", "-//              DrJavaErrorHandler.record(e);", "+              _debugOutput.println(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+              _debugOutput.flush();", "+      GeneralProcessCreator.LOG.log(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "-      // TODO-MGR: find a way to record the error in the ExternalProcessPanel (mgricken)", "-//      DrJavaErrorHandler.record(e);", "+      _debugOutput.println(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+      _debugOutput.flush();", "+//    _debugOutput.println(\"\\n\\nProcessSequence started\\n\\n\");", "+//    _debugOutput.flush();"]}], "num": 7053}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a63e33f63d90e771324825ce2301c49c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7381e74aa6f2f6104dd6a9c1a49c07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException", "diff": ["-    final Object _lock = new Object();", "-    ", "-    CompileShouldFailListener listener = new CompileShouldFailListener() {", "-      public void compileEnded() {", "-        super.compileEnded();", "-        _compileDone = true;", "-        synchronized (_lock) { _lock.notify(); }", "-      }", "-    };", "-    ", "+    _model.addListener(_failListener);", "-    _model.addListener(listener);", "-    synchronized (_lock) {", "-      try { while (! _compileDone) _lock.wait(); }", "-      catch (InterruptedException ie) {", "-        fail(\"Unexpected interrupted exception: \" + ie.getMessage());", "-      }", "-    }", "+    _waitCompileDone();", "+    ", "-    listener.checkCompileOccurred();", "-    _model.removeListener(listener);", "+    _failListener.checkCompileOccurred();", "+    _model.removeListener(_failListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9fa0b153c8737cfc4a5669d5e05681e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["-      public synchronized void interpreterReady(File wd) {  // closing all files calls resetInteractions", "-//        Utilities.show(\"interpreterReady(\" + wd + \") called\");", "-//        Utilities.show(\"Traceback is:\\n\" + StringOps.getStackTrace());", "-        interpreterReadyCount++;", "-        synchronized(_readyLock) { _readyLock.notify(); }", "-      }", "-    // wait for interpreter to be ready", "-    try {", "-      synchronized(_readyLock) {", "-        if (listener.getInterpreterReadyCount() == 0) _readyLock.wait(10000);  // intentionally not a while ", "-      }", "-    }", "-    catch(InterruptedException e) { fail(\"Wait for interpreterReady event was interrupted by \" + e); }", "-    listener.assertInterpreterReadyCount(1);  "]}], "num": 3030}
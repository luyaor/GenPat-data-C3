{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce882fdd52d61162bd5e6b1163237890", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372dd854cb58e4230da86e4661369d73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/text/SwingDocument.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void remove(int offs, int len) throws BadLocationException", "signatureAfterChange": "   public void remove(int offs, int len) throws BadLocationException", "diff": ["-    acquireWriteLock(); // locking is used to make the test and modification atomic", "-    try { if (_condition.canRemoveText(offs))  super.remove(offs, len); }", "-    finally { releaseWriteLock(); }", "+//    acquireWriteLock(); // locking is used to make the test and modification atomic", "+//    try { ", "+    if (_condition.canRemoveText(offs))  super.remove(offs, len); ", "+//    }", "+//    finally { releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b747ae094a372905ce176bd0b44a8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/text/SwingDocument.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void remove(int offs, int len) throws BadLocationException", "signatureAfterChange": "   public void remove(int offs, int len) throws BadLocationException", "diff": ["-    acquireWriteLock(); // locking is used to make the test and modification atomic", "-    try { if (_condition.canRemoveText(offs))  super.remove(offs, len); }", "-    finally { releaseWriteLock(); }", "+//    acquireWriteLock(); // locking is used to make the test and modification atomic", "+//    try { ", "+    if (_condition.canRemoveText(offs))  super.remove(offs, len); ", "+//    }", "+//    finally { releaseWriteLock(); }"]}], "num": 1256}
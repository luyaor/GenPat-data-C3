{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5165d7d8a2934d10b2f290be2ca75f0c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "090fd0b50450028e866b7209c0f56fe2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-    List<LocalVariable> vars = frame.visibleVariables();  // Added <LocalVariable> type argument; warning will go away in JDK 1.5", "-    Iterator<LocalVariable> varsIterator = vars.iterator();", "+    List vars = frame.visibleVariables();", "+    Iterator varsIterator = vars.iterator();", "-      LocalVariable localVar = varsIterator.next();", "+      LocalVariable localVar = (LocalVariable)varsIterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "219e6ab8a1678a44e084dfcf6cc0f2ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "signatureAfterChange": "   protected AttachingConnector _getAttachingConnector()     throws DebugException", "diff": ["-    List<AttachingConnector> connectors = vmm.attachingConnectors();  // Added parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "+    List connectors = vmm.attachingConnectors();  // Add parameterization <AttachingConnector>. JDK 1.5 will eliminate this check", "-    java.util.Iterator<AttachingConnector> iter = connectors.iterator();", "+    java.util.Iterator iter = connectors.iterator();", "-      AttachingConnector conn = iter.next();", "+      AttachingConnector conn = (AttachingConnector)iter.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fcc9844026f4fdc891c2a231adeb990", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   protected ThreadReference _getThreadFromDebugThreadData(DebugThreadData d)     throws NoSuchElementException", "signatureAfterChange": "   protected ThreadReference _getThreadFromDebugThreadData(DebugThreadData d)     throws NoSuchElementException", "diff": ["-    List<ThreadReference> threads = _vm.allThreads(); // Added parameterization <ThreadReference>. JDK 1.5 will eliminate this type warning", "-    Iterator<ThreadReference> iterator = threads.iterator();", "+    List threads = _vm.allThreads(); // Add parameterization <ThreadReference>. JDK 1.5 will eliminate this type warning", "+    Iterator iterator = threads.iterator();", "-      threadRef = iterator.next();", "+      threadRef = (ThreadReference)iterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0348545bd694a411708df2e869d945d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private Method _getMethod(ReferenceType rt, String name)", "signatureAfterChange": "   private Method _getMethod(ReferenceType rt, String name)", "diff": ["-    List<Method> methods = rt.methodsByName(name);  // JDK 1.5 will eliminate this warning", "-    Iterator<Method> methodsIterator = methods.iterator();", "+    List methods = rt.methodsByName(name);", "+    Iterator methodsIterator = methods.iterator();", "-      Method m = methodsIterator.next();", "+      Method m = (Method)methodsIterator.next();"]}], "num": 5728}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acc3afa0afcef3eccbd94c78229d82f6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aceecda073420b95687571e8258631a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "ef8053d5a3d77032e160ea243be48b30918a9ff8", "commitAfterChange": "8a977371ad1fe621f24183ca1ab0253a154a0d13", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "    public void appendExceptionResult(String exceptionClass,                                     String message,                                     String stackTrace,                                     AttributeSet set)", "signatureAfterChange": "   public void appendExceptionResult(String exceptionClass,                                     String message,                                     String stackTrace,                                     AttributeSet set);", "diff": ["+   */", "-                                    AttributeSet set)", "-  {", "-    //writeLock();", "-    try {", "-", "-      if (null == message || \"null\".equals(message)) {", "-        message = \"\";", "-      }", "-", "-      insertString(getLength(), exceptionClass + \": \" + message + \"\\n\", set);", "-", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException: ", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader=new BufferedReader(new StringReader(stackTrace));", "-        ", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName = null;", "-          int lineNumber = -1;", "-", "-          int openLoc = line.indexOf('(');", "-", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-", "-          insertString(getLength(), line, set);", "-", "-          // OK, now if fileName != null we did parse out fileName", "-          // and lineNumber.", "-          // Here's where we'd add the button, etc.", "-          if (fileName != null) {", "-            /*", "-            JButton button = new JButton(\"go\");", "-            button.addActionListener(new ExceptionButtonListener(fileName,", "-                                                                 lineNumber));", "-", "-            SimpleAttributeSet buttonSet = new SimpleAttributeSet(set);", "-            StyleConstants.setComponent(buttonSet, button);", "-            insertString(getLength(), \"  \", null);", "-            insertString(getLength() - 1, \" \", buttonSet);", "-            */", "-            //JOptionPane.showMessageDialog(null, \"button in\");", "-            //insertString(getLength(), \" \", null);", "-            //JOptionPane.showMessageDialog(null, \"extra space\");", "-          }", "-", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          insertString(getLength(), \"\\n\", set);", "-", "-        } // end the while", "-      }", "-    }", "-    catch (IOException ioe) {", "-      // won't happen; we're readLine'ing from a String!", "-      throw new UnexpectedException(ioe);", "-    }", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "-    finally {", "-      //writeUnlock();", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab89ad06dc70abc916a035b30a07532c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocument.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String message, String styleName)", "diff": ["-  public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName) {", "-    ", "-    String c = exceptionClass;", "-    if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());", "-    ", "+  public void appendExceptionResult(String message, String styleName) {", "+    // Note that there is similar code in InteractionsDocument.  Something should be refactored.", "-    try {", "-      insertText(getLength(), c + \": \" + message + \"\\n\", styleName);", "-      ", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException:", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader = new BufferedReader(new StringReader(stackTrace));", "-        ", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName;", "-          int lineNumber;", "-          ", "-          // TODO:  Why is this stuff here??", "-          int openLoc = line.indexOf('(');", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-            ", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-          ", "-          insertText(getLength(), line, styleName);", "-          ", "-          // OK, now if fileName != null we did parse out fileName", "-          // and lineNumber.", "-          // Here's where we'd add the button, etc.", "-          /*", "-           if (fileName != null) {", "-           JButton button = new JButton(\"go\");", "-           button.addActionListener(new ExceptionButtonListener(fileName, lineNumber));", "-           SimpleAttributeSet buttonSet = new SimpleAttributeSet(set);", "-           StyleConstants.setComponent(buttonSet, button);", "-           insertString(getLength(), \"  \", null);", "-           insertString(getLength() - 1, \" \", buttonSet);", "-           JOptionPane.showMessageDialog(null, \"button in\");", "-           insertString(getLength(), \" \", null);", "-           JOptionPane.showMessageDialog(null, \"extra space\");", "-           }*/", "-          ", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          insertText(getLength(), \"\\n\", styleName);", "-          ", "-        } // end the while", "-      }", "-    }", "-    catch (IOException ioe) { throw new UnexpectedException(ioe); }", "+    try { insertText(getLength(), message + \"\\n\", styleName); }", "-  }  ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e0c48fa08fbe62652cc23f9ab43ad6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String message, String styleName)", "diff": ["-  public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName) {", "+  public void appendExceptionResult(String message, String styleName) {", "+    // Note that there is similar code in InteractionsDJDocument.  Something should be refactored.", "+    ", "-    if (message != null && (message.equals(\"Connection refused to host: 127.0.0.1; nested exception is: \\n\" +", "-                                           \"\\tjava.net.ConnectException: Connection refused: connect\"))) return;", "+    // I'm commenting out, just to see when it appears", "+//    if (message != null && (message.equals(\"Connection refused to host: 127.0.0.1; nested exception is: \\n\" +", "+//                                           \"\\tjava.net.ConnectException: Connection refused: connect\"))) return;", "-    if (null == message || \"null\".equals(message)) message = \"\";", "-    ", "-    // Simplify the common error messages", "-    if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "-        \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "-      exceptionClass = \"Error\";", "-    }", "-    ", "-    // The following is an ugly hack that should be fixed ASAP.  The read/writelock methods need to be added to", "-    // the EditDocumentInterface interface.  This cast and a similar one in ConsoleDocument must be removed because they", "-    // defeat the purpose of the EditDocumentInterface interface.", "-    ", "-    String c = exceptionClass;", "-    if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());", "-    ", "-    try {", "-      append(c + \": \" + message + \"\\n\", styleName);", "-      ", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException:", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader = new BufferedReader(new StringReader(stackTrace));", "-        ", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName;", "-          int lineNumber;", "-          ", "-          // TODO:  Why is this stuff here??", "-          int openLoc = line.indexOf('(');", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-            ", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-          ", "-          append(line, styleName);", "-          ", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          append(\"\\n\", styleName);", "-          ", "-        } // end the while", "-      }", "-    }", "-    catch (IOException ioe) { throw new UnexpectedException(ioe); }", "+    try { append(message + \"\\n\", styleName); }", "-  }  ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da083d82685011da69239c70513d1f74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public synchronized void appendExceptionResult(String exceptionClass, String message, String stackTrace,                                                  String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "diff": ["-  public synchronized void appendExceptionResult(String exceptionClass, String message, String stackTrace,", "-                                                 String styleName) {", "-    try {", "-      if (null == message || \"null\".equals(message)) message = \"\";", "-      ", "-      // Simplify the common error messages", "-      if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "-          \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "-        exceptionClass = \"Error\";", "-      }", "-", "-      String c = exceptionClass;", "-      if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());      ", "-      insertText(getDocLength(), c + \": \" + message + \"\\n\", styleName);", "-", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException:", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader=new BufferedReader(new StringReader(stackTrace));", "-", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName;", "-          int lineNumber;", "-", "-          // TODO:  Why is this stuff here??", "-          int openLoc = line.indexOf('(');", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-", "-          insertText(getDocLength(), line, styleName);", "-", "-          // OK, now if fileName != null we did parse out fileName", "-          // and lineNumber.", "-          // Here's where we'd add the button, etc.", "-          /*", "-          if (fileName != null) {", "-            JButton button = new JButton(\"go\");", "-            button.addActionListener(new ExceptionButtonListener(fileName, lineNumber));", "-            SimpleAttributeSet buttonSet = new SimpleAttributeSet(set);", "-            StyleConstants.setComponent(buttonSet, button);", "-            insertString(getDocLength(), \"  \", null);", "-            insertString(getDocLength() - 1, \" \", buttonSet);", "-            JOptionPane.showMessageDialog(null, \"button in\");", "-            insertString(getDocLength(), \" \", null);", "-            JOptionPane.showMessageDialog(null, \"extra space\");", "-          }*/", "-", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          insertText(getDocLength(), \"\\n\", styleName);", "-", "-        } // end the while", "-      }", "+  public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName) {", "+    ", "+    ", "+    if (null == message || \"null\".equals(message)) message = \"\";", "+    ", "+    // Simplify the common error messages", "+    if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "+        \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "+      exceptionClass = \"Error\";", "-    catch (IOException ioe) {", "-      // won't happen; we're readLine'ing from a String!", "-      throw new UnexpectedException(ioe);", "-    }", "-    catch (DocumentAdapterException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "+    ", "+    // The following is an ugly hack that should be fixed ASAP.  The read/writelock methods need to be added to", "+    // the DocumentAdapter interface.  This cast and a similar one in ConsoleDocument must be removed because they", "+    // defeat the purpose of the DocumentAdapter interface.", "+    InteractionsDocumentAdapter doc = ((InteractionsDocumentAdapter)_document);", "+    doc.appendExceptionResult(exceptionClass, message, stackTrace, styleName);"]}], "num": 25194}
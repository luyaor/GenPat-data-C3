{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb5e752a9e5ba87a8387ec82865d63bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cee7b3e17f88e8af073459006f4bbd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f01da19eef180264e50ee938eb35e69c8d092f3e", "commitAfterChange": "fbaecba32a4936f7aab208313b312f73181698a7", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "   private void _close()", "signatureAfterChange": "   private void _close()", "diff": ["-    _model.closeFile(_model.getActiveDocument());", "+    ", "+    try{", "+      if(_model.getActiveDocument().isAuxiliaryFile() || ", "+         _model.getActiveDocument().isProjectFile()){", "+        String text = \"Closing this file will permanently remove it from the current project.\" + ", "+          \"\\nAre you sure that you want to close this file?\";", "+        ", "+        int rc = JOptionPane.showConfirmDialog(MainFrame.this,", "+                                             text,", "+                                             \"Close \" + ", "+                                               _model.getActiveDocument().getFile().getName() + ", "+                                               \"?\",", "+                                             JOptionPane.YES_NO_OPTION);", "+        if(rc != JOptionPane.YES_OPTION)", "+          return;", "+      }", "+      ", "+      //Either this is an external file or user actually wants to close it", "+      _model.closeFile(_model.getActiveDocument());", "+        ", "+    }", "+    catch(FileMovedException e){", "+      //Not sure what exactly should be done.", "+      //For now, let's just say the error is unexpected.", "+      throw new UnexpectedException(e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e500d7b47722be76220f757d32a635", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    // Find end of previous statement (or end of case statement)", "+    // Find end of previous statement, immediately enclosing brace, or end of case statement", "-    int lineStart = doc.getLineStartPos(here);", "+    int lineStart = doc.getLineStartPos(here);  // find start of current line", "-    try {", "-      prevDelimiterPos = doc.findPrevDelimiter(lineStart, delims);", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    try { prevDelimiterPos = doc.findPrevDelimiter(lineStart, delims); }  // find pos of delimiter preceding line start", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "-    // For 0, align to left margin", "+    // If no preceding delimiter found, align to left margin", "-      char delim = doc.getText(prevDelimiterPos, 1).charAt(0);", "+      char delim = doc.getText(prevDelimiterPos, 1).charAt(0);    // get delimiter char", "-        int testPos = doc.findPrevCharPos(prevDelimiterPos, ws);", "-        if (doc.getText(testPos,1).charAt(0) == '}') {", "-          prevDelimiterPos = testPos;", "+        int testPos = doc.findPrevCharPos(prevDelimiterPos, ws);  // find char preceding ';' delimiter", "+        char testDelim = doc.getText(testPos,1).charAt(0);", "+        if ( testDelim == '}' || testDelim == ')') {", "+          prevDelimiterPos = testPos;                             // if this char is '}' or ')', use it as delimiter", "-      if (delim == '}') {", "+      if (delim == '}' || delim == ')') {", "-        doc.resetReducedModelLocation();", "+//        doc.resetReducedModelLocation();  // why reset the reduced model comment walker?", "-        doc.move(dist);", "-        prevDelimiterPos -= doc.balanceBackward() - 1;", "-        doc.move(-dist);", "+        assert doc.getCurrentLocation() == here;", "+        doc.setCurrentLocation(prevDelimiterPos + 1);   // move cursor to right of '}' or ')' delim", "+        prevDelimiterPos -= doc.balanceBackward() - 1;  // use matching '{' or '(' as delim", "+        doc.setCurrentLocation(here);", "+        assert doc.getText(prevDelimiterPos, 1).charAt(0) == '{' || ", "+          doc.getText(prevDelimiterPos, 1).charAt(0) == '(';", "-    try {", "-      // Include colons as end of statement (ie. \"case\")", "-      char[] indentDelims;", "-      char[] indentDelimsWithColon = {';', '{', '}', ':'};", "-      char[] indentDelimsWithoutColon = {';', '{', '}'};", "-      if (_useColon) indentDelims = indentDelimsWithColon;", "-      else indentDelims = indentDelimsWithoutColon;", "-      ", "-      indent = doc.getIndentOfCurrStmt(prevDelimiterPos, indentDelims);", "-      ", "-    } catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    // Include colons as end of statement (ie. \"case\")", "+    char[] indentDelims;", "+    char[] indentDelimsWithColon = {';', '{', '}', ':'};", "+    char[] indentDelimsWithoutColon = {';', '{', '}'};", "+    if (_useColon) indentDelims = indentDelimsWithColon;", "+    else indentDelims = indentDelimsWithoutColon;", "+    ", "+    indent = doc.getIndentOfCurrStmt(prevDelimiterPos, indentDelims);"]}], "num": 8227}
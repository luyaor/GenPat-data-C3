{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67b59a718e258c9fb342853eccff5036", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ec17a3d9b5a20d46ea61fc2ae67a6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "781f0d0cc2beb96bc72b49283dde3e8cd187c6ba", "commitAfterChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 57, "signatureBeforeChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "signatureAfterChange": "      synchronized void currThreadSet(final DebugThreadData thread)", "diff": ["+  synchronized void currThreadSet(final DebugThreadData thread) {", "+    _model.printDebugMessage(\"The current thread has been set.\");", "+    notifyListeners(new EventNotifier() {", "+      public void notifyListener(DebugListener l) {", "+        l.currThreadSet(thread);", "+      }", "+    });", "+  }", "-  ", "-  synchronized void currThreadSet(final DebugThreadData thread) {", "-    _model.printDebugMessage(\"The current thread is now \" + thread.getName() + \".\");", "-    notifyListeners(new EventNotifier() {", "-      public void notifyListener(DebugListener l) {", "-        l.currThreadSet(thread);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a0ff41a82971bdcf60682cde15e12e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public boolean canAbandonFile()", "signatureAfterChange": "     public boolean canAbandonFile()", "diff": ["-   */", "-  public boolean canAbandonFile() {", "-    if (isModifiedSinceSave()) {", "-      return _pollListeners(new EventPoller() {", "-        public boolean poll(GlobalModelListener l) {", "-          return l.canAbandonFile(_definitionsDoc.getFile());", "-        }", "-      });", "-    }", "-    else {", "-      return true;", "-    }", "-  }", "+     */", "+    public boolean canAbandonFile() {", "+      final OpenDefinitionsDocument doc = this;", "+      if (isModifiedSinceSave()) {", "+        return _pollListeners(new EventPoller() {", "+          public boolean poll(GlobalModelListener l) {", "+            return l.canAbandonFile(doc);", "+          }", "+        });", "+      }", "+      else {", "+        return true;", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa85c3b95cd247926d4bce353e021e5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f85f20b04a845bc5f3cc15aa220d5ca52f7ac620", "commitAfterChange": "65a7277b66a8820a81606e41a75578dc0c567fde", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private DJClass enclosingThis(Type expected)", "signatureAfterChange": "     private DJClass enclosingThis(Type expected)", "diff": ["-      DJClass candidate = context.getThis();", "-      while (candidate != null) {", "-        if (ts.isSubtype(SymbolUtil.thisType(candidate), expected)) { return candidate; }", "-        candidate = SymbolUtil.dynamicOuterClass(candidate);", "-      }", "-      return null;", "+      return expected.apply(new TypeAbstractVisitor<DJClass>() {", "+        @Override public DJClass defaultCase(Type t) { return null; }", "+        @Override public DJClass forClassType(ClassType t) {", "+          if (context.hasThis(t.ofClass()) && ts.isSubtype(SymbolUtil.thisType(t.ofClass()), t)) {", "+            return t.ofClass();", "+          }", "+          else { return null; }", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aedfa41ce6098e600e71a6ebc30d2039", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void newFile()", "signatureAfterChange": "   public OpenDefinitionsDocument newFile()", "diff": ["+  public OpenDefinitionsDocument newFile() {", "+    OpenDefinitionsDocument doc = _createOpenDefinitionsDocument();", "+    doc.getDocument().setFile(null);", "+    _definitionsDocs.add(doc);", "+    _notifyListeners(new EventNotifier() {", "+      public void notifyListener(GlobalModelListener l) {", "+        l.newFileCreated();", "+      }", "+    });", "+    return doc;", "-   */", "-  public void newFile() {", "-    boolean canCreateNew = canAbandonFile();", "-    if (canCreateNew) {", "-      _definitionsDoc = (DefinitionsDocument)_editorKit.createDefaultDocument();", "-      _definitionsDoc.setFile(null);", "-      _notifyListeners(new EventNotifier() {", "-        public void notifyListener(GlobalModelListener l) {", "-          l.newFileCreated();", "-        }", "-      });", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d967243c38d3321d648d48379eedf895", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ea54d5918e0742266441f70659af74f35bca898d", "commitAfterChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 70, "signatureBeforeChange": "          private void cleanHelper(File f)", "signatureAfterChange": "       public String getDiscriptionMessage()", "diff": ["-    private void cleanHelper(File f) {", "-      if (f.isDirectory()) {", "-        ", "-        File fs[] = f.listFiles(new FilenameFilter() {", "-          public boolean accept(File parent, String name) {", "-            return new File(parent, name).isDirectory() || name.endsWith(\".class\");", "-          }", "-        });", "-        ", "-        if (fs!=null) { // listFiles may return null if there's an IO error", "-          for (File kid: fs) { cleanHelper(kid); }", "-        fs = f.listFiles(); // listFiles may return null if there's an IO error", "-        if ((fs!=null) && (fs.length == 0))  f.delete();", "-        ", "-      } else if (f.getName().endsWith(\".class\")) f.delete();", "-    }", "+      }", "+      public String getDiscriptionMessage() {", "+        return \"Deleting files...\";", "+      }"]}], "num": 228}
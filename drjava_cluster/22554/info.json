{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe205dfd9c200fdc870ed116d177f762", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c0869d663c3d747f84bdadd57a2d1e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp()", "signatureAfterChange": "   public void setUp()", "diff": ["-    _globalContext = new GlobalContext(new TreeInterpreter(new JavaCCParserFactory()));", "+    // This test is dependent on 1.5 since the ObjectMethodCall uses 1.5 reflection methods.", "+    // If this were run in 1.4 and we faked the version property to 1.5, some methods would", "+    // not be found during the test and would cause the test case to fail.", "+    String version = System.getProperty(VERSION_KEY);", "+    if (Float.valueOf(version) < 1.5) {", "+      throw new WrongVersionException(\"This test case requires Java 2 SDK v1.5.0 or better\");", "+    }", "+    ", "+    parserFactory = new JavaCCParserFactory();", "+    _globalContext = new GlobalContext(new TreeInterpreter(parserFactory));", "+", "-    _interpreter = new DynamicJavaAdapter();", "+", "+    _interpreter = new TreeInterpreter(parserFactory);", "-      _interpreter.interpret(\"int x = 0;\");", "-      _interpreter.interpret(\"Integer X = new Integer(0);\");", "-      _interpreter.interpret(\"Boolean B = Boolean.FALSE;\");", "-      _interpreter.interpret(\"boolean b = false;\");", "-      _interpreter.interpret(\"int[] I = {1, 2, 3};\");", "+      _interpretText(\"int x = 0;\");", "+      _interpretText(\"Integer X = new Integer(0);\");", "+      _interpretText(\"Boolean B = Boolean.FALSE;\");", "+      _interpretText(\"boolean b = false;\");", "+      _interpretText(\"int[] I = {1, 2, 3};\");", "-    catch (ExceptionReturnedException ere) {", "+    catch (InterpreterException ere) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee31e8cf91293a94ed60ebe86ee0ca0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitorTest.java", "commitBeforeChange": "462c4a613a015a2dbcac948815ea1318bb028f22", "commitAfterChange": "0709b991a23f9136532fa9ea3471d8a6bc4cbcfe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws java.io.IOException", "signatureAfterChange": "      public void setUp() throws java.io.IOException", "diff": ["-    _interpreter = new DynamicJavaAdapter();", "+    parserFactory = new JavaCCParserFactory();", "+    astInterpreter = new TreeInterpreter(null); // No ParserFactory needed to interpret an AST", "+    strInterpreter = new TreeInterpreter(parserFactory); // ParserFactory is needed to interpret a string", "-      _interpreter.interpret(\"int x = 0;\");", "-      _interpreter.interpret(\"Integer X = new Integer(0);\");", "-      _interpreter.interpret(\"Boolean B = Boolean.FALSE;\");", "-      _interpreter.interpret(\"boolean b = false;\");", "-      _interpreter.interpret(\"int[] i = {1, 2, 3};\");", "-      _interpreter.interpret(\"Integer[] I = {1, 2, 3};\");", "+      interpret(\"int x = 0;\");", "+      interpret(\"Integer X = new Integer(0);\");", "+      interpret(\"Boolean B = Boolean.FALSE;\");", "+      interpret(\"boolean b = false;\");", "+      interpret(\"int[] i = {1, 2, 3};\");", "+      interpret(\"Integer[] I = {1, 2, 3};\");", "-    catch (ExceptionReturnedException ere) {", "+    catch (InterpreterException ie) {"]}], "num": 22554}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e412dad56174013e7b9cf982103591ed", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "029a5e91abdf83dce673c78b2d6b95a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   synchronized public void javadocEnded(boolean success, File destDir)", "signatureAfterChange": "   public void javadocEnded(boolean success, File destDir)", "diff": ["-  synchronized public void javadocEnded(boolean success, File destDir) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).javadocEnded(success, destDir);", "+  public void javadocEnded(boolean success, File destDir) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).javadocEnded(success, destDir);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7796290f2503143900bc110b0373634a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   synchronized public void interpreterChanged(boolean inProgress)", "signatureAfterChange": "   public void interpreterChanged(boolean inProgress)", "diff": ["-  synchronized public void interpreterChanged(boolean inProgress) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interpreterChanged(inProgress);", "+  public void interpreterChanged(boolean inProgress) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interpreterChanged(inProgress);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}], "num": 30113}
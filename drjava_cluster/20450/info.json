{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65863dc433af111bbe3b9ff3f816a6b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389e5055aa18f49948282de1066fbd79", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "d441fefd8eab1aff683e8a16a46c50a8f6994932", "commitAfterChange": "55ffd5d461fa009444744f2527631191c6f9decc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void notifyInputEnteredAction()", "signatureAfterChange": "   public void interruptConsoleInput()", "diff": ["-   *  released. */", "-  public void notifyInputEnteredAction() { _popupConsole.interruptConsole(); }", "+   */", "+  public void interruptConsoleInput() {", "+    synchronized(_consoleInputCommandLock) {", "+      SwingUtilities.invokeLater(_inputCompletionCommand);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a2dc97864e7388d0070fb650c392309", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void addInterpreter(String name, Object thisVal, Class<?> thisClass, Object[] localVars,                              String[] localVarNames, Class<?>[] localVarClasses)", "signatureAfterChange": "   public void addInterpreter(String name, Object thisVal, Class<?> thisClass, Object[] localVars,                              String[] localVarNames, Class<?>[] localVarClasses)", "diff": ["-    debug.logValues(new String[]{ \"name\", \"thisVal\", \"thisClass\", \"localVars\", \"localVarNames\",", "-      \"localVarClasses\" }, name, thisVal, thisClass, localVars, localVarNames, localVarClasses);", "-    if (_interpreters.containsKey(name)) {", "-      throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "-    }", "-    if (localVars.length != localVarNames.length || localVars.length != localVarClasses.length) {", "-      throw new IllegalArgumentException(\"Local variable arrays are inconsistent\");", "-    }", "-    ", "-    // TODO: handle inner classes", "-    // TODO: enforce final vars?", "-    Package pkg = thisClass.getPackage();", "-    DJClass c = SymbolUtil.wrapClass(thisClass);", "-    List<LocalVariable> vars = new LinkedList<LocalVariable>();", "-    for (int i = 0; i < localVars.length; i++) {", "-      if (localVarClasses[i] == null) {", "-        try { localVarClasses[i] = (Class<?>) localVars[i].getClass().getField(\"TYPE\").get(null); }", "-        catch (IllegalAccessException e) { throw new IllegalArgumentException(e); }", "-        catch (NoSuchFieldException e) { throw new IllegalArgumentException(e); }", "+    synchronized(_stateLock) {", "+      debug.logValues(new String[]{ \"name\", \"thisVal\", \"thisClass\", \"localVars\", \"localVarNames\",", "+        \"localVarClasses\" }, name, thisVal, thisClass, localVars, localVarNames, localVarClasses);", "+      if (isInterpreterName(name)) {", "+        throw new IllegalArgumentException(\"'\" + name + \"' is not a unique interpreter name\");", "-      Type varT = SymbolUtil.typeOfGeneralClass(localVarClasses[i], _interpreterOptions.typeSystem());", "-      vars.add(new LocalVariable(localVarNames[i], varT, false));", "+      if (localVars.length != localVarNames.length || localVars.length != localVarClasses.length) {", "+        throw new IllegalArgumentException(\"Local variable arrays are inconsistent\");", "+      }", "+      ", "+      // TODO: handle inner classes", "+      // TODO: enforce final vars?", "+      Package pkg = thisClass.getPackage();", "+      DJClass c = SymbolUtil.wrapClass(thisClass);", "+      List<LocalVariable> vars = new LinkedList<LocalVariable>();", "+      for (int i = 0; i < localVars.length; i++) {", "+        if (localVarClasses[i] == null) {", "+          try { localVarClasses[i] = (Class<?>) localVars[i].getClass().getField(\"TYPE\").get(null); }", "+          catch (IllegalAccessException e) { throw new IllegalArgumentException(e); }", "+          catch (NoSuchFieldException e) { throw new IllegalArgumentException(e); }", "+        }", "+        Type varT = SymbolUtil.typeOfGeneralClass(localVarClasses[i], _interpreterOptions.typeSystem());", "+        vars.add(new LocalVariable(localVarNames[i], varT, false));", "+      }", "+      ", "+      TypeContext ctx = new ImportContext(_interpreterLoader, _interpreterOptions);", "+      if (pkg != null) { ctx = ctx.setPackage(pkg.getName()); }", "+      ctx = new ClassSignatureContext(ctx, c, _interpreterLoader);", "+      ctx = new ClassContext(ctx, c);", "+      ctx = new DebugMethodContext(ctx, thisVal == null);", "+      ctx = new LocalContext(ctx, vars);", "+      ", "+      RuntimeBindings bindings = RuntimeBindings.EMPTY;", "+      if (thisVal != null) { bindings = new RuntimeBindings(bindings, c, thisVal); }", "+      bindings = new RuntimeBindings(bindings, vars, IterUtil.asIterable(localVars));", "+      ", "+      Interpreter i = new Interpreter(_interpreterOptions, ctx, bindings);", "+//      _environments.put(name, Pair.make(ctx, bindings));", "+      putInterpreter(name, i);", "-    ", "-    TypeContext ctx = new ImportContext(_interpreterLoader, _interpreterOptions);", "-    if (pkg != null) { ctx = ctx.setPackage(pkg.getName()); }", "-    ctx = new ClassSignatureContext(ctx, c, _interpreterLoader);", "-    ctx = new ClassContext(ctx, c);", "-    ctx = new DebugMethodContext(ctx, thisVal == null);", "-    ctx = new LocalContext(ctx, vars);", "-    ", "-    RuntimeBindings bindings = RuntimeBindings.EMPTY;", "-    if (thisVal != null) { bindings = new RuntimeBindings(bindings, c, thisVal); }", "-    bindings = new RuntimeBindings(bindings, vars, IterUtil.asIterable(localVars));", "-    ", "-    Interpreter i = new Interpreter(_interpreterOptions, ctx, bindings);", "-    _environments.put(name, Pair.make(ctx, bindings));", "-    _interpreters.put(name, i);"]}], "num": 20450}
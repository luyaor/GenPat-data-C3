{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b6b3bf9f157b956616d689b97060ecf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3dcfe4b76bb1406044b18a75e69653", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocumentTest.java", "commitBeforeChange": "26668262ef01a77108768ef35014f0c42dcfcb10", "commitAfterChange": "29c3a48aaad146d1b60a0606bb1625984a770c41", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testIsNum()", "signatureAfterChange": "   public void testIsNum()", "diff": ["-      assertTrue(AbstractDJDocument._isNum(\"0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"0l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12L\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"00\"));", "-      assertTrue(AbstractDJDocument._isNum(\"01\"));", "-      assertTrue(AbstractDJDocument._isNum(\"012\"));", "-      assertTrue(AbstractDJDocument._isNum(\"00l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"01l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"012l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"00L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"01L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"012L\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"0x0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x1\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x12\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x0l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x1l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x12l\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x0L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x1L\"));", "-      assertTrue(AbstractDJDocument._isNum(\"0x12L\"));", "-", "-      assertTrue(AbstractDJDocument._isNum(\"1.0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34F\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34D\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2f\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2F\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2F\"));", "-      ", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2d\"));", "-      assertTrue(AbstractDJDocument._isNum(\"1.0e2D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.0e2D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.3e2D\"));", "-      assertTrue(AbstractDJDocument._isNum(\"12.34e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"0l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12L\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"00\"));", "+    assertTrue(AbstractDJDocument._isNum(\"01\"));", "+    assertTrue(AbstractDJDocument._isNum(\"012\"));", "+    assertTrue(AbstractDJDocument._isNum(\"00l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"01l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"012l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"00L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"01L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"012L\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"0X0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X1\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X12\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0Xff\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFF\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XFFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0Xg\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X0l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X1l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X12l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0Xffl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0Xgl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X0L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X1L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0X12L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XffL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XgL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0XFFFFFFFFFFFFFFFFFL\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"0x0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x1\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x12\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xff\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFF\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xFFFFFFFFF\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xg\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x0l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x1l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x12l\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xffl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFFl\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xgl\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x0L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x1L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0x12L\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xffL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xgL\"));", "+    assertTrue(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFL\"));", "+    assertFalse(AbstractDJDocument._isNum(\"0xFFFFFFFFFFFFFFFFFL\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34F\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34D\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2f\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2F\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2F\"));", "+    ", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2d\"));", "+    assertTrue(AbstractDJDocument._isNum(\"1.0e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.0e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.3e2D\"));", "+    assertTrue(AbstractDJDocument._isNum(\"12.34e2D\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570b2c4bd536dd4348dfa5067433a175", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DocumentRegionTest.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testRegionManager() throws BadLocationException", "signatureAfterChange": "   public void testRegionManager() throws BadLocationException", "diff": ["-    assertNull(rm.getRegionContaining(_doc, 5, 5));", "-    assertNull(rm.getRegionContaining(_doc, 4, 6));", "-    assertNull(rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    ", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 4, 6).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 3, 7).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 2, 8).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 2, 5).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 5, 8).size() == 0);", "-    assertTrue(r1==rm.getRegionAt(_doc, 5));", "-    assertTrue(r1==rm.getRegionAt(_doc, 3));", "-    assertTrue(r1==rm.getRegionAt(_doc, 7));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 5));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 3));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 4));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 6));", "+    ", "+    assertNull(rm.getRegionAt(_doc, 7));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 5, 5));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 4, 6));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    ", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 5, 6).contains(r1));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 4, 6).contains(r1));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 3, 7).contains(r1));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 3).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 5, 8).contains(r1));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 15, 18).size() == 0);", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18));", "+", "-    assertTrue(r2==rm.getRegionAt(_doc, 15));", "-    assertTrue(r2==rm.getRegionAt(_doc, 13));", "-    assertTrue(r2==rm.getRegionAt(_doc, 17));", "+    assertTrue(r2 == rm.getRegionAt(_doc, 15));", "+    assertTrue(r2 == rm.getRegionAt(_doc, 13));", "+    assertNull(rm.getRegionAt(_doc, 17));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 15, 15));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 14, 16));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 15, 15).size() == 0);", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 0, 14).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 14, 16).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 10, 17).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 10, 20).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 16, 17).contains(r2));", "+", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 17, 18).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 10, 13).size() == 0); ", "-    // r2 and r3 are the same region, so the region will be reused", "-    // and we get r2 back", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 6, 14).contains(r1)); ", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 6, 14).contains(r2));", "+    ", "+//    // r2 and r3 are the same region, so the region will be reused", "+//    // and we get r2 back", "-    rm.addRegion(r3);", "-    assertTrue(r2==rm.getRegionAt(_doc, 15));", "-    assertTrue(r2==rm.getRegionAt(_doc, 13));", "-    assertTrue(r2==rm.getRegionAt(_doc, 17));", "-    assertNull(rm.getRegionAt(_doc, 12));", "-    assertNull(rm.getRegionAt(_doc, 18));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 15, 15));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 14, 16));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "+//    rm.addRegion(r3);", "+//    assertTrue(r2==rm.getRegionAt(_doc, 15));", "+//    assertTrue(r2==rm.getRegionAt(_doc, 13));", "+//    assertTrue(r2==rm.getRegionAt(_doc, 17));", "+//    assertNull(rm.getRegionAt(_doc, 12));", "+//    assertNull(rm.getRegionAt(_doc, 18));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 15, 15));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 14, 16));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 13, 17));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 18));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 15));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 15, 18)); ", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "-", "-    assertNull(rm.getRegionAt(_doc, 15));", "-    assertNull(rm.getRegionAt(_doc, 13));", "-    assertNull(rm.getRegionAt(_doc, 17));", "-    assertNull(rm.getRegionAt(_doc, 12));", "-    assertNull(rm.getRegionAt(_doc, 18));", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 13, 15).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 14, 16).size() == 0);", "+//    assertNull(rm.getRegionsOverlapping(_doc, 13, 17));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 18));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 15));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 15, 18)); ", "-    assertNull(rm.getRegionContaining(_doc, 5, 5));", "-    assertNull(rm.getRegionContaining(_doc, 4, 6));", "-    assertNull(rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 4, 6).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 3, 7).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 8).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 5).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 8).size() == 0);"]}], "num": 10629}
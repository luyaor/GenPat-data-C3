{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee939dbe4aa9703c186e3c6471c99fbf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0e356fd8878b4738c7ea463396f9d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "       public Process value()", "signatureAfterChange": "     public Remote value()", "diff": ["-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try {", "-          return runJavaProcess(javaCommand, TaskProcess.class.getName(), IterUtil.<String>empty(), classPath,", "-                                workingDir, properties, jvmParams);", "-        }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "+    public ExportRemoteTask(Thunk<? extends Remote> factory) { _factory = factory; }", "+    public Remote value() {", "+      Remote server = _factory.value();", "+      try { return UnicastRemoteObject.exportObject(server, 0); }", "+      catch (RemoteException e) { throw new WrappedException(e); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f472d654ac964ba65979445e3f9b0f39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 41, "signatureBeforeChange": "       public Process value()", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory)       throws InterruptedException, InvocationTargetException, IOException", "diff": ["-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try { return runJavaProcess(TaskProcess.class.getName(), IterUtil.<String>empty(), workingDir); }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "+  public static Remote exportInProcess(Thunk<? extends Remote> factory)", "+      throws InterruptedException, InvocationTargetException, IOException {", "+    return exportInProcess(factory, JVMBuilder.DEFAULT);"]}], "num": 23199}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "179db722b404394070a2613df29197f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f48b875e57339a3f75afccf9e0970be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 73, "signatureBeforeChange": "   private Value _convertToActualType(ThreadReference threadRef, LocalVariable localVar,                                      Value v)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException", "signatureAfterChange": "   private PrimitiveValue _unbox(ObjectReference val, ThreadReference thread) throws DebugException", "diff": ["+   */", "+  private PrimitiveValue _unbox(ObjectReference val, ThreadReference thread) throws DebugException {", "+    if (val == null) { throw new DebugException(\"Value can't be unboxed\"); }", "+    String type = val.referenceType().name();", "+    String m = null;", "+    String sig = null;", "+    if (type.equals(\"java.lang.Boolean\")) { m = \"booleanValue\"; sig = \"()Z\"; }", "+    else if (type.equals(\"java.lang.Integer\")) { m = \"intValue\"; sig = \"()I\"; }", "+    else if (type.equals(\"java.lang.Double\")) { m = \"doubleValue\"; sig = \"()D\"; }", "+    else if (type.equals(\"java.lang.Character\")) { m = \"charValue\"; sig = \"()C\"; }", "+    else if (type.equals(\"java.lang.Byte\")) { m = \"byteValue\"; sig = \"()B\"; }", "+    else if (type.equals(\"java.lang.Short\")) { m = \"shortValue\"; sig = \"()S\"; }", "+    else if (type.equals(\"java.lang.Long\")) { m = \"longValue\"; sig = \"()J\"; }", "+    else if (type.equals(\"java.lang.Float\")) { m = \"floatValue\"; sig = \"()F\"; }", "+    ", "+    if (m == null) { throw new DebugException(\"Value can't be unboxed\"); }", "+    else { return (PrimitiveValue) _invokeMethod(thread, val, m, sig); }", "+  }", "-   */", "-  private Value _convertToActualType(ThreadReference threadRef, LocalVariable localVar,", "-                                     Value v)", "-    throws InvalidTypeException, ClassNotLoadedException,", "-    IncompatibleThreadStateException, InvocationException", "-  {", "-    String typeSignature;", "-    try {", "-      typeSignature = localVar.type().signature();", "-    }", "-    catch (ClassNotLoadedException cnle) {", "-      return v;", "-    }", "-    Method m;", "-    ObjectReference ref = (ObjectReference)v;", "-    ReferenceType rt = ref.referenceType();", "-", "-    if ( typeSignature.equals(\"Z\") ) {", "-      m = _getMethod(rt, \"booleanValue\");", "-    }", "-    else if ( typeSignature.equals(\"B\") ) {", "-      m = _getMethod(rt, \"byteValue\");", "-    }", "-    else if ( typeSignature.equals(\"C\") ) {", "-      m = _getMethod(rt, \"charValue\");", "-    }", "-    else if ( typeSignature.equals(\"S\") ) {", "-      m = _getMethod(rt, \"shortValue\");", "-    }", "-    else if ( typeSignature.equals(\"I\") ) {", "-      m = _getMethod(rt, \"intValue\");", "-    }", "-    else if ( typeSignature.equals(\"J\") ) {", "-      m = _getMethod(rt, \"longValue\");", "-    }", "-    else if ( typeSignature.equals(\"F\") ) {", "-      m = _getMethod(rt, \"floatValue\");", "-    }", "-    else if ( typeSignature.equals(\"D\") ) {", "-      m = _getMethod(rt, \"doubleValue\");", "-    }", "-    else{", "-      return v;", "-    }", "-", "-    return ref.invokeMethod(threadRef, m, new LinkedList<Value>(), ObjectReference.INVOKE_SINGLE_THREADED);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abec746d9a4dde79fbaeba8d8f456e7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "commitAfterChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   private static Log makeLog(String type, String tag)", "diff": ["-        if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "-        else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "-        else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "-        else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "-        else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "-        else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "-        else if (type.startsWith(\"file:\")) { result = makeFileLog(type.substring(5)); }", "-        else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "-        else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "-        else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "-        else { result = VoidLog.INSTANCE; }", "+        try {", "+          if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "+          else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "+          else if (type.startsWith(\"System.out:\")) { result = new SystemOutLog(getParam(type)); }", "+          else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "+          else if (type.startsWith(\"stdout:\")) { result = new SystemOutLog(getParam(type)); }", "+          else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "+          else if (type.startsWith(\"System.err:\")) { result = new SystemErrLog(getParam(type)); }", "+          else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "+          else if (type.startsWith(\"stderr\")) { result = new SystemErrLog(getParam(type)); }", "+          else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "+          else if (type.startsWith(\"file:\")) { result = makeFileLog(getParam(type)); }", "+          else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "+          else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "+          else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "+          else { result = VoidLog.INSTANCE; }", "+        }", "+        catch (Exception e) { result = VoidLog.INSTANCE; }"]}], "num": 13761}
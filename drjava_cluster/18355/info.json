{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19231784a3c1e0dc54988e30f4d63293", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "351366cfdc2c1424beabc9debb86d49f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 39, "signatureBeforeChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data enclosing)", "signatureAfterChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, SymbolData enclosing)", "diff": ["-  protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data enclosing) {", "+  protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, SymbolData enclosing) {", "+    assert enclosing != null /* && (enclosing instanceof SymbolData || enclosing instanceof BlockData)*/; ", "+    // BodyData ::= MethodData | BlockData", "-    //Should conssolidate with same method in AdvancedVisitor; almost identical", "-    VariableData[] varData = new VariableData[fps.length];", "+    // Should conssolidate with same method in FullJavadVisitor; almost identical", "+    final VariableData[] varData = new VariableData[fps.length];", "+    final String enclosingClassName = enclosing.getName();", "+    ", "-    String[] mav = new String[] {\"final\"};", "+    String[] mav = getFormalParameterMav(enclosing);", "-      String typeName = vd.getType().getName();", "-      SourceInfo si = vd.getType().getSourceInfo();", "-      SymbolData type = getSymbolData(typeName, si);", "+     ", "+      Type type = vd.getType();", "+      final String typeName = type.getName();", "+       if (name.equals(\"myArray\")) ", "+         System.err.println(\"*** 2Var called for var \" + name + \" type = \" + typeName);", "+      final SourceInfo si = type.getSourceInfo();", "+      // Note: typeName CANNOT be a local type; no such type is in scope", "+      SymbolData sd = _identifyType(typeName, si, enclosingClassName);", "+", "+      varData[i] = ", "+        new VariableData(name, new ModifiersAndVisibility(SourceInfo.NO_INFO, mav), sd, true, enclosing);", "-      if (type == null) {", "-        // See if this is a partially qualified field reference in the symbol table", "-        type = enclosing.getInnerClassOrInterface(typeName);", "+      assert ! varData[i].isPrivate();", "+      if (sd == null) { // TODO !!!: can this happen? ", "+        // To establish a reference to a not-yet-defined type, create a fixup", "+        final int j = i;", "+        Command fixUp = new Command() {", "+          public void execute() { ", "+            SymbolData newSd = _identifyType(typeName, si, enclosingClassName);", "+            assert newSd != null && newSd != SymbolData.NOT_FOUND;  // TODO !!!: Expand to error message?", "+            varData[j].setType(newSd);", "+          }", "+        };", "+        fixUps.add(fixUp);", "+      }", "+    ", "-      }", "-      ", "-      if (type == null) { // create a continuation for it", "-        String qualifiedTypeName = enclosing.getSymbolData().getName() + \".\" + typeName;", "-        if (_innerClassesToBeParsed.contains(qualifiedTypeName)) {  // reference to an inner class.", "-          type = addInnerSymbolData(si, qualifiedTypeName, enclosing);", "-        }", "-        else { // reference to a top level class or an external class", "-          type = addSymbolData(si, typeName);", "-        }", "-      }", "-      ", "-      varData[i] = new VariableData(name, new ModifiersAndVisibility(SourceInfo.NO_INFO, mav), type, true, enclosing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f145565b9615ff6d1ed67f1896793d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 42, "signatureBeforeChange": "   protected MethodData createMethodData(MethodDef that, SymbolData sd)", "signatureAfterChange": "   protected MethodData createMethodData(final MethodDef that, final SymbolData sd)", "diff": ["-  /** Create a MethodData corresponding to the MethodDef within the context of the SymbolData sd. */", "-  protected MethodData createMethodData(MethodDef that, SymbolData sd) {", "-//    Utilities.show(\"createMethodData called on \" + that);", "+  /** Creates a MethodData corresponding to the MethodDef within the context of the SymbolData sd. */", "+  protected MethodData createMethodData(final MethodDef that, final SymbolData sd) {", "+    ", "+    assert _enclosingClassName != null && getQualifiedSymbolData(_enclosingClassName).equals(sd);", "+    ", "+    System.err.println(\"createMethodData(\" + that.getName().getText() + \", \" + sd + \") called.\");", "+    System.err.println(\"_enclosingClassName = \" + _enclosingClassName);", "+       ", "+    final String rtString = that.getResult().getName();", "+", "+    // Identify the return type", "+    final SourceInfo si = that.getResult().getSourceInfo();", "+//    if (! sd.equals(getQualifiedSymbolData(_enclosingClassName, SourceInfo.NO_INFO))) {", "+//      System.err.println(\"sd = \" + sd);", "+//      System.err.println(\"other = \" + getQualifiedSymbolData(_enclosingClassName, SourceInfo.NO_INFO));", "+//      assert false;", "+//    }", "+    // Note: rtString cannot be a local type; no such type is in scope", "+    SymbolData returnType = _identifyType(rtString, si, _enclosingClassName);", "-    // Turn the ReturnTypeI into a SymbolData    ", "-    String rtString = that.getResult().getName();", "-    SymbolData returnType;", "-    //TODO: Overwrite this at the Advanced level (or maybe not)", "-    if (rtString.equals(\"void\"))  returnType = SymbolData.VOID_TYPE;", "-    else returnType = getSymbolData(rtString, that.getResult().getSourceInfo());", "+    final String name = that.getName().getText();", "+    System.err.println(\"Creating MethodData for \" + name + \" in type \" + sd);", "+    final MethodData md = ", "+      MethodData.make(name, that.getMav(), that.getTypeParams(), returnType, null, throwStrings, sd, that);", "+    VariableData[] vds = formalParameters2VariableData(that.getParams(), sd);", "+        ", "+    if (returnType == null) {", "+      System.err.println(\"Creating return type fixup for \" + rtString + \" in method \" + name + \" in class \" + sd);", "+      final String enclosingClassName = _enclosingClassName;", "+      Command fixUp = new Command() {", "+        public void execute() {", "+          SymbolData newReturnType = _identifyType(rtString, si, enclosingClassName);", "+          if (newReturnType == null) ", "+            _addAndIgnoreError(\"The return type \" + rtString + \" for method \" + name + \" in type \" + sd + \" is undefined.\", ", "+                               that);", "+          else md.setReturnType(newReturnType);", "+        }", "+      };", "+      fixUps.add(fixUp);", "+    }", "-    MethodData md = MethodData.make(that.getName().getText(), that.getMav(), that.getTypeParams(), returnType, ", "-                                    new VariableData[0], throwStrings, sd, that);", "+    System.err.println(\"Called createMethodData(\" + name + \", \" + sd.getName() + \")\");", "-    VariableData[] vds = formalParameters2VariableData(that.getParams(), md);", "+"]}], "num": 18355}
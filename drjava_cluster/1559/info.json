{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe8838887237b7f0b6673beea7408f1c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f6baddc7ef2ebdcd4e77b85c23adee8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "f758aacbc5e404bb5b48be8d2800987cd77d8e79", "commitAfterChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public void selectItem(CompilerError error)", "signatureAfterChange": "     public void selectItem(CompilerError error)", "diff": ["-      // Find corresponding index", "-      int i = _getIndexForError(error);", "-", "-      _selectedIndex = i;", "-      _removeListHighlight();", "-", "-      int startPos = _errorListPositions[i].getOffset();", "-", "-      // end pos is either the end of the document (if this is the last error)", "-      // or the char where the next error starts", "-      int endPos;", "-      if (i + 1 >= (_numErrors)) {", "-        endPos = getDocument().getLength();", "-      }", "-      else {", "-        endPos = _errorListPositions[i + 1].getOffset();", "-      }", "-", "-        _listHighlightTag =", "-          _highlightManager.addHighlight(startPos,", "-                                         endPos,", "-                                         _listHighlightPainter);", "+        // Find corresponding index", "+        int i = _getIndexForError(error);", "-        // Scroll to make sure this item is visible", "-        Rectangle startRect = modelToView(startPos);", "-        Rectangle endRect = modelToView(endPos - 1);", "-", "-        // Add the end rect onto the start rect to make a rectangle", "-        // that encompasses the entire error", "-        startRect.add(endRect);", "-", "-        //System.err.println(\"scrll vis: \" + startRect);", "-", "-        scrollRectToVisible(startRect);", "-", "+        _selectedIndex = i;", "+        _removeListHighlight();", "+        ", "+        int startPos = _errorListPositions[i].getOffset();", "+        ", "+        // end pos is either the end of the document (if this is the last error)", "+        // or the char where the next error starts", "+        int endPos;", "+        if (i + 1 >= (_numErrors)) {", "+          endPos = getDocument().getLength();", "+        }", "+        else {", "+          endPos = _errorListPositions[i + 1].getOffset();", "+        }", "+        ", "+        try {", "+          _listHighlightTag =", "+            _highlightManager.addHighlight(startPos,", "+                                           endPos,", "+                                           _listHighlightPainter);", "+          ", "+          // Scroll to make sure this item is visible", "+          Rectangle startRect = modelToView(startPos);", "+          Rectangle endRect = modelToView(endPos - 1);", "+          ", "+          // Add the end rect onto the start rect to make a rectangle", "+          // that encompasses the entire error", "+          startRect.add(endRect);", "+          ", "+          //System.err.println(\"scrll vis: \" + startRect);", "+          ", "+          scrollRectToVisible(startRect);", "+          ", "+        }", "+        catch (BadLocationException badBadLocation) {}", "+        ", "+        _resetEnabledStatus();", "-      catch (BadLocationException badBadLocation) {}", "-", "-      _resetEnabledStatus();", "+      catch (IllegalArgumentException iae) {", "+        // This shouldn't be happening, but it was reported in bug 704006.", "+        // (_getIndexForError throws it.)", "+        // We'll at least fail a little more gracefully.", "+        _removeListHighlight();", "+        _resetEnabledStatus();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89caac31417885bdf7516493fcb8bbb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "1e64dff50a32582d182c950c323629608db6f054", "commitAfterChange": "d999f0af23b00e87ee091cf6b7f8d16576621e4d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(final DocumentEvent e)", "diff": ["-    public void insertUpdate(DocumentEvent e) {", "-      ConsoleDocument doc = getConsoleDoc();", "-      int caretPos = _pane.getCaretPosition();", "-      int promptPos = doc.getPromptPos();", "-      int length = doc.getDocLength();", "-", "-      // Figure out where the prompt was before the update", "-      int prevPromptPos = promptPos;", "-      if (e.getOffset() < promptPos) {", "-        // Insert happened before prompt,", "-        //  so previous position was further back", "-        prevPromptPos = promptPos - e.getLength();", "-      }", "-", "-      if (!doc.hasPrompt()) {", "-        // Scroll to the end of the document, since output has been", "-        // inserted after the prompt.", "-        moveToEnd();", "-      }", "-      // (Be careful not to move caret during a reset, when the", "-      //  prompt pos is temporarily far greater than the length.)", "-      else if (promptPos <= length) {", "-        if (caretPos < prevPromptPos) {", "-          // Caret has fallen behind prompt, so make it catch up so", "-          //  the new input is visible.", "-          moveToPrompt();", "-        }", "-        else {", "-          // Caret was on or after prompt, so move it right by the size", "-          //  of the insert.", "-          int size = promptPos - prevPromptPos;", "-          if (size > 0) {", "-            moveTo(caretPos + size);", "+    public void insertUpdate(final DocumentEvent e) {", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          ConsoleDocument doc = getConsoleDoc();", "+          int caretPos = _pane.getCaretPosition();", "+          int promptPos = doc.getPromptPos();", "+          int length = doc.getDocLength();", "+          ", "+          // Figure out where the prompt was before the update", "+          int prevPromptPos = promptPos;", "+          if (e.getOffset() < promptPos) {", "+            // Insert happened before prompt,", "+            //  so previous position was further back", "+            prevPromptPos = promptPos - e.getLength();", "+          }", "+          ", "+          if (!doc.hasPrompt()) {", "+            // Scroll to the end of the document, since output has been", "+            // inserted after the prompt.", "+            moveToEnd();", "+          }", "+          // (Be careful not to move caret during a reset, when the", "+          //  prompt pos is temporarily far greater than the length.)", "+          else if (promptPos <= length) {", "+            if (caretPos < prevPromptPos) {", "+              // Caret has fallen behind prompt, so make it catch up so", "+              //  the new input is visible.", "+              moveToPrompt();", "+            }", "+            else {", "+              // Caret was on or after prompt, so move it right by the size", "+              //  of the insert.", "+              int size = promptPos - prevPromptPos;", "+              if (size > 0)  moveTo(caretPos + size);", "+            }", "-      }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa59dc31e7d9c2f4ed80d4ca17331e65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 257, "signatureBeforeChange": "   private void _gotoLine()", "signatureAfterChange": "   private int _gotoLine()", "diff": ["-  private void _gotoLine() {", "+  private int _gotoLine() {", "-    String lineStr = JOptionPane.showInputDialog(this,", "-                                                 msg,", "-                                                 title,", "-                                                 JOptionPane.QUESTION_MESSAGE);", "+    String lineStr = JOptionPane.showInputDialog(this, msg, title, JOptionPane.QUESTION_MESSAGE);", "+        return pos;", "-        // Center the destination line on the screen", "-        // (this code taken from FindReplaceDialog's _selectFoundItem method)", "-        JScrollPane defScroll = (JScrollPane)", "-          _defScrollPanes.get(_model.getActiveDocument());", "-        int viewHeight = (int)defScroll.getViewport().getSize().getHeight();", "-        // Scroll to make sure this item is visible", "-        // Centers the selection in the viewport", "-        Rectangle startRect = _currentDefPane.modelToView(pos);", "-        int startRectY = (int)startRect.getY();", "-        startRect.setLocation(0, startRectY-viewHeight/2);", "-        //Rectangle endRect = _defPane.modelToView(to - 1);", "-        Point endPoint = new Point(0, startRectY+viewHeight/2-1);", "-        startRect.add(endPoint);", "-", "-        _currentDefPane.scrollRectToVisible(startRect);", "-", "-        //Commented out this call because it would be impossible to", "-        //center the viewport on pos without passing in the viewport.", "-        //Perhaps setPositionAndScroll can be changed in the future to", "-        //allow this.", "-        //_currentDefPane.setPositionAndScroll(pos);", "-        _currentDefPane.requestFocusInWindow();", "-        */", "+         // Center the destination line on the screen", "+         // (this code taken from FindReplaceDialog's _selectFoundItem method)", "+         JScrollPane defScroll = (JScrollPane)", "+         _defScrollPanes.get(_model.getActiveDocument());", "+         int viewHeight = (int)defScroll.getViewport().getSize().getHeight();", "+         // Scroll to make sure this item is visible", "+         // Centers the selection in the viewport", "+         Rectangle startRect = _currentDefPane.modelToView(pos);", "+         int startRectY = (int)startRect.getY();", "+         startRect.setLocation(0, startRectY-viewHeight/2);", "+         //Rectangle endRect = _defPane.modelToView(to - 1);", "+         Point endPoint = new Point(0, startRectY+viewHeight/2-1);", "+         startRect.add(endPoint);", "+         ", "+         _currentDefPane.scrollRectToVisible(startRect);", "+         ", "+         //Commented out this call because it would be impossible to", "+         //center the viewport on pos without passing in the viewport.", "+         //Perhaps setPositionAndScroll can be changed in the future to", "+         //allow this.", "+         //_currentDefPane.setPositionAndScroll(pos);", "+         _currentDefPane.requestFocusInWindow();", "+         */", "+    return -1;"]}], "num": 1559}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44c368872d74f74dbaaca055affe3c04", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5707b1eae20996207ded4ce56d7689c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 104, "signatureBeforeChange": "          public void testGetSymbolData_FromCurrFile()", "signatureAfterChange": "     public void testGetSymbolDataFromFileSystem()", "diff": ["-    ", "-    public void testGetSymbolData_FromCurrFile() {", "+    /** Tests _getSymbolDataFromFileSystem and one case of getQualifiedSymbolData. */", "+    public void testGetSymbolDataFromFileSystem() {", "-      // Test if it's already in the symbol table and doesn't need to be resolved", "-      // not stopping when it should.  get error b/c not in classes to be parsed ", "-      // assertEquals(\"symbol data is not a continuation, so should just be returned.\", _sd6, ", "-      //   _llv._getSymbolData_FromCurrFile(\"cebu\", SourceInfo.NO_INFO, true));", "+      // Test if it's already in the symbol table and doesn't need to be resolved not stopping when it should.  ", "+      // get error b/c not in classes to be parsed ", "+      assertEquals(\"symbol data is a not a continuation, but resolve is false so should just be returned\", _sd6, ", "+         testLLVisitor._getSymbolDataFromFileSystem(\"cebu\", SourceInfo.NO_INFO, false, true));", "-                   testLLVisitor._getSymbolData_FromCurrFile(\"u.like.emu\", SourceInfo.NO_INFO, false));", "+                   testLLVisitor._getSymbolDataFromFileSystem(\"u.like.emu\", SourceInfo.NO_INFO, false, true));", "-      //test if it needs to be resolved:", "+      // Lookup a name not in the file system with resolve equal to false, to confirm that null is returned.", "+      ", "+      assertEquals(\"Should return SymbolData.NOT_FOUND\", SymbolData.NOT_FOUND, ", "+                   testLLVisitor._getSymbolDataFromFileSystem(\"Corky\", SourceInfo.NO_INFO, false, true));", "+        // TODO: fix this test             ", "+//      SymbolData matchCorky = testLLVisitor._getSymbolDataFromFileSystem(\"Corky\", SourceInfo.NO_INFO, true);", "+//      assertFalse(\"Should return a non-continuation\", matchCorky.isContinuation());", "+      ", "+      // Test if it needs to be resolved:", "-        new ClassDef(SourceInfo.NO_INFO, _publicMav, ", "+        new ClassDef(SourceInfo.NO_INFO, PUBLIC_MAV, ", "-                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "-      testLLVisitor. _classesToBeParsed.put(\"Lisa\", new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv));", "-      assertFalse(\"Should return a non-continuation\", ", "-                  testLLVisitor._getSymbolData_FromCurrFile(\"Lisa\", SourceInfo.NO_INFO, true).isContinuation());", "+      testLLVisitor._classesInThisFile.add(\"Lisa\" /*, new Pair<TypeDefBase, LanguageLevelVisitor>(cd, bv)*/);", "+      assert testLLVisitor._classesInThisFile.contains(\"Lisa\");", "+      SymbolData matchLisa = ", "+        testLLVisitor.getQualifiedSymbolData(\"Lisa\", SourceInfo.NO_INFO, true);", "+      assertTrue(\"Should return a continuation\", matchLisa.isContinuation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd8b15f6e4ef641e464d34070c74783", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentTest.java", "commitBeforeChange": "aa7f147d71330aa12463dfbc7a233e3ed25560e6", "commitAfterChange": "cfaac02e8e33f506b730c3f8ce96676d16b8f705", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testReset() throws DocumentAdapterException", "signatureAfterChange": "   public void testContentsAndReset() throws DocumentAdapterException", "diff": ["-  public void testReset() throws DocumentAdapterException {", "-    int origLength = _doc.getDocLength();", "-    _doc.insertText(origLength, \"text\", InteractionsDocument.DEFAULT_STYLE);", "+  public void testContentsAndReset() throws DocumentAdapterException {", "+    String origText = _doc.getBanner() + _doc.getPrompt();", "+    assertEquals(\"Contents before insert\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    // Insert some text", "+    _doc.insertText(_doc.getDocLength(), \"text\", InteractionsDocument.DEFAULT_STYLE);", "+    assertEquals(\"Contents before reset\", ", "+                 _doc.getBanner() + \"before\" + _doc.getPrompt() + \"text\",", "+                 _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    // Reset should clear", "-    assertEquals(\"Length after reset\", origLength, _doc.getDocLength());", "+    assertEquals(\"Contents after reset\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));"]}], "num": 8597}
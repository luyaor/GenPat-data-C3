{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4b69c2b44ed3fd555adcab7c85300bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83e475ffa9026329a28c7286b7bde05a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "6dc623f6cf84dd216f6949b3ebdd52b19c8912b4", "commitAfterChange": "3bfda0ffd8a22eda2f2daab913b510305e1ef801", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r   \r   public static void sanitizeSlaveJVMXMX(JFrame parent, String value)", "signatureAfterChange": "      public static void sanitizeSlaveJVMXMX(JFrame parent, String value)", "diff": ["-  \r", "-  public static void sanitizeSlaveJVMXMX(JFrame parent, String value) {\r", "-    if ((!value.equals(\"\")) &&\r", "-        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {\r", "-      long heapSize;\r", "-      String size = value.trim();\r", "-      try {\r", "-        heapSize = new Long(size);\r", "-      }\r", "-      catch(NumberFormatException nfe) {\r", "-        heapSize = -1; // invalid\r", "-      }\r", "-      if (heapSize < 0) {\r", "-        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",\r", "-          \"Ignore\" };\r", "-        int result = JOptionPane.\r", "-          showOptionDialog(parent,\r", "-                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + \r", "-                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",\r", "-                           \"Invalid Maximum Heap Size\",\r", "-                           0,\r", "-                           JOptionPane.QUESTION_MESSAGE,\r", "-                           null,\r", "-                           options,\r", "-                           options[0]);\r", "-        if (result == 0) {\r", "-          // clean up\r", "-          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+  ", "+  public static void sanitizeSlaveJVMXMX(JFrame parent, String value) {", "+    if ((!value.equals(\"\")) &&", "+        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {", "+      long heapSize;", "+      String size = value.trim();", "+      try {", "+        heapSize = new Long(size);", "+      }", "+      catch(NumberFormatException nfe) {", "+        heapSize = -1; // invalid", "+      }", "+      if (heapSize < 0) {", "+        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",", "+          \"Ignore\" };", "+        int result = JOptionPane.", "+          showOptionDialog(parent,", "+                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + ", "+                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",", "+                           \"Invalid Maximum Heap Size\",", "+                           0,", "+                           JOptionPane.QUESTION_MESSAGE,", "+                           null,", "+                           options,", "+                           options[0]);", "+        if (result == 0) {", "+          // clean up", "+          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));", "+        }", "+      }", "+      else if (heapSize > 0) {", "+        if (!checkHeapSize(heapSize)) {", "+          JOptionPane.", "+            showMessageDialog(parent,", "+                              \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is too big: \\\"\" + size + \"\\\"\\n\" + ", "+                              \"DrJava has reset the heap size to the default. You should choose something smaller.\",", "+                              \"Maximum Heap Size Too Big\",", "+                              JOptionPane.ERROR_MESSAGE);", "+          // clean up", "+          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));", "+        }", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f31b54d36342792f9ba66793a532dd2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "6dc623f6cf84dd216f6949b3ebdd52b19c8912b4", "commitAfterChange": "3bfda0ffd8a22eda2f2daab913b510305e1ef801", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r   \r   public static void sanitizeMasterJVMXMX(JFrame parent, String value)", "signatureAfterChange": "      public static void sanitizeMasterJVMXMX(JFrame parent, String value)", "diff": ["-  \r", "-  public static void sanitizeMasterJVMXMX(JFrame parent, String value) {\r", "-    if ((!value.equals(\"\")) &&\r", "-        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {\r", "-      String size = value.trim();\r", "-      long heapSize;\r", "-      try {\r", "-        heapSize = new Long(size);\r", "-      }\r", "-      catch(NumberFormatException nfe) {\r", "-        heapSize = -1; // invalid\r", "-      }\r", "-      if (heapSize < 0) {\r", "-        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",\r", "-          \"Ignore\" };\r", "-        int result = JOptionPane.\r", "-          showOptionDialog(parent,\r", "-                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + \r", "-                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",\r", "-                           \"Invalid Maximum Heap Size\",\r", "-                           0,\r", "-                           JOptionPane.QUESTION_MESSAGE,\r", "-                           null,\r", "-                           options,\r", "-                           options[0]);\r", "-        if (result == 0) {\r", "-          // clean up\r", "-          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+  ", "+  public static void sanitizeMasterJVMXMX(JFrame parent, String value) {", "+    if ((!value.equals(\"\")) &&", "+        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {", "+      String size = value.trim();", "+      long heapSize;", "+      try {", "+        heapSize = new Long(size);", "+      }", "+      catch(NumberFormatException nfe) {", "+        heapSize = -1; // invalid", "+      }", "+      if (heapSize < 0) {", "+        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",", "+          \"Ignore\" };", "+        int result = JOptionPane.", "+          showOptionDialog(parent,", "+                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + ", "+                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",", "+                           \"Invalid Maximum Heap Size\",", "+                           0,", "+                           JOptionPane.QUESTION_MESSAGE,", "+                           null,", "+                           options,", "+                           options[0]);", "+        if (result == 0) {", "+          // clean up", "+          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));", "+        }", "+      }", "+      else if (heapSize > 0) {", "+        if (!checkHeapSize(heapSize)) {", "+          JOptionPane.", "+            showMessageDialog(parent,", "+                              \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is too big: \\\"\" + size + \"\\\"\\n\" + ", "+                              \"DrJava has reset the heap size to the default. You should choose something smaller.\",", "+                              \"Maximum Heap Size Too Big\",", "+                              JOptionPane.ERROR_MESSAGE);", "+          // clean up", "+          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));", "+        }", "+      }", "+    }", "+  }"]}], "num": 29634}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51d67b41fb4c6104d2fca138a8c0cdf4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e914917d2540cbad8a2c03801dec812", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "e21c87a73c9cc18626d8ac0032c171af7d12b5c4", "commitAfterChange": "5c74c26bc0d0172fae7fedb4ceddf9beb8fb625d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   private void _setupKeyBindingsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupKeyBindingsPanel(ConfigPanel panel)", "diff": ["+        // Get the tooltip, or default to its name, if none", "+        KeyStroke ks = tmpKsd.getKeyStroke();", "+        Action a = KeyBindingManager.Singleton.get(ks);", "+        String desc = (String) a.getValue(Action.SHORT_DESCRIPTION);", "+        if ((desc == null) || (desc.equals(\"\"))) {", "+          desc = tmpKsd.getName();", "+        }", "+        ", "-                                               tmpKsd.getName(), this);", "+                                               tmpKsd.getName(), this, desc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0056c0cbfebe6a0139ab67ac565d8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessCreator.java", "commitBeforeChange": "1e619a02befaa7a99dc31172b2a007a2446ed2bd", "commitAfterChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Process start() throws IOException", "signatureAfterChange": "\r   public Process start() throws IOException", "diff": ["-    */", "-  public Process start() throws IOException {", "-    // set up work directory", "-    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);", "-    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);", "-    File dir = null;", "-    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }", "-    ", "-    // set up environment", "-    String[] env = null;", "-    if ((_env!=null) && (_env.size()>0)) {", "-      env = new String[_env.size()];", "-      int i = 0;", "-      for(String key: _env.keySet()) {", "-        String value = _env.get(key);", "-        env[i] = key+\"=\"+value;", "-      }", "-    }", "-    ", "-    // set up command line, if necessary", "-    if (_cmdline!=null) {", "-      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);", "-      List<String> cmds = StringOps.commandLineToList(_evaluatedCmdLine);", "-      _cmdarray = new String[cmds.size()];", "-      for (int i=0; i<cmds.size(); ++i) {", "-        _cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));", "-      }", "-    }", "-    ", "-    return Runtime.getRuntime().exec(_cmdarray,env,dir);", "-  }", "+    */\r", "+  public Process start() throws IOException {\r", "+    // set up work directory\r", "+    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);\r", "+    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);\r", "+    File dir = null;\r", "+    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }\r", "+    \r", "+    // set up environment\r", "+    String[] env = null;\r", "+    if ((_env!=null) && (_env.size()>0)) {\r", "+      env = new String[_env.size()];\r", "+      int i = 0;\r", "+      for(String key: _env.keySet()) {\r", "+        String value = _env.get(key);\r", "+        env[i] = key+\"=\"+value;\r", "+      }\r", "+    }\r", "+    \r", "+    // set up command line, if necessary\r", "+    if (_cmdline!=null) {\r", "+      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);\r", "+      List<List<List<String>>> seqs = StringOps.commandLineToLists(_evaluatedCmdLine);\r", "+      if (seqs.size()!=1) { throw new IllegalArgumentException(\"ProcessCreator needs a command line with just one process.\"); }\r", "+      List<List<String>> pipe = seqs.get(0);\r", "+      if (pipe.size()<1) { throw new IllegalArgumentException(\"ProcessCreator needs a command line with just one process.\"); }\r", "+      List<String> cmds = pipe.get(0);\r", "+      _cmdarray = new String[cmds.size()];\r", "+      for (int i=0; i<cmds.size(); ++i) {\r", "+        _cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));\r", "+      }\r", "+    }\r", "+    \r", "+    return Runtime.getRuntime().exec(_cmdarray,env,dir);\r", "+  }\r"]}], "num": 27717}
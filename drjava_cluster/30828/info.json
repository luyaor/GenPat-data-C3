{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e10c5542a0bcebd52442405de857bf8b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6fdbe57bf71b0e0db19aa415a38496", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JLSTypeSystem.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 137, "signatureBeforeChange": "              public Type merge(PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack)", "signatureAfterChange": "              public Type merge(final PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack)", "diff": ["-      public Type merge(PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack) {", "+      public Type merge(final PrecomputedRecursionStack<Set<Type>, Wildcard> joinStack) {", "-          Wildcard result = new Wildcard(new BoundedSymbol(new Object()));", "-          result.symbol().initializeLowerBound(NULL);", "-          if (!joinStack.contains(_types)) {", "-            joinStack.push(_types, result);", "-            try { result.symbol().initializeUpperBound(join(_types, joinStack)); }", "-            finally { joinStack.pop(_types); }", "-          }", "-          return result;", "+          final Wildcard result = new Wildcard(new BoundedSymbol(new Object()));", "+          Thunk<Wildcard> recur = new Thunk<Wildcard>() {", "+            public Wildcard value() {", "+              result.symbol().initializeLowerBound(NULL);", "+              result.symbol().initializeUpperBound(join(_types, joinStack));", "+              return result;", "+            }", "+          };", "+          return joinStack.apply(recur, result, _types);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1348d9df6dc4543565f9ab697cedf55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "9a420cdf119356be865ba1cf1fc123a155b1b47c", "commitAfterChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected, boolean isExpanded,                                                    boolean leaf, int row, boolean hasFocus)", "diff": ["-      // set tooltip", "-      String tooltip = null;", "+      // set tooltip as thunk", "+      Thunk<String> tooltip = null;", "-          Object o = node.getUserObject();", "+          final Object o = node.getUserObject();", "-            @SuppressWarnings(\"unchecked\")", "-            RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) o;", "-            R r = userObject.region();", "+            tooltip = new Thunk<String>() {", "+              public String value() {", "+                @SuppressWarnings(\"unchecked\")", "+                RegionTreeUserObj<R> userObject = (RegionTreeUserObj<R>) o;", "+                R r = userObject.region();", "-            OpenDefinitionsDocument doc = r.getDocument();", "-            try {", "-              int lnr = doc.getLineOfOffset(r.getStartOffset()) + 1;", "-              int startOffset = doc._getOffset(lnr - 3);", "-              if (startOffset < 0) { startOffset = 0; }", "-              int endOffset = doc._getOffset(lnr + 3);", "-              if (endOffset < 0) { endOffset = doc.getLength() - 1; }", "-              ", "-              // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "-              String s = doc.getText(startOffset, endOffset - startOffset);", "-              ", "-              // this highlights the actual region in red", "-              int rStart = r.getStartOffset() - startOffset;", "-              if (rStart < 0) { rStart = 0; }", "-              int rEnd = r.getEndOffset() - startOffset;", "-              if (rEnd > s.length()) { rEnd = s.length(); }", "-              if ((rStart <= s.length()) && (rEnd >= rStart)) {", "-                String t1 = StringOps.encodeHTML(s.substring(0, rStart));", "-                String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "-                String t3 = StringOps.encodeHTML(s.substring(rEnd));", "-                s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+                OpenDefinitionsDocument doc = r.getDocument();", "+                try {", "+                  int lnr = doc.getLineOfOffset(r.getStartOffset()) + 1;", "+                  int startOffset = doc._getOffset(lnr - 3);", "+                  if (startOffset < 0) { startOffset = 0; }", "+                  int endOffset = doc._getOffset(lnr + 3);", "+                  if (endOffset < 0) { endOffset = doc.getLength() - 1; }", "+                  ", "+                  // convert to HTML (i.e. < to &lt; and > to &gt; and newlines to <br>)", "+                  String s = doc.getText(startOffset, endOffset - startOffset);", "+                  ", "+                  // this highlights the actual region in red", "+                  int rStart = r.getStartOffset() - startOffset;", "+                  if (rStart < 0) { rStart = 0; }", "+                  int rEnd = r.getEndOffset() - startOffset;", "+                  if (rEnd > s.length()) { rEnd = s.length(); }", "+                  if ((rStart <= s.length()) && (rEnd >= rStart)) {", "+                    String t1 = StringOps.encodeHTML(s.substring(0, rStart));", "+                    String t2 = StringOps.encodeHTML(s.substring(rStart,rEnd));", "+                    String t3 = StringOps.encodeHTML(s.substring(rEnd));", "+                    s = t1 + \"<font color=#ff0000>\" + t2 + \"</font>\" + t3;", "+                  }", "+                  else {", "+                    s = StringOps.encodeHTML(s);", "+                  }", "+                  return \"<html><pre>\"+s+\"</pre></html>\";", "+                }", "+                catch(javax.swing.text.BadLocationException ble) { return \"\"; /* just display an empty tool tip*/ }", "-              else {", "-                s = StringOps.encodeHTML(s);", "-              }", "-              tooltip = \"<html><pre>\"+s+\"</pre></html>\";", "-            }", "-            catch(javax.swing.text.BadLocationException ble) { tooltip = null; /* just don't give a tool tip */ }", "+            };"]}], "num": 30828}
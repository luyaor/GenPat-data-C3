{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd77447f3148024780d1a7a42a8bc898", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a8eb308c83e90886e75b5d002479ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "          public void testForTryCatchStatement()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(NO_INFO, emptyBody);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0]);", "-      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0], b);", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(NO_INFO, b, new CatchBlock[0]);", "+      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(NO_INFO, b, new CatchBlock[0], b);", "-      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, there should be no errors\", 0, errors.size());", "+      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, \" + ", "+                   \"there should be no errors\", 0, errors.size());", "-      BracedBody errorBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 1), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 2)))});", "-      Block errorBlock = new Block(JExprParser.NO_SOURCE_INFO, errorBody);", "+      BracedBody errorBody = new BracedBody(NO_INFO, new BodyItemI[] {", "+        new ExpressionStatement(NO_INFO, ", "+                                new BitwiseOrExpression(NO_INFO, new IntegerLiteral(NO_INFO, 1), ", "+                                                        new IntegerLiteral(NO_INFO, 2)))});", "+      Block errorBlock = new Block(NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, errorBlock, new CatchBlock[0]);", "+      ntcs = new NormalTryCatchStatement(NO_INFO, errorBlock, new CatchBlock[0]);", "-      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular or (||)\", ", "+                   errors.get(0).getFirst());", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(JExprParser.NO_SOURCE_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"int\"), new Word(NO_INFO, \"i\"));", "+      FormalParameter fp = new FormalParameter(NO_INFO, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[] {", "-        new CatchBlock(JExprParser.NO_SOURCE_INFO, fp, errorBlock)}, b);", "+      tcfs = new TryCatchFinallyStatement(NO_INFO, b, new CatchBlock[] {", "+        new CatchBlock(NO_INFO, fp, errorBlock)}, b);", "-     assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.get(1).getFirst());", "+     assertEquals(\"Error message should be correct\", ", "+                  \"Bitwise or expressions cannot be used at any language level.  \" + ", "+                  \"Perhaps you meant to compare two values using regular or (||)\", ", "+                  errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e39a3b138f57b6f8bb7fa2d1dab1fb06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "                   public void testForTryCatchStatement()", "diff": ["+      ", "-      //make sure that if there is an error in one of the bodies, it is caught:", "-      BracedBody errorBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new BitwiseOrExpression(SourceInfo.NO_INFO, ", "-                                                        new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                        new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "-      Block errorBlock = new Block(SourceInfo.NO_INFO, errorBody);", "+//      //make sure that if there is an error in one of the bodies, it is caught:", "+//      BracedBody errorBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "+//        new ExpressionStatement(SourceInfo.NO_INFO, ", "+//                                new BitwiseOrExpression(SourceInfo.NO_INFO, ", "+//                                                        new SimpleNameReference(SourceInfo.NO_INFO, ", "+//                                                                                new Word(SourceInfo.NO_INFO, \"i\")), ", "+//                                                        new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "+//      Block errorBlock = new Block(SourceInfo.NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, errorBlock, new CatchBlock[0]);", "+//      assert ! SourceInfo.TEST_0.equals(SourceInfo.TEST_1);", "+      ntcs = new NormalTryCatchStatement(SourceInfo.TEST_0, _generateErrorBlock(0), new CatchBlock[0]);", "-                   \"Bitwise or expressions cannot be used at any language level.  \" ", "+                   \"Bitwise or expressions cannot be used in the functional language level.  \" ", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(SourceInfo.NO_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(SourceInfo.TEST_1, ", "+                                            new PrimitiveType(SourceInfo.TEST_1, \"int\"), ", "+                                            new Word(SourceInfo.TEST_1, \"i\"));", "+      FormalParameter fp = new FormalParameter(SourceInfo.TEST_1, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {", "-        new CatchBlock(SourceInfo.NO_INFO, fp, errorBlock)}, b);", "-        ", "+      tcfs = new TryCatchFinallyStatement(SourceInfo.TEST_1, b, new CatchBlock[] {", "+        new CatchBlock(SourceInfo.TEST_1, fp, _generateErrorBlock(1))", "+      }, b);", "+      ", "+     assertEquals(\"Should be one error\", 1, errors.size());", "-     assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+     assertEquals(\"Error message should be correct\", ", "+                  \"Bitwise or expressions cannot be used in the functional language level.\"", "+                  + \"  Perhaps you meant to compare two values using regular or (||)\", ", "+                  errors.getLast().getFirst());"]}], "num": 612}
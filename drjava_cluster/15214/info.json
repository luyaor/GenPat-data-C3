{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "783f4bae11a028c53e35a9a43ea7d9d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c4cee065666501746efb29f5575198", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "           public void testForInnerInterfaceDef()", "signatureAfterChange": "           public void testForInnerInterfaceDef()", "diff": ["-       assertEquals(\"There should be no errors\", 0, errors.size());", "+       assertEquals(\"There should be one error\", 1, errors.size());", "+       assertEquals(\"The error message should be correct\", ", "+                   \"Local interfaces are illegal in Java.\", errors.get(0).getFirst());", "+       SymbolData innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"Broken\");", "+       assertNull(\"Should NOT have a inner interface named Broken\", innerInterface);", "-       SymbolData obj = new SymbolData(\"java.lang.Object\");", "-       LanguageLevelConverter.symbolTable.put(\"java.lang.Object\", obj);", "-       assertEquals(\"There should be no errors\", 0, errors.size());", "-       SymbolData innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"RodInterface\");", "-       assertNotNull(\"Should have a inner interface named RodInterface\", innerInterface);", "+       assertEquals(\"There should be 2 errors\", 2, errors.size());", "+       assertEquals(\"The error message should be correct\", ", "+                    \"Local interfaces are illegal in Java.\", errors.get(1).getFirst());", "+       innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"RodInterface\");", "+       assertNull(\"Should NOT have a inner interface named RodInterface\", innerInterface);", "-      assertEquals(\"There should be no errors\", 0, errors.size());  // class modifiers are allowed", "+      assertEquals(\"There should be three errors\", 3, errors.size());  // class modifiers are allowed", "+      assertEquals(\"The error message should be correct\", ", "+                   \"Local interfaces are illegal in Java.\", errors.get(2).getFirst());", "+      innerInterface = _bfv._bodyData.getInnerClassOrInterface(\"Todd\");", "+      assertNull(\"Should NOT have a inner interface named Todd\", innerInterface);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8490477360c1139cb0f00805b4d5ec78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    ", "+", "+    interpret(\"innerFoo = 0\");", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch value incorrect\", \"0\", watches.elementAt(1).getValue());", "+", "+    interpret(\"innerFoo = 8\");", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "+"]}], "num": 15214}
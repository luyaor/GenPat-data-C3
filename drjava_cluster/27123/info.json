{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5815d08463feb9e84a34a8aef68fc103", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0184e371092bcd1f1aa02bdb4bf99cc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "commitAfterChange": "70629f9e5e558e81031db46a0eeff962734da160", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": "   private JMenu _setUpToolsMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpToolsMenu(int mask)", "diff": ["+    final JMenuItem execItem = extMenu.getItem(0);", "-//            for(int i=2; i<extMenu.getItemCount(); ++i) {", "-//              extMenu.remove(2);", "-//            }", "-//            for (int count=1; count<=oce.value; ++count) {", "-//              final int i = count;", "-//              final String name = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).get(i-1);", "-//              final int savedCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT);", "-//              final int namesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).size();", "-//              final int typesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).size();", "-//              final int cmdlinesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES).size();", "-//              final int jvmargsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).size();", "-//              final int workdirsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS).size();", "-//              ", "-//              extMenu.insert(new AbstractAction(name) {", "-//                public void actionPerformed(ActionEvent ae) {", "-//                  if (type.equals(\"cmdline\")) {", "-//                    System.out.println(name+\": cmdline \"+cmdline+\" \"+workdir);", "-//                    // TODO", "-//                  }", "-//                  else if (type.equals(\"java\")) {", "-//                    System.out.println(name+\": java \"+jvmargs+\" \"+cmdline+\" \"+workdir);", "-//                    // TODO", "-//                  }", "-//                }", "-//              },1+i);", "-//            }", "-//            if (oce.value>0) { ", "-//              extMenu.addSeparator();", "-//              extMenu.add(_editExternalProcessesAction);", "-//            }", "+            extMenu.removeAll();", "+            extMenu.add(execItem);", "+            extMenu.addSeparator();", "+            for (int count=0; count<oce.value; ++count) {", "+              final int i = count;", "+              final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "+              final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "+              final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "+              final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+              final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "+              ", "+              extMenu.insert(new AbstractAction(names.get(i)) {", "+                public void actionPerformed(ActionEvent ae) {", "+                  if (types.get(i).equals(\"cmdline\")) {", "+                    // System.out.println(names.get(i)+\": cmdline \"+cmdlines.get(i)+\" \"+workdirs.get(i));", "+                    _executeExternalDialog.runCommand(names.get(i),cmdlines.get(i),workdirs.get(i));", "+                  }", "+                  else if (types.get(i).equals(\"java\")) {", "+                    // System.out.println(names.get(i)+\": java \"+jvmargs.get(i)+\" \"+cmdlines.get(i)+\" \"+workdirs.get(i));", "+                    _executeExternalDialog.runJava(names.get(i),jvmargs.get(i),cmdlines.get(i),workdirs.get(i));", "+                  }", "+                  else {", "+                    JOptionPane.showMessageDialog(MainFrame.this,", "+                                                  \"Unknown process type '\"+types.get(i)+\"'.\",", "+                                                  \"Invalid Command Line\",", "+                                                  JOptionPane.ERROR_MESSAGE);", "+                  }", "+                }", "+              },i+2);", "+            }", "+            if (oce.value>0) { ", "+              extMenu.addSeparator();", "+            }", "+            extMenu.add(_editExternalProcessesAction);", "+            _editExternalProcessesAction.setEnabled(oce.value>0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "428497152ffcc5c973f03b1b68303a14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException", "signatureAfterChange": "   protected final void invokeSlave(String[] jvmArgs, String cp, File workDir) throws IOException, RemoteException", "diff": ["+    _log.log(this + \".invokeSlave(\" + Arrays.toString(jvmArgs) + \", \" + cp + \", \" + workDir + \") called\");", "+    ", "-      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "-      if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "+      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");      ", "+      if (_slave != null) throw new IllegalStateException(\"slave non-null in invoke: \" + _slave);", "+      ", "+      _stub = null;", "-          synchronized(_exportLock) {", "-            try {", "-              _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "-              ", "-              // Debug: check that the IP address is 127.0.0.1", "-              // javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            }", "-            catch (RemoteException re) {", "-              // javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-              throw new edu.rice.cs.util.UnexpectedException(re);", "-            }", "-            _exportLock.notify();", "+          _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for AbstractMasterJVM\");", "+          try { _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this); }", "+          ", "+          // Debug: check that the IP address is 127.0.0.1", "+          // javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+          ", "+          catch (RemoteException re) {", "+            // javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+            throw new UnexpectedException(re);  // should never happen", "+          synchronized(_exportLock) { _exportLock.notify(); }", "+      ", "+      t.start();", "-        t.start();", "-        try { while (_stub == null) { _exportLock.wait(); } }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        try {", "+          while (_stub == null) { ", "+            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of AbstractMasterJVM RMI stub to complete\");", "+            _exportLock.wait(); ", "+          } ", "+        }", "+        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "+      ", "+      _log.log(this + \" completed creation of RMI stub for AbstractMasterJVM\");", "+    ", "+      ostream.close();", "+      ", "+      _log.log(this + \" completed writing RMI stub for AbstractMasterJVM to a file\");", "-      final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      final RemoteClassLoader _classLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      _classLoaderStub = null;", "-          synchronized(_exportLock) {", "-            try {", "-              _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "-              ", "-              // Debug: check that the IP address is 127.0.0.1", "-              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            }", "-            catch (RemoteException re) {", "-              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-              throw new edu.rice.cs.util.UnexpectedException(re);", "-            }", "-            _exportLock.notify();", "+          _log.log(AbstractMasterJVM.this + \" starting creation of RMI stub for RemoteClassLoader\");", "+          try {  _classLoaderStub = UnicastRemoteObject.exportObject(_classLoader); }", "+          ", "+          // Debug: check that the IP address is 127.0.0.1", "+          //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+          ", "+          catch (RemoteException re) {", "+            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+            throw new UnexpectedException(re);  // should never happen", "+          synchronized(_exportLock) { _exportLock.notify(); }", "+      ", "+      t.start();", "-        t.start();", "-        try { while (_classLoaderStub == null) { _exportLock.wait(); } }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        try { ", "+          while (_classLoaderStub == null) { ", "+            _log.log(\"invokeSlave thread in \" + this + \" waiting for creation of RemoteClassLoader RMI stub to complete\");", "+            _exportLock.wait(); ", "+          } ", "+        }", "+        catch (InterruptedException ie) { throw new UnexpectedException(ie); }  // should never happen", "+      ", "+      _log.log(this + \" completed creation of RMI stub for RemoteClassLoader\");", "+      ostream.close();", "+      _log.log(this + \" completed writing RMI stub for RemoteClassLoader to a file\");", "+        ", "-      /* Create the slave JVM. */      ", "+      /* Create the slave JVM. */  ", "+      _log.log(this + \" is starting a slave JVM\");", "-      // Start a thread to wait for the slave to die.  When it dies, restart it.", "-      Thread thread = new Thread(_waitForQuitThreadName) {", "+      // Start a thread to wait for the slave to die.  When it dies, delegate what to do (restart?) to subclass", "+      Thread restartThread = new Thread(_waitForQuitThreadName) {", "+          _log.log(this + \"has started a Slave monitor thread waiting on process \" + process);", "-            ", "-            synchronized(AbstractMasterJVM.this) {", "+            _log.log(\"Process \" + process + \" died under control of \" + AbstractMasterJVM.this + \" with status \" + status);", "+            synchronized(_masterJVMLock) {", "-                // If we get here, the process died without registering.", "-                //  (This might be the case if something was wrong with the", "-                //   classpath, or if the new JVM couldn't acquire a port", "-                //   for debugging.)", "-                //", "-                // Proper behavior in this case is unclear, so we'll let", "-                //  our subclasses decide.  By default, we print a stack", "-                //  trace and do not proceed, to avoid going into a loop.", "+                _log.log(\"Process \" + process + \" died while starting up\");", "+                /* If we get here, the process died without registering. (This might be the case if something was wrong", "+                 * with the classpath, or if the new JVM couldn't acquire a port for debugging.)  Proper behavior in ", "+                 * this case is unclear, so we'll let our subclasses decide.  By default, we print a stack trace and ", "+                 * do not proceed, to avoid going into a loop. */", "-              UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-//              Utilities.showDebug(\"calling handleSlaveQuit(\" + status + \")\");", "+              final boolean masterWithdrawn = UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "+              final boolean loaderWithdrawn = UnicastRemoteObject.unexportObject(_classLoader, true);", "+              if (! masterWithdrawn || ! loaderWithdrawn) {", "+                _log.log(\"unexport step failed in \" + AbstractMasterJVM.this);", "+                throw new UnexpectedException(\"remote objects exported by Master JVM could not be withdrawn!\");", "+              }", "+              ", "+              _log.log(AbstractMasterJVM.this + \" calling handleSlaveQuit(\" + status + \")\");", "-          catch (NoSuchObjectException e) {", "-            throw new edu.rice.cs.util.UnexpectedException(e);", "-          }", "-          catch (InterruptedException ie) {", "-            throw new edu.rice.cs.util.UnexpectedException(ie);", "-          }", "+          catch (NoSuchObjectException e) { throw new UnexpectedException(e); }", "+          catch (InterruptedException ie) { throw new UnexpectedException(ie); }", "-      thread.start();", "+      _log.log(this + \" is starting a slave monitor thread to detect when the Slave JVM dies\");", "+      restartThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb040c44013b3f0fe0ac44ad47a786b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "commitAfterChange": "70629f9e5e558e81031db46a0eeff962734da160", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private void _saveJava()", "signatureAfterChange": "   private void _saveJava()", "diff": ["-    // TODO", "+    int count = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT) + 1;", "+    final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "+    final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "+    final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "+    final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+    final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "+    ", "+    String name = JOptionPane.showInputDialog(this, \"Name for saved process:\", \"External Java \"+count);", "+    if (name==null) {", "+      // Always apply and save settings", "+      _saveSettings();", "+      this.setVisible(false);", "+      return;", "+    }", "+    ", "+    names.add(name);", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_NAMES,names);", "+    ", "+    types.add(\"java\");", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_TYPES,types);", "+    ", "+    String cmdline = _javaCommandLine.getText();", "+    cmdlines.add(cmdline);", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES,cmdlines);", "+    ", "+    jvmargs.add(_jvmLine.getText());", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS,jvmargs);", "+    ", "+    String workdir = _javaCommandWorkDirLine.getText();", "+    workdirs.add(workdir);", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS,workdirs);", "+", "+    ", "+    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_COUNT, count);"]}], "num": 27123}
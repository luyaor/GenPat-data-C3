{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50935db0d66300a15254c774ac3a6a22", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06d160e762daf243a788c87a169c1891", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void _runJavadoc(ArrayList<String> args, String[] classpath,                            File destDirFile, JavadocListener listener,                            boolean showFrames)", "signatureAfterChange": "   private void _runJavadoc(ArrayList<String> args, String[] classpath,                            File destDirFile, JavadocListener listener,                            boolean allDocs)", "diff": ["-                           boolean showFrames)", "+                           boolean allDocs)", "+      // If success and we're generating current, make sure the temp", "+      //  directory gets deleted on exit.", "+      if (result && !allDocs) {", "+        FileOps.deleteDirectoryOnExit(destDirFile);", "+      }", "+      ", "-      listener.javadocEnded(result, destDirFile, showFrames);", "+      listener.javadocEnded(result, destDirFile, allDocs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7548fd8f3caa03c5a1ec13162b90f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeClassLoader.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private static ClassLoader makeParent(ClassLoader p)", "signatureAfterChange": "      private static ClassLoader makeParent(ClassLoader p, Iterable<String> registeredNames)", "diff": ["-  private static ClassLoader makeParent(ClassLoader p) {", "+  private static ClassLoader makeParent(ClassLoader p, Iterable<String> registeredNames) {", "-    return new ComposedClassLoader(implementationLoader, p);", "+    // Allow shadowing by hiding parent classes redefined here", "+    ClassLoader parentLoader = new ShadowingClassLoader(p, true, registeredNames, true);", "+    return new ComposedClassLoader(implementationLoader, parentLoader);"]}], "num": 17446}
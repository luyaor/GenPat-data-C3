{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61bfbc957647e323859decf0a0ad0184", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c23c9b2dbde3b2b4d1fb261d433eb16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public StackTraceElement replaceStackTraceElement(StackTraceElement s, File d, TreeMap<Integer,Integer> m)", "signatureAfterChange": "      public StackTraceElement replaceStackTraceElement(StackTraceElement s, File d, TreeMap<Integer,Integer> m)", "diff": ["-  ", "-    if (! matches(d,s)) return s;", "-    StackTraceElement NewS = ", "-      new StackTraceElement(s.getClassName(), s.getMethodName(),d.getName(), m.get(s.getLineNumber()));", "-    ", "-    return NewS;", "+    int jl = s.getLineNumber();", "+    int lll = m.containsKey(jl) ? m.get(jl) : -1;", "+      ", "+    return new StackTraceElement(s.getClassName(), s.getMethodName(), d.getName(), lll);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd26afdd68699bc9004e4d0a0229d8e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected void _updateWithErrors(String failureName, String failureMeaning, DefaultStyledDocument doc)       throws BadLocationException", "signatureAfterChange": "     protected void _updateWithErrors(String failureName, String failureMeaning, DefaultStyledDocument doc)       throws BadLocationException", "diff": ["+      CompilerErrorModel cem = getErrorModel();", "+      int numErrors = cem.getNumErrors();", "-      CompilerError[] errors = getErrorModel().getErrors();", "-      for (int i = 0; i < errors.length; i++, errorNum++) {", "+      for (int i = 0; i < numErrors; i++, errorNum++) {", "-        _insertErrorText(errors[i], doc);", "+        CompilerError err = cem.getError(i);", "+        ", "+        _insertErrorText(err, doc);", "-        _errorTable.put(pos, errors[i]);", "+        _errorTable.put(pos, err);"]}], "num": 23569}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3f7cafdd36e4065a91f60385dc2611e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ea2043228e9aae8c93de0ecea2f3f9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "commitAfterChange": "b35a353aefac369485a6c43b1b1d62dab2d5057c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-    LinkedHashSet<File> roots = new LinkedHashSet<File>();", "+    LinkedHashMap<File,Set<CompoundJDKDescriptor>> roots = new LinkedHashMap<File,Set<CompoundJDKDescriptor>>();", "-      addIfDir(new File(javaHome), roots);", "-      addIfDir(new File(javaHome, \"..\"), roots);", "-      addIfDir(new File(javaHome, \"../..\"), roots);", "+      addIfDir(new File(javaHome), null, roots);", "+      addIfDir(new File(javaHome, \"..\"), null, roots);", "+      addIfDir(new File(javaHome, \"../..\"), null, roots);", "-      addIfDir(new File(envJavaHome), roots);", "-      addIfDir(new File(envJavaHome, \"..\"), roots);", "-      addIfDir(new File(envJavaHome, \"../..\"), roots);", "+      addIfDir(new File(envJavaHome), null, roots);", "+      addIfDir(new File(envJavaHome, \"..\"), null, roots);", "+      addIfDir(new File(envJavaHome, \"../..\"), null, roots);", "-      addIfDir(new File(programFiles, \"Java\"), roots);", "-      addIfDir(new File(programFiles), roots);", "+      addIfDir(new File(programFiles, \"Java\"), null, roots);", "+      addIfDir(new File(programFiles), null, roots);", "-    addIfDir(new File(\"/C:/Program Files/Java\"), roots);", "-    addIfDir(new File(\"/C:/Program Files\"), roots);", "+    addIfDir(new File(\"/C:/Program Files/Java\"), null, roots);", "+    addIfDir(new File(\"/C:/Program Files\"), null, roots);", "-      addIfDir(new File(systemDrive, \"Java\"), roots);", "-      addIfDir(new File(systemDrive), roots);", "+      addIfDir(new File(systemDrive, \"Java\"), null, roots);", "+      addIfDir(new File(systemDrive), null, roots);", "-    addIfDir(new File(\"/C:/Java\"), roots);", "-    addIfDir(new File(\"/C:\"), roots);", "+    addIfDir(new File(\"/C:/Java\"), null, roots);", "+    addIfDir(new File(\"/C:\"), null, roots);", "-    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);", "+    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), null, roots);", "-    addIfDir(new File(\"/usr/java\"), roots);", "-    addIfDir(new File(\"/usr/j2se\"), roots);", "-    addIfDir(new File(\"/usr\"), roots);", "-    addIfDir(new File(\"/usr/local/java\"), roots);", "-    addIfDir(new File(\"/usr/local/j2se\"), roots);", "-    addIfDir(new File(\"/usr/local\"), roots);", "+    addIfDir(new File(\"/usr/java\"), null, roots);", "+    addIfDir(new File(\"/usr/j2se\"), null, roots);", "+    addIfDir(new File(\"/usr\"), null, roots);", "+    addIfDir(new File(\"/usr/local/java\"), null, roots);", "+    addIfDir(new File(\"/usr/local/j2se\"), null, roots);", "+    addIfDir(new File(\"/usr/local\"), null, roots);", "-    addIfDir(new File(\"/usr/lib/jvm\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);", "+    addIfDir(new File(\"/usr/lib/jvm\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), null, roots);", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), null, roots);", "-    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);", "+    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), null, roots);", "-    LinkedHashSet<File> jars = new LinkedHashSet<File>();", "-    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+    LinkedHashMap<File,Set<CompoundJDKDescriptor>> jars = new LinkedHashMap<File,Set<CompoundJDKDescriptor>>();", "+    // drjava.jar file itself; check if it's a combined Mint/DrJava jar", "+    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), (CompoundJDKDescriptor)null, jars);", "-      for(File f: desc.getSearchDirectories()) { addIfDir(f, roots); }", "-      for(File f: desc.getSearchFiles()) { addIfFile(f, jars); }", "+      for(File f: desc.getSearchDirectories()) { addIfDir(f, desc, roots); }", "+      for(File f: desc.getSearchFiles()) { addIfFile(f, desc, jars); }", "-    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), starts with \"java-\" (Linux)", "+    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), or", "+    // starts with \"java-\" (Linux)", "-    for (File root : roots) {", "-      for (File subdir : IOUtil.attemptListFilesAsIterable(root, subdirFilter)) {", "-        addIfFile(new File(subdir, \"lib/tools.jar\"), jars);", "-        addIfFile(new File(subdir, \"Classes/classes.jar\"), jars);", "+    for (Map.Entry<File,Set<CompoundJDKDescriptor>> root : roots.entrySet()) {", "+      for (File subdir : IOUtil.attemptListFilesAsIterable(root.getKey(), subdirFilter)) {", "+        addIfFile(new File(subdir, \"lib/tools.jar\"), root.getValue(), jars);", "+        addIfFile(new File(subdir, \"Classes/classes.jar\"), root.getValue(), jars);", "-    for (File jar : jars) {", "-      JarJDKToolsLibrary lib = makeFromFile(jar, model);", "-      if (lib.isValid()) {", "-        FullVersion v = lib.version();", "-        Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;", "-        if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = compoundResults; }", "-        ", "-        if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }", "-        else { mapToAddTo.put(v, IterUtil.singleton(lib)); }", "+    for (Map.Entry<File,Set<CompoundJDKDescriptor>> jar : jars.entrySet()) {", "+      for (CompoundJDKDescriptor desc : jar.getValue()) {", "+        JarJDKToolsLibrary lib = makeFromFile(jar.getKey(), model, desc);", "+        if (lib.isValid()) {", "+          FullVersion v = lib.version();", "+          Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;", "+          if (v.vendor().equals(JavaVersion.VendorType.COMPOUND)) { mapToAddTo = compoundResults; }", "+          ", "+          if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }", "+          else { mapToAddTo.put(v, IterUtil.singleton(lib)); }", "+        }", "-        JarJDKToolsLibrary lib = makeFromFile(compoundLib.location(), model, found.bootClassPath());", "+        JarJDKToolsLibrary lib = makeFromFile(compoundLib.location(), model, compoundLib.getJDKDescriptor(),", "+                                              found.bootClassPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27134017130b43b1367948b58f233173", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "b069e2bfa2f8651c897cd701a15acb237a3766d7", "commitAfterChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public static String memSizeToString(long l)", "signatureAfterChange": "   public static String memSizeToString(long l)", "diff": ["-    StringWriter sw = new StringWriter();", "-    PrintWriter pw = new PrintWriter(sw);", "+    StringBuilder sb = new StringBuilder();", "-        pw.format(\"%d %s\", whole, sizes[i]);", "+        sb.append(whole);", "+        sb.append(' ');", "+        sb.append(sizes[i]);", "-        pw.format(\"%d %ss\", whole, sizes[i]);", "+        sb.append(whole);", "+        sb.append(' ');", "+        sb.append(sizes[i]);", "+        sb.append('s');", "-      pw.format(\"%.2f %ss\", d, sizes[i]);", "+      // two decimal digits", "+      DecimalFormat df = new DecimalFormat(\"#.00\");", "+      sb.append(df.format(d));", "+      sb.append(' ');", "+      sb.append(sizes[i]);", "+      sb.append('s');", "-    return sw.toString();", "+    return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fb571169b8b47a9b6e9a060ee77c52d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindResultsPanel.java", "commitBeforeChange": "b86859aaefb86c79b1343c533fc1a98460d5733a", "commitAfterChange": "c95281d4127bdbd843c86748b646c5941d6c6e28", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public FindResultsPanel(MainFrame frame, RegionManager<MovingDocumentRegion> regionManager, MovingDocumentRegion region, String title, \r                           String searchString, boolean searchAll, boolean searchSelectionOnly, boolean matchCase, boolean wholeWord, \r                           boolean noComments, boolean noTestCases, WeakReference<OpenDefinitionsDocument> doc, \r                           FindReplacePanel findReplace)", "signatureAfterChange": "\r   public FindResultsPanel(MainFrame frame, RegionManager<MovingDocumentRegion> regionManager, MovingDocumentRegion region, String title, \r                           String searchString, boolean searchAll, boolean searchSelectionOnly, boolean matchCase, boolean wholeWord, \r                           boolean noComments, boolean noTestCases, WeakReference<OpenDefinitionsDocument> doc, \r                           FindReplacePanel findReplace)", "diff": ["+    // set \"Find Again\" button tooltip\r", "+    StringBuilder sb = new StringBuilder();\r", "+    sb.append(\"<html>Find '\").append(title);\r", "+    if (!title.equals(_searchString)) sb.append(\"...\");\r", "+    sb.append(\"'\");\r", "+    if (_searchAll) sb.append(\" in all files\");\r", "+    else if (_searchSelectionOnly) sb.append(\" only in original selection.\");\r", "+    sb.append(\".\");\r", "+    if (_matchCase) sb.append(\"<br>Case must match.\");\r", "+    if (_wholeWord) sb.append(\"<br>Whole words only.\");\r", "+    if (_noComments) sb.append(\"<br>No comments or strings.\");\r", "+    if (_noTestCases) sb.append(\"<br>No test cases.\");\r", "+    sb.append(\"</html>\");\r", "+    _findAgainButton.setToolTipText(sb.toString());\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a76d0b04189c1d15e2ca387dd46eecf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/DynamicJava.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static void main(String... args) throws IOException", "signatureAfterChange": "      public static void main(String... args) throws IOException", "diff": ["-    Interpreter i = new Interpreter(Options.DEFAULT);", "+", "+    ArgumentParser argParser = new ArgumentParser();", "+    argParser.supportOption(\"classpath\", IOUtil.WORKING_DIRECTORY.toString());", "+    argParser.supportAlias(\"cp\", \"classpath\");", "+    ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    Iterable<File> cp = IOUtil.parsePath(parsedArgs.getUnaryOption(\"classpath\"));", "+", "+    Interpreter i = new Interpreter(Options.DEFAULT, new PathClassLoader(cp));", "+    String prev = null;", "+    boolean blank = false;", "+        // two blank lines trigger a recompute", "+        if (input.equals(\"\")) {", "+          if (blank == true) { input = prev; blank = false; }", "+          else { blank = true; }", "+        }", "+        else { prev = input; blank = false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c430d0a865da587e8c7755aa28a4240", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "6f37af6087e88b55d504fabdb6eee22be7ba1948", "commitAfterChange": "7fcdc5820c7f1c50a17a282e38bc904783e87e7f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 43, "signatureBeforeChange": "   private boolean _saveSettings()", "signatureAfterChange": "   private boolean _saveSettings()", "diff": ["-   */", "+  /** Save the settings for this dialog. */", "-    // TODO: We want to save these settings in the project", "+    _lastState = new FrameState(this);", "+    if (!_model.getCreateJarFile().getName().equals(_jarFileSelector.getFileFromField().getName())) {", "+      _model.setCreateJarFile(_jarFileSelector.getFileFromField());", "+    }", "+    int f = 0;", "+    if (_jarClasses.isSelected()) f |= JAR_CLASSES;", "+    if (_jarSources.isSelected()) f |= JAR_SOURCES;", "+    if (_makeExecutable.isSelected()) f |= MAKE_EXECUTABLE;", "+    if (f!=_model.getCreateJarFlags()) {", "+      _model.setCreateJarFlags(f);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551fa11b49a7b6098dd9aa082824a034", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "commitAfterChange": "a36f036fed8dd7a9755b2c0fd88168156b516121", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 112, "signatureBeforeChange": "          public Icon getIcon(File f)", "signatureAfterChange": "     public Icon getIcon(File f)", "diff": ["+     */", "+      Icon ret = null;", "-        if (name.endsWith(\".java\")) return _java;", "-        if (name.endsWith(\".dj0\")) return _dj0;", "-        if (name.endsWith(\".dj1\")) return _dj1;", "-        if (name.endsWith(\".dj2\")) return _dj2;", "+        if (name.endsWith(\".java\")) ret = _java;", "+        if (name.endsWith(\".dj0\")) ret = _dj0;", "+        if (name.endsWith(\".dj1\")) ret = _dj1;", "+        if (name.endsWith(\".dj2\")) ret = _dj2;", "-      return super.getIcon(f);", "+      if (ret == null) ", "+        return super.getIcon(f);", "+      else", "+        return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72aef74716ef5177920c10340cbc56da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "ef7dc3345b6835fe8ebb574f1a9119ee4c786794", "commitAfterChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testFormat()", "signatureAfterChange": "    public void testFormat()", "diff": ["-    Vector<Integer> iv = new Vector<Integer>();", "-    assertEquals(\"[]\", _ivo.format(iv));", "+    Vector<String> sv = new Vector<String>();", "+    assertEquals(\"\", _svo.format(sv));", "-    iv.add(new Integer(-33));", "-    assertEquals(\"[-33]\", _ivo.format(iv));", "+    sv.add(\"\");", "+    assertEquals(\"[]\", _svo.format(sv));", "-    iv.add(new Integer(2));", "-    assertEquals(\"[-33,2]\", _ivo.format(iv));", "+    sv.add(\"-33\");", "+    assertEquals(\"[,-33]\", _svo.format(sv));", "-    iv.add(new Integer(0));", "-    assertEquals(\"[-33,2,0]\", _ivo.format(iv));", "+    sv.add(\"2\");", "+    assertEquals(\"[,-33,2]\", _svo.format(sv));", "+", "+    sv.add(\"\");", "+    assertEquals(\"[,-33,2,]\", _svo.format(sv));", "+", "+    sv.add(\",\");", "+    assertEquals(\"[,-33,2,,\\\\,]\", _svo.format(sv));", "+", "+    sv.add(\"0\");", "+    assertEquals(\"[,-33,2,,\\\\,,0]\", _svo.format(sv));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9660c479a3cab566e04fc1959946f824", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Void forClassDef(ClassDef that)", "signatureAfterChange": "   public Void forClassDef(ClassDef that)", "diff": ["-", "+    ", "+    boolean isTestCase = false;  // flag to support automatic importing of junit.framework.*;", "-    SymbolData sd = addSymbolData(that, className);", "-   ", "+    SymbolData sd = defineSymbolData(that, className);", "+    ", "+    if (sd != null) {", "+    ", "+      String superName = that.getSuperclass().getName();", "+      if (superName.equals(\"TestCase\") || superName.equals(\"junit.framework.TestCase\")) {", "+        isTestCase = true;", "+        if (! _importedPackages.contains(\"junit.framework\") && ! _importedFiles.contains(\"junit.framework.TestCase\")) {", "+          System.err.println(\"importing junit.framework.TestCase in file \" + that.getSourceInfo());", "+          _importedFiles.addLast(\"junit.framework.TestCase\");", "+          sd.setHasAutoGeneratedJunitImport(true);", "+        }", "+        // add to symbol table", "+        getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo(), true, false, true, false); ", "+//        assert getSymbolData(\"junit.framework.TestCase\", that.getSourceInfo()) != null;", "+      }", "+    }", "+    ", "+    ", "+    // Test cases are automatically public", "+    if (isTestCase) sd.addModifier(\"public\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb8e5f91da7b9a40bc99c8ea6d677bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData value_result, TypeData type_result)", "signatureAfterChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData type_result, TypeData value_result)", "diff": ["-  /** Not currently supported */", "-  public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData value_result, TypeData type_result) {", "-    throw new RuntimeException(\"Internal Program Error: instanceof is not currently supported.\" + ", "-                               \"  This should have been caught before the Type Checker.  Please report this bug.\");", "+    */", "+  public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData type_result, TypeData value_result) {", "+    if (type_result == null)  return null; ", "+    ", "+    // Make sure that lhs could be resolved (not PackageData)", "+    if (! assertFound(value_result, that) || ! assertFound(type_result, that)) return null;", "+    ", "+    if (type_result.isInstanceType()) {", "+      _addError(\"You are trying to test if an expression value belongs to an instance of a type, which is not allowed.\"", "+                  + \"  Perhaps you meant to check membership in the type itself, \" + type_result.getName(),", "+                that);", "+    }", "+    ", "+    else if (assertInstanceType(value_result, \"You are trying to test if \" + value_result.getName() + ", "+                                \" belongs to type, but it is a class or interface type, not an instance\", that) ", "+               && ! value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), JAVA_VERSION)) {", "+      ", "+      _addError(\"You cannot test whether an expression of type \" + value_result.getName() + \" belongs to type \"", "+                  + type_result.getName() + \" because they are not related\", ", "+                that);", "+    }", "+    ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a64a58b3e1787d7a6acaff7d1affca77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "f1daacb1f9c546b2b765d3fc6cc41bd412931a0f", "commitAfterChange": "591ec87995880046281596623701cb5a561fc66e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "      public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "diff": ["+    JavadocModel javadoc = new NoJavadocAvailable(model);", "-      Iterable<File> path = IterUtil.singleton(f);", "+      Iterable<File> path = IterUtil.singleton(IOUtil.attemptAbsoluteFile(f));", "-          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(path), debuggerPackage);", "+          ClassLoader debugLoader = new PreemptingClassLoader(new PathClassLoader(loader, path), debuggerPackage);", "+      ", "+      try {", "+        new PathClassLoader(loader, path).loadClass(\"com.sun.tools.javadoc.Main\");", "+        File bin = new File(f.getParentFile(), \"../bin\");", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(f.getParentFile(), \"../Home/bin\"); }", "+        if (!IOUtil.attemptIsDirectory(bin)) { bin = new File(System.getProperty(\"java.home\", f.getParent())); }", "+        javadoc = new DefaultJavadocModel(model, bin, path);", "+      }", "+      catch (ClassNotFoundException e) { /* can't load */ }", "+      catch (LinkageError e) { /* can't load (probably not necessary, but might as well catch it) */ }", "+        ", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger);", "+    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0424b4f75695f963b50ec1fab1fb47", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/AbstractLog.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected String formatLocation(StackTraceElement location)", "signatureAfterChange": "   protected String formatLocation(StackTraceElement location)", "diff": ["-    return location.toString();", "+    StringBuilder result = new StringBuilder();", "+    result.append(location.getClassName());", "+    result.append(\".\");", "+    result.append(location.getMethodName());", "+    result.append(\"(\");", "+    int line = location.getLineNumber();", "+    if (line >= 0) { result.append(line); }", "+    else if (location.isNativeMethod()) { result.append(\"native\"); }", "+    else { result.append(\"unknown\"); }", "+    result.append(\")\");", "+    return result.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba4350ee5dada55a9c11de46fb435676", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/AbstractReducedModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public String simpleString()", "signatureAfterChange": "   public String simpleString()", "diff": ["-   */", "+  /** A toString() replacement for testing - easier to read. */", "-    String val = \"\";", "+    StringBuffer val = new StringBuffer();", "+    if (_cursor.atStart())  val.append(PTR_CHAR).append(_cursor.getBlockOffset());", "-    if (_cursor.atStart()) {", "-      val += PTR_CHAR;", "-      val += _cursor.getBlockOffset();", "-    }", "-    ", "-    while(!it.atEnd()) {", "+    while (!it.atEnd()) {", "-        val += PTR_CHAR;", "-        val += _cursor.getBlockOffset();", "+        val.append(PTR_CHAR).append(_cursor.getBlockOffset());", "-      val += \"|\";", "-      val += tmp;", "-      val += \"|\\t\";", "-      ", "+      val.append('|').append(tmp).append('|').append('\\t');", "-    if (_cursor.atEnd()) {", "-      val += PTR_CHAR;", "-      val += _cursor.getBlockOffset();", "-    }", "+    if (_cursor.atEnd()) val.append(PTR_CHAR).append(_cursor.getBlockOffset());", "-    val += \"|end|\";", "+    val.append(\"|end|\");", "-    return val;", "+    return val.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf2ebab6ced51be243332da8dbf426f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "d86f285f67e4f6710d1cc904d1f552e6a6a92520", "commitAfterChange": "f631b97f7a46e37b22216cbc1b865ac25185f25a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-      try {", "+//      try {", "-        toEval = _interactionsProcessor.preProcess(toEval);", "+//        toEval = _interactionsProcessor.preProcess(toEval);", "-        _prepareToInterpret(text);", "-        interpret(toEval);", "-      }", "-      catch (ParseException pe) {", "-        // A ParseException indicates a syntax error in the input window", "-        String errMsg = pe.getInteractionsMessage();", "-//        javax.swing.JOptionPane.showMessageDialog(null, \"ParseException:\\n\" + errMsg);", "-        if (errMsg.endsWith(\"<EOF>\\\"\")) {", "-          _notifyInteractionIncomplete();", "-        }", "-        else {", "-          _prepareToInterpret(text);", "-          replReturnedSyntaxError(errMsg, text, pe.getBeginLine(),", "-                                  pe.getBeginColumn(), pe.getEndLine(), pe.getEndColumn());", "-        }", "-      }", "-      catch (TokenMgrError tme) {", "-        // A TokenMgrError indicates some lexical difficulty with input.", "-//        javax.swing.JOptionPane.showMessageDialog(null, \"TokenMgrError:\\n\" + tme.getMessage());", "-        _prepareToInterpret(text);", "-        int row = tme.getErrorRow();", "-        int col = tme.getErrorColumn() - 1;", "-        replReturnedSyntaxError(tme.getMessage(), text, row, col, row, col);", "-      }", "+      ", "+////      boolean parserpassed = true;", "+////      JavaInterpreter interpreter = new DynamicJavaAdapter();", "+////      try {", "+////        interpreter.parse(toEval);", "+////      } catch(Throwable t){", "+////        parserpassed = false;", "+////      }", "+////", "+////      if(parserpassed) {", "+      _prepareToInterpret(text);", "+      interpret(toEval);", "+////      }", "+      ", "+//      }", "+//      catch (ParseException pe) {", "+//        // A ParseException indicates a syntax error in the input window", "+//        String errMsg = pe.getInteractionsMessage();", "+//        //javax.swing.JOptionPane.showMessageDialog(null, \"ParseException:\\n\" + errMsg);", "+//        if (errMsg.endsWith(\"<EOF>\\\"\")) {", "+//          _notifyInteractionIncomplete();", "+//        }", "+//        else {", "+//          _prepareToInterpret(text);", "+//          replReturnedSyntaxError(errMsg, text, pe.getBeginLine(),", "+//                                  pe.getBeginColumn(), pe.getEndLine(), pe.getEndColumn());", "+//        }", "+//      }", "+//      catch (TokenMgrError tme) {", "+//        // A TokenMgrError indicates some lexical difficulty with input.", "+//        //  javax.swing.JOptionPane.showMessageDialog(null, \"TokenMgrError:\\n\" + tme.getMessage());", "+//        _prepareToInterpret(text);", "+//        int row = tme.getErrorRow();", "+//        int col = tme.getErrorColumn() - 1;", "+//        replReturnedSyntaxError(tme.getMessage(), text, row, col, row, col);", "+//      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c552da03bc88b2bac797af353ccfb995", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "554902896b1f96c3839ea73c44260e0ca63ab535", "commitAfterChange": "b04ad32b6b168076ffec376c15a5d9d487d414f6", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["+    Log l = new Log(\"AbstractGlobalModel_openFolder.log\", false);", "+    l.log(String.format(\"Recursive Searching %s\", (rec ? \"Enabled\" : \"Disabled\")));", "+    ", "+", "+      //HACK: the dot needs to be removed, otherwise", "+      //IOUtils.fileExtensionPredicate() will try to match ..<ext>", "+      if (extension.startsWith(\".\")) {", "+       extension = extension.substring(1);", "+       l.log(String.format(\"Extension tweaked to %s\", extension));", "+      }", "+", "+      l.log(String.format(\"Searching %s for *%s\", dir.getAbsolutePath(), extension));", "+      ", "+", "+      //What did we find?", "+      l.log(String.format(\"Found %d file(s):\", files.size()));", "+      for (File f : files) {", "+       l.log(f.getAbsolutePath()); ", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcb8547db836b7431e79070a4862c0d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "54a2d5af359edd99cce3e2b74ded93b4c8c0d9e9", "commitAfterChange": "7c8486700bb21647b6fbe2818464471123c8ab80", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   private void _setupKeyBindingsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupKeyBindingsPanel(ConfigPanel panel)", "diff": ["-    // using a treeset because it automatically sorts element upon insertion", "-    TreeSet<VectorKeyStrokeOptionComponent> _comps = new TreeSet<VectorKeyStrokeOptionComponent>();", "+    // using a treemap because it automatically sorts element upon insertion", "+    TreeMap<String,VectorKeyStrokeOptionComponent> _comps = new TreeMap<String,VectorKeyStrokeOptionComponent>();", "-        String desc = (String) a.getValue(Action.SHORT_DESCRIPTION);", "-        if (desc == null || desc.equals(\"\")) desc = ksd.getName();", "-        vksoc = new VectorKeyStrokeOptionComponent(ksd.getOption(), ksd.getName(), this, desc);", "-        if (vksoc != null) _comps.add(vksoc);", "+        // pick the short description as name, if available", "+        String name = (String) a.getValue(Action.SHORT_DESCRIPTION);", "+        // if not available, pick the KeyStrokeData name instead", "+        if (name == null || name.trim().equals(\"\")) name = ksd.getName();", "+        // pick the long description as name, if available", "+        String desc = (String) a.getValue(Action.LONG_DESCRIPTION);", "+        // if not available, pick the name from above instead", "+        if (desc == null || desc.trim().equals(\"\")) desc = name;", "+        // if the map already contains this name, use the description instead", "+        if (_comps.containsKey(name)) {", "+          name = desc;", "+          // if the map already contains the description as well (bad developers!), then use the option's name", "+          if (_comps.containsKey(name)) {", "+            name = ksd.getOption().getName();", "+          }", "+        }", "+        vksoc = new VectorKeyStrokeOptionComponent(ksd.getOption(), name, this, desc);", "+        if (vksoc != null) _comps.put(name, vksoc);", "-    Iterator<VectorKeyStrokeOptionComponent> iter = _comps.iterator();", "+    Iterator<VectorKeyStrokeOptionComponent> iter = _comps.values().iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3d3b27f35c574044257b9b1e1386dd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "68370a69757582d1f4c25368b4758bfbfb8b4171", "commitAfterChange": "28ac8c168c57a4d2c1b2d9f0939cd3a5f7f7c65c", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public void openFolder(File dir, boolean rec) throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    Log l = new Log(\"AbstractGlobalModel_openFolder.log\", false);", "-    l.log(String.format(\"Recursive Searching %s\", (rec ? \"Enabled\" : \"Disabled\")));", "-    ", "-      //HACK: the dot needs to be removed, otherwise", "-      //IOUtils.fileExtensionPredicate() will try to match ..<ext>", "-      if (extension.startsWith(\".\")) {", "-       extension = extension.substring(1);", "-       l.log(String.format(\"Extension tweaked to %s\", extension));", "-      }", "-", "-      l.log(String.format(\"Searching %s for *%s\", dir.getAbsolutePath(), extension));", "-      //What did we find?", "-      l.log(String.format(\"Found %d file(s):\", files.size()));", "-      for (File f : files) {", "-       l.log(f.getAbsolutePath()); ", "-      }", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c3088c3349d065c11ea194fa7c1093", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "signatureAfterChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "diff": ["-   */", "+    */", "-    throw new RuntimeException(\"Internal Program Error: Instance of expressions are not supported.  This should have been caught before the Type Checker.  Please report this bug.\");", "+    //this call to getSymbolData will not throw any errors, but may return null.  If null is returned, an error needs to be added.", "+    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "+    final TypeData value_result = that.getValue().visit(this);", "+    ", "+    if (type_result == null) {", "+      _addError(that.getType().getName()", "+                  + \" cannot appear as the type of a instanceof expression because it is not a valid type\", ", "+                that.getType());", "+      return null;", "+    }", "+    ", "+    if (! assertFound(value_result, that.getValue())) {", "+      // An error occurred type-checking the value; return the expected type to", "+      // allow type-checking to continue.", "+      return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+    }", "+    ", "+    // Neither type_result nor value_result are null.", "+    return forInstanceofExpressionOnly(that, type_result, value_result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d63aaa8986345a2ef15ec83275b754", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ddcbad2909e9c9411b7283368e21d7790422a21d", "commitAfterChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "   void debuggerToggleBreakpoint()", "signatureAfterChange": "   void debuggerToggleBreakpoint()", "diff": ["+      ", "+      boolean isUntitled = doc.getDocument().isUntitled();", "+      if (isUntitled) {", "+        JOptionPane.showMessageDialog(this,", "+                                      \"Before you can set a breakpoint you must save and compile\\n\" +", "+                                      \"this document.\",", "+                                      \"Cannot set breakpoint on untitled document.\",", "+                                      JOptionPane.ERROR_MESSAGE);", "+        return;", "+      }", "+      ", "+      boolean isModified = doc.isModifiedSinceSave();", "+      if (isModified  && !_currentDefPane.hasWarnedAboutModified()) {", "+        ", "+        int rc = JOptionPane.showConfirmDialog(this,", "+                                               \"This document has been modified since its last save and\\n\" + ", "+                                               \"may be out of sync with the debugger. It is suggested that\\n\" +", "+                                               \"you save and recompile before continuing to debug in order\\n\" +", "+                                               \"to avoid any unexpected errors. Would you still like to toggle\\n\" +", "+                                               \"the breakpoint at the specified line?\",", "+                                               \"Toggle breakpoint on modified file?\",", "+                                               JOptionPane.YES_NO_OPTION);", "+        _currentDefPane.hasWarnedAboutModified(true);", "+        ", "+        switch (rc) {", "+          case JOptionPane.YES_OPTION:", "+            break;", "+          case JOptionPane.NO_OPTION:", "+          case JOptionPane.CANCEL_OPTION:", "+          case JOptionPane.CLOSED_OPTION:", "+            // do nothing", "+            return;", "+          default:", "+            throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        }", "+        ", "+      }", "+           "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc900428a0adecadf0d058222bd7bd1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(final String[] jvmArgs, final String cp, final File workDir) throws IOException,      RemoteException", "diff": ["+    LinkedList<String> fullJVMArgs = new LinkedList<String>(Arrays.asList(jvmArgs));", "+    Properties propagate = ConcurrentUtil.getProperties(\"plt.\", \"drjava.\", \"edu.rice.cs.\");", "+    if (propagate.containsKey(\"plt.debug.log\") || propagate.containsKey(\"plt.error.log\") || ", "+        propagate.containsKey(\"plt.log.factory\")) {", "+      propagate.put(\"plt.log.working.dir\", System.getProperty(\"user.dir\", \"\"));", "+    }", "+    for (Map.Entry<Object, Object> entry : propagate.entrySet()) {", "+      fullJVMArgs.addFirst(\"-D\" + entry.getKey() + \"=\" + entry.getValue());", "+    }", "+    final String[] jvmArgsArray = fullJVMArgs.toArray(new String[0]);", "+    ", "-          final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs, workDir);", "+          final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgsArray, workDir);"]}], "num": 27045}
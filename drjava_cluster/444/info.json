{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99c6fe2bb1bc768ac1b235dbcc4ceb1a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af5fd3dc1c700e313907a80baecc0f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 318, "methodNumberAfterChange": 328, "signatureBeforeChange": "   private Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params,                                             Iterable<? extends Type> args)", "signatureAfterChange": "   private Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-                                            Iterable<? extends Type> params,", "-                                            Iterable<? extends Type> args) {", "-    //debug.logValues(\"Beginning inferTypeArguments\", new String[]{ \"tparams\", \"params\", \"args\" },", "-    //                wrap(tparams), wrap(params), wrap(args));", "+                                            Iterable<? extends Type> params, Type returned,", "+                                            Iterable<? extends Type> args, Option<Type> expected) {", "+    //debug.logValues(\"Beginning inferTypeArguments\",", "+    //                new String[]{ \"tparams\", \"params\", \"returned\", \"args\", \"expected\" },", "+    //                wrap(tparams), wrap(params), wrap(returned), wrap(args), wrap(expected));", "+    if (expected.isSome() && constraintsBuilder.isSatisfiable()) {", "+      constraintsBuilder = constraintsBuilder.and(inferFromSupertype(expected.unwrap(), returned,", "+                                                                     tparamSet, stack));", "+    }", "+    //debug.logValue(\"constraints\", constraints);", "-    if (constraints.isSatisfiable()) {", "-      return IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "-        public Type value(VariableType param) { return constraints.lowerBound(param); }", "-        // TODO: Handle the case where the lower bound is BOTTOM (following the JLS)", "-      });", "+    if (!constraints.isSatisfiable()) { return null; }", "+", "+    Iterable<Type> result = IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "+      public Type value(VariableType param) { return constraints.lowerBound(param); }", "+    });", "+    if (inBounds(tparams, result)) { return result; }", "+    ", "+    List<Wildcard> constraintWs = new LinkedList<Wildcard>();", "+    for (VariableType param : tparams) {", "+      BoundedSymbol s = new BoundedSymbol(new Object(), constraints.upperBound(param), constraints.lowerBound(param));", "+      constraintWs.add(new Wildcard(s));", "-    else { return null; }", "+    result = captureTypeArgs(constraintWs, tparams);", "+    if (IterUtil.and(result, WELL_FORMED)) { return result; }", "+", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "120e9200c9f5a793be3d1bb9131e9a29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "eb8f1a08f585431afff35aec705cfd9169bfce44", "commitAfterChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "signatureAfterChange": "   public ArrayList<DebugStackData> getCurrentStackFrameData() throws DebugException", "diff": ["-      for (StackFrame f : thread.frames()) { frames.add(new JPDAStackData(f)); }", "+      // get a list of language level files whose line numbers need to be translated ", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+      for (StackFrame f : thread.frames()) {", "+        // map Java line numbers to LL line numbers", "+        String method = JPDAStackData.methodName(f);", "+        int lineNum = f.location().lineNumber();", "+        String sourceName = null;", "+        try {", "+          sourceName = f.location().sourceName();", "+        }", "+        catch(com.sun.jdi.AbsentInformationException aie) { sourceName = null; }", "+        StackTraceElement ste = new StackTraceElement(f.location().declaringType().name(),", "+                                                      f.location().method().name(),", "+                                                      sourceName,", "+                                                      f.location().lineNumber());", "+        ste = getLLSTM().replaceStackTraceElement(ste, files);", "+        frames.add(new JPDAStackData(method, ste.getLineNumber()));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3838071702788d82044e15226b9c8684", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsEditorKit.java", "commitBeforeChange": "83bfa3db7cd314c7293a9c4dbfac25d41d093c45", "commitAfterChange": "b05d6101d72721dc72e1089de24af7a09f520884", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "signatureAfterChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "diff": ["-  public DefinitionsEditorKit(GlobalEventNotifier notifier) { _notifier = notifier; }", "+  public DefinitionsEditorKit(GlobalEventNotifier notifier) {", "+    _notifier = notifier;", "+    Action[] supActions = super.getActions();", "+    _actions = new Action[supActions.length];", "+    LOG.log(\"DefinitionsEditorKit ctor\");", "+    for(int i=0; i<_actions.length; ++i) {", "+      Action a = supActions[i];", "+      Object name = a.getValue(\"Name\");", "+      LOG.log(name.toString());", "+      if (name.equals(beginWordAction)) {", "+        _actions[i] = new BeginWordAction(beginWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(endWordAction)) {", "+        _actions[i] = new EndWordAction(endWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(nextWordAction)){", "+        _actions[i] = new NextWordAction(nextWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(previousWordAction)) {", "+        _actions[i] = new PreviousWordAction(previousWordAction, false);", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else if (name.equals(selectWordAction)) {", "+        _actions[i] = new SelectWordAction();", "+        LOG.log(\"\\treplacing\");", "+      }", "+      else _actions[i] = a;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7976ba7960f937c0f94ed941740d5dd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "37eb7cd9abe39acb853d1fd344f27a2631ce2406", "commitAfterChange": "361de0d9250b2bd2a609e33fa8a02de61b7273c1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public CompilerErrorModel(DJError[] errors, GlobalModel model)", "signatureAfterChange": "   public CompilerErrorModel(DJError[] errors, GlobalModel model)", "diff": ["+       ", "+    // legacy support for old .dj2 language level files:", "+    // see DrJava feature request 2990660", "+    // As of revisions 5225-5227, .dj2 files aren't converted by the LanguageLevelConverter anymore,", "+    // they are just copied. That means the compiler errors now happen in the .java file, not in the", "+    // .dj2 file anymore. When we get a compiler error in a .java file, and we have a corresponding", "+    // .dj2 file open, but not the .java file, then we change the error to refer to the .dj2 file", "+    // instead.", "+    if (model!=null) {", "+      HashSet<File> odds = new HashSet<File>();", "+      for(OpenDefinitionsDocument odd: model.getOpenDefinitionsDocuments()) {", "+        odds.add(odd.getRawFile());", "+      }", "+      for(int i=0; i<errors.length; ++i) {", "+        DJError e = errors[i];", "+        if (e.fileName().endsWith(edu.rice.cs.drjava.config.OptionConstants.JAVA_FILE_EXTENSION)) {", "+          // only needs to be done for .java files", "+          File javaFile = e.file();", "+          if (!odds.contains(javaFile)) {", "+            // .java file is not open", "+            File dj2File = DrJavaFileUtils.getDJ2ForJavaFile(javaFile);", "+            if (odds.contains(dj2File)) {", "+              // but corresponding .dj2 file is open, change error to refer to .dj2 file", "+              errors[i] = new DJError(dj2File, e.lineNumber(), e.startColumn(), e.message(), e.isWarning());", "+            }", "+          }", "+        }", "+      }", "+    }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e72021b474292f9f440b0880ccb9ead", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HelpFrame.java", "commitBeforeChange": "b4e48852da60211c31b0141438d3f04d6c627263", "commitAfterChange": "4402afa3c67a362593909f349f9fbb816e477bed", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public HelpFrame()", "signatureAfterChange": "   public HelpFrame()", "diff": ["-    super(\"Help\");", "+    super(\"Help on using DrJava\");", "-    _contentsDocPane.addHyperlinkListener(this);", "-    JScrollPane contentsScroll = new JScrollPane(_contentsDocPane);", "+    _contentsDocPane.addHyperlinkListener(_linkListener);", "+    JScrollPane contentsScroll = new BorderlessScrollPane(_contentsDocPane);", "-    _mainDocPane.addHyperlinkListener(this);", "-    JScrollPane mainScroll = new JScrollPane(_mainDocPane);", "+    _mainDocPane.addHyperlinkListener(_linkListener);", "+    JScrollPane mainScroll = new BorderlessScrollPane(_mainDocPane);", "-    ", "+    JPanel tempPanel = new JPanel(new GridLayout(1,1));", "+    tempPanel.setBorder(new EmptyBorder(0,5,0,5));", "+    tempPanel.add(_splitPane);", "+    // _splitPane.setBorder(new CompoundBorder(new EmptyBorder(0,5,0,5),_splitPane.getBorder()));", "+    _backButton = new JButton(_backAction);", "+    _forwardButton = new JButton(_forwardAction);", "+    _backAction.setEnabled(false);", "+    _forwardAction.setEnabled(false);", "-    ", "+    _closePanel.setBorder(new EmptyBorder(5,5,5,5)); // padding", "+    _navPane = new JPanel();", "+    _navPane.setLayout(new BoxLayout(_navPane,BoxLayout.X_AXIS));", "+    _navPane.add(_backButton);", "+    _navPane.add(_forwardButton);", "+    _navPane.setBorder(new EmptyBorder(5,5,5,5));", "-    cp.add(_splitPane, BorderLayout.CENTER);", "+    cp.add(_navPane, BorderLayout.NORTH);", "+    cp.add(tempPanel, BorderLayout.CENTER);", "-    URL indexUrl = this.getClass().getResource(HELP_PATH + CONTENTS_PAGE);", "+    URL indexUrl = HelpFrame.class.getResource(HELP_PATH + CONTENTS_PAGE);", "-    }", "-    else {", "+    } else {", "-    URL introUrl = this.getClass().getResource(HELP_PATH + HOME_PAGE);", "+    URL introUrl = HelpFrame.class.getResource(HELP_PATH + HOME_PAGE);", "-      displayPage(introUrl);", "-    }", "-    else {", "+      _history = new HistoryList(introUrl);", "+      _displayPage(introUrl);", "+    } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e8c99d67fb3ba34129b801d855f0e61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "commitAfterChange": "c96259dca0616423a6c16e192d3684fffa655320", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+    JLabel matchLabel = new JLabel(\"Match\", SwingConstants.LEFT);", "+    matchLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+", "+    _labelPanel.add(matchLabel);", "+    MatchWholeWordListener mwwl = new MatchWholeWordListener();", "+    _matchWholeWord = new JRadioButton(\"Whole Word\");", "+    _matchWholeWord.addActionListener(mwwl);", "+", "+    FindAnyOccurrenceListener faol = new FindAnyOccurrenceListener();", "+    _findAnyOccurrence = new JRadioButton(\"Any Occurrence\");", "+    _findAnyOccurrence.addActionListener(faol);", "+", "+", "+    _radioButtonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _radioButtonPanel.add(_matchWholeWord);", "+    _radioButtonPanel.add(_findAnyOccurrence);", "+    // add radiobuttons to the buttongroup", "+    _radioButtonGroup = new ButtonGroup();", "+    _radioButtonGroup.add(_matchWholeWord);", "+    _radioButtonGroup.add(_findAnyOccurrence);", "+", "+    //_matchCaseAndClosePanel.add(_matchWholeWord);", "+    //_matchCaseAndClosePanel.add(_findAnyOccurrence);", "+    _findAnyOccurrence.setSelected(true);", "+", "-    JPanel midPanel = new JPanel(new GridLayout(2,1));", "+    JPanel midPanel = new JPanel(new GridLayout(3,1));", "+    midPanel.add(wrap(_radioButtonPanel));", "+", "+    //_rightPanel.add(_radioButtonPanel, BorderLayout.SOUTH);", "-    _searchAllDocuments.setNextFocusableComponent(_findNextButton);", "+    _searchAllDocuments.setNextFocusableComponent(_matchWholeWord);", "+    _matchWholeWord.setNextFocusableComponent(_findAnyOccurrence);", "+    _findAnyOccurrence.setNextFocusableComponent(_findNextButton);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a16ccfb16f20a39d6d2f380da43071a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "commitAfterChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static FullVersion parseFullVersion(String text)", "signatureAfterChange": "   public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor)", "diff": ["-  public static FullVersion parseFullVersion(String text) {", "+  public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor) {", "+    VendorType vendor = VendorType.UNKNOWN;", "+    String vendorString = null;", "+    if (java_runtime_name.toLowerCase().contains(\"openjdk\")) {", "+      vendor = VendorType.OPENJDK;", "+      vendorString = \"OpenJDK\";", "+    }", "+    else if (java_vm_vendor.toLowerCase().contains(\"apple\")) {", "+      vendor = VendorType.APPLE;", "+      vendorString = \"Apple\";", "+    }", "+    else if (java_vm_vendor.toLowerCase().contains(\"sun\")) {", "+      vendor = VendorType.SUN;", "+      vendorString = \"Sun\";", "+    }", "+    ", "-    int dash = text.indexOf('-');", "-    if (dash == -1) { number = text; typeString = null; }", "-    else { number = text.substring(0, dash); typeString = text.substring(dash+1); }", "+    int dash = java_version.indexOf('-');", "+    if (dash == -1) { number = java_version; typeString = null; }", "+    else { number = java_version.substring(0, dash); typeString = java_version.substring(dash+1); }", "-    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "+    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "+                                             ReleaseType.STABLE, null,", "+                                             vendor, vendorString); }", "-    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "+    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "+                                             ReleaseType.STABLE, null,", "+                                             vendor, vendorString); }", "-      return new FullVersion(version, maintenance, update, type, typeString);", "+      return new FullVersion(version, maintenance, update,", "+                             type, typeString,", "+                             vendor, vendorString);", "-    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0, ReleaseType.STABLE, null); }", "+    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0,", "+                                                             ReleaseType.STABLE, null,", "+                                                             vendor, vendorString); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03a0b3e9e8cb49a04d1986c03fcbed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessChain.java", "commitBeforeChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "commitAfterChange": "fdb0eba529d65804f971cdb52c673713ef0d4616", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ProcessChain(ProcessCreator[] pcs)", "signatureAfterChange": "   public ProcessChain(ProcessCreator[] pcs)", "diff": ["+", "+    _combinedInputStream = new PipedInputStream();", "+    try {", "+      _combinedStdOutStream = new PipedOutputStream(_combinedInputStream);", "+      _combinedInputStream.connect(_combinedStdOutStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+    _combinedErrorStream = new PipedInputStream();", "+    try {", "+      _combinedStdErrStream = new PipedOutputStream(_combinedErrorStream);", "+      _combinedErrorStream.connect(_combinedStdErrStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+", "-                                                        PROCESS_CHAIN_THREAD_GROUP);", "-      _stdOutRedirectors.add(r);", "+                                                        new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "-                                   PROCESS_CHAIN_THREAD_GROUP);", "-      _stdErrRedirectors.add(r);", "+                                   new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "+    // now pipe output from the last process into our output streams", "+    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+(_processes.length-1),", "+                                                      _processes[_processes.length-1].getInputStream(),", "+                                                      _combinedStdOutStream,", "+                                                      new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();", "+    r = new StreamRedirectThread(\"stderr Redirector \"+(_processes.length-1),", "+                                 _processes[_processes.length-1].getErrorStream(),", "+                                 _combinedStdErrStream,", "+                                 new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();"]}], "num": 444}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "751da5de87de498fd91403ef13ac7cf9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ea359f19aeef4c505daf18591d1909", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "4fb080a38871d6561e99bfdfdb664ff987fb15c5", "commitAfterChange": "d8298bba22e8675e12094f851d61d88ab6c6f68a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public R getRegionAt(OpenDefinitionsDocument odd, int offset)", "signatureAfterChange": "   public R getRegionAt(OpenDefinitionsDocument odd, int start, int end)", "diff": ["+    */", "+  public R getRegionAt(OpenDefinitionsDocument odd, int start, int end) {", "+    final int lineStartOffset = odd.getLineStartPos(start);", "+    final int lineEndOffset = odd.getLineEndPos(end);", "+    // get all the regions after the beginning of the start line and before the end of the end line", "+    SortedSet<R> range = getRangeSet((R) newDocumentRegion(odd, lineStartOffset, lineStartOffset),", "+                                     (R) newDocumentRegion(odd, lineEndOffset+1, lineEndOffset+1));", "+    if (range.isEmpty()) return null;", "-      */", "-    public R getRegionAt(OpenDefinitionsDocument odd, int offset) {", "-      ", "-      @SuppressWarnings(\"unchecked\")", "-      SortedSet<R> tail = getTailSet((R) newDocumentRegion(odd, offset, offset));", "-      if (tail.isEmpty()) return null;", "-      R match = tail.first();", "-      if (match.getStartOffset() == offset) return match;", "-      return null;", "-    }", "+    // now see if there is a region that overlaps with the region [start,end]", "+    for(R r: range) {", "+      final int rStart = r.getStartOffset();", "+      final int rEnd = r.getEndOffset();", "+      // is rStart not past the [start,end] region?", "+      if  (rStart<=end) {", "+        // is rEnd inside [start,end]?", "+        if ((rEnd>=start) && (rEnd<=end)) {", "+//          // r contained? [start...<rStart...rEnd>...end]", "+//          if (rStart>=start) { return r; }", "+          // r overlaps left? <rStart...[start...rEnd>...end]", "+          if (rStart<=start) { return r; }", "+        }", "+        // is rEnd on the right side of [start,end]?", "+        else if ((rEnd>=start) && (rEnd>=end)) {", "+          // r encloses? <rStart...[start...end]...rEnd>", "+          if (rStart<=start) { return r; }", "+          // r overlaps right? [start...<rStart...end]...rEnd>", "+          if (rStart>=start) { return r; }", "+        }", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b72360681a93676020169953dd02f04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ReverseHighlighter.java", "commitBeforeChange": "5fa1752ae0f197cbe974a5ad1eec127df709c400", "commitAfterChange": "8b8285e360aa3c4ce7b223a60c5075eba9d98439", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Object addHighlight(int p0, int p1, Highlighter.HighlightPainter p) throws BadLocationException", "signatureAfterChange": "   public Object addHighlight(int p0, int p1, Highlighter.HighlightPainter p) throws BadLocationException", "diff": ["-    int insertPos = 0;", "-    if ((!(p instanceof DefaultFrameHighlightPainter)) && (!(p instanceof DefaultUnderlineHighlightPainter))) {", "+    int insertPos = highlights.size();", "+    /*if ((!(p instanceof DefaultFrameHighlightPainter)) && (!(p instanceof DefaultUnderlineHighlightPainter))) {", "-      for(HighlightInfo hli: highlights) {", "+      while (insertPos>0) {", "+        HighlightInfo hli = highlights.elementAt( insertPos-1 );", "-        ++insertPos;", "+        --insertPos;", "+    }*/", "+    if (p instanceof DrJavaHighlightPainter) {", "+      while (insertPos>0) {", "+        HighlightInfo hli = highlights.elementAt( insertPos-1 );", "+        if (hli.getPainter() instanceof DrJavaHighlightPainter)", "+          --insertPos;", "+        else break;", "+      }", "+    } else if (p instanceof DefaultHighlightPainter) {", "+      while (insertPos>0) {", "+        HighlightInfo hli = highlights.elementAt( insertPos-1 );", "+        if (hli.getPainter() instanceof DefaultHighlightPainter)", "+          --insertPos;", "+        else break;", "+      }", "+    } else if (p instanceof DefaultFrameHighlightPainter) {", "+      while (insertPos>0) {", "+        HighlightInfo hli = highlights.elementAt( insertPos-1 );", "+        if (hli.getPainter() instanceof DefaultHighlightPainter || hli.getPainter() instanceof DefaultFrameHighlightPainter)", "+          --insertPos;", "+        else break;", "+      }", "+    } else {", "+      insertPos = 0;", "+    //_log.log(p.toString() + \", pos: \" + insertPos);"]}], "num": 16180}
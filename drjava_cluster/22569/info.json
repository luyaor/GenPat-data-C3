{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "084bdef47c70620d59cece3d7bb7008c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3fd1ba3dd73407b307c19d5c645c2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CommandLineTest.java", "commitBeforeChange": "0a16594b9476a5c9cc31dd37e345bf51d1d17aa2", "commitAfterChange": "1937cfb40412f48e6d6aafba8466e505fc224ed5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testDotPaths()", "signatureAfterChange": "   public void testDotPaths()", "diff": ["-    File relativeFile = new File(newDirectory, \"./X.java\");", "-    File relativeFile2 = new File(newDirectory, \"./Y.java\");", "-    File relativeFile3 = new File(newDirectory, \"childDir/../Z.java\");", "+    File relativeFile = new File(newDirectory, \".\"+FS+\"X.java\");", "+    File relativeFile2 = new File(newDirectory, \".\"+FS+\"Y.java\");", "+    File relativeFile3 = new File(newDirectory, \"childDir\"+FS+\"..\"+FS+\"Z.java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "754d3eb3358c7eae284c43dde2e81c1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          List<String> classpath,                          final JavadocListener listener)     throws IOException", "signatureAfterChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          List<String> classpath,                          final JavadocListener listener)     throws IOException", "diff": ["-            (\"The destination directory you have chosen\\n\" +", "-             \"does not exist.  Would you like to create it?\",", "+            (\"The directory you chose does not exist:\\n\" +", "+             \"'\" + destDir + \"'\\n\" +", "+             \"Would you like to create it?\",", "-          select.warnUser(\"The file you have chosen is not a directory.\\n\" +", "+          select.warnUser(\"The file you chose is not a directory:\\n\" +", "+                          \"'\" + destDir + \"'\\n\" +", "-          select.warnUser(\"The destination directory you have chosen is\\n\" +", "-                          \"not writeable. Please choose another directory.\",", "+          select.warnUser(\"The directory you chose is not writable:\\n\" +", "+                          \"'\" + destDir + \"'\\n\" +", "+                          \"Please choose another directory.\",", "-    new Thread() {", "+    new Thread(\"DrJava Javadoc Thread\") {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88278bc7d32f2922e19f261c1d9beaa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public TypeData complexSuperConstructorInvocationAllowed(ComplexSuperConstructorInvocation that)", "signatureAfterChange": "   public TypeData complexSuperConstructorInvocationAllowed(ComplexSuperConstructorInvocation that)", "diff": ["-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.  The class \" + _data.getSymbolData().getName() + \" does not have a super class, so you cannot do this here\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.  The class \" + _data.getSymbolData().getName() + ", "+                \" does not have a super class, so you cannot do this here\", ", "+                that);", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.  The super class \" + superClass.getName() + \" does not have an outer class, so you cannot do this here\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.  The super class \" + superClass.getName() ", "+                  + \" does not have an outer class, so you cannot do this here\", ", "+                that);", "-    ", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.\", ", "+                that);", "-    ", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.  The class or interface \" + enclosingResult.getSymbolData().getName() + \" is not the outer class of the super class \" + superClass.getName(), that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.  The class or interface \" ", "+                  + enclosingResult.getSymbolData().getName() + \" is not the outer class of the super class \" ", "+                  + superClass.getName(), ", "+                that);", "-    ", "-      _addError(\"A qualified super constructor invocation can only be made from the context of an instance of the outer class of the super class.  You have specified a type name\", that);", "+      _addError(\"A qualified super constructor invocation can only be made from the context of an instance of the \"", "+                  + \"outer class of the super class.  You have specified a type name\", ", "+                that);", "-      ", "-      ", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of a non-static super class from the context of its outer class.  The super class \" + superClass.getName() + \" is a static inner class\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of a non-static \"", "+                  + \"super class from the context of its outer class.  The super class \" + superClass.getName() ", "+                  + \" is a static inner class\",", "+                that);", "-", "-    ", "-", "-", "-    "]}], "num": 22569}
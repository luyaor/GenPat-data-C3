{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0f052e155ef366bd9e8c580e7e2505f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b032c93522d921b79dd1140ae902c4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7228cea597c372946661a7e1f1db20fd24b9dee1", "commitAfterChange": "8bb2649bd077e2bf6ccaf611ff49da8ad083e7b7", "methodNumberBeforeChange": 414, "methodNumberAfterChange": 415, "signatureBeforeChange": "   private void _setUpTabs()", "signatureAfterChange": "   private void _setUpTabs()", "diff": ["-//        Utilities.showDebug(\"MainFrame.stateChanged called with event\");", "+//        Utilities.show(\"_tabbedPane.stateChanged called with event\");", "-        if (_tabbedPane.getSelectedComponent() == _consoleScroll)", "+        if (_tabbedPane.getSelectedIndex() == INTERACTIONS_TAB) {", "-          SwingUtilities.invokeLater(new Runnable() { public void run() { _consolePane.requestFocusInWindow(); } });", "-          ", "+//          System.err.println(\"Interactions Container Selected\");", "+          _interactionsContainer.setVisible(true);  // kluge to overcome subtle focus bug", "+          EventQueue.invokeLater(new Runnable() { public void run() { _interactionsContainer.requestFocusInWindow(); } });", "+        }", "+        else if (_tabbedPane.getSelectedIndex() == CONSOLE_TAB) {", "+          // Use SwingUtilities because this action must execute AFTER all pending events in the event queue", "+//          System.err.println(\"Console Scroll Selected\");", "+          EventQueue.invokeLater(new Runnable() { public void run() { _consoleScroll.requestFocusInWindow(); } });", "+        }", "+    ", "+    _interactionsContainer.addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) { ", "+        EventQueue.invokeLater(new Runnable() { ", "+          public void run() {", "+//            System.err.println(\"Requesting focus in interactions pane\");", "+            _interactionsPane.requestFocusInWindow(); ", "+          }", "+        });", "+      }", "+    });", "-    _tabbedPane.setSelectedIndex(0);", "+    _tabbedPane.setSelectedIndex(INTERACTIONS_TAB);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f025efb9d55c795dd50b1c07059990f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": "   void _gotoFileUnderCursor()", "signatureAfterChange": "   void _gotoFileUnderCursor()", "diff": ["-//        boolean docChanged = !pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "+        boolean docChanged = !pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "-//        if (docChanged) {", "-//          // defer executing this code until after active document switch (if any) is complete", "-//          EventQueue.invokeLater(new Runnable() {", "-//            public void run() { addToBrowserHistory(); } });", "-//        }", "+        if (docChanged) { // defer executing this code until after active document switch is complete", "+            EventQueue.invokeLater(new Runnable() { public void run() { addToBrowserHistory(); } });", "+        }", "-//          boolean docChanged = !pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "+          boolean docChanged = !pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "-//          if (docChanged) {", "-//            // defer executing this code until after active document switch (if any) is complete", "-//            EventQueue.invokeLater(new Runnable() { public void run() { addToBrowserHistory(); } });", "-//          }", "+          if (docChanged) { // defer executing this code until after active document switch is complete", "+              EventQueue.invokeLater(new Runnable() { public void run() { addToBrowserHistory(); } });", "+          }", "-          while(mask.length()>0) {", "+          while (mask.length()>0) {"]}], "num": 2959}
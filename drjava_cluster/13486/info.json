{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3db6eac8d86147e024e29f990b5fc082", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f5222939ab778037bfa816f4d618950", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 182, "methodNumberAfterChange": 183, "signatureBeforeChange": "     private void _setUpPanes()", "signatureAfterChange": "     private void _setUpPanes()", "diff": ["-        _debugPanel.setPreferredSize(_debugPanel.getMinimumSize());", "+        ", "+        // Set the panel's size.", "+        int debugHeight = ", "+          DrJava.getConfig().getSetting(DEBUG_PANEL_HEIGHT).intValue();", "+        Dimension debugMinSize = _debugPanel.getMinimumSize();", "+        ", "+        // TODO: check bounds compared to entire window.", "+        if ((debugHeight > debugMinSize.height)) {", "+          debugMinSize.height = debugHeight;", "+        }", "+        _debugPanel.setPreferredSize(debugMinSize);", "-    _mainSplit.setDividerLocation(2*getHeight()/3);", "+//    int tabHeight = DrJava.getConfig().getSetting(TABS_HEIGHT).intValue();", "+    ", "+    // 2*getHeight()/3", "+    _mainSplit.setDividerLocation(_mainSplit.getHeight() - 132);", "+//    _mainSplit.setDividerLocation(_mainSplit.getHeight() - tabHeight);", "-    _docSplitPane.setDividerLocation(DOC_LIST_WIDTH);", "+    ", "+    int docListWidth = DrJava.getConfig().getSetting(DOC_LIST_WIDTH).intValue();", "+    ", "+    // TODO: Check bounds.", "+    _docSplitPane.setDividerLocation(docListWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0e9631c4f903dae269c1bf4f2916c92", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     protected String _getNumErrorsMessage(String failureName, String failureMeaning)", "signatureAfterChange": "     protected String _getNumErrorsMessage(String failureName, String failureMeaning)", "diff": ["-     */", "+    /** Gets the message indicating the number of errors and warnings.*/", "-      StringBuffer numErrMsg = new StringBuffer(\"\" + _numErrors);", "-      numErrMsg.append(\" \" + failureName);", "-      if (_numErrors > 1) {", "-        numErrMsg.append(\"s\");", "+      StringBuffer numErrMsg;", "+      ", "+      /** Used for display purposes only */", "+      int numCompErrs = getErrorModel().getNumCompErrors();", "+      int numWarnings = getErrorModel().getNumWarnings();     ", "+      ", "+      if (!getErrorModel().hasOnlyWarnings()) {", "+        numErrMsg = new StringBuffer(numCompErrs + \" \" + failureName);   //failureName = error or test (for compilation and JUnit testing respectively)", "+        if (numCompErrs > 1) numErrMsg.append(\"s\");", "+        if (numWarnings > 0) numErrMsg.append(\" and \" + numWarnings + \" warning\");          ", "+      ", "+      else  numErrMsg = new StringBuffer(numWarnings + \" warning\"); ", "+      ", "+      if (numWarnings > 1) numErrMsg.append(\"s\");", "+     "]}], "num": 13486}
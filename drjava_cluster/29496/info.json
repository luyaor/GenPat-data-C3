{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7581f726d4ed0344aef14ae7ffa9227", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14730a958004d4dcb8760508d7e3e702", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "commitAfterChange": "c0ad820565377d42d023afeab71166682f497054", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineIndentAfterScroll() throws BadLocationException", "diff": ["-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "-", "+    ", "-", "-    int oldPos;", "-    int newPos = 20;", "-", "-    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL, new Integer(2));", "+    int oldPos;", "+    final int newPos = 20;", "+    ", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    ", "+    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL, new Integer(2));", "-    pane.endCompoundEdit();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        pane.setCaretPosition(0);", "+        pane.endCompoundEdit(); } ", "+    });", "+    ", "-", "-    pane.setCaretPosition(0);", "+    ", "-", "-    pane.setCaretPosition(newPos);", "-    doc.getUndoManager().undo();", "-    assertEquals(\"Should have undone.\", text, doc.getText());", "-    assertEquals(\"Undo should have restored caret position.\", oldPos, pane.getCaretPosition());", "+    System.err.println(\"Old position is: \" + oldPos);", "-    pane.setCaretPosition(newPos);", "-    doc.getUndoManager().redo();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        pane.setCaretPosition(newPos);", "+        System.err.println(\"New position is: \" + pane.getCaretPosition());", "+      }", "+    });", "+    doc.getUndoManager().undo();  ", "+    // Moving this statement inside the invokeAndWait above breaks \"Undo should have restored ...\"  Why?", "+    assertEquals(\"Should have undone.\", text, doc.getText());", "+    Utilities.clearEventQueue();", "+    ", "+    int rePos = pane.getCaretPosition();", "+    System.err.println(\"Restored position is: \" + rePos);", "+    assertEquals(\"Undo should have restored caret position.\", oldPos, rePos);", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        pane.setCaretPosition(newPos);", "+        doc.getUndoManager().redo();", "+      }", "+    });", "-//    _log.log(\"testMultilineIndentAfterScroll completed\");", "+    _log.log(\"testMultilineIndentAfterScroll completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad0a35a305cb008fbf8fd43c3e248fc5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "ddbef72a194d17966584ef9d18603b05f8480094", "commitAfterChange": "768f383e38575107c315a182f5f4f8b4961ac9d0", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws DocumentAdapterException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws DocumentAdapterException", "diff": ["-    int pos = _doc.getDocLength() - 5;", "-    _pane.setCaretPosition(pos);", "+    final int pos = _doc.getDocLength() - 5;", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(pos); } });", "-    assertEquals(\"caret should be in correct position\",", "-                 pos + 2, _pane.getCaretPosition());", "+     Utilities.clearEventQueue();", "+    assertEquals(\"caret should be in correct position\", pos + 2, _pane.getCaretPosition());", "-    _pane.setCaretPosition(_doc.getPromptPos());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(_doc.getPromptPos()); } });", "-    assertEquals(\"caret should be at prompt\",", "-                 _doc.getPromptPos(), _pane.getCaretPosition());", "+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be at prompt\", _doc.getPromptPos(), _pane.getCaretPosition());", "-    _pane.setCaretPosition(0);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(0); } });", "-    assertEquals(\"caret should be at prompt\",", "-                 _doc.getPromptPos(), _pane.getCaretPosition());", "+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be at prompt\", _doc.getPromptPos(), _pane.getCaretPosition());", "-    pos = _doc.getPromptPos();", "+    final int newPos = _doc.getPromptPos();", "-    _pane.setCaretPosition(pos+1);", "-    _doc.insertText(pos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "-    assertEquals(\"caret should be immediately after the d\",", "-                 pos + 1, _pane.getCaretPosition());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos+1); } });", "+    _doc.insertText(newPos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be immediately after the d\", newPos + 1, _pane.getCaretPosition());"]}], "num": 29496}
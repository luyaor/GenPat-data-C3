{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5f3e75dfd528946e67aed975227511b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0146734045fa0c4c16cd1e1c2fed8ff2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "297435705dbd8bf9d631995d57ce87c743b50405", "commitAfterChange": "1baaca56848b77e4ea889da1ec6855791456c263", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   private void _ok()", "signatureAfterChange": "   private void _ok()", "diff": ["+      HashSet<String> _exceptions = new HashSet<String>();", "-            if(files[i].isDirectory()){", "-              jarFile.addDirectoryRecursive(files[i], files[i].getName(), allFilter);", "-            }else{", "-              jarFile.addFile(files[i], \"\", files[i].getName());", "+            try {", "+              if(files[i].isDirectory()){", "+                LOG.log(\"jarFile.addDirectoryRecursive(\"+files[i]+\")\");", "+                jarFile.addDirectoryRecursive(files[i], files[i].getName(), allFilter);", "+              }else{", "+                LOG.log(\"jarFile.addFile(\"+files[i]+\")\");", "+                jarFile.addFile(files[i], \"\", files[i].getName());", "+              }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "-            if (files[i].isDirectory()) {", "-              jarFile.addDirectoryRecursive(files[i], files[i].getName(), classFilter);", "+            try {", "+              if (files[i].isDirectory()) {", "+                LOG.log(\"jarFile.addDirectoryRecursive(\"+files[i]+\")\");", "+                jarFile.addDirectoryRecursive(files[i], files[i].getName(), classFilter);", "+              }", "+              else {", "+                LOG.log(\"jarFile.addFile(\"+files[i]+\")\");", "+                jarFile.addFile(files[i], \"\", files[i].getName());", "+              }", "-            else {", "-              jarFile.addFile(files[i], \"\", files[i].getName());", "-            }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "-            catch (IOException e) {", "-              e.printStackTrace();", "-              throw new UnexpectedException(e);", "-            }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "+            LOG.log(\"(_jarClasses.isSelected() && _jarSources.isSelected()) || _jarAll.isSelected()\");", "+              LOG.log(\"jarAll\");", "+              LOG.log(\"binRoot=\"+binRoot);", "+              LOG.log(\"root=\"+_model.getProjectRoot());", "+              LOG.log(\"FileOps.isAncestorOf(_model.getProjectRoot(),binRoot)=\"+FileOps.isAncestorOf(_model.getProjectRoot(),binRoot));", "+              LOG.log(\"mainJar=\"+mainJar);", "+              LOG.log(\"jarOut=\"+jarOut);", "-              if(!(binRoot.equals(_model.getProjectRoot())))", "+              if(!_model.getProjectRoot().equals(binRoot))", "+                LOG.log(\"jarBuildDirectory\");", "-          e.printStackTrace();", "-          ", "+          // e.printStackTrace();", "-          if (_jarClasses.isSelected() && _makeExecutable.isSelected()) {", "+          if (_exceptions.size()>0) {", "+            ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+              .setOwner(JarOptionsDialog.this)", "+              .setTitle(\"Problems Creating Jar\")", "+              .setText(\"There were problems creating this jar file, but DrJava was probably able to recover.\")", "+              .setItems(new ArrayList<String>(_exceptions))", "+              .setMessageType(JOptionPane.ERROR_MESSAGE)", "+              .build();", "+            ", "+            Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+            dialog.showDialog();", "+          }", "+          if ((_jarAll.isSelected() || _jarClasses.isSelected()) && _makeExecutable.isSelected()) {", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this, \"An error occured while creating the jar file. This could be because the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.ERROR_MESSAGE);", "-            JarOptionsDialog.this.setVisible(false);", "-          }else{", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this, \"The supplied manifest does not conform to the 1.0 Manifest format specification.\", \"Error: Malformed Manifest\", JOptionPane.ERROR_MESSAGE);", "+            if (_exceptions.size()>0) {", "+              ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+                .setOwner(JarOptionsDialog.this)", "+                .setTitle(\"Error Creating Jar\")", "+                .setText(\"<html>An error occured while creating the jar file. This could be because the file<br>\"+", "+                         \"that you are writing to or the file you are reading from could not be opened.</html>\")", "+                .setItems(new ArrayList<String>(_exceptions))", "+                .setMessageType(JOptionPane.ERROR_MESSAGE)", "+                .build();", "+              ", "+              Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+              dialog.showDialog();", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(JarOptionsDialog.this, ", "+                                            \"An error occured while creating the jar file. This could be because the file that you \"+", "+                                            \"are writing to or the file you are reading from could not be opened.\", ", "+                                            \"Error Creating Jar\",", "+                                            JOptionPane.ERROR_MESSAGE);", "+            }", "-          ", "+          else {", "+            if (_exceptions.size()>0) {", "+              ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+                .setOwner(JarOptionsDialog.this)", "+                .setTitle(\"Error Creating Jar\")", "+                .setText(\"The supplied manifest does not conform to the 1.0 Manifest format specification\")", "+                .setItems(new ArrayList<String>(_exceptions))", "+                .setMessageType(JOptionPane.ERROR_MESSAGE)", "+                .build();", "+              ", "+              Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+              dialog.showDialog();", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(JarOptionsDialog.this, \"The supplied manifest does not conform to the 1.0 Manifest format specification.\",", "+                                            \"Error Creating Jar\",", "+                                            JOptionPane.ERROR_MESSAGE);", "+            }", "+          }", "+          JarOptionsDialog.this.setVisible(false);  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261651cb1757a9f207eaad2971e8be22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "3bb1b911d950f482b9e797d7de6104b1444684b7", "commitAfterChange": "045c3614cbae106e482ef86c608a22bd0f55ebc4", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _doStartup()", "signatureAfterChange": "   private void _doStartup()", "diff": ["-      boolean concJUnitLocationConfigured =", "-        DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+      // ConcJUnit is available if (a) the built-in framework is used, or (b) the external", "+      // framework is a valid ConcJUnit jar file.", "+      boolean concJUnitAvailable =", "+        !DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) ||", "-      if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) && // enabled", "+      if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+            equals(OptionConstants.ConcJUnitCheckChoices.ALL) && // \"lucky\" enabled", "-        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+        DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "+                                      OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-      if (concJUnitLocationConfigured && // ConcJUnit configured and enabled", "-          rtLocationConfigured && // \"lucky\" warnings configured", "-          DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) { // and enabled", "+      if (concJUnitAvailable && // ConcJUnit available", "+          rtLocationConfigured && // runtime configured", "+          DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+            equals(OptionConstants.ConcJUnitCheckChoices.ALL)) { // and \"lucky\" enabled", "-          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+          DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "+                                        OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-    invokeSlave(new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs));", "+    JVMBuilder jvmb = new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs);", "+    ", "+    // extend classpath if JUnit/ConcJUnit location specified", "+    File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "+    boolean junitLocationConfigured =", "+      (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(junitLocation) ||", "+       edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation));", "+    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) && // enabled", "+        !junitLocationConfigured && // not valid ", "+        (junitLocation != null) && // not null", "+        (!FileOps.NULL_FILE.equals(junitLocation)) && // not NULL_FILE", "+        (junitLocation.exists())) { // but exists", "+      // invalid file, clear setting", "+      DrJava.getConfig().setSetting(OptionConstants.JUNIT_LOCATION_ENABLED, false);", "+      junitLocationConfigured = false;", "+    }", "+    ArrayList<File> extendedClassPath = new ArrayList<File>();", "+    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+        junitLocationConfigured) {", "+      extendedClassPath.add(junitLocation);", "+    }", "+    for(File f: jvmb.classPath()) { extendedClassPath.add(f); }", "+    jvmb = jvmb.classPath(edu.rice.cs.plt.iter.IterUtil.asSizedIterable(extendedClassPath));", "+    ", "+    // add Java properties controlling ConcJUnit", "+    java.util.Properties props = jvmb.propertiesCopy();", "+    ", "+    // settings are mutually exclusive", "+    boolean all = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.ALL);", "+    boolean noLucky = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "+    boolean onlyThreads = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.ONLY_THREADS);", "+    boolean none = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.NONE);", "+    // \"threads\" is enabled as long as the setting isn't NONE", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.threads.enabled\",", "+                      new Boolean(!none).toString());", "+    // \"join\" is enabled for ALL and NO_LUCKY", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.join.enabled\",", "+                      new Boolean(all || noLucky).toString());", "+    // \"lucky\" is enabled only for ALL", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.lucky.enabled\",", "+                      new Boolean(all).toString());", "+    ", "+    jvmb = jvmb.properties(props);", "+    ", "+    invokeSlave(jvmb);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dbe0b4dfe21ae40354900f2e1702e81", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "14370880ba431a91577f4a6da91962f3187c5d5d", "commitAfterChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      public void xtestDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["-  public void xtestDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException{", "+  public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException {", "+    ", "+    DocChangeListener listener = new DocChangeListener();", "+    ", "-      public void finalized(FinalizationEvent<DefinitionsPane> e) {", "-        _finalPaneCt++;", "-//        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "-      }", "+      public void finalized(FinalizationEvent<DefinitionsPane> e) { _finalPaneCt++; }", "-      public void finalized(FinalizationEvent<DefinitionsDocument> e) {", "-        _finalDocCt++;", "-      }", "+      public void finalized(FinalizationEvent<DefinitionsDocument> e) { _finalDocCt++; }", "-    SingleDisplayModel _model = _frame.getModel();", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    final SingleDisplayModel _model = _frame.getModel();", "+    _model.addListener(listener);", "+    ", "+    listener.reset();", "+    OpenDefinitionsDocument d1 = _model.newFile();", "+    d1.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p1 = _frame.getCurrentDefPane();", "+    p1.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p1.hashCode());", "+    assertEquals(\"Doc1 setup correctly\", d1, p1.getOpenDefDocument());", "+", "+    listener.reset();", "+    OpenDefinitionsDocument d2 = _model.newFile();", "+    d2.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p2 = _frame.getCurrentDefPane();", "+    p2.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p2.hashCode());", "+    assertEquals(\"Doc2 setup correctly\", d2, p2.getOpenDefDocument());", "+    ", "+    listener.reset();", "+    OpenDefinitionsDocument d3 = _model.newFile();", "+    d3.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p3 = _frame.getCurrentDefPane();", "+    p3.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p3.hashCode()); ", "+    assertEquals(\"Doc3 setup correctly\", d3, p3.getOpenDefDocument());", "+       ", "+    listener.reset();", "+    OpenDefinitionsDocument d4 = _model.newFile();", "+    d4.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p4 = _frame.getCurrentDefPane();", "+    p4.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p4.hashCode());", "+    assertEquals(\"Doc4 setup correctly\", d4, p4.getOpenDefDocument());", "+        ", "+    listener.reset();", "+    OpenDefinitionsDocument d5 = _model.newFile();", "+    d5.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p5 = _frame.getCurrentDefPane();", "+    p5.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p5.hashCode()); ", "+    assertEquals(\"Doc5 setup correctly\", d5, p5.getOpenDefDocument());   ", "+    ", "+    listener.reset();", "+    OpenDefinitionsDocument d6 = _model.newFile();", "+    d6.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p6 = _frame.getCurrentDefPane();", "+    p6.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p6.hashCode()); ", "+    assertEquals(\"Doc6 setup correctly\", d6, p6.getOpenDefDocument()); ", "-    _model.closeAllFiles();", "+    p1 = p2 = p3 = p4 = p5 = p6 = null;", "+    d1 = d2 = d3 = d4 = d5 = d6 = null;", "+//    _model.newFile();  // create a new document and pane for the model to hold as active.", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.closeAllFiles(); } });", "+    Utilities.clearEventQueue();", "+    ", "+    assertEquals(\"All files closed\", 7, listener.getClosedCt());  // 7 includes for initial open file", "-    while (ct < 10 && (_finalDocCt != 6 || _finalPaneCt != 6));", "+    while (ct < 10 && (_finalDocCt != 6 /* || _finalPaneCt != 6*/ ));", "-//    if (ct > 1) System.err.println(\"testDocumentPaneMemoryLeak required \" + ct + \" iterations\");", "+    if (ct > 1) System.out.println(\"testDocumentPaneMemoryLeak required \" + ct + \" iterations\");", "-    assertEquals(\"all the panes should have been garbage collected\", 6, _finalPaneCt);", "+//    assertEquals(\"all the panes should have been garbage collected\", 6, _finalPaneCt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f1fdc90a4b1e5b83a97a1c5693a90f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static Test suite()", "signatureAfterChange": "   public void testStaticFieldsConsistent()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-  public static Test suite() {", "-    return new TestSuite(DebugTest.class);", "-  }", "+   */", "+  public void testStaticFieldsConsistent()", "+    throws DebugException, BadLocationException, DocumentAdapterException,", "+    IOException, InterruptedException", "+  {", "+    if (printMessages) {", "+      System.out.println(\"----testStaticFieldsConsistent----\");", "+    }", "+    StepTestListener debugListener = new StepTestListener();", "+    ", "+    // Compile the class", "+    File file = new File(_tempDir, \"DrJavaDebugStaticField.java\");", "+    OpenDefinitionsDocument doc = doCompile(CLASS_WITH_STATIC_FIELD, file);", "+    ", "+    _debugger.addListener(debugListener);", "+", "+    // Start debugger", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(1);", "+    ", "+    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4);", "+    debugListener.assertBreakpointSetCount(1);", "+", "+    // Run the foo() method, hitting breakpoint", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java DrJavaDebugStaticField\");", "+      _waitForNotifies(6);  // (suspended, updated, breakpointReached) *2", "+      _notifierLock.wait();", "+    }", "+", "+    DebugThreadData threadA = new DebugThreadData(_debugger.getCurrentThread());", "+    DebugThreadData threadB = new DebugThreadData(_debugger.getThreadAt(1));", "+", "+     if (printMessages) {", "+      System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+    }", "+      ", "+    // Ensure breakpoint is hit", "+    debugListener.assertBreakpointReachedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertCurrThreadResumedCount(0);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertEquals(\"x has correct value at start\", \"0\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"assigning x succeeds\", \"5\", interpret(\"DrJavaDebugStaticField.x = 5\"));", "+    assertEquals(\"assignment reflected in this\", \"5\", interpret(\"this.x\"));", "+", "+    // Step over once", "+    synchronized(_notifierLock){", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(3);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    assertInteractionsContains(\"x == 5\");", "+    assertEquals(\"x retains correct value after step\", \"5\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x after step\", \"5\", interpret(\"this.x\"));", "+", "+    // Step over again", "+    synchronized(_notifierLock) {", "+      _asynchStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) {", "+      System.out.println(\"****\"+getInteractionsText());", "+    }", "+    debugListener.assertStepRequestedCount(2);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(2); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(4);  // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(4);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    assertEquals(\"x has correct value after increment\", \"6\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x after increment\", \"6\", interpret(\"this.x\"));", "+", "+    synchronized(_notifierLock){", "+      _asynchDoSetCurrentThread(threadB);", "+      _waitForNotifies(2);  // updated, suspended", "+      _notifierLock.wait();", "+    }", "+    assertEquals(\"x has correct value in other thread\", \"6\", interpret(\"DrJavaDebugStaticField.x\"));", "+    assertEquals(\"this has correct value for x in other thread\", \"6\", interpret(\"this.x\"));", "+", "+    // Close doc and make sure breakpoints are removed", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(1);  //fires (no waiting)", "+    ", "+    // Shutdown the debugger", "+    if (printMessages) {", "+      System.out.println(\"Shutting down...\");", "+    }", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    ", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) {", "+      System.out.println(\"Shut down.\");", "+    }", "+    _debugger.removeListener(debugListener);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70732c70f902bbc14536f1b298a58832", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "de5d6cb8095b8316a5027b98971107ba8d8608ac", "commitAfterChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 15, "signatureBeforeChange": "              public void debuggerStarted()", "signatureAfterChange": "   public synchronized void testBreakpointsNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-      ", "-      public void debuggerStarted() {", "-        synchronized(_notifierLock) {", "-          debuggerStartedCount++;", "-          if (printEvents) System.out.println(\"debuggerStarted \" + debuggerStartedCount);", "-          _notifyObject(_notifierLock);", "-        }", "-      }", "+  public synchronized void testBreakpointsNonPublicClasses() ", "+    if (printMessages) System.out.println(\"----testBreakpointsNonPublicClasses----\");", "+    BreakpointTestListener debugListener = new BreakpointTestListener();", "+      _debugManager.startup();", "+    _debugManager.toggleBreakpoint(doc,DEBUG_CLASS.indexOf(\"Baz Line 1\"),14);", "+      interpretIgnoreResult(\"new DrJavaDebugClass2().baz()\");", "+    if (printMessages) System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+    assertInteractionsDoesNotContain(\"Baz Line 1\");", "+    if (printMessages) System.out.println(\"----After one resume:\\n\" + getInteractionsText());", "+    assertInteractionsContains(\"Baz Line 1\");", "+    if (printMessages) System.out.println(\"----After second resume:\\n\" + getInteractionsText());", "+    assertInteractionsContains(\"Bar Line 2\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec61b35c644825b8da40334f6f93486", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "ade6daf6528722698c362806dd26e5adcee8870d", "commitAfterChange": "666cd0e1854560c3c8c100e519e7096ee8bf81c6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+    ", "+    /******** Text Field Initializations ********/", "+    // Sets font for the \"Find\" field", "+    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "+    setFieldFont(font);", "+", "+    // Create the Structure for the replace label", "+    _replaceLabelTop = new JLabel(\"Replace\", SwingConstants.RIGHT);", "+    _replaceLabelBot = new JLabel(\"With\", SwingConstants.RIGHT);", "+    ", "+    JPanel replaceLabelPanelTop = new JPanel(new BorderLayout(5,5));", "+    JPanel replaceLabelPanelBot = new JPanel(new BorderLayout(5,5));", "+    JPanel replaceLabelPanel = new JPanel(new GridLayout(2,1));", "+    ", "+    replaceLabelPanelTop.add(_replaceLabelTop, BorderLayout.SOUTH);", "+    replaceLabelPanelBot.add(_replaceLabelBot, BorderLayout.NORTH);", "+    ", "+    replaceLabelPanel.add(replaceLabelPanelTop);", "+    replaceLabelPanel.add(replaceLabelPanelBot);", "+    ", "+    ", "+    // Create the stucture for the find label", "+    _findLabelTop = new JLabel(\"Find\", SwingConstants.RIGHT);", "+    _findLabelBot = new JLabel(\"Next\", SwingConstants.RIGHT);", "+    ", "+    JPanel findLabelPanelTop = new JPanel(new BorderLayout(5,5));", "+    JPanel findLabelPanelBot = new JPanel(new BorderLayout(5,5));", "+    JPanel findLabelPanel = new JPanel(new GridLayout(2,1));", "+    ", "+    findLabelPanelTop.add(_findLabelTop, BorderLayout.SOUTH);", "+    findLabelPanelBot.add(_findLabelBot, BorderLayout.NORTH);", "+    ", "+    findLabelPanel.add(findLabelPanelTop);", "+    findLabelPanel.add(findLabelPanelBot);                     ", "+", "+    ", "+//    // need separate label and field panels so that the find and", "+//    // replace textfields line up", "+//    _labelPanel = new JPanel(new GridLayout(2,1));", "+//    _labelPanel.add(_findLabel);", "+//    _labelPanel.add(_replaceLabel);", "+//    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "+//    _labelPanel.setFocusable(false);", "+    ", "+    /******** Button Panel ********/", "-    ", "-", "-    /******** Text Field Initializations ********/", "-    // Sets font for the \"Find\" field", "-    Font font = DrJava.getConfig().getSetting(FONT_MAIN);", "-    setFieldFont(font);", "-", "-    // Create the Labels", "-    _findLabel = new JLabel(\"Find Next\", SwingConstants.LEFT);", "-    _findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-", "-    _replaceLabel = new JLabel(\"Replace With\", SwingConstants.LEFT);", "-    _replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-    ", "-", "-    // need separate label and field panels so that the find and", "-    // replace textfields line up", "-    _labelPanel = new JPanel(new GridLayout(2,1));", "-    _labelPanel.add(_findLabel);", "-    _labelPanel.add(_replaceLabel);", "-    _labelPanel.setBorder(new EmptyBorder(0,5,0,5)); // 5 pix on sides", "-    _labelPanel.setFocusable(false);", "+    _lowerCheckPanel.setMaximumSize(new Dimension(1000, 40));", "-    _matchCaseAndAllDocsPanel.add(_searchAllDocuments); ", "+    _matchCaseAndAllDocsPanel.add(_searchAllDocuments);", "+    _matchCaseAndAllDocsPanel.setMaximumSize(new Dimension(1000, 40));", "-    ", "-    ", "-    /******** Set up the Panel containing the Text Fields ********/", "-    JPanel fieldsPanel = new JPanel(new GridLayout(2,1));", "-    fieldsPanel.add(_findPane);", "-    fieldsPanel.add(_replacePane);", "+", "+    _findPane.setHorizontalScrollBarPolicy(BorderlessScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    _replacePane.setHorizontalScrollBarPolicy(BorderlessScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    ", "+    JPanel findPanel = new JPanel(new BorderLayout(5,5));", "+    findPanel.add(findLabelPanel, BorderLayout.WEST);", "+    findPanel.add(_findPane, BorderLayout.CENTER);", "+//    findPanel.add(Box.createVerticalGlue());", "+    ", "+    JPanel replacePanel = new JPanel(new BorderLayout(5,5));", "+    replacePanel.add(replaceLabelPanel, BorderLayout.WEST);", "+    replacePanel.add(_replacePane, BorderLayout.CENTER);", "+//    replacePanel.add(Box.createVerticalGlue());", "+        ", "+    /******** Set up the Panel containing the Text Fields ********/", "+    JPanel leftPanel = new JPanel(new GridLayout(1,2,5,5));", "+    leftPanel.add(findPanel);", "+    leftPanel.add(replacePanel);", "-    JPanel optionsPanel = new JPanel(new GridLayout(2,1));", "+    Box optionsPanel = new Box(BoxLayout.Y_AXIS);", "+    optionsPanel.add(Box.createGlue());", "-    midPanel.add(fieldsPanel, BorderLayout.CENTER);", "+    midPanel.add(leftPanel, BorderLayout.CENTER);", "-    _rightPanel.add(_closePanel, BorderLayout.EAST);    ", "+    _rightPanel.add(_closePanel, BorderLayout.EAST); ", "+    ", "+    JPanel newPanel = new JPanel();", "+    newPanel.setLayout(new BoxLayout(newPanel, BoxLayout.Y_AXIS));", "+    newPanel.add(_rightPanel);", "+    newPanel.add(Box.createVerticalStrut(5));", "+    newPanel.add(buttons);", "+    newPanel.add(Box.createVerticalStrut(5));", "+    ", "+    this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));", "+    this.add(Box.createHorizontalStrut(5));", "+    this.add(newPanel);", "-    hookComponents(this, _rightPanel, _labelPanel, buttons);", "+//    hookComponents(this, _rightPanel, new JPanel(), buttons);", "+            updateUI();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7646e56ced3f9ab0d234af02e4aafaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public void testWatches()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 10;\"), 7);", "+    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"innerMethodFoo = 12;\"), 9);", "-      interpretIgnoreResult(\"new Monkey().new MonkeyInner().innerMethod()\");", "+      interpretIgnoreResult(\"new Monkey().new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+    _debugger.addWatch(\"innerInnerFoo\");", "-    // Step over once", "+    // Step to line 10", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch value incorrect\", DebugWatchUndefinedValue.ONLY.toString(), watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", \"12\", watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    // Step over twice", "+    // Step to line 11", "-    // Step over thrice", "+    // Step to line 12", "-    // Step over frice(?)", "+    // Step to line 13", "+    if (printMessages) {", "+      System.out.println(\"fifth step\");", "+    }", "+    // Step to line 14", "+    synchronized(_notifierLock){", "+      _asyncStep(Debugger.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(5);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(5); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(6);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(6);  // fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    ", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch value incorrect\", DebugWatchUndefinedValue.ONLY.toString(), watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", \"13\", watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "+    ", "+    if (printMessages) {", "+      System.out.println(\"sixth step\");", "+    }", "+    // Step into static method (line 15)", "+    synchronized(_notifierLock){", "+      _asyncStep(Debugger.STEP_INTO);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(6); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(7);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(7);  // fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    debugListener.assertCurrThreadDiedCount(0);", "+    ", "+    // Test watches in a static context.", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(1).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(2).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());"]}], "num": 20643}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1c6b469bba19f8be5e4f21c4172d6ab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6abb30167dbe5885fb91bae4c62e0e31", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 289, "methodNumberAfterChange": 346, "signatureBeforeChange": "           public ConstructorInvocation value(DJConstructor k, SignatureChecker checker)", "signatureAfterChange": "     public Iterable<Type> thrownTypes()", "diff": ["+    public Type returnType() { return erase(_delegate.returnType()); }", "+    public Iterable<Type> thrownTypes() { return IterUtil.mapSnapshot(_delegate.thrownTypes(), ERASE); }", "-          new Lambda2<DJConstructor, SignatureChecker, ConstructorInvocation>() {", "-          public ConstructorInvocation value(DJConstructor k, SignatureChecker checker) {", "-            // TODO: Handle the thrown types", "-            return new ConstructorInvocation(k, checker.typeArguments(), checker.arguments(), ", "-                                             k.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e319206662f43926902408b13cfe0b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 364, "signatureBeforeChange": "              @Override public Iterable<StaticFieldReference> forRawClassType(RawClassType t)", "signatureAfterChange": "     public Iterable<Type> thrownTypes()", "diff": ["+    public Iterable<VariableType> declaredTypeParameters() { return _tparams; }", "+    public Iterable<Type> thrownTypes() { return IterUtil.relax(substitute(_delegate.thrownTypes(), _sigma)); }", "-      ", "-      @Override public Iterable<StaticFieldReference> forRawClassType(RawClassType t) {", "-        // TODO: Handle raw member access warnings", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            return IterUtil.make(new StaticFieldReference(f, erase(f.type())));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }"]}], "num": 27430}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc741b9ed2d7b2c368bb912417ac4f52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9581d03b424c0d2f73fef3ee5eb23293", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "3c5a933a3b7bdbbae2845e4b6fe81e012901940b", "commitAfterChange": "98a0206bc90f5eb73be3e2e6e290a67ee1cd136d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-    String className1 = testString.substring(firstIndex, secondIndex);", "-    String className2 = testString.substring(0, firstIndex-1);", "-    if (firstIndex == secondIndex) className = className2;", "-    else className = className1;", "+    if (firstIndex != secondIndex)", "+      className = testString.substring(firstIndex, secondIndex);", "+    else", "+      className = testString.substring(0, firstIndex-1);", "-    /** If the classname is not in the stacktrace, then the test that failed was inherited from a superclass. let's look", "-      * for the classname.", "-      */", "-    if (stackTrace.indexOf(className) == -1) {", "+    /* Check to see if the class and test name appear directly in the stack trace. If", "+     * they don't, then we'll have to do additional work to find the line number. Additionally,", "+     * if the exception occured in a subclass of the test class, we'll need to adjust our conception", "+     * of the class name.", "+     */", "+    int lineNum = -1;", "+    if (stackTrace.indexOf(classNameAndTest) == -1) {", "-      className = trace.substring(0,trace.indexOf(':'));", "-      className = trace.substring(0,trace.lastIndexOf('.'));", "-      classNameAndTest = className + \".\" + testName;", "+      ", "+      // If the exception occurred in a subclass of the test class, then update our", "+      // concept of the class and test name. Otherwise, we're only here to pick up the", "+      // line number.", "+      if (stackTrace.indexOf(className) == -1) {", "+        className = trace.substring(0,trace.lastIndexOf('.'));", "+        classNameAndTest = className + \".\" + testName;", "+      }", "+", "+      try {", "+        lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "+      }", "+      catch (NumberFormatException e) { throw new UnexpectedException(e); }", "-    ", "-    ", "-    int lineNum = _lineNumber(stackTrace, classNameAndTest);", "+    if (lineNum < 0) {", "+      lineNum = _lineNumber(stackTrace, classNameAndTest);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3ba013c8c13223e15e0df8834d3ee8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "b6f32808055835a9481d2cee68a36bc82ce5f558", "commitAfterChange": "3b63bd62ccd1666c210054736f0739b2d5581af4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public String getText(int offset, int len)", "signatureAfterChange": "     public String getText(int offset, int len) throws BadLocationException", "diff": ["-    /* Gets the specified substring of this document; throws an exception if the specification is ill-formed. */", "-    public String getText(int offset, int len) { ", "-      String text = getText();", "+    /* Gets the specified substring of this document; throws BadLocationException if the specification is ill-formed. */", "+    public String getText(int offset, int len) throws BadLocationException { ", "+      final DefinitionsDocument doc = _doc; // create a snapshot of _doc", "+      if (doc == null) {", "+        try { return _rec.getText().substring(offset, offset + len); }", "+        catch(IndexOutOfBoundsException e) { throw new BadLocationException(e.getMessage(), offset); }  ", "+      }", "-      return text.substring(offset, offset + len);", "+      return doc.getText(offset, len); "]}], "num": 9157}
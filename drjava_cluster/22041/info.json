{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbd1a3cdde8693b936f84e094aa4d548", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1337a60e829c7e2227ca7c47d59d4666", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _commentBlock(final int start, final int end)", "signatureAfterChange": "   private void _commentBlock(final int start, final int end)", "diff": ["-    // throwErrorHuh();", "-    //DrJava.consoleOut().println(\"commenting out block of \" + (end-start));", "+    ", "+    writeLock();", "- ", "-      while (walker < endPos.getOffset()) {", "-        setCurrentLocation(walker);", "-        // Keep pointer to walker position that will stay current", "-        // regardless of how commentLine changes things", "-        Position walkerPos = this.createPosition(walker);", "-        // Comment out current line", "-        _commentLine();  // must be atomic", "-", "-        // Move back to walker spot", "-        setCurrentLocation(walkerPos.getOffset());", "-        walker = walkerPos.getOffset();", "-        // Adding 1 makes us point to the first character AFTER the next newline.", "-        // We don't actually move yet. That happens at the top of the loop,", "-        // after we check if we're past the end.", "-        walker += _reduced.getDistToNextNewline() + 1;", "-        //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));", "+      synchronized(_reduced) {", "+        while (walker < endPos.getOffset()) {", "+          setCurrentLocation(walker);", "+          // Keep pointer to walker position that will stay current", "+          // regardless of how commentLine changes things", "+          Position walkerPos = this.createPosition(walker);", "+          // Comment out current line", "+          _commentLine();  // must be atomic", "+          ", "+          // Move back to walker spot", "+          setCurrentLocation(walkerPos.getOffset());", "+          walker = walkerPos.getOffset();", "+          // Adding 1 makes us point to the first character AFTER the next newline.", "+          // We don't actually move yet. That happens at the top of the loop,", "+          // after we check if we're past the end.", "+          walker += _reduced.getDistToNextNewline() + 1;", "+          //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));", "+        }", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    } ", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    finally { writeUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a68f855075f8f568759d88ab6d50eda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private void _uncommentBlock(final int start, final int end)", "signatureAfterChange": "   private void _uncommentBlock(final int start, final int end)", "diff": ["-    // throwErrorHuh();", "-    //DrJava.consoleOut().println(\"uncommenting block of \" + (end-start));", "-    ", "+    writeLock();", "-      // Keep marker at the end. This Position will be the", "-      // correct endpoint no matter how we change the doc", "+      // Keep marker at the end. This Position will be the correct endpoint no matter how we change the doc", "-      while (walker < endPos.getOffset()) {", "-        setCurrentLocation(walker);", "-        // Keep pointer to walker position that will stay current", "-        // regardless of how commentLine changes things", "-        Position walkerPos = this.createPosition(walker);", "-        // uncomment current line", "-        _uncommentLine();", "-        ", "-        // Move back to walker spot", "-        setCurrentLocation(walkerPos.getOffset());", "-        walker = walkerPos.getOffset();", "-        // Adding 1 makes us point to the first character AFTER the next newline.", "-        // We don't actually move yet. That happens at the top of the loop,", "-        // after we check if we're past the end.", "-        walker += _reduced.getDistToNextNewline() + 1;", "-        //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));", "+      synchronized (_reduced) {", "+        while (walker < endPos.getOffset()) {", "+          setCurrentLocation(walker);", "+          // Keep pointer to walker position that will stay current", "+          // regardless of how commentLine changes things", "+          Position walkerPos = this.createPosition(walker);", "+          // uncomment current line", "+          _uncommentLine();", "+          ", "+          // Move back to walker spot", "+          setCurrentLocation(walkerPos.getOffset());", "+          walker = walkerPos.getOffset();", "+          // Adding 1 makes us point to the first character AFTER the next newline.", "+          // We don't actually move yet. That happens at the top of the loop,", "+          // after we check if we're past the end.", "+          walker += _reduced.getDistToNextNewline() + 1;", "+          //DrJava.consoleOut().println(\"progress: \" + (100*(walker-start)/(end-start)));", "+        }", "-    } catch (BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "+    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    finally { writeUnlock(); }", "+  }"]}], "num": 22041}
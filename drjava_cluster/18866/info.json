{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68c954479a66ace3f9d817ef12ca430f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2faae6de1d3ab179b8cb538e6e9c10a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public int getWhiteSpace()", "signatureAfterChange": "   private int getWhiteSpace()", "diff": ["+    */", "+  private int getWhiteSpace() {", "+    acquireReadLock();", "+    String text = \"\";", "+    try {", "+      synchronized (_reduced) {", "+        text = getText(_currentLocation, getLength() - _currentLocation); ", "+      }", "-    */", "-  public int getWhiteSpace() {", "-    try { return  getWhiteSpaceBetween(0, getLength() - _currentLocation); } ", "-    catch (BadLocationException e) { e.printStackTrace(); }", "-    return  -1;", "-  }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    finally { releaseReadLock(); }", "+    ", "+    while (i < text.length() && text.charAt(i) == ' ' ) i++;", "+    return i;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2ca502bc276c323b74d04745902aacb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/BrowserHistoryManager.java", "commitBeforeChange": "29114a3ab27f49e46885f181f9f058e018ee6b61", "commitAfterChange": "667a3b3eeb7df33831045c52d97320979614b89d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void addBrowserRegion(final BrowserDocumentRegion r)", "signatureAfterChange": "      public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier)", "diff": ["-  public synchronized void addBrowserRegion(final BrowserDocumentRegion r) {", "-    ", "-    // ignore addition if the same region is on top of region \"stack\"", "-    if (! _regions.isEmpty() && equals(r, _regions.last())) return;", "+  ", "+  public synchronized void addBrowserRegion(final BrowserDocumentRegion r, final GlobalEventNotifier notifier) {", "+    if (_current != null) {", "+      // flush the stack of regions above _current", "+//      Utilities.show(\"Flushing elements above current = \" + _current);", "+      SortedSet<BrowserDocumentRegion> tail = _regions.tailSet(_current); ", "+//      Utilities.show(\"Tail set above current is \" + tail);", "+      Iterator<BrowserDocumentRegion> it = tail.iterator();", "+      if (it.hasNext()) {", "+        BrowserDocumentRegion nr = it.next();  // skip over current", "+        assert nr == _current;", "+//        Utilities.show(\"Skipped \" + nr);", "+      }", "+      while (it.hasNext()) { ", "+        BrowserDocumentRegion nr = it.next(); ", "+        it.remove(); ", "+//        Utilities.show(\"Removed \" + nr + \", leaving \" + _regions);", "+      }", "+    }", "+//    Utilities.show(\"Before adding, regions = \" + _regions);", "+    notifier.browserChanged();"]}], "num": 18866}
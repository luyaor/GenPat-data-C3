{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0dc67009eb81e890b9d4faff82020fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a7993a28b1260358754e15a9a9ca74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 253, "signatureBeforeChange": "   public static <T1, T2> Predicate2<T1, T2> or2(Predicate2<? super T1, ? super T2> p1,                                                  Predicate2<? super T1, ? super T2> p2)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> or(Predicate2<? super T1, ? super T2> p1,                                                 Predicate2<? super T1, ? super T2> p2)", "diff": ["-  /** @return  The disjunction ({@code ||}) of {@code p1} and {@code p2} */", "-  public static <T1, T2> Predicate2<T1, T2> or2(Predicate2<? super T1, ? super T2> p1, ", "-    return and2(IterUtil.makeIterable(p1, p2));", "+  /** Produce the disjunction ({@code ||}) of {@code p1} and {@code p2}. */", "+  public static <T1, T2> Predicate2<T1, T2> or(Predicate2<? super T1, ? super T2> p1, ", "+                                               Predicate2<? super T1, ? super T2> p2) {", "+    return new OrPredicate2<T1, T2>(IterUtil.<Predicate2<? super T1, ? super T2>>make(p1, p2));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b0b338255a9cbe360d43b5b67d3fee9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 254, "signatureBeforeChange": "   public static <T1, T2> Predicate2<T1, T2> or2(Predicate2<? super T1, ? super T2> p1,                                                  Predicate2<? super T1, ? super T2> p2,                                                 Predicate2<? super T1, ? super T2> p3)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> or(Predicate2<? super T1, ? super T2> p1,                                                 Predicate2<? super T1, ? super T2> p2,                                                Predicate2<? super T1, ? super T2> p3)", "diff": ["-  /** @return  The disjunction ({@code ||}) of {@code p1}, {@code p2}, and {@code p3} */", "-  public static <T1, T2> Predicate2<T1, T2> or2(Predicate2<? super T1, ? super T2> p1, ", "-    return and2(IterUtil.makeIterable(p1, p2, p3));", "+  /** Produce the disjunction ({@code ||}) of {@code p1}, {@code p2}, and {@code p3}. */", "+  public static <T1, T2> Predicate2<T1, T2> or(Predicate2<? super T1, ? super T2> p1, ", "+                                               Predicate2<? super T1, ? super T2> p2,", "+                                               Predicate2<? super T1, ? super T2> p3) {", "+    return new OrPredicate2<T1, T2>(IterUtil.<Predicate2<? super T1, ? super T2>>make(p1, p2, p3));", "+  }"]}], "num": 19197}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5be22436adb58a0597900fe9857d490", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b28da4e7a29f64a02b5a0ed2867d6f8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "40fa5284e8c663707faeb41ae0125801be606b5b", "commitAfterChange": "e116917927a60a297ec1454565818ede1b4cec2d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["-    ", "+", "-    ", "+", "-        ", "+", "-//        ", "+//", "-        ", "-          // Show a wait cursor for reasonable sized blocks", "-        boolean showWaitCursor = selEnd > (selStart + 100);", "-        ", "+", "-          if (n == JOptionPane.NO_OPTION) { doIndent = false; }", "+          switch (n) {", "+            case JOptionPane.CANCEL_OPTION:", "+            case JOptionPane.CLOSED_OPTION:", "+            case JOptionPane.NO_OPTION:", "+              doIndent = false;", "+              break;", "+            default:", "+              doIndent = true;", "+              break;", "+          }", "-        ", "+", "-        try {", "-          _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "-          //      _indentLines(reason, pm);", "-          ", "-          _doc.getDocument().getUndoManager().endCompoundEdit(key);", "-        }", "-        catch (OperationCanceledException oce) {", "-          // if canceled, undo the indent", "+        if (doIndent) {", "+          try {", "+            _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "+            //      _indentLines(reason, pm);", "+", "+            _doc.getDocument().getUndoManager().endCompoundEdit(key);", "+          }", "+          catch (OperationCanceledException oce) {", "+            // if canceled, undo the indent", "-          throw new UnexpectedException(oce);", "-        }", "-        finally {", "-          setCaretPosition(_doc.getCurrentDefinitionsLocation());", "+            throw new UnexpectedException(oce);", "+          }", "+          finally {", "+            setCaretPosition(_doc.getCurrentDefinitionsLocation());", "-        }", "-        ", "-        _mainFrame.hourglassOff();", "+          }", "+", "+          _mainFrame.hourglassOff();", "-  }", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5bfb10cf7a1d7443b9f1dd114a7405", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 248, "methodNumberAfterChange": 246, "signatureBeforeChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFileAs(FileSaveSelector com) throws IOException", "diff": ["+      // Update _packageName since modifiedSinceSaved flag will be set to false", "+      _packageName = getDocument().getPackageName();", "-//        System.err.println(\"saveFileAs called\");", "-              DefinitionsDocument doc = getDocument();", "+              DefinitionsDocument dd = getDocument();", "-                doc.acquireReadLock();  // Technically required, but looks like overkill.", "-                _editorKit.write(os, doc, 0, doc.getLength());", "-                doc.releaseReadLock();", "+                dd.acquireReadLock();  // Technically required, but looks like overkill.", "+                _editorKit.write(os, dd, 0, dd.getLength());", "+                dd.releaseReadLock();", "-          try {", "-            // This calls getDocument().getPackageName() because this may be untitled and this.getPackageName() ", "-            // returns \"\" if it's untitled.  Right here we are interested in parsing the DefinitionsDocument's text", "-            _packageName = getDocument().getPackageName();", "-          } ", "-          catch(InvalidPackageException e) { _packageName = null; }", "+          // this.getPackageName does not return \"\" if this is untitled and contains a legal package declaration     ", "+//          try {", "+//            // This calls getDocument().getPackageName() because this may be untitled and this.getPackageName() ", "+//            // returns \"\" if it's untitled.  Right here we are interested in parsing the DefinitionsDocument's text", "+//            _packageName = getDocument().getPackageName();", "+//          } ", "+//          catch(InvalidPackageException e) { _packageName = null; }"]}], "num": 8339}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b636f0feaf8a8ea489333dce9585b68c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025149476947bf3fb37926268975c45c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "0edbfd0db2689eae3c61cbc9503a45692b491afc", "commitAfterChange": "3ec3975ac05203b775027960dbbfc339e26bb562", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   public Document getNextDocument(Document doc)", "signatureAfterChange": "   public Document getNextDocument(Document doc)", "diff": ["-    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "-    INavigatorItem item = getIDocGivenODD(getODDForDocument(doc));", "-    INavigatorItem nextitem = _documentNavigator.getNext(item);", "-    if(nextitem == item){", "-      // we're at the end, so we need to rewind", "-      // and return doc at the very beginning", "-      int i = -1;", "-      do{", "-        item=nextitem;", "-        nextitem = _documentNavigator.getPrevious(item);", "-        i++;", "-      }while(nextitem != item);", "-      return getODDGivenIDoc(nextitem);", "-    }else{", "-      return getODDGivenIDoc(nextitem);", "+    try {", "+      Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "+      INavigatorItem item = getIDocGivenODD(getODDForDocument(doc));", "+      INavigatorItem nextitem = _documentNavigator.getNext(item);", "+      if(nextitem == item){", "+        // we're at the end, so we need to rewind", "+        // and return doc at the very beginning", "+        int i = -1;", "+        do{", "+          item=nextitem;", "+          nextitem = _documentNavigator.getPrevious(item);", "+          i++;", "+        }while(nextitem != item);", "+        return getNextDocHelper(nextitem); //getODDGivenIDoc(nextitem);", "+      }else{", "+        return getNextDocHelper(nextitem); //getODDGivenIDoc(nextitem);", "+      }", "+    } catch(DocumentClosedException dce) {", "+      return getNextDocument(doc);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1dc4437a37fda42818408303f67ce5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["-        Type initT = checkType(node.getInitializer(), t);", "-          Expression newInit = ts.assign(t, node.getInitializer());", "-          node.setInitializer(newInit);", "+          Type initT = checkType(node.getInitializer(), t);", "+          try {", "+            Expression newInit = ts.assign(t, node.getInitializer());", "+            node.setInitializer(newInit);", "+          }", "+          catch (UnsupportedConversionException e) {", "+            TypePrinter printer = ts.typePrinter();", "+            setErrorStrings(node, printer.print(initT), printer.print(t));", "+            throw new ExecutionError(\"assignment.types\", node);", "+          }", "-        catch (UnsupportedConversionException e) {", "-          TypePrinter printer = ts.typePrinter();", "-          setErrorStrings(node, printer.print(initT), printer.print(t));", "-          throw new ExecutionError(\"assignment.types\", node);", "-        }", "+        catch (ExecutionError e) { setErrorContext(node, newContext); throw e; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "366b4b57ada33109b1783d81b3420de1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "    public void indentLines(int selStart, int selEnd)", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd)", "diff": ["+   */", "-    indentLines(selStart, selEnd, Indenter.OTHER);", "+    try {", "+      indentLines(selStart, selEnd, Indenter.OTHER, null);", "+    }", "+    catch (OperationCanceledException oce) {", "+      // Indenting without a ProgressMonitor should never be cancelled!", "+      throw new UnexpectedException(oce);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397cfcd5c6de8eca3d74719a62cc5454", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "22da2bba7b95020932a8f270ac3cc4c0581bd5d1", "commitAfterChange": "1acb63fa1c578959b54f9766299c6e0a8865f601", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void setActiveDocument(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void setActiveDocument(final OpenDefinitionsDocument doc)", "diff": ["-    Utilities.invokeLater(command);", "+    try { Utilities.invokeAndWait(command); }", "+    catch(Exception e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4db9d290df47f483b53148b31402ee3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachineTest.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "    private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont,                                      int start, int found)", "signatureAfterChange": "    private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont, int start, int found)", "diff": ["-  private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont,", "-                                     int start, int found)", "-  {", "+  private void _testFindNextSucceeds(FindReplaceMachine frm, ContinueCommand cont, int start, int found) {", "+    try {", "+    }", "+    catch(Exception e) { fail(\"Threw exception: \" + e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7089e58753068f8807f768d151cf6853", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void shutdown()", "signatureAfterChange": "   public synchronized void shutdown()", "diff": ["-    if (isReady()) {", "-      try {", "-        removeAllBreakpoints();", "-        removeAllWatches();", "-        _vm.dispose();", "-      }", "-      catch (VMDisconnectedException vmde) {", "-        //VM was shutdown prematurely", "-      }", "-      finally {", "-        ((DefaultInteractionsModel)_model.getInteractionsModel()).setToDefaultInterpreter();", "-        _vm = null;", "-        _eventManager = null;", "-        _suspendedThreads = new RandomAccessStack();", "-        _deadThreads = new DeadThreadFilter();", "-        _runningThread = null;", "-      }", "+    if (!isReady()) {", "+      throw new IllegalStateException(\"Cannot shut down if debugger is not active.\");", "+    }", "+    ", "+    try {", "+      removeAllBreakpoints();", "+      removeAllWatches();", "+    }", "+    catch (DebugException de) {", "+      // Couldn't remove breakpoints/watches", "+      _log(\"Could not remove breakpoints/watches: \" + de);", "+    }", "+    ", "+    try {", "+      _vm.dispose();", "+    }", "+    catch (VMDisconnectedException vmde) {", "+      //VM was shutdown prematurely", "+    }", "+    finally {", "+      ((DefaultInteractionsModel)_model.getInteractionsModel()).setToDefaultInterpreter();", "+      _vm = null;", "+      _eventManager = null;", "+      _suspendedThreads = new RandomAccessStack();", "+      _deadThreads = new DeadThreadFilter();", "+      _runningThread = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7658772762bfeea3d11e63c389e3d322", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 372, "signatureBeforeChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "          public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-", "+    ", "-//      try {  // used or invokeAndWait variation", "-      Utilities.invokeLater(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "+      try {  // used or invokeAndWait variation", "+      Utilities.invokeAndWait(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "-          ", "+        ", "-//      }  // used for invokeAndWait variation", "-//      catch(InterruptedException e) { throw new UnexpectedException(e); }", "+      }  // used for invokeAndWait variation", "+      catch(InterruptedException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79332d99299275b11fcf112db078a043", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachineTest.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void testFindReplaceInAllOpenFiles() throws BadLocationException", "signatureAfterChange": "   public void testFindReplaceInAllOpenFiles() throws BadLocationException", "diff": ["-   */", "+  /** This test addresses feature request #784514 Find/Replace in all Open Files. */", "+//    System.err.println(\"First sequence of global search tests complete\");", "+//    System.err.println(\"_lastFindWord set to \" + _frm.getFindWord());", "-    _frm.replaceAll();", "+    try { _frm.replaceAll(); }", "+    catch(Throwable e) { fail(\"Threw exception \" + e); }", "+//    System.err.println(\"testFindReplaceInAllOpenFiles completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79f1898e6bbac23d14788ba902086a03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/Utilities.java", "commitBeforeChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "commitAfterChange": "22da2bba7b95020932a8f270ac3cc4c0581bd5d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static void invokeAndWait(Runnable task) throws InterruptedException, InvocationTargetException", "signatureAfterChange": "      public static void invokeAndWait(Runnable task) throws InterruptedException", "diff": ["-  public static void invokeAndWait(Runnable task) throws InterruptedException, InvocationTargetException {", "+  public static void invokeAndWait(Runnable task) throws InterruptedException {", "-    EventQueue.invokeAndWait(task);", "+    try { EventQueue.invokeAndWait(task); }", "+    catch(InvocationTargetException e) { throw new UnexpectedException(e); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bf59fc1628fd29cf05740d02c29e572", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "8958ac741e416ecbae85abc43f8b198196076bac", "commitAfterChange": "9fa6d06a5ecc75a8eda4a5bc78f492dd1b318059", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void backupDone()", "signatureAfterChange": "          public void backupDone()", "diff": ["-", "-    public void backupDone(){", "-      filesNotNeedingBackup.add(outputFile);", "+    ", "+    public void backupDone() {", "+      try {", "+        filesNotNeedingBackup.add(getTargetFile());", "+      } catch (IOException ioe) {", "+        throw new UnexpectedException(ioe, \"getTargetFile should fail earlier\");", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e8086cd87a9e25948878d320e8ec57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "df9cbdf4ec8cbcbc3942b966a48a15d33dcac7ed", "commitAfterChange": "451a8ef10dd808c32bb1dec2a41dbfe38542794f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public DefaultGlobalModel()", "signatureAfterChange": "   public DefaultGlobalModel()", "diff": ["-    _jvm = new MainJVM(workDir);", "+    try { _jvm = new MainJVM(workDir); }", "+    catch(RemoteException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff63224229c54d19c8849dc2534ed43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static boolean isEnum(Class<?> c)", "signatureAfterChange": "   public static boolean isEnum(Class<?> c)", "diff": ["-  public static boolean isEnum(Class<?> c) {", "-      //    System.out.println(\"enabled: \"+_tigerEnabled+\", \"+c+\".super: \"+c.getSuperclass());", "-    return _tigerEnabled && c.getSuperclass()!=null && (c.getSuperclass().getName().equals(\"java.lang.Enum\"));", "-    ", "-    // The following is what it should be.  The reason why this commented is that", "-    // setting the ENUM modifier in the EnumDeclaration constructor causes some other", "-    // problems when trying to access the elements of the enum using reflection.", "-    // return _tigerEnabled && ((c.getModifiers() & ENUM) != 0); ", "+   */", "+  public static boolean isEnum(Class<?> c) {", "+    // Since the DynamicJava implementation of EnumDeclaration relies on the presence of constructors,", "+    // and the restrictions of the JVM won't allow constructors in classes flagged as ENUM,", "+    // we can't use the ENUM modifier flag here.", "+    ", "+    // Note: we use \"Class.forName\" instead of \"Enum.class\" to avoid Retroweaver conversion of Enum.class", "+    // to its own Enum implementation.", "+    try {", "+      return _tigerEnabled && (c.getSuperclass() != null) && ", "+        (c.getSuperclass().equals(Class.forName(\"java.lang.Enum\")));", "+    }", "+    catch (ClassNotFoundException e) { return false; }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a91fc42ae558cb7beea4480f3958858b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelControl.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void move(int count)", "signatureAfterChange": "   public void move(int count)", "diff": ["-  */", "+   */", "-    rmb.move(count);", "-    rmc.move(count);", "+    try {", "+      rmb.move(count);", "+      rmc.move(count);", "+    }", "+    catch(IllegalArgumentException e) { ", "+      resetLocation();", "+      throw new UnexpectedException(e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab4e232d93baafc04e83c7efa8bda7db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   synchronized void currThreadSuspended()", "signatureAfterChange": "   synchronized void currThreadSuspended()", "diff": ["+      try {", "-      _dumpVariablesIntoInterpreterAndSwitch();", "+        _dumpVariablesIntoInterpreterAndSwitch();", "+      }", "+      catch(AbsentInformationException aie){", "+        // an AbsentInformationException can be thrown if the user does not", "+        // compile the classes to be debugged with the -g flag", "+        printMessage(\"No debug information available for this class.\\nMake sure to compile classes to be debugged with the -g flag.\");", "+      }          ", "-    catch(DebugException ex){", "-      throw new UnexpectedException(ex);", "-    }    ", "+    catch(DebugException de) {", "+      throw new UnexpectedException(de);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae4465dfe61ca4816745e662c1ec19e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachineTest.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "       private void _testFindNextFails(FindReplaceMachine frm, ContinueCommand cont,                                   int start, int current)", "signatureAfterChange": "       private void _testFindNextFails(FindReplaceMachine frm, ContinueCommand cont, int start, int current)", "diff": ["-  private void _testFindNextFails(FindReplaceMachine frm, ContinueCommand cont,", "-                                  int start, int current)", "-  {", "+  private void _testFindNextFails(FindReplaceMachine frm, ContinueCommand cont, int start, int current) {", "+    try {", "+    }", "+    catch(Exception e) { fail(\"Threw exception: \" + e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0121c861ec9c37c3bd4ba54af376088", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/Utilities.java", "commitBeforeChange": "5351c43975b9206e92da4f8a3c75369d15511e0f", "commitAfterChange": "3c9da7b6f33927502f9cee032fa48adae4a189de", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public static void clearEventQueue() throws InterruptedException", "signatureAfterChange": "      public static void clearEventQueue()", "diff": ["-  public static void clearEventQueue() throws InterruptedException {", "-    Utilities.invokeAndWait(new Runnable() { public void run() { }; });", "+  public static void clearEventQueue() {", "+    try { ", "+      Utilities.invokeAndWait(new Runnable() { public void run() { }; }); ", "+    }", "+    catch(InterruptedException ie) { throw new UnexpectedException(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ba3336a09532569dfd5a3403eb6147", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 369, "signatureBeforeChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-      Runnable command = new Runnable() {", "-        public void run() {", "-          _recentDocFrame.pokeDocument(active);", "-          _switchDefScrollPane();", "-", "-          boolean isModified = active.isModifiedSinceSave();", "-          boolean canCompile = (!isModified && !active.isUntitled());", "-          _saveAction.setEnabled(!canCompile);", "-          _revertAction.setEnabled(!active.isUntitled());", "-", "-          // Update error highlights", "-          int pos = _currentDefPane.getCaretPosition();", "-          _currentDefPane.getErrorCaretListener().updateHighlight(pos);", "-", "-          // Update FileChoosers' directory", "-          _setCurrentDirectory(active);", "-", "-          // Update title and position", "-          updateFileTitle();", "-          _currentDefPane.requestFocusInWindow();", "-          _posListener.updateLocation();", "-          ", "-          // update display (adding \"*\") in navigatgorPane", "-          if (isModified) _model.getDocumentNavigator().repaint();", "-          ", "-          ", "-          try { active.revertIfModifiedOnDisk(); }", "-          catch (FileMovedException fme) { _showFileMovedError(fme); }", "-          catch (IOException e) { _showIOError(e); }", "-", "-          // Change Find/Replace to the new defpane", "-          if (_findReplace.isDisplayed()) {", "-            _findReplace.stopListening();", "-            _findReplace.beginListeningTo(_currentDefPane);", "-            //uninstallFindReplaceDialog(_findReplace);", "-            //installFindReplaceDialog(_findReplace);", "+      try {", "+        Utilities.invokeAndWait(new Runnable() {", "+          public void run() {", "+            _recentDocFrame.pokeDocument(active);", "+            _switchDefScrollPane();", "+            ", "+            boolean isModified = active.isModifiedSinceSave();", "+            boolean canCompile = (!isModified && !active.isUntitled());", "+            _saveAction.setEnabled(!canCompile);", "+            _revertAction.setEnabled(!active.isUntitled());", "+            ", "+            // Update error highlights", "+            int pos = _currentDefPane.getCaretPosition();", "+            _currentDefPane.getErrorCaretListener().updateHighlight(pos);", "+            ", "+            // Update FileChoosers' directory", "+            _setCurrentDirectory(active);", "+            ", "+            // Update title and position", "+            updateFileTitle();", "+            _currentDefPane.requestFocusInWindow();", "+            _posListener.updateLocation();", "+            ", "+            // update display (adding \"*\") in navigatgorPane", "+            if (isModified) _model.getDocumentNavigator().repaint();", "+            ", "+            ", "+            try { active.revertIfModifiedOnDisk(); }", "+            catch (FileMovedException fme) { _showFileMovedError(fme); }", "+            catch (IOException e) { _showIOError(e); }", "+            ", "+            // Change Find/Replace to the new defpane", "+            if (_findReplace.isDisplayed()) {", "+              _findReplace.stopListening();", "+              _findReplace.beginListeningTo(_currentDefPane);", "+              //uninstallFindReplaceDialog(_findReplace);", "+              //installFindReplaceDialog(_findReplace);", "+            }", "-        }", "-      };", "-      Utilities.invokeLater(command);", "+        });", "+      }", "+      catch(InterruptedException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d373bd1a59b74bfdcb7d5c725b62552d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "0edbfd0db2689eae3c61cbc9503a45692b491afc", "commitAfterChange": "3ec3975ac05203b775027960dbbfc339e26bb562", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 92, "signatureBeforeChange": "   public Document getPrevDocument(Document doc)", "signatureAfterChange": "   public Document getPrevDocument(Document doc)", "diff": ["-    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "-    INavigatorItem item = getIDocGivenODD(getODDForDocument(doc));", "-    INavigatorItem nextitem = _documentNavigator.getPrevious(item);", "-    if(nextitem == item){", "-      // we're at the end, so we need to rewind", "-      // and return doc at the very beginning", "-      int i = -1;", "-      do{", "-        item=nextitem;", "-        nextitem = _documentNavigator.getNext(item);", "-        i++;", "-      }while(nextitem != item);", "-      return getODDGivenIDoc(nextitem);", "-    }else{", "-      return getODDGivenIDoc(nextitem);", "+    try {", "+      Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "+      INavigatorItem item = getIDocGivenODD(getODDForDocument(doc));", "+      INavigatorItem nextitem = _documentNavigator.getPrevious(item);", "+      if(nextitem == item){", "+        // we're at the end, so we need to rewind", "+        // and return doc at the very beginning", "+        int i = -1;", "+        do{", "+          item=nextitem;", "+          nextitem = _documentNavigator.getNext(item);", "+          i++;", "+        }while(nextitem != item);", "+        return getPrevDocHelper(nextitem);//getODDGivenIDoc(nextitem);", "+      }else{", "+        return getPrevDocHelper(nextitem);//getODDGivenIDoc(nextitem);", "+      }", "+    } catch(DocumentClosedException dce) {", "+      return getPrevDocument(doc);", "+  }"]}], "num": 4196}
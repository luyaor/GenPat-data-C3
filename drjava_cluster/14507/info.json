{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "040a1f95559b4001209a84dae6988bb1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d20a399db56c6d89a4c7ed4e972b9c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["+", "+        doc.move( startPos - currentPos + i);", "+        ReducedModelState state = doc.getStateAtCurrent();", "+        doc.move(-startPos + currentPos - i);", "-        synchronized(doc) {", "-          doc.move( startPos - currentPos + i);", "-          ReducedModelState state = doc.getStateAtCurrent();", "-          doc.move(-startPos + currentPos - i);", "-          ", "-          ", "-          currentChar = text.charAt(i);", "-          ", "-          if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "-          if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "-            previousChar = '\\0'; ", "-            continue;", "+        ", "+        currentChar = text.charAt(i);", "+        ", "+        if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "+        if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "+          previousChar = '\\0'; ", "+          continue;", "+        }", "+        if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "+          if (_prefix.length() > lineLength - i) return false;", "+          else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "+            // '/' is the only non-WS character that we consume without", "+            // immediately returning false. When we try to match the prefix,", "+            // we also need to reflect this implicit lookahead mechanism.", "+            return true;", "-          if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "-            if (_prefix.length() > lineLength - i) return false;", "-            else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "-              // '/' is the only non-WS character that we consume without", "-              // immediately returning false. When we try to match the prefix,", "-              // we also need to reflect this implicit lookahead mechanism.", "-              return true;", "-            }", "-            else if (currentChar == '/') {", "-              if (previousChar == '/') return false;", "-            }", "-            else if (currentChar == ' ' || currentChar == '\\t') {  }", "-            else if (!(currentChar == '*' && previousChar == '/')) return false;", "+          else if (currentChar == '/') {", "+            if (previousChar == '/') return false;", "+          else if (currentChar == ' ' || currentChar == '\\t') {  }", "+          else if (!(currentChar == '*' && previousChar == '/')) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5b7f938472fa95977ac330d0e3d055", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-  boolean applyRule(AbstractDJDocument doc, int reason)", "-  {", "-    try", "-    {", "+  boolean applyRule(AbstractDJDocument doc, int reason) {", "+    try {", "-      for (int i = 0; i < lineLength; i++)", "-      {", "+      for (int i = 0; i < lineLength; i++) {", "-          if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ", "-          {", "-            return false;", "+          if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "+          if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "+            previousChar = '\\0'; ", "+            continue;", "-          if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT))", "-          {", "-            // Handle case: ...*/*", "-            previousChar = '\\0'; continue;", "-          }", "-          if (state.equals(ReducedModelState.FREE))", "-          {", "-            // Can prefix still fit on the current line?", "-            if (_prefix.length() > lineLength - i)", "-            {", "-              return false;", "-            }", "-            else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/')", "-            {", "+          if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "+            if (_prefix.length() > lineLength - i) return false;", "+            else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "-            else if (currentChar == '/')", "-            {", "-              if (previousChar == '/') { return false; }", "+            else if (currentChar == '/') {", "+              if (previousChar == '/') return false;", "-            else if (currentChar == ' ' || currentChar == '\\t')", "-            {", "-            }", "-            else if (!(currentChar == '*' && previousChar == '/'))", "-            {", "-              return false;", "-            }", "+            else if (currentChar == ' ' || currentChar == '\\t') {  }", "+            else if (!(currentChar == '*' && previousChar == '/')) return false;", "-        if (previousChar == '/' && currentChar != '*')", "-        {", "-          return false;", "-        }", "+        if (previousChar == '/' && currentChar != '*') return false;", "-    catch (BadLocationException e)", "-    {", "+    catch (BadLocationException e) {"]}], "num": 14507}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8be4fe919858473ddb17d834fddf47b6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adaf60e329fef57f94038de902c13459", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "1a21d93c6026fc975d9f1a1bda2fbd55942a0154", "commitAfterChange": "7cbabe0b7b5f77b58eac69afdca15c16ef2f6a9b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<String,String,Boolean>() {", "+                                                                new Lambda2<String,String,Boolean>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                        new edu.rice.cs.util.Lambda<Double,String>() {", "-      public Double apply(String s) { return ((double)s.length()); }", "+                                                        new Lambda<String,Double>() {", "+      public Double value(String s) { return ((double)s.length()); }", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<String,String,Double>() {", "+                                                               new Lambda2<String,String,Double>() {", "-                                                                             new edu.rice.cs.plt.lambda.Lambda4<String,Double,Double,String,String>() {", "+                                                                             new Lambda4<String,Double,Double,String,String>() {", "-                                                                      new edu.rice.cs.plt.lambda.Lambda3<String,String,String,String>() {", "+                                                                      new Lambda3<String,String,String,String>() {", "-      public void setAttributes(HashMap<String,String> attrs, edu.rice.cs.util.Lambda<String,String> replaceLambda) {", "-        String value;", "+      public void setAttributes(HashMap<String,String> attrs, Lambda<String,String> replaceLambda) {", "+        String val;", "-          value = attrs.get(key);", "+          val = attrs.get(key);", "-            setAttribute(key, value);", "+            setAttribute(key, val);", "-            setAttribute(key, replaceLambda.apply(value));", "+            setAttribute(key, replaceLambda.value(val));", "-      public void setAttributes(HashMap<String,String> attrs, edu.rice.cs.util.Lambda<String,String> replaceLambda) {", "+      public void setAttributes(HashMap<String,String> attrs, Lambda<String,String> replaceLambda) {", "-            setAttribute(key, replaceLambda.apply(value));", "+            setAttribute(key, replaceLambda.value(value));", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Thunk<File>() {", "+      public File value() {", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Thunk<File>() {", "+      public File value() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb61bc317126a795d7c100226a30aa88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fee21edb1b15f1499b5409a250cdb90d3f204739", "commitAfterChange": "e100da4da75b9cbdfc04df45bf52679ed811f23a", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 275, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.line\", ", "+                                                              \"Returns the current line in the Definitions Pane.\") {", "+      public void update() {", "+        _value = String.valueOf(_posListener.lastLine());", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.col\", ", "+                                                              \"Returns the current column in the Definitions Pane.\") {", "+      public void update() {", "+//        int line = _currentDefPane.getCurrentLine();", "+//        int lineOffset = _currentDefPane.getLineStartOffset(line);", "+//        int caretPos = _currentDefPane.getCaretPosition();", "+        _value = String.valueOf(_posListener.lastCol());", "+      }", "+    });", "+    ", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.save.all\", \"(Save All...)\",", "+                                                                     \"Execute a \\\"Save All\\\" action.\") {", "+      public void update() {", "+        _saveAll();", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.compile.all\", \"(Compile All...)\",", "+                                                                     \"Execute a \\\"Compile All\\\" action.\") {", "+      public void update() {", "+        _compileAll();", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.clean\", \"(Clean Build Directory...)\",", "+                                                                     \"Execute a \\\"Clean Build Directory\\\" action.\") {", "+      public void update() {", "+        // could not use _clean(), since ProjectFileGroupingState.cleanBuildDirectory()", "+        // is implemented as an asynchronous task, and DrJava would not wait for its completion", "+        edu.rice.cs.plt.io.IOUtil.deleteRecursively(_model.getBuildDirectory());", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.open.file\", \"(Open File...)\",", "+                                                                     \"Execute an \\\"Open File\\\" action.\\n\"+", "+                                                                     \"Required attributes:\\n\"+", "+                                                                     \"\\tfile=\\\"<file to open>\\\"\\n\"+", "+                                                                     \"Optional attributes:\\n\"+", "+                                                                     \"\\tline=\\\"<line number to display>\") {", "+      public void update() {", "+        if (_attributes.get(\"file\")!=null) {", "+          final String dir = StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(DEF_DIR,", "+                                                                                          PropertyMaps.ONLY,", "+                                                                                          PropertyMaps.GET_CURRENT));", "+          final String fil = StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"file\"),", "+                                                                                          PropertyMaps.ONLY,", "+                                                                                          PropertyMaps.GET_CURRENT));", "+          FileOpenSelector fs = new FileOpenSelector() {", "+            public File[] getFiles() {", "+              if (fil.startsWith(\"/\")) { return new File[] { new File(fil) }; }", "+              else { return new File[] { new File(dir, fil) }; }", "+            }", "+          };", "+          open(fs);", "+          int lineNo = -1;", "+          if (_attributes.get(\"line\")!=null) {", "+            try {", "+              lineNo = new Integer(_attributes.get(\"line\"));", "+            }", "+            catch(NumberFormatException nfe) {", "+              lineNo = -1;", "+            }", "+          }", "+          if (lineNo>=0) {", "+            final int l = lineNo;", "+            edu.rice.cs.util.swing.Utilities.invokeLater(new Runnable() { ", "+              public void run() { _jumpToLine(l); }", "+            });", "+          }", "+        }", "+      }", "+      /** Reset the attributes. */", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"file\", null);", "+        _attributes.put(\"line\", null);", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.auto.refresh\", \"(Auto-Refresh...)\",", "+                                                                     \"Execute an \\\"Auto-Refresh Project\\\" action.\") {", "+      public void update() {", "+        _model.autoRefreshProject();", "+      }", "+    });"]}], "num": 17318}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7145ad291aa270d4948288b3c1bf8896", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ba8e7288caf149fb7488b386654f9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "2d86cf04f0b08426dfa6d50c93bcf8879511bde9", "commitAfterChange": "70e12493ad654478a708690a18fe3e8feba26f05", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     protected void _runInInteractions(final String command, String qualifiedClassName) throws ClassNameNotFoundException,        IOException", "signatureAfterChange": "     protected void _runInInteractions(final String command, String qualifiedClassName) throws ClassNameNotFoundException,        IOException", "diff": ["+      File oldWorkDir = _interactionsModel.getWorkingDirectory();", "-      if (isProjectActive()) workDir = getWorkingDirectory(); // use working directory for project", "-      else {", "-        // use source root of current document", "-        try { workDir = getSourceRoot(); }", "-        catch (InvalidPackageException e) { workDir = FileOps.NULL_FILE; }", "-      }", "-      // Reset interactions to the soure root for this document; class will be executed when new interpreter is ready", "-      resetInteractions(workDir);  ", "+      workDir = getWorkingDirectory();", "+      ", "+      // Reset interactions to the working directory", "+      resetInteractions(workDir, !workDir.equals(oldWorkDir));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e608358042d7b6b8d89ccfe2d92fa439", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "signatureAfterChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "diff": ["-    if (printMessages) System.err.println(\"-----testUnsavedAndUnCompiledChanges-----\");", "+    if (printMessages) System.out.println(\"-----testUnsavedAndUnCompiledChanges-----\");", "-    saveFile(doc, new FileSelector(file));", "+    doc.saveFile(new FileSelector(file));", "-    testStartCompile(doc);", "+    doc.startCompile();", "-    listener.waitCompileDone();", "-    if (printMessages) System.err.println(\"after test\");", "+    if (printMessages) System.out.println(\"after test\");", "-    saveFile(doc, new FileSelector(file));", "+    doc.saveFile(new FileSelector(file));"]}], "num": 8180}
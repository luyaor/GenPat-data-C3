{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23b385ece43fdfdf03ef518112463866", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b6ae50b67884ccfcbfe01846c8857db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Vector<HighlightStatus> getHighlightStatus(int start, int end)", "signatureAfterChange": "   public Vector<HighlightStatus> getHighlightStatus(int start, int end)", "diff": ["-    // First move the reduced model to the start", "-    //    int oldLocation = _currentLocation;", "+    ", "+    if (start == end) return new Vector<HighlightStatus>(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e9609821ce7f2ef975d4c373c448cee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker14.java", "commitBeforeChange": "d13e11ecc064ebd82d76351f01f48c096f0269d5", "commitAfterChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected void checkVarArgs(MethodDeclaration node)", "signatureAfterChange": "   protected void checkVarArgs(MethodDeclaration node)", "diff": ["+    if(true){", "+    throw new RuntimeException(\"What the hell!!!\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107f069f216505a99e6b9bc2071a5f71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public TypeData forInnerClassDef(InnerClassDef that)", "signatureAfterChange": "   public TypeData forInnerClassDef(InnerClassDef that)", "diff": ["+    ", "+    if (sd == null) throw new RuntimeException(\"SymbolData is null for class name = \" + className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13e4739faf41ddff4cb1bea748f36fe1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "cfd8cdfe8db5b449181969655285bf92b469bc81", "commitAfterChange": "f17abf941340b20848be6eb070215726592e1973", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": "   \tpublic void move(int dist)", "signatureAfterChange": "    public void move(int dist)", "diff": ["-\tpublic void move(int dist)", "-\t\t{", "-\t\t\t_currentLocation += dist;", "-\t\t\t_reduced.move(dist);", "-\t\t}", "+  public void move(int dist)", "+  {", "+    _currentLocation += dist;", "+    if (_currentLocation < 0) {", "+      throw new RuntimeException(\"location < 0?!\");", "+    }", "+    _reduced.move(dist);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "238e7118eae59f0c0cfe4e628993e6c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "5402d816f4ee865f7ec73de4093cafaa0c215bb0", "commitAfterChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   public void testConsoleInput() throws DocumentAdapterException", "signatureAfterChange": "   public void testConsoleInput() throws DocumentAdapterException", "diff": ["+      int n = 0;", "+        n++;", "+        if (n > 1) {", "+          throw new IllegalStateException(\"Input should only be requested once!\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25be3abc9ffb63467238e63b4dfdcda0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   private Object buildArrayOfRemainingArgs(Class[] typs, int larg_size, Iterator<Expression> it)", "signatureAfterChange": "   private Object buildArrayOfRemainingArgs(Class[] typs, int larg_size, Iterator<Expression> it)", "diff": ["-    assert(typs[typs.length-1].isArray());", "+    if(! typs[typs.length-1].isArray())", "+      throw new RuntimeException(\"Last argument is not variable arguments\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ecadf576e9cfbfd0073bdca83fc1e43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ObjectMethodCall.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ObjectMethodCall(Expression exp, String mn, List<Expression> args,                           String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public ObjectMethodCall(Expression exp, String mn, List<? extends Expression> args,                           String fn, int bl, int bc, int el, int ec)", "diff": ["-  public ObjectMethodCall(Expression exp, String mn, List<Expression> args,", "+  public ObjectMethodCall(Expression exp, String mn, List<? extends Expression> args,", "+    if (exp == null) { throw new IllegalArgumentException(\"exp == null\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d07640617376d6e12e935ee0e98aac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public synchronized boolean hasRunningThread() throws DebugException", "signatureAfterChange": "   public synchronized boolean hasRunningThread() throws DebugException", "diff": ["-    _ensureReady();", "+    if (!isReady()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64d19eb85dd522edb23932604a27da24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public synchronized boolean isCurrentThreadSuspended() throws DebugException", "signatureAfterChange": "   public synchronized boolean isCurrentThreadSuspended() throws DebugException", "diff": ["-    _ensureReady();", "+    if (!isReady()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a2227e951bdf5ee7b5c3dc9b25f2b34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 29, "signatureBeforeChange": "      private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "diff": ["-  ", "-  private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException{", "-    if( thread == null)", "-      return;", "+   */", "+  private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)", "+    throws DebugException", "+  {", "+    if (thread == null) {", "+      throw new IllegalArgumentException(\"Cannot resume a null thread\");", "+    }", "-    ", "-    if( printMessages )  System.out.println(\"Getting suspendCount = \" + suspendCount);", "+    if (printMessages) System.out.println(\"Getting suspendCount = \" + suspendCount);", "-    if( shouldCopyBack ){", "-      _doCopyBack(); /* copy variables back into the thread */", "+    if (shouldCopyBack) {", "+      // Copy variables back into the thread", "+      _copyVariablesFromInterpreter();", "-    try{", "+    try {", "-    catch(DebugException e){", "+    catch(DebugException e) {  //??", "+    // Must resume the correct number of times", "+    ", "+    // Notify listeners of a resume", "+    ", "+    // Switch to next suspended thread, if any"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6adec893d6bd6a350068e730acb225b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "ae4333c8dd1b54b8a781008188f09b6786d95ae2", "commitAfterChange": "a42a1005ad3faca50638e0131df3bc7c45ba82de", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "signatureAfterChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "diff": ["-      return (ObjectReference) rt.getValue(field);", "+      if (field == null) {", "+        throw new DebugException(\"Unable to get ONLY field\");", "+      }", "+      else {", "+        return (ObjectReference) rt.getValue(field);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f2b9aa4f386de4ec6b8dafa99b266fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8468328336764977b1a392d354ad9fa8332d6cf0", "commitAfterChange": "b5065bdb57d50a5108c714db64f9cb4417931362", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public InterpreterJVMRemoteI ensureInterpreterConnected()", "signatureAfterChange": "   public InterpreterJVMRemoteI ensureInterpreterConnected()", "diff": ["-        //if (! _restart) {", "-        //throw new IllegalStateException(\"Interpreter is disabled\");", "-        //}", "+        if (! _restart) { throw new IllegalStateException(\"Interpreter is disabled\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79836634493336c14a51b231280b2f05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "dd020118801905f09871a55ddb6fe47a118916d4", "commitAfterChange": "efa4b629973a081887f86e2b6387764f406fc629", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void setActiveCompiler(CompilerInterface compiler)", "signatureAfterChange": "   public void setActiveCompiler(CompilerInterface compiler)", "diff": ["-    _activeCompiler = compiler;", "+    if (compiler == null) {", "+      // Can't let active compiler be null", "+      throw new IllegalArgumentException(\"Cannot set active compiler to null.\");", "+    }", "+    else {", "+      _activeCompiler = compiler;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7acaca338a17715492426824bfc31207", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/LocalizedMessageReader.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public String getMessage(String key, String[] strings)", "signatureAfterChange": "   public String getMessage(String key, String[] strings)", "diff": ["+            if (n >= strings.length) {", "+              throw new IllegalArgumentException(\"Missing argument \" + n + \" for error code \" + key);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f670835c0d0b57864f3ea1f729df2f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public SymbolData handleAnonymousClassInstantiation(AnonymousClassInstantiation that, SymbolData superC)", "signatureAfterChange": "   public SymbolData handleAnonymousClassInstantiation(AnonymousClassInstantiation that, SymbolData superC)", "diff": ["-      if (superC.isInterface()) {sd.setSuperClass(symbolTable.get(\"java.lang.Object\")); sd.addInterface(superC);}", "+      if (superC == null) {", "+        throw new RuntimeException(\"Internal Program Error:  Superclass data for \" + sd + \" is null.\" + ", "+                                   \"  Please report this bug.\");", "+      }", "+      if (superC.isInterface()) {", "+        sd.setSuperClass(symbolTable.get(\"java.lang.Object\")); ", "+        sd.addInterface(superC);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83d7e2121eac395f47feb78fed0cf273", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "       public File getFile()", "signatureAfterChange": "   public File getFile() throws IllegalStateException", "diff": ["-  ", "-  public File getFile() {", "+   */", "+  public File getFile() throws IllegalStateException {", "+    if (_file == null) {", "+      throw new IllegalStateException(", "+        \"This document does not yet have a file.\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84023d185e21e9141f77cfd039d31608", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "e7fa83968a0076b95166203c3ff9a5bddde8dfee", "commitAfterChange": "b2bccf49a3d470addd7a5aec1fd2eaf00accbe3b", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": "   public Expression makePrimitive(Expression e) throws UnsupportedConversionException", "signatureAfterChange": "   public Expression makePrimitive(Expression e) throws UnsupportedConversionException", "diff": ["-    //       be unboxed.  We allow it here, because that seems like the correct approach.", "+    //       be unboxed.  We allow it here unless the type is null, because that seems", "+    //       like the correct approach.", "+    else if (isSubtype(t, NULL)) { throw new UnsupportedConversionException(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8688dfac9ebb5c38a2702dbbeb9577bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ArrayAllocation.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ArrayAllocation(TypeName tp, TypeDescriptor td,                          String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public ArrayAllocation(TypeName tp, TypeDescriptor td,                          String fn, int bl, int bc, int el, int ec)", "diff": ["-    super(tp, fn, bl, bc, el, ec);", "+    super(fn, bl, bc, el, ec);", "+    if (tp == null) throw new IllegalArgumentException(\"tp == null\");", "-    ", "+    elementType = tp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6bac3a3a6485b4cfc88cce0d16d8f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public Bob(Data data, File file, String packageName, LinkedList<String> importedFiles,               LinkedList<String> importedPackages, LinkedList<VariableData> vars,               LinkedList<Pair<SymbolData, JExpression>> thrown)", "signatureAfterChange": "   public Bob(Data data, File file, String packageName, LinkedList<String> importedFiles,               LinkedList<String> importedPackages, LinkedList<VariableData> vars,               LinkedList<Pair<SymbolData, JExpression>> thrown)", "diff": ["-   */", "+    */", "+    if (vars == null) throw new RuntimeException(\"Bob called with _vars = null!\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54dd1c4bc6c05f9208a5c427783e8a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ObjectMethodCall.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void setExpression(Expression e)", "signatureAfterChange": "   public void setExpression(Expression e)", "diff": ["+    if (e == null) { throw new IllegalArgumentException(\"e == null\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab6fee40d600a2b470b60c34dc8e47fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "4e55340834f8e6032cf1387752575fd19cb935fe", "commitAfterChange": "de413eda4232899a577fad80816630301e25a4de", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public void removeRegion(final R r)", "signatureAfterChange": "   public void removeRegion(final R r)", "diff": ["-    ", "+    if (r == null) throw new UnexpectedException(\"Region node for region \" + r + \" is null\");", "-    ", "+//    expandTree();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b36e942162c7951094769f3cab498503", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ExpressionTypeChecker(Data data, File file, String packageName, LinkedList<String> importedFiles,                                 LinkedList<String> importedPackages, LinkedList<VariableData> vars,                                 LinkedList<Pair<SymbolData, JExpression>> thrown)", "signatureAfterChange": "   public ExpressionTypeChecker(Data data, File file, String packageName, LinkedList<String> importedFiles,                                 LinkedList<String> importedPackages, LinkedList<VariableData> vars,                                 LinkedList<Pair<SymbolData, JExpression>> thrown)", "diff": ["+    if (vars == null) throw new RuntimeException(\"vars == null in new ExpressionTypeChecker operation\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5c8cb6bbe1119d468dd6d60a18aab3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "37dab6b79fc3d4e6f7b2b5f0aa53a4ea9b7f7476", "commitAfterChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public synchronized boolean hasSuspendedThreads() throws DebugException", "signatureAfterChange": "   public synchronized boolean hasSuspendedThreads() throws DebugException", "diff": ["-    _ensureReady();", "+    if (!isReady()) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b71637fd64c21de087f25f7307d4e947", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpret(final String s)", "signatureAfterChange": "   public void interpret(final String s)", "diff": ["-      Throwable cause = ume.getCause();", "+", "+      if (Utilities.TEST_MODE) { ", "+//        Utilities.show(\"Unmarshalling exception found!\");", "+//        System.err.println(\"Exception is: \" + ume);", "+//        ume.printStackTrace();", "+        throw new UnexpectedException(ume);", "+      }", "+        ", "+      Throwable cause = ume.getCause(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a7a0e2c9bca6414e5e41075df5d697", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "89ce626553f46c8001d10031c8a245d2124e251e", "commitAfterChange": "452aec6cd2ac8055e0720e2d34a3c7ea1513cd68", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData() throws DebugException", "signatureAfterChange": "   public synchronized Vector<DebugThreadData> getCurrentThreadData() throws DebugException", "diff": ["-    _ensureReady();", "+    if (! isReady()) { return new Vector<DebugThreadData>(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cedfffd6d9db8d4dc54ca702d5a0eb33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "signatureAfterChange": "   synchronized boolean setCurrentThread(ThreadReference thread)", "diff": ["+    if (!thread.isSuspended()) {", "+      throw new IllegalArgumentException(\"Thread must be suspended to set \" +", "+                                         \"as current.  Given: \" + thread);", "+    }", "+    ", "-      if ((_suspendedThreads.isEmpty() || !_suspendedThreads.contains(thread.uniqueID()))", "-            && (thread.isSuspended() && thread.frameCount() > 0)) {", "+      if ((_suspendedThreads.isEmpty() || ", "+           !_suspendedThreads.contains(thread.uniqueID()))", "+            && (thread.frameCount() > 0)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7760e28ba78b2bb2938a56df449a8e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ClassBodyTypeChecker(SymbolData sd, File file, String packageName, LinkedList<String> importedFiles, LinkedList<String> importedPackages, LinkedList<VariableData> vars, LinkedList<Pair<SymbolData, JExpression>> thrown)", "signatureAfterChange": "   public ClassBodyTypeChecker(SymbolData sd, File file, String packageName, LinkedList<String> importedFiles,                                LinkedList<String> importedPackages, LinkedList<VariableData> vars,                                LinkedList<Pair<SymbolData, JExpression>> thrown)", "diff": ["-  public ClassBodyTypeChecker(SymbolData sd, File file, String packageName, LinkedList<String> importedFiles, LinkedList<String> importedPackages, LinkedList<VariableData> vars, LinkedList<Pair<SymbolData, JExpression>> thrown) {", "+  public ClassBodyTypeChecker(SymbolData sd, File file, String packageName, LinkedList<String> importedFiles, ", "+                              LinkedList<String> importedPackages, LinkedList<VariableData> vars, ", "+                              LinkedList<Pair<SymbolData, JExpression>> thrown) {", "+    if (sd == null) throw new RuntimeException(\"SymbolData is null in new ClassBodyTypeChecker operation\");", "+    assert _vars == vars;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d921ec033179d8ee41ba2b64615fdfd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DefinitionsDocument.java", "commitBeforeChange": "cfd8cdfe8db5b449181969655285bf92b469bc81", "commitAfterChange": "f17abf941340b20848be6eb070215726592e1973", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": "   \tpublic void move(int dist)", "signatureAfterChange": "    public void move(int dist)", "diff": ["-\tpublic void move(int dist)", "-\t\t{", "-\t\t\t_currentLocation += dist;", "-\t\t\t_reduced.move(dist);", "-\t\t}", "+  public void move(int dist)", "+  {", "+    _currentLocation += dist;", "+    if (_currentLocation < 0) {", "+      throw new RuntimeException(\"location < 0?!\");", "+    }", "+    _reduced.move(dist);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab09e490232560c6b2c8674ed93e0f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "29ccda25ff2a7401ae41a06c785df4c3669cc6b7", "commitAfterChange": "1eeeeeb00db74758ba8d89e3d0c132d6fb460e6c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    protected JavacGJCompiler()", "signatureAfterChange": "    protected JavacGJCompiler()", "diff": ["+   */ ", "+    if (!_isValidVersion()) {", "+      throw new RuntimeException(\"Invalid version of Java compiler.\");", "+    } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6b07e8ea99a5967ebca13787ef402ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FileSelectorComponent.java", "commitBeforeChange": "217c110d76e83e4661793b1b3dd648691e91b61d", "commitAfterChange": "d1b8a064222fec51f4a22f2414776e99e8ad8af0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public FileSelectorComponent(Frame parent, JFileChooser chooser, int numCols, float fontSize, boolean mustExist)", "signatureAfterChange": "   public FileSelectorComponent(Frame parent, JFileChooser chooser, int numCols, float fontSize, boolean mustExist)", "diff": ["+    if (chooser == null) throw new UnexpectedException(\"Error: called new FileSelectorComponent(...) with a null chooser!\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb8d69922db11ac7c9e9d3b560f7bf7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TypeParameter.java", "commitBeforeChange": "a24082414064ecb42431a2e612770e1ab3e9fefa", "commitAfterChange": "b2a145d8d3ea1ad947e0937f542b0780baf31d45", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public TypeParameter(List<IdentifierToken> ids, ReferenceTypeName in_bound,                        List<ReferenceTypeName> in_interfaceBounds, SourceInfo in_sourceInfo)", "signatureAfterChange": "   public TypeParameter(List<IdentifierToken> ids, ReferenceTypeName in_bound,                        List<ReferenceTypeName> in_interfaceBounds, SourceInfo in_sourceInfo)", "diff": ["+    if (in_interfaceBounds == null) {", "+      throw new IllegalArgumentException(\"Parameter 'interfaceBounds' to the TypeParameter constructor was null.\");", "+    }"]}], "num": 18578}
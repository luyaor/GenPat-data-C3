{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "accb61a492067323d2d0517f2daca71b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e8a54e0cdc23593e69b15debb4fc4f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public TypeData forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "signatureAfterChange": "   public TypeData forSimpleNamedClassInstantiation(SimpleNamedClassInstantiation that)", "diff": ["-   */", "+    */", "-    //It is an error to instantiate a non-static inner class from a static context (i.e. new A.B() where B is not a static inner class).", "-    //Here, we make sure that if B is non-static, it is not an inner class of anything.", "+    // Cannot instantiate a non-static inner class from a static context (i.e. new A.B() where B is dynamic).", "+    // Here, we make sure that if B is non-static, it is not an inner class of anything.", "-      _addError(Data.dollarSignsToDots(type.getName()) + \" is not a static inner class, and thus cannot be instantiated from this context.  Perhaps you meant to use an instantiation of the form new \" + firstPart + \"().new \" + secondPart + \"()\", that);", "+      _addError(Data.dollarSignsToDots(type.getName()) + \" is not a static inner class, and thus cannot be \" + ", "+                \"instantiated from this context.  Perhaps you meant to use an instantiation of the form new \" + ", "+                firstPart + \"().new \" + secondPart + \"()\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c050b9cd249373f436865d4fdcdb4be5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName)", "signatureAfterChange": "   private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName)", "diff": ["-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    String[] primitiveTypes =", "+      new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to hashCode(), it recursively generates a hash code for any object,\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * As a helper to hashCode(), it recursively generates a hash code for any object,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) +", "+                    \" * including nulls, arrays, and standard reference types.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private int \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private int \" + methodName + \"(java.lang.Object o) {\" + ", "+                    newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + ", "+                      \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());\" + ", "+                      newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + ", "+                      \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, hashCode() is called\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, hashCode() is called\" + ", "+                    newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList<java.lang.Object> alreadyGenerated) {\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, \" + ", "+                      \"final java.util.LinkedList<java.lang.Object> alreadyGenerated) {\" + newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList alreadyGenerated) {\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, \" + ", "+                      \"final java.util.LinkedList alreadyGenerated) {\" + newLine + newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"return (o != null) && (o instanceof ArrayWrapper)  && \" + valueEqualsName + \"(array, ((ArrayWrapper) o).array());\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"return (o != null) && (o instanceof ArrayWrapper)  && \" + ", "+                    valueEqualsName + \"(array, ((ArrayWrapper) o).array());\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return 0; } // This method should never be used -- only here for consistency.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + ", "+                    \"public int hashCode() { return 0; } // This method should never be used -- \" + ", "+                    \"only here for consistency.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyGenerated.contains(currentWrapper)) { return -1; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyGenerated.contains(currentWrapper)) { return -1; }\" + ", "+                    newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) +", "+                    \"result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);\" +", "+                    newLine);", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + ", "+                    \"else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }\" + newLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaca453db0539274d7c1f57849a5466d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/VariableData.java", "commitBeforeChange": "45afdf26640d7e2a166ed67c249ba6fd207b1d2b", "commitAfterChange": "e7a6b9c5a51a2cf7b9cfb5a10d90c24a3c7c3844", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public String toString()", "signatureAfterChange": "   public String toString()", "diff": ["-    return \"VariableData(\" + _name + \", \" + _modifiersAndVisibility.getModifiers() + \", \" + _type + \", \" + _hasBeenAssigned + \")\";", "+    return \"VariableData(\" + _name + \", \" + Arrays.toString(_modifiersAndVisibility.getModifiers()) + \", \" + _type + ", "+      \", \" + _hasBeenAssigned + \")\";"]}], "num": 17716}
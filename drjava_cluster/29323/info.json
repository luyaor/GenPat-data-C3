{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c80e9e3431b101263073ea76da26d19c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fbc1990e577e406dc72fea099c2c441", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "3138149e59af557581689e53b212f79d04dd8105", "commitAfterChange": "2fc1b48ae47904f12ff70a4157426a6f949b079b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testGetDDocFromCache() throws BadLocationException, IOException, OperationCanceledException", "signatureAfterChange": "      public void testGetDDocFromCache() throws BadLocationException, IOException, OperationCanceledException", "diff": ["-    doc1.getLength();  // forces document to be read into memory", "+    doc1.getCurrentLine();  // forces document to be read into memory", "-    doc2.getLength();  // forces document to be read into memory", "+    doc2.getCurrentLine();  // forces document to be read into memory", "-    doc3.getLength();  // forces document to be read into memory", "+    doc3.getCurrentLine();  // forces document to be read into memory", "-    doc4.getLength();  // forces document to be read into memory", "+    doc4.getCurrentLine();  // forces document to be read into memory", "-    doc5.getLength();  // forces document to be read into memory", "+    doc5.getCurrentLine();  // forces document to be read into memory", "-    doc6.getLength();  // forces document to be read into memory", "+    doc6.getCurrentLine();  // forces document to be read into memory"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3305ea46b541025b87f8b36f5dc053cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "714a91a3f9a91ffe3e5ee9ae0bd0c977c7aa4e31", "commitAfterChange": "86cce18ff80f67b178e899650f588fd3636436b4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public static void deleteDirectoryOnExit(final File dir)", "signatureAfterChange": "   public static void deleteDirectoryOnExit(final File dir)", "diff": ["-    // Delete this on exit, whether it's a directory or file", "-    dir.deleteOnExit();", "-    // If it's a directory, visit its children.", "-    //  For some reason, this has to be done after calling deleteOnExit", "-    //  on the directory itself.", "+    // Delete this on exit, whether it's a directory or file", "+    _log.log(\"Deleting file/directory \" + dir + \" on exit\");", "+    dir.deleteOnExit(); ", "+    ", "+    // If it's a directory, visit its children.  This recursive walk has to be done AFTER calling deleteOnExit", "+    //  on the directory itself because Java closes the list of files to deleted on exit in reverse order.", "-      if (childFiles!=null) { // listFiles may return null if there's an IO error", "+      if (childFiles != null) { // listFiles may return null if there's an IO error", "+", "+  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37505bfbb7c518fb15b802a5d8f29221", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver,                               List<String> classpaths,                               JavadocListener listener)", "signatureAfterChange": "   private void _javadocWorker(File destDirFile, FileSaveSelector saver,                               List<String> classpaths,                               JavadocListener listener)", "diff": ["-    HashSet docUnits = new HashSet();  // units to send to Javadoc (packages or files)", "-    HashSet sourceRootSet = new HashSet();  // set of unique source roots for open files", "-    HashSet defaultRoots = new HashSet();  // source roots for files in default package", "-    HashSet topLevelPacks = new HashSet();  // top level package names to include", "+    HashSet<String> docUnits = new HashSet<String>();  // units to send to Javadoc (packages or files)", "+    HashSet<File> sourceRootSet = new HashSet<File>();  // set of unique source roots for open files", "+    HashSet<File> defaultRoots = new HashSet<File>();  // source roots for files in default package", "+    HashSet<String> topLevelPacks = new HashSet<String>();  // top level package names to include", "-    ArrayList args = new ArrayList();", "+    ArrayList<String> args = new ArrayList<String>();"]}], "num": 29323}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "296f619d59afd1d62971de8a22ea9fa4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ad14c6cbc4eb8a464686e95a20750ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "signatureAfterChange": "   public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)     throws OperationCanceledException", "diff": ["+    assert isWriteLocked();", "+    ", "-    acquireWriteLock();", "+//    acquireWriteLock();", "-        Position oldCurrentPosition = createUnwrappedPosition(_currentLocation);", "-        int lineStart = getLineStartPos(selStart);", "-        if (lineStart <  0) lineStart = 0;", "-        setCurrentLocation(lineStart);", "+        Position oldPosition = createUnwrappedPosition(_currentLocation);", "+        int lineStart = _getLineStartPos(selStart);", "+        if (lineStart <  0) lineStart = 0;  // selStart on first line", "+        _setCurrentLocation(lineStart);", "-          _setCurrentLocation(oldCurrentPosition.getOffset());", "-          if (onlyWhiteSpaceBeforeCurrent()) {", "-            int space = getWhiteSpace();", "-            _reduced.move(space);", "-            _currentLocation = _currentLocation + space;", "-          }", "+          _setCurrentLocation(oldPosition.getOffset()); // moves currentLocation back to original offset on line", "+          if (onlyWhiteSpaceBeforeCurrent()) _move(_getWhiteSpace());  // passes any additional spaces before firstNonWS", "-    catch (Throwable t) { throw new UnexpectedException(t); }", "-    finally { releaseWriteLock(); } ", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+//    finally { releaseWriteLock(); } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6ce22843a6f13bcde0a4597bb2ba272", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public abstract Ret forNonempty(ConsList.Nonempty<? extends T> list);", "signatureAfterChange": "   public abstract Ret forNonempty(T first, ConsList<? extends T> rest);", "diff": ["-  public abstract Ret forNonempty(ConsList.Nonempty<? extends T> list);", "+  public abstract Ret forNonempty(T first, ConsList<? extends T> rest);"]}], "num": 25182}
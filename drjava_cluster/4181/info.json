{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "360bfb0f01b521c252e4be12732acd9a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7a46863d7debc908e179c08718016e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public TypeData forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that)", "signatureAfterChange": "   public TypeData forComplexAnonymousClassInstantiation(ComplexAnonymousClassInstantiation that)", "diff": ["+    /* Note: _data should be the enclosing class. */", "+//    System.err.println(\"******** Type-checking the anonymous class \" + that);", "+//    if (! (_data instanceof SymbolData) )", "+//      System.err.println(\"********* Type-checking following anon class blows up \" + that);", "+//                                     ", "+//    assert _data instanceof SymbolData;", "+    ", "+   ", "-    TypeData enclosingType = that.getEnclosing().visit(this);", "+    ", "+    SymbolData lexEnclosing = _data.getSymbolData();  // grabs the enclosing class if _data not already a SymbolData", "+    ", "+    Expression receiver = that.getEnclosing();", "+    ", "+    // Get the enclosing type as specified by the \"receiver\" expression.", "+    TypeData enclosingType = receiver.visit(this);", "+    ", "-    //make sure we can see enclosingType", "-    checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), ", "-                       enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+    SymbolData enclosing = enclosingType.getSymbolData();", "-    final SymbolData superclass_result = getSymbolData(that.getType().getName(), enclosingType.getSymbolData(), ", "-                                                       that.getType());", "+    // Make sure we can see enclosing SymbolData from within lexEnclosing", "+    checkAccessibility(that, enclosing.getMav(), enclosing.getName(), enclosing, lexEnclosing, \"class or interface\", true);", "+    final SymbolData superClass = getSymbolData(that.getType().getName(), enclosing, that.getType());", "-    ", "-    // Get this anonymous inner class's SymbolData", "-    SymbolData myData = handleAnonymousClassInstantiation(that, superclass_result);", "+    // Get this anonymous inner class's SymbolData; passing lexEnclosing is a hack.  It almost certainly should be", "+    // enclosing, but the LLV processing contains the same error.  We need to be consistent.", "+    SymbolData myData = handleAnonymousClassInstantiation(that, lexEnclosing);  // TODO: the wrong enclosing context?", "-    if (superclass_result.isInterface()) {", "+    if (superClass.isInterface()) {", "-    else { //superclass_result is an interface...need to do some extra checking for static types.", "-      InstanceData result = classInstantiationHelper(that, superclass_result); //use super class here, since it has constructors in it", "-      if (result == null) {return null;}", "+    else { // superClass is an interface...need to do some extra checking for static types.", "+      InstanceData result = classInstantiationHelper(that, superClass); //use super class here, since it has constructors in it", "+      if (result == null) return null;", "-                Data.dollarSignsToDots(superclass_result.getName()) + \"()\", that);", "+                Data.dollarSignsToDots(superClass.getName()) + \"()\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "926f8097880fda2e7d1ac7f40ec1478e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentTest.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testContentsAndReset() throws EditDocumentException", "signatureAfterChange": "   public void testContentsAndReset() throws EditDocumentException", "diff": ["-    String origText = _doc.getBanner() + _doc.getPrompt();", "-    assertEquals(\"Contents before insert\", origText, _doc.getDocText(0, _doc.getLength()));", "+    String banner = InteractionsModel.getStartUpBanner();", "+    String prompt = _doc.getPrompt();", "+    String newBanner = \"THIS IS A NEW BANNER\\n\";", "+    assertEquals(\"Contents before insert\", banner + prompt, _doc.getDocText(0, _doc.getLength()));", "-    assertEquals(\"Contents before reset\", _doc.getBanner() + \"before\" + _doc.getPrompt() + \"text\",", "+    assertEquals(\"Contents before reset\", banner + \"before\" + prompt + \"text\",  ", "-    _doc.reset();", "-    assertEquals(\"Contents after reset\", origText, _doc.getDocText(0, _doc.getLength()));", "+    _doc.reset(newBanner);", "+    assertEquals(\"Contents after reset\", newBanner + prompt, _doc.getDocText(0, _doc.getLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a30ee3c6ea96b2bea5a19bfb8692c667", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f85f20b04a845bc5f3cc15aa220d5ca52f7ac620", "commitAfterChange": "65a7277b66a8820a81606e41a75578dc0c567fde", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleFieldAccess node)", "signatureAfterChange": "     @Override public Type visit(SimpleFieldAccess node)", "diff": ["+        DJClass enclosingThis = enclosingThis(t);", "+        boolean onlyStatic = (enclosingThis == null);", "-        if (context.getThis() == null) {", "+        if (onlyStatic) {", "-        if (!ref.field().isStatic()) {", "-          setDJClass(node, t.ofClass());", "-        }", "+        if (!onlyStatic) { setDJClass(node, enclosingThis); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acb5b55b22976f95f55b4b8e65b9a5e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "37449cba11f74bdf3921e2b515b5228eef23235b", "commitAfterChange": "43a72be50c3246f8e631a488321fd0367ada5a58", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public NewVersionPopup(MainFrame parent)", "signatureAfterChange": "   public NewVersionPopup(MainFrame parent)", "diff": ["-    _modeBox = new JComboBox(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.toArray());", "-    for(int i = 0; i < OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.size(); ++i) {", "-      if (DrJava.getConfig().getSetting(OptionConstants.NEW_VERSION_NOTIFICATION)", "-            .equals(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(i))) {", "+    final ArrayList<String> choices = OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES;", "+    final int size = choices.size();", "+    _modeBox = new JComboBox<String>(choices.toArray(new String[size]));", "+    for(int i = 0; i < size; ++i) {", "+      if (DrJava.getConfig().getSetting(OptionConstants.NEW_VERSION_NOTIFICATION).equals(choices.get(i))) {", "-        DrJava.getConfig().setSetting(OptionConstants.NEW_VERSION_NOTIFICATION,", "-                                      OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(_modeBox.getSelectedIndex()));", "+        DrJava.getConfig().setSetting(OptionConstants.NEW_VERSION_NOTIFICATION, choices.get(_modeBox.getSelectedIndex()));"]}], "num": 4181}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfd0133230edb6781872d9e4cf663a8f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0368e0fd25e7e1a5d9a577c5a42765e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testNoAssignment() throws ExceptionReturnedException", "signatureAfterChange": "   public void testAccessFieldsOfOuterClasses()      throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["+   */", "+  public void testAccessFieldsOfOuterClasses() ", "+    throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException {", "+    File file = new File(_tempDir, \"MonkeyStuff.java\");", "+    OpenDefinitionsDocument doc = doCompile(MONKEY_STUFF, file);", "+    BreakpointTestListener debugListener = new BreakpointTestListener();", "+    _debugger.addListener(debugListener);", "+    // Start debugger", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    ", "+    // Set one breakpoints", "+    int index = MONKEY_STUFF.indexOf(\"System.out.println\");", "+    _debugger.toggleBreakpoint(doc,index,11);", "+     ", "+    // Run the main() method, hitting both breakpoints in different threads", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java MonkeyStuff\");", "+       _waitForNotifies(3); // suspended, updated, breakpointReached", "+       _notifierLock.wait();", "+     }", "+    ", "+    // Calling interpret instead of interpretIgnoreResult because we want", "+    // to wait until the interaction has ended.", "+    interpret(\"try {\\n\" +", "+              \"  for (int i = MonkeyStuff.this.foo; i < 7; i++) {\\n\"+", "+              \"    do{System.out.println(MonkeyInner.this.innerFoo);}\\n\" +", "+              \"    while(MonkeyStuff.MonkeyInner.this.innerFoo == MonkeyThreeDeep.this.threeDeepFoo);\\n\" +", "+              \"    switch(MonkeyStuff.MonkeyInner.MonkeyTwoDeep.this.twoDeepFoo) {\\n\" + ", "+              \"      case 13: if (this.threeDeepFoo == 5) {\\n\" +", "+              \"                  System.out.println(MonkeyThreeDeep.this.threeDeepFoo);\\n\" +", "+              \"               }\\n\" +", "+              \"               else {\\n\" +", "+              \"                  MonkeyThreeDeep.this.threeDeepFoo = MonkeyThreeDeep.this.threeDeepFoo + MonkeyStuff.this.foo;\\n\" +", "+              \"               }\\n\" +", "+              \"    }\\n\" +", "+              \"  }\\n\" +", "+              \"}\\n\"+              ", "+              \"catch(Exception e) { System.out.println(MonkeyThreeDeep.this.threeDeepFoo);}\\n\" +", "+              \"finally {System.out.println(MonkeyInner.MonkeyTwoDeep.this.twoDeepFoo);}\");", "+    assertInteractionsDoesNotContain(\"18\");", "+    assertInteractionsDoesNotContain(\"6\");", "+    assertInteractionsContains(\"8\\n13\\n\");", "+    ", "+    // Close doc and make sure breakpoints are removed    ", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(1);  //fires once", "+      ", "+    // Shutdown the debugger", "+    if (printMessages) System.out.println(\"Shutting down...\");", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    ", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) System.out.println(\"Shut down.\");", "+    _debugger.removeListener(debugListener);  ", "-   */", "-    /*", "-    */", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa7d17cfced5d8668d6cd9beda6fc01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStartupAndShutdown()     throws DebugException, InterruptedException", "signatureAfterChange": "   public void testStartupAndShutdown()     throws DebugException, InterruptedException", "diff": ["-    debugListener.assertDebuggerStartedCount(1);", "+    debugListener.assertDebuggerStartedCount(1);  //fires", "+    debugListener.assertDebuggerStartedCount(1);", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    ", "+    ", "+    // Start debugger again without resetting", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(2);  //fires", "+    ", "+    // Reset interactions (which shuts down debugger)", "+    InterpretListener resetListener = new InterpretListener() {", "+      public void interpreterChanged(boolean inProgress) {", "+        // Don't notify: happens in the same thread", "+        interpreterChangedCount++;", "+      }", "+      public void interpreterResetting() {", "+        // Don't notify: happens in the same thread", "+        interpreterResettingCount++;", "+      }", "+      public void interpreterReady() {", "+        synchronized(_notifierLock) {", "+          interpreterReadyCount++;", "+          if (printEvents) System.out.println(\"interpreterReady \" + interpreterReadyCount);", "+          _notifyLock();", "+        }", "+      }", "+    };", "+    _model.addListener(resetListener);", "+    synchronized(_notifierLock) {", "+      _model.resetInteractions();", "+      _waitForNotifies(2);  // shutdown, interpreterReady", "+      _notifierLock.wait();", "+    }", "+    _model.removeListener(resetListener);", "+    resetListener.assertInterpreterResettingCount(1);  //fires (no waiting)", "+    resetListener.assertInterpreterReadyCount(1);  //fires", "+    debugListener.assertDebuggerStartedCount(2);", "+    debugListener.assertDebuggerShutdownCount(2);  //fires", "+    ", "+    ", "+    // Start debugger again after reset", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(3);  //fires", "+    debugListener.assertDebuggerShutdownCount(2);", "+    ", "+    // Shutdown the debugger", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(3);", "+    debugListener.assertDebuggerShutdownCount(3);  //fires", "+    "]}], "num": 18159}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "990d813de1c28f8ccde66bbd988d95a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73268013758087cfd4244cdf6bd909b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 391, "methodNumberAfterChange": 391, "signatureBeforeChange": "\r \r   public void forVoidReturnStatement(VoidReturnStatement that)", "signatureAfterChange": "    public void forVoidReturnStatement(VoidReturnStatement that)", "diff": ["-\r", "-  public void forVoidReturnStatement(VoidReturnStatement that) {\r", "-    forVoidReturnStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forVoidReturnStatementOnly(that);\r", "-  }\r", "+", "+  public void forVoidReturnStatement(VoidReturnStatement that) {", "+    forVoidReturnStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forVoidReturnStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f3190fa760acce972e56effa980dcd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 397, "methodNumberAfterChange": 397, "signatureBeforeChange": "\r \r   public void forEmptyStatement(EmptyStatement that)", "signatureAfterChange": "    public void forEmptyStatement(EmptyStatement that)", "diff": ["-\r", "-  public void forEmptyStatement(EmptyStatement that) {\r", "-    forEmptyStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyStatementOnly(that);\r", "-  }\r", "+", "+  public void forEmptyStatement(EmptyStatement that) {", "+    forEmptyStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d133bbd72bfb70d70732ef70f73826ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 489, "methodNumberAfterChange": 489, "signatureBeforeChange": "\r \r   public void forEmptyExpression(EmptyExpression that)", "signatureAfterChange": "    public void forEmptyExpression(EmptyExpression that)", "diff": ["-\r", "-  public void forEmptyExpression(EmptyExpression that) {\r", "-    forEmptyExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyExpressionOnly(that);\r", "-  }\r", "+", "+  public void forEmptyExpression(EmptyExpression that) {", "+    forEmptyExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyExpressionOnly(that);", "+  }"]}], "num": 18155}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02f84350c6869c2df39651fdf8367548", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265a03a38d30f0fd67bfceca52156b78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef) throws IncompatibleThreadStateException, AbsentInformationException,       InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef) throws IncompatibleThreadStateException, AbsentInformationException,       InvocationException, DebugException", "diff": ["-    if (printMessages) System.out.println(\"Getting debug interpreter\");", "-    if (printMessages) System.out.println(\"Getting variables\");", "+    if (printMessages) printStream.println(\"Getting debug interpreter\");", "+    if (printMessages) printStream.println(\"Getting variables\");", "-      if (printMessages) System.out.println(\"Iterating through vars\");", "+      if (printMessages) printStream.println(\"Iterating through vars\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50bea530d5b1fe6b76bcbf2f98892b8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "e656613109a12add4ad6c51f7040ce36731c0f8b", "commitAfterChange": "838397e908a24e107f724695c1466c1c498ec946", "methodNumberBeforeChange": 193, "methodNumberAfterChange": 227, "signatureBeforeChange": "   public String getDisplayFilename(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public String getDisplayFileName()", "diff": ["-  public String getDisplayFilename(OpenDefinitionsDocument doc) {", "-", "-    String fileName = doc.getFilename();", "-", "-    // Remove \".java\" if at the end of name", "-    if (fileName.endsWith(\".java\")) {", "-      int extIndex = fileName.lastIndexOf(\".java\");", "-      if (extIndex > 0) fileName = fileName.substring(0, extIndex);", "-    }", "-    ", "-    // Mark if modified", "-    if (doc.isModifiedSinceSave()) fileName = fileName + \"*\";", "-    ", "-    return fileName;", "-  }", "+     */", "+    public String getDisplayFileName() {", "+      ", "+      String fileName = getFileName();", "+      ", "+      // Remove \".java\" if at the end of name", "+      if (fileName.endsWith(\".java\")) {", "+        int extIndex = fileName.lastIndexOf(\".java\");", "+        if (extIndex > 0) fileName = fileName.substring(0, extIndex);", "+      }", "+      ", "+      // Mark if modified", "+      if (isModifiedSinceSave()) fileName = fileName + '*';", "+      return fileName;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ce7736f6104a48dfed36579b106c57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testStaticFieldsConsistent() throws Exception", "signatureAfterChange": "   public void testStaticFieldsConsistent() throws Exception", "diff": ["-    if (printMessages) System.out.println(\"----testStaticFieldsConsistent----\");", "+    if (printMessages) printStream.println(\"----testStaticFieldsConsistent----\");", "-    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4);", "+    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4,true);", "-      System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+      printStream.println(\"----After breakpoint:\\n\" + getInteractionsText());", "-      System.out.println(\"****\"+getInteractionsText());", "+      printStream.println(\"****\"+getInteractionsText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5caf0657219c85117606595ec8cce919", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName, ThreadReference threadRef) throws      InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException,      DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName, ThreadReference threadRef) throws      InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException,      DebugException", "diff": ["-          System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-          System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+          printStream.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+          printStream.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-        if ( printMessages ) System.out.println(\"Returning...\");", "+        if ( printMessages ) printStream.println(\"Returning...\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6056dd59ddedc3af135b94efd29e5c47", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "0a7bf024d048ea8c858680b0ac23e24e5ae6fe7d", "commitAfterChange": "362905f63dbb4da65eed4f6ca60b6ce9eca3dd7d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 30, "signatureBeforeChange": "   protected void goToRegion()", "signatureAfterChange": "   protected void goToRegion()", "diff": ["-    if (r.size() == 1) _frame.scrollToDocumentAndOffset(r.get(0).getDocument(), r.get(0).getStartOffset(), false);", "+    if (r.size() == 1) {", "+      updateNextPreviousRegionButtons(r.get(0));", "+      _frame.scrollToDocumentAndOffset(_lastSelectedRegion.getDocument(), _lastSelectedRegion.getStartOffset(), false);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79fcad28124c3644425a4f879c50e07b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void startUp() throws DebugException", "signatureAfterChange": "   public synchronized void startUp() throws DebugException", "diff": ["-          System.out.println(\"Two attempts required for debugger to attach to slave JVM\");", "+          error.log(\"Two attempts required for debugger to attach to slave JVM\");", "-          System.out.println(\"Three attempts required for debugger to attach to slave JVM\");", "+          error.log(\"Three attempts required for debugger to attach to slave JVM\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9cc9395a16ef67ce446f3ef0e49737a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "bd322aadf7a22d1a4ec86b0a862694fe4a7061a2", "commitAfterChange": "3d4d8a63fa83bcea4096f34b202c50c11c830e2e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public final synchronized void quit()", "signatureAfterChange": "   public final synchronized void quit()", "diff": ["-          // wait for parent thread to exit ", "+          // wait for parent RMI calling thread to exit ", "-          _log.log(AbstractSlaveJVM.this + \" calling System.exit(0)\");", "-          System.exit(0);", "+          Thread.sleep(100);  // This is kluge to allow the parent RMI calling thread to exit", "+          shutdown();", "+    _log.log(this + \".quit() RMI call exited\");", "-    _log.log(this + \".quit() RMI call exited\");"]}], "num": 21186}
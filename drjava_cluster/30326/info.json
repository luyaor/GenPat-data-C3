{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6eb80d05c7ef137f31e42fddcbdb9fc3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a1fa67e4c9dff0c01af7ae8a8c0a5fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "1019c9ce8df1b09fc19055380326e5d250127abd", "commitAfterChange": "b94dd8291b58b95ceb0b267cf651c06b4d356383", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>   convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>   convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["-    LanguageLevelVisitor._newSDs=new Hashtable<SymbolData, LanguageLevelVisitor>(); /**initialize so we don't get null pointer exception*/", "+    LanguageLevelVisitor._newSDs = new Hashtable<SymbolData, LanguageLevelVisitor>(); /**initialize so we don't get null pointer exception*/", "-    //now create any constructors.", "-    while (!LanguageLevelVisitor._newSDs.isEmpty()) {", "-        Enumeration<SymbolData> en = LanguageLevelVisitor._newSDs.keys();", "-      while (en.hasMoreElements()) {", "-        SymbolData first = en.nextElement();", "-        LanguageLevelVisitor sdlv = LanguageLevelVisitor._newSDs.remove(first);", "-        sdlv.createConstructor(first);", "-      }", "+    // Create any constructors.", "+    Hashtable<SymbolData, LanguageLevelVisitor> newSDs = LanguageLevelVisitor._newSDs;", "+    Enumeration<SymbolData> keys = newSDs.keys();", "+    while (keys.hasMoreElements()) {", "+      SymbolData key = keys.nextElement();", "+      LanguageLevelVisitor sdlv = newSDs.get(key);    // Can return null because of silly side effects!", "+      if (sdlv != null) sdlv.createConstructor(key);  // Bug fix is a kludge! Deletes (key,sdlv) from _newSDs!", "+    assert LanguageLevelVisitor._newSDs.isEmpty();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a4ec9e2c3a9bf52491059325d28305", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "1019c9ce8df1b09fc19055380326e5d250127abd", "commitAfterChange": "b94dd8291b58b95ceb0b267cf651c06b4d356383", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve, boolean addError)", "signatureAfterChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "diff": ["-   */", "-  private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve, boolean addError) {", "+    */", "+  private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,", "+                                                   boolean addError) {", "-", "+    ", "-", "+    ", "-", "+      ", "-", "+    ", "-   ", "+    ", "-        return new File(path + \".dj0\").getCanonicalFile().equals(f) ||", "-          new File(path + \".dj1\").getCanonicalFile().equals(f) ||", "-          new File(path + \".dj2\").getCanonicalFile().equals(f);", "+          return new File(path + \".dj0\").getCanonicalFile().equals(f) ||", "+            new File(path + \".dj1\").getCanonicalFile().equals(f) ||", "+            new File(path + \".dj2\").getCanonicalFile().equals(f);", "-      ", "-      ", "+    ", "+    ", "-", "+    ", "-    if (sd != null && !sd.isContinuation()) { return sd; }", "+    if (sd != null && ! sd.isContinuation()) { return sd; }", "-", "+          ", "-          while (!lv._newSDs.isEmpty()) {", "-            Enumeration<SymbolData> en = lv._newSDs.keys();", "-            while (en.hasMoreElements()) {", "-              SymbolData first = en.nextElement();", "-              LanguageLevelVisitor sdlv = lv._newSDs.remove(first);", "-              sdlv.createConstructor(first);", "-            }", "+          // Create any constructors.", "+          Hashtable<SymbolData, LanguageLevelVisitor> newSDs = lv._newSDs;", "+          ", "+          Enumeration<SymbolData> keys = newSDs.keys();", "+          while (keys.hasMoreElements()) {", "+            SymbolData key = keys.nextElement();", "+            LanguageLevelVisitor sdlv = newSDs.get(key);", "+            sdlv.createConstructor(key);  // Deletes (key,sdlv) from _newSDs!", "+          assert LanguageLevelVisitor._newSDs.isEmpty();", "-", "+          ", "-", "-        ", "+          ", "+          ", "-", "+        "]}], "num": 30326}
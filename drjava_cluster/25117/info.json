{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfa7e15ef728211e650c9611b344f686", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1177e1db3cb492126558f510d88db0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/autocomplete/parser/ACParser.java", "commitBeforeChange": "aa287bbb1c9881659edc121fbb5e7531149b5808", "commitAfterChange": "31b9f8dbee4928a805aac8571a8f70b93337e1d8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   final public SourceFile SourceFile() throws ParseException", "signatureAfterChange": "   final public SourceFile SourceFile() throws ParseException", "diff": ["+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CASE:", "+        case CATCH:", "+        case CHAR:", "+        case CLASS:", "+        case CONST:", "+        case CONTINUE:", "+        case _DEFAULT:", "+        case DO:", "+        case DOUBLE:", "+        case ELSE:", "+        case EXTENDS:", "+        case FALSE:", "+        case FINAL:", "+        case FINALLY:", "+        case FLOAT:", "+        case FOR:", "+        case GOTO:", "+        case IF:", "+        case IMPLEMENTS:", "+        case IMPORT:", "+        case INSTANCEOF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case NEW:", "+        case NULL:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case RETURN:", "+        case SHORT:", "+        case STRICTFP:", "+        case STATIC:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case THROWS:", "+        case TRANSIENT:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case VOLATILE:", "+        case WHILE:", "+        case DECIMAL_LITERAL:", "+        case HEX_LITERAL:", "+        case OCTAL_LITERAL:", "+        case LONG_DECIMAL_LITERAL:", "+        case LONG_HEX_LITERAL:", "+        case LONG_OCTAL_LITERAL:", "+        case DOUBLE_FLOATING_POINT_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case RPAREN:", "+        case LBRACE:", "+        case RBRACE:", "+        case LBRACKET:", "+        case RBRACKET:", "+        case SEMICOLON:", "+        case COMMA:", "+        case DOT:", "+        case ASSIGN:", "+        case GT:", "+        case LT:", "+        case BANG:", "+        case TILDE:", "+        case HOOK:", "+        case COLON:", "+        case EQ:", "+        case LE:", "+        case GE:", "+        case NE:", "+        case SC_OR:", "+        case SC_AND:", "+        case INCR:", "+        case DECR:", "+        case PLUS:", "+        case MINUS:", "+        case STAR:", "+        case SLASH:", "+        case BIT_AND:", "+        case BIT_OR:", "+        case XOR:", "+        case REM:", "+        case LSHIFT:", "+        case RSIGNEDSHIFT:", "+        case RSSHIFT1:", "+        case RSSHIFT2:", "+        case RUSHIFT1:", "+        case RUSHIFT2:", "+        case RUSHIFT3:", "+        case PLUSASSIGN:", "+        case MINUSASSIGN:", "+        case STARASSIGN:", "+        case SLASHASSIGN:", "+        case ANDASSIGN:", "+        case ORASSIGN:", "+        case XORASSIGN:", "+        case REMASSIGN:", "+        case LSHIFTASSIGN:", "+        case RSIGNEDSHIFTASSIGN:", "+        case RUNSIGNEDSHIFTASSIGN:", "+        case OTHER:", "-        try {", "-          temp1 = PackageStatement();", "-          packageStatements.addLast(temp1);", "-        } catch (ParseException e) {", "-", "-        }", "-      }", "-      label_2:", "-      while (true) {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case IMPORT:", "-          ;", "-          break;", "-        default:", "-          jj_la1[1] = jj_gen;", "-          break label_2;", "-        }", "-        try {", "+        if (jj_2_1(2147483647)) {", "-        } catch (ParseException e) {", "-", "-        }", "-      }", "-      label_3:", "-      while (true) {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case ABSTRACT:", "-        case CLASS:", "-        case FINAL:", "-        case INTERFACE:", "-        case NATIVE:", "-        case PRIVATE:", "-        case PROTECTED:", "-        case PUBLIC:", "-        case STRICTFP:", "-        case STATIC:", "-        case SYNCHRONIZED:", "-        case TRANSIENT:", "-        case VOLATILE:", "-        case SEPARATOR:", "-          ;", "-          break;", "-        default:", "-          jj_la1[2] = jj_gen;", "-          break label_3;", "-        }", "-        if (jj_2_1(2147483647)) {", "+        } else if (jj_2_2(2147483647)) {", "+          temp1 = PackageStatement();", "+          packageStatements.addLast(temp1);", "+        } else if (jj_2_3(2147483647)) {", "-        } else if (jj_2_2(2147483647)) {", "+        } else if (jj_2_4(2147483647)) {", "-        } else if (jj_2_3(2147483647)) {", "-          jj_consume_token(SEPARATOR);", "-         System.out.println(\"received separator\");", "+        } else if (jj_2_5(2147483647)) {", "+          AnyTokenButEOF();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bbfb415a4d91fcb8f7190d2a6341690", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "932762732e00ba19898bb0fcbc6f05a9c3384a3e", "commitAfterChange": "79cd8422a68cecd247626713ed61a8eea3d1fada", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   final public List<Node> parseStream() throws ParseException", "signatureAfterChange": "   final public List<Node> parseStream() throws ParseException", "diff": ["-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case IMPORT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case NEW:", "-      case NULL:", "-      case PACKAGE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case RETURN:", "-      case SHORT:", "-      case STATIC:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRANSIENT:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case VOLATILE:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case LESS:", "-      case BANG:", "-      case TILDE:", "-      case INCREMENT:", "-      case DECREMENT:", "-      case PLUS:", "-      case MINUS:", "+      if (jj_2_1(2147483647)) {", "+      } else {", "+        break label_1;", "+      }", "+      l = StreamItem();", "+                          list.addAll(l);", "+    }", "+    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+    case BOOLEAN:", "+    case BYTE:", "+    case CHAR:", "+    case DOUBLE:", "+    case FALSE:", "+    case FLOAT:", "+    case INT:", "+    case LONG:", "+    case NEW:", "+    case NULL:", "+    case SHORT:", "+    case SUPER:", "+    case THIS:", "+    case TRUE:", "+    case VOID:", "+    case INTEGER_LITERAL:", "+    case LONG_LITERAL:", "+    case FLOAT_LITERAL:", "+    case DOUBLE_LITERAL:", "+    case CHARACTER_LITERAL:", "+    case STRING_LITERAL:", "+    case IDENTIFIER:", "+    case LPAREN:", "+    case BANG:", "+    case TILDE:", "+    case INCREMENT:", "+    case DECREMENT:", "+    case PLUS:", "+    case MINUS:", "+      root = expression();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case SEMICOLON:", "+        jj_consume_token(SEMICOLON);", "-        break label_1;", "+        ;", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case PACKAGE:", "-        root = packageDeclaration();", "-        break;", "-      case IMPORT:", "-        root = importDeclaration();", "-        break;", "-      default:", "-        jj_la1[1] = jj_gen;", "-        if (jj_2_1(2147483647)) {", "-          root = methodDeclaration();", "-        } else if (jj_2_2(2147483647)) {", "-          l = localVariableDeclaration();", "-          jj_consume_token(SEMICOLON);", "-      list.addAll(l);", "-        } else if (jj_2_3(2)) {", "-          root = topLevelStatement();", "-        } else {", "-          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-          case ABSTRACT:", "-          case CLASS:", "-          case FINAL:", "-          case INTERFACE:", "-          case NATIVE:", "-          case PRIVATE:", "-          case PROTECTED:", "-          case PUBLIC:", "-          case STATIC:", "-          case SYNCHRONIZED:", "-          case TRANSIENT:", "-          case VOLATILE:", "-            root = typeDeclaration();", "-            break;", "-          default:", "-            jj_la1[2] = jj_gen;", "-            jj_consume_token(-1);", "-            throw new ParseException();", "-          }", "-        }", "-      }", "-         if (root != null) {", "-           list.add(root);", "-           root = null;", "-         }", "+                                  list.add(root);", "+      break;", "+    default:", "+      jj_la1[1] = jj_gen;", "+      ;", "-         {if (true) return list;}", "+      {if (true) return list;}", "+    throw new Error(\"Missing return statement in function\");", "+  }"]}], "num": 25117}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b057a79457780880074ae49ad5f932b8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c8b6a883dce10e5c8b1fd9fccb849e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LValueWithValueTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "                 public void testForArrayAccess()", "signatureAfterChange": "                 public void testForArrayAccess()", "diff": ["-                                   JExprParser.NO_SOURCE_INFO);", "+                                   SourceInfo.NO_INFO);", "-      MethodData makeArray = new MethodData(\"makeArray\", _privateMav, new TypeParameter[0], intArray, new VariableData[0], new String[0], _ta._data.getSymbolData(), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData makeArray = new MethodData(\"makeArray\", _privateMav, new TypeParameter[0], intArray, new VariableData[0], new String[0], _ta._data.getSymbolData(), new NullLiteral(SourceInfo.NO_INFO));", "-      ArrayAccess a1 = new ArrayAccess(JExprParser.NO_SOURCE_INFO, ", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"variable1\")),", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"intVar\")));", "+      ArrayAccess a1 = new ArrayAccess(SourceInfo.NO_INFO, ", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"variable1\")),", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"intVar\")));", "-      ArrayAccess a2 = new ArrayAccess(JExprParser.NO_SOURCE_INFO,", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"variable1\")),", "-                                       new PlusExpression(JExprParser.NO_SOURCE_INFO,", "-                                                          new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 12),", "-                                                          new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 22)));", "+      ArrayAccess a2 = new ArrayAccess(SourceInfo.NO_INFO,", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"variable1\")),", "+                                       new PlusExpression(SourceInfo.NO_INFO,", "+                                                          new IntegerLiteral(SourceInfo.NO_INFO, 12),", "+                                                          new IntegerLiteral(SourceInfo.NO_INFO, 22)));", "-      ArrayAccess a3 = new ArrayAccess(JExprParser.NO_SOURCE_INFO,", "-                                       new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO,", "-                                                                  new Word(JExprParser.NO_SOURCE_INFO, \"makeArray\"),", "-                                                                  new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0])),", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"intVar\")));", "+      ArrayAccess a3 = new ArrayAccess(SourceInfo.NO_INFO,", "+                                       new SimpleMethodInvocation(SourceInfo.NO_INFO,", "+                                                                  new Word(SourceInfo.NO_INFO, \"makeArray\"),", "+                                                                  new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0])),", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"intVar\")));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aa01657154207724bc39c0c7868657a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "          public void testForLabeledCase()", "signatureAfterChange": "          public void testForLabeledCase()", "diff": ["-      UnbracedBody emptyBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "-      LabeledCase lc = new LabeledCase(JExprParser.NO_SOURCE_INFO, new CharLiteral(JExprParser.NO_SOURCE_INFO, 'e'), emptyBody);", "+      LabeledCase lc = new LabeledCase(SourceInfo.NO_INFO, new CharLiteral(SourceInfo.NO_INFO, 'e'), emptyBody);", "-      lc = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 27), emptyBody);", "+      lc = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 27), emptyBody);", "-      UnbracedBody nonEmptyBody = new UnbracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new ValueReturnStatement(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5))});", "-      lc = new LabeledCase(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 27), nonEmptyBody);", "+      UnbracedBody nonEmptyBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5))});", "+      lc = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 27), nonEmptyBody);", "-      lc = new LabeledCase(JExprParser.NO_SOURCE_INFO, new PlusExpression(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 42)), emptyBody);", "+      lc = new LabeledCase(SourceInfo.NO_INFO, new PlusExpression(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), new IntegerLiteral(SourceInfo.NO_INFO, 42)), emptyBody);", "-      lc = new LabeledCase(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"dan\")), emptyBody);", "+      lc = new LabeledCase(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), emptyBody);", "-      lc = new LabeledCase(JExprParser.NO_SOURCE_INFO, new StringLiteral(JExprParser.NO_SOURCE_INFO, \"hi!\"), emptyBody);", "+      lc = new LabeledCase(SourceInfo.NO_INFO, new StringLiteral(SourceInfo.NO_INFO, \"hi!\"), emptyBody);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be350151b3a3c92e40470a366672a05d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "           public void testMethodInvocationHelper()", "signatureAfterChange": "           public void testMethodInvocationHelper()", "diff": ["-      MethodInvocation noArgs = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]));", "-      MethodInvocation typeArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\"))}));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"myName\"), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[]{new DoubleLiteral(JExprParser.NO_SOURCE_INFO, 4.2)}));", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation typeArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "+      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd2, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df20451ee96309799794ef69c9c8c593", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LValueTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForArrayAccess()", "signatureAfterChange": "          public void testForArrayAccess()", "diff": ["-                                   JExprParser.NO_SOURCE_INFO);", "+                                   SourceInfo.NO_INFO);", "-      MethodData makeArray = new MethodData(\"makeArray\", _privateMav, new TypeParameter[0], intArray, new VariableData[0], new String[0], _ta._data.getSymbolData(), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData makeArray = new MethodData(\"makeArray\", _privateMav, new TypeParameter[0], intArray, new VariableData[0], new String[0], _ta._data.getSymbolData(), new NullLiteral(SourceInfo.NO_INFO));", "-      ArrayAccess a1 = new ArrayAccess(JExprParser.NO_SOURCE_INFO, ", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"variable1\")),", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"intVar\")));", "+      ArrayAccess a1 = new ArrayAccess(SourceInfo.NO_INFO, ", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"variable1\")),", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"intVar\")));", "-      ArrayAccess a2 = new ArrayAccess(JExprParser.NO_SOURCE_INFO,", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"variable1\")),", "-                                       new PlusExpression(JExprParser.NO_SOURCE_INFO,", "-                                                          new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 12),", "-                                                          new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 22)));", "+      ArrayAccess a2 = new ArrayAccess(SourceInfo.NO_INFO,", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"variable1\")),", "+                                       new PlusExpression(SourceInfo.NO_INFO,", "+                                                          new IntegerLiteral(SourceInfo.NO_INFO, 12),", "+                                                          new IntegerLiteral(SourceInfo.NO_INFO, 22)));", "-      ArrayAccess a3 = new ArrayAccess(JExprParser.NO_SOURCE_INFO,", "-                                       new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO,", "-                                                                  new Word(JExprParser.NO_SOURCE_INFO, \"makeArray\"),", "-                                                                  new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0])),", "-                                       new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"intVar\")));", "+      ArrayAccess a3 = new ArrayAccess(SourceInfo.NO_INFO,", "+                                       new SimpleMethodInvocation(SourceInfo.NO_INFO,", "+                                                                  new Word(SourceInfo.NO_INFO, \"makeArray\"),", "+                                                                  new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0])),", "+                                       new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"intVar\")));"]}], "num": 6857}
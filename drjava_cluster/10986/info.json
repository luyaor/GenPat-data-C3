{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f21cfccb2bc4efe8b11ed49e870ec51e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c0351b682b4d5c085865b06bc82d88f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": "     @Override public Type visit(ConstructorCall node)", "signatureAfterChange": "          @Override public Type visit(ConstructorCall node)", "diff": ["-     */", "-      if (node.getExpression() != null) {", "-        throw new ExecutionError(\"not.implemented\", node);", "-      }", "-      ", "-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "-      ", "-      // TODO: implement explict type arguments in constructor calls", "-      Iterable<Type> targs = IterUtil.empty();", "-      ", "-      Type result;", "-      if (node.isSuper()) { result = context.getSuperType(ts); }", "-      else { result = SymbolUtil.thisType(context.getThis()); }", "-      if (result == null) {", "-        throw new IllegalArgumentException(\"Can't check a ConstructorCall in this context\");", "-      }", "-      ", "-      try {", "-        ConstructorInvocation inv = ts.lookupConstructor(result, targs, args, expected);", "-        ", "-        // TODO: Check accessibility of constructor", "-        // Note that super constructor calls *have to* be accessible, even if accessibility", "-        // checking is turned off -- a call to a private constructor cannot be compiled", "-        // in a way that it will run successfully (since constructor calls are the only code", "-        // that is directly compiled rather than being interpreted, we don't have this problem", "-        // elsewhere)", "-        checkThrownExceptions(inv.thrown(), node);", "-        node.setArguments(CollectUtil.makeList(inv.args()));", "-        setConstructor(node, inv.constructor());", "-        return setType(node, result);", "-      }", "-      catch (InvalidTypeArgumentException e) {", "-        throw new ExecutionError(\"type.argument\", node);", "-      }", "-      catch (TypeSystemException e) {", "-        setErrorStrings(node, ts.userRepresentation(result), nodeTypesString(args));", "-        throw new ExecutionError(\"no.such.constructor\", node);", "-      }", "+      throw new ExecutionError(\"constructor.call\", node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecf537740778f48c3ed0c9974f9705bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   private static Iterable<File> listFilesRecursively(final File f, final FileFilter filter,                                                       final FileFilter recursionFilter,                                                       final RecursionStack<File> stack)", "signatureAfterChange": "   public static Iterable<File> listFilesRecursively(File f, FilePredicate filter)", "diff": ["+   */", "+  public static Iterable<File> listFilesRecursively(File f, FilePredicate filter) {", "+    return listFilesRecursively(f, filter, ALWAYS_ACCEPT);"]}], "num": 10986}
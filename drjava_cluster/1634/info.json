{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee094d50e742ea51f2dbfb4c747ba55a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4383874b4b0baf47a6a06d728712ce6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public int findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException", "diff": ["-  public int findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException {", "+  /** Raw version of findPrevCharPos.  Assumes read lock is already held. */", "+  public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException {", "+    ", "+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "-    try { ", "-      text = getText(0, pos); ", "+//    acquireReadLock();", "+//    try { ", "+    text = getText(0, pos); ", "+    ", "+    synchronized(_reduced) {", "-      synchronized(_reduced) {", "+      final int oldPos = _currentLocation;", "+      // Move reduced model to location reducedPpos", "+      _setCurrentLocation(reducedPos);", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "-        final int oldPos = _currentLocation;", "-        // Move reduced model to location reducedPpos", "-        _setCurrentLocation(reducedPos);", "-        ", "-        // Walk backward from specified position", "-        ", "-        while (i >= 0) { ", "-          /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, ", "-           * text[i+1:pos-1] contains invalid chars */", "-          ", "-          if (match(text.charAt(i), whitespace)) {", "-            // ith char is whitespace", "-            i--;", "-            continue;", "-          }", "-          ", "-          // Found a non-whitespace char;  move reduced model to location i", "-          _setCurrentLocation(i);", "-          reducedPos = i;                  // reduced model points to i == reducedPos", "-          ", "-          // Check if matching char is within a comment (not including opening two characters)", "-          if ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-              (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {", "-            i--;", "-            continue;", "-          }", "-          ", "-          if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  ", "-            // Move i past the first comment character and continue searching", "-            i = i - 2;", "-            continue;", "-          }", "-          ", "-          // Found valid previous character", "-          break;", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-        _setCurrentLocation(oldPos);", "+        // Found a non-whitespace char;  move reduced model to location i", "+        _setCurrentLocation(i);", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced._getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+            (_reduced._getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "+        }", "+        ", "+        if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        }", "+        ", "+        // Found valid previous character", "+        break;", "-      int result = reducedPos;", "-      if (i < 0) result = -1;", "-      _storeInCache(key, result, pos - 1);", "-      return result;", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _setCurrentLocation(oldPos);", "-    finally { releaseReadLock(); } ", "+    ", "+    int result = reducedPos;", "+    if (i < 0) result = -1;", "+    _storeInCache(key, result, pos - 1);", "+    return result;", "+//    }", "+//    finally { releaseReadLock(); } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61b13ccf79007b31707212b5549dc699", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException", "diff": ["-    // assert EventQueue.isDispatchThread();", "+    // assert isReadLocked();", "-//    synchronized(_reduced) {", "+    final int oldPos = _currentLocation;", "+    // Move reduced model to location reducedPpos", "+    setCurrentLocation(reducedPos);", "+    ", "+    // Walk backward from specified position", "+    ", "+    while (i >= 0) { ", "+      /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, ", "+       * text[i+1:pos-1] contains invalid chars */", "-      final int oldPos = _currentLocation;", "-      // Move reduced model to location reducedPpos", "-      _setCurrentLocation(reducedPos);", "-      ", "-      // Walk backward from specified position", "-      ", "-      while (i >= 0) { ", "-        /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, ", "-         * text[i+1:pos-1] contains invalid chars */", "-        ", "-        if (_match(text.charAt(i), whitespace)) {", "-          // ith char is whitespace", "-          i--;", "-          continue;", "-        }", "-        ", "-        // Found a non-whitespace char;  move reduced model to location i", "-        _setCurrentLocation(i);", "-        reducedPos = i;                  // reduced model points to i == reducedPos", "-        ", "-        // Check if matching char is within a comment (not including opening two characters)", "-        if ((_reduced._getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-            (_reduced._getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {", "-          i--;", "-          continue;", "-        }", "-        ", "-        if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  ", "-          // Move i past the first comment character and continue searching", "-          i = i - 2;", "-          continue;", "-        }", "-        ", "-        // Found valid previous character", "-        break;", "+      if (match(text.charAt(i), whitespace)) {", "+        // ith char is whitespace", "+        i--;", "+        continue;", "-      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-      _setCurrentLocation(oldPos);", "-//    }", "+      // Found a non-whitespace char;  move reduced model to location i", "+      setCurrentLocation(i);", "+      reducedPos = i;                  // reduced model points to i == reducedPos", "+      ", "+      // Check if matching char is within a comment (not including opening two characters)", "+      if ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+          (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {", "+        i--;", "+        continue;", "+      }", "+      ", "+      if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  ", "+        // Move i past the first comment character and continue searching", "+        i = i - 2;", "+        continue;", "+      }", "+      ", "+      // Found valid previous character", "+      break;", "+    }", "+    ", "+    /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+    setCurrentLocation(oldPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa90bc48c3127ca4509e1cf8f78808bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "diff": ["+    String text;", "-    try {", "-      String text = getText(0, pos);", "-      synchronized(_reduced) {", "+    try { text = getText(0, pos); }", "+    finally { readUnlock(); }", "+    ", "+    synchronized(_reduced) {", "+      ", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "-        final int origLocation = _currentLocation;", "-        // Move reduced model to location pos", "-        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-        ", "-        // Walk backward from specified position", "-        ", "-        while (i >= 0) { ", "-          /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "-           * text[i+1:pos-1] contains invalid chars */", "-          ", "-          if (match(text.charAt(i), whitespace)) {", "-            // ith char is whitespace", "-            i--;", "-            continue;", "-          }", "-          ", "-          // Found a non-whitespace char;  move reduced model to location i", "-          _reduced.move(i - reducedPos);", "-          reducedPos = i;                  // reduced model points to i == reducedPos", "-          ", "-          // Check if matching char is within a comment (not including opening two characters)", "-          if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-              (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-            i--;", "-            continue;", "-          }", "-          ", "-          if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "-            // Move i past the first comment character and continue searching", "-            i = i - 2;", "-            continue;", "-          }", "-          ", "-          // Found valid previous character", "-          break;", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-        _reduced.move(origLocation - reducedPos);", "+        // Found a non-whitespace char;  move reduced model to location i", "+        _reduced.move(i - reducedPos);", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "+        }", "+        ", "+        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        }", "+        ", "+        // Found valid previous character", "+        break;", "+      ", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _reduced.move(origLocation - reducedPos);", "-    finally { readUnlock(); }"]}], "num": 1634}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af85430ef24074e17ecd3d10a195adc5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e56254d945568cfab9f95b70662512", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r     \r     public void testForConstructorDef()", "signatureAfterChange": "          public void testForConstructorDef()", "diff": ["-    \r", "-    public void testForConstructorDef() {\r", "-      //this is a ConstructorDef with no formal parameters and no throws\r", "-      ConstructorDef cd = new ConstructorDef(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, new FormalParameter[0], new ReferenceType[0], \r", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));\r", "-      \r", "-      //What if constructor name and SymbolData name don't match?  Should throw an error.\r", "-      _cbiv._symbolData = new SymbolData(\"NotRightName\");\r", "-      cd.visit(_cbiv);\r", "-      assertEquals(\"Should be 1 error\", 1, errors.size());\r", "-      assertEquals(\"Error message should be correct\", \"The constructor return type and class name must match\", errors.getLast().getFirst());\r", "-      \r", "-      //If they are the same, it should work just fine.\r", "-      _cbiv._symbolData = new SymbolData(\"MyClass\");\r", "-      \r", "-      MethodData constructor = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._symbolData, \r", "-                                              new VariableData[0], \r", "-                                              new String[0], \r", "-                                              _cbiv._symbolData,\r", "-                                              null);\r", "-      \r", "-      \r", "-      cd.visit(_cbiv);\r", "-      \r", "-      \r", "-      assertEquals(\"Should still be 1 error\", 1, errors.size());\r", "-      assertEquals(\"SymbolData should have 1 method\", 1, _cbiv._symbolData.getMethods().size());\r", "-      assertTrue(\"SymbolData's constructor should be correct\", _cbiv._symbolData.getMethods().contains(constructor));\r", "-      \r", "-      //With a ConstructorDef with more throws and variables, should work okay.\r", "-      FormalParameter fp = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\")), false);\r", "-      ReferenceType rt = new TypeVariable(JExprParser.NO_SOURCE_INFO, \"MyMadeUpException\");\r", "-      ConstructorDef cd2 = new ConstructorDef(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, new FormalParameter[] {fp}, new ReferenceType[] {rt}, \r", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));\r", "-      \r", "-      VariableData vd = new VariableData(\"i\", _finalMav, SymbolData.INT_TYPE, true, null);\r", "-      MethodData constructor2 = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._symbolData, \r", "-                                               new VariableData[] {vd}, \r", "-                                               new String[] {\"MyMadeUpException\"}, \r", "-                                              _cbiv._symbolData,\r", "-                                              null);\r", "-\r", "-                                           \r", "-      constructor2.addVar(vd);\r", "-      cd2.visit(_cbiv);\r", "-      vd.setEnclosingData(_cbiv._symbolData.getMethods().getLast());\r", "-      assertEquals(\"Should still be 1 error\", 1, errors.size());\r", "-      assertEquals(\"SymbolData should have 2 methods\", 2, _cbiv._symbolData.getMethods().size());\r", "-      \r", "-      assertTrue(\"SymbolData should have new constructor\", _cbiv._symbolData.getMethods().contains(constructor2));\r", "-      \r", "-                                              \r", "-      //If two variable names are duplicated, should throw an error.\r", "-      FormalParameter fp2 = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\")), false);\r", "-      \r", "-      ConstructorDef cd3 = new ConstructorDef(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, new FormalParameter[] {fp, fp2}, new ReferenceType[] {rt}, \r", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));\r", "-      cd3.visit(_cbiv);\r", "-      \r", "-      assertEquals(\"Should now be 2 errors\", 2, errors.size());\r", "-      assertEquals(\"Error message should be correct\",\"You cannot have two method parameters with the same name\" , errors.getLast().getFirst());\r", "-    }    \r", "+    ", "+    public void testForConstructorDef() {", "+      //this is a ConstructorDef with no formal parameters and no throws", "+      ConstructorDef cd = new ConstructorDef(JExprParser.NO_SOURCE_INFO, ", "+                                             new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, ", "+                                             new FormalParameter[0], new ReferenceType[0], ", "+                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ", "+      //What if constructor name and SymbolData name don't match?  Should throw an error.", "+      _cbiv._classData = new SymbolData(\"NotRightName\");", "+      cd.visit(_cbiv);", "+      assertEquals(\"Should be 1 error\", 1, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The constructor return type and class name must match\", errors.getLast().getFirst());", "+      ", "+      //If they are the same, it should work just fine.", "+      _cbiv._classData = new SymbolData(\"MyClass\");", "+      ", "+      MethodData constructor = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._classData, ", "+                                              new VariableData[0], ", "+                                              new String[0], ", "+                                              _cbiv._classData,", "+                                              null);", "+      ", "+      ", "+      cd.visit(_cbiv);", "+      ", "+      ", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "+      assertEquals(\"SymbolData should have 1 method\", 1, _cbiv._classData.getMethods().size());", "+      assertTrue(\"SymbolData's constructor should be correct\", _cbiv._classData.getMethods().contains(constructor));", "+      ", "+      //With a ConstructorDef with more throws and variables, should work okay.", "+      FormalParameter fp = ", "+        new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "+                            new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "+                                                                new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "+                                                                new Word(JExprParser.NO_SOURCE_INFO, \"i\")), false);", "+      ReferenceType rt = new TypeVariable(JExprParser.NO_SOURCE_INFO, \"MyMadeUpException\");", "+      ConstructorDef cd2 = new ConstructorDef(JExprParser.NO_SOURCE_INFO, ", "+                                              new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, ", "+                                              new FormalParameter[] {fp}, new ReferenceType[] {rt}, ", "+                                              new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ", "+      VariableData vd = new VariableData(\"i\", _finalMav, SymbolData.INT_TYPE, true, null);", "+      MethodData constructor2 = new MethodData(\"MyClass\", _publicMav, new TypeParameter[0], _cbiv._classData, ", "+                                               new VariableData[] {vd}, ", "+                                               new String[] {\"MyMadeUpException\"}, ", "+                                              _cbiv._classData,", "+                                              null);", "+", "+                                           ", "+      constructor2.addVar(vd);", "+      cd2.visit(_cbiv);", "+      vd.setEnclosingData(_cbiv._classData.getMethods().getLast());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());", "+      assertEquals(\"SymbolData should have 2 methods\", 2, _cbiv._classData.getMethods().size());", "+      ", "+      assertTrue(\"SymbolData should have new constructor\", _cbiv._classData.getMethods().contains(constructor2));", "+      ", "+                                              ", "+      //If two variable names are duplicated, should throw an error.", "+      FormalParameter fp2 = ", "+        new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "+                            new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "+                                                                new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "+                                                                new Word(JExprParser.NO_SOURCE_INFO, \"i\")), false);", "+      ", "+      ConstructorDef cd3 = new ConstructorDef(JExprParser.NO_SOURCE_INFO, ", "+                                              new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, ", "+                                              new FormalParameter[] {fp, fp2}, new ReferenceType[] {rt}, ", "+                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      cd3.visit(_cbiv);", "+      ", "+      assertEquals(\"Should now be 2 errors\", 2, errors.size());", "+      assertEquals(\"Error message should be correct\", \"You cannot have two method parameters with the same name\", ", "+                   errors.getLast().getFirst());", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b51a978d54d1edd1a3f223c26e393f59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "commitAfterChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["-                                                  \"Whether DrJava should prompt the user before quitting.\"));", "+                                                         \"Whether DrJava should prompt the user before quitting.\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Prompt Before Resetting Interactions Pane\", this,", "-                                                  \"<html>Whether DrJava should prompt the user before<br>\" +", "-                                                  \"manually resetting the interactions pane.</html>\"));", "+                                                         \"Prompt Before Resetting Interactions Pane\", this,", "+                                                         \"<html>Whether DrJava should prompt the user before<br>\" +", "+                                                         \"manually resetting the interactions pane.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", this,", "-                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "-                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "+                                                         \"Prompt if Interactions Pane Exits Unexpectedly\", this,", "+                                                         \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "+                                                         \"in the Interactions Pane exits without the user clicking Reset.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Prompt for Javadoc Destination\", this,", "-                                                  \"<html>Whether Javadoc should always prompt the user<br>\" +", "-                                                  \"to select a destination directory.</html>\"));", "+                                                         \"Prompt for Javadoc Destination\", this,", "+                                                         \"<html>Whether Javadoc should always prompt the user<br>\" +", "+                                                         \"to select a destination directory.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Prompt before Cleaning Build Directory\", this,", "-                                                  \"<html>Whether DrJava should prompt before cleaning the<br>\" +", "-                                                    \"build directory of a project</html>\"));", "+                                                         \"Prompt before Cleaning Build Directory\", this,", "+                                                         \"<html>Whether DrJava should prompt before cleaning the<br>\" +", "+                                                         \"build directory of a project</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Automatically Save Before Compiling\", this,", "-                                                  \"<html>Whether DrJava should automatically save before<br>\" +", "-                                                  \"recompiling or ask the user each time.</html>\"));", "+                                                         \"Automatically Save Before Compiling\", this,", "+                                                         \"<html>Whether DrJava should automatically save before<br>\" +", "+                                                         \"recompiling or ask the user each time.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"<html>Whether DrJava should automatically compile before<br>\" +", "-                                                  \"testing with JUnit or ask the user each time.</html>\")); ", "+                                                         \"<html>Whether DrJava should automatically compile before<br>\" +", "+                                                         \"testing with JUnit or ask the user each time.</html>\", false)", "+                         .setEntireColumn(true)); ", "-                                                  \"Automatically Save Before Generating Javadoc\", this,", "-                                                  \"<html>Whether DrJava should automatically save before<br>\" +", "-                                                  \"generating Javadoc or ask the user each time.</html>\"));", "+                                                         \"Automatically Save Before Generating Javadoc\", this,", "+                                                         \"<html>Whether DrJava should automatically save before<br>\" +", "+                                                         \"generating Javadoc or ask the user each time.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Warn on Breakpoint if Out of Sync\", this,", "-                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +", "-                                                  \"is out of sync before setting a breakpoint in that file.</html>\"));", "+                                                         \"Warn on Breakpoint if Out of Sync\", this,", "+                                                         \"<html>Whether DrJava should warn the user if the class file<br>\" +", "+                                                         \"is out of sync before setting a breakpoint in that file.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Warn if Debugging Modified File\", this,", "-                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "-                                                  \"debugged has been modified since its last save.</html>\"));", "+                                                         \"Warn if Debugging Modified File\", this,", "+                                                         \"<html>Whether DrJava should warn the user if the file being<br>\" +", "+                                                         \"debugged has been modified since its last save.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Warn to Restart to Change Look and Feel\", this,", "-                                                  \"<html>Whether DrJava should warn the user that look and feel.<br>\" +", "-                                                  \"(Changes will not be applied until DrJava is restarted.)</html>.\"));", "+                                                         \"Warn to Restart to Change Look and Feel\", this,", "+                                                         \"<html>Whether DrJava should warn the user that look and feel.<br>\" +", "+                                                         \"(Changes will not be applied until DrJava is restarted.)</html>.\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Warn if File's Path Contains a '#' Symbol\", this,", "-                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "-                                                  \"saved has a path that contains a '#' symbol.<br>\" +", "-                                                  \"Users cannot use such files in the Interactions Pane<br>\" +", "-                                                  \"because of a bug in Java.</html>\"));", "+                                                         \"Warn if File's Path Contains a '#' Symbol\", this,", "+                                                         \"<html>Whether DrJava should warn the user if the file being<br>\" +", "+                                                         \"saved has a path that contains a '#' symbol.<br>\" +", "+                                                         \"Users cannot use such files in the Interactions Pane<br>\" +", "+                                                         \"because of a bug in Java.</html>\", false)", "+                         .setEntireColumn(true));", "-                                                  \"Show a notification window when the first DrJava error occurs\", this,", "-                                                  \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\"+", "-                                                  \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\"));", "+                                                         \"Show a notification window when the first DrJava error occurs\", this,", "+                                                         \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\"+", "+                                                         \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\", false)", "+                         .setEntireColumn(true));", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"+", "+                                                 \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", this, true));"]}], "num": 10610}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c950921fd01c542060141bfe8946468", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f57703e279a7f659f38e014f89cca22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "17e9ff215a4a2c21db9a54255ff006382033889b", "commitAfterChange": "7228cea597c372946661a7e1f1db20fd24b9dee1", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public static File getValidDirectory(File file)", "signatureAfterChange": "   public static File getValidDirectory(final File origFile)", "diff": ["-  public static File getValidDirectory(File file) {", "+  public static File getValidDirectory(final File origFile) {", "+    File file = origFile;", "+  ", "-    throw new UnexpectedException(new IOException(\"File's parent file is null\"));", "+    throw new UnexpectedException(new IOException(origFile.getPath()", "+                                                    + \" is not a valid directory, and all attempts \"", "+                                                    + \"to locate a valid directory have failed. \"", "+                                                    + \"Check your configuration.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a046a5f20fff6143b8258b4d235ed9fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public abstract StaticMethodInvocation lookupStaticMethod(Type t, String name, Iterable<? extends Type> typeArgs,                                                              Iterable<? extends Expression> args)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException;", "signatureAfterChange": "   public abstract StaticMethodInvocation lookupStaticMethod(Type t, String name,                                                             Iterable<? extends Type> typeArgs,                                                              Iterable<? extends Expression> args,                                                             Option<Type> expected)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException;", "diff": ["-  public abstract StaticMethodInvocation lookupStaticMethod(Type t, String name, Iterable<? extends Type> typeArgs, ", "-                                                            Iterable<? extends Expression> args)", "+  public abstract StaticMethodInvocation lookupStaticMethod(Type t, String name,", "+                                                            Iterable<? extends Type> typeArgs, ", "+                                                            Iterable<? extends Expression> args,", "+                                                            Option<Type> expected)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f64cb7c64613d4ed8330fba516ed3d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public abstract ObjectMethodInvocation lookupMethod(Expression object, String name, Iterable<? extends Type> typeArgs,                                                        Iterable<? extends Expression> args)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException;", "signatureAfterChange": "   public abstract ObjectMethodInvocation lookupMethod(Expression object, String name,                                                       Iterable<? extends Type> typeArgs,                                                        Iterable<? extends Expression> args,                                                       Option<Type> expected)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException;", "diff": ["-  public abstract ObjectMethodInvocation lookupMethod(Expression object, String name, Iterable<? extends Type> typeArgs, ", "-                                                      Iterable<? extends Expression> args)", "+  public abstract ObjectMethodInvocation lookupMethod(Expression object, String name,", "+                                                      Iterable<? extends Type> typeArgs, ", "+                                                      Iterable<? extends Expression> args,", "+                                                      Option<Type> expected)"]}], "num": 29212}
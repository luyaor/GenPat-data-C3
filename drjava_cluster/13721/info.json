{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c77175c92ed9ce309ebb54a76d33ab25", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b9328b510f289538de54241f2bd368", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-   */", "+  /** Tests that undoing/redoing a multi-line comment/uncomment will restore the caret position */", "-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "-    String text =", "+    ", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    final String text =", "-    int newPos = 20;", "+    final int newPos = 20;", "-    doc.insertString(0, text, null);", "-    assertEquals(\"insertion\",text, doc.getText());", "+    // The following statement hung when run in the main test thread.  There must be a pending access to doc in a", "+    // task on the event queue that sometimes has not yet executed.", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { doc.append(text, null); } });", "+    ", "+    assertEquals(\"insertion\", text, doc.getText());", "-    pane.endCompoundEdit();", "-    doc.commentLines(0,doc.getLength());", "+", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "+     ", "+    doc.acquireWriteLock();", "+    try { doc.commentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "+    ", "-    assertEquals(\"commenting\",commented, doc.getText());", "+    assertEquals(\"commenting\", commented, doc.getText());", "+    ", "-    pane.setCaretPosition(newPos);", "-    doc.getUndoManager().undo();", "-    assertEquals(\"undo commenting\",text, doc.getText(0,doc.getLength()));", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "+    ", "+    doc.getUndoManager().undo();  ", "+    assertEquals(\"undo commenting\", text, doc.getText());", "-    pane.setCaretPosition(newPos);", "+    ", "+    // Perturb the caret position and redo", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    assertEquals(\"redo commenting\",commented, doc.getText(0,doc.getLength()));", "+    assertEquals(\"redo commenting\", commented, doc.getText());", "-    pane.endCompoundEdit();    ", "-    doc.uncommentLines(0,doc.getLength());", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "+    ", "+    doc.acquireWriteLock();", "+    try { doc.uncommentLines(0, doc.getLength()); }", "+    finally { doc.releaseWriteLock(); }", "+    ", "-    assertEquals(\"uncommenting\",text, doc.getText(0,doc.getLength()));", "-    oldPos = pane.getCaretPosition();", "-    pane.setCaretPosition(newPos);", "+    assertEquals(\"uncommenting\", text, doc.getText());", "+    ", "+    oldPos = pane.getCaretPosition();  // executing this method call outside of the event thread is borderline", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos);  } });", "-    assertEquals(\"undo uncommenting\",commented, doc.getText(0,doc.getLength()));", "+    ", "+    assertEquals(\"undo uncommenting\", commented, doc.getText());", "-    pane.setCaretPosition(newPos);", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    assertEquals(\"redo uncommenting\",text, doc.getText(0,doc.getLength()));", "+    assertEquals(\"redo uncommenting\",text, doc.getText());", "+    ", "+    _log.log(\"testMultiLineCommentOrUncommentAfterScroll completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ad3a85a144ed59aecc8234808cf6eed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void testMatchBraceText()", "signatureAfterChange": "   public void testMatchBraceText()", "diff": ["-        _result = _frame.getFileNameField();", "-    Utilities.clearEventQueue(); ", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(115); ", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  definitions.setCaretPosition(115); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(102);", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(102);  } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(119); ", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(119); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(121); ", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(121); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        definitions.setCaretPosition(122);", "-        _result = _frame.getFileNameField();", "-      } ", "-    });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(122); } });", "+    // Complete the actions spawned by the preceding command before executing the following command", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  _result = _frame.getFileNameField(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530180ea545a909378bfa8a3c0049b99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "commitAfterChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testScriptLoading() throws Exception", "signatureAfterChange": "   public void testScriptLoading() throws Exception", "diff": ["-    try {", "-      ism.prevInteraction();", "-      fail(\"Should not have been able to get previous interaction!\");", "-    }", "-    catch (IllegalStateException ise) {", "-      // good, continue", "-    }", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.prevInteraction();", "+          fail(\"Should not have been able to get previous interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "-    ism.nextInteraction();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.nextInteraction(); } });", "+    ", "+//    Utilities.clearEventQueue();", "-    try {", "-      ism.prevInteraction();", "-      fail(\"Should not have been able to get previous interaction!\");", "-    }", "-    catch (IllegalStateException ise) {", "-      // good, continue", "-    }", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.prevInteraction();", "+          fail(\"Should not have been able to get previous interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "-    ism.nextInteraction();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.nextInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    Utilities.clearEventQueue();", "+//    Utilities.clearEventQueue();", "-    try {", "-      ism.nextInteraction();", "-      fail(\"Should not have been able to get next interaction!\");", "-    }", "-    catch (IllegalStateException ise) {", "-      // good, continue", "-    }", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.nextInteraction();", "+          fail(\"Should not have been able to get next interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "+    ", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    ism.prevInteraction();", "-    Utilities.clearEventQueue();", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { ism.prevInteraction(); } });", "+//    Utilities.clearEventQueue();", "-    try {", "-      ism.prevInteraction();", "-      fail(\"Should not have been able to get previous interaction!\");", "-    }", "-    catch (IllegalStateException ise) { /* good, continue */ }", "+    ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        try {", "+          ism.prevInteraction();", "+          fail(\"Should not have been able to get previous interaction!\");", "+        }", "+        catch (IllegalStateException ise) { /* good, continue */ }", "+      }", "+    });", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61e85197c8a717c6fabe57f6f9f929a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      public void testPromptListClearedOnReset() throws Exception", "signatureAfterChange": "      public void testPromptListClearedOnReset() throws Exception", "diff": ["+  ", "-    //Can't use the fields declared in setUp - it doesn't use a real InteractionsModel", "+    // Can't use the fields declared in setUp - it doesn't use a real InteractionsModel", "+    ", "+    final Object _resetLock = new Object();", "-    _pane.resetPrompts();", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _pane.resetPrompts(); }", "+    });", "-    Utilities.clearEventQueue();", "-    _pane.setCaretPosition(_doc.getLength());", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _pane.setCaretPosition(_doc.getLength()); }", "+    });", "+    ", "-    _pane.setCaretPosition(_doc.getLength());", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        _pane.setCaretPosition(_doc.getLength());", "+        _firstPrompt = (int) _pane.getPromptList().get(0); // cast prevents ambiguity", "+        _secondPrompt = (int) _pane.getPromptList().get(1); // cast prevents ambiguity", "+      }", "+    });", "+    ", "-   (int) _pane.getPromptList().get(0)); //needs cast to prevent ambiguity", "+                 _firstPrompt); ", "-                 (int)_pane.getPromptList().get(1)); //needs cast to prevent ambiguity", "+                 _secondPrompt); ", "+    synchronized(_resetLock) { _resetDone = false; }", "+    _model.addListener(new DummyGlobalModelListener() {", "+      public void interpreterReady(File wd) {", "+        synchronized(_resetLock) {", "+          _resetDone = true;", "+          _resetLock.notifyAll();", "+        }", "+      }});", "+      ", "+    _model.resetInterpreter(FileOption.NULL_FILE);", "+ ", "+    /* Wait until reset has finished. */", "+    synchronized(_resetLock) { while (! _resetDone) _resetLock.wait(); }", "-    synchronized(_model) {", "-      // Reset should clear", "-      _model.setWaitingForFirstInterpreter(false);", "-      //this adds the \"Resetting Interactions\" ", "-      _model.resetInterpreter(FileOption.NULL_FILE);  // restarting the interpreter since argument is not null", "-      _model.interpreterResetting();", "-    }", "-    Utilities.clearEventQueue();", "-    synchronized(_model) {", "-      assertEquals(\"PromptList after reset should contain no elements\", 0, _pane.getPromptList().size());", "-    }  ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _size = _pane.getPromptList().size(); }", "+    });", "+    ", "+//    System.err.println(_pane.getPromptList());", "+    ", "+    assertEquals(\"PromptList after reset should contain one element\", 1, _size);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c797be14bf2c388301aa3e6e5a081e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "b79563bf1d51671314589f6c744a87acc54fe8fa", "commitAfterChange": "517a134496ea28d3d08f7cd449813e2a756de857", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "signatureAfterChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "diff": ["+    // Set up a sample history", "+    ", "+    // Load the history as a script", "-    ism.nextInteraction();", "-    assertEquals(\"Should have put the first interaction into the interactions document.\",", "-                 line1, doc.getCurrentInteraction());", "+    ", "+    // Should not be able to get the previous interaction", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    ", "+    // Get the next (first) interaction", "+    assertTrue(\"Should have next\", ism.hasNextInteraction());", "-    assertEquals(\"Should have put the second interaction into the interactions document.\",", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+", "+    // Still should not be able to get the previous interaction", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    try {", "+      ism.prevInteraction();", "+      fail(\"Should not have been able to get previous interaction!\");", "+    }", "+    catch (IllegalStateException ise) {", "+      // good, continue", "+    }", "+    ", "+    // Skip it; get the next (second) interaction", "+    assertTrue(\"Should have next\", ism.hasNextInteraction());", "+    ism.nextInteraction();", "+    assertEquals(\"Should have put the second line into the document.\",", "+    ", "+    // Now we should be able to get the previous interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+    ", "+    // Go back to the second line and execute it", "+    ism.nextInteraction();", "+    ", "+    // Should not be able to get the next interaction, since we're at the end", "+    assertTrue(\"Should have no next\", !ism.hasNextInteraction());", "+    // Get Previous should return the most recently executed interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "-    assertEquals(\"Should have put the first interaction into the interactions document.\",", "+    assertEquals(\"Should have put the second line into the document.\",", "+                 line2, doc.getCurrentInteraction());", "+    ", "+    // Get Previous should now return the first interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+    ", "+    // Should have no more previous", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    ", "+    // Now execute the first interaction", "+    ", "+    // Get Previous should return the most recent (first) interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+    ", "+    // Should not be able to get the previous interaction this time", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3521d13091c546b2f8ed98d14bff5e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "signatureAfterChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "diff": ["-    final Object _lock = new Object();", "-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc;", "-    synchronized(_lock) {", "-      doc = pane.getOpenDefDocument();//.getDocument();", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    doc.insertString(0, \"abcd\", null);", "+    try { Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        pane.setCaretPosition(3); // not thread-safe!", "+      }}); ", "-    /**", "-     * NOTE: This has been added because MainFrameTest hangs randomly (about every other time) without this line.", "-     * It is still unknown why this occurs - being that the above method calls are all accessors, this shouldn't be a situation", "-     * where the document is being accessed by insertString before it is ready to be accessed.", "-     * Added 5/19/2004 by pakruse ", "-     */ /**/", "-    /**", "-     * UPDATE: 7/16/2004 by pakruse. Synchronizing the two statements prevents this test from hanging. Still don't know why", "-     * this happens, but no more need for the Thread.sleep command.", "-     * If this test ever takes more than two minutes to run, then it's hanging, and the following lines should be added back in:", "-     */", "-//    try {", "-//      Thread.sleep(1000); ", "-//    }", "-//    catch(java.lang.InterruptedException e) {", "-//    ", "-//    }", "-       ", "-    synchronized(_lock) {", "-      doc.insertString(0, \"abcd\", null);", "-    }", "+", "+    catch(InterruptedException e) { throw new UnexpectedException(e); }", "-    ", "-    pane.setCaretPosition(3);", "-    OpenDefinitionsDocument oldDoc = doc;", "-    OpenDefinitionsDocument newDoc = model.newFile();", "+    final OpenDefinitionsDocument oldDoc = doc;", "+    final OpenDefinitionsDocument newDoc = model.newFile();", "-    pane = _frame.getCurrentDefPane();", "-    doc = pane.getOpenDefDocument();//.getDocument();", "-    assertEquals(\"New curr DefPane's document\", newDoc, doc);", "-    assertEquals(\"Location of new document\", 0, doc.getCurrentLocation());", "+    DefinitionsPane curPane;", "+    OpenDefinitionsDocument curDoc;", "+    curPane = _frame.getCurrentDefPane();", "+    curDoc = curPane.getOpenDefDocument();//.getDocument();", "+    assertEquals(\"New curr DefPane's document\", newDoc, curDoc);", "+    assertEquals(\"Location in new document\", 0, newDoc.getCurrentLocation());", "-    // Switch back", "+    // Switch back to old document", "-    pane = _frame.getCurrentDefPane();", "-    doc = pane.getOpenDefDocument();//.getDocument();", "- ", "-    assertEquals(\"Location of old document\", 3, doc.getCurrentLocation());", "+    curPane = _frame.getCurrentDefPane();", "+    curDoc = curPane.getOpenDefDocument();//.getDocument();", "+    assertEquals(\"Current document is old document\", oldDoc, curDoc);", "+    assertEquals(\"Location of old document\", 3, curDoc.getCurrentLocation());"]}], "num": 13721}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c66d9f0797d3341442ac1f75aa98c1fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aee3933867e958b8200486c20fb807d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 364, "signatureBeforeChange": "      private void _setUpTabs()", "signatureAfterChange": "      private void _setUpTabs()", "diff": ["-    if (_model.getDebugger().isAvailable()) { _breakpointsPanel = new BreakpointsPanel(this); }", "+    if (_model.getDebugger().isAvailable()) {", "+      _breakpointsPanel = new BreakpointsPanel(this);", "+      // hook highlighting listener to breakpoint manager", "+      _model.getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+        /* Called when a breakpoint is added. Must be executed in event thread. */", "+        public void regionAdded(final Breakpoint bp) {", "+          DefinitionsPane bpPane = getDefPaneGivenODD(bp.getDocument());", "+          _documentRegionHighlights.", "+            put(bp, bpPane.getHighlightManager().", "+                  addHighlight(bp.getStartOffset(), bp.getEndOffset(), ", "+                               bp.isEnabled() ? DefinitionsPane.BREAKPOINT_PAINTER", "+                                 : DefinitionsPane.DISABLED_BREAKPOINT_PAINTER));", "+          _updateDebugStatus();", "+        }", "+        ", "+        /** Called when a breakpoint is changed. Must execute in event thread. */", "+        public void regionChanged(Breakpoint bp) { ", "+          regionRemoved(bp);", "+          regionAdded(bp);", "+        }", "+        ", "+        /** Called when a breakpoint is removed. Must be executed in event thread. */", "+        public void regionRemoved(final Breakpoint bp) {      ", "+          HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(bp);", "+          if (highlight != null) highlight.remove();", "+          _documentRegionHighlights.remove(bp);", "+        }", "+      });", "+    }", "+", "+    _bookmarksPanel = new BookmarksPanel(this);", "+    // hook highlighting listener to bookmark manager", "+    _model.getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {      ", "+      public void regionAdded(DocumentRegion r) {", "+        DefinitionsPane bpPane = getDefPaneGivenODD(r.getDocument());", "+        _documentRegionHighlights.", "+          put(r, bpPane.getHighlightManager().", "+                addHighlight(r.getStartOffset(), r.getEndOffset(), DefinitionsPane.BOOKMARK_PAINTER));", "+      }", "+      public void regionChanged(DocumentRegion r) { ", "+        regionRemoved(r);", "+        regionAdded(r);", "+      }", "+      public void regionRemoved(DocumentRegion r) {", "+        HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(r);", "+        if (highlight != null) highlight.remove();", "+        _documentRegionHighlights.remove(r);", "+      }", "+    });", "+    _tabs.addLast(_bookmarksPanel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d27c9958c906c6dd06cb23af68c41d38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public BreakpointsPanel(MainFrame frame)", "signatureAfterChange": "   public BreakpointsPanel(MainFrame frame)", "diff": ["-    ", "-    this.setLayout(new BorderLayout());", "-    ", "-    _frame = frame;", "-    _model = frame.getModel();", "-    _debugger = _model.getDebugger();", "-    ", "-    /******** Initialize the panels containing the checkboxes ********/", "-    this.removeAll(); // actually, override the behavior of TabbedPanel", "-", "-    // remake closePanel", "-    _closePanel = new JPanel(new BorderLayout());", "-    _closePanel.add(_closeButton, BorderLayout.NORTH);", "-    ", "-    _leftPane = new JPanel(new BorderLayout());", "-    _setupBreakpointTree();", "-    ", "-    this.add(_leftPane, BorderLayout.CENTER);", "-    ", "-    _buttonPanel = new JPanel(new BorderLayout());", "-    _setupButtonPanel();", "-    this.add(_buttonPanel, BorderLayout.EAST);", "-    ", "-    _debugger.addListener(new BreakpointsPanelListener());", "-    ", "-    // Setup the color listeners.", "-    _setColors(_bpTree);", "-  }", "+    _model.getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+      /** Called when a breakpoint is set in a document. Adds the breakpoint to the tree of breakpoints.", "+       *  Must be executed in event thread.", "+       *  @param bp the breakpoint", "+       */", "+      public void regionAdded(final Breakpoint bp) { addRegion(bp); }", "+      ", "+      /**", "+       * Called when a breakpoint is changed.", "+       * Removes the breakpoint from the tree of breakpoints.", "+       * @param bp the breakpoint", "+       */", "+      public void regionChanged(final Breakpoint bp) {", "+        // Only change GUI from event-dispatching thread", "+        Runnable doCommand = new Runnable() {", "+          public void run() {", "+            String name = \"\";", "+            try {", "+              name = bp.getDocument().getQualifiedClassName();", "+            }", "+            catch (ClassNameNotFoundException cnnfe) {", "+              name = bp.getDocument().toString();", "+            }", "+            ", "+            DefaultMutableTreeNode regDocNode = new DefaultMutableTreeNode(name);", "+            ", "+            // Find the document node for this region", "+            Enumeration documents = _regionRootNode.children();", "+            boolean found = false;", "+            while ((!found) && (documents.hasMoreElements())) {", "+              DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+              if (doc.getUserObject().equals(regDocNode.getUserObject())) {", "+                // Find the correct line number node for this breakpoint", "+                Enumeration lineNumbers = doc.children();", "+                while (lineNumbers.hasMoreElements()) {", "+                  DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                  @SuppressWarnings(\"unchecked\") RegionTreeUserObj<Breakpoint> uo = (RegionTreeUserObj<Breakpoint>)lineNumber.getUserObject();", "+                  if (uo.lineNumber()==(bp.getDocument().getLineOfOffset(bp.getStartOffset())+1)) {", "+                    Breakpoint r = (Breakpoint) uo.region();", "+                    if (r instanceof Breakpoint) {", "+                      ((Breakpoint)r).setEnabled(bp.isEnabled());", "+                      ((DefaultTreeModel)_regTree.getModel()).nodeChanged(lineNumber);", "+                      found = true;", "+                      break;", "+                    }", "+                  }", "+                }", "+              }", "+            }", "+            updateButtons();", "+          }", "+        };", "+        Utilities.invokeLater(doCommand);", "+      }", "+      ", "+      /**", "+       * Called when a breakpoint is removed from a document.", "+       * Removes the breakpoint from the tree of breakpoints.", "+       * @param bp the breakpoint", "+       */", "+      public void regionRemoved(final Breakpoint bp) {", "+        removeRegion(bp);", "+    _debugger = _model.getDebugger();"]}], "num": 11593}
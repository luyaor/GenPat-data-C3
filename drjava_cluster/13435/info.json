{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81ff96a99776770078c2ace8c09c73c9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da5f1eca9f93dbdf6f648be489e0d1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "          public void testHandleMethodInvocation()", "signatureAfterChange": "          public void testHandleMethodInvocation()", "diff": ["-      ", "+      // TODO: create LL constructor specifically for testing that only takes file name.", "-        new LanguageLevelVisitor(new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+        new LanguageLevelVisitor(new File(\"\"), \"\", ", "+                                 null /* enclosingClassName */, ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new LinkedList<String>(), ", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      llv.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "+      llv.continuations = new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "-      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "-      llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+//      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "+      llv._classesInThisFile = new HashSet<String>();", "-      symbolTable.put(\"java.lang.RuntimeException\", re);", "-      symbolTable.put(\"java.io.IOException\", ioe);", "+      assert symbolTable.containsKey(\"java.lang.RuntimeException\");", "+      assert symbolTable.containsKey(\"java.io.IOException\");", "+      assert symbolTable.contains(re);", "+      assert symbolTable.contains(ioe);", "+//      symbolTable.put(\"java.lang.RuntimeException\", re);", "+//      symbolTable.put(\"java.io.IOException\", ioe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50dedce7ba2be07980a26a87092733e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void testForThrowStatement()", "signatureAfterChange": "          public void testForThrowStatement()", "diff": ["+                                 null, // enclosingClassName for top level traversal", "-                                 new LinkedList<String>(), ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      llv.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "+      llv.continuations = new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "-      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "-      llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+//      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "+      llv._classesInThisFile = new HashSet<String>();", "-      symbolTable.put(\"java.lang.RuntimeException\", re);", "+      assert symbolTable.containsKey(\"java.lang.RuntimeException\");", "+      assert symbolTable.contains(re);", "+      ", "+//      symbolTable.put(\"java.lang.RuntimeException\", re);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91b7b43c3ea0058a50d7b737a46622ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "          public void testCheckDuplicateExceptions()", "signatureAfterChange": "          public void testCheckDuplicateExceptions()", "diff": ["+                                 null, // enclosingClassName for top level traversal", "-                                 new LinkedList<String>(), ", "-                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+                                 new HashSet<String>(), ", "+                                 new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>(),", "+                                 new LinkedList<Command>());", "-      llv.continuations = new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>();", "+      llv.continuations = new Hashtable<String, Triple<SourceInfo, LanguageLevelVisitor, SymbolData>>();", "-      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "-      llv._classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+//      llv._hierarchy = new Hashtable<String, TypeDefBase>();", "+      llv._classesInThisFile = new HashSet<String>();", "-      SymbolData e = llv.getSymbolData(\"java.lang.Exception\", SourceInfo.NO_INFO, true);", "-      SymbolData re = llv.getSymbolData(\"java.lang.RuntimeException\", SourceInfo.NO_INFO, true);", "-      SymbolData ioe = llv.getSymbolData(\"java.io.IOException\", SourceInfo.NO_INFO, true);", "+      SymbolData e = llv.getQualifiedSymbolData(\"java.lang.Exception\", SourceInfo.NO_INFO);", "+      SymbolData re = llv.getQualifiedSymbolData(\"java.lang.RuntimeException\", SourceInfo.NO_INFO);", "+      SymbolData ioe = llv.getQualifiedSymbolData(\"java.io.IOException\", SourceInfo.NO_INFO);", "-      symbolTable.put(\"java.lang.Exception\", e);", "-      symbolTable.put(\"java.lang.RuntimeException\", re);", "-      symbolTable.put(\"java.io.IOException\", ioe);", "+      assert symbolTable.containsKey(\"java.lang.Exception\");", "+      assert symbolTable.containsKey(\"java.lang.RuntimeException\");", "+      assert symbolTable.containsKey(\"java.io.IOException\");", "+      assert symbolTable.contains(e);", "+      assert symbolTable.contains(re);", "+      assert symbolTable.contains(ioe);", "-"]}], "num": 13435}
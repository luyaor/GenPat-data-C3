{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0942f37e6e390cd31e120aab0bd3aedd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a8466da8ed68aa378ed38740159eea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static List<Method> getMethods(Class cl, String name, int params)", "signatureAfterChange": "   public static List<Method> getMethods(Class cl, String name, int params)", "diff": ["-            ms[i].getParameterTypes().length == params) {", "+            ms[i].getParameterTypes().length <= (params + 1)) {", "-    } ", "-    else {", "-      Class c = cl;", "-      while (c != null) {", "-        Method[] ms = c.getDeclaredMethods();", "-        ", "-        for (int i = 0; i < ms.length; i++) {", "-          if (ms[i].getName().equals(name) &&", "-              ms[i].getParameterTypes().length == params) {", "-            result.add(ms[i]);", "-          }", "-        }", "-        c = c.getSuperclass();", "-      }", "-    return result;", "-  }", "+              ms[i].getParameterTypes().length <= (params + 1)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5e1ee09e22b61e5976a5dcb783d69e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public TypeData forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that)", "signatureAfterChange": "   public TypeData forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that)", "diff": ["-    final SymbolData superclass_result = getSymbolData(that.getType().getName(), _data, that);//resolve super class", "+    final SymbolData superclass_result = getSymbolData(that.getType().getName(), _data, that); // resolve super class", "-    //It is an error to instantiate a non-static inner class from a static context (i.e. new A.B() where B is not a static inner class).", "-    //Here, we make sure that if B is non-static, it is not an inner class of anything.", "+    // Cannot instantiate a non-static inner class from a static context (i.e. new A.B() where B is dynamic).", "+    // Here, we make sure that if B is non-static, it is not an inner class of anything.", "-    if (!superclass_result.hasModifier(\"static\") && !superclass_result.isInterface() && (superclass_result.getOuterData() != null) && lastIndexOfDot != -1) {", "+    if (!superclass_result.hasModifier(\"static\") && !superclass_result.isInterface() && ", "+        (superclass_result.getOuterData() != null) && lastIndexOfDot != -1) {", "-      _addError(Data.dollarSignsToDots(superclass_result.getName()) + \" is not a static inner class, and thus cannot be instantiated from this context.  Perhaps you meant to use an instantiation of the form new \" + Data.dollarSignsToDots(firstPart) + \"().new \" + Data.dollarSignsToDots(secondPart) + \"()\", that);", "+      _addError(Data.dollarSignsToDots(superclass_result.getName()) + ", "+                \" is not a static inner class, and thus cannot be instantiated from this context.\" + ", "+                \"  Perhaps you meant to use an instantiation of the form new \" + Data.dollarSignsToDots(firstPart) + ", "+                \"().new \" + Data.dollarSignsToDots(secondPart) + \"()\", that);", "-      if (expr.length > 0) { _addError(\"You are creating an anonymous inner class that directly implements an interface, thus you should use the Object constructor which takes in no arguments.  However, you have specified \" + expr.length + \" arguments\", that);}", "+      if (expr.length > 0) { ", "+        _addError(\"You are creating an anonymous inner class that directly implements an interface, thus you should\" + ", "+                  \" use the Object constructor which takes in no arguments.  However, you have specified \" + ", "+                  expr.length + \" arguments\", that);}", "-    final TypeData body_result = that.getBody().visit(new ClassBodyTypeChecker(myData, _file, _package, _importedFiles, _importedPackages, vars, _thrown));", "+    final TypeData body_result = that.getBody().visit(new ClassBodyTypeChecker(myData, _file, _package, _importedFiles, ", "+                                                                               _importedPackages, vars, _thrown));"]}], "num": 27346}
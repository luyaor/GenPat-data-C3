{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25e55655867d2c29e1c8c76b537ccc22", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a818901e94ffca51d3ece6ebe01a5b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BalancingStreamTokenizer.java", "commitBeforeChange": "6b690d7e50bc9f782260d6c38aaf261dfe0715e0", "commitAfterChange": "8b2531509cebe19f9248dfcfb27c6842d311bd33", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public String getNextToken() throws IOException", "signatureAfterChange": "   public String getNextToken() throws IOException", "diff": ["+            _token = Token.NORMAL;", "+            _token = Token.NORMAL;", "+          _token = Token.QUOTED;", "+            _token = Token.NORMAL;", "+          _token = Token.KEYWORD;", "+        }", "+        else {", "+          // there was an escape", "+          // see if whitespace or escape is coming up", "+          // System.err.println(\"There was an escape\");", "+          int cnext = nextToken();", "+          if ((cnext!=(int)_escape) && (!_state.whitespace.contains(cnext))) {", "+            // System.err.println(\"But it's not an escape or whitespace\");", "+            // see if a quote might be coming up", "+            String temp = findMatch(cnext, _state.quotes, new Lambda<String,String>() {", "+              public String apply(String in) { ", "+                // push the tokens back", "+                for(int i=in.length()-1; i>0; --i) {", "+                  pushToken(in.charAt(i));", "+                }", "+                return null;", "+              }", "+            });", "+            if (temp!=null) {", "+              // push the tokens back", "+              for(int i=temp.length()-1; i>0; --i) {", "+                pushToken(temp.charAt(i));", "+              }", "+              // System.err.println(\"It looks like a quote\");", "+            }", "+            else {", "+              // System.err.println(\"But it's not a quote\");", "+              // it wasn't a quote, see if it could be a keyword", "+              temp = findMatch(cnext, _state.keywords, new Lambda<String,String>() {", "+                public String apply(String in) {", "+                  // push the tokens back", "+                  for(int i=in.length()-1; i>0; --i) {", "+                    pushToken(in.charAt(i));", "+                  }", "+                  return null;", "+                }", "+              });", "+              if (temp!=null) {", "+                // push the tokens back", "+                for(int i=temp.length()-1; i>0; --i) {", "+                  pushToken(temp.charAt(i));", "+                }", "+                // System.err.println(\"It looks like a keyword\");", "+              }", "+              else {", "+                // System.err.println(\"But it's not a keyword ==> lone escape\");", "+                // neither a quote nor a keyword coming up", "+                // lone escape", "+                buf.append(String.valueOf(_escape));", "+                _isEscape = _wasEscape = false;", "+              }", "+            }", "+          }", "+          pushToken(cnext);", "+      _token = Token.NORMAL;", "+    _token = Token.END;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f0271efc083d04d5de6f9e14445c30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "e21c87a73c9cc18626d8ac0032c171af7d12b5c4", "commitAfterChange": "5c74c26bc0d0172fae7fedb4ceddf9beb8fb625d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-                                                  \"Specifies the indentation level DrJava's indenter should use.\"));", "+                                                  \"The number of spaces to use for each level of indentation.\"));", "-                              \"Specifies the directory that DrJava should consider the current working directory.\",", "+                              \"The directory that DrJava should consider the current working directory.\",", "-                                                  \"Specifies that maximum number of interactions that will be kept in the history.\"));", "+                                                  \"The number of interactions to remember in the history.\"));", "-                                                  \"<html>Specifies the number of files to remember<br>\" +", "-                                                  \"in the recently used files list in the File menu.</html>\"));", "+                                                  \"<html>The number of files to remember in<br>\" +", "+                                                  \"the recently used files list in the File menu.</html>\"));", "-                                                  \"<html>Specifies that the <code>assert</code> keyword should be allowed under Java 1.4.</html>\"));", "+                                                  \"<html>Whether to allow the <code>assert</code> keyword when compiling in Java 1.4.</html>\"));", "-                                                  \"<html>Specifies that DrJava should bring up a dialog<br>\" +", "-                                                  \"if the interactions pane is exits unexpectedly.</html>\"));", "+                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "+                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\"));", "-                                                  \"Specifies that DrJava should bring up a confirm dialog before exiting.\"));", "+                                                  \"Whether DrJava should prompt the user before quitting.\"));", "-                                                  \"<html>Specifies that DrJava should keep a backup copy of each<br>\" +", "-                                                  \"open file, named with a tilde (~) at the end of the filename.</html>\"));", "+                                                  \"<html>Whether DrJava should keep a backup copy of each file that<br>\" +", "+                                                  \"the user modifies, saved with a '~' at the end of the filename.</html>\"));"]}], "num": 23075}
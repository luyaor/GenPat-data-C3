{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3f56e877961c443a276e297ad219b4c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d20ec09c20c0a8016feee1943ff58ac1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "1902ca9428bb3bc3eae3550e478cc24cc107999e", "commitAfterChange": "c171c7d908dc3eacd710969c309add95e9a47bb0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(final Lambda<? super S, ? extends T> lambda)", "signatureAfterChange": "   public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(Lambda<? super S, ? extends T> lambda)", "diff": ["-  public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(final Lambda<? super S, ? extends T> lambda) {", "-    return new ConsVisitor<S, ConsList<? extends T>>() {", "-      public ConsList<? extends T> forEmpty(ConsList.Empty<? extends S> list) { return ConsList.empty(); }", "-      public ConsList<? extends T> forNonempty(ConsList.Nonempty<? extends S> list) {", "-        return ConsList.cons(lambda.value(list.first()), list.rest().apply(this));", "-      }", "-    };", "+  public static <S, T> ConsVisitor<S, ConsList<? extends T>> map(Lambda<? super S, ? extends T> lambda) {", "+    return new Map<S, T>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b57c72c6536f78295664c590a36d3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ConsVisitor.java", "commitBeforeChange": "1902ca9428bb3bc3eae3550e478cc24cc107999e", "commitAfterChange": "c171c7d908dc3eacd710969c309add95e9a47bb0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public static <T> ConsVisitor<T, ConsList<? extends T>> filter(final Predicate<? super T> pred)", "signatureAfterChange": "   public static <T> ConsVisitor<T, ConsList<? extends T>> filter(Predicate<? super T> pred)", "diff": ["-  public static <T> ConsVisitor<T, ConsList<? extends T>> filter(final Predicate<? super T> pred) {", "-    return new ConsVisitor<T, ConsList<? extends T>>() {", "-      public ConsList<? extends T> forEmpty(ConsList.Empty<? extends T> list) { return list; }", "-", "-      public ConsList<? extends T> forNonempty(ConsList.Nonempty<? extends T> list) {", "-        if (pred.value(list.first())) { return ConsList.cons(list.first(), list.rest().apply(this)); }", "-        else { return list.rest().apply(this); }", "-      }", "-    };", "+  public static <T> ConsVisitor<T, ConsList<? extends T>> filter(Predicate<? super T> pred) {", "+    return new Filter<T>(pred);"]}], "num": 21842}
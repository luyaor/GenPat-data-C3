{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "792cef05b937c2e63d82e1ceb1aa6456", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36363fbc0d7d9afc241301ebc0bd2482", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void testLessThan()", "signatureAfterChange": "   public void testLessThan() throws ExceptionReturnedException", "diff": ["-  public void testLessThan() {", "-    Node exp = _parseCode(\"new Long(12) < new Long(32);\").get(0);", "-    ", "-    try {", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");", "-    }", "-    catch (ExecutionError ee) {", "-    }", "+  public void testLessThan() throws ExceptionReturnedException {", "+    String text = \"new Long(12) < new Long(32);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: 12 12 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: longValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Long) [(koala.dynamicjava.tree.IntegerLiteral: 32 32 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3613c4be374e91a75085b6c6fb6168d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public void testLessThanEqual()", "signatureAfterChange": "   public void testLessThanEqual() throws ExceptionReturnedException", "diff": ["-  public void testLessThanEqual() {", "-    Node exp = _parseCode(\"new Integer(12) <= new Integer(32);\").get(0);", "+  public void testLessThanEqual() throws ExceptionReturnedException {", "+    String text = \"new Integer(12) <= new Integer(32);\";", "+      ", "+    String expectedLeft = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 12 12 int)]))\";", "+    String expectedRight = \"(koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 32 32 int)]))\";", "+", "+    _checkBinaryExpression(text, expectedLeft, expectedRight);", "+  }", "-      exp.acceptVisitor(_typeChecker);", "-      fail(\"Should have thrown an excpetion.\");"]}], "num": 15284}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da29ee6591b92ef841b6039c77d9ec40", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0a89516c3710030483d650068ad65e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   synchronized Vector<ReferenceType> getReferenceTypes(String className,                                                        int lineNumber)", "signatureAfterChange": "   synchronized Vector<ReferenceType> getReferenceTypes(String className,                                                        int lineNumber)", "diff": ["-    List<ReferenceType> classes;  ", "+    List classes;  ", "-      classes = _vm.classesByName(className);  // Added parameterization <ReferenceType> to classes. JDK 1.5 will eliminate this type warning", "+      classes = _vm.classesByName(className);  // Add parameterization <ReferenceType> to classes. JDK 1.5 will eliminate this type warning", "-      ref = classes.get(i);", "+      ref = (ReferenceType) classes.get(i);", "-        List<Location> lines = new LinkedList();   // Added parameterization <Location> to lines", "+        List lines = new LinkedList();", "-          lines = ref.locationsOfLine(lineNumber); // JDK 1.5 will eliminate this type warning", "+          lines = ref.locationsOfLine(lineNumber); // Add parameterization <Location> to lines. JDK 1.5 will eliminate this type warning", "-          List<ReferenceType> innerRefs = ref.nestedTypes();  // Added parameterization <ReferenceType>. JDK 1.5 will eliminate this type warning", "+          List innerRefs = ref.nestedTypes();  // Add parameterization <ThreadReference>. JDK 1.5 will eliminate this type warning", "-              ReferenceType currRef = innerRefs.get(j);", "-              lines = currRef.locationsOfLine(lineNumber);  // JDK 1.5 will eliminate this type warning", "+              ReferenceType currRef = (ReferenceType) innerRefs.get(j);", "+              lines = currRef.locationsOfLine(lineNumber);  // Add parameterization <Location> to lines. JDK 1.5 will eliminate this type warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1de86bfeaaaff4e0d42f9d09c76276f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "signatureAfterChange": "   private void _dumpVariablesIntoInterpreterAndSwitch() throws DebugException, AbsentInformationException", "diff": ["-      List<LocalVariable> vars = frame.visibleVariables();  // JDK 1.5 will eliminate this warning", "-      Iterator<LocalVariable> varsIterator = vars.iterator();", "+      List vars = frame.visibleVariables();", "+      Iterator varsIterator = vars.iterator();", "-        LocalVariable localVar = varsIterator.next();", "+        LocalVariable localVar = (LocalVariable)varsIterator.next();", "-            List<Type> classes = _vm.classesByName(localVar.typeName());  //JDK 1.5 will eliminate this warning", "+            List classes = _vm.classesByName(localVar.typeName());", "-              type = classes.get(0);", "+              type = (Type)classes.get(0);"]}], "num": 2579}
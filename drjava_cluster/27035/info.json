{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "602bdb2a5cee14a8eb834448e68ac1d3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8de163db1b9a82cbc13688f6f42c12b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "623dbae8bf369adeb4e3b2a78ab2b5a3f4b29e9b", "commitAfterChange": "d0501f87d274a5806c24d0d105495acde5ccbe13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Object visit(MethodDeclaration node)", "signatureAfterChange": "   public Object visit(DivideExpression node)", "diff": ["-  ", "-  public Object visit(MethodDeclaration node) {", "-    super.visit(node);", "-    Class c = (Class)node.getProperty(NodeProperties.TYPE);", "-    BlockStatement bs = node.getBody();", "-    List l = bs.getStatements();", "-    Iterator iter = l.iterator();", "-    boolean foundCorrectType = false;", "-    while(iter.hasNext()) {", "-      Statement s = (Statement)iter.next();", "-      if (s instanceof ReturnStatement) {", "-        Class returnExpClass;", "-        Expression expression = ((ReturnStatement)s).getExpression();", "-        if (expression == null) {", "-          returnExpClass = null;", "-        }", "-        else {", "-          returnExpClass = (Class)expression.acceptVisitor(this);", "-        }", "-        // will void return type mean c is null?", "-        if (c == null) {", "-          if (returnExpClass != null) {", "-            // returning a value in a void method", "-            throw new ExecutionError(\"assignment.types\", node);", "-          }", "-        }", "-        else if (returnExpClass == null) {", "-          // returning nothing in a non-void method", "-          throw new ExecutionError(\"assignment.types\", node);    ", "-        }", "-        else if (!c.isAssignableFrom(returnExpClass)) {", "-          // returning an unassignable type", "-          throw new ExecutionError(\"assignment.types\", node);", "-        }", "-        else {", "-          // returning an assignable type", "-          foundCorrectType = true;", "-        }", "-      }", "-    }", "-    if (c != null) {", "-      if (!foundCorrectType) {", "-        // we were supposed to return a type, but did not", "-        throw new ExecutionError(\"assignment.types\", node);", "-      }", "-    }", "-    return null;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc159975df8ca5e5447db0c667439d3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/TypeCheckerExtension.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(RemainderExpression node)", "signatureAfterChange": "      public Object visit(MethodDeclaration node)", "diff": ["+  ", "+  public Object visit(MethodDeclaration node) {", "+    super.visit(node);", "+    Class c = (Class)node.getProperty(NodeProperties.TYPE);", "+    BlockStatement bs = node.getBody();", "+    List l = bs.getStatements();", "+    Iterator iter = l.iterator();", "+    boolean foundCorrectType = false;", "+    while(iter.hasNext()) {", "+      Statement s = (Statement)iter.next();", "+      if (s instanceof ReturnStatement) {", "+        Class returnExpClass;", "+        Expression expression = ((ReturnStatement)s).getExpression();", "+        if (expression == null) {", "+          returnExpClass = null;", "+        }", "+        else {", "+          returnExpClass = (Class)expression.acceptVisitor(this);", "+        }", "+        // will void return type mean c is null?", "+        if (c == null) {", "+          if (returnExpClass != null) {", "+            // returning a value in a void method", "+            throw new ExecutionError(\"assignment.types\", node);", "+          }", "+        }", "+        else if (returnExpClass == null) {", "+          // returning nothing in a non-void method", "+          throw new ExecutionError(\"assignment.types\", node);    ", "+        }", "+        else if (!c.isAssignableFrom(returnExpClass)) {", "+          // returning an unassignable type", "+          throw new ExecutionError(\"assignment.types\", node);", "+        }", "+        else {", "+          // returning an assignable type", "+          foundCorrectType = true;", "+        }", "+      }", "+    }", "+    if (c != null) {", "+      if (!foundCorrectType) {", "+        // we were supposed to return a type, but did not", "+        throw new ExecutionError(\"assignment.types\", node);", "+      }", "+    }", "+    return null;", "+  }"]}], "num": 27035}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6afc77574ba7be3402f6666c73523d1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11832dcf8d30ce40693ec3dda00a4b18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "diff": ["-    _runJUnit();", "+    listener.runJUnit(_model.getJUnitModel());", "-//    Utilities.show(\"First test complete\");", "+    _log.log(\"First test of NoValidTests complete\");", "-    OpenDefinitionsDocument doc = setupDocument(NON_TESTCASE_TEXT);", "+    _model.addListener(listener2);", "+    _log.log(\"Second listener added to model\");", "+     OpenDefinitionsDocument doc = setupDocument(NON_TESTCASE_TEXT);", "-    doc.startCompile();", "+", "+    listener2.compile(doc);", "+    listener2.checkCompileOccurred();", "+    _log.log(\"Resetting compile counts\");", "-    doc = setupDocument(MONKEYTEST_PASS_TEXT);", "-    file = new File(_tempDir, \"MonkeyTestPass.java\");", "-    doc.saveFile(new FileSelector(file));", "-    _model.addListener(listener2);", "-    ", "-    _runJUnit();", "+    // Opending Test", "+    File file2 = new File(_tempDir, \"MonkeyTestPass.java\");", "+    OpenDefinitionsDocument doc2 = setupDocument(MONKEYTEST_PASS_TEXT);", "+    doc2.saveFile(new FileSelector(file2));", "+    listener2.runJUnit(_model.getJUnitModel());", "+    ", "+    _log.log(\"testJUnitAllWithNoValidTests completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f2efb5d41df3b64b2cc2d60e9886f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException, InterruptedException", "diff": ["-    OpenDefinitionsDocument doc = setupDocument(FOO_MISSING_CLOSE_TEXT);", "-    final File file = new File(aDir, \"DrJavaTestFoo.java\");", "-    doc.saveFile(new FileSelector(file));", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_MISSING_CLOSE_TEXT);", "+    final File file1 = new File(aDir, \"DrJavaTestFoo.java\");", "+    doc1.saveFile(new FileSelector(file1));", "-    assertEquals(\"Should have 2 compiler errors\", 2, _model.getCompilerModel().getNumErrors());", "+    System.err.println(cm.getCompilerErrorModel());", "+    assertEquals(\"Should have 2 compiler errors\", 2, cm.getNumErrors());", "-    File compiled = classForJava(file, \"DrJavaTestFoo\");", "-    assertEquals(_name() + \"Class file exists after failing compile (1)\", false, compiled.exists());", "+    File compiled1 = classForJava(file1, \"DrJavaTestFoo\");", "+    assertEquals(_name() + \"Class file exists after failing compile (1)\", false, compiled1.exists());"]}], "num": 16731}
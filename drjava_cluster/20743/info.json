{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f659885c058a4aeb4ff8e443b4093f7", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700ae5790d6eb26cb001a698887c452a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 127, "signatureBeforeChange": "   public static <T> Runnable1<T> compose(final Runnable1<? super T> r1,                                           final Runnable1<? super T> r2)", "signatureAfterChange": "   public static <T> Runnable1<T> compose(Runnable1<? super T> r1, Runnable1<? super T> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T> Runnable1<T> compose(final Runnable1<? super T> r1, ", "-                                         final Runnable1<? super T> r2) { ", "-    return new Runnable1<T>() {", "-      public void run(T arg) { r1.run(arg); r2.run(arg); }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T> Runnable1<T> compose(Runnable1<? super T> r1, Runnable1<? super T> r2) {", "+    // explicit type argument required due to compiler (or language) bug", "+    return new ComposedRunnable1<T>(IterUtil.<Runnable1<? super T>>make(r1, r2));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd4fd176fed029089ed34bbf8ce14cc1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 132, "signatureBeforeChange": "   public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1,                                                     final Runnable2<? super T1, ? super T2> r2)", "signatureAfterChange": "   public static <T1, T2> Runnable2<T1, T2> compose(Runnable2<? super T1, ? super T2> r1,                                                     Runnable2<? super T1, ? super T2> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1, ", "-                                                   final Runnable2<? super T1, ? super T2> r2) { ", "-    return new Runnable2<T1, T2>() {", "-      public void run(T1 arg1, T2 arg2) { r1.run(arg1, arg2); r2.run(arg1, arg2); }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T1, T2> Runnable2<T1, T2> compose(Runnable2<? super T1, ? super T2> r1, ", "+                                                   Runnable2<? super T1, ? super T2> r2) { ", "+    return new ComposedRunnable2<T1, T2>(IterUtil.<Runnable2<? super T1, ? super T2>>make(r1, r2));", "+  }"]}], "num": 20743}
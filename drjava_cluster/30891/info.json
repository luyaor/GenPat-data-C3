{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85e4f4e1dfb49fec4e4985c3d79e057a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de47891cf681855754fd1efb6611bb3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "signatureAfterChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "diff": ["-                               String name, Value val)", "+                               String name, Value val, Type type)", "+      if (type == null) {", "+        args.add(null);", "+      }", "+      else if (type instanceof ReferenceType) {", "+        args.add(((ReferenceType)type).classObject());", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db8828b03f49ddd3302a22ccda48495c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "405d8485f59d23db7a6700d259e1bbcaf9fe742c", "commitAfterChange": "2ee5f2b93eccde81f983b764d9c9f4b543211f8b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Object interpret(String s) throws ExceptionReturnedException", "signatureAfterChange": "   public Object interpret(String s) throws ExceptionReturnedException", "diff": ["+      else if (cause instanceof CatchedExceptionError) {", "+        cause = ((CatchedExceptionError) cause).getException();", "+      }", "+    catch (CatchedExceptionError cee) {", "+      throw new ExceptionReturnedException(cee.getException());", "+    }"]}], "num": 30891}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebe80a1a538e1fdad116f0a07f39b685", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01bbcd3ee91f3f419bbf4a51dd52a7a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "ea3de3bd50de8d728bdb5d615bd9b8838d2e94b4", "commitAfterChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException", "signatureAfterChange": "   public java.util.Set<String> getNamesOfSelectedTopLevelGroup() throws GroupNotSelectedException", "diff": ["-  /** Returns the name of the top level group that the selected item descends from.  Only runs in event thread. */", "-  public String getNameOfSelectedTopLevelGroup() throws GroupNotSelectedException {", "-    assert EventQueue.isDispatchThread();", "-    ", "-      TreePath p = getSelectionPath();", "-      ", "-      if (n == _model.getRoot())", "-        throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\");", "-      ", "-      while (! _roots.contains(n)) { n = n.getParent(); }", "-      ", "-      return ((GroupNode<?>)n).getData();", "+  /** Returns the names of the top level groups that the selected items descend from.  Only runs in event thread. */", "+  public java.util.Set<String> getNamesOfSelectedTopLevelGroup() throws GroupNotSelectedException {", "+    assert (EventQueue.isDispatchThread() || Utilities.TEST_MODE);", "+    ", "+    HashSet<String> names = new HashSet<String>();", "+    LinkedList<GroupNode<ItemT>> roots = new LinkedList<GroupNode<ItemT>>(_roots);", "+    ", "+    TreePath[] ps = getSelectionPaths();", "+    if (ps!=null) {", "+      for(TreePath p: ps) {", "+        if (p.getLastPathComponent() instanceof DefaultMutableTreeNode) {", "+          DefaultMutableTreeNode n = (DefaultMutableTreeNode) p.getLastPathComponent();", "+          ", "+          for(GroupNode<ItemT> gn: roots) {", "+            if (gn.isNodeDescendant(n)) {", "+              // n is a descendent of gn; add the name of the group node", "+              names.add(gn.getData());", "+              // this group node definitely contains selected items, no need to check it again;", "+              // remove it from the list of roots to consider", "+              roots.remove(gn);", "+              break;", "+            }", "+          }", "+        }", "+      }", "+    }", "+    ", "+    if (names.isEmpty()) { throw new GroupNotSelectedException(\"there is no top level group for the root of the tree\"); }", "+    ", "+    return names;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28928a8523be137c6e4f911206092fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ea54d5918e0742266441f70659af74f35bca898d", "commitAfterChange": "e6ef9e23d624990cf9fd00ec857466a046415b6a", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 131, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument[] _openFiles(File[] files)      throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-  private OpenDefinitionsDocument _openFiles(File[] files) ", "+  private OpenDefinitionsDocument[] _openFiles(File[] files) ", "-    AlreadyOpenException storedAOE = null;", "-    OpenDefinitionsDocument retDoc = null;", "+    ArrayList<OpenDefinitionsDocument> alreadyOpenDocuments = new ArrayList<OpenDefinitionsDocument>();", "+    ArrayList<OpenDefinitionsDocument> retDocs = new ArrayList<OpenDefinitionsDocument>();", "-    final LinkedList<OpenDefinitionsDocument> filesOpened = new LinkedList<OpenDefinitionsDocument>();", "+    LinkedList<OpenDefinitionsDocument> filesOpened = new LinkedList<OpenDefinitionsDocument>();", "+        OpenDefinitionsDocument d = _rawOpenFile(FileOps.getCanonicalFile(f));", "-        retDoc = _rawOpenFile(f.getCanonicalFile());", "-//        Utilities.show(\"Processed: \" + f + \" Opened: \" + f.getCanonicalFile());", "-        filesOpened.add(retDoc);", "+        retDocs.add(d);", "+        filesOpened.add(d);", "-        retDoc = aoe.getOpenDocument();", "-        //Remember the first AOE", "-        if (storedAOE == null) storedAOE = aoe;", "-      } ", "+        OpenDefinitionsDocument d = aoe.getOpenDocument();", "+        retDocs.add(d);", "+        alreadyOpenDocuments.add(d);", "+      }", "-      addDocToNavigator(d);", "-      addDocToClassPath(d);", "-      _notifier.fileOpened(d);", "+      _completeOpenFile(d); // contains view-related calls", "-    ", "-    if (storedAOE != null) throw storedAOE;", "+    if (!alreadyOpenDocuments.isEmpty()) {", "+      for(OpenDefinitionsDocument d : alreadyOpenDocuments) {", "+        _notifier.handleAlreadyOpenDocument(d);", "+        _notifier.fileOpened(d);", "+      }", "+    }                                   ", "-    if (retDoc != null) return retDoc;", "+    if (retDocs != null) {", "+      return retDocs.toArray(new OpenDefinitionsDocument[0]);", "+    }"]}], "num": 27729}
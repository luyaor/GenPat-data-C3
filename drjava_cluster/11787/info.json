{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3bf9d26a4ed98a360519762e3cd0fae", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82841552264795f28914c2d739f4777f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "signatureAfterChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "diff": ["-   */", "+    */", "-    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + \" with an array initializer\", that); return type.getInstanceData();}", "+    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + ", "+                                                 \" with an array initializer\", that); return type.getInstanceData();}", "-        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages,", "+                                                              _vars, _thrown);", "-        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); //incorporate the things that were assigned in the expression here", "+        ", "+        // Incorporate the things that were assigned in the expression here", "+        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); ", "+", "-              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \" + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "+              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \"", "+                          + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "-              assertInstanceType(result[i], \"The elements of this initializer should all be instances, but you have specified the type name \" + result[i].getName(), (JExpression) that.getItems()[i]);", "+              assertInstanceType(result[i], \"The elements of this initializer should all be instances,\" + ", "+                                 \" but you have specified the type name \" + result[i].getName(), ", "+                                 (JExpression) that.getItems()[i]);", "-    ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d53a4c276f646e4bc82b383e464363c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "    public TypeData forLabeledCase(LabeledCase that)", "signatureAfterChange": "    public TypeData forLabeledCase(LabeledCase that)", "diff": ["-   */", "+    * char.  Then delegate to the super class to handle the braced body of the switch case. */", "-     ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+     ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, ", "+                                                           _vars, _thrown);", "-    if (label_result == null || !assertFound(label_result, exp)) {", "-      return null;", "-    }", "+    if (label_result == null || !assertFound(label_result, exp)) return null;", "-    if (!(exp instanceof LexicalLiteral || exp instanceof NumericUnaryExpression && ((NumericUnaryExpression) exp).getValue() instanceof LexicalLiteral)) {", "-      _addError(\"The labels of a switch statement must be constants.  You are using a more complicated expression of type \" + label_result.getSymbolData().getName(), that.getLabel());", "+    if (!(exp instanceof LexicalLiteral || exp instanceof NumericUnaryExpression && ", "+          ((NumericUnaryExpression) exp).getValue() instanceof LexicalLiteral)) {", "+      _addError(\"The labels of a switch statement must be constants.  You are using a more complicated expression of\" +", "+                \" type \" + label_result.getSymbolData().getName(), ", "+                that.getLabel());", "-      _addError(\"The labels of a switch statement must be constants of int or char type.  You specified a constant of type \" + label_result.getSymbolData().getName(), that.getLabel());", "+      _addError(\"The labels of a switch statement must be constants of int or char type.  You specified a constant of\" +", "+                \" type \" + label_result.getSymbolData().getName(), ", "+                that.getLabel());"]}], "num": 11787}
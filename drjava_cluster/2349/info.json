{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bf591c79263973b14a62fe2b8c2e11c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbba3ed0c5c8a427bda69456f15ef8fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhrase.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /**", "-    int startPos = startOfLine(doc, pos);", "-    IndentInfo ii = doc.getIndentInfo(pos);", "-    int delimPos = findPrevDelimiter(doc, startPos, {';',',','(','['});", "-    return (non-WS/comment after delimPos?);", "-", "-    */", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine > DefinitionsDocument.DOCSTART) {", "+        // Find previous delimiter", "+        char[] delims = {';', ',', '(', '['};", "+        int prevDelim = doc.findPrevDelimiter(here, delims);", "+        ", "+        if (prevDelim == DefinitionsDocument.ERROR_INDEX) {", "+          return false;", "+        }", "+        ", "+        // Make sure the delim is the previous non-WS char", "+        int nextNonWS = doc.getFirstNonWSCharPos(prevDelim + 1);", "+        if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+          nextNonWS = startLine;", "+        }", "+        return (nextNonWS >= startLine);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+    // On first line", "+    return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4f19e4110d8813d2761d7eb11320083", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "492227e53d4f60169465f2fd7192a458815ea62f", "commitAfterChange": "8bce57471a5d2761f2096c66cde557596d4532bf", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "    private void _open()", "signatureAfterChange": "    private void _open()", "diff": ["-      // Switch to existing copy", "+      // Switch to existing copy after prompting user", "-      _model.setActiveDocument(openDoc);", "+      String filename = \"File\";", "+      try {", "+        filename = openDoc.getFile().getName();", "+      }", "+      catch (IllegalStateException ise) {", "+        // Can't happen: this open document must have a file", "+        throw new UnexpectedException(ise);", "+      }", "+      String title = \"File already open\";", "+      String message = filename + \" is already open.\\n\" +", "+        \"Click OK to switch to the open copy\\n\" +", "+        \"or Cancel to return to the previous file.\";", "+      int choice = JOptionPane.showConfirmDialog(this,", "+                                                 message,", "+                                                 title,", "+                                                 JOptionPane.OK_CANCEL_OPTION);", "+      if (choice == JOptionPane.OK_OPTION) {", "+        ", "+        _model.setActiveDocument(openDoc);", "+      }"]}], "num": 2349}
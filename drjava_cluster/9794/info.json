{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78688071dd6c2f185c63d1dbf81c4bef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "095e41b7851bc0ee7924c8300342a6ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void compileConstructor(ConstructorDeclaration ast, Type extendsT)", "signatureAfterChange": "      private void compileConstructor(ConstructorDeclaration ast, Type extendsT)", "diff": ["-      TypeParameter[] typeParamAsts;", "-      if (ast instanceof PolymorphicConstructorDeclaration) {", "-        typeParamAsts = ((PolymorphicConstructorDeclaration) ast).getTypeParameters();", "-      }", "-      else { typeParamAsts = new TypeParameter[0]; }", "-", "+      List<TypeParameter> typeParamAsts = ast.getTypeParams().unwrap(Collections.<TypeParameter>emptyList());", "-      if (typeParamAsts.length > 0) { sigBuilder.append(typeParamListSignature(typeParamAsts)); }", "+      if (!typeParamAsts.isEmpty()) { sigBuilder.append(typeParamListSignature(typeParamAsts)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed30fbc0804e29052bdf13b0d0403b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   @Override public TypeContext visit(MethodDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(MethodDeclaration node)", "diff": ["-    TypeParameter[] tparams;", "-    if (node instanceof PolymorphicMethodDeclaration) {", "-      tparams = ((PolymorphicMethodDeclaration) node).getTypeParameters();", "-    }", "-    else { tparams = new TypeParameter[0]; }", "+    Iterable<TypeParameter> tparams = node.getTypeParams().unwrap(Collections.<TypeParameter>emptyList());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809931d69916152e618ad7da40d429fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private void compileMethod(MethodDeclaration ast, boolean isInterface)", "signatureAfterChange": "      private void compileMethod(MethodDeclaration ast, boolean isInterface)", "diff": ["-      TypeParameter[] typeParamAsts;", "-      if (ast instanceof PolymorphicMethodDeclaration) {", "-        typeParamAsts = ((PolymorphicMethodDeclaration) ast).getTypeParameters();", "-      }", "-      else { typeParamAsts = new TypeParameter[0]; }", "+      List<TypeParameter> typeParamAsts = ast.getTypeParams().unwrap(Collections.<TypeParameter>emptyList());", "-      if (typeParamAsts.length > 0) { sigBuilder.append(typeParamListSignature(typeParamAsts)); }", "+      if (!typeParamAsts.isEmpty()) { sigBuilder.append(typeParamListSignature(typeParamAsts)); }"]}], "num": 9794}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df5774ba9769768689016fb25a87cb78", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18c647c492c56a6a725811b143494401", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "ef7dc3345b6835fe8ebb574f1a9119ee4c786794", "commitAfterChange": "21836dcccd81c2207652ee85b319b723ac9ff10b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public String format(Vector<T> v)", "signatureAfterChange": "   public String format(Vector<T> v)", "diff": ["+    if (v.size()==0) { return \"\"; }", "+    ", "+    String d = String.valueOf(delim);", "-      res.append(formatter.format(v.get(i)));", "+      String str = formatter.format(v.get(i));", "+      str = str.replaceAll(\"\\\\\\\\\",\"\\\\\\\\\\\\\\\\\");", "+      str = str.replaceAll(\",\",\"\\\\\\\\,\");", "+      res.append(str);", "-    return res.append(footer).toString();", "+    String str = res.append(footer).toString();", "+    return str;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6269f517f5810cf64b3cd8e13ba53a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private Pair<RuntimeBindings, Option<Object>> evaluate(Iterable<Node> tree) throws InterpreterException", "diff": ["-        if (n instanceof Expression) { val = Option.some(new ExpressionEvaluator(newBindings, _opt).value(n)); }", "+        // TODO: eliminate hacks that support inferred assignment and void returns", "+        if (n.hasProperty(\"assignmentAsDeclaration\")) {", "+          n = (Node) n.getProperty(\"assignmentAsDeclaration\");", "+        }", "+        if (n instanceof Expression) {", "+          Object evalResult = new ExpressionEvaluator(newBindings, _opt).value(n);", "+          if (evalResult == null && NodeProperties.getType(n).equals(TypeSystem.VOID)) {", "+            val = Option.none();", "+          }", "+          else { val = Option.some(evalResult); }", "+        }"]}], "num": 27021}
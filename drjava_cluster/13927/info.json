{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f63ba01cbac6b0b597ee27d9ea1adb3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e1b51db3ea844ec5dffd77a5bd2b84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "signatureAfterChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "diff": ["-    ", "-    TypeContext sigContext = new ClassSignatureContext(context, c, loader);", "-    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-", "-    final TypeParameter[] tparams;", "-    if (node instanceof GenericClassDeclaration) {", "-      tparams = ((GenericClassDeclaration) node).getTypeParameters();", "-    }", "-    else if (node instanceof GenericInterfaceDeclaration) {", "-      tparams = ((GenericInterfaceDeclaration) node).getTypeParameters();", "-    }", "-    else { tparams = new TypeParameter[0]; }", "-    sigChecker.checkTypeParameters(tparams);", "-", "-    if (node instanceof ClassDeclaration) {", "-      sigChecker.check(((ClassDeclaration) node).getSuperclass());", "-    }", "-    if (node.getInterfaces() != null) {", "-      for (TypeName tn : node.getInterfaces()) { sigChecker.check(tn); }", "-    }", "-", "-    ClassMemberChecker classChecker = new ClassMemberChecker(new ClassContext(sigContext, c), opt); ", "-    if (node instanceof InterfaceDeclaration) {", "-      classChecker.checkInterfaceSignatures(node.getMembers());", "-    }", "-    else {", "-      classChecker.checkClassSignatures(node.getMembers());", "-    }", "-    classChecker.checkBodies(node.getMembers());", "-    ", "+    ClassChecker classChecker = new ClassChecker(c, loader, context, opt);", "+    classChecker.initializeClassSignatures(node);", "+    classChecker.checkSignatures(node);", "+    classChecker.checkBodies(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f6b31392537700981c4931c0e114d04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Override public TypeContext visit(ClassDeclaration node)", "signatureAfterChange": "      @Override public TypeContext visit(ClassDeclaration node)", "diff": ["+    return handleTypeDeclaration(node);", "+  }", "-    TypeParameter[] tparams;", "-    sigChecker.check(node.getSuperclass());", "-    new ClassMemberChecker(bodyContext, opt).checkMembers(node.getMembers());", "-  }"]}], "num": 13927}
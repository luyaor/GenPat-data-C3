{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c1d2c1df9aca6e281c26ee83de9b8ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b76d1026ad54d2fe94ba5407949ec52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/ParserTest.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testVarArgsFormalParameters() throws ParseException", "signatureAfterChange": "      public void testVarArgsFormalParameters() throws ParseException", "diff": ["-    assertEquals(\"param should be array\", ArrayType.class, fpList.get(0).getType().getClass());", "-    ArrayType at = (ArrayType)fpList.get(0).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"param should be array\", ArrayTypeName.class, fpList.get(0).getType().getClass());", "+    ArrayTypeName at = (ArrayTypeName)fpList.get(0).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());", "-    assertEquals(\"param should be array\", ArrayType.class, fpList.get(0).getType().getClass());", "-    at = (ArrayType)fpList.get(0).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"param should be array\", ArrayTypeName.class, fpList.get(0).getType().getClass());", "+    at = (ArrayTypeName)fpList.get(0).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());", "-    assertEquals(\"param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(0).getType().toString());", "+    assertEquals(\"param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(0).getType().toString());", "-    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(0).getType().toString());", "-    assertEquals(\"2nd param should be array\", ArrayType.class, fpList.get(1).getType().getClass());", "-    at = (ArrayType)fpList.get(1).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(0).getType().toString());", "+    assertEquals(\"2nd param should be array\", ArrayTypeName.class, fpList.get(1).getType().getClass());", "+    at = (ArrayTypeName)fpList.get(1).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());", "-    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(0).getType().toString());", "-    assertEquals(\"2nd param should be int\", \"(koala.dynamicjava.tree.IntType: int)\", fpList.get(1).getType().toString());", "-    assertEquals(\"3rd param should be array\", ArrayType.class, fpList.get(2).getType().getClass());", "-    at = (ArrayType)fpList.get(2).getType();", "-    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceType: String)\", at.getElementType().toString());", "+    assertEquals(\"1st param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(0).getType().toString());", "+    assertEquals(\"2nd param should be int\", \"(koala.dynamicjava.tree.IntTypeName: int)\", fpList.get(1).getType().toString());", "+    assertEquals(\"3rd param should be array\", ArrayTypeName.class, fpList.get(2).getType().getClass());", "+    at = (ArrayTypeName)fpList.get(2).getType();", "+    assertEquals(\"param should be a string array\", \"(koala.dynamicjava.tree.ReferenceTypeName: String)\", at.getElementType().toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6d658bf853b3f37ff988ff65f87624", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "7159df222d88dee270188fe2cbffe74bb173d159", "commitAfterChange": "c73227da8024bfd14e7a2df3af6435d7a78133b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-    // The documents should not be activated upon creation", "+    // The model already has an active empty document", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc1));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc1));", "+    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc2));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc2));", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc3));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc3));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc4));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc4));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc5));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc6));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertEquals(\"There should still be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());"]}], "num": 20122}
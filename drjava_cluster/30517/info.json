{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e323d7c8a99e4dc4b18a6aaf11c74967", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f1e1bdda6adc55e3770ae9db51cb3a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static LinkedList<String> packageExplore(String prefix, File root)", "signatureAfterChange": "   public static LinkedList<String> packageExplore(String prefix, File root)", "diff": ["-      for (File dir: subDirectories) {", "-        PrefixAndFile paf;", "+      if (subDirectories!=null) { // listFiles may return null if there's an IO error", "+        for (File dir: subDirectories) {", "+          PrefixAndFile paf;", "-        if (current.prefix.equals(\"\")) paf = new PrefixAndFile(dir.getName(), dir);", "-        else  paf = new PrefixAndFile(current.prefix + \".\" + dir.getName(), dir);", "-        working.push(paf);", "+          if (current.prefix.equals(\"\")) paf = new PrefixAndFile(dir.getName(), dir);", "+          else  paf = new PrefixAndFile(current.prefix + \".\" + dir.getName(), dir);", "+          working.push(paf);", "+        }", "-      //Only add package names if they have java files and are not the root package", "-      if (javaFiles.length != 0 && !current.prefix.equals(\"\")) {", "-        output.add(current.prefix);", "+      if (javaFiles!=null) { // listFiles may return null if there's an IO error", "+        //Only add package names if they have java files and are not the root package", "+        if (javaFiles.length != 0 && !current.prefix.equals(\"\")) {", "+          output.add(current.prefix);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d0acd5a3d542a2c1c18dd49587e9d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorWindow.java", "commitBeforeChange": "2f4a42f54aaa74c25ba0a929e664640f896ec43a", "commitAfterChange": "d73d2cacf79884db0dae830f87bb3795eb5cd6ef", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void setVisible(boolean vis)", "signatureAfterChange": "   public void setVisible(boolean vis)", "diff": ["-      edu.rice.cs.drjava.DrJavaRoot.installModalWindowAdapter(this, NO_OP, CANCEL);", "+      if (_parentFrame!=null) {", "+        edu.rice.cs.drjava.DrJavaRoot.installModalWindowAdapter(this, NO_OP, CANCEL);", "+      }", "-      edu.rice.cs.drjava.DrJavaRoot.removeModalWindowAdapter(this);", "-      _parentFrame.toFront();", "+      if (_parentFrame!=null) {", "+        edu.rice.cs.drjava.DrJavaRoot.removeModalWindowAdapter(this);", "+        _parentFrame.toFront();", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c46b4090ed159842b52e42f515811e9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "8bc200087783c364b85293d74698e136f9d39e73", "commitAfterChange": "cdc8036e660934a45b263608a1cde80ec1d15c5d", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public TypeData forComplexNameReference(ComplexNameReference that)", "signatureAfterChange": "   public TypeData forComplexNameReference(ComplexNameReference that)", "diff": ["-   */", "+    */", "+    if (lhs == null) return null;   // defensive code based on NullPointerException that MAY be due to lhs == null", "+    ", "-      if (classRef != null) {return classRef;}", "+      if (classRef != null) { return classRef; }", "-    ", "-    checkAccessibility(that, lhs.getSymbolData().getMav(), lhs.getSymbolData().getName(), lhs.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+    if (_data == null) return null;  // intermittent NullPointerException in next line; lhs == null or _data == null", "+    checkAccessibility(that, lhs.getSymbolData().getMav(), lhs.getSymbolData().getName(), lhs.getSymbolData(), ", "+                       _data.getSymbolData(), \"class or interface\", true);", "-        if (!reference.hasModifier(\"static\")) {", "-          _addError(\"Non-static variable \" + reference.getName() + \" cannot be accessed from the static context \" + Data.dollarSignsToDots(lhs.getName()) + \".  Perhaps you meant to instantiate an instance of \" + Data.dollarSignsToDots(lhs.getName()), that);", "+        if (! reference.hasModifier(\"static\")) {", "+          _addError(\"Non-static variable \" + reference.getName() + \" cannot be accessed from the static context \" + ", "+                    Data.dollarSignsToDots(lhs.getName()) + \".  Perhaps you meant to instantiate an instance of \" + ", "+                    Data.dollarSignsToDots(lhs.getName()), that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccc81cd137c4f9482a1c07e7f0c87a41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-windows/edu/rice/cs/drjava/platform/WindowsRegistry.java", "commitBeforeChange": "1c816952b5b8421dc41f789510e8d7ee742c6828", "commitAfterChange": "5d5ee31a35adeb92d7addaffa7abf0c54d001a85", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public static void delKey(int hKey, String subKey) throws RegistryException", "signatureAfterChange": "\r   public static void delKey(int hKey, String subKey) throws RegistryException", "diff": ["-    * @param subKey subkey name */", "-  public static void delKey(int hKey, String subKey) throws RegistryException {", "-    int handle = openKey(hKey, subKey, KEY_ALL_ACCESS);", "-    QueryInfoResult qi = queryInfoKey(handle);", "-    String s;", "-    for(int i=0; i<qi.valueCount; ++i) {", "-      s = enumValue(handle, i, qi.maxValueLength+1);", "-      deleteValue(handle, s);", "-    }", "-    for(int i=0; i<qi.subkeyCount; ++i) {", "-      s = enumKey(handle, i, qi.maxSubkeyLength+1);", "-      delKey(handle, s);", "-    }", "-    closeKey(handle);", "-    deleteKey(hKey, subKey);", "-  }", "+    * @param subKey subkey name */\r", "+  public static void delKey(int hKey, String subKey) throws RegistryException {\r", "+    int handle = openKey(hKey, subKey, KEY_ALL_ACCESS);\r", "+    QueryInfoResult qi = queryInfoKey(handle);\r", "+    String s;\r", "+    for(int i=0; i<qi.valueCount; ++i) {\r", "+      s = enumValue(handle, i, qi.maxValueLength+1);\r", "+      if (s!=null) deleteValue(handle, s);\r", "+    }\r", "+    for(int i=0; i<qi.subkeyCount; ++i) {\r", "+      s = enumKey(handle, i, qi.maxSubkeyLength+1);\r", "+      if (s!=null) delKey(handle, s);\r", "+    }\r", "+    flushKey(handle);\r", "+    closeKey(handle);\r", "+    deleteKey(hKey, subKey);\r", "+  }\r"]}], "num": 30517}
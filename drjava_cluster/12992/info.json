{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd21a6556e4dd3d007aa91c10af119b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5ec49e26b1907e929c91e5c73f07b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 83, "signatureBeforeChange": "   final public ContinueStatement continueStatement() throws ParseException", "signatureAfterChange": "   final public ContinueStatement continueStatement() throws ParseException", "diff": ["-    b = jj_consume_token(CONTINUE);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case IDENTIFIER:", "-      id = jj_consume_token(IDENTIFIER);", "-      break;", "-    default:", "-      jj_la1[79] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(CONTINUE);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        id = jj_consume_token(IDENTIFIER);", "+        break;", "+      default:", "+        jj_la1[80] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ContinueStatement((id != null) ? id.image : null,", "+                                     filename,", "+                                     b.beginLine, b.beginColumn,", "+                                     e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid continue statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ContinueStatement((id != null) ? id.image : null,", "-                                   filename,", "-                                   b.beginLine, b.beginColumn,", "-                                   e.endLine,   e.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d38e3ba213a1797be5fa50f9f36420c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   final public ClassBody classBody() throws ParseException", "signatureAfterChange": "   final public ClassBody classBody() throws ParseException", "diff": ["-    jj_consume_token(LBRACE);", "-    label_8:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOID:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case LESS:", "-        ;", "-        break;", "-      default:", "-        jj_la1[21] = jj_gen;", "-        break label_8;", "-      }", "-      decl = classBodyDeclaration();", "+    try {", "+      jj_consume_token(LBRACE);", "+      label_8:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case LESS:", "+          ;", "+          break;", "+        default:", "+          jj_la1[22] = jj_gen;", "+          break label_8;", "+        }", "+        decl = classBodyDeclaration();", "-    }", "-    t = jj_consume_token(RBRACE);", "+      }", "+      t = jj_consume_token(RBRACE);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid class body\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23b3fcc79b8c0e10e27c3c94c7c4524", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 69, "signatureBeforeChange": "   final public BlockStatement block() throws ParseException", "signatureAfterChange": "   final public BlockStatement block() throws ParseException", "diff": ["-    p1 = jj_consume_token(LBRACE);", "-    label_20:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case BOOLEAN:", "-      case BREAK:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case CONTINUE:", "-      case DO:", "-      case DOUBLE:", "-      case ENUM:", "-      case FALSE:", "-      case FINAL:", "-      case FLOAT:", "-      case FOR:", "-      case IF:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NEW:", "-      case NULL:", "-      case RETURN:", "-      case SHORT:", "-      case SUPER:", "-      case SWITCH:", "-      case SYNCHRONIZED:", "-      case THIS:", "-      case THROW:", "-      case TRUE:", "-      case TRY:", "-      case VOID:", "-      case WHILE:", "-      case INTEGER_LITERAL:", "-      case LONG_LITERAL:", "-      case FLOAT_LITERAL:", "-      case DOUBLE_LITERAL:", "-      case CHARACTER_LITERAL:", "-      case STRING_LITERAL:", "-      case IDENTIFIER:", "-      case LPAREN:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case INCREMENT:", "-      case DECREMENT:", "-        ;", "-        break;", "-      default:", "-        jj_la1[59] = jj_gen;", "-        break label_20;", "+    try {", "+      p1 = jj_consume_token(LBRACE);", "+      label_20:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case CONTINUE:", "+        case DO:", "+        case DOUBLE:", "+        case ENUM:", "+        case FALSE:", "+        case FINAL:", "+        case FLOAT:", "+        case FOR:", "+        case IF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NEW:", "+        case NULL:", "+        case RETURN:", "+        case SHORT:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case WHILE:", "+        case INTEGER_LITERAL:", "+        case LONG_LITERAL:", "+        case FLOAT_LITERAL:", "+        case DOUBLE_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case INCREMENT:", "+        case DECREMENT:", "+          ;", "+          break;", "+        default:", "+          jj_la1[60] = jj_gen;", "+          break label_20;", "+        }", "+        nodes = blockStatement();", "+        list.addAll(nodes);", "-      nodes = blockStatement();", "-           list.addAll(nodes);", "+      p2 = jj_consume_token(RBRACE);", "+        {if (true) return new BlockStatement(list,", "+                                  filename,", "+                                  p1.beginLine, p1.beginColumn,", "+                                  p2.endLine,   p2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid block statement\");", "-    p2 = jj_consume_token(RBRACE);", "-      {if (true) return new BlockStatement(list,", "-                                filename,", "-                                p1.beginLine, p1.beginColumn,", "-                                p2.endLine,   p2.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd5f5411ac27b4dd22be4d60a383bd68", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 82, "signatureBeforeChange": "   final public BreakStatement breakStatement() throws ParseException", "signatureAfterChange": "   final public BreakStatement breakStatement() throws ParseException", "diff": ["-    b = jj_consume_token(BREAK);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case IDENTIFIER:", "-      id = jj_consume_token(IDENTIFIER);", "-      break;", "-    default:", "-      jj_la1[78] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(BREAK);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case IDENTIFIER:", "+        id = jj_consume_token(IDENTIFIER);", "+        break;", "+      default:", "+        jj_la1[79] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new BreakStatement((id != null) ? id.image : null,", "+                                  filename,", "+                                  b.beginLine, b.beginColumn,", "+                                  e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid break statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new BreakStatement((id != null) ? id.image : null,", "-                                filename,", "-                                b.beginLine, b.beginColumn,", "-                                e.endLine,   e.endColumn);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c34f7b022899c7344d3140bfa3d89a5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": "   final public ReturnStatement returnStatement() throws ParseException", "signatureAfterChange": "   final public ReturnStatement returnStatement() throws ParseException", "diff": ["-    b = jj_consume_token(RETURN);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case BANG:", "-    case TILDE:", "-    case INCREMENT:", "-    case DECREMENT:", "-    case PLUS:", "-    case MINUS:", "-      exp = expression();", "-      break;", "-    default:", "-      jj_la1[80] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(RETURN);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case LONG_LITERAL:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case BANG:", "+      case TILDE:", "+      case INCREMENT:", "+      case DECREMENT:", "+      case PLUS:", "+      case MINUS:", "+        exp = expression();", "+        break;", "+      default:", "+        jj_la1[81] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ReturnStatement(exp,", "+                                   filename,", "+                                   b.beginLine, b.beginColumn,", "+                                   e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid return statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ReturnStatement(exp,", "-                                 filename,", "-                                 b.beginLine, b.beginColumn,", "-                                 e.endLine,   e.endColumn);}"]}], "num": 12992}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ec56a35385b8453169a6bd21bcd596c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af014a92817e07c47c595a0a17afd5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk6/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "fdceac19a315aa89dd2730a793dce89c488bf5c8", "commitAfterChange": "616a73b61604c7af8836357cef2e57a77aa96d3b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+    List<File> filteredClassPath = null;", "+    if (classPath!=null) {", "+      filteredClassPath = new LinkedList<File>(classPath);", "+      ", "+      if (_filterExe) {", "+        FileFilter filter = IOUtil.extensionFilePredicate(\"exe\");", "+        Iterator<? extends File> i = filteredClassPath.iterator();", "+        while (i.hasNext()) {", "+          if (filter.accept(i.next())) { i.remove(); }", "+        }", "+        if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "+      }", "+    }", "-    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    Context context = _createContext(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22dbaf5a9ff0a8f5344a82259672786", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk16/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "0fe874dd6d2f82ba868df35578fd530c5227b9f2", "commitAfterChange": "12b972c6351f6122675c003ccbc59ef481c89cda", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+    List<File> filteredClassPath = new LinkedList<File>(classPath);", "-      Iterator<? extends File> i = classPath.iterator();", "+      Iterator<? extends File> i = filteredClassPath.iterator();", "-        if (filter.accept(i.next())) { i.remove(); }", "+\tif (filter.accept(i.next())) { i.remove(); }", "+      if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "-    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    Context context = _createContext(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);"]}], "num": 28197}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96e6164e0c62205c8dc36ba528f69e7d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e6a132687a0eed3ee537a7c349e532", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneMemoryLeakTest.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private void runIsolatedDrJavaSession() throws InterruptedException, IOException", "signatureAfterChange": "   private void runIsolatedDrJavaSession() throws InterruptedException, IOException", "diff": ["-    WeakReference[] wd = new WeakReference[PANE_COUNT];", "-    WeakReference[] wp = new WeakReference[PANE_COUNT];", "+    List<WeakReference<OpenDefinitionsDocument>> wd = new ArrayList<WeakReference<OpenDefinitionsDocument>>(PANE_COUNT);", "+    List<WeakReference<DefinitionsPane>> wp = new ArrayList<WeakReference<DefinitionsPane>>(PANE_COUNT);", "-      wd[i] = new WeakReference<OpenDefinitionsDocument>(d[i]);", "-      wp[i] = new WeakReference<DefinitionsPane>(p[i]);", "+      wd.add(new WeakReference<OpenDefinitionsDocument>(d[i]));", "+      wp.add(new WeakReference<DefinitionsPane>(p[i]));", "-      assertGC(\"Document \"+i+\" leaked\", wd[i]);", "-      assertGC(\"Pane \"+i+\" leaked\", wp[i]);", "+      assertGC(\"Document \"+i+\" leaked\", wd.get(i));", "+      assertGC(\"Pane \"+i+\" leaked\", wp.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7444e5cc3b8832054f1c35d93c873743", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForEachStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["-                                     new IntType(),", "+                                     new IntTypeName(),", "-      List<List<? extends koala.dynamicjava.tree.Type>> typeArgs = new LinkedList<List<? extends koala.dynamicjava.tree.Type>>();", "-      List<koala.dynamicjava.tree.Type> arg1 = new LinkedList<koala.dynamicjava.tree.Type>();", "+      List<List<? extends koala.dynamicjava.tree.TypeName>> typeArgs = new LinkedList<List<? extends koala.dynamicjava.tree.TypeName>>();", "+      List<koala.dynamicjava.tree.TypeName> arg1 = new LinkedList<koala.dynamicjava.tree.TypeName>();", "-                                     new GenericReferenceType(ids,typeArgs),", "+                                     new GenericReferenceTypeName(ids,typeArgs),", "-      ArrayType art = new ArrayType(formalparam.getType(), 1);", "+      ArrayTypeName art = new ArrayTypeName(formalparam.getType(), 1);", "-      condition.setProperty(NodeProperties.TYPE,   new BooleanType());", "+      condition.setProperty(NodeProperties.TYPE,   new BooleanTypeName());"]}], "num": 2198}
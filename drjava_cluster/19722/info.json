{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f269f495e815e26867ada4a32b16592e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d505c3220ecfa69a0ccf0264034f34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DrJavaTestCaseClassLoader.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private void readExcludedPackages()", "signatureAfterChange": "   private void readExcludedPackages()", "diff": ["-    Enumeration<String> pnames = (Enumeration<String>) p.propertyNames();", "+    ", "+    // Raw type because Properties is not generified.", "+    Enumeration pnames = p.propertyNames();", "+    ", "-      String key = pnames.nextElement();", "+      String key = (String) pnames.nextElement();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eafb185b555a519ffc6677222fb94855", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "7d7f71637ac82cabd526a44e6c766574f76fc311", "commitAfterChange": "33c99bc453e2b8a224944d7334183adb0010fc32", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Class lookupClass(String cname, String ccname) \tthrows ClassNotFoundException", "signatureAfterChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "diff": ["+   */", "+  public Class lookupClass(String cname, String ccname)", "+    throws ClassNotFoundException {", "+    String str = cname.replace('.', '$');", "+    ", "+    // Search for the full name ...", "+    ", "+    // ... in the current package ...", "+    String t = (currentPackage.equals(\"\"))", "+      ? cname", "+      : currentPackage + \".\" + cname; ", "+    try {", "+      return Class.forName(t, false, classLoader);", "+    } catch (ClassNotFoundException e) {", "+    ", "+    if (cname.indexOf('.') != -1) {", "+      try {", "+        return Class.forName(cname, false, classLoader);", "+      } catch (ClassNotFoundException e) {", "+      }", "+    ", "+    // try to find an inner class with this name", "+    try {", "+      return findInnerClass(t);", "+    } catch (ClassNotFoundException e) {", "+    ", "+    // ... in the single-type-import clauses ...", "+    Iterator<String> it = singleTypeImportClauses.iterator();", "+    while (it.hasNext()) {", "+      String s = it.next();", "+      if (hasSuffix(s, cname) || hasSuffix(s, str)) {", "+        return Class.forName(s, false, classLoader);", "+      }", "+      // It is perhaps an innerclass of an imported class", "+      // ie. a.b.C and C$D", "+      int i = str.indexOf('$');", "+      if (i != -1) {", "+        try {", "+          if (hasSuffix(s, str.substring(0, i))) {", "+            return Class.forName(s + str.substring(i, str.length()),", "+                                 false, classLoader);", "+          }", "+        } catch (ClassNotFoundException e) {", "+        }", "+      }", "+    ", "+    if (ccname != null) {", "+      // ... in the current class ...", "+      try {", "+        return Class.forName(ccname + \"$\" + str, false, classLoader);", "+      } catch (ClassNotFoundException e) {", "+      }", "+      ", "+      // ... it is perhaps an outer class", "+      it = getOuterNames(ccname).iterator();", "+      String tmp = ccname;", "+      while (it.hasNext()) {", "+        String s = it.next();", "+        int i = tmp.lastIndexOf(s) + s.length();", "+        tmp = tmp.substring(0, i);", "+        if (s.equals(cname)) {", "+          return Class.forName(tmp, false, classLoader);", "+        }", "+      }", "+      ", "+      // ... or the class itself", "+      if (ccname.endsWith(cname)) {", "+        int i = ccname.lastIndexOf(cname);", "+        if (i > 0 && ccname.charAt(i - 1) == '$') {", "+          return Class.forName(ccname, false, classLoader);", "+        }", "+      }", "+    ", "+    // ... with the import-on-demand clauses as prefix", "+    it = importOnDemandClauses.iterator();", "+    while (it.hasNext()) {", "+      String s = it.next();", "+      try {", "+        return Class.forName(s+\".\"+str, false, classLoader);", "+      } catch (ClassNotFoundException e) {", "+      }", "+    ", "+    throw new ClassNotFoundException(cname);", "+  }", "-     */", "-    public Class lookupClass(String cname, String ccname)", "-\tthrows ClassNotFoundException {", "-\tString str = cname.replace('.', '$');", "-", "-\t// Search for the full name ...", "-\t", "-\t// ... in the current package ...", "-\tString t = (currentPackage.equals(\"\"))", "-\t    ? cname", "-\t    : currentPackage + \".\" + cname;\t", "-\ttry {", "-\t    return Class.forName(t, false, classLoader);", "-\t} catch (ClassNotFoundException e) {", "-\t}", "-", "-\tif (cname.indexOf('.') != -1) {", "-\t    try {", "-\t\treturn Class.forName(cname, false, classLoader);", "-\t    } catch (ClassNotFoundException e) {", "-\t    }", "-\t}", "-", "-\t// try to find an inner class with this name", "-\ttry {", "-\t    return findInnerClass(t);", "-\t} catch (ClassNotFoundException e) {", "-\t}", "-", "-\t// ... in the single-type-import clauses ...", "-\tIterator it = singleTypeImportClauses.iterator();", "-\twhile (it.hasNext()) {", "-\t    String s = (String)it.next();", "-\t    if (hasSuffix(s, cname) || hasSuffix(s, str)) {", "-\t\treturn Class.forName(s, false, classLoader);", "-\t    }", "-\t    // It is perhaps an innerclass of an imported class", "-\t    // ie. a.b.C and C$D", "-\t    int i = str.indexOf('$');", "-\t    if (i != -1) {", "-\t\ttry {", "-\t\t    if (hasSuffix(s, str.substring(0, i))) {", "-\t\t\treturn Class.forName(s + str.substring(i, str.length()),", "-\t\t\t\t\t     false, classLoader);", "-\t\t    }", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t}", "-\t    }", "-\t}", "-", "-\tif (ccname != null) {", "-\t    // ... in the current class ...", "-\t    try {", "-\t\treturn Class.forName(ccname + \"$\" + str, false, classLoader);", "-\t    } catch (ClassNotFoundException e) {", "-\t    }", "-", "-\t    // ... it is perhaps an outer class", "-\t    it = getOuterNames(ccname).iterator();", "-\t    String tmp = ccname;", "-\t    while (it.hasNext()) {", "-\t\tString s = (String)it.next();", "-\t\tint i = tmp.lastIndexOf(s) + s.length();", "-\t\ttmp = tmp.substring(0, i);", "-\t\tif (s.equals(cname)) {", "-\t\t    return Class.forName(tmp, false, classLoader);", "-\t\t}", "-\t    }", "-", "-\t    // ... or the class itself", "-\t    if (ccname.endsWith(cname)) {", "-\t\tint i = ccname.lastIndexOf(cname);", "-\t\tif (i > 0 && ccname.charAt(i - 1) == '$') {", "-\t\t    return Class.forName(ccname, false, classLoader);", "-\t\t}", "-\t    }", "-\t}", "-\t", "-\t// ... with the import-on-demand clauses as prefix", "-\tit = importOnDemandClauses.iterator();", "-\twhile (it.hasNext()) {", "-\t    String s = (String)it.next();", "-\t    try {", "-\t        return Class.forName(s+\".\"+str, false, classLoader);", "-\t    } catch (ClassNotFoundException e) {", "-\t    }", "-\t}", "-", "-\tthrow new ClassNotFoundException(cname);"]}], "num": 19722}
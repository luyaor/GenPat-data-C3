{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ce8c33ce60f7978e090fd4bb203c744", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0305de4f03a14d72bec383d3902be0df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isCompatible(Class c1, Class c2)", "diff": ["+    return isBoxCompatible(c1, c2, Float.valueOf(System.getProperty(\"java.specification.version\")) >= 1.5);", "+    ", "+    /** Commented by Jonathan Lugo 2004-05-18.  Code moved to isBoxCompatible**/", "+//    if (c1.isPrimitive()) {", "+//      if (c1 != c2) {", "+//        if (c1 == int.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == char.class);", "+//        } ", "+//        else if (c1 == long.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == int.class);", "+//        } ", "+//        else if (c1 == short.class) {", "+//          return c2 == byte.class;", "+//        } ", "+//        else if (c1 == float.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == int.class   ||", "+//                  c2 == long.class);", "+//        } ", "+//        else if (c1 == double.class) {", "+//          return (c2 == byte.class  ||", "+//                  c2 == short.class ||", "+//                  c2 == int.class   ||", "+//                  c2 == long.class  ||", "+//                  c2 == float.class);", "+//        } ", "+//        else { // it's a boolean && c1 != c2", "+//          return false;", "+//        }", "+//      }", "+//      else { // c1 == c2", "+//        return true;", "+//      }", "+//    } ", "+//    else { // It's a reference type", "+//      return (c2 == null) ? true : c1.isAssignableFrom(c2);", "+//    }", "+  }", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == char.class;", "-        } else if (c1 == long.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class;", "-        } else if (c1 == short.class) {", "-        } else if (c1 == float.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class;", "-        } else if (c1 == double.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class  ||", "-            c2 == float.class;", "-        } else {", "-      } else {", "-    } else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fadb59ea3ac400170c558000a6a5ff8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isCompatible(Class c1, Class c2)", "diff": ["-    return isBoxCompatible(c1, c2, Float.valueOf(System.getProperty(\"java.specification.version\")) >= 1.5);", "-    ", "-    /** Commented by Jonathan Lugo 2004-05-18.  Code moved to isBoxCompatible**/", "-//    if (c1.isPrimitive()) {", "-//      if (c1 != c2) {", "-//        if (c1 == int.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == char.class);", "-//        } ", "-//        else if (c1 == long.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == int.class);", "-//        } ", "-//        else if (c1 == short.class) {", "-//          return c2 == byte.class;", "-//        } ", "-//        else if (c1 == float.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == int.class   ||", "-//                  c2 == long.class);", "-//        } ", "-//        else if (c1 == double.class) {", "-//          return (c2 == byte.class  ||", "-//                  c2 == short.class ||", "-//                  c2 == int.class   ||", "-//                  c2 == long.class  ||", "-//                  c2 == float.class);", "-//        } ", "-//        else { // it's a boolean && c1 != c2", "-//          return false;", "-//        }", "-//      }", "-//      else { // c1 == c2", "-//        return true;", "-//      }", "-//    } ", "-//    else { // It's a reference type", "-//      return (c2 == null) ? true : c1.isAssignableFrom(c2);", "-//    }", "-  }", "+    if (c1.isPrimitive()) {", "+      if (c1 != c2) {", "+        if (c1 == int.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == char.class);", "+        }", "+        else if (c1 == long.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class);", "+        } ", "+        else if (c1 == short.class) {", "+          return c2 == byte.class;", "+        } ", "+        else if (c1 == float.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class);", "+        } ", "+        else if (c1 == double.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class  ||", "+                  c2 == float.class);", "+        } ", "+        else { // it's a boolean && c1 != c2", "+          return false;", "+        }", "+      }", "+      else { // c1 == c2", "+        return true;", "+      }", "+    } ", "+    else { // It's a reference type", "+      return (c2 == null) ? true : c1.isAssignableFrom(c2);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca3cf0fcce4b0ab6af3ab36802432f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled)", "diff": ["+  }", "+  public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled) {", "+      ", "+        ", "+      if (!c2.isPrimitive() && !autoBoxEnabled) {", "+        // We know autoboxing/unboxing is required but", "+        // the version of java doesn't support it", "+        throw new WrongVersionException(\"Auto-unboxing only supported in Java 1.5 or better\");", "+      }", "+      else {", "+        // unbox the second type (may not change)", "+        c2 = _correspondingPrimType(c2);", "+      }", "+      ", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == char.class;", "-        } else if (c1 == long.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class;", "-        } else if (c1 == short.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == char.class);", "+        } ", "+        else if (c1 == long.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class);", "+        } ", "+        else if (c1 == short.class) {", "-        } else if (c1 == float.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class;", "-        } else if (c1 == double.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class  ||", "-            c2 == float.class;", "-        } else {", "+        } ", "+        else if (c1 == float.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class);", "+        } ", "+        else if (c1 == double.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class  ||", "+                  c2 == float.class);", "+        } ", "+        else { // it's a boolean && c1 != c2", "-      } else {", "+      }", "+      else { // c1 == c2", "-    } else {", "+    }", "+    else { // It's a reference type", "+      if (c2 != null && c2.isPrimitive()) {", "+        if (!autoBoxEnabled) {", "+           throw new WrongVersionException(\"Auto-boxing/unboxing is only supported in Java 1.5 or better\");", "+        }", "+        c2 = _correspondingBoxingType(c2);", "+      }"]}], "num": 12474}
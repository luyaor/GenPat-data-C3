{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc4843c0c779e8a7ae768249a41e05ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35ba778257f5904cd86af62488041e2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private static Iterable<File> listFilesRecursively(final File f, final FileFilter filter,                                                       final FileFilter recursionFilter,                                                       final RecursionStack<File> stack)", "signatureAfterChange": "   private static SizedIterable<File> listFilesRecursively(final File f, final FileFilter filter,                                                            final FileFilter recursionFilter,                                                            final RecursionStack<File> stack)", "diff": ["-  private static Iterable<File> listFilesRecursively(final File f, final FileFilter filter, ", "-                                                     final FileFilter recursionFilter, ", "-                                                     final RecursionStack<File> stack) {", "-    Iterable<File> result = (filter.accept(f)) ? IterUtil.singleton(f) : IterUtil.<File>empty();", "+  private static SizedIterable<File> listFilesRecursively(final File f, final FileFilter filter, ", "+                                                          final FileFilter recursionFilter, ", "+                                                          final RecursionStack<File> stack) {", "+    SizedIterable<File> result = (filter.accept(f)) ? IterUtil.singleton(f) : IterUtil.<File>empty();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5f551f5cf94e75382a7187bc26b2e1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 206, "signatureBeforeChange": "   public static <T1, T2> Iterable<Pair<T1, T2>> zip(Iterable<? extends T1> iter1,                                                      Iterable<? extends T2> iter2)", "signatureAfterChange": "   public static <T1, T2> Iterable<Pair<T1, T2>> zip(Iterable<? extends T1> iter1, Iterable<? extends T2> iter2)", "diff": ["-  public static <T1, T2> Iterable<Pair<T1, T2>> zip(Iterable<? extends T1> iter1, ", "-                                                    Iterable<? extends T2> iter2) {", "-    Lambda2<T1, T2, Pair<T1, T2>> makePair = new Lambda2<T1, T2, Pair<T1, T2>>() {", "-      public Pair<T1, T2> value(T1 arg1, T2 arg2) { return new Pair<T1, T2>(arg1, arg2); }", "-    };", "-    return new BinaryMappedIterable<T1, T2, Pair<T1, T2>>(iter1, iter2, makePair);", "+  public static <T1, T2> Iterable<Pair<T1, T2>> zip(Iterable<? extends T1> iter1, Iterable<? extends T2> iter2) {", "+    return new BinaryMappedIterable<T1, T2, Pair<T1, T2>>(iter1, iter2, Pair.<T1, T2>factory());"]}], "num": 1598}
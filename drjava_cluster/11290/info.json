{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e16889c3d1b70cef2d99b5f42e5556be", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27d75159c4f0b3fd113d186cc1739da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "commitAfterChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testClearOthersWhenJUnitRun() throws Exception", "signatureAfterChange": "   public void testClearOthersWhenJUnitRun() throws Exception", "diff": ["-    /*", "-    OpenDefinitionsDocument doc1 = setupDocument(MONKEYTEST_FAIL_TEXT);", "-    OpenDefinitionsDocument doc2 = setupDocument(NONPUBLIC_TEXT);", "-    final File file1 = new File(_tempDir, \"MonkeyTestFail.java\");", "-    final File file2 = new File(_tempDir, \"NonPublic.java\");", "-    doc1.saveFile(new FileSelector(file1));", "-    doc1.startCompile();", "-", "-    doc2.saveFile(new FileSelector(file2));", "-    doc2.startCompile();", "-    /*final TestResult tr1 = doc1.startJUnit();", "+    OpenDefinitionsDocument doc1 = setupDocument(MONKEYTEST_FAIL_TEXT);", "+    final File file1 = new File(_tempDir, \"MonkeyTestFail.java\");", "+    doc1.saveFile(new FileSelector(file1));", "+    ", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc1.startCompile();", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    synchronized(listener) {", "+      doc1.startJUnit();", "+      listener.assertJUnitStartCount(1);", "+      listener.wait();", "+    }", "+    //final TestResult tr1 = doc1.startJUnit();", "-    final TestResult tr2 = doc2.startJUnit();", "-", "+    _model.removeListener(listener);", "+    OpenDefinitionsDocument doc2 = setupDocument(NONPUBLIC_TEXT);", "+    final File file2 = new File(_tempDir, \"NonPublic.java\");", "+    doc2.saveFile(new FileSelector(file2));", "+    //final TestResult tr2 = doc2.startJUnit();", "+    TestShouldSucceedListener listener2 = new TestShouldSucceedListener();", "+    _model.addListener(listener2);", "+    ", "+    synchronized(listener2) {", "+      doc2.startCompile();", "+      listener2.wait();", "+    }", "+    ", "+    listener2.checkCompileOccurred();", "+    synchronized(listener2) {", "+      doc2.startJUnit();", "+      listener2.assertJUnitStartCount(1);", "+      listener2.wait();", "+    }", "-                 m1before.getErrorsWithPositions().length,", "-                 2", "+                 2,", "+                 m1before.getNumErrors()", "-                 m2.getErrorsWithoutPositions().length,", "-                 1", "+                 1,", "+                 m2.getNumErrors()", "-                 m1after.getErrorsWithPositions().length,", "-                 0", "+                 0,", "+                 m1after.getNumErrors()", "-    */", "+    _model.removeListener(listener2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bade33f5edb1fb4d5591c6278c29ae14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 10, "signatureBeforeChange": "              public void fileSaved(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void testInfiniteLoop() throws Exception", "diff": ["-      ", "-      public void fileSaved(OpenDefinitionsDocument doc) {", "-        assertModified(false, doc);", "-        assertSaveAllBeforeProceedingCount(0);", "-        assertCompileStartCount(0);", "-        assertCompileEndCount(0);", "-        ", "-        File f = null;", "-        try {", "-          f = doc.getFile();", "-        }", "-        catch (IllegalStateException ise) {", "-          // We know file should exist", "-          throw new UnexpectedException(ise);", "-        }", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-        assertEquals(\"JUNIT file saved\", file, f);", "-        saveCount++;", "-      }", "+   */", "+  public void testInfiniteLoop() throws Exception {", "+    final OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_INFINITE_TEXT);", "+    final File file = new File(_tempDir, \"MonkeyTestInfinite.java\");", "+    doc.saveFile(new FileSelector(file));", "+    ", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener();", "+    TestListener listener2 = new TestListener() {", "+      public void junitStarted(OpenDefinitionsDocument odd) {", "+        assertEquals(\"Documents don't match\", doc, odd);", "+        junitStartCount++;", "+      }", "+      ", "+      public void junitRunning() {", "+        junitRunningCount++;", "+        // kill the infinite test once the tests have started", "+        _model.resetInteractions();", "+      }", "+      ", "+      public void junitEnded() {", "+        synchronized(this) {", "+          assertInteractionsResetCount(1);", "+          junitEndCount++;", "+          notify();", "+        }", "+      }", "+      ", "+      public void interactionsResetting() {", "+        assertInteractionsResetCount(0);", "+        interactionsResettingCount++;", "+      }", "+      ", "+      public void interactionsReset() {", "+        assertInteractionsResettingCount(1);", "+        assertJUnitEndCount(0);", "+        interactionsResetCount++;", "+      }", "+    };", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    _model.removeListener(listener);", "+    _model.addListener(listener2);", "+    synchronized(listener2) {", "+      doc.startJUnit();", "+      listener2.assertJUnitStartCount(1);", "+      listener2.wait();", "+    }", "+    _model.removeListener(listener2);", "+    listener2.assertJUnitEndCount(1);", "+  }  "]}], "num": 11290}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3420f806a8ce4324b6d3a13f53ed938", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81bd4ee0195baa93df277e0a3c0fe2ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private File _getWorkDir()", "signatureAfterChange": "   private File _getWorkDir()", "diff": ["-    File workDir = DrJava.getConfig().getSetting(OptionConstants.WORKING_DIRECTORY);", "-    if (workDir == FileOption.NULL_FILE) {", "-      workDir = new File(System.getProperty(\"user.dir\"));", "-    }", "-    if (workDir.isFile() && workDir.getParent() != null) {", "-      workDir = workDir.getParentFile();", "-    }", "+    File workDir = _mainFrame.getModel().getMasterWorkingDirectory();  // cannot be null", "+    if (workDir.isDirectory()) return workDir;", "+    ", "+    if (workDir.getParent() != null) workDir = workDir.getParentFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b2da2131b42d3db8967e4edf0f861e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public final void start(final MasterRemote master) throws RemoteException", "signatureAfterChange": "   public final synchronized void start(final MasterRemote master) throws RemoteException", "diff": ["+    */", "+  public final synchronized void start(final MasterRemote master) throws RemoteException {", "+    if (_started) { throw new IllegalArgumentException(\"start() has already been invoked\"); }", "+    master.checkStillAlive(); // verify that two-way communication works; may throw RemoteException", "+", "+    Thread checkMaster = new Thread(_pollMasterThreadName) {", "+      public void run() {", "+        while (true) {", "+          ConcurrentUtil.sleep(CHECK_MAIN_VM_ALIVE_SECONDS*1000);", "+          try { master.checkStillAlive(); }", "+          catch (RemoteException e) {", "+            // TODO: This should always be an exceptional situation, but for now", "+            // many tests abandon the slave without quitting cleanly.", "+            // error.log(\"Master is no longer available\", e);", "+            quit();", "+          }", "+    checkMaster.setDaemon(true);", "+    checkMaster.start();", "+    handleStart(master);", "-    */", "-  public final void start(final MasterRemote master) throws RemoteException {", "-    ", "-    if (_checkMaster != null) throw new UnexpectedException(this + \".start(...) called a second time\");", "-    ", "-    _checkMaster = new Thread(_pollMasterThreadName) {", "-      public void run() { // Note: this method is NOT synchronized; it runs in a different thread.", "-        while (true) {", "-          try { Thread.sleep(CHECK_MAIN_VM_ALIVE_SECONDS*1000); }", "-          catch (InterruptedException ie) { }", "-//          _log.log(this + \" polling \" + master + \" to confirm Master JVM is still alive\");", "-          try { master.checkStillAlive(); }", "-          catch (RemoteException re) {", "-            // TODO: This should always be an exceptional situation, but for now", "-            // many tests abandon the slave without quitting cleanly.", "-            // error.log(re);", "-            quit(); // Master JVM service is defunct. Quit! */", "-          }", "-        }", "-      }", "-    };", "-    ", "-    ", "-    ", "-    _checkMaster.setDaemon(true);", "-    _checkMaster.start();", "-    _log.log(_checkMaster + \" created and STARTed by \" + this);", "-    ", "-    handleStart(master);  // master is passed as parameter because in some refactorings, _master is eliminated", "-    ", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3702bdf7b4445a74dede9b65f2a2bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private File _getWorkDir()", "signatureAfterChange": "   private File _getWorkDir()", "diff": ["-   */", "+  /** Returns the current working directory in the project profile (FileOption.NULL_FILE if none is set) */", "-    File workDir = DrJava.getConfig().getSetting(OptionConstants.WORKING_DIRECTORY);", "-    if (workDir == FileOption.NULL_FILE) {", "-      workDir = new File(System.getProperty(\"user.dir\"));", "-    }", "-    if (workDir.isFile() && workDir.getParent() != null) {", "-      workDir = workDir.getParentFile();", "-    }", "-    return workDir;", "+    File workDir = _mainFrame.getModel().getRawWorkingDirectory();", "+    if (workDir != null) return workDir;", "+    return FileOption.NULL_FILE;"]}], "num": 6856}
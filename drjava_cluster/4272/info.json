{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdeed58e06bd6a7366cd219cf5f161e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d61c50a84bbfc22ec53ba3ec1d3a949", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "72c953c3c4f509998630ec89f0f6ab473b5c78c1", "commitAfterChange": "b04c072cc6c2afa2120f5e98663d5a900c3a128f", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   public boolean javadocAll(String destDir) throws IOException, InvalidPackageException", "signatureAfterChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver) throws IOException, InvalidPackageException", "diff": ["-  public boolean javadocAll(String destDir) throws IOException, InvalidPackageException {", "-    ", "-    // Notify all listeners that Javadoc is starting.", "-    this.javadocStarted();", "+  public void javadocAll(DirectorySelector select, final FileSaveSelector saver) throws IOException, InvalidPackageException {", "+    // Only javadoc if all are saved.", "+    saveAllBeforeProceeding(GlobalModelListener.JAVADOC_REASON);", "-      return false;", "+      return;", "+    // Make sure that there is at least one saved document.", "+    ListModel docs = _definitionsDocs;", "+    ", "+    boolean noneYet = true;", "+    int numDocs = docs.getSize();", "+    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "+      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "+      noneYet = doc.isUntitled();", "+    }", "+    ", "+    // If there are no saved files, ignore the javadoc command.", "+    if (noneYet) {", "+      return;", "+    }", "+    ", "+    int returnVal;", "+    Configuration config = DrJava.getConfig();", "+    File destDir = config.getSetting(OptionConstants.JAVADOC_DESTINATION);", "+    boolean ask = config.getSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION).booleanValue();", "+    ", "+    // Get the destination directory via the DirectorySelector, if appropriate.", "+    try {", "+      // If we no destination is set, or the user has asked for prompts,", "+      // ask the user for a destination directory.", "+      if (destDir.equals(FileOption.NULL_FILE) || ask) {", "+        if (!destDir.equals(FileOption.NULL_FILE)) {", "+          destDir = select.getDirectory(destDir);", "+        }", "+        else {", "+          destDir = select.getDirectory(null);", "+        }", "+      }", "+        ", "+      // Make sure the destination is writable.", "+      while (!destDir.exists() || !destDir.canWrite()) {", "+        // If the choice was rejected, tell the user and ask again.", "+        select.warnUser(\"The destination directory you have chosen\\n\"", "+                          + \"does not exist or is not readable. Please\\n\"", "+                          + \"choose another directory.\",", "+                        \"Bad Destination\");", "+        destDir = select.getDirectory(null);", "+      }", "+    }", "+    catch (OperationCanceledException oce) {", "+      // If the user cancels the dialog, silently return.", "+      return;", "+    }", "+    ", "+    // Start a new thread to do the work.", "+    final File destDirF = destDir;", "+    new Thread() {", "+      public void run() {", "+        _javadocWorker(destDirF, saver);", "+      }", "+    }.start();", "+  }", "-    HashSet docUnits = new HashSet();", "-    HashSet sourceRootSet = new HashSet();", "-    HashSet defaultRoots = new HashSet();", "-    HashSet topLevelPacks = new HashSet();", "-    boolean docAll = DrJava.getConfig().getSetting(JAVADOC_ALL_PACKAGES).booleanValue();", "-        // This call will abort the iteration if there is no file.", "-        File file = doc.getFile();", "-        if (pack.equals(\"\") && !defaultRoots.contains(sourceRoot)) {", "-          // This file uses the default package.", "-          // Look for other source files at the source root.", "-          // But don't do it if we've already done it for this directory.", "-          defaultRoots.add(sourceRoot);", "-          File[] javaFiles = sourceRoot.listFiles(FileOps.JAVA_FILE_FILTER);", "-", "-          for (int j = 0; j < javaFiles.length; j++) {", "-            docUnits.add(javaFiles[j].getAbsolutePath());", "-          String topLevelPack = pack;", "-          File searchRoot = new File(sourceRoot,", "-                                     topLevelPack.replace('.', File.separatorChar));", "-    if (docUnits.size() == 0) { ", "-      return false;", "-    args.add(\"-private\");", "-    boolean result;", "-      result = javadoc_1_3((String[]) args.toArray(new String[0]));", "-      this.javadocEnded();", "-    }", "-    return result;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52a71f93cade71469959faae8cabb7b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "034592db30d33c0ac1a392bea16579d041875914", "commitAfterChange": "35d9365226ba0771f8b6c75f7ce46695407e7805", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          List<String> classpath,                          final JavadocListener listener)     throws IOException", "signatureAfterChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver,                          List<String> classpath,                          final JavadocListener listener)     throws IOException", "diff": ["-    boolean ask = config.getSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION).booleanValue();", "-      // If we no destination is set, or the user has asked for prompts,", "-      // ask the user for a destination directory.", "-      if (destDir.equals(FileOption.NULL_FILE) || ask) {", "-        if (!destDir.equals(FileOption.NULL_FILE)) {", "-          destDir = select.getDirectory(destDir);", "+      if (destDir.equals(FileOption.NULL_FILE)) {", "+        // This is the default, stock behavior of a new install.", "+        // If no destination is set, don't pass anything to the ui command.", "+        // Let the command object decide what to do.", "+        destDir = select.getDirectory(null);", "+      }", "+      else {", "+        // Otherwise, tell the command object to prefer the config's default.", "+        destDir = select.getDirectory(destDir);", "+      }", "+        ", "+      // Make sure the destination is usable.", "+      while (!destDir.exists() || !destDir.isDirectory() || !destDir.canWrite()) {", "+        if (!destDir.exists()) {", "+          // If the choice doesn't exist, ask to create it.", "+          boolean create = select.askUser", "+            (\"The destination directory you have chosen\\n\" +", "+             \"does not exist.  Would you like to create it?\",", "+             \"Create Directory?\");", "+          if (create) {", "+            boolean dirMade = destDir.mkdir();", "+            if (!dirMade) {", "+              throw new IOException(\"Could not create directory: \" + destDir);", "+            }", "+          }", "+          else {", "+            return;", "+          }", "+        }", "+        else if (!destDir.isDirectory()) {", "+          // We can't use it if it isn't a directory", "+          select.warnUser(\"The file you have chosen is not a directory.\\n\" +", "+                          \"Please choose another.\",", "+                          \"Not a Directory!\");", "+          destDir = select.getDirectory(null);", "+          //If the directory isn't writable, tell the user and ask again.", "+          select.warnUser(\"The destination directory you have chosen is\\n\" +", "+                          \"not writeable. Please choose another directory.\",", "+                          \"Cannot Write to Destination!\");", "-        ", "-      // Make sure the destination is writable.", "-      while (!destDir.exists() || !destDir.canWrite()) {", "-        // If the choice was rejected, tell the user and ask again.", "-        select.warnUser(\"The destination directory you have chosen\\n\"", "-                          + \"does not exist or is not readable. Please\\n\"", "-                          + \"choose another directory.\",", "-                        \"Bad Destination\");", "-        destDir = select.getDirectory(null);", "-      }", "-      // If the user cancels the dialog, silently return.", "+      // If the user cancels anywhere, silently return."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6413b8cf433abfac6bea7a72c87054e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "3f81b37285813b52f5c285ae3a68ee4a21753a7e", "commitAfterChange": "844a54657c2f878fc1ea01131f59375a436ab7c8", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 135, "signatureBeforeChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver) throws IOException, InvalidPackageException", "signatureAfterChange": "      public void javadocAll(DirectorySelector select, FileSaveSelector saver,                          List<String> classpath,                          JavadocListener listener)     throws IOException, InvalidPackageException", "diff": ["-   */", "-  public void javadocAll(DirectorySelector select, final FileSaveSelector saver) throws IOException, InvalidPackageException {", "-    // Only javadoc if all are saved.", "-    saveAllBeforeProceeding(GlobalModelListener.JAVADOC_REASON);", "-    ", "-    if (areAnyModifiedSinceSave()) {", "-      // if any files haven't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the operation.", "-      return;", "-    }", "-    ", "-    // Make sure that there is at least one saved document.", "-    ListModel docs = _definitionsDocs;", "-    ", "-    boolean noneYet = true;", "-    int numDocs = docs.getSize();", "-    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "-      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "-      noneYet = doc.isUntitled();", "-    }", "-    ", "-    // If there are no saved files, ignore the javadoc command.", "-    if (noneYet) {", "-      return;", "-    }", "-    ", "-    int returnVal;", "-    Configuration config = DrJava.getConfig();", "-    File destDir = config.getSetting(OptionConstants.JAVADOC_DESTINATION);", "-    boolean ask = config.getSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION).booleanValue();", "-    ", "-    // Get the destination directory via the DirectorySelector, if appropriate.", "-    try {", "-      // If we no destination is set, or the user has asked for prompts,", "-      // ask the user for a destination directory.", "-      if (destDir.equals(FileOption.NULL_FILE) || ask) {", "-        if (!destDir.equals(FileOption.NULL_FILE)) {", "-          destDir = select.getDirectory(destDir);", "-        }", "-        else {", "-          destDir = select.getDirectory(null);", "-        }", "-      }", "-        ", "-      // Make sure the destination is writable.", "-      while (!destDir.exists() || !destDir.canWrite()) {", "-        // If the choice was rejected, tell the user and ask again.", "-        select.warnUser(\"The destination directory you have chosen\\n\"", "-                          + \"does not exist or is not readable. Please\\n\"", "-                          + \"choose another directory.\",", "-                        \"Bad Destination\");", "-        destDir = select.getDirectory(null);", "-      }", "-    }", "-    catch (OperationCanceledException oce) {", "-      // If the user cancels the dialog, silently return.", "-      return;", "-    }", "-    ", "-    // Start a new thread to do the work.", "-    final File destDirF = destDir;", "-    new Thread() {", "-      public void run() {", "-        _javadocWorker(destDirF, saver);", "-      }", "-    }.start();", "-  }", "+  ", "+  public void javadocAll(DirectorySelector select, FileSaveSelector saver,", "+                         List<String> classpath,", "+                         JavadocListener listener)", "+    throws IOException, InvalidPackageException {", "+    _javadocModel.javadocAll(select, saver, classpath, listener);"]}], "num": 4272}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28cfa63d20f5d2056552a14c95f300ee", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0937330d82b2b394143d5c0aaceea408", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "69317eecda3235d4815eb5d9a5b9e536b8481c4a", "commitAfterChange": "3549437d3f0aec05949cb330cf74662cd269bb15", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-      while (trace.indexOf(\"junit.framework.Assert\") != -1 &&", "-             trace.indexOf(\"junit.framework.Assert\") < trace.indexOf(\"(\")) {", "-        /* the format of the trace will have \"at junit.framework.Assert...\"", "-         * on each line until the line of the actual source file.", "-         * if the exception was thrown from the test case (so the test failed", "-         * without going through assert), then the source file will be on", "-         * the first line of the stack trace", "-         */", "-        trace = trace.substring(trace.indexOf('\\n') + 1);", "-      }", "-      trace = trace.substring(trace.indexOf('(')+1);", "-      trace = trace.substring(0, trace.indexOf(')'));", "-      ", "-      // If the exception occurred in a subclass of the test class, then update our", "-      // concept of the class and test name. Otherwise, we're only here to pick up the", "-      // line number.", "-      if (combined.indexOf(className) == -1) {", "-        className = trace.substring(0,trace.lastIndexOf('.'));", "-        classNameAndTest = className + \".\" + testName;", "-      }", "-      ", "-      try {", "-        lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "-      }", "-      catch (NumberFormatException e) { throw new UnexpectedException(e); }", "+      if (trace.trim().length()>0) {", "+        while (trace.indexOf(\"junit.framework.Assert\") != -1 &&", "+               trace.indexOf(\"junit.framework.Assert\") < trace.indexOf(\"(\")) {", "+          /* the format of the trace will have \"at junit.framework.Assert...\"", "+           * on each line until the line of the actual source file.", "+           * if the exception was thrown from the test case (so the test failed", "+           * without going through assert), then the source file will be on", "+           * the first line of the stack trace", "+           */", "+          trace = trace.substring(trace.indexOf('\\n') + 1);", "+        }", "+        trace = trace.substring(trace.indexOf('(')+1);", "+        trace = trace.substring(0, trace.indexOf(')'));", "+        // If the exception occurred in a subclass of the test class, then update our", "+        // concept of the class and test name. Otherwise, we're only here to pick up the", "+        // line number.", "+        if (combined.indexOf(className) == -1) {", "+          int dotPos = trace.lastIndexOf('.');", "+          if (dotPos!=-1) {", "+            className = trace.substring(0,dotPos);", "+            classNameAndTest = className + \".\" + testName;", "+          }", "+        }", "+        ", "+        try {", "+          lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "+        }", "+        catch (NumberFormatException e) { lineNum = 0; } // may be native method", "+      }      ", "-//    for dubugging    ", "+//    for debugging    ", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9581d03b424c0d2f73fef3ee5eb23293", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "3c5a933a3b7bdbbae2845e4b6fe81e012901940b", "commitAfterChange": "98a0206bc90f5eb73be3e2e6e290a67ee1cd136d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-    String className1 = testString.substring(firstIndex, secondIndex);", "-    String className2 = testString.substring(0, firstIndex-1);", "-    if (firstIndex == secondIndex) className = className2;", "-    else className = className1;", "+    if (firstIndex != secondIndex)", "+      className = testString.substring(firstIndex, secondIndex);", "+    else", "+      className = testString.substring(0, firstIndex-1);", "-    /** If the classname is not in the stacktrace, then the test that failed was inherited from a superclass. let's look", "-      * for the classname.", "-      */", "-    if (stackTrace.indexOf(className) == -1) {", "+    /* Check to see if the class and test name appear directly in the stack trace. If", "+     * they don't, then we'll have to do additional work to find the line number. Additionally,", "+     * if the exception occured in a subclass of the test class, we'll need to adjust our conception", "+     * of the class name.", "+     */", "+    int lineNum = -1;", "+    if (stackTrace.indexOf(classNameAndTest) == -1) {", "-      className = trace.substring(0,trace.indexOf(':'));", "-      className = trace.substring(0,trace.lastIndexOf('.'));", "-      classNameAndTest = className + \".\" + testName;", "+      ", "+      // If the exception occurred in a subclass of the test class, then update our", "+      // concept of the class and test name. Otherwise, we're only here to pick up the", "+      // line number.", "+      if (stackTrace.indexOf(className) == -1) {", "+        className = trace.substring(0,trace.lastIndexOf('.'));", "+        classNameAndTest = className + \".\" + testName;", "+      }", "+", "+      try {", "+        lineNum = Integer.parseInt(trace.substring(trace.indexOf(':') + 1)) - 1;", "+      }", "+      catch (NumberFormatException e) { throw new UnexpectedException(e); }", "-    ", "-    ", "-    int lineNum = _lineNumber(stackTrace, classNameAndTest);", "+    if (lineNum < 0) {", "+      lineNum = _lineNumber(stackTrace, classNameAndTest);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0d7ca2a590b14113b48f7c29e2963db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "faafdc2e01d97cbdc44ff87232cdd9b0c82af0fb", "commitAfterChange": "0956148bfc1a4479797fc110624bb0930312ee55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "diff": ["-", "+    ", "+    ", "+    /**", "+     * junit can come back with a string in two different formats:", "+     * so we'll parse both formats, and then decide which one to use", "+     */", "+    ", "+    String className;", "-    String className;", "-    ", "-    int indexOfClass = classNames.indexOf(className);", "-    File file;", "-    if (indexOfClass != -1) {", "-      file = files.get(indexOfClass);", "-    }", "-    else {", "-      file = _jmc.getFileForClassName(className);", "-    }", "-", "-", "+    ", "+    /**", "+     * if the classname is not in the stacktrace, then the test that", "+     * failed was inherited by a superclass. let's look for that classname", "+     */", "+    if(stackTrace.indexOf(className) == -1){", "+      /* get the stack trace of the junit error */", "+      String trace = failure.trace();", "+      /* knock off the first line of the stack trace.", "+       * now the string will look like", "+       * at my.package.class(file.java:line)", "+       * at other.package.class(anotherfile.java:line)", "+       * etc...", "+       */", "+      trace = trace.substring(trace.indexOf('\\n')+1);", "+      while(trace.indexOf(\"junit.framework.Assert\") != -1 &&", "+            trace.indexOf(\"junit.framework.Assert\") < trace.indexOf(\"(\")){", "+        /* the format of the trace will have \"at junit.framework.Assert...\"", "+         * on each line until the line of the actual source file.", "+         * if the exception was thrown from the test case (so the test failed", "+         * without going through assert), then the source file will be on", "+         * the first line of the stack trace", "+         */", "+        trace = trace.substring(trace.indexOf('\\n')+1);", "+      }", "+      trace = trace.substring(trace.indexOf('(')+1);", "+      trace = trace.substring(0, trace.indexOf(')'));", "+      className = trace.substring(0,trace.indexOf(':'));", "+      className = trace.substring(0,trace.lastIndexOf('.'));", "+      classNameAndTest = className + \".\" + testName;", "+    }", "+    ", "+    ", "+    ", "+    ", "+", "+    int indexOfClass = classNames.indexOf(className);", "+    File file;", "+    if (indexOfClass != -1) {", "+      file = files.get(indexOfClass);", "+    }", "+    else {", "+      file = _jmc.getFileForClassName(className);", "+    }", "+    "]}], "num": 12054}
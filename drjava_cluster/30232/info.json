{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85f3153c2d362c04e85689d812cd13eb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cdef5228025cf2e04d2eac0683ff89c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 408, "methodNumberAfterChange": 408, "signatureBeforeChange": "\r \r   public void forMemberType(MemberType that)", "signatureAfterChange": "    public void forMemberType(MemberType that)", "diff": ["-\r", "-  public void forMemberType(MemberType that) {\r", "-    forMemberTypeDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forMemberTypeOnly(that);\r", "-  }\r", "+", "+  public void forMemberType(MemberType that) {", "+    forMemberTypeDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forMemberTypeOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3db456a4923cb99ca08a08d4f57662f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 427, "methodNumberAfterChange": 427, "signatureBeforeChange": "\r \r   public void forOrExpression(OrExpression that)", "signatureAfterChange": "    public void forOrExpression(OrExpression that)", "diff": ["-\r", "-  public void forOrExpression(OrExpression that) {\r", "-    forOrExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forOrExpressionOnly(that);\r", "-  }\r", "+", "+  public void forOrExpression(OrExpression that) {", "+    forOrExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forOrExpressionOnly(that);", "+  }"]}], "num": 30232}
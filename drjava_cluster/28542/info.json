{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3df6e5238f914d49ae831332e65b86e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dea4e77f47b1b57a2238200b86c5ebf0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-   */", "-  public void startInterpreterJVM() {", "-    if (isStartupInProgress() || isInterpreterRunning()) {", "-      return;", "-    }", "-", "-    try {", "-      invokeSlave();", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "-  }", "+   */", "+  public void restartInterpreterJVM() {", "+    synchronized(this) {", "+     if (_startupInProgress) {", "+        return;", "+      }", "+", "+      _startupInProgress = true;", "+", "+      killInterpreter();", "+", "+      String className = InterpreterJVM.class.getName();", "+      String[] args = new String[] { getIdentifier() };", "+      try {", "+        //System.err.println(\"started interpreter jvm\");", "+        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "+        ", "+        // Start a thread to wait for the interpreter to die and to fire", "+        // off a new one (and notify model) when it happens", "+        Thread thread = new Thread() {", "+          public void run() {", "+            try {", "+              int status = _interpreterProcess.waitFor();", "+              restartInterpreterJVM();", "+              _model.replCalledSystemExit(status);", "+            }", "+            catch (InterruptedException ie) {", "+              throw new edu.rice.cs.util.UnexpectedException(ie);", "+            }", "+          }", "+        };", "+", "+        thread.start();", "+      }", "+      catch (IOException ioe) {", "+        _threwException(ioe);", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a79f9c3eeb0eb43a92d35c6bac377a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "12067b12cea198f72f8758eab77d6f544c743a53", "commitAfterChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 345, "signatureBeforeChange": "   private void _setUpToolBar()", "signatureAfterChange": "   private void _setUpToolBar()", "diff": ["+", "+    // DrJava Errors", "+    _toolBar.addSeparator();", "+    final JButton errorsButton = _createToolbarButton(_errorsAction);", "+    errorsButton.setVisible(false);", "+    errorsButton.setBackground(DrJava.getConfig().getSetting(DRJAVA_ERRORS_BUTTON_COLOR));", "+    DrJavaErrorHandler.setButton(errorsButton);", "+    _toolBar.add(errorsButton);", "+    /** The OptionListener for DRJAVA_ERRORS_BUTTON_COLOR. */", "+    OptionListener<Color> errBtnColorOptionListener = new OptionListener<Color>() {", "+      public void optionChanged(OptionEvent<Color> oce) {", "+        errorsButton.setBackground(oce.value);", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(DRJAVA_ERRORS_BUTTON_COLOR, errBtnColorOptionListener);"]}], "num": 28542}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1dcc45523ab9039973779bf87aa37a1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "481911fa0eaa3a9a70729b15682cbb73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic Object visit(ConstructorInvocation node)", "signatureAfterChange": "     public Object visit(ConstructorInvocation node)", "diff": ["+    public Object visit(ConstructorInvocation node) {", "+      Expression exp = node.getExpression();", "+      if (exp == null) {", "+        ClassInfo sc  = classInfo.getSuperclass();", "+        ClassInfo sdc = sc.getDeclaringClass();", "+        ClassInfo dc  = classInfo.getDeclaringClass();", "+        ", "+        if (dc != null && dc.equals(sdc) &&", "+            !Modifier.isStatic(sc.getModifiers())) {", "+          List<IdentifierToken> l = new LinkedList<IdentifierToken>();", "+          l.add(new Identifier(\"param$0\"));", "+          exp = new QualifiedName(l);", "+          node.setExpression(exp);", "+        } else if (sdc != null &&", "+                   sdc.equals(classInfo.getAnonymousDeclaringClass()) &&", "+                   !Modifier.isStatic(sc.getModifiers())) {", "+          List<IdentifierToken> l = new LinkedList<IdentifierToken>();", "+          l.add(new Identifier(\"param$0\"));", "+          exp = new QualifiedName(l);", "+          node.setExpression(exp);", "+        }", "+      }", "+      ", "+      List<Expression> args = node.getArguments();", "+      if (exp != null) {", "+        if (args == null) {", "+          args = new LinkedList<Expression>();", "+          node.setArguments(args);", "+        }", "+        args.add(0, exp);", "+      }", "+      ", "+      if (args != null) {", "+        ListIterator<Expression> it = args.listIterator();", "+        while (it.hasNext()) {", "+          Object o = it.next().acceptVisitor(this);", "+          if (o != null) {", "+            if (o instanceof Expression) {", "+              it.set((Expression)o);", "+            } else {", "+              throw new ExecutionError(\"malformed.argument\", node);", "+            }", "+          }", "+        }", "+        ", "+        ConstructorInfo cons = null;", "+        try {", "+          ClassInfo[] params = null;", "+          it = args.listIterator();", "+          ", "+          int i = 0;", "+          params = new ClassInfo[args.size()];", "+          ", "+          while (it.hasNext()) {", "+            params[i++] = NodeProperties.getClassInfo((Expression)it.next());", "+          }", "+          if (node.isSuper()) {", "+            ClassInfo sc = classInfo.getSuperclass();", "+            cons = ClassInfoUtilities.lookupConstructor(sc, params);", "+            superConstructor = sc.getName();", "+          } else {", "+            cons = ClassInfoUtilities.lookupConstructor(classInfo, params);", "+            superConstructor = classInfo.getName();", "+          }", "+        } catch (NoSuchMethodException e) {", "+          throw new CatchedExceptionError(e, node);", "+        }", "+        ", "+        ClassInfo[] pt = cons.getParameterTypes();", "+        constructorParameters = new String[pt.length];", "+        for (int i = 0; i < pt.length; i++) {", "+          constructorParameters[i] = pt[i].getName();", "+        }", "+      }", "+      ", "+      if (superConstructor == null) {", "+        ClassInfo sc = classInfo.getSuperclass();", "+        superConstructor = sc.getName();", "+      }", "+      return null;", "-\t */", "-\tpublic Object visit(ConstructorInvocation node) {", "-\t    Expression exp = node.getExpression();", "-\t    if (exp == null) {", "-\t\tClassInfo sc  = classInfo.getSuperclass();", "-\t\tClassInfo sdc = sc.getDeclaringClass();", "-\t\tClassInfo dc  = classInfo.getDeclaringClass();", "-", "-\t\tif (dc != null && dc.equals(sdc) &&", "-\t\t    !Modifier.isStatic(sc.getModifiers())) {", "-\t\t    List l = new LinkedList();", "-\t\t    l.add(new Identifier(\"param$0\"));", "-\t\t    exp = new QualifiedName(l);", "-\t\t    node.setExpression(exp);", "-\t\t} else if (sdc != null &&", "-\t\t\t   sdc.equals(classInfo.getAnonymousDeclaringClass()) &&", "-\t\t\t   !Modifier.isStatic(sc.getModifiers())) {", "-\t\t    List l = new LinkedList();", "-\t\t    l.add(new Identifier(\"param$0\"));", "-\t\t    exp = new QualifiedName(l);", "-\t\t    node.setExpression(exp);", "-\t\t}", "-\t    }", "-", "-\t    List args = node.getArguments();", "-\t    if (exp != null) {", "-\t\tif (args == null) {", "-\t\t    args = new LinkedList();", "-\t\t    node.setArguments(args);", "-\t\t}", "-\t\targs.add(0, exp);", "-\t    }", "-", "-\t    if (args != null) {", "-\t\tListIterator it = args.listIterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    Object o = ((Expression)it.next()).acceptVisitor(this);", "-\t\t    if (o != null) {", "-\t\t\tif (o instanceof Expression) {", "-\t\t\t    it.set(o);", "-\t\t\t} else {", "-\t\t\t    throw new ExecutionError(\"malformed.argument\", node);", "-\t\t\t}", "-\t\t    }", "-\t\t}", "-", "-\t\tConstructorInfo cons = null;", "-\t\ttry {", "-\t\t    ClassInfo[] params = null;", "-\t\t    it = args.listIterator();", "-", "-\t\t    int i = 0;", "-\t\t    params = new ClassInfo[args.size()];", "-", "-\t\t    while (it.hasNext()) {", "-\t\t\tparams[i++] = NodeProperties.getClassInfo((Expression)it.next());", "-\t\t    }", "-\t\t    if (node.isSuper()) {", "-\t\t\tClassInfo sc = classInfo.getSuperclass();", "-\t\t\tcons = ClassInfoUtilities.lookupConstructor(sc, params);", "-\t\t\tsuperConstructor = sc.getName();", "-\t\t    } else {", "-\t\t\tcons = ClassInfoUtilities.lookupConstructor(classInfo, params);", "-\t\t\tsuperConstructor = classInfo.getName();", "-\t\t    }", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t    throw new CatchedExceptionError(e, node);", "-\t\t}", "-", "-\t\tClassInfo[] pt = cons.getParameterTypes();", "-\t\tconstructorParameters = new String[pt.length];", "-\t\tfor (int i = 0; i < pt.length; i++) {", "-\t\t    constructorParameters[i] = pt[i].getName();", "-\t\t}", "-\t    }", "-", "-\t    if (superConstructor == null) {", "-\t\tClassInfo sc = classInfo.getSuperclass();", "-\t\tsuperConstructor = sc.getName();", "-\t    }", "-\t    return null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "799acce2f3021f6abc34cb4f7351ddb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/VariableContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public Map getConstants()", "signatureAfterChange": "   public Map<String,Object> getConstants()", "diff": ["+   */", "+  public Map<String,Object> getConstants() {", "+    Map<String,Object> result = new HashMap<String,Object>(11);", "+    for (Link l = scopes; l != null; l = l.next) {", "+      Iterator<String> it = l.cscope.keySet().iterator();", "+      while (it.hasNext()) {", "+        String s = it.next();", "+        result.put(s, l.cscope.get(s));", "+      }", "+    }", "+    return result;", "+  }", "-    public Map getConstants() {", "-\tMap result = new HashMap(11);", "-\tfor (Link l = scopes; l != null; l = l.next) {", "-\t    Iterator it = l.cscope.keySet().iterator();", "-\t    while (it.hasNext()) {", "-\t\tString s = (String)it.next();", "-\t\tresult.put(s, l.cscope.get(s));", "-\t    }", "-\t}", "-\treturn result;"]}], "num": 16422}
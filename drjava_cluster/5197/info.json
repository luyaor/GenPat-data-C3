{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ea6f898fffc3eee47da094979a0c643", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ef0f158f46e1736f4c819f54c4b8d82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["-      \"   (file (name \\\"src/test1.java\\\")(select 32 32)(active)))\";", "-//      \"   (file (name \\\"src/test2.java\\\")(select 32 32)(active)))\";", "+      \"   (file (name \\\"src/test1.java\\\")(select 32 32)(active))\" +", "+      \"   (file (name \\\"src/test2.java\\\")(select 32 32)))\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f1982aaf00423acc4b9b3be6fbc634b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d0727a77251489c271609794ef5d58d9b3aab593", "commitAfterChange": "e782d4da2d7bff038017015047af677bda357a17", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 187, "signatureBeforeChange": "      public void nonTestCase()", "signatureAfterChange": "      public void nonTestCase()", "diff": ["-        \"For information on how to write JUnit TestCases, visit:\\n\\n\" +", "+        \"For information on how to write JUnit TestCases, view the JUnit\\n\" +", "+        \"chapter in the User Documentation or the online Help, or visit:\\n\\n\" +"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc0ed77c7b2abcae8d97d35f4803f53", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "signatureAfterChange": "   public TypeData methodInvocationHelper(MethodInvocation that, TypeData context)", "diff": ["-        _addError(\"Cannot pass a class or interface name as an argument to a method.  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);", "+        _addError(\"Cannot pass a class or interface name as an argument to a method.\" +", "+                  \"  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);"]}], "num": 5197}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bbd4db6319de4c0ee82d57ec5af1024", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47cfd1b6f9039f56589b10f068d998f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 432, "methodNumberAfterChange": 432, "signatureBeforeChange": "\r \r   public void forEqualsExpression(EqualsExpression that)", "signatureAfterChange": "    public void forEqualsExpression(EqualsExpression that)", "diff": ["-\r", "-  public void forEqualsExpression(EqualsExpression that) {\r", "-    forEqualsExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forEqualsExpressionOnly(that);\r", "-  }\r", "+", "+  public void forEqualsExpression(EqualsExpression that) {", "+    forEqualsExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forEqualsExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82dfb52ff113a043e649290e3ef46d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 431, "methodNumberAfterChange": 431, "signatureBeforeChange": "\r \r   public void forBitwiseAndExpression(BitwiseAndExpression that)", "signatureAfterChange": "    public void forBitwiseAndExpression(BitwiseAndExpression that)", "diff": ["-\r", "-  public void forBitwiseAndExpression(BitwiseAndExpression that) {\r", "-    forBitwiseAndExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseAndExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseAndExpression(BitwiseAndExpression that) {", "+    forBitwiseAndExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseAndExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e325a0de59bedfb566256e5dacf36e0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 430, "methodNumberAfterChange": 430, "signatureBeforeChange": "\r \r   public void forBitwiseXorExpression(BitwiseXorExpression that)", "signatureAfterChange": "    public void forBitwiseXorExpression(BitwiseXorExpression that)", "diff": ["-\r", "-  public void forBitwiseXorExpression(BitwiseXorExpression that) {\r", "-    forBitwiseXorExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseXorExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseXorExpression(BitwiseXorExpression that) {", "+    forBitwiseXorExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseXorExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e92da83b32be3570063ef9da5cfd55cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 433, "methodNumberAfterChange": 433, "signatureBeforeChange": "\r \r   public void forNotEqualExpression(NotEqualExpression that)", "signatureAfterChange": "    public void forNotEqualExpression(NotEqualExpression that)", "diff": ["-\r", "-  public void forNotEqualExpression(NotEqualExpression that) {\r", "-    forNotEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forNotEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forNotEqualExpression(NotEqualExpression that) {", "+    forNotEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forNotEqualExpressionOnly(that);", "+  }"]}], "num": 1173}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a7ac594df14144ca20cf3b9146625cc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0b1c37c9a9f523d10fd2c3c3d3093a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 413, "methodNumberAfterChange": 413, "signatureBeforeChange": "\r \r   public void forDefaultCase(DefaultCase that)", "signatureAfterChange": "    public void forDefaultCase(DefaultCase that)", "diff": ["-\r", "-  public void forDefaultCase(DefaultCase that) {\r", "-    forDefaultCaseDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCode().visit(this);\r", "-    forDefaultCaseOnly(that);\r", "-  }\r", "+", "+  public void forDefaultCase(DefaultCase that) {", "+    forDefaultCaseDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCode().visit(this);", "+    forDefaultCaseOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc944a2cc4ddfef50ca1612be778033", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 486, "methodNumberAfterChange": 486, "signatureBeforeChange": "\r \r   public void forClassLiteral(ClassLiteral that)", "signatureAfterChange": "    public void forClassLiteral(ClassLiteral that)", "diff": ["-\r", "-  public void forClassLiteral(ClassLiteral that) {\r", "-    forClassLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    forClassLiteralOnly(that);\r", "-  }\r", "+", "+  public void forClassLiteral(ClassLiteral that) {", "+    forClassLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    forClassLiteralOnly(that);", "+  }"]}], "num": 19808}
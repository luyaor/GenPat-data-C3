{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d20ce6027b60e9056cd444845f0b1aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0320ed9d7ca58e28e1caebdeef8d4572", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "98f0c27d2704f53c27c12dba8736793eeeac44cf", "commitAfterChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void addRegion(final R r)", "signatureAfterChange": "   public void addRegion(final R r)", "diff": ["-            if (!_isChanging) {", "-              // don't add, already there", "-              // just make sure this node is visible", "-              _regTree.scrollPathToVisible(new TreePath(existing));", "-              _lastAdded = existing;", "-              done = true;", "-              break;", "-            }", "+            _changeState.scrollPathToVisible(new TreePath(existing));", "+            _changeState.setLastAdded(existing);", "+            done = true;", "+            break;", "-            if (!_isChanging) {", "-              // Make sure this node is visible", "-              _regTree.scrollPathToVisible(new TreePath(newRegion.getPath()));", "-            }", "-            _lastAdded = newRegion;", "+            // Make sure this node is visible", "+            _changeState.scrollPathToVisible(new TreePath(newRegion.getPath()));", "+            _changeState.setLastAdded(newRegion);", "-        if (!_isChanging) {", "-          // Make sure this node is visible", "-          _regTree.scrollPathToVisible(new TreePath(newRegion.getPath()));", "-        }", "-        _lastAdded = newRegion;", "+        // Make sure this node is visible", "+        _changeState.scrollPathToVisible(new TreePath(newRegion.getPath()));", "+        _changeState.setLastAdded(newRegion);", "-      if (!_isChanging) {", "-        TreePath pathToNewRegion = new TreePath(newRegion.getPath());", "-        _regTree.scrollPathToVisible(pathToNewRegion);", "-      }", "-      _lastAdded = newRegion;", "+      _changeState.scrollPathToVisible(new TreePath(newRegion.getPath()));", "+      _changeState.setLastAdded(newRegion);", "-    if (!_isChanging) updateButtons();", "+    _changeState.updateButtons();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc58c234162f7fe3e16aab3dd20576e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "27c256ec9281e0464172656b15ccb73506c1cbc1", "commitAfterChange": "efe2cdfa860877c37343dbc5d29e380b33344492", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-    ListIterator itor = _registeredCompilers.listIterator();", "+    Iterator<String> itor = _registeredCompilers.listIterator();", "-      String name = (String) itor.next();", "+      String name = itor.next();", "-        CompilerInterface compiler = _instantiateCompiler(name);", "-        if (compiler.isAvailable()) {", "-          //DrJava.consoleOut().println(\"ok.\");", "-", "-          // can't use getActiveCompiler() because it will call back to", "-          // getAvailableCompilers, forming an infinite recursion!!", "-          if (_activeCompiler == NoCompilerAvailable.ONLY) {", "-            //System.err.println(\"\\tset to active.\");", "-            _activeCompiler = compiler;", "-          }", "-", "-          availableCompilers.add(compiler);", "-        }", "-        else {", "-          //DrJava.consoleOut().println(\"not available.\");", "-        }", "+        _createCompiler(name, availableCompilers);", "+    itor = DrJava.getConfig().getSetting(OptionConstants.EXTRA_COMPILERS).iterator();", "+", "+    while (itor.hasNext()) {", "+      String name = itor.next();", "+      try {", "+        _createCompiler(name, availableCompilers);", "+      }", "+      catch (Throwable t) {", "+        // Custom compiler failed to load.  Signal the user?", "+//        System.err.println(\"Unable to load \" + name);", "+      }", "+    }", "+"]}], "num": 6475}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33ba035262583972d049e428b0513de2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f12f620906149dc5259bb81016e7ae0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "signatureAfterChange": "   private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator                                          copyCursor)", "diff": ["-\t */", "-\tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "-\t\t{", "-\t\t\tif ( !copyCursor.atStart()\t&& !copyCursor.atFirstItem())", "-\t\t\t\t{", "-\t\t\t\t\tif (copyCursor.prevItem().getType().equals(\"/\") &&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getState() == ReducedToken.FREE))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"//\");", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// if we're after a star, ", "-\t\t\t\t\telse if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "-\t\t\t\t\t\t\t\t\t && copyCursor.prevItem().getType().equals(\"*\"))", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//here we know the / unites with nothing behind it.", "-\t\t\t_insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "-\t\t\tcopyCursor.prev();", "-\t\t\t_updateBasedOnCurrentState();", "-\t\t\tif (copyCursor.current().getSize() == 2)", "-\t\t\t\t_offset = 1;", "-\t\t\telse", "-\t\t\t\tcopyCursor.next();", "-\t\t}", "+  */", "+  private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "+                                         copyCursor)", "+  {", "+    if (!copyCursor.atStart()  && !copyCursor.atFirstItem()) {", "+      if (copyCursor.prevItem().getType().equals(\"/\") &&", "+          (copyCursor.prevItem().getState() == ReducedToken.FREE))", "+      {", "+        copyCursor.prevItem().setType(\"//\");", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+      // if we're after a star, ", "+      else if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "+               && copyCursor.prevItem().getType().equals(\"*\"))", "+                 ", "+      {", "+        copyCursor.prevItem().setType(\"*/\");", "+        copyCursor.prevItem().setState(ReducedToken.FREE);", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+    }", "+    //here we know the / unites with nothing behind it.", "+    _insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "+    copyCursor.prev();", "+    _updateBasedOnCurrentState();", "+    if (copyCursor.current().getSize() == 2)", "+      _offset = 1;", "+    else {", "+      copyCursor.next();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51a331345d92fab36879ccd1aa2f3efe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "commitAfterChange": "0d5978f95b9d81515ff8908c4d2b74c1df5a1255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "signatureAfterChange": "   private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator                                          copyCursor)", "diff": ["-\t */", "-\tprivate void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t copyCursor)", "-\t\t{", "-\t\t\tif ( !copyCursor.atStart()\t&& !copyCursor.atFirstItem())", "-\t\t\t\t{", "-\t\t\t\t\tif (copyCursor.prevItem().getType().equals(\"/\") &&", "-\t\t\t\t\t\t\t(copyCursor.prevItem().getState() == ReducedToken.FREE))", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"//\");", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t// if we're after a star, ", "-\t\t\t\t\telse if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "-\t\t\t\t\t\t\t\t\t && copyCursor.prevItem().getType().equals(\"*\"))", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t{", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setType(\"*/\");", "-\t\t\t\t\t\t\tcopyCursor.prevItem().setState(ReducedToken.FREE);", "-\t\t\t\t\t\t\t_updateBasedOnCurrentState();", "-\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t//here we know the / unites with nothing behind it.", "-\t\t\t_insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "-\t\t\tcopyCursor.prev();", "-\t\t\t_updateBasedOnCurrentState();", "-\t\t\tif (copyCursor.current().getSize() == 2)", "-\t\t\t\t_offset = 1;", "-\t\t\telse", "-\t\t\t\tcopyCursor.next();", "-\t\t}", "+  */", "+  private void _checkPreviousInsertSlash(ModelList<ReducedToken>.Iterator", "+                                         copyCursor)", "+  {", "+    if (!copyCursor.atStart()  && !copyCursor.atFirstItem()) {", "+      if (copyCursor.prevItem().getType().equals(\"/\") &&", "+          (copyCursor.prevItem().getState() == ReducedToken.FREE))", "+      {", "+        copyCursor.prevItem().setType(\"//\");", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+      // if we're after a star, ", "+      else if ((getStateAtCurrent() == ReducedToken.INSIDE_BLOCK_COMMENT)", "+               && copyCursor.prevItem().getType().equals(\"*\"))", "+                 ", "+      {", "+        copyCursor.prevItem().setType(\"*/\");", "+        copyCursor.prevItem().setState(ReducedToken.FREE);", "+        _updateBasedOnCurrentState();", "+        return;", "+      }", "+    }", "+    //here we know the / unites with nothing behind it.", "+    _insertNewBrace(\"/\",copyCursor); //leaving us after the brace.", "+    copyCursor.prev();", "+    _updateBasedOnCurrentState();", "+    if (copyCursor.current().getSize() == 2)", "+      _offset = 1;", "+    else {", "+      copyCursor.next();", "+    }", "+  }"]}], "num": 12361}
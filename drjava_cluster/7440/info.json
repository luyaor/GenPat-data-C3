{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86cd7a63a52d6551e406bf1eb1762e9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5bf3a17ccdb9d661ee8ca1574d73da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "commitAfterChange": "1210f15594c9808455815ddca20501677d42bd7f", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private void _saveJava()", "signatureAfterChange": "   private void _saveJava()", "diff": ["-    int count = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT) + 1;", "-    ", "-    final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "-    final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "-    final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "-    final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "-    final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "-    ", "-    String name = JOptionPane.showInputDialog(this, \"Name for saved process:\", \"External Java \"+count);", "-    if (name==null) {", "-      // Always apply and save settings", "-      _saveSettings();", "-      this.setVisible(false);", "-      return;", "+    int count = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT);", "+", "+    if (_editMode) {", "+      final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "+      final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "+      final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+      final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "+      ", "+      String name = JOptionPane.showInputDialog(this, \"Name for saved process:\", names.get(_editIndex));", "+      if (name==null) {", "+        // Always apply and save settings", "+        _saveSettings();", "+        this.setVisible(false);", "+        if (_cm!=null) { _cm.set(); }", "+        return;", "+      }", "+      names.set(_editIndex,name);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_NAMES,names);", "+      ", "+      String cmdline = _javaCommandLine.getText();", "+      cmdlines.set(_editIndex,cmdline);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES,cmdlines);", "+      ", "+      String jvm = _jvmLine.getText();", "+      jvmargs.set(_editIndex,jvm);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS,jvmargs);      ", "+      ", "+      String workdir = _javaCommandWorkDirLine.getText();", "+      workdirs.set(_editIndex,workdir);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS,workdirs);", "+    }", "+    else {", "+      ++count;", "+      final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "+      final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "+      final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "+      final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+      final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "+      ", "+      String name = JOptionPane.showInputDialog(this, \"Name for saved process:\", \"External Java \"+count);", "+      if (name==null) {", "+        // Always apply and save settings", "+        _saveSettings();", "+        this.setVisible(false);", "+        if (_cm!=null) { _cm.set(); }", "+        return;", "+      }", "+      ", "+      names.add(name);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_NAMES,names);", "+      ", "+      types.add(\"java\");", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_TYPES,types);", "+      ", "+      String cmdline = _javaCommandLine.getText();", "+      cmdlines.add(cmdline);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES,cmdlines);", "+      ", "+      jvmargs.add(_jvmLine.getText());", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS,jvmargs);", "+      ", "+      String workdir = _javaCommandWorkDirLine.getText();", "+      workdirs.add(workdir);", "+      DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS,workdirs);", "-    names.add(name);", "-    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_NAMES,names);", "-    ", "-    types.add(\"java\");", "-    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_TYPES,types);", "-    ", "-    String cmdline = _javaCommandLine.getText();", "-    cmdlines.add(cmdline);", "-    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES,cmdlines);", "-    ", "-    jvmargs.add(_jvmLine.getText());", "-    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS,jvmargs);", "-    ", "-    String workdir = _javaCommandWorkDirLine.getText();", "-    workdirs.add(workdir);", "-    DrJava.getConfig().setSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS,workdirs);", "-", "+    if (_cm!=null) { _cm.set(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54cb82cc9f774c3157be1c1ecc59def3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "172b2d02551aa349912ace36cce3fe3011ec0453", "commitAfterChange": "b05c72360ee1d1e3de71e0b58a923a7cf06bebf6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    _replaceFindButton = new JButton(_replaceFindAction);", "+    _replaceFindButton = new JButton(_replaceFindNextAction);", "-    _replaceFindAction.setEnabled(false);", "+    _replaceFindNextAction.setEnabled(false);", "-      public void changedUpdate(DocumentEvent e) { updateHelper(); }", "+      public void changedUpdate(DocumentEvent e) { _updateHelper(); }", "-      public void insertUpdate(DocumentEvent e) { updateHelper(); }", "+      public void insertUpdate(DocumentEvent e) { _updateHelper(); }", "-      public void removeUpdate(DocumentEvent e) { updateHelper(); }", "+      public void removeUpdate(DocumentEvent e) { _updateHelper(); }", "-      private void updateHelper() {", "+      private void _updateHelper() {", "+        updateFirstDocumentInSearch();", "-        _replaceFindAction.setEnabled(false);", "+        _replaceFindNextAction.setEnabled(false);", "-    _findField.addFocusListener(_findEnterListener);", "-    _findField.addFocusListener(_findFieldSwitchFocusListener);", "-    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "-          ", "-    /** Listens for the Ctrl key being pressed and adds a listener for the Enter key. When Ctrl is released, the listener is removed. */", "-    _findField.addKeyListener(new KeyListener() {", "-      public void keyPressed(KeyEvent e) {", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "-          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "-      }", "-      public void keyReleased(KeyEvent e) {", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "-      }", "-      public void keyTyped(KeyEvent e) {}", "-    });   ", "+    //Information necessary to change the behavior of the Enter key in the _findField */", "+    final Hashtable<Object, Action> actions = new Hashtable<Object, Action>();", "+    EditorKit ek = _findField.getEditorKit();", "+    Action[] actionsArray = ek.getActions();", "+    ", "+    for (int k = 0; k < actionsArray.length; k++) {", "+      Action a = actionsArray[k];", "+      actions.put(a.getValue(Action.NAME), a);", "+    }", "+    ", "+    Keymap km = _findField.addKeymap(\"Find Field Bindings\",", "+                                         _findField.getKeymap());", "+      ", "+    KeyStroke findKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);", "+    km.addActionForKeyStroke(findKey, _findEnterAction); ", "+    ", "+    KeyStroke switchFocusKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "+    km.addActionForKeyStroke(switchFocusKey, _findFieldSwitchFocusAction); ", "+    ", "+    Action newLineAction = actions.get(DefaultEditorKit.insertBreakAction);", "+    KeyStroke newLineKey = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, Event.CTRL_MASK);", "+    km.addActionForKeyStroke(newLineKey, newLineAction); ", "+    ", "+    Action tabAction = actions.get(DefaultEditorKit.insertTabAction);", "+    KeyStroke tabKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.CTRL_MASK);", "+    km.addActionForKeyStroke(tabKey, tabAction); ", "+    _findField.setKeymap(km);", "+", "+  ", "+    Keymap rkm = _replaceField.addKeymap(\"Replace Field Bindings\",", "+                                         _replaceField.getKeymap());", "+      ", "+    rkm.addActionForKeyStroke(switchFocusKey, _replaceFieldSwitchFocusAction); ", "+    rkm.addActionForKeyStroke(tabKey, tabAction); ", "+    _replaceField.setKeymap(rkm);", "+    ", "+    ", "+//    _findField.addFocusListener(_findEnterListener);", "+//    _findField.addFocusListener(_findFieldSwitchFocusListener);", "+//    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "+//          ", "+//    /** Listens for the Ctrl key being pressed and adds a listener for the Enter key. When Ctrl is released, the listener is removed. */", "+//    _findField.addKeyListener(new KeyListener() {", "+//      public void keyPressed(KeyEvent e) {", "+//        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "+//          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "+//      }", "+//      public void keyReleased(KeyEvent e) {", "+//        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "+//      }", "+//      public void keyTyped(KeyEvent e) {}", "+//    });   "]}], "num": 7440}
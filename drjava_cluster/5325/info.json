{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b1b1d5421df003225a442f21e9a1b3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9bc03ce8a624de1e1f0e036a073e70f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "6d9f2ce37ba22041a5b2840cffbd0f66339165b6", "commitAfterChange": "b153c43e59717c98f32c67f14d61a00a81016991", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": "   final public Expression unaryExpression() throws ParseException", "signatureAfterChange": "   final public Expression unaryExpression() throws ParseException", "diff": ["-    Token      t;", "+    Token      t,tk;", "-      exp = unaryExpression();", "-       {if (true) return new MinusExpression(exp,", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case INTEGER_LITERAL:", "+        tk = jj_consume_token(INTEGER_LITERAL);", "+                                             {if (true) return new IntegerLiteral(\"-\"+tk.image,", "-                                  t.beginLine,      t.beginColumn,", "-                                  exp.getEndLine(), exp.getEndColumn());}", "+                                  t.beginLine, t.beginColumn,", "+                                                           tk.endLine,   tk.endColumn);}", "+        break;", "+      case LONG_LITERAL:", "+        tk = jj_consume_token(LONG_LITERAL);", "+              if(tk.image.endsWith(\"L\")) tk.image=tk.image.substring(0,tk.image.length()-1);", "+              {if (true) return new LongLiteral(\"-\"+tk.image, filename, t.beginLine, t.beginColumn,", "+                                                   tk.endLine,   tk.endColumn);}", "+        break;", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case LESS:", "+      case BANG:", "+      case TILDE:", "+      case INCREMENT:", "+      case DECREMENT:", "+      case PLUS:", "+      case MINUS:", "+        exp = unaryExpression();", "+               {if (true) return new MinusExpression(exp, filename,", "+                                          t.beginLine,      t.beginColumn,", "+                                          exp.getEndLine(), exp.getEndColumn());}", "+        break;", "+      default:", "+        jj_la1[113] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "-      jj_la1[113] = jj_gen;", "+      jj_la1[114] = jj_gen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c34f7b022899c7344d3140bfa3d89a5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 84, "signatureBeforeChange": "   final public ReturnStatement returnStatement() throws ParseException", "signatureAfterChange": "   final public ReturnStatement returnStatement() throws ParseException", "diff": ["-    b = jj_consume_token(RETURN);", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FALSE:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case NEW:", "-    case NULL:", "-    case SHORT:", "-    case SUPER:", "-    case THIS:", "-    case TRUE:", "-    case VOID:", "-    case INTEGER_LITERAL:", "-    case LONG_LITERAL:", "-    case FLOAT_LITERAL:", "-    case DOUBLE_LITERAL:", "-    case CHARACTER_LITERAL:", "-    case STRING_LITERAL:", "-    case IDENTIFIER:", "-    case LPAREN:", "-    case BANG:", "-    case TILDE:", "-    case INCREMENT:", "-    case DECREMENT:", "-    case PLUS:", "-    case MINUS:", "-      exp = expression();", "-      break;", "-    default:", "-      jj_la1[80] = jj_gen;", "-      ;", "+    try {", "+      b = jj_consume_token(RETURN);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FALSE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case NEW:", "+      case NULL:", "+      case SHORT:", "+      case SUPER:", "+      case THIS:", "+      case TRUE:", "+      case VOID:", "+      case INTEGER_LITERAL:", "+      case LONG_LITERAL:", "+      case FLOAT_LITERAL:", "+      case DOUBLE_LITERAL:", "+      case CHARACTER_LITERAL:", "+      case STRING_LITERAL:", "+      case IDENTIFIER:", "+      case LPAREN:", "+      case BANG:", "+      case TILDE:", "+      case INCREMENT:", "+      case DECREMENT:", "+      case PLUS:", "+      case MINUS:", "+        exp = expression();", "+        break;", "+      default:", "+        jj_la1[81] = jj_gen;", "+        ;", "+      }", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ReturnStatement(exp,", "+                                   filename,", "+                                   b.beginLine, b.beginColumn,", "+                                   e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid return statement\");", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ReturnStatement(exp,", "-                                 filename,", "-                                 b.beginLine, b.beginColumn,", "-                                 e.endLine,   e.endColumn);}"]}], "num": 5325}
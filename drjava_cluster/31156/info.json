{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41dff7a96f88ab3daeb38e937d7853a2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69285d485567d6c33bcbdbeff2ffb9b2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName)", "signatureAfterChange": "   private SymbolData _classFile2SymbolData(String qualifiedClassName, String programRoot)", "diff": ["-  private SymbolData _classFile2SymbolData(String qualifiedClassName, String directoryName) {", "+  private SymbolData _classFile2SymbolData(String qualifiedClassName, String programRoot) {", "-      if (stream == null && directoryName != null) {", "-        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(directoryName));", "+      if (stream == null && programRoot != null) {", "+        stream = PathClassLoader.getResourceInPathAsStream(fileName, new File(programRoot));", "-    if (sdLookup == null) {", "+    if (sdLookup == null)  { // create dummy continuation for sd"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "951fa6e750a27259e019e7154ead112e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public String createUniqueName(String varName)", "signatureAfterChange": "   public String createUniqueName(String varName)", "diff": ["-      TypeChecker.getFieldOrVariable(varName, this, getSymbolData(), new NullLiteral(SourceInfo.NO_INFO), getVars(), ", "+      TypeChecker.getFieldOrVariable(varName, this, getSymbolData(), new NullLiteral(SourceInfo.NONE), getVars(), ", "-      vd = TypeChecker.getFieldOrVariable(newName, this, getSymbolData(), new NullLiteral(SourceInfo.NO_INFO), ", "+      vd = TypeChecker.getFieldOrVariable(newName, this, getSymbolData(), new NullLiteral(SourceInfo.NONE), ", "-    if (counter == -1) {throw new RuntimeException(\"Internal Program Error: Unable to rename variable \" + varName", "-                                                     + \".  All possible names were taken.  Please report this bug\");}", "-", "+    if (counter == -1) { throw new RuntimeException(\"Internal Program Error: Unable to rename variable \" + varName", "+                                                      + \".  All possible names were taken.  Please report this bug\");}"]}], "num": 31156}
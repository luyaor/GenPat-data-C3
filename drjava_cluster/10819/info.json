{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f187ea58775757c9f315ed0ffd59ced9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "187512552f8d01752ba575c199e49250", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "commitAfterChange": "bdbf83f4446e0652c53f385c6b6636ed4fa2affd", "methodNumberBeforeChange": 545, "methodNumberAfterChange": 545, "signatureBeforeChange": "   public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ClassType lookupStaticClass(Type t, final String name, final Iterable<? extends Type> typeArgs)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public Boolean value(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              if (includePrivate) { return c.isStatic(); }", "-              else { return c.isStatic() && !c.accessibility().equals(Access.PRIVATE); }", "+    debug.logStart(new String[]{\"t\", \"name\", \"typeArgs\"}, t, name, typeArgs);", "+    try {", "+      Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "+        public Predicate<DJClass> value(final Boolean includePrivate) {", "+          return new Predicate<DJClass>() {", "+            public Boolean value(DJClass c) {", "+              if (c.declaredName().equals(name)) {", "+                if (includePrivate) { return c.isStatic(); }", "+                else { return c.isStatic() && !c.accessibility().equals(Access.PRIVATE); }", "+              }", "+              else { return false; }", "-            else { return false; }", "-          }", "-        };", "-      }", "-    };", "-    return lookupClass(t, makePred, typeArgs, name);", "+          };", "+        }", "+      };", "+      return lookupClass(t, makePred, typeArgs, name);", "+    }", "+    finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab1009cfa6eea133ea4de149f4a2191c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "a0233fef3427e8ddd7241be47fe79cd3cd5d54bc", "commitAfterChange": "bdbf83f4446e0652c53f385c6b6636ed4fa2affd", "methodNumberBeforeChange": 542, "methodNumberAfterChange": 542, "signatureBeforeChange": "     public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "     public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-//    System.out.println(\"\\nLooking up class \" + name + \" in type \" + userRepresentation(t));", "-    Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "-      public Predicate<DJClass> value(final Boolean includePrivate) {", "-        return new Predicate<DJClass>() {", "-          public Boolean value(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "+    debug.logStart(new String[]{\"t\", \"name\", \"typeArgs\"}, t, name, typeArgs);", "+    try {", "+      Lambda<Boolean, Predicate<DJClass>> makePred = new Lambda<Boolean, Predicate<DJClass>>() {", "+        public Predicate<DJClass> value(final Boolean includePrivate) {", "+          return new Predicate<DJClass>() {", "+            public Boolean value(DJClass c) {", "+              if (c.declaredName().equals(name)) {", "+                return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "+              }", "+              else { return false; }", "-            else { return false; }", "-          }", "-        };", "-      }", "-    };", "-    return lookupClass(t, makePred, typeArgs, name);", "+          };", "+        }", "+      };", "+      return lookupClass(t, makePred, typeArgs, name);", "+    }", "+    finally { debug.logEnd(); }"]}], "num": 10819}
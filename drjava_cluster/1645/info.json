{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1fde49fad7df92a4ea0ded5a9119301", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "531f36d913b36d2c03c5657aa6bafc29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public TypeData forClassDef(ClassDef that)", "signatureAfterChange": "   public TypeData forClassDef(ClassDef that)", "diff": ["-      checkAccessibility(that.getSuperclass(), superClass.getMav(), superClass.getName(), superClass, sd, \"class\");", "+      checkAccess(that.getSuperclass(), superClass.getMav(), superClass.getName(), superClass, sd, \"class\");", "-        _addError(superClass.getName() + \" is an interface and thus cannot appear after the keyword 'extends' here.  Perhaps you meant to say 'implements'?\", that);", "+        _addError(superClass.getName() + \" is an interface and thus cannot appear after the keyword 'extends' here.  \"", "+                    + \"Perhaps you meant to say 'implements'?\", that);", "-    final TypeData mav_result = that.getMav().visit(this);", "-    final TypeData name_result = that.getName().visit(this);", "-    final TypeData[] typeParameters_result = makeArrayOfRetType(that.getTypeParameters().length);", "+    final TypeData mavRes = that.getMav().visit(this);", "+    final TypeData nameRes = that.getName().visit(this);", "+    final TypeData[] typeParamRes = makeArrayOfRetType(that.getTypeParameters().length);", "-      typeParameters_result[i] = that.getTypeParameters()[i].visit(this);", "+      typeParamRes[i] = that.getTypeParameters()[i].visit(this);", "-    final TypeData superclass_result = that.getSuperclass().visit(this);", "-    final SymbolData[] interfaces_result = new SymbolData[that.getInterfaces().length];", "+    final TypeData superClassRes = that.getSuperclass().visit(this);", "+    final SymbolData[] interfacesRes = new SymbolData[that.getInterfaces().length];", "-      interfaces_result[i] = getSymbolData(that.getInterfaces()[i].getName(), that.getInterfaces()[i], true, true);", "-      if (interfaces_result[i] != null) {", "+      interfacesRes[i] = getSymbolData(that.getInterfaces()[i].getName(), that.getInterfaces()[i], true, true);", "+      if (interfacesRes[i] != null) {", "-        checkAccessibility(that.getInterfaces()[i], interfaces_result[i].getMav(), interfaces_result[i].getName(), interfaces_result[i], sd, \"interface\");", "+        checkAccess(that.getInterfaces()[i], interfacesRes[i].getMav(), interfacesRes[i].getName(), interfacesRes[i], sd, ", "+                    \"interface\");", "-        if (!interfaces_result[i].isInterface()) {", "-          _addError(interfaces_result[i].getName() + \" is not an interface and thus cannot appear after the keyword 'implements' here.  Perhaps you meant to say 'extends'?\", that);", "+        if (!interfacesRes[i].isInterface()) {", "+          _addError(interfacesRes[i].getName() + ", "+                    \" is not an interface and thus cannot appear after the keyword 'implements' here.  \" +", "+                    \"Perhaps you meant to say 'extends'?\", that);", "-        throw new RuntimeException(\"Internal Program Error: getSymbolData( \" + that.getInterfaces()[i].getName() + \") returned null.  Please report this bug.\");", "+        throw new RuntimeException(\"Internal Program Error: getSymbolData( \" + that.getInterfaces()[i].getName() + ", "+                                   \") returned null.  Please report this bug.\");", "-    SymbolData testSd = getSymbolData(\"junit.framework.TestCase\", new NullLiteral(SourceInfo.NO_INFO), false, true);", "+    SymbolData testSd = getSymbolData(\"junit.framework.TestCase\", NULL_LITERAL, false, true);", "-        if (myMd.getName().startsWith(\"test\") && (myMd.getReturnType() == SymbolData.VOID_TYPE) && myMd.hasModifier(\"public\")) {", "+        if (myMd.getName().startsWith(\"test\") && (myMd.getReturnType() == SymbolData.VOID_TYPE) && ", "+            myMd.hasModifier(\"public\")) {", "-    final TypeData body_result = that.getBody().visit(cbtc);", "+    final TypeData bodyRes = that.getBody().visit(cbtc);", "-    return forClassDefOnly(that, mav_result, name_result, typeParameters_result, superclass_result, interfaces_result, body_result);", "+    return forClassDefOnly(that, mavRes, nameRes, typeParamRes, superClassRes, interfacesRes, bodyRes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d401cfc8598646c215cbff9558a33e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public TypeData forInterfaceDef(InterfaceDef that)", "signatureAfterChange": "   public TypeData forInterfaceDef(InterfaceDef that)", "diff": ["-    final TypeData mav_result = that.getMav().visit(this);", "-    final TypeData name_result = that.getName().visit(this);", "-    final TypeData[] typeParameters_result = makeArrayOfRetType(that.getTypeParameters().length);", "+    final TypeData mavRes = that.getMav().visit(this);", "+    final TypeData nameRes = that.getName().visit(this);", "+    final TypeData[] typeParamRes = makeArrayOfRetType(that.getTypeParameters().length);", "-      typeParameters_result[i] = that.getTypeParameters()[i].visit(this);", "+      typeParamRes[i] = that.getTypeParameters()[i].visit(this);", "-    final SymbolData[] interfaces_result = new SymbolData[that.getInterfaces().length];", "+    final SymbolData[] interfacesRes = new SymbolData[that.getInterfaces().length];", "-      //superinterfaces_result[i] = that.getInterfaces()[i].visit(this);", "-      interfaces_result[i]=getSymbolData(that.getInterfaces()[i].getName(), that.getInterfaces()[i], true, true);", "-      if (interfaces_result[i] != null) {", "+      //superinterfacesRes[i] = that.getInterfaces()[i].visit(this);", "+      interfacesRes[i]=getSymbolData(that.getInterfaces()[i].getName(), that.getInterfaces()[i], true, true);", "+      if (interfacesRes[i] != null) {", "-        checkAccessibility(that.getInterfaces()[i], interfaces_result[i].getMav(), interfaces_result[i].getName(), interfaces_result[i], sd, \"interface\");", "-        if (!interfaces_result[i].isInterface()) {", "-          _addError(interfaces_result[i].getName() + \" is not an interface and thus cannot appear after the keyword 'extends' here\", that);", "+        checkAccess(that.getInterfaces()[i], interfacesRes[i].getMav(), interfacesRes[i].getName(), interfacesRes[i], sd, ", "+                    \"interface\");", "+        if (!interfacesRes[i].isInterface()) {", "+          _addError(interfacesRes[i].getName() + ", "+                    \" is not an interface and thus cannot appear after the keyword 'extends' here\", ", "+                    that);", "-        throw new RuntimeException(\"Internal Program Error: getSymbolData( \" + that.getInterfaces()[i].getName() + \") returned null.  Please report this bug.\");", "+        throw new RuntimeException(\"Internal Program Error: getSymbolData( \" + that.getInterfaces()[i].getName() + ", "+                                   \") returned null.  Please report this bug.\");", "-    final TypeData body_result = that.getBody().visit(new InterfaceBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-    return forInterfaceDefOnly(that, mav_result, name_result, typeParameters_result, interfaces_result, body_result);", "+    InterfaceBodyTypeChecker ibtc = ", "+      new InterfaceBodyTypeChecker(sd, _file, _package, _importedFiles, _importedPackages, ", "+                                   new LinkedList<VariableData>(), new LinkedList<Pair<SymbolData, JExpression>>());", "+    final TypeData bodyRes = that.getBody().visit(ibtc);", "+    return forInterfaceDefOnly(that, mavRes, nameRes, typeParamRes, interfacesRes, bodyRes);"]}], "num": 1645}
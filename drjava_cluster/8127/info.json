{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1d182c332eba358ce663ed1546ef655", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28f62570e24af66a09eb8e231f4b018d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 376, "signatureBeforeChange": "          public void fileSaved(OpenDefinitionsDocument doc)", "signatureAfterChange": "          public void fileSaved(final OpenDefinitionsDocument doc)", "diff": ["-    public void fileSaved(OpenDefinitionsDocument doc) {", "+    public void fileSaved(final OpenDefinitionsDocument doc) {", "-      doc.documentSaved();  // used to update the document cache", "-      _saveAction.setEnabled(false);", "-      _revertAction.setEnabled(true);", "-      updateFileTitle();", "-      _currentDefPane.requestFocusInWindow();", "-      try {", "-        File f = doc.getFile();", "-        if (! _model.isProjectFile(f)) _recentFileManager.updateOpenFiles(f);", "-      }", "-      catch (IllegalStateException ise) { throw new UnexpectedException(ise); }", "-      // Impossible because saved => has a file", "-      ", "-      catch (FileMovedException fme) {", "-        File f = fme.getFile();", "-        // Recover, show it in the list anyway", "-        if (! _model.isProjectFile(f)) _recentFileManager.updateOpenFiles(f);", "-      }", "-      // Check class file sync status, in case file was renamed", "-      if (inDebugMode()) _updateDebugStatus();", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          doc.documentSaved();  // used to update the document cache", "+          _saveAction.setEnabled(false);", "+          _revertAction.setEnabled(true);", "+          updateFileTitle();", "+          _currentDefPane.requestFocusInWindow();", "+          try {", "+            File f = doc.getFile();", "+            if (! _model.isProjectFile(f)) _recentFileManager.updateOpenFiles(f);", "+          }", "+          catch (IllegalStateException ise) { throw new UnexpectedException(ise); }", "+          // Impossible because saved => has a file", "+          ", "+          catch (FileMovedException fme) {", "+            File f = fme.getFile();", "+            // Recover, show it in the list anyway", "+            if (! _model.isProjectFile(f)) _recentFileManager.updateOpenFiles(f);", "+          }", "+          // Check class file sync status, in case file was renamed", "+          if (inDebugMode()) _updateDebugStatus();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b3704059dea24dfb6612e02db164d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-  public void updateHighlight(int curPos) {", "+  public void updateHighlight(final int curPos) {", "-", "-    ErrorPanel panel = _frame.getSelectedErrorPanel();", "-    if (panel == null) {", "-      // no error panel is currently selected", "-      return;", "-    }", "-    CompilerErrorModel model =  panel.getErrorModel();", "-    ", "-    if (!model.hasErrorsWithPositions(_openDoc)) return;", "-    ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-", "-    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-", "-    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-    // if no error is on this line, select the (none) item", "-    if (error == null) errorListPane.selectNothing();", "-    else {      ", "-      if (errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(model.getPosition(error));", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      ErrorPanel panel = _frame.getSelectedErrorPanel();", "+      if (panel == null) {", "+        // no error panel is currently selected", "+        return;", "-       ", "-      // Select item wants the CompilerError", "-      errorListPane.selectItem(error);", "+      CompilerErrorModel model =  panel.getErrorModel();", "+      ", "+      if (!model.hasErrorsWithPositions(_openDoc)) return;", "+      ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+      ", "+      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+      ", "+      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+      // if no error is on this line, select the (none) item", "+      if (error == null) errorListPane.selectNothing();", "+      else {      ", "+        if (errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(model.getPosition(error));", "+        }", "+        ", "+        // Select item wants the CompilerError", "+        errorListPane.selectItem(error);", "+      }", "+    });"]}], "num": 8127}
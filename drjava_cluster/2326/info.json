{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9b204e8c2a4e8226e8c1ff78e27a850", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc5a363ca7036e93c065da4149fb507", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/ComposedRelation.java", "commitBeforeChange": "811484bb0f3e9c6a234bb593ba7247f59304a444", "commitAfterChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "            protected boolean containsObjects(Object first, Object second)", "signatureAfterChange": "      public boolean contains(Object o)", "diff": ["-        ", "-  protected boolean containsObjects(Object first, Object second) {", "-    Option<T1> cast = CollectUtil.castIfContains(_firstSet, first);", "-    if (cast.isSome()) { return matchFirst(cast.unwrap()).contains(second); }", "-    else { return false; }", "-  }", "+  public boolean contains(Object o) {", "+    if (o instanceof Pair<?, ?>) {", "+      Pair<?, ?> p = (Pair<?, ?>) o;", "+      Option<T1> first = CollectUtil.castIfContains(_firstSet, p.first());", "+      return first.isSome() && matchFirst(first.unwrap()).contains(p.second());", "+    }", "+    else { return false; }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "995fafeeb11433b387e6101423db00f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/AbstractRelation.java", "commitBeforeChange": "811484bb0f3e9c6a234bb593ba7247f59304a444", "commitAfterChange": "d3ca8d30db126f3de1352627e18f51d00a1bf339", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public boolean contains(Object o)", "signatureAfterChange": "   public abstract boolean contains(Object obj);", "diff": ["+  public abstract boolean contains(T1 first, T2 second);", "+  public abstract boolean contains(Object obj);", "-  /** Invokes {@link #containsObjects} if the argument is a pair. */", "-  public boolean contains(Object o) {", "-    if (o instanceof Pair<?, ?>) {", "-      Pair<?, ?> p = (Pair<?, ?>) o;", "-      return containsObjects(p.first(), p.second());", "-    }", "-    else { return false; }", "-  }"]}], "num": 2326}
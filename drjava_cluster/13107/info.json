{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e43bcf9fa783b20fe0733bf07a73011", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98a42a0c7f308b08afeb8e77674d2955", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 110, "signatureBeforeChange": "   private void _javadocAll()", "signatureAfterChange": "   private void _javadocAll()", "diff": ["+    // This should really be in DefaultGlobalModel.", "+    ", "+    // Make sure that there is at least one saved document.", "+    ListModel docs = _model.getDefinitionsDocuments();", "+    ", "+    boolean noneYet = true;", "+    int numDocs = docs.getSize();", "+    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "+      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "+      noneYet = doc.isUntitled();", "+    }", "+    ", "+    // If there are no saved files, ignore the javadoc command.", "+    if (noneYet) {", "+      return;", "+    }", "-      _model.javadocAll(destDir.getAbsolutePath());", "+      final File destDirF = destDir;", "+      final SwingWorker worker = new SwingWorker() {", "+        public Object construct() {", "+          try {", "+            boolean success = _model.javadocAll(destDirF.getAbsolutePath());", "-      // Display the results.", "-      _javadocFrame = new JavadocFrame(destDir);", "-      _javadocFrame.show();", "-    }", "-    catch (IOException ioe) {", "-      _showIOError(ioe);", "+            // Display the results.", "+//             System.out.println(\"did we get this far?\");", "+            if (success) {", "+              _javadocFrame = new JavadocFrame(destDirF);", "+              _javadocFrame.show();", "+            }", "+          }", "+          catch (InvalidPackageException ipe) {", "+            _showError(ipe, \"Javadoc Error\",", "+                       \"Javadoc encountered an invalid package name.\");", "+          }", "+//           catch (JavadocException jde) {", "+//             _showError(jde, \"JavaDoc Error\",", "+//                        \"There was an error generating the javadoc.\");", "+//           }", "+          catch (MalformedURLException me) {", "+            throw new UnexpectedException(me);", "+          }", "+          catch (IOException ioe) {", "+            _showIOError(ioe);", "+          }", "+          return \"XXX: Unused return value!\";", "+        }", "+      };", "+      worker.start();", "-    }", "-    catch (InvalidPackageException ipe) {", "-      _showError(ipe, \"JavaDoc Error\",", "-                 \"JavaDoc encountered an invalid package name.\");", "-    }", "-    catch (JavadocException jde) {", "-      _showError(jde, \"JavaDoc Error\",", "-                 \"There was an error generating the javadoc.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e965806bc2a9e8dddc11553cb2ca2e62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/error/ThrownException.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ThrownException(Throwable e, Node n)", "signatureAfterChange": "   public ThrownException(Throwable e, StackTraceElement[] filteredElements)", "diff": ["+   */", "+  public ThrownException(Throwable e, StackTraceElement[] filteredElements) {", "+    super(\"uncaught.exception\");", "+    StackTraceElement[] original = e.getStackTrace();", "+    int startMatch = original.length - filteredElements.length;", "+    boolean matches = startMatch >= 0;", "+    for (int i = 0; matches && i < filteredElements.length; i++) {", "+      matches &= original[startMatch+i].equals(filteredElements[i]);", "+    }", "+    if (matches) {", "+      StackTraceElement[] newStackTrace = new StackTraceElement[startMatch];", "+      for (int i = 0; i < startMatch; i++) { newStackTrace[i] = original[i]; }", "+      e.setStackTrace(newStackTrace);", "+    }", "+    thrown = e;    ", "+  }"]}], "num": 13107}
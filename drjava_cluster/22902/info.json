{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50dd8f732b29d3aef45f954fb03aee36", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c04835f8ac884b1f198e94b329230dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "9c56cd9d9775329b3a5e6a7701ab0c05369850af", "commitAfterChange": "a7a439f9a53360ece86e113cdb8203e5c8b2acda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "diff": ["-      if (compilerErrorsArray.length == 0) {", "+      if (compilerErrorsArray.length == 0)", "-      }", "-//      Iterator<File> iter = filesToRestore.iterator();", "-//      while (iter.hasNext()) {", "-//        _getter.getDocumentForFile(iter.next()).revertFile();", "-//      }", "+", "-      // Restore the files that were moved.", "-//      Iterator<File> iter = filesToRestore.iterator();", "-//      while (iter.hasNext()) {", "-//        File f = iter.next();", "-//        File sourceFile = new File(f.getAbsolutePath() + \".beginner\");", "-//        // Windows needs this since otherwise rename won't work.", "-//        if (f.exists()) {", "-//          f.delete();", "-//        }", "-//        sourceFile.renameTo(f);", "-//      }", "-    else {", "-      _distributeErrors(new CompilerError[0]);", "-    }", "+    else _distributeErrors(new CompilerError[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4d159fcd5942713455248a978dec96b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModel.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JUnitErrorModel(DefinitionsDocument doc, String theclass, TestResult result)", "signatureAfterChange": "   public JUnitErrorModel(DefinitionsDocument doc, JUnitError[] errors)", "diff": ["-  public JUnitErrorModel(DefinitionsDocument doc, String theclass, TestResult result) {", "+  public JUnitErrorModel(DefinitionsDocument doc, JUnitError[] errors) {", "-        ", "-    JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "-     ", "-    Enumeration failures = result.failures();", "-    Enumeration errEnum = result.errors(); ", "-    ", "-    int i=0;", "-    ", "-    while ( errEnum.hasMoreElements()) {", "-      TestFailure tErr = (TestFailure) errEnum.nextElement();", "-      errors[i] = _makeJUnitError(tErr, theclass, true);", "-      i++;", "+    _numErrors = errors.length;", "+    try {", "+      _file = doc.getFile();", "-    ", "-    while (failures.hasMoreElements()) {", "-      TestFailure tFail = (TestFailure) failures.nextElement();", "-      errors[i] = _makeJUnitError(tFail, theclass, false);", "-      i++;", "+    catch (FileMovedException fme) {", "+      // Recover, even though file was deleted", "+      _file = fme.getFile();", "-      ", "-    Arrays.sort(errors);", "+    catch (IllegalStateException ise) {", "+      _file = null;", "+    }"]}], "num": 22902}
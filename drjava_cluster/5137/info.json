{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1e0d64da2f78880efa28da4f72534d1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "772e12d863555382abb54b995c6cab18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "commitAfterChange": "77b08b2c2aecee48e010895d99d03539a1aa19da", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["+        if (filesNotToCheck.contains(f)) continue;  // Detects equal files; earlier code versions claimed it failed", "+        // Check for a null file", "-        if (firstLine == null) continue;", "+        if (firstLine == null) continue;", "-        /* If the file has the correct suffix, then parse it. Ignore files in filesNotToCheck.  contains on ", "-         * filesNotToCheck failed to return desired result. So it is done manually, matching AbsolutePath. */", "-//        boolean foundFile = false;", "-        ", "-        for (File fntc: files) {", "-          if (fntc.getAbsolutePath().equals(f.getAbsolutePath())) {", "-//            foundFile = true;", "-            break;", "-          }", "-        }", "-        ", "-        if (_isLanguageLevelFile(f) /* && ! foundFile*/) {", "+        if (_isLanguageLevelFile(f)) {", "-//          File f = files[ind];", "-          //Now create a LanguageLevelVisitor to do the first pass over the file.", "+          // Now create a LanguageLevelVisitor to do the first pass over the file."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d26a17716150cbe1dbaf14488cfaff5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "0cebd33ffc4efb04a90ac7209a66283fdb9087b2", "commitAfterChange": "9fab12d2706a8bcd0fd56dcb5611b998d9aa0c25", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    // Overrides the default behavior for the Enter key. Replaces it with behavior that executes _doFind  ", "-    KeyStroke returnKS = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);", "-    _findField.getKeymap().addActionForKeyStroke(returnKS, _findEnterAction);", "-    ", "-//    _findField.addKeyListener(_findEnterListener);", "+    _findField.addFocusListener(_findEnterListener);", "+      ", "-//          if (_findField.getKeyListeners().length <= 1 )", "+          if (_findField.getKeyListeners().length <= 1 )"]}], "num": 5137}
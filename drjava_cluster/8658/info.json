{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae82e0bd0a664ddb4e905365f9abf20e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363ab9d47ca7db605a9f3c865037768c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "c5840283da06690e8676e5b395b239a18a3908bb", "commitAfterChange": "b126c48fb6e642ca409d0fdb5b704f90178a8277", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void _setupPanel(JPanel panel)", "signatureAfterChange": "      private void _setupPanel(JPanel panel)", "diff": ["+    label.setToolTipText(\"<html>The directory the class files will be compiled into.<br>\"+", "+                         \"If not specified, the class files will be compiled into<br>\"+", "+                         \"the same directory as their corresponding source files</html>\");", "-    JLabel classLabel = new JLabel(\"Main File\");", "+    JLabel classLabel = new JLabel(\"Main Document\");", "+    classLabel.setToolTipText(\"<html>The project document containing the<br>\" + ", "+                              \"<code>main</code>method for the entire project</html>\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769d352c03d76cf0fbb0cc283a2057ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public void registerSlave(SlaveRemote slave) throws RemoteException", "signatureAfterChange": "   public void registerSlave(SlaveRemote slave) throws RemoteException", "diff": ["-", "+  /* Records the identity and status of the Slave JVM in the Master JVM */", "+    _log.log(this + \" registering Slave \" + slave);", "+      ", "+      _log.log(this + \" calling handleSlaveConnected()\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3e3297cf22068ed2304ba8e0aa555ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected final void quitSlave() throws RemoteException", "diff": ["-//    Utilities.showDebug(\"quitSlave() called\");", "+    _log.log(this + \".quitSlave() called\");", "-        // There is a slave to be quit, but we don't have a handle to it yet.", "-        // Instead we set this flag, which makes it quit immediately after it", "-        // registers in registerSlave.", "+        /* There is a slave to be quit, but we don't have a handle to it yet. Instead we set this flag, which makes it", "+         * quit immediately after it registers in registerSlave. */", "-      else if (_slave == null)  System.out.println(\"slave JVM quit invoked when no slave running\");", "+      else if (_slave == null)  {", "+        System.out.println(\"Slave JVM quit operation invoked when no slave running\");", "+        _log.log(this + \" called quitSlave() when no slave was running\");", "-      else _slave.quit();", "+      }", "+      else {", "+        _slave.quit();", "+        _slave = null;  // Remove reference to Slave JVM", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9576248be14f06b1a1b331dc484d0e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public Void forClassDef(ClassDef that)", "signatureAfterChange": "   public Void forClassDef(ClassDef that)", "diff": ["-   */", "+    */", "+    _log.log(\"Adding SymbolData for \" + className);", "-//    that.getSuperclass().visit(this);", "+    that.getSuperclass().visit(this);"]}], "num": 8658}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a906f7485e9b324a5b306792f6415ab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "421167548ff4151f08c4bbdc3dc10816", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "dd72f67461864b97e464288dafd6cb377dd46f55", "commitAfterChange": "fdc23704deabba8ec8b893b7de86106c59827e63", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public List<IdentifierToken> getQualifiedName(String methodName, Class[] args)      throws NoSuchMethodException", "signatureAfterChange": "   public String getQualifiedName(String methodName, Class[] args)      throws NoSuchMethodException", "diff": ["-  public List<IdentifierToken> getQualifiedName(String methodName, Class[] args) ", "+  public String getQualifiedName(String methodName, Class[] args) ", "-    String toParse = m.getDeclaringClass().getName();", "-    if(toParse.startsWith(\"class \"))", "-      toParse = toParse.substring(6,toParse.length());", "-    int i;", "-    while((i=toParse.lastIndexOf(\".\")) != -1) {", "-      toReturn.add(0, new Identifier(toParse.substring(i+1,toParse.length())));", "-      toParse = toParse.substring(0,i);", "-    }", "-    toReturn.add(0, new Identifier(toParse));", "-    return toReturn;", "+    return m.getDeclaringClass().getName();", "+//    String toParse = m.getDeclaringClass().getName();", "+//    if(toParse.startsWith(\"class \"))", "+//      toParse = toParse.substring(6,toParse.length());", "+//    int i;", "+//    while((i=toParse.lastIndexOf(\".\")) != -1) {", "+//      toReturn.add(0, new Identifier(toParse.substring(i+1,toParse.length())));", "+//      toParse = toParse.substring(0,i);", "+//    }", "+//    toReturn.add(0, new Identifier(toParse));", "+//    return toReturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "554e4d01b3f4e1d6a5e56b94ca3216fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "0bbc4205cb6cdac938c33646446cffe67a254d86", "commitAfterChange": "32c1a96bda59745efd4d13dbac97b7a11f8d7d24", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["+         ", "-          CompoundUndoManager undoMan = _doc.getUndoManager();", "-          int key = undoMan.startCompoundEdit();", "+             CompoundUndoManager undoMan = _doc.getUndoManager();", "+          //int key = undoMan.startCompoundEdit();", "-          undoMan.endCompoundEdit(key);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          endCompoundEdit();", "+//          undoMan.endCompoundEdit(key); //commented out because of frenchkeyboard fix", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0) || ((e.getModifiers() & InputEvent.ALT_MASK) != 0))", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "+          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "-            //          System.out.println(\"not supering 1 \" + isAltF4);", "+            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "-          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "-            int _keyval = (int) e.getKeyChar();", "-            if (_keyval >= 32 && _keyval <= 126) {", "-              CompoundUndoManager undoMan = _doc.getUndoManager();", "-              if (!_inCompoundEdit) {", "-                _inCompoundEdit = true;", "-                _compoundEditKey = undoMan.startCompoundEdit();", "-                getUndoAction().updateUndoState();", "-                getRedoAction().updateRedoState();", "-                //super.processKeyEvent(e);", "-              }", "+// Following IF block is commented out in regards to French Keyboard Fix", "+          //          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "+//            int _keyval = (int) e.getKeyChar();", "+//            if (_keyval >= 32 && _keyval <= 126) {", "+//              CompoundUndoManager undoMan = _doc.getUndoManager();", "+//              if (!_inCompoundEdit) {", "+//                _inCompoundEdit = true;", "+//                _compoundEditKey = undoMan.startCompoundEdit();", "+//                getUndoAction().updateUndoState();", "+//                getRedoAction().updateRedoState();", "+//                //super.processKeyEvent(e);", "+//              }", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87039f36e28cce4602b6c1848c3fdf29", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "b578b7b4c7a4a91c29761e9d3bf28b378645bfda", "commitAfterChange": "7d20b14faca1d500f599ed54f40d60f42cf8097e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public DocFile forCons(Cons c)", "signatureAfterChange": "          public DocFile forCons(Cons c)", "diff": ["-      String name = c.getFirst().accept(_nameVisitor); ", "+      String name = c.getFirst().accept(NameVisitor.ONLY); ", "-        fname = parseFileName(c.getFirst());", "+        fname = ProjectFileParser.ONLY.parseFileName(c.getFirst());", "-        select = parseIntPair(c.getFirst());", "+        select = ProjectFileParser.ONLY.parseIntPair(c.getFirst());", "-        scroll = parseIntPair(c.getFirst());", "+        scroll = ProjectFileParser.ONLY.parseIntPair(c.getFirst());", "-        pack = parseStringNode(c.getFirst());", "+        pack = ProjectFileParser.ONLY.parseStringNode(c.getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8f04c86a3df59e6021635e3557f7dcc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "fca5fcebd9a0a23f563d800e635b0c2ebad1969e", "commitAfterChange": "04d5f67f3ab0801dcf0753d1c84455182368f783", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 276, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "diff": ["-      path = path.substring(0, path.lastIndexOf(File.separator));", "-      String _topLevelPath;", "-      if(getProjectFile() != null){", "-        _topLevelPath = getProjectFile().getCanonicalPath();", "-        _topLevelPath = _topLevelPath.substring(0, _topLevelPath.lastIndexOf(File.separator));;", "-      }else{", "-        _topLevelPath = \"\";", "-      }", "-      if (!path.equals(_topLevelPath) && !path.startsWith(_topLevelPath + File.separator) ){", "-        /** it's in external files, so don't give it a path */", "-        _documentNavigator.addDocument(idoc, \"\");", "-      }else{", "-        path = path.substring(_topLevelPath.length());", "-        _documentNavigator.addDocument(idoc, path);", "-      }", "+      _documentNavigator.addDocument(idoc, fixPathForNavigator(path));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca6fcc85023c666978959fb88cf37963", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "   protected boolean _busy()", "diff": ["-  class CaretUpdateListener implements DocumentListener {", "-    public void insertUpdate(DocumentEvent e) {", "-      int caretPos = _pane.getCaretPosition();", "-      int promptPos = _doc.getPromptPos();", "-      int length = _doc.getDocLength();", "-      ", "-      // Figure out where the prompt was before the update", "-      int prevPromptPos = promptPos;", "-      if (e.getOffset() < promptPos) {", "-        // Insert happened before prompt,", "-        //  so previous position was further back", "-        prevPromptPos = promptPos - e.getLength();", "-      }", "-      if (_doc.inProgress()) {", "-        // Scroll to the end of the document, since output has been", "-        // inserted after the prompt.", "-        moveToEnd();", "-      }", "-      // (Be careful not to move caret during a reset, when the", "-      //  prompt pos is temporarily far greater than the length.)", "-      else if (promptPos <= length) {", "-        if (caretPos < prevPromptPos) {", "-          // Caret has fallen behind prompt, so make it catch up so", "-          //  the new input is visible.", "-          moveToPrompt();", "-        }", "-        else {", "-          // Caret was on or after prompt, so move it right by the size", "-          //  of the insert.", "-          int size = promptPos - prevPromptPos;", "-          if (size > 0) {", "-            moveTo(caretPos + size);", "-          }", "-        }", "-      }", "-    }", "+   */", "+  protected boolean _busy() {", "+    // should also check to see if we are resetting the interactions pane", "+    return _doc.inProgress();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e975e0877d6e7a57c8046d83a3947a02", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "29a551202c3bf7e5f026aad6d43ca029448c562d", "commitAfterChange": "eb5a40b971e537c8a9ca6a30686e2583abec6b86", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void insertUpdate(final DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(final DocumentEvent e)", "diff": ["-      // Update caret position when text is inserted in document.  Fixes (?) bug #1571405.", "-          ", "+      /* Update caret position when text is inserted at end of document.  Fixes (?) bug #1571405.  The promptPos is", "+       * before the insertion is made so that this listener will see the udpated position. NOTE: The promptPos is NOT", "+       * a Swing Position; it is an int offset maintianed by ConsoleDocument.", "+       */", "-          int pos;", "-          final int docLen = doc.getLength();", "-          // if document has no prompt, place caret at end", "-          if (! doc.hasPrompt()) pos = docLen;", "-          else {", "-            ", "-            final int caretPos = _pane.getCaretPosition();", "-            final int promptPos = doc.getPromptPos();", "-            final int insertPos = e.getOffset();", "-            final int insertLen = e.getLength();", "-            final int prevPromptPos = (insertPos < promptPos) ? promptPos - insertLen : promptPos;", "-            // Figure out where the prompt was before the insertion", "-", "-          ", "-            if (caretPos < prevPromptPos /* || insertPos < promptPos */) {", "-              // Caret was behind prompt before insertion or insertion preceded the prompt  (why check for former?)", "-              pos = promptPos;  // place caret at prompt", "-            }", "-            else {", "-              // Caret and insertion were on or after prompt", "-              pos = Math.min(caretPos + insertLen, docLen);  // advance cursor by insertion size (but within document)", "-            }", "-          }", "-", "-          final int newPos = pos;  // make a final copy of pos that can appear in a closure", "+          final int newPos = getNewCaretPos(e, doc);", "+          // Update the caret position as part of the insertion if possible (running in event thread)", "-          else EventQueue.invokeLater(new Runnable() { public void run() { ", "-//            System.err.println(\"Deferred setting caretPos to \" + newPos);", "-            _pane.setCaretPos(newPos); ", "-          } });", "-            ", "-//          System.err.println(\"insertUpdate called; caretPos = \" + caretPos + \" docLength = \" + length);", "-          ", "-          /* Old Code: */", "-//      // Queue an asynchronous task in the event thread to update the document pane; Use SwingUtilities to ensure that", "-//      // the caret update is performed after the document update listeners have run.  Fixes (?) bug #1571405.", "-//      SwingUtilities.invokeLater(new Runnable() { ", "-//        public void run() {", "-//          ", "-//          ConsoleDocument doc = getConsoleDoc();", "-//          doc.acquireReadLock(); // Grab read lock because this code is NOT run as part of document listener!", "-//          try {", "-//            int caretPos = _pane.getCaretPosition();", "-//            int promptPos = doc.getPromptPos();", "-//            int len = doc.getLength();", "-//            ", "-////          System.err.println(\"insertUpdate called; caretPos = \" + caretPos + \" docLength = \" + length);", "-//            ", "-//            // Figure out where the prompt was before the update", "-//            int prevPromptPos = promptPos;", "-//            if (e.getOffset() < promptPos) {", "-//              // Insert happened before prompt,", "-//              //  so previous position was further back", "-//              prevPromptPos = promptPos - e.getLength();", "-//            }", "-//            ", "-//            if (! doc.hasPrompt()) {", "-////            System.err.println(\"Scrolling to end of document\");", "-//              // Scroll to the end of the document, since output has been inserted after the prompt.", "-//              moveToEnd();", "-//            }", "-//            // Do not to move caret during a reset, when the prompt pos is temporarily far greater than the length.", "-//            else if (promptPos <= len) {", "-//              if (caretPos < prevPromptPos) {", "-//                // Caret has fallen behind prompt, so make it catch up so", "-//                //  the new input is visible.", "-//                moveToPrompt();", "-//              }", "-//              else {", "-//                // Caret was on or after prompt, so move it right by the size", "-//                //  of the insert.", "-//                int size = promptPos - prevPromptPos;", "-//                if (size > 0) {", "-//                  int newCaretPos = caretPos + size;", "-//                  if (newCaretPos > len) newCaretPos = len;", "-//                  _pane.setCaretPosition(newCaretPos);", "-//                }", "-//              }", "-//            }", "-//          }", "-//          finally { doc.releaseReadLock(); }", "-//        }", "-//      });", "+          // Otherwise update it with a length filter in case the document has been shortedn (as in resetInteractions)", "+          else EventQueue.invokeLater(new Runnable() { public void run() { _pane.setCaretPos(newPos); } });", "+    }"]}], "num": 10599}
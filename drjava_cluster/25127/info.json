{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "587fbdaa4d0b3f5a72e3e2978176e61f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c6ec23df68e36585b87cbb09e0cc62d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "      public void write(OutputStream os) throws IOException", "signatureAfterChange": "      public void write(OutputStream os) throws IOException", "diff": ["+    xc.createNode(\"drjava/project/preferences\");", "+    if (!_storedPreferences.isEmpty()) {", "+      for(Map.Entry<OptionParser,String> e: _storedPreferences.entrySet()) {", "+        Node n = xc.createNode(\"drjava/project/preferences/preference\", null, false);", "+        xc.set(\".name\", TextUtil.xmlEscape(e.getKey().getName()), n, true);", "+        xc.set(\".value\", TextUtil.xmlEscape(e.getValue()), n, true);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b3eb824fae37ae8ad73927cd8b2a85e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 71, "signatureBeforeChange": "          private void compareProperties(Class<?> c, Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "signatureAfterChange": "          private void compareProperties(Class<?> c, Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "diff": ["+      if (leftKeys.contains(\"assertedType\")) {", "+        // asserted on left, checked on right", "+        _log.extraRightCast(c.getName(), (Class<?>) ((Thunk<?>) leftProps.get(\"assertedType\")).value(), left, right);", "+        leftKeys.remove(\"assertedType\");", "+        rightKeys.remove(\"checkedType\");", "+      }", "+      if (rightKeys.contains(\"assertedType\")) {", "+        // asserted on right, checked on left", "+        _log.extraLeftCast(c.getName(), (Class<?>) ((Thunk<?>) rightProps.get(\"assertedType\")).value(), left, right);", "+        leftKeys.remove(\"checkedType\");", "+        rightKeys.remove(\"assertedType\");", "+      }", "-        _log.extraLeftCast(c.getName(), left, right);", "+        // incidental internal conversion", "-        _log.extraRightCast(c.getName(), left, right);", "+        // incidental internal conversion"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "666a02312a13951b097f3f7bf00534e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "408446b2528763b45ba1c173b0d3db2685562747", "commitAfterChange": "bf7190c8946c28e9e6bd599bd6f030a6339f362e", "methodNumberBeforeChange": 266, "methodNumberAfterChange": 266, "signatureBeforeChange": "   private void _setUpContextMenus()", "signatureAfterChange": "   private void _setUpContextMenus()", "diff": ["+    _navPanePopupMenuForRoot = new JPopupMenu();", "+    _navPanePopupMenuForRoot.add(_saveProjectAction);", "+    _navPanePopupMenuForRoot.add(_closeProjectAction);", "+    _navPanePopupMenuForRoot.addSeparator();", "+    _navPanePopupMenuForRoot.add(_compileProjectAction);", "+    _navPanePopupMenuForRoot.add(_runProjectAction);", "+    _navPanePopupMenuForRoot.add(_junitProjectAction);", "+    _navPanePopupMenuForRoot.addSeparator();", "+    _navPanePopupMenuForRoot.add(_projectPropertiesAction);", "+    ", "+    ", "-              // noop", "+              // we're looking at the root of the tree", "+              _navPanePopupMenuForRoot.show(e.getComponent(), e.getX(), e.getY());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c51ac675d183fc898721add7a5f981a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 63, "signatureBeforeChange": "          private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "signatureAfterChange": "          private void compareProperties(Class<?> c, Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "diff": ["-    private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,", "+    private void compareProperties(Class<?> c, Map<?,?> leftProps, SourceInfo.Wrapper left,", "-      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "-        mismatch(\"Extra properties\", leftKeys.toString(), left, rightKeys.toString(), right);", "-      }", "-        compareObjects(\"property \" + k, leftProps.get(k), left, rightProps.get(k), right);", "+        compareObjects(\"property \" + k + \" of \" + c.getName(), leftProps.get(k), left, rightProps.get(k), right);", "+      }", "+      if (leftKeys.contains(\"checkedType\")) {", "+        _log.extraLeftCast(c.getName(), left, right);", "+        leftKeys.remove(\"checkedType\");", "+      }", "+      if (rightKeys.contains(\"checkedType\")) {", "+        _log.extraRightCast(c.getName(), left, right);", "+        rightKeys.remove(\"checkedType\");", "+      }", "+      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "+        _log.mismatch(\"Extra properties\", c.getName(), leftKeys.toString(), left, rightKeys.toString(), right);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b954abe8195668dbd26ca3361375aa34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "0c8d146c06eba1c2298f0daceb39048930ad6325", "commitAfterChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "        public DebugPanel( SingleDisplayModel model, MainFrame frame, DebugManager debugger)", "signatureAfterChange": "    public DebugPanel( SingleDisplayModel model, MainFrame frame, DebugManager debugger)", "diff": ["+    //this.updateData();", "+    _watchpoints = _debugger.getWatchpoints();", "+    _threads = _debugger.getThreads();", "+    _frames = _debugger.getFrames();", "-    //_setupTables();", "+    _setupTabPanes();", "-    _tabsPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,", "+    _tabsPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,", "+    _tabsPane.setDividerSize(SPLIT_DIVIDER_SIZE);", "+    _tabsPane.setOneTouchExpandable(true);", "+    _tabsPane.setDividerLocation((int)(_frame.getWidth()/2.5));", "+    this.add(_tabsPane, BorderLayout.CENTER);", "+    ", "+    _buttonPanel = new JPanel(new BorderLayout());", "+    _setupButtonPanel();", "+    this.add(_buttonPanel, BorderLayout.EAST);    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c58b5111bf4741e151895ae9e54adc7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e577a27aaaf7beb070afa4e673747412befae3d2", "commitAfterChange": "bcc6a748afe3247682d6faf0a42761201a83d56c", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "   private void _reenableScrollBar()", "signatureAfterChange": "   private void _reenableScrollBar()", "diff": ["-    newbar.setEnabled(true);", "-    newbar.setValue(oldbar.getValue());", "-    newbar.setVisibleAmount(oldbar.getVisibleAmount());", "+    newbar.setValue(oldbar.getValue());", "+    newbar.setVisibleAmount(oldbar.getVisibleAmount());", "+    newbar.setEnabled(true);", "-    scroll.revalidate();", "-    //scroll.updateUI();", "-    // This will need to be repeated for a horizontal scrollbar!", "+    // This needs to be repeated for a horizontal scrollbar!", "+    ", "+    oldbar = scroll.getHorizontalScrollBar();", "+    newbar = scroll.createHorizontalScrollBar();", "+    newbar.setMinimum(oldbar.getMinimum());", "+    newbar.setMaximum(oldbar.getMaximum());", "+    newbar.setValue(oldbar.getValue());", "+    newbar.setVisibleAmount(oldbar.getVisibleAmount());", "+    newbar.setEnabled(true);", "+    newbar.revalidate();", "+    scroll.setHorizontalScrollBar(newbar);", "+    scroll.revalidate();    "]}], "num": 25127}
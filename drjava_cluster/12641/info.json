{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "271bb1ffbd0cc0466c53f1a88cb6edec", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ffcb22e38d48016add289ef8b6d29e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testMetaKeyPress() throws BadLocationException", "signatureAfterChange": "   public void testMetaKeyPress() throws BadLocationException", "diff": ["-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    // The following is the sequence of key events that happen when the user presses Meta-a", "-    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-                                             InputEvent.META_MASK, KeyEvent.VK_META, KeyEvent.CHAR_UNDEFINED));", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        // The following is the sequence of key events that happen when the user presses Meta-a", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+                                                 InputEvent.META_MASK, KeyEvent.VK_META, KeyEvent.CHAR_UNDEFINED));", "+      }", "+    });", "+        ", "-    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-                                             InputEvent.META_MASK, KeyEvent.VK_W, KeyEvent.CHAR_UNDEFINED));", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+                                                 InputEvent.META_MASK, KeyEvent.VK_W, KeyEvent.CHAR_UNDEFINED));", "+      }", "+    });", "+    ", "-    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "-                                             InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'w'));", "+        ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "+                                                 InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'w'));", "+        ", "+      }", "+    });", "+    ", "-    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-                                             InputEvent.META_MASK, KeyEvent.VK_W, KeyEvent.CHAR_UNDEFINED));", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+                                                 InputEvent.META_MASK, KeyEvent.VK_W, KeyEvent.CHAR_UNDEFINED));", "+        ", "+      }", "+    });", "+    ", "-    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-                                             0, KeyEvent.VK_META, KeyEvent.CHAR_UNDEFINED));", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+                                                 0, KeyEvent.VK_META, KeyEvent.CHAR_UNDEFINED));", "+      }", "+    });", "+    ", "+    ", "+    _log.log(\"testMetaKeyPress completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a909d47af180cebc4bf0236cbb702d13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void testGranularUndo() throws BadLocationException", "signatureAfterChange": "      public void testGranularUndo() throws BadLocationException", "diff": ["-    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane defPane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = defPane.getOpenDefDocument();", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.processKeyEvent(new KeyEvent(definitions,", "+        defPane.processKeyEvent(new KeyEvent(defPane,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "+        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "-        definitions.setCaretPosition(doc.getLength());", "+        defPane.setCaretPosition(doc.getLength());", "-    final KeyEvent e = new KeyEvent(definitions, KeyEvent.KEY_PRESSED, 0, ks.getModifiers(), ks.getKeyCode(),", "+    final KeyEvent e = new KeyEvent(defPane, KeyEvent.KEY_PRESSED, 0, ks.getModifiers(), ks.getKeyCode(),", "-    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.processKeyEvent(e); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.processKeyEvent(e); } });", "-         definitions.processKeyEvent(new KeyEvent(definitions,", "+         defPane.processKeyEvent(new KeyEvent(defPane,", "-         definitions.processKeyEvent(new KeyEvent(definitions,", "+         defPane.processKeyEvent(new KeyEvent(defPane,", "-         definitions.processKeyEvent(new KeyEvent(definitions,", "+         defPane.processKeyEvent(new KeyEvent(defPane,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc3bb3df5b7385917cd5bb770e1807d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "451a8ef10dd808c32bb1dec2a41dbfe38542794f", "commitAfterChange": "fd372db787cedeccdc43d382b7e2999ff5184943", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "diff": ["-    _doc.append(\"typed text\", InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        ", "+        // Type 'T'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_T, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'T'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_T, UNDEFINED));", "+        ", "+        // Type 'Y'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_Y, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'Y'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_Y, UNDEFINED));", "+        ", "+         // Type 'P'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_P, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'P'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_P, UNDEFINED));", "+        ", "+         // Type 'E'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_E, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'E'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_E, UNDEFINED));", "+        ", "+         // Type 'D'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'D'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+      }", "+    });", "+//    System.err.println(\"Document = '\" + _doc.getText() + \"'\");", "+//    System.err.println(\"docLength = \" +  _doc.getLength() + \" caretPos = \" + _pane.getCaretPosition());", "+    ", "+//    System.err.println(\"Document = '\" + _doc.getText() + \"'\");", "-    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos + 1); } });", "+    _pane.setCaretPosition(newPos + 1);", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        // Type 'D'", "+        _pane.processKeyEvent(new KeyEvent(_pane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+        _pane.processKeyEvent(new KeyEvent(_pane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'D'));", "+        _pane.processKeyEvent(new KeyEvent(_pane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_D, UNDEFINED));", "+      } ", "+    });", "-    _doc.insertText(newPos, \"d\", InteractionsDocument.DEFAULT_STYLE);", "-    Utilities.clearEventQueue();", "-    assertEquals(\"caret should be one char after the d\", newPos + 2, _pane.getCaretPosition());", "+    assertEquals(\"caret should be one char after the inserted D\", newPos + 2, _pane.getCaretPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54994c1527d9721e8962e939d2c1577", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testShiftBackspace() throws BadLocationException", "signatureAfterChange": "   public void testShiftBackspace() throws BadLocationException", "diff": ["-    final char undefined = KeyEvent.CHAR_UNDEFINED;", "-    final int pressed = KeyEvent.KEY_PRESSED;", "-    final int released = KeyEvent.KEY_RELEASED;", "-    final int shift = InputEvent.SHIFT_MASK;", "-    ", "+  ", "-    ", "-        int shiftBksp = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "-        defPane.processKeyEvent(new KeyEvent(defPane, pressed, (new Date()).getTime(), shift, shiftBksp, undefined));", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), SHIFT, DEL_PREV, UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane, released, (new Date()).getTime(), shift, shiftBksp, undefined));", "-        _log.log(\"second key event processed\");", "-        _assertDocumentContents(doc, \"tes\", \"Did not delete on shift+backspace\");", "-        _log.log(\"Halfway through testShiftBackspace\");", "- ", "-        int shiftDel = OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "-        defPane.setCaretPosition(1);", "-        // The following is the sequence of key events for shift+delete", "-        defPane.processKeyEvent(new KeyEvent(defPane, pressed, (new Date()).getTime(), shift, shiftDel, undefined));", "-        defPane.processKeyEvent(new KeyEvent(defPane, released, (new Date()).getTime(), shift, shiftDel, undefined));", "-        _assertDocumentContents(doc, \"ts\", \"Did not delete on shift+delete\");", "-        _log.log(\"testShiftBackSpace completed\");", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), SHIFT, DEL_PREV, UNDEFINED));", "+        _frame.validate();", "+    Utilities.clearEventQueue();", "-", "+    _log.log(\"second key event processed\");", "+    _assertDocumentContents(doc, \"tes\", \"Did not delete on shift+backspace\");", "+    _log.log(\"Halfway through testShiftBackspace\");", "+    ", "+     ", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        ", "+        defPane.setCaretPosition(1);", "+        // The following is the sequence of key events for shift+delete", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), SHIFT, DEL_NEXT, UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), SHIFT, DEL_NEXT, UNDEFINED));", "+        _frame.validate();", "+      }", "+    });", "+    Utilities.clearEventQueue();", "+    _assertDocumentContents(doc, \"ts\", \"Did not delete on shift+delete\");", "+    _log.log(\"testShiftBackSpace completed\");", "+   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6af50766dc3dd2f91f957a336da384b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "ecb6b3252da3d7d3d097f277abccb8227fa3bd5e", "commitAfterChange": "9b7234acc5fdae30e0416741ebffabb14bf8b0b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testMetaKeyPress()", "signatureAfterChange": "    public void testMetaKeyPress()", "diff": ["-//     DefinitionsPane definitions = _frame.getCurrentDefPane();", "-", "-       /* The following is the sequence of key events that happen when the user presses Meta-a */", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_META));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_A));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'a'));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-// \t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_A));", "-//     definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-// \t\t\t\t0, KeyEvent.VK_META));", "-", "-//     DefinitionsDocument doc = definitions.getOpenDocument().getDocument();", "-//     try {", "-//       assertEquals(\"Test if meta key inserted a character into document\", \"\", doc.getText(0, doc.getLength()));", "-//     } catch(BadLocationException ble){", "-//       ble.printStackTrace();", "-//       fail(\"BadLocationException\");", "-//     }", "+     DefinitionsPane definitions = _frame.getCurrentDefPane();", "+     DefinitionsDocument doc = definitions.getOpenDocument().getDocument();", "+     _assertDocumentEmpty(doc, \"point 0\");", "+     /* The following is the sequence of key events that happen when the user presses Meta-a */", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_META));", "+     _assertDocumentEmpty(doc, \"point 1\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_W));", "+     _assertDocumentEmpty(doc, \"point 2\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_TYPED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_UNDEFINED, 'w'));", "+     _assertDocumentEmpty(doc, \"point 3\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+\t\t\t\t\t     InputEvent.META_MASK, KeyEvent.VK_W));", "+     _assertDocumentEmpty(doc, \"point 4\");", "+    definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+\t\t\t\t\t     0, KeyEvent.VK_META));", "+     _assertDocumentEmpty(doc, \"point 5\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e92c64fe461b17deed4b26cccb694522", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testShiftBackspace() throws BadLocationException", "signatureAfterChange": "   public void testShiftBackspace() throws BadLocationException", "diff": ["-   */", "+    */", "-    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane defPane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = defPane.getOpenDefDocument();", "+    final char undefined = KeyEvent.CHAR_UNDEFINED;", "+    final int pressed = KeyEvent.KEY_PRESSED;", "+    final int released = KeyEvent.KEY_RELEASED;", "+    final int shift = InputEvent.SHIFT_MASK;", "+    ", "-        definitions.setCaretPosition(4);", "+        defPane.setCaretPosition(4);", "-        int shiftBackspaceCode = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "+        int shiftBksp = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "-                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, pressed, (new Date()).getTime(), shift, shiftBksp, undefined));", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "-                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, released, (new Date()).getTime(), shift, shiftBksp, undefined));", "-      }", "-    });", "-    _assertDocumentContents(doc, \"tes\", \"Did not delete on shift+backspace\");", "-    ", "-    _log.log(\"Halfway through testShiftBackspace\");", "-    ", "-    Utilities.invokeAndWait(new Runnable() { ", "-      public void run() { ", "-        int shiftDeleteCode =", "-          OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "-        definitions.setCaretPosition(1);", "+        _assertDocumentContents(doc, \"tes\", \"Did not delete on shift+backspace\");", "+        _log.log(\"Halfway through testShiftBackspace\");", "+ ", "+        int shiftDel = OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "+        defPane.setCaretPosition(1);", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "-                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "-        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "-                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, pressed, (new Date()).getTime(), shift, shiftDel, undefined));", "+        defPane.processKeyEvent(new KeyEvent(defPane, released, (new Date()).getTime(), shift, shiftDel, undefined));", "+        _assertDocumentContents(doc, \"ts\", \"Did not delete on shift+delete\");", "+        _log.log(\"testShiftBackSpace completed\");", "-    _assertDocumentContents(doc, \"ts\", \"Did not delete on shift+delete\");", "-    _log.log(\"testShiftBackSpace completed\");", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca11cff7162029843bbea499e21098e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testShiftBackspace() throws BadLocationException", "signatureAfterChange": "   public void testShiftBackspace() throws BadLocationException", "diff": ["-    DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+//    _log.log(\"Starting testShiftBackSpace\");", "+    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "-    doc.insertString(0, \"test\", null);", "-    definitions.setCaretPosition(4);", "-    int shiftBackspaceCode =", "-      OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "-    // The following is the sequence of key events for shift+backspace", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftBackspaceCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftBackspaceCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        doc.append(\"test\", null);", "+        definitions.setCaretPosition(4);", "+    ", "+        int shiftBackspaceCode = OptionConstants.KEY_DELETE_PREVIOUS.getDefault().getKeyCode();", "+        ", "+        // The following is the sequence of key events for shift+backspace", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        _log.log(\"first key event processed\");", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(),", "+                                                 InputEvent.SHIFT_MASK, shiftBackspaceCode, KeyEvent.CHAR_UNDEFINED));", "+        _log.log(\"second key event processed\");", "+      }", "+    });", "+    _log.log(\"Halfway through testShiftBackspace\");", "-    int shiftDeleteCode =", "-      OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "-    definitions.setCaretPosition(1);", "-    // The following is the sequence of key events for shift+delete", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_PRESSED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftDeleteCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "-    definitions.processKeyEvent(new KeyEvent(definitions,", "-                                             KeyEvent.KEY_RELEASED,", "-                                             (new Date()).getTime(),", "-                                             InputEvent.SHIFT_MASK,", "-                                             shiftDeleteCode,", "-                                             KeyEvent.CHAR_UNDEFINED));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+        int shiftDeleteCode =", "+          OptionConstants.KEY_DELETE_NEXT.getDefault().getKeyCode();", "+        definitions.setCaretPosition(1);", "+        // The following is the sequence of key events for shift+delete", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_PRESSED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "+                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+        definitions.processKeyEvent(new KeyEvent(definitions, KeyEvent.KEY_RELEASED, (new Date()).getTime(), InputEvent.SHIFT_MASK,", "+                                                 shiftDeleteCode, KeyEvent.CHAR_UNDEFINED));", "+      }", "+    });", "+    ", "+    _log.log(\"testShiftBackSpace completed\");"]}], "num": 12641}
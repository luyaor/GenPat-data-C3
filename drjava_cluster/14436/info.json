{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecfbe622bf107e4d23ad2f2e61b71ddf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dcce31daa0f65db23cafb2f2f456def", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ea2763ecde4185a8c33fdd0462c9d12c206c7378", "commitAfterChange": "1ccb0f21abc2aaa138e57bd5c1add5c018ff34ef", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+//    // Try to undo the nested edit", "+//    try {", "+//      _defModel.getUndoManager().undo();", "+//      fail(\"Should not have allowed undoing a nested edit.\");", "+//    }", "+//    catch (CannotUndoException e) {", "+//      // Correct: cannot undo a nested edit", "+//    }", "+//", "+//    try {", "+//      _defModel.getUndoManager().redo();", "+//      fail(\"Should not have allowed redoing a nested edit.\");", "+//    }", "+//    catch (CannotRedoException cre) {", "+//      // Correct: cannot redo a nested edit", "+//    }", "+//    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da0a614093e0a733554ce3947218491", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "eceb1efda2a64c0d1777a241a780b6640565e74e", "commitAfterChange": "985a2a7aa160a776eff6e6187000ef0ccbcb7ce0", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-    // Indent the lines, so as to trigger a nested compond edit", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented, ", "-                 _defModel.getText(0, _defModel.getLength()));", "-    ", "-    // Try to undo the nested edit", "-    try {", "-      _defModel.getUndoManager().undo();", "-      fail(\"Should not have allowed undoing a nested edit.\");", "-    }", "-    catch (CannotUndoException e) {", "-      // Correct: cannot undo a nested edit", "-    }", "-    ", "+    // Indent the lines, so as to trigger a nested compound edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // We've taken out this part of the test because of our change to", "+    // undo where we close the nearest open compound edit upon undo-ing,", "+    // pasting, commenting, un-commenting, indenting, and backspacing.", "+    // We should never have a nested edit anymore.", "+    ", "+    // Try to undo the nested edit", "+//    try {", "+//      _defModel.getUndoManager().undo();", "+//      fail(\"Should not have allowed undoing a nested edit.\");", "+//    }", "+//    catch (CannotUndoException e) {", "+//      // Correct: cannot undo a nested edit", "+//    }", "+    ", "-    _defModel.getUndoManager().endCompoundEdit(key);", "+//    _defModel.getUndoManager().endCompoundEdit(key);"]}], "num": 14436}
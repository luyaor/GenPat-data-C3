{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8df677c99578bce1f8b1130f9403158d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d1b2a054760eebd4e7e34e7632bd991", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 255, "signatureBeforeChange": "      public ObjectFieldReference lookupField(final Expression object, final String name)     throws UnmatchedLookupException", "signatureAfterChange": "      public ObjectFieldReference lookupField(final Expression object, String name, Access.Module accessModule)     throws UnmatchedLookupException", "diff": ["-  public ObjectFieldReference lookupField(final Expression object, final String name)", "+  public ObjectFieldReference lookupField(final Expression object, String name, Access.Module accessModule)", "-    FieldFinder<ObjectFieldReference> finder = new FieldFinder<ObjectFieldReference>(name, false) {", "+    FieldFinder<ObjectFieldReference> finder = new FieldFinder<ObjectFieldReference>(name, accessModule, false) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d89c22908e39b0a16a67e579f480da0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 266, "signatureBeforeChange": "      public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public ClassType lookupClass(Type t, String name, Iterable<? extends Type> typeArgs, Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-  public ClassType lookupClass(Type t, final String name, Iterable<? extends Type> typeArgs)", "+  public ClassType lookupClass(Type t, String name, Iterable<? extends Type> typeArgs, Access.Module accessModule)", "-    return new ClassFinder(name, typeArgs, false).findSingleClass(t);", "+    return new ClassFinder(name, typeArgs, accessModule, false).findSingleClass(t);"]}], "num": 61}
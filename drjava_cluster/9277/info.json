{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b85217784e337a28d71f95f71cdb735b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42a28fe2d38c7452bccaea952c2a03ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public void quitFailed(Throwable th)", "signatureAfterChange": "          @Override public void startFailed(Exception e)", "diff": ["-   */", "-  public void quitFailed(Throwable th) {", "-    _interactionsModel.interpreterResetFailed(th);", "-    _cleanlyRestarting = false;", "-  }", "+    ", "+    @Override public void startFailed(Exception e) {", "+      int count = _failures + 1;", "+      if (count < MAX_STARTUP_FAILURES) {", "+        if (_state.compareAndSet(this, new StartingState(count))) { _doStartup(); }", "+        else { _state.value().startFailed(e); }", "+      }", "+      else {", "+        if (_state.compareAndSet(this, new FreshState())) { _interactionsModel.interpreterWontStart(e); }", "+        else { _state.value().startFailed(e); }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a71e3170c9db6beb4be3aea438e2b414", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void killInterpreter(boolean shouldRestart)", "signatureAfterChange": "    public void killInterpreter()", "diff": ["-   */", "-  public void killInterpreter(boolean shouldRestart) {", "-    try {", "-      _enabled = shouldRestart;", "-      quitSlave();", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-  }", "+  public void killInterpreter() {", "+      if ((_interpreterProcess != null) && (_interpreterJVM != null)) {", "+        try {", "+          _interpreterJVM.exitJVM();", "+        }", "+        catch (RemoteException re) {", "+          // couldn't ask it to quit nicely. be mean and kill", "+          _interpreterProcess.destroy();", "+        }", "+", "+        _interpreterProcess = null;", "+        _interpreterJVM = null;", "+      }", "+  }"]}], "num": 9277}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65d1a0f848229a682eb9d341e5b4a73d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f2108dead952d19408e9cbc755eae59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "commitAfterChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor)", "signatureAfterChange": "\r   public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor)", "diff": ["-   */", "-  public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor) {", "-    VendorType vendor = VendorType.UNKNOWN;", "-    String vendorString = null;", "-    if (java_runtime_name.toLowerCase().contains(\"openjdk\")) {", "-      vendor = VendorType.OPENJDK;", "-      vendorString = \"OpenJDK\";", "-    }", "-    else if (java_vm_vendor.toLowerCase().contains(\"apple\")) {", "-      vendor = VendorType.APPLE;", "-      vendorString = \"Apple\";", "-    }", "-    else if (java_vm_vendor.toLowerCase().contains(\"sun\")) {", "-      vendor = VendorType.SUN;", "-      vendorString = \"Sun\";", "-    }", "-    ", "-    String number;", "-    String typeString;", "-    int dash = java_version.indexOf('-');", "-    if (dash == -1) { number = java_version; typeString = null; }", "-    else { number = java_version.substring(0, dash); typeString = java_version.substring(dash+1); }", "-    ", "-    int dot1 = number.indexOf('.');", "-    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "-                                             ReleaseType.STABLE, null,", "-                                             vendor, vendorString); }", "-    int dot2 = number.indexOf('.', dot1+1);", "-    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,", "-                                             ReleaseType.STABLE, null,", "-                                             vendor, vendorString); }", "-    int underscore = number.indexOf('_', dot2+1);", "-    if (underscore == -1) { underscore = number.indexOf('.', dot2+1); }", "-    if (underscore == -1) { underscore = number.length(); }", "-    try {", "-      int major = Integer.parseInt(number.substring(0, dot1));", "-      int feature = Integer.parseInt(number.substring(dot1+1, dot2));", "-      int maintenance = Integer.parseInt(number.substring(dot2+1, underscore));", "-      int update = (underscore >= number.length()) ? 0 : Integer.parseInt(number.substring(underscore+1));", "-      ", "-      ReleaseType type;", "-      if (typeString == null) { type = ReleaseType.STABLE; }", "-      else if (typeString.startsWith(\"ea\")) { type = ReleaseType.EARLY_ACCESS; }", "-      else if (typeString.startsWith(\"beta\")) { type = ReleaseType.BETA; }", "-      else if (typeString.startsWith(\"rc\")) { type = ReleaseType.RELEASE_CANDIDATE; }", "-      else { type = ReleaseType.UNRECOGNIZED; }", "-      ", "-      JavaVersion version = UNRECOGNIZED;", "-      if (major == 1) {", "-        switch (feature) {", "-          case 1: version = JAVA_1_1; break;", "-          case 2: version = JAVA_1_2; break;", "-          case 3: version = JAVA_1_3; break;", "-          case 4: version = JAVA_1_4; break;", "-          case 5: version = JAVA_5; break;", "-          case 6: version = JAVA_6; break;", "-          case 7: version = JAVA_7; break;", "-          default: if (feature > 7) { version = FUTURE; } break;", "-        }", "-      }", "-      ", "-      return new FullVersion(version, maintenance, update,", "-                             type, typeString,", "-                             vendor, vendorString);", "-    }", "-    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0,", "-                                                             ReleaseType.STABLE, null,", "-                                                             vendor, vendorString); }", "-  }", "+   */\r", "+  public static FullVersion parseFullVersion(String java_version, String java_runtime_name, String java_vm_vendor) {\r", "+    VendorType vendor = VendorType.UNKNOWN;\r", "+    String vendorString = null;\r", "+    if (java_runtime_name.toLowerCase().contains(\"mint\")) {\r", "+      vendor = VendorType.MINT;\r", "+      vendorString = \"Mint\";\r", "+    }\r", "+    if (java_runtime_name.toLowerCase().contains(\"openjdk\")) {\r", "+      vendor = VendorType.OPENJDK;\r", "+      vendorString = \"OpenJDK\";\r", "+    }\r", "+    else if (java_vm_vendor.toLowerCase().contains(\"apple\")) {\r", "+      vendor = VendorType.APPLE;\r", "+      vendorString = \"Apple\";\r", "+    }\r", "+    else if (java_vm_vendor.toLowerCase().contains(\"sun\")) {\r", "+      vendor = VendorType.SUN;\r", "+      vendorString = \"Sun\";\r", "+    }\r", "+    \r", "+    String number;\r", "+    String typeString;\r", "+    int dash = java_version.indexOf('-');\r", "+    if (dash == -1) { number = java_version; typeString = null; }\r", "+    else { number = java_version.substring(0, dash); typeString = java_version.substring(dash+1); }\r", "+    \r", "+    int dot1 = number.indexOf('.');\r", "+    if (dot1 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,\r", "+                                             ReleaseType.STABLE, null,\r", "+                                             vendor, vendorString); }\r", "+    int dot2 = number.indexOf('.', dot1+1);\r", "+    if (dot2 == -1) { return new FullVersion(UNRECOGNIZED, 0, 0,\r", "+                                             ReleaseType.STABLE, null,\r", "+                                             vendor, vendorString); }\r", "+    int underscore = number.indexOf('_', dot2+1);\r", "+    if (underscore == -1) { underscore = number.indexOf('.', dot2+1); }\r", "+    if (underscore == -1) { underscore = number.length(); }\r", "+    try {\r", "+      int major = Integer.parseInt(number.substring(0, dot1));\r", "+      int feature = Integer.parseInt(number.substring(dot1+1, dot2));\r", "+      int maintenance = Integer.parseInt(number.substring(dot2+1, underscore));\r", "+      int update = (underscore >= number.length()) ? 0 : Integer.parseInt(number.substring(underscore+1));\r", "+      \r", "+      ReleaseType type;\r", "+      if (typeString == null) { type = ReleaseType.STABLE; }\r", "+      else if (typeString.startsWith(\"ea\")) { type = ReleaseType.EARLY_ACCESS; }\r", "+      else if (typeString.startsWith(\"beta\")) { type = ReleaseType.BETA; }\r", "+      else if (typeString.startsWith(\"rc\")) { type = ReleaseType.RELEASE_CANDIDATE; }\r", "+      else { type = ReleaseType.UNRECOGNIZED; }\r", "+      \r", "+      JavaVersion version = UNRECOGNIZED;\r", "+      if (major == 1) {\r", "+        switch (feature) {\r", "+          case 1: version = JAVA_1_1; break;\r", "+          case 2: version = JAVA_1_2; break;\r", "+          case 3: version = JAVA_1_3; break;\r", "+          case 4: version = JAVA_1_4; break;\r", "+          case 5: version = JAVA_5; break;\r", "+          case 6: version = JAVA_6; break;\r", "+          case 7: version = JAVA_7; break;\r", "+          default: if (feature > 7) { version = FUTURE; } break;\r", "+        }\r", "+      }\r", "+      \r", "+      return new FullVersion(version, maintenance, update,\r", "+                             type, typeString,\r", "+                             vendor, vendorString);\r", "+    }\r", "+    catch (NumberFormatException e) { return new FullVersion(UNRECOGNIZED, 0, 0,\r", "+                                                             ReleaseType.STABLE, null,\r", "+                                                             vendor, vendorString); }\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd840be563c19c3aaeb3017eac78329e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "4117398987de5205499e8524a48aeb3a8a6b43ad", "commitAfterChange": "e433bba86704c86b158b09f6c33458c252eb4b1b", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "     public File getWorkingDirectory()", "signatureAfterChange": "     public File getWorkingDirectory()", "diff": ["-          File file;", "-          try {", "-            // restore the path from the configuration", "-            file = FileOps.getValidDirectory(DrJava.getConfig().getSetting(LAST_INTERACTIONS_DIRECTORY));", "+          File file = null;", "+          if (DrJava.getConfig().getSetting(STICKY_INTERACTIONS_DIRECTORY)) {", "+            try {", "+              // restore the path from the configuration", "+              file = FileOps.getValidDirectory(DrJava.getConfig().getSetting(LAST_INTERACTIONS_DIRECTORY));", "+            }", "+            catch (RuntimeException e) { file = null; }", "-          catch (RuntimeException e) {", "+          if (file==null) {"]}], "num": 16104}
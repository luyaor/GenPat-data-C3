{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e13156ce73522e7b0cea6c24db99a687", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "359ed63d00e311583c7d254f614ee495", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "f835199d645f480bb352cc51cff6dc5ae32e7dc4", "commitAfterChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 195, "signatureBeforeChange": "                          @Override public ConstraintSet forParameterizedClassType(final ParameterizedClassType arg)", "signatureAfterChange": "          public ConstraintFormula equivalentNorm(final Type arg, final Type param)", "diff": ["-            ", "-            @Override public ConstraintSet forParameterizedClassType(final ParameterizedClassType arg) {", "-              ConstraintSet matchConstraints = UNSATISFIABLE_CONSTRAINTS;", "-              if (param.ofClass().equals(arg.ofClass())) {", "-                Thunk<ConstraintSet> recurOnTargs = new Thunk<ConstraintSet>() {", "-                  public ConstraintSet value() {", "-                    ParameterizedClassType argCap = capture(arg);", "-                    ConstraintSet result = EMPTY_CONSTRAINTS;", "-                    for (Pair<Type, Type> pair : IterUtil.zip(argCap.typeArguments(), param.typeArguments())) {", "-                      final Type argArg = pair.first();", "-                      final Type paramArg = pair.second();", "-                      result = result.and(paramArg.apply(new TypeAbstractVisitor<ConstraintSet>() {", "-                        public ConstraintSet defaultCase(Type paramArg) { ", "-                          return inferFromEqual(argArg, paramArg, vars, stack);", "-                        }", "-                        @Override public ConstraintSet forWildcard(Wildcard paramArg) {", "-                          ConstraintSet cs = inferFromSupertype(argArg, paramArg.symbol().lowerBound(),", "-                                                                vars, stack);", "-                          if (cs.isSatisfiable()) {", "-                            cs = cs.and(inferFromSubtype(argArg, paramArg.symbol().upperBound(), vars, stack));", "-                          }", "-                          return cs;", "-                        }", "-                      }));", "-                      if (!result.isSatisfiable()) { break; }", "-                    }", "-                    return result;", "-                  }", "-                };", "-                matchConstraints = stack.apply(recurOnTargs, EMPTY_CONSTRAINTS, arg, param, ", "-                                               InferenceMode.SUBTYPE);", "-              }", "-              ", "-              ConstraintSet superConstraints = UNSATISFIABLE_CONSTRAINTS;", "-              Type argSuper = immediateSupertype(arg);", "-              if (argSuper != null) { superConstraints = inferFromSubtype(argSuper, param, vars, stack); }", "-              ", "-              return matchConstraints.or(superConstraints);", "-            }", "+    ", "+    public ConstraintFormula equivalentNorm(final Type arg, final Type param) {", "+      ConstraintFormula result = subtypeNorm(arg, param);", "+      if (result.isSatisfiable()) { result = result.and(supertypeNorm(arg, param)); }", "+      return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960acd112b9bb56481ca8f7ee0060086", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "commitAfterChange": "e753017eccbd872714e58c93831cb488b5045d2a", "methodNumberBeforeChange": 276, "methodNumberAfterChange": 276, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-        long millis = System.currentTimeMillis();", "-        String f = _attributes.get(\"fmt\").toLowerCase();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "-    ", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.auto.refresh\",", "+                                                               \"Evaluates to true if project auto-refresh is enabled.\") {", "+      public void update() {", "+        Boolean b = _model.getAutoRefreshStatus();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        if (f.equals(\"int\")) _value = b ? \"1\" : \"0\";", "+        else if (f.equals(\"yes\")) _value = b ? \"yes\" : \"no\";", "+        else _value = b.toString();", "+      }", "+      ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"boolean\");", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.excluded.files\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files that are excluded from DrJava's \"+", "+                                                                       \"project auto-refresh.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExcludedFiles()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.extra.class.path\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files in the project's extra \"+", "+                                                                       \"class path.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExtraClassPath()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+", "+    // Actions"]}], "num": 25962}
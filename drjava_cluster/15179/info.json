{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cfa57d0927dfa606d79f18c887d22fa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fab841f108d8f771a89a30140d4fad0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ReferenceTypeName.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void setRepresentation(String s)", "signatureAfterChange": "   public void setIdentifiers(List<? extends IdentifierToken> ids)", "diff": ["-  public void setRepresentation(String s) {", "-    if (s == null) throw new IllegalArgumentException(\"s == null\");", "-", "-    firePropertyChange(REPRESENTATION, representation, representation = s);", "+  public void setIdentifiers(List<? extends IdentifierToken> ids) {", "+    if (ids == null) throw new IllegalArgumentException(\"ids == null\");", "+    if (ids.size() == 0) throw new IllegalArgumentException(\"ids.size() == 0\");", "+    firePropertyChange(IDENTIFIERS, identifiers, identifiers = ids);", "+    firePropertyChange(REPRESENTATION, representation, representation = TreeUtilities.listToName(ids));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3796c5283ead90402eaa6c9c856c5c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public Class visit(NotExpression node)", "signatureAfterChange": "   public Class visit(NotExpression node)", "diff": ["-    Node  n = node.getExpression();", "-    Class c = n.acceptVisitor(this);", "+    Expression exp = node.getExpression();", "+    Class c = exp.acceptVisitor(this);", "-    if (c != boolean.class) {", "+    if (c != boolean.class && c != Boolean.class) {", "-    node.setProperty(NodeProperties.TYPE, c);", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setExpression(_unbox(exp, c));", "+    }", "-    if (n.hasProperty(NodeProperties.VALUE)) {", "-      if (((Boolean)n.getProperty(NodeProperties.VALUE)).booleanValue()) {", "+    if (exp.hasProperty(NodeProperties.VALUE)) {", "+      if (((Boolean) exp.getProperty(NodeProperties.VALUE)).booleanValue()) {", "-      } else {", "+      } ", "+      else {", "-    return c;", "+    return boolean.class;"]}], "num": 15179}
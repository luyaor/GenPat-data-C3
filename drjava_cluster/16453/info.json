{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88694c74b18c8d027dc94a282eb9cf3b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d9d2e7e7dfebec80f5af53709be97b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public TypeData forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public TypeData forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-    final TypeData mav_result = that.getMav().visit(this);", "-    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);", "+    final TypeData mavRes = that.getMav().visit(this);", "+    final TypeData[] typeParamsRes = makeArrayOfRetType(that.getTypeParams().length);", "-      typeParams_result[i] = that.getTypeParams()[i].visit(this);", "+      typeParamsRes[i] = that.getTypeParams()[i].visit(this);", "-    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);", "-    final TypeData name_result = that.getName().visit(this);", "-    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);", "+    final SymbolData resRes = getSymbolData(that.getResult().getName(), _symbolData, that);", "+    final TypeData nameRes = that.getName().visit(this);", "+    final TypeData[] throwsRes = makeArrayOfRetType(that.getThrows().length);", "-      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);", "+      throwsRes[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);", "-    for (int i = 0; i<vds.length; i++) {", "+    for (int i = 0; i < vds.length; i++) {", "-    TypeData body_result = that.getBody().visit(btc); // We assume that this will return an InstanceData -- the return type of the body", "+    TypeData bodyRes = that.getBody().visit(btc); // We assume that this will return an InstanceData -- the return type of the body", "-    if (body_result != null) {body_result = body_result.getSymbolData();}", "-    _checkReturnType(md.getReturnType(), (SymbolData) body_result, that);", "+    if (bodyRes != null) {bodyRes = bodyRes.getSymbolData();}", "+    _checkReturnType(md.getReturnType(), (SymbolData) bodyRes, that);", "-    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);", "-", "-    for (int i = 0; i<thingsWeAssigned.size(); i++) {", "-      thingsWeAssigned.get(i).lostValue();", "-    }", "-    ", "-    return result_result;", "-", "+    final TypeData[] paramsRes = makeArrayOfRetType(that.getParams().length);", "+//", "+//    // Why oh why is this necessary; these variables aren't even in scope elsewhere; they should be invisible!!!!", "+//    for (int i = 0; i < thingsWeAssigned.size(); i++) {", "+//      thingsWeAssigned.get(i).lostValue();", "+//    }", "+    return resRes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c42693d367b39fe8c7d46c90752362", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/HighlightManager.java", "commitBeforeChange": "c700f0baf9132c8d6ae724f82bf91ce8e4038f2f", "commitAfterChange": "da0a29e11c230fab76957a17e5a2991c9ab7978b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Stack<HighlightInfo> _getStackAt ( int from, int to)", "signatureAfterChange": "     private Stack<HighlightInfo> _getStackAt (HighlightInfo h)", "diff": ["-    private Stack<HighlightInfo> _getStackAt ( int from, int to) {", "+    private Stack<HighlightInfo> _getStackAt (HighlightInfo h) {", "-      for (int i=0; i<_highlights.size(); i++) {", "-", "-        Stack<HighlightInfo> stack = _highlights.get(i);", "-", "-        if (stack.isEmpty()) continue;", "-", "-        if (stack.get(0).matchesRegion(from, to)) {", "-          return _highlights.get(i);", "+      for (Stack<HighlightInfo> stack : _highlights) {", "+        if (stack.get(0).matchesRegion(h)) {", "+          return stack;"]}], "num": 16453}
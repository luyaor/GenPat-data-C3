{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a15e1104468dcf0244dcfb51a779c2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d981fe002a94ccb11c47af2b025a4df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "               public String toString()", "signatureAfterChange": "               public String toString()", "diff": ["+        TypePrinter printer = typePrinter();", "-            result.append(userRepresentation(s.lowerBound(var)));", "+            result.append(printer.print(s.lowerBound(var)));", "-            result.append(userRepresentation(s.upperBound(var)));", "+            result.append(printer.print(s.upperBound(var)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99222e455f13f075034fe11811d4235c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "536afaee0374767d0f8bdf572a332576e3f54467", "commitAfterChange": "222f5adcb4ec2d8c8823733053796b612dc57603", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void verifyErrorLocation(ParseException ex,                                   int startLine, int startColumn,                                    int endLine, int endColumn)", "signatureAfterChange": "      public void verifyErrorLocation(ParseException ex,                                   int startLine, int startColumn,                                    int endLine, int endColumn)", "diff": ["-    assertEquals(\"Wrong begin line of error\", startLine, ex.getBeginLine());", "-    assertEquals(\"Wrong begin column of error\", startColumn, ex.getBeginColumn());", "-    assertEquals(\"Wrong end line of error\", endLine, ex.getEndLine());", "-    assertEquals(\"Wrong end column of error\", endColumn, ex.getEndColumn());", "+    CustomParseException custom = CustomParseException.makeCustom(ex);", "+    assertEquals(\"Wrong begin line of error\", startLine, custom.getBeginLine());", "+    assertEquals(\"Wrong begin column of error\", startColumn, custom.getBeginColumn());", "+    assertEquals(\"Wrong end line of error\", endLine, custom.getEndLine());", "+    assertEquals(\"Wrong end column of error\", endColumn, custom.getEndColumn());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85840e855eb8e6b582bf84507125fed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     private Type handleRelationalExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleRelationalExpression(BinaryExpression node)", "diff": ["-        setErrorStrings(node, ts.userRepresentation(getType(node.getLeftExpression())),", "-                        ts.userRepresentation(getType(node.getRightExpression())));", "+        TypePrinter printer = ts.typePrinter();", "+        setErrorStrings(node, printer.print(getType(node.getLeftExpression())),", "+                        printer.print(getType(node.getRightExpression())));"]}], "num": 24613}
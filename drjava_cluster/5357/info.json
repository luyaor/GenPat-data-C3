{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d64c7f677cd9f2373851007d20df1e4a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bdc4acf01ebf52c977f67fc39524c3a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 265, "methodNumberAfterChange": 263, "signatureBeforeChange": "     public void quitFile()", "signatureAfterChange": "     public boolean quitFile()", "diff": ["-    public void quitFile() {", "-      if (isModifiedSinceSave() || (_file != null && !_file.exists() && _cacheAdapter.isReady()))", "-        _notifier.quitFile(this);", "+    public boolean quitFile() {", "+      if (isModifiedSinceSave() || (_file != null && !_file.exists() && _cacheAdapter.isReady())) {", "+        return _notifier.quitFile(this); ", "+      } else { return true; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fc16583207bca139cd8c31e6f62fc64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleQuestion.java", "commitBeforeChange": "c3686d18afe86d8459a6ef71e5f779589d915dd8", "commitAfterChange": "1e5237b2401d25a04c08b7b54162568a6d55c836", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc, int reason)", "signatureAfterChange": "   public boolean indentLine(DefinitionsDocument doc, int reason)", "diff": ["-  public void indentLine(DefinitionsDocument doc, int reason)", "+  public boolean indentLine(DefinitionsDocument doc, int reason)", "-      _yesRule.indentLine(doc, reason);", "+      return _yesRule.indentLine(doc, reason);", "-      _noRule.indentLine(doc, reason);", "+      return _noRule.indentLine(doc, reason);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d45b996425f5b7066479efc674eec19", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalEventNotifier.java", "commitBeforeChange": "065b1e3954d46e1086ba2f867744163daf14462d", "commitAfterChange": "54ea28bb82d3e1f546423de8d56e416e257bade5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void quitFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean quitFile(OpenDefinitionsDocument doc)", "diff": ["-   /** Called to ask the listeners save the file before quitting at the user's option. */", "-  public void quitFile(OpenDefinitionsDocument doc) {", "+    *  @return true if quitting should continue, false if the user cancelled */", "+  public boolean quitFile(OpenDefinitionsDocument doc) {", "-      for (GlobalModelListener l: _listeners) { l.quitFile(doc); }", "+      // if one of the listeners returns false (=user cancelled), abort", "+      for (GlobalModelListener l: _listeners) { if (!l.quitFile(doc)) return false; }", "+    return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d2c8c50a37e12943b0fbca0ddd0945", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b6f420e3de969a8f8dd7bc47b9ecaafbf647e921", "commitAfterChange": "8bdb35d64cb05e3140d2e418cebfe8458ce4a718", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "     private void _saveAs()", "signatureAfterChange": "     private boolean _saveAs()", "diff": ["-  private void _saveAs() {", "+  private boolean _saveAs() {", "-      _model.getActiveDocument().saveFileAs(_saveSelector);", "+      return _model.getActiveDocument().saveFileAs(_saveSelector);", "+      return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36ccf33b0c1dd3c6ff327a84a09bf01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b00931e37ad236142f85959e9fa324cbb5977b3e", "commitAfterChange": "2707043a47325658db92e0290e695128c6817bba", "methodNumberBeforeChange": 142, "methodNumberAfterChange": 142, "signatureBeforeChange": "   private void _closeProject()", "signatureAfterChange": "   private boolean _closeProject()", "diff": ["-  private void _closeProject(){", "+  private boolean _closeProject(){", "+      return true;", "+    }else{", "+      return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f83e96c6b1a264fb1ba8b7ede6c43f01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "122a4aca1ff92eaf07930221c018670fe18c314a", "commitAfterChange": "ea58ebfcec38aad3c446138f5dc29fb9b0bd55b4", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 71, "signatureBeforeChange": "   public void tryToDeletePath(TreePath tp)", "signatureAfterChange": "   protected boolean tryToDeletePath(TreePath tp)", "diff": ["-  public void tryToDeletePath(TreePath tp) {", "-    if (!_treeIsGenerated) return;", "-    ", "-    File f = getFileForTreePath(tp);", "-    ", "-    String type = (f.isDirectory() ? \"directory\" : \"file\");", "-    String msg = \"Are you sure you want to delete this \"+type+\"?\";", "-    int res = JOptionPane.showConfirmDialog(DirectoryChooser.this,", "-                                            msg, \"Delete \"+type+\"?\", ", "-                                            JOptionPane.YES_NO_OPTION);", "-    if (res != JOptionPane.YES_OPTION) return;", "-    ", "-    boolean couldDelete = false;", "-    try {", "-      couldDelete = f.delete();", "-    catch (SecurityException e) { }", "-    ", "-    if (couldDelete) {", "-      DefaultMutableTreeNode node = (DefaultMutableTreeNode)tp.getLastPathComponent();", "-      TreeNode parent = node.getParent();", "-      node.removeFromParent();", "-      ((DefaultTreeModel)_tree.getModel()).nodeStructureChanged(parent);", "-    }", "-    else {", "-      String errMsg;", "-      if (f.isDirectory()) {", "-        errMsg = ", "-          \"The directory was unable to be deleted.\\n\"+", "-          \"Directories may only be deleted if they are\\n\"+", "-          \"empty and if there is sufficient access to\\n\"+", "-          \"to the directory.\";", "-      }", "-      else {", "-        errMsg = ", "-          \"The file was unable to be deleted.\\n\"+", "-          \"Make sure you have sufficient permissions.\";", "-      }", "-      JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Unable to delete\",", "-                                    JOptionPane.WARNING_MESSAGE);", "-    }", "-  }", "+   */", "+  protected boolean tryToDeletePath(TreePath tp) {", "+    if (!_treeIsGenerated) return false;", "+    ", "+    File f = getFileForTreePath(tp);", "+    ", "+    String type = (f.isDirectory() ? \"directory\" : \"file\");", "+    String msg = \"Are you sure you want to delete this \"+type+\"?\";", "+    int res = JOptionPane.showConfirmDialog(DirectoryChooser.this,", "+                                            msg, \"Delete \"+type+\"?\", ", "+                                            JOptionPane.YES_NO_OPTION);", "+    if (res != JOptionPane.YES_OPTION) return false;", "+    ", "+    boolean couldDelete = false;", "+    try {", "+      couldDelete = f.delete();", "+    }", "+    catch (SecurityException e) { }", "+    ", "+    if (couldDelete) {", "+      DefaultMutableTreeNode node = (DefaultMutableTreeNode)tp.getLastPathComponent();", "+      TreeNode parent = node.getParent();", "+      node.removeFromParent();", "+      ((DefaultTreeModel)_tree.getModel()).nodeStructureChanged(parent);", "+      return true;", "+    }", "+    else {", "+      String errMsg;", "+      if (f.isDirectory()) {", "+        errMsg = ", "+          \"The directory was unable to be deleted.\\n\"+", "+          \"Directories may only be deleted if they are\\n\"+", "+          \"empty and if there is sufficient access to\\n\"+", "+          \"to the directory.\";", "+      }", "+      else {", "+        errMsg = ", "+          \"The file was unable to be deleted.\\n\"+", "+          \"Make sure you have sufficient permissions.\";", "+      }", "+      JOptionPane.showMessageDialog(DirectoryChooser.this, errMsg, \"Unable to delete\",", "+                                    JOptionPane.WARNING_MESSAGE);", "+      return false;", "+    }", "+  }"]}], "num": 5357}
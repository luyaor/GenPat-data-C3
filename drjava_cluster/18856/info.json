{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8de14cc2017d5c923b32ddeb1259eba2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e35684808755ac494153eabaab41d029", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "fbaecba32a4936f7aab208313b312f73181698a7", "commitAfterChange": "6bd1f449c6b6476464bf38d05b5455668d0d2ac5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "diff": ["-    String testName = failedTest.getClass().getName();", "+    String testName;", "+    else{", "+      testName = failedTest.getClass().getName();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fe1477590afc022019e8731aebc870", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "1502cfa27280e1c7a53d8bd6dee788f17c33dc23", "commitAfterChange": "f3485582e7c13f9ae164de3e45280fa4f5c05b3e", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private FindResult _findNext(int start, int end)", "signatureAfterChange": "   private FindResult _findNext(int start, int end)", "diff": ["-          AbstractDocumentInterface nextDocToSearch = (!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "-                                                         _docIterator.getPrevDocument(_doc));", "+          AbstractDocumentInterface nextDocToSearch;", "+          ", "+          nextDocToSearch = (!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "+                                                 _docIterator.getPrevDocument(_doc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa90bc48c3127ca4509e1cf8f78808bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "diff": ["+    String text;", "-    try {", "-      String text = getText(0, pos);", "-      synchronized(_reduced) {", "+    try { text = getText(0, pos); }", "+    finally { readUnlock(); }", "+    ", "+    synchronized(_reduced) {", "+      ", "+      final int origLocation = _currentLocation;", "+      // Move reduced model to location pos", "+      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+      ", "+      // Walk backward from specified position", "+      ", "+      while (i >= 0) { ", "+        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+         * text[i+1:pos-1] contains invalid chars */", "-        final int origLocation = _currentLocation;", "-        // Move reduced model to location pos", "-        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-        ", "-        // Walk backward from specified position", "-        ", "-        while (i >= 0) { ", "-          /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "-           * text[i+1:pos-1] contains invalid chars */", "-          ", "-          if (match(text.charAt(i), whitespace)) {", "-            // ith char is whitespace", "-            i--;", "-            continue;", "-          }", "-          ", "-          // Found a non-whitespace char;  move reduced model to location i", "-          _reduced.move(i - reducedPos);", "-          reducedPos = i;                  // reduced model points to i == reducedPos", "-          ", "-          // Check if matching char is within a comment (not including opening two characters)", "-          if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-              (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-            i--;", "-            continue;", "-          }", "-          ", "-          if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "-            // Move i past the first comment character and continue searching", "-            i = i - 2;", "-            continue;", "-          }", "-          ", "-          // Found valid previous character", "-          break;", "+        if (match(text.charAt(i), whitespace)) {", "+          // ith char is whitespace", "+          i--;", "+          continue;", "-        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-        _reduced.move(origLocation - reducedPos);", "+        // Found a non-whitespace char;  move reduced model to location i", "+        _reduced.move(i - reducedPos);", "+        reducedPos = i;                  // reduced model points to i == reducedPos", "+        ", "+        // Check if matching char is within a comment (not including opening two characters)", "+        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+          i--;", "+          continue;", "+        }", "+        ", "+        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+          // Move i past the first comment character and continue searching", "+          i = i - 2;", "+          continue;", "+        }", "+        ", "+        // Found valid previous character", "+        break;", "+      ", "+      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+      _reduced.move(origLocation - reducedPos);", "-    finally { readUnlock(); }"]}], "num": 18856}
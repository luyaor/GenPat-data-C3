{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "342b5bdd4cee256da28950d71e694927", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "877b374d4347d785834ca35bef98f69d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData valueRes)", "diff": ["-  public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result) {", "-    if (value_result == null) {return null;}", "+  public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData valueRes) {", "+    if (valueRes == null) {return null;}", "-    if (!assertFound(value_result, that)) {", "+    if (!assertFound(valueRes, that)) {", "-    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + ", "+    if (assertInstanceType(valueRes, \"You cannot increment or decrement \" + valueRes.getName() + ", "-      if (!value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      if (!valueRes.getSymbolData().isNumberType(JAVA_VERSION)) {", "-                  \"  You have specified something of type \" + value_result.getName(), that);", "+                  \"  You have specified something of type \" + valueRes.getName(), that);", "-    return value_result.getInstanceData();", "+    return valueRes.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebf47a21dcd33024059f284274e44d90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData valueRes)", "diff": ["-  public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result) {", "-    if (value_result==null) {return null;}", "+  public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData valueRes) {", "+    if (valueRes==null) {return null;}", "-    if (!assertFound(value_result, that)) {", "+    if (!assertFound(valueRes, that)) {", "-    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + ", "+    if (assertInstanceType(valueRes, \"You cannot use a numeric unary operator (+, -) with \" + valueRes.getName() + ", "-        !value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+        !valueRes.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + ", "+      _addError(\"You cannot apply this unary operator to something of type \" + valueRes.getName() + ", "-      return value_result;", "+      return valueRes;", "-    return _getLeastRestrictiveType(value_result.getSymbolData(), SymbolData.INT_TYPE).getInstanceData();", "+    return _getLeastRestrictiveType(valueRes.getSymbolData(), SymbolData.INT_TYPE).getInstanceData();"]}], "num": 3247}
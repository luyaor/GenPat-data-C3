{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "269477910ae9b1a6c60971c0abcc0e5a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c53da788d49ffd1237c909eda58f0c91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "0f4d2da263ed93d9981fed5c0de39394b1b0893c", "commitAfterChange": "fc51b2245942e6d87f48245a9b8cdb4aedbcacc2", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "diff": ["-    ", "-      String text = getText(0, pos);", "+      int lineStartPos = getLineStartPos(pos);", "+      if (lineStartPos < 0) lineStartPos = 0;", "-      synchronized(_reduced) {", "-        final int origPos = _currentLocation;", "-        ", "-        // Walk backwards from specificed position", "-        for (i = pos - 1; i >= 0; i--) {", "-          /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "-           * 0 <= i < reducedPos <= pos */", "-          // Move reduced model to location pos", "-          _setCurrentLocation(i);  // reduced model points to i", "-          if (isShadowed() || isCommentOpen(text, i)) {", "+      if (lineStartPos >= pos) i = lineStartPos - 1;  // the line containing pos is empty  ", "+      else { ", "+        assert lineStartPos < pos;", "+        String line = getText(lineStartPos, pos - lineStartPos);  // the line containing pos", "+        synchronized(_reduced) {", "+          final int origPos = _currentLocation;", "+          ", "+          // Walk backwards from specificed position, scanning current line for a delimiter", "+          for (i = pos - 1; i >= lineStartPos; i--) {", "+            /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "+             * 0 <= i < reducedPos <= pos */", "+            // Move reduced model to location pos", "+            int irel = i - lineStartPos;", "+            _setCurrentLocation(i);  // reduced model points to i", "+            if (isShadowed() || isCommentOpen(line, irel)) {", "-            continue;", "-          }", "-          char ch = text.charAt(i);", "-          ", "-          if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "-            reducedPos = i;    // record valid match                                                                              ", "-            break;", "-          }", "-          ", "-          if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "-//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "-            _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "-//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "-            int dist = balanceBackward();", "-            if (dist == -1) { // if braces do not balance, return failure", "-              i = -1;", "-//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "+              continue;", "+            }", "+            char ch = line.charAt(irel);", "+            ", "+            if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "+              reducedPos = i;    // record valid match                                                                              ", "-            assert dist > 0;", "+            ", "+            if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "+//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "+              _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "+//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "+              int dist = balanceBackward();", "+              if (dist == -1) { // if braces do not balance, return failure", "+                i = -1;", "+//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "+                break;", "+              }", "+              assert dist > 0;", "-            _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "-            i = _currentLocation;", "-            // Decrementing i skips over matching brace", "-            continue;", "-          }", "-        }  // end for", "-        ", "-        /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "-        ", "-        _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "-      }  // end synchronized", "+              _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "+              i = _currentLocation;", "+              // Decrementing i skips over matching brace; could skip back into text preceding current line", "+              continue;", "+            }", "+          }  // end for", "+          ", "+          _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "+        }  // end synchronized", "+      } // end processing of text on same line as pos", "-      if (i == -1) reducedPos = -1; // No matching char was found", "+      /* Invariant: same as for loop except that lineStartPos-1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "+      ", "+      if (i < lineStartPos) {  // No matching char was found on line containing pos; must look at preceding text", "+        if (i <= 0) reducedPos = -1;  // No preceding text left to search", "+        else reducedPos = findPrevDelimiter(i, delims, skipBracePhrases); ", "+      }", "+  ", "-    }", "+    } // end try"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94265c722d5b6f6b696446e855b79f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "ab3915db475da29d3ee24758ec211eb5cba4cacd", "commitAfterChange": "d9a76cb80177eb2d47da47ee2faf31cc610e0f62", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["-    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "-    ", "+    final int docLen = doc.getLength();", "+    if (docLen == 0) return new FindResult(doc, -1, true, allWrapped); // failure result", "+ ", "+    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen);", "+    assert (_isForward && start + len == docLen) || (! _isForward && start == 0);", "+//    Utilities.show(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "+//                       doc.getLength() + \", _isForward = \" + _isForward);", "-    if (doc.getLength() == 0) return new FindResult(doc, -1, true, allWrapped);", "+    if (docLen == 0) return new FindResult(doc, -1, true, allWrapped); // failure result", "-    final int newLen, newStart;", "+    int newLen;", "+    final int newStart;", "+", "+    final int adjustment = _findWord.length() - 1; // max size of the findWord suffix (prefix) within preceding text", "+    ", "-      newLen = start;", "+      newLen = start + adjustment;  // formerly start, which was an annoying bug", "-      newLen = doc.getLength() - len;", "+      newLen = (docLen - len) + adjustment;", "-      _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "-                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);", "+      ", "+    if (newLen > docLen) newLen = docLen;", "+ ", "+    _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "+             newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);"]}], "num": 20996}
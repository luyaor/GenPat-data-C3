{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1feeca530b2d82605b2e1c402b35f8a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9445c61c1e57b98c0a68b0716777fa91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "          public void testCheckDuplicateExceptions()", "signatureAfterChange": "          public void testCheckDuplicateExceptions()", "diff": ["-      UninitializedVariableDeclarator uvd1 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Exception\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "-      UninitializedVariableDeclarator uvd2 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"RuntimeException\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "-      UninitializedVariableDeclarator uvd3 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"IOException\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "+      UninitializedVariableDeclarator uvd1 = ", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Exception\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+      UninitializedVariableDeclarator uvd2 = ", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"RuntimeException\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+      UninitializedVariableDeclarator uvd3 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"IOException\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"e\"));", "-      LanguageLevelVisitor llv = new LanguageLevelVisitor(new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), ", "-                                      new LinkedList<String>(), new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+      LanguageLevelVisitor llv = ", "+        new LanguageLevelVisitor(new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                 new LinkedList<String>(), new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-      //just one exception, no error", "+      // Just one exception, no error", "-      //2nd exception is subclass of 1st exception: should throw error", "+      // Second exception is subclass of 1st exception: should throw error", "+//      System.out.println(\"First error is: \" + errors.get(0));", "-      //two exceptions, unrelated.  no error", "+      // Two exceptions, unrelated.  no error", "-", "-      //2nd and 3rd exceptions subclasses of 1st exception: should throw 2 errors", "+      ", "+      // 2nd and 3rd exceptions subclasses of 1st exception: should throw 2 errors, but one is a duplicate ", "-      assertEquals(\"Should be three errors\", 3, errors.size());", "-      assertEquals(\"2nd Error message should be correct\", \"Exception java.lang.RuntimeException has already been caught\", errors.get(1).getFirst());", "-      assertEquals(\"3rd Error message should be correct\", \"Exception java.io.IOException has already been caught\", errors.get(2).getFirst());", "+", "+      assertEquals(\"Should be two errors\", 2, errors.size());", "+      assertEquals(\"2nd Error message should be correct\", \"Exception java.lang.RuntimeException has already been caught\", errors.get(0).getFirst());", "+      assertEquals(\"3rd Error message should be correct\", \"Exception java.io.IOException has already been caught\", errors.get(1).getFirst());", "-      //1st exception subclass of 2nd exception: should be no error", "+      // 1st exception subclass of 2nd exception: should be no error", "-      assertEquals(\"Should still be three errors\", 3, errors.size());", "+      assertEquals(\"Should still be two errors\", 2, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa4ecdee010658731bc345a8ec187e47", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "7159df222d88dee270188fe2cbffe74bb173d159", "commitAfterChange": "c73227da8024bfd14e7a2df3af6435d7a78133b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testMultipleFilesArray() throws BadLocationException", "signatureAfterChange": "   public void testMultipleFilesArray() throws BadLocationException", "diff": ["-    assertNumOpenDocs(3);", "+    assertNumOpenDocs(4);", "-    assertEquals(\"size of document array\", 3, docs.size());", "+    assertEquals(\"size of document array\", 4, docs.size());", "-    assertEquals(\"document 1\", doc1, docs.get(0));", "-    assertEquals(\"document 2\", doc2, docs.get(1));", "-    assertEquals(\"document 3\", doc3, docs.get(2));", "+    assertEquals(\"document 1\", doc1, docs.get(1));", "+    assertEquals(\"document 2\", doc2, docs.get(2));", "+    assertEquals(\"document 3\", doc3, docs.get(3));"]}], "num": 18150}
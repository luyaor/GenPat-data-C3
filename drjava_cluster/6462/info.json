{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7b18c9335e90934d07c48da60375127", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1614fd949036c68ce56166e416f67ff8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index)", "signatureAfterChange": "   public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index)", "diff": ["-      _addError(\"The variable referred to by this array access is a \" + lhs.getSymbolData().getName() + \", not an array\", that);", "+      _addError(\"The variable referred to by this array access is a \" + lhs.getSymbolData().getName() + \", not an array\",", "+                that);", "-        !index.getSymbolData().isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "-      _addError(\"You cannot reference an array element with an index of type \" + index.getSymbolData().getName() + \".  Instead, you must use an int\", that);", "+        !index.getSymbolData().isAssignableTo(SymbolData.INT_TYPE, JAVA_VERSION)) {", "+      _addError(\"You cannot reference an array element with an index of type \" + index.getSymbolData().getName() + ", "+                \".  Instead, you must use an int\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5cbe0243bbd704dc940604cb132d681", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "diff": ["-   */", "+    */", "-    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + \", because it is a class name not an instance\", that)) {", "-      if (!value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + value_result.getName(), that);", "+    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + ", "+                           \", because it is a class name not an instance\", that)) {", "+      if (!value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+        _addError(\"You cannot increment or decrement something that is not a number type.\" + ", "+                  \"  You have specified something of type \" + value_result.getName(), that);"]}], "num": 6462}
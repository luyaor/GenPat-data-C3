{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c8b2900f14a17d8e1d5f77e43b5c634", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d5dea726082162558c40eaa5677dcd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitPanel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void setJUnitInProgress(OpenDefinitionsDocument odd)", "signatureAfterChange": "     public void setJUnitInProgress()", "diff": ["+    /** Puts the error pane into \"compilation in progress\" state. */", "+    public void setJUnitInProgress() {", "+      progressReset(0);", "+      DefaultStyledDocument doc = new DefaultStyledDocument();", "+      _checkSync(doc);", "+", "+      try {", "+        doc.insertString(doc.getLength(),", "+                         \"Testing in progress, please wait...\\n\",", "+                         NORMAL_ATTRIBUTES);", "+      }", "+      catch (BadLocationException ble) {", "+        throw new UnexpectedException(ble);", "+      }", "+      setDocument(doc);", "+", "+      selectNothing();", "-    /** Puts the error pane into \"compilation in progress\" state. */", "-    public void setJUnitInProgress(OpenDefinitionsDocument odd) {", "-      _docBeingTested = odd;", "-      _errorListPositions = new Position[0];", "-      progressReset(0);", "-", "-      DefaultStyledDocument doc = new DefaultStyledDocument();", "-      _checkSync(doc);", "-      ", "-      try {", "-        doc.insertString(doc.getLength(),", "-                         \"Testing in progress, please wait...\\n\",", "-                         NORMAL_ATTRIBUTES);", "-      }", "-      catch (BadLocationException ble) {", "-        throw new UnexpectedException(ble);", "-      }", "-      setDocument(doc);", "-", "-      selectNothing();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63e2ea26390935e4cd2531fe3e780e06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "11a167d5b0a97e55aef4d62ed18d4da71e30b762", "commitAfterChange": "a32847752bc1c4d9a9c65da4d91d56e3d8a61fa6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private TestDocGetter(File[] files, String[] texts)", "signatureAfterChange": "   public void testConstructOnlyWarnings()", "diff": ["+   */", "+  public void testConstructOnlyWarnings() {", "+    getter = new TestDocGetter();", "+    errors = new CompilerError[]", "+    { new CompilerError(\"Test warning without File\", true),", "+      new CompilerError(\"Test warning without File\", true) };", "+    model = new CompilerErrorModel<CompilerError>(errors, getter);", "+    ", "+    // We successfully built the model, now test the basics.", "+    assertEquals(\"Should have 2 compiler errors.\", 2, model.getNumErrors());", "+    assertTrue(\"hasOnlyWarnings should return true.\", model.hasOnlyWarnings());", "-     */", "-    private TestDocGetter(File[] files, String[] texts) {", "-      if (files.length != texts.length) {", "-        throw new IllegalArgumentException(\"Argument arrays must match in size.\");", "-      }", "-      ", "-      docs = new HashMap<File, OpenDefinitionsDocument>(texts.length * 2);", "-      ", "-      EventNotifier en = new EventNotifier();", "-      for (int i = 0; i < texts.length; i++) {", "-        DefinitionsDocument doc = new DefinitionsDocument(en);", "-        doc.setFile(files[i]);", "-        try {", "-          doc.insertString(0, texts[i], null);", "-        }", "-        catch (BadLocationException e) {", "-          throw new UnexpectedException(e);", "-        }", "-        docs.put(files[i], new TestOpenDoc(doc));", "-      }", "-    }"]}], "num": 6231}
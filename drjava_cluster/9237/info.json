{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bafc58d4ba995fdb55148a895009c33a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "287cefb3a2f418b79edcd9e338590862", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public <T> VectorOption(String key)", "signatureAfterChange": "     private VectorOption(String key, ParseStrategy<T> parser, FormatStrategy<T> formatter,     String header, char delim, String footer)", "diff": ["-   */", "-  public <T> VectorOption(String key) { super(key); }", "+     */", "+    private VectorOption(String key, ParseStrategy<T> parser, FormatStrategy<T> formatter,", "+    String header, char delim, String footer) {", "+ super(key); ", "+ this.parser = parser;", "+ this.formatter = formatter;", "+ this.header = header;", "+ this.delim = delim;", "+ this.footer = footer;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdc7fcf2eb9949f6ca5399f12477f249", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 348, "signatureBeforeChange": "              public LookupMethod(final boolean includePrivate)", "signatureAfterChange": "     public InstantiatedMethod(DJMethod m, Iterable<VariableType> classTParams, Iterable<? extends Type> classTArgs)", "diff": ["+    private final Iterable<VariableType> _tparams;", "+    public InstantiatedMethod(DJMethod m, Iterable<VariableType> classTParams, Iterable<? extends Type> classTArgs) {", "+      super(m);", "+      Pair<Iterable<VariableType>, SubstitutionMap> p = instantiateTypeParameters(m, classTParams, classTArgs);", "+      _tparams = p.first();", "+      _sigma = p.second();", "+    }", "-      ", "-      public LookupMethod(final boolean includePrivate) {", "-        _matchMethod = new Predicate<DJMethod>() {", "-          public boolean contains(DJMethod m) {", "-            if (m.declaredName().equals(name)) {", "-              return includePrivate || !m.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }", "-        };", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff4457ea490d44209bc37f61a2a26716", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 301, "signatureBeforeChange": "              @Override public Iterable<ObjectMethodInvocation> forSimpleClassType(final SimpleClassType t)", "signatureAfterChange": "          public FunctionInvocationCandidate(Function f, Iterable<? extends Type> targs,                                        Iterable<? extends Expression> args, Option<Type> expected)", "diff": ["+    ", "+    public FunctionInvocationCandidate(Function f, Iterable<? extends Type> targs,", "+                                       Iterable<? extends Expression> args, Option<Type> expected) {", "+      _f = f;", "+      _matcher = makeMatcher(f.declaredTypeParameters(), targs, parameterTypes(), args, f.returnType(), expected);", "+    }", "-      ", "-      @Override public Iterable<ObjectMethodInvocation> forSimpleClassType(final SimpleClassType t) {", "-        Iterable<DJMethod> methods = IterUtil.filter(t.ofClass().declaredMethods(), _matchMethod);", "-//        System.out.println(\"Matching methods in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(matchingMethods));", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m),", "-                               args, m.returnType(), expected);", "-          }", "-        };", "-        Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation> makeResult = ", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type returned = substitute(m.returnType(), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(methods, makeChecker, makeResult);", "-      }"]}], "num": 9237}
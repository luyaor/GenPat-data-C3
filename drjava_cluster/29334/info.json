{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c036720e9cbe269acd097978a2e73fb6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5860e02864fb0a5e53fa25bf47e62238", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "fbaecba32a4936f7aab208313b312f73181698a7", "commitAfterChange": "6bd1f449c6b6476464bf38d05b5455668d0d2ac5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["+    // Test the resize cache method by increasing the size of the cache to 5, which is still less than the number of open documents: 6", "+    _cache.setCacheSize(5); // 4 3 5 6 | 2 1 ", "+    assertEquals(\"The cache size should now be 5\", 5, _cache.getCacheSize());", "+    assertEquals(\"There should still only be 4 files in the cache\", 4, _cache.getNumInCache());", "+    ", "+    doc2.getLength(); // 2 4 3 5 6 | 1", "+    assertTrue(\"The document 2 should now be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());", "+    assertEquals(\"There should be 5 documents in the cache\", 5, _cache.getNumInCache());", "+    ", "+    _cache.setCacheSize(3); // 2 4 3 | 5 6 1", "+    ", "+    assertEquals(\"The cache size should now be 3\", 3, _cache.getCacheSize());", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "+    assertTrue(\"The document 2 should be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"The document 4 should be in the cache\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"The document 3 should be in the cache\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"The document 5 should now be out of the cache\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"The document 6 should now be out of the cache\", _adapterTable.get(doc6).isReady());", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd4872450301b73715b35ce190b9e8d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testGetDDocFromCache() throws BadLocationException, IOException, OperationCanceledException", "signatureAfterChange": "      public void testGetDDocFromCache() throws BadLocationException, IOException, OperationCanceledException", "diff": ["-    assertTrue(\"The document should not start out in the cache\", _cache.isDDocInCache(doc1));", "+    assertTrue(\"The document should not start out in the cache\", _adapterTable.get(doc1).isReady());", "-    assertTrue(\"The document should not start out in the cache\", _cache.isDDocInCache(doc2));", "+    assertTrue(\"The document should not start out in the cache\", _adapterTable.get(doc2).isReady());", "-    assertTrue(\"The document should not start out in the cache\", _cache.isDDocInCache(doc3));", "+    assertTrue(\"The document should not start out in the cache\", _adapterTable.get(doc3).isReady());", "-    assertTrue(\"The document should not start out in the cache\", _cache.isDDocInCache(doc4));", "+    assertTrue(\"The document should not start out in the cache\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"The document should not start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc1));", "+    assertTrue(\"The document should not start out in the cache\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"The document should not start out in the cache\", _adapterTable.get(doc1).isReady());", "-    assertTrue(\"The document should not start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc2));", "+    assertTrue(\"The document should not start out in the cache\", _adapterTable.get(doc6).isReady());", "+    assertFalse(\"The document should not start out in the cache\", _adapterTable.get(doc2).isReady());"]}], "num": 29334}
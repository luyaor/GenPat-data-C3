{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69fc81191be74c3a11c758d491db566a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a71a27ad70c22dfd5b65ad96e4d183", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public String getEnclosingClassName(int pos, boolean qual) throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public String getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException,      ClassNameNotFoundException", "diff": ["-  public String getEnclosingClassName(int pos, boolean qual) throws BadLocationException, ClassNameNotFoundException {    ", "+  public String getEnclosingClassName(final int pos, final boolean qual) throws BadLocationException, ", "+    ClassNameNotFoundException {    ", "+    ", "-    final StringBuilder keyBuf = new StringBuilder(\"getEnclosingClassName:\").append(pos);", "-    keyBuf.append(\":\").append(qual);", "-    String key = keyBuf.toString();", "-    String cached = (String) _checkCache(key);", "+    final Query key = new Query.EnclosingClassName(pos, qual);", "+    final String cached = (String) _checkCache(key);", "-    char[] delims = {'{','}','(',')','[',']','+','-','/','*',';',':','=',", "-      '!','@','#','$','%','^','~','\\\\','\"','`','|'};", "+    final char[] delims = {'{','}','(',')','[',']','+','-','/','*',';',':','=','!','@','#','$','%','^','~','\\\\','\"','`','|'};", "-      String text = getText(DOCSTART, pos+1);", "+      ", "+      final String text = getText(0, pos + 1);  // includes char at (to the right of) position pos", "-        if ((text.charAt(curPos)!='{') || (text.charAt(curPos)!='}')) { ++curPos; }", "+        if (text.charAt(curPos) != '{' || text.charAt(curPos) != '}') ++curPos;", "-        if (curPos==ERROR_INDEX) { break; }", "+        if (curPos == -1) { break; }", "-        int newPos = ERROR_INDEX;", "+        int newPos = -1;", "-        if ((closeParenPos!=ERROR_INDEX) && (text.charAt(closeParenPos)==')')) {", "+        if (closeParenPos != -1 && text.charAt(closeParenPos) == ')') {", "-          if ((openParenPos!=ERROR_INDEX) && (text.charAt(openParenPos)=='(')) {", "+          if (openParenPos != -1 && text.charAt(openParenPos) == '(') {", "-              newPos = ERROR_INDEX;", "+              newPos = -1;", "-        while((classPos!=ERROR_INDEX) || (interPos!=ERROR_INDEX) || (newPos!=ERROR_INDEX)) {", "-          if (newPos!=ERROR_INDEX) {", "+        while (classPos != -1 || interPos != -1 || newPos != -1) {", "+          if (newPos != -1) {", "-            classPos = ERROR_INDEX;", "-            interPos = ERROR_INDEX;", "+            classPos = -1;", "+            interPos = -1;", "-          else if ((otherPos>classPos) && (otherPos>interPos)) {", "-            if ((text.charAt(otherPos)!='{') || (text.charAt(otherPos)!='}')) { ++otherPos; }", "+          else if (otherPos > classPos && otherPos > interPos) {", "+            if (text.charAt(otherPos) != '{' || text.charAt(otherPos) != '}') ++otherPos;", "-            newPos = ERROR_INDEX;", "+            newPos = -1;", "-//            if (closeParenPos!=ERROR_INDEX) if (oldLog) System.out.println(\"nonWS before curPos = \" + closeParenPos + ", "+//            if (closeParenPos!=ERROR_INDEX (-1)) if (oldLog) System.out.println(\"nonWS before curPos = \" + closeParenPos + ", "-            if ((closeParenPos!=ERROR_INDEX) && (text.charAt(closeParenPos)==')')) {", "+            if (closeParenPos != -1 && text.charAt(closeParenPos) == ')') {", "-              if ((openParenPos!=ERROR_INDEX) && (text.charAt(openParenPos)=='(')) {", "+              if (openParenPos != -1 && text.charAt(openParenPos) == '(') {", "-                if (_isAnonymousInnerClass(newPos, curPos)) {", "-                  // yes, anonymous inner class", "-                }", "-                else {", "-                  newPos = ERROR_INDEX;", "-                }", "+                if (! _isAnonymousInnerClass(newPos, curPos)) newPos = -1;", "-        if ((classPos!=ERROR_INDEX) || (interPos!=ERROR_INDEX)) {", "-          if (classPos>interPos) {", "-            // class found first", "-            curPos += \"class\".length();", "-          }", "-          else {", "-            // interface found first", "-            curPos += \"interface\".length();", "-          }", "+        if (classPos != -1 || interPos != -1) {", "+          if (classPos > interPos) curPos += \"class\".length();  // class found first", "+          else curPos += \"interface\".length();                  // interface found first", "+          ", "-          if (nameStart==ERROR_INDEX) { throw new ClassNameNotFoundException(\"Cannot determine enclosing class name\"); }", "-          int nameEnd = nameStart+1;", "-          while(nameEnd<text.length()) {", "-            if ((!Character.isJavaIdentifierPart(text.charAt(nameEnd))) && (text.charAt(nameEnd)!='.')) {", "-              // delimiter found", "-              break;", "-            }", "+          if (nameStart==-1) { throw new ClassNameNotFoundException(\"Cannot determine enclosing class name\"); }", "+          int nameEnd = nameStart + 1;", "+          while (nameEnd < text.length()) {", "+            if (! Character.isJavaIdentifierPart(text.charAt(nameEnd)) && text.charAt(nameEnd) != '.') break;", "-        else if (newPos!=ERROR_INDEX) {", "+        else if (newPos != -1) {", "-        else {", "-          // neither class nor interface found", "-          break;", "-        }", "+        else break; // neither class nor interface found (exiting loop if qual == true)", "-    if (name.length()>0) name = name.substring(0, name.length()-1);", "+    if (name.length() > 0) name = name.substring(0, name.length() - 1);", "+    _storeInCache(key, name, pos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9d24faebc580610a748ffe8d2af297", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   int _getAnonymousInnerClassIndex(int pos) throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException", "diff": ["-  int _getAnonymousInnerClassIndex(int pos) throws BadLocationException, ClassNameNotFoundException {   ", "+  int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException {   ", "-    final StringBuilder keyBuf = new StringBuilder(\"_getAnonymousInnerClassIndex:\").append(pos);", "-    final String key = keyBuf.toString();", "+    final Query key = new Query.AnonymousInnerClassIndex(pos);", "-    // acquireReadLock assumed to be held", "-    --pos; // move outside the curly brace", "-    char[] delims = {'{','}','(',')','[',']','+','-','/','*',';',':','=',", "-      '!','@','#','$','%','^','~','\\\\','\"','`','|'};", "-    String className = getEnclosingClassName(pos, true);", "-    String text = getText(DOCSTART, pos);", "+    // readLock assumed to be held", "+    int newPos = pos - 1; // move outside the curly brace", "+    final char[] delims = {'{','}','(',')','[',']','+','-','/','*',';',':','=','!','@','#','$','%','^','~','\\\\','\"','`','|'};", "+    final String className = getEnclosingClassName(newPos, true);", "+    final String text = getText(0, newPos);  // why exclude char before curly brace?", "-    int newPos = pos;", "+    ", "-    while ((newPos = _findPrevKeyword(text, \"new\", newPos - 1)) != ERROR_INDEX) {", "+    while ((newPos = _findPrevKeyword(text, \"new\", newPos - 1)) != -1) {", "-      if (classStart == ERROR_INDEX) { continue; }", "+      if (classStart == -1) { continue; }", "-      if (parenStart == ERROR_INDEX) { continue; }", "+      if (parenStart == -1) { continue; }", "-        parenStart = ERROR_INDEX;", "+        parenStart = -1;", "-        if (closePointyBracket != ERROR_INDEX) {", "+        if (closePointyBracket != -1) {", "-      if (parenStart == ERROR_INDEX) { continue; }      ", "+      if (parenStart == -1) { continue; }      ", "-      if (nextOpenSquiggly == ERROR_INDEX) { continue; }", "+      if (nextOpenSquiggly == -1) { continue; }", "-    _storeInCache(key, index, pos);", "+    _storeInCache(key, index, pos - 1);"]}], "num": 26183}
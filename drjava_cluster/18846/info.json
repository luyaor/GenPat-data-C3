{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5782b7c8e9c29eed3b49d2fd76a5aca3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01c388912ef63aabf65f97e4310d48c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public void testGotoFileUnderCursorAppendJava() throws IOException", "signatureAfterChange": "   public void testGotoFileUnderCursorAppendJava() throws IOException", "diff": ["+    Utilities.clearEventQueue();", "+    ", "+     ", "+    Utilities.clearEventQueue();", "+    ", "+    Utilities.clearEventQueue();", "+    ", "+    ", "+    Utilities.clearEventQueue();", "+    ", "+    _log.log(\"gotoFileUnderCursorAppendJava completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0262fd8aaec5010ee6fe30fa03bc9e0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void nextInteraction()", "signatureAfterChange": "   public void nextInteraction()", "diff": ["-//    _doc.acquireWriteLock();", "-//    try {", "-    if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }", "-    _currentInteraction++;", "-    _showCurrentInteraction();", "-    _passedCurrent = false;", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try {", "+      if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }", "+      _currentInteraction++;", "+      _showCurrentInteraction();", "+      _passedCurrent = false;", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "029a5e91abdf83dce673c78b2d6b95a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   synchronized public void javadocEnded(boolean success, File destDir)", "signatureAfterChange": "   public void javadocEnded(boolean success, File destDir)", "diff": ["-  synchronized public void javadocEnded(boolean success, File destDir) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).javadocEnded(success, destDir);", "+  public void javadocEnded(boolean success, File destDir) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).javadocEnded(success, destDir);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04890a10d8602f1f8861345a4046b144", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   synchronized public void saveBeforeJUnit()", "signatureAfterChange": "   public void saveBeforeJUnit()", "diff": ["-  synchronized public void saveBeforeJUnit() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).saveBeforeJUnit();", "+  public void saveBeforeJUnit() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).saveBeforeJUnit();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05079d7e3ff180b93fd9029f570c47b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   synchronized public void interpreterResetting()", "signatureAfterChange": "   public void interpreterResetting()", "diff": ["-  synchronized public void interpreterResetting() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interpreterResetting();", "+  public void interpreterResetting() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interpreterResetting();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06558bfcf830daf87c745b4b658242da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   @Override public TypeContext visit(ImportDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(ImportDeclaration node)", "diff": ["-        if (ts.containsStaticField(t, member)) { result = result.importField(t.ofClass(), member); }", "-        if (ts.containsStaticMethod(t, member)) { result = result.importMethod(t.ofClass(), member); }", "-        if (ts.containsStaticClass(t, member)) { result = result.importMemberClass(t.ofClass(), member); }", "+        if (ts.containsStaticField(t, member, context.accessModule())) {", "+          result = result.importField(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticMethod(t, member, context.accessModule())) {", "+          result = result.importMethod(t.ofClass(), member);", "+        }", "+        if (ts.containsStaticClass(t, member, context.accessModule())) {", "+          result = result.importMemberClass(t.ofClass(), member);", "+        }", "-            if (ts.containsClass(t, split.second())) {", "+            if (ts.containsClass(t, split.second(), context.accessModule())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06cfa7e0775f38ff710e5ede8d4b8c00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private int _getLineFirstCharPos(int pos) throws BadLocationException", "signatureAfterChange": "   private int _getLineFirstCharPos(int pos) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-    return _doc._getLineFirstCharPos(pos); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._getLineFirstCharPos(pos); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0761f6277d3e0170d264b50dd4451440", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   synchronized public void interpreterResetFailed()", "signatureAfterChange": "   public void interpreterResetFailed()", "diff": ["-  synchronized public void interpreterResetFailed() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interpreterResetFailed();", "+  public void interpreterResetFailed() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interpreterResetFailed();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0798f3bc7251a2ce082f3b594218f4de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileFailsCorrectLineNumbers() throws BadLocationException, IOException, InterruptedException", "diff": ["+    debug.logStart();", "+    ", "+    debug.log(\"Before wait\");", "+    debug.log(\"After wait\");", "+    ", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cbb35f173aef61ae8456817bb88eeb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      public void testPromptListClearedOnReset() throws Exception", "signatureAfterChange": "      public void testPromptListClearedOnReset() throws Exception", "diff": ["+    ", "+    Utilities.clearEventQueue();", "-    ", "-    assertEquals(\"PromptList before insert should contain 0 elements\",", "-                 0, _pane.getPromptList().size());", "+    _pane.resetPrompts();", "+", "+    Utilities.clearEventQueue();", "+//    System.err.println(_pane.getPromptList());", "+    assertEquals(\"PromptList before insert should contain 0 elements\", 0, _pane.getPromptList().size());", "-    assertEquals(\"PromptList after insert should contain 1 element\",", "-                 1, _pane.getPromptList().size());    ", "+    Utilities.clearEventQueue();", "+    assertEquals(\"PromptList after insert should contain 1 element\", 1, _pane.getPromptList().size());    ", "-    assertEquals(\"PromptList after insertion of new prompt should contain 2 elements\",", "-                 2, _pane.getPromptList().size());", "+    ", "+    Utilities.clearEventQueue();", "+    assertEquals(\"PromptList after insertion of new prompt should contain 2 elements\", 2, _pane.getPromptList().size());", "-      assertEquals(\"PromptList after reset should contain no elements\",", "-                   0, _pane.getPromptList().size());", "+      assertEquals(\"PromptList after reset should contain no elements\", 0, _pane.getPromptList().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f6a146e5069f1a460afe4d0bc03c243", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   synchronized public void notifyListeners(Notifier n)", "signatureAfterChange": "   public void notifyListeners(Notifier n)", "diff": ["-  synchronized public void notifyListeners(Notifier n) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      n.notifyListener(_listeners.get(i));", "+  public void notifyListeners(Notifier n) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        n.notifyListener(_listeners.get(i));", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "149d5d0ef2f38fe5656cde76283a3138", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   synchronized public void fileReverted(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void fileReverted(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void fileReverted(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).fileReverted(doc);", "+  public void fileReverted(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).fileReverted(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a00d60e16900ff05b82f50a55020ab4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "00b5c4e914866741baa2d58ad17c19e108886d75", "commitAfterChange": "ec045ca8190687a0ee8a1dc849cafae836d6b28c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void resetInteractions(File wd, boolean forceReset)", "signatureAfterChange": "   public void resetInteractions(File wd, boolean forceReset)", "diff": ["+    debug.logStart();", "+      debug.log();", "+      debug.logEnd();", "+    debug.log();", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dbfb0f070827f6969843c2e882d466c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleQuestion.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   boolean testApplyRule(AbstractDJDocument doc, int pos, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean testApplyRule(AbstractDJDocument doc, int pos, Indenter.IndentReason reason)", "diff": ["-//    doc.acquireReadLock();", "-//    try { ", "-    return applyRule(doc, pos, reason); ", "-//    }", "-//    finally { doc.releaseReadLock(); }", "+    doc.acquireReadLock();", "+    try { return applyRule(doc, pos, reason); }", "+    finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e9865d5ed3623966225a58769c002f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   synchronized public void junitTestEnded(OpenDefinitionsDocument doc, String name, boolean wasSuccesful, boolean causedError)", "signatureAfterChange": "   public void junitTestEnded(OpenDefinitionsDocument doc, String name, boolean wasSuccesful, boolean causedError)", "diff": ["-  synchronized public void junitTestEnded(OpenDefinitionsDocument doc, String name, boolean wasSuccesful, boolean causedError) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).junitTestEnded(doc, name, wasSuccesful, causedError);", "+  public void junitTestEnded(OpenDefinitionsDocument doc, String name, boolean wasSuccesful, boolean causedError) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).junitTestEnded(doc, name, wasSuccesful, causedError);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2623c254afbce4497bfc7e20aa740c52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   synchronized public void junitTestStarted(String name)", "signatureAfterChange": "   public void junitTestStarted(String name)", "diff": ["-  synchronized public void junitTestStarted(String name) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).junitTestStarted(name);", "+  public void junitTestStarted(String name) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).junitTestStarted(name);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29a1477117568bff8496bc611f247482", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 230, "methodNumberAfterChange": 231, "signatureBeforeChange": "   private void _openProjectHelper(File projectFile)", "signatureAfterChange": "   private void _openProjectHelper(File projectFile)", "diff": ["+      _mainListener.resetFNFCount();", "+      if (_mainListener.filesNotFound()) _model.setProjectChanged(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29a14c0984bb69eaababff9add08f84e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleWithTrace.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean testIndentLine(AbstractDJDocument doc, int pos, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean testIndentLine(AbstractDJDocument doc, int pos, Indenter.IndentReason reason)", "diff": ["-//    doc.acquireWriteLock();", "-//    try { ", "-      return indentLine(doc, pos, reason); ", "-//    }", "-//    finally { doc.releaseWriteLock(); }", "+    doc.acquireWriteLock();", "+    try { return indentLine(doc, pos, reason); }", "+    finally { doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a992e46e0e079668567bc1f354309d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "098be4c27233835145531c86355bc697a3b62bfd", "commitAfterChange": "28db8fb2942dc00cad50f5244fe215d573867721", "methodNumberBeforeChange": 571, "methodNumberAfterChange": 571, "signatureBeforeChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "diff": ["-      scrollToDocumentAndOffset(doc, doc.getOffset(lineNumber), shouldHighlight);", "+      doc.acquireReadLock();", "+      try { scrollToDocumentAndOffset(doc, doc._getOffset(lineNumber), shouldHighlight); }", "+      finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2ec1f4011ffceea049542e7adb285f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleQuestion.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean testIndentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean testIndentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-//    doc.acquireWriteLock();", "-//    try { ", "-    return indentLine(doc, reason); ", "-//    }", "-//    finally { doc.releaseWriteLock(); }", "+    doc.acquireWriteLock();", "+    try { return indentLine(doc, reason); }", "+    finally { doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6d2f2c3cc14af5721350baec1913ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   private int _findPrevDelimiter(int pos, char[] delimiters) throws BadLocationException", "signatureAfterChange": "   private int _findPrevDelimiter(int pos, char[] delimiters) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-      return _doc._findPrevDelimiter(pos, delimiters); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._findPrevDelimiter(pos, delimiters); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f19135e7b460f33d5eb2cc9e87f8489", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void nextInteraction()", "signatureAfterChange": "   public void nextInteraction()", "diff": ["-   */", "+  /** Enters the next interaction into the interactions pane. Should only run in the event thread. */", "-    if (!hasNextInteraction()) {", "-      throw new IllegalStateException(\"There is no next interaction!\");", "+    _doc.acquireWriteLock();", "+    try {", "+      if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }", "+      _currentInteraction++;", "+      _showCurrentInteraction();", "+      _passedCurrent = false;", "-    _currentInteraction++;", "-    _showCurrentInteraction();", "-    _passedCurrent = false;", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "318a79ca2fcdb17877979b5985560f83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractDJPane.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void setCaretPos(int pos)", "signatureAfterChange": "   public void setCaretPos(int pos)", "diff": ["-//    doc.acquireReadLock();", "-//    try {", "-    int len = doc.getLength();", "-    if (pos > len) {", "-      setCaretPosition(len);", "-      return;", "+    doc.acquireReadLock();", "+    try {", "+      int len = doc.getLength();", "+      if (pos > len) {", "+        setCaretPosition(len);", "+        return;", "+      }", "+      setCaretPosition(pos);", "-    setCaretPosition(pos);", "-//    }", "-//    finally { doc.releaseReadLock(); }", "+    finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "379ee2a984885ac53148f3391b617569", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "commitAfterChange": "c2cccf3d2cd557fff7d01a0111e1dc7df943b427", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-      int position = _pane.getCaretPosition();", "-      if (position < _doc.getPromptPos()) moveToPrompt();", "-      else if (position == _doc.getPromptPos())_pane.getBeep().run();", "-      else // position > _doc.getPromptPos()", "-        _pane.setCaretPosition(position - 1);", "+      _doc.acquireReadLock(); ", "+      try {", "+        int position = _pane.getCaretPosition();", "+        if (position < _doc.getPromptPos()) moveToPrompt();", "+        else if (position == _doc.getPromptPos())_pane.getBeep().run();", "+        else // position > _doc.getPromptPos()", "+          _pane.setCaretPosition(position - 1);", "+      }", "+      finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40b9e0f2b0733a75192abd4417c640be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,      InterruptedException", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,  InterruptedException", "diff": ["-  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException, ", "-    InterruptedException {", "+  protected void doCompile(OpenDefinitionsDocument doc, File file) throws IOException,  InterruptedException {", "-    // Perform a mindless interpretation to force interactions to reset.", "-    //  (only to simplify this method)", "-    try { interpret(\"2+2\"); }", "-    catch (EditDocumentException e) {", "-      throw new UnexpectedException(e);", "-    }", "-", "-    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "+    // Perform a mindless interpretation to force interactions to reset (only to simplify this method)", "+    try { interpret(\"0\"); }", "+    catch (EditDocumentException e) { throw new UnexpectedException(e); }", "+    Utilities.clearEventQueue();", "+    ", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "-    synchronized(listener) {", "-      doc.startCompile();", "-      if (_model.getCompilerModel().getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "-      while (listener.notDone()) listener.wait();", "+    ", "+    listener.logCompileStart();", "+", "+    doc.startCompile();", "+    Utilities.clearEventQueue();", "+    ", "+    if (_model.getCompilerModel().getNumErrors() > 0) {", "+      fail(\"compile failed: \" + getCompilerErrorString());", "+    listener.waitCompileDone();", "+", "+    ", "+    listener.waitResetDone();", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41adb9e8dc27b7f9e72b648327a9ea9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/BraceInfoTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void _lineEnclosingBraceTestHelper(int location, String msg, int expDist, String expBraceType)", "signatureAfterChange": "      private void _lineEnclosingBraceTestHelper(int location, String msg, int expDist, String expBraceType)", "diff": ["-//    _document.acquireReadLock();", "-//    try {", "-    _document.setCurrentLocation(location);", "-    //_reduced = _document.getReduced();", "-    BraceInfo info = _document._getLineEnclosingBrace();", "-    assertEquals(msg + \": distance\", expDist, info.distance());", "-    assertEquals(msg + \": braceType\", expBraceType, info.braceType());", "-//    }", "-//    finally { _document.releaseReadLock(); }", "+    _document.acquireReadLock();", "+    try {", "+      _document.setCurrentLocation(location);", "+      //_reduced = _document.getReduced();", "+      BraceInfo info = _document._getLineEnclosingBrace();", "+      assertEquals(msg + \": distance\", expDist, info.distance());", "+      assertEquals(msg + \": braceType\", expBraceType, info.braceType());", "+    }", "+    finally { _document.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f4492484a2637eb23d1b370894fcb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   synchronized public void saveBeforeCompile()", "signatureAfterChange": "   public void saveBeforeCompile()", "diff": ["-  synchronized public void saveBeforeCompile() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).saveBeforeCompile();", "+  public void saveBeforeCompile() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).saveBeforeCompile();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b68e72bba7dfd9308f75284da71c37", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/Log.java", "commitBeforeChange": "1e77c64ba83c36855cc971f17dd702002ed1f841", "commitAfterChange": "7f1dfe0049dc6481ecb6545fa089b139bb9c72af", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public Log(File f, boolean isEnabled)", "signatureAfterChange": "      public Log(File f, boolean isEnabled)", "diff": ["+    DATE_FORMAT.setTimeZone(TimeZone.getTimeZone(\"GMT\"));", "+    DATE_FORMAT.setLenient(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ce4eff03bc7f987e86d650235efe0d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean hasNextInteraction()", "signatureAfterChange": "   public boolean hasNextInteraction()", "diff": ["-   */", "-  public boolean hasNextInteraction() {", "-    return _currentInteraction < _interactions.size() - 1;", "-  }", "+  /** @return true iff this script has another interaction to perform. */", "+  public boolean hasNextInteraction() {", "+    _doc.acquireReadLock();", "+    try { return _currentInteraction < _interactions.size() - 1; }  // what if _passedCurrent == true?", "+    finally { _doc.releaseReadLock(); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5347e4226d168feea9b23e7dce58ddbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void _indentLine(Indenter.IndentReason reason)", "signatureAfterChange": "   private void _indentLine(Indenter.IndentReason reason)", "diff": ["-//    _doc.acquireWriteLock();", "-//    try { ", "-    _doc._indentLine(reason); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try { _doc._indentLine(reason); }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5623b5b53434fcdd920bbcc2694da5da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "signatureAfterChange": "   public void testCaretUpdatedOnInsert() throws EditDocumentException", "diff": ["+    Utilities.clearEventQueue();", "+    assertEquals(\"caret should be at end of document\", _doc.getLength(), _pane.getCaretPosition());", "+       ", "-", "-     Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "-    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos+1); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(newPos + 1); } });", "+    Utilities.clearEventQueue();", "-    assertEquals(\"caret should be immediately after the d\", newPos + 1, _pane.getCaretPosition());", "+    assertEquals(\"caret should be one char after the d\", newPos + 2, _pane.getCaretPosition());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "586438172a816e4c5c517039516fd028", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e8f48651b4fb31b2a1907635fbd654b3f66a98b2", "commitAfterChange": "2499b0018a7f137bb1baaaf2d077c26486e3f12e", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 203, "signatureBeforeChange": "   private JMenu _setUpProjectMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpProjectMenu(int mask)", "diff": ["+    // run project", "+    _runProjectAction.setEnabled(false);", "+    projectMenu.add(_runProjectAction);", "+    ", "+    projectMenu.addSeparator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599866c698c531efb25c096a1fc2a0e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JavadocDialog.java", "commitBeforeChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "commitAfterChange": "a6f0da7db6181f31273ee7bf3cfd92ed3fabb503", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public File getDirectory(File start) throws OperationCanceledException", "signatureAfterChange": "   public File getDirectory(File start) throws OperationCanceledException", "diff": ["+      // The \"always prompt\" checkbox should be checked", "+      _checkBox.setSelected(true);", "+      ", "-    ", "+      ", "+      // See if the user wants to suppress this dialog in the future.", "+      if (!_checkBox.isSelected()) {", "+        config.setSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "+                          Boolean.FALSE);", "+      }", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc7b2ffdd5182cd4d8a099fdde156d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   synchronized public void interpreterExited(int status)", "signatureAfterChange": "   public void interpreterExited(int status)", "diff": ["-  synchronized public void interpreterExited(int status) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interpreterExited(status);", "+  public void interpreterExited(int status) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interpreterExited(status);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c54a23c5ea33e9d70838203bb51abb7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void testGlassPaneHidesKeyEvents()", "signatureAfterChange": "   public void testGlassPaneHidesKeyEvents()", "diff": ["-        ", "+        _frame.validate();", "-        ", "+        _frame.validate();", "+    Utilities.clearEventQueue();", "+        _frame.validate();", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "603bcf6750c58fb69b5e8e56b5265f0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 601, "methodNumberAfterChange": 609, "signatureBeforeChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "signatureAfterChange": "     public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight)", "diff": ["-//      doc.acquireReadLock();", "-//      try { ", "-      scrollToDocumentAndOffset(doc, doc._getOffset(lineNumber), shouldHighlight); ", "-//      }", "-//      finally { doc.releaseReadLock(); }", "+      doc.acquireReadLock();", "+      try { scrollToDocumentAndOffset(doc, doc._getOffset(lineNumber), shouldHighlight); }", "+      finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63e195a681f232044a44f1d9d5fe6fcf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   synchronized public void undoableEditHappened()", "signatureAfterChange": "   public void undoableEditHappened()", "diff": ["-  synchronized public void undoableEditHappened() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).undoableEditHappened();", "+  public void undoableEditHappened() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).undoableEditHappened();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "663f6d84d9afdc4757aae90191d7a1b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private int _getLineStartPos(int pos) throws BadLocationException", "signatureAfterChange": "   private int _getLineStartPos(int pos) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-      return _doc._getLineStartPos(pos); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._getLineStartPos(pos); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "692b320039e4eaa49740cd261783ae75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   synchronized public void interactionErrorOccurred(int offset, int length)", "signatureAfterChange": "   public void interactionErrorOccurred(int offset, int length)", "diff": ["-  synchronized public void interactionErrorOccurred(int offset, int length) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interactionErrorOccurred(offset, length);", "+  public void interactionErrorOccurred(int offset, int length) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interactionErrorOccurred(offset, length);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a92a4d5d8318c3ea3b24826c901cb46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "   synchronized public boolean canAbandonFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean canAbandonFile(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public boolean canAbandonFile(OpenDefinitionsDocument doc) {", "-    boolean poll = true;", "-    int size = _listeners.size();", "-    for(int i = 0; (poll && (i < size)); i++) {", "-      poll = poll && _listeners.get(i).canAbandonFile(doc);", "+  public boolean canAbandonFile(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      boolean poll = true;", "+      int size = _listeners.size();", "+      for(int i = 0; (poll && (i < size)); i++) {", "+        poll = poll && _listeners.get(i).canAbandonFile(doc);", "+      }", "+      return poll;", "-    return poll;", "+    finally {", "+      _lock.endRead();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6add2739b4eb37e7540824723f4565e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "commitAfterChange": "c2cccf3d2cd557fff7d01a0111e1dc7df943b427", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-      int position = _pane.getCaretPosition();", "-      if (position < _doc.getPromptPos()) moveToPrompt();", "-      else _pane.getBeep().run();", "+      _doc.acquireReadLock();", "+      try {", "+        int position = _pane.getCaretPosition();", "+        if (position < _doc.getPromptPos()) moveToPrompt();", "+        else _pane.getBeep().run();", "+      }", "+      finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6be1c68177058a41f5c4d30bd671a386", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["+    _machine.setSearchBackwards(false);", "+    _findLabelBot.setText(\"Next\");", "+", "+                                                           _ignoreTestCases.isSelected(),", "-            _machine.getIgnoreCommentsAndStrings(),startDoc, rm, panel);", "+            _machine.getIgnoreCommentsAndStrings(), _ignoreTestCases.isSelected(), startDoc, rm, panel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c260f8ae21e18b275ac6c5983591b11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private void indentLines(int startSel, int endSel)", "signatureAfterChange": "   private void indentLines(int startSel, int endSel)", "diff": ["-//    _doc.acquireWriteLock();", "-//    try { ", "-      _doc.indentLines(startSel, endSel); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try { _doc.indentLines(startSel, endSel); }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb559e75d7a913f24dc3cb2d6aeaa24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "      private void _assertLineBraceInfo(int distance, String braceType)", "signatureAfterChange": "      private void _assertLineBraceInfo(int distance, String braceType)", "diff": ["-//    _doc.acquireReadLock();", "-//    try {", "-    BraceInfo info = _doc._getLineEnclosingBrace();", "+    _doc.acquireReadLock();", "+    try {", "+      BraceInfo info = _doc._getLineEnclosingBrace();", "-    assertEquals(\"line brace info: brace distance\", distance, info.distance());", "-    assertEquals(\"line brace info: brace type\", braceType, info.braceType());", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+      assertEquals(\"line brace info: brace distance\", distance, info.distance());", "+      assertEquals(\"line brace info: brace type\", braceType, info.braceType());", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f04bacfe2895b0a00a858f370de777e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private int _getIndentOfCurrStmt(int pos) throws BadLocationException", "signatureAfterChange": "   private int _getIndentOfCurrStmt(int pos) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-      return _doc._getIndentOfCurrStmt(pos); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._getIndentOfCurrStmt(pos); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f62b5ab75f95bbb109f3d3362b208be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersion.java", "commitBeforeChange": "1f3058becb78ba58ec6d1c56724efee045364cc2", "commitAfterChange": "a915713ffc333fa5e6054f9ce8312c6fe076be4f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public static FullVersion parseFullVersion(String java_version,                                              String java_runtime_name,                                              String java_vm_vendor,                                              File location)", "signatureAfterChange": "   public static FullVersion parseFullVersion(String java_version,                                              String java_runtime_name,                                              String java_vm_vendor,                                              File location)", "diff": ["-   */", "+  // Why are underscores used as word separators in identifiers below?", "+    ", "+    /** Strip trailing \".jdk\" off of java_version strings from post Java 6 Oracle JVMs for Mac OS X. */", "+    if (java_version.endsWith(\".jdk\")) java_version = java_version.substring(0, java_version.length() - 4);", "-      java_version = \"1.\"+java_version;", "+      java_version = \"1.\" + java_version;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7598fc2ba8d806e077a5536b3ca68360", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private int _getLineEndPos(int pos) throws BadLocationException", "signatureAfterChange": "   private int _getLineEndPos(int pos) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-    return _doc._getLineEndPos(pos); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._getLineEndPos(pos); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7796290f2503143900bc110b0373634a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   synchronized public void interpreterChanged(boolean inProgress)", "signatureAfterChange": "   public void interpreterChanged(boolean inProgress)", "diff": ["-  synchronized public void interpreterChanged(boolean inProgress) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interpreterChanged(inProgress);", "+  public void interpreterChanged(boolean inProgress) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interpreterChanged(inProgress);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "796902fa8008ef767d0d2984f3d9e1aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "aac5f34523ac0f0412292e9d65f671aa46b752f4", "commitAfterChange": "10c44767bf3d5eefd230820d6106fe1ea2534e6f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ProjectPropertiesFrame(MainFrame mf)", "signatureAfterChange": "   public ProjectPropertiesFrame(MainFrame mf)", "diff": ["+        _applyButton.setEnabled(false);", "+        _applyButton.setEnabled(false);", "+    _applyButton.setEnabled(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c7dacfa3f041f346c967826ee7a493f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   synchronized public void compileStarted()", "signatureAfterChange": "   public void compileStarted()", "diff": ["-  synchronized public void compileStarted() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).compileStarted();", "+  public void compileStarted() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).compileStarted();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7cc935265935ee2b8b8b93455103f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-//    _doc.acquireWriteLock(); ", "-//    try {", "-    _passedCurrent = true;", "-    /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "-     * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "-     * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "-     * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "-     * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "-     * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "-     * locked section avoiding the race. */", "-    EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock(); ", "+    try {", "+      _passedCurrent = true;", "+      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+       * locked section avoiding the race. */", "+      EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84fa2dfa44dbc277a2afe794be5c63a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleWithTrace.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public boolean testIndentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "    public boolean testIndentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-//     doc.acquireWriteLock();", "-//     try { ", "-     return indentLine(doc, reason); ", "-//     }", "-//     finally { doc.releaseWriteLock(); }", "+     doc.acquireWriteLock();", "+     try { return indentLine(doc, reason); }", "+     finally { doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8580585466a464813f1dd5b71dcb862a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   synchronized public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public boolean shouldRevertFile(OpenDefinitionsDocument doc) {", "-    boolean poll = true;", "-    int size = _listeners.size();", "-    for(int i = 0; (poll && (i < size)); i++) {", "-      poll = poll && _listeners.get(i).shouldRevertFile(doc);", "+  public boolean shouldRevertFile(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      boolean poll = true;", "+      int size = _listeners.size();", "+      for(int i = 0; (poll && (i < size)); i++) {", "+        poll = poll && _listeners.get(i).shouldRevertFile(doc);", "+      }", "+      return poll;", "-    return poll;", "+    finally {", "+      _lock.endRead();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a55ccdb419d9819373a0ba0ab7b382", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "add4ca7a51e78cf47efc30384ae6f244b7e78f21", "commitAfterChange": "bd6440967d1d2ae8c864e064182d820c7f6849ce", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "diff": ["+    debug.logStart(\"junit(doc)\");", "+        debug.logEnd(\"junit(doc): no corresponding file\");", "+    debug.logEnd(\"junit(doc)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a462b531c6940c33f821580330bb69d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRuleQuestion.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   boolean testApplyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean testApplyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-//    doc.acquireReadLock();", "-//    try { ", "-      return applyRule(doc, reason); ", "-//    }", "-//    finally { doc.releaseReadLock(); }", "+    doc.acquireReadLock();", "+    try { return applyRule(doc, reason); }", "+    finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a594c17e27715e9f6eb6123c12b3302", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   synchronized public void junitStarted(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void junitStarted(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void junitStarted(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).junitStarted(doc);", "+  public void junitStarted(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).junitStarted(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e0294b78920060c2628b6589f474979", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   synchronized public void saveBeforeRun()", "signatureAfterChange": "   public void saveBeforeRun()", "diff": ["-  synchronized public void saveBeforeRun() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).saveBeforeRun();", "+  public void saveBeforeRun() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).saveBeforeRun();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fca77a8860ae4a109fc03050b77648f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "aac5f34523ac0f0412292e9d65f671aa46b752f4", "commitAfterChange": "10c44767bf3d5eefd230820d6106fe1ea2534e6f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ConfigFrame(MainFrame frame)", "signatureAfterChange": "   public ConfigFrame(MainFrame frame)", "diff": ["-        if (successful) ConfigFrame.this.setVisible(false);", "+        if (successful) {", "+          _applyButton.setEnabled(false);", "+        }", "+        ConfigFrame.this.setVisible(false);", "-        try { saveSettings(); }", "+        try { saveSettings(); _applyButton.setEnabled(false); }", "+    _applyButton.setEnabled(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91b683b9c030be2c6b3ae9784ec98449", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "eccc0f4ca399d1b769babc36cdb28f136cc1e3a4", "commitAfterChange": "cd4dd52c44e1088dca0dd0286c0899f125ae070a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void _handleBreakpointEvent(BreakpointEvent e)", "signatureAfterChange": "      private void _handleBreakpointEvent(BreakpointEvent e)", "diff": ["-    _debugManager.hitBreakpoint((BreakpointRequest)e.request());", "+    _manager.setCurrentThread(e.thread());", "+    _manager.scrollToSource(e);", "+    _manager.hitBreakpoint((BreakpointRequest)e.request());", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96716368756f9481f4f4b6568098b546", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "3bb525675df17c5cd50695a90ffe7d8bb2eb200c", "commitAfterChange": "cb572b3617cad32fd1949d7534520be983606d43", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 196, "signatureBeforeChange": "     public void addDocumentListener(DocumentListener listener)", "signatureAfterChange": "     public void addDocumentListener(DocumentListener listener)", "diff": ["-      getDocument().addDocumentListener(listener);", "+      if(_cache.isDDocInCache(this)){", "+        getDocument().addDocumentListener(listener);", "+      }", "+      else {", "+        _cache.getReconstructor(this).addDocumentListener(listener);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99951849b924e91e5fe157373d50e591", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   synchronized public void junitSuiteStarted(int numTests)", "signatureAfterChange": "   public void junitSuiteStarted(int numTests)", "diff": ["-  synchronized public void junitSuiteStarted(int numTests) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).junitSuiteStarted(numTests);", "+  public void junitSuiteStarted(int numTests) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).junitSuiteStarted(numTests);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba62482ef52bc53d1d0522999033ebb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": "   private void shutdown()", "signatureAfterChange": "   private void shutdown()", "diff": ["+    Utilities.show(\"Shutting Down!\");", "+    ", "-        dispose(); // in instances of DefaultGlobalModel, kills the interpreter and cleans up the RMI hooks in the slave JVM", "+        if (Utilities.TEST_MODE) dispose();  // kills interpreter and cleans up RMI hooks in the slave JVM", "-    catch(InterruptedException e) { /* proceed */ }", "-//    _log.log(\"In \" + this + \" System.exit(0) timed out, so Runtime.halt(0) is being used instead\");", "+    catch(InterruptedException e) { /* ignore */ }", "+    _log.log(\"Terminator thread failed to shut down DrJava within two seconds; proceeding to halt\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca7c8796048c6ae6f63201223161c07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1824c23d7190107a20690dc4a2840a5d74f14a93", "commitAfterChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private int _processAllInCurrentDoc(Lambda<Void, FindResult> findAction)", "signatureAfterChange": "   private int _processAllInCurrentDoc(Lambda<Void, FindResult> findAction)", "diff": ["-   */", "+    */", "+    ", "+    _doc.acquireWriteLock();  // may modify the document!", "+    try {", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eaf7ceb67fd176b943d919adf9f774a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ConsoleController.java", "commitBeforeChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "commitAfterChange": "c2cccf3d2cd557fff7d01a0111e1dc7df943b427", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "     public void actionPerformed(ActionEvent e)", "diff": ["-      int position = _pane.getCaretPosition();", "-      if (position < _doc.getPromptPos()) moveToEnd();", "-      else if (position >= _doc.getLength()) _pane.getBeep().run();", "-      else // position between prompt and end", "-        _pane.setCaretPosition(position + 1);", "+      _doc.acquireReadLock();", "+      try {", "+        int position = _pane.getCaretPosition();", "+        if (position < _doc.getPromptPos()) moveToEnd();", "+        else if (position >= _doc.getLength()) _pane.getBeep().run();", "+        else // position between prompt and end", "+          _pane.setCaretPosition(position + 1);", "+      }", "+      finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1a2c576610cb3817616331f518be71f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/BraceInfoTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void _enclosingBraceTestHelper(int location, String msg, int expDist, String expBraceType)", "signatureAfterChange": "      private void _enclosingBraceTestHelper(int location, String msg, int expDist, String expBraceType)", "diff": ["-//    _document.acquireReadLock();", "-//    try {", "-    _document.setCurrentLocation(location);", "-    //_reduced = _document.getReduced();", "-    BraceInfo info = _document._getEnclosingBrace();", "-    assertEquals(msg + \": distance\", expDist, info.distance());", "-    assertEquals(msg + \": braceType\", expBraceType, info.braceType());", "-//    }", "-//    finally { _document.releaseReadLock(); }", "+    _document.acquireReadLock();", "+    try {", "+      _document.setCurrentLocation(location);", "+      //_reduced = _document.getReduced();", "+      BraceInfo info = _document._getEnclosingBrace();", "+      assertEquals(msg + \": distance\", expDist, info.distance());", "+      assertEquals(msg + \": braceType\", expBraceType, info.braceType());", "+    }", "+    finally { _document.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3503fa3806791f6c548f42022ba1de5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private int _getFirstNonWSCharPos(int pos) throws BadLocationException", "signatureAfterChange": "   private int _getFirstNonWSCharPos(int pos) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-    return _doc._getFirstNonWSCharPos(pos); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._getFirstNonWSCharPos(pos); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a049ac468488898b17f2d5baaede2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   synchronized public void nonTestCase()", "signatureAfterChange": "   public void nonTestCase()", "diff": ["-  synchronized public void nonTestCase() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).nonTestCase();", "+  public void nonTestCase() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).nonTestCase();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b009a33ab12130b04fb01f3d96cf518c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   synchronized public void saveBeforeJavadoc()", "signatureAfterChange": "   public void saveBeforeJavadoc()", "diff": ["-  synchronized public void saveBeforeJavadoc() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).saveBeforeJavadoc();", "+  public void saveBeforeJavadoc() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).saveBeforeJavadoc();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0ef6fe9c687f459b8eca37f3873643e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   synchronized public void interactionEnded()", "signatureAfterChange": "   public void interactionEnded()", "diff": ["-  synchronized public void interactionEnded() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interactionEnded();", "+  public void interactionEnded() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interactionEnded();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b19f651bac5b2e1acf669e4f683e1171", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   synchronized public void runStarted(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void runStarted(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void runStarted(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).runStarted(doc);", "+  public void runStarted(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).runStarted(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5349bb6dc085cb88000d1bde6fadc45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   synchronized public boolean pollListeners(Poller p)", "signatureAfterChange": "   public boolean pollListeners(Poller p)", "diff": ["-  synchronized public boolean pollListeners(Poller p) {", "-    boolean poll = true;", "-    ", "-    int size = _listeners.size();", "-    for(int i = 0; (poll && (i < size)); i++) {", "-      poll = poll && p.poll(_listeners.get(i));", "+  public boolean pollListeners(Poller p) {", "+    _lock.startRead();", "+    try {", "+      boolean poll = true;", "+      ", "+      int size = _listeners.size();", "+      for(int i = 0; (poll && (i < size)); i++) {", "+        poll = poll && p.poll(_listeners.get(i));", "+      }", "+      return poll;", "-    return poll;", "+    finally {", "+      _lock.endRead();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61f16b5de7b11ee25471d5900fabedd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public boolean hasNextInteraction()", "signatureAfterChange": "   public boolean hasNextInteraction()", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-    return _currentInteraction < _interactions.size() - 1; ", "-//    }  // what if _passedCurrent == true?", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _currentInteraction < _interactions.size() - 1; }  // what if _passedCurrent == true?", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6dcc7e92fcafd75f7909ecfca69bd1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentRulesTestCase.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   protected final void _setDocText(String text)     throws BadLocationException", "signatureAfterChange": "   protected final void _setDocText(String text) throws BadLocationException", "diff": ["-   */", "-  protected final void _setDocText(String text)", "-    throws BadLocationException {", "-    _doc.clear();", "-    _doc.insertString(0, text, null);", "+  /** Clears the text of the _doc field and sets it to the given string. */", "+  protected final void _setDocText(String text) throws BadLocationException {", "+    _doc.acquireWriteLock();", "+    try {", "+      _doc.clear();", "+      _doc.insertString(0, text, null);", "+    }", "+    finally { _doc.releaseWriteLock(); }", "+    Utilities.clearEventQueue();  // make sure that all listener actions triggered by this document update have completed", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92798e77e8e6efa0b3f1602fefc46eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   synchronized public void interpreterReady()", "signatureAfterChange": "   public void interpreterReady()", "diff": ["-  synchronized public void interpreterReady() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interpreterReady();", "+  public void interpreterReady() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interpreterReady();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf9e1e5436cb25dad75246bbaddddc4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   synchronized public void interactionStarted()", "signatureAfterChange": "   public void interactionStarted()", "diff": ["-  synchronized public void interactionStarted() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).interactionStarted();", "+  public void interactionStarted() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).interactionStarted();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c01f2f697d5074726a47935694ffed56", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectPropertiesFrame.java", "commitBeforeChange": "ef93e6cc3a79f29ed28debb1108f1338b9a974ad", "commitAfterChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "    public JPanel _mainDocumentSelector()", "signatureAfterChange": "    public JPanel _mainDocumentSelector()", "diff": ["+    chooser.resetChoosableFileFilters();", "+    chooser.addChoosableFileFilter(new SmartSourceFilter());", "-        if(qualifiedName.toLowerCase().endsWith(\".java\"))", "+        if(qualifiedName.toLowerCase().endsWith(OptionConstants.JAVA_FILE_EXTENSION))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2c196b161f943a880d717e4bc996680", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private boolean _inParenPhrase(int pos) throws BadLocationException", "signatureAfterChange": "   private boolean _inParenPhrase(int pos) throws BadLocationException", "diff": ["-//    _doc.acquireReadLock();", "-//    try { ", "-      return _doc._inParenPhrase(pos); ", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try { return _doc._inParenPhrase(pos); }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c37270b3054d42d3a47cae3da212ba3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "c8bdd45b172c9714aba30b2edf20a9a7463e66ab", "commitAfterChange": "c2cccf3d2cd557fff7d01a0111e1dc7df943b427", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public void select(int selectionStart, int selectionEnd)", "signatureAfterChange": "   public void select(int selectionStart, int selectionEnd)", "diff": ["-   */", "+    */", "-    if (selectionStart < 0) selectionStart = 0;", "-    if (selectionEnd < 0) selectionEnd = 0;", "-    setCaretPosition(selectionStart);", "-    moveCaretPosition(selectionEnd);  // What about the caret position in the reduced model?  It is now inconsistent!", "+    _doc.acquireReadLock();", "+    try {", "+//      if (selectionStart < 0) selectionStart = 0;", "+//      if (selectionEnd < 0) selectionEnd = 0;", "+      setCaretPosition(selectionStart);", "+      moveCaretPosition(selectionEnd);  // What about the caret position in the reduced model?  It is updated by a listener.", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3950099cf0c50cda531c6d348af4085", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   synchronized public void compileEnded()", "signatureAfterChange": "   public void compileEnded()", "diff": ["-  synchronized public void compileEnded() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).compileEnded();", "+  public void compileEnded() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).compileEnded();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c96f6caedd26a99848af94558562c112", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   synchronized public void saveBeforeDebug()", "signatureAfterChange": "   public void saveBeforeDebug()", "diff": ["-  synchronized public void saveBeforeDebug() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).saveBeforeDebug();", "+  public void saveBeforeDebug() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).saveBeforeDebug();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3ce7aa95cb2ec10542e144f83e23e0c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   synchronized public void fileSaved(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void fileSaved(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void fileSaved(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).fileSaved(doc);", "+  public void fileSaved(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).fileSaved(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ad4200260d0bac7fafde86af916577", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   synchronized public void junitEnded()", "signatureAfterChange": "   public void junitEnded()", "diff": ["-  synchronized public void junitEnded() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).junitEnded();", "+  public void junitEnded() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).junitEnded();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e95a86f3fcb1faa55a392fc25d4c22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void indentLines(int selStart, int selEnd)", "signatureAfterChange": "   private void indentLines(int selStart, int selEnd)", "diff": ["-//    _doc.acquireWriteLock(); ", "-//    try { ", "-      _doc.indentLines(selStart, selEnd); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock(); ", "+    try { _doc.indentLines(selStart, selEnd); }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9ef4a9bc26cf731f167b1618c21ed90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "      private void _assertBraceInfo(int distance, String braceType)", "signatureAfterChange": "      private void _assertBraceInfo(int distance, String braceType)", "diff": ["-//    _doc.acquireReadLock();", "-//    try {", "-    BraceInfo info = _doc._getEnclosingBrace();", "-    assertEquals(\"line brace info: brace distance\", distance, info.distance());", "-    assertEquals(\"line brace info: brace type\", braceType, info.braceType());", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try {", "+      BraceInfo info = _doc._getEnclosingBrace();", "+      assertEquals(\"line brace info: brace distance\", distance, info.distance());", "+      assertEquals(\"line brace info: brace type\", braceType, info.braceType());", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db444f26041d50ab8c895a8ad0f1c19b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public void select(int selectionStart, int selectionEnd)", "signatureAfterChange": "   public void select(int selectionStart, int selectionEnd)", "diff": ["-    setCaretPosition(selectionStart);", "-    moveCaretPosition(selectionEnd);  // What about the caret position in the reduced model?  It is updated by a listener.", "+    _doc.acquireReadLock();", "+    try {", "+//      if (selectionStart < 0) selectionStart = 0;", "+//      if (selectionEnd < 0) selectionEnd = 0;", "+      setCaretPosition(selectionStart);", "+      moveCaretPosition(selectionEnd);  // What about the caret position in the reduced model?  It is updated by a listener.", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db905d225185c83312ab92e7e064d1f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "32020feaae9acc630e383fdce3c878d1ec08218e", "commitAfterChange": "bc04c896b813267bf0ef9dd37648372083f58698", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 381, "signatureBeforeChange": "          public void projectBuildDirChanged()", "signatureAfterChange": "          public void projectBuildDirChanged()", "diff": ["+      if(_model.getBuildDirectory() != null){", "+        _cleanAction.setEnabled(true);", "+      }else{", "+        _cleanAction.setEnabled(false);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de3d04208acea495ee6d8eb09033648a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "69a380647f3d586f130ea02ad1e8381a390045e3", "commitAfterChange": "739371db1261b11c3be5fd70233012a49b45b7ca", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "      private Expression unbox(Expression exp, String methodName)", "signatureAfterChange": "      private Expression unbox(Expression exp, String methodName)", "diff": ["+      if (NodeProperties.hasValue(exp)) { NodeProperties.setValue(result, NodeProperties.getValue(exp)); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1d672aaf7a97ae35aacc728d4d2b9cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   static boolean handleCommandLineArgs(String[] args)", "signatureAfterChange": "   static boolean handleCommandLineArgs(String[] args)", "diff": ["+    if (PlatformFactory.ONLY.isMacPlatform()) {", "+      _jvmArgs.add(\"-Dcom.apple.macos.useScreenMenuBar=true\");", "+      _jvmArgs.add(\"-Xdock:name=DrJava\");", "+//      _jvmArgs.add(\"-Xdock:icon=Users/cork/drjava/drjava/edu/rice/cs/drjava/ui/icons/DrJava.icns\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e36127b46821790fef27ad649f946ddc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": "   public File[] getOpenFiles(JFileChooser jfc) throws OperationCanceledException", "signatureAfterChange": "   public File[] getOpenFiles(JFileChooser jfc) throws OperationCanceledException", "diff": ["-    File selection = jfc.getSelectedFile();//_openChooser.getSelectedFile();", "-    if (selection != null) {", "-//      jfc.setSelectedFile(selection.getParentFile());", "-//      jfc.setSelectedFile(selection);", "+    File selection = jfc.getSelectedFile();", "+    if (selection != null) { // necessary for OS X?", "+      jfc.setSelectedFile(selection.getParentFile());", "+      jfc.setSelectedFile(selection);", "-    int rc = jfc.showOpenDialog(this);//_openChooser.showOpenDialog(this);", "-    return getChosenFiles(jfc, rc);//_openChooser, rc);", "+    int rc = jfc.showOpenDialog(this);", "+    return getChosenFiles(jfc, rc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5bd06a78a7a1f776e682dffb60ad2c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/IncrementalTaskController.java", "commitBeforeChange": "ba3f1737bae917eb057a0651ee7d4f727a22cab6", "commitAfterChange": "d28ad1c0de8862f820b20e04c9a78fc9e0194666", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected abstract void doStart();", "signatureAfterChange": "     public final void start()", "diff": ["-   */", "-  protected abstract void doStart();", "+  protected class PausedState extends WaitingState {", "+    public final void start() {", "+      if (state.compareAndSet(this, new FreshStartingState())) { doResume(); }", "+      else { state.get().start(); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79420f6d938948438b8ebb496269b17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   synchronized public void newFileCreated(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void newFileCreated(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void newFileCreated(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).newFileCreated(doc);", "+  public void newFileCreated(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).newFileCreated(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b2ffbece00fcd6cc0ea0bc068e0a83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   synchronized public void fileOpened(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void fileOpened(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void fileOpened(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).fileOpened(doc);", "+  public void fileOpened(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).fileOpened(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8b5f396122c5cb41db249675d055755", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e8cc87f4c1373cc71556480da6b0490c23688c68", "commitAfterChange": "ab5f98cfbaf4d4f03ed7df38b403a2ed47f6970f", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 191, "signatureBeforeChange": "   private JMenu _setUpProjectMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpProjectMenu(int mask)", "diff": ["-    // will add option for new project", "+    projectMenu.add(_newProjectAction);", "-", "+        ", "+    projectMenu.addSeparator();", "-", "+    projectMenu.add(_projectPropertiesAction);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb3e42b736b69dc23af568ada3f043d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   synchronized public void consoleReset()", "signatureAfterChange": "   public void consoleReset()", "diff": ["-  synchronized public void consoleReset() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).consoleReset();", "+  public void consoleReset() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).consoleReset();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec17f0719b6b9d519263c23e6c56974f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "280405458291d58b8a4ee2aec9d2ef7b99f7534f", "commitAfterChange": "be628cd121052298324164bb3bddf3489501416b", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "    private JButton _createManualToolbarButton(Action a)", "signatureAfterChange": "    JButton _createManualToolbarButton(Action a)", "diff": ["-  private JButton _createManualToolbarButton(Action a) {", "+  JButton _createManualToolbarButton(Action a) {", "+    ret.setToolTipText( (String) a.getValue(Action.SHORT_DESCRIPTION));", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eef9b8a72e6fb747dbc9a1a1831d88f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void prevInteraction()", "signatureAfterChange": "   public void prevInteraction()", "diff": ["-//    _doc.acquireWriteLock();", "-//    try {", "-    if (! hasPrevInteraction()) throw new IllegalStateException(\"There is no previous interaction!\");", "-", "-    // Only move back if we haven't passed the current interaction", "-    if (! _passedCurrent)  _currentInteraction--;", "-    _showCurrentInteraction();", "-    _passedCurrent = false;", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try {", "+      if (!hasPrevInteraction()) {", "+        throw new IllegalStateException(\"There is no previous interaction!\");", "+      }", "+      // Only move back if we haven't passed the current interaction", "+      if (!_passedCurrent)  _currentInteraction--;", "+      _showCurrentInteraction();", "+      _passedCurrent = false;", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7322a2c95db8ee2dd655a3d37a96812", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "ce42478b992adc6ef5f56e78e788484f10488ff4", "commitAfterChange": "a6ad77fef884f528ddfb31a18f08f168fcd5e3f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public static void main(String... args)", "signatureAfterChange": "         public static void main(String... args)", "diff": ["+    argParser.supportOption(\"jls\");", "-    Options opt = Options.DEFAULT;", "+    Options opt = parsedArgs.hasOption(\"jls\") ? new Options(JLSTypeSystem.INSTANCE) : Options.DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7ae07168f292adf36ae16a274cce93a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean hasPrevInteraction()", "signatureAfterChange": "   public boolean hasPrevInteraction()", "diff": ["-//    _doc.acquireReadLock();", "-//    try {", "-    int index = _currentInteraction;", "-    if (_passedCurrent) index++; // We're passed the current, so the previous interaction is the current.", "-    return index > 0;", "-//    }", "-//    finally { _doc.releaseReadLock(); }", "+    _doc.acquireReadLock();", "+    try {", "+      int index = _currentInteraction;", "+      if (_passedCurrent) index++; // We're passed the current, so the previous interaction is the current.", "+      return index > 0;", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1083998b2b15ee236306d5dcfa41f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "signatureAfterChange": "   public void testInteractionsHistoryStoredCorrectly() throws EditDocumentException", "diff": ["+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    ", "+    Utilities.clearEventQueue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa120684c5e7b105ff2cedb2aa9f4a68", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "1210f15594c9808455815ddca20501677d42bd7f", "commitAfterChange": "2e0841eedc488bc59bd976576cad4ea91d3f46bd", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   private void createPopupMenu()", "signatureAfterChange": "   private void createPopupMenu()", "diff": ["-      public void actionPerformed(ActionEvent ae) { indent(); }", "+      public void actionPerformed(ActionEvent ae) {", "+        _mainFrame.hourglassOn();", "+        try {", "+          indent();", "+        } finally {", "+          _mainFrame.hourglassOff();", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc39e1b2979715881c286fe15103364e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   synchronized public void fileClosed(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void fileClosed(OpenDefinitionsDocument doc)", "diff": ["-  synchronized public void fileClosed(OpenDefinitionsDocument doc) {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).fileClosed(doc);", "+  public void fileClosed(OpenDefinitionsDocument doc) {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).fileClosed(doc);", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff5e776dc1d2828caeac8c9deb9bbe63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/EventNotifier.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   synchronized public void javadocStarted()", "signatureAfterChange": "   public void javadocStarted()", "diff": ["-  synchronized public void javadocStarted() {", "-    int size = _listeners.size();", "-    for(int i = 0; i < size; i++) {", "-      _listeners.get(i).javadocStarted();", "+  public void javadocStarted() {", "+    _lock.startRead();", "+    try {", "+      int size = _listeners.size();", "+      for(int i = 0; i < size; i++) {", "+        _listeners.get(i).javadocStarted();", "+      }", "+    }", "+    finally {", "+      _lock.endRead();"]}], "num": 18846}
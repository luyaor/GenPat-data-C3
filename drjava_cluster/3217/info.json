{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4797069a1f4244bb5fd162346847462", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4298adc55a158e6557e8ca0828fc1041", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "6cf6212d2242fc41ac00a6496c1e1ba3b53de977", "commitAfterChange": "04e763507593a06a56de16c4b3641de0dbca16f7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-", "-    int here = doc.getCurrentLocation();", "-    int origin = doc.getReduced().absOffset();", "+    ", "+    int origin = doc.getCurrentLocation();", "+    //int origin = doc.getReduced().absOffset();", "-    doc.getReduced().move(lineStart - origin);", "-    IndentInfo info = doc.getReduced().getIndentInformation();", "-    doc.getReduced().move(origin - lineStart);", "-    ", "-    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-        (info.distToBrace < 0)) {", "-      // Precondition not met: we should have a brace", "-      return false;", "+    synchronized(doc){", "+      doc.move(lineStart - origin);", "+      IndentInfo info = doc.getIndentInformation();", "+      doc.move(origin - lineStart);    ", "+      ", "+      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+          (info.distToBrace < 0)) {", "+        // Precondition not met: we should have a brace", "+        return false;", "+      }", "+      int bracePos = lineStart - info.distToBrace;    ", "+      ", "+      // Get brace's end of line", "+      int braceEndLinePos = doc.getLineEndPos(bracePos);", "+      ", "+      // Get position of next non-WS char (not in comments)", "+      int nextNonWS = -1;", "+      try {", "+        nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "+      }", "+      catch (BadLocationException e) {", "+        // This shouldn't happen", "+        throw new UnexpectedException(e);", "+      }", "+      ", "+      if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+        return true;", "+      }", "+      ", "+      return (nextNonWS >= lineStart);", "-    int bracePos = lineStart - info.distToBrace;    ", "-    ", "-    // Get brace's end of line", "-    int braceEndLinePos = doc.getLineEndPos(bracePos);", "-    ", "-    // Get position of next non-WS char (not in comments)", "-    int nextNonWS = -1;", "-    try {", "-      nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-    }", "-    catch (BadLocationException e) {", "-      // This shouldn't happen", "-      throw new UnexpectedException(e);", "-    }", "-    ", "-    if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "-      return true;", "-    }", "-    ", "-    return (nextNonWS >= lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fe4086dbc05d42659bd6508f292f419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "e4597735ed480ff103992a6b4edd98783ce62b7c", "commitAfterChange": "c918fda29945e681706734ce52051eaf13078f8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    System.err.println(\"QuestionStartAfterOpenBrace\");", "-", "-    int start = doc.getLineStartPos(doc.getCurrentLocation());", "-    BraceReduction reduced = doc.getReduced();", "-    int origin = reduced.absOffset();", "-    String text;", "-    char c, peek;", "-", "-    try", "-    {", "-\ttext = doc.getText(DefinitionsDocument.DOCSTART, start);", "+    int here = doc.getCurrentLocation();", "+    int origin = doc.getReduced().absOffset();", "+    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    ", "+    // Get brace for start of line", "+    doc.getReduced().move(lineStart - origin);", "+    IndentInfo info = doc.getReduced().getIndentInformation();", "+    doc.getReduced().move(origin - lineStart);", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0)) {", "+      // Precondition not met: we should have a brace", "+      return false;", "-    catch (BadLocationException e)", "-    {", "-\t// Control flow should never reach this point.", "-\tthrow new UnexpectedException(new RuntimeException(e.getMessage()));", "+    int bracePos = lineStart - info.distToBrace;    ", "+    ", "+    // Get brace's end of line", "+    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+    ", "+    // Get position of next non-WS char (not in comments)", "+    int nextNonWS = -1;", "+    try {", "+      nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-    for (int i = start-1; i >= DefinitionsDocument.DOCSTART; i--)", "-    {", "-\t", "-      c = text.charAt(i);", "-", "-      if (c != ' ' && c != '\\t' && c != '\\n') ", "-      {", "-\t  // c is not a whitespace character.", "-", "-          reduced.move(i - origin);", "-          ReducedModelState state = reduced.getStateAtCurrent();", "-          reduced.move(origin - i);", "-", "-          if (state.equals(ReducedModelState.FREE))", "-\t  {", "-\t      peek = text.charAt(i - 1);", "-", "-\t      if (c == '/' && (peek == '/' || peek == '*'))", "-\t\t  i--;", "-\t      else if (c == '*' && peek == '/')", "-\t\t  i--;", "-\t      else", "-\t\t  return c == '{';", "-\t  }", "-      }", "+    catch (BadLocationException e) {", "+      // This shouldn't happen", "+      throw new UnexpectedException(e);", "-    return false;", "+    ", "+    if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+      return true;", "+    }", "+    ", "+    return (nextNonWS >= lineStart);"]}], "num": 3217}
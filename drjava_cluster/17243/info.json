{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8b07d717f39165720462d7b294aff71", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cac9e40add9c0f2c65794bfc985c75a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "     public Object visit(EqualExpression node)", "signatureAfterChange": "   public Class visit(EqualExpression node)", "diff": ["+   */", "+  public Class visit(EqualExpression node) {", "+    // Check the types", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)rn.acceptVisitor(this);", "+    ", "+    checkEqualityStaticRules(lc, rc, node);", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.equalTo(lc, rc,", "+                                      ln.getProperty(NodeProperties.VALUE),", "+                                      rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }", "-     */", "-    public Object visit(EqualExpression node) {", "-        // Check the types", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)rn.acceptVisitor(this);", "-", "-        checkEqualityStaticRules(lc, rc, node);", "-                                 ", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.equalTo(lc, rc,", "-                                              ln.getProperty(NodeProperties.VALUE),", "-                                              rn.getProperty(NodeProperties.VALUE)));", "-", "-        // Set the type property", "-        node.setProperty(NodeProperties.TYPE, boolean.class);", "-        return boolean.class;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aa38265f68f38e84cdaac2aabb4c46b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "     public Object visit(NotEqualExpression node)", "signatureAfterChange": "   public Class visit(NotEqualExpression node)", "diff": ["+   */", "+  public Class visit(NotEqualExpression node) {", "+    // Check the types", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    Class lc = (Class)ln.acceptVisitor(this);", "+    Class rc = (Class)rn.acceptVisitor(this);", "+    ", "+    checkEqualityStaticRules(lc, rc, node);", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.notEqualTo(lc, rc,", "+                                         ln.getProperty(NodeProperties.VALUE),", "+                                         rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    ", "+    // Set the type property", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+    return boolean.class;", "+  }", "-     */", "-    public Object visit(NotEqualExpression node) {", "-        // Check the types", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-        Class lc = (Class)ln.acceptVisitor(this);", "-        Class rc = (Class)rn.acceptVisitor(this);", "-", "-        checkEqualityStaticRules(lc, rc, node);", "-                                 ", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.notEqualTo(lc, rc,", "-\t\t\t\t\t\t ln.getProperty(NodeProperties.VALUE),", "-\t\t\t\t\t\t rn.getProperty(NodeProperties.VALUE)));", "-", "-        // Set the type property", "-        node.setProperty(NodeProperties.TYPE, boolean.class);", "-        return boolean.class;"]}], "num": 17243}
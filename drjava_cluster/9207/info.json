{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5c57431dc713ca286ff93ee76bfec89", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8483c5acfeced6e649024b655ce35215", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "commitAfterChange": "bd0c5f6fb57379a8699a4cf01148b0c907e9220d", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "    private void _startNameServiceIfNeeded()", "signatureAfterChange": "   private void _startNameServiceIfNeeded()", "diff": ["+   */", "+      // Get a safe port to use.", "+      //  If each copy of DrJava used the same port (or the same port as", "+      //  another program's rmiregistry), then when the previous copy/program", "+      //  quit, we would lose our registry and not be able to reset!", "-        LocateRegistry.createRegistry(Registry.REGISTRY_PORT);", "+        ServerSocket socket = new ServerSocket(0);", "+        _rmiPort = socket.getLocalPort();", "+        socket.close();", "+        LocateRegistry.createRegistry(_rmiPort);", "-      catch (RemoteException re) {", "-        throw new edu.rice.cs.util.UnexpectedException(re);", "+      catch (Exception e2) {", "+        throw new UnexpectedException(new RuntimeException(", "+          \"Could not find a usable RMI Port: \" + e2.toString()));", "+      //DrJava.consoleOut().println(\"Created rmiregistry on port: \" + _rmiPort);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b60f3bd1dfa05be8eab6b416c23e79ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "53d061333fe3393f6569c1f553912f1a449482ad", "commitAfterChange": "12c8304e14a6d9eafe2f7093583d8040569150c1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["-    catch (IOException ioe) {", "-      throw new DebugException(\"Could not connect to VM: \" + ioe);", "-    }", "-    catch (IllegalConnectorArgumentsException icae) {", "-      throw new DebugException(\"Could not connect to VM: \" + icae);", "+    catch(Exception e1) {", "+      try { _vm = connector.attach(args); }", "+      catch(Exception e2) {", "+        try { _vm = connector.attach(args); }", "+        catch(Exception e3) { throw new DebugException(\"Could not connect to VM: \" + e3); } // three strikes and you are out", "+      }"]}], "num": 9207}
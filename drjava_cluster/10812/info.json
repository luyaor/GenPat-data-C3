{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd9d041e9bcb743fff3772a79468c9cd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "869dafcfa471b390ccc191d2aaef0b84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public TypeData forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "signatureAfterChange": "   public TypeData forComplexNamedClassInstantiation(ComplexNamedClassInstantiation that)", "diff": ["-   */", "+    */", "-      checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+      checkAccessibility(that, enclosingType.getSymbolData().getMav(), enclosingType.getSymbolData().getName(), ", "+                         enclosingType.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "-      checkAccessibility(that, innerClass.getMav(), innerClass.getName(), innerClass, _data.getSymbolData(), \"class or interface\", true);", "+      checkAccessibility(that, innerClass.getMav(), innerClass.getName(), innerClass, _data.getSymbolData(), ", "+                         \"class or interface\", true);", "-               _addError (\"The constructor of a non-static inner class can only be called on an instance of its containing class (e.g. new \" + ", "-                   Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" + that.getType().getName() + \"())\", that);", "+               _addError (\"The constructor of a non-static inner class can only be called on an instance of its\" + ", "+                          \" containing class (e.g. new \" + Data.dollarSignsToDots(enclosingType.getName()) + \"().new \" +", "+                          that.getType().getName() + \"())\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c46b4090ed159842b52e42f515811e9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "8bc200087783c364b85293d74698e136f9d39e73", "commitAfterChange": "cdc8036e660934a45b263608a1cde80ec1d15c5d", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public TypeData forComplexNameReference(ComplexNameReference that)", "signatureAfterChange": "   public TypeData forComplexNameReference(ComplexNameReference that)", "diff": ["-   */", "+    */", "+    if (lhs == null) return null;   // defensive code based on NullPointerException that MAY be due to lhs == null", "+    ", "-      if (classRef != null) {return classRef;}", "+      if (classRef != null) { return classRef; }", "-    ", "-    checkAccessibility(that, lhs.getSymbolData().getMav(), lhs.getSymbolData().getName(), lhs.getSymbolData(), _data.getSymbolData(), \"class or interface\", true);", "+    if (_data == null) return null;  // intermittent NullPointerException in next line; lhs == null or _data == null", "+    checkAccessibility(that, lhs.getSymbolData().getMav(), lhs.getSymbolData().getName(), lhs.getSymbolData(), ", "+                       _data.getSymbolData(), \"class or interface\", true);", "-        if (!reference.hasModifier(\"static\")) {", "-          _addError(\"Non-static variable \" + reference.getName() + \" cannot be accessed from the static context \" + Data.dollarSignsToDots(lhs.getName()) + \".  Perhaps you meant to instantiate an instance of \" + Data.dollarSignsToDots(lhs.getName()), that);", "+        if (! reference.hasModifier(\"static\")) {", "+          _addError(\"Non-static variable \" + reference.getName() + \" cannot be accessed from the static context \" + ", "+                    Data.dollarSignsToDots(lhs.getName()) + \".  Perhaps you meant to instantiate an instance of \" + ", "+                    Data.dollarSignsToDots(lhs.getName()), that);"]}], "num": 10812}
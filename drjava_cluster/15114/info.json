{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab810737457f36474b119df2d38ec33e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b6ecc590732e8003e0b4b3d8c5524d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void testSimpleAnonymousClassInstantiationHelper()", "signatureAfterChange": "          public void testSimpleAnonymousClassInstantiationHelper()", "diff": ["-     SimpleAnonymousClassInstantiation basic = ", "-       new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                             new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                             new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-     _iv._package = \"i.like\";", "-     _iv.simpleAnonymousClassInstantiationHelper(basic, _sd1);", "-     assertEquals(\"There should be no errors\", 0, errors.size());", "-     SymbolData obj = symbolTable.get(\"java.lang.Object\");", "-     assertNotNull(\"Object should be in the symbol table\", obj);", "-     assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "-     SymbolData inner = _sd1.getInnerClasses().get(0);", "-     assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "-     assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "-     assertEquals(\"The inner class should have proper super class\", obj, inner.getSuperClass());", "-     assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "-     assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());", "+      SimpleAnonymousClassInstantiation basic = ", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      _iv._package = \"i.like\";", "+      _iv.simpleAnonymousClassInstantiationHelper(basic, _sd1);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+      assertNotNull(\"Object should be in the symbol table\", obj);", "+      assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "+      SymbolData inner = _sd1.getInnerClasses().get(0);", "+      assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "+      assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "+      assertEquals(\"The inner class should have proper super class\", obj, inner.getSuperClass());", "+      assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "+      assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3dd16c6e60e7adb68c0ad76e2b81c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 119, "signatureBeforeChange": "               public void testExceptionsInSymbolTable()", "signatureAfterChange": "               public void testExceptionsInSymbolTable()", "diff": ["-      bb.visit(_llv);", "+      bb.visit(testLLVisitor);", "-                  symbolTable.get(\"java.util.prefs.BackingStoreException\")==null);", "+                  LanguageLevelConverter.symbolTable.get(\"java.util.prefs.BackingStoreException\")==null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db0c9b71471aa26edf351e0a9b919b97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void tearDown() throws Exception", "signatureAfterChange": "      public void tearDown() throws Exception", "diff": ["-    super.tearDown();", "-//    Utilities.invokeAndWait(new Runnable() {", "+//    Utilities.invokeLater(new Runnable() {", "-    _frame.dispose();             // disposes GUI elements of _frame", "-    _frame.getModel().dispose();  // explicitly kills the slave JVM", "-    _frame = null;", "+        _frame.dispose();             // disposes GUI elements of _frame", "+        _frame.getModel().dispose();  // explicitly kills the slave JVM", "+        _frame = null;", "+        /* try { */ MainFrameTest.super.tearDown(); /* } */", "+//        catch(Exception e) { throw new UnexpectedException(e); }", "-//    ", "-    "]}], "num": 15114}
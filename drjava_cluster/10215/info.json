{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f14067b4b992837c93d686cb66b94df8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a285a717ba3140ef7869b980c2f9ca6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsJavaDocWithText.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    */\r", "-  boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason) {\r", "-\r", "-    try {\r", "-      // Find start of line\r", "-      int here = doc.getCurrentLocation();\r", "-      int startLine = doc.getLineStartPos(here);\r", "-      \r", "-      if (startLine <= AbstractDJDocument.DOCSTART) return false;  // on first line\r", "-      \r", "-      // Find start of previous line\r", "-      int endPrevLine = startLine - 1;\r", "-      int startPrevLine = doc.getLineStartPos(endPrevLine);\r", "-      int firstChar = doc.getLineFirstCharPos(startPrevLine);\r", "-      \r", "-      // Compare prefix\r", "-      String actualPrefix = doc.getText(firstChar, 3);\r", "-      if (! actualPrefix.equals(\"/**\")) return false;\r", "-      int nextNonWSChar = doc.getFirstNonWSCharPos(firstChar + 3, true);\r", "-      return nextNonWSChar != ERROR_INDEX && nextNonWSChar <= endPrevLine;     \r", "-    }\r", "-    catch (BadLocationException e) {\r", "-      // Shouldn't happen\r", "-      throw new UnexpectedException(e);\r", "-    }\r", "-  }\r", "+    */", "+  boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason) {", "+", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine <= 0) return false;  // on first line", "+      ", "+      // Find start of previous line", "+      int endPrevLine = startLine - 1;", "+      int startPrevLine = doc.getLineStartPos(endPrevLine);", "+      int firstChar = doc.getLineFirstCharPos(startPrevLine);", "+      ", "+      // Compare prefix", "+      String actualPrefix = doc.getText(firstChar, 3);", "+      if (! actualPrefix.equals(\"/**\")) return false;", "+      int nextNonWSChar = doc.getFirstNonWSCharPos(firstChar + 3, true);", "+      return nextNonWSChar != -1 && nextNonWSChar <= endPrevLine;     ", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7609523e650544be2259df5f53135e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-  boolean applyRule(AbstractDJDocument doc, int reason)", "-  {", "+  boolean applyRule(AbstractDJDocument doc, int reason)  {", "-    synchronized(doc){", "-      doc.move(lineStart - origin);", "-      IndentInfo info = doc.getIndentInformation();", "-      doc.move(origin - lineStart);    ", "-      ", "-      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-          (info.distToBrace < 0)) {", "-        // Precondition not met: we should have a brace", "-        return false;", "-      }", "-      int bracePos = lineStart - info.distToBrace;    ", "-      ", "-      // Get brace's end of line", "-      int braceEndLinePos = doc.getLineEndPos(bracePos);", "-      ", "-      // Get position of next non-WS char (not in comments)", "-      int nextNonWS = -1;", "-      try {", "-        nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-      }", "-      catch (BadLocationException e) {", "-        // This shouldn't happen", "-        throw new UnexpectedException(e);", "-      }", "-      ", "-      if (nextNonWS == AbstractDJDocument.ERROR_INDEX) {", "-        return true;", "-      }", "-      ", "-      return (nextNonWS >= lineStart);", "+    doc.move(lineStart - origin);", "+    IndentInfo info = doc.getIndentInformation();", "+    doc.move(origin - lineStart);    ", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0))", "+      // Precondition not met: we should have a brace", "+      return false;", "+    int bracePos = lineStart - info.distToBrace;    ", "+    ", "+    // Get brace's end of line", "+    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+    ", "+    // Get position of next non-WS char (not in comments)", "+    int nextNonWS = -1;", "+    try { nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos); }", "+    catch (BadLocationException e) {", "+      // This shouldn't happen", "+      throw new UnexpectedException(e);", "+    ", "+    if (nextNonWS == AbstractDJDocument.ERROR_INDEX) return true;", "+    ", "+    return (nextNonWS >= lineStart);"]}], "num": 10215}
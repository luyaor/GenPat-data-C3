{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e099fee7a61574f291c25c6e8bb063d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7a4c94b093ab454ae9ca8f66d09a42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "d6f67da504ad61f8681827b1ed9e34bdf47096b1", "commitAfterChange": "0a854931d2d0d982ce19ec1350fad796e2685223", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "      public static Iterable<JDKDescriptor> searchForJDKDescriptors()", "signatureAfterChange": "   private static Iterable<JDKDescriptor> searchForJDKDescriptors()", "diff": ["-  public static Iterable<JDKDescriptor> searchForJDKDescriptors() {", "+  /** Search for JDK descriptors. */", "+  private static Iterable<JDKDescriptor> searchForJDKDescriptors() {", "-      JarFile jf = new JarFile(f);", "-      JDKToolsLibrary.msg(\"jar file: \"+jf);", "-      Enumeration<JarEntry> entries = jf.entries();", "-      while(entries.hasMoreElements()) {", "-        JarEntry je = entries.nextElement();", "-        String name = je.getName();", "-        if (name.startsWith(\"edu/rice/cs/drjava/model/compiler/descriptors/\") &&", "-            name.endsWith(\".class\") &&", "-            !name.equals(\"edu/rice/cs/drjava/model/compiler/descriptors/JDKDescriptor.class\") &&", "-            (name.indexOf('$')<0)) {", "-          int dotPos = name.indexOf(\".class\");", "-          String className = name.substring(0, dotPos).replace('/','.');", "-          try {", "-            JDKToolsLibrary.msg(\"\\tclass name: \"+className);", "-            Class<?> clazz = Class.forName(className);", "-            Class<? extends JDKDescriptor> descClass = clazz.asSubclass(JDKDescriptor.class);", "-            JDKDescriptor desc = descClass.newInstance();", "-            JDKToolsLibrary.msg(\"\\t\\tloaded!\");", "-            descriptors = IterUtil.compose(descriptors, desc);", "+      if (f.isFile()) {", "+        JarFile jf = new JarFile(f);", "+        JDKToolsLibrary.msg(\"jar file: \"+jf);", "+        Enumeration<JarEntry> entries = jf.entries();", "+        while(entries.hasMoreElements()) {", "+          JarEntry je = entries.nextElement();", "+          String name = je.getName();", "+          if (name.startsWith(\"edu/rice/cs/drjava/model/compiler/descriptors/\") &&", "+              name.endsWith(\".class\") &&", "+              (name.indexOf('$')<0)) {", "+            descriptors = attemptToLoadDescriptor(descriptors, name);", "-          catch(LinkageError le) { JDKToolsLibrary.msg(\"LinkageError: \"+le); /* ignore */ } ", "-          catch(ClassNotFoundException cnfe) { JDKToolsLibrary.msg(\"ClassNotFoundException: \"+cnfe); /* ignore */ }", "-          catch(ClassCastException cce) { JDKToolsLibrary.msg(\"ClassCastException: \"+cce); /* ignore */ }", "-          catch(IllegalAccessException iae) { JDKToolsLibrary.msg(\"IllegalAccessException: \"+iae); /* ignore */ }", "-          catch(InstantiationException ie) { JDKToolsLibrary.msg(\"InstantiationException: \"+ie); /* ignore */ }", "-     }", "+      }", "+      else {", "+        final String DESC_PATH = \"edu/rice/cs/drjava/model/compiler/descriptors\";", "+        File dir = new File(f, DESC_PATH);", "+        JDKToolsLibrary.msg(\"directory, enumerating files in \"+dir);", "+        Iterable<File> files = IOUtil.listFilesRecursively(dir, new Predicate<File>() {", "+          public boolean contains(File arg) {", "+            return (arg.isFile()) && arg.getName().endsWith(\".class\") && (arg.getName().indexOf('$')<0);", "+          }", "+        });", "+        for(File je: files) {", "+          String name = DESC_PATH+\"/\"+je.getName();", "+          descriptors = attemptToLoadDescriptor(descriptors, name);", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac189013b91e84144b83e60d8ae19da0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JUnitErrorModel(Document doc, String theclass, TestResult result)", "signatureAfterChange": "   public JUnitErrorModel(DefinitionsDocument doc, String theclass, TestResult result)", "diff": ["-  public JUnitErrorModel(Document doc, String theclass, TestResult result) {", "+  public JUnitErrorModel(DefinitionsDocument doc, String theclass, TestResult result) {", "+    _testsHaveRun = true;", "+        ", "-", "+     ", "-", "+    Enumeration errEnum = result.errors(); ", "+    ", "-", "-    while (failures.hasMoreElements()) {", "-      TestFailure tf = (TestFailure) failures.nextElement();", "-      TestCase tc = (TestCase) tf.failedTest();", "-", "-      StringWriter sw = new StringWriter();", "-      PrintWriter pw = new PrintWriter(sw);", "-", "-      tf.thrownException().printStackTrace(pw);", "-", "-      String classname = theclass + \".\" + tc.getName();", "-      String theLine = _substring(sw.toString(), 0, sw.toString().indexOf(classname));", "-      theLine = _substring(theLine, 0, theLine.indexOf(\"\\n\"));", "-", "-      theLine = _substring(theLine, 0, theLine.indexOf(\"(\") + 1);", "-      theLine = _substring(theLine, 0, theLine.indexOf(\")\"));", "-", "-      String file = _substring(theLine, 0, theLine.indexOf(\":\"));", "-      int lineNo = 0;", "-      try {", "-        lineNo = new Integer(_substring(theLine, ", "-                                        theLine.indexOf(\":\") + 1,", "-                                        theLine.length()))", "-          .intValue() - 1;", "-      } ", "-      catch (NumberFormatException e) {", "-        throw new UnexpectedException(e);", "-      }", "-", "-      _file = new File(file);", "-", "-      errors[i] = new JUnitError(_file, lineNo, 0, tf.thrownException().getMessage(),", "-                                 ! (tf.thrownException() instanceof AssertionFailedError),", "-                                 tc.getName());", "+    ", "+    while ( errEnum.hasMoreElements()) {", "+      TestFailure tErr = (TestFailure) errEnum.nextElement();", "+      errors[i] = _makeJUnitError(tErr, theclass, true);", "-", "+    ", "+    while (failures.hasMoreElements()) {", "+      TestFailure tFail = (TestFailure) failures.nextElement();", "+      errors[i] = _makeJUnitError(tFail, theclass, false);", "+      i++;", "+    }", "+      ", "+    Arrays.sort(errors);", "+    ", "+    //Create the array of errors and failures, ordered by line number", "+    ", "+    /* while ( (i < errors.length) && ( (tFail != null) || (tErr != null) ) ) {", "+     ", "+      if ( (jFail != null) && ( (jErr == null) || (jFail.lineNumber() < jErr.lineNumber()) ) ) {", "+        errors[i] = jFail;", "+        System.out.println(jFail.lineNumber());", "+        if (failures.hasMoreElements()) {", "+          tFail = (TestFailure)failures.nextElement();", "+          jFail = _makeJUnitError(tFail, theclass, false);", "+        }", "+        else {", "+          tFail = null;", "+          jFail = null;", "+        }", "+      }", "+      ", "+      else if ( (jErr != null) && ( (jFail == null) || (jErr.lineNumber() <= jFail.lineNumber()) ) ) {", "+        errors[i] = jErr;", "+        System.out.println(jErr.lineNumber());", "+        if (errEnum.hasMoreElements()) {", "+          tErr = (TestFailure)errEnum.nextElement();", "+          jErr = _makeJUnitError(tErr, theclass, true);", "+        }", "+        else {", "+          tErr = null;", "+          jErr = null;", "+        }", "+      }", "+       ", "+      i++;", "+    }*/", "+   "]}], "num": 5479}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "350818ec9c5ae4f1d136de821a0e1299", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9df09610e98dba626e26c74bad36da49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "08f616afaebe02cc02ba5da4da4990852caead81", "commitAfterChange": "879a487e79b03eab55f32f29728bf19cb9181971", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-  private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests) {", "+  private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests) {", "-              _jvm.runTestSuite();", "+              boolean testsPresent = _jvm.runTestSuite();  // The false boolean return value could be changed to an exception.", "+              if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-            catch(RemoteException e) { ", "-              /* System.err.println(\"Caught \" + e); */", "-              throw new UnexpectedException(e); ", "+            catch(RemoteException e) { // Unit testing was aborted; cleanup", "+              EventQueue.invokeLater(new Runnable() { public void run() { nonTestCase(allTests); } });", "-        // Probably a java.rmi.UnmarshalException caused by the interruption of unit testing.", "-        // Swallow the exception and proceed."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9331135d5a7869c6b3e481a1462b3cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled)      throws DebugException", "signatureAfterChange": "   public boolean toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled)      throws DebugException", "diff": ["-  public /* synchronized */ void toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled) ", "+  public boolean toggleBreakpoint(OpenDefinitionsDocument doc, int offset, int lineNum, boolean isEnabled) ", "-    if (offset < 0 || offset > doc.getLength()) return;", "+    if (offset < 0 || offset > doc.getLength()) return false;", "+        return false;", "-        try { setBreakpoint(new JPDABreakpoint(doc, offset, lineNum, isEnabled, this)); }", "-        catch(LineNotExecutableException lnee) { Utilities.show(lnee.getMessage()); }", "+        try { ", "+          setBreakpoint(new JPDABreakpoint(doc, offset, lineNum, isEnabled, this));", "+          return true;", "+        }", "+        catch(LineNotExecutableException lne) { ", "+          Utilities.show(lne.getMessage());", "+          return false;", "+        }", "-    else _model.getBreakpointManager().removeRegion(breakpoint);", "+    else {", "+      _model.getBreakpointManager().removeRegion(breakpoint);", "+      return false;", "+    }"]}], "num": 21958}
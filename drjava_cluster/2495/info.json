{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a99538625385ede44906ebe826aa0b7c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cdf5518a975910380fc0a73e5dae8ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "commitAfterChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "diff": ["+      LOG.log(\"compilerAdapter: \"+compilerAdapter );\r", "-        if (f.getName().equals(\"classes.jar\")) { libDir = f.getParentFile(); }\r", "+        if (f.getName().equals(\"classes.jar\")) { LOG.log(\"[1]\"); libDir = f.getParentFile(); }\r", "+          LOG.log(\"[2]\");\r", "+            LOG.log(\"[3]\");\r", "+              LOG.log(\"[4]\");\r", "-              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { libDir = jreLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { LOG.log(\"[5]\"); libDir = jreLibDir; }\r", "-              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { libDir = jdkLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { LOG.log(\"[6]\"); libDir = jdkLibDir; }\r", "+        LOG.log(\"libDir: \"+libDir);\r", "+          LOG.log(\"[7]\");\r", "-          if (jars != null) { bootClassPath = Arrays.asList(jars); }\r", "+          LOG.log(\"jars: \"+jars);\r", "+          if (jars != null) { LOG.log(\"jars: \"+java.util.Arrays.toString(jars)); bootClassPath = Arrays.asList(jars); }\r", "+          LOG.log(\"args, version: \"+version+\" f: \"+f.toString()+\" bootClassPath: \"+bootClassPath);\r", "+          LOG.log(\"attempt: \"+attempt+\", isAvailable: \"+attempt.isAvailable());\r", "-        catch (ReflectException e) { /* can't load */ }\r", "-        catch (LinkageError e) { /* can't load */ }\r", "+        catch (ReflectException e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r", "+        catch (LinkageError e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3a16a8a20497fd5b9e9fc1e554f1804", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "commitAfterChange": "09b707cda41d2d3c82d34a50c8dbebc9d7cd95a2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath)", "diff": ["+  /** Create a JarJDKToolsLibrary from a specific {@code \"tools.jar\"} or {@code \"classes.jar\"} file. */\r", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath) {\r", "+    List<File> bootClassPath = null;\r", "-      LOG.log(\"compilerAdapter: \"+compilerAdapter );\r", "-        if (f.getName().equals(\"classes.jar\")) { LOG.log(\"[1]\"); libDir = f.getParentFile(); }\r", "+        if (f.getName().equals(\"classes.jar\")) { libDir = f.getParentFile(); }\r", "-          LOG.log(\"[2]\");\r", "-            LOG.log(\"[3]\");\r", "-              LOG.log(\"[4]\");\r", "-              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { LOG.log(\"[5]\"); libDir = jreLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { libDir = jreLibDir; }\r", "-              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { LOG.log(\"[6]\"); libDir = jdkLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { libDir = jdkLibDir; }\r", "-        LOG.log(\"libDir: \"+libDir);\r", "-        List<File> bootClassPath = null; // null defers to the compiler's default behavior\r", "+        bootClassPath = new ArrayList<File>();\r", "-          LOG.log(\"[7]\");\r", "-          LOG.log(\"jars: \"+jars);\r", "-          if (jars != null) { LOG.log(\"jars: \"+java.util.Arrays.toString(jars)); bootClassPath = Arrays.asList(jars); }\r", "+          if (jars != null) { bootClassPath.addAll(Arrays.asList(jars)); }\r", "+        bootClassPath.addAll(additionalBootClassPath);\r", "+        if (bootClassPath.isEmpty()) { bootClassPath = null; } // null defers to the compiler's default behavior\r", "+          msg(\"JarJDKToolsLibrary bootClassPath: \"+((bootClassPath!=null)?IOUtil.pathToString(bootClassPath):\"n/a\"));\r", "-          LOG.log(\"args, version: \"+version+\" f: \"+f.toString()+\" bootClassPath: \"+bootClassPath);\r", "-          LOG.log(\"attempt: \"+attempt+\", isAvailable: \"+attempt.isAvailable());\r", "-        catch (ReflectException e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r", "-        catch (LinkageError e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r", "+        catch (ReflectException e) { /* can't load */ }\r", "+        catch (LinkageError e) { /* can't load */ }\r", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc);\r", "+    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc, bootClassPath);\r"]}], "num": 2495}
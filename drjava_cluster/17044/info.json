{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b7fb63f735aab345f3473a55015ea8a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3558c5f9ddfdb530b99d795daeacdf78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "          public void testForNumericAssignmentExpression()", "signatureAfterChange": "          public void testForNumericAssignmentExpression()", "diff": ["-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      assertEquals(\"There should be 4 errors\", 4, errors.size());", "-      assertEquals(\"The first error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.get(2).getFirst());", "-      assertEquals(\"The second error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\", errors.getLast().getFirst());", "-", "-      ", "+      assertEquals(\"There should still be 2 errors\", 2, errors.size());  // Generated duplicate error message", "+      assertEquals(\"The new error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\", ", "+                   errors.get(0).getFirst()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbf277f984f3fb16600c591ac6bbefcc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "                     public void testForSimpleAssignmentExpressionOnly()", "signatureAfterChange": "                     public void testForSimpleAssignmentExpressionOnly()", "diff": ["-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should only be 1 error\", 1, errors.size());  // Generated error is duplicate", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forSimpleAssignmentExpressionOnly(sae, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a value to the type double.  Perhaps you meant to create a new instance of double\", errors.get(2).getFirst());", "+      assertEquals(\"Should return double instance\", ", "+                   SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forSimpleAssignmentExpressionOnly(sae, ", "+                                                          SymbolData.DOUBLE_TYPE, ", "+                                                          SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 2 errors\", 2, errors.size());  // Generated one new error; one duplicate", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a value to the type double.  Perhaps you meant to create a new instance of double\", ", "+                   errors.get(1).getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forSimpleAssignmentExpressionOnly(sae, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use the type name int on the right hand side of an assignment.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Should return double instance\", ", "+                   SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forSimpleAssignmentExpressionOnly(sae, ", "+                                                          SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                          SymbolData.INT_TYPE));", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the type name int on the right hand side of an assignment.  \" +", "+                   \"Perhaps you meant to create a new instance of int\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forSimpleAssignmentExpressionOnly(sae, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should now be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign something of type double to something of type int\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forSimpleAssignmentExpressionOnly(sae, ", "+                                                          SymbolData.INT_TYPE.getInstanceData(), ", "+                                                          SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign something of type double to something of type int\", ", "+                   errors.get(3).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca693a9c45acf041d940f21bbcb70c34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "             public void testForComplexMethodInvocation()", "signatureAfterChange": "               public void testForComplexMethodInvocation()", "diff": ["-  ", "+    ", "-      MethodInvocation staticNoArgs = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation noArgs = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation oneIntArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "-      MethodInvocation staticOneDoubleArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodInvocation oneDoubleArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-", "+      MethodInvocation staticNoArgs = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation noArgs = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation oneIntArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation staticOneDoubleArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      MethodInvocation oneDoubleArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      ", "-", "+      ", "-            ", "-      //if method is in class, should work fine!", "+      ", "+      // if method is in class, should work fine!", "-      //should be able to reference a static method from instance context", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      // should be able to reference a static method from instance context", "+      MethodData doubleArg = ", "+        new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, ", "+                       new VariableData[] { new VariableData(SymbolData.DOUBLE_TYPE) }, ", "+                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "-      //should be able to reference a static method from static context", "+      // should be able to reference a static method from static context", "-      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), staticOneDoubleArg.visit(_etc));", "+      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   staticOneDoubleArg.visit(_etc));", "-      //should not be able to reference a non-static method from a static context", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), staticNoArgs.visit(_etc));", "+      // should not be able to reference a non-static method from a static context", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(),", "+                   staticNoArgs.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "-                           ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot access the non-static method myName from a static context\", ", "+                   errors.getLast().getFirst());", "+      ", "-      //if in context of static method, should not be able to reference non-static method", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      // if in context of static method, should be able to reference non-static method given a receiver", "+      MethodData intArg = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, ", "+                       new VariableData[] { new VariableData(SymbolData.INT_TYPE)}, ", "+                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), oneIntArg.visit(_etc).getName());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "-", "-      //if enclosing class is private, should not work!", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), ", "+                   oneIntArg.visit(_etc).getName());", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());", "+//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+      ", "+      // if enclosing class is private, should not work!", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      assertEquals(\"Should be 3 errors\", 3, errors.size());"]}], "num": 17044}
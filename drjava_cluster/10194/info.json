{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ad40e9d65b7acfbf6d7b7715a7db7c9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eee3976a9f868e8f86ab95e41a9eb55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/DisplayVisitor.java", "commitBeforeChange": "5cb9931cd4d17d4bcf0e028e2763a314647f8344", "commitAfterChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "   public Void visit(MethodDeclaration node)", "signatureAfterChange": "   public Void visit(MethodDeclaration node)", "diff": ["-    Iterator it = node.getParameters().iterator();", "-    while (it.hasNext()) {", "-      ((Node)it.next()).acceptVisitor(this);", "+    for (Node n : node.getParameters()) {", "+      n.acceptVisitor(this);", "-    it = node.getExceptions().iterator();", "-    while (it.hasNext()) {", "-      ((Node)it.next()).acceptVisitor(this);", "+    for (Node n : node.getExceptions()) {", "+      n.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f0185ac99dc8d3a0f43046df2c65e52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "6cf7109c051951c37bb5c3d5a185c43cb04511a0", "commitAfterChange": "5a0b0e9e35705d89ba0a2d05c390e3df356c459c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "signatureAfterChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-      Collection<INavigationListener<? super ItemT>> listeners = parent.getNavigatorListeners();", "-      Iterator<INavigationListener<? super ItemT>> it = listeners.iterator();", "-      while (it.hasNext()) {", "-        INavigationListener<? super ItemT> listener = it.next();", "-        child.addNavigationListener(listener);", "-        parent.removeNavigationListener(listener);", "-        ", "-        // I don't understand the motivation behind this line.  Is it possible for", "-        // it to become invalid?  If so, what's to prevent that from happening", "-        // again after this line but before we call next()?", "-        it = listeners.iterator();", "-      }", "+      for (INavigationListener nl: parent.getNavigatorListeners())  child.addNavigationListener(nl);", "+      for (FocusListener fl: parent.getFocusListeners())  child.addFocusListener(fl);"]}], "num": 10194}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fcda6497fc3c2f6e71939e0e074bdb3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1614fd949036c68ce56166e416f67ff8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index)", "signatureAfterChange": "   public TypeData forArrayAccessOnly(ArrayAccess that, TypeData lhs, TypeData index)", "diff": ["-      _addError(\"The variable referred to by this array access is a \" + lhs.getSymbolData().getName() + \", not an array\", that);", "+      _addError(\"The variable referred to by this array access is a \" + lhs.getSymbolData().getName() + \", not an array\",", "+                that);", "-        !index.getSymbolData().isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "-      _addError(\"You cannot reference an array element with an index of type \" + index.getSymbolData().getName() + \".  Instead, you must use an int\", that);", "+        !index.getSymbolData().isAssignableTo(SymbolData.INT_TYPE, JAVA_VERSION)) {", "+      _addError(\"You cannot reference an array element with an index of type \" + index.getSymbolData().getName() + ", "+                \".  Instead, you must use an int\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c09a94afbe28ca6592387ba58d83f90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "diff": ["-   */", "+    */", "-    if (assertInstanceType(value_result, \"You cannot use the not (!) operator with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "-        !value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+    if (assertInstanceType(value_result, ", "+                           \"You cannot use the not (!) operator with \" + value_result.getName() + ", "+                           \", because it is a class name, not an instance\", that) &&", "+        ! value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, ", "+                                                      JAVA_VERSION)) {", "-      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + \". Instead, it should be used with an expression of boolean type\", that);", "+      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + ", "+                \". Instead, it should be used with an expression of boolean type\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20d0c715afd7a88793961f47f500a99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "diff": ["-    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "-        !value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + ", "+                           \", because it is a class name, not an instance\", that) &&", "+        !value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + \".  You can only apply it to a numeric type such as double, int, or char\", that);", "+      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + ", "+                \".  You can only apply it to a numeric type such as double, int, or char\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b017d8027e9954b6d75c60cdcc7180", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result,                                                      TypeData value_result)", "diff": ["-   */", "-  public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, TypeData value_result) {", "+    */", "+  public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, ", "+                                                    TypeData value_result) {", "-        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + \" on the right hand side of an assignment\", that)) {", "+        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + ", "+                           \" on the right hand side of an assignment\", that)) {", "-      if (!value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), LanguageLevelConverter.OPT.javaVersion())) {", "-        _addError(\"You cannot assign something of type \" + value_result.getName() + \" to something of type \" + name_result.getName(), that);", "+      if (! value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), JAVA_VERSION)) {", "+        _addError(\"You cannot assign something of type \" + value_result.getName() + \" to something of type \" + ", "+                  name_result.getName(), that);"]}], "num": 24793}
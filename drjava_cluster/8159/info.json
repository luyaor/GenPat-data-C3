{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3eed3e644bc9dfd6b90386a34bfc55c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183b28c4305e7f93c2160b5ed582c1c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 488, "methodNumberAfterChange": 488, "signatureBeforeChange": "\r \r   public void forParenthesized(Parenthesized that)", "signatureAfterChange": "    public void forParenthesized(Parenthesized that)", "diff": ["-\r", "-  public void forParenthesized(Parenthesized that) {\r", "-    forParenthesizedDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    forParenthesizedOnly(that);\r", "-  }\r", "+", "+  public void forParenthesized(Parenthesized that) {", "+    forParenthesizedDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    forParenthesizedOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d133bbd72bfb70d70732ef70f73826ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 489, "methodNumberAfterChange": 489, "signatureBeforeChange": "\r \r   public void forEmptyExpression(EmptyExpression that)", "signatureAfterChange": "    public void forEmptyExpression(EmptyExpression that)", "diff": ["-\r", "-  public void forEmptyExpression(EmptyExpression that) {\r", "-    forEmptyExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyExpressionOnly(that);\r", "-  }\r", "+", "+  public void forEmptyExpression(EmptyExpression that) {", "+    forEmptyExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyExpressionOnly(that);", "+  }"]}], "num": 8159}
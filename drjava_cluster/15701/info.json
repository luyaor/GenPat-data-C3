{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7372543d53b7bcad51e7bb9fb643169", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530b146dbd462ff4d38152e18f4d5ce7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "dc44f2c291566cb82cbfcc08bb2e8d6ce606f7a0", "commitAfterChange": "e1cae1f7b6aae460aab41e86b032251abb119211", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["+                                        <Boolean,Boolean,Boolean>(\"and\",", "+                                                                \"If op1 and op2 are true, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<boolean>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<boolean>\\\"\",", "+                                                                new Lambda2<Boolean,Boolean,Boolean>() {", "+      public Boolean value(Boolean op1, Boolean op2) { return op1 && op2; }", "+    },", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Boolean,Boolean,Boolean>(\"or\",", "+                                                                \"If at least one of op1, op2 is true, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<boolean>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<boolean>\\\"\",", "+                                                                new Lambda2<Boolean,Boolean,Boolean>() {", "+      public Boolean value(Boolean op1, Boolean op2) { return op1 || op2; }", "+    },", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.PARSE_BOOL,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new UnaryOpProperty", "+                                        <Boolean,Boolean>(\"not\",", "+                                                          \"If op is true, returns false,\"+", "+                                                          \"true otherwise.\\n\"+", "+                                                          \"Required attributes:\\n\"+", "+                                                          \"\\top=\\\"<boolean>\\\"\",", "+                                                          new Lambda<Boolean,Boolean>() {", "+      public Boolean value(Boolean op) { return !op; }", "+    },", "+                                                          UnaryOpProperty.PARSE_BOOL,", "+                                                          UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59edeed1f24c27bcb203277b9ddd818c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "098248186c2cd94be6c7bc9bfe60fa3101b5a0ba", "commitAfterChange": "200037d181721d5a77f697343bf01da60193d9d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-                                                                            \"\\tdirfilter=\\\"<filter for which dirs to recurse>\\\"\"));", "+                                                                            \"\\tdirfilter=\\\"<filter for which dirs to recurse>\\\"\\n\"+", "+                                                                            \"\\tsquote=\\\"<true to enclose file in single quotes>\\\"\\n\"+", "+                                                                            \"\\tdquote=\\\"<true to enclose file in double quotes>\\\"\"));", "-                                        <Boolean,Boolean,Boolean>(\"and\",", "-                                                                \"If op1 and op2 are true, returns true,\"+", "+                                        <String,String,Boolean>(\"neq\",", "+                                                                \"If the op1 is not equal to op2, returns true,\"+", "-                                                                \"\\top1=\\\"<boolean>\\\"\\n\"+", "-                                                                \"\\top2=\\\"<boolean>\\\"\",", "+                                                                \"\\top1=\\\"<string>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<string>\\\"\",", "+                                                                new Lambda2<String,String,Boolean>() {", "+      public Boolean value(String op1, String op2) { return !op1.equals(op2); }", "+    },", "+                                                                UnaryOpProperty.PARSE_STRING,", "+                                                                UnaryOpProperty.PARSE_STRING,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Boolean,Boolean,Boolean>(\"and\",", "+                                                                  \"If op1 and op2 are true, returns true,\"+", "+                                                                  \"false otherwise.\\n\"+", "+                                                                  \"Required attributes:\\n\"+", "+                                                                  \"\\top1=\\\"<boolean>\\\"\\n\"+", "+                                                                  \"\\top2=\\\"<boolean>\\\"\",", "-                                                                \"If at least one of op1, op2 is true, returns true,\"+", "-                                                                \"false otherwise.\\n\"+", "-                                                                \"Required attributes:\\n\"+", "-                                                                \"\\top1=\\\"<boolean>\\\"\\n\"+", "-                                                                \"\\top2=\\\"<boolean>\\\"\",", "+                                                                  \"If at least one of op1, op2 is true, returns true,\"+", "+                                                                  \"false otherwise.\\n\"+", "+                                                                  \"Required attributes:\\n\"+", "+                                                                  \"\\top1=\\\"<boolean>\\\"\\n\"+", "+                                                                  \"\\top2=\\\"<boolean>\\\"\",", "+                                                                      null,", "+                                                                      UnaryOpProperty.PARSE_STRING,", "+                                                                      \"old\",", "+                                                                      null,", "+                                                                      UnaryOpProperty.PARSE_STRING,", "+                                                                      \"new\",", "+                                                                      null,", "+                                                                      UnaryOpProperty.PARSE_STRING,", "+                                                                      UnaryOpProperty.FORMAT_STRING));", "+", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new TernaryOpProperty", "+                                        <String,String,String,String>(\"replace.string\",", "+                                                                      \"Replaces each occurrence in a string.\"+", "+                                                                      \"Required attributes:\\n\"+", "+                                                                      \"\\ttext=\\\"<text in which to replace>\\\"\\n\"+", "+                                                                      \"\\told=\\\"<old separator>\\\"\\n\"+", "+                                                                      \"\\tnew=\\\"<new separator>\\\"\",", "+                                                                      new Lambda3<String,String,String,String>() {", "+      public String value(String s, String oldStr, String newStr) {", "+        if (s.length()==0) return \"\";", "+        return s.replaceAll(edu.rice.cs.plt.text.TextUtil.regexEscape(oldStr), newStr);", "+      }", "+    },", "+                                                                      \"text\",", "-                                                                      \"\\trel=\\\"<dir to which the files are relative>\\\"\"));", "+                                                                      \"\\trel=\\\"<dir to which the files are relative>\\\"\\n\"+", "+                                                                      \"\\tsquote=\\\"<true to enclose file in single quotes>\\\"\\n\"+", "+                                                                      \"\\tdquote=\\\"<true to enclose file in double quotes>\\\"\"));", "-                                                               \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                               \"\\trel=\\\"<dir to which the output should be relative\\\"\\n\"+", "+                                                               \"\\tsquote=\\\"<true to enclose file in single quotes>\\\"\\n\"+", "+                                                               \"\\tdquote=\\\"<true to enclose file in double quotes>\\\"\") {", "-                                                               \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                               \"\\trel=\\\"<dir to which the output should be relative\\\"\\n\"+", "+                                                               \"\\tsquote=\\\"<true to enclose file in single quotes>\\\"\\n\"+", "+                                                               \"\\tdquote=\\\"<true to enclose file in double quotes>\\\"\") {"]}], "num": 15701}
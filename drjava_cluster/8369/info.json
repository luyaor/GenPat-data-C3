{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82d4a9f9a3086f7eddc162d6c8dba1d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4312caa0e2bb0daaf2bcf5891de6f586", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 69, "signatureBeforeChange": "   private Type handleBitwiseAssignmentExpression(BinaryExpression node)", "signatureAfterChange": "     private Type handleBitwiseAssignmentExpression(BinaryExpression node)", "diff": ["-   */", "-  private Type handleBitwiseAssignmentExpression(BinaryExpression node) {", "-    Type result = node.getLeftExpression().acceptVisitor(this);", "-    node.getRightExpression().acceptVisitor(this);", "-    try {", "-      Expression left = ts.makePrimitive(node.getLeftExpression());", "-      Expression right = ts.makePrimitive(node.getRightExpression());", "-      if (getType(left) instanceof BooleanType && getType(right) instanceof BooleanType) {", "-        // Do nothing", "-      }", "-      else if (getType(left) instanceof IntegralType && getType(right) instanceof IntegralType) {", "-        Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "-        left = promoted.first();", "-        right = promoted.second();", "-      }", "-      else {", "-        throw new ExecutionError(\"bitwise.expression.type\", node);", "-      }", "-      ", "-      if (!hasVariableType(node.getLeftExpression())) {", "-        throw new ExecutionError(\"bitwise.expression.type\", node);", "-      }", "-      setLeftExpression(node, left); // not to be confused with node.setLeftExpression(...)", "-      node.setRightExpression(right);", "-      return setType(node, result);", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"bitwise.expression.type\", node);", "-    }", "-  }", "+     */", "+    private Type handleBitwiseAssignmentExpression(BinaryExpression node) {", "+      Type result = check(node.getLeftExpression());", "+      check(node.getRightExpression());", "+      try {", "+        Expression left = ts.makePrimitive(node.getLeftExpression());", "+        Expression right = ts.makePrimitive(node.getRightExpression());", "+        if (getType(left) instanceof BooleanType && getType(right) instanceof BooleanType) {", "+          // Do nothing", "+        }", "+        else if (getType(left) instanceof IntegralType && getType(right) instanceof IntegralType) {", "+          Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "+          left = promoted.first();", "+          right = promoted.second();", "+        }", "+        else {", "+          throw new ExecutionError(\"bitwise.expression.type\", node);", "+        }", "+        ", "+        if (!hasVariableType(node.getLeftExpression())) {", "+          throw new ExecutionError(\"bitwise.expression.type\", node);", "+        }", "+        setLeftExpression(node, left); // not to be confused with node.setLeftExpression(...)", "+        node.setRightExpression(right);", "+        return setType(node, result);", "+      }", "+      catch (UnsupportedConversionException e) {", "+        throw new ExecutionError(\"bitwise.expression.type\", node);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "640894372c551a7afadfee37083dfcb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 56, "signatureBeforeChange": "   private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                         Lambda2<Object, Object, Object>  primitiveCase)", "signatureAfterChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "diff": ["-   */", "-  private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,", "-                                        Lambda2<Object, Object, Object>  primitiveCase) {", "-    Type leftT = node.getLeftExpression().acceptVisitor(this);", "-    Type rightT = node.getRightExpression().acceptVisitor(this);", "-    if (ts.isReference(leftT) && ts.isReference(rightT)) {", "-      if (!ts.isCastable(leftT, rightT) && !ts.isCastable(rightT, leftT)) {", "+     */", "+    private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,", "+                                          Lambda2<Object, Object, Object>  primitiveCase) {", "+      Type leftT = check(node.getLeftExpression());", "+      Type rightT = check(node.getRightExpression());", "+      if (ts.isReference(leftT) && ts.isReference(rightT)) {", "+        if (!ts.isCastable(leftT, rightT) && !ts.isCastable(rightT, leftT)) {", "+          throw new ExecutionError(\"compare.type\", node);", "+        }", "+        setOperation(node, objectCase);", "+      }", "+      else {", "+        try {", "+          Expression left = ts.makePrimitive(node.getLeftExpression());", "+          Expression right = ts.makePrimitive(node.getRightExpression());", "+          ", "+          if (getType(left) instanceof BooleanType && getType(right) instanceof BooleanType) {", "+            node.setLeftExpression(left);", "+            node.setRightExpression(right);", "+          }", "+          else if (getType(left) instanceof NumericType && getType(right) instanceof NumericType) {", "+            Pair<Expression, Expression> promoted = ts.binaryPromote(left, right);", "+            left = promoted.first();", "+            right = promoted.second();", "+            node.setLeftExpression(promoted.first());", "+            node.setRightExpression(promoted.second());", "+          }", "+          else {", "+            throw new ExecutionError(\"compare.type\", node);", "+          }", "+          setOperation(node, primitiveCase);", "+        }", "+        catch (UnsupportedConversionException e) {", "+          throw new ExecutionError(\"compare.type\", node);", "+        }", "+      }", "+      return setType(node, TypeSystem.BOOLEAN);", "+    }", "-      setOperation(node, objectCase);", "-    else {", "-          node.setLeftExpression(left);", "-          node.setRightExpression(right);", "-        else if (getType(left) instanceof NumericType && getType(right) instanceof NumericType) {", "-          node.setLeftExpression(promoted.first());", "-          node.setRightExpression(promoted.second());", "-          throw new ExecutionError(\"compare.type\", node);", "-        setOperation(node, primitiveCase);", "-        throw new ExecutionError(\"compare.type\", node);", "-      }", "-    }", "-    return setType(node, TypeSystem.BOOLEAN);", "-  }"]}], "num": 8369}
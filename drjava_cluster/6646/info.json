{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efb969943031a90d32bb0173ceb9bf68", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01ef938893d04c7c9d88e525a7b783f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected InstanceData[] getArgTypesForInvocation(ParenthesizedExpressionList pel)", "signatureAfterChange": "   protected InstanceData[] getArgTypesForInvocation(ParenthesizedExpressionList pel)", "diff": ["-    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages,", "+                                                          _vars, _thrown);", "-        _addError(\"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);", "+        _addError(\"Cannot pass a class or interface name as a constructor argument.  \" + ", "+                  \"Perhaps you meant to create an instance or use \" + args[i].getName() + \".class\", exprs[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ee34b563a732ff3ae2e5dcd8f425fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public TypeData complexSuperConstructorInvocationAllowed(ComplexSuperConstructorInvocation that)", "signatureAfterChange": "   public TypeData complexSuperConstructorInvocationAllowed(ComplexSuperConstructorInvocation that)", "diff": ["-   */", "+    */", "-    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, ", "+                                                          _vars, _thrown);", "-    if (!assertFound(enclosingResult, that)) {return null;};", "+    if (! assertFound(enclosingResult, that)) return null;"]}], "num": 6646}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2540006c6d19800a46eadba6432194b9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0932edb3c27ecbac5ed9c2fa9a7beb16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   protected final void invokeSlave(JVMBuilder jvmBuilder)", "signatureAfterChange": "   protected final void invokeSlave(JVMBuilder jvmBuilder)", "diff": ["-    if (isDisposed()) { throw new IllegalStateException(); }", "-    ", "-    // verify that we're in the right state, and that only one thread will start at a time", "-    while (!_monitor.compareAndSet(State.FRESH, State.STARTING)) {", "-      debug.logValue(\"Waiting for FRESH state\", \"current state\", _monitor.value());", "-      try { _monitor.ensureState(State.FRESH); }", "-      catch (InterruptedException e) { throw new UnexpectedException(e); }", "-    }", "-    debug.log(\"Entered STARTING state\");", "-    ", "+    transition(State.FRESH, State.STARTING);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "782378c709e7bbe5c69f7877c10f27f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected final void quitSlave()", "signatureAfterChange": "   protected final void quitSlave()", "diff": ["-    if (isDisposed()) { throw new IllegalStateException(); }", "-", "-    // verify that we're in the right state, and that only one thread will quit at a time", "-    while (!_monitor.compareAndSet(State.RUNNING, State.QUITTING)) {", "-      debug.logValue(\"Waiting for RUNNING state\", \"current state\", _monitor.value());", "-      try { _monitor.ensureState(State.RUNNING); }", "-      catch (InterruptedException e) { throw new UnexpectedException(e); }", "-    }", "-    debug.log(\"Entered QUITTING state\");", "+    transition(State.RUNNING, State.QUITTING);"]}], "num": 14119}
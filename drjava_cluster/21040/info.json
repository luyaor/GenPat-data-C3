{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efc5db791ad72d29ba35fbe53871f306", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0194315b67db08ba26714d93820f827d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 43, "signatureBeforeChange": "          public NodeDiffLog(String leftName, TypeSystem leftTS, String rightName, TypeSystem rightTS, boolean verbose)", "signatureAfterChange": "          public NodeDiffLog(String leftName, TypeSystem leftTS, String rightName, TypeSystem rightTS, boolean verbose)", "diff": ["+      Thunk<Map<SourceInfo, PredicateSet<Cast>>> mapFactory3 = CollectUtil.treeMapFactory();", "-      _errors = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      Thunk<Set<Cast>> setFactory3 = CollectUtil.hashSetFactory();", "+      _commonErrors = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _leftErrors = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _rightErrors = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _polymorphicDeclarations = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _simpleWildcards = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _extendsWildcards = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _superWildcards = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "-      _leftCasts = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "-      _rightCasts = new IndexedRelation<SourceInfo, Location>(mapFactory2, setFactory2);", "+      _leftCasts = new IndexedRelation<SourceInfo, Cast>(mapFactory3, setFactory3);", "+      _rightCasts = new IndexedRelation<SourceInfo, Cast>(mapFactory3, setFactory3);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80ecdd88da5d5bd14d3a9d167e179756", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "commitAfterChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public String getVariableToString(String var)", "signatureAfterChange": "   public Pair<String,String> getVariableToString(String var)", "diff": ["-  public String getVariableToString(String var) {", "+  public Pair<String,String> getVariableToString(String var) {", "-      try { return TextUtil.toString(value.unwrap(\"\")); }", "+      try {", "+          return value.apply(new OptionVisitor<Object,Pair<String,String>>() {", "+              public Pair<String,String> forNone() {", "+                  return new Pair<String,String>(\"\",\"\");", "+              }", "+              public Pair<String,String> forSome(Object value) {", "+                  return new Pair<String,String>(TextUtil.toString(value),value.getClass().getName());", "+              }", "+          });", "+      }", "-    catch (InterpreterException e) { return \"\"; }", "-  }", "+    catch (InterpreterException e) { return new Pair<String,String>(\"\",\"\"); }"]}], "num": 21040}
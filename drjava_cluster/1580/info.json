{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e47898e5a40855477f398cd3ab3443fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c710dd837209b32b9213294740f9632", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "          public void testForCastExpression()", "signatureAfterChange": "          public void testForCastExpression()", "diff": ["-      CastExpression ce = new CastExpression(SourceInfo.NO_INFO, ", "-                                             new PrimitiveType(SourceInfo.NO_INFO, \"dan\"), ", "-                                             new NullLiteral(SourceInfo.NO_INFO));", "+      CastExpression ce = new CastExpression(SourceInfo.NONE, new PrimitiveType(SourceInfo.NONE, \"dan\"), NULL_LITERAL);", "-        new CastExpression(SourceInfo.NO_INFO,", "-                           new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                           new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"notReal\")));", "+        new CastExpression(SourceInfo.NONE,", "+                           new PrimitiveType(SourceInfo.NONE, \"int\"),", "+                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"notReal\")));", "-      CastExpression ce3 = new CastExpression(SourceInfo.NO_INFO,", "-                                              new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "-                                              new DoubleLiteral(SourceInfo.NO_INFO, 5));", "+      CastExpression ce3 = new CastExpression(SourceInfo.NONE,", "+                                              new PrimitiveType(SourceInfo.NONE, \"int\"),", "+                                              new DoubleLiteral(SourceInfo.NONE, 5));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "592697d5256b832ea80713dc7303ddb4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": "               public void testLiterals()", "signatureAfterChange": "               public void testLiterals()", "diff": ["-      StringLiteral sl = new StringLiteral(SourceInfo.NO_INFO, \"string literal!\");", "-      IntegerLiteral il = new IntegerLiteral(SourceInfo.NO_INFO, 4);", "-      LongLiteral ll = new LongLiteral(SourceInfo.NO_INFO, 5);", "-      FloatLiteral fl = new FloatLiteral(SourceInfo.NO_INFO, 1.2f);", "-      DoubleLiteral dl = new DoubleLiteral(SourceInfo.NO_INFO, 4.2);", "-      CharLiteral cl = new CharLiteral(SourceInfo.NO_INFO, 'c');", "-      BooleanLiteral bl = new BooleanLiteral(SourceInfo.NO_INFO, true);", "-      NullLiteral nl = new NullLiteral(SourceInfo.NO_INFO);", "-      ClassLiteral csl = new ClassLiteral(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"monkey\", new Type[0]));", "+      StringLiteral sl = new StringLiteral(SourceInfo.NONE, \"string literal!\");", "+      IntegerLiteral il = new IntegerLiteral(SourceInfo.NONE, 4);", "+      LongLiteral ll = new LongLiteral(SourceInfo.NONE, 5);", "+      FloatLiteral fl = new FloatLiteral(SourceInfo.NONE, 1.2f);", "+      DoubleLiteral dl = new DoubleLiteral(SourceInfo.NONE, 4.2);", "+      CharLiteral cl = new CharLiteral(SourceInfo.NONE, 'c');", "+      BooleanLiteral bl = new BooleanLiteral(SourceInfo.NONE, true);", "+      ClassLiteral csl = ", "+        new ClassLiteral(SourceInfo.NONE, new ClassOrInterfaceType(SourceInfo.NONE, \"monkey\", new Type[0]));", "-      assertEquals(\"Should return null type\", SymbolData.NULL_TYPE.getInstanceData(), nl.visit(_etc));", "-      ", "+      assertEquals(\"Should return null type\", SymbolData.NULL_TYPE.getInstanceData(), NULL_LITERAL.visit(_etc));", "-      ", "-      "]}], "num": 1580}
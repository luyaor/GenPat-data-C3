{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c476c3f9c7f004666e648b9d89ad774", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c853cb0aaaa326afbd38091dd4792804", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": "   public String createUniqueMethodName(String methodName)", "signatureAfterChange": "   public String createUniqueMethodName(String methodName)", "diff": ["-    int counter = 0;  //note: it is possible that the counter could wrap around and this could run infinitely, but that is very unlikely.", "+    int counter = 0;  // Note: loop tests for counter overflow, but memory would be exhausted much earlier", "-      newName = methodName + counter; counter++;", "+      newName = methodName + counter; ", "+      counter++;", "-    if (counter == -1) {throw new RuntimeException(\"Internal Program Error: Unable to rename method \" + methodName + \".  All possible names were taken.  Please report this bug.\");}", "+    if (counter == -1) throw ", "+      new RuntimeException(\"Internal Program Error: Unable to rename method \" + methodName ", "+                             + \".  All possible names were taken.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa39ffbabedfde7e5d0307647067c7d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, Data enclosing, boolean isClass)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName,                                            Data enclosing, boolean isClass)", "diff": ["-  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, Data enclosing, boolean isClass) {", "+  protected SymbolData addInnerSymbolData(TypeDefBase typeDefBase, String qualifiedClassName, String partialName, ", "+                                          Data enclosing, boolean isClass) {", "-    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.  Please report this bug.\");}", "+    else {throw new RuntimeException(\"Internal Program Error: typeDefBase was not a ClassDef or InterfaceDef.\" + ", "+                                     \"  Please report this bug.\");}"]}], "num": 2122}
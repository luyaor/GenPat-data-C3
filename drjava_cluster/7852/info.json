{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d54da32f9bb586f0c17e183aa4ad461", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74592105e98c91a4edcd3c520e9f5407", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\r   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result)", "signatureAfterChange": "   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result)", "diff": ["-   */\r", "-  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result) {\r", "-    //make sure all of the dimensions_result dimensions are instance datas\r", "-    Expression[] dims = that.getDimensionSizes().getExpressions();\r", "-    for (int i = 0; i<dimensions_result.length; i++) {\r", "-      if (dimensions_result[i] != null && assertFound(dimensions_result[i], dims[i])) {\r", "-        if (!dimensions_result[i].getSymbolData().isAssignableTo(SymbolData.INT_TYPE, _targetVersion)) {\r", "-          _addError(\"The dimensions of an array instantiation must all be ints.  You have specified something of type \" + dimensions_result[i].getName(), dims[i]);\r", "-        }\r", "-        else {\r", "-          assertInstanceType(dimensions_result[i], \"All dimensions of an array instantiation must be instances.  You have specified the type \" + dimensions_result[i].getName(), dims[i]);\r", "-        }               \r", "-      }\r", "-    }\r", "-    \r", "-    if (type_result instanceof ArrayData) {\r", "-      int dim = ((ArrayData) type_result).getDimensions();\r", "-      if (dimensions_result.length > dim) {\r", "-       //uh oh!  Dimensions list is too long!\r", "-        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim + \" dimensions, but you have specified \" + dimensions_result.length + \" dimensions--the wrong number\", that);\r", "-      }\r", "-    }\r", "-\r", "-    //return an instance of the new type\r", "-    if (type_result == null || !assertFound(type_result, that)) {return null;}\r", "-    return type_result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result) {", "+    //make sure all of the dimensions_result dimensions are instance datas", "+    Expression[] dims = that.getDimensionSizes().getExpressions();", "+    for (int i = 0; i<dimensions_result.length; i++) {", "+      if (dimensions_result[i] != null && assertFound(dimensions_result[i], dims[i])) {", "+        if (!dimensions_result[i].getSymbolData().isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+          _addError(\"The dimensions of an array instantiation must all be ints.  You have specified something of type \" + dimensions_result[i].getName(), dims[i]);", "+        }", "+        else {", "+          assertInstanceType(dimensions_result[i], \"All dimensions of an array instantiation must be instances.  You have specified the type \" + dimensions_result[i].getName(), dims[i]);", "+        }               ", "+      }", "+    }", "+    ", "+    if (type_result instanceof ArrayData) {", "+      int dim = ((ArrayData) type_result).getDimensions();", "+      if (dimensions_result.length > dim) {", "+       //uh oh!  Dimensions list is too long!", "+        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim + \" dimensions, but you have specified \" + dimensions_result.length + \" dimensions--the wrong number\", that);", "+      }", "+    }", "+", "+    //return an instance of the new type", "+    if (type_result == null || !assertFound(type_result, that)) {return null;}", "+    return type_result.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9a659bbbab2f7c65ac5cba7bfe7add2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r   public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result)", "signatureAfterChange": "   public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result)", "diff": ["-   */\r", "-  public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result) {\r", "-    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {\r", "-      if (!testExpression_result.isInstanceType()) {\r", "-        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!testExpression_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());\r", "-      }\r", "-    }\r", "-\r", "-    if (testExpression_result == null ||\r", "-        thenStatement_result == null || \r", "-        elseStatement_result == null) { return null; }\r", "-\r", "-     \r", "-    //     We don't throw an error here because if the then and else branches return incompatible types,\r", "-    //     there must have already been an error thrown in forValueReturnStatementOnly\r", "-    //     that indicates that one of the return statements is returning the wrong type.\r", "-    SymbolData result = getCommonSuperType(thenStatement_result.getSymbolData(), elseStatement_result.getSymbolData());\r", "-    if (result==null) {return null;}\r", "-    return result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result) {", "+    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {", "+      if (!testExpression_result.isInstanceType()) {", "+        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!testExpression_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+      }", "+    }", "+", "+    if (testExpression_result == null ||", "+        thenStatement_result == null || ", "+        elseStatement_result == null) { return null; }", "+", "+     ", "+    //     We don't throw an error here because if the then and else branches return incompatible types,", "+    //     there must have already been an error thrown in forValueReturnStatementOnly", "+    //     that indicates that one of the return statements is returning the wrong type.", "+    SymbolData result = getCommonSuperType(thenStatement_result.getSymbolData(), elseStatement_result.getSymbolData());", "+    if (result==null) {return null;}", "+    return result.getInstanceData();", "+  }"]}], "num": 7852}
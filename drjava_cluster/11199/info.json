{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "147473624e3f5d6fab552df1fc981332", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01c3e1f25c743f06259474ab7b6ce50a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece, LinkedList<VariableData> vars, boolean shouldRecur, boolean addError)", "signatureAfterChange": "   public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece,                                                  LinkedList<VariableData> vars, boolean shouldRecur, boolean addError)", "diff": ["-   */", "-  public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece, LinkedList<VariableData> vars, boolean shouldRecur, boolean addError) {", "+    */", "+  public static VariableData getFieldOrVariable(String text, Data data, SymbolData thisSD, JExpression piece, ", "+                                                LinkedList<VariableData> vars, boolean shouldRecur, boolean addError) {", "-    if (data == null) {", "-      return null;", "-    }", "+    if (data == null) return null;", "-          if (vd.getEnclosingData() instanceof BodyData && addError) {", "-            /* ", "-             * If vd is defined in a method body and", "-             * thisSD is a local class or anonymous inner class defined in data, then vd must be", "-             * final to be used.", "+          if (vd.getEnclosingData() instanceof MethodData && addError) {  // was BodyData", "+            /* If vd is defined in a method and thisSD is a local class or anonymous inner class defined in data, then ", "+             * vd must be final to be used.  Note: the enclosingData of formal parameters is the enclosing class not", "+             * the corresponding method.", "-                _addError(\"Local variable \" + vd.getName() + \" is accessed from within an inner class; must be declared final\", piece);", "+                _addError(\"Local variable \" + vd.getName() ", "+                            + \" is accessed from within an inner class; must be declared final\", piece);", "-            checkAccessibility(piece, vd.getMav(), vd.getName(), vd.getEnclosingData().getSymbolData(), thisSD, \"field or variable\");", "+            checkAccess(piece, vd.getMav(), vd.getName(), vd.getEnclosingData().getSymbolData(), thisSD, ", "+                        \"field or variable\");", "-        if (outerData != null) {", "-          vd = getFieldOrVariable(text, outerData, thisSD, piece, outerData.getVars(), true, addError);", "-        }", "-        else {return null;}", "-        ", "-        if (vd != null) {", "-          return vd;", "-        }", "+        if (outerData == null) return null;", "+        vd = getFieldOrVariable(text, outerData, thisSD, piece, outerData.getVars(), true, addError);", "+        if (vd != null) return vd;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07bd757824b207815e0052026205cc7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 87, "signatureBeforeChange": "   protected static boolean checkDifferentReturnTypes(MethodData md, SymbolData sd, boolean addError, JavaVersion version)", "signatureAfterChange": "   protected static boolean checkDifferentReturnTypes(MethodData md, SymbolData sd, boolean addError,                                                       JavaVersion version)", "diff": ["-  protected static boolean checkDifferentReturnTypes(MethodData md, SymbolData sd, boolean addError, JavaVersion version) {", "+  protected static boolean checkDifferentReturnTypes(MethodData md, SymbolData sd, boolean addError, ", "+                                                     JavaVersion version) {", "-    LinkedList<SymbolData> interfaces = sd.getInterfaces();    ", "+    ArrayList<SymbolData> interfaces = sd.getInterfaces();    ", "-        if (matchingMd.getReturnType() != md.getReturnType() && !(subclass && LanguageLevelConverter.versionIs15(version))) {", "+        if (matchingMd.getReturnType() != md.getReturnType() && ! subclass && ", "+            LanguageLevelConverter.versionIs15(version)) {", "-            if (i > 0) {", "-              methodSignature.append(\", \");", "-            }", "+            if (i > 0) methodSignature.append(\", \");", "-              addLast(new Pair<String, JExpressionIF>(md.getName() + \" in \" + md.getSymbolData().getName() +", "-                                                      \" cannot override \" + matchingMd.getName() + \" in \" +", "-                                                      matchingMd.getSymbolData().getName() + ", "-                                                      \".  You are attempting to assign weaker access priviledges. In \" +", "-                                                      matchingMd.getSymbolData().getName() + \", \" + matchingMd.getName() +", "-                                                      \" was \" + access, md.getJExpression())); } ", "+              addLast(new Pair<String, JExpressionIF>(md.getName() + \" in \" + md.getSymbolData().getName() ", "+                                                        + \" cannot override \" + matchingMd.getName() + \" in \" ", "+                                                        + matchingMd.getSymbolData().getName() + ", "+                                                      \".  You are attempting to assign weaker access priviledges. In \" ", "+                                                        + matchingMd.getSymbolData().getName() + \", \"", "+                                                        + matchingMd.getName() + \" was \" ", "+                                                        + access, md.getJExpression())); } "]}], "num": 11199}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "241820d64717143068da53ba77973e86", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a377363fb2807ad6bcfd6832b98c09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b97db40bea671594a37f7cabd8d363cab45e0154", "commitAfterChange": "fab79f2f445044e7a60a89e228042164713428d9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-    // don't know if this does anything.", "-    // if (_cachedNextLineLoc == -1 ){ initNextLineNum(); }", "+    if ( _cachedLocation > getLength() ){ ", "+      // we can't know the last line number after the delete.", "+      // starting over.", "+      _cachedLocation = 0;", "+      _cachedLineNum = 1;", "+    }", "+    if ( _cachedNextLineLoc > getLength() ){", "+      _cachedNextLineLoc = -1;", "+    }", "-    if( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ){ ", "-      return _cachedLineNum;", "-    }", "+    if( ! ( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ) ){ ", "-    // test to see which is easier: starting from the top", "-    // or calculating relatively.", "-    if( (_cachedLocation - here > here ) ||", "-        ( here <= getFirstNewLine() ) ){ ", "-      _cachedLineNum = getLineFromScratch(); ", "-    }", "-    else {", "-      int lineOffset = getRelativeLine(here);", "+      // this if improves performance when moving from the", "+      // end of the document to the beginnning.", "+      // in essence, it calculates the line number from", "+      // scratch", "+      if( _cachedLocation - here > here ){", "+        _cachedLocation = 0;", "+        _cachedLineNum = 1;", "+      }        ", "+      int lineOffset = _getRelativeLine();", "+      ", "-    _cachedNextLineLoc = here + _reduced.getDistToNextNewline();", "+    _cachedNextLineLoc = getLineEndPos(here);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3214e7459833ca1a1b30a37bc994cdc8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "17f7883ffae3637cf9ec6b5aa5b32f12aa6f1a56", "commitAfterChange": "c3f7f9d7c32c110a7370bfc2864b2e98a988bba6", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["+    // don't know if this does anything.", "+    if (_cachedNextLineLoc == -1 ){ initNextLineNum(); }", "+    int here = getCurrentLocation();", "+    // let's see if we get off easy", "+    if( _cachedPrevLineLoc < here && here < _cachedNextLineLoc ){ ", "+      return _cachedLineNum;", "+    }", "+    ", "+    // test to see which is easier: starting from the top", "+    // or calculating relatively.", "+    if( _cachedLocation - here > here ){ ", "+      _cachedLineNum = getLineFromScratch(); ", "+    }", "+    else {", "+      int lineOffset = getRelativeLine(here);", "+      _cachedLineNum = _cachedLineNum+lineOffset;      ", "+    }", "+    _cachedLocation = here;", "+    _cachedPrevLineLoc = getLineStartPos(here);", "+    _cachedNextLineLoc = here + _reduced.getDistToNextNewline();", "+    return _cachedLineNum;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c37b4d844a8e1e726273b774615b4af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "commitAfterChange": "fbbca8c38fe9b7414801b8eeb32f639f83abb9c9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-    try {", "-      synchronized(_reduced) {", "-        int here = _currentLocation;", "-        if (_cachedLocation > getLength()) {", "-          // we can't know the last line number after a delete; starting over.", "-          _cachedLocation = 0;", "-          _cachedLineNum = 1;", "-        }", "-        if (_cachedNextLineLoc > getLength()) _cachedNextLineLoc = -1;", "-        // let's see if we get off easy", "-        if ( ! (_cachedPrevLineLoc < here && here < _cachedNextLineLoc )) {", "-          ", "-          // this if improves performance when moving from the end of the document to the beginnning.", "-          // in essence, it calculates the line number from scratch", "-          if (_cachedLocation - here > here) {", "-            _cachedLocation = 0;", "-            _cachedLineNum = 1;", "-          }", "-          int lineOffset = _getRelativeLine();", "-          _cachedLineNum = _cachedLineNum + lineOffset;", "-          ", "-        }", "-        _cachedLocation = here;", "-        _cachedPrevLineLoc = getLineStartPos(here);", "-        _cachedNextLineLoc = getLineEndPos(here);", "-        return _cachedLineNum;", "-      }", "-    }", "+    try { return getDefaultRootElement().getElementIndex(_currentLocation) + 1; } // line indices are 1-based", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fe68ce26a7da950c1872b6ce47bcf42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "7cfeeaf9345ca550653b259e08abe84024ba9934", "commitAfterChange": "193d12982052662ec0e78a136e3a67b8a2ade2e4", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public int getCurrentLine()", "signatureAfterChange": "   public int getCurrentLine()", "diff": ["-    // throwErrorHuh();", "-    int here = _currentLocation;", "-    if (_cachedLocation > getLength()) {", "-      // we can't know the last line number after a delete; starting over.", "-      _cachedLocation = 0;", "-      _cachedLineNum = 1;", "-    }", "-    if (_cachedNextLineLoc > getLength()) _cachedNextLineLoc = -1;", "-    // let's see if we get off easy", "-    if ( ! (_cachedPrevLineLoc < here && here < _cachedNextLineLoc )) {", "-", "-      // this if improves performance when moving from the end of the document to the beginnning.", "-      // in essence, it calculates the line number from scratch", "-      if (_cachedLocation - here > here) {", "-        _cachedLocation = 0;", "-        _cachedLineNum = 1;", "+    acquireReadLock();", "+    try {", "+      synchronized(_reduced) {", "+        int here = _currentLocation;", "+        if (_cachedLocation > getLength()) {", "+          // we can't know the last line number after a delete; starting over.", "+          _cachedLocation = 0;", "+          _cachedLineNum = 1;", "+        }", "+        if (_cachedNextLineLoc > getLength()) _cachedNextLineLoc = -1;", "+        // let's see if we get off easy", "+        if ( ! (_cachedPrevLineLoc < here && here < _cachedNextLineLoc )) {", "+          ", "+          // this if improves performance when moving from the end of the document to the beginnning.", "+          // in essence, it calculates the line number from scratch", "+          if (_cachedLocation - here > here) {", "+            _cachedLocation = 0;", "+            _cachedLineNum = 1;", "+          }", "+          int lineOffset = _getRelativeLine();", "+          _cachedLineNum = _cachedLineNum + lineOffset;", "+          ", "+        }", "+        _cachedLocation = here;", "+        _cachedPrevLineLoc = getLineStartPos(here);", "+        _cachedNextLineLoc = getLineEndPos(here);", "+        return _cachedLineNum;", "-      int lineOffset = _getRelativeLine();", "-      _cachedLineNum = _cachedLineNum + lineOffset;", "-", "-    _cachedLocation = here;", "-    _cachedPrevLineLoc = getLineStartPos(here);", "-    _cachedNextLineLoc = getLineEndPos(here);", "-    return _cachedLineNum;", "+    finally { releaseReadLock(); }"]}], "num": 5589}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95e5ebab0e09efcd03be604d91e4ea2d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3175efd18dbb7b614e86b058076aa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "signatureAfterChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "diff": ["-    if (printMessages) System.out.println(\"----testUnsavedAndUnCompiledChanges-----\");", "+    if (printMessages) System.out.println(\"-----testUnsavedAndUnCompiledChanges-----\");", "-    JUnitTestListener listener = new JUnitTestListener(true);", "+    ", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    ", "+    OpenDefinitionsDocument untitled = docs.get(0);", "+    ", "+    System.out.println(\"Untitled file is named: \" + untitled.getName());", "+    ", "+    _model.closeFileOnQuitHelper(untitled);", "+    ", "+    // set up test listener for compile command; automatically checks that compilation is performed", "+    JUnitTestListener listener = new JUnitCompileBeforeTestListener();", "-    if (printMessages) System.out.println(\"before compile\");", "+    ", "-    if (printMessages) System.out.println(\"after compile\");", "-    changeDocumentText(MONKEYTEST_FAIL_TEXT, doc);", "-    if (printMessages) System.out.println(\"after document change\");", "+    ", "+//    System.err.println(\"Ordinary compile completed\");", "+    ", "+    listener.resetCompileCounts();", "+    ", "+    changeDocumentText(MONKEYTEST_PASS_ALT_TEXT, doc);", "+//    System.err.println(\"document changed; modifiedSinceSave = \" + doc.isModifiedSinceSave());", "+    ", "+//    System.err.println(\"JUnit completed\");", "+    ", "+    /* Unsaved document forces both saveBeforeCompile and compileBeforeTest */", "+    ", "+    listener.assertSaveBeforeCompileCount(1);", "+    listener.assertCompileBeforeJUnitCount(1);", "+    listener.assertNonTestCaseCount(0);", "+    listener.assertJUnitStartCount(1);", "+    listener.assertJUnitEndCount(1);", "+    listener.assertJUnitSuiteStartedCount(1);", "+    listener.assertJUnitTestStartedCount(1);", "+    listener.assertJUnitTestEndedCount(1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b199adc29b5dd7de562534492a637146", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "f5f9e35c2a806ad9979915d514415944af196bab", "commitAfterChange": "720d6a91901cb3699fb981b0c6b71471d6bbb848", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testCompileWithPackageStatementInsideClass()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileWithPackageStatementInsideClass()     throws BadLocationException, IOException", "diff": ["-    File baseTempDir = tempFile();", "+    File baseTempDir = tempDirectory();", "-    try {", "-      // Delete the file and make a directory of the same name", "-      baseTempDir.delete();", "-      baseTempDir.mkdir();", "+    // Now make subdirectory a", "+    subdir.mkdir();", "-      // Now make subdirectory a", "-      subdir.mkdir();", "+    // Save the footext to Foo.java in the subdirectory", "+    setupDocument(FOO_PACKAGE_INSIDE_CLASS);", "+    _model.saveFileAs(new FileSelector(fooFile));", "-      // Save the footext to Foo.java in the subdirectory", "-      setupDocument(FOO_PACKAGE_INSIDE_CLASS);", "-      _model.saveFileAs(new FileSelector(fooFile));", "+    // do compile -- should fail since package decl is not valid!", "+    CompileShouldFailListener listener = new CompileShouldFailListener();", "+    _model.addListener(listener);", "+    _model.startCompile();", "-      // do compile -- should fail since package decl is not valid!", "-      CompileShouldFailListener listener = new CompileShouldFailListener();", "-      _model.addListener(listener);", "-      _model.startCompile();", "-", "-      listener.assertCompileStartCount(1);", "-      listener.assertCompileEndCount(1);", "-      assertCompileErrorsPresent(true);", "-      assertTrue(_name() + \"Class file exists after failed compile\", !compiled.exists());", "-    }", "-    finally {", "-      // Delete files and then directories", "-      compiled.delete(); // shouldn't be there, but just in case", "-      fooFile.delete();", "-      subdir.delete();", "-      baseTempDir.delete();", "-    }", "+    listener.assertCompileStartCount(1);", "+    listener.assertCompileEndCount(1);", "+    assertCompileErrorsPresent(true);", "+    assertTrue(_name() + \"Class file exists after failed compile\",", "+               !compiled.exists());"]}], "num": 5885}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c53ce0aa54ec587133fd7eba009fb11", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d353bab680ec916dd436264914b9dde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevLinePlus.java", "commitBeforeChange": "42669dc5656697beebfecb16842ba181e2bab301", "commitAfterChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-    // START = findPrevDelimiter", "-    // START' = scoot behind the delimiter we just found", "-    // PREVSTART = findPrevDelimiter(START')              -- prev line's START", "-    // sol = startOfLine(PREVSTART);                      -- 1st non-WS on prev line", "-    // prevWS = dist btw. PREVSTART and sol", "-    // replace area btw. START and startOfLine(START) with prevWS", "-    return;", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine > DefinitionsDocument.DOCSTART) {", "+        // Find prefix of previous line", "+        int startPrevLine = doc.getLineStartPos(startLine - 1);", "+        int firstChar = doc.getLineFirstCharPos(startPrevLine);", "+        String prefix = doc.getText(startPrevLine, firstChar - startPrevLine);", "+        doc.setTab(prefix + _suffix, here);", "+      }", "+      else {", "+        // On first line", "+        doc.setTab(_suffix, here);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddd375e81400ee4bbf23cefee4c90dd0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "8958ac741e416ecbae85abc43f8b198196076bac", "commitAfterChange": "9fa6d06a5ecc75a8eda4a5bc78f492dd1b318059", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "signatureAfterChange": "   public static void saveFile(FileSaver fileSaver) throws IOException", "diff": ["+    boolean tempFileUsed = true;", "-                                + backup.getAbsolutePath());", "+                                + backup.getAbsolutePath() + ", "+                              \"\\nIt may be possible to save by disabling file backups\\n\");", "-", "+    ", "+    //From this point forward, enclose in try...finally so that we can clean", "+    //up the temp file and restore the file from its backup.", "-  name.  This way, if writing fails in the middle, the old file is not", "-  lost. */", "-      fileSaver.saveTo(tempFile);", "-      if (!tempFile.renameTo(fileSaver.getTargetFile())){", "- throw new IOException(\"Save failed: Could not rename temp file \" +", "-         tempFile + \" to \" + file);", "+       name.  This way, if writing fails in the middle, the old file is not", "+       lost. */", "+      FileOutputStream fos;", "+      try {", "+        /* The next line will fail if we can't create the temp file.  This may mean that", "+         * the user does not have write permission on the directory the file they", "+         * are editing is in.  We may want to go ahead and try writing directly", "+         * to the target file in this case", "+         */", "+        fos = new FileOutputStream(tempFile);", "+      } catch (FileNotFoundException fnfe) {", "+        if (fileSaver.continueWhenTempFileCreationFails()){", "+          fos = new FileOutputStream(file);", "+          tempFileUsed = false;", "+        } else {", "+          throw new IOException(\"Could not create temp file \" + tempFile +", "+                                \" in attempt to save \" + file);", "+        }", "+      }", "+      BufferedOutputStream bos = new BufferedOutputStream(fos);", "+      fileSaver.saveTo(bos);", "+      bos.close();", "+      if (tempFileUsed && !tempFile.renameTo(fileSaver.getTargetFile())){", "+        throw new IOException(\"Save failed: Could not rename temp file \" +", "+                              tempFile + \" to \" + file);", "-    } finally{", "-      if (makeBackup){", "- /* On failure, attempt to move the backup back to its original location if we", "-    made one.  On success, register that a backup was successfully made */", "- if (success){", "-   fileSaver.backupDone();", "- } else {", "-   backup.renameTo(file);", "- }", "+    } finally {", "+      if (makeBackup) {", "+        /* On failure, attempt to move the backup back to its original location if we", "+         made one.  On success, register that a backup was successfully made */", "+        if (success) {", "+          fileSaver.backupDone();", "+        } else {", "+          backup.renameTo(file);", "+        }"]}], "num": 298}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ac5db5b9197be00c4e9f8b0d081fcd5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d779cdfcbef4424d834e467567760b52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "14370880ba431a91577f4a6da91962f3187c5d5d", "commitAfterChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "methodNumberBeforeChange": 649, "methodNumberAfterChange": 649, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["+      assert EventQueue.isDispatchThread();  // overkill; this method is a listener invocation wrapped in invokeLater", "-      // a strange NullPointerException was reported in this method ([ 1938268 ])", "-      // just making sure that all references are non-null", "-      if (im != null) {", "-        final String lastError = im.getLastError();", "-        final edu.rice.cs.drjava.config.FileConfiguration config = DrJava.getConfig();", "-        if ((config != null) &&", "-            (config.getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED))) {", "-          if (lastError != null) {", "-            // the interaction ended and there was an error", "-            // check that this error is different than the last one (second to last may be null):", "-            final String secondToLastError = im.getSecondToLastError();", "-            if ((secondToLastError!=null) ||", "-                (!lastError.equals(secondToLastError))) {", "-              // this aborts the auto-importing if the same class comes up twice in a row", "-              if (lastError.startsWith(\"Static Error: Undefined class '\") && lastError.endsWith(\"'\")) {", "-                // it was an \"undefined class\" exception", "-                // show auto-import dialog", "-                String undefinedClassName = lastError.substring(lastError.indexOf('\\'')+1,", "-                                                                lastError.lastIndexOf('\\''));", "-                _showAutoImportDialog(undefinedClassName);", "-              }", "-              else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "-                askToIncreaseSlaveMaxHeap();", "-              }", "+      final String lastError = im.getLastError();", "+      final edu.rice.cs.drjava.config.FileConfiguration config = DrJava.getConfig();", "+      if (config != null && config.getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED)) {", "+        if (lastError != null) {", "+          // the interaction ended and there was an error", "+          // check that this error is different than the last one (second to last may be null):", "+          final String secondToLastError = im.getSecondToLastError();", "+          if (secondToLastError != null || ! lastError.equals(secondToLastError)) {", "+            // this aborts the auto-importing if the same class comes up twice in a row", "+            if (lastError.startsWith(\"Static Error: Undefined class '\") && lastError.endsWith(\"'\")) {", "+              // it was an \"undefined class\" exception", "+              // show auto-import dialog", "+              String undefinedClassName = lastError.substring(lastError.indexOf('\\'') + 1, lastError.lastIndexOf('\\''));", "+              _showAutoImportDialog(undefinedClassName);", "+            }", "+            else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "+              askToIncreaseSlaveMaxHeap();", "-        else {", "-          // reset the last errors, so the dialog works again if it is re-enabled", "-          im.resetLastErrors();", "-        }", "-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() {", "+      else im.resetLastErrors(); // reset the last errors, so the dialog works again if it is re-enabled", "+      ", "-//        }", "-//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8f82be807b580cd6e6cc88778e2c988", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 615, "methodNumberAfterChange": 615, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["-      InteractionsModel im = _model.getInteractionsModel();", "-      String lastError = im.getLastError();", "-      if (DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED)) {", "-        if (lastError != null) {", "-          // the interaction ended and there was an error", "-          // check that this error is different than the last one (second to last may be null):", "-          if (!lastError.equals(im.getSecondToLastError())) {", "-            // this aborts the auto-importing if the same class comes up twice in a row", "-            if (lastError.startsWith(\"Static Error: Undefined class '\") && lastError.endsWith(\"'\")) {", "-              // it was an \"undefined class\" exception", "-              // show auto-import dialog", "-              String undefinedClassName = lastError.substring(lastError.indexOf('\\'')+1,", "-                                                              lastError.lastIndexOf('\\''));", "-              _showAutoImportDialog(undefinedClassName);", "-            }", "-            else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "-              askToIncreaseSlaveMaxHeap();", "+      final InteractionsModel im = _model.getInteractionsModel();", "+      // a strange NullPointerException was reported in this method ([ 1938268 ])", "+      // just making sure that all references are non-null", "+      if (im != null) {", "+        final String lastError = im.getLastError();", "+        final edu.rice.cs.drjava.config.FileConfiguration config = DrJava.getConfig();", "+        if ((config != null) &&", "+            (config.getSetting(edu.rice.cs.drjava.config.OptionConstants.DIALOG_AUTOIMPORT_ENABLED))) {", "+          if (lastError != null) {", "+            // the interaction ended and there was an error", "+            // check that this error is different than the last one (second to last may be null):", "+            final String secondToLastError = im.getSecondToLastError();", "+            if ((secondToLastError!=null) &&", "+                (!lastError.equals(secondToLastError))) {", "+              // this aborts the auto-importing if the same class comes up twice in a row", "+              if (lastError.startsWith(\"Static Error: Undefined class '\") && lastError.endsWith(\"'\")) {", "+                // it was an \"undefined class\" exception", "+                // show auto-import dialog", "+                String undefinedClassName = lastError.substring(lastError.indexOf('\\'')+1,", "+                                                                lastError.lastIndexOf('\\''));", "+                _showAutoImportDialog(undefinedClassName);", "+              }", "+              else if (lastError.startsWith(\"java.lang.OutOfMemoryError\")) {", "+                askToIncreaseSlaveMaxHeap();", "+              }", "+        else {", "+          // reset the last errors, so the dialog works again if it is re-enabled", "+          im.resetLastErrors();", "+        }", "-      else {", "-        // reset the last errors, so the dialog works again if it is re-enabled", "-        im.resetLastErrors();", "-      }", "-      "]}], "num": 2125}
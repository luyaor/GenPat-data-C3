{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9fa5e55d7c47932284ba2aeb4824a43", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570b2c4bd536dd4348dfa5067433a175", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DocumentRegionTest.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testRegionManager() throws BadLocationException", "signatureAfterChange": "   public void testRegionManager() throws BadLocationException", "diff": ["-    assertNull(rm.getRegionContaining(_doc, 5, 5));", "-    assertNull(rm.getRegionContaining(_doc, 4, 6));", "-    assertNull(rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    ", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 4, 6).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 3, 7).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 2, 8).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 2, 5).size() == 0);", "+    assertTrue(\"Empty overlapping regions\", rm.getRegionsOverlapping(_doc, 5, 8).size() == 0);", "-    assertTrue(r1==rm.getRegionAt(_doc, 5));", "-    assertTrue(r1==rm.getRegionAt(_doc, 3));", "-    assertTrue(r1==rm.getRegionAt(_doc, 7));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 5));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 3));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 4));", "+    assertTrue(\"Region found\", r1 == rm.getRegionAt(_doc, 6));", "+    ", "+    assertNull(rm.getRegionAt(_doc, 7));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 5, 5));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 4, 6));", "-    assertTrue(r1==rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    ", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 5, 6).contains(r1));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 4, 6).contains(r1));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 3, 7).contains(r1));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 3).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 5, 8).contains(r1));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 15, 18).size() == 0);", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18));", "+", "-    assertTrue(r2==rm.getRegionAt(_doc, 15));", "-    assertTrue(r2==rm.getRegionAt(_doc, 13));", "-    assertTrue(r2==rm.getRegionAt(_doc, 17));", "+    assertTrue(r2 == rm.getRegionAt(_doc, 15));", "+    assertTrue(r2 == rm.getRegionAt(_doc, 13));", "+    assertNull(rm.getRegionAt(_doc, 17));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 15, 15));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 14, 16));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 15, 15).size() == 0);", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 0, 14).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 14, 16).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 10, 17).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 10, 20).contains(r2));", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 16, 17).contains(r2));", "+", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 17, 18).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 10, 13).size() == 0); ", "-    // r2 and r3 are the same region, so the region will be reused", "-    // and we get r2 back", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 6, 14).contains(r1)); ", "+    assertTrue(\"Region found\", rm.getRegionsOverlapping(_doc, 6, 14).contains(r2));", "+    ", "+//    // r2 and r3 are the same region, so the region will be reused", "+//    // and we get r2 back", "-    rm.addRegion(r3);", "-    assertTrue(r2==rm.getRegionAt(_doc, 15));", "-    assertTrue(r2==rm.getRegionAt(_doc, 13));", "-    assertTrue(r2==rm.getRegionAt(_doc, 17));", "-    assertNull(rm.getRegionAt(_doc, 12));", "-    assertNull(rm.getRegionAt(_doc, 18));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 15, 15));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 14, 16));", "-    assertTrue(r2==rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "+//    rm.addRegion(r3);", "+//    assertTrue(r2==rm.getRegionAt(_doc, 15));", "+//    assertTrue(r2==rm.getRegionAt(_doc, 13));", "+//    assertTrue(r2==rm.getRegionAt(_doc, 17));", "+//    assertNull(rm.getRegionAt(_doc, 12));", "+//    assertNull(rm.getRegionAt(_doc, 18));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 15, 15));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 14, 16));", "+//    assertTrue(r2==rm.getRegionsOverlapping(_doc, 13, 17));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 18));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 15));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 15, 18)); ", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18)); ", "-", "-    assertNull(rm.getRegionAt(_doc, 15));", "-    assertNull(rm.getRegionAt(_doc, 13));", "-    assertNull(rm.getRegionAt(_doc, 17));", "-    assertNull(rm.getRegionAt(_doc, 12));", "-    assertNull(rm.getRegionAt(_doc, 18));", "-    assertNull(rm.getRegionContaining(_doc, 15, 15));", "-    assertNull(rm.getRegionContaining(_doc, 14, 16));", "-    assertNull(rm.getRegionContaining(_doc, 13, 17));", "-    assertNull(rm.getRegionContaining(_doc, 12, 18));", "-    assertNull(rm.getRegionContaining(_doc, 12, 15));", "-    assertNull(rm.getRegionContaining(_doc, 15, 18));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 13, 15).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 14, 16).size() == 0);", "+//    assertNull(rm.getRegionsOverlapping(_doc, 13, 17));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 18));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 12, 15));", "+//    assertNull(rm.getRegionsOverlapping(_doc, 15, 18)); ", "-    assertNull(rm.getRegionContaining(_doc, 5, 5));", "-    assertNull(rm.getRegionContaining(_doc, 4, 6));", "-    assertNull(rm.getRegionContaining(_doc, 3, 7));", "-    assertNull(rm.getRegionContaining(_doc, 2, 8));", "-    assertNull(rm.getRegionContaining(_doc, 2, 5));", "-    assertNull(rm.getRegionContaining(_doc, 5, 8));", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 5).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 4, 6).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 3, 7).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 8).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 2, 5).size() == 0);", "+    assertTrue(\"No region found\", rm.getRegionsOverlapping(_doc, 5, 8).size() == 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ee645db41c78b8a74e7a594a0667c5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "40fa5284e8c663707faeb41ae0125801be606b5b", "commitAfterChange": "e116917927a60a297ec1454565818ede1b4cec2d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-    ", "+", "-    ", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"6\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", \"10\", watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", \"12\", watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"6\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", \"10\", watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", \"12\", watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.get(5).getType());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch value incorrect\", \"0\", watches.elementAt(1).getValue());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch value incorrect\", \"0\", watches.get(1).getValue());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch value incorrect\", \"8\", watches.elementAt(1).getValue());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch value incorrect\", \"8\", watches.get(1).getValue());", "-   ", "+", "-    ", "+", "-    ", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", \"9\", watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", \"13\", watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", \"null\", watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.elementAt(5).getType());", "-    ", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", \"9\", watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", \"13\", watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", \"null\", watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", \"java.lang.String\", watches.get(5).getType());", "+", "-    ", "+", "-    assertEquals(\"watch name incorrect\", \"foo\", watches.elementAt(0).getName());", "-    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.elementAt(1).getName());", "-    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.elementAt(2).getName());", "-    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.elementAt(3).getName());", "-    assertEquals(\"watch name incorrect\", \"asdf\", watches.elementAt(4).getName());", "-    assertEquals(\"watch name incorrect\", \"nullString\", watches.elementAt(5).getName());", "-    assertEquals(\"watch value incorrect\", \"7\", watches.elementAt(0).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(1).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(2).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(3).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(4).getValue());", "-    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.elementAt(5).getValue());", "-    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.elementAt(5).getType());", "-    ", "+    assertEquals(\"watch name incorrect\", \"foo\", watches.get(0).getName());", "+    assertEquals(\"watch name incorrect\", \"innerFoo\", watches.get(1).getName());", "+    assertEquals(\"watch name incorrect\", \"innerInnerFoo\", watches.get(2).getName());", "+    assertEquals(\"watch name incorrect\", \"innerMethodFoo\", watches.get(3).getName());", "+    assertEquals(\"watch name incorrect\", \"asdf\", watches.get(4).getName());", "+    assertEquals(\"watch name incorrect\", \"nullString\", watches.get(5).getName());", "+    assertEquals(\"watch value incorrect\", \"7\", watches.get(0).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(1).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(2).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(3).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(4).getValue());", "+    assertEquals(\"watch value incorrect\", DebugWatchData.NO_VALUE, watches.get(5).getValue());", "+    assertEquals(\"watch type incorrect\", DebugWatchData.NO_TYPE, watches.get(5).getType());", "+", "-    debugListener.assertCurrThreadDiedCount(0);    ", "-    ", "+    debugListener.assertCurrThreadDiedCount(0);", "+", "-    assertEquals(\"watch name incorrect\", \"localVar\", watches.elementAt(6).getName());", "-    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(6).getValue());", "-    ", "+    assertEquals(\"watch name incorrect\", \"localVar\", watches.get(6).getName());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.get(6).getValue());", "+", "-    ", "+"]}], "num": 16685}
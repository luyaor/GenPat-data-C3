{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b5e867c325bde13541251fe53e1fc30", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2215db2f8ddc976c7b628ba74e97f78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "527b327a81252940ede7723bc28a80b1911fdddb", "commitAfterChange": "60cd84614ab1a6d35590df8d34b30b47cae7364d", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 136, "signatureBeforeChange": "   void initCompleteWordDialog()", "signatureAfterChange": "   void initCompleteWordDialog()", "diff": ["+      // checkbox whether Java API classes should be completed as well", "+      _completeJavaAPICheckbox.addActionListener(new ActionListener() {", "+        public void actionPerformed(ActionEvent e) {", "+          GoToFileListEntry curItem = _completeWordDialog.getItem();", "+          if (_completeJavaAPICheckbox.isSelected()) {", "+            // selected, add Java API classes to list", "+            generateJavaAPIList();", "+            if (_javaAPIList==null) {", "+              _completeJavaAPICheckbox.setSelected(false);", "+              _completeJavaAPICheckbox.setEnabled(false);", "+            }", "+            else {", "+              List<GoToFileListEntry> l = _completeWordDialog.getList();", "+              for(JavaAPIListEntry entry: _javaAPIList) {", "+                String fn = entry.getFullString();", "+                int pos = fn.lastIndexOf('.');", "+                String pn = \"\";", "+                if (pos>=0) {", "+                  pn = fn.substring(0,pos+1);", "+                  fn = fn.substring(pos+1);", "+                }", "+                l.add(new NoDocumentFileListEntry(pn,fn));", "+              }", "+              _completeWordDialog.setItems(true,l);", "+            }", "+          }", "+          else {", "+            // unselected, remove Java API classes from list", "+            List<GoToFileListEntry> l = _completeWordDialog.getList();", "+            List<GoToFileListEntry> n = new ArrayList<GoToFileListEntry>();", "+            for(GoToFileListEntry entry: l) {", "+              if (!(entry instanceof NoDocumentFileListEntry)) { n.add(entry); }", "+            }", "+            _completeWordDialog.setItems(true,n);", "+          }", "+          if (curItem!=null) {", "+            _completeWordDialog.setCurrentItem(curItem);", "+          }", "+          _completeWordDialog.resetFocus();", "+        }", "+      });", "+      _completeJavaAPICheckbox.setMnemonic('j');", "+      PredictiveInputFrame.InfoSupplier<JavaAPIListEntry> info = ", "+        new PredictiveInputFrame.InfoSupplier<JavaAPIListEntry>() {", "+        public String apply(JavaAPIListEntry entry) {", "+          // show full class name as information", "+          return entry.getFullString();", "+        }", "+      };", "+        public String getName() { return \"OK\"; }", "+        public KeyStroke getKeyStroke() { return KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0); }", "+      PredictiveInputFrame.CloseAction<GoToFileListEntry> fullAction = new PredictiveInputFrame.CloseAction<GoToFileListEntry>() {", "+        public String getName() { return \"Fully Qualified\"; }", "+        public KeyStroke getKeyStroke() { return KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0); }", "+        public Object apply(PredictiveInputFrame<GoToFileListEntry> p) {", "+          if (p.getItem() != null) {", "+            OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "+            try {", "+              String mask = \"\";", "+              int loc = getCurrentDefPane().getCaretPosition();", "+              String s = odd.getText(0, loc);", "+              ", "+              // check that we're at the end of a word", "+              if ((loc<s.length()) && (!Character.isWhitespace(s.charAt(loc))) &&", "+                  (\"()[]{}<>.,:;/*+-!~&|%\".indexOf(s.charAt(loc)) == -1)) return null;", "+              ", "+              // find start", "+              int start = loc;", "+              while(start>0) {", "+                if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+                --start;", "+              }", "+              while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start < loc)) {", "+                ++start;", "+              }", "+              ", "+              if (!s.substring(start, loc).equals(p.getItem().toString())) {", "+                odd.remove(start, loc-start);", "+                StringBuilder sb = new StringBuilder();", "+                sb.append(p.getItem().getFullPackage());", "+                sb.append(p.getItem().toString());", "+                odd.insertString(start, sb.toString(), null);", "+              }", "+            }", "+            catch(BadLocationException ble) { /* ignore, just don't auto-complete */ }", "+            finally { odd.releaseWriteLock(); }", "+          }", "+          hourglassOff();", "+          return null;", "+        }", "+      };", "+        public String getName() { return \"Cancel\"; }", "+        public KeyStroke getKeyStroke() { return KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0); }", "+      List<PredictiveInputFrame.CloseAction<GoToFileListEntry>> actions", "+        = new ArrayList<PredictiveInputFrame.CloseAction<GoToFileListEntry>>();", "+      actions.add(okAction);", "+      actions.add(fullAction);", "+      actions.add(cancelAction);", "-                                                    okAction,", "-                                                    cancelAction,", "+                                                    actions,", "+        }", "+        protected JComponent[] makeOptions() {", "+          return new JComponent[] { _completeJavaAPICheckbox };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34c6dc3fbc7d95f37c168305fb18d64", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 106, "signatureBeforeChange": "   final public Expression literal() throws ParseException", "signatureAfterChange": "   final public Expression literal() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case INTEGER_LITERAL:", "-      t = jj_consume_token(INTEGER_LITERAL);", "-      {if (true) return new IntegerLiteral(t.image,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case LONG_LITERAL:", "-      t = jj_consume_token(LONG_LITERAL);", "-      {if (true) return new LongLiteral(t.image,", "-                             filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    case FLOAT_LITERAL:", "-      t = jj_consume_token(FLOAT_LITERAL);", "-      {if (true) return new FloatLiteral(t.image,", "-                              filename,", "-                              t.beginLine, t.beginColumn,", "-                              t.endLine,   t.endColumn);}", "-      break;", "-    case DOUBLE_LITERAL:", "-      t = jj_consume_token(DOUBLE_LITERAL);", "-      {if (true) return new DoubleLiteral(t.image,", "-                               filename,", "-                               t.beginLine, t.beginColumn,", "-                               t.endLine,   t.endColumn);}", "-      break;", "-    case CHARACTER_LITERAL:", "-      t = jj_consume_token(CHARACTER_LITERAL);", "-      {if (true) return new CharacterLiteral(t.image,", "+    try {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case INTEGER_LITERAL:", "+        t = jj_consume_token(INTEGER_LITERAL);", "+        {if (true) return new IntegerLiteral(t.image,", "-      break;", "-    case STRING_LITERAL:", "-      t = jj_consume_token(STRING_LITERAL);", "-      {if (true) return new StringLiteral(t.image,", "+        break;", "+      case LONG_LITERAL:", "+        t = jj_consume_token(LONG_LITERAL);", "+        {if (true) return new LongLiteral(t.image,", "-      break;", "-    case TRUE:", "-      t = jj_consume_token(TRUE);", "-      {if (true) return new BooleanLiteral(true,", "+        break;", "+      case FLOAT_LITERAL:", "+        t = jj_consume_token(FLOAT_LITERAL);", "+        {if (true) return new FloatLiteral(t.image,", "-      break;", "-    case FALSE:", "-      t = jj_consume_token(FALSE);", "-      {if (true) return new BooleanLiteral(false,", "-                                filename,", "-                                t.beginLine, t.beginColumn,", "-                                t.endLine,   t.endColumn);}", "-      break;", "-    case NULL:", "-      t = jj_consume_token(NULL);", "-      {if (true) return new NullLiteral(filename,", "-                             t.beginLine, t.beginColumn,", "-                             t.endLine,   t.endColumn);}", "-      break;", "-    default:", "-      jj_la1[109] = jj_gen;", "-      jj_consume_token(-1);", "-      throw new ParseException();", "+        break;", "+      case DOUBLE_LITERAL:", "+        t = jj_consume_token(DOUBLE_LITERAL);", "+        {if (true) return new DoubleLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case CHARACTER_LITERAL:", "+        t = jj_consume_token(CHARACTER_LITERAL);", "+        {if (true) return new CharacterLiteral(t.image,", "+                                    filename,", "+                                    t.beginLine, t.beginColumn,", "+                                    t.endLine,   t.endColumn);}", "+        break;", "+      case STRING_LITERAL:", "+        t = jj_consume_token(STRING_LITERAL);", "+        {if (true) return new StringLiteral(t.image,", "+                                 filename,", "+                                 t.beginLine, t.beginColumn,", "+                                 t.endLine,   t.endColumn);}", "+        break;", "+      case TRUE:", "+        t = jj_consume_token(TRUE);", "+        {if (true) return new BooleanLiteral(true,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case FALSE:", "+        t = jj_consume_token(FALSE);", "+        {if (true) return new BooleanLiteral(false,", "+                                  filename,", "+                                  t.beginLine, t.beginColumn,", "+                                  t.endLine,   t.endColumn);}", "+        break;", "+      case NULL:", "+        t = jj_consume_token(NULL);", "+        {if (true) return new NullLiteral(filename,", "+                               t.beginLine, t.beginColumn,", "+                               t.endLine,   t.endColumn);}", "+        break;", "+      default:", "+        jj_la1[110] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"This is an illegal literal!\");"]}], "num": 4015}
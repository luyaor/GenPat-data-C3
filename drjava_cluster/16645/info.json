{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0ac87adb123a7b9a06b064a75d412d3", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b74c69da221e11e68d5e0d053e603bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "113afd3151c2b14c9d66bb242346ae4c872989d1", "commitAfterChange": "b55243374fd344a99b71e152a523bbe523612b7b", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": "   public static FileFilter regexpFileFilter(final String regexp)", "signatureAfterChange": "   public static Predicate<File> regexpFilePredicate(final String regexp)", "diff": ["-  public static FileFilter regexpFileFilter(final String regexp) {", "-    return new FileFilter() {", "-      public boolean accept(File f) { return f.getName().matches(regexp); }", "+   */", "+  public static Predicate<File> regexpFilePredicate(final String regexp) {", "+    return new Predicate<File>() {", "+      public Boolean value(File f) { return f.getName().matches(regexp); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2077bce0465eba3e344bd66f5a92bd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "113afd3151c2b14c9d66bb242346ae4c872989d1", "commitAfterChange": "b55243374fd344a99b71e152a523bbe523612b7b", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": "   public static FileFilter regexpCanonicalCaseFileFilter(final String regexp)", "signatureAfterChange": "   public static Predicate<File> regexpCanonicalCaseFilePredicate(final String regexp)", "diff": ["-  public static FileFilter regexpCanonicalCaseFileFilter(final String regexp) {", "-    return new FileFilter() {", "-      public boolean accept(File f) { return canonicalCase(f).getName().matches(regexp); }", "-    };", "+   */", "+  public static Predicate<File> regexpCanonicalCaseFilePredicate(final String regexp) {", "+    return new Predicate<File>() {", "+      public Boolean value(File f) { return canonicalCase(f).getName().matches(regexp); }", "+    };", "+  }"]}], "num": 16645}
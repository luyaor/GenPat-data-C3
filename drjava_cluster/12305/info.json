{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af3cd9acfc5c08b3a043c5740f7e96cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276e53d5d35be788db69897f2839fb74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "commitAfterChange": "924f4a516342866293ae7a5a3652d82cc6e43c22", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "\r   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, \r                                                List<? extends File> sourcePath, File destination, \r                                                List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-    */", "-  public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, ", "-                                               List<? extends File> sourcePath, File destination, ", "-                                               List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {", "-    debug.logStart(\"compile()\");", "-    debug.logValues(new String[]{ \"this\", \"files\", \"classPath\", \"sourcePath\", \"destination\", \"bootClassPath\", ", "-                                  \"sourceVersion\", \"showWarnings\" },", "-                              this, files, classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "-    List<File> filteredClassPath = null;", "-    if (classPath!=null) {", "-      filteredClassPath = new LinkedList<File>(classPath);", "-      ", "-      if (_filterExe) {", "-        FileFilter filter = IOUtil.extensionFilePredicate(\"exe\");", "-        Iterator<? extends File> i = filteredClassPath.iterator();", "-        while (i.hasNext()) {", "-          if (filter.accept(i.next())) { i.remove(); }", "-        }", "-        if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "-      }", "-    }", "-", "-    LinkedList<DJError> errors = new LinkedList<DJError>();", "-    ", "-    JavaCompiler compiler = new org.eclipse.jdt.internal.compiler.tool.EclipseCompiler();", "-    CompilerErrorListener diagnosticListener = new CompilerErrorListener(errors);", "-    StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnosticListener, null, null);", "-    Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(files);", "-//    Writer out = new OutputStreamWriter(new OutputStream() { // silent", "-//      public void write(int b) { }", "-//    });", "-    Writer out = null;", "-    Iterable<String> classes = null; // no classes for annotation processing  ", "-    Iterable<String> options = _getOptions(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "-     ", "-    try {", "-      JavaCompiler.CompilationTask task = compiler.getTask(out, fileManager, diagnosticListener, options, classes, compilationUnits);", "-      boolean res = task.call();", "-      if (!res && (errors.size()==0)) throw new AssertionError(\"Compile failed. There should be compiler errors, but there aren't.\");", "-    }", "-    catch(Throwable t) {  // compiler threw an exception/error (typically out of memory error)", "-      errors.addFirst(new DJError(\"Compile exception: \" + t, false));", "-      error.log(t);", "-    }", "-    ", "-    debug.logEnd(\"compile()\");", "-    return errors;", "-  }", "+    */\r", "+  public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, \r", "+                                               List<? extends File> sourcePath, File destination, \r", "+                                               List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {\r", "+    debug.logStart(\"compile()\");\r", "+    debug.logValues(new String[]{ \"this\", \"files\", \"classPath\", \"sourcePath\", \"destination\", \"bootClassPath\", \r", "+                                  \"sourceVersion\", \"showWarnings\" },\r", "+                              this, files, classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);\r", "+    List<File> filteredClassPath = null;\r", "+    if (classPath!=null) {\r", "+      filteredClassPath = new LinkedList<File>(classPath);\r", "+      \r", "+      if (_filterExe) {\r", "+        FileFilter filter = IOUtil.extensionFilePredicate(\"exe\");\r", "+        Iterator<? extends File> i = filteredClassPath.iterator();\r", "+        while (i.hasNext()) {\r", "+          if (filter.accept(i.next())) { i.remove(); }\r", "+        }\r", "+        if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }\r", "+      }\r", "+    }\r", "+\r", "+    LinkedList<DJError> errors = new LinkedList<DJError>();\r", "+    \r", "+    JavaCompiler compiler = new org.eclipse.jdt.internal.compiler.tool.EclipseCompiler();\r", "+    CompilerErrorListener diagnosticListener = new CompilerErrorListener(errors);\r", "+    StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnosticListener, null, null);\r", "+    Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjectsFromFiles(files);\r", "+    Writer out = new OutputStreamWriter(new OutputStream() { // silent\r", "+      public void write(int b) { }\r", "+    });\r", "+//    Writer out = null;\r", "+    Iterable<String> classes = null; // no classes for annotation processing  \r", "+    Iterable<String> options = _getOptions(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);\r", "+     \r", "+    try {\r", "+      JavaCompiler.CompilationTask task = compiler.getTask(out, fileManager, diagnosticListener, options, classes, compilationUnits);\r", "+      boolean res = task.call();\r", "+      if (!res && (errors.size()==0)) throw new AssertionError(\"Compile failed. There should be compiler errors, but there aren't.\");\r", "+    }\r", "+    catch(Throwable t) {  // compiler threw an exception/error (typically out of memory error)\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + t, false));\r", "+      error.log(t);\r", "+    }\r", "+    \r", "+    debug.logEnd(\"compile()\");\r", "+    return errors;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f541572bd819476ff0741542b965ae89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e8cc87f4c1373cc71556480da6b0490c23688c68", "commitAfterChange": "ab5f98cfbaf4d4f03ed7df38b403a2ed47f6970f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public FileGroupingState _makeProjectFileGroupingState(final File buildDir, final File projectFile)", "signatureAfterChange": "      public FileGroupingState _makeProjectFileGroupingState(final File buildDir, final File projectFile)", "diff": ["+  ", "+      private File _builtDir = buildDir;", "+      ", "-        return buildDir;", "+        return _builtDir;", "+      ", "+      public void setBuildDirectory(File f) {", "+        _builtDir = f;", "+      }"]}], "num": 12305}
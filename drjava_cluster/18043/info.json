{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3b38bcc7c6d9202e6f5b7f5653511e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7678918f5c22bffe8d1837d5ae1708e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/IndentTest.java", "commitBeforeChange": "c767fd7ac698a252b2acccd30077ab91751fe069", "commitAfterChange": "41dbd1f79552ad2c4983397e3a693dbde7c41bb5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testIndentInfoSquiggly() throws BadLocationException", "signatureAfterChange": "   public void testIndentInfoSquiggly() throws BadLocationException", "diff": ["-    assertEquals(\"1.0\", noBrace, ii.braceType);", "-    assertEquals(\"1.1\", -1, ii.distToNewline);", "-    assertEquals(\"1.2\", -1, ii.distToBrace);", "-    assertEquals(\"1.3\", -1, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, noBrace, -1, -1, -1);", "-    assertEquals(\"0.1\", \"\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"\\n\", doc);", "-    assertEquals(\"2.0\", noBrace, ii.braceType);", "-    assertEquals(\"2.1\", -1, ii.distToNewline);", "-    assertEquals(\"2.2\", -1, ii.distToBrace);", "-    assertEquals(\"2.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, noBrace, -1, -1, 0);", "-    assertEquals(\"0.2\", \"{\\n\\n\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"{\\n\\n\\n\", doc);", "-    assertEquals(\"3.0\", openSquiggly, ii.braceType);", "-    assertEquals(\"3.2\", 3, ii.distToBrace);", "-    assertEquals(\"3.1\", -1, ii.distToNewline);", "-    assertEquals(\"3.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openSquiggly, -1, 3, 0);", "-    assertEquals(\"0.3\", \"{\\n\\n{\\n\\n\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"{\\n\\n{\\n\\n\\n\", doc);", "-    assertEquals(\"4.0\", openSquiggly, ii.braceType);", "-    assertEquals(\"4.1\", 3, ii.distToNewline);", "-    assertEquals(\"4.2\", 3, ii.distToBrace);", "-    assertEquals(\"4.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openSquiggly, 3, 3, 0);", "-    assertEquals(\"0.4\", \"{\\n\\n{\\n\\n  {\\n\\n\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"{\\n\\n{\\n\\n  {\\n\\n\\n\", doc);", "-    assertEquals(\"5.0\", openSquiggly, ii.braceType);", "-    assertEquals(\"5.1\", 5, ii.distToNewline);", "-    assertEquals(\"5.2\", 3, ii.distToBrace);", "-    assertEquals(\"5.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openSquiggly, 5, 3, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac189013b91e84144b83e60d8ae19da0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModel.java", "commitBeforeChange": "facb31d52d0108009578d6a1708ac1dfc68b98b8", "commitAfterChange": "417b6d282f87d7da5aa7274e065294c3e7058851", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public JUnitErrorModel(Document doc, String theclass, TestResult result)", "signatureAfterChange": "   public JUnitErrorModel(DefinitionsDocument doc, String theclass, TestResult result)", "diff": ["-  public JUnitErrorModel(Document doc, String theclass, TestResult result) {", "+  public JUnitErrorModel(DefinitionsDocument doc, String theclass, TestResult result) {", "+    _testsHaveRun = true;", "+        ", "-", "+     ", "-", "+    Enumeration errEnum = result.errors(); ", "+    ", "-", "-    while (failures.hasMoreElements()) {", "-      TestFailure tf = (TestFailure) failures.nextElement();", "-      TestCase tc = (TestCase) tf.failedTest();", "-", "-      StringWriter sw = new StringWriter();", "-      PrintWriter pw = new PrintWriter(sw);", "-", "-      tf.thrownException().printStackTrace(pw);", "-", "-      String classname = theclass + \".\" + tc.getName();", "-      String theLine = _substring(sw.toString(), 0, sw.toString().indexOf(classname));", "-      theLine = _substring(theLine, 0, theLine.indexOf(\"\\n\"));", "-", "-      theLine = _substring(theLine, 0, theLine.indexOf(\"(\") + 1);", "-      theLine = _substring(theLine, 0, theLine.indexOf(\")\"));", "-", "-      String file = _substring(theLine, 0, theLine.indexOf(\":\"));", "-      int lineNo = 0;", "-      try {", "-        lineNo = new Integer(_substring(theLine, ", "-                                        theLine.indexOf(\":\") + 1,", "-                                        theLine.length()))", "-          .intValue() - 1;", "-      } ", "-      catch (NumberFormatException e) {", "-        throw new UnexpectedException(e);", "-      }", "-", "-      _file = new File(file);", "-", "-      errors[i] = new JUnitError(_file, lineNo, 0, tf.thrownException().getMessage(),", "-                                 ! (tf.thrownException() instanceof AssertionFailedError),", "-                                 tc.getName());", "+    ", "+    while ( errEnum.hasMoreElements()) {", "+      TestFailure tErr = (TestFailure) errEnum.nextElement();", "+      errors[i] = _makeJUnitError(tErr, theclass, true);", "-", "+    ", "+    while (failures.hasMoreElements()) {", "+      TestFailure tFail = (TestFailure) failures.nextElement();", "+      errors[i] = _makeJUnitError(tFail, theclass, false);", "+      i++;", "+    }", "+      ", "+    Arrays.sort(errors);", "+    ", "+    //Create the array of errors and failures, ordered by line number", "+    ", "+    /* while ( (i < errors.length) && ( (tFail != null) || (tErr != null) ) ) {", "+     ", "+      if ( (jFail != null) && ( (jErr == null) || (jFail.lineNumber() < jErr.lineNumber()) ) ) {", "+        errors[i] = jFail;", "+        System.out.println(jFail.lineNumber());", "+        if (failures.hasMoreElements()) {", "+          tFail = (TestFailure)failures.nextElement();", "+          jFail = _makeJUnitError(tFail, theclass, false);", "+        }", "+        else {", "+          tFail = null;", "+          jFail = null;", "+        }", "+      }", "+      ", "+      else if ( (jErr != null) && ( (jFail == null) || (jErr.lineNumber() <= jFail.lineNumber()) ) ) {", "+        errors[i] = jErr;", "+        System.out.println(jErr.lineNumber());", "+        if (errEnum.hasMoreElements()) {", "+          tErr = (TestFailure)errEnum.nextElement();", "+          jErr = _makeJUnitError(tErr, theclass, true);", "+        }", "+        else {", "+          tErr = null;", "+          jErr = null;", "+        }", "+      }", "+       ", "+      i++;", "+    }*/", "+   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbc11a2b589e8eb8e2518250788dc544", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "c767fd7ac698a252b2acccd30077ab91751fe069", "commitAfterChange": "41dbd1f79552ad2c4983397e3a693dbde7c41bb5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testIndentInfoSquiggly() throws BadLocationException", "signatureAfterChange": "   public void testIndentInfoSquiggly() throws BadLocationException", "diff": ["-    assertEquals(\"1.0\", noBrace, ii.braceType);", "-    assertEquals(\"1.1\", -1, ii.distToNewline);", "-    assertEquals(\"1.2\", -1, ii.distToBrace);", "-    assertEquals(\"1.3\", -1, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, noBrace, -1, -1, -1);", "-    assertEquals(\"0.1\", \"\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"\\n\", doc);", "-    assertEquals(\"2.0\", noBrace, ii.braceType);", "-    assertEquals(\"2.1\", -1, ii.distToNewline);", "-    assertEquals(\"2.2\", -1, ii.distToBrace);", "-    assertEquals(\"2.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, noBrace, -1, -1, 0);", "-    assertEquals(\"0.2\", \"{\\n\\n\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"{\\n\\n\\n\", doc);", "-    assertEquals(\"3.0\", openSquiggly, ii.braceType);", "-    assertEquals(\"3.2\", 3, ii.distToBrace);", "-    assertEquals(\"3.1\", -1, ii.distToNewline);", "-    assertEquals(\"3.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openSquiggly, -1, 3, 0);", "-    assertEquals(\"0.3\", \"{\\n\\n{\\n\\n\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"{\\n\\n{\\n\\n\\n\", doc);", "-    assertEquals(\"4.0\", openSquiggly, ii.braceType);", "-    assertEquals(\"4.1\", 3, ii.distToNewline);", "-    assertEquals(\"4.2\", 3, ii.distToBrace);", "-    assertEquals(\"4.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openSquiggly, 3, 3, 0);", "-    assertEquals(\"0.4\", \"{\\n\\n{\\n\\n  {\\n\\n\\n\", doc.getText(0, doc.getLength()));", "+    _assertContents(\"{\\n\\n{\\n\\n  {\\n\\n\\n\", doc);", "-    assertEquals(\"5.0\", openSquiggly, ii.braceType);", "-    assertEquals(\"5.1\", 5, ii.distToNewline);", "-    assertEquals(\"5.2\", 3, ii.distToBrace);", "-    assertEquals(\"5.3\", 0, ii.distToPrevNewline);", "+    _assertIndentInfo(ii, openSquiggly, 5, 3, 0);"]}], "num": 18043}
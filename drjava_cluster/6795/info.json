{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f7c068953193327e681ed3d60e97306", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f0c81efc9bc91b307fcf8f340404fa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 435, "methodNumberAfterChange": 435, "signatureBeforeChange": "\r \r   public void forLessThanOrEqualExpression(LessThanOrEqualExpression that)", "signatureAfterChange": "    public void forLessThanOrEqualExpression(LessThanOrEqualExpression that)", "diff": ["-\r", "-  public void forLessThanOrEqualExpression(LessThanOrEqualExpression that) {\r", "-    forLessThanOrEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forLessThanOrEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forLessThanOrEqualExpression(LessThanOrEqualExpression that) {", "+    forLessThanOrEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forLessThanOrEqualExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c1421b805056bec87455f6c34c8f21", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 437, "methodNumberAfterChange": 437, "signatureBeforeChange": "\r \r   public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that)", "signatureAfterChange": "    public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that)", "diff": ["-\r", "-  public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that) {\r", "-    forGreaterThanOrEqualExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forGreaterThanOrEqualExpressionOnly(that);\r", "-  }\r", "+", "+  public void forGreaterThanOrEqualExpression(GreaterThanOrEqualExpression that) {", "+    forGreaterThanOrEqualExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forGreaterThanOrEqualExpressionOnly(that);", "+  }"]}], "num": 6795}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88541fa7ea2abd15f312ebf4dbc2d99f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5233fce0e86bd9959e28374c57a05171", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected final void quitSlave() throws RemoteException", "diff": ["-    _log.log(this + \".quitSlave() called\");", "+    SlaveRemote dyingSlave;", "-      if (isStartupInProgress())", "-        /* There is a slave to be quit, but we don't have a handle to it yet. Instead we set this flag, which makes it", "-         * quit immediately after it registers in registerSlave. */", "+      if (isStartupInProgress()) {", "+        /* There is a slave to be quit, but _slave == null, so we cannot contact it yet. Instead we set _quitOnStartup", "+         * and tell the slave to quit when it registers in registerSlave. */", "-      ", "+        return;", "+      }", "-        System.out.println(\"Slave JVM quit operation invoked when no slave running\");", "-//        throw new IllegalStateException(\"tried to quit when no slave running and startup not in progress\");", "+        return;", "-        _slave.quit();", "-        _slave = null;  // Remove reference to Slave JVM", "+        dyingSlave = _slave;", "+        _slave = null;", "+    dyingSlave.quit();  // remote operation is not synchronized!"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8579c4f58ae358eef97fa6a2b7b59d06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "acb61ff7586f62b61a15637f6576fc3aff67ead1", "commitAfterChange": "7f6caafd37c000cec49c11321ed7ed1199924a0b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void show()", "signatureAfterChange": "     private void _close()", "diff": ["+", "+   private void _close() {", "+     _frame.removeTab(this);", "+     if (_open)", "+       stopListening();", "+       //_frame.uninstallFindReplaceDialog(this);", "+     _open = false;", "+   }", "-  public void show() {", "-    super.show();", "-    _frame.installFindReplaceDialog(this);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94e76c3512f4063b9823cc871b0252a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void registerSlave(SlaveRemote slave) throws RemoteException", "signatureAfterChange": "   public void registerSlave(SlaveRemote slave) throws RemoteException", "diff": ["+    ", "+    boolean quitSlavePending;  // flag used to move quitSlave() call out of synchronized block", "+    ", "-      _stubFile.delete();", "-      _stub = null;", "-      _classLoaderStub = null;", "-      _classLoaderStubFile.delete();", "+      quitSlavePending = _quitOnStartup;", "-        quitSlave();", "+    }", "+    if (quitSlavePending) {", "+      _log.log(this + \" Executing deferred quitSlave() that was called during startup\");", "+      quitSlave();  // not synchronized; _slave may be null when this code executes"]}], "num": 21774}
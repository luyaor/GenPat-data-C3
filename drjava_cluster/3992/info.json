{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1de252f75f0c0cb1e2b79211b0276260", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39248a5f45239a534e196a6b0ff12ef7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void testDancingUIFileOpened() throws IOException", "signatureAfterChange": "   public void testDancingUIFileOpened() throws IOException", "diff": ["+    ", "+    _log.log(\"Starting testingDancingUIFileOpened\");", "+    ", "+    final GlobalModel _model = _frame.getModel();", "+    ", "+", "+     ", "+     _log.log(\"DancingUIFileOpened Set Up\");", "+     ", "+     // set up listeners and signal flags", "+     final SingleDisplayModelFileOpenedListener openListener = new SingleDisplayModelFileOpenedListener();", "+     ", "+     _openDone = false;", "-//     try {", "-       Utilities.invokeLater(new Runnable() { public void run() {", "-         _frame.pack();", "-         _frame.open(new FileOpenSelector() {", "+     Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+//       _frame.setVisible(true);", "+        _frame.pack();", "+        _frame.addComponentListenerToOpenDocumentsList(listener);", "+      }", "+     });", "+     ", "+     _model.addListener(openListener);", "+     ", "+     _log.log(\"opening file\");", "+     ", "+     Utilities.invokeLater(new Runnable() {", "+       public void run() {", "+        _frame.open(new FileOpenSelector() {", "-         _frame.getModel().addListener(compileListener);", "-         _frame.addComponentListenerToOpenDocumentsList(listener);", "-         _compileDone = false;", "+       }", "+     });", "+     ", "+     /* wait until file has been open and active document changed. */", "+     synchronized(_openLock) {", "+       try { while (! _openDone) _openLock.wait(); }", "+       catch(InterruptedException e) { fail(e.toString()); }", "+     }", "+     ", "+     _model.removeListener(openListener);", "+     ", "+     _log.log(\"File opened\");", "+     ", "+     _compileDone = false;", "+     _model.addListener(compileListener);", "+     ", "+     // save and compile the new file asynchronously", "+     ", "+     Utilities.invokeLater(new Runnable() { ", "+       public void run() { ", "+         _log.log(\"saving all files\");", "+         _frame._saveAll();", "+         _log.log(\"invoking compileAll action\");", "-       }});", "-//     }", "-//     catch(InterruptedException e) { fail(e.toString()); }", "+       }", "+     });", "+     _log.log(\"File saved and compiled\");", "-//     _log.log(\"testDancingUIFileOpened completed\");", "+     _log.log(\"testDancingUIFileOpened completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cdf5518a975910380fc0a73e5dae8ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "cb297201cc08624c537abfd29974e65bdfd2f397", "commitAfterChange": "ecec455630699fb47e48815ed0e8ff7ef49584c1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "signatureAfterChange": "\r   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model)", "diff": ["+      LOG.log(\"compilerAdapter: \"+compilerAdapter );\r", "-        if (f.getName().equals(\"classes.jar\")) { libDir = f.getParentFile(); }\r", "+        if (f.getName().equals(\"classes.jar\")) { LOG.log(\"[1]\"); libDir = f.getParentFile(); }\r", "+          LOG.log(\"[2]\");\r", "+            LOG.log(\"[3]\");\r", "+              LOG.log(\"[4]\");\r", "-              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { libDir = jreLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jreLibDir, \"rt.jar\"))) { LOG.log(\"[5]\"); libDir = jreLibDir; }\r", "-              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { libDir = jdkLibDir; }\r", "+              if (IOUtil.attemptExists(new File(jdkLibDir, \"rt.jar\"))) { LOG.log(\"[6]\"); libDir = jdkLibDir; }\r", "+        LOG.log(\"libDir: \"+libDir);\r", "+          LOG.log(\"[7]\");\r", "-          if (jars != null) { bootClassPath = Arrays.asList(jars); }\r", "+          LOG.log(\"jars: \"+jars);\r", "+          if (jars != null) { LOG.log(\"jars: \"+java.util.Arrays.toString(jars)); bootClassPath = Arrays.asList(jars); }\r", "+          LOG.log(\"args, version: \"+version+\" f: \"+f.toString()+\" bootClassPath: \"+bootClassPath);\r", "+          LOG.log(\"attempt: \"+attempt+\", isAvailable: \"+attempt.isAvailable());\r", "-        catch (ReflectException e) { /* can't load */ }\r", "-        catch (LinkageError e) { /* can't load */ }\r", "+        catch (ReflectException e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r", "+        catch (LinkageError e) { LOG.log(\"ReflectException\", e); /* can't load */ }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ed1fa7bf8f2a26d923bae50488f64d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "6dc623f6cf84dd216f6949b3ebdd52b19c8912b4", "commitAfterChange": "3bfda0ffd8a22eda2f2daab913b510305e1ef801", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-        try {", "-          RemoteControlClient.openFile(null);", "-          if (RemoteControlClient.isServerRunning()) {", "-            // existing instance is running and responding", "-            for (int i = 0; i < _filesToOpen.size(); ++i) {", "-              RemoteControlClient.openFile(new File(_filesToOpen.get(i)));", "-            }", "-            // files opened in existing instance, quit", "-            System.exit(0);", "-          }", "-        }", "-        catch(IOException ioe) {", "-          ioe.printStackTrace();", "-        }      ", "+        if (openWithRemoteControl(_filesToOpen,1)) System.exit(0); // files opened in existing instance, quit", "-        boolean restart = (getConfig().getSetting(MASTER_JVM_ARGS).length() > 0)", "+        boolean _doRestart = (getConfig().getSetting(MASTER_JVM_ARGS).length() > 0)", "-        _log.log(\"restart: \"+restart);", "+        _log.log(\"_doRestart: \"+_doRestart);", "-        classArgs.addAll(_filesToOpen);", "-        if (restart) {", "+        synchronized(DrJava.class) {", "+          classArgs.addAll(_filesToOpen);", "+          clearFilesToOpen();", "+          _log.log(\"_filesToOpen copied into class arguments, clearing _filesToOpen\");", "+        }", "+        ", "+        if (_doRestart) {", "+          if (DrJava.getConfig().getSetting(edu.rice.cs.drjava.config.OptionConstants.REMOTE_CONTROL_ENABLED)) {", "+            // at this time, OUR remote control server hasn't been started yet", "+            // if one is running, then we won't be able to contact the restarted DrJava", "+           _restartedDrJavaUsesRemoteControl = !RemoteControlClient.isServerRunning();", "+          } else {", "+            // no remote control", "+            _restartedDrJavaUsesRemoteControl = false;", "+          }", "+            _log.log(\"JVMBuilder: mainParams = \"+classArgs);", "+            _alreadyRestarted = true;", "+            _log.log(\"_alreadyRestarted = true\");", "+            _log.log(\"failed = \"+failed);", "-                System.exit(0);", "+                System.exit(1);", "+            else {", "+              // check if there are any files left in _filesToOpen", "+              _log.log(\"not failed, send remaining files via remote control: \"+_filesToOpen);", "+              openWithRemoteControl(_filesToOpen, NUM_REMOTE_CONTROL_RETRIES);", "+            }", "+          // when we return from here, DrJavaRoot._mainFrame has been initialized", "+          // but we may still have files in _filesToOpen that were not processed", "+          // do that now", "+          ArrayList<String> fs = new ArrayList<String>(_filesToOpen);", "+          for(String f: fs) {", "+            DrJavaRoot.handleRemoteOpenFile(new File(f), -1);", "+          }"]}], "num": 3992}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3049114ebc1c6c7a613a0e4f088fdcb2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bed7ec2a06be83e8307448332ee33d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "7933cc364884763a44a085994870596faa04b316", "commitAfterChange": "b978cac1d85997e83464382e4a499c19d736223c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private int compareByPosition(CompilerError other)", "signatureAfterChange": "   private int compareByPosition(CompilerError other)", "diff": ["-  /** Compares this error with the given one, based first on line number, and then by column. */", "+  /** Compares this error's postion with other error's, based first on line number, then by column. */", "-    if (_lineNumber == other._lineNumber) {", "-      int byCol = _startColumn - other._startColumn;", "-      //                        I'm a warning.               I'm not a warning.", "-      return (this.isWarning()? (other.isWarning()? byCol:1):(other.isWarning()? -1:byCol));", "-    }", "-    else return  _lineNumber - other._lineNumber;", "+    int byLine = _lineNumber - other.lineNumber();", "+    if (byLine != 0) return byLine;", "+    ", "+    int byCol = _startColumn - other.startColumn();", "+    if (byCol != 0) return byCol;", "+    return compareErrorWarning(other);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8322fbbf72957586c5fe44a90eec0da3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "   public void gotoFileMatchingMask(String mask)", "signatureAfterChange": "   public void gotoFileMatchingMask(String mask)", "diff": ["-        boolean docChanged = ! pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "+        final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+        if (newDoc != null) {", "+          boolean docChanged = ! newDoc.equals(_model.getActiveDocument());", "-        _model.setActiveDocument(pim.getCurrentItem().doc);", "-        if (docChanged) { // defer executing this code until after active document switch is complete", "-          addToBrowserHistory();", "+          _model.setActiveDocument(newDoc);", "+          if (docChanged) { // defer executing this code until after active document switch is complete", "+            addToBrowserHistory();", "+          }", "-            boolean docChanged = !pim.getCurrentItem().doc.equals(_model.getActiveDocument());", "+            final OpenDefinitionsDocument newDoc = pim.getCurrentItem().getOpenDefinitionsDocument();", "+            if (newDoc != null) {", "+              boolean docChanged = !newDoc.equals(_model.getActiveDocument());", "-            _model.setActiveDocument(pim.getCurrentItem().doc);", "-            if (docChanged) { // defer executing this code until after active document switch is complete", "-              addToBrowserHistory();", "+              _model.setActiveDocument(newDoc);", "+              if (docChanged) { // defer executing this code until after active document switch is complete", "+                addToBrowserHistory();", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e94f9f86628e3408ab521a13c260b7da", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOption.java", "commitBeforeChange": "86073a7fb314101fbea8399fc18b3a4415cbc887", "commitAfterChange": "8af81c4ac2b5fdee08d0909db34923047e4b5620", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public String format(KeyStroke k)", "signatureAfterChange": "   public String format(KeyStroke k)", "diff": ["+      if (k == NULL_KEYSTROKE)", "+        return \"null\";", "-        s += KeyEvent.getKeyText(k.getKeyCode()).toUpperCase().replace(' ', '_');", "+        String key = (String) keys.get(new Integer(k.getKeyCode()));", "+        if (key == null)", "+          throw new IllegalArgumentException(\"Invalid keystroke\");", "+        s += key;", "+        return s; ", "+        /*String key = new String();", "+         switch(k.getKeyCode()) {", "+         // COMMA", "+         case 44:key = \"COMMA\";", "+         break;", "+         // PERIOD", "+         case 46:key = \"PERIOD\";", "+         break;", "+         // SLASH", "+         case 47:key = \"SLASH\";", "+         break;", "+         // SEMICOLON", "+         case 59:key = \"SEMICOLON\";", "+         break;", "+         // EQUALS", "+         case 61:key = \"EQUALS\";", "+         break;", "+         // OPEN BRACKET", "+         case 91:key = \"OPEN_BRACKET\";", "+         break;", "+         // BACKSLASH", "+         case 92:key = \"BACKSLASH\";", "+         break;", "+         // CLOSE BRACKET", "+         case 93:key = \"CLOSE_BRACKET\";", "+         break;", "+         default:key = KeyEvent.getKeyText(k.getKeyCode()).toUpperCase()", "+         .replace(' ', '_');", "+         }", "+         s += key;*/", "-    else", "-      return null;", "+    else return \"\";"]}], "num": 23042}
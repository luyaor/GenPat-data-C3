{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b448c7c87ca9f2000e0e403afa4d1cab", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7a731fd8ec23a42a3c5a0ddef968835", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 23, "signatureBeforeChange": "    public static <K, V> Map.Entry<K, V> mapEntryForKey(final Map<K, V> map, final K key)", "signatureAfterChange": "     public Map<K, V> value()", "diff": ["+    private DefaultHashMapFactory() {}", "+    public Map<K, V> value() { return new HashMap<K, V>(); }", "-  public static <K, V> Map.Entry<K, V> mapEntryForKey(final Map<K, V> map, final K key) {", "-    return new Map.Entry<K, V>() {", "-      public K getKey() { return key; }", "-      public V getValue() { return map.get(key); }", "-      public V setValue(V value) { return map.put(key, value); }", "-      public boolean equals(Object o) {", "-        if (this == o) { return true; }", "-        else if (!(o instanceof Map.Entry<?, ?>)) { return false; }", "-        else {", "-          Map.Entry<?, ?> cast = (Map.Entry<?, ?>) o;", "-          if (key == null ? cast.getKey() == null : key.equals(cast.getKey())) {", "-            V val = map.get(key);", "-            return val == null ? cast.getValue() == null : val.equals(cast.getValue());", "-          }", "-          else { return false; }", "-        }", "-      }", "-      public int hashCode() {", "-        V val = map.get(key);", "-        return (key == null ? 0 : key.hashCode()) ^ (val == null ? 0 : val.hashCode());", "-      }", "-    };", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4376281772ce0a3a629ac535711d015", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 188, "methodNumberAfterChange": 187, "signatureBeforeChange": "      private void openFilesInFolder(File dir, boolean recursive)", "signatureAfterChange": "      private void openFilesInFolder(File dir, boolean recursive)", "diff": ["-  private void openFilesInFolder(File dir, boolean recursive)", "-  {", "+  private void openFilesInFolder(File dir, boolean recursive) {", "-    if(dir != null && dir.isDirectory()){", "+    if (dir != null && dir.isDirectory()) {", "-      if(_model.isProjectActive()){", "-        Collections.sort(files, new Comparator<File>(){", "-          public int compare(File o1,File o2){", "+      if (_model.isProjectActive())", "+        Collections.sort(files, new Comparator<File>() {", "+          public int compare(File o1,File o2) {", "-          }", "-          public boolean equals(Object o){", "-            return false;", "-          }", "-        });", "-      }else{", "-        Collections.sort(files, new Comparator<File>(){", "-          public int compare(File o1,File o2){", "+        }", "+      });", "+      else", "+        Collections.sort(files, new Comparator<File>() {", "+          public int compare(File o1,File o2) {", "-          }", "-          public boolean equals(Object o){", "-            return false;", "-          }", "-        });", "-      }", "+        }", "+      });"]}], "num": 5032}
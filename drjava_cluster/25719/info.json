{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c00ccf7d65f7001182ff5b5925dec743", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dce710fbe4b75df830af334d93b5181", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/IncrementalTaskController.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public List<I> intermediateValues()", "signatureAfterChange": "   public BlockingQueue<I> intermediateQueue()", "diff": ["+   */", "+  public BlockingQueue<I> intermediateQueue() {", "+    if (_ignoreIntermediate) { throw new IllegalStateException(\"No queue is maintained\"); }", "+    else { return _intermediateQueue; }", "+  }", "-  public List<I> intermediateValues() {", "-    if (_status != Status.CANCELED) {", "-      try { return getIntermediateValues(); }", "-      catch (InterruptedException e) { throw new WrappedException(e); }", "-    }", "-    else { throw new IllegalStateException(\"Task is cancelled\"); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c49929ecd820632d22c876d6f047cf82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "68fac9302e6b2358c3b67dbd6346f2e01189b049", "commitAfterChange": "844c5b5a76f593d88002386f7e1c5749ae206027", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 18, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public Pair<Object,String>[] getVariable(String var)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public Pair<Object,String>[] getVariable(String var)", "diff": ["-    InterpretResult ir = interpret(var);", "-    return ir.apply(new InterpretResult.Visitor<Pair<Object,String>[]>() {", "+    synchronized(_stateLock) {", "+      InterpretResult ir = interpret(var);", "+      return ir.apply(new InterpretResult.Visitor<Pair<Object,String>[]>() {", "-            return new Pair[] { new Pair<Object,String>(valString, objTypeString) }; }", "+          return new Pair[] { new Pair<Object,String>(valString, objTypeString) }; }", "-    });", "+      });", "+    }"]}], "num": 25719}
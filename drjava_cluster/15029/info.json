{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3abf7c8bc44e71544b0ad10cc12335c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "963e8230b74a4b240e82b8465de1f365", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "               public void testForCastExpressionOnly()", "signatureAfterChange": "          public void testForCastExpressionOnly()", "diff": ["-", "-      assertEquals(\"When value_result is subtype of type_result, return type_result.\", sd1.getInstanceData(), _etc.forCastExpressionOnly(cd, sd1, sd3.getInstanceData()));", "+      ", "+      assertEquals(\"When value_result is subtype of type_result, return type_result.\", sd1.getInstanceData(), ", "+                   _etc.forCastExpressionOnly(cd, sd1, sd3.getInstanceData()));", "-      assertEquals(\"When type_result is subtype of value_result, return type_result.\", sd3.getInstanceData(), _etc.forCastExpressionOnly(cd, sd3, sd1.getInstanceData()));", "+      assertEquals(\"When type_result is subtype of value_result, return type_result.\", sd3.getInstanceData(), ", "+                   _etc.forCastExpressionOnly(cd, sd3, sd1.getInstanceData()));", "-      assertEquals(\"When type_result and value_result are not subtypes of each other, return type_result\", sd2.getInstanceData(), _etc.forCastExpressionOnly(cd, sd2, sd1.getInstanceData()));", "+      assertEquals(\"When type_result and value_result are not subtypes of each other, return type_result\", ", "+                   sd2.getInstanceData(), _etc.forCastExpressionOnly(cd, sd2, sd1.getInstanceData()));", "-      assertEquals(\"Error message should be correct.\", \"You cannot cast an expression of type \" + sd1.getName() + \" to type \" + sd2.getName() + \" because they are not related\", errors.getLast().getFirst());     ", "+      assertEquals(\"Error message should be correct.\", \"You cannot cast an expression of type \" + sd1.getName() ", "+                     + \" to type \" + sd2.getName() + \" because they are not related\", ", "+                   errors.getLast().getFirst());     ", "-      assertEquals(\"When value_result is a SymbolData, return type_result\", fooMama.getInstanceData(), _etc.forCastExpressionOnly(cd, fooMama, foo));", "+      assertEquals(\"When value_result is a SymbolData, return type_result\", fooMama.getInstanceData(), ", "+                   _etc.forCastExpressionOnly(cd, fooMama, foo));", "-      assertEquals(\"Error message should be correct.\", \"You are trying to cast Foo, which is a class or interface type, not an instance.  Perhaps you meant to create a new instance of Foo\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct.\", ", "+                   \"You are trying to cast Foo, which is a class or interface type, not an instance.  \" ", "+                     + \"Perhaps you meant to create a new instance of Foo\",", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb670d2fab94abb196cf5f1f08e62d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "                      public void testForConcreteMethodDef()", "signatureAfterChange": "                      public void testForConcreteMethodDef()", "diff": ["-                   \"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                   \"Only constructors can have the same name as the class they appear in, and constructors do not \"", "+                     + \"have an explicit return type\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce6c3a4bffb76c8f8003a58c2a24d22c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "          public void test_addAndIgnoreError()", "signatureAfterChange": "          public void test_addAndIgnoreError()", "diff": ["-        assertEquals(\"Make sure runtime exception message is correct.\", \"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.  Please report this bug.\",", "+        assertEquals(\"Make sure runtime exception message is correct.\", ", "+                     \"Internal Program Error: _addAndIgnoreError called while _errorAdded was true.\" + ", "+                     \"  Please report this bug.\","]}], "num": 15029}
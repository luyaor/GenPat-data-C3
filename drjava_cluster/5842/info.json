{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5152b4591e231dd8b7ef71e39376816b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c6a64f588884089bea53fe4c22fc04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/swing/SwingWorker.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public final T get() throws InterruptedException, InvocationTargetException", "signatureAfterChange": "   protected final void doStop()", "diff": ["-  public final T get() throws InterruptedException, InvocationTargetException {", "-    if (_cancelled) { throw new IllegalStateException(\"Task was cancelled\"); }", "-    try { return _controller.value(); }", "-    catch (WrappedException e) {", "-      Throwable cause = e.getCause();", "-      if (cause instanceof InterruptedException) {throw (InterruptedException) cause; }", "-      else if (cause instanceof InvocationTargetException && cause.getCause() != null) {", "-        // The task wrapped the exception, so we must unwrap it", "-        throw new InvocationTargetException(cause.getCause());", "-      }", "-      else { throw e; }", "+  protected final void doPause() { _continueMonitor.reset(); }", "+  protected final void doStop() { _workerThread.interrupt(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f075f5acd60cbdfb892f11ec70a2df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "signatureAfterChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "diff": ["-    try {", "-      File file = doc.getFile();", "-      File[] files = new File[] { file };", "-      ", "-      try {", "-        _notifier.compileStarted();", "-        File[] sourceRoots = new File[] { doc.getSourceRoot() };", "-        _compileFiles(sourceRoots, files, buildDir);", "-      }", "-      catch (Throwable e) {", "-        CompilerError err = new CompilerError(file, -1, -1, e.getMessage(), false);", "-        CompilerError[] errors = new CompilerError[] { err };", "-        _distributeErrors(errors);", "-      }", "-      finally {", "-        // Fire a compileEnded event", "-        _notifier.compileEnded();", "-      }", "-    }", "-    catch (IllegalStateException ise) {", "-      // No file exists, don't try to compile", "-    }", "+    File[] files = { doc.getFile() };  ", "+    // throws a FileMovedException if file has moved, which is preferable to the InvalidPackageException produced", "+    // by getSourceRoot for the same circumstances", "+     ", "+    _rawCompile(new File[] { doc.getSourceRoot() }, files, buildDir);"]}], "num": 5842}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1851d15d9ebc4b1910e4629fa30553e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "118eccd12c3b27f8c6dbf756b0275471", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 494, "methodNumberAfterChange": 494, "signatureBeforeChange": "\r \r   public void forDimensionExpressionList(DimensionExpressionList that)", "signatureAfterChange": "    public void forDimensionExpressionList(DimensionExpressionList that)", "diff": ["-\r", "-  public void forDimensionExpressionList(DimensionExpressionList that) {\r", "-    forDimensionExpressionListDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);\r", "-    forDimensionExpressionListOnly(that);\r", "-  }\r", "+", "+  public void forDimensionExpressionList(DimensionExpressionList that) {", "+    forDimensionExpressionListDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);", "+    forDimensionExpressionListOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c34daf0f924a871bda1a2a0957f3dde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 495, "methodNumberAfterChange": 495, "signatureBeforeChange": "\r \r \r   public void forEmptyForCondition(EmptyForCondition that)", "signatureAfterChange": "      public void forEmptyForCondition(EmptyForCondition that)", "diff": ["-\r", "-  public void forEmptyForCondition(EmptyForCondition that) {\r", "-    forEmptyForConditionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forEmptyForConditionOnly(that);\r", "-  }\r", "+  ", "+  public void forEmptyForCondition(EmptyForCondition that) {", "+    forEmptyForConditionDoFirst(that);", "+    if (prune(that)) return;", "+    forEmptyForConditionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83dc29eb13e68e1cc9a8545ec7329208", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 493, "methodNumberAfterChange": 493, "signatureBeforeChange": "\r \r   public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that)", "signatureAfterChange": "    public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that)", "diff": ["-\r", "-  public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that) {\r", "-    forUnparenthesizedExpressionListDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);\r", "-    forUnparenthesizedExpressionListOnly(that);\r", "-  }\r", "+", "+  public void forUnparenthesizedExpressionList(UnparenthesizedExpressionList that) {", "+    forUnparenthesizedExpressionListDoFirst(that);", "+    if (prune(that)) return;", "+    for (int i = 0; i < that.getExpressions().length; i++) that.getExpressions()[i].visit(this);", "+    forUnparenthesizedExpressionListOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caaccb34d86e9db8c95c655d7f8e37ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public void forSourceFile(SourceFile that)", "signatureAfterChange": "   public void forSourceFile(SourceFile that)", "diff": ["-    if (prune(that)) { return; }", "+    if (prune(that)) return;"]}], "num": 19822}
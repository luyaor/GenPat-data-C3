{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68c39302e3c12bd0a072cf5df790c995", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e91a35d2209b0b206f336ce124d872", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "f7063fb4e23916d23eda77d98e21895bea5ea714", "commitAfterChange": "c10d025477127381eef7c7225605ca76dbc00512", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus Forward\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), \"Switch Focus Back\");", "+    ", "-    ", "-    fam.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "+    fam.put(\"Switch Focus Forward\", new AbstractAction(\"Switch Focus Forward\") {", "+    fam.put(\"Switch Focus Back\", new AbstractAction(\"Switch Focus Back\") {", "+      public void actionPerformed(ActionEvent ae) { _closeButton.requestFocusInWindow(); }", "+    });", "+    ", "-    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus Forward\");", "+    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), \"Switch Focus Back\");", "+    ", "+    });", "+    ram.put(\"Switch Focus Back\", new AbstractAction(\"Switch Focus Back\") {", "+      public void actionPerformed(ActionEvent ae) { _findField.requestFocusInWindow(); }", "-    _replaceFindButton = new JButton(_replaceFindNextAction);", "+    _replaceFindNextButton = new JButton(_replaceFindNextAction);", "+    _replaceFindPreviousButton = new JButton(_replaceFindPreviousAction);", "+    _replaceFindPreviousAction.setEnabled(false);", "+    buttons.add(_replaceFindNextButton);", "+    buttons.add(_replaceFindPreviousButton);", "-    buttons.add(_replaceFindButton);", "-    _findPreviousButton.setNextFocusableComponent(_replaceButton);", "-    _replaceButton.setNextFocusableComponent(_replaceFindButton);", "-    _replaceFindButton.setNextFocusableComponent(_replaceAllButton);", "+    _findPreviousButton.setNextFocusableComponent(_replaceFindNextButton);", "+    _replaceFindNextButton.setNextFocusableComponent(_replaceFindPreviousButton);", "+    _replaceFindPreviousButton.setNextFocusableComponent(_replaceButton);", "+    _replaceButton.setNextFocusableComponent(_replaceAllButton);", "-            updateFirstDocumentInSearch();", "+            updateFirstDocInSearch();", "+            _replaceFindPreviousAction.setEnabled(false);", "-    //Information necessary to change the behavior of the Enter key in the _findField */", "+    //Change the behavior of the Enter, Tab, and Ctrl-Enter keys in the _findField and _replaeField */", "-    KeyStroke switchFocusKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "-    km.addActionForKeyStroke(switchFocusKey, _findFieldSwitchFocusAction); ", "+    KeyStroke switchFocusForwardKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "+    km.addActionForKeyStroke(switchFocusForwardKey, _findFieldSwitchFocusForwardAction); ", "-    Action newLineAction = actions.get(DefaultEditorKit.insertBreakAction);", "+    KeyStroke switchFocusBackKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK);", "+    km.addActionForKeyStroke(switchFocusBackKey, _findFieldSwitchFocusBackAction); ", "+    ", "+//    Action newLineAction = new TextAction(\"NewLine Action\") {", "+//      public void actionPerformed(ActionEvent e) {", "+//        String text = _findField.getText();", "+//        int caretPos = _findField.getCaretPosition();", "+//        String textBeforeCaret = text.substring(0, caretPos);", "+//        String textAfterCaret = text.substring(caretPos);", "+//        _findField.setText(textBeforeCaret.concat(\"\\n\"/*System.getProperty(\"line.separator\")*/).concat(textAfterCaret));", "+//        _findField.setCaretPosition(caretPos+1);", "+//      }", "+//    };", "+    ", "+    Action newLineAction = new DefaultEditorKit.InsertBreakAction();", "+    ", "-    rkm.addActionForKeyStroke(switchFocusKey, _replaceFieldSwitchFocusAction); ", "+    rkm.addActionForKeyStroke(switchFocusForwardKey, _replaceFieldSwitchFocusForwardAction); ", "+    rkm.addActionForKeyStroke(switchFocusBackKey, _replaceFieldSwitchFocusBackAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2f766f8a9e5c924f2446bcbd536696d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "9fab12d2706a8bcd0fd56dcb5611b998d9aa0c25", "commitAfterChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "+    _updateMachine();", "-    //i = this.WHEN_FOCUSED;", "-    //i = this.WHEN_IN_FOCUSED_WINDOW;", "-    //InputMap im = _mainPanel.getInputMap(i);", "-    InputMap im = _findField.getInputMap(i);", "-    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "-    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "-    //ActionMap am = _mainPanel.getActionMap();", "-    ActionMap am = _findField.getActionMap();", "-    am.put(\"Find Next\", _findNextAction);", "-    am.put(\"Close\", new AbstractAction(\"Close\") {", "+    InputMap fim = _findField.getInputMap(i);", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    ActionMap fam = _findField.getActionMap();", "+    fam.put(\"Find Next\", _findNextAction);", "+    fam.put(\"Close\", new AbstractAction(\"Close\") {", "-", "+    ", "+    fam.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "+      public void actionPerformed(ActionEvent ae) { _findField.getNextFocusableComponent().requestFocusInWindow(); }", "+    });", "+    ", "+    InputMap rim = _replaceField.getInputMap(i);", "+    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    ActionMap ram = _replaceField.getActionMap();", "+    ram.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "+      public void actionPerformed(ActionEvent ae) { _replaceField.getNextFocusableComponent().requestFocusInWindow(); }", "+    });", "+    ", "+    ", "+    ", "+    _findPreviousButton = new JButton(_findPreviousAction);", "-    //_closeButton = new JButton(_closeAction);", "+    buttons.add(_findPreviousButton);", "-    //buttons.add(_closeButton);", "+    ", "-    JLabel findLabel = new JLabel(\"Find\", SwingConstants.LEFT);", "-    //findLabel.setLabelFor(_findField);", "-    findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+    _findLabel = new JLabel(\"Find Next\", SwingConstants.LEFT);", "+    _findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-    JLabel replaceLabel = new JLabel(\"Replace\", SwingConstants.LEFT);", "-    // replaceLabel.setLabelFor(_replaceField);", "-    replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-", "-    //JLabel matchLabel = new JLabel(\"Match\", SwingConstants.LEFT); // JL", "-    //matchLabel.setHorizontalAlignment(SwingConstants.LEFT);  // JL", "+    _replaceLabel = new JLabel(\"Replace With\", SwingConstants.LEFT);", "+    _replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+    ", "-", "-    // _labelPanel.setLayout(new BoxLayout(_labelPanel, BoxLayout.Y_AXIS));", "-", "-    //_labelPanel.add(Box.createGlue());", "-    _labelPanel.add(findLabel);", "-    _labelPanel.add(replaceLabel);", "-    // _labelPanel.add(matchLabel); // JL", "+    _labelPanel.add(_findLabel);", "+    _labelPanel.add(_replaceLabel);", "-", "-    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "+    _labelPanel.setFocusable(false);", "+   ", "-    _updateMachine();", "-    ", "-    SearchBackwardsListener bsl = new SearchBackwardsListener();", "-    _searchBackwards = new JCheckBox(\"Search Backwards\", DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "-    _searchBackwards.addItemListener(bsl);", "-//    _searchBackwards.setMargin(new Insets(0,4,0,3));", "-", "+    ", "-    ", "-    ", "-//    haven't completed this functionality yet    ", "+     ", "-    _ignoreCommentsAndStrings = new JCheckBox(\"Ignore Comments and Strings\", DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS));", "+    _ignoreCommentsAndStrings = new JCheckBox(\"No Comments/Strings\", DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS));", "-    ", "-    //FindAnyOccurrenceListener faol = new FindAnyOccurrenceListener(); // JL", "-    //_findAnyOccurrence = new JRadioButton(\"Any Occurrence\"); // JL", "-    //_findAnyOccurrence.addActionListener(faol); // JL", "-    _commentsAndStringsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _commentsAndStringsPanel.add(_ignoreCommentsAndStrings);", "-        ", "-    _lowerCheckPanel.add(_matchWholeWord);", "-    _lowerCheckPanel.add(_searchAllDocuments); // JL (added)", "-    //_lowerCheckPanel.add(_findAnyOccurrence); // JL", "-    // add radiobuttons to the buttongroup", "-    //_radioButtonGroup = new ButtonGroup(); // JL", "-    //_radioButtonGroup.add(_matchWholeWord); // JL", "-    //_radioButtonGroup.add(_findAnyOccurrence); // JL", "+    _lowerCheckPanel.add(_matchWholeWord); ", "+    _lowerCheckPanel.add(_ignoreCommentsAndStrings);", "-    _matchCaseAndClosePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _matchCaseAndClosePanel.add(_matchCase); // JL", "-    _matchCaseAndClosePanel.add(_searchBackwards); // JL", "-    //_matchCaseAndClosePanel.add(_searchAllDocuments); // JL - moved to _radioButtonGroup", "-    //_matchCaseAndClosePanel.add(_matchWholeWord);", "-    //_matchCaseAndClosePanel.add(_findAnyOccurrence);", "-    _matchCaseAndClosePanel.add(_closePanel);", "-    //_findAnyOccurrence.setSelected(true); // JL", "+    _matchCaseAndAllDocsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _matchCaseAndAllDocsPanel.add(_matchCase);", "+    _matchCaseAndAllDocsPanel.add(_searchAllDocuments); ", "+    _searchAllDocuments.setSelected(false);", "-", "-", "-//    _rightPanel = new JPanel(new GridLayout(1,2,5,0));", "-    JPanel midPanel = new JPanel(new GridLayout(2,1));", "-    JPanel farRightPanel = new JPanel(new GridLayout(3,1));", "-    midPanel.add(_findPane);", "-    midPanel.add(_replacePane);", "-//    midPanel.add(wrap(_message)); // JL", "-    // midPanel.add(wrap(_lowerCheckPanel)); // JL", "-", "-    /******** Set up the Panel containing all 3 rows of checkboxes ********/", "-    farRightPanel.add(_matchCaseAndClosePanel);", "-    farRightPanel.add(_lowerCheckPanel); // JL", "-    farRightPanel.add(_commentsAndStringsPanel);", "-    //farRightPanel.add(_message); // JL", "+    JPanel fieldsPanel = new JPanel(new GridLayout(2,1));", "+    fieldsPanel.add(_findPane);", "+    fieldsPanel.add(_replacePane);", "-    /******** Set upt the Panel containing the three above main panels ********/", "-     ", "-    _rightPanel = new JPanel(new BorderLayout(5, 0));", "+    /******** Set up the Panel containing both rows of checkboxes ********/", "+    JPanel optionsPanel = new JPanel(new GridLayout(2,1));", "+    optionsPanel.add(_matchCaseAndAllDocsPanel);", "+    optionsPanel.add(_lowerCheckPanel);", "+", "+", "+    /******** Set upt the Panel containing the two above main panels ********/", "+    JPanel midPanel = new JPanel(new BorderLayout(5,5));", "+    midPanel.add(fieldsPanel, BorderLayout.CENTER);", "+    midPanel.add(optionsPanel, BorderLayout.EAST);", "+    ", "+    ", "+    /******** Set upt the Panel containing the midPanel and the closePanel ********/", "+    _rightPanel = new JPanel(new BorderLayout(5, 5));", "-    _rightPanel.add(farRightPanel, BorderLayout.EAST);", "-    //_rightPanel.add(_lowerCheckPanel, BorderLayout.SOUTH);", "+    _rightPanel.add(_closePanel, BorderLayout.EAST);    ", "-    hookComponents(this, _rightPanel, _labelPanel,buttons);", "+    hookComponents(this, _rightPanel, _labelPanel, buttons);", "-    _matchCase.setNextFocusableComponent(_searchBackwards);", "-    _searchBackwards.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "-    _matchWholeWord.setNextFocusableComponent(_searchAllDocuments); // JL (edited)", "-    _searchAllDocuments.setNextFocusableComponent(_ignoreCommentsAndStrings); // JL (edited)", "+    _matchCase.setNextFocusableComponent(_searchAllDocuments);", "+    _searchAllDocuments.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "+    _matchWholeWord.setNextFocusableComponent(_ignoreCommentsAndStrings); // JL (edited)", "-    //_findAnyOccurrence.setNextFocusableComponent(_findNextButton); // JL", "+    _findNextButton.setNextFocusableComponent(_findPreviousButton);", "+    _findPreviousButton.setNextFocusableComponent(_replaceButton);", "+    _replaceButton.setNextFocusableComponent(_replaceFindButton);", "+    _replaceFindButton.setNextFocusableComponent(_replaceAllButton);", "-", "+    ", "+    ", "+    /******** Document, Focus and Key Listeners ********/", "+    ", "-    });", "+    });  ", "-       ", "+    ", "-      ", "-    ", "+    _findField.addFocusListener(_findFieldSwitchFocusListener);", "+    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "+          ", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL) {", "-//          _findField.removeKeyListener(_findEnterListener);", "-          if (_findField.getKeyListeners().length <= 1 )", "-            _findField.addKeyListener(_newLineEnterListener); ", "-        }", "+        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "+          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL) {", "-          _findField.removeKeyListener(_newLineEnterListener);", "-//          if (_findField.getKeyListeners().length <= 1)", "-//            _findField.addKeyListener(_findEnterListener);", "-          }", "+        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "-    });", "-    ", "-    ", "+    });   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df90e8148083b1c2226d0c176719806d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "34cf34867ac9dce276fc29b1ebccbc3b04558150", "commitAfterChange": "a84367d6c7dd279d0237f04d04b6df32e0ca3dea", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-        ", "-      Map<File,Set<String>> sourceToTopLevelClassMap = new HashMap<File,Set<String>>();", "+      /* Check if we should delete class files in directories with language level files. */", "-//      System.out.println(\"Build dir  : \"+buildDir);", "-//      System.out.println(\"Source root: \"+sourceDir);", "-      // Delete the .class files that match the following pattern:", "-      // XXX.dj? --> XXX.class", "-      //             XXX$*.class", "-      // Accessing the disk is the most costly part; therefore, we want to scan each directory only once.", "-      // We create a map from parent directory to class names in that directory.", "-      // Then we scan the files in each directory and delete files that match the class names listed for it.", "-      // dirToClassNameMap: key=parent directory, value=set of classes in this directory", "-      Map<File,Set<String>> dirToClassNameMap = new HashMap<File,Set<String>>();", "-      for(Map.Entry<File,Set<String>> e: sourceToTopLevelClassMap.entrySet()) {", "-        try {", "-          File dir = e.getKey().getParentFile();", "-          if (buildDir != null && buildDir != FileOps.NULL_FILE &&", "-              sourceDir != null && sourceDir != FileOps.NULL_FILE) {", "-            // build directory set", "-            String rel = edu.rice.cs.util.FileOps.stringMakeRelativeTo(dir,sourceDir);", "-            dir = new File(buildDir,rel);", "+      if (!DrJava.getConfig().getSetting(OptionConstants.DELETE_LL_CLASS_FILES)", "+            .equals(OptionConstants.DELETE_LL_CLASS_FILES_CHOICES.get(0))) {", "+        // not \"never\"", "+        final HashSet<File> dirsWithLLFiles = new HashSet<File>();", "+        for(File f: newFiles) {", "+          try {", "+            File dir = f.getParentFile();", "+            if (buildDir != null && buildDir != FileOps.NULL_FILE &&", "+                sourceDir != null && sourceDir != FileOps.NULL_FILE) {", "+              // build directory set", "+              String rel = edu.rice.cs.util.FileOps.stringMakeRelativeTo(dir,sourceDir);", "+              dir = new File(buildDir,rel);", "+            }            ", "+            dirsWithLLFiles.add(dir);", "-          Set<String> classNames = dirToClassNameMap.get(dir);", "-          if (classNames == null) classNames = new HashSet<String>();", "-          classNames.addAll(e.getValue());", "-          dirToClassNameMap.put(dir,classNames);", "-//          System.out.println(e.getKey()+\" --> \"+dir);", "-//          for(String name: e.getValue()) {", "-//            System.out.println(\"\\t\"+name);", "-//          }", "+          catch(IOException ioe) { /* just don't add this directory */ }", "-        catch(IOException ioe) { /* we'll fail to delete this, but that's better than deleting something we shouldn't */ }", "-      }", "-      // Now that we have a map from parent directories to the class names that should be deleted", "-      // in them, we scan the files in each directory, then check if the names match the class names.      ", "-      for(final Map.Entry<File,Set<String>> e: dirToClassNameMap.entrySet()) {", "-//        System.out.println(\"Processing dir: \"+e.getKey());", "-//        System.out.println(\"\\t\"+java.util.Arrays.toString(e.getValue().toArray(new String[0])));", "-        e.getKey().listFiles(new java.io.FilenameFilter() {", "-          public boolean accept(File dir, String name) {", "-//            System.out.println(\"\\t\"+name);", "-            int endPos = name.lastIndexOf(\".class\");", "-            if (endPos < 0) return false; // can't be a class file", "-            int dollarPos = name.indexOf('$');", "-            if ((dollarPos >= 0) && (dollarPos < endPos)) endPos = dollarPos;", "-            // class name goes to the .class or the first $, whichever comes first", "-            Set<String> classNames = e.getValue();", "-            if (classNames.contains(name.substring(0,endPos))) { ", "-              // this is a class file that is generated from a .dj? file", "+        ", "+        if (DrJava.getConfig().getSetting(OptionConstants.DELETE_LL_CLASS_FILES)", "+            .equals(OptionConstants.DELETE_LL_CLASS_FILES_CHOICES.get(1))) {", "+          // \"ask me\"", "+          final JButton deleteButton = new JButton(new AbstractAction(\"Delete Class Files\") {", "+            public void actionPerformed(ActionEvent e) {", "+              // no op", "+            }", "+          });", "+          final JButton keepButton = new JButton(new AbstractAction(\"Keep Class Files\") {", "+            public void actionPerformed(ActionEvent e) {", "+              // clear the set, i.e. do not delete anything", "+              dirsWithLLFiles.clear();", "+            }", "+          });", "+          ScrollableListDialog<File> dialog = new ScrollableListDialog.Builder<File>()", "+            .setTitle(\"Delete Class Files\")", "+            .setText(\"We suggest that you delete all class files in the directories with language\\n\"+", "+                     \"level files. Do you want to delete the class files in the following directories?\")", "+            .setItems(new ArrayList<File>(dirsWithLLFiles))", "+            .setMessageType(JOptionPane.QUESTION_MESSAGE)", "+            .setFitToScreen(true)", "+            .clearButtons()", "+            .addButton(deleteButton)", "+            .addButton(keepButton)", "+            .build();", "+          ", "+          dialog.showDialog();", "+        }", "+        ", "+        // Delete all class files in the directories listed. If the user was asked and said \"keep\",", "+        // then the set will be empty", "+        for(File f: dirsWithLLFiles) {", "+          f.listFiles(new java.io.FilenameFilter() {", "+            public boolean accept(File dir, String name) {", "+              int endPos = name.lastIndexOf(\".class\");", "+              if (endPos < 0) return false; // can't be a class file", "-//              System.out.println(\"\\t\\tDeleted\");", "+              return false;", "-            return false;", "-          }", "-        });", "+          });", "+        }", "+      ", "+      Map<File,Set<String>> sourceToTopLevelClassMap = new HashMap<File,Set<String>>();", "-//      // Confirm that the .java files corresponding to .dj* files exist.", "-//      for (File f: newFiles)", "-//        if (! f.exists()) Utilities.show(f + \" does not exist\");", "-", "+      // Since we (optionally) delete all class files in LL directories, we don't need the code", "+      // to smart-delete class files anymore.", "+      // smartDeleteClassFiles(sourceToTopLevelClassMap);"]}], "num": 10972}
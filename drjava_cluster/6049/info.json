{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e66f70c44036dc7b08cce659727ac54", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ce3f4f8efaf41e38345d8e87199013", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private void createPopupMenu()", "signatureAfterChange": "   private void createPopupMenu()", "diff": ["-          _mainFrame.toggleBreakpoint();", "+          _mainFrame.debuggerToggleBreakpoint();", "-      // Watchpoint", "-      JMenuItem watchpointItem = new JMenuItem(\"Add Watchpoint\");", "-      watchpointItem.addActionListener( new AbstractAction() {", "+      // Watch", "+      /*", "+      JMenuItem watchItem = new JMenuItem(\"Add Watch\");", "+      watchItem.addActionListener( new AbstractAction() {", "-          //Make sure that the watchpoint is set on the *clicked* line, if within a selection block.", "+          //Make sure that the watch is set on the *clicked* line, if within a selection block.", "-          _mainFrame.addWatchpoint();", "+          _mainFrame.debuggerAddWatch();", "-      _addWatchpointMenuItem = _popMenu.add(watchpointItem);", "-      _addWatchpointMenuItem.setEnabled(false);", "+      _addWatchMenuItem = _popMenu.add(watchItem);", "+      _addWatchMenuItem.setEnabled(false);", "+      */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd46ec95def81037bfd9bc1fb72475a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "f1cdd8ab40ec812de32945f859fe4268e830f213", "commitAfterChange": "03b2d2796342d42693cf58d323df575cbd1df053", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testInterpretJavaClassname() throws DocumentAdapterException", "signatureAfterChange": "   public void testInterpretJavaArguments() throws DocumentAdapterException", "diff": ["-  public void testInterpretJavaClassname() throws DocumentAdapterException {", "-    TestInteractionsModel model = new TestInteractionsModel(_adapter) {", "-      protected void _interpret(String toEval) {", "-        this.toEval = toEval;", "-      }", "-    };", "-    String code = \"java Foo arg1 arg2\";", "-    InteractionsDocument doc = model.getDocument();", "-    doc.insertText(doc.getDocLength(), code,", "-                   InteractionsDocument.DEFAULT_STYLE);", "-    model.interpretCurrentInteraction();", "-    // Arguments must be quoted as strings", "-    assertEquals(\"string being interpreted\",", "-                 \"Foo.main(new String[]{\\\"arg1\\\",\\\"arg2\\\"});\",", "-                 model.toEval);", "+  public void testInterpretJavaArguments() throws DocumentAdapterException {", "+    // java Foo a b c", "+    _assertProcessedContents(\"java Foo a b c\",", "+                             \"Foo.main(new String[]{\\\"a\\\",\\\"b\\\",\\\"c\\\"});\");", "+    // java Foo \"a b c\"", "+    _assertProcessedContents(\"java Foo \\\"a b c\\\"\",", "+                             \"Foo.main(new String[]{\\\"a b c\\\"});\");", "+    // java Foo \"a b\"c d", "+    //  This is different behavior than Unix or DOS, but it's more", "+    //  intuitive to the user (and easier to implement).", "+    _assertProcessedContents(\"java Foo \\\"a b\\\"c d\",", "+                             \"Foo.main(new String[]{\\\"a b\\\",\\\"c\\\",\\\"d\\\"});\");", "+"]}], "num": 6049}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "502f211b068ae8dc5cde4964821a71b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210d5fe56d444b046bc08ae3c17fc02e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 310, "methodNumberAfterChange": 303, "signatureBeforeChange": "   private static <I extends FunctionInvocation, T extends FunctionInvocationCandidate<I>>       Iterable<T> bestMatches(Iterable<T> candidates)", "signatureAfterChange": "   private <F extends Function>       Iterable<FunctionInvocationCandidate<F>> bestInvocations(Iterable<F> functions,                                                                final Iterable<? extends Type> targs,                                                                final Iterable<? extends Expression> args,                                                                final Option<Type> expected)", "diff": ["-  private static <I extends FunctionInvocation, T extends FunctionInvocationCandidate<I>>", "-      Iterable<T> bestMatches(Iterable<T> candidates) {", "+  private <F extends Function>", "+      Iterable<FunctionInvocationCandidate<F>> bestInvocations(Iterable<F> functions,", "+                                                               final Iterable<? extends Type> targs,", "+                                                               final Iterable<? extends Expression> args,", "+                                                               final Option<Type> expected) {", "-    List<T> matches = new LinkedList<T>();", "-    for (T c : candidates) {", "+    Iterable<FunctionInvocationCandidate<F>> candidates = IterUtil.mapSnapshot(functions,", "+                                                                     new Lambda<F, FunctionInvocationCandidate<F>>() {", "+      public FunctionInvocationCandidate<F> value(F f) {", "+        return new FunctionInvocationCandidate<F>(f, targs, args, expected);", "+      }", "+    });", "+    List<FunctionInvocationCandidate<F>> matches = new LinkedList<FunctionInvocationCandidate<F>>();", "+    for (FunctionInvocationCandidate<F> c : candidates) {", "-      for (T c : candidates) {", "+      for (FunctionInvocationCandidate<F> c : candidates) {", "-      for (T c : candidates) {", "+      for (FunctionInvocationCandidate<F> c : candidates) {", "-    return CollectUtil.minList(matches, new Order<T>() {", "-      public boolean contains(T c1, T c2) {", "+    return CollectUtil.minList(matches, new Order<FunctionInvocationCandidate<F>>() {", "+      public boolean contains(FunctionInvocationCandidate<F> c1, FunctionInvocationCandidate<F> c2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1290bf3800b6e3dbfa932a085a88cb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 267, "signatureBeforeChange": "     public I findSingleMethod(Type t) throws UnmatchedLookupException", "signatureAfterChange": "     public FunctionInvocationCandidate<DJMethod>         findSingleMethod(Type t, Iterable<? extends Type> targs, Iterable<? extends Expression> args,                          Option<Type> expected) throws UnmatchedLookupException", "diff": ["-    public I findSingleMethod(Type t) throws UnmatchedLookupException {", "+    public FunctionInvocationCandidate<DJMethod>", "+        findSingleMethod(Type t, Iterable<? extends Type> targs, Iterable<? extends Expression> args,", "+                         Option<Type> expected) throws UnmatchedLookupException {", "-      PredicateSet<MethodInvocationCandidate<I>> candidates = findAll(t);", "-      Iterable<MethodInvocationCandidate<I>> best = bestMatches(candidates);", "+      PredicateSet<DJMethod> candidates = findAll(t);", "+      Iterable<FunctionInvocationCandidate<DJMethod>> best = bestInvocations(candidates, targs, args, expected);", "-      if (matches != 1) { throw new UnmatchedLookupException(matches); }", "-      else { return IterUtil.first(best).invocation(); }", "+      if (matches == 0) { throw new UnmatchedFunctionLookupException(candidates); }", "+      else if (matches > 1) {", "+        Iterable<DJMethod> ms = IterUtil.map(best, new Lambda<FunctionInvocationCandidate<DJMethod>, DJMethod>() {", "+          public DJMethod value(FunctionInvocationCandidate<DJMethod> c) { return c.function(); }", "+        });", "+        throw new AmbiguousFunctionLookupException(ms);", "+      }", "+      else { return IterUtil.first(best); }"]}], "num": 17568}
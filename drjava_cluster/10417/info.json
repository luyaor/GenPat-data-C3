{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfcc0aece5bbfc372e9fea79926c5d37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a0018f748aa40f441bb2e85cd97c52e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "2867a17b0f98ae791ee72fee0bc090826f34641c", "commitAfterChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void testGotoFileUnderCursorAppendJava() throws IOException", "signatureAfterChange": "   public void testGotoFileUnderCursorAppendJava() throws IOException", "diff": ["-    _frame.initGotoFileDialog();", "-    _frame._gotoFileDialog.addWindowListener(new WindowListener() {", "-        public void windowActivated(WindowEvent e) { throw new RuntimeException(\"Should not activate _gotoFileDialog\"); }", "-        public void windowClosed(WindowEvent e) { throw new RuntimeException(\"Should not close _gotoFileDialog\"); }", "-        public void windowClosing(WindowEvent e) { throw new RuntimeException(\"Should not be closing _gotoFileDialog\"); }", "-        public void windowDeactivated(WindowEvent e) { throw new RuntimeException(\"Should not deactivate _gotoFileDialog\"); }", "-        public void windowDeiconified(WindowEvent e) { throw new RuntimeException(\"Should not deiconify _gotoFileDialog\"); }", "-        public void windowIconified(WindowEvent e) { throw new RuntimeException(\"Should not iconify _gotoFileDialog\"); }", "-        public void windowOpened(WindowEvent e) { throw new RuntimeException(\"Should not open _gotoFileDialog\"); }", "-    });", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        _frame.initGotoFileDialog();", "+        _frame._gotoFileDialog.addWindowListener(new WindowListener() {", "+          public void windowActivated(WindowEvent e) { throw new RuntimeException(\"Should not activate _gotoFileDialog\"); }", "+          public void windowClosed(WindowEvent e) { throw new RuntimeException(\"Should not close _gotoFileDialog\"); }", "+          public void windowClosing(WindowEvent e) { throw new RuntimeException(\"Should not be closing _gotoFileDialog\"); }", "+          public void windowDeactivated(WindowEvent e) { throw new RuntimeException(\"Should not deactivate _gotoFileDialog\"); }", "+          public void windowDeiconified(WindowEvent e) { throw new RuntimeException(\"Should not deiconify _gotoFileDialog\"); }", "+          public void windowIconified(WindowEvent e) { throw new RuntimeException(\"Should not iconify _gotoFileDialog\"); }", "+          public void windowOpened(WindowEvent e) { throw new RuntimeException(\"Should not open _gotoFileDialog\"); }", "+        });", "+      }});", "-    _frame._gotoFileUnderCursor();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _frame._gotoFileUnderCursor(); }", "+    });", "-    _frame._gotoFileUnderCursor();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _frame._gotoFileUnderCursor(); }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2157b90ea97121f4e759d236123b939e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "2867a17b0f98ae791ee72fee0bc090826f34641c", "commitAfterChange": "cbdc405e8bd4373c383ad7cbc6a9a656b65ddd52", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public void testGotoFileUnderCursor() throws IOException", "signatureAfterChange": "   public void testGotoFileUnderCursor() throws IOException", "diff": ["-    _frame.initGotoFileDialog();", "-    _frame._gotoFileDialog.addWindowListener(new WindowListener() {", "-        public void windowActivated(WindowEvent e) { throw new RuntimeException(\"Should not activate _gotoFileDialog\"); }", "-        public void windowClosed(WindowEvent e) { throw new RuntimeException(\"Should not close _gotoFileDialog\"); }", "-        public void windowClosing(WindowEvent e) { throw new RuntimeException(\"Should not be closing _gotoFileDialog\"); }", "-        public void windowDeactivated(WindowEvent e) { throw new RuntimeException(\"Should not deactivate _gotoFileDialog\"); }", "-        public void windowDeiconified(WindowEvent e) { throw new RuntimeException(\"Should not deiconify _gotoFileDialog\"); }", "-        public void windowIconified(WindowEvent e) { throw new RuntimeException(\"Should not iconify _gotoFileDialog\"); }", "-        public void windowOpened(WindowEvent e) { throw new RuntimeException(\"Should not open _gotoFileDialog\"); }", "-    });", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        _frame.initGotoFileDialog();", "+        _frame._gotoFileDialog.addWindowListener(new WindowListener() {", "+          public void windowActivated(WindowEvent e) { throw new RuntimeException(\"Should not activate _gotoFileDialog\"); }", "+          public void windowClosed(WindowEvent e) { throw new RuntimeException(\"Should not close _gotoFileDialog\"); }", "+          public void windowClosing(WindowEvent e) { throw new RuntimeException(\"Should not be closing _gotoFileDialog\"); }", "+          public void windowDeactivated(WindowEvent e) { throw new RuntimeException(\"Should not deactivate _gotoFileDialog\"); }", "+          public void windowDeiconified(WindowEvent e) { throw new RuntimeException(\"Should not deiconify _gotoFileDialog\"); }", "+          public void windowIconified(WindowEvent e) { throw new RuntimeException(\"Should not iconify _gotoFileDialog\"); }", "+          public void windowOpened(WindowEvent e) { throw new RuntimeException(\"Should not open _gotoFileDialog\"); }", "+        });", "+      }});", "+    ", "-    _frame._gotoFileUnderCursor();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _frame._gotoFileUnderCursor(); }", "+    });", "-    _frame._gotoFileUnderCursor();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { _frame._gotoFileUnderCursor(); }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b5c55b49cba3e686e75e72e134f7a55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/HistoryTest.java", "commitBeforeChange": "879a487e79b03eab55f32f29728bf19cb9181971", "commitAfterChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testLiveUpdateOfHistoryMaxSize()", "signatureAfterChange": "   public void testLiveUpdateOfHistoryMaxSize()", "diff": ["-    int maxLength = 20;", "-    FileConfiguration config = DrJava.getConfig();", "-    config.setSetting(HISTORY_MAX_SIZE, Integer.valueOf(20));", "-    ", "-    Utilities.clearEventQueue();", "+    final int maxLength = 20;", "+    final FileConfiguration config = DrJava.getConfig();", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { config.setSetting(HISTORY_MAX_SIZE, Integer.valueOf(20)); }", "+    });", "-    config.setSetting(HISTORY_MAX_SIZE, 10);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { config.setSetting(HISTORY_MAX_SIZE, 10); } });", "-    config.setSetting(HISTORY_MAX_SIZE, Integer.valueOf(-1));", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { config.setSetting(HISTORY_MAX_SIZE, Integer.valueOf(-1)); }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fdec5a361cd263b9896e9b85d51836c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 179, "signatureBeforeChange": "   public void dispose()", "signatureAfterChange": "   public void dispose()", "diff": ["-  public void dispose() { }", "+  public void dispose() {", "+    synchronized(_documentsRepos) { _documentsRepos.clear(); }", "+    Utilities.invokeLater(new SRunnable() {", "+      public void run() { _documentNavigator.clear(); }  // this operation must run in event thread", "+    });", "+    // Only remove listeners after pending events have completed", "+    SwingUtilities.invokeLater(new Runnable() { public void run() { _notifier.removeAllListeners(); } });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba31a1870529c50e4d4f099c3b55e1f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "ddbef72a194d17966584ef9d18603b05f8480094", "commitAfterChange": "768f383e38575107c315a182f5f4f8b4961ac9d0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testCaretMovesUpToPromptAfterInsert() throws DocumentAdapterException", "signatureAfterChange": "   public void testCaretMovesUpToPromptAfterInsert() throws DocumentAdapterException", "diff": ["-    _doc.insertText(_doc.getDocLength(), \"typed text\", InteractionsDocument.DEFAULT_STYLE);", "-    _pane.setCaretPosition(1);", "+    _doc.append(\"typed text\", InteractionsDocument.DEFAULT_STYLE);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(1); } });", "+//    System.err.println(\"caretPostion = \" + _pane.getCaretPosition());", "-    assertEquals(\"Caret is at the prompt after output inserted.\",", "-                 _doc.getPromptPos(),", "-                 _pane.getCaretPosition());", "+//     System.err.println(\"caretPostion = \" + _pane.getCaretPosition());", "+    Utilities.clearEventQueue();", "+//     System.err.println(\"caretPostion = \" + _pane.getCaretPosition());", "+    assertEquals(\"Caret is at the prompt after output inserted.\", _doc.getPromptPos(), _pane.getCaretPosition());", "-    _pane.setCaretPosition(1);", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _pane.setCaretPosition(1); } });", "-    assertEquals(\"Caret is at the end after output inserted.\",", "-                 _doc.getPromptPos(),", "-                 _pane.getCaretPosition());", "+    Utilities.clearEventQueue();", "+    assertEquals(\"Caret is at the end after output inserted.\", _doc.getPromptPos(), _pane.getCaretPosition());"]}], "num": 10417}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a22011c619172ecb6940e87fd31d14f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6d658bf853b3f37ff988ff65f87624", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "7159df222d88dee270188fe2cbffe74bb173d159", "commitAfterChange": "c73227da8024bfd14e7a2df3af6435d7a78133b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-    // The documents should not be activated upon creation", "+    // The model already has an active empty document", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc1));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc1));", "+    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc2));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc2));", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc3));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc3));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc4));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc4));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc5));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc5));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertFalse(\"The document should not start out in the cache\", _cache.isDDocInCache(doc6));", "-    assertEquals(\"There should be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertTrue(\"The document should start out in the cache\", _cache.isDDocInCache(doc6));", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    assertEquals(\"There should still be 0 documents in the cache\", 0, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae74eeee8d69994b6f86571116c866a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BidirectionalHashMapTest.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testSearch()", "signatureAfterChange": "      public void testSearch()", "diff": ["+  ", "+    ", "+    Double[] dbls = new Double[]{dbl1, dbl2, dbl3};", "+    ", "+    Integer[] ints = new Integer[]{int1, int2, int3};", "+     ", "+    ", "+    assertTrue(\"Empty BHM is empty\", iTod.isEmpty());", "+    assertTrue(\"Empty BHM has no values\", iTod.values().isEmpty());", "-    assertFalse(\"Should not find non-existant key\", iTod.containsKey(int1));", "-    assertFalse(\"Should not find non-existant key\", iTod.containsKey(int2));", "-    assertFalse(\"Should not find non-existant key\", iTod.containsKey(int3));", "+    assertFalse(\"Should not find non-existent key\", iTod.containsKey(int1));", "+    assertFalse(\"Should not find non-existent key\", iTod.containsKey(int2));", "+    assertFalse(\"Should not find non-existent key\", iTod.containsKey(int3));", "-    assertFalse(\"Should not find non-existant value\", iTod.containsValue(dbl1));", "-    assertFalse(\"Should not find non-existant value\", iTod.containsValue(dbl2));", "-    assertFalse(\"Should not find non-existant value\", iTod.containsValue(dbl3));", "+    assertFalse(\"Should not find non-existent value\", iTod.containsValue(dbl1));", "+    assertFalse(\"Should not find non-existent value\", iTod.containsValue(dbl2));", "+    assertFalse(\"Should not find non-existent value\", iTod.containsValue(dbl3));", "-", "+    ", "+    assertFalse(\"NonEmpty BHM is not empty\", iTod.isEmpty());", "+    assertFalse(\"NonEmpty BHM has some values\", iTod.values().isEmpty());", "+    ", "-    assertFalse(\"Should not find non-existant key\", iTod.containsKey(int2));", "-    assertFalse(\"Should not find non-existant key\", iTod.containsKey(int3));", "+    assertFalse(\"Should not find non-existent key\", iTod.containsKey(int2));", "+    assertFalse(\"Should not find non-existent key\", iTod.containsKey(int3));", "-    assertFalse(\"Should not find non-existant value\", iTod.containsValue(dbl2));", "-    assertFalse(\"Should not find non-existant value\", iTod.containsValue(dbl3));", "+    assertFalse(\"Should not find non-existent value\", iTod.containsValue(dbl2));", "+    assertFalse(\"Should not find non-existent value\", iTod.containsValue(dbl3));", "-", "+    ", "+    Collection<Double> valsCol = iTod.values();", "+    ", "+    Object[] vals = iTod.valuesArray();", "+    Object[] colVals = valsCol.toArray();", "+    ", "+    // These collections are enumerated in any order", "+    ", "+    Arrays.sort(vals);", "+    Arrays.sort(colVals);", "+    ", "+    assertTrue(\"values() test\", Arrays.equals(vals, colVals));", "+    ", "+    assertTrue(\"values test\", Arrays.equals(dbls, vals));", "+               ", "-    iTod.removeValue(key);", "+    it.remove();"]}], "num": 1788}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38cace8c64b16595b9005a2c8e1cc5d7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0273123b3dc0b96354728edbd2fd07b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "commitAfterChange": "c0463418af643463955237ff1428c0079e36defe", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private JPanel _makeClassesPanel()", "signatureAfterChange": "   private JPanel _makeClassesPanel()", "diff": ["-        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected());", "+        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected() || _jarAll.isSelected());", "+    //Custom Manifest", "+    _editManifest = new JButton(new AbstractAction(\"Edit Manifest\") {", "+      public void actionPerformed(ActionEvent e){", "+        _editManifest();", "+      }", "+    });", "+    _customManifest = new JCheckBox(new AbstractAction(\"Custom Manifest\") {", "+      public void actionPerformed(ActionEvent e){", "+        _toggleCustomManifest();", "+      }", "+    });", "+    gridBagConstraints = new GridBagConstraints();", "+    gridBagConstraints.anchor = GridBagConstraints.WEST;", "+    gridBagConstraints.gridy = 2;", "+    addclasses.add(_customManifest, gridBagConstraints);", "+    ", "+    gridBagConstraints = new GridBagConstraints();", "+    gridBagConstraints.gridx = 0;", "+    gridBagConstraints.gridy = 3;", "+    gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;", "+    gridBagConstraints.insets = new Insets(0, 20, 0, 0);", "+    addclasses.add(_editManifest, gridBagConstraints);", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e99dbf1b3e24a7277bc050e5c121e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "a68a174a7bf4d6a30e03be7e23d160527cbf341e", "commitAfterChange": "7d7f71637ac82cabd526a44e6c766574f76fc311", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "signatureAfterChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "diff": ["+", "+", "+", "-    uiBox.add(new JPanel(),BorderLayout.CENTER);", "+", "+    JPanel midPanel = new JPanel();", "+ //nextErrorButton.setEnabled(false);", "+    nextErrorButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        _errorListPane.nextError();", "+//  prevErrorButton.setEnabled(_errorListPane.hasPrevError());", "+//  nextErrorButton.setEnabled(_errorListPane.hasNextError());", "+      }", "+    });", "+ //prevErrorButton.setEnabled(false);", "+    prevErrorButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        _errorListPane.prevError();", "+//  prevErrorButton.setEnabled(_errorListPane.hasPrevError());", "+//  nextErrorButton.setEnabled(_errorListPane.hasNextError());", "+      }", "+    });", "+    midPanel.setLayout(new FlowLayout());", "+    midPanel.add(prevErrorButton);", "+    midPanel.add(nextErrorButton);", "+", "+    uiBox.add(midPanel,BorderLayout.CENTER);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399f05bc7274aaa691b3a3384c918ecd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "commitAfterChange": "2c8ce62ae485e784b2bec820cb7bf72ad52ae36f", "methodNumberBeforeChange": 798, "methodNumberAfterChange": 798, "signatureBeforeChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "diff": ["+        final WindowAdapter regainFrontAfterNative = new WindowAdapter() {", "+          public void windowActivated(WindowEvent we) {", "+            // remove from the three windows this is installed on", "+            MainFrame.this.removeWindowListener(this);", "+            _tabbedPanesFrame.removeWindowListener(this);", "+            _debugFrame.removeWindowListener(this);", "+            // if the window that lost focus because of a native application window", "+            // is still the modal window adapter owner, put it back in front", "+            if (_modalWindowAdapterOwner==w) {", "+              w.toFront();", "+              w.requestFocus();", "+              toFrontAction.run(we);", "+            }", "+          }", "+        };", "-          if (opposite==null) { return; /* probably a native application window, not DrJava */ }", "+          if (opposite==null) {", "+            // Probably a native application window, not DrJava.", "+            // When the user switches back to DrJava, the user may select", "+            // a different window to be on top, but we want w to be on top", "+            // install a listener on MainFrame, the detached panes window, and the", "+            // detached debugger that puts w back on top if one of those windows", "+            // gets selected and w is still the modal window adapter owner.", "+            // This isn't perfect, since the user may select a window other than", "+            // those three, but it is good enough in most cases since those three", "+            // windows are the biggest windows.", "+            MainFrame.this.addWindowListener(regainFrontAfterNative);", "+            _tabbedPanesFrame.addWindowListener(regainFrontAfterNative);", "+            _debugFrame.addWindowListener(regainFrontAfterNative);", "+            return;", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5acf72b1f2a8c5f8c5d3efc01a4ac94b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "d441fefd8eab1aff683e8a16a46c50a8f6994932", "commitAfterChange": "55ffd5d461fa009444744f2527631191c6f9decc", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testSystemIn()", "signatureAfterChange": "      public void testSystemIn()", "diff": ["-//    System.err.println(\"_controller = \" + _controller);", "+    ", "+    final CompletionMonitor completionMonitor = new CompletionMonitor();", "+    ", "+    _controller.addConsoleStateListener(new InteractionsController.ConsoleStateListener() {", "+      public void consoleInputStarted(InteractionsController c) {", "+        completionMonitor.set();", "+      }     ", "+      public void consoleInputCompleted(String text, InteractionsController c) {", "+        // do not assert the text here since it won't be called from the testing thread.", "+        // It is called on the following thread that calls getConsoleInput()", "+      }", "+    });", "-//        System.err.println(\"System.in thread running\");", "-        synchronized(bufLock) { ", "-          String s = _controller._popupConsole.getConsoleInput();", "-//          System.err.println(\"s = \" + s);", "-          buf.append(s); ", "+        synchronized(bufLock) {", "+          String s = _controller.getInputListener().getConsoleInput();", "+          buf.append(s);", "-//    System.err.println(\"Waiting For ConsoleReady\");", "+    // Wait for console input to begin", "+    completionMonitor.waitOne();", "+        ", "+    _controller.insertConsoleText(\"test-text\");", "+    _controller.interruptConsoleInput();", "-    try { _controller._popupConsole.waitForConsoleReady(); }", "-    catch (InterruptedException ie) { }", "-    ", "-    assertTrue(\"Console should be ready\", _controller._popupConsole.isConsoleReady());", "-    ", "-    _controller._popupConsole.insertConsoleText(\"test-text\");", "-    _controller._popupConsole.interruptConsole();", "+    // Make sure the buffer 'buf' is updated"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a827d13dd29f3f149231135f774135", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/KeyStrokeOptionComponent.java", "commitBeforeChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "commitAfterChange": "1ea7874872b93b44444c8711a298524cf05a221e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, Frame parent)", "signatureAfterChange": "    public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, final Frame parent)", "diff": ["-  public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, Frame parent) {", "+", "+  public KeyStrokeOptionComponent (KeyStrokeOption opt, String text, final Frame parent) {", "-    _jtf = new JTextField();", "-    _jtf.setText(_option.format(DrJava.CONFIG.getSetting(_option)));", "+  ", "+    _ks = DrJava.CONFIG.getSetting(opt);", "+    _configKs = _ks;", "+    ", "+    _jb = new JButton();", "+    _jb.setBackground(Color.white);", "+    _jb.setText(_option.format(_ks));", "+    _jb.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent ae) {", "+", "+        if (_getKeyDialog == null) {", "+          _getKeyDialog =    ", "+            new GetKeyDialog(parent, ", "+                             \"Specify Shortcut\", ", "+                             true);", "+        }", "+", "+        _getKeyDialog.promptKey(KeyStrokeOptionComponent.this);", "+      }", "+    });", "+   ", "-    this.add(_label);//, BorderLayout.WEST);", "-    this.add(_jtf);//, BorderLayout.CENTER);", "+    this.add(_label);", "+    this.add(_jb);", "+    _keyToKSOC.put(_ks, this);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b65799e3436cfe1a293f24cc0a06bd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain() throws ClassNameNotFoundException, IOException", "diff": ["-      try {", "-        // First, get the class name to use.  This relies on Java's convention of", "-        // one top-level class per file.", "-        String className = getDocument().getQualifiedClassName();", "-        ", "-        // Then clear the current interaction and replace it with a \"java X\" line.", "-        InteractionsDocument iDoc = _interactionsModel.getDocument();", "-        ", "-        synchronized(_interpreterControl) {  // why is this synchronization here?", "+      ", "+      // Get the class name for this document, the first top level class in the document.", "+      final String className = getDocument().getQualifiedClassName();", "+      final InteractionsDocument iDoc = _interactionsModel.getDocument();", "+      if (! checkIfClassFileInSync()) {", "+        iDoc.insertBeforeLastPrompt(DOCUMENT_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "+        return;", "+      }", "+      ", "+      _runMain = new DummyGlobalModelListener() {", "+        public void interpreterReady(File wd) {", "+          ", "+          // Load the proper text into the interactions document", "-          if (!checkIfClassFileInSync()) {", "-            iDoc.insertBeforeLastPrompt(DOCUMENT_OUT_OF_SYNC_MSG, InteractionsDocument.ERROR_STYLE);", "-          }", "+          ", "+", "-", "-          // Notify listeners that the file is about to be run.", "-          _notifier.runStarted(this);", "-", "-          // Finally, execute the new interaction.", "+          ", "+          // Finally, execute the new interaction and record that event", "+          _notifier.runStarted(ConcreteOpenDefDoc.this);", "+          SwingUtilities.invokeLater(new Runnable() {", "+            public void run() { ", "+              /* Remove _runMain listener AFTER this interpreterReady listener completes and DROPS it readLock on", "+               * _interactionsModel._notifier. */", "+              _interactionsModel.removeListener(_runMain);", "+            }", "+          });", "+          ", "-      }", "-      catch (EditDocumentException e) {", "-        // This was thrown by insertText - and shouldn't have happened.", "-        throw new UnexpectedException(e);", "-      }", "+      };", "+      ", "+      _interactionsModel.addListener(_runMain);", "+      ", "+      // Reset interactions to the soure root for this document; class will be executed when new interpreter is ready", "+      resetInteractions(getSourceRoot());", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9e57c0c8acbbaa92bd8f2762f31a284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1f1e1c194ec79b5577db174af86a812206a9ebf6", "commitAfterChange": "8470bac42027a288eff50252d965c363d15d41dc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-      /**", "+      i++;", "+      //DrJava.consoleOut().println(\"MainJVM: iteration \" + i);", "+      ", "-", "-      _startupInProgress = true;", "-      */", "+      _startupInProgress = true;   ", "+      ", "+      // _model may be null if we're running a test on this", "+      if (_model != null)", "+        _model.interactionsResetting();", "+      ", "-        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm\");", "+        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm \" +i);", "-        _restartThread = new RestartThread() {", "+        _restartThread = new RestartThread(i) {", "-              //                            status);", "-              if (_shouldReset) {", "-                //DrJava.consoleOut().println(\"I should reset\");", "-                restartInterpreterJVM();", "-                //if (!_isResetting()) {", "-                replCalledSystemExit(status);", "-                //}", "+              //                            status + \", i = \" + j);", "+              synchronized(MainJVM.this) {", "+                if (_shouldReset) {", "+                  //DrJava.consoleOut().println(\"I should reset (thread \" + j + \")\");", "+                  boolean currentlyStarting = _startupInProgress;", "+                  //DrJava.consoleOut().println(\"Currently starting for \" + j + \" = \" + currentlyStarting);", "+                  restartInterpreterJVM();", "+                  if (!currentlyStarting) {", "+                    //DrJava.consoleOut().println(\"Not starting up, so display message, thread \" + j);", "+                    replCalledSystemExit(status);", "+                  }", "+                }", "+              //DrJava.consoleOut().println(\"Thread finished: \" + j);", "-", "-        //DrJava.consoleOut().println(\"In MainJVM: starting thread\");", "+        // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "+        _timerThread = new RestartThread(i) {", "+          public void run() {", "+            _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "+              int count = 0;", "+              public void actionPerformed(ActionEvent e) {", "+                synchronized(MainJVM.this) {", "+                  if (!_shouldReset) {", "+                    _stopTimerThread();", "+                    return;", "+                  }", "+                  if (count < 2) {", "+                    _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "+                    restartInterpreterJVM();", "+                    count++;", "+                    return;", "+                  }", "+                  _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                  _stopTimerThread();", "+                }", "+              }", "+            });               ", "+            _restartTimer.setRepeats(true);", "+            _restartTimer.start();   ", "+          }", "+        };", "+        //DrJava.consoleOut().println(\"In MainJVM: starting thread \" + i);", "+        _timerThread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfcaabb4352412eaf17411bdd852a14c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "88b78fb542b0969283ae161ecd8928b9b81244e4", "commitAfterChange": "28edcfb1557b7084eced62028c2fe7429bdf3ed1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void createPopupMenu()", "signatureAfterChange": "   private void createPopupMenu()", "diff": ["-    if (_mainFrame.getModel().getDebugger() != null) {", "+    JMenuItem commentLinesItem = new JMenuItem(\"Comment Out Line(s)\");", "+    commentLinesItem.addActionListener ( new AbstractAction() {", "+      public void actionPerformed( ActionEvent ae) {", "+        _commentLines();", "+      }", "+    });", "+    _popMenu.add(commentLinesItem);", "+    ", "+    JMenuItem unCommentLinesItem = new JMenuItem(\"Uncomment Line(s)\");", "+    unCommentLinesItem.addActionListener ( new AbstractAction() {", "+      public void actionPerformed( ActionEvent ae) {", "+        _unCommentLines();", "+      }", "+    });", "+    _popMenu.add(unCommentLinesItem);", "+    ", "+    if (_mainFrame.getModel().getDebugger().isAvailable()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1f49059f153662976add8da331cd60c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "0a7bf024d048ea8c858680b0ac23e24e5ae6fe7d", "commitAfterChange": "362905f63dbb4da65eed4f6ca60b6ce9eca3dd7d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private void _setupButtonPanel()", "signatureAfterChange": "   private void _setupButtonPanel()", "diff": ["-    closeButtonPanel.add(_closeButton, BorderLayout.NORTH);    ", "-    for (JComponent b: buts) { mainButtons.add(b); }", "-    mainButtons.add(emptyPanel);", "+    closeButtonPanel.add(_closeButton, BorderLayout.NORTH);", "+    ", "+    if (_hasNextPrevButtons) {", "+      _prevButton = new JButton(new AbstractAction(\"Previous\") {", "+        public void actionPerformed(ActionEvent ae) {", "+          goToPreviousRegion();", "+        }", "+      });", "+      _nextButton = new JButton(new AbstractAction(\"Next\") {", "+        public void actionPerformed(ActionEvent ae) {", "+          goToNextRegion();", "+        }", "+      });", "+      mainButtons.add(_prevButton);", "+      gbLayout.setConstraints(_prevButton, c);", "+      mainButtons.add(_nextButton);", "+      gbLayout.setConstraints(_nextButton, c);", "+      updateNextPreviousRegionButtons(null);", "+    }", "+    for (JComponent b: buts) { mainButtons.add(b); }", "+    mainButtons.add(emptyPanel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f37000e539f19997bcc95f51369af9c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "acb6486cf73ee6fa26fd3913d48fe9f46d7610e4", "commitAfterChange": "c0463418af643463955237ff1428c0079e36defe", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private JPanel _makePanel()", "signatureAfterChange": "   private JPanel _makePanel()", "diff": ["-        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected());", "+        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected() || _jarAll.isSelected());", "+    ", "+    // Jar All", "+    _jarAll = new JCheckBox(new AbstractAction(\"Jar All files\") {", "+      public void actionPerformed(ActionEvent e){", "+        _okButton.setEnabled(_jarSources.isSelected() || _jarClasses.isSelected() || _jarAll.isSelected());", "+      }", "+    });", "+    ", "+    c.weightx = 0.0;", "+    c.gridwidth = 1;", "+    c.insets = labelInsets;", "+    gridbag.setConstraints(_jarAll, c);", "+    panel.add(_jarAll);"]}], "num": 25408}
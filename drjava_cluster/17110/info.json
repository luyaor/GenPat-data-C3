{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39ac64d979a1daf21702325c234c252a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111c9adffb4996280004905f46e8e6aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r   \r   public void getNodePath1() throws Exception", "signatureAfterChange": "      public void getNodePath1() throws Exception", "diff": ["-  \r", "-  public void getNodePath1() throws Exception {\r", "-    XMLConfig xc = new XMLConfig(new StringReader(\r", "-                                                  \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><concutest>\\n\"\r", "-                                                    +\"  <threadcheck:def>\\n\"\r", "-                                                    +\"    <invariant>\\n\"\r", "-                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass1\\\"/>\\n\"\r", "-                                                    +\"    </invariant>\\n\"\r", "-                                                    +\"    <class name=\\\"sample.threadCheck.ThreadCheckSample4\\\"/>\\n\"\r", "-                                                    +\"  </threadcheck:def>\\n\"\r", "-                                                    +\"  <threadcheck:def>\\n\"\r", "-                                                    +\"    <invariant>\\n\"\r", "-                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass-method1\\\"/>\\n\"\r", "-                                                    +\"    </invariant>\\n\"\r", "-                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run()V\\\"/>\\n\"\r", "-                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run2()V\\\"/>\\n\"\r", "-                                                    +\"  </threadcheck:def>\\n\"\r", "-                                                    +\"</concutest>\"));\r", "-    assertEquals(\"Path of null is wrong\", \"\", XMLConfig.getNodePath(null));\r", "-    \r", "-    List<Node> roots = xc.getNodes(\"concutest\");\r", "-    Assert.assertEquals(1, roots.size());\r", "-    assertEquals(\"Path of \"+roots.get(0).getNodeName()+\" is wrong\", \"concutest\", XMLConfig.getNodePath(roots.get(0)));\r", "-    \r", "-    List<Node> defs = xc.getNodes(\"concutest/threadcheck:def\");\r", "-    Assert.assertEquals(2, defs.size());\r", "-    \r", "-    for(Node def: defs) {\r", "-      assertEquals(\"Path of \"+def.getNodeName()+\" is wrong\", \"concutest/threadcheck:def\", XMLConfig.getNodePath(def));\r", "-      List<Node> invs = xc.getNodes(\"invariant\", def);\r", "-      Assert.assertEquals(1, invs.size());\r", "-      Node inv = invs.get(0);\r", "-      assertEquals(\"Path of \"+inv.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant\", XMLConfig.getNodePath(inv));\r", "-      List<Node> annots = xc.getNodes(\"*\", inv);\r", "-      Assert.assertEquals(1, annots.size());\r", "-      assertEquals(\"Path of \"+annots.get(0).getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant/name\", XMLConfig.getNodePath(annots.get(0)));\r", "-      List<Node> classes = xc.getNodes(\"class\", def);\r", "-      List<Node> methods = xc.getNodes(\"method\", def);\r", "-      Assert.assertTrue(\"There must be at least one class or method per definition\", (classes.size()+methods.size()>0));\r", "-      List<Node> all = xc.getNodes(\"*\", def);\r", "-      Assert.assertEquals(0, all.size()-invs.size()-classes.size()-methods.size());\r", "-      for(Node target: classes) {\r", "-        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/class\", XMLConfig.getNodePath(target));\r", "-      }\r", "-      for(Node target: methods) {\r", "-        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/method\", XMLConfig.getNodePath(target));\r", "-      }\r", "-    }\r", "-  }\r", "+  ", "+  public void getNodePath1() throws Exception {", "+    XMLConfig xc = new XMLConfig(new StringReader(", "+                                                  \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><concutest>\\n\"", "+                                                    +\"  <threadcheck:def>\\n\"", "+                                                    +\"    <invariant>\\n\"", "+                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass1\\\"/>\\n\"", "+                                                    +\"    </invariant>\\n\"", "+                                                    +\"    <class name=\\\"sample.threadCheck.ThreadCheckSample4\\\"/>\\n\"", "+                                                    +\"  </threadcheck:def>\\n\"", "+                                                    +\"  <threadcheck:def>\\n\"", "+                                                    +\"    <invariant>\\n\"", "+                                                    +\"      <name type=\\\"only\\\" value=\\\"childclass-method1\\\"/>\\n\"", "+                                                    +\"    </invariant>\\n\"", "+                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run()V\\\"/>\\n\"", "+                                                    +\"    <method name=\\\"sample.threadCheck.ThreadCheckSample4\\\" sig=\\\"run2()V\\\"/>\\n\"", "+                                                    +\"  </threadcheck:def>\\n\"", "+                                                    +\"</concutest>\"));", "+    assertEquals(\"Path of null is wrong\", \"\", XMLConfig.getNodePath(null));", "+    ", "+    List<Node> roots = xc.getNodes(\"concutest\");", "+    Assert.assertEquals(1, roots.size());", "+    assertEquals(\"Path of \"+roots.get(0).getNodeName()+\" is wrong\", \"concutest\", XMLConfig.getNodePath(roots.get(0)));", "+    ", "+    List<Node> defs = xc.getNodes(\"concutest/threadcheck:def\");", "+    Assert.assertEquals(2, defs.size());", "+    ", "+    for(Node def: defs) {", "+      assertEquals(\"Path of \"+def.getNodeName()+\" is wrong\", \"concutest/threadcheck:def\", XMLConfig.getNodePath(def));", "+      List<Node> invs = xc.getNodes(\"invariant\", def);", "+      Assert.assertEquals(1, invs.size());", "+      Node inv = invs.get(0);", "+      assertEquals(\"Path of \"+inv.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant\", XMLConfig.getNodePath(inv));", "+      List<Node> annots = xc.getNodes(\"*\", inv);", "+      Assert.assertEquals(1, annots.size());", "+      assertEquals(\"Path of \"+annots.get(0).getNodeName()+\" is wrong\", \"concutest/threadcheck:def/invariant/name\", XMLConfig.getNodePath(annots.get(0)));", "+      List<Node> classes = xc.getNodes(\"class\", def);", "+      List<Node> methods = xc.getNodes(\"method\", def);", "+      Assert.assertTrue(\"There must be at least one class or method per definition\", (classes.size()+methods.size()>0));", "+      List<Node> all = xc.getNodes(\"*\", def);", "+      Assert.assertEquals(0, all.size()-invs.size()-classes.size()-methods.size());", "+      for(Node target: classes) {", "+        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/class\", XMLConfig.getNodePath(target));", "+      }", "+      for(Node target: methods) {", "+        assertEquals(\"Path of \"+target.getNodeName()+\" is wrong\", \"concutest/threadcheck:def/method\", XMLConfig.getNodePath(target));", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a6a35f6c32b40fb9e6d94b44f2c2727", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r   public void testNodeStarAttrsStar() throws Exception", "signatureAfterChange": "   public void testNodeStarAttrsStar() throws Exception", "diff": ["-  }\r", "-  public void testNodeStarAttrsStar() throws Exception {\r", "-    XMLConfig xc = new XMLConfig(new StringReader(\r", "-                                                  \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><foo a=\\\"foo.a\\\">\\n\"\r", "-                                                    + \"  <bar flubb=\\\"mno\\\">abc</bar>\\n\"\r", "-                                                    + \"  <fum fee=\\\"xyz\\\" fuz=\\\"zzz\\\" fiz=\\\"aaa\\\">def</fum>\\n\"\r", "-                                                    + \"</foo>\"));\r", "-    List<String> r = xc.getMultiple(\"*.*\");\r", "-    assertEquals(1, r.size());\r", "-    assertEquals(\"foo.a\", r.get(0));\r", "-    \r", "-    r = xc.getMultiple(\"foo/*.*\");\r", "-    assertEquals(4, r.size());\r", "-    assertEquals(\"mno\", r.get(0));\r", "-    assertEquals(\"xyz\", r.get(1));\r", "-    assertEquals(\"aaa\", r.get(2));\r", "-    assertEquals(\"zzz\", r.get(3));\r", "-  }\r", "+  }", "+  public void testNodeStarAttrsStar() throws Exception {", "+    XMLConfig xc = new XMLConfig(new StringReader(", "+                                                  \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?><foo a=\\\"foo.a\\\">\\n\"", "+                                                    + \"  <bar flubb=\\\"mno\\\">abc</bar>\\n\"", "+                                                    + \"  <fum fee=\\\"xyz\\\" fuz=\\\"zzz\\\" fiz=\\\"aaa\\\">def</fum>\\n\"", "+                                                    + \"</foo>\"));", "+    List<String> r = xc.getMultiple(\"*.*\");", "+    assertEquals(1, r.size());", "+    assertEquals(\"foo.a\", r.get(0));", "+    ", "+    r = xc.getMultiple(\"foo/*.*\");", "+    assertEquals(4, r.size());", "+    assertEquals(\"mno\", r.get(0));", "+    assertEquals(\"xyz\", r.get(1));", "+    assertEquals(\"aaa\", r.get(2));", "+    assertEquals(\"zzz\", r.get(3));", "+  }"]}], "num": 17110}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c829a469f69af75a9c67a1dda475d43c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "021f9dcb96407491224aa89749bf3173", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testOldDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-  public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException {", "-    // The documents should not be activated upon creation ", "-    assertEquals(\"There should be 4 documents in the cache\", 0, _cache.getNumInCache());", "-    // Activate all documents and make sure that the right ones get kicked out", "-    // Front of LRU -> a b c d | e f <- out of LRU", "+  ", "+  public void testOldDocumentsInAndOutOfTheCache() throws BadLocationException, IOException {", "+    ", "+    File file1 = tempFile(1);", "+    File file2 = tempFile(2);", "+    File file3 = tempFile(3);", "+    File file4 = tempFile(4);", "+    File file5 = tempFile(5);", "+    File file6 = tempFile(6);", "+    ", "+    // opening a document makes it active", "+    OpenDefinitionsDocument doc1 = openFile(file1);", "+    assertEquals(\"There should be 1 document in the cache\", 1, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc2 = openFile(file2);", "+    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc3 = openFile(file3);", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc4 = openFile(file4);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc5 = openFile(file5);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc6 = openFile(file6);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    ", "+    assertEquals(\"Wrong Cache Size\", 4, _cache.getCacheSize());", "+", "+    // cache = [3 4 5 6]", "+    // This tests that isModifiedSinceSave does not cause the document to load into the cache,", "+    // so the two that should have been kicked out, 1 & 2 should not be loaded uppon calling isModified.", "+", "+    assertFalse(\"Document 1 shouldn't be modified\", doc1.isModifiedSinceSave());", "+    assertFalse(\"Document 2 shouldn't be modified\", doc2.isModifiedSinceSave());", "+    assertFalse(\"Document 3 shouldn't be modified\", doc3.isModifiedSinceSave());", "+    assertFalse(\"Document 4 shouldn't be modified\", doc4.isModifiedSinceSave());", "+    assertFalse(\"Document 5 shouldn't be modified\", doc5.isModifiedSinceSave());", "+    assertFalse(\"Document 6 shouldn't be modified\", doc6.isModifiedSinceSave());", "+    ", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    ", "-    assertTrue(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "-    assertTrue(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "-    assertTrue(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "-        ", "-    doc1.getLength(); // 1 6 5 4 | 3 2", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    assertTrue(\"Document 6 should be ready\", _adapterTable.get(doc6).isReady());", "+    ", "+    ", "+    // Rectivate all documents and make sure that the right ones get kicked out", "+ ", "+    doc1.getLength();", "+    doc2.getLength();", "+    doc3.getLength();", "+    doc4.getLength();", "+    ", "+   // cache = [1 2 3 4]", "+    ", "+    assertTrue(\"Document 1 should be ready\", _adapterTable.get(doc1).isReady());", "+    assertTrue(\"Document 2 should be ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    ", "+    doc5.getLength();", "+    // cache -> 2 3 4 5", "+    assertFalse(\"Document 1 is not longer ready\", _adapterTable.get(doc1).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc6.getLength();", "+    // cache -> 3 4 5 6", "+    assertFalse(\"Document 2 is not longer ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 6 should be ready\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc1.getLength(); // 4 5 6 1", "-    assertEquals(\"There should still be 1 documents in the cache\", 4, _cache.getNumInCache()); ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache()); ", "-    doc2.getLength(); // 2 1 6 5 | 4 3", "+    doc2.getLength(); // 5 6 1 2", "-    assertEquals(\"There should still be 2 documents in the cache\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    doc3.getLength(); // 3 2 1 6 | 5 4", "+    doc3.getLength(); // 6 1 2 3", "-    assertEquals(\"There should still be 3 documents in the cache\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    doc4.getLength(); // 4 3 2 1 | 6 5", "+    doc4.getLength(); // 1 2 3 4", "-    doc5.getLength(); // 5 4 3 2 | 1 6", "+    doc5.getLength(); // 2 3 4 5", "-    doc6.getLength(); // 6 5 4 3 | 2 1", "+    doc6.getLength(); // 3 4 5 6", "-    doc4.getLength(); // 4 6 5 3 | 2 1", "+    doc4.getLength(); // 3 4 5 6", "-    doc5.getLength(); // 5 4 6 3 | 2 1", "+    doc5.getLength(); // 3 4 5 6", "-    doc3.getLength(); // 3 5 4 6 | 2 1", "+    doc3.getLength(); // 3 4 5 6", "-    doc4.getLength(); // 4 3 5 6 | 2 1", "+    doc4.getLength(); // 3 4 5 6", "-    _cache.setCacheSize(5); // 4 3 5 6 | 2 1 ", "+    _cache.setCacheSize(5); // 3 4 5 6", "-    doc2.getLength(); // 2 4 3 5 6 | 1", "+    doc2.getLength(); // 3 4 5 6 2", "-    _cache.setCacheSize(3); // 2 4 3 | 5 6 1", "+    _cache.setCacheSize(3); // 5 6 2", "-    assertTrue(\"The document 4 should be in the cache\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"The document 3 should be in the cache\", _adapterTable.get(doc3).isReady());", "-    assertFalse(\"The document 5 should now be out of the cache\", _adapterTable.get(doc5).isReady());", "-    assertFalse(\"The document 6 should now be out of the cache\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"The document 6 should be in the cache\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"The document 5 should be in the cache\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"The document 3 should now be out of the cache\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"The document 4 should now be out of the cache\", _adapterTable.get(doc4).isReady());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306c10f4f9b334186bc19c61bb31135c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlusTest.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testEmptySuffix() throws BadLocationException", "signatureAfterChange": "       public void testSpaceSuffix() throws BadLocationException", "diff": ["+  public void testSpaceSuffix() throws BadLocationException", "+  {", "+    _action = new ActionBracePlus(\" \");", "-    public void testEmptySuffix() throws BadLocationException", "-    {", "-\t_action = new ActionBracePlus(\"\");", "-\t/*", "-\t// (1) ", "+    // (2) ", "+    ", "+    _text = ", "+     \"var = method(arg1,\\n\"+", "+     \"  arg2, arg3) + 4;\";", "-\t_text = ", "-\t    \"var = method(arg1,\\n\"+", "-\t    \"  arg2, arg3) + 4;\";", "-", "-\t_aligned = ", "-\t    \"var = method(arg1,\\n\"+", "-\t    \"             arg2, arg3) + 4;\";", "-\t", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 18); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 20); // Aligns second line.", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (2) ", "-", "-\t_text = ", "-\t    \"{ /* block1* /\\n\"+", "-\t    \"    { /* block2* /\\n\"+", "-\t    \"        { /* block3* / }\\n\"+", "-\t    \"}\\n\"+", "-\t    \"}\";", "-\t_aligned = ", "-\t    \"{ /* block1* /\\n\"+", "-\t    \"    { /* block2* /\\n\"+", "-\t    \"        { /* block3* / }\\n\"+", "-\t    \"    }\\n\"+", "-\t    \"}\";", "-", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 18); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 34); // Aligns fourth line.", "-\tassertEquals(\"Line aligned to open brace.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open brace.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (3) ", "+    _aligned = ", "+     \"var = method(arg1,\\n\"+", "+     \"             arg2, arg3) + 4;\";", "+ ", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 18); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 20); // Aligns second line.", "+    assertEquals(\"Line aligned to open paren.\", _aligned.length(), _doc.getLength());", "+    assertEquals(\"Line aligned to open paren.\", _aligned, _doc.getText(0, _doc.getLength()));", "+    ", "+    // (3) ", "-\t_text =", "-\t    \"boolean method(\\n\"+", "-\t    \"int[] a, String b)\\n\"+", "-\t    \"{}\";", "-\t_aligned = ", "-\t    \"boolean method(\\n\"+", "-\t    \"               int[] a, String s)\\n\"+", "-\t    \"{}\";", "+    _text =", "+     \"boolean method(\\n\"+", "+     \"int[] a, String b)\\n\"+", "+     \"{}\";", "+    _aligned = ", "+     \"boolean method(\\n\"+", "+     \"               int[] a, String b)\\n\"+", "+     \"{}\";", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 15); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 16); // Aligns second line.", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (4) ", "-\t", "-\t_text =", "-\t    \"boolean method(\\n\"+", "-\t    \"int[] a,\\n\"+", "-\t    \"               String b)\\n\"+", "-\t    \"{}\";", "-\t_aligned = ", "-\t    \"boolean method(\\n\"+", "-\t    \"               int[] a,\\n\"+", "-\t    \"               String b)\\n\"+", "-\t    \"{}\";", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 15); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 16); // Aligns second line.", "+    assertEquals(\"Line aligned to open paren.\", _aligned.length(), _doc.getLength());", "+    assertEquals(\"Line aligned to open paren.\", _aligned, _doc.getText(0, _doc.getLength()));", "+ ", "+    // (4) ", "+ ", "+    _text =", "+     \"boolean method(\\n\"+", "+     \"int[] a,\\n\"+", "+     \"               String b)\\n\"+", "+     \"{}\";", "+    _aligned = ", "+     \"boolean method(\\n\"+", "+     \"               int[] a,\\n\"+", "+     \"               String b)\\n\"+", "+     \"{}\";", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 15); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 20); // Aligns second line.", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open paren.\", _doc.getText(0, _doc.getLength()), _aligned);", "-\t", "-\t// (5) ", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 15); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 20); // Aligns second line.", "+    assertEquals(\"Line aligned to open paren.\", _aligned, _doc.getText(0, _doc.getLength()));", "+ ", "+    // (5) ", "-\t_text =", "-\t    \"array[\\n\"+", "-\t    \"              new Listener() {\\n\"+", "-\t    \"           method() {\\n\"+", "-\t    \"           }\\n\"+", "-\t    \"      }]\";", "-\t_aligned =", "-\t    \"array[\\n\"+", "-\t    \"      new Listener() {\\n\"+", "-\t    \"           method() {\\n\"+", "-\t    \"           }\\n\"+", "-\t    \"      }]\";", "+    _text =", "+     \"array[\\n\"+", "+     \"              new Listener() {\\n\"+", "+     \"           method() {\\n\"+", "+     \"           }\\n\"+", "+     \"      }]\";", "+    _aligned =", "+     \"array[\\n\"+", "+     \"      new Listener() {\\n\"+", "+     \"           method() {\\n\"+", "+     \"           }\\n\"+", "+     \"      }]\";", "-\t_setDocText(_text);", "-\t_action.indentLine(_doc, 0); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 6); // Does nothing.", "-\tassertEquals(\"START has no brace.\", _doc.getLength(), _text.length());", "-\t_action.indentLine(_doc, 10); // Aligns second line.", "-\tassertEquals(\"Line aligned to open bracket.\", _doc.getLength(), _aligned.length());", "-\tassertEquals(\"Line aligned to open bracket.\", _doc.getText(0, _doc.getLength()), _aligned);\t", "-\t*/", "-    }", "+    _setDocText(_text);", "+    _action.indentLine(_doc, 0); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 6); // Does nothing.", "+    assertEquals(\"START has no brace.\", _text.length(), _doc.getLength());", "+    _action.indentLine(_doc, 10); // Aligns second line.", "+    assertEquals(\"Line aligned to open bracket.\", _aligned, _doc.getText(0, _doc.getLength())); ", "+", "+  }"]}], "num": 19101}
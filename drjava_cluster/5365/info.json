{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "721a3b9562fd9fcd1a0468818388a361", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51fc256949e23c665d520b59222f3c52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public Type visit(InnerAllocation node)", "signatureAfterChange": "   public Class<?> visit(InnerAllocation node)", "diff": ["-  public Type visit(InnerAllocation node) {", "+  public Class<?> visit(InnerAllocation node) {", "-    Type ec1 = node.getExpression().acceptVisitor(this);", "-    Class<?> ec = (Class<?>)ec1;", "+    Class<?> ec = node.getExpression().acceptVisitor(this);", "+", "-    Type c1 = type.acceptVisitor(this);", "-    Class<?> c = (Class<?>)c1;", "-    Type dc1 = InterpreterUtilities.getDeclaringClass(c);", "-    Class<?> dc = (Class<?>)dc1;", "-    ", "+    Class<?> c = type.acceptVisitor(this);", "+    Class<?> dc = InterpreterUtilities.getDeclaringClass(c);", "+", "-    ", "-    ", "+", "-        ", "+", "-          cargs[i++] = (Class<?>)it.next().acceptVisitor(this);", "+          cargs[i++] = it.next().acceptVisitor(this);", "-    try { cons = context.lookupConstructor(c, cargs); } ", "-    catch (Exception e) { throw new CatchedExceptionError(e, node); }", "-    ", "+    try {", "+      cons = context.lookupConstructor(c, cargs);", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+    }", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9667313d55701c2054daff5240082469", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public Class<?> visit(InnerAllocation node)", "signatureAfterChange": "   public Type visit(InnerAllocation node)", "diff": ["-  public Class<?> visit(InnerAllocation node) {", "+  public Type visit(InnerAllocation node) {", "-    Class<?> ec = node.getExpression().acceptVisitor(this);", "-", "+    Type ec1 = node.getExpression().acceptVisitor(this);", "+    Class<?> ec = (Class<?>)ec1;", "-    Class<?> c = type.acceptVisitor(this);", "-    Class<?> dc = InterpreterUtilities.getDeclaringClass(c);", "-", "+    Type c1 = type.acceptVisitor(this);", "+    Class<?> c = (Class<?>)c1;", "+    Type dc1 = InterpreterUtilities.getDeclaringClass(c);", "+    Class<?> dc = (Class<?>)dc1;", "+    ", "-", "+    ", "+    ", "-", "+        ", "-          cargs[i++] = it.next().acceptVisitor(this);", "+          cargs[i++] = (Class<?>)it.next().acceptVisitor(this);", "-    try {", "-      cons = context.lookupConstructor(c, cargs);", "-    } catch (Exception e) {", "-      throw new CatchedExceptionError(e, node);", "-    }", "-", "+    try { cons = context.lookupConstructor(c, cargs); } ", "+    catch (Exception e) { throw new CatchedExceptionError(e, node); }", "+    ", "-", "+    "]}], "num": 5365}
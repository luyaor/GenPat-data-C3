{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35b825dfe66629c505629ba4af973297", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ba7ffdc5e3dadacecc97b90ada9e813", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": "    private void _updateWatchpoints()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["-  private void _updateWatchpoints() {", "+  private void _updateWatches() {", "+      return;", "-    for (int i = 0; i < _watchpoints.size(); i++) {", "-      WatchpointData currWatchpoint = _watchpoints.elementAt(i);", "-      String currName = currWatchpoint.getName();", "-      Object currValue = currWatchpoint.getValue();", "+    for (int i = 0; i < _watches.size(); i++) {", "+      WatchData currWatch = _watches.elementAt(i);", "+      String currName = currWatch.getName();", "+      Object currValue = currWatch.getValue();", "-          currWatchpoint.setValue(obj);", "-          currWatchpoint.setType(obj.type());", "+          currWatch.setValue(obj);", "+          currWatch.setType(obj.type());", "-          currWatchpoint.setValue(null);", "-          currWatchpoint.setType(null);", "+          currWatch.setValue(null);", "+          currWatch.setType(null);", "-      }          ", "+      } ", "-            currWatchpoint.setValue(null);", "-            currWatchpoint.setType(null);", "+            currWatch.setValue(null);", "+            currWatch.setType(null);", "-            currWatchpoint.setValue(rt.getValue(field));", "+            currWatch.setValue(rt.getValue(field));", "-              currWatchpoint.setType(field.type());", "+              currWatch.setType(field.type());", "-              currWatchpoint.setType(null);", "+              currWatch.setType(null);", "-              currWatchpoint.setValue(outerFrame.thisObject().getValue(field));", "+              currWatch.setValue(outerFrame.thisObject().getValue(field));", "-                currWatchpoint.setType(field.type());", "+                currWatch.setType(field.type());", "-                currWatchpoint.setType(null);", "+                currWatch.setType(null);", "-              currWatchpoint.setValue(null);", "-              currWatchpoint.setType(null);", "+              currWatch.setValue(null);", "+              currWatch.setType(null);", "-        currWatchpoint.setValue(currFrame.getValue(localVar));", "+        currWatch.setValue(currFrame.getValue(localVar));", "-          currWatchpoint.setType(localVar.type());", "+          currWatch.setType(localVar.type());", "-          currWatchpoint.setType(null);", "+          currWatch.setType(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5f1905261e37d11ec6947f79fe2fa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 2, "signatureBeforeChange": "   @Override public Type visit(ReferenceTypeName node)", "signatureAfterChange": "      public Type check(Expression e, Type expected)", "diff": ["+  public Type check(Expression e, Type expected) {", "+    return e.acceptVisitor(new ExpressionVisitor(Option.some(expected)));", "+  }", "-   */", "-  @Override public Type visit(ReferenceTypeName node) {", "-    Iterator<? extends IdentifierToken> ids = node.getIdentifiers().iterator();", "-    String name = \"\";", "-    Type t = null;", "-    boolean first = true;", "-    while (t == null && ids.hasNext()) {", "-      if (!first) { name += \".\"; }", "-      first = false;", "-      name += ids.next().image();", "-      ", "-        DJClass c = context.getTopLevelClass(name, ts);", "-        if (c != null) { t = ts.makeClassType(c); }", "-        else {", "-          t = context.getTypeVariable(name, ts);", "-          if (t == null) {", "-            Type outer = context.typeContainingMemberClass(name, ts);", "-            if (outer != null) { t = ts.lookupClass(outer, name, IterUtil.<Type>empty()); }", "-          }", "-        }", "-      catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "-      catch (InvalidTargetException e) { throw new RuntimeException(\"context produced bad type\"); }", "-      catch (InvalidTypeArgumentException e) { throw new ExecutionError(\"type.argument.arity\", node); }", "-      catch (UnmatchedLookupException e) {", "-        if (e.matches() == 0) { throw new ExecutionError(\"undefined.name.noinfo\", node); }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "-    while (ids.hasNext()) {", "-      try { t = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty()); }", "-      catch (InvalidTargetException e) { throw new RuntimeException(\"lookup produced bad type\"); }", "-      catch (InvalidTypeArgumentException e) { throw new ExecutionError(\"type.argument.arity\", node); }", "-      catch (UnmatchedLookupException e) {", "-        if (e.matches() == 0) { throw new ExecutionError(\"undefined.name.noinfo\", node); }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "-      }", "-    }", "-    ", "-    if (t == null) { ", "-      setErrorStrings(node, node.getRepresentation());", "-      throw new ExecutionError(\"undefined.class\", node);", "-    }", "-    return setType(node, t);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9225dde44e26165e3a61385bd271f3ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ExecutorIncrementalTaskController.java", "commitBeforeChange": "ba3f1737bae917eb057a0651ee7d4f727a22cab6", "commitAfterChange": "d28ad1c0de8862f820b20e04c9a78fc9e0194666", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      protected void doStart()", "signatureAfterChange": "      protected void doStart()", "diff": ["-    if (_t == null) { // doStart may be called in the initial state or after a pause", "-      _executor.execute(new Runnable() {", "-        public void run() {", "-          _t = Thread.currentThread();", "-          started();", "-          try {", "-            while (!_task.isResolved()) {", "-              authorizeContinue();", "-              stepped(_task.step());", "-            }", "+    _executor.execute(new Runnable() {", "+      public void run() {", "+        _t = Thread.currentThread();", "+        started();", "+        try {", "+          while (!_task.isResolved()) {", "-            finishedCleanly(_task.value());", "+            stepped(_task.step());", "-          catch (WrappedException e) {", "-            if (e.getCause() instanceof InterruptedException) { stopped(); }", "-            else { finishedWithTaskException(e); }", "-          }", "-          catch (RuntimeException e) { finishedWithTaskException(e); }", "-          catch (InterruptedException e) { stopped(); }", "-          catch (Throwable t) { finishedWithImplementationException(new WrappedException(t)); }", "+          authorizeContinue();", "+          finishedCleanly(_task.value());", "-        private void authorizeContinue() throws InterruptedException {", "-          if (Thread.interrupted()) { throw new InterruptedException(); }", "-          if (!_continueMonitor.isSignaled()) {", "-            paused();", "-            _continueMonitor.ensureSignaled();", "-            started();", "-          }", "+        catch (WrappedException e) {", "+          if (e.getCause() instanceof InterruptedException) { stopped(); }", "+          else { finishedWithTaskException(e); }", "-      });", "-    }", "+        catch (RuntimeException e) { finishedWithTaskException(e); }", "+        catch (InterruptedException e) { stopped(); }", "+        catch (Throwable t) { finishedWithImplementationException(new WrappedException(t)); }", "+      }", "+      private void authorizeContinue() throws InterruptedException {", "+        if (Thread.interrupted()) { throw new InterruptedException(); }", "+        if (!_continueMonitor.isSignaled()) {", "+          paused();", "+          _continueMonitor.ensureSignaled();", "+          started();", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99c6cfaa7c4f0d3976472363dc7a562d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "35ca78e33b0503c2a6070986170dae99ba9dcb1a", "commitAfterChange": "6136e4c5753a47e4bcb40afa831b9c58e353fd69", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "      public FileGroupingState _makeFlatFileGroupingState()", "signatureAfterChange": "      protected FileGroupingState makeFlatFileGroupingState()", "diff": ["-  public FileGroupingState _makeFlatFileGroupingState() {", "-    return new FileGroupingState() {", "-      public File getBuildDirectory() { return null; }", "-      public boolean isProjectActive() { return false; }", "-      public boolean isInProjectPath(OpenDefinitionsDocument doc) { return false; }", "-      public File getProjectFile() { return null; }", "-      public void setBuildDirectory(File f) {", "-        // noop, this action is not applicable for flat file", "-      }", "-      public File[] getProjectFiles() { return null; }", "-      public boolean isProjectFile(File f) { return false; }", "-      public File getMainClass() { return null; }", "-      public void setJarMainClass(File f) {", "-        // noop, this action is not applicable for flat file", "-      }", "-      ", "-      public boolean isProjectChanged() { return false; }", "-      ", "-      public void setProjectChanged(boolean changed) { /* Do nothing  */  }", "-      ", "-      public boolean isAuxiliaryFile(File f) { return false; }", "-      ", "-      //throws UnsupportedOperationException", "-      public void compileAll() {", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not suport compilation\");", "-      }", "-      ", "-      //throws UnsupportedOperationException", "-      public void junitAll() { ", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not support unit tests\");", "-      }", "-      public void cleanBuildDirectory() throws FileMovedException, IOException {", "-        //System.out.println(\"not cleaning\");", "-      }", "-      /** Jars all the open files. ", "-       throws UnsupportedOperationException */", "-      public void jarAll() { ", "-        throw new UnsupportedOperationException(\"AbstractGlobalModel does not support jarring\");", "-      }", "-      ", "-      /* Flat grouping states have no extra entries. */", "-      public ClasspathVector getExtraClasspath() { return new ClasspathVector(); }", "-      ", "-      public void setExtraClasspath(ClasspathVector cp) {", "-        throw new UnsupportedOperationException(\"Flat grouping states do not have extra classpath entries.\");", "-      }", "-    };", "+  protected FileGroupingState makeFlatFileGroupingState() { return new FlatFileGroupingState(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b2da2131b42d3db8967e4edf0f861e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractSlaveJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public final void start(final MasterRemote master) throws RemoteException", "signatureAfterChange": "   public final synchronized void start(final MasterRemote master) throws RemoteException", "diff": ["+    */", "+  public final synchronized void start(final MasterRemote master) throws RemoteException {", "+    if (_started) { throw new IllegalArgumentException(\"start() has already been invoked\"); }", "+    master.checkStillAlive(); // verify that two-way communication works; may throw RemoteException", "+", "+    Thread checkMaster = new Thread(_pollMasterThreadName) {", "+      public void run() {", "+        while (true) {", "+          ConcurrentUtil.sleep(CHECK_MAIN_VM_ALIVE_SECONDS*1000);", "+          try { master.checkStillAlive(); }", "+          catch (RemoteException e) {", "+            // TODO: This should always be an exceptional situation, but for now", "+            // many tests abandon the slave without quitting cleanly.", "+            // error.log(\"Master is no longer available\", e);", "+            quit();", "+          }", "+    checkMaster.setDaemon(true);", "+    checkMaster.start();", "+    handleStart(master);", "-    */", "-  public final void start(final MasterRemote master) throws RemoteException {", "-    ", "-    if (_checkMaster != null) throw new UnexpectedException(this + \".start(...) called a second time\");", "-    ", "-    _checkMaster = new Thread(_pollMasterThreadName) {", "-      public void run() { // Note: this method is NOT synchronized; it runs in a different thread.", "-        while (true) {", "-          try { Thread.sleep(CHECK_MAIN_VM_ALIVE_SECONDS*1000); }", "-          catch (InterruptedException ie) { }", "-//          _log.log(this + \" polling \" + master + \" to confirm Master JVM is still alive\");", "-          try { master.checkStillAlive(); }", "-          catch (RemoteException re) {", "-            // TODO: This should always be an exceptional situation, but for now", "-            // many tests abandon the slave without quitting cleanly.", "-            // error.log(re);", "-            quit(); // Master JVM service is defunct. Quit! */", "-          }", "-        }", "-      }", "-    };", "-    ", "-    ", "-    ", "-    _checkMaster.setDaemon(true);", "-    _checkMaster.start();", "-    _log.log(_checkMaster + \" created and STARTed by \" + this);", "-    ", "-    handleStart(master);  // master is passed as parameter because in some refactorings, _master is eliminated", "-    ", "-  }"]}], "num": 30052}
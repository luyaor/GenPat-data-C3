{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d0e182687189cb0cd2d9d4395e0a03f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "279b3fa53e0f00d868349fcc5853f7e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d33d42f5f56aa9f97fa7ee5954a0170706bf34dc", "commitAfterChange": "d94a1a3c2d24d89ea1f580460a5e45b2a0d432b1", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   void _gotoFileUnderCursor()", "signatureAfterChange": "   void _gotoFileUnderCursor()", "diff": ["-      List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-      if ((docs==null) || (docs.size() == 0)) {", "-        return; // do nothing", "+//    Utilities.show(\"Calling gotoFileUnderCursor()\");", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    if ((docs==null) || (docs.size() == 0)) return; // do nothing", "+    ", "+    GoToFileListEntry currentEntry = null;", "+    ArrayList<GoToFileListEntry> list;", "+    list = new ArrayList<GoToFileListEntry>(docs.size());", "+    for(OpenDefinitionsDocument d: docs) {", "+      GoToFileListEntry entry = new GoToFileListEntry(d, d.toString());", "+      if (d.equals(_model.getActiveDocument())) currentEntry = entry;", "+      list.add(entry);", "+    }", "+    ", "+    PredictiveInputModel<GoToFileListEntry> pim =", "+      new PredictiveInputModel<GoToFileListEntry>(true,", "+                                                  new PredictiveInputModel.PrefixStrategy<GoToFileListEntry>(),", "+                                                  list);", "+    OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "+    odd.acquireReadLock();", "+    String mask = \"\";", "+    try {", "+      int loc = getCurrentDefPane().getCaretPosition();", "+      String s = odd.getText();", "+      // find start", "+      int start = loc;", "+      while(start>0) {", "+        if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+        --start;", "-      GoToFileListEntry currentEntry = null;", "-      ArrayList<GoToFileListEntry> list;", "-      list = new ArrayList<GoToFileListEntry>(docs.size());", "-      for(OpenDefinitionsDocument d: docs) {", "-        GoToFileListEntry entry = new GoToFileListEntry(d, d.toString());", "-        if (d.equals(_model.getActiveDocument())) {", "-          currentEntry = entry;", "-        }", "-        list.add(entry);", "+      while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "+        ++start;", "-      PredictiveInputModel<GoToFileListEntry> pim =", "-          new PredictiveInputModel<GoToFileListEntry>(true,", "-                                                      new PredictiveInputModel.PrefixStrategy<GoToFileListEntry>(),", "-                                                      list);", "-      OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "-      odd.acquireReadLock();", "-      String mask = \"\";", "-      try {", "-          int loc = getCurrentDefPane().getCaretPosition();", "-          String s = odd.getText();", "-          // find start", "-          int start = loc;", "-          while(start>0) {", "-              if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "-              --start;", "-          }", "-          while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "-              ++start;", "-          }", "-          // find end", "-          int end = loc-1;", "-          while(end<s.length()-1) {", "-              if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "-              ++end;", "-          }", "-          if ((start>=0) && (end<s.length())) {", "-              mask = s.substring(start, end+1);", "-              pim.setMask(mask);", "-          }", "+      // find end", "+      int end = loc-1;", "+      while(end<s.length()-1) {", "+        if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "+        ++end;", "-      finally { odd.releaseReadLock(); }", "-", "+      if ((start>=0) && (end<s.length())) {", "+        mask = s.substring(start, end+1);", "+        pim.setMask(mask);", "+      }", "+    }", "+    finally { odd.releaseReadLock(); }", "+    ", "+//    Utilities.show(\"Matching items are: \" + pim.getMatchingItems());", "+    ", "+    if (pim.getMatchingItems().size() == 1) {", "+      // exactly one match, go to file", "+      if (pim.getCurrentItem() != null) _model.setActiveDocument(pim.getCurrentItem().doc);", "+    }", "+    else {", "+      // try appending \".java\" and see if it's unique", "+      pim.extendMask(\".java\");", "-          // exactly one match, go to file", "-          if (pim.getCurrentItem()!=null) {", "-            _model.setActiveDocument(pim.getCurrentItem().doc);", "-          }", "+        // exactly one match with \".java\" appended, go to file", "+        if (pim.getCurrentItem() != null) _model.setActiveDocument(pim.getCurrentItem().doc);", "-          // try appending \".java\" and see if it's unique", "-          pim.extendMask(\".java\");", "-          if (pim.getMatchingItems().size() == 1) {", "-              // exactly one match with \".java\" appended, go to file", "-              if (pim.getCurrentItem()!=null) {", "-                  _model.setActiveDocument(pim.getCurrentItem().doc);", "-              }", "+        // not exactly one match", "+        pim.setMask(mask);", "+        if (pim.getMatchingItems().size() == 0) {", "+          // if there are no matches, shorten the mask until there is at least one", "+          mask = pim.getMask();", "+          while(mask.length()>0) {", "+            mask = mask.substring(0, mask.length()-1);", "+            pim.setMask(mask);", "+            if (pim.getMatchingItems().size()>0) { break; }", "-          else {", "-              // not exactly one match", "-              pim.setMask(mask);", "-              if (pim.getMatchingItems().size() == 0) {", "-                  // if there are no matches, shorten the mask until there is at least one", "-                  mask = pim.getMask();", "-                  while(mask.length()>0) {", "-                      mask = mask.substring(0, mask.length()-1);", "-                      pim.setMask(mask);", "-                      if (pim.getMatchingItems().size()>0) { break; }", "-                  }", "-              }       ", "-              initGotoFileDialog();", "-              _gotoFileDialog.setModel(true, pim); // ignore case", "-              if (currentEntry!=null) {", "-                  _gotoFileDialog.setCurrentItem(currentEntry);", "-              }", "-              hourglassOn();", "-              _gotoFileDialog.setVisible(true);", "-          }", "+        }       ", "+        initGotoFileDialog();", "+        _gotoFileDialog.setModel(true, pim); // ignore case", "+        if (currentEntry != null) _gotoFileDialog.setCurrentItem(currentEntry);", "+        hourglassOn();", "+        _gotoFileDialog.setVisible(true);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fa7db2647a0738b127d8d32e80abf1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "39a73399844d4efd2d2ebe97954e53d44db0a9b6", "commitAfterChange": "3144efa2bdaef7eb118336f3bc431cce43bf0ac2", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 152, "signatureBeforeChange": "   private void _openJavadocUnderCursor()", "signatureAfterChange": "   private void _openJavadocUnderCursor()", "diff": ["-    generateJavaAPISet();", "-    Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "-    if (apiSet == null) {", "-//      Utilities.show(\"Cannot load Java API class list. No network connectivity?\");", "-      return;", "-    }", "-    PredictiveInputModel<JavaAPIListEntry> pim =", "-      new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), apiSet);", "-    OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "-    String mask = \"\";", "-    int loc = getCurrentDefPane().getCaretPosition();", "-    String s = odd.getText();", "-    // find start", "-    int start = loc;", "-    while(start > 0) {", "-      if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "-      --start;", "-    }", "-    while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "-      ++start;", "-    }", "-    // find end", "-    int end = loc-1;", "-    while(end<s.length()-1) {", "-      if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "-      ++end;", "-    }", "-    if ((start>=0) && (end<s.length())) {", "-      mask = s.substring(start, end + 1);", "-      pim.setMask(mask);", "-    }", "-    ", "+    hourglassOn();", "+    new Thread() {", "+      public void run() {", "+        // run this in a thread other than the main thread", "+        final Set<JavaAPIListEntry> apiSet = getJavaAPISet();", "+        if (apiSet == null) {", "+//        Utilities.show(\"Cannot load Java API class list. No network connectivity?\");", "+          hourglassOff();", "+          return;", "+        }", "+        Utilities.invokeLater(new Runnable() {", "+          public void run() {", "+            // but now run this in the event thread again", "+            PredictiveInputModel<JavaAPIListEntry> pim =", "+              new PredictiveInputModel<JavaAPIListEntry>(true, new PrefixStrategy<JavaAPIListEntry>(), apiSet);", "+            OpenDefinitionsDocument odd = getCurrentDefPane().getOpenDefDocument();", "+            String mask = \"\";", "+            int loc = getCurrentDefPane().getCaretPosition();", "+            String s = odd.getText();", "+            // find start", "+            int start = loc;", "+            while(start > 0) {", "+              if (!Character.isJavaIdentifierPart(s.charAt(start-1))) { break; }", "+              --start;", "+            }", "+            while((start<s.length()) && (!Character.isJavaIdentifierStart(s.charAt(start))) && (start<loc)) {", "+              ++start;", "+            }", "+            // find end", "+            int end = loc-1;", "+            while(end<s.length()-1) {", "+              if (!Character.isJavaIdentifierPart(s.charAt(end+1))) { break; }", "+              ++end;", "+            }", "+            if ((start>=0) && (end<s.length())) {", "+              mask = s.substring(start, end + 1);", "+              pim.setMask(mask);", "+            }", "+            ", "-    ", "-    if (pim.getMatchingItems().size() == 1) {", "-      // exactly one match, go to file", "-      if (pim.getCurrentItem() != null) {", "-        PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "-      }", "-    }", "-    else {", "-      // try appending \".java\" and the other file extensions and see if it's unique", "-      boolean exact = false;", "-      for(String attemptedExt: OptionConstants.LANGUAGE_LEVEL_EXTENSIONS) {", "-        pim.setMask(mask);", "-        pim.extendMask(attemptedExt);", "-        if (pim.getMatchingItems().size() == 1) {", "-          // exactly one match with \".java\" appended, go to file", "-          exact = true;", "-          if (pim.getCurrentItem() != null) {", "-            PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "-          }", "-          break;", "-        }", "-      }", "-      if (!exact) {", "-        // not exactly one match", "-        pim.setMask(mask);", "-        int found = 0;", "-        if (pim.getMatchingItems().size() == 0) {", "-          // if there are no matches, shorten the mask until there is at least one", "-          mask = pim.getMask();", "-          while(mask.length() > 0) {", "-            mask = mask.substring(0, mask.length() - 1);", "-            pim.setMask(mask);", "-            if (pim.getMatchingItems().size() > 0) { break; }", "-          }", "-        }", "-        else {", "-          // there are several matches, see if there is an exact match", "-          for(JavaAPIListEntry e: pim.getMatchingItems()) {", "-            if (e.toString().equalsIgnoreCase(mask)) {", "-              ++found;", "+            ", "+            if (pim.getMatchingItems().size() == 1) {", "+              // exactly one match, go to file", "+              if (pim.getCurrentItem() != null) {", "+                PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "+                hourglassOff();", "+              }", "+            }", "+            else {", "+              // try appending \".java\" and the other file extensions and see if it's unique", "+              boolean exact = false;", "+              for(String attemptedExt: OptionConstants.LANGUAGE_LEVEL_EXTENSIONS) {", "+                pim.setMask(mask);", "+                pim.extendMask(attemptedExt);", "+                if (pim.getMatchingItems().size() == 1) {", "+                  // exactly one match with \".java\" appended, go to file", "+                  exact = true;", "+                  if (pim.getCurrentItem() != null) {", "+                    PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "+                    hourglassOff();", "+                  }", "+                  break;", "+                }", "+              }", "+              if (!exact) {", "+                // not exactly one match", "+                pim.setMask(mask);", "+                int found = 0;", "+                if (pim.getMatchingItems().size() == 0) {", "+                  // if there are no matches, shorten the mask until there is at least one", "+                  mask = pim.getMask();", "+                  while(mask.length() > 0) {", "+                    mask = mask.substring(0, mask.length() - 1);", "+                    pim.setMask(mask);", "+                    if (pim.getMatchingItems().size() > 0) { break; }", "+                  }", "+                }", "+                else {", "+                  // there are several matches, see if there is an exact match", "+                  for(JavaAPIListEntry e: pim.getMatchingItems()) {", "+                    if (e.toString().equalsIgnoreCase(mask)) {", "+                      ++found;", "+                    }", "+                  }", "+                }", "+                if (found==1) {", "+                  // open unique item and return", "+                  PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "+                  hourglassOff();", "+                }", "+                else {", "+                  initOpenJavadocDialog();", "+                  _openJavadocDialog.setModel(true, pim); // ignore case", "+                  _openJavadocDialog.setVisible(true);", "+                }", "+              }", "-        }", "-        if (found==1) {", "-          // open unique item and return", "-          PlatformFactory.ONLY.openURL(pim.getCurrentItem().getURL());", "-        }", "-        else {", "-          initOpenJavadocDialog();", "-          _openJavadocDialog.setModel(true, pim); // ignore case", "-          hourglassOn();", "-          _openJavadocDialog.setVisible(true);", "-        }", "+        });", "-    }", "+    }.start();"]}], "num": 24727}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a31f6310066b3235d3ca690da30aa9d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2939f2bc9c5cfb0347ca688ca8ce38cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testBracket() throws BadLocationException", "signatureAfterChange": "      public void testBracket() throws BadLocationException", "diff": ["-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open bracket.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open bracket.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 22, Indenter.OTHER));", "-    assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 23, Indenter.OTHER));", "+    assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 22, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START's paren is an open bracket.\", _rule.applyRule(_doc, 23, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba6e12832823a7e4269f79cc915d86bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testCommentsAfterBrace() throws BadLocationException", "signatureAfterChange": "      public void testCommentsAfterBrace() throws BadLocationException", "diff": ["-    assertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "-    assertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 14, Indenter.OTHER));", "-    assertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 15, Indenter.OTHER));", "-    assertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 30, Indenter.OTHER));", "-    assertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 44, Indenter.OTHER));", "-    assertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 45, Indenter.OTHER));", "-    assertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 60, Indenter.OTHER));", "-    assertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 77, Indenter.OTHER));", "+    assertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 0, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 14, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 15, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 30, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 44, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 45, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 77, Indenter.IndentReason.OTHER));"]}], "num": 22887}
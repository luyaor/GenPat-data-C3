{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb1b026d1ec987cd310f52b91d3e4675", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f467da50ce620ca563565268823f033", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "      public void testForIncrementExpression()", "signatureAfterChange": "      public void testForIncrementExpression()", "diff": ["-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      assertEquals(\"There should be 3 errors\", 3, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \" +", "+                   \"Perhaps you meant to create a new instance of int\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"There should be 4 errors\", 4, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // For some reason, generated error is not a duplicate", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \" +", "+                   \"Perhaps you meant to create a new instance of int\",", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should now be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use Flanders here, because it may not have been given a value\",", "-                   errors.getLast().getFirst());      ", "+      assertEquals(\"Should still be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use Flanders here, because it may not have been given a value\",", "+                   errors.get(0).getFirst());      ", "-      assertEquals(\"Should now be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "-                   errors.getLast().getFirst());", "+      assertEquals(\"Should still be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot assign a new value to Flanders because it is immutable and has already been given a value\",", "+                   errors.get(1).getFirst());", "-      NegativePostfixIncrementExpression npi2 = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "+      NegativePostfixIncrementExpression npi2 = ", "+        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "+                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                       new Word(SourceInfo.NO_INFO, \"int\")));", "-      assertEquals(\"There should be 7 errors\", 7, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should be 5 errors\", 5, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you \" + ", "+                   \"meant to create a new instance of int\", ", "+                   errors.get(4).getFirst());", "-      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "+      NegativePostfixIncrementExpression npi3 = ", "+        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "+                                               new Parenthesized(SourceInfo.NO_INFO, ", "+                                                                 new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                         new Word(SourceInfo.NO_INFO, \"int\"))));", "-      assertEquals(\"There should be 8 errors\", 8, errors.size());", "-      assertEquals(\"The error message should be correct\", \"You cannot increment or decrement int, because it is a class name not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"There should be 6 errors\", 6, errors.size());  // Wny isn't this a duplicate of error #4?", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot increment or decrement int, because it is a class name not an instance.  \" + ", "+                   \"Perhaps you meant to create a new instance of int\", ", "+                   errors.get(5).getFirst());", "-      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi4 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "+                                              new Parenthesized(SourceInfo.NO_INFO, ", "+                                                                new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "-      assertEquals(\"Should have added 1 error\", 9, errors.size());", "-      assertEquals(\"Should have correct error message\",\"You cannot assign a value to an increment expression\", errors.getLast().getFirst());", "+      assertEquals(\"Should have added 1 error\", 7, errors.size());", "+      assertEquals(\"Should have correct error message\",", "+                   \"You cannot assign a value to an increment expression\", ", "+                   errors.getLast().getFirst());", "-      PositivePrefixIncrementExpression ppi5 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")));", "+      PositivePrefixIncrementExpression ppi5 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "+                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                      new Word(SourceInfo.NO_INFO, \"s\")));", "-      assertEquals(\"Should have added 1 error\", 10, errors.size());", "-      assertEquals(\"Should have correct error message\", \"You cannot increment or decrement something that is not a number type.  You have specified something of type boolean\", errors.getLast().getFirst());", "+      assertEquals(\"Should have added 1 error\", 8, errors.size());", "+      assertEquals(\"Should have correct error message\", ", "+                   \"You cannot increment or decrement something that is not a number type.  You have specified \" +", "+                   \"something of type boolean\", errors.get(7).getFirst());", "-      assertEquals(\"Should still be 10 errors\", 10, errors.size());", "-      ", "-      ", "+      assertEquals(\"Should still be 8 errors\", 8, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484e634d655ac72849070bd0d7077ad2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "           public void testForPlusAssignmentExpressionOnly()", "signatureAfterChange": "           public void testForPlusAssignmentExpressionOnly()", "diff": ["-      PlusAssignmentExpression pae = new PlusAssignmentExpression(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), new IntegerLiteral(SourceInfo.NO_INFO, 6));", "+      PlusAssignmentExpression pae = ", "+        new PlusAssignmentExpression(SourceInfo.NO_INFO, ", "+                                     new IntegerLiteral(SourceInfo.NO_INFO, 5), new IntegerLiteral(SourceInfo.NO_INFO, 6));", "-      assertEquals(\"Should return string instance\", string.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, string.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return string instance\", ", "+                   string.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, string.getInstanceData(), ", "+                                                        SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", ", "+                   SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, ", "+                                                        SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                        SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should be 1 error\", 1, errors.size());  // Generated duplicate error message", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should return string instance\", string.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, string, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\",\"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of java.lang.String\" , errors.getLast().getFirst());", "+      assertEquals(\"Should return string instance\", ", "+                   string.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, string, ", "+                                                        SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 2 errors\", 2, errors.size());", "+      assertEquals(\"Error message should be correct\",", "+                   \"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified \" +", "+                   \"a type name.  Perhaps you meant to create a new instance of java.lang.String\", ", "+                   errors.get(1).getFirst());", "-      assertEquals(\"Should return string instance\", string.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, string.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\",\"The arguments to a Plus Assignment Operator (+=) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of int\" , errors.getLast().getFirst());", "+      assertEquals(\"Should return string instance\", string.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, string.getInstanceData(), ", "+                                                        SymbolData.INT_TYPE));", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\",", "+                   \"The arguments to a Plus Assignment Operator (+=) must both be instances, \" +", "+                   \"but you have specified a type name.  Perhaps you meant to create a new instance of int\" , ", "+                   errors.get(2).getFirst());", "-      //if rhs is not a number or string, give error", "-      assertEquals(\"Should return string, by default\", string.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, _sd2.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String or both be numbers.  You have specified arguments of type \" + _sd2.getName() + \" and int\", errors.getLast().getFirst());", "+      // if rhs is not a number or string, give error", "+      assertEquals(\"Should return string, by default\", string.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, _sd2.getInstanceData(), ", "+                                                        SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String \" +", "+                   \"or both be numbers.  You have specified arguments of type \" + _sd2.getName() + \" and int\", ", "+                   errors.get(3).getFirst());", "-      //if rhs is number but lhs is not, give error", "-      assertEquals(\"should return string, by default\", string.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.INT_TYPE.getInstanceData(), _sd2.getInstanceData()));", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String or both be numbers.  You have specified arguments of type int and \" + _sd2.getName(), errors.getLast().getFirst());", "+      // if rhs is number but lhs is not, give error", "+      assertEquals(\"should return string, by default\", string.getInstanceData(),", "+                   _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.INT_TYPE.getInstanceData(),", "+                                                        _sd2.getInstanceData()));", "+      assertEquals(\"Should now be 5 errors\", 5, errors.size());  // Generated slightly different error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Assignment Operator (+=) must either include an instance of a String \" +", "+                   \"or both be numbers.  You have specified arguments of type int and \" + _sd2.getName(), ", "+                   errors.get(4).getFirst());", "-", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 7 errors\", 7, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot increment something of type int with something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                        SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 6 errors\", 6, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot increment something of type int with something of type double\", ", "+                   errors.get(5).getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE));", "-      assertEquals(\"Should be 9 errors\", 9, errors.size());", "-      assertEquals(\"Second error message should be correct\", \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of double\", errors.get(7).getFirst());", "-      assertEquals(\"First error message should be correct\", \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Should return double instance\", ", "+                   SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forPlusAssignmentExpressionOnly(pae, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE));", "+      assertEquals(\"Should now be 8 errors\", 8, errors.size());", "+      assertEquals(\"Second error message should be new\", ", "+                   \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified \" +", "+                   \"a type name.  Perhaps you meant to create a new instance of double\", ", "+                   errors.get(6).getFirst());", "+      assertEquals(\"First error message should be new\", ", "+                   \"The arguments to the Plus Assignment Operator (+=) must both be instances, but you have specified \" +", "+                   \"a type name.  Perhaps you meant to create a new instance of int\", ", "+                   errors.get(7).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a312b12708b2f4d79c28e55c61148c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "                public void testForNumericAssignmentExpressionOnly()", "signatureAfterChange": "      public void testForNumericAssignmentExpressionOnly()", "diff": ["-      NumericAssignmentExpression nae = new MinusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      NumericAssignmentExpression nae = ", "+        new MinusAssignmentExpression(SourceInfo.NO_INFO, ", "+                                      new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")),", "+                                      new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 2 errors\", 2, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.getLast().getFirst());", "+      assertEquals(\"Should still be 1 error\", 1, errors.size());  // Generated duplicate error message", "+      assertEquals(\"Error message should be correct\", \"Could not resolve symbol bad_reference\", errors.get(0).getFirst());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type int.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "-      //if rhs not instance data, give error", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());  // Generated a duplicate error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type int.  Perhaps you meant to create \" +", "+                   \"a new instance of int\", ", "+                   errors.get(1).getFirst());", "+      // if rhs not instance data, give error", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use the type name char on the left hand side of a numeric assignment (-=, %=, *=, /=).  Perhaps you meant to create a new instance of char\", errors.getLast().getFirst());", "+      assertEquals(\"Should now be 3 errors\", 3, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use the type name char on the left hand side of a numeric assignment (-=, %=, *=, /=).\" +", "+                   \"  Perhaps you meant to create a new instance of char\", ", "+                   errors.get(2).getFirst());", "-      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, _sd2.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 5 errors\", 5, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Should return sd2 instance\", _sd2.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, _sd2.getInstanceData(), ", "+                                                           SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should now be 4 errors\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is not a number.  Therefore, you cannot apply \" + ", "+                   \"a numeric assignment (-=, %=, *=, /=) to it\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, SymbolData.INT_TYPE.getInstanceData(), _sd2.getInstanceData()));", "-      assertEquals(\"Should be 6 errors\", 6, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a numeric assignment (-=, %=, *=, /=) to it\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, ", "+                                                           SymbolData.INT_TYPE.getInstanceData(), ", "+                                                           _sd2.getInstanceData()));", "+      assertEquals(\"Should still be 5 errors\", 5, errors.size());  // Generated a duplicate error message", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply \" +", "+                   \"a numeric assignment (-=, %=, *=, /=) to it\", ", "+                   errors.get(4).getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericAssignmentExpressionOnly(nae, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should be 7 errors\", 7, errors.size());", "-      assertEquals(\"Error message should be correct\", \"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type int with something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"Should return int instance\", ", "+                   SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericAssignmentExpressionOnly(nae, ", "+                                                           SymbolData.INT_TYPE.getInstanceData(), ", "+                                                           SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should be 6 errors\", 6, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type int with something of \" +", "+                   \"type double\", ", "+                   errors.get(5).getFirst());"]}], "num": 29022}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dea788ffba94a2803c299d8978dc59fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b947920dae7073f40a4fbef28b5199", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/ScrollableListDialog.java", "commitBeforeChange": "60280b438c8e4415d1e3fb7cae7f2c5284f4ab7d", "commitAfterChange": "f1e49fbbed5c92cb9e03198e54bd2a4b521e7d76", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private ScrollableListDialog(Frame owner, String dialogTitle, String leaderText, Collection<?> listItems, int messageType, int width, int height, Icon icon, boolean fitToScreen)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   private ScrollableListDialog(Frame owner,                                 String dialogTitle,                                String leaderText,                                java.util.List<T> listItems,                                java.util.List<T> selItems,                                int messageType,                                int width,                                int height,                                Icon icon,                                boolean fitToScreen,                                java.util.List<JButton> buttons,                                boolean selectable)", "diff": ["-  private ScrollableListDialog(Frame owner, String dialogTitle, String leaderText, Collection<?> listItems, int messageType, int width, int height, Icon icon, boolean fitToScreen) {", "+  @SuppressWarnings(\"unchecked\")", "+  private ScrollableListDialog(Frame owner, ", "+                               String dialogTitle,", "+                               String leaderText,", "+                               java.util.List<T> listItems,", "+                               java.util.List<T> selItems,", "+                               int messageType,", "+                               int width,", "+                               int height,", "+                               Icon icon,", "+                               boolean fitToScreen,", "+                               java.util.List<JButton> buttons,", "+                               boolean selectable) {", "+    this.listItems = listItems;", "-    for (Object obj : listItems) {", "+    for (T obj : listItems) {", "-    list = new JList(dataAsStrings);", "-    //since we are not using the selection, limit it to one item", "-    list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);", "+    if (selectable) {", "+      final Vector<String> selAsStrings = new Vector<String>(selItems.size());", "+      for (T obj : selItems) {", "+        if (obj != null) {", "+          final String objAsString = obj.toString();", "+          selAsStrings.add(objAsString);", "+        }", "+      }", "+      list = new CheckBoxJList(dataAsStrings, selAsStrings);", "+      //let the user select several", "+      list.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);", "+    }", "+    else {", "+      list = new JList(dataAsStrings);", "+      //let the user select several", "+      list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+    }", "-    _addButtons(buttonPanel);", "+    _addButtons(buttonPanel, buttons);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f49d4084393d129d56ddbc102dff8cb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 322, "signatureBeforeChange": "   private <T, R> Iterable<R> findSignatureMatches(Iterable<? extends T> sigs,                                                    Lambda<? super T, ? extends SignatureChecker> makeChecker,                                                   Lambda2<? super T, ? super SignatureChecker,                                                    ? extends R> makeResult)", "signatureAfterChange": "         @Override public DJMethod forRawClassType(RawClassType dynamicContext)", "diff": ["+        @Override public DJMethod defaultCase(Type dynamicContext) { return declaredMethod; }", "+        @Override public DJMethod forRawClassType(RawClassType dynamicContext) {", "+          // TODO: raw member access warnings", "+          return new ErasedMethod(declaredMethod);", "+        }", "-   */", "-  private <T, R> Iterable<R> findSignatureMatches(Iterable<? extends T> sigs, ", "-                                                  Lambda<? super T, ? extends SignatureChecker> makeChecker,", "-                                                  Lambda2<? super T, ? super SignatureChecker, ", "-                                                  ? extends R> makeResult) {", "-    Iterable<? extends SignatureChecker> checkers = IterUtil.mapSnapshot(sigs, makeChecker);", "-    Iterable<Pair<T, SignatureChecker>> pairs = IterUtil.zip(sigs, checkers);", "-    Iterable<Pair<T, SignatureChecker>> resultPairs = IterUtil.empty();", "-    for (Pair<T, SignatureChecker> pair : pairs) {", "-      if (pair.second().matches()) { resultPairs = IterUtil.compose(resultPairs, pair); }", "-    }", "-    if (IterUtil.isEmpty(resultPairs)) {", "-      for (Pair<T, SignatureChecker> pair : pairs) {", "-        if (pair.second().matchesWithBoxing()) { resultPairs = IterUtil.compose(resultPairs, pair); }", "-      }", "-    }", "-    if (IterUtil.isEmpty(resultPairs)) {", "-      for (Pair<T, SignatureChecker> pair : pairs) {", "-        if (pair.second().matchesWithVarargs()) { resultPairs = IterUtil.compose(resultPairs, pair); }", "-      }", "-    }", "-    resultPairs = mostSpecificSignatures(resultPairs);", "-    return IterUtil.map(IterUtil.pairFirsts(resultPairs), IterUtil.pairSeconds(resultPairs),", "-                        makeResult);", "-  }"]}], "num": 12826}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea13e3da069fbc1ea75f9e1e3d4f73a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d9fbcbb47dafe70b569fd5392e797e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 170, "signatureBeforeChange": "     public List<OutputStream> value()", "signatureAfterChange": "   public static Tuple ensureSerializable(Tuple t)", "diff": ["-  private static final Thunk<List<OutputStream>> OUTPUT_STREAMS_TO_CLOSE = LazyThunk.make(new Thunk<List<OutputStream>>() {", "-    public List<OutputStream> value() {", "-      // On the first request, register a shutdown hook to clean up the list", "-      Runtime.getRuntime().addShutdownHook(new Thread() {", "-        public void run() {", "-          for (OutputStream out : OUTPUT_STREAMS_TO_CLOSE.value()) {", "-            try { out.close(); }", "-            catch (IOException e) { /* We've made a best effort, and must ignore the exception */ }", "-          }", "-        }", "-      });", "-      return new LinkedList<OutputStream>();", "-    }", "+   */", "+  public static Tuple ensureSerializable(Tuple t) {", "+    if (t instanceof Null) { return t; } // valid because Null is final", "+    else if (t instanceof Wrapper<?>) { return ensureSerializable((Wrapper<?>) t); }", "+    else if (t instanceof Pair<?,?>) { return ensureSerializable((Pair<?,?>) t); }", "+    else if (t instanceof Triple<?,?,?>) { return ensureSerializable((Triple<?,?,?>) t); }", "+    else if (t instanceof Quad<?,?,?,?>) { return ensureSerializable((Quad<?,?,?,?>) t); }", "+    else if (t instanceof Quint<?,?,?,?,?>) { return ensureSerializable((Quint<?,?,?,?,?>) t); }", "+    else if (t instanceof Sextet<?,?,?,?,?,?>) { return ensureSerializable((Sextet<?,?,?,?,?,?>) t); }", "+    else if (t instanceof Septet<?,?,?,?,?,?,?>) { return ensureSerializable((Septet<?,?,?,?,?,?,?>) t); }", "+    else if (t instanceof Octet<?,?,?,?,?,?,?,?>) { return ensureSerializable((Octet<?,?,?,?,?,?,?,?>) t); }", "+    else { throw new IllegalArgumentException(\"Unrecognized tuple type: \" + t.getClass().getName()); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4bcb40f73983ec24a7bf76f37a8bf24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "7f62f2f9bc3bd568f4385528634c331480fbe08e", "commitAfterChange": "d55b82d942f5baa7bd5bf3a1d9f1f1f9dce04a39", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Object visit(VariableDeclaration node)", "diff": ["-        _context.set(node.getName(), UninitializedObject.INSTANCE);", "+        // Non-final variables have default values, and are not uninitialized.", "+        // Primitive variables have special default values, Objects default to null.", "+        // Fixes bug #797515.", "+//        _context.set(node.getName(), UninitializedObject.INSTANCE);", "+        Object value = null;", "+        if (!c.isPrimitive()) {", "+          value = null;", "+        }", "+        else if (c == byte.class) {", "+          value = new Byte((byte)0);", "+        }", "+        else if (c == short.class) {", "+          value = new Short((short)0);", "+        }", "+        else if (c == int.class) {", "+          value = new Integer(0);", "+        }", "+        else if (c == long.class) {", "+          value = new Long(0L);", "+        }", "+        else if (c == float.class) {", "+          value = new Float(0.0f);", "+        }", "+        else if (c == double.class) {", "+          value = new Double(0.0d);", "+        }", "+        else if (c == char.class) {", "+          value = new Character('\\u0000');", "+        }", "+        else if (c == boolean.class) {", "+          value = new Boolean(false);", "+        }", "+        _context.set(node.getName(), value);"]}], "num": 3466}
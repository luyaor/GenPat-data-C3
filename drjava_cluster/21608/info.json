{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aaa64d1115374e0b664c42b4eae4e05c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a38ed0453c1f878d2fbb1aea1325816", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public TypeData forForStatement(ForStatement that)", "signatureAfterChange": "   public TypeData forForStatement(ForStatement that)", "diff": ["-   */", "+    */", "-    BodyTypeChecker btc = createANewInstanceOfMe(_bodyData, _file, _package, _importedFiles, _importedPackages, cloneVariableDataList(_vars), _thrown);", "+    LinkedList<VariableData> newVars = cloneVariableDataList(_vars);", "+    BodyTypeChecker btc = ", "+      createANewInstanceOfMe(_bodyData, _file, _package, _importedFiles, _importedPackages, newVars, _thrown);", "-    ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, btc._vars, _thrown);", "+    ExpressionTypeChecker etc = ", "+      new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, btc._vars, _thrown);", "-    //Now, change any VariableDatas that were given a value in the ForStatement back to having been unassigned since its code is not", "-    //necessarily executed.", "+    // Now, change any VariableDatas that were given a value in the ForStatement back to having been unassigned since ", "+    // its code is not necessarily executed.", "-    if (expOk.booleanValue()) {return forForStatementOnly(that, init_result, condition_result, update_result, code_result);}", "+    if (expOk.booleanValue()) ", "+      return forForStatementOnly(that, init_result, condition_result, update_result, code_result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be0f9f907354396dd1ee2724625e3cad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "          public void testForThisReferenceDoFirst()", "signatureAfterChange": "          public void testForThisReferenceDoFirst()", "diff": ["-      ComplexThisReference ctr = new ComplexThisReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"field\")));", "+      ComplexThisReference ctr = ", "+        new ComplexThisReference(SourceInfo.NO_INFO, ", "+                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"field\")));", "-      MethodData constr = new MethodData(\"monkey\", _publicMav, new TypeParameter[0], _sd1, ", "+      MethodData constr = new MethodData(\"ILikeMonkey\", _publicMav, new TypeParameter[0], _sd1, ", "-      assertEquals(\"Error message should be correct\", \"You cannot reference the field 'this' inside a constructor at the Intermediate Level\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference the field 'this' inside a constructor at the Intermediate Level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"You cannot reference the field 'this' inside a constructor at the Intermediate Level\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot reference the field 'this' inside a constructor at the Intermediate Level\", ", "+                   errors.getLast().getFirst());", "+      "]}], "num": 21608}
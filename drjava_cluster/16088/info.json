{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "feee247a70545e47b474a26b9066d750", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01c1fa0f9c6a0bb09fafb9c452102267", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public DefaultGlobalModel()", "signatureAfterChange": "   public DefaultGlobalModel()", "diff": ["-//    AbstractMasterJVM._log.log(this + \" has called contstructor for DefaultGlobal Model\");", "+    Iterable<? extends JDKToolsLibrary> tools = findLibraries();", "+    List<CompilerInterface> compilers = new LinkedList<CompilerInterface>();", "+    _debugger = null;", "+    for (JDKToolsLibrary t : tools) {", "+      if (t.compiler().isAvailable()) { compilers.add(t.compiler()); }", "+      if (_debugger == null && t.debugger().isAvailable()) { _debugger = t.debugger(); }", "+    }", "+    if (_debugger == null) { _debugger = NoDebuggerAvailable.ONLY; }", "+    ", "-    _compilerModel = new DefaultCompilerModel(this);", "+    _compilerModel = new DefaultCompilerModel(this, compilers);", "-    _createDebugger();", "+    _setupDebugger();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e057438d40aba350c631325c7f2121", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "commitAfterChange": "df716c1c0097e3026300a60a646a72121f921c3d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent,                                            String value,                                            final OptionListener<String> l)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent,                                            String value,                                            final OptionListener<String> l)", "diff": ["+  ", "+  @SuppressWarnings(\"fallthrough\")", "+  public static void sanitizeMasterJVMArgs(JFrame parent,", "+                                           String value,", "+                                           final OptionListener<String> l) {", "+    int pos = value.indexOf(\"-Xmx\");", "+    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "+        (pos==0)) {", "+      int endpos = pos+(\"-Xmx\".length());", "+      while((endpos<value.length()) &&", "+            (!Character.isWhitespace(value.charAt(endpos)))) {", "+        ++endpos;", "+      }", "+      ", "+      int startpos = pos+(\"-Xmx\".length());", "+      String size = value.substring(startpos,endpos);", "-  ", "-  @SuppressWarnings(\"fallthrough\")", "-  public static void sanitizeMasterJVMArgs(JFrame parent,", "-                                           String value,", "-                                           final OptionListener<String> l) {", "-    int pos = value.indexOf(\"-Xmx\");", "-    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "-        (pos==0)) {", "-      int startpos = pos+(\"-Xmx\".length());", "-      int endpos = startpos;", "-      while((endpos<value.length()) &&", "-            (!Character.isWhitespace(value.charAt(endpos)))) {", "-        ++endpos;", "-      }", "-", "-      String size = value.substring(startpos,endpos);", "-      long factor = 1;", "-      long heapSize;", "-      switch(size.toLowerCase().charAt(size.length()-1)) {", "-        case 'g':", "-          factor *= 1024; // fall-through intended", "-        case 'm':", "-          factor *= 1024; // fall-through intended", "-        case 'k':", "-          factor *= 1024; // fall-through intended", "-        default:", "-          try{", "-          heapSize = new Long(size.substring(0,size.length()-2)) * factor;", "-        }", "-          catch(NumberFormatException nfe) {", "-            heapSize = -1; // invalid", "-          }", "-      }", "+      long heapSizeMB = (heapSize / 1024) / 1024;", "+      // find the next bigger of the choices", "+      String newSetting = getNextBiggerHeapSize(heapSizeMB);", "-          \"Clean \\\"Main JVM Args\\\"\",", "+          \"Clean \\\"Master JVM Args\\\"\",", "-                           \"Would you like to copy the value\\n\\\"\"+size+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "+                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "-          DrJava.getConfig().setSetting(MASTER_JVM_XMX, size);", "+          DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);", "-        JOptionPane.showMessageDialog(parent,", "-                                      \"You will have to restart DrJava before the change takes effect.\");", "+        else {", "+          JOptionPane.showMessageDialog(parent,", "+                                        \"You will have to restart DrJava before the change takes effect.\");", "+        }"]}], "num": 16088}
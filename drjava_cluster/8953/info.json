{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f40ad31fc7f013b04724c76e377e09d7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cfbdce76ced9670d5f742bb0b4dbd7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testUndoEventsOccur() throws BadLocationException", "signatureAfterChange": "   public void testUndoEventsOccur()", "diff": ["-  public void testUndoEventsOccur() throws BadLocationException {", "-    final OpenDefinitionsDocument doc = _model.newFile();", "+  public void testUndoEventsOccur() /* throws BadLocationException */ {", "-    // Have to add an undoable edit listener for Undo to work", "-    doc.addUndoableEditListener(new UndoableEditListener() {", "-      public void undoableEditHappened(UndoableEditEvent e) { doc.getUndoManager().addEdit(e.getEdit()); }", "+    final OpenDefinitionsDocument doc = _model.newFile();", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        // Have to add an undoable edit listener for Undo to work", "+        doc.addUndoableEditListener(new UndoableEditListener() {", "+          public void undoableEditHappened(UndoableEditEvent e) { doc.getUndoManager().addEdit(e.getEdit()); }", "+        });", "+      }", "+    ", "-    Utilities.clearEventQueue();", "+//        Utilities.clearEventQueue();", "-//    Utilities.showDebug(\"testUndoEvents finished\");", "-//    _log.log(\"testUndoEventsOccur() completed\");", "+    _log.log(\"testUndoEventsOccur() completed\");", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6463d1ba4b396f5d68f10aa9dae43317", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testUndoEventsOccur() throws BadLocationException", "signatureAfterChange": "   public void testUndoEventsOccur()", "diff": ["-  public void testUndoEventsOccur() throws BadLocationException {", "-    final OpenDefinitionsDocument doc = _model.newFile();", "+  public void testUndoEventsOccur() /* throws BadLocationException */ {", "-    // Have to add an undoable edit listener for Undo to work", "-    doc.addUndoableEditListener(new UndoableEditListener() {", "-      public void undoableEditHappened(UndoableEditEvent e) { doc.getUndoManager().addEdit(e.getEdit()); }", "+    final OpenDefinitionsDocument doc = _model.newFile();", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        // Have to add an undoable edit listener for Undo to work", "+        doc.addUndoableEditListener(new UndoableEditListener() {", "+          public void undoableEditHappened(UndoableEditEvent e) { doc.getUndoManager().addEdit(e.getEdit()); }", "+        });", "+      }", "+    ", "-    Utilities.clearEventQueue();", "+//        Utilities.clearEventQueue();", "-//    Utilities.showDebug(\"testUndoEvents finished\");", "-//    _log.log(\"testUndoEventsOccur() completed\");", "+    _log.log(\"testUndoEventsOccur() completed\");", "+    "]}], "num": 8953}
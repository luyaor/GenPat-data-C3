{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3171be02ab4fee4467377e7f382b355", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "350baf1f2519301733a502aef9958f3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public static SizedIterable<Boolean> arrayIterable(final boolean[] array)", "signatureAfterChange": "   public static SizedIterable<Boolean> asIterable(boolean[] values)", "diff": ["+   */", "+  public static SizedIterable<Boolean> asIterable(boolean[] values) {", "+    return new BooleanArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Boolean> arrayIterable(final boolean[] array) {", "-    class Wrapper extends AbstractIterable<Boolean> implements SizedIterable<Boolean> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Boolean> iterator() {", "-        return new IndexedIterator<Boolean>() {", "-          protected int size() { return array.length; }", "-          protected Boolean get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cac6e63762eda27deca875a3e1f14d3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 112, "signatureBeforeChange": "   public static SizedIterable<Double> arrayIterable(final double[] array)", "signatureAfterChange": "   public static SizedIterable<Double> asIterable(double[] values)", "diff": ["+   */", "+  public static SizedIterable<Double> asIterable(double[] values) {", "+    return new DoubleArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Double> arrayIterable(final double[] array) {", "-    class Wrapper extends AbstractIterable<Double> implements SizedIterable<Double> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Double> iterator() {", "-        return new IndexedIterator<Double>() {", "-          protected int size() { return array.length; }", "-          protected Double get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}], "num": 6320}
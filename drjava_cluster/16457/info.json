{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0966a723d3cd5504c7e5e430d8f085f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b052fc213210a65f0dd7e666b331544", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/StaticMethodCall.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args,                           SourceInfo si)", "signatureAfterChange": "   public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args, SourceInfo si)", "diff": ["-  public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args,", "-                          SourceInfo si) {", "-    super(mn, args, si);", "-", "-    if (typ == null) throw new IllegalArgumentException(\"typ == null\");", "-", "-    methodType = typ;", "+  public StaticMethodCall(TypeName typ, String mn, List<? extends Expression> args, SourceInfo si) {", "+    this(typ, Option.<List<TypeName>>none(), mn, args, si);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78594820a64cca83758e1566fd87d54c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/SuperMethodCall.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public SuperMethodCall(Option<String> cn, String mn, List<? extends Expression> args, SourceInfo si)", "signatureAfterChange": "      public SuperMethodCall(Option<String> cn, String mn, List<? extends Expression> args, SourceInfo si)", "diff": ["-  public SuperMethodCall(Option<String> cn, String mn, List<? extends Expression> args, SourceInfo si) {", "-    super(mn, args, si);", "+  public SuperMethodCall(Option<String> cn, String mn, List<? extends Expression> args, SourceInfo si) {", "+    this(cn, Option.<List<TypeName>>none(), mn, args, si);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ff8ec5f1d14ede47fcf6e1f3aad245b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/AnonymousAllocation.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb, SourceInfo si)", "signatureAfterChange": "   public AnonymousAllocation(ReferenceTypeName tp, List<? extends Expression> args, List<Node> memb, SourceInfo si)", "diff": ["-    super(tp, args, si);", "+    this(Option.<List<TypeName>>none(), tp, args, memb, si);", "+  }"]}], "num": 16457}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a196ba3ef408af05212b0f53aa30fc0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f22e374393b21f29b74bb8c3392aa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelListTest.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      public void testCollapse()", "signatureAfterChange": "      public void testCollapse()", "diff": ["-    itFull.insert(new Integer(6));", "+    itFull.insert(Integer.valueOf(6));", "-    itFull.insert(new Integer(5));", "+    itFull.insert(Integer.valueOf(5));", "-    itFull.insert(new Integer(4));", "+    itFull.insert(Integer.valueOf(4));", "-    assertEquals(\"#3.0b\",new Integer(4),itFull.current());", "-    assertEquals(\"#3.0a\", new Integer(6), itFull2.current());", "+    assertEquals(\"#3.0b\",Integer.valueOf(4),itFull.current());", "+    assertEquals(\"#3.0a\", Integer.valueOf(6), itFull2.current());", "-    assertEquals(\"3.0d\", new Integer(6), itFull2.current());", "+    assertEquals(\"3.0d\", Integer.valueOf(6), itFull2.current());", "-    assertEquals(\"3.0f\", new Integer(4), itFull.current());", "+    assertEquals(\"3.0f\", Integer.valueOf(4), itFull.current());", "-    assertEquals(\"#3.0c\",new Integer(6),itFull.current());", "+    assertEquals(\"#3.0c\",Integer.valueOf(6),itFull.current());", "-    assertEquals(\"#4.0\", new Integer(4), itFull.current());", "-    assertEquals(\"#4.1\", new Integer(6), itFull2.current());", "+    assertEquals(\"#4.0\", Integer.valueOf(4), itFull.current());", "+    assertEquals(\"#4.1\", Integer.valueOf(6), itFull2.current());", "-    itFull.insert(new Integer(7));", "+    itFull.insert(Integer.valueOf(7));", "-    assertEquals(\"#5.0b\", new Integer(7), itFull.current());", "-    assertEquals(\"#5.0c\", new Integer(6), itFull2.current());", "+    assertEquals(\"#5.0b\", Integer.valueOf(7), itFull.current());", "+    assertEquals(\"#5.0c\", Integer.valueOf(6), itFull2.current());", "-    assertEquals(\"#5.1b\", new Integer(7), itFull.current());", "-    assertEquals(\"#5.1c\", new Integer(6), itFull2.current());", "-    assertEquals(\"#5.2a\", new Integer(6), itFull.nextItem());", "-    assertEquals(\"#5.2b\", new Integer(7), itFull2.prevItem());", "+    assertEquals(\"#5.1b\", Integer.valueOf(7), itFull.current());", "+    assertEquals(\"#5.1c\", Integer.valueOf(6), itFull2.current());", "+    assertEquals(\"#5.2a\", Integer.valueOf(6), itFull.nextItem());", "+    assertEquals(\"#5.2b\", Integer.valueOf(7), itFull2.prevItem());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20bcda9733b32fd5b735bc1d0f4ee304", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "db0f15071978e90a34b717520b233bb7aaf1c97a", "commitAfterChange": "fdcbc942eddfd6ff92fe750cda9018e6f1a4d3ed", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 274, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["+    Utilities.invokeAndWait(new Runnable() { public void run() {", "-    _findReplace = new FindReplacePanel(this, _model);", "+      _findReplace = new FindReplacePanel(MainFrame.this, _model);", "-      _debugPanel = new DebugPanel(this);", "-      _breakpointsPanel = new BreakpointsPanel(this, _model.getBreakpointManager());", "+        _debugPanel = new DebugPanel(MainFrame.this);", "+        _breakpointsPanel = new BreakpointsPanel(MainFrame.this, _model.getBreakpointManager());", "-    _compilerErrorPanel = new CompilerErrorPanel(_model, this);", "+      _compilerErrorPanel = new CompilerErrorPanel(_model, MainFrame.this);", "-    // setUp interactions pane", "-    Utilities.invokeLater(new Runnable() {", "-      public void run() {", "-        Runnable command = new Runnable() {", "+      _interactionsController =", "+        new InteractionsController(_model.getInteractionsModel(),", "+                                   _model.getSwingInteractionsDocument(),", "+                                   new Runnable() {", "-        };", "-        _interactionsController =", "-          new InteractionsController(_model.getInteractionsModel(), _model.getSwingInteractionsDocument(), command);", "+      });", "-      }", "-    });", "-    _junitErrorPanel = new JUnitPanel(_model, this);", "-    _javadocErrorPanel = new JavadocErrorPanel(_model, this);", "+      _junitErrorPanel = new JUnitPanel(_model, MainFrame.this);", "+      _javadocErrorPanel = new JavadocErrorPanel(_model, MainFrame.this);", "-    _bookmarksPanel = new BookmarksPanel(this, _model.getBookmarkManager());", "+      _bookmarksPanel = new BookmarksPanel(MainFrame.this, _model.getBookmarkManager());", "-    _tabbedPane = new JTabbedPane();", "-    _openRecursiveCheckBox = new JCheckBox(\"Open folders recursively\");", "-    _interactionsHistoryChooser = new JFileChooser();", "-    _recentDocFrame = new RecentDocFrame(this);", "+      _recentDocFrame = new RecentDocFrame(MainFrame.this);", "-    KeyBindingManager.ONLY.setMainFrame(this);", "+      KeyBindingManager.ONLY.setMainFrame(MainFrame.this);", "-    _menuBar = new MenuBar();", "-    ", "-    _toolBar = new JToolBar();", "-    // Initialize DocumentRegion highlights hashtables, for easy removal of highlights", "-    _documentBreakpointHighlights = new IdentityHashMap<Breakpoint, HighlightManager.HighlightInfo>();", "-    _documentBookmarkHighlights = new IdentityHashMap<OrderedDocumentRegion, HighlightManager.HighlightInfo>();", "-    ", "-    _configFrame = new ConfigFrame(this);", "-    _helpFrame = new HelpFrame();", "+      _configFrame = new ConfigFrame(MainFrame.this);", "-    _quickStartFrame = new QuickStartFrame();", "-    ConfigOptionListeners.sanitizeSlaveJVMArgs(this, config.getSetting(SLAVE_JVM_ARGS), slaveJVMArgsListener);", "-    ConfigOptionListeners.sanitizeSlaveJVMXMX(this, config.getSetting(SLAVE_JVM_XMX));", "-    ConfigOptionListeners.sanitizeMasterJVMArgs(this, config.getSetting(MASTER_JVM_ARGS), masterJVMArgsListener);", "-    ConfigOptionListeners.sanitizeMasterJVMXMX(this, config.getSetting(MASTER_JVM_XMX));", "-    ConfigOptionListeners.sanitizeJavadocCustomParams(this, config.getSetting(JAVADOC_CUSTOM_PARAMS));", "+      ConfigOptionListeners.sanitizeSlaveJVMArgs(MainFrame.this, config.getSetting(SLAVE_JVM_ARGS), slaveJVMArgsListener);", "+      ConfigOptionListeners.sanitizeSlaveJVMXMX(MainFrame.this, config.getSetting(SLAVE_JVM_XMX));", "+      ConfigOptionListeners.sanitizeMasterJVMArgs(MainFrame.this, config.getSetting(MASTER_JVM_ARGS), masterJVMArgsListener);", "+      ConfigOptionListeners.sanitizeMasterJVMXMX(MainFrame.this, config.getSetting(MASTER_JVM_XMX));", "+      ConfigOptionListeners.sanitizeJavadocCustomParams(MainFrame.this, config.getSetting(JAVADOC_CUSTOM_PARAMS));", "-          new RemoteControlServer(this);", "+            new RemoteControlServer(MainFrame.this);", "-                 .equals(OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(1)) && // Ask me", "+                 .equals(OptionConstants.FileExtRegistrationChoices.ASK_ME) && // Ask me", "-              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION, ", "-                                            OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(2));", "+              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION,", "+\t\t\t\t\t\t\t\t\t\t    OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(2));", "-              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION, ", "-                                            OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(0));", "+              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION,", "+\t\t\t\t\t\t\t\t\t\t    OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(0));", "-      // two dialogs on program start is too much clutter    ", "+      // two dialogs on program start is too much clutter", "-            .equals(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(3)) &&", "+            .equals(OptionConstants.VersionNotificationChoices.DISABLED) &&", "+    } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "428d7fe4bd9d9f802f8efcfd7277a213", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testGetOffsetAndLength()", "signatureAfterChange": "   public void testGetOffsetAndLength()", "diff": ["-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.first());", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(9), oAndL.second());", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", Integer.valueOf(0), oAndL.first());", "+    assertEquals(\"testGetOffsetAndLength- length:\", Integer.valueOf(9), oAndL.second());", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.first());", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(13), oAndL.second());", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", Integer.valueOf(0), oAndL.first());", "+    assertEquals(\"testGetOffsetAndLength- length:\", Integer.valueOf(13), oAndL.second());", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(4), oAndL.first());", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(9), oAndL.second());", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", Integer.valueOf(4), oAndL.first());", "+    assertEquals(\"testGetOffsetAndLength- length:\", Integer.valueOf(9), oAndL.second());", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(0), oAndL.first());", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(1), oAndL.second());", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", Integer.valueOf(0), oAndL.first());", "+    assertEquals(\"testGetOffsetAndLength- length:\", Integer.valueOf(1), oAndL.second());", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(24), oAndL.first());", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(1), oAndL.second());", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", Integer.valueOf(24), oAndL.first());", "+    assertEquals(\"testGetOffsetAndLength- length:\", Integer.valueOf(1), oAndL.second());", "-    assertEquals(\"testGetOffsetAndLength- offSet:\", new Integer(12), oAndL.first());", "-    assertEquals(\"testGetOffsetAndLength- length:\", new Integer(14), oAndL.second());", "+    assertEquals(\"testGetOffsetAndLength- offSet:\", Integer.valueOf(12), oAndL.first());", "+    assertEquals(\"testGetOffsetAndLength- length:\", Integer.valueOf(14), oAndL.second());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "741364ede2d4483f8b1d7ab04401e687", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelListTest.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public void testNotifyCollapse()", "signatureAfterChange": "    public void testNotifyCollapse()", "diff": ["-    itFull2.insert(new Integer(0));", "-    itFull2.insert(new Integer(1));", "-    itFull2.insert(new Integer(2));", "-    itFull2.insert(new Integer(3));", "-    itFull2.insert(new Integer(4));", "+    itFull2.insert(Integer.valueOf(0));", "+    itFull2.insert(Integer.valueOf(1));", "+    itFull2.insert(Integer.valueOf(2));", "+    itFull2.insert(Integer.valueOf(3));", "+    itFull2.insert(Integer.valueOf(4));", "-    assertEquals(\"#0.0\", new Integer(2), itFull.current());", "-    assertEquals(\"#0.1\", new Integer(0), itFull3.current());", "+    assertEquals(\"#0.0\", Integer.valueOf(2), itFull.current());", "+    assertEquals(\"#0.1\", Integer.valueOf(0), itFull3.current());", "-    assertEquals(\"#1.0\", new Integer(4), itFull2.current());", "-    assertEquals(\"#1.1\", new Integer(0), itFull3.current());", "-    assertEquals(\"#1.2\", new Integer(0), itFull.current());", "+    assertEquals(\"#1.0\", Integer.valueOf(4), itFull2.current());", "+    assertEquals(\"#1.1\", Integer.valueOf(0), itFull3.current());", "+    assertEquals(\"#1.2\", Integer.valueOf(0), itFull.current());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a3394af7e152ec42bd3416fe13701fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void put(OpenDefinitionsDocument odd, DDReconstructor reconstructor)", "signatureAfterChange": "   private synchronized void newFirst(DocManager dm)", "diff": ["-   */", "-  public void put(OpenDefinitionsDocument odd, DDReconstructor reconstructor){", "-    //System.out.println(\"put: \" + odd);", "-    Pair<DefinitionsDocument,DDReconstructor> pair = new Pair<DefinitionsDocument,DDReconstructor>(null, reconstructor);", "-    table.remove(odd);", "-    table.put(odd, pair);", "-    synchronized(lru) {", "-      lru.remove(odd);", "-    }", "-//    System.out.println(this);", "-  }", "+   */", "+  private synchronized void newFirst(DocManager dm) {", "+    if (_lru.size() > 0) _lru.getFirst().setNotFirst();", "+    _lru.remove(dm); // Make sure dm isn't in the LRU", "+    _lru.addFirst(dm);", "+    dm.setFirst();", "+    if (_lru.size() > CACHE_SIZE) {", "+      DocManager last = _lru.getLast();", "+      _lru.removeLast();", "+      last.kickOut();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adaf60e329fef57f94038de902c13459", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "1a21d93c6026fc975d9f1a1bda2fbd55942a0154", "commitAfterChange": "7cbabe0b7b5f77b58eac69afdca15c16ef2f6a9b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                new Lambda2<Double,Double,Boolean>() {", "-                                                                new edu.rice.cs.plt.lambda.Lambda2<String,String,Boolean>() {", "+                                                                new Lambda2<String,String,Boolean>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               new Lambda2<Double,Double,Double>() {", "-                                                        new edu.rice.cs.util.Lambda<Double,String>() {", "-      public Double apply(String s) { return ((double)s.length()); }", "+                                                        new Lambda<String,Double>() {", "+      public Double value(String s) { return ((double)s.length()); }", "-                                                               new edu.rice.cs.plt.lambda.Lambda2<String,String,Double>() {", "+                                                               new Lambda2<String,String,Double>() {", "-                                                                             new edu.rice.cs.plt.lambda.Lambda4<String,Double,Double,String,String>() {", "+                                                                             new Lambda4<String,Double,Double,String,String>() {", "-                                                                      new edu.rice.cs.plt.lambda.Lambda3<String,String,String,String>() {", "+                                                                      new Lambda3<String,String,String,String>() {", "-      public void setAttributes(HashMap<String,String> attrs, edu.rice.cs.util.Lambda<String,String> replaceLambda) {", "-        String value;", "+      public void setAttributes(HashMap<String,String> attrs, Lambda<String,String> replaceLambda) {", "+        String val;", "-          value = attrs.get(key);", "+          val = attrs.get(key);", "-            setAttribute(key, value);", "+            setAttribute(key, val);", "-            setAttribute(key, replaceLambda.apply(value));", "+            setAttribute(key, replaceLambda.value(val));", "-      public void setAttributes(HashMap<String,String> attrs, edu.rice.cs.util.Lambda<String,String> replaceLambda) {", "+      public void setAttributes(HashMap<String,String> attrs, Lambda<String,String> replaceLambda) {", "-            setAttribute(key, replaceLambda.apply(value));", "+            setAttribute(key, replaceLambda.value(value));", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Thunk<File>() {", "+      public File value() {", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Lambda<File,Void>() {", "-      public File apply(Void notUsed) {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Thunk<File>() {", "+      public File value() {"]}], "num": 12890}
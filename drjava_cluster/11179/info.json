{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c3bb6b06d6b0f885cd7c232548bcb86", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34b78a7ee74927de9b327a957459947", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testOneJUnitError() throws Exception", "signatureAfterChange": "   public void testOneJUnitError() throws Exception", "diff": ["-    doc.startCompile();", "-    // Clear document so we can make sure it's written to after startJUnit", "-    _model.getJUnitDocument().remove(0, _model.getJUnitDocument().getLength() - 1);", "-    final TestResult testResults = doc.startJUnit();", "-    ", "-    assertEquals(\"test case has one error reported\",", "-                 1,", "-                 testResults.failureCount());", "-  }", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    assertEquals(\"test case has one error reported\",", "+                 1,", "+                 doc.getJUnitErrorModel().getNumErrors());", "+                 "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f485a3e603534d75f8a59e5ea864511e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testNoJUnitErrors() throws Exception", "signatureAfterChange": "   public void testNoJUnitErrors() throws Exception", "diff": ["-    doc.startCompile();", "-    // Clear document so we can make sure it's written to after startJUnit", "-    _model.getJUnitDocument().remove(0, ", "-                                     _model.getJUnitDocument().getLength() - 1);", "-    final TestResult testResults = doc.startJUnit();", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    synchronized(listener) {", "+      doc.startJUnit();", "+      listener.assertJUnitStartCount(1);", "+      listener.wait();", "+    }", "-                 testResults.failureCount());", "+                 doc.getJUnitErrorModel().getNumErrors());                 "]}], "num": 11179}
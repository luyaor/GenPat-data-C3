{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48d7d31eb17afb8ee0769d7f3920e7dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321e14b9324863660d7fade72c54bbdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "      protected Type substitute(Type t, final SubstitutionMap sigma)", "signatureAfterChange": "      protected Type substitute(Type t, final SubstitutionMap sigma)", "diff": ["-      // TODO: Make sure CopyDepthFirstVisitor isn't making unnecessary copies", "-      return t.apply(new TypeCopyDepthFirstVisitor() {", "-        ", "-        // TODO: This should be automatically defined in TypeCopyDepthFirstVisitor", "-        public Type defaultCase(Type t) { ", "-          throw new IllegalArgumentException(\"Visitor unexpectedly reached default case\");", "-        }", "-        ", "-        @Override public Type forParameterizedClassType(ParameterizedClassType t) {", "-          Iterable<Type> newArgs = applyToList(t.typeArguments());", "-          return (newArgs == null) ? t : new ParameterizedClassType(t.ofClass(), newArgs);", "-        }", "+      return t.apply(new TypeUpdateVisitor() {", "-        @Override public Type forIntersectionType(IntersectionType t) {", "-          Iterable<Type> newTypes = applyToList(t.ofTypes());", "-          return (newTypes == null) ? t : new IntersectionType(newTypes);", "-        }", "-        ", "-          final TypeVisitor<Type> visitor = this;", "-              Type newUpper = bounds.upperBound().apply(visitor);", "-              Type newLower = bounds.lowerBound().apply(visitor);", "+              Type newUpper = recur(bounds.upperBound());", "+              Type newLower = recur(bounds.lowerBound());", "-        }", "-        ", "-        // returns null if no change is necessary", "-        private Iterable<Type> applyToList(Iterable<? extends Type> ts) {", "-          Iterable<Type> newTs = EMPTY_TYPE_ITERABLE;", "-          boolean changed = false;", "-          for (Type t : ts) {", "-            Type newT = t.apply(this);", "-            newTs = IterUtil.compose(newTs, newT);", "-            changed = changed || (t != newT);", "-          }", "-          return changed ? newTs : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be0cd55c82399cd31f0cfdafc5bca095", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "04d5f67f3ab0801dcf0753d1c84455182368f783", "commitAfterChange": "dd27d69f437c114ad258abba00f7d581b096ce79", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void junitProject()", "signatureAfterChange": "   public void junitProject()", "diff": ["+    LinkedList<OpenDefinitionsDocument> lod = new LinkedList<OpenDefinitionsDocument>();", "+    ", "+    Iterator<OpenDefinitionsDocument> it =", "+      _getter.getDefinitionsDocuments().iterator();", "+    while (it.hasNext()) {", "+      OpenDefinitionsDocument doc = it.next();", "+      if (doc.isProjectFile()) {", "+        lod.add(doc);", "+      }", "+    }", "+    junitDocs(lod);", "+  }", "-      Iterator<OpenDefinitionsDocument> it =", "-        _getter.getDefinitionsDocuments().iterator();", "-          if (doc.isProjectFile()) {", "-            String cn = doc.getQualifiedClassName();", "-            classNames.add(cn);", "-            File f;", "-            try {", "-              f = doc.getFile();", "-            }", "-            catch (FileMovedException fme) {", "-              f = fme.getFile();", "-            }", "-            if(f.getCanonicalPath().startsWith(_model.getProjectFile().getParentFile().getCanonicalPath())){", "-              files.add(f);", "-            }", "-            classNamesToODDs.put(cn, doc);", "-        }catch(IOException e){", "-          // don't add it to the test"]}], "num": 3640}
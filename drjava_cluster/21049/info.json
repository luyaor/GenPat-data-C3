{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b82e129bbbde922c344042477e57f2c", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "492681c5fb99da8a4ee1fa495ec3c72b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-    String toEval;", "-    _document.acquireWriteLock();", "-    try {", "-      if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "-      ", "-      String text = _document.getCurrentInteraction();", "-      toEval = text.trim();", "-      if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "-//          System.err.println(\"Preparing to interpret '\" + text +\"'\");", "-      _prepareToInterpret(text);  // Writes a newLine!", "-    }", "-    finally{ _document.releaseWriteLock(); }", "-    interpret(toEval);", "+//    assert EventQueue.isDispatchThread();  // violated in GlobalModelIOTest, InteractionsModelTest", "+", "+    if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "+    ", "+    String text = _document.getCurrentInteraction();", "+    String toEval = text.trim();", "+    if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "+//          System.err.println(\"Preparing to interpret '\" + toEval +\"'\");", "+    _prepareToInterpret(toEval);  // Writes a newLine!", "+    final String evalText = toEval;", "+", "+    new Thread(new Runnable() { ", "+      public void run() { ", "+        try { interpret(evalText); } ", "+        catch(Throwable t) { DrJavaErrorHandler.record(t); }", "+      } ", "+    }).start(); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df3cd6c87fbf43c59f489d8cfec86390", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-    String toEval;", "-    _document.acquireWriteLock();", "-    try {", "-      if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "-      ", "-      String text = _document.getCurrentInteraction();", "-      toEval = text.trim();", "-      if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "-//          System.err.println(\"Preparing to interpret '\" + text +\"'\");", "-      _prepareToInterpret(text);  // Writes a newLine!", "-    }", "-    finally{ _document.releaseWriteLock(); }", "-    interpret(toEval);", "+//    assert EventQueue.isDispatchThread();  // violated in GlobalModelIOTest, InteractionsModelTest", "+", "+    if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "+    ", "+    String text = _document.getCurrentInteraction();", "+    String toEval = text.trim();", "+    if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "+//          System.err.println(\"Preparing to interpret '\" + toEval +\"'\");", "+    _prepareToInterpret(toEval);  // Writes a newLine!", "+    final String evalText = toEval;", "+", "+    new Thread(new Runnable() { ", "+      public void run() { ", "+        try { interpret(evalText); } ", "+        catch(Throwable t) { DrJavaErrorHandler.record(t); }", "+      } ", "+    }).start(); "]}], "num": 21049}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51d06e14c64e01fee8e47b6e30c23a40", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e93e3741a6a6f672a1e497107ae703", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/AbstractLog.java", "commitBeforeChange": "2f448ba8b87bf5374806fe43042efcc34e6f744e", "commitAfterChange": "93219856772483abc62cf5ad83d3a2500e77f448", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void logValues(String[] names, Object... values)", "signatureAfterChange": "   public void logValues(String[] names, Object... values)", "diff": ["-      if (names.length == values.length) {", "-        Iterable<String> namesIter = IterUtil.arrayIterable(names);", "-        Iterable<Object> valuesIter = IterUtil.arrayIterable(values);", "-        SizedIterable<SizedIterable<String>> messages = BinaryMappedIterable.make(namesIter, valuesIter, PROCESS_VALUE);", "-        write(new Date(), th, e, IterUtil.collapse(messages));", "-      }", "-      else {", "-        String err = \"Invalid invocation of logValues() with \" + names.length + \" names and \"  + values.length + \" values\";", "-        write(new Date(), th, e, IterUtil.singleton(err));", "-      }", "+      write(new Date(), th, e, processValues(names, values));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dee2871ecc30f6feab02c234cb4ae25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public static <T> SizedIterable<T> arrayIterable(final T[] array)", "signatureAfterChange": "   public static <T> SizedIterable<T> asIterable(T[] array)", "diff": ["+   */", "+  public static <T> SizedIterable<T> asIterable(T[] array) {", "+    return new ObjectArrayWrapper<T>(array);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static <T> SizedIterable<T> arrayIterable(final T[] array) {", "-    class Wrapper extends AbstractIterable<T> implements SizedIterable<T> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<T> iterator() {", "-        return new IndexedIterator<T>() {", "-          protected int size() { return array.length; }", "-          protected T get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d05b83ca96331a945bf9792e4f5ec84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public static SizedIterable<Byte> arrayIterable(final byte[] array)", "signatureAfterChange": "   public static SizedIterable<Byte> asIterable(byte[] values)", "diff": ["+   */", "+  public static SizedIterable<Byte> asIterable(byte[] values) {", "+    return new ByteArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Byte> arrayIterable(final byte[] array) {", "-    class Wrapper extends AbstractIterable<Byte> implements SizedIterable<Byte> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Byte> iterator() {", "-        return new IndexedIterator<Byte>() {", "-          protected int size() { return array.length; }", "-          protected Byte get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c20e87a3e9a09ced7cebe0e6ded45db5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 104, "signatureBeforeChange": "   public static SizedIterable<Float> arrayIterable(final float[] array)", "signatureAfterChange": "   public static SizedIterable<Float> asIterable(float[] values)", "diff": ["+   */", "+  public static SizedIterable<Float> asIterable(float[] values) {", "+    return new FloatArrayWrapper(values);", "+  }", "-  /** @return  An iterable that traverses the given array */", "-  public static SizedIterable<Float> arrayIterable(final float[] array) {", "-    class Wrapper extends AbstractIterable<Float> implements SizedIterable<Float> {", "-      public int size() { return array.length; }", "-      ", "-      public boolean isFixed() { return true; }", "-      ", "-      public Iterator<Float> iterator() {", "-        return new IndexedIterator<Float>() {", "-          protected int size() { return array.length; }", "-          protected Float get(int i) { return array[i]; }", "-        };", "-      }", "-    }", "-    return new Wrapper();", "-  }"]}], "num": 6709}
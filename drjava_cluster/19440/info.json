{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33081905ea0961ee19b9a7af87f16382", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b11b359edfdbc19432bccff33d0ebe2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/ReflectUtilTest.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testCast()", "signatureAfterChange": "         public void testBox()", "diff": ["-  public void testCast() {", "-    Object o3 = LambdaUtil.nullThunk();", "-    assertEquals(\"x\", cast(String.class, o1));", "-    assertEquals((Integer) 23, cast(Integer.class, o2));", "-    assertEquals(null, t.value());", "+  ", "+  public void testBox() {", "+    assertSame(Boolean.class, box(boolean.class));", "+    assertSame(Character.class, box(char.class));", "+    assertSame(Byte.class, box(byte.class));", "+    assertSame(Short.class, box(short.class));", "+    assertSame(Integer.class, box(int.class));", "+    assertSame(Long.class, box(long.class));", "+    assertSame(Float.class, box(float.class));", "+    assertSame(Double.class, box(double.class));", "+    assertSame(Void.class, box(void.class));", "+    assertSame(Integer.class, box(Integer.class));", "+    assertSame(String.class, box(String.class));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47b63ecd348d9936ac52e54a96994567", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtilTest.java", "commitBeforeChange": "fb074680a667c1bef445c8882705c591e6d2e32a", "commitAfterChange": "cf20ebf3ed8f70fab233d795a534c6fbf0907d4b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testCharSequenceIterable()", "signatureAfterChange": "      public void testCharSequenceIterable()", "diff": ["-    assertTrue(iter.hasNext());", "-    assertEquals('H', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('a', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('p', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('p', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('y', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals(' ', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('d', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('a', iter.next());", "-    assertTrue(iter.hasNext());", "-    assertEquals('y', iter.next());", "-    assertFalse(iter.hasNext());", "+    assertIterator(iter, 'H', 'a', 'p', 'p', 'y', ' ', 'd', 'a', 'y');"]}], "num": 19440}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab330728fcc17ff427286126551f022a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f138194fa2af0de6921981f1ef5e83", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest)", "signatureAfterChange": "   public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest)", "diff": ["+  /** Create a {@link ComposedIterable} with the given arguments */", "+  public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest) {", "+    return new ComposedIterable<T>(first, rest);", "+  }", "-  /** Create a {@link ComposedIterable} with the given arguments */", "-  public static <T> ComposedIterable<T> compose(T first, Iterable<? extends T> rest) {", "-    return ComposedIterable.make(first, rest);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7548fd8f3caa03c5a1ec13162b90f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeClassLoader.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private static ClassLoader makeParent(ClassLoader p)", "signatureAfterChange": "      private static ClassLoader makeParent(ClassLoader p, Iterable<String> registeredNames)", "diff": ["-  private static ClassLoader makeParent(ClassLoader p) {", "+  private static ClassLoader makeParent(ClassLoader p, Iterable<String> registeredNames) {", "-    return new ComposedClassLoader(implementationLoader, p);", "+    // Allow shadowing by hiding parent classes redefined here", "+    ClassLoader parentLoader = new ShadowingClassLoader(p, true, registeredNames, true);", "+    return new ComposedClassLoader(implementationLoader, parentLoader);"]}], "num": 17394}
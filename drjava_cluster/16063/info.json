{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ea9243e85c9ec1a9b90533b5c2af833", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785d76a1f4481db8d982beffec7cb8e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "          public void testGetSymbolData()", "signatureAfterChange": "          public void testGetSymbolData()", "diff": ["-      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "-      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"Object\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "-      _btc.getSymbolData(\"koala\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true);", "+      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"Object\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      _btc.getSymbolData(\"koala\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "-      _btc.getSymbolData(\"Object\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true);", "+      _btc.getSymbolData(\"Object\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "+      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(SourceInfo.NO_INFO)));", "-                    new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+                    new NullLiteral(SourceInfo.NO_INFO));", "-      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(SourceInfo.NO_INFO)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3cbe99717f124e583fbf728e7eb9eb7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "          public void testGetSymbolData()", "signatureAfterChange": "          public void testGetSymbolData()", "diff": ["-      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      _btc.getSymbolData(\"koala\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "+      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, ", "+                   _btc.getSymbolData(\"zebra\", NULL_LITERAL, true, true));", "+      assertEquals(\"Should get sd from the Symboltable.\", sd, ", "+                   _btc.getSymbolData(\"java.lang.Object\", NULL_LITERAL, true, true));", "+      _btc.getSymbolData(\"koala\", NULL_LITERAL, true, true);", "-      _btc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "+      _btc.getSymbolData(\"java.lang.Object\", NULL_LITERAL, true, true);", "-      assertEquals(\"Error message should be correct\", \"The class java.lang.Object is not in the right package. Perhaps you meant to package it?\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class java.lang.Object is not in the right package. Perhaps you meant to package it?\",", "+                   errors.get(0).getFirst());", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", NULL_LITERAL, true, ", "+                                                                  true));", "-      assertEquals(\"Error message should be correct\", \"java.lang.Thread implements the Runnable interface, which is not allowed at any language level\", errors.get(1).getFirst());", "+      assertEquals(\"Error message should be correct\", \"java.lang.Thread implements the Runnable interface, \" +", "+                   \"which is not allowed at any language level\", errors.get(1).getFirst());", "-      //a class that implements Runnable, but was not user defined and is not one of our specific classes known to extend Runnable will", "-      //not give an error", "+      // a class that implements Runnable, but was not user defined and is not one of our specific classes known to ", "+      // extend Runnable will not give an error", "-      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", NULL_LITERAL, ", "+                                                                        true, true));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, ", "+                                                                        NULL_LITERAL));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, ", "+                                                                        NULL_LITERAL));", "-      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, NULL_LITERAL));", "+      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, NULL_LITERAL));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, NULL_LITERAL));", "+      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, NULL_LITERAL));", "+      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, NULL_LITERAL));", "-                    new NullLiteral(SourceInfo.NO_INFO));", "+                    NULL_LITERAL);", "-      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, NULL_LITERAL));"]}], "num": 16063}
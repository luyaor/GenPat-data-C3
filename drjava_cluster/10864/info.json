{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0136eeac42cb761bbaf73c4cf8f49179", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0ba348c2d351b61bf71e5a6c459ecf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    int lineStart = doc.getLineStartPos(here);  // find start of current line", "+    int lineStart = doc._getLineStartPos(here);  // find start of current line", "-    try { prevDelimiterPos = doc.findPrevDelimiter(lineStart, delims); }  // find pos of delimiter preceding line start", "+    try { prevDelimiterPos = doc._findPrevDelimiter(lineStart, delims); }  // find pos of delimiter preceding line start", "-        int testPos = doc.findPrevCharPos(prevDelimiterPos, ws);  // find char preceding ';' delimiter", "+        int testPos = doc._findPrevCharPos(prevDelimiterPos, ws);  // find char preceding ';' delimiter", "-        doc.setCurrentLocation(prevDelimiterPos + 1);   // move cursor to right of '}' or ')' delim", "-        prevDelimiterPos -= doc.balanceBackward() - 1;  // use matching '{' or '(' as delim", "-        doc.setCurrentLocation(here);", "+        doc._setCurrentLocation(prevDelimiterPos + 1);   // move cursor to right of '}' or ')' delim", "+        prevDelimiterPos -= doc._balanceBackward() - 1;  // use matching '{' or '(' as delim", "+        doc._setCurrentLocation(here);", "-    int indent = doc.getIndentOfCurrStmt(prevDelimiterPos, indentDelims);", "+    int indent = doc._getIndentOfCurrStmt(prevDelimiterPos, indentDelims);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4345a7b8e5971a245795ab17b179cd4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-//    int origin = doc.getCurrentLocation();", "-    int lineStart = doc.getLineStartPos(doc.getCurrentLocation());", "+    int origin = doc.getCurrentLocation();", "+    int lineStart = doc._getLineStartPos(origin);", "+    if (lineStart <= 1) return false;  // linestart follows a newLine, which must be preceded by a brace to return true", "-//    doc.setCurrentLocation(lineStart);", "-    BraceInfo info = doc.getLineEnclosingBrace();", "-//    doc.setCurrentLocation(origin);    ", "+    doc._setCurrentLocation(lineStart);", "+    BraceInfo info = doc._getLineEnclosingBrace();", "+    doc._setCurrentLocation(origin);    ", "-    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || info.distance() < 0)", "+    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || info.distance() <= 0)", "-    // Get brace's end of line", "-    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+//    // Get brace's end of line", "+    int braceEndLinePos = doc._getLineEndPos(bracePos);", "-    try { nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos); }", "+//    System.err.println(\"bracePos = \" + bracePos + \" docLength = \" + doc.getLength());", "+    try { nextNonWS = doc._getFirstNonWSCharPos(braceEndLinePos /* bracePos + 1*/); }"]}], "num": 10864}
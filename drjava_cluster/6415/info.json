{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85d8b81e2ad81e51b526e6ffeea3bee8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181b25ce548e2d4e1808ab7407e2afa8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void testSuiteEnded(JUnitError[] errors)", "signatureAfterChange": "   public void testSuiteEnded(final JUnitError[] errors)", "diff": ["-  public void testSuiteEnded(JUnitError[] errors) {", "+  public void testSuiteEnded(final JUnitError[] errors) {", "-    ", "-    List<File> files = new ArrayList<File>();", "-    for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }", "-    for(JUnitError e: errors){", "-      try {", "-        e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "-      } catch(Exception ex) { DrJavaErrorHandler.record(ex); }", "-      File f = e.file();", "-      if ((f != null) && (DrJavaFileUtils.isLLFile(f))) {", "-        String dn = DrJavaFileUtils.getJavaForLLFile(f.getName());", "-        StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "-        ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "-        e.setLineNumber(ste.getLineNumber());", "+      for(JUnitError e: errors){", "+        try {", "+          e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "+        } catch(Exception ex) { DrJavaErrorHandler.record(ex); }", "+        File f = e.file();", "+        if ((f != null) && (DrJavaFileUtils.isLLFile(f))) {", "+          String dn = DrJavaFileUtils.getJavaForLLFile(f.getName());", "+          StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "+          ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "+          e.setLineNumber(ste.getLineNumber());", "+        }", "-    }", "-    _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "-    _notifyJUnitEnded();", "-    _testInProgress = false;", "+      _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "+      _notifyJUnitEnded();", "+      _testInProgress = false;", "+    }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "555767df3ab484935f5e2a78c2d32e91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public void systemErrPrint(String s)", "signatureAfterChange": "   public void systemErrPrint(final String s)", "diff": ["-  /** Prints System.err to the DrJava console. */", "-  public void systemErrPrint(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+  /** Prints System.err to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemErrPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5805f19da912a2e3360a28d79dc212a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 237, "signatureBeforeChange": "   public void systemInEcho(String s)", "signatureAfterChange": "   public void systemInEcho(final String s)", "diff": ["-  /** Prints the given string to the DrJava console as an echo of System.in */", "-  public void systemInEcho(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    */", "+  public void systemInEcho(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598d39d1988cd9a8a2f5892ec04054cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": "   public void systemOutPrint(String s)", "signatureAfterChange": "   public void systemOutPrint(final String s)", "diff": ["-  /** Prints System.out to the DrJava console. */", "-  public void systemOutPrint(String s) {_docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+  /** Prints System.out to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemOutPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "662d28a12a9ffce273e7cf1c2d136eb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 454, "signatureBeforeChange": "   public void showTab(Component c)", "signatureAfterChange": "   public void showTab(final Component c)", "diff": ["-  public void showTab(Component c) {", "-    int numVisible = 0;", "+  public void showTab(final Component c) {", "-    // This retarded method doesn't work for our two always-on tabs,", "-    // so here's a temporary kludge.", "-    if (c == _interactionsPane) _tabbedPane.setSelectedIndex(0);", "-    else if (c == _consolePane) _tabbedPane.setSelectedIndex(1);", "-    else {", "-      for (TabbedPanel tp: _tabs) {", "-        if (tp == c) {", "-          // 2 right now is a magic number for the number of tabs always visible", "-          // interactions & console", "-          if (! tp.isDisplayed()) {", "-            _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "-            tp.setDisplayed(true);", "+    // This retarded method doesn't work for our two always-on tabs, so here's a temporary kludge.", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        int numVisible = 0;", "+        if (c == _interactionsPane) _tabbedPane.setSelectedIndex(0);", "+        else if (c == _consolePane) _tabbedPane.setSelectedIndex(1);", "+        else {", "+          for (TabbedPanel tp: _tabs) {", "+            if (tp == c) {", "+              // 2 right now is a magic number for the number of tabs always visible", "+              // interactions & console", "+              if (! tp.isDisplayed()) {", "+                _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "+                tp.setDisplayed(true);", "+              }", "+              _tabbedPane.setSelectedIndex(numVisible + 2);", "+              ", "+              c.requestFocusInWindow();", "+              return;", "+            }", "+            if (tp.isDisplayed()) numVisible++;", "-          _tabbedPane.setSelectedIndex(numVisible + 2);", "-          ", "-          c.requestFocusInWindow();", "-          return;", "-        if (tp.isDisplayed()) numVisible++;", "-    }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a6ed94cbf502175efd49e423578e1b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void _interpreterResetFailed(Throwable t)", "signatureAfterChange": "   protected void _interpreterResetFailed(final Throwable t)", "diff": ["-  protected void _interpreterResetFailed(Throwable t) {", "-    _document.insertBeforeLastPrompt(\"Reset Failed! See the console tab for details.\" + StringOps.NEWLINE,", "-                                     InteractionsDocument.ERROR_STYLE);", "-    // Print the exception to the console", "-    _model.systemErrPrint(StringOps.getStackTrace(t));", "+  protected void _interpreterResetFailed(final Throwable t) {", "+    Utilities.invokeLater(new Runnable() { ", "+      public void run() {", "+        _document.insertBeforeLastPrompt(\"Reset Failed! See the console tab for details.\" + StringOps.NEWLINE,", "+                                         InteractionsDocument.ERROR_STYLE);", "+         // Print the exception to the console", "+        _model.systemErrPrint(StringOps.getStackTrace(t));  // redundantly moves code to event thread", "+      }", "+    });", "+   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bc0b99e997674c26c9d566600422856", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 452, "signatureBeforeChange": "      public void removeTab(Component c)", "signatureAfterChange": "      public void removeTab(final Component c)", "diff": ["-  public void removeTab(Component c) {", "-    _tabbedPane.remove(c);", "-    ((TabbedPanel)c).setDisplayed(false);", "-    _tabbedPane.setSelectedIndex(0);", "-    _currentDefPane.requestFocusInWindow();", "+  public void removeTab(final Component c) {", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {  ", "+        _tabbedPane.remove(c);", "+        ((TabbedPanel)c).setDisplayed(false);", "+        _tabbedPane.setSelectedIndex(0);", "+        _currentDefPane.requestFocusInWindow();", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3f0ea76c105ff92f846b942e4a1b31c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 396, "signatureBeforeChange": "     public void interpreterChanged(boolean inProgress)", "signatureAfterChange": "     public void interpreterChanged(final boolean inProgress)", "diff": ["-    public void interpreterChanged(boolean inProgress) {", "-      _runAction.setEnabled(!inProgress);", "-      if (inProgress) _disableInteractionsPane();", "-      else _enableInteractionsPane();", "+    public void interpreterChanged(final boolean inProgress) {", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          _runAction.setEnabled(! inProgress);", "+          if (inProgress) _disableInteractionsPane();", "+          else _enableInteractionsPane();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8fc52a9128c53e9149c752473ea79dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public void classFileError(ClassFileError e)", "signatureAfterChange": "   public void classFileError(final ClassFileError e)", "diff": ["-  public void classFileError(ClassFileError e) { _notifier.classFileError(e); }", "+  public void classFileError(final ClassFileError e) { ", "+    Utilities.invokeLater(new Runnable() { public void run() {_notifier.classFileError(e); } });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a9391904d09708b67f7534d51b5641", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 237, "signatureBeforeChange": "   public void systemInEcho(String s)", "signatureAfterChange": "   public void systemInEcho(final String s)", "diff": ["-  /** Prints the given string to the DrJava console as an echo of System.in */", "-  public void systemInEcho(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    */", "+  public void systemInEcho(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf550e071d6f3916fb6a028015bc7546", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": "   public void systemOutPrint(String s)", "signatureAfterChange": "   public void systemOutPrint(final String s)", "diff": ["-  /** Prints System.out to the DrJava console. */", "-  public void systemOutPrint(String s) {_docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+  /** Prints System.out to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemOutPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddb84da753e9bd67b9fe7b33a3d3efc4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 373, "methodNumberAfterChange": 374, "signatureBeforeChange": "          public void newFileCreated(OpenDefinitionsDocument doc)", "signatureAfterChange": "          public void newFileCreated(final OpenDefinitionsDocument doc)", "diff": ["-    public void newFileCreated(OpenDefinitionsDocument doc) {", "-      _createDefScrollPane(doc);", "+    public void newFileCreated(final OpenDefinitionsDocument doc) {", "+      Utilities.invokeLater(new Runnable() { public void run() { _createDefScrollPane(doc); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfdcfc84b2294c6a8c5ed59a8e32775c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public void systemErrPrint(String s)", "signatureAfterChange": "   public void systemErrPrint(final String s)", "diff": ["-  /** Prints System.err to the DrJava console. */", "-  public void systemErrPrint(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+  /** Prints System.err to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemErrPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+    });", "+  }"]}], "num": 6415}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7def7e8cf28dfeb8a1fb3df209c8e47e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0158db0368203500758349ad9aae769b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-    // check to make sure it transitions from flat file mode to project mode well", "-    _frame.open(new FileOpenSelector() {", "-      public File[] getFiles() throws OperationCanceledException {", "-        return new File[] {_file2};", "-      }", "-    });", "+    // open a new file and make it an auxiliary file", "-    ", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    assertEquals(\"One empty document remaining\", 1, docs.size());", "+    assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "+    ", "+//    System.err.println(Arrays.toString(src));", "+//    System.err.println(Arrays.toString(aux));", "-    assertEquals(\"Wrong file name\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "+    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[0].getCanonicalPath()); // assumes reverse order", "+    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[1].getCanonicalPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5d8132e081066a8858d1a964020751", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "1f51a58fb5eb087a3de9d612fc558cbf36f82551", "commitAfterChange": "1b66bb1251187d54a875812b660c0f064ce8404e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-    FileOpenSelector _projFOS = new FileOpenSelector() {", "-      public File[] getFiles() throws OperationCanceledException {", "-        return new File[] {_projFile};", "-      }", "-    };", "+    ", "-    _frame.saveProject();", "-    _frame._closeProject();", "-    ", "+        ", "-        return new File[] {_file1};", "+        return new File[] {_file2};", "-    _frame._saveProjectHelper(_projFile);", "+    _frame.open(new FileOpenSelector() {", "+      public File[] getFiles() throws OperationCanceledException {", "+        return new File[] {_auxFile};", "+      }", "+    });", "+    ", "+    _frame._moveToAuxiliary();", "+    ", "+    _frame.saveProject();", "+    _frame._closeProject();", "+    ", "-    DocFile[] dfs = pfir.getSourceFiles();", "-    assertEquals(\"Number of saved src files\", 1, dfs.length);", "-    assertEquals(\"Wrong file name,\", _file1, dfs[0]);", "+    DocFile[] src = pfir.getSourceFiles();", "+    DocFile[] aux = pfir.getAuxiliaryFiles();", "+    assertEquals(\"Number of saved src files\", 2, src.length);", "+    assertEquals(\"Number of saved aux files\", 1, aux.length);", "+    assertEquals(\"Wrong file name,\", _file1, src[0]);", "+    assertEquals(\"Wrong aux file\", _auxFile, aux[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81f2258097ebd789cf3cb61b29b6613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "16e33a14d9ce477435e70d3dc8dd69757f5a9720", "commitAfterChange": "82b3ca10673b4b0cfccf8adf1834262d94bfb58d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testSaveProject()", "signatureAfterChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "diff": ["-  public void testSaveProject() {", "-    FileOpenSelector fos = new FileOpenSelector() {", "+  public void testSaveProject() throws IOException, MalformedProjectFileException{", "+    FileOpenSelector _projFOS = new FileOpenSelector() {", "-    // right now it's checking to make sure this doensn't throw exceptions", "-    _frame.openProject(fos);", "+    _frame.openProject(new FileOpenSelector() {", "+      public File[] getFiles() throws OperationCanceledException {", "+        return new File[] {_projFile};", "+      }", "+    });", "+    _frame._closeProject();", "+    ", "+    // check to make sure it transitions from flat file mode to project mode well", "+    _frame.open(new FileOpenSelector() {", "+      public File[] getFiles() throws OperationCanceledException {", "+        return new File[] {_file1};", "+      }", "+    });", "+    _frame._saveProjectHelper(_projFile);", "+    ProjectFileIR pfir = ProjectFileParser.ONLY.parse(_projFile);", "+    DocFile[] dfs = pfir.getSourceFiles();", "+    assertEquals(\"Number of saved src files\", 1, dfs.length);", "+    assertEquals(\"Wrong file name,\", _file1, dfs[0]);"]}], "num": 30395}
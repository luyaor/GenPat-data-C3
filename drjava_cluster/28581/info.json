{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60a356a9b8c584778935676a970ecbc9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16179ccf8846dbd13c7e9340f708cb9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "commitAfterChange": "b1aa79fb7a1aab3c0f34f51e168c7e7a945d8cf6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "   private synchronized void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "diff": ["-      for (int i = 0; i < files.length; i++) {", "-        String fileName = files[i].getAbsolutePath();", "+      // The hashset is used to make sure we never send in duplicate files. This can happen if", "+      // the java file was sent in allong with the corresponding .dj* file. The dj* file", "+      // is renamed to a .java file and thus we have two of the same file in the list.  By", "+      // adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+      HashSet<File> javaFileSet = new HashSet<File>();", "+      for (File f : files) {", "+        File canonicalFile;", "+        try {", "+          canonicalFile = f.getCanonicalFile();", "+        } catch(IOException e) {", "+          canonicalFile = f.getAbsoluteFile();", "+        }", "+        String fileName = canonicalFile.getPath();", "-          files[i] = new File(fileName.substring(0, lastIndex) + \".java\");", "+          javaFileSet.add(new File(fileName.substring(0, lastIndex) + \".java\"));", "+        }", "+        else {", "+          javaFileSet.add(canonicalFile);", "+      files = javaFileSet.toArray(new File[0]);", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c64001c673e09afd59da9823b3c5a2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "e433bba86704c86b158b09f6c33458c252eb4b1b", "commitAfterChange": "009201ea5473f7ca59ef7e83c1f67ec0f1be92b0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-        // Add the string pathSep to _filesToOpen if _showDebugConsole is true", "-        if (_showDebugConsole) _filesToOpen.add(pathSep);  // THIS IS A KLUDGE TO PASS THIS BOOLEAN FLAG TO DrJava", "+        LinkedList<String> classArgsList = new LinkedList<String>();", "+        // need to make the paths absolute since the working directory might change", "+        for(String fn: _filesToOpen) {", "+            classArgsList.add(new File(fn).getAbsolutePath());", "+        }", "+", "+        // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "+        if (_showDebugConsole) classArgsList.add(0,\"-debugConsole\");", "-        String[] classArgs = _filesToOpen.toArray(new String[0]);", "+        if (!_propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "+          classArgsList.add(0,\"-config\");", "+          // need to make the paths absolute since the working directory might change", "+          classArgsList.add(1,_propertiesFile.getAbsolutePath());", "+        }", "+        String[] classArgs = classArgsList.toArray(new String[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3d5fc1842e581206f30cfeee67cf4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5c952c5847e3008cec3ed5ff89d03d335c050f54", "commitAfterChange": "e3e56a8c058b51612dfa6f1f21259a37eadcdcbb", "methodNumberBeforeChange": 170, "methodNumberAfterChange": 170, "signatureBeforeChange": "   private void _setCurrentDirectory(File file)", "signatureAfterChange": "   private void _setCurrentDirectory(File file)", "diff": ["-    _openChooser.setCurrentDirectory(file.getAbsoluteFile());", "-    _saveChooser.setCurrentDirectory(file.getAbsoluteFile());", "-    _javadocChooser.setCurrentDirectory(file.getAbsoluteFile());", "+    // We want to use absolute paths whenever possible, since canonical paths", "+    //  resolve symbolic links and can be quite long and unintuitive.", "+    // However, Windows blows up if you set the current directory of a", "+    //  JFileChooser to an absolute path with \"..\" in it.", "+    // In that case, we'll use the canonical path for the file chooser.", "+    // (Fix for bug 707734)", "+    try {", "+      File f = file.getAbsoluteFile();", "+      if (PlatformFactory.ONLY.isWindowsPlatform() &&", "+          (file.getAbsolutePath().indexOf(\"..\") != -1)) {", "+        f = file.getCanonicalFile();", "+      }", "+      _openChooser.setCurrentDirectory(f);", "+      _saveChooser.setCurrentDirectory(f);", "+      _javadocChooser.setCurrentDirectory(f);", "+    }", "+    catch (IOException ioe) {", "+      // If getCanonicalFile throws an IOException, we can't", "+      //  set the directory of the file chooser.  Oh well.", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ffd6be9b56461e4a261282537231f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private static boolean endsWithExt(File f, String[] exts)", "signatureAfterChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<? super CompilerError> errors)", "diff": ["-  /** Determines if file f ends with one of the extensions in exts. */", "-  private static boolean endsWithExt(File f, String[] exts) {", "-    for (String ext: exts) { if (f.getName().endsWith(ext)) return true; }", "-    return false;", "+    */", "+  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<? super CompilerError> errors) {", "+    // TODO: The classpath (and sourcepath, bootclasspath) should be an argument passed to Language Levels.", "+    LanguageLevelConverter llc = new LanguageLevelConverter(getActiveCompiler().getName());", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "+      llc.convert(files.toArray(new File[0]));", "+    ", "+    /* Rename any .dj0 files in files to be .java files, so the correct thing is compiled.  The hashset is used to ", "+     * make sure we never send in duplicate files. This can happen if the java file was sent in along with the ", "+     * corresponding .dj* file. The dj* file is renamed to a .java file and thus we have two of the same file in ", "+     * the list.  By adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+     */", "+    HashSet<File> javaFileSet = new HashSet<File>();", "+    boolean containsLanguageLevels = false;", "+    for (File f : files) {", "+      File canonicalFile = FileOps.getCanonicalFile(f);", "+      String fileName = canonicalFile.getPath();", "+      int lastIndex = fileName.lastIndexOf(\".dj\");", "+      if (lastIndex != -1) {", "+        containsLanguageLevels = true;", "+        javaFileSet.add(new File(fileName.substring(0, lastIndex) + \".java\"));", "+      }", "+      else { javaFileSet.add(canonicalFile); }", "+    }", "+    files = new LinkedList<File>(javaFileSet);", "+    ", "+    errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "+    errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "+    if (containsLanguageLevels) { return files; }", "+    else { return null; }"]}], "num": 28581}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fd11b8293821d691f8133b7f6aa9c63", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d476ba8f46f745183ec65fe3a43cc4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public Class<?> visit(ObjectMethodCall node)", "signatureAfterChange": "   public Type visit(ObjectMethodCall node)", "diff": ["-  public Class<?> visit(ObjectMethodCall node) {", "+  public Type visit(ObjectMethodCall node) {", "-    Class<?>      c   = exp.acceptVisitor(this);", "-    String     mn  = node.getMethodName();", "-", "-    if (!c.isArray() || (c.isArray() && !mn.equals(\"clone\"))) {", "+    Type      c1   = exp.acceptVisitor(this);", "+    Class<?>   c   = (Class<?>)c1;", "+    String    mn   = node.getMethodName();", "+    ", "+    if (!c.isArray() || c.isArray() && !mn.equals(\"clone\")) {", "-      Class<?>[] cargs = Constants.EMPTY_CLASS_ARRAY;", "+      Class<?>[] cargs = Constants.EMPTY_CLASS_ARRAY;        ", "-          cargs[i++] = it.next().acceptVisitor(this);", "+          cargs[i++] = (Class<?>)it.next().acceptVisitor(this);", "+        ", "+        ", "-", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5846d17f5f674e2c1a7ea1272b3827a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public Class<?> visit(SimpleAllocation node)", "signatureAfterChange": "   public Type visit(SimpleAllocation node)", "diff": ["-  public Class<?> visit(SimpleAllocation node) {", "+  public Type visit(SimpleAllocation node) {", "-    Class<?> c  = type.acceptVisitor(this);", "-", "+    Type c1  = type.acceptVisitor(this);", "+    Class<?> c = (Class<?>)c1;", "+    ", "-", "+    ", "-", "+      ", "-        cargs[i++] = it.next().acceptVisitor(this);", "+        cargs[i++] = (Class<?>)it.next().acceptVisitor(this);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a449ee3ece5ecd3f9850557b482aa541", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public Class<?> visit(ClassAllocation node)", "signatureAfterChange": "   public Type visit(ClassAllocation node)", "diff": ["-  public Class<?> visit(ClassAllocation node) {", "+  public Type visit(ClassAllocation node) {", "-      Class<?>   ct   = ctn.acceptVisitor(this);", "+      Type   ct1   = ctn.acceptVisitor(this);", "+      Class<?> ct = (Class<?>)ct1;", "-", "+      ", "-          args[i++] = it.next().acceptVisitor(this);", "+          args[i++] = (Class<?>)it.next().acceptVisitor(this);"]}], "num": 10460}
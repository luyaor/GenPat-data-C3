{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f5ed3aa503fcc1da206a34b4e6fdd84", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dca58b6225b57e95fb750116b6e27f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": "     protected DefinitionsDocument getDocument()", "signatureAfterChange": "     protected DefinitionsDocument getDocument()", "diff": ["-", "-//      Utilities.showDebug(\"getDocument() called on \" + this);", "-      catch(IOException ioe) {", "-//        Utilities.showDebug(\"getDocument() failed for \" + this);", "-        try {", "-          _notifier.documentNotFound(this, _file);", "-          if (! isUntitled())  ", "-            _documentNavigator.refreshDocument(this, _file.getCanonicalFile().getParent());", "-          else throw new UnexpectedException(ioe); // Is this line reachable?", "-          ", "-        } catch(Throwable t) { throw new UnexpectedException(t); }", "-        //  System.out.println(\"DefaultGlobalModel: 1432: IOException should be handled by box that fixes everything.\");", "+      catch(IOException ioe) { ", "+        try { // file has evidently been moved since document was loaded", "+          if (isUntitled()) throw new UnexpectedException(ioe);", "+          _askUserToLocateFile(); ", "+          return _cacheAdapter.getDocument(); // will succeed if user located file", "+        }", "+        catch(IOException e) { throw new UnexpectedException(e); }", "+    }", "-      return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84b387397248df33a9842ec7d0757e81", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "481944e3395dcc7a19e81902c59977be65ba633a", "commitAfterChange": "c682fca099b13e765e0e1f201629222d04fb1339", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 132, "signatureBeforeChange": "   public OpenDefinitionsDocument getPrevDocument(AbstractDocumentInterface d)", "signatureAfterChange": "   public OpenDefinitionsDocument getPrevDocument(AbstractDocumentInterface d)", "diff": ["-    try {", "+    OpenDefinitionsDocument prevdoc = null;  // irrelevant initialization required by javac", "+//    try {", "-      OpenDefinitionsDocument nextdoc = _documentNavigator.getPrevious(doc);", "-      if (nextdoc != doc) return getPrevDocHelper(nextdoc);", "-      // we're at the end, so we need to rewind", "-      // and return doc at the very beginning", "-      do {", "-        doc = nextdoc;", "-        nextdoc = _documentNavigator.getNext(doc);", "-      } while (nextdoc != doc);", "-      return getPrevDocHelper(nextdoc);", "-    }", "-    catch(DocumentClosedException dce) { return getPrevDocument(d); }  // doesn't this line create an infinite loop?", "+      prevdoc = _documentNavigator.getPrevious(doc);", "+      if (prevdoc == doc) prevdoc = _documentNavigator.getLast(); // wrap around if necessary", "+      return getPrevDocHelper(prevdoc);", "+//    }", "+//    catch(DocumentClosedException dce) { return getPrevDocument(prevdoc); }"]}], "num": 3958}
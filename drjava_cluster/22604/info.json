{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cead0b1a509b70ead81fc26a7648a14c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a884598283c242ae16a72ad242f1e2eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "b796c376864058d232f1be02ccfb0bd7548b3f89", "commitAfterChange": "ba6275930e25f1b0898c45319a21c16860b3e177", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "     public void runMain()       throws ClassNameNotFoundException, IOException", "signatureAfterChange": "     public void runMain()       throws ClassNameNotFoundException, IOException", "diff": ["-        // Prompt to save and compile if document is modified.", "+        // Prompt to save and compile if any document is modified.", "-          else {", "-            // The user chose to compile, so do so.", "-            this.startCompile();", "-            ", "-            // If the compile had errors, abort the run.", "-            synchronized(_compilerLock) {", "-              if (!_compilerErrorModel.hasOnlyWarnings()) {", "-                return;", "-              }", "-            }", "-          }", "+        // If no document is modified, still compile the current doc.", "+        this.startCompile();", "-        // Make sure that the compiler is done before starting run.", "+        // Make sure that the compiler is done before continuing.", "+          // If the compile had errors, abort the run.", "+          if (!_compilerErrorModel.hasOnlyWarnings()) {", "+            return;", "+          }", "+          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6b139fba25a25361c68883ca01647b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "db0f15071978e90a34b717520b233bb7aaf1c97a", "commitAfterChange": "fdcbc942eddfd6ff92fe750cda9018e6f1a4d3ed", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _calculatePositions()", "signatureAfterChange": "   private void _calculatePositions()", "diff": ["-        if (curError >= _numErrors) {break;} ", "+        if (curError >= _numErrors) {break;}", "+          // skip positions for these errors if the document couldn't be loaded", "-            // skip positions for these errors if the document couldn't be loaded", "-            do { curError++;} ", "-            while ((curError < _numErrors) && (_errors[curError].file().equals(file)));", "-            ", "-            //If the document couldn't be loaded, start the loop over at the top", "-            continue;", "+            document = null;", "+        }", "+        if (document==null) {", "+          do { curError++;}", "+          while ((curError < _numErrors) && (_errors[curError].file().equals(file)));", "+          //If the document couldn't be loaded, start the loop over at the top", "+          continue;", "-          // create new positions for all errors on this line          ", "+          // create new positions for all errors on this line", "-          ", "+", "-        "]}], "num": 22604}
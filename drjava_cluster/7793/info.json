{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52ae72553d54f1eaefe57687844345b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db437a3070a6f3f9d7204bae2fec197", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/LocalContext.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private DJClass declaredClass(String name)", "signatureAfterChange": "      private DJClass declaredClass(String name)", "diff": ["-      if (c.declaredName().equals(name)) { return c; }", "+      if (!c.isAnonymous() && c.declaredName().equals(name)) { return c; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aead5ac3471b8137bc743b63d900c88", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassContext.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   @Override public DJClass getThis(String className)", "signatureAfterChange": "   @Override public DJClass getThis(String className)", "diff": ["-    if (className.equals(_c.declaredName())) { return _c; }", "+    if (!_c.isAnonymous() && className.equals(_c.declaredName())) { return _c; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1cf4b55b67d936300a3df85e3d6d44f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Void forAbstractMethodDefDoFirst(AbstractMethodDef that)", "signatureAfterChange": "   public Void forAbstractMethodDefDoFirst(AbstractMethodDef that)", "diff": ["-  /* Make sure that this abstract method def is declared to be abstract*/", "+  /** Ignore AbstractMake sure that this abstract method def is declared to be abstract. */", "-    if (! _classData.hasModifier(\"abstract\")) {", "-      _addError(\"Abstract methods can only be declared in abstract classes\", that);", "-    }", "+", "-//    // Concrete methods can now be public, private, protected at the Intermediate level.  They still cannot be static.", "-//    for (int i = 0; i < modifiers.length; i++) {", "-//      if (modifiers[i].equals(\"static\")) {", "-//        _addError(\"Static methods cannot be used at the Intermediate level\", that);", "-//        break;", "-//      }", "-//    }", "+    if (! _classData.isInterface() && ! _classData.hasModifier(\"abstract\")) { // interfaces not yet marked abstract", "+      _addError(\"Abstract methods can only be declared in abstract classes\", that);", "+    }"]}], "num": 7793}
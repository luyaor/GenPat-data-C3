{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d056743dba21cc97f5db6120a218495c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61bac218cef3d140d9b39f63730446a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "29ec68db51be49631902c1a08dc8658c156745b6", "commitAfterChange": "ab72d5391a7476aed8a2fc83f5cb9b83bb5fe1d3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public DefinitionsPane(MainFrame mf,                          GlobalModel model,                          OpenDefinitionsDocument doc)", "signatureAfterChange": "   public DefinitionsPane(MainFrame mf,                          GlobalModel model,                          OpenDefinitionsDocument doc)", "diff": ["+ ", "+    DrJava.CONFIG.addOptionListener( OptionConstants.DEFINITIONS_MATCH_COLOR, new MatchColorOptionListener());", "+        ", "-      DrJava.CONFIG.addOptionListener( OptionConstants.DEFINITIONS_MATCH_COLOR, new MatchColorOptionListener());", "+      createPopupMenu();", "+      ", "+      //Add listener to components that can bring up popup menus.", "+      _popupMenuMA = new PopupMenuMouseAdapter();", "+      this.addMouseListener( _popupMenuMA );", "+      ", "+      _highlightManager = new HighlightManager(this);", "+     ", "+  }", "-    //don't forget to remove this, or at least make it more intelligent", "-    if (_mainFrame.getModel().getDebugManager() != null) {", "-      _popMenu.addSeparator();", "-      _toggleBreakpointMenuItem = _popMenu.add(_mainFrame._toggleBreakpointAction);", "-      _toggleBreakpointMenuItem.setEnabled(false);", "-    }", "-    //Add listener to components that can bring up popup menus.", "-    this.addMouseListener( new MouseAdapter() {", "-      public void mousePressed(MouseEvent e) {", "-        setCaretPosition(viewToModel(e.getPoint()));", "-        maybeShowPopup(e);", "-        if (_toggleBreakpointMenuItem != null) {", "-          _toggleBreakpointMenuItem.setEnabled(_mainFrame.inDebugMode());", "-        }", "-      }", "-      ", "-      public void mouseReleased(MouseEvent e) {", "-        maybeShowPopup(e);", "-      }", "-      ", "-      private void maybeShowPopup(MouseEvent e) {", "-        if (e.isPopupTrigger()) {", "-          _popMenu.show(e.getComponent(),", "-                        e.getX(), e.getY());", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "addcace3c05817d7d2e2e60cc16de554", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ef93e6cc3a79f29ed28debb1108f1338b9a974ad", "commitAfterChange": "76157e15bbd52f4d2639058382773284b7c9c0bd", "methodNumberBeforeChange": 570, "methodNumberAfterChange": 570, "signatureBeforeChange": "   private JMenu _setUpLanguageLevelMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpLanguageLevelMenu(int mask)", "diff": ["-    if (currentLanguageLevel == DrJavaRoot.FULL_JAVA) { rbMenuItem.setSelected(true); }", "+    rbMenuItem.setSelected(true); // by default select Full Java", "-        config.setSetting(LANGUAGE_LEVEL, DrJavaRoot.FULL_JAVA);", "+        config.setSetting(LANGUAGE_LEVEL, OptionConstants.FULL_JAVA);", "-    rbMenuItem = new JRadioButtonMenuItem(\"Elementary\");", "-    rbMenuItem.setToolTipText(\"Use Elementary language-level features\");", "-    if (currentLanguageLevel == DrJavaRoot.ELEMENTARY_LEVEL) { rbMenuItem.setSelected(true); }", "-    rbMenuItem.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        config.setSetting(LANGUAGE_LEVEL, DrJavaRoot.ELEMENTARY_LEVEL);", "-      }});", "-    group.add(rbMenuItem);", "-    languageLevelMenu.add(rbMenuItem);", "+//    rbMenuItem = new JRadioButtonMenuItem(\"Elementary\");", "+//    rbMenuItem.setToolTipText(\"Use Elementary language-level features\");", "+//    if (currentLanguageLevel == OptionConstants.ELEMENTARY_LEVEL) { rbMenuItem.setSelected(true); }", "+//    rbMenuItem.addActionListener(new ActionListener() {", "+//      public void actionPerformed(ActionEvent e) {", "+//        config.setSetting(LANGUAGE_LEVEL, OptionConstants.ELEMENTARY_LEVEL);", "+//      }});", "+//    group.add(rbMenuItem);", "+//    languageLevelMenu.add(rbMenuItem);", "+//    ", "+//    rbMenuItem = new JRadioButtonMenuItem(\"Intermediate\");", "+//    rbMenuItem.setToolTipText(\"Use Intermediate language-level features\");", "+//    if (currentLanguageLevel == OptionConstants.INTERMEDIATE_LEVEL) { rbMenuItem.setSelected(true); }", "+//    rbMenuItem.addActionListener(new ActionListener() {", "+//      public void actionPerformed(ActionEvent e) {", "+//        config.setSetting(LANGUAGE_LEVEL, OptionConstants.INTERMEDIATE_LEVEL);", "+//      }});", "+//    group.add(rbMenuItem);", "+//    languageLevelMenu.add(rbMenuItem);", "+//    ", "+//    rbMenuItem = new JRadioButtonMenuItem(\"Advanced\");", "+//    rbMenuItem.setToolTipText(\"Use Advanced language-level features\");", "+//    if (currentLanguageLevel == OptionConstants.ADVANCED_LEVEL) { rbMenuItem.setSelected(true); }", "+//    rbMenuItem.addActionListener(new ActionListener() {", "+//      public void actionPerformed(ActionEvent e) {", "+//        config.setSetting(LANGUAGE_LEVEL, OptionConstants.ADVANCED_LEVEL);", "+//      }});", "+//    group.add(rbMenuItem);", "+//    languageLevelMenu.add(rbMenuItem);", "-    rbMenuItem = new JRadioButtonMenuItem(\"Intermediate\");", "-    rbMenuItem.setToolTipText(\"Use Intermediate language-level features\");", "-    if (currentLanguageLevel == DrJavaRoot.INTERMEDIATE_LEVEL) { rbMenuItem.setSelected(true); }", "+    rbMenuItem = new JRadioButtonMenuItem(\"Functional Java\");", "+    rbMenuItem.setToolTipText(\"Use Functional Java language-level features\");", "+    if (currentLanguageLevel == OptionConstants.FUNCTIONAL_JAVA_LEVEL) { rbMenuItem.setSelected(true); }", "-        config.setSetting(LANGUAGE_LEVEL, DrJavaRoot.INTERMEDIATE_LEVEL);", "-      }});", "-    group.add(rbMenuItem);", "-    languageLevelMenu.add(rbMenuItem);", "-    ", "-    rbMenuItem = new JRadioButtonMenuItem(\"Advanced\");", "-    rbMenuItem.setToolTipText(\"Use Advanced language-level features\");", "-    if (currentLanguageLevel == DrJavaRoot.ADVANCED_LEVEL) { rbMenuItem.setSelected(true); }", "-    rbMenuItem.addActionListener(new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        config.setSetting(LANGUAGE_LEVEL, DrJavaRoot.ADVANCED_LEVEL);", "+        config.setSetting(LANGUAGE_LEVEL, OptionConstants.FUNCTIONAL_JAVA_LEVEL);"]}], "num": 19816}
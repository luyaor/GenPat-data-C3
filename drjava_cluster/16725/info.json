{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9505cc4fd6651a98f261d4e9954abab6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2850137c6686b55e9b5aada428d311a2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ClassBodyTypeChecker(SymbolData sd, File file, String packageName, LinkedList<String> importedFiles,                                LinkedList<String> importedPackages, LinkedList<VariableData> vars,                                LinkedList<Pair<SymbolData, JExpression>> thrown)", "signatureAfterChange": "   public ClassBodyTypeChecker(SymbolData sd, File file, String packageName, LinkedList<String> importedFiles,                                LinkedList<String> importedPackages, LinkedList<VariableData> vars,                                LinkedList<Pair<SymbolData, JExpression>> thrown)", "diff": ["-    _vars.addAll(sd.getVars());", "+    LinkedList<VariableData> classVars = sd.getVars();", "+    ", "+//    for (VariableData vd: classVars) {", "+//      if (vd.isFinal() && vd.gotValue()) thingsThatHaveBeenAssigned.addLast(vd);", "+//    }", "+    ", "+    _vars.addAll(classVars);", "-    for (int i = 0; i<superVars.size(); i++) {", "-      VariableData tempVD = superVars.get(i);", "-      if (tempVD.isFinal() && tempVD.gotValue())", "-        thingsThatHaveBeenAssigned.addLast(tempVD);", "+    for (VariableData vd: superVars) {", "+      if (vd.isFinal() && vd.gotValue()) thingsThatHaveBeenAssigned.addLast(vd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c22b950a70dbffe3ac36a19105f257", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void _handleThreadDeathEvent(ThreadDeathEvent e)", "signatureAfterChange": "      private void _handleThreadDeathEvent(ThreadDeathEvent e)", "diff": ["-    if (e.thread().equals(_manager.getCurrentThread())) {", "+    /** no need to check if there are suspended threads on the stack", "+     * because all that logic should be in the debugger", "+     */", "+    if(e.thread().equals(_manager.getCurrentRunningThread())) {", "+      EventRequestManager erm = _vm.eventRequestManager();", "+      List steps = erm.stepRequests();", "+      for (int i = 0; i < steps.size(); i++) {", "+        StepRequest step = (StepRequest)steps.get(i);", "+        if (step.thread().equals(e.thread())) {", "+          erm.deleteEventRequest(step);", "+          break;", "+        }", "+      }", "-      _manager.setCurrentThread(null);"]}], "num": 16725}
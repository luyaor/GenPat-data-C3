{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fcb99a6be567ec9ce01fad75b0a4b9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4346318967782c48fe973a27b289f821", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/platform/DefaultPlatform.java", "commitBeforeChange": "e00a80132d9c599630e60c288ab824f99427e68b", "commitAfterChange": "17590567cb9f06269b33249dad955c39164a9028", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public boolean openURL(URL address)", "signatureAfterChange": "   public boolean openURL(URL address)", "diff": ["-    String args = config.getSetting(OptionConstants.BROWSER_STRING);", "+    String command = config.getSetting(OptionConstants.BROWSER_STRING);", "-    if ((exe == FileOption.NULL_FILE) && (args.equals(\"\"))) {", "+    if ((exe == FileOption.NULL_FILE) && (command.equals(\"\"))) {", "+      String addr = address.toString();", "+      if (command.equals(\"\")) {", "+        // If there is no command, simply use the URL.", "+        command = addr;", "+      }", "+      else {", "+        // Otherwise, replace any <URL> tags in the command with the address.", "+        String tag = \"<URL>\";", "+        command = StringOps.replace(command, tag, addr);", "+      }", "+      ", "-      List<String> command = ArgumentTokenizer.tokenize(args);", "-      command.add(0, exe.getAbsolutePath());", "-      command.add(address.toString());", "+      List<String> args = ArgumentTokenizer.tokenize(command);", "+      ", "+      // Prepend the file only if it exists.", "+      if (exe != FileOption.NULL_FILE) {", "+        args.add(0, exe.getAbsolutePath());", "+      }", "-        Runtime.getRuntime().exec(command.toArray(new String[command.size()]));", "+        Runtime.getRuntime().exec(args.toArray(new String[args.size()]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca3cf0fcce4b0ab6af3ab36802432f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "commitAfterChange": "880c4e5564712cd25400295c6a42774ca709acb6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled)", "diff": ["+  }", "+  public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled) {", "+      ", "+        ", "+      if (!c2.isPrimitive() && !autoBoxEnabled) {", "+        // We know autoboxing/unboxing is required but", "+        // the version of java doesn't support it", "+        throw new WrongVersionException(\"Auto-unboxing only supported in Java 1.5 or better\");", "+      }", "+      else {", "+        // unbox the second type (may not change)", "+        c2 = _correspondingPrimType(c2);", "+      }", "+      ", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == char.class;", "-        } else if (c1 == long.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class;", "-        } else if (c1 == short.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == char.class);", "+        } ", "+        else if (c1 == long.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class);", "+        } ", "+        else if (c1 == short.class) {", "-        } else if (c1 == float.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class;", "-        } else if (c1 == double.class) {", "-          return c2 == byte.class  ||", "-            c2 == short.class ||", "-            c2 == int.class   ||", "-            c2 == long.class  ||", "-            c2 == float.class;", "-        } else {", "+        } ", "+        else if (c1 == float.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class);", "+        } ", "+        else if (c1 == double.class) {", "+          return (c2 == byte.class  ||", "+                  c2 == short.class ||", "+                  c2 == int.class   ||", "+                  c2 == long.class  ||", "+                  c2 == float.class);", "+        } ", "+        else { // it's a boolean && c1 != c2", "-      } else {", "+      }", "+      else { // c1 == c2", "-    } else {", "+    }", "+    else { // It's a reference type", "+      if (c2 != null && c2.isPrimitive()) {", "+        if (!autoBoxEnabled) {", "+           throw new WrongVersionException(\"Auto-boxing/unboxing is only supported in Java 1.5 or better\");", "+        }", "+        c2 = _correspondingBoxingType(c2);", "+      }"]}], "num": 23028}
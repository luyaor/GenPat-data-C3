{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38f3762f339c65e07a036e5592e71730", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "162fc3e6d1c6eabb06b625430a4111cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/EditExternalDialog.java", "commitBeforeChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "commitAfterChange": "91734830bfc37ccb85bb6b7693b74ec1fa3e1c29", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public void updateList(int selectedIndex)", "signatureAfterChange": "   public void updateList(int selectedIndex)", "diff": ["+    _upAction.setEnabled((_list.getModel().getSize()>0) &&", "+                         (_list.getSelectedIndex()>0));", "+    _downAction.setEnabled((_list.getModel().getSize()>0) &&", "+                           (_list.getSelectedIndex()<_list.getModel().getSize()-1));", "+    _exportButton.setEnabled(names.size()>0);", "+    _exportAction.setEnabled(names.size()>0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9098692404ff06108e8d8d053fa0fb84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/BreakpointsPanel.java", "commitBeforeChange": "e48d5f3129b8001e5afe1a32af197a9281189fe3", "commitAfterChange": "7c30ebf6c2ad7a3fa703d87cd5aaa9a3fff06bee", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected void updateButtons()", "signatureAfterChange": "   protected void updateButtons()", "diff": ["-    Breakpoint r = getSelectedRegion();", "-    boolean enable = (r != null);", "-    _goToButton.setEnabled(enable);", "-    _enableDisableButton.setEnabled(enable && (r instanceof Breakpoint));", "-    _removeButton.setEnabled(enable);", "-    if (enable && (r instanceof Breakpoint)) {", "-      if (((Breakpoint)r).isEnabled()) {", "+    ArrayList<Breakpoint> regs = getSelectedRegions();", "+    _goToButton.setEnabled(regs.size()==1);", "+    _removeButton.setEnabled(regs.size()>0);", "+    _removeAllButton.setEnabled((_regionRootNode!=null) && (_regionRootNode.getDepth()>0));", "+    _enableDisableButton.setEnabled(regs.size()>0);", "+    if ((regs.size()>0) && (regs.get(0) instanceof Breakpoint)) {", "+      if (((Breakpoint)regs.get(0)).isEnabled()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b617fdfb35d557cf2ab11503250d4728", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "commitAfterChange": "42161d6697319e0431a875a1f8336eb6cdd1fe73", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized void testBreakpointsNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-  public synchronized void testBreakpointsNonPublicClasses() ", "+  public synchronized void testBreakpointsAndStepsInNonPublicClasses() ", "-    BreakpointTestListener debugListener = new BreakpointTestListener();", "+    StepTestListener debugListener = new StepTestListener();", "-      ", "+    ", "+    // Step to next line", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"****\"+getInteractionsText());", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(2); // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    assertInteractionsContains(\"Baz Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-    debugListener.assertCurrThreadResumedCount(1);  //fires (no waiting)", "+    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "-    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(3);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "-    assertInteractionsContains(\"Baz Line 1\");", "-    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "+    debugListener.assertCurrThreadResumedCount(3);  //fires (no waiting)", "-    debugListener.assertThreadLocationUpdatedCount(2);", "-    debugListener.assertCurrThreadSuspendedCount(2);", "+    debugListener.assertThreadLocationUpdatedCount(3);", "+    debugListener.assertCurrThreadSuspendedCount(3);"]}], "num": 11946}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8778309d2ff8ba0596ebf58ee21c54e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab24c4719bb462d2330c3e3867b28039", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "27c256ec9281e0464172656b15ccb73506c1cbc1", "commitAfterChange": "efe2cdfa860877c37343dbc5d29e380b33344492", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "diff": ["-   */", "-  public void loadHistory(FileOpenSelector selector) throws IOException {", "-    ", "-    try {", "-      files = selector.getFiles();", "-    }", "-    catch (OperationCanceledException oce) {", "-      return;", "-      // don't need to do anything", "-    }", "-    Vector<String> strings = new Vector<String>();", "-        ", "-                text += currString + _newLine;", "-                text += currString + _newLine;", "-      _document.clearCurrentInteraction();", "-      // Crop off the last newline", "-      text.trim();", "-", "-      // Insert into the document and interpret", "-      _docAppend(text, InteractionsDocument.DEFAULT_STYLE);", "-      interpretCurrentInteraction();", "+   */", "+  public void loadHistory(FileOpenSelector selector) throws IOException {", "+    ArrayList<String> histories;", "+    try {", "+      histories = _getHistoryText(selector);", "+    }", "+    catch (OperationCanceledException oce) {", "+      return;", "+    }", "+    _document.clearCurrentInteraction();", "+", "+    // Insert into the document and interpret", "+    StringBuffer buf = new StringBuffer();", "+    for (int i = 0; i < histories.size(); i++) {", "+      ArrayList<String> interactions = _removeSeparators(histories.get(i));", "+      for (int j = 0; j < interactions.size(); j++) {", "+        String curr = interactions.get(j);", "+        int len = curr.length();", "+        buf.append(curr);", "+        if (len > 0 && curr.charAt(len - 1) != ';') {", "+          buf.append(';');", "+        }", "+        buf.append(_newLine);", "+      }", "+    }", "+    _docAppend(buf.toString().trim(), InteractionsDocument.DEFAULT_STYLE);", "+    interpretCurrentInteraction();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c05593fb1023cd1c242bcbc0d6b6b411", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "          public void testCheckAccessibility()", "signatureAfterChange": "          public void testCheckAccessibility()", "diff": ["+      String sd3Name = _sd3.getName();", "+      String sd6Name = _sd6.getName();", "+", "-      assertTrue(\"checkAccessibility with public mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and different packages\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertTrue(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccess with public mav and same package\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertTrue(\"checkAccess with public mav and different packages\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with public mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertTrue(\"checkAccess for a class and a class it is not related to\", ", "+                 _btc.checkAccess(NULL_LITERAL, _publicMav, sd6Name, _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with protected mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with protected mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccess with protected mav and same package\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccess with protected mav and different package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with protected mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccess with protected mav and is super class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _protectedMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccess for a class and a class it is not related to\", ", "+                  _btc.checkAccess(NULL_LITERAL, _protectedMav, sd6Name, _sd2, _sd4, \"class\"));", "-      ", "-      assertFalse(\"checkAccessibility with private mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with private mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertFalse(\"checkAccess with private mav and same package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccess with private mav and different package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with private mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertFalse(\"checkAccess with private mav and is super class\",", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertEquals(\"The last error message should be correct\", \"The field fieldOfDreams is private and cannot be accessed from \" + _sd6.getName(), errors.getLast().getFirst());", "-      assertTrue(\"checkAccessibility with private mav and same file\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertEquals(\"The last error message should be correct\", ", "+                   \"The field fieldOfDreams in \" + sd3Name + \" is private and cannot be accessed from \" + sd6Name, ", "+                   errors.getLast().getFirst());", "+      assertTrue(\"checkAccess with private mav and same file\",", "+                 _btc.checkAccess(NULL_LITERAL, _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _privateMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccess for a class and a class it is not related to\", ", "+                  _btc.checkAccess(NULL_LITERAL, _privateMav, sd6Name, _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with package mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with package mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccess with package mav and same package\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccess with package mav and different package\", ", "+                  _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccess with package mav and is outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccess with package mav and is super class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccess for a class and its outer class\", ", "+                 _btc.checkAccess(NULL_LITERAL, _packageMav, sd6Name, _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccess for a class and a class it is not related to\", ", "+                  _btc.checkAccess(NULL_LITERAL, _packageMav, sd6Name, _sd2, _sd4, \"class\"));"]}], "num": 2255}
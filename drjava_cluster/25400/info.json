{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "053642287b03b6e10b2d05771a5c8cca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "159e9b55e4f8178a6a9583072f5fe338", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public static <T> List<T> asList(Iterable<T> iter)", "signatureAfterChange": "     public boolean isEmpty()", "diff": ["+    public boolean isEmpty() { return _array.length == 0; }", "-   */", "-  public static <T> List<T> asList(Iterable<T> iter) {", "-    if (iter instanceof List<?>) { return (List<T>) iter; }", "-    else if (iter instanceof Collection<?>) { return new ArrayList<T>((Collection<T>) iter); }", "-    else {", "-      ArrayList<T> result = new ArrayList<T>(0); // minimize footprint of empty", "-      for (T e : iter) { result.add(e); }", "-      return result;", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3bae4eb76f4bc1c22460876f850272d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 67, "signatureBeforeChange": "    public static Predicate<Object> containsPredicate(Set<?> set)", "signatureAfterChange": "   public static <T> PredicateSet<T> asPredicateSet(Iterable<T> iter)", "diff": ["+   */", "+  public static <T> PredicateSet<T> asPredicateSet(Iterable<T> iter) {", "+    if (iter instanceof PredicateSet<?>) { return (PredicateSet<T>) iter; }", "+    else if (iter instanceof Set<?>) { return new DelegatingSet<T>((Set<T>) iter); }", "+    else { return new IterableSet<T>(iter); }", "+  }", "-  public static Predicate<Object> containsPredicate(Set<?> set) {", "-    return LambdaUtil.bindFirst(CONTAINS_PREDICATE, set);", "-  }"]}], "num": 25400}
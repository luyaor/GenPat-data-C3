{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7ffb1a539456bac09a1b68e6848c207", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fb7fb38dd6727701b35984bab49666e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "545558ad10034df1c23d84066b19e4c96d5c4d21", "commitAfterChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp)     throws IOException, RemoteException", "signatureAfterChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp)     throws IOException, RemoteException", "diff": ["-    Thread t = new Thread() {", "+    Thread t = new Thread(_exportMasterThreadName) {", "+            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+    _stubFile.deleteOnExit();", "-    Thread thread = new Thread() {", "+    Thread thread = new Thread(_waitForQuitThreadName) {", "+            if (_startupInProgress) {", "+              // If we get here, the process died without registering.", "+              //  (This might be the case if something was wrong with the", "+              //   classpath, or if the new JVM couldn't acquire a port", "+              //   for debugging.)", "+              //", "+              // Proper behavior in this case is unclear, so we'll let", "+              //  our subclasses decide.  By default, we print a stack", "+              //  trace and do not proceed, to avoid going into a loop.", "+              slaveQuitDuringStartup(status);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0931e3e2220e3bb2dd34160f5c4fae7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "21f40abc1b1e49110febfbe137665f4ad897576b", "commitAfterChange": "f4278ef90560d9633afda2a2ab460f54efaa99f1", "methodNumberBeforeChange": 363, "methodNumberAfterChange": 363, "signatureBeforeChange": "     File _getSourceRoot(String packageName) throws InvalidPackageException", "signatureAfterChange": "     File _getSourceRoot(String packageName) throws InvalidPackageException", "diff": ["+        File grandParentDir;", "+          grandParentDir = parentDir.getParentFile();", "-          if (! part.equals(parentDir.getName ())) {", "+          boolean equal;", "+          if (grandParentDir!=null) {", "+            // grand parent exists, compare File objects", "+            // this handles case-insensitivity for packages on Windows", "+            File packageDir = new File(grandParentDir,part);", "+            equal = packageDir.equals(parentDir);", "+          }", "+          else {", "+            // grand parent does not exist, so we can't create a File object", "+            // with the package's name. Just compare names; this doesn't", "+            // handle case-insensitivity for packages on Windows", "+            equal = part.equals(parentDir.getName()); ", "+          }", "+          if (!equal) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db4f448b9803429c970b7dcdd5afd469", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "5944dd2b12a74ebad6e3549d813d2dd557403c7e", "commitAfterChange": "53735c967d2add6a16ab5776bac9111426f41996", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     public void selectItem(CompilerError error)", "signatureAfterChange": "     public void selectItem(CompilerError error)", "diff": ["-          // Add the end rect onto the start rect to make a rectangle", "-          // that encompasses the entire error", "-          startRect.add(endRect);", "-", "-          //System.err.println(\"scrll vis: \" + startRect);", "-", "-          scrollRectToVisible(startRect);", "-", "+          if (startRect != null && endRect != null) {", "+            // Add the end rect onto the start rect to make a rectangle", "+            // that encompasses the entire error", "+            startRect.add(endRect);", "+            ", "+            //System.err.println(\"scrll vis: \" + startRect);", "+            ", "+            scrollRectToVisible(startRect);", "+          }", "+          else {", "+            // Couldn't draw the box to highlight, so don't highlight anything", "+            _removeListHighlight();", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2f3238f508fdf3beef8770d410bdde", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "dbc7e70c9333c80fb6fec4d990a068dec31067fa", "commitAfterChange": "cd93f4a911fe5ca4af96aafefd0069d86ef20364", "methodNumberBeforeChange": 696, "methodNumberAfterChange": 696, "signatureBeforeChange": "          public void interactionEnded()", "signatureAfterChange": "          public void interactionEnded()", "diff": ["+            else if (lastError.startsWith(\"Static Error: Undefined name '\") && lastError.endsWith(\"'\")) {", "+              // it was an \"undefined name\" exception", "+              String undefinedName = lastError.substring(lastError.indexOf('\\'') + 1, lastError.lastIndexOf('\\''));", "+              ", "+              if ((undefinedName.length() > 0) &&", "+                  (Character.isUpperCase(undefinedName.charAt(0))) &&", "+                  (undefinedName.indexOf('.') >= 0)) {", "+                // the undefined name starts with a capital letter and contains a dot", "+                // show auto-import dialog", "+                String undefinedClassName = undefinedName.substring(0, undefinedName.indexOf('.'));", "+                _showAutoImportDialog(undefinedClassName);", "+              }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3c689ec1a0423a5d216645eaae10e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorCaretListener.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-  ", "-      if (_errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(shouldSelect);", "-      }", "-      _errorListPane.selectItem(errors[shouldSelect]);", "+      try {", "+        _errorListPane.selectItem(errors[shouldSelect]);", "+        ", "+        if (_errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(shouldSelect);", "+        }", "+      }", "+      catch (IllegalArgumentException e) {", "+        // A new test could perhaps have started before this listener", "+        //  has been reset, so be prepared if it throws an exception.", "+        //  We'll ignore it here, so nothing gets highlighted.", "+      }"]}], "num": 3735}
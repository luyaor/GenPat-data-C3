{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8ebc096a2522076b9790bda0490df4b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063b2ccfc953af44f7caeb43341b352f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorHandler.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void handle(Throwable thrown)", "signatureAfterChange": "   public void uncaughtException(Thread t, Throwable thrown)", "diff": ["+  /** Handles an uncaught exception. This gets called automatically by AWT. */", "+  public void uncaughtException(Thread t, Throwable thrown) {", "+    record(thrown);", "+  }", "-  /** Handles an uncaught exception. This gets called automatically by AWT. */", "-  public void handle(Throwable thrown) {", "-    System.out.println(\"Unhandled exception: \" + thrown);", "-    record(thrown);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cddc96d0c65a76a2a8713b271cfac0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 420, "methodNumberAfterChange": 369, "signatureBeforeChange": "     public void breakpointRemoved(final Breakpoint bp)", "signatureAfterChange": "         public void regionRemoved(final Breakpoint bp)", "diff": ["+        /** Called when a breakpoint is removed. Must be executed in event thread. */", "+        public void regionRemoved(final Breakpoint bp) {      ", "+          HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(bp);", "+          if (highlight != null) highlight.remove();", "+          _documentRegionHighlights.remove(bp);", "+        }", "-    /* Must be executed in event thread. */", "-    public void breakpointRemoved(final Breakpoint bp) {", "-      ", "-      HighlightManager.HighlightInfo highlight = _breakpointHighlights.get(bp);", "-      if (highlight != null) highlight.remove();", "-      _breakpointHighlights.remove(bp);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6351aa8f327977d7a7c15ac74bfa76bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 419, "methodNumberAfterChange": 368, "signatureBeforeChange": "     public void breakpointChanged(Breakpoint bp)", "signatureAfterChange": "         public void regionChanged(Breakpoint bp)", "diff": ["+        /** Called when a breakpoint is changed. Must execute in event thread. */", "+        public void regionChanged(Breakpoint bp) { ", "+          regionRemoved(bp);", "+          regionAdded(bp);", "+        }", "-    /** Called when a breakpoint is changed. Must execute in event thread. */", "-    public void breakpointChanged(Breakpoint bp) { ", "-      breakpointRemoved(bp);", "-      breakpointSet(bp);", "-    }"]}], "num": 4885}
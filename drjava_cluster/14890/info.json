{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28b310689c08df97f1d03f6dab7068e3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d20a399db56c6d89a4c7ed4e972b9c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipComments.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["+", "+        doc.move( startPos - currentPos + i);", "+        ReducedModelState state = doc.getStateAtCurrent();", "+        doc.move(-startPos + currentPos - i);", "-        synchronized(doc) {", "-          doc.move( startPos - currentPos + i);", "-          ReducedModelState state = doc.getStateAtCurrent();", "-          doc.move(-startPos + currentPos - i);", "-          ", "-          ", "-          currentChar = text.charAt(i);", "-          ", "-          if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "-          if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "-            previousChar = '\\0'; ", "-            continue;", "+        ", "+        currentChar = text.charAt(i);", "+        ", "+        if (state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) return false;", "+        if (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) {  // Handle case: ...*/*", "+          previousChar = '\\0'; ", "+          continue;", "+        }", "+        if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "+          if (_prefix.length() > lineLength - i) return false;", "+          else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "+            // '/' is the only non-WS character that we consume without", "+            // immediately returning false. When we try to match the prefix,", "+            // we also need to reflect this implicit lookahead mechanism.", "+            return true;", "-          if (state.equals(ReducedModelState.FREE)) { // Can prefix still fit on the current line?", "-            if (_prefix.length() > lineLength - i) return false;", "-            else if (text.substring(i, i+_prefix.length()).equals(_prefix) && previousChar != '/') {", "-              // '/' is the only non-WS character that we consume without", "-              // immediately returning false. When we try to match the prefix,", "-              // we also need to reflect this implicit lookahead mechanism.", "-              return true;", "-            }", "-            else if (currentChar == '/') {", "-              if (previousChar == '/') return false;", "-            }", "-            else if (currentChar == ' ' || currentChar == '\\t') {  }", "-            else if (!(currentChar == '*' && previousChar == '/')) return false;", "+          else if (currentChar == '/') {", "+            if (previousChar == '/') return false;", "+          else if (currentChar == ' ' || currentChar == '\\t') {  }", "+          else if (!(currentChar == '*' && previousChar == '/')) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d513e12f91dfc435fc387b8d1e7ac78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void insertNodeSortedInto(LeafNode child, InnerNode parent)", "signatureAfterChange": "   private void insertNodeSortedInto(LeafNode child, InnerNode parent)", "diff": ["-    /**", "-     * check to make sure that the parent, if a top level group, is", "-     * added to the tree model group", "-     */", "-    if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && ", "-        _roots.contains(parent)){", "-      addTopLevelGroupToRoot(parent);", "+    /** Make sure that if the parent is a top level group, it is added to the tree model group. */", "+    synchronized (_model) {", "+      if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && _roots.contains(parent)) {", "+        addTopLevelGroupToRoot(parent);", "+      }", "+      int i;", "+      for (i = 0; i < numChildren; i++ ) {", "+        parentsKid = ((DefaultMutableTreeNode) parent.getChildAt(i));", "+        if (parentsKid instanceof InnerNode) {", "+          // do nothing, it's a folder", "+        } else if(parentsKid instanceof LeafNode) {", "+          oldName = ((LeafNode)parentsKid).getData().getName();", "+          if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "+        } else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "+      }", "+      _model.insertNodeInto(child, parent, i);", "-    int i;", "-    for (i = 0; i < numChildren; i++ ) {", "-      parentsKid = ((DefaultMutableTreeNode)parent.getChildAt(i));", "-      if (parentsKid instanceof InnerNode) {", "-        // do nothing, it's a folder", "-      } else if(parentsKid instanceof LeafNode) {", "-        oldName = ((LeafNode)parentsKid).getData().getName();", "-        if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "-      } else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "-    }", "-    ", "-    _model.insertNodeInto(child, parent, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d2094e3b7fe88e5d3f66a3ea377a324", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public int findCharOnLine(final int pos, final char findChar)", "signatureAfterChange": "   public int findCharOnLine(final int pos, final char findChar)", "diff": ["-    assert isReadLocked();", "+    // assert isReadLocked();", "-//    acquireReadLock();", "-      synchronized(_reduced) {", "+//      synchronized(_reduced) {", "-      }", "+//      }", "-//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebcd4913f82444c1172dcd5c788d758", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, int reason)", "diff": ["-", "+    ", "-", "+    ", "-", "+    ", "+    ", "-", "+      ", "-", "+        ", "-        synchronized(doc){", "-          doc.move(dist);", "-          prevDelimiterPos -= doc.balanceBackward() - 1;", "-          doc.move(-dist);", "-        }", "+        ", "+        doc.move(dist);", "+        prevDelimiterPos -= doc.balanceBackward() - 1;", "+        doc.move(-dist);", "+        ", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    ", "+    ", "-      if (_useColon) {", "-        indentDelims = indentDelimsWithColon;", "-      } else {", "-        indentDelims = indentDelimsWithoutColon;", "-      }", "+      if (_useColon) indentDelims = indentDelimsWithColon;", "+      else indentDelims = indentDelimsWithoutColon;", "+      ", "-", "+      ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53f815700620083ada43636141d43dbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsComment.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-   */", "+    */", "-    // If the start of the current line is the start of the", "-    // document, there was no previous line and so this", "-    // line must have started the comment", "-    if (cursor == AbstractDJDocument.DOCSTART) {", "-      return false;", "-    } else {", "-      // Move the cursor to the previous line", "-      cursor = cursor - 1;", "-      ", "-      // Move it to the start of the previous line", "-      cursor = doc.getLineStartPos(cursor);", "-      ", "-      // Return if the start of the previous line is", "-      // in a comment.", "-      //BraceReduction reduced = doc.getReduced();", "-      doc.resetReducedModelLocation();", "-      ReducedModelState state = doc.stateAtRelLocation(cursor -", "-          doc.getCurrentLocation());", "-      return !state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT);", "-    }", "+    /* If the start of the current line is the start of the document, there was no previous line and so this line must ", "+     * have started the comment. */", "+    if (cursor == AbstractDJDocument.DOCSTART) return false;", "+    ", "+    // Move the cursor to the previous line", "+    cursor = cursor - 1;", "+    ", "+    // Move it to the start of the previous line", "+    cursor = doc.getLineStartPos(cursor);", "+    ", "+    // Return if the start of the previous line is in a comment.", "+//    BraceReduction reduced = doc.getReduced();", "+    doc.resetReducedModelLocation();", "+    ReducedModelState state = doc.stateAtRelLocation(cursor - doc.getCurrentLocation());", "+    return !state.equals(ReducedModelStates.INSIDE_BLOCK_COMMENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c8279c1631dde8e2dc0a41238ae246", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public synchronized void addDocument(INavigatorItem doc)", "signatureAfterChange": "   public void addDocument(INavigatorItem doc)", "diff": ["-  public synchronized void addDocument(INavigatorItem doc) {", "+  public void addDocument(INavigatorItem doc) {", "-    for (GroupNode r: _roots) {", "-      if (r.getFilter().accept(doc)) {", "-        _root = r;", "-        break;", "-      }", "-    }", "-    if (_root == null) return;", "-    ", "-    LeafNode node = new LeafNode(doc);", "-    //_root.add(node);", "-    insertNodeSortedInto(node, _root);", "-    this.expandPath(new TreePath(_root.getPath()));", "-    _doc2node.put(doc, node);", "-    _hasNonProjFilesOpen = true;", "-    //    this.setActiveDoc(doc);", "-  }", "+      for (GroupNode r: _roots) {", "+      ", "+      LeafNode node = new LeafNode(doc);", "+      //_root.add(node);", "+      insertNodeSortedInto(node, _root);", "+      this.expandPath(new TreePath(_root.getPath()));", "+      _doc2node.put(doc, node);", "+      _hasNonProjFilesOpen = true;", "+      //    this.setActiveDoc(doc);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6484690a07afdaa5a14bb29a6f9cf348", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "    public boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException", "signatureAfterChange": "    public boolean _isAnonymousInnerClass(final int pos, final int openCurlyPos) throws BadLocationException", "diff": ["-//    synchronized(_reduced) {", "+    synchronized(_reduced) {", "-//    }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79312dfc163a984542fce7ac6bf644e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/MatchWholeWordState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private int indexOf(String str, String findword, int fromIndex)", "signatureAfterChange": "     private int indexOf(String str, String findword, int fromIndex)", "diff": ["-  private int indexOf(String str, String findword, int fromIndex) {", "+   private int indexOf(String str, String findword, int fromIndex) {", "-      if (_matchCase) {", "-        return str.indexOf(findword, fromIndex);", "-      }", "-      else {", "-        String lowerstr = str.toLowerCase();", "-        String lowerfindword = findword.toLowerCase();", "-        return lowerstr.indexOf(lowerfindword, fromIndex);", "-      }", "+      if (_matchCase) return str.indexOf(findword, fromIndex);", "+      String lowerstr = str.toLowerCase();", "+      String lowerfindword = findword.toLowerCase();", "+      return lowerstr.indexOf(lowerfindword, fromIndex);", "-    else {", "-      if (_matchCase) {", "-        return str.lastIndexOf(findword, fromIndex);", "-      }", "-      else {", "-        String lowerstr = str.toLowerCase();", "-        String lowerfindword = findword.toLowerCase();", "-        return lowerstr.lastIndexOf(lowerfindword, fromIndex);", "-      }", "-    }", "+    if (_matchCase) return str.lastIndexOf(findword, fromIndex);", "+    String lowerstr = str.toLowerCase();", "+    String lowerfindword = findword.toLowerCase();", "+    return lowerstr.lastIndexOf(lowerfindword, fromIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9956cecba6a9b196e4a09fc44dac4e5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-    synchronized(doc) {", "-      doc.move(lineStart - origin);", "-      IndentInfo info = doc.getIndentInformation();", "-      doc.move(origin - lineStart);", "-      ", "-      ", "-      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-          (info.distToBrace < 0)) {", "-        // Precondition not met: we should have a brace", "-        return false;", "-      }", "-      int bracePos = lineStart - info.distToBrace;", "-      ", "-      // Get position of previous non-WS char (not in comments)", "-      int prevNonWS = -1;", "-      try {", "-        prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "-        char c = doc.getText(prevNonWS,1).charAt(0);", "-        for (int i=0; i<_prefix.length; i++) {", "-          char prefix = _prefix[i];", "-          if (c == prefix) {", "-            return true;", "-          } ", "-        }", "-      }", "-      catch (BadLocationException e) {", "-      }    ", "+    doc.move(lineStart - origin);", "+    IndentInfo info = doc.getIndentInformation();", "+    doc.move(origin - lineStart);", "+    ", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0)) {", "+      // Precondition not met: we should have a brace", "+      return false;", "+    int bracePos = lineStart - info.distToBrace;", "+    ", "+    // Get position of previous non-WS char (not in comments)", "+    int prevNonWS = -1;", "+    try {", "+      prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "+      char c = doc.getText(prevNonWS,1).charAt(0);", "+      for (int i=0; i<_prefix.length; i++) {", "+        char prefix = _prefix[i];", "+        if (c == prefix) {", "+          return true;", "+        } ", "+      }", "+    }", "+    catch (BadLocationException e) {", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad95d83c495dd25881bb77f01ad6ac9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "787d67eb3d919fcaaf2b1a9e1122344cb4eabfb5", "commitAfterChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-  public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "+  public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-    for (GroupNode r: _roots){", "-      if (r.getFilter().accept(doc)) {", "-        _root = r;", "-        break;", "-      }", "-    }", "-    ", "-    if (_root == null) return;", "-    ", "-    StringTokenizer tok = new StringTokenizer(path, File.separator);", "-    //ArrayList<String> elements = new ArrayList<String>();", "-    String pathSoFar=\"\";", "-    InnerNode lastNode = _root;", "-    while (tok.hasMoreTokens()) {", "-      String element = tok.nextToken();", "-      pathSoFar += (element + \"/\");", "-      InnerNode thisNode;", "-      //System.out.println(\"pathsofar = \" + pathSoFar);", "-      // if the node is not in the hashmap yet", "-      if (!_path2node.containsKey(pathSoFar)) {", "-        // make a new node", "-        ", "-        /* this inserts a folder node */", "-        thisNode = new FileNode(new File(pathSoFar));", "-        insertFolderSortedInto(thisNode, lastNode);", "-        this.expandPath(new TreePath(lastNode.getPath()));", "-        // associate the path so far with that node", "-        _path2node.put(pathSoFar, thisNode);", "-      }", "-      else {", "-        // System.out.println(\"path2node contains pathSoFar\");", "-        thisNode = _path2node.getValue(pathSoFar);", "+    synchronized(_model) {", "+      ", "+      for (GroupNode r: _roots){", "+        if (r.getFilter().accept(doc)) {", "+          _root = r;", "+          break;", "+        }", "-      lastNode = thisNode;", "-       ", "-      //elements.add(element);", "+      if (_root == null) return;", "+      ", "+      StringTokenizer tok = new StringTokenizer(path, File.separator);", "+      //ArrayList<String> elements = new ArrayList<String>();", "+      String pathSoFar=\"\";", "+      InnerNode lastNode = _root;", "+      while (tok.hasMoreTokens()) {", "+        String element = tok.nextToken();", "+        pathSoFar += (element + \"/\");", "+        InnerNode thisNode;", "+        //System.out.println(\"pathsofar = \" + pathSoFar);", "+        // if the node is not in the hashmap yet", "+        if (!_path2node.containsKey(pathSoFar)) {", "+          // make a new node", "+          ", "+          /* this inserts a folder node */", "+          thisNode = new FileNode(new File(pathSoFar));", "+          insertFolderSortedInto(thisNode, lastNode);", "+          this.expandPath(new TreePath(lastNode.getPath()));", "+          // associate the path so far with that node", "+          _path2node.put(pathSoFar, thisNode);", "+        }", "+        else {", "+          // System.out.println(\"path2node contains pathSoFar\");", "+          thisNode = _path2node.getValue(pathSoFar);", "+        }", "+        ", "+        lastNode = thisNode;", "+        ", "+        //elements.add(element);", "+      }", "+      ", "+      /* lastNode is the node of the folder to add into */", "+      ", "+      LeafNode child = new LeafNode(doc);", "+      _doc2node.put(doc, child);", "+      insertNodeSortedInto(child, lastNode);", "+      //    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());", "+      this.expandPath(new TreePath(lastNode.getPath()));", "+      child.setUserObject(doc);", "-    ", "-    /* lastNode is the node of the folder to add into */", "-    ", "-    LeafNode child = new LeafNode(doc);", "-    _doc2node.put(doc, child);", "-    insertNodeSortedInto(child, lastNode);", "-    //    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());", "-    this.expandPath(new TreePath(lastNode.getPath()));", "-    child.setUserObject(doc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b19c876d56192fb94ffbfc07fb227610", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "6d55d86705248616cac5b324a7c528485ceb6104", "commitAfterChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public synchronized WeakHashMap<WrappedPosition, Integer> getWrappedPositionOffsets()", "signatureAfterChange": "   public WeakHashMap<WrappedPosition, Integer> getWrappedPositionOffsets()", "diff": ["-   */", "-  public synchronized WeakHashMap<WrappedPosition, Integer> getWrappedPositionOffsets() {", "+    */", "+  public WeakHashMap<WrappedPosition, Integer> getWrappedPositionOffsets() {", "-    if (_wrappedPosList==null) { _wrappedPosList = new LinkedList<WeakReference<WrappedPosition>>(); }", "-    WeakHashMap<WrappedPosition, Integer> ret = new WeakHashMap<WrappedPosition, Integer>(_wrappedPosList.size());", "-    ", "-    for (WeakReference<WrappedPosition> wr: _wrappedPosList) {", "-      if (wr.get()!=null)  {", "-        // hasn't been garbage-collected yet", "-        newList.add(wr);", "-        ret.put(wr.get(), wr.get().getOffset());", "+    synchronized(_wrappedPosListLock) {", "+      if (_wrappedPosList == null) { _wrappedPosList = new LinkedList<WeakReference<WrappedPosition>>(); }", "+      WeakHashMap<WrappedPosition, Integer> ret = new WeakHashMap<WrappedPosition, Integer>(_wrappedPosList.size());", "+      ", "+      for (WeakReference<WrappedPosition> wr: _wrappedPosList) {", "+        if (wr.get() != null)  {", "+          // hasn't been garbage-collected yet", "+          newList.add(wr);", "+          ret.put(wr.get(), wr.get().getOffset());", "+        }", "-    }", "-    _wrappedPosList.clear();", "-    _wrappedPosList = newList;", "-    ", "+      _wrappedPosList.clear();", "+      _wrappedPosList = newList;  ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8f3d141d99beb46ed066e94a0ef419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-   */", "+  /** If we're on a match for the find word, replace it with the replace word. */", "-        if (!_searchBackwards) {", "-          position -= _findWord.length();", "-        }", "+        if (!_searchBackwards) position -= _findWord.length();", "-        if (position == 0) {", "-          atStart = true;", "-        }", "+        if (position == 0) atStart = true;", "-        if (atStart && !_searchBackwards) {", "-          setPosition(_replaceWord.length());", "-        }", "-        if (!atStart && _searchBackwards) {", "-          setPosition(getCurrentOffset() - _replaceWord.length());", "-        }", "+        if (atStart && !_searchBackwards) setPosition(_replaceWord.length());", "+        else if (!atStart && _searchBackwards) setPosition(getCurrentOffset() - _replaceWord.length());", "-      else {", "-        return false;", "-      }", "+      return false;", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1ee1d5925c4765dcbf180655405d10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void insertFolderSortedInto(InnerNode child, InnerNode parent)", "signatureAfterChange": "   private void insertFolderSortedInto(InnerNode child, InnerNode parent)", "diff": ["-    if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && ", "-       _roots.contains(parent)) {", "-      addTopLevelGroupToRoot(parent);", "+    synchronized (_model) {", "+      if (((DefaultMutableTreeNode)_model.getRoot()).getIndex(parent) == -1 && _roots.contains(parent)) {", "+        addTopLevelGroupToRoot(parent);", "+      }", "+      ", "+      int countFolders = 0;", "+      int i;", "+      for (i = 0; i < numChildren; i++) {", "+        parentsKid = ((DefaultMutableTreeNode)parent.getChildAt(i));", "+        if (parentsKid instanceof InnerNode) {", "+          countFolders++;", "+          oldName = ((InnerNode)parentsKid).toString();", "+          if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "+        } ", "+        else if (parentsKid instanceof LeafNode) break;", "+        // we're out of folders, and starting into the files, so just break out.", "+        else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "+      }", "+      _model.insertNodeInto(child, parent, i);", "-    ", "-    int countFolders = 0;", "-    int i;", "-    for (i = 0; i < numChildren; i++) {", "-      parentsKid = ((DefaultMutableTreeNode)parent.getChildAt(i));", "-      if (parentsKid instanceof InnerNode) {", "-        countFolders++;", "-        oldName = ((InnerNode)parentsKid).toString();", "-        if ((newName.toUpperCase().compareTo(oldName.toUpperCase()) < 0)) break;", "-      } else if (parentsKid instanceof LeafNode) break;", "-      // we're out of folders, and starting into the files, so just break out.", "-      else throw new IllegalStateException(\"found a node in navigator that is not an InnerNode or LeafNode\");", "-    }", "-    _model.insertNodeInto(child, parent, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7609523e650544be2259df5f53135e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-  boolean applyRule(AbstractDJDocument doc, int reason)", "-  {", "+  boolean applyRule(AbstractDJDocument doc, int reason)  {", "-    synchronized(doc){", "-      doc.move(lineStart - origin);", "-      IndentInfo info = doc.getIndentInformation();", "-      doc.move(origin - lineStart);    ", "-      ", "-      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-          (info.distToBrace < 0)) {", "-        // Precondition not met: we should have a brace", "-        return false;", "-      }", "-      int bracePos = lineStart - info.distToBrace;    ", "-      ", "-      // Get brace's end of line", "-      int braceEndLinePos = doc.getLineEndPos(bracePos);", "-      ", "-      // Get position of next non-WS char (not in comments)", "-      int nextNonWS = -1;", "-      try {", "-        nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-      }", "-      catch (BadLocationException e) {", "-        // This shouldn't happen", "-        throw new UnexpectedException(e);", "-      }", "-      ", "-      if (nextNonWS == AbstractDJDocument.ERROR_INDEX) {", "-        return true;", "-      }", "-      ", "-      return (nextNonWS >= lineStart);", "+    doc.move(lineStart - origin);", "+    IndentInfo info = doc.getIndentInformation();", "+    doc.move(origin - lineStart);    ", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0))", "+      // Precondition not met: we should have a brace", "+      return false;", "+    int bracePos = lineStart - info.distToBrace;    ", "+    ", "+    // Get brace's end of line", "+    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+    ", "+    // Get position of next non-WS char (not in comments)", "+    int nextNonWS = -1;", "+    try { nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos); }", "+    catch (BadLocationException e) {", "+      // This shouldn't happen", "+      throw new UnexpectedException(e);", "+    ", "+    if (nextNonWS == AbstractDJDocument.ERROR_INDEX) return true;", "+    ", "+    return (nextNonWS >= lineStart);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dff150b53ac14f7c7150d86f75281ff1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public int findCharOnLine(final int pos, final char findChar)", "signatureAfterChange": "   public int findCharOnLine(final int pos, final char findChar)", "diff": ["-    assert isReadLocked();", "+    // assert isReadLocked();", "-//    acquireReadLock();", "-      synchronized(_reduced) {", "+//      synchronized(_reduced) {", "-      }", "+//      }", "-//    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff34c1da1e2a8f47324027b3698ce5fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/AbstractReducedModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void _insertGap( int length )", "signatureAfterChange": "   public void _insertGap( int length )", "diff": ["-      else {", "-        _insertNewGap(length);//inserts gap and goes to next item", "-      }", "+      else _insertNewGap(length);//inserts gap and goes to next item", "-      else {", "-        _insertNewGap(length); //inserts gap and moves to next item", "-      }", "+      else _insertNewGap(length); //inserts gap and moves to next item", "-    else if ((_cursor.getBlockOffset() > 0) && _cursor.current().isMultipleCharBrace()) {", "+    else if ((_cursor.getBlockOffset() > 0) && _cursor.current().isMultipleCharBrace())", "-    }", "-    else if (!_cursor.atFirstItem() && _cursor.prevItem().isGap()) {", "+    else if (!_cursor.atFirstItem() && _cursor.prevItem().isGap())", "-    }", "-    else { //between two braces", "+    else  //between two braces", "-    }"]}], "num": 14890}
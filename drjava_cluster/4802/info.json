{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7719378ca442dcc8ba18e7a7f14d6bec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a03af7ee4446e67a49722d648bce701f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "420215825e681a0b291c00f3cf7aa39a982faffe", "commitAfterChange": "c657da4404f6681bffc368045343d4bc04e51744", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "signatureAfterChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "diff": ["-    DefinitionsDocument doc = pane.getOpenDocument().getDocument();", "+    OpenDefinitionsDocument doc = pane.getOpenDocument();//.getDocument();", "-    doc.insertString(0, \"abcd\", null);", "+    doc.getDocument().insertString(0, \"abcd\", null);", "-    assertEquals(\"Location of old doc before switch\", 3, doc.getCurrentLocation());", "+    assertEquals(\"Location of old doc before switch\", 3, doc.getDocument().getCurrentLocation());", "-    doc = pane.getOpenDocument().getDocument();", "-    assertEquals(\"Location of new document\", 0, doc.getCurrentLocation());", "+    doc = pane.getOpenDocument();//.getDocument();", "+    assertEquals(\"Location of new document\", 0, doc.getDocument().getCurrentLocation());", "-    doc = pane.getOpenDocument().getDocument();", "-    assertEquals(\"Location of old document\", 3, doc.getCurrentLocation());", "+    doc = pane.getOpenDocument();//.getDocument();", "+    assertEquals(\"Location of old document\", 3, doc.getDocument().getCurrentLocation());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d150de921a09539b3488c44b11af8c11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fp, Data enclosing)", "signatureAfterChange": "   protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fps, SymbolData enclosing)", "diff": ["-   */", "-  protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fp, Data enclosing) { ", "-    TypeData[] tds = new TypeData[fp.length];", "-    for (int j = 0; j<fp.length; j++) {", "-      SymbolData type = _llv.getSymbolData(fp[j].getDeclarator().getType().getName(), fp[j].getSourceInfo());", "+    */", "+  protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fps, SymbolData enclosing) { ", "+    TypeData[] tds = new TypeData[fps.length];", "+    int j = 0;", "+    for (FormalParameter fp: fps) {", "+      SymbolData type = _llv.getSymbolData(fp.getDeclarator().getType().getName(), fp.getSourceInfo());", "-        type = enclosing.getInnerClassOrInterface(fp[j].getDeclarator().getType().getName());", "+        type = enclosing.getInnerClassOrInterface(fp.getDeclarator().getType().getName());", "-      tds[j]= type;", "+      tds[j]= type; j++;  // store type in next empty slot of tds", "+    assert j == fps.length;", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef7ea3ec072d44766a0f8480f74f4401", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testErrorsArrayInOrder() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder() throws Exception", "diff": ["-    assertEquals(\"the test results should have one error and one failure \"+_m.getErrors().length,", "+    assertEquals(\"the test results should have one error and one failure \"+_m.getNumErrors(),", "-                  _m.getErrors().length);", "+                  _m.getNumErrors());", "-    assertEquals(\"test case has one error reported\" + _m.getErrors()[0].message(),", "-                 _m.getErrors()[0].isWarning(),", "+    assertEquals(\"test case has one error reported\" + _m.getError(0).message(),", "+                 _m.getError(0).isWarning(),", "-    assertEquals(\"test case has one failure reported\" + _m.getErrors()[1].message(),", "-                 _m.getErrors()[1].isWarning(),", "+    assertEquals(\"test case has one failure reported\" + _m.getError(1).message(),", "+                 _m.getError(1).isWarning(),"]}], "num": 4802}
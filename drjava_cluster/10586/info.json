{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1db4491c4af18a6e9388207f8c81746", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7edd77ab3d5bd49037dc0ae5f411268a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public Object visit(ReferenceType node)", "signatureAfterChange": "   public Class visit(ReferenceType node)", "diff": ["-     */", "-    public Object visit(ReferenceType node) {", "-\tClass c = null;", "-\ttry {", "-\t    c = context.lookupClass(node.getRepresentation());", "-\t} catch (ClassNotFoundException e) {", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t     new String[] { node.getRepresentation() });", "-\t    throw new ExecutionError(\"undefined.class\", node);", "-\t}", "-\tnode.setProperty(NodeProperties.TYPE, c);", "-\treturn c;", "+   */", "+  public Class visit(ReferenceType node) {", "+    Class c = null;", "+    try {", "+      c = context.lookupClass(node.getRepresentation());", "+    } catch (ClassNotFoundException e) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { node.getRepresentation() });", "+      throw new ExecutionError(\"undefined.class\", node);", "+    node.setProperty(NodeProperties.TYPE, c);", "+    return c;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec494d6bf567cb8fa7653ff21c0236c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public Object visit(ThrowStatement node)", "signatureAfterChange": "   public Class visit(ThrowStatement node)", "diff": ["-     */", "-    public Object visit(ThrowStatement node) {", "-        Class c = (Class)node.getExpression().acceptVisitor(this);", "-        if (!Throwable.class.isAssignableFrom(c)) {", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS,", "-\t\t\t     new String[] { c.getName() });", "-            throw new ExecutionError(\"throw.type\", node);", "-        }", "-        return null;", "-    }", "+   */", "+  public Class visit(ThrowStatement node) {", "+    Class c = (Class)node.getExpression().acceptVisitor(this);", "+    if (!Throwable.class.isAssignableFrom(c)) {", "+      node.setProperty(NodeProperties.ERROR_STRINGS,", "+                       new String[] { c.getName() });", "+      throw new ExecutionError(\"throw.type\", node);", "+    }", "+    return null;", "+  }"]}], "num": 10586}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03ed1860ba51f42d8dc14648185ec198", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c69917d863638bd4b2371906edb5566", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceOnPrevLineTest.java", "commitBeforeChange": "33157731339c994882aa1f63ed4a691707c328ca", "commitAfterChange": "fa574fcc12a57f48a5de7be234043f4f78711418", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testWithParen() throws BadLocationException", "signatureAfterChange": "              public void testWithParen() throws BadLocationException", "diff": ["-", "+    ", "-\t/*", "-\t/* (1)* /", "+\t/* (1) */", "-\t_text = \"boolean method(int[] a, String b) {}\";", "+\t_text = \"method(\\nint[] a, String b) {}\";", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, 0));", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, 12));", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, _text.length() - 1));", "+\ttry { _rule.applyRule(_doc, 0); fail(\"There is no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "-\t/* (2)* /", "+\tassertTrue(\"START's brace ('(') is on the previous line.\", _rule.applyRule(_doc, 8));", "+\tassertTrue(\"START's brace ('(') is on the previous line.\", _rule.applyRule(_doc, _text.length() - 1));", "+", "+\t/* (2) */", "-\tassertTrue(\"There is no previous line.\", !_rule.applyRule(_doc, 18));\t", "+        try { _rule.applyRule(_doc, 18); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\t/* (3)* /", "+\t/* (3) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 10));", "-\tassertTrue(\"START's brace ('(') is on previous line.\", _rule.applyRule(_doc, 16));", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1));", "+        try { _rule.applyRule(_doc, 10); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "-\t/* (4)* /", "+\tassertTrue(\"START's brace ('(') is on previous line.\", _rule.applyRule(_doc, 16));", "+", "+        try { _rule.applyRule(_doc, _text.length()-1); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "+\t/* (4) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 10));", "+        try { _rule.applyRule(_doc, 10); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1));", "-\t/* (5)* /", "+        try { _rule.applyRule(_doc, _text.length()-1); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "+\t/* (5) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 10));\t    ", "+        try { _rule.applyRule(_doc, 10); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\t/* (6)* /", "+\t/* (6) */", "-\tassertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));\t    ", "+        try { _rule.applyRule(_doc, 0); fail(\"START has no brace.\"); }", "+\tcatch (UnexpectedException e) {}", "+", "-\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a27d6eeb75945d30f923cb5429313d25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "60280b438c8e4415d1e3fb7cae7f2c5284f4ab7d", "commitAfterChange": "f1e49fbbed5c92cb9e03198e54bd2a4b521e7d76", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void write(OutputStream os) throws IOException", "signatureAfterChange": "   public void write(OutputStream os) throws IOException", "diff": ["-        xc.set(\".package\", df.getPackage(), f, true);", "-        xc.set(\"select.from\",   String.valueOf(pSel.first()),  f, true);", "-        xc.set(\"select.to\",     String.valueOf(pSel.second()), f, true);", "-        xc.set(\"scroll.column\", String.valueOf(pScr.first()),  f, true);", "-        xc.set(\"scroll.row\",    String.valueOf(pScr.second()), f, true);", "+        String pkg = df.getPackage();", "+        xc.set(\".package\", (pkg!=null)?pkg:\"\", f, true);", "+        xc.set(\"select.from\",   String.valueOf((pSel!=null)?pSel.first():0),  f, true);", "+        xc.set(\"select.to\",     String.valueOf((pSel!=null)?pSel.second():0), f, true);", "+        xc.set(\"scroll.column\", String.valueOf((pScr!=null)?pScr.first():0),  f, true);", "+        xc.set(\"scroll.row\",    String.valueOf((pScr!=null)?pScr.second():0), f, true);", "-        xc.set(\".package\", df.getPackage(), f, true);", "-        xc.set(\"select.from\",   String.valueOf(pSel.first()),  f, true);", "-        xc.set(\"select.to\",     String.valueOf(pSel.second()), f, true);", "-        xc.set(\"scroll.column\", String.valueOf(pScr.first()),  f, true);", "-        xc.set(\"scroll.row\",    String.valueOf(pScr.second()), f, true);", "+        String pkg = df.getPackage();", "+        xc.set(\".package\", (pkg!=null)?pkg:\"\", f, true);", "+        xc.set(\"select.from\",   String.valueOf((pSel!=null)?pSel.first():0),  f, true);", "+        xc.set(\"select.to\",     String.valueOf((pSel!=null)?pSel.second():0), f, true);", "+        xc.set(\"scroll.column\", String.valueOf((pScr!=null)?pScr.first():0),  f, true);", "+        xc.set(\"scroll.row\",    String.valueOf((pScr!=null)?pScr.second():0), f, true);", "-        xc.set(\".package\", df.getPackage(), f, true);", "-        xc.set(\"select.from\",   String.valueOf(pSel.first()),  f, true);", "-        xc.set(\"select.to\",     String.valueOf(pSel.second()), f, true);", "-        xc.set(\"scroll.column\", String.valueOf(pScr.first()),  f, true);", "-        xc.set(\"scroll.row\",    String.valueOf(pScr.second()), f, true);", "+        String pkg = df.getPackage();", "+        xc.set(\".package\", (pkg!=null)?pkg:\"\", f, true);", "+        xc.set(\"select.from\",   String.valueOf((pSel!=null)?pSel.first():0),  f, true);", "+        xc.set(\"select.to\",     String.valueOf((pSel!=null)?pSel.second():0), f, true);", "+        xc.set(\"scroll.column\", String.valueOf((pScr!=null)?pScr.first():0),  f, true);", "+        xc.set(\"scroll.row\",    String.valueOf((pScr!=null)?pScr.second():0), f, true);"]}], "num": 21458}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e4c56d3145e76dcfb5bad951da77902", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990f66720048b28b139ce2319a6ba01f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "481944e3395dcc7a19e81902c59977be65ba633a", "commitAfterChange": "c682fca099b13e765e0e1f201629222d04fb1339", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-      else", "+      else {", "-        INavigatorItem idoc = d;", "-        String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "-        _documentNavigator.refreshDocument(idoc, path);", "-      }", "-      catch(IOException e) { ", "-      /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+          final INavigatorItem idoc = d;", "+          final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+          Utilities.invokeAndWait(new Runnable() { ", "+            public void run() { _documentNavigator.refreshDocument(idoc, path); }", "+          });", "+        }", "+        catch(InterruptedException e) { throw new UnexpectedException(e); }", "+        catch(IOException e) { ", "+          /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef419be855c994d712c1051b275bbe7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "signatureAfterChange": "   public void testOpenRealFile() throws BadLocationException, IOException", "diff": ["-    TestListener listener = new TestFileIOListener(tempFile); ", "+    final TestListener listener = new TestFileIOListener(tempFile); ", "-    try {", "-      OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "-      listener.assertOpenCount(1);", "-      listener.assertCloseCount(1);  // Untitled document is closed when doc is opened", "-      assertModified(false, doc);", "-      assertContents(BAR_TEXT, doc);", "-    }", "-    catch (AlreadyOpenException aoe) {", "-      // Should not be open", "-      fail(\"File was already open!\");", "-    }", "-    catch (OperationCanceledException oce) {", "-      // Should not be canceled", "-      fail(\"Open was unexpectedly canceled!\");", "-    }", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  // Untitled document is closed when doc is opened", "+          assertModified(false, doc);", "+          assertContents(BAR_TEXT, doc);", "+        }", "+        catch(AlreadyOpenException aoe) {", "+          // Should not be open", "+          fail(\"File was already open!\");", "+        }", "+        catch(OperationCanceledException oce) {", "+          // Should not be canceled", "+          fail(\"Open was unexpectedly canceled!\");", "+        }", "+        catch(Exception e) { ", "+          // Should never happen", "+          fail(\"Exception thrown in testOpenRealFile.  Traceback: \" + e);", "+        }", "+      }", "+    });"]}], "num": 13749}
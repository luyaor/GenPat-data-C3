{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "621fa20750b9d14a8ebfb877c4acb0b5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277885be6a1959de5f29bb1ba632ae06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "     public Object visit(LessExpression node)", "signatureAfterChange": "   public Class visit(LessExpression node)", "diff": ["+   */", "+  public Class visit(LessExpression node) {", "+    Class c = visitRelationalExpression(node);", "+    ", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.lessThan(ln.getProperty(NodeProperties.VALUE),", "+                                       rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(LessExpression node) {", "-        Class c = visitRelationalExpression(node);", "-", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.lessThan(ln.getProperty(NodeProperties.VALUE),", "-                                               rn.getProperty(NodeProperties.VALUE)));", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc320b584c513cbf4803ea85a1506a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "     public Object visit(GreaterExpression node)", "signatureAfterChange": "   public Class visit(GreaterExpression node)", "diff": ["+   */", "+  public Class visit(GreaterExpression node) {", "+    Class c = visitRelationalExpression(node);", "+    ", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.greaterThan(ln.getProperty(NodeProperties.VALUE),", "+                                          rn.getProperty(NodeProperties.VALUE)));", "+    return c;", "+  }", "-     */", "-    public Object visit(GreaterExpression node) {", "-        Class c = visitRelationalExpression(node);", "-", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.greaterThan(ln.getProperty(NodeProperties.VALUE),", "-                                               rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}], "num": 6762}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe1447119373115ed8fd1cb0cc4b6c29", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "011e20f65584b2111102b77b8f490e0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "          public void testForSimpleUninitializedArrayInstantiation()", "signatureAfterChange": "          public void testForSimpleUninitializedArrayInstantiation()", "diff": ["-      SourceInfo si = SourceInfo.NO_INFO;", "+      SourceInfo si = SourceInfo.NONE;", "-      //Test one that works", "+      // Test one that works", "-      //Test one with a bad index", "-      SimpleUninitializedArrayInstantiation sa2 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2, badIndexD}));", "+      // Test one with a bad index", "+      SimpleUninitializedArrayInstantiation sa2 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2, badIndexD}));", "-      assertEquals(\"The error message should be correct\", \"The dimensions of an array instantiation must all be ints.  You have specified something of type double\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The dimensions of an array instantiation must all be ints.  You have specified something of type double\", ", "+                   errors.getLast().getFirst());", "-      SimpleUninitializedArrayInstantiation sa3 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"Jonathan[]\", new ClassOrInterfaceType(si, \"Jonathan\", new Type[0])), ", "-                                                                                            new DimensionExpressionList(si, new Expression[]{i1}));", "+      SimpleUninitializedArrayInstantiation sa3 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"Jonathan[]\", ", "+                                                                    new ClassOrInterfaceType(si, \"Jonathan\", new Type[0])), ", "+                                                  new DimensionExpressionList(si, new Expression[]{i1}));", "-      assertEquals(\"Error message should be correct\", \"Class or variable Jonathan[] not found.\", errors.getLast().getFirst());", "-      ", "-      //Test one with wrong dimensions--too many", "-      SimpleUninitializedArrayInstantiation sa4 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\"))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2, i3}));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Class or variable Jonathan[] not found.\", ", "+                   errors.getLast().getFirst());", "+      // Test one with wrong dimensions--too many", "+      SimpleUninitializedArrayInstantiation sa4 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][]\", ", "+                                                                    new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\"))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2, i3}));", "-      assertEquals(\"Error message should be correct\", \"You are trying to initialize an array of type int[][] which requires 2 dimensions, but you have specified 3 dimensions--the wrong number\", errors.getLast().getFirst());", "-      ", "-      ", "-      //Test one with wrong dimensions--too few--should be no additional errors", "-      SimpleUninitializedArrayInstantiation sa5 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {i1, i2}));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You are trying to initialize an array of type int[][] which requires 2 dimensions, but you have \"", "+                     + \"specified 3 dimensions--the wrong number\", ", "+                   errors.getLast().getFirst());", "+      // Test one with wrong dimensions--too few--should be no additional errors", "+      SimpleUninitializedArrayInstantiation sa5 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", ", "+                                                                                                               new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {i1, i2}));", "-      assertEquals(\"There should be no errors\", 4, errors.size());", "-      assertEquals(\"Error message should be correct\", \"The class or interface int[][][] is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"There should be one new error\", 4, errors.size());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface int[][][] in int[][][] is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04fa8aa483efcfd14852e10dde940a12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "               public void testForSimpleNamedClassInstantiation()", "signatureAfterChange": "               public void testForSimpleNamedClassInstantiation()", "diff": ["-      SimpleNamedClassInstantiation ci1 = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"simpleClass\", new Type[0]), ", "-                                                                            new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      ParenthesizedExpressionList pel1 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new IntegerLiteral(SourceInfo.NONE, 5)});", "+      SimpleNamedClassInstantiation ci1 = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"simpleClass\", new Type[0]), ", "+                                          pel1); ", "+      SimpleNamedClassInstantiation ci3 = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"simpleClass\", new Type[0]), ", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      SimpleNamedClassInstantiation ci3 = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"simpleClass\", new Type[0]), ", "-                                                                            new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      ", "-      //if the type is not in the symbolTable, an error should be added on lookup, and null should be returned:", "+      // if the type is not in the symbolTable, an error should be added on lookup, and null should be returned:", "-      assertEquals(\"Should return simpleClass even though it could not really access it\", simpleClass.getInstanceData(), ci3.visit(_etc));", "+      assertEquals(\"Should return simpleClass even though it could not really access it\", ", "+                   simpleClass.getInstanceData(), ci3.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"The class or interface simpleClass is package protected because there is no access specifier and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface simpleClass is package protected because there is no access specifier and \"", "+                     + \"cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      //if class is in symbol table and visible, but there is not a matching constructor, should give an error but still return instance of type", "-      simpleClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "+      // if class is in symbol table and visible, but there is not a matching constructor, should give an error ", "+      // but still return instance of type", "+      simpleClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "-      assertEquals(\"Should return simpleClass even though it could not find constructor\", simpleClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return simpleClass even though it could not find constructor\", simpleClass.getInstanceData(), ", "+                   ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class simpleClass with signature: simpleClass(int).\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class simpleClass with signature: simpleClass(int).\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return simpleClass even though it cannot really be instantiated\", simpleClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return simpleClass even though it cannot really be instantiated\", ", "+                   simpleClass.getInstanceData(), ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"simpleClass is abstract and thus cannot be instantiated\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"simpleClass is abstract and thus cannot be instantiated\", ", "+                   errors.getLast().getFirst());", "-      SimpleNamedClassInstantiation ci2 = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"A.B\", new Type[0]), ", "-                                                                            new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      SimpleNamedClassInstantiation ci2 = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"A.B\", new Type[0]), ", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      a.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      b.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      ", "-      ", "-      ", "+      a.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      b.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+", "-      assertEquals(\"Error message should be correct\", \"A.B is not a static inner class, and thus cannot be instantiated from this context.  Perhaps you meant to use an instantiation of the form new A().new B()\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"A.B is not a static inner class, and thus cannot be instantiated from this context.  Perhaps \"", "+                     +\"you meant to use an instantiation of the form new A().new B()\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should still be just 5 errors\", 5, errors.size());", "-      ", "+      assertEquals(\"Should still be just 5 errors\", 5, errors.size()); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ba4e6175378b2d45ae3962574814cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "               public void testForArrayInitializerHelper()", "signatureAfterChange": "               public void testForArrayInitializerHelper()", "diff": ["-      LanguageLevelVisitor llv = new LanguageLevelVisitor(_b._file, _b._package, _b._importedFiles, ", "-                                                          _b._importedPackages, new LinkedList<String>(), new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "-                                                          new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+      LanguageLevelVisitor llv =", "+        new LanguageLevelVisitor(_b._file, _b._package, _b._importedFiles, ", "+                                 _b._importedPackages, new LinkedList<String>(), ", "+                                 new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "+                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-      SourceInfo si = JExprParser.NO_SOURCE_INFO;", "+      SourceInfo si = SourceInfo.NO_INFO;", "-      Expression e6 = new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\"));", "+      Expression e6 = new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"));", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray2));", "+      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray2));", "-      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray2));", "+      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray2));", "-      assertEquals(\"Should return double\", SymbolData.DOUBLE_TYPE.getInstanceData(), _b.forArrayInitializerHelper(ia, SymbolData.DOUBLE_TYPE));", "+      assertEquals(\"Should return double\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"The error message should be correct\", \"You cannot initialize the non-array type double with an array initializer\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot initialize the non-array type double with an array initializer\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"The error message should be correct\", \"The elements of this initializer should have type int but element 2 has type double\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The elements of this initializer should have type int but element 2 has type double\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(),", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"The error message should be correct\", \"The elements of this initializer should have type int but element 0 has type null\", errors.get(2).getFirst());", "-      assertEquals(\"The error message should be correct\", \"The elements of this initializer should have type int but element 1 has type null\", errors.get(3).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The elements of this initializer should have type int but element 0 has type null\", ", "+                   errors.get(2).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The elements of this initializer should have type int but element 1 has type null\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"Error message should be correct\", \"The elements of this initializer should all be instances, but you have specified the type name int.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The elements of this initializer should all be instances, but you have specified the type name\" + ", "+                   \" int.  Perhaps you meant to create a new instance of int\",", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f06b690f957202966c7f1a77e292cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "          public void testForComplexNamedClassInstantiation()", "signatureAfterChange": "          public void testForComplexNamedClassInstantiation()", "diff": ["+      ParenthesizedExpressionList pel1 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] { new IntegerLiteral(SourceInfo.NONE, 5)});", "-        new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                           new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"o\")), ", "-                                           new ClassOrInterfaceType(SourceInfo.NO_INFO, \"innerClass\", new Type[0]),                                  ", "-                                           new ParenthesizedExpressionList(SourceInfo.NO_INFO, ", "-                                                                           new Expression[] { new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"o\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"innerClass\", new Type[0]),                                  ", "+                                           pel1);", "-        new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                           new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                   new Word(SourceInfo.NO_INFO, \"o\")), ", "-                                           new ClassOrInterfaceType(SourceInfo.NO_INFO, \"innerClass\", new Type[0]), ", "-                                           new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, ", "+                                                                   new Word(SourceInfo.NONE, \"o\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"innerClass\", new Type[0]), ", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      //if outer class is in symbol table and visible, but there is not a matching inner constructor, should give an error but still return instance of type", "+      // if outer class is in symbol table and visible, but there is not a matching inner constructor, should give ", "+      // an error but still return instance of type", "-      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "+      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "-      assertEquals(\"Should return innerClass even though it could not find constructor\", innerClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return innerClass even though it could not find constructor\", innerClass.getInstanceData(), ", "+                   ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class outer.innerClass with signature: innerClass(int).\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\",", "+                   \"No constructor found in class outer.innerClass with signature: innerClass(int).\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return innerClass even though it cannot really be instantiated\", innerClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return innerClass even though it cannot really be instantiated\", innerClass.getInstanceData(), ", "+                   ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"outer.innerClass is abstract and thus cannot be instantiated\", errors.getLast().getFirst());              ", "+      assertEquals(\"Error message should be correct\", \"outer.innerClass is abstract and thus cannot be instantiated\", ", "+                   errors.getLast().getFirst());              ", "-      ComplexNamedClassInstantiation ci3 = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"outer\")), new ClassOrInterfaceType(SourceInfo.NO_INFO, \"innerClass\", new Type[0]), ", "-                                                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));             ", "-      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      assertEquals(\"Should return innerClass even though the syntax was wrong\", innerClass.getInstanceData(), ci3.visit(_etc));", "+      ComplexNamedClassInstantiation ci3 = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"outer\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"innerClass\", new Type[0]), ", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));             ", "+      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      assertEquals(\"Should return innerClass even though the syntax was wrong\", innerClass.getInstanceData(), ", "+                   ci3.visit(_etc));", "-                   \"The constructor of a non-static inner class can only be called on an instance of its containing class (e.g. new outer().new innerClass())\", errors.getLast().getFirst());", "+                   \"The constructor of a non-static inner class can only be called on an instance of its containing \"", "+                     + \"class (e.g. new outer().new innerClass())\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return innerClass even though the syntax was wrong\", innerClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return innerClass even though the syntax was wrong\", ", "+                   innerClass.getInstanceData(), ci1.visit(_etc));", "-                   \"You cannot instantiate a static inner class or interface with this syntax.  Instead, try new outer.innerClass()\",", "+                   \"You cannot instantiate a static inner class or interface with this syntax.  Instead, \"", "+                     + \"try new outer.innerClass()\",", "-      ComplexNamedClassInstantiation ci4 = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"o\")), new ClassOrInterfaceType(SourceInfo.NO_INFO, \"notInnerClass\", new Type[0]), ", "-                                                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      ParenthesizedExpressionList pel2 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new IntegerLiteral(SourceInfo.NONE, 5)});", "+      ComplexNamedClassInstantiation ci4 = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"o\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"notInnerClass\", new Type[0]), ", "+                                           pel2);", "-      assertEquals(\"Error message should be correct\", \"Class or variable notInnerClass not found.\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"Class or variable notInnerClass not found.\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface outer.innerClass is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface outer.innerClass in outer.innerClass is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface outer is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface outer in outer is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7705e8847b91035dd5d7cdc8839b004c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "               public void testForComplexMethodInvocation()", "signatureAfterChange": "               public void testForComplexMethodInvocation()", "diff": ["-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"giraffe\")),", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NONE, 5)}));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "-        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"giraffe\")),", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NONE, 4.2)}));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "-        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NONE, 4.2)}));", "-      ", "-      assertEquals(\"Error message should be correct\", \"No method found in class giraffe with signature: myName().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"No method found in class giraffe with signature: myName().\", ", "+                   errors.getLast().getFirst());", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                                          new VariableData[0], new String[0], g, NULL_LITERAL);", "-                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], g, NULL_LITERAL);", "-                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], g, NULL_LITERAL);", "-//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", ", "+//      errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface giraffe is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface giraffe in giraffe is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1073f0a93e72d781588ffdb1b62392", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "          public void testClassInstantiationHelper()", "signatureAfterChange": "          public void testClassInstantiationHelper()", "diff": ["-      ClassInstantiation simpleCI = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                                                      new ClassOrInterfaceType(SourceInfo.NO_INFO, \"testClass\", new Type[0]),", "-                                                                      new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      ClassInstantiation complexCI = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                                                        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Outer\")),", "-                                                                        new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]),", "-                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      ClassInstantiation simpleCI = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"testClass\", new Type[0]),", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "+      ClassInstantiation complexCI = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE,", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Outer\")),", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"Inner\", new Type[0]),", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      ClassInstantiation badArgs = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                                                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"anotherClass\", new Type[0]),", "-                                                                     new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "+      ParenthesizedExpressionList pel = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, ", "+                                        new Expression[] {new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                  new Word(SourceInfo.NONE, \"int\"))});", "+      ClassInstantiation badArgs =  ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE,", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"anotherClass\", new Type[0]),", "+                                          pel);", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.classInstantiationHelper(badArgs, SymbolData.DOUBLE_TYPE));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.classInstantiationHelper(badArgs, SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"Error message should be correct\", \"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create a \"", "+                     + \"new instance of int\", errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), _etc.classInstantiationHelper(simpleCI, testClass));", "+      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), ", "+                   _etc.classInstantiationHelper(simpleCI, testClass));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class testClass with signature: testClass().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class testClass with signature: testClass().\", errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of Outer.Inner\", outerInner.getInstanceData(), _etc.classInstantiationHelper(complexCI, outerInner));", "+      assertEquals(\"Should return instance of Outer.Inner\", outerInner.getInstanceData(), ", "+                   _etc.classInstantiationHelper(complexCI, outerInner));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class Outer.Inner with signature: Inner().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class Outer.Inner with signature: Inner().\", errors.getLast().getFirst());", "-      //if everything is in order, just return", "+      // if everything is in order, just return", "-      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), _etc.classInstantiationHelper(simpleCI, testClass));", "+      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), ", "+                   _etc.classInstantiationHelper(simpleCI, testClass));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca693a9c45acf041d940f21bbcb70c34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "             public void testForComplexMethodInvocation()", "signatureAfterChange": "               public void testForComplexMethodInvocation()", "diff": ["-  ", "+    ", "-      MethodInvocation staticNoArgs = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation noArgs = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation oneIntArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "-      MethodInvocation staticOneDoubleArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodInvocation oneDoubleArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-", "+      MethodInvocation staticNoArgs = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation noArgs = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation oneIntArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation staticOneDoubleArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      MethodInvocation oneDoubleArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      ", "-", "+      ", "-            ", "-      //if method is in class, should work fine!", "+      ", "+      // if method is in class, should work fine!", "-      //should be able to reference a static method from instance context", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      // should be able to reference a static method from instance context", "+      MethodData doubleArg = ", "+        new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, ", "+                       new VariableData[] { new VariableData(SymbolData.DOUBLE_TYPE) }, ", "+                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "-      //should be able to reference a static method from static context", "+      // should be able to reference a static method from static context", "-      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), staticOneDoubleArg.visit(_etc));", "+      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   staticOneDoubleArg.visit(_etc));", "-      //should not be able to reference a non-static method from a static context", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), staticNoArgs.visit(_etc));", "+      // should not be able to reference a non-static method from a static context", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(),", "+                   staticNoArgs.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "-                           ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot access the non-static method myName from a static context\", ", "+                   errors.getLast().getFirst());", "+      ", "-      //if in context of static method, should not be able to reference non-static method", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      // if in context of static method, should be able to reference non-static method given a receiver", "+      MethodData intArg = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, ", "+                       new VariableData[] { new VariableData(SymbolData.INT_TYPE)}, ", "+                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), oneIntArg.visit(_etc).getName());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "-", "-      //if enclosing class is private, should not work!", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), ", "+                   oneIntArg.visit(_etc).getName());", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());", "+//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+      ", "+      // if enclosing class is private, should not work!", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      assertEquals(\"Should be 3 errors\", 3, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec50b4ddf41981337211d015289951aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "          public void testMethodInvocationHelper()", "signatureAfterChange": "          public void testMethodInvocationHelper()", "diff": ["-      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation typeArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      ParenthesizedExpressionList exp1 = new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]);", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp1);", "+      ParenthesizedExpressionList exp2 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, ", "+                                        new Expression[]{new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                 new Word(SourceInfo.NONE, \"int\"))});", "+      MethodInvocation typeArg = new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp2);", "+      ParenthesizedExpressionList exp3 =", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new IntegerLiteral(SourceInfo.NONE, 5)});", "+      MethodInvocation oneIntArg =", "+        new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp3);", "+      ParenthesizedExpressionList exp4 =", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new DoubleLiteral(SourceInfo.NONE, 4.2)});", "+      MethodInvocation oneDoubleArg = ", "+        new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp4);", "-                       new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], _sd2, NULL_LITERAL);", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.methodInvocationHelper(noArgs, _sd2.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", ", "+                   SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(noArgs, _sd2.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"No method found in class \" + _sd2.getName() + \" with signature: myName(int).\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"No method found in class \" + _sd2.getName() ", "+                     + \" with signature: myName(int).\", ", "+                   errors.getLast().getFirst());", "-      //if matching method, but arg is not instance type, give error", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "+      // if matching method, but arg is not instance type, give error", "+      MethodData intArg = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, ", "+                       new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, NULL_LITERAL);", "-      //if matching method, no error", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), _etc.methodInvocationHelper(oneIntArg, _sd2.getInstanceData()));", "+      // if matching method, no error", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(oneIntArg, _sd2.getInstanceData()));", "-      ", "-      //non-static method from static context gives error", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), _etc.methodInvocationHelper(oneIntArg, _sd2));", "+      // non-static method from static context gives error", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(oneIntArg, _sd2));", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot access the non-static method myName from a static context\", ", "+                   errors.getLast().getFirst());", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData doubleArg = ", "+        new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, ", "+                       new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, NULL_LITERAL);", "-      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), _etc.methodInvocationHelper(oneDoubleArg, _sd2));", "+      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(oneDoubleArg, _sd2));"]}], "num": 9941}
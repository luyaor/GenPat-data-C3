{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f998ee60fd38794289c5f7ce3b067b88", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2da568b68d7e224cac7cda964a0ab940", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 224, "methodNumberAfterChange": 218, "signatureBeforeChange": "      protected Type immediateSupertype(SimpleClassType t)", "signatureAfterChange": "   protected Type immediateSupertype(ClassType t)", "diff": ["+  /** Get a class type's immediate supertype.  The result may be null. */", "-  ", "-  protected Type immediateSupertype(SimpleClassType t) {", "-    // can't use meet here because there may be a circular dependency with subtyping", "-    else { return new IntersectionType(IterUtil.compose(OBJECT, t.ofClass().declaredSupertypes())); }", "+    else {", "+      final Iterable<Type> declaredSupers = t.ofClass().declaredSupertypes();", "+      if (IterUtil.isEmpty(declaredSupers)) { return OBJECT; }", "+      else {", "+        Iterable<? extends Type> instantiatedSupers = t.apply(new TypeAbstractVisitor<Iterable<? extends Type>>() {", "+          @Override public Iterable<? extends Type> defaultCase(Type t) { return declaredSupers; }", "+          @Override public Iterable<? extends Type> forRawClassType(RawClassType t) {", "+            return IterUtil.mapSnapshot(declaredSupers, ERASE);", "+          }", "+          @Override public Iterable<? extends Type> forParameterizedClassType(ParameterizedClassType t) {", "+            ParameterizedClassType tCap = capture(t);", "+            DJClass c = tCap.ofClass();", "+            return substitute(c.declaredSupertypes(), SymbolUtil.allTypeParameters(c), tCap.typeArguments());", "+          }", "+        });", "+        if (IterUtil.sizeOf(instantiatedSupers, 2) > 1) { return new IntersectionType(instantiatedSupers); }", "+        else { return IterUtil.first(instantiatedSupers); }", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6854b1f7c6f783ddf5a5f712bd722c67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 358, "methodNumberAfterChange": 320, "signatureBeforeChange": "           public boolean contains(DJClass c)", "signatureAfterChange": "   private DJMethod instantiateMethod(final DJMethod declaredMethod, Type declaringType)", "diff": ["+   */", "+  private DJMethod instantiateMethod(final DJMethod declaredMethod, Type declaringType) {", "+    Type dynamicContext;", "+    if (declaredMethod.isStatic()) {", "+      if (declaringType instanceof ClassType) {", "+        dynamicContext = SymbolUtil.dynamicOuterClassType((ClassType) declaringType);", "+      }", "+      else { dynamicContext = null; }", "+    }", "+    else { dynamicContext = declaringType; }", "+    if (dynamicContext == null) { return declaredMethod; }", "+    else {", "+      return dynamicContext.apply(new TypeAbstractVisitor<DJMethod>() {", "+        @Override public DJMethod defaultCase(Type dynamicContext) { return declaredMethod; }", "+        @Override public DJMethod forRawClassType(RawClassType dynamicContext) {", "+          // TODO: raw member access warnings", "+          return new ErasedMethod(declaredMethod);", "+        }", "+        @Override public DJMethod forParameterizedClassType(ParameterizedClassType dynamicContext) {", "+          ParameterizedClassType dynamicContextCap = capture(dynamicContext);", "+          Iterable<VariableType> tparams = SymbolUtil.allTypeParameters(dynamicContextCap.ofClass());", "+          return new InstantiatedMethod(declaredMethod, tparams, dynamicContextCap.typeArguments());", "+        }", "+      });", "+    }", "+  }", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              if (includePrivate) { return c.isStatic(); }", "-              else { return c.isStatic() && !c.accessibility().equals(Access.PRIVATE); }", "-            }", "-            else { return false; }", "-          }"]}], "num": 29748}
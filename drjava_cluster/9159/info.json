{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6de8158cc947b6dcce5f747a032a5da5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7893ec7428600fd912b7a545d9b4c287", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testCompileAnyUnsavedButSaveWhenAsked() throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileAnyUnsavedButSaveWhenAsked() throws BadLocationException, IOException, InterruptedException", "diff": ["-        try {", "-          doc.saveFile(new FileSelector(file));", "-          doc2.saveFile(new FileSelector(file2));", "-        }", "-        catch (IOException ioe) { fail(\"Save produced exception: \" + ioe); }", "+        saveFile(doc, new FileSelector(file));", "+        saveFile(doc2, new FileSelector(file2));", "-    doc.startCompile();", "+    testStartCompile(doc);", "+    _log.log(\"testCompileAnyUnsavedButSaveWhenAsked complete\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e369e7b61d7aaea666b873de2ecfb17d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Pair.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public boolean equals(Object obj)", "signatureAfterChange": "      public boolean equals(Object o)", "diff": ["-  public boolean equals(Object obj) {", "-    if (obj == null) return false;", "-    if ((obj.getClass() != this.getClass())) { //|| (obj.hashCode() != this.hashCode())) {", "-      return false;", "-    }", "-    ", "-    return (this.getFirst().equals(((Pair) obj).getFirst()) && this.getSecond().equals(((Pair) obj).getSecond()));", "+  public boolean equals(Object o) {", "+    return  (o != null) && (o.getClass() == this.getClass()) &&", "+      getFirst().equals(((Pair) o).getFirst()) && getSecond().equals(((Pair) o).getSecond());"]}], "num": 9159}
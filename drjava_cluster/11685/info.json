{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0523198d40632d629f5ef075e79b494c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a15fc821358609fe29d85e84b006318", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public synchronized void resume()", "signatureAfterChange": "   public synchronized void resume()", "diff": ["+   */", "+  public synchronized void resume() {", "+    if (!isReady()) return;", "+    ThreadReference thread = null;", "+    try{", "+      thread = _suspendedThreads.pop();", "+    }catch(NoSuchElementException e){", "+      /** Just return because there is no thread to resume */", "+    }", "+    ", "+    resumeThread(thread);", "-  public synchronized void resume() {", "-    if (_thread == null)", "-    int suspendCount = _thread.suspendCount();", "-    for (int i=suspendCount; i>0; i--) {", "-      _thread.resume();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbfc1a3513d3f0f99adb8e5a43b91c93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "signatureAfterChange": "   public void checkTypeParameters(TypeParameter[] tparams)", "diff": ["-    TypeNameVisitor v = new TypeNameVisitor();", "-      Type upperBound = param.getBound().acceptVisitor(v);", "-      for (Type t : checkList(param.getInterfaceBounds())) {", "-        upperBound = ts.meet(upperBound, t);", "-      }", "-      BoundedSymbol bounds = getTypeVariable(param).symbol();", "-      bounds.initializeUpperBound(upperBound);", "-      bounds.initializeLowerBound(TypeSystem.NULL);", "+      Iterable<ReferenceTypeName> bounds = IterUtil.compose(param.getBound(), param.getInterfaceBounds());", "+      // meet is guaranteed to be nonempty, and thus not TOP", "+      Type upperBound = ts.meet(checkList(bounds));", "+      BoundedSymbol b = getTypeVariable(param).symbol();", "+      b.initializeUpperBound(upperBound);", "+      b.initializeLowerBound(TypeSystem.NULL);"]}], "num": 11685}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c22904c8c9ee0b1fef9b3d9cd30e72e6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bade33f5edb1fb4d5591c6278c29ae14", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 10, "signatureBeforeChange": "              public void fileSaved(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void testInfiniteLoop() throws Exception", "diff": ["-      ", "-      public void fileSaved(OpenDefinitionsDocument doc) {", "-        assertModified(false, doc);", "-        assertSaveAllBeforeProceedingCount(0);", "-        assertCompileStartCount(0);", "-        assertCompileEndCount(0);", "-        ", "-        File f = null;", "-        try {", "-          f = doc.getFile();", "-        }", "-        catch (IllegalStateException ise) {", "-          // We know file should exist", "-          throw new UnexpectedException(ise);", "-        }", "-        catch (FileMovedException fme) {", "-          // We know file should exist", "-          fail(\"file does not exist\");", "-        }", "-        assertEquals(\"JUNIT file saved\", file, f);", "-        saveCount++;", "-      }", "+   */", "+  public void testInfiniteLoop() throws Exception {", "+    final OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_INFINITE_TEXT);", "+    final File file = new File(_tempDir, \"MonkeyTestInfinite.java\");", "+    doc.saveFile(new FileSelector(file));", "+    ", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener();", "+    TestListener listener2 = new TestListener() {", "+      public void junitStarted(OpenDefinitionsDocument odd) {", "+        assertEquals(\"Documents don't match\", doc, odd);", "+        junitStartCount++;", "+      }", "+      ", "+      public void junitRunning() {", "+        junitRunningCount++;", "+        // kill the infinite test once the tests have started", "+        _model.resetInteractions();", "+      }", "+      ", "+      public void junitEnded() {", "+        synchronized(this) {", "+          assertInteractionsResetCount(1);", "+          junitEndCount++;", "+          notify();", "+        }", "+      }", "+      ", "+      public void interactionsResetting() {", "+        assertInteractionsResetCount(0);", "+        interactionsResettingCount++;", "+      }", "+      ", "+      public void interactionsReset() {", "+        assertInteractionsResettingCount(1);", "+        assertJUnitEndCount(0);", "+        interactionsResetCount++;", "+      }", "+    };", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    _model.removeListener(listener);", "+    _model.addListener(listener2);", "+    synchronized(listener2) {", "+      doc.startJUnit();", "+      listener2.assertJUnitStartCount(1);", "+      listener2.wait();", "+    }", "+    _model.removeListener(listener2);", "+    listener2.assertJUnitEndCount(1);", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa7d17cfced5d8668d6cd9beda6fc01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "b35d99a8e8e746835cbe1475be92c2916e38764d", "commitAfterChange": "e52c8e82d0acb8aa5662b1f25d8012dda6d02b06", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStartupAndShutdown()     throws DebugException, InterruptedException", "signatureAfterChange": "   public void testStartupAndShutdown()     throws DebugException, InterruptedException", "diff": ["-    debugListener.assertDebuggerStartedCount(1);", "+    debugListener.assertDebuggerStartedCount(1);  //fires", "+    debugListener.assertDebuggerStartedCount(1);", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    ", "+    ", "+    // Start debugger again without resetting", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(2);  //fires", "+    ", "+    // Reset interactions (which shuts down debugger)", "+    InterpretListener resetListener = new InterpretListener() {", "+      public void interpreterChanged(boolean inProgress) {", "+        // Don't notify: happens in the same thread", "+        interpreterChangedCount++;", "+      }", "+      public void interpreterResetting() {", "+        // Don't notify: happens in the same thread", "+        interpreterResettingCount++;", "+      }", "+      public void interpreterReady() {", "+        synchronized(_notifierLock) {", "+          interpreterReadyCount++;", "+          if (printEvents) System.out.println(\"interpreterReady \" + interpreterReadyCount);", "+          _notifyLock();", "+        }", "+      }", "+    };", "+    _model.addListener(resetListener);", "+    synchronized(_notifierLock) {", "+      _model.resetInteractions();", "+      _waitForNotifies(2);  // shutdown, interpreterReady", "+      _notifierLock.wait();", "+    }", "+    _model.removeListener(resetListener);", "+    resetListener.assertInterpreterResettingCount(1);  //fires (no waiting)", "+    resetListener.assertInterpreterReadyCount(1);  //fires", "+    debugListener.assertDebuggerStartedCount(2);", "+    debugListener.assertDebuggerShutdownCount(2);  //fires", "+    ", "+    ", "+    // Start debugger again after reset", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(3);  //fires", "+    debugListener.assertDebuggerShutdownCount(2);", "+    ", "+    // Shutdown the debugger", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertDebuggerStartedCount(3);", "+    debugListener.assertDebuggerShutdownCount(3);  //fires", "+    "]}], "num": 28968}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bd34ee94a0eb112a32a5676f204a531", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac96bcd2c5c47e0aa4329daff2bf3ec3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/TokenList.java", "commitBeforeChange": "973271a114877f62b3cb122ffc9ab5f28c91b43a", "commitAfterChange": "b68b258fee7c24e8a8c68fc2e7d3d99ccd585753", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private int _moveRight(int count, int currentOffset)", "signatureAfterChange": "     private int _moveRight(int count, int currentOffset)", "diff": ["-      while (count >= current().getSize() - currentOffset) {", "-        count = count - current().getSize() + currentOffset;", "+      ", "+      // Initialize loop variables", "+      int size = current().getSize();", "+      count = count + currentOffset;", "+        ", "+      // Process tokens moving forward", "+      while (count >= size) { // advance one token", "+        count = count - size;", "-        currentOffset = 0;", "+        size = current().getSize();", "-      return count + currentOffset; //returns the offset", "+      return count; // returns the offset in the current token"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb7e40779a37f03dbd6e253e20f8d329", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 234, "signatureBeforeChange": "     protected void shrinkManager()", "signatureAfterChange": "     protected void shrinkManager()", "diff": ["-    /** Remove regions if there are more than the maximum number allowed. */", "+    /** Remove regions if there are more than the maximum number allowed. Typically used to remove one region. */", "-      if (_maxSize>0) {", "-        while(_regions.size()>_maxSize) {", "+      if (_maxSize > 0) {", "+        int size;", "+        while ((size = _regions.size()) > _maxSize) {", "-          if (index<=_regions.size()/2) {", "-            // in first half, remove last element", "-            removeRegion(_regions.lastElement());", "+          if (index <= (size - 1)/2) {", "+            // in first half, remove last element; distinct from index unless _maxSize = 1", "+            _regions.remove(size - 1);", "-            // in second half, remove first element", "-            removeRegion(_regions.firstElement());", "+            // in second half, remove first element; distinct from index", "+            _regions.remove(0);"]}], "num": 28972}
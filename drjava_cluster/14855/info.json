{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "673c6e66e8d6e2e88f7505eec8757703", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c3dc5204eb4196d01d7f941eba5de9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorAbsRelFileOptionComponent.java", "commitBeforeChange": "b59ea5c5062a947f96790df7fe854009e693434a", "commitAfterChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public void setValue(ArrayList<File> files)", "signatureAfterChange": "       public void setValueAt(Object value, int row, int col)", "diff": ["-  /** Displays the given value. */\r", "-  public void setValue(ArrayList<File> files) {\r", "-    _listModel.clear();\r", "-    for (File f: files) _listModel.addElement(f);\r", "-  }\r", "+      }", "+      public void setValueAt(Object value, int row, int col) {", "+        AbsRelFile f = _data.get(row);", "+        switch(col) {", "+          case 1:", "+            f.keepAbsolute((Boolean)value);", "+            break;", "+          default:", "+            throw new IllegalArgumentException(\"Illegal column\");", "+        }", "+        fireTableCellUpdated(row, col);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a229e6f10de1f88dbf689aad2477bad1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "    protected void handleSlaveQuit(int status)", "signatureAfterChange": "           public void run()", "diff": ["-", "-  protected void handleSlaveQuit(int status) {", "-    if (_enabled) {", "-      startInterpreterJVM();", "-    }", "-", "-    _model.replCalledSystemExit(status);", "-  }", "+        Thread thread = new Thread() {", "+          public void run() {", "+            try {", "+              int status = _interpreterProcess.waitFor();", "+              restartInterpreterJVM();", "+              _model.replCalledSystemExit(status);", "+            }", "+            catch (InterruptedException ie) {", "+              throw new edu.rice.cs.util.UnexpectedException(ie);", "+            }", "+          }"]}], "num": 14855}
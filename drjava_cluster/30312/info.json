{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "282a6b8ef7eee76ab419454f1eb6ee53", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cc6a856e85c59b37f9302da094d832", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException", "signatureAfterChange": "   private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException", "diff": ["-  private boolean _isAnonymousInnerClass(int newPos, int openSquigglyPos) throws BadLocationException {", "-//    String t = getText(DOCSTART, openSquigglyPos+1);", "+  private boolean _isAnonymousInnerClass(final int pos, final int openSquigglyPos) throws BadLocationException {", "+//    String t = getText(0, openSquigglyPos+1);", "-    final StringBuilder keyBuf = ", "-      new StringBuilder(\"_getAnonymousInnerClassIndex:\").append(newPos).append(':').append(openSquigglyPos);", "-    String key = keyBuf.toString();", "-    ", "-    synchronized(_reduced) {", "-      Boolean cached = (Boolean) _checkCache(key);", "-      if (cached != null) {", "+    final Query key = new Query.AnonymousInnerClass(pos, openSquigglyPos);", "+    Boolean cached = (Boolean) _checkCache(key);", "+    if (cached != null) {", "-        return cached;", "-      }", "-      ", "-      // acquireReadLock assumed to be held", "+      return cached;", "+    }", "+    int newPos = pos;", "+    synchronized(_reduced) {", "-      String text = getText(DOCSTART, openSquigglyPos+1);", "+      String text = getText(0, openSquigglyPos+1);", "-      if (classStart != ERROR_INDEX) { ", "+      if (classStart != -1) { ", "-        if (parenStart != ERROR_INDEX) {", "+        if (parenStart != -1) {", "-            parenStart = ERROR_INDEX;", "+            parenStart = -1;", "-            if (closePointyBracket != ERROR_INDEX) {", "+            if (closePointyBracket != -1) {", "-        if (parenStart != ERROR_INDEX) {", "+        if (parenStart != -1) {", "-            _reduced.move(origLocation - (parenStart+1));    // Restore the state of the reduced model;", "+            _reduced.move(origLocation - (parenStart + 1));    // Restore the state of the reduced model;", "-              parenEnd = parenEnd + parenStart+1;", "+              parenEnd = parenEnd + parenStart + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9d24faebc580610a748ffe8d2af297", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   int _getAnonymousInnerClassIndex(int pos) throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException", "diff": ["-  int _getAnonymousInnerClassIndex(int pos) throws BadLocationException, ClassNameNotFoundException {   ", "+  int _getAnonymousInnerClassIndex(final int pos) throws BadLocationException, ClassNameNotFoundException {   ", "-    final StringBuilder keyBuf = new StringBuilder(\"_getAnonymousInnerClassIndex:\").append(pos);", "-    final String key = keyBuf.toString();", "+    final Query key = new Query.AnonymousInnerClassIndex(pos);", "-    // acquireReadLock assumed to be held", "-    --pos; // move outside the curly brace", "-    char[] delims = {'{','}','(',')','[',']','+','-','/','*',';',':','=',", "-      '!','@','#','$','%','^','~','\\\\','\"','`','|'};", "-    String className = getEnclosingClassName(pos, true);", "-    String text = getText(DOCSTART, pos);", "+    // readLock assumed to be held", "+    int newPos = pos - 1; // move outside the curly brace", "+    final char[] delims = {'{','}','(',')','[',']','+','-','/','*',';',':','=','!','@','#','$','%','^','~','\\\\','\"','`','|'};", "+    final String className = getEnclosingClassName(newPos, true);", "+    final String text = getText(0, newPos);  // why exclude char before curly brace?", "-    int newPos = pos;", "+    ", "-    while ((newPos = _findPrevKeyword(text, \"new\", newPos - 1)) != ERROR_INDEX) {", "+    while ((newPos = _findPrevKeyword(text, \"new\", newPos - 1)) != -1) {", "-      if (classStart == ERROR_INDEX) { continue; }", "+      if (classStart == -1) { continue; }", "-      if (parenStart == ERROR_INDEX) { continue; }", "+      if (parenStart == -1) { continue; }", "-        parenStart = ERROR_INDEX;", "+        parenStart = -1;", "-        if (closePointyBracket != ERROR_INDEX) {", "+        if (closePointyBracket != -1) {", "-      if (parenStart == ERROR_INDEX) { continue; }      ", "+      if (parenStart == -1) { continue; }      ", "-      if (nextOpenSquiggly == ERROR_INDEX) { continue; }", "+      if (nextOpenSquiggly == -1) { continue; }", "-    _storeInCache(key, index, pos);", "+    _storeInCache(key, index, pos - 1);"]}], "num": 30312}
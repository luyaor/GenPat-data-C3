{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af7b39d6db0a0dbe779fda811bf4b11c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65b8f4728369ff5747640807482d168f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-    ", "-    MethodData md = createMethodData(that, _enclosingData);", "-    String className = getUnqualifiedClassName(_enclosingData.getName());", "+    assert _enclosing != null;", "+    MethodData md = createMethodData(that, _enclosing);", "+    String className = getUnqualifiedClassName(_enclosing.getName());", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors \"", "+                           + \"do not have an explicit return type\",", "-    else {", "-      _enclosingData.addMethod(md);", "-    }", "-    that.getBody().visit(new BodyBodyFullJavaVisitor(md, _file, _package, _importedFiles, _importedPackages, ", "-                                                     _classNamesInThisFile, continuations, _innerClassesToBeParsed));", "+    else _enclosing.addMethod(md);", "+    that.getBody().visit(new BodyBodyFullJavaVisitor(md, _file, _package, _enclosingClassName, _importedFiles, _importedPackages, ", "+                                                     _classesInThisFile, continuations, fixUps, new HashSet<String>()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccd3ed83c0db5900e5da55385092a598", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public Void forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */", "+    */", "-    MethodData md = createMethodData(that, _classData);", "+    MethodData md = createMethodData(that, _enclosing);", "-    String className = getUnqualifiedClassName(_classData.getName());", "+    String className = getUnqualifiedClassName(_enclosing.getName());", "-    else _classData.addMethod(md);", "+    else _enclosing.addMethod(md);", "-    that.getBody().visit(new BodyBodyIntermediateVisitor(md, _file, _package, _importedFiles, _importedPackages, ", "-                                                         _classNamesInThisFile, continuations, _innerClassesToBeParsed));", "+    that.getBody().visit(new BodyBodyIntermediateVisitor(md, _file, _package, _enclosingClassName, _importedFiles, ", "+                                                         _importedPackages, _classesInThisFile, continuations, ", "+                                                         fixUps, new HashSet<String>()));"]}], "num": 4486}
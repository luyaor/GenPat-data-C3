{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c89c1605a69da34cdad4c0e918473ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c813170ab2debe628f9c08a82941296c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "    private static void createAndShowGUI(final String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-", "-  private static void createAndShowGUI(final String[] args) {", "+  ", "+  public static void configureAndLoadDrJavaRoot(String[] args) {", "-      // handleCommandLineArgs will return true if the program should load", "+      // handleCommandLineArgs will return true if the DrJava should be loaded", "-        String configLAFName = _config.getSetting(LOOK_AND_FEEL);", "-        String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "-        if (!configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "-        ", "-        // Install L&F upgrades for windows XP from winlaf-0.5.1.jar", "-        // For more information see: https://winlaf.dev.java.net/release_0.5.html", "-//       net.java.plaf.LookAndFeelPatchManager.initialize();  ", "-                ", "-        // Don't use JSR14v20 if running with Java 1.5 because putting it on the bootclasspath causes DrJava to", "-        // hang on startup.", "-        _usingJSR14v20 = checkForJSR14v20() && ! System.getProperty(\"java.specification.version\").equals(\"1.5\");", "-", "+        // Check that compiler and debugger are available on classpath (including tools.jar location)", "- ", "-        // The MainFrame *must* be constructed after the compiler setup process has", "-        // occurred; otherwise, the list of compilers in the UI will be wrong.", "-        // At some point this should be fixed, which would involve making the", "-        // CompilerRegistry notify listeners when there is a change in the list of", "-        // available compilers.", "-", "-        final MainFrame mf = new MainFrame();", "-        // Make sure all uncaught exceptions are shown in an AWTExceptionHandler", "-        AWTExceptionHandler.setFrame(mf);", "-        System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.AWTExceptionHandler\");", "-                ", "-        _openCommandLineFiles(mf, _filesToOpen);", "+        // Start the DrJava master JVM", "+        String pathSep = System.getProperty(\"path.separator\");", "+        String classPath = edu.rice.cs.util.FileOps.convertToAbsolutePathEntries(System.getProperty(\"java.class.path\"));", "-        /* setVibible is moved to the end of the eventqueue to be sure all files has finished loading and added to the", "-         * fileview before the MainFrame is set visible.  When this was not done, occassionally a NullPointerException ", "-         * was encountered on startup when specifying a file (ex: java -jar drjava.jar somefile.java)", "-         */", "-        SwingUtilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});", "+        // Add tools.jar from preferences if specified", "+        classPath += pathSep;", "+        File toolsFromConfig = getConfig().getSetting(JAVAC_LOCATION);", "+        if (toolsFromConfig != FileOption.NULL_FILE) {", "+          classPath += toolsFromConfig.getAbsolutePath() + pathSep;", "+        }", "-        // redirect stdout to DrJava's console", "-        System.setOut(new PrintStream(new OutputStreamRedirector() {", "-          public void print(String s) { mf.getModel().systemOutPrint(s); }", "-        }));", "-", "-        // redirect stderr to DrJava's console", "-        System.setErr(new PrintStream(new OutputStreamRedirector() {", "-          public void print(String s) { mf.getModel().systemErrPrint(s); }", "-        }));", "-", "-        // Show debug console if enabled", "-        if (_showDrJavaDebugConsole) showDrJavaDebugConsole(mf);", "+        // Fall back on guesses from ToolsJarClassLoader", "+        classPath += ToolsJarClassLoader.getToolsJarClassPath();", "+        ", "+        File workDir = getConfig().getSetting(WORKING_DIRECTORY);", "+        if (workDir == null) workDir = FileOption.NULL_FILE;", "+        ", "+        // Add the string pathSep to _filesToOpen if _showDebugConsole is true", "+        if (_showDebugConsole) _filesToOpen.add(pathSep);  // THIS IS A KLUDGE TO PASS THIS BOOLEAN FLAG TO DrJava", "+        ", "+        String[] jvmArgs = _jmvArgs.toArray(new String[0]);", "+        String[] classArgs = _filesToOpen.toArray(new String[0]);", "+        ", "+        // Run a new copy of DrJava and exit", "+        try {", "+//          Utilities.showDebug(\"Starting DrJavaRoot with classArgs = \" + Arrays.toString(classArgs) + \"; classPath = \" + classPath + ", "+//                             \"; jvmArgs = \" + Arrays.toString(jvmArgs) + \"; workDir = \" + workDir);", "+          ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, jvmArgs, workDir);", "+        }", "+        catch (IOException ioe) {", "+          // Display error", "+          final String[] text = {", "+            \"DrJava was unable to load its compiler and debugger.  Would you \",", "+            \"like to start DrJava without a compiler and debugger?\", \"\\nReason: \" + ioe.toString()", "+          };", "+          int result = JOptionPane.showConfirmDialog(null, text, \"Could Not Load Compiler and Debugger\",", "+                                                     JOptionPane.YES_NO_OPTION);", "+          if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+        }", "-      // Show any errors to the real System.err and in an AWTExceptionHandler", "-      _consoleErr.println(t.getClass().getName() + \": \" + t.getMessage());", "-      t.printStackTrace(_consoleErr);System.out.println(\"error thrown\");", "+      // Show any errors to the System.err and in an AWTExceptionHandler", "+      System.err.println(t.getClass().getName() + \": \" + t.getMessage());", "+      t.printStackTrace(System.err);System.out.println(\"error thrown\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5274779265e00a7e90cf7b9ad58d394", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] _filesToOpen)", "signatureAfterChange": "      public static void main(final String[] filesToOpen)", "diff": ["-", "-  public static void main(String[] _filesToOpen) {", "+  ", "+  public static void main(final String[] filesToOpen) {", "-    boolean _showDebugConsole = false;", "-    int len = _filesToOpen.length;", "-    if (len > 0 && _filesToOpen[len - 1] == System.getProperty(\"path.separator\")) {", "-      _showDebugConsole = true;", "+    boolean debugConsole = false;", "+    int len = filesToOpen.length;", "+    if (len > 0 && filesToOpen[len - 1] == System.getProperty(\"path.separator\")) {", "+      debugConsole = true;", "+    ", "+    final int numFiles = len;", "+    final boolean showDebugConsole = debugConsole;", "-    // files to open held in _filesToOpen[0:len] which may be an initial segment of _filesToOpen", "-    try {", "-      String configLAFName = DrJava.getConfig().getSetting(LOOK_AND_FEEL);", "-      String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "-      if (! configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "-      ", "-      // The MainFrame *must* be constructed after the compiler setup process has", "-      // occurred; otherwise, the list of compilers in the UI will be wrong.", "-      ", "+    /* files to open held in filesToOpen[0:numFiles-1] which may be an initial segment of filesToOpen */", "+    ", "+    /* In some unit test cases, creating a MainFrame in the main thread generated index out of bounds exceptions.  It appear that this", "+     * creation process generates some swing events that are processed by the event thread.  Hence we need to create the MainFrame in", "+     * the event thread.", "+     */", "+//    Utilities.invokeAndWait(new Runnable() {", "+//      public void run() {", "+        try {", "+          String configLAFName = DrJava.getConfig().getSetting(LOOK_AND_FEEL);", "+          String currLAFName = UIManager.getLookAndFeel().getClass().getName();", "+          if (! configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "+          ", "+          // The MainFrame *must* be constructed after the compiler setup process has", "+          // occurred; otherwise, the list of compilers in the UI will be wrong.", "+          ", "-      ", "-      final MainFrame mf = new MainFrame();", "-      ", "+          ", "+          final MainFrame mf = new MainFrame();", "+          ", "-      ", "-      // Make sure all uncaught exceptions are shown in an DrJavaErrorHandler", "-      DrJavaErrorWindow.setFrame(mf);", "-      System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.DrJavaErrorHandler\");", "-      ", "-      _openCommandLineFiles(mf, _filesToOpen, len);", "-      ", "-      /* This call on invokeLater only runs in the main thread, so we use SwingUtilities rather than Utilities.", "-       * We use invokeLater here ensure all files have finished loading and added to the fileview before the MainFrame", "-       * is set visible.  When this was not done, we occasionally encountered a NullPointerExceptio on startup when ", "-       * specifying a file (ex: java -jar drjava.jar somefile.java)", "-       */", "-      SwingUtilities.invokeLater(new Runnable(){ public void run(){mf.setVisible(true);}});", "-      ", "-      // redirect stdout to DrJava's console", "-      System.setOut(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) { mf.getModel().systemOutPrint(s); }", "-      }));", "-      ", "-      // redirect stderr to DrJava's console", "-      System.setErr(new PrintStream(new OutputStreamRedirector() {", "-        public void print(String s) { mf.getModel().systemErrPrint(s); }", "-      }));", "-      ", "+          ", "+          // Make sure all uncaught exceptions are shown in an DrJavaErrorHandler", "+          DrJavaErrorWindow.setFrame(mf);", "+          System.setProperty(\"sun.awt.exception.handler\", \"edu.rice.cs.drjava.ui.DrJavaErrorHandler\");", "+          ", "+          _openCommandLineFiles(mf, filesToOpen, numFiles);", "+          ", "+          /* This call on invokeLater only runs in the main thread, so we use SwingUtilities rather than Utilities.", "+           * We use invokeLater here ensure all files have finished loading and added to the fileview before the MainFrame", "+           * is set visible.  When this was not done, we occasionally encountered a NullPointerExceptio on startup when ", "+           * specifying a file (ex: java -jar drjava.jar somefile.java)", "+           */", "+          SwingUtilities.invokeLater(new Runnable(){ public void run(){ mf.setVisible(true); } });", "+          ", "+          // redirect stdout to DrJava's console", "+          System.setOut(new PrintStream(new OutputStreamRedirector() {", "+            public void print(String s) { mf.getModel().systemOutPrint(s); }", "+          }));", "+          ", "+          // redirect stderr to DrJava's console", "+          System.setErr(new PrintStream(new OutputStreamRedirector() {", "+            public void print(String s) { mf.getModel().systemErrPrint(s); }", "+          }));", "+          ", "-      // Show debug console if enabled", "-      if (_showDebugConsole) showDrJavaDebugConsole(mf);", "-    }", "-    catch (Throwable t) {", "-      // Show any errors to the real System.err and in an DrJavaErrorHandler", "-      _consoleErr.println(t.getClass().getName() + \": \" + t.getMessage());", "-      t.printStackTrace(_consoleErr);System.out.println(\"error thrown\");", "-      new DrJavaErrorHandler().handle(t);", "-    }", "+          // Show debug console if enabled", "+          if (showDebugConsole) showDrJavaDebugConsole(mf);", "+        }", "+        catch (Throwable t) {", "+          // Show any errors to the real System.err and in an DrJavaErrorHandler", "+          _consoleErr.println(t.getClass().getName() + \": \" + t.getMessage());", "+          t.printStackTrace(_consoleErr);", "+          System.out.println(\"error thrown\");", "+          new DrJavaErrorHandler().handle(t);", "+        }", "+//      }", "+//    });"]}], "num": 19919}
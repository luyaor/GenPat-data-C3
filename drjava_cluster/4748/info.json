{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d30556cca79bfc005a0f0e9ff0676b6c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30c232ac87fe068414001011d0ae932c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree(int indentLevel)", "signatureAfterChange": "   public void buildTree(int indentLevel)", "diff": ["-   */", "+    */", "-      rule38 = new QuestionCurrLineStartsWith(\")\",rule30,rule15),  //BROKEN", "-        // Why is rule 38 here?", "+      rule38 = new QuestionCurrLineStartsWith(\")\", rule30, rule15),  //BROKEN", "-      rule13 = new QuestionBraceIsParenOrBracket(rule14, rule17),", "+      rule13 = new QuestionBraceIsParenOrBracket(rule14, rule17),  // last block/expression list opens with \"(\" or \"[\"?", "-      rule05 = new ActionStartPrevLinePlus(\" \"),", "-      rule04 = new ActionStartPrevLinePlus(\" * \"),", "-        ", "+      rule05 = new ActionStartPrevLinePlus(\" \"),    // padding prefix for interior of ordinary block comment", "+      rule04 = new ActionStartPrevLinePlus(\" * \"),  // padding prefix for new line within ordinary block comment", "+      rule46 = new ActionStartPrevLinePlus(\"  * \"), // padding prefix for new line within special javadoc block comment", "+      rule47 = new ActionStartPrevLinePlus(\"  \"),   // padding prefix for interior of special javadoc block comment", "+      rule48 = new QuestionPrevLineStartsJavaDocWithText(rule47, rule05),  // Prev line begins special javadoc comment? ", "+      rule45 = new QuestionPrevLineStartsJavaDocWithText(rule46, rule04),  // Prev line begins special javadoc comment?", "-      rule03 = new QuestionCurrLineEmptyOrEnterPress((autoCloseComments? rule42 : rule04), rule05),", "+      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] {\"  */\" }, 0, 4, 0, 4), ", "+      rule50 = new QuestionFollowedByStar(rule46, rule49),", "+      rule51 = new QuestionPrevLineStartsJavaDocWithText(rule50, rule42),", "+      rule03 = new QuestionCurrLineEmptyOrEnterPress((autoCloseComments? rule51 : rule45), rule48),", "-", "-       ", "-//      rule01 = new QuestionInsideComment(rule02, rule13);  /* replaced by preceding three rules */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "582321ad307b1ca7b6a587016cafc269", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "d1e77e5d0818e6bb43ce09eb1ecec03bb76646fd", "commitAfterChange": "936df97bedea66175f36cae49ba74b17abf11e8a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree(int indentLevel)", "signatureAfterChange": "   public void buildTree(int indentLevel)", "diff": ["+      rule45 = new QuestionPrevLineStartsJavaDocWithText(rule46, rule04),  // Prev line begins special javadoc comment?", "-      rule45 = new QuestionPrevLineStartsJavaDocWithText(rule46, rule04),  // Prev line begins special javadoc comment?", "+      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] { \"  * \\n\", \"  */\"}, 0, 4, 0, 4),", "+      rule50 = new QuestionPrevLineStartsJavaDocWithText(rule49, rule41),", "+", "+      rule03 = new QuestionCurrLineEmptyOrEnterPress(rule45, rule48),", "-      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] {\"  */\" }, 0, 4, 0, 4), ", "-      rule50 = new QuestionFollowedByStar(rule46, rule49),", "-      rule51 = new QuestionPrevLineStartsJavaDocWithText(rule50, rule42),", "-      rule03 = new QuestionCurrLineEmptyOrEnterPress((autoCloseComments? rule51 : rule45), rule48),", "-      rule02 = new QuestionPrevLineStartsComment(rule03, rule06),", "+//      rule49 = new ActionStartPrevLinePlusMultilinePreserve(new String[] {\"  */\" }, 0, 4, 0, 4), ", "+//      rule50 = new QuestionFollowedByStar(rule46, rule49),", "+//      rule51 = new QuestionPrevLineStartsJavaDocWithText(rule50, rule42),", "+      rule51 = new QuestionCurrLineEmpty(rule50, rule03), // autoClose: rule03 unnecessarily retests CurrentLineEmpty", "+      rule02 = new QuestionPrevLineStartsComment(autoCloseComments ? rule51 : rule03, rule06),"]}], "num": 4748}
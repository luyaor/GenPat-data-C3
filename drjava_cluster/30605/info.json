{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7a38334cf920592b92b29b4ac541a34", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98a42a0c7f308b08afeb8e77674d2955", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 110, "signatureBeforeChange": "   private void _javadocAll()", "signatureAfterChange": "   private void _javadocAll()", "diff": ["+    // This should really be in DefaultGlobalModel.", "+    ", "+    // Make sure that there is at least one saved document.", "+    ListModel docs = _model.getDefinitionsDocuments();", "+    ", "+    boolean noneYet = true;", "+    int numDocs = docs.getSize();", "+    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "+      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "+      noneYet = doc.isUntitled();", "+    }", "+    ", "+    // If there are no saved files, ignore the javadoc command.", "+    if (noneYet) {", "+      return;", "+    }", "-      _model.javadocAll(destDir.getAbsolutePath());", "+      final File destDirF = destDir;", "+      final SwingWorker worker = new SwingWorker() {", "+        public Object construct() {", "+          try {", "+            boolean success = _model.javadocAll(destDirF.getAbsolutePath());", "-      // Display the results.", "-      _javadocFrame = new JavadocFrame(destDir);", "-      _javadocFrame.show();", "-    }", "-    catch (IOException ioe) {", "-      _showIOError(ioe);", "+            // Display the results.", "+//             System.out.println(\"did we get this far?\");", "+            if (success) {", "+              _javadocFrame = new JavadocFrame(destDirF);", "+              _javadocFrame.show();", "+            }", "+          }", "+          catch (InvalidPackageException ipe) {", "+            _showError(ipe, \"Javadoc Error\",", "+                       \"Javadoc encountered an invalid package name.\");", "+          }", "+//           catch (JavadocException jde) {", "+//             _showError(jde, \"JavaDoc Error\",", "+//                        \"There was an error generating the javadoc.\");", "+//           }", "+          catch (MalformedURLException me) {", "+            throw new UnexpectedException(me);", "+          }", "+          catch (IOException ioe) {", "+            _showIOError(ioe);", "+          }", "+          return \"XXX: Unused return value!\";", "+        }", "+      };", "+      worker.start();", "-    }", "-    catch (InvalidPackageException ipe) {", "-      _showError(ipe, \"JavaDoc Error\",", "-                 \"JavaDoc encountered an invalid package name.\");", "-    }", "-    catch (JavadocException jde) {", "-      _showError(jde, \"JavaDoc Error\",", "-                 \"There was an error generating the javadoc.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a7efca6b3c3df605299bab7ae6ea61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "72c953c3c4f509998630ec89f0f6ab473b5c78c1", "commitAfterChange": "b04c072cc6c2afa2120f5e98663d5a900c3a128f", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _javadocAll()", "signatureAfterChange": "     public File getDirectory(File start) throws OperationCanceledException", "diff": ["+    new DirectorySelector() {", "+    public File getDirectory(File start) throws OperationCanceledException {", "+      _javadocChooser.setSelectedFile(start);", "+      ", "+      int returnVal = _javadocChooser.showDialog(MainFrame.this, \"Select\");", "+      return getChosenFile(_javadocChooser, returnVal);", "+    }", "-   */", "-  private void _javadocAll() {", "-    // Only javadoc if all are saved.", "-    // This should really be in DefaultGlobalModel.", "-    _model.saveAllBeforeProceeding(GlobalModelListener.JAVADOC_REASON);", "-    ", "-    // Make sure that there is at least one saved document.", "-    ListModel docs = _model.getDefinitionsDocuments();", "-    ", "-    boolean noneYet = true;", "-    int numDocs = docs.getSize();", "-    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "-      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "-      noneYet = doc.isUntitled();", "-    }", "-    ", "-    // If there are no saved files, ignore the javadoc command.", "-    if (noneYet) {", "-      return;", "-    }", "-    ", "-    // Get the destination directory via a JFileChooser.", "-    try {", "-      int returnVal;", "-      File destDir;", "-      boolean rejected = false;", "-        ", "-      // Make sure the destination is writable.", "-      do {", "-        // If the choice was rejected, tell the user and ask again.", "-        if (rejected) {", "-          JOptionPane.showMessageDialog(this,", "-                                        \"The destination directory you have chosen\\n\"", "-                                          + \"does not exist or is not readable. Please\\n\"", "-                                          + \"choose another directory.\",", "-                                        \"Bad Destination\", JOptionPane.ERROR_MESSAGE);", "-        }", "-        ", "-        returnVal = _javadocChooser.showDialog(this, \"Select\");", "-        destDir = getChosenFile(_javadocChooser, returnVal);", "-      } while (!destDir.exists() || !destDir.canWrite());", "-      ", "-      // Lock the interface for edits while generating Javadoc.", "-//      Runnable doCommand = new Runnable() {", "-//        public void run() {", "-//          hourglassOn();", "-//        }", "-//      };", "-//      SwingUtilities.invokeLater(doCommand);", "-//      ", "-      // Generate the output with the GlobalModel.", "-      final File destDirF = destDir;", "-      final SwingWorker worker = new SwingWorker() {", "-        public Object construct() {", "-          try {", "-            boolean success = _model.javadocAll(destDirF.getAbsolutePath());", "-", "-            // Display the results.", "-//             System.out.println(\"did we get this far?\");", "-            if (success) {", "-              _javadocFrame = new JavadocFrame(destDirF);", "-              _javadocFrame.show();", "-            }", "-          }", "-          catch (InvalidPackageException ipe) {", "-            _showError(ipe, \"Javadoc Error\",", "-                       \"Javadoc encountered an invalid package name.\");", "-          }", "-//           catch (JavadocException jde) {", "-//             _showError(jde, \"JavaDoc Error\",", "-//                        \"There was an error generating the javadoc.\");", "-//           }", "-          catch (MalformedURLException me) {", "-            throw new UnexpectedException(me);", "-          }", "-          catch (IOException ioe) {", "-            _showIOError(ioe);", "-          }", "-//          finally {", "-//            // Unlock MainFrame for edits.", "-//            Runnable doCommand = new Runnable() {", "-//              public void run() {", "-//                hourglassOff();", "-//              }", "-//            };", "-//            SwingUtilities.invokeLater(doCommand);", "-//          }", "-          return \"XXX: Unused return value!\";", "-        }", "-      };", "-      worker.start();", "-    }", "-    catch (OperationCanceledException oce) {", "-      // If the user cancels the prompt, silently return.", "-      return;", "-    }"]}], "num": 30605}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "939c9a8a38e2eec7502d52584f511d35", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7d6c7ae81987b1c8d8dcdd04d5ccc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void junitAll(List<String> qualifiedClassnames, List<File> files)", "signatureAfterChange": "   public void junitAll(List<String> qualifiedClassnames, List<File> files)", "diff": ["-  public void junitAll(List<String> qualifiedClassnames, List<File> files){", "-    _notifier.junitAllStarted();", "-    List<String> tests = _jvm.runTestSuite(qualifiedClassnames, files, true);", "-    _isTestInProgress = true;", "+  public void junitAll(List<String> qualifiedClassnames, List<File> files) {", "+    synchronized (_compilerModel) {", "+      synchronized (this) {", "+        if (_testInProgress) return;", "+        _testInProgress = true;", "+      }", "+      try {", "+        List<String> testClasses = _jvm.findTestClasses(qualifiedClassnames, files);", "+        if (testClasses.isEmpty()) {", "+          nonTestCase(true);", "+          return;", "+        } ", "+        _notifier.junitAllStarted(); ", "+        _jvm.runTestSuite();", "+      }", "+      catch(IOException e) { ", "+        _notifier.junitEnded();", "+        throw new UnexpectedException(e); }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4e3d60fd405a9924437d80573dc1df2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public List<String> findTestClasses(List<String> classNames, List<File> files) throws RemoteException", "signatureAfterChange": "   public Option<List<String>> findTestClasses(List<String> classNames, List<File> files)", "diff": ["-  public List<String> findTestClasses(List<String> classNames, List<File> files) throws RemoteException {", "-    InterpreterJVMRemoteI slave = ensureInterpreterConnected();", "-    return slave.findTestClasses(classNames, files);", "+  public Option<List<String>> findTestClasses(List<String> classNames, List<File> files) {", "+    InterpreterJVMRemoteI remote = _accessInterpreterJVM();", "+    if (remote == null) { return Option.none(); }", "+    try { return Option.some(remote.findTestClasses(classNames, files)); }", "+    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }"]}], "num": 1493}
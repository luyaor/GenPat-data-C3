{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bae5688fff45ad3972d7bd75cf613c22", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab87d806eea663e1b0edbc10aee25980", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 269, "methodNumberAfterChange": 403, "signatureBeforeChange": "     public MultiVarargInferenceChecker(Iterable<? extends Type> params, Iterable<? extends Expression> args,                                         Iterable<? extends VariableType> tparams,                                        Type returned, Option<Type> expected)", "signatureAfterChange": "     public MultiVarargInferenceMatcher(Iterable<? extends Type> params, Iterable<? extends Expression> args,                                         Iterable<? extends VariableType> tparams,                                        Type returned, Option<Type> expected)", "diff": ["-    public MultiVarargInferenceChecker(Iterable<? extends Type> params, Iterable<? extends Expression> args, ", "+    public MultiVarargInferenceMatcher(Iterable<? extends Type> params, Iterable<? extends Expression> args, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b121a973e02e8a75fd3b4c789a686519", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 261, "methodNumberAfterChange": 395, "signatureBeforeChange": "     public EmptyVarargInferenceChecker(Iterable<? extends Type> params, Iterable<? extends Expression> args,                                         Iterable<? extends VariableType> tparams,                                        Type returned, Option<Type> expected)", "signatureAfterChange": "     public EmptyVarargInferenceMatcher(Iterable<? extends Type> params, Iterable<? extends Expression> args,                                         Iterable<? extends VariableType> tparams,                                        Type returned, Option<Type> expected)", "diff": ["-    public EmptyVarargInferenceChecker(Iterable<? extends Type> params, Iterable<? extends Expression> args, ", "+    public EmptyVarargInferenceMatcher(Iterable<? extends Type> params, Iterable<? extends Expression> args, "]}], "num": 2593}
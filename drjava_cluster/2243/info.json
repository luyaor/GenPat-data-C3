{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e5c9742fe64e672fc208c9e84f5f4bf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "152ef862779d9669b8bef467aee5142c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 87, "signatureBeforeChange": "   final public TryStatement tryStatement() throws ParseException", "signatureAfterChange": "   final public TryStatement tryStatement() throws ParseException", "diff": ["-    t = jj_consume_token(TRY);", "-    tryBlock = block();", "-    label_27:", "-    while (true) {", "+    try {", "+      t = jj_consume_token(TRY);", "+      tryBlock = block();", "+      label_27:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case CATCH:", "+          ;", "+          break;", "+        default:", "+          jj_la1[82] = jj_gen;", "+          break label_27;", "+        }", "+        u = jj_consume_token(CATCH);", "+        jj_consume_token(LPAREN);", "+        formal = formalParameter();", "+        jj_consume_token(RPAREN);", "+        catchBlock = block();", "+        el = catchBlock.getEndLine();", "+        ec = catchBlock.getEndColumn();", "+        catches.add(new CatchStatement(formal, catchBlock,", "+                                       filename,", "+                                       u.beginLine, u.beginColumn,", "+                                       el, ec));", "+      }", "-      case CATCH:", "-        ;", "+      case FINALLY:", "+        jj_consume_token(FINALLY);", "+        finallyBlock = block();", "+        el = finallyBlock.getEndLine();", "+        ec = finallyBlock.getEndColumn();", "-        jj_la1[81] = jj_gen;", "-        break label_27;", "+        jj_la1[83] = jj_gen;", "+        ;", "-      u = jj_consume_token(CATCH);", "-      jj_consume_token(LPAREN);", "-      formal = formalParameter();", "-      jj_consume_token(RPAREN);", "-      catchBlock = block();", "-      el = catchBlock.getEndLine();", "-      ec = catchBlock.getEndColumn();", "-      catches.add(new CatchStatement(formal, catchBlock,", "-                                     filename,", "-                                     u.beginLine, u.beginColumn,", "-                                     el, ec));", "+           if (finallyBlock == null && catches.size() == 0) {", "+             {if (true) throw new ParseError(reader.getMessage(\"try.without.catch\", null),", "+                                  filename,", "+                                  t.beginLine, t.beginColumn);}", "+           }", "+           {if (true) return new TryStatement(tryBlock, catches, finallyBlock,", "+                                   filename,", "+                                   t.beginLine, t.beginColumn,", "+                                   el, ec);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid try statement\");", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case FINALLY:", "-      jj_consume_token(FINALLY);", "-      finallyBlock = block();", "-      el = finallyBlock.getEndLine();", "-      ec = finallyBlock.getEndColumn();", "-      break;", "-    default:", "-      jj_la1[82] = jj_gen;", "-      ;", "-    }", "-         if (finallyBlock == null && catches.size() == 0) {", "-           {if (true) throw new ParseError(reader.getMessage(\"try.without.catch\", null),", "-                                filename,", "-                                t.beginLine, t.beginColumn);}", "-         }", "-         {if (true) return new TryStatement(tryBlock, catches, finallyBlock,", "-                                 filename,", "-                                 t.beginLine, t.beginColumn,", "-                                 el, ec);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bf749c78a39fd28e814181a5aeccaa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "   final public List<FormalParameter> formalParameters() throws ParseException", "signatureAfterChange": "   final public List<FormalParameter> formalParameters() throws ParseException", "diff": ["-    jj_consume_token(LPAREN);", "-    if (jj_2_17(2147483647)) {", "-      node = formalParameter();", "-      list.add(node);", "-      label_13:", "-      while (true) {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case COMMA:", "-          ;", "-          break;", "-        default:", "-          jj_la1[32] = jj_gen;", "-          break label_13;", "-        }", "-        jj_consume_token(COMMA);", "+    try {", "+      jj_consume_token(LPAREN);", "+      if (jj_2_17(2147483647)) {", "+      list.add(node);", "+        label_13:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case COMMA:", "+            ;", "+            break;", "+          default:", "+            jj_la1[33] = jj_gen;", "+            break label_13;", "+          }", "+          jj_consume_token(COMMA);", "+          node = formalParameter();", "+        }", "+      } else {", "+        ;", "-    } else {", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FINAL:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case SHORT:", "-    case IDENTIFIER:", "-      lastVarArgsParam = varArgsFormalParameter();", "-      break;", "-    default:", "-      jj_la1[33] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(RPAREN);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case SHORT:", "+      case IDENTIFIER:", "+        lastVarArgsParam = varArgsFormalParameter();", "+        break;", "+      default:", "+        jj_la1[34] = jj_gen;", "+        ;", "+      }", "+      jj_consume_token(RPAREN);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid formal parameters\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6c22382d5a4960c126544dcdb5ba0c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "   final public FormalParameter formalParameter() throws ParseException", "signatureAfterChange": "   final public FormalParameter formalParameter() throws ParseException", "diff": ["-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case FINAL:", "-      f = jj_consume_token(FINAL);", "-      break;", "-    default:", "-      jj_la1[34] = jj_gen;", "-      ;", "-    }", "-    typ = type();", "-    id = jj_consume_token(IDENTIFIER);", "-    label_14:", "-    while (true) {", "+    try {", "-      case LBRACKET:", "-        ;", "+      case FINAL:", "+        f = jj_consume_token(FINAL);", "-        break label_14;", "+        ;", "-      jj_consume_token(LBRACKET);", "-      jj_consume_token(RBRACKET);", "+      typ = type();", "+      id = jj_consume_token(IDENTIFIER);", "+      label_14:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case LBRACKET:", "+          ;", "+          break;", "+        default:", "+          jj_la1[36] = jj_gen;", "+          break label_14;", "+        }", "+        jj_consume_token(LBRACKET);", "+        jj_consume_token(RBRACKET);", "-    }", "+      }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid formal parameter\");", "+    }"]}], "num": 2243}
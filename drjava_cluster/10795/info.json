{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83061ec434a8b513dcb358cd6f1bc65b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4760c435a98c8ce35b3a05f7ddb355", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryVisitor.java", "commitBeforeChange": "5e7a16013fcb5945eddc036e2d2d0ce3e14ba2d0", "commitAfterChange": "e1389ddb9dcb8a7d3a230cc1be322481e1c8fd6a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "          public void testForClassDefDoFirst()", "signatureAfterChange": "          public void testForClassDefDoFirst()", "diff": ["-      ClassDef cd1 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"Test\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd1 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Test\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd0 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd0 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Lisa\"),", "+                                  new TypeParameter[0], ", "+                                  new ClassOrInterfaceType(_noSourceInfo, \"java.lang.Object\", new Type[0]), ", "+                                  new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-       ClassDef cd2 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                   new Word(JExprParser.NO_SOURCE_INFO, \"Test\"), new TypeParameter[0],", "-                                   JExprParser.NO_TYPE, ", "-                                   new ReferenceType[] {new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.Object\", new Type[0])}, ", "-                                   new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+       ClassDef cd2 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Test\"), new TypeParameter[0],", "+                                   _noType, ", "+                                   new ReferenceType[] { new ClassOrInterfaceType(_noSourceInfo, ", "+                                                                                  \"java.lang.Object\", new Type[0]) }, ", "+                                   new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      ClassDef cd3 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"String\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd3 = new ClassDef(_noSourceInfo, _publicMav,  new Word(_noSourceInfo, \"String\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"You cannot define a class with the name String at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot define a class with the name String at the Elementary Level, because that class name \" +", "+                   \"is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "-      ClassDef cd4 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"Integer\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd4 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"Integer\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"You cannot define a class with the name Integer at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot define a class with the name Integer at the Elementary Level, because that class name \" +", "+                   \"is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "-      ClassDef cd5 = new ClassDef(JExprParser.NO_SOURCE_INFO, _publicMav, ", "-                                  new Word(JExprParser.NO_SOURCE_INFO, \"TestCase\"), new TypeParameter[0],", "-                                  JExprParser.NO_TYPE, ", "-                                  new ReferenceType[0], new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd5 = new ClassDef(_noSourceInfo, _publicMav, new Word(_noSourceInfo, \"TestCase\"), new TypeParameter[0],", "+                                  _noType, new ReferenceType[0], new BracedBody(_noSourceInfo, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"You cannot define a class with the name TestCase at the Elementary Level, because that class name is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot define a class with the name TestCase at the Elementary Level, because that class name \" +", "+                   \"is reserved.  Please choose a different name for this class\", errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a129c4d690ef09a6bf9ad1e4bdc15fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "b97db40bea671594a37f7cabd8d363cab45e0154", "commitAfterChange": "fab79f2f445044e7a60a89e228042164713428d9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "   private int getRelativeLine( int currLoc )", "signatureAfterChange": "   private int _getRelativeLine()", "diff": ["-  private int getRelativeLine( int currLoc ){", "-    // we moved backwards", "+  private int _getRelativeLine(){", "+    int currLoc = getCurrentLocation();", "+    ", "+    ", "-      int distPrevNewLine = _reduced.getDistToPreviousNewline( 0 );", "-      while (distPrevNewLine != -1 && getCurrentLocation()>currLoc) {", "-        setCurrentLocation( getCurrentLocation()-distPrevNewLine-1 );", "+      // we moved backward", "+      int prevLineLoc = getLineStartPos( _cachedLocation );", "+      while( prevLineLoc > currLoc ){", "-        distPrevNewLine = _reduced.getDistToPreviousNewline( 0 );", "+        prevLineLoc = getLineStartPos( prevLineLoc - 1 );", "+        // temporary performance optimization", "+        setCurrentLocation(prevLineLoc);", "-      // this and the similar test in the other case", "-      // account for the fact that our loop condition guarantees", "-      // one extraneous loop through the document.", "-      if( getCurrentLocation() != currLoc ){ count++; }", "-   }", "-   // we moved forwards", "-   else{", "-     int distNextNewLine = _reduced.getDistToNextNewline();", "-     while (distNextNewLine != -1 && getCurrentLocation()<currLoc) {", "-       try{", "-         setCurrentLocation( getCurrentLocation()+distNextNewLine+1 );", "-         distNextNewLine = _reduced.getDistToNextNewline();", "-       }", "-       catch( IllegalArgumentException iae ){", "-         setCurrentLocation( currLoc );", "-         distNextNewLine = -1;", "-       }", "-       count++;", "-     }", "-     if( getCurrentLocation() != currLoc ){ count--; }", "-   }", "-     setCurrentLocation( currLoc );", "-     return count;", "-   }", "+    }", "+    ", "+    else{", "+      // we moved forward", "+      int nextLineLoc = getLineEndPos( _cachedLocation );", "+      while( nextLineLoc < currLoc ){", "+        count++;", "+        nextLineLoc = getLineEndPos( nextLineLoc + 1 );", "+        // temporary performance optimization", "+        setCurrentLocation(nextLineLoc);", "+      }", "+    }", "+    setCurrentLocation( currLoc );", "+    return count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7a5f2282071a1d790eb91265bd7d114", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "commitAfterChange": "229b97efe43c666e9a5a8a6450aaf594c37171c3", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 232, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R r)", "diff": ["-    public void addRegion(final R region) {", "-      int index = getIndexOf(_current);", "-      // only add if current, previous, and next are not already the region; prevents trivial duplicates", "-      if (! region.equals(_current) && ", "-          (index == _regions.size() - 1 || ! region.equals(_regions.get(index + 1))) &&", "-          (index <= 0 || ! region.equals(_regions.get(index - 1)))) {", "-        if ((_current != null) && (index >= 0)) _regions.add(index + 1, region);", "-        else _regions.add(region);", "+    public void addRegion(final R r) {", "+      if (! _regionsSet.contains(r)) { // only add if not already present", "+        _regions.add(r);", "+        _regionsSet.add(r);", "+        assert _regions.size() == _regionsSet.size();", "+      }", "-        _current = region;", "-        final int regionIndex = getIndexOf(region);", "-        final String stackTrace = StringOps.getStackTrace();", "+      if (! r.equals(_current)) {", "+        _current = r;", "+ ", "-            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region, regionIndex); }", "+            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(r); }", "+        int index = getIndexOf(_current);", "-        if ((index < _regions.size()-1) && (region.equals(_regions.get(index+1)))) nextCurrentRegion();", "+        if (index < _regions.size() - 1 && r.equals(_regions.get(index + 1))) nextCurrentRegion();", "-        else if ((index > 0) && (region.equals(_regions.get(index-1)))) prevCurrentRegion();", "+        else if (index > 0 && r.equals(_regions.get(index - 1))) prevCurrentRegion();"]}], "num": 10795}
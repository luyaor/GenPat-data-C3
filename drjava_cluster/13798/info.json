{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ac3e0544d207faea74ff8823616e955", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6557ca34b9b248b40e8bc9d7e7a64618", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 309, "methodNumberAfterChange": 312, "signatureBeforeChange": "           public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "     protected MethodInvocationCandidate(DJMethod declaredMethod, Type declaringType,                                         Iterable<? extends Type> targs,                                         Iterable<? extends Expression> args,                                         Option<Type> expected)", "diff": ["+    protected final DJMethod _method; // the method, after conversions based on the declaring type", "+    protected MethodInvocationCandidate(DJMethod declaredMethod, Type declaringType,", "+                                        Iterable<? extends Type> targs,", "+                                        Iterable<? extends Expression> args,", "+                                        Option<Type> expected) {", "+      super(instantiateMethod(declaredMethod, declaringType), targs, args, expected);", "+      _declaredMethod = declaredMethod;", "+      _declaringType = declaringType;", "+      _method = (DJMethod) _f;", "+    }", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type rawReturned = m.returnType();", "-            Type returned = substitute(substitute(rawReturned, classSigma), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b422c5827a7c14fb9ffac1fd821a226", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 365, "methodNumberAfterChange": 318, "signatureBeforeChange": "              public LookupClass(Predicate<? super DJClass> matchInner)", "signatureAfterChange": "     protected ConstructorInvocationCandidate(DJConstructor declaredConstructor, Type declaringType,                                              Iterable<? extends Type> targs,                                              Iterable<? extends Expression> args,                                              Option<Type> expected)", "diff": ["+    private final DJConstructor _declaredConstructor; // the constructor, as declared -- necessary for compilation", "+    protected ConstructorInvocationCandidate(DJConstructor declaredConstructor, Type declaringType,", "+                                             Iterable<? extends Type> targs,", "+                                             Iterable<? extends Expression> args,", "+                                             Option<Type> expected) {", "+      super(instantiateConstructor(declaredConstructor, declaringType), targs, args, expected);", "+      _declaredConstructor = declaredConstructor;", "+    }", "-      ", "-      public LookupClass(Predicate<? super DJClass> matchInner) {", "-        _matchInner = matchInner;", "-      }"]}], "num": 13798}
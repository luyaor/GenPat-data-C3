{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fe3e474869a397c95bb0927e11a5d5a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ccb530c18c60bf909ab11e58b31fc4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedLevelTest.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void testPackagedOrderMatters()", "signatureAfterChange": "   public void testPackagedOrderMatters()", "diff": ["-   */", "+    */", "-     File newDirectory = new File(directory.getAbsolutePath() + System.getProperty(\"file.separator\") + \"lists-dj2\" + System.getProperty(\"file.separator\") + \"src\" + System.getProperty(\"file.separator\") + \"listFW\");", "-     File[] testFiles = new File[]{new File(newDirectory, \"NEList.dj2\"),", "-                                   new File(newDirectory, \"MTList.dj2\"),", "-                                   new File(newDirectory, \"IList.dj2\")};", "+    _log.log(\"Running testPackagedOrderMatters\");", "+    dir2 = new File(dir1.getAbsolutePath() + System.getProperty(\"file.separator\") + \"lists-dj2\" + ", "+                    System.getProperty(\"file.separator\") + \"src\" + System.getProperty(\"file.separator\") + \"listFW\");", "+    File[] testFiles = ", "+      new File[]{ new File(dir2, \"NEList.dj2\"), new File(dir2, \"MTList.dj2\"), new File(dir2, \"IList.dj2\")};", "+    ", "+    System.err.println(\"testfiles = \" + Arrays.toString(testFiles));", "-          System.out.flush();", "-", "-      LanguageLevelConverter llc = new LanguageLevelConverter();", "-      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "-      result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "-      ", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "-      ", "-      assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "-", "-      //don't worry about checking the .java files for correctness...just make sure there weren't any exceptions", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(testFiles, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    System.err.println(\"ParseExceptions: \" + result.getFirst());", "+    System.err.println(\"VisitorExceptions: \" + result.getSecond());", "+    ", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    ", "+    assertEquals(\"should be no visitor exceptions\", new LinkedList<Pair<String, JExpressionIF>>(), result.getSecond());", "+    ", "+    //don't worry about checking the .java files for correctness...just make sure there weren't any exceptions"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9187310ca49a6476e686e5bdfc4a317b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public SymbolData getInnerClassOrInterface(String name)", "signatureAfterChange": "   public SymbolData getInnerClassOrInterface(String relName)", "diff": ["-  public SymbolData getInnerClassOrInterface(String name) {", "-    int firstIndexOfDot = name.indexOf(\".\");", "-    int firstIndexOfDollar = name.indexOf(\"$\");", "-    if (firstIndexOfDot == -1) {", "-      firstIndexOfDot = firstIndexOfDollar;", "-    }", "-    else {", "-      if (firstIndexOfDollar >= 0 && firstIndexOfDollar < firstIndexOfDot)", "-        firstIndexOfDot = firstIndexOfDollar;", "-    }", "+  public SymbolData getInnerClassOrInterface(String relName) {", "+//    if (relName.endsWith(\"Rod\")) System.err.println(\"getInnerClass('\" + relName + \"') called on '\" + this + \"'\");", "+    int firstIndexOfDot = relName.indexOf('.');", "+    int firstIndexOfDollar = relName.indexOf(\"$\");", "+    if (firstIndexOfDot == -1) firstIndexOfDot = firstIndexOfDollar;", "+    else if (firstIndexOfDollar >= 0 && firstIndexOfDollar < firstIndexOfDot) firstIndexOfDot = firstIndexOfDollar;", "-    //First, look through the inner classes/interfaces of this class", "+    // First, look through the inner classes/interfaces of this class", "-    SymbolData result = getInnerClassOrInterfaceHelper(name, firstIndexOfDot);", "+    SymbolData result = getInnerClassOrInterfaceHelper(relName, firstIndexOfDot);", "+    if (relName.endsWith(\"Rod\")) {", "+      System.err.println(\"getInnerClassOrInterfaceHelper('\" + relName + \"', \" + firstIndexOfDot + \")\");", "+      System.err.println(\"_innerClasses = \" + _innerClasses);", "+    }", "+      System.err.println(\"Result is: '\" + result + \"'\");", "-        outerPiece = getInnerClassOrInterfaceHelper(name.substring(0, firstIndexOfDot), -1);", "+        outerPiece = getInnerClassOrInterfaceHelper(relName.substring(0, firstIndexOfDot), -1);", "-      if (TypeChecker.checkAccessibility(outerPiece.getMav(), outerPiece, this.getSymbolData())) {return result;}", "-      else {privateResult = result; result = null;}", "+      if (TypeChecker.checkAccessibility(outerPiece.getMav(), outerPiece, getSymbolData())) return result;", "+      else {", "+        privateResult = result; ", "+        result = null;", "+      }", "-      result = _outerData.getInnerClassOrInterface(name);", "-      if (result != null) {return result;}", "+      result = _outerData.getInnerClassOrInterface(relName);", "+      if (result != null) return result;"]}], "num": 25215}
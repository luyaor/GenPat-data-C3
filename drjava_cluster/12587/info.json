{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ade4cfc94f28538702b52210989e329", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99f8cc57dda20321c50c23d01630ef3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/CollectUtil.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 81, "signatureBeforeChange": "       public Set<T> forSome(T val)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static <T> Option<T> castIfContains(Collection<? extends T> c, Object obj)", "diff": ["+   */", "+  @SuppressWarnings(\"unchecked\")", "+  public static <T> Option<T> castIfContains(Collection<? extends T> c, Object obj) {", "+    if (c.contains(obj)) { return Option.some((T) obj); }", "+    else { return Option.none(); }", "-    return opt.apply(new OptionVisitor<T, Set<T>>() {", "-      public Set<T> forSome(T val) { return Collections.singleton(val); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b82537f5be4fc8af784719f29cadb899", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public EvaluationVisitor makeEvaluationVisitor(Context context)", "signatureAfterChange": "   public Visitor makeTranslationVisitor()", "diff": ["+   */", "+  public Visitor makeTranslationVisitor() {", "+    return new IdentityVisitor() {", "+        Expression e = visitThis(node);", "+        if (e instanceof QualifiedName) {", "+          return visit((QualifiedName)e);", "+        }", "+        else if (e instanceof ObjectFieldAccess) {", "+          return visit((ObjectFieldAccess)e);", "+        }", "+        else {", "+          throw new UnexpectedException(new IllegalArgumentException(\"Illegal type of Expression\"));", "+        }", "-   */", "-  public EvaluationVisitor makeEvaluationVisitor(Context context) {", "-    //return new DebugEvaluationVisitorExtension(context, _name);", "-    return new EvaluationVisitorExtension(context) {", "-      public Object visit(ThisExpression node) {", "-        return visit(_convertThisToName(node));", "-      }"]}], "num": 12587}
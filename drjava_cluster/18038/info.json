{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c48d87900c48b7dbab7fd49c2f67640a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd7f55858cb2656eb193accd06c316a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Object visit(VariableDeclaration node)", "diff": ["-      if (!(c.isPrimitive()                    ||", "-            o == null                          ||", "-            c.isAssignableFrom(o.getClass()))) {", "+      if (!(c.isPrimitive() || o == null || c.isAssignableFrom(o.getClass()))) {", "-      if (node.isFinal()) {", "-        _context.setConstant(node.getName(), o);", "-      } else {", "-        _context.set(node.getName(), o);", "-      }", "-    } else {", "-      if (node.isFinal()) {", "-        _context.setConstant(node.getName(), UninitializedObject.INSTANCE);", "-      } else {", "-        // Non-final variables have default values, and are not uninitialized.", "-        // Primitive variables have special default values, Objects default to null.", "-        // Fixes bug #797515.", "-//        _context.set(node.getName(), UninitializedObject.INSTANCE);", "-        Object value = null;", "-        if (!c.isPrimitive()) {", "-          value = null;", "-        }", "-        else if (c == byte.class) {", "-          value = new Byte((byte)0);", "-        }", "-        else if (c == short.class) {", "-          value = new Short((short)0);", "-        }", "-        else if (c == int.class) {", "-          value = new Integer(0);", "-        }", "-        else if (c == long.class) {", "-          value = new Long(0L);", "-        }", "-        else if (c == float.class) {", "-          value = new Float(0.0f);", "-        }", "-        else if (c == double.class) {", "-          value = new Double(0.0d);", "-        }", "-        else if (c == char.class) {", "-          value = new Character('\\u0000');", "-        }", "-        else if (c == boolean.class) {", "-          value = Boolean.valueOf(false);", "-        }", "-        _context.set(node.getName(), value);", "-      }", "+      if (node.isFinal()) _context.setConstant(node.getName(), o);", "+      else _context.set(node.getName(), o);", "+    } ", "+    else if (node.isFinal()) _context.setConstant(node.getName(), UninitializedObject.INSTANCE);", "+    else {", "+      // Non-final variables have default values, and are not uninitialized.", "+      // Primitive variables have special default values, Objects default to null.", "+      // Fixes bug #797515.", "+//      _context.set(node.getName(), UninitializedObject.INSTANCE);", "+      Object value = null;", "+      if (!c.isPrimitive()) value = null;", "+      else if (c == byte.class)  value = new Byte((byte) 0);", "+      else if (c == short.class) value = new Short((short) 0);", "+      else if (c == int.class) value = new Integer(0);", "+      else if (c == long.class)  value = new Long(0L);", "+      else if (c == float.class) value = new Float(0.0f);", "+      else if (c == double.class) value = new Double(0.0d);", "+      else if (c == char.class) value = new Character('\\u0000');", "+      else if (c == boolean.class)  value = Boolean.valueOf(false);", "+      _context.set(node.getName(), value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b24bdef116bca179a53f509e624a57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void handleEvent(Event e) throws DebugException", "signatureAfterChange": "   public void handleEvent(Event e) throws DebugException", "diff": ["-    if (e instanceof BreakpointEvent) {", "-      _handleBreakpointEvent((BreakpointEvent) e);", "-    }", "-    else if (e instanceof StepEvent) {", "-      _handleStepEvent((StepEvent) e);", "-    }", "+    if (e instanceof BreakpointEvent) _handleBreakpointEvent((BreakpointEvent) e);", "+    else if (e instanceof StepEvent) _handleStepEvent((StepEvent) e);", "-    else if (e instanceof ClassPrepareEvent) {", "-      _handleClassPrepareEvent((ClassPrepareEvent) e);", "-    }", "-    else if (e instanceof ThreadStartEvent) {", "-      _handleThreadStartEvent((ThreadStartEvent) e);", "-    }", "-    else if (e instanceof ThreadDeathEvent) {", "-      _handleThreadDeathEvent((ThreadDeathEvent) e);", "-    }", "-    else if (e instanceof VMDeathEvent) {", "-      _handleVMDeathEvent((VMDeathEvent) e);", "-    }", "-    else if (e instanceof VMDisconnectEvent) {", "-      _handleVMDisconnectEvent((VMDisconnectEvent) e);", "-    }", "-    else {", "+    else if (e instanceof ClassPrepareEvent) _handleClassPrepareEvent((ClassPrepareEvent) e);", "+    else if (e instanceof ThreadStartEvent) _handleThreadStartEvent((ThreadStartEvent) e);", "+    else if (e instanceof ThreadDeathEvent) _handleThreadDeathEvent((ThreadDeathEvent) e);", "+    else if (e instanceof VMDeathEvent) _handleVMDeathEvent((VMDeathEvent) e);", "+    else if (e instanceof VMDisconnectEvent) _handleVMDisconnectEvent((VMDisconnectEvent) e);", "+    else", "-    }"]}], "num": 18038}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9dbcf0ea785aa675736d39ef5bfab70", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63e2ea26390935e4cd2531fe3e780e06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "11a167d5b0a97e55aef4d62ed18d4da71e30b762", "commitAfterChange": "a32847752bc1c4d9a9c65da4d91d56e3d8a61fa6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private TestDocGetter(File[] files, String[] texts)", "signatureAfterChange": "   public void testConstructOnlyWarnings()", "diff": ["+   */", "+  public void testConstructOnlyWarnings() {", "+    getter = new TestDocGetter();", "+    errors = new CompilerError[]", "+    { new CompilerError(\"Test warning without File\", true),", "+      new CompilerError(\"Test warning without File\", true) };", "+    model = new CompilerErrorModel<CompilerError>(errors, getter);", "+    ", "+    // We successfully built the model, now test the basics.", "+    assertEquals(\"Should have 2 compiler errors.\", 2, model.getNumErrors());", "+    assertTrue(\"hasOnlyWarnings should return true.\", model.hasOnlyWarnings());", "-     */", "-    private TestDocGetter(File[] files, String[] texts) {", "-      if (files.length != texts.length) {", "-        throw new IllegalArgumentException(\"Argument arrays must match in size.\");", "-      }", "-      ", "-      docs = new HashMap<File, OpenDefinitionsDocument>(texts.length * 2);", "-      ", "-      EventNotifier en = new EventNotifier();", "-      for (int i = 0; i < texts.length; i++) {", "-        DefinitionsDocument doc = new DefinitionsDocument(en);", "-        doc.setFile(files[i]);", "-        try {", "-          doc.insertString(0, texts[i], null);", "-        }", "-        catch (BadLocationException e) {", "-          throw new UnexpectedException(e);", "-        }", "-        docs.put(files[i], new TestOpenDoc(doc));", "-      }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33572f9df7cfdbf805b15bac4c84ab0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   static void openCommandLineFiles(MainFrame mf, String[] filesToOpen)", "signatureAfterChange": "   static void openCommandLineFiles(final MainFrame mf, final String[] filesToOpen)", "diff": ["-  static void openCommandLineFiles(MainFrame mf, String[] filesToOpen) {  ", "+  static void openCommandLineFiles(final MainFrame mf, final String[] filesToOpen) { ", "+    try {", "+      Utilities.invokeAndWait(new Runnable() { public void run() { _openCommandLineFiles(mf, filesToOpen); }});", "+    }", "+    catch(InterruptedException e) { throw new UnexpectedException(); }", "+  }", "-        public File getFile() {", "-          return file;", "-        }", "-        public File[] getFiles() {", "-          return new File[] {file};", "-        }", "-        //OpenDefinitionsDocument doc ="]}], "num": 18396}
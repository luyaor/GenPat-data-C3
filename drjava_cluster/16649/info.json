{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f548470ddbdf3644139a1dc732a7643b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ada6c5a4a65e8d1ef4d9c73a6d1dfd1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 32, "signatureBeforeChange": "          public void breakpointRemoved(Breakpoint bp)", "signatureAfterChange": "     public void breakpointRemoved(final Breakpoint bp)", "diff": ["-     ", "-   public void breakpointRemoved(Breakpoint bp) {", "-     ", "-     DefaultMutableTreeNode bpDoc = new DefaultMutableTreeNode(bp.getClassName());", "-     ", "-     Enumeration documents = _breakpointNode.children();", "-     while (documents.hasMoreElements()) {", "-       DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-       if (doc.getUserObject().equals(bpDoc.getUserObject())) {", "-         // have to remove the correct line number", "-         //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "-         Enumeration lineNumbers = doc.children();", "-         while (lineNumbers.hasMoreElements()) {", "-           DefaultMutableTreeNode lineNumber = ", "-             (DefaultMutableTreeNode)lineNumbers.nextElement();", "-           if (lineNumber.getUserObject().equals(new Integer (bp.getLineNumber()))) {", "-             //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "-             //doc.remove(lineNumber);", "-             _bpTreeModel.removeNodeFromParent(lineNumber);", "-             if (doc.getChildCount() == 0) {", "-               // this document has no more breakpoints, remove it", "-               //_breakpointNode.remove(doc);", "-               _bpTreeModel.removeNodeFromParent(doc);", "-             }        ", "-             //_bpTree.scrollPathToVisible(new TreePath(childNode.getPath()));", "-             //_bpTreeModel.reload();", "-             return;", "-           }", "-         }", "-       }", "-     }    ", "-   }", "+     */", "+    public void breakpointRemoved(final Breakpoint bp) {", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "+          ", "+          // Find the document node for this breakpoint", "+          Enumeration documents = _breakpointRootNode.children();", "+          while (documents.hasMoreElements()) {", "+            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "+            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "+              //DrJava.consoleOut().println(\"matched, classname: \" + bpDoc.getUserObject());", "+              ", "+              // Find the correct line number node for this breakpoint", "+              Enumeration lineNumbers = doc.children();", "+              while (lineNumbers.hasMoreElements()) {", "+                DefaultMutableTreeNode lineNumber = ", "+                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "+                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "+                  //DrJava.consoleOut().println(\"matched, lineNumber: \" + bp.getLineNumber());", "+                  _bpTreeModel.removeNodeFromParent(lineNumber);", "+                  if (doc.getChildCount() == 0) {", "+                    // this document has no more breakpoints, remove it", "+                    _bpTreeModel.removeNodeFromParent(doc);", "+                  }        ", "+                  return;", "+                }", "+              }", "+            }", "+          }", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba914ef9b00d2fb6503f6bc4078e0d0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 186, "signatureBeforeChange": "      public void junitStarted()", "signatureAfterChange": "      public void junitStarted(final OpenDefinitionsDocument doc)", "diff": ["-    public void junitStarted() {", "-      showTab(_junitPanel);", "-      _saveAction.setEnabled(false);", "-      _junitPanel.setJUnitInProgress();", "-      hourglassOn();", "+    public void junitStarted(final OpenDefinitionsDocument doc) {", "+      ", "+      // Only change GUI from event-dispatching thread", "+      Runnable doCommand = new Runnable() {", "+        public void run() {", "+          showTab(_junitPanel);", "+          _junitPanel.setJUnitInProgress(doc);", "+          _junitAction.setEnabled(false);", "+        }", "+      };", "+      SwingUtilities.invokeLater(doCommand);"]}], "num": 16649}
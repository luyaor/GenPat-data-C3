{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00a566100313d3172680dc277fedc681", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107c9b6fb61073df74e6f7027501b2e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public static <R> TaskController<R> computeInThread(final Thunk<? extends R> task, boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInThread(Thunk<? extends R> task, boolean start)", "diff": ["-  public static <R> TaskController<R> computeInThread(final Thunk<? extends R> task, boolean start) {", "-    final ThreadController<R> controller = new ThreadController<R>();", "-    Runnable runner = new Runnable() {", "-      public void run() {", "-        R result = null;", "-        Throwable exception = null; // *Only* exceptions thrown by the task", "-        try { result = task.value(); }", "-        catch (Throwable e) { exception = e; }", "-        controller.done(result, exception);", "-      }", "-    };", "-    controller.setThread(new Thread(runner, \"ConcurrentUtil task\"));", "-    if (start) { controller.start(); }", "-    return controller;", "-  }", "+  public static <R> TaskController<R> computeInThread(Thunk<? extends R> task, boolean start) {", "+    return computeWithExecutor(task, THREAD_EXECUTOR, start);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bed67cf31241349463cbee64a018d8cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "1ff154e9eb4de7b8f07ce9a8120997b76e53aa3f", "commitAfterChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private static <R extends OrderedDocumentRegion> SortedSet<R> reverse(SortedSet<R> inputSet)", "signatureAfterChange": "   public void removeRegions(Collection<R> regions)", "diff": ["-  private static <R extends OrderedDocumentRegion> SortedSet<R> reverse(SortedSet<R> inputSet) {", "-    if (inputSet.isEmpty()) return inputSet;", "-    /* Create outputSet with reverse ordering. */", "-    SortedSet<R> outputSet = new TreeSet<R>(new Comparator<OrderedDocumentRegion>() { ", "-      public int compare(OrderedDocumentRegion o1, OrderedDocumentRegion o2) { return - o1.compareTo(o2); } ", "-    });", "-    for (R r: inputSet) outputSet.add(r);", "-    return outputSet;", "+    */", "+  public void removeRegions(Collection<R> regions) {", "+    for (R r: regions) removeRegion(r);", "+  }"]}], "num": 22830}
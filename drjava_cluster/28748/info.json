{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a9a2664140ef58479dabe3f01eb7088", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44593685cd8554e94fe5828c576e15fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 114, "signatureBeforeChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "signatureAfterChange": "          public Option<ConstraintScenario> and(ConstraintScenario that)", "diff": ["+      NormSubtyper sub = new NormSubtyper();", "+      NormJoiner join = new NormJoiner(sub);", "+      NormMeeter meet = new NormMeeter(sub);", "-        result._lowerBounds.put(var, JOIN_NORM.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "+        result._lowerBounds.put(var, join.value(IterUtil.make(lowerBound(var), that.lowerBound(var))));", "-        result._upperBounds.put(var, MEET_NORM.value(IterUtil.make(upperBound(var), that.upperBound(var))));", "+        result._upperBounds.put(var, meet.value(IterUtil.make(upperBound(var), that.upperBound(var))));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e2b00eabe77fe211d10e39e12c32e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/Indenter.java", "commitBeforeChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "commitAfterChange": "56669aca13abcf0654eb7fc0918a869a3dc6fdaa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void buildTree()", "signatureAfterChange": "   public void buildTree()", "diff": ["-      //rule26 = new ActionStartPrevStmtPlus(\"\"),", "+      rule26 = new ActionStartPrevStmtPlus(\"\"),", "-      //rule24 = rule26,", "-      //rule23 = new QuestionExistsCharInStmt('?', ':', rule24, rule25),", "-      //rule22 = new QuestionLineContains(':', rule23, rule24),", "+      rule24 = rule26,", "+      rule23 = new QuestionExistsCharInStmt('?', ':', rule24, rule25),", "+      rule22 = new QuestionLineContains(':', rule23, rule24),", "-      rule20 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule21, /**rule22*/ rule25),", "+      rule20 = new QuestionCurrLineStartsWithSkipComments(\"}\", rule21, rule22),"]}], "num": 28748}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51afcf58b639f70c6e2ceab8690a1729", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc7d2f9147bf17b58ab0fcec100c814", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsScriptController.java", "commitBeforeChange": "b79563bf1d51671314589f6c744a87acc54fe8fa", "commitAfterChange": "517a134496ea28d3d08f7cd449813e2a756de857", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void actionPerformed(ActionEvent e)", "signatureAfterChange": "   protected void _setupAction(Action a, String name, String desc)", "diff": ["-  private Action _currentInteractionAction = new AbstractAction(\"Current\") {", "-    public void actionPerformed(ActionEvent e) {", "-      _model.currentInteraction();", "-      _interactionsPane.requestFocus();", "-    }", "+   */", "+  protected void _setupAction(Action a, String name, String desc) {", "+    a.putValue(Action.DEFAULT, name);", "+    a.putValue(Action.SHORT_DESCRIPTION, desc);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed484f88adae276c988350d89bcc097", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 355, "methodNumberAfterChange": 300, "signatureBeforeChange": "           public boolean contains(DJClass c)", "signatureAfterChange": "      protected boolean inherits(Type child, PredicateSet<ClassType> childMatches, ClassType match)", "diff": ["+", "+    protected boolean inherits(Type child, PredicateSet<ClassType> childMatches, ClassType match) {", "+      // TODO: follow the JLS definition of class inheritance (8.5)", "+      return childMatches.isEmpty() && !match.ofClass().accessibility().equals(Access.PRIVATE);", "+    }", "-        return new Predicate<DJClass>() {", "-          public boolean contains(DJClass c) {", "-            if (c.declaredName().equals(name)) {", "-              return includePrivate || !c.accessibility().equals(Access.PRIVATE);", "-            }", "-            else { return false; }", "-          }"]}], "num": 1762}
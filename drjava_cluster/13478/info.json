{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9426645f910cf84651e3a72fccfd1ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329aba8679954c1a507cf2605541887d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v1_2/edu/rice/cs/drjava/model/compiler/Javac141Compiler.java", "commitBeforeChange": "9f7616fd6847dd00d848676323dd2e5f5ac106c9", "commitAfterChange": "9ffaf267aed8adb3ea1a9aa4f99ce4ee78724acb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "      protected Context createContext(File[] sourceRoots)", "signatureAfterChange": "      protected Context createContext(File[] sourceRoots)", "diff": ["+  ", "-    if(CompilerWarnings.SHOW_UNCHECKED) {", "-      options.put(\"-Xlint:unchecked\",\"\");", "-    }", "+    HashMap/*<String,String>*/ toAdd = CompilerOptions.getOptions(_warningsEnabled);", "+    LinkedList /*<String>*/ keys = new LinkedList/*<String>*/(toAdd.keySet());", "+    LinkedList /*<String>*/values = new LinkedList/*<String>*/(toAdd.values());", "+        ", "+    for(int i = 0; i< toAdd.size(); i++)", "+      options.put((String)values.get(i), (String)values.get(i));", "-    if(CompilerWarnings.SHOW_DEPRECATION) {", "-      options.put(\"-Xlint:deprecation\",\"\");", "-    }", "-", "-    if(CompilerWarnings.SHOW_PATH) {", "-      options.put(\"-Xlint:path\",\"\");", "-    }", "+    //options.putAll(CompilerOptions.getOptions(_warningsEnabled));", "-    if(CompilerWarnings.SHOW_SERIAL) {", "-      options.put(\"-Xlint:serial\",\"\");", "-    }", "-    ", "-    if(CompilerWarnings.SHOW_FINALLY) {", "-      options.put(\"-Xlint:finally\",\"\");", "-    }", "-    ", "-    if(CompilerWarnings.SHOW_FALLTHROUGH) {", "-      options.put(\"-Xlint:fallthrough\",\"\");", "-      options.put(\"-Xlint:switchcheck\",\"\"); //Some compilers appear to use this option instead. Anyone know anything about this?", "-    }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68e6528e1c0e325a02ea5263a2f445bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v1_0/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "9f7616fd6847dd00d848676323dd2e5f5ac106c9", "commitAfterChange": "9ffaf267aed8adb3ea1a9aa4f99ce4ee78724acb", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected Hashtable createOptionsHashtable(File[] sourceRoots)", "signatureAfterChange": "      protected Hashtable createOptionsHashtable(File[] sourceRoots)", "diff": ["-", "-    if(CompilerWarnings.SHOW_UNCHECKED) {", "-      options.put(\"-Xlint:unchecked\",\"\");", "-    }", "-    if(CompilerWarnings.SHOW_DEPRECATION) {", "-      options.put(\"-Xlint:deprecation\",\"\");", "-    }", "-", "-    if(CompilerWarnings.SHOW_PATH) {", "-      options.put(\"-Xlint:path\",\"\");", "-    }", "+    HashMap/*<String,String>*/ toAdd = CompilerOptions.getOptions(_warningsEnabled);", "+    LinkedList /*<String>*/ keys = new LinkedList/*<String>*/(toAdd.keySet());", "+    LinkedList /*<String>*/values = new LinkedList/*<String>*/(toAdd.values());", "+        ", "+    for(int i = 0; i< toAdd.size(); i++)", "+      options.put((String)values.get(i), (String)values.get(i));", "-    if(CompilerWarnings.SHOW_SERIAL) {", "-      options.put(\"-Xlint:serial\",\"\");", "-    }", "-    if(CompilerWarnings.SHOW_FINALLY) {", "-      options.put(\"-Xlint:finally\",\"\");", "-    }", "+    //options.putAll(CompilerOptions.getOptions(_warningsEnabled));", "-    if(CompilerWarnings.SHOW_FALLTHROUGH) {", "-      options.put(\"-Xlint:fallthrough\",\"\");", "-      options.put(\"-Xlint:switchcheck\",\"\"); //Some compilers appear to use this option instead. Anyone know anything about this?", "-    }", "-"]}], "num": 13478}
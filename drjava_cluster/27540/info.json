{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4539f6f9be62e4d1e6580fa3e099a392", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "219118817c3bc5200014121d442e0c39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 105, "signatureBeforeChange": "   public static <T1, T2, T3>      Predicate4<T1, T2, T3, Object> promote(final Predicate3<? super T1, ? super T2,                                                              ? super T3> pred)", "signatureAfterChange": "   public static <T1, T2, T3>      Predicate4<T1, T2, T3, Object> promote(Predicate3<? super T1, ? super T2, ? super T3> pred)", "diff": ["-  /** @return A {@code Predicate4} equivalent to {@code pred} with an additional, ignored argument */", "+  /** Create a {@code Predicate4} equivalent to {@code pred} with an additional, ignored argument. */", "-    Predicate4<T1, T2, T3, Object> promote(final Predicate3<? super T1, ? super T2, ", "-                                                            ? super T3> pred) {", "-    return new Predicate4<T1, T2, T3, Object>() {", "-      public Boolean value(T1 arg1, T2 arg2, T3 arg3, Object arg4) { ", "-        return pred.value(arg1, arg2, arg3);", "-      }", "-    };", "+    Predicate4<T1, T2, T3, Object> promote(Predicate3<? super T1, ? super T2, ? super T3> pred) {", "+    return new PromotedPredicate4<T1, T2, T3>(pred);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d252fa7e35358a8214fb7d64a27662b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 96, "signatureBeforeChange": "   public static <T1, T2, T3, R>      Lambda4<T1, T2, T3, Object, R> promote(final Lambda3<? super T1, ? super T2,                                                           ? super T3, ? extends R> lambda)", "signatureAfterChange": "   public static <T1, T2, T3, R>      Lambda4<T1, T2, T3, Object, R> promote(Lambda3<? super T1, ? super T2, ? super T3, ? extends R> lambda)", "diff": ["-  /** @return A {@code Lambda4} equivalent to {@code lambda} with an additional, ignored argument */", "+  /** Create a {@code Lambda4} equivalent to {@code lambda} with an additional, ignored argument. */", "-    Lambda4<T1, T2, T3, Object, R> promote(final Lambda3<? super T1, ? super T2, ", "-                                                         ? super T3, ? extends R> lambda) {", "-    return new Lambda4<T1, T2, T3, Object, R>() {", "-      public R value(T1 arg1, T2 arg2, T3 arg3, Object arg4) { ", "-        return lambda.value(arg1, arg2, arg3);", "-      }", "-    };", "+    Lambda4<T1, T2, T3, Object, R> promote(Lambda3<? super T1, ? super T2, ? super T3, ? extends R> lambda) {", "+    return new PromotedLambda4<T1, T2, T3, R>(lambda);"]}], "num": 27540}
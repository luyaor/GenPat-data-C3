{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "787a980c9cbb45a06197f5f2ab0d23dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3771b96213d7f22c90bd097f310ea748", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "2d130b589eb563459c94da96fea961fcbe800771", "commitAfterChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public String getVariableType(String var, int... indices)", "signatureAfterChange": "   public String getVariableType(String var, int... indices)", "diff": ["-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return null; }", "-    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "-    if (lv == null) { return null; }", "+//    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "+//    if (env == null) { return null; }", "+//    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "+//    if (lv == null) { return null; }", "+//    else {", "+//      Type t = lv.type();", "+//      for(int i = 0; i < indices.length; ++i) {", "+//        if (!_interpreterOptions.typeSystem().isArray(t)) { return \"<error: value is not an array>\"; }", "+//        t = _interpreterOptions.typeSystem().arrayElementType(t);", "+//      }", "+//      return _interpreterOptions.typeSystem().typePrinter().print(t);", "+//    }", "+    Object[] val = getVariable(var);", "+    if (val.length == 0) { return null; }", "-      Type t = lv.type();", "+      Object o = val[0];", "+      Class<?> c = o.getClass();", "-        if (!_interpreterOptions.typeSystem().isArray(t)) { return \"<error: value is not an array>\"; }", "-        t = _interpreterOptions.typeSystem().arrayElementType(t);", "+        if (!c.isArray()) { return \"<error: value is not an array>\"; }", "+        c = c.getComponentType();;", "-      return _interpreterOptions.typeSystem().typePrinter().print(t);", "+      return c.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2af8cb11ccaf3cb202ff829fedbe789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "2d130b589eb563459c94da96fea961fcbe800771", "commitAfterChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Object[] getVariable(String var)", "signatureAfterChange": "   public Object[] getVariable(String var)", "diff": ["-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return new Object[0]; }", "-    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "-    if (lv == null) { return new Object[0]; }", "-    return new Object[]{ env.second().get(lv) };", "+//    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "+//    if (env == null) { return new Object[0]; }", "+//    LocalVariable lv = env.first().getLocalVariable(var, _interpreterOptions.typeSystem());", "+//    if (lv == null) { ", "+        InterpretResult ir = interpret(var);", "+        return ir.apply(new InterpretResult.Visitor<Object[]>() {", "+            public Object[] forNoValue() { return new Object[0]; }", "+            public Object[] forStringValue(String val) { return new Object[] { val }; }", "+            public Object[] forCharValue(Character val) { return new Object[] { val }; }", "+            public Object[] forNumberValue(Number val) { return new Object[] { val }; }", "+            public Object[] forBooleanValue(Boolean val) { return new Object[] { val }; }", "+            public Object[] forObjectValue(String valString) { return new Object[] { valString }; }", "+            public Object[] forException(String message) { return new Object[0]; }", "+            public Object[] forEvalException(String message, StackTraceElement[] stackTrace) { return new Object[0]; }", "+            public Object[] forUnexpectedException(Throwable t) { return new Object[0]; }", "+            public Object[] forBusy() { return new Object[0]; }", "+        });", "+//    }", "+//    return new Object[]{ env.second().get(lv) };"]}], "num": 11445}
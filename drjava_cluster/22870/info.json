{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faa1c056997bef7ffb533867cb693048", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81abb202e935cdeb7765ba36b03af47", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "commitAfterChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "signatureAfterChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "diff": ["-    _compilerChoiceBox = new JComboBox(getModel().getAvailableCompilers());", "+    _compilerChoiceBox = ", "+      new JComboBox(getModel().getCompilerModel().getAvailableCompilers());", "-    _compilerChoiceBox.setSelectedItem(getModel().getActiveCompiler());", "+    _compilerChoiceBox.setSelectedItem", "+      (getModel().getCompilerModel().getActiveCompiler());", "-          getModel().setActiveCompiler(compiler);", "+          getModel().getCompilerModel().setActiveCompiler(compiler);", "-          getModel().setActiveCompiler(NoCompilerAvailable.ONLY);", "+          getModel().getCompilerModel()", "+            .setActiveCompiler(NoCompilerAvailable.ONLY);", "-        getModel().resetCompilerErrors();", "+        getModel().getCompilerModel().resetCompilerErrors();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bea3e9a061e883642bef4a6d7f4124d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsWithTest.java", "commitBeforeChange": "5d2701667cf27d44a069ea945e7b8afcad461e22", "commitAfterChange": "0dc9a35e122071847260a9f3f7c5a7bac3c46105", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "signatureAfterChange": "   public void testStartsWithPrefixNoText() throws BadLocationException", "diff": ["-    assertTrue(\"line of star (no space)\", !rule.applyRule(_doc, 8, Indenter.OTHER));", "-    assertTrue(\"line after star (no space)\", rule.applyRule(_doc, 10, Indenter.OTHER));", "-    assertTrue(\"two lines after star (no space)\", !rule.applyRule(_doc, 16, Indenter.OTHER));", "+    assertTrue(\"line of star (no space)\", !rule.applyRule(_doc, 8, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after star (no space)\", rule.applyRule(_doc, 10, Indenter.IndentReason.OTHER));", "+    assertTrue(\"two lines after star (no space)\", !rule.applyRule(_doc, 16, Indenter.IndentReason.OTHER));", "-    assertTrue(\"line of star (with space)\", !rule.applyRule(_doc, 7, Indenter.OTHER));", "-    assertTrue(\"just after star (with space)\", !rule.applyRule(_doc, 11, Indenter.OTHER));", "-    assertTrue(\"line after star (with space)\", rule.applyRule(_doc, 13, Indenter.OTHER));", "+    assertTrue(\"line of star (with space)\", !rule.applyRule(_doc, 7, Indenter.IndentReason.OTHER));", "+    assertTrue(\"just after star (with space)\", !rule.applyRule(_doc, 11, Indenter.IndentReason.OTHER));", "+    assertTrue(\"line after star (with space)\", rule.applyRule(_doc, 13, Indenter.IndentReason.OTHER));"]}], "num": 22870}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec0ef29224f2b230e68b33f20ac783c4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7204c06f91e16b204a338661a1d56db1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/Configuration.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public String[] getExtraClasspath()", "signatureAfterChange": "     public String[] getExtraClasspath()", "diff": ["-   */", "-  public String[] getExtraClasspath() {", "-    String path = _properties.getProperty(EXTRA_CLASSPATH_KEY);", "-    if (path == null) {", "-      return new String[0];", "-    else {", "-      StringTokenizer tokenizer = new StringTokenizer(path, PATH_SEPARATOR);", "-      String[] ret = new String[tokenizer.countTokens()];", "-      for (int i = 0; i < ret.length; i++) {", "-        ret[i] = tokenizer.nextToken();", "-      }", "-", "-      return ret;", "-  }", "+     */", "+    public String[] getExtraClasspath() {", "+\tVector<String> v = _config.getSetting(EXTRA_CLASSPATH);", "+\tif(v==null) return new String[0];", "+\tString[] ret = new String[v.size()];", "+\tv.copyInto(ret);", "+\treturn ret;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3785d035de760f8b8f14d895eb4ea1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "    public boolean isSubClassOf(SymbolData superClass)", "signatureAfterChange": "    public boolean isSubClassOf(SymbolData sd)", "diff": ["-   public boolean isSubClassOf(SymbolData superClass) {", "-    if (superClass == null) return false;", "-    if (this == superClass) return true;", "-    if (superClass.isInterface()) {", "-      Iterator<SymbolData> iter = _interfaces.iterator();", "-      while (iter.hasNext()) {", "-        SymbolData d = iter.next();", "-        if (d == null) {", "-          continue;", "-        }", "-        if (d == superClass) {", "-          return true;", "-        }", "-        if (d.isSubClassOf(superClass)) {", "-          return true;", "-        }", "+   public boolean isSubClassOf(SymbolData sd) {", "+    if (sd == null) return false;", "+    if (this.equals(sd)) return true;", "+    if (sd.isInterface()) {", "+      for (SymbolData i: _interfaces) {", "+        if (i == null) continue;", "+        if (i.equals(sd)) return true;", "+        if (i.isSubClassOf(sd)) return true;", "-    if (_superClass != null) {", "-      return this._superClass.isSubClassOf(superClass);", "-    }", "+    if (_superClass != null) return _superClass.isSubClassOf(sd);"]}], "num": 27277}
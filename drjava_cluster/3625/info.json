{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4b647289b8561de5df54f3a0098b37b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66188215a7e6cbab60a6c40480055e57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "a9e88c9896a0247806cc1a6d54ae50329689432b", "commitAfterChange": "87dc6eec48d92797c0b33779a71935f55ec078b5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction();", "diff": ["-  public void interpretCurrentInteraction() {", "-    try {", "-      String text = _interactionsDoc.getCurrentInteraction();", "-      _interactionsDoc.addToHistory(text);", "-      String toEval = text.trim();", "-      // Result of interpretation, or JavaInterpreter.NO_RESULT if none.", "-      Object result;", "-      // Do nothing but prompt if there's nothing to evaluate!", "-      if (toEval.length() == 0) {", "-        result = JavaInterpreter.NO_RESULT;", "-      }", "-      else {", "-        if (toEval.startsWith(\"java \")) {", "-          toEval = _testClassCall(toEval);", "-        }", "-        result = _interpreter.interpret(toEval);", "-        String resultStr;", "-        try {", "-          resultStr = String.valueOf(result);", "-        } catch (Throwable t) {", "-          // Very weird. toString() on result must have thrown this exception!", "-          // Let's act like DynamicJava would have if this exception were thrown", "-          // and rethrow as RuntimeException", "-          throw  new RuntimeException(t.toString());", "-        }", "-      }", "-", "-      if (result != JavaInterpreter.NO_RESULT) {", "-       _interactionsDoc.insertString(_interactionsDoc.getLength(),", "-                                     \"\\n\" + String.valueOf(result), null);", "-      }", "-", "-      _interactionsDoc.prompt();", "-    }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-    catch (Throwable e) {", "-      String message = e.getMessage();", "-      // Don't let message be null. Java sadly makes getMessage() return", "-      // null if you construct an exception without a message.", "-      if (message == null) {", "-        message = e.toString();", "-        e.printStackTrace();", "-      }", "-      // Hack to prevent long syntax error messages", "-      try {", "-        if (message.startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\")) {", "-          _interactionsDoc.insertString(_interactionsDoc.getLength(),", "-                                        \"\\nError in evaluation: \" +", "-                                        \"Invalid syntax\",", "-                                        null);", "-        }", "-        else {", "-          _interactionsDoc.insertString(_interactionsDoc.getLength(),", "-                                        \"\\nError in evaluation: \" + message,", "-                                        null);", "-        }", "-", "-        _interactionsDoc.prompt();", "-      } catch (BadLocationException willNeverHappen) {}", "-    }", "-  }", "+  public void interpretCurrentInteraction();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b258e474570b8a245213ef19dc413e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "5524f1583831732cba13db8d29753185e8da800d", "commitAfterChange": "99d03f8fb452eedca57bf52b837e87bbebdabefc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["+  public void interpretCurrentInteraction() {", "+    notifyListeners(new EventNotifier() {", "+      public void notifyListener(GlobalModelListener l) {", "+        l.interactionStarted();", "+      }", "+    });", "+", "+    String text = _interactionsDoc.getCurrentInteraction();", "+    _interactionsDoc.addToHistory(text);", "+", "+    String toEval = text.trim();", "+    if (toEval.startsWith(\"java \")) {", "+      toEval = _testClassCall(toEval);", "+    }", "+", "+    _interpreterControl.interpret(toEval);", "+  }"]}], "num": 3625}
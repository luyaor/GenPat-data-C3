{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be57d5c89dd3a35a69ed6b61576a6d1f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbdd8d10533299f26cace82c76f107c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "dff1e78708d1fc8c89ac7283a8a2c5db6fd8ed74", "commitAfterChange": "545baa1c63b7ee7d993e35e240105f7970f7c2d1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "signatureAfterChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "diff": ["+    ", "-        if(mapInsert(oce.value, _a)) // if overwrite, remove accelerator of overwritten menuitem", "+        if (oce.value == KeyStrokeOption.NULL_KEYSTROKE) return; ", "+        ", "+        if(shouldUpdate(oce.value, _a)) ", "-          if (_jmi != null) { // otherwise this keystroke should map to an action that isn't in the menu", "-            JMenuItem overwrittenMenuItem = (JMenuItem) _keyToMenuItemMap.get(oce.value);", "-            if (overwrittenMenuItem != null) {", "-              overwrittenMenuItem.setAccelerator(null);", "-            }", "-            _jmi.setAccelerator(oce.value);", "-          }", "-          // change shift-version's binding", "-          Action shiftAction = (Action) _actionToShiftActionMap.get(_a);", "-          if (shiftAction != null) {", "-            _keyToActionMap.remove(addShiftModifier(_ks));", "-            mapInsert(addShiftModifier(oce.value), shiftAction);", "+          KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a);", "+          _keyToDataMap.remove(_ks);", "+          ", "+          //check for conflicting key binding", "+          if (_keyToDataMap.containsKey(oce.value)) {", "+            //if new key in map, and shouldUpdate returns true, we are overwriting it", "+            KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "+            conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "+            _updateMenuItem(conflictKSD);", "+            _keyToDataMap.remove(oce.value);", "+            DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-          _keyToActionMap.remove(_ks);", "-          _ks = oce.value;", "+          ", "+          _keyToDataMap.put(oce.value,data);", "+          data.setKeyStroke(oce.value);", "+          _updateMenuItem(data);", "+          ", "+          //Check associated shift-version's binding", "+          Action shiftAction = (Action) data.getShiftAction();", "+          if (shiftAction != null) {", "+            //_keyToActionMap.remove(addShiftModifier(_ks));", "+            KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "+            _keyToDataMap.remove(shiftKSD.getKeyStroke());", "+            shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "+            _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "+            //mapInsert(addShiftModifier(oce.value), shiftAction);", "+          }", "+          ", "+          _ks = oce.value;          ", "+        else if (_ks != oce.value)", "+          DrJava.CONFIG.setSetting(oce.option, _ks);", "+   ", "+    ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71470a68407520563132f5c17f995c9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "signatureAfterChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "diff": ["-      if (CodeStatus.DEVELOPMENT) {", "-        if(shouldUpdate(oce.value, _a)) ", "-        {", "-          KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a); ", "-          _keyToDataMap.remove(_ks);", "-          ", "-          //check for conflicting key binding", "-          if (_keyToDataMap.containsKey(oce.value) && _shouldCheckConflict) {", "-            //if new key in map, and shouldUpdate returns true, we are overwriting it", "-            KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "-            conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "-            _updateMenuItem(conflictKSD);", "-            _keyToDataMap.remove(oce.value);", "-            DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-          }", "-          ", "-          if (oce.value != KeyStrokeOption.NULL_KEYSTROKE) {", "-            _keyToDataMap.put(oce.value,data);", "-          }", "-          data.setKeyStroke(oce.value);", "-          _updateMenuItem(data);", "-          ", "-          //Check associated shift-version's binding", "-          Action shiftAction = (Action) data.getShiftAction();", "-          if (shiftAction != null) {", "-            //_keyToActionMap.remove(addShiftModifier(_ks));", "-            KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "-            _keyToDataMap.remove(shiftKSD.getKeyStroke());", "-            shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "-            _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "-            //mapInsert(addShiftModifier(oce.value), shiftAction);", "-          }", "-          ", "-          _ks = oce.value;          ", "+      if(shouldUpdate(oce.value, _a)) ", "+      {", "+        KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a); ", "+        _keyToDataMap.remove(_ks);", "+        ", "+        //check for conflicting key binding", "+        if (_keyToDataMap.containsKey(oce.value) && _shouldCheckConflict) {", "+          //if new key in map, and shouldUpdate returns true, we are overwriting it", "+          KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "+          conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "+          _updateMenuItem(conflictKSD);", "+          _keyToDataMap.remove(oce.value);", "+          DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-        else if (_ks != oce.value)", "-          DrJava.CONFIG.setSetting(oce.option, _ks);", "+        ", "+        if (oce.value != KeyStrokeOption.NULL_KEYSTROKE) {", "+          _keyToDataMap.put(oce.value,data);", "+        }", "+        data.setKeyStroke(oce.value);", "+        _updateMenuItem(data);", "+        ", "+        //Check associated shift-version's binding", "+        Action shiftAction = (Action) data.getShiftAction();", "+        if (shiftAction != null) {", "+          //_keyToActionMap.remove(addShiftModifier(_ks));", "+          KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "+          _keyToDataMap.remove(shiftKSD.getKeyStroke());", "+          shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "+          _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "+          //mapInsert(addShiftModifier(oce.value), shiftAction);", "+        }", "+          ", "+        _ks = oce.value;          ", "-      ", "-      ", "+      else if (_ks != oce.value) {", "+        DrJava.CONFIG.setSetting(oce.option, _ks);", "+      }"]}], "num": 28950}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87a2e02261fda6d7e61b68882e3e63ff", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4153c8cfb43a3c48a74794535b66d778", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "commitAfterChange": "48e9711d768be0e10f630f8284db4c31a0256844", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "diff": ["-    _m = new JUnitErrorModel(new JUnitError[0], _model, false);", "+    _log.log(\"testErrorArrayInOrder_NOJOIN started\");", "+    final JUnitTestListener listener = new JUnitTestListener();", "-    final File file = new File(_tempDir, \"MonkeyTestFail.java\");", "-    saveFile(doc, new FileSelector(file));", "+    _log.log(\"doc setUp\");", "-    JUnitTestListener listener = new JUnitTestListener();", "-    _model.addListener(listener);", "-    ", "-    testStartCompile(doc);", "-    ", "-    listener.waitCompileDone();", "-    ", "-    if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "-    listener.checkCompileOccurred();", "-    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try {", "+          _m = new JUnitErrorModel(new JUnitError[0], _model, false);", "+", "+          final File file = new File(_tempDir, \"MonkeyTestFail.java\");", "+          saveFile(doc, new FileSelector(file));", "+          ", "+          _model.addListener(listener);", "+          ", "+          testStartCompile(doc);", "+          _log.log(\"Compile started\");", "+          ", "+          listener.waitCompileDone();", "+          _log.log(\"Compile done\");", "+          ", "+          if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "+          listener.checkCompileOccurred();", "+          _log.log(\"Done with first block\");", "+        }", "+        catch(Exception e) { fail(\"The following exception was thrown in the first block of testErrorsArrayInOrder: /n\" + e); }", "+      }", "+    });", "+         ", "-    // Clear document so we can make sure it's written to after startJUnit; ", "-    // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "-    // Perform the clear operation atomically in the event thread.", "+    ", "-        try {", "+        try {     ", "+          // Clear document so we can make sure it's written to after startJUnit; ", "+          // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "+          // Performing the clear operation atomically in the event thread.", "+          ", "+          assertEquals(\"Confirm document is empty\", 0, _model.getJUnitModel().getJUnitDocument().getLength());", "+          _log.log(\"JUnitDocument is empty\");", "+        catch(Exception e) { fail(\"The following exception was thrown in testErrorsArrayInOrder: /n\" + e); }", "-    //final TestResult testResults = doc.startJUnit();", "-    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    // Wait until events triggered by running unit tests have cleared ? (should be done by code above)", "+    Utilities.clearEventQueue();", "+    _log.log(\"Event queue cleared\");", "+    ", "+    //final TestResult testResults = doc.startJUnit();", "+    ", "+    _log.log(\"testErrorArrayInOrder complete\");", "+    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "455127a0afcb07e1585281f7b385da06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "signatureAfterChange": "   public void testUnsavedAndUnCompiledChanges() throws Exception", "diff": ["-   */", "-  public void testUnsavedAndUnCompiledChanges() throws Exception {", "-    if (printMessages) System.out.println(\"----testUnsavedAndUnCompiledChanges-----\");", "-", "-    OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_PASS_TEXT);", "-    final File file = new File(_tempDir, \"MonkeyTestPass.java\");", "-    doc.saveFile(new FileSelector(file));", "-    JUnitTestListener listener = new JUnitTestListener(true);", "-    _model.addListener(listener);", "-    if (printMessages) System.out.println(\"before compile\");", "-    doc.startCompile();", "-    if (printMessages) System.out.println(\"after compile\");", "-    changeDocumentText(MONKEYTEST_FAIL_TEXT, doc);", "-    ", "-    synchronized(listener) {", "-      doc.startJUnit();", "-      if (printMessages) System.out.println(\"waiting for test\");", "-      listener.wait();", "-    }", "-    if (printMessages) System.out.println(\"after test\");", "-    _model.removeListener(listener);", "-", "-    assertEquals(\"test case should have no errors reported after modifying\",", "-                 0,", "-                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "-    ", "-    doc.saveFile(new FileSelector(file));", "-", "-    listener = new JUnitTestListener();", "-    _model.addListener(listener);", "-    synchronized(listener) {", "-      doc.startJUnit();", "-      listener.wait();", "-    }", "-", "-    assertEquals(\"test case should have no errors reported after saving\",", "-                 0,", "-                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "-    _model.removeListener(listener);", "-  }", "+   */", "+  public void testUnsavedAndUnCompiledChanges() throws Exception {", "+    if (printMessages) System.out.println(\"----testUnsavedAndUnCompiledChanges-----\");", "+", "+    OpenDefinitionsDocument doc = setupDocument(MONKEYTEST_PASS_TEXT);", "+    final File file = new File(_tempDir, \"MonkeyTestPass.java\");", "+    doc.saveFile(new FileSelector(file));", "+    JUnitTestListener listener = new JUnitTestListener(true);", "+    _model.addListener(listener);", "+    if (printMessages) System.out.println(\"before compile\");", "+    doc.startCompile();", "+    if (printMessages) System.out.println(\"after compile\");", "+    changeDocumentText(MONKEYTEST_FAIL_TEXT, doc);", "+    ", "+    _runJUnit(doc);", "+    ", "+    if (printMessages) System.out.println(\"after test\");", "+    _model.removeListener(listener);", "+", "+    assertEquals(\"test case should have no errors reported after modifying\",", "+                 0,", "+                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "+    ", "+    doc.saveFile(new FileSelector(file));", "+", "+    listener = new JUnitTestListener();", "+    _model.addListener(listener);", "+", "+", "+    assertEquals(\"test case should have no errors reported after saving\",", "+                 0,", "+                 _model.getJUnitModel().getJUnitErrorModel().getNumErrors());", "+    _model.removeListener(listener);", "+  }"]}], "num": 9065}
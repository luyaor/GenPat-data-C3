{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8146c878982a7e2733aef374bab01bbc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4deb008599dc2263ee28e86f862e172b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 264, "methodNumberAfterChange": 265, "signatureBeforeChange": "      public ClassType lookupClass(Expression object, String name, Iterable<? extends Type> typeArgs)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "      public ClassType lookupClass(Expression object, String name, Iterable<? extends Type> typeArgs,                                Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-  public ClassType lookupClass(Expression object, String name, Iterable<? extends Type> typeArgs)", "+  public ClassType lookupClass(Expression object, String name, Iterable<? extends Type> typeArgs,", "+                               Access.Module accessModule)", "-    return new ClassFinder(name, typeArgs, false).findSingleClass(NodeProperties.getType(object));", "+    return new ClassFinder(name, typeArgs, accessModule, false).findSingleClass(NodeProperties.getType(object));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ab7a02d64c1095b191f106ae60df554", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 248, "signatureBeforeChange": "   public boolean containsStaticMethod(Type t, String name)", "signatureAfterChange": "   public boolean containsStaticMethod(Type t, String name, Access.Module accessModule)", "diff": ["-  public boolean containsMethod(Type t, String name) { return new MethodFinder(name, false).hasMatch(t); }", "-  public boolean containsStaticMethod(Type t, String name) { return new MethodFinder(name, true).hasMatch(t); }", "+  }", "+  public boolean containsStaticMethod(Type t, String name, Access.Module accessModule) {", "+    return new MethodFinder(name, accessModule, true).hasMatch(t);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2da6e4aa7922f76bec2d243fced3200", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 253, "signatureBeforeChange": "   private boolean containsField(Type t, String name, boolean onlyStatic)", "signatureAfterChange": "   private boolean containsField(Type t, String name, Access.Module accessModule, boolean onlyStatic)", "diff": ["-  public boolean containsStaticField(Type t, String name) { return containsField(t, name, true); }", "-  private boolean containsField(Type t, String name, boolean onlyStatic) {", "-    FieldFinder<FieldReference> finder = new FieldFinder<FieldReference>(name, onlyStatic) {", "+  }", "+  private boolean containsField(Type t, String name, Access.Module accessModule, boolean onlyStatic) {", "+    FieldFinder<FieldReference> finder = new FieldFinder<FieldReference>(name, accessModule, onlyStatic) {"]}], "num": 21654}
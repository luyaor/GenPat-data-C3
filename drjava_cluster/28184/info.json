{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c0109af3ff3b121de01c5b38107fcdb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18163c8b201b8ddccb50ee3d16eac2b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": "               public void testForParenthesizedOnly()", "signatureAfterChange": "               public void testForParenthesizedOnly()", "diff": ["-      Parenthesized p = new Parenthesized(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO));", "+      Parenthesized p = new Parenthesized(SourceInfo.NONE, NULL_LITERAL);", "-      //if value_result is an intance data, no problems", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forParenthesizedOnly(p, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      // if valueRes is an intance data, no problems", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forParenthesizedOnly(p, SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      //if value_result null, just return null", "+      // if valueRes null, just return null", "-      //if value_result is package data, add error", "+      // if valueRes is package data, add error", "-      ", "-      ", "-      //if value result not instance type, give error", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forParenthesizedOnly(p, SymbolData.INT_TYPE));", "+", "+      // if value result not instance type, give error", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forParenthesizedOnly(p, SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\",\"This class or interface name cannot appear in parentheses.  Perhaps you meant to create a new instance of int\" , errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\",", "+                   \"This class or interface name cannot appear in parentheses.  Perhaps you meant to create a new \"", "+                     + \"instance of int\" , ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6738e051580aabeda61c6dd2f216419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "                          public void testForThrowStatementOnly()", "signatureAfterChange": "                          public void testForThrowStatementOnly()", "diff": ["-      SymbolData exception = new SymbolData(\"java.lang.Throwable\");", "+      ThrowStatement s = new ThrowStatement(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      SymbolData exception = _b.getSymbolData(\"java.lang.Throwable\", s, false, true); // new SymbolData(\"java.lang.Throwable\");", "-      symbolTable.put(\"java.lang.Throwable\", exception);", "+//      symbolTable.put(\"java.lang.Throwable\", exception);", "-      ThrowStatement s = new ThrowStatement(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"When a SymbolData is the thrown type, return its InstanceData\", exceptionInstance, _b.forThrowStatementOnly(s, exception));", "+      assertEquals(\"When a SymbolData is the thrown type, return its InstanceData\", exceptionInstance, ", "+                   _b.forThrowStatementOnly(s, exception));", "-      assertEquals(\"Error message should be correct\", \"You cannot throw a class or interface name.  Perhaps you mean to instantiate the exception java.lang.Throwable that you are throwing\", errors.getLast().getFirst());", "+      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You cannot throw a class or interface name.  \" + ", "+                   \"Perhaps you mean to instantiate the exception class java.lang.Throwable that you are throwing\", ", "+                   errors.get(0).getFirst());", "-      assertEquals(\"When a thrown type does not implement Throwable, return the type anyway\", naeInstance, _b.forThrowStatementOnly(s, naeInstance));", "+      assertEquals(\"When a thrown type does not implement Throwable, return the type anyway\", naeInstance, ", "+                   _b.forThrowStatementOnly(s, naeInstance));", "-      assertEquals(\"Error message should be correct\", \"You are attempting to throw bob, which does not implement the Throwable interface\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"You are attempting to throw bob, which does not implement the Throwable interface\", errors.getLast().getFirst());"]}], "num": 28184}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2813837a31305661a2997ba9bdb180ef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8349a66cca65e808b84febfe8bf8e705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "1333ad40debe120f6d8fd5fb5ff36c57ce6b1ccf", "commitAfterChange": "3907c0e8430f2d380a191d1ad8364cbfdd1d1b28", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "    public InterpretResult interpret(final String s)", "signatureAfterChange": "   public void interpret(final String s)", "diff": ["-  public InterpretResult interpret(final String s) {", "-    try {", "-      _dialog(\"to interp: \" + s);", "-      Object result = _interpreter.interpret(s);", "-      _dialog(\"interp ret: \" + result);", "-", "-      if (result == JavaInterpreter.NO_RESULT) {", "-        return new VoidResult();", "+  //public InterpretResult interpret(final String s) {", "+  public void interpret(final String s) {", "+    Thread thread = new Thread(\"interpret thread: \" + s) {", "+      public void run() {", "+        try {", "+          try {", "+            _dialog(\"to interp: \" + s);", "+            Object result = _interpreter.interpret(s);", "+            _dialog(\"interp ret: \" + result);", "+            ", "+            if (result == JavaInterpreter.NO_RESULT) {", "+              //return new VoidResult();", "+              _mainJVM.interpretResult(new VoidResult());", "+            }", "+            else {", "+              // we use String.valueOf because it deals with result = null!", "+              _dialog(\"about to tell main result was \" + result);", "+              //return new ValueResult(String.valueOf(result));", "+              _mainJVM.interpretResult(new ValueResult(String.valueOf(result)));", "+            }", "+          }", "+          catch (ExceptionReturnedException e) {", "+            Throwable t = e.getContainedException();", "+            ", "+            //_dialog(\"before call to threwException\");", "+            //return new ExceptionResult(t.getClass().getName(),", "+            //                           t.getMessage(),", "+            //                           getStackTrace(t));", "+            _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(),", "+                                                         t.getMessage(),", "+                                                         getStackTrace(t)));", "+          }", "+          catch (Throwable t) {", "+            // A user's toString method might throw anything, so we need to be careful", "+            //_dialog(\"thrown by toString: \" + t);", "+            //return new ExceptionResult(t.getClass().getName(),", "+            //                           t.getMessage(),", "+            //                           getStackTrace(t));", "+            _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(),", "+                                                         t.getMessage(),", "+                                                         getStackTrace(t)));", "+          }", "+        }", "+        catch (RemoteException re) {", "+          // Can't communicate with MainJVM?  Nothing to do...", "+          _log.log(re.toString());", "+        }", "-      else {", "-        // we use String.valueOf because it deals with result = null!", "-        _dialog(\"about to tell main result was \" + result);", "-        return new ValueResult(String.valueOf(result));", "-      }", "-    }", "-    catch (ExceptionReturnedException e) {", "-      Throwable t = e.getContainedException();", "+    };", "-      //_dialog(\"before call to threwException\");", "-      return new ExceptionResult(t.getClass().getName(),", "-                                 t.getMessage(),", "-                                 getStackTrace(t));", "-    }", "-    catch (Throwable t) {", "-      // A user's toString method might throw anything, so we need to be careful", "-      //_dialog(\"thrown by toString: \" + t);", "-      return new ExceptionResult(t.getClass().getName(),", "-                                 t.getMessage(),", "-                                 getStackTrace(t));", "-    }", "+    thread.setDaemon(true);", "+    thread.start();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1bd72833d296be4f27042270967bfa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   protected ArrayList<String> _getHistoryText(FileOpenSelector selector)     throws IOException, OperationCanceledException", "signatureAfterChange": "   protected ArrayList<String> _getHistoryText(FileOpenSelector selector)     throws IOException, OperationCanceledException", "diff": ["-    throws IOException, OperationCanceledException", "-  {", "+    throws IOException, OperationCanceledException {", "+    if (files == null) throw new IOException(\"No Files returned from FileSelector\");", "+    ", "-    if (files == null) {", "-      throw new IOException(\"No Files returned from FileSelector\");", "-    }", "-", "-    for (int i=0; i < files.length; i++) {", "-      if (files[i] == null) {", "-        throw new IOException(\"File name returned from FileSelector is null\");", "-      }", "-      File c = files[i];", "-      if (c != null) {", "-        try {", "-          FileInputStream fis = new FileInputStream(c);", "-          InputStreamReader isr = new InputStreamReader(fis);", "-          BufferedReader br = new BufferedReader(isr);", "-          String currLine;", "-          while ((currLine = br.readLine()) != null) {", "-            strings.add(currLine);", "-          }", "-          br.close(); // win32 needs readers closed explicitly!", "+    ", "+    for (File f: files) {", "+      if (f == null) throw new IOException(\"File name returned from FileSelector is null\");", "+      try {", "+        FileInputStream fis = new FileInputStream(f);", "+        InputStreamReader isr = new InputStreamReader(fis);", "+        BufferedReader br = new BufferedReader(isr);", "+        while (true) {", "+          String line = br.readLine();", "+          if (line == null) break;", "+          strings.add(line);", "-        catch (IOException ioe) {", "-          throw new IOException(\"File name returned from FileSelector is null\");", "-          //_showIOError(ioe);", "-        }", "+        br.close(); // win32 needs readers closed explicitly!", "-", "+      catch (IOException ioe) { throw new IOException(\"File name returned from FileSelector is null\"); }", "+    ", "-      String text = \"\";", "-      String currString;", "+      StringBuffer text = new StringBuffer();", "-      for (int j = 0; j < strings.size(); j++) {", "-        currString = strings.get(j);", "-        if (currString.length() > 0) {", "+      for (String s: strings) {", "+        int sl = s.length();", "+        if (sl > 0) {", "+          ", "-          if (firstLine && (currString.trim().equals(History.HISTORY_FORMAT_VERSION_2.trim()))) {", "-            formatVersion = 2;", "-          }", "+          if (firstLine && (s.trim().equals(History.HISTORY_FORMAT_VERSION_2.trim()))) formatVersion = 2;", "+          ", "-              if (currString.charAt(currString.length() - 1) == ';') {", "-                text += currString + _newLine;", "-              }", "-              else {", "-                text += currString + \";\" + _newLine;", "-              }", "+              text.append(s);", "+              if (s.charAt(sl - 1) != ';') text.append(';');", "+              text.append(_newLine);", "-              if (!firstLine) { // don't include format version string in output", "-                text += currString + _newLine;", "-              }", "+              if (!firstLine) text.append(s).append(_newLine); // omit version string from output", "-", "+      ", "-      histories.add(text);", "+      histories.add(text.toString());"]}], "num": 26035}
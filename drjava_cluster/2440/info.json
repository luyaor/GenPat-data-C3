{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a045acbaf571eed9c90af297c0571d7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ced91621f5d6e2a7ad0457faea864ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "     public Object visit(ShiftLeftAssignExpression node)", "signatureAfterChange": "   public Class visit(ShiftLeftAssignExpression node)", "diff": ["+   */", "+  public Class visit(ShiftLeftAssignExpression node) {", "+    Class c = visitShiftExpression(node);", "+    ", "+    // The left subexpression must be a variable", "+    if (!node.getLeftExpression().hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"shift.left.type\", node);", "+    }", "+    ", "+    return c;", "+  }", "-     */", "-    public Object visit(ShiftLeftAssignExpression node) {", "-        Class c = visitShiftExpression(node);", "-", "-        // The left subexpression must be a variable", "-        if (!node.getLeftExpression().hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"shift.left.type\", node);", "-        }", "-", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e787b99755aec8db77d827919cebf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "     public Object visit(UnsignedShiftRightAssignExpression node)", "signatureAfterChange": "   public Class visit(UnsignedShiftRightAssignExpression node)", "diff": ["+   */", "+  public Class visit(UnsignedShiftRightAssignExpression node) {", "+    Class c = visitShiftExpression(node);", "+    ", "+    // The left subexpression must be a variable", "+    if (!node.getLeftExpression().hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"unsigned.shift.right.type\", node);", "+    }", "+    ", "+    return c;", "+  }", "-     */", "-    public Object visit(UnsignedShiftRightAssignExpression node) {", "-        Class c = visitShiftExpression(node);", "-", "-        // The left subexpression must be a variable", "-        if (!node.getLeftExpression().hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"unsigned.shift.right.type\", node);", "-        }", "-", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7c2000c58dc8373aca5ff25acb65e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "     public Object visit(ShiftRightAssignExpression node)", "signatureAfterChange": "   public Class visit(ShiftRightAssignExpression node)", "diff": ["+   */", "+  public Class visit(ShiftRightAssignExpression node) {", "+    Class c = visitShiftExpression(node);", "+    ", "+    // The left subexpression must be a variable", "+    if (!node.getLeftExpression().hasProperty(NodeProperties.MODIFIER)) {", "+      throw new ExecutionError(\"shift.right.type\", node);", "+    }", "+    ", "+    return c;", "+  }", "-     */", "-    public Object visit(ShiftRightAssignExpression node) {", "-        Class c = visitShiftExpression(node);", "-", "-        // The left subexpression must be a variable", "-        if (!node.getLeftExpression().hasProperty(NodeProperties.MODIFIER)) {", "-            throw new ExecutionError(\"shift.right.type\", node);", "-        }", "-", "-        return c;", "-    }"]}], "num": 2440}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d0a638e00e1bd5ef215558e6477dcd0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "205dfe111ebfb357dacee48c1ab5ebf0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "signatureAfterChange": "   public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type)", "diff": ["-   */\r", "-  public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type) {\r", "-    if (type == null) {return null;}\r", "-    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + \" with an array initializer\", that); return type.getInstanceData();}\r", "-    \r", "-    SymbolData elementType = ((ArrayData) type).getElementType();\r", "-    VariableInitializerI[] elements = that.getItems();\r", "-    TypeData[] result = makeArrayOfRetType(elements.length);\r", "-    \r", "-    for (int i = 0; i<elements.length; i++) {\r", "-      if (elements[i] instanceof ArrayInitializer) {\r", "-          result[i] = forArrayInitializerHelper((ArrayInitializer) elements[i], elementType);\r", "-      }\r", "-      else {\r", "-        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);\r", "-        result[i] = elements[i].visit(etc);\r", "-        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); //incorporate the things that were assigned in the expression here\r", "-        if (result[i] != null) {\r", "-          if (assertFound(result[i], (JExpression) that.getItems()[i])) {\r", "-            if (!result[i].getSymbolData().isAssignableTo(elementType, _targetVersion)) {\r", "-              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \" + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);\r", "-            }\r", "-            else {\r", "-              assertInstanceType(result[i], \"The elements of this initializer should all be instances, but you have specified the type name \" + result[i].getName(), (JExpression) that.getItems()[i]);\r", "-            }\r", "-          }\r", "-        }\r", "-      }\r", "-    }\r", "-    \r", "-    \r", "-    return type.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forArrayInitializerHelper(ArrayInitializer that, SymbolData type) {", "+    if (type == null) {return null;}", "+    if (!(type instanceof ArrayData)) {_addError(\"You cannot initialize the non-array type \" + type.getName() + \" with an array initializer\", that); return type.getInstanceData();}", "+    ", "+    SymbolData elementType = ((ArrayData) type).getElementType();", "+    VariableInitializerI[] elements = that.getItems();", "+    TypeData[] result = makeArrayOfRetType(elements.length);", "+    ", "+    for (int i = 0; i<elements.length; i++) {", "+      if (elements[i] instanceof ArrayInitializer) {", "+          result[i] = forArrayInitializerHelper((ArrayInitializer) elements[i], elementType);", "+      }", "+      else {", "+        ExpressionTypeChecker etc = new ExpressionTypeChecker(_data, _file, _package, _importedFiles, _importedPackages, _vars, _thrown);", "+        result[i] = elements[i].visit(etc);", "+        thingsThatHaveBeenAssigned.addAll(etc.thingsThatHaveBeenAssigned); //incorporate the things that were assigned in the expression here", "+        if (result[i] != null) {", "+          if (assertFound(result[i], (JExpression) that.getItems()[i])) {", "+            if (!result[i].getSymbolData().isAssignableTo(elementType, LanguageLevelConverter.OPT.javaVersion())) {", "+              _addError(\"The elements of this initializer should have type \" + elementType.getName() + \" but element \" + i + \" has type \" + result[i].getSymbolData().getName(), (JExpression) that.getItems()[i]);", "+            }", "+            else {", "+              assertInstanceType(result[i], \"The elements of this initializer should all be instances, but you have specified the type name \" + result[i].getName(), (JExpression) that.getItems()[i]);", "+            }", "+          }", "+        }", "+      }", "+    }", "+    ", "+    ", "+    return type.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70d94eadacb57113afa84d299736b637", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result)", "signatureAfterChange": "   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result,                                                           TypeData[] dimensions_result)", "diff": ["-  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result) {", "+  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, ", "+                                                         TypeData[] dimensions_result) {", "-        if (!dimensions_result[i].getSymbolData().isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "-          _addError(\"The dimensions of an array instantiation must all be ints.  You have specified something of type \" + dimensions_result[i].getName(), dims[i]);", "+        if (!dimensions_result[i].getSymbolData().isAssignableTo(SymbolData.INT_TYPE, ", "+                                                                 JAVA_VERSION)) {", "+          _addError(\"The dimensions of an array instantiation must all be ints.  You have specified something of type \" +", "+                    dimensions_result[i].getName(), dims[i]);", "-          assertInstanceType(dimensions_result[i], \"All dimensions of an array instantiation must be instances.  You have specified the type \" + dimensions_result[i].getName(), dims[i]);", "+          assertInstanceType(dimensions_result[i], \"All dimensions of an array instantiation must be instances.\" + ", "+                             \"  You have specified the type \" + dimensions_result[i].getName(), dims[i]);", "-        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim + \" dimensions, but you have specified \" + dimensions_result.length + \" dimensions--the wrong number\", that);", "+        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim +", "+                  \" dimensions, but you have specified \" + dimensions_result.length + \" dimensions--the wrong number\", ", "+                  that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74592105e98c91a4edcd3c520e9f5407", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "\r   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result)", "signatureAfterChange": "   public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result)", "diff": ["-   */\r", "-  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result) {\r", "-    //make sure all of the dimensions_result dimensions are instance datas\r", "-    Expression[] dims = that.getDimensionSizes().getExpressions();\r", "-    for (int i = 0; i<dimensions_result.length; i++) {\r", "-      if (dimensions_result[i] != null && assertFound(dimensions_result[i], dims[i])) {\r", "-        if (!dimensions_result[i].getSymbolData().isAssignableTo(SymbolData.INT_TYPE, _targetVersion)) {\r", "-          _addError(\"The dimensions of an array instantiation must all be ints.  You have specified something of type \" + dimensions_result[i].getName(), dims[i]);\r", "-        }\r", "-        else {\r", "-          assertInstanceType(dimensions_result[i], \"All dimensions of an array instantiation must be instances.  You have specified the type \" + dimensions_result[i].getName(), dims[i]);\r", "-        }               \r", "-      }\r", "-    }\r", "-    \r", "-    if (type_result instanceof ArrayData) {\r", "-      int dim = ((ArrayData) type_result).getDimensions();\r", "-      if (dimensions_result.length > dim) {\r", "-       //uh oh!  Dimensions list is too long!\r", "-        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim + \" dimensions, but you have specified \" + dimensions_result.length + \" dimensions--the wrong number\", that);\r", "-      }\r", "-    }\r", "-\r", "-    //return an instance of the new type\r", "-    if (type_result == null || !assertFound(type_result, that)) {return null;}\r", "-    return type_result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forUninitializedArrayInstantiationOnly(UninitializedArrayInstantiation that, TypeData type_result, TypeData[] dimensions_result) {", "+    //make sure all of the dimensions_result dimensions are instance datas", "+    Expression[] dims = that.getDimensionSizes().getExpressions();", "+    for (int i = 0; i<dimensions_result.length; i++) {", "+      if (dimensions_result[i] != null && assertFound(dimensions_result[i], dims[i])) {", "+        if (!dimensions_result[i].getSymbolData().isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+          _addError(\"The dimensions of an array instantiation must all be ints.  You have specified something of type \" + dimensions_result[i].getName(), dims[i]);", "+        }", "+        else {", "+          assertInstanceType(dimensions_result[i], \"All dimensions of an array instantiation must be instances.  You have specified the type \" + dimensions_result[i].getName(), dims[i]);", "+        }               ", "+      }", "+    }", "+    ", "+    if (type_result instanceof ArrayData) {", "+      int dim = ((ArrayData) type_result).getDimensions();", "+      if (dimensions_result.length > dim) {", "+       //uh oh!  Dimensions list is too long!", "+        _addError(\"You are trying to initialize an array of type \" + type_result.getName() + \" which requires \" + dim + \" dimensions, but you have specified \" + dimensions_result.length + \" dimensions--the wrong number\", that);", "+      }", "+    }", "+", "+    //return an instance of the new type", "+    if (type_result == null || !assertFound(type_result, that)) {return null;}", "+    return type_result.getInstanceData();", "+  }"]}], "num": 21062}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ddd1b0ccf839df6f15ba63f8455f110", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13c9a18a724585796f08ce2c90016e3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 307, "methodNumberAfterChange": 313, "signatureBeforeChange": "              @Override public Iterable<ObjectMethodInvocation> forParameterizedClassType(final ParameterizedClassType t)", "signatureAfterChange": "     public Access accessibility()", "diff": ["+    }", "+    public Access accessibility() { return _method.accessibility(); }", "-      ", "-      @Override public Iterable<ObjectMethodInvocation> forParameterizedClassType(final ParameterizedClassType t) {", "-        final SubstitutionMap classSigma =", "-          new SubstitutionMap(SymbolUtil.allTypeParameters(t.ofClass()), t.typeArguments());", "-        Iterable<DJMethod> methods = IterUtil.filter(t.ofClass().declaredMethods(), _matchMethod);", "-//        System.out.println(\"Matching methods in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(matchingMethods));", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            // TODO: substitute out class type parameters from the method's parameters' bounds", "-            //       (how does the JLS handle this?)", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, ", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "-                               args, m.returnType(), expected);", "-          }", "-        };", "-        Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation> makeResult = ", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type rawReturned = m.returnType();", "-            Type returned = substitute(substitute(rawReturned, classSigma), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(methods, makeChecker, makeResult);", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629ade1928b6a0c88c965db54021ed6e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 306, "methodNumberAfterChange": 349, "signatureBeforeChange": "           public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker)", "signatureAfterChange": "          public Type returnType()", "diff": ["+    ", "+    public Type returnType() { return substitute(_delegate.returnType(), _sigma); }", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            Type returned = erase(m.returnType());", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89db8b4cd2cb9833151fd4b9aaf0a833", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 338, "signatureBeforeChange": "     public Type value(Type t)", "signatureAfterChange": "     public boolean isAbstract()", "diff": ["-  private final Lambda<Type, Type> ERASE_LAMBDA = new Lambda<Type, Type>() {", "-    public Type value(Type t) { return erase(t); }", "+    public boolean isStatic() { return _delegate.isStatic(); }", "+    public boolean isAbstract() { return _delegate.isAbstract(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd92cbbb21e1b900bb7170381190dd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 356, "signatureBeforeChange": "              @Override public Iterable<Object> forClassType(ClassType t)", "signatureAfterChange": "     public Access.Module accessModule()", "diff": ["+    public Access accessibility() { return _delegate.accessibility(); }", "+    public Access.Module accessModule() { return _delegate.accessModule(); }", "-      ", "-      @Override public Iterable<Object> forClassType(ClassType t) {", "-        debug.logValues(new String[]{\"t\",\"methods\"}, wrap(t), t.ofClass().declaredMethods());", "-        for (DJMethod m : t.ofClass().declaredMethods()) {", "-          if (m.declaredName().equals(name) && validMethod(m)) {", "-            return IterUtil.singleton(null);", "-          }", "-        }", "-        return IterUtil.empty();", "-      }"]}], "num": 19764}
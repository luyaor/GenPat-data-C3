{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d7f0e56f3cbc102bfc2dbd5c27e1c32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3697ab8466246ca435ed150008fce0b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "commitAfterChange": "72303a17e4a44248ba3fe5d5f9c3d69081ba78b5", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void testForceFileOpen() throws BadLocationException, IOException, OperationCanceledException,     AlreadyOpenException", "signatureAfterChange": "   public void testForceFileOpen() throws BadLocationException, IOException, OperationCanceledException,     AlreadyOpenException", "diff": ["-    TestListener listener = new TestIOListener();", "+    final TestListener listener = new TestIOListener();", "-    // Open file 1", "-    OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile1));", "-    listener.assertOpenCount(1);", "-    listener.assertCloseCount(1);  // closed Untitled document", "-    assertModified(false, doc);", "-    assertContents(FOO_TEXT, doc);", "-    ", "-    // Get file 1", "-    OpenDefinitionsDocument doc1 = _model.getDocumentForFile(tempFile1);", "-    listener.assertOpenCount(1);", "-    listener.assertCloseCount(1);   // closed Untitled document", "-    assertEquals(\"opened document\", doc, doc1);", "-    assertContents(FOO_TEXT, doc1);", "-    ", "-    // Get file 2, forcing it to be opened", "-    OpenDefinitionsDocument doc2 = _model.getDocumentForFile(tempFile2);", "-    listener.assertOpenCount(2);", "-    listener.assertCloseCount(1);  // closed Untitled document", "-    assertContents(BAR_TEXT, doc2);", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {    ", "+          // Open file 1", "+          OpenDefinitionsDocument doc = _model.openFile(new FileSelector(tempFile1));", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);  // closed Untitled document", "+          assertModified(false, doc);", "+          assertContents(FOO_TEXT, doc);", "+          ", "+          // Get file 1", "+          OpenDefinitionsDocument doc1 = _model.getDocumentForFile(tempFile1);", "+          listener.assertOpenCount(1);", "+          listener.assertCloseCount(1);   // closed Untitled document", "+          assertEquals(\"opened document\", doc, doc1);", "+          assertContents(FOO_TEXT, doc1);", "+          ", "+          // Get file 2, forcing it to be opened", "+          OpenDefinitionsDocument doc2 = _model.getDocumentForFile(tempFile2);", "+          listener.assertOpenCount(2);", "+          listener.assertCloseCount(1);  // closed Untitled document", "+          assertContents(BAR_TEXT, doc2);", "+        }", "+        catch (Exception e) {", "+          // should never happen", "+          fail(\"Exception thrown in testForceFileOpen. Traceback: \\n\" + e);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c54b165110b883b5cede45882de44d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "commitAfterChange": "bd7a2dd06a797f540fad2fc718c0924e6e0b267b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "diff": ["-    // Clear document so we can make sure it's written to after startJUnit", "-    _model.getJUnitModel().getJUnitDocument().remove(0, _model.getJUnitModel().getJUnitDocument().getLength() - 1);", "+    // Clear document so we can make sure it's written to after startJUnit; ", "+    // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "+    // Perform the clear operation atomically in the event thread.", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try {", "+          _model.getJUnitModel().getJUnitDocument().remove(0, _model.getJUnitModel().getJUnitDocument().getLength() - 1);", "+        }", "+        catch(BadLocationException e) { fail(\"BadLocationException in clearing JUnitDocument\"); }", "+      }", "+    });"]}], "num": 18193}
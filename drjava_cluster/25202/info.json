{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "348abca9d9aca5f8ff369d19ea372b62", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bb0f5743173119db75b9b3c29c08b2a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "signatureAfterChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "diff": ["-    // Is qualifiedClassName in _classesToBeParsed, saving the time it would take to parse", "-    // all the java files in this package.", "-    Pair<TypeDefBase, LanguageLevelVisitor> pair = _classesToBeParsed.get(qualifiedClassName);", "+    // If qualifiedClassName is already defined (and not a continuation to resolve), return", "+    SymbolData sd = symbolTable.get(qualifiedClassName);", "+    if (sd != null && (! resolve || ! sd.isContinuation())) { return sd; }", "+    // Is qualifiedClassName in _classesToBeParsed, look it up directly in the parsed ASTs", "+    Pair<TypeDefBase, LanguageLevelVisitor> pair = _classesToBeParsed.get(qualifiedClassName);", "-    // First look for the .class file", "-    File classFile = new File(path + \".class\");", "-    // Then look for the most recently modified .java, .djx file.    ", "+    // Find class file and matching source file for qualifiedClassName -- if they exist", "+    ", "+    File classFile = new File(path + \".class\");  // create File object for class file", "+    ", "+    // Then look for the most recently modified matching source (.djx or .java) file.    ", "+", "+    // Claim: sourceFile is not the current file.  Otherwise, className would have been in _classNamesInThisFile.", "-    // Check if sourceFile is the current file.  If so, there's an error because if the class to look for", "-    // is in the current file, it would've been in _classNamesInThisFile.", "-    //TODO: it is possible this should be an error.  But I am no longer positive.", "-    ", "-    // Then check the corresponding class file to see if it's up to date.", "-    SymbolData sd = symbolTable.get(qualifiedClassName);", "-    if (sd != null && ! sd.isContinuation()) { return sd; }", "+    // If sourceFile exists, we have identified the class corresponding to qualifiedClassName.  If resolve is false, ", "+    // simply create and return the appropriate continuation, deferring the loading of class information until reolution", "+    // time.  If there is no corresponding class file or the class file is not ", "+    // up-to-date, signal an error.  Otherwise load the symbol table information from the class file", "+", "-      if (! resolve) {", "-        if (sd != null) { return sd; }", "-        else {", "-          sd = new SymbolData(qualifiedClassName);", "-          continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "-          symbolTable.put(qualifiedClassName, sd);", "-          return sd;", "+      if (! resolve) { ", "+        assert sd == null;", "+        sd = addSymbolData(si, qualifiedClassName); // defer loading class file information", "+        return sd;", "+//        else {", "+//          sd = new SymbolData(qualifiedClassName);", "+//          continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+//          symbolTable.put(qualifiedClassName, sd);", "+//          return sd;", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6cc7f4efa3a0206ee0610a929ec568", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 28, "signatureBeforeChange": "   protected SymbolData addInnerSymbolData(SourceInfo si, String qualifiedTypeName, Data enclosing)", "signatureAfterChange": "   protected SymbolData addInnerSymbolData(SourceInfo si, String qualifiedTypeName, Data enclosing)", "diff": ["-  // Creates a continuation for an inner class or interface", "+  // Creates a continuation for an inner class/interface; qualifiedTypeName is known to exist", "-    SymbolData sd = new SymbolData(qualifiedTypeName); // create continuation", "-    SymbolData enclosingSD = enclosing.getSymbolData();", "-    // if qualifiedTypeName refers to an external inner class, the following will likely fail", "-    symbolTable.put(qualifiedTypeName, sd);  ", "+    SymbolData sd = makeContinuation(si, qualifiedTypeName); // create continuation", "+    SymbolData enclosingSD = enclosing.getSymbolData();  // must exist in symbol table", "+    // if qualifiedTypeName refers to an external inner class, the following will likely fail.  TODO: eliminate this", "-    continuations.put(qualifiedTypeName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "-//    System.err.println(\"Creating continuation for inner type \" + qualifiedTypeName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4fcc1a99968d9c963f08f105a432d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d)", "signatureAfterChange": "   protected VariableData[] formalParameters2VariableData(FormalParameter[] fps, Data d)", "diff": ["-   */", "+    */", "-      SymbolData type = getSymbolData(vd.getType().getName(), vd.getType().getSourceInfo());", "+      SourceInfo si = vd.getType().getSourceInfo();", "+      SymbolData type = getSymbolData(vd.getType().getName(), si);", "-        continuations.put(type.getName(), new Pair<SourceInfo, LanguageLevelVisitor>(vd.getType().getSourceInfo(), this));"]}], "num": 25202}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a02a82242754d1193eb790f70d978aad", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26363327fd448327105d2aeafd26e865", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result)", "diff": ["-  /**Make sure that the condition statement of the while returns type boolean. */\r", "-  public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result) {\r", "-    if (condition_result != null && assertFound(condition_result, that.getCondition())) {\r", "-      if (!condition_result.isInstanceType()) {\r", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!condition_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());\r", "-      }\r", "-    }\r", "-    return null;\r", "-  }\r", "+  /**Make sure that the condition statement of the while returns type boolean. */", "+  public TypeData forWhileStatementOnly(WhileStatement that, TypeData condition_result, TypeData code_result) {", "+    if (condition_result != null && assertFound(condition_result, that.getCondition())) {", "+      if (!condition_result.isInstanceType()) {", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!condition_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This while-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());", "+      }", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bf7bfaadcebab79b1885e64d3f20e7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result) {\r", "-    if (value_result==null) {return null;}\r", "-    \r", "-    //make sure that lhs could be resolved (not PackageData)\r", "-    if (!assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&\r", "-        !value_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-      \r", "-      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + \".  You can only apply it to a numeric type such as double, int, or char\", that);\r", "-      return value_result;\r", "-    }\r", "-    \r", "-    //call this so that chars and bytes are widened to an int.\r", "-    return _getLeastRestrictiveType(value_result.getSymbolData(), SymbolData.INT_TYPE).getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forNumericUnaryExpressionOnly(NumericUnaryExpression that, TypeData value_result) {", "+    if (value_result==null) {return null;}", "+    ", "+    //make sure that lhs could be resolved (not PackageData)", "+    if (!assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(value_result, \"You cannot use a numeric unary operator (+, -) with \" + value_result.getName() + \", because it is a class name, not an instance\", that) &&", "+        !value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+      ", "+      _addError(\"You cannot apply this unary operator to something of type \" + value_result.getName() + \".  You can only apply it to a numeric type such as double, int, or char\", that);", "+      return value_result;", "+    }", "+    ", "+    //call this so that chars and bytes are widened to an int.", "+    return _getLeastRestrictiveType(value_result.getSymbolData(), SymbolData.INT_TYPE).getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef439dba309be0a74386d71d23546f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result)", "diff": ["-   */\r", "-  public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result) {\r", "-    if (value_result == null) {return null;}\r", "- \r", "-    //make sure that lhs could be resolved (not PackageData)\r", "-    if (!assertFound(value_result, that)) {\r", "-      return null;\r", "-    }\r", "-    \r", "-    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + \", because it is a class name not an instance\", that)) {\r", "-      if (!value_result.getSymbolData().isNumberType(_targetVersion)) {\r", "-        _addError(\"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + value_result.getName(), that);\r", "-      }\r", "-    }\r", "-    return value_result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forIncrementExpressionOnly(IncrementExpression that, TypeData value_result) {", "+    if (value_result == null) {return null;}", "+ ", "+    //make sure that lhs could be resolved (not PackageData)", "+    if (!assertFound(value_result, that)) {", "+      return null;", "+    }", "+    ", "+    if (assertInstanceType(value_result, \"You cannot increment or decrement \" + value_result.getName() + \", because it is a class name not an instance\", that)) {", "+      if (!value_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"You cannot increment or decrement something that is not a number type.  You have specified something of type \" + value_result.getName(), that);", "+      }", "+    }", "+    return value_result.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9a659bbbab2f7c65ac5cba7bfe7add2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r   public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result)", "signatureAfterChange": "   public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result)", "diff": ["-   */\r", "-  public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result) {\r", "-    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {\r", "-      if (!testExpression_result.isInstanceType()) {\r", "-        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!testExpression_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());\r", "-      }\r", "-    }\r", "-\r", "-    if (testExpression_result == null ||\r", "-        thenStatement_result == null || \r", "-        elseStatement_result == null) { return null; }\r", "-\r", "-     \r", "-    //     We don't throw an error here because if the then and else branches return incompatible types,\r", "-    //     there must have already been an error thrown in forValueReturnStatementOnly\r", "-    //     that indicates that one of the return statements is returning the wrong type.\r", "-    SymbolData result = getCommonSuperType(thenStatement_result.getSymbolData(), elseStatement_result.getSymbolData());\r", "-    if (result==null) {return null;}\r", "-    return result.getInstanceData();\r", "-  }\r", "+   */", "+  public TypeData forIfThenElseStatementOnly(IfThenElseStatement that, TypeData testExpression_result, TypeData thenStatement_result, TypeData elseStatement_result) {", "+    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {", "+      if (!testExpression_result.isInstanceType()) {", "+        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!testExpression_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This if-then-else statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+      }", "+    }", "+", "+    if (testExpression_result == null ||", "+        thenStatement_result == null || ", "+        elseStatement_result == null) { return null; }", "+", "+     ", "+    //     We don't throw an error here because if the then and else branches return incompatible types,", "+    //     there must have already been an error thrown in forValueReturnStatementOnly", "+    //     that indicates that one of the return statements is returning the wrong type.", "+    SymbolData result = getCommonSuperType(thenStatement_result.getSymbolData(), elseStatement_result.getSymbolData());", "+    if (result==null) {return null;}", "+    return result.getInstanceData();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b11453dddb18fc103f0f2422d1bd079c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result)", "signatureAfterChange": "   public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result)", "diff": ["-  /* Make sure that the conditional expression has the right type. */\r", "-  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result) {\r", "-    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {\r", "-      if (!testExpression_result.isInstanceType()) {\r", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!testExpression_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());\r", "-      }\r", "-    }\r", "-    return null;\r", "-  }\r", "+  /* Make sure that the conditional expression has the right type. */", "+  public TypeData forIfThenStatementOnly(IfThenStatement that, TypeData testExpression_result, TypeData thenStatement_result) {", "+    if (testExpression_result != null && assertFound(testExpression_result, that.getTestExpression())) {", "+      if (!testExpression_result.isInstanceType()) {", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!testExpression_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This if-then-statement's conditional expression must be a boolean value. Instead, its type is \" + testExpression_result.getName(), that.getTestExpression());", "+      }", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbed48da230cdc0e2f8b4749b63f3bce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "signatureAfterChange": "   public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result)", "diff": ["-  /* Make sure that the conditional expression has the right type. */\r", "-  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {\r", "-    if (condition_result != null && assertFound(condition_result, that)) { \r", "-      if (!condition_result.isInstanceType()) {\r", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);\r", "-      }\r", "-      else if (!condition_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);\r", "-      }\r", "-    }\r", "-    return null;\r", "-  }\r", "+  /* Make sure that the conditional expression has the right type. */", "+  public TypeData forForStatementOnly(ForStatement that, TypeData init_result, TypeData condition_result, TypeData update_result, TypeData code_result) {", "+    if (condition_result != null && assertFound(condition_result, that)) { ", "+      if (!condition_result.isInstanceType()) {", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that);", "+      }", "+      else if (!condition_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This for-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that);", "+      }", "+    }", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3105e4f4d46edbf3fcb883a0a896ddf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r   public TypeData forDoStatementOnly(DoStatement that, TypeData code_result, TypeData condition_result)", "signatureAfterChange": "   public TypeData forDoStatementOnly(DoStatement that, TypeData code_result, TypeData condition_result)", "diff": ["-  /**Make sure that the condition statement of the while returns type boolean. */\r", "-  public TypeData forDoStatementOnly(DoStatement that, TypeData code_result, TypeData condition_result) {\r", "-    if (condition_result != null && assertFound(condition_result, that.getCondition())) {\r", "-      if (!condition_result.isInstanceType()) {\r", "-        _addError(\"This do-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that.getCondition());\r", "-      }\r", "-      else if (!condition_result.getSymbolData().isBooleanType(_targetVersion)) {\r", "-        _addError(\"This do-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());\r", "-      }\r", "-    }\r", "-    if (code_result == null) {return null;}\r", "-    return code_result.getInstanceData();\r", "-  }\r", "+  /**Make sure that the condition statement of the while returns type boolean. */", "+  public TypeData forDoStatementOnly(DoStatement that, TypeData code_result, TypeData condition_result) {", "+    if (condition_result != null && assertFound(condition_result, that.getCondition())) {", "+      if (!condition_result.isInstanceType()) {", "+        _addError(\"This do-statement's conditional expression must be a boolean value. Instead, it is a class or interface name\", that.getCondition());", "+      }", "+      else if (!condition_result.getSymbolData().isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+        _addError(\"This do-statement's conditional expression must be a boolean value. Instead, its type is \" + condition_result.getName(), that.getCondition());", "+      }", "+    }", "+    if (code_result == null) {return null;}", "+    return code_result.getInstanceData();", "+  }"]}], "num": 292}
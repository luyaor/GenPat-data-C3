{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e392a26672ec3207ff6ba38f3227cde3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fb882623808b116a33cb99112760273", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public boolean hasPrevInteraction()", "signatureAfterChange": "   public boolean hasPrevInteraction()", "diff": ["-   */", "-  public boolean hasPrevInteraction() {", "-    int index = _currentInteraction;", "-    if (_passedCurrent) {", "-      // We're passed the current, so the previous interaction is the current.", "-      index++;", "-    return index > 0;", "+  /** @return true iff this script has a previous interaction to perform. */", "+  public boolean hasPrevInteraction() {", "+    _doc.acquireReadLock();", "+    try {", "+      int index = _currentInteraction;", "+      if (_passedCurrent) index++; // We're passed the current, so the previous interaction is the current.", "+      return index > 0;", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a285913b651592aa28b44adb4fb1362", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void prevInteraction()", "signatureAfterChange": "   public void prevInteraction()", "diff": ["-   */", "+  /** Enters the previous interaction into the interactions pane. Should only run in the event thread. */", "-    if (!hasPrevInteraction()) {", "-      throw new IllegalStateException(\"There is no previous interaction!\");", "+    _doc.acquireWriteLock();", "+    try {", "+      if (!hasPrevInteraction()) {", "+        throw new IllegalStateException(\"There is no previous interaction!\");", "+      }", "+      // Only move back if we haven't passed the current interaction", "+      if (!_passedCurrent)  _currentInteraction--;", "+      _showCurrentInteraction();", "+      _passedCurrent = false;", "-    // Only move back if we haven't passed the current interaction", "-    if (!_passedCurrent) {", "-      _currentInteraction--;", "-    }", "-    _showCurrentInteraction();", "-    _passedCurrent = false;", "+    finally { _doc.releaseWriteLock(); }"]}], "num": 23211}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac46fdb1d493190925cd8890fe03bc51", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30a19464e2a59985bf8de4cf8b1d1f7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "abaea23707eba81455db9185a249740d89273b85", "commitAfterChange": "0dda00089189758fcd0a0e6dab08cb8c08b0176d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.FORMAT_BOOL));", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.FORMAT_BOOL));", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.FORMAT_BOOL));", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.FORMAT_BOOL));", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.FORMAT_BOOL));", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.FORMAT_BOOL));", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.PARSE_DOUBLE,", "-                                                            BinaryOpProperty.FORMAT_BOOL));", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.PARSE_DOUBLE,", "+                                                            UnaryOpProperty.FORMAT_BOOL));", "-                                                            BinaryOpProperty.PARSE_STRING,", "-                                                            BinaryOpProperty.PARSE_STRING,", "-                                                            BinaryOpProperty.FORMAT_BOOL));", "+                                                            UnaryOpProperty.PARSE_STRING,", "+                                                            UnaryOpProperty.PARSE_STRING,", "+                                                            UnaryOpProperty.FORMAT_BOOL));", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.FORMAT_DOUBLE));", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.FORMAT_DOUBLE));", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.FORMAT_DOUBLE));", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.PARSE_DOUBLE,", "-                                                           BinaryOpProperty.FORMAT_DOUBLE));", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           UnaryOpProperty.FORMAT_DOUBLE));", "+                                                           \"op\",", "+                                                           null,", "+                                                           \"sep\",", "+                                                           System.getProperty(\"path.separator\"),", "-                                                           UnaryOpProperty.FORMAT_DOUBLE) {", "-                                                             /** Update the property so the value is current. */", "-                                                             public void update() {", "-                                                               String op;", "-                                                               if (_attributes.get(\"op\")==null) {", "-                                                                 _value = \"(\"+_name+\" Error...)\";", "-                                                                 return;", "-                                                               }", "-                                                               else {", "-                                                                 try {", "-                                                                   op = _parse1.apply(_attributes.get(\"op\"));", "-                                                                 }", "-                                                                 catch(Exception e) {", "-                                                                   _value = \"(\"+_name+\" Error...)\";", "-                                                                   return;", "-                                                                 }", "-                                                               }", "-                                                               String sep = _attributes.get(\"sep\");", "-                                                               if (sep==null) {", "-                                                                 sep = System.getProperty(\"path.separator\");", "-                                                               }", "-                                                               sep = _parse2.apply(sep);", "-                                                               _value = _format.apply(_op.value(op,sep));", "-                                                             }", "-                                                             public void resetAttributes() {", "-                                                               _attributes.clear();", "-                                                               _attributes.put(\"op\", null);", "-                                                               _attributes.put(\"sep\", null);", "-                                                             }", "-                                                           });", "+                                                           UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.ONLY.setProperty(\"Misc\", new QuaternaryOpProperty", "+                                    <String,Double,Double,String,String>(\"sublist\",", "+                                                           \"Extracts a sublist of elements from a list, beginning at \"+", "+                                                           \"a specified index, and including a specified number of elements.\"+", "+                                                           \"Required attributes:\\n\"+", "+                                                           \"\\top=\\\"<list string>\\\"\\n\"+", "+                                                           \"\\tindex=\\\"<index in list, starting with 0>\\\"\\n\"+", "+                                                           \"Optional attributes:\\n\"+", "+                                                           \"\\tcount=\\\"<number of items>\\\"\\n\"+", "+                                                           \"(if not specified, 1 will be used)\\n\"+", "+                                                           \"\\tsep=\\\"<separator string>\\\"\\n\"+", "+                                                           \"(if none specified, ${path.separator} will be used)\",", "+                                                           new edu.rice.cs.plt.lambda.Lambda4<String,Double,Double,String,String>() {", "+      public String value(String s, Double index, Double count, String sep) {", "+        if (s.length()==0) return \"\";", "+        int i = index.intValue();", "+        int c = count.intValue();", "+        StringBuilder sb = new StringBuilder();", "+        String[] els = s.split(edu.rice.cs.plt.text.TextUtil.regexEscape(sep));", "+        for(int j=0; j<c; ++j) {", "+          if (i+j>=els.length) { break; }", "+          sb.append(sep);", "+          sb.append(els[i+j]);", "+        }", "+        s = sb.toString();", "+        if (s.length()>=sep.length()) {", "+          return s.substring(sep.length());", "+        }", "+        else {", "+          return \"\";", "+        }", "+      }", "+    },", "+                                                           \"op\",", "+                                                           null,", "+                                                           UnaryOpProperty.PARSE_STRING,", "+                                                           \"index\",", "+                                                           null,", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           \"count\",", "+                                                           \"1\",", "+                                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                                           \"sep\",", "+                                                           System.getProperty(\"path.separator\"),", "+                                                           UnaryOpProperty.PARSE_STRING,", "+                                                           UnaryOpProperty.FORMAT_STRING));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d796e6a111823d399396bfe7a41c7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "3bb1b911d950f482b9e797d7de6104b1444684b7", "commitAfterChange": "045c3614cbae106e482ef86c608a22bd0f55ebc4", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   private void _setupJUnitPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJUnitPanel(ConfigPanel panel)", "diff": ["-                              \"<html>Optional location of the JUnit 3.8.2 junit.jar file.<br>\"+", "-                              \"If this is left blank, the JUnit integrated into DrJava is used.<br>\"+", "-                              \"To use ConcJUnit, select the concutest-junit-3.8.2-withrt.jar file.<br>\" + ", "-                              \"(Changes will not be applied until DrJava is restarted.)</html>\",", "+                              \"<html>Optional location of the JUnit or ConcJUnit jar file.<br>\"+", "+                              \"(Changes will not be applied until the Interactions Pane<br>\"+", "+                              \"is reset.)</html>\",", "-    ", "-    final BooleanOptionComponent rtConcJUnitLocEnabled =", "-      new BooleanOptionComponent(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, \"Use ConcJUnit Runtime\", this,", "-                                 \"<html>If this is enabled, DrJava will use the ConcJUnit Runtime<br>\"+", "-                                 \"configured below under 'ConcJUnit Runtime Location'. If it is<br>\"+", "-                                 \"disabled, DrJava will use the normal Java runtime.</html>\", false)", "-      .setEntireColumn(true);", "-    addOptionComponent(panel, rtConcJUnitLocEnabled);", "+", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+", "+    final ForcedChoiceOptionComponent concJUnitChecksEnabledComponent =", "+      new ForcedChoiceOptionComponent(OptionConstants.CONCJUNIT_CHECKS_ENABLED, \"Enabled ConcJUnit Checks\", this,", "+                                      \"<html>The concurrent unit testing checks that should be performed.<br>\"+", "+                                      \"'none' uses plain JUnit. ConcJUnit can also detect failures in<br>\"+", "+                                      \"all threads ('all-threads'), detect threads that did not end in<br>\"+", "+                                      \"time ('all-threads, join'), and threads that ended in time only<br>\"+", "+                                      \"because they were lucky ('all-threads, nojoin, lucky).<br>\"+", "+                                      \"The last setting requires a 'ConcJUnit Runtime Location' to be set.</html>\");", "+    addOptionComponent(panel, concJUnitChecksEnabledComponent);", "+", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));    ", "+", "-    OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {", "-      public Object value(Object oc) {", "-        File f = junitLoc.getComponent().getFileFromField();", "-        rtConcJUnitLoc.getComponent().", "-          setEnabled(edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f));", "-        return null;", "-      }", "-    };", "-    junitLoc.addChangeListener(rtConcJUnitListener);", "-    addOptionComponent(panel, rtConcJUnitLoc);", "-    OptionComponent.ChangeListener processRTChangeListener = new OptionComponent.ChangeListener() {", "+    ", "+    OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {", "-        processRT.getComponent().", "-          setEnabled(edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f));", "+        boolean enabled = (!junitLocEnabled.getComponent().isSelected()) ||", "+          edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f);", "+        rtConcJUnitLoc.getComponent().setEnabled(enabled);", "+        processRT.getComponent().setEnabled(enabled);", "+        concJUnitChecksEnabledComponent.getComponent().setEnabled(enabled);", "-    junitLoc.addChangeListener(processRTChangeListener);", "+    junitLocEnabled.addChangeListener(rtConcJUnitListener);", "+    junitLoc.addChangeListener(rtConcJUnitListener);", "+    addOptionComponent(panel, rtConcJUnitLoc);", "-    final LabelComponent junitStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+    final LabelComponent internalExternalStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+    final LabelComponent threadsStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+    final LabelComponent joinStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "-        String s, t;", "+        String[] s = new String[] { \" \", \" \", \" \", \" \" };", "+        boolean isConcJUnit = true;", "-          s = \"DrJava uses the built-in JUnit.\";", "-          t = \"\";", "+          s[0] = \"DrJava uses the built-in ConcJUnit framework.\";", "-          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {", "-            s = \"DrJava uses ConcJUnit.\";", "-            File rtf = rtConcJUnitLoc.getComponent().getFileFromField();", "-            if (rtConcJUnitLocEnabled.getComponent().isSelected() && (rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&", "-                edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {", "-              t = \"\\\"Lucky\\\" warnings are enabled.\";", "-            }", "-            else {", "-              t = \"\\\"Lucky\\\" warnings are disabled.\";", "-            }", "+          String type = \"ConcJUnit\";", "+          if (!edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {", "+            type = \"JUnit\";", "+            isConcJUnit = false;", "-          else if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(f)) {", "-            s = \"DrJava uses JUnit in a separate file.\";", "-            t = \"\";", "-          }", "-          else {", "-            s = \"DrJava uses the built-in JUnit.\";", "-            t = \"\";", "+          s[0] = \"DrJava uses an external \"+type+\" framework.\";", "+        }", "+        if (!isConcJUnit) {", "+          s[1] = \"JUnit does not support all-thread, no-join\";", "+          s[2] = \"or lucky checks. They are all disabled.\";", "+        }", "+        else {", "+          s[1] = \"All-thread checks are disabled.\";", "+          s[2] = \"No-join checks are disabled.\";", "+          s[3] = \"Lucky checks are disabled.\";", "+          if (!concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                equals(OptionConstants.ConcJUnitCheckChoices.NONE)) {", "+            s[1] = \"All-thread checks are enabled.\";", "+            if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                  equals(OptionConstants.ConcJUnitCheckChoices.ALL) ||", "+                concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                  equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {", "+              s[2] = \"No-join checks are enabled.\";", "+              if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                    equals(OptionConstants.ConcJUnitCheckChoices.ALL)) {", "+                File rtf = rtConcJUnitLoc.getComponent().getFileFromField();", "+                if ((rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&", "+                    edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {", "+                  s[3] = \"Lucky checks are enabled.\";", "+                }", "+              }", "+            }", "-        junitStatus.getComponent().setText(s);", "-        luckyStatus.getComponent().setText(t);", "+        internalExternalStatus.getComponent().setText(s[0]);", "+        threadsStatus.getComponent().setText(s[1]);", "+        joinStatus.getComponent().setText(s[2]);", "+        luckyStatus.getComponent().setText(s[3]);", "+    concJUnitChecksEnabledComponent.addChangeListener(junitStatusChangeListener);", "-    rtConcJUnitLocEnabled.addChangeListener(junitStatusChangeListener);", "-    addOptionComponent(panel, junitStatus);", "+    addOptionComponent(panel, internalExternalStatus);", "+    addOptionComponent(panel, threadsStatus);", "+    addOptionComponent(panel, joinStatus);", "-    processRTChangeListener.value(junitLoc);", "-    addOptionComponent(panel, ", "-                       new BooleanOptionComponent(OptionConstants.FORCE_TEST_SUFFIX, ", "-                                                  \"Require test classes in projects to end in \\\"Test\\\"\", ", "-                                                  this,", "-                                                  \"Whether to force test classes in projects to end in \\\"Test\\\".\"));", "+    final BooleanOptionComponent forceTestSuffix  =", "+      new BooleanOptionComponent(OptionConstants.FORCE_TEST_SUFFIX,", "+                                 \"Require test classes in projects to end in \\\"Test\\\"\",", "+                                 this,", "+                                 \"Whether to force test classes in projects to end in \\\"Test\\\".\",", "+                                 false)", "+      .setEntireColumn(true);", "+    addOptionComponent(panel, forceTestSuffix);"]}], "num": 15471}
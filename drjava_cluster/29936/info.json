{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "350ed1134df23f7c7764eef74ff92628", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0262fd8aaec5010ee6fe30fa03bc9e0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void nextInteraction()", "signatureAfterChange": "   public void nextInteraction()", "diff": ["-//    _doc.acquireWriteLock();", "-//    try {", "-    if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }", "-    _currentInteraction++;", "-    _showCurrentInteraction();", "-    _passedCurrent = false;", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try {", "+      if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }", "+      _currentInteraction++;", "+      _showCurrentInteraction();", "+      _passedCurrent = false;", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f19135e7b460f33d5eb2cc9e87f8489", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "e753017eccbd872714e58c93831cb488b5045d2a", "commitAfterChange": "abaea23707eba81455db9185a249740d89273b85", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void nextInteraction()", "signatureAfterChange": "   public void nextInteraction()", "diff": ["-   */", "+  /** Enters the next interaction into the interactions pane. Should only run in the event thread. */", "-    if (!hasNextInteraction()) {", "-      throw new IllegalStateException(\"There is no next interaction!\");", "+    _doc.acquireWriteLock();", "+    try {", "+      if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }", "+      _currentInteraction++;", "+      _showCurrentInteraction();", "+      _passedCurrent = false;", "-    _currentInteraction++;", "-    _showCurrentInteraction();", "-    _passedCurrent = false;", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5347e4226d168feea9b23e7dce58ddbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void _indentLine(Indenter.IndentReason reason)", "signatureAfterChange": "   private void _indentLine(Indenter.IndentReason reason)", "diff": ["-//    _doc.acquireWriteLock();", "-//    try { ", "-    _doc._indentLine(reason); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try { _doc._indentLine(reason); }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c260f8ae21e18b275ac6c5983591b11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private void indentLines(int startSel, int endSel)", "signatureAfterChange": "   private void indentLines(int startSel, int endSel)", "diff": ["-//    _doc.acquireWriteLock();", "-//    try { ", "-      _doc.indentLines(startSel, endSel); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock();", "+    try { _doc.indentLines(startSel, endSel); }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7cc935265935ee2b8b8b93455103f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-//    _doc.acquireWriteLock(); ", "-//    try {", "-    _passedCurrent = true;", "-    /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "-     * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "-     * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "-     * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "-     * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "-     * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "-     * locked section avoiding the race. */", "-    EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock(); ", "+    try {", "+      _passedCurrent = true;", "+      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+       * locked section avoiding the race. */", "+      EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca7c8796048c6ae6f63201223161c07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "1824c23d7190107a20690dc4a2840a5d74f14a93", "commitAfterChange": "3b64166f1d62b17dc65eb373f58379c1d93452e7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private int _processAllInCurrentDoc(Lambda<Void, FindResult> findAction)", "signatureAfterChange": "   private int _processAllInCurrentDoc(Lambda<Void, FindResult> findAction)", "diff": ["-   */", "+    */", "+    ", "+    _doc.acquireWriteLock();  // may modify the document!", "+    try {", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e95a86f3fcb1faa55a392fc25d4c22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void indentLines(int selStart, int selEnd)", "signatureAfterChange": "   private void indentLines(int selStart, int selEnd)", "diff": ["-//    _doc.acquireWriteLock(); ", "-//    try { ", "-      _doc.indentLines(selStart, selEnd); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock(); ", "+    try { _doc.indentLines(selStart, selEnd); }", "+    finally { _doc.releaseWriteLock(); }"]}], "num": 29936}
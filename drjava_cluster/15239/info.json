{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7097006e98e73b387fc2dabeb08592f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65005354a874808ae74622bd6dce933f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private ExecutionError unmatchedFunctionError(String kind, UnmatchedLookupException e, Node node, Type type,                                                 String name, Iterable<? extends Type> targs,                                                 Iterable<? extends Expression> args, Option<Type> expected,                                                 boolean onlyStatic)", "signatureAfterChange": "   private ExecutionError unmatchedFunctionError(String kind, UnmatchedLookupException e, Node node, Type type,                                                 String name, Iterable<? extends Type> targs,                                                 Iterable<? extends Expression> args, Option<Type> expected,                                                 boolean onlyStatic)", "diff": ["+    boolean noMatch = false;", "+      if (IterUtil.isEmpty(candidates)) { noMatch = true; }", "-    if (!IterUtil.isEmpty(targs)) { error += \".poly\"; }", "-    if (expected.isSome()) { error += \".expected\"; }", "-    if (!IterUtil.isEmpty(candidates)) { error += \".candidates\"; }", "+    if (error.equals(\"no.such.method\") && noMatch) { error += \".name\"; }", "+    else {", "+      if (!IterUtil.isEmpty(targs)) { error += \".poly\"; }", "+      if (expected.isSome()) { error += \".expected\"; }", "+      if (!IterUtil.isEmpty(candidates)) { error += \".candidates\"; }", "+    }", "-      candidatesS = IterUtil.toString(IterUtil.map(candidates, SIGNATURE_STRING), prefix, \",\" + prefix, \"\");", "+      candidatesS = IterUtil.toString(IterUtil.map(candidates, SIGNATURE_STRING), prefix, prefix, \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de95d37be7cd598d6c04d89558b6423e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/SymbolUtil.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public static Type typeOfPrimitiveClass(Class<?> c)", "signatureAfterChange": "   public static Type typeOfPrimitiveClass(Class<?> c)", "diff": ["+    else if (c.equals(int.class)) { return TypeSystem.INT; }", "+    else if (c.equals(double.class)) { return TypeSystem.DOUBLE; }", "+    else if (c.equals(void.class)) { return TypeSystem.VOID; }", "+    else if (c.equals(long.class)) { return TypeSystem.LONG; }", "-    else if (c.equals(int.class)) { return TypeSystem.INT; }", "-    else if (c.equals(long.class)) { return TypeSystem.LONG; }", "-    else if (c.equals(double.class)) { return TypeSystem.DOUBLE; }", "-    else { throw new IllegalArgumentException(); }", "+    else { throw new IllegalArgumentException(\"Unrecognized primitive: \" + c); }", "+  }"]}], "num": 15239}
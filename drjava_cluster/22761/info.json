{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0463212d427117a9f9d7a7eaefca5f09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebcd4913f82444c1172dcd5c788d758", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartPrevStmtPlus.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, int reason)", "diff": ["-", "+    ", "-", "+    ", "-", "+    ", "+    ", "-", "+      ", "-", "+        ", "-        synchronized(doc){", "-          doc.move(dist);", "-          prevDelimiterPos -= doc.balanceBackward() - 1;", "-          doc.move(-dist);", "-        }", "+        ", "+        doc.move(dist);", "+        prevDelimiterPos -= doc.balanceBackward() - 1;", "+        doc.move(-dist);", "+        ", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }", "+    ", "+    ", "-      if (_useColon) {", "-        indentDelims = indentDelimsWithColon;", "-      } else {", "-        indentDelims = indentDelimsWithoutColon;", "-      }", "+      if (_useColon) indentDelims = indentDelimsWithColon;", "+      else indentDelims = indentDelimsWithoutColon;", "+      ", "-", "+      ", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7609523e650544be2259df5f53135e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBrace.java", "commitBeforeChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "commitAfterChange": "5aacfadc90765b33349d6f9aff91d50fefd76986", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-  boolean applyRule(AbstractDJDocument doc, int reason)", "-  {", "+  boolean applyRule(AbstractDJDocument doc, int reason)  {", "-    synchronized(doc){", "-      doc.move(lineStart - origin);", "-      IndentInfo info = doc.getIndentInformation();", "-      doc.move(origin - lineStart);    ", "-      ", "-      if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "-          (info.distToBrace < 0)) {", "-        // Precondition not met: we should have a brace", "-        return false;", "-      }", "-      int bracePos = lineStart - info.distToBrace;    ", "-      ", "-      // Get brace's end of line", "-      int braceEndLinePos = doc.getLineEndPos(bracePos);", "-      ", "-      // Get position of next non-WS char (not in comments)", "-      int nextNonWS = -1;", "-      try {", "-        nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos);", "-      }", "-      catch (BadLocationException e) {", "-        // This shouldn't happen", "-        throw new UnexpectedException(e);", "-      }", "-      ", "-      if (nextNonWS == AbstractDJDocument.ERROR_INDEX) {", "-        return true;", "-      }", "-      ", "-      return (nextNonWS >= lineStart);", "+    doc.move(lineStart - origin);", "+    IndentInfo info = doc.getIndentInformation();", "+    doc.move(origin - lineStart);    ", "+    ", "+    if ((!info.braceType.equals(IndentInfo.openSquiggly)) ||", "+        (info.distToBrace < 0))", "+      // Precondition not met: we should have a brace", "+      return false;", "+    int bracePos = lineStart - info.distToBrace;    ", "+    ", "+    // Get brace's end of line", "+    int braceEndLinePos = doc.getLineEndPos(bracePos);", "+    ", "+    // Get position of next non-WS char (not in comments)", "+    int nextNonWS = -1;", "+    try { nextNonWS = doc.getFirstNonWSCharPos(braceEndLinePos); }", "+    catch (BadLocationException e) {", "+      // This shouldn't happen", "+      throw new UnexpectedException(e);", "+    ", "+    if (nextNonWS == AbstractDJDocument.ERROR_INDEX) return true;", "+    ", "+    return (nextNonWS >= lineStart);"]}], "num": 22761}
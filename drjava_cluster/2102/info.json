{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55781c0f8e956ece14777d1e30def51d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f1d8b0429f856cc1331d34a75e0d7b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "467e5b5cdd1dcb74e3af8270c3f2ac9d390a6395", "commitAfterChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   private void _updateWatches()", "signatureAfterChange": "   private void _updateWatches()", "diff": ["-      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "-      ", "-      if(name.indexOf(\"[\") != -1 && name.indexOf(\"]\") != -1) {", "-        name = name.substring(0, name.indexOf(\"[\"));", "-        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "-        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "-          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "-          while(iter.indexOf(\"[\") != -1 && iter.indexOf(\"]\") != -1) {", "-            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "-            if(iter.indexOf(\"]\")<(iter.length()-1))", "-              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "-            else ", "-              iter = \"\";", "-          }", "-        }", "-      }", "-     ", "-      int [] indices = new int[arr_index.size()];", "-      for (int i = 0; i < arr_index.size(); i++) {", "-        indices[i] = arr_index.get(i);", "-      }", "-      val = _model.getInteractionsModel().getVariableToString(name, indices);", "-      type = _model.getInteractionsModel().getVariableType(name, indices);", "+//      ArrayList<Integer> arr_index = new ArrayList<Integer>();", "+//      ", "+//      if(name.indexOf(\"[\") != -1 && name.indexOf(\"]\") != -1) {", "+//        name = name.substring(0, name.indexOf(\"[\"));", "+//        arr_index.add(Integer.parseInt(w.getName().substring(w.getName().indexOf(\"[\")+1, w.getName().indexOf(\"]\"))));      ", "+//        if(w.getName().indexOf(\"]\")<(w.getName().length()-1)) {", "+//          String iter = w.getName().substring(w.getName().indexOf(\"]\")+1, w.getName().length());", "+//          while(iter.indexOf(\"[\") != -1 && iter.indexOf(\"]\") != -1) {", "+//            arr_index.add(Integer.parseInt(iter.substring(iter.indexOf(\"[\")+1, iter.indexOf(\"]\"))));      ", "+//            if(iter.indexOf(\"]\")<(iter.length()-1))", "+//              iter = iter.substring(iter.indexOf(\"]\")+1, iter.length());", "+//            else ", "+//              iter = \"\";", "+//          }", "+//        }", "+//      }", "+//     ", "+//      int [] indices = new int[arr_index.size()];", "+//      for (int i = 0; i < arr_index.size(); i++) {", "+//        indices[i] = arr_index.get(i);", "+//      }", "+      val = _model.getInteractionsModel().getVariableToString(name);", "+      type = _model.getInteractionsModel().getVariableType(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d150de921a09539b3488c44b11af8c11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fp, Data enclosing)", "signatureAfterChange": "   protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fps, SymbolData enclosing)", "diff": ["-   */", "-  protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fp, Data enclosing) { ", "-    TypeData[] tds = new TypeData[fp.length];", "-    for (int j = 0; j<fp.length; j++) {", "-      SymbolData type = _llv.getSymbolData(fp[j].getDeclarator().getType().getName(), fp[j].getSourceInfo());", "+    */", "+  protected static TypeData[] formalParameters2TypeDatas(FormalParameter[] fps, SymbolData enclosing) { ", "+    TypeData[] tds = new TypeData[fps.length];", "+    int j = 0;", "+    for (FormalParameter fp: fps) {", "+      SymbolData type = _llv.getSymbolData(fp.getDeclarator().getType().getName(), fp.getSourceInfo());", "-        type = enclosing.getInnerClassOrInterface(fp[j].getDeclarator().getType().getName());", "+        type = enclosing.getInnerClassOrInterface(fp.getDeclarator().getType().getName());", "-      tds[j]= type;", "+      tds[j]= type; j++;  // store type in next empty slot of tds", "+    assert j == fps.length;", "+    "]}], "num": 2102}
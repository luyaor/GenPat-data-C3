{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e441fb53eb3dc737aa59185061f42c0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23e6a7f81c45a7037d9bd41d1eb4c143", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "               public void testForPlusExpressionOnly()", "signatureAfterChange": "               public void testForPlusExpressionOnly()", "diff": ["-      PlusExpression pe = new PlusExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      PlusExpression pe = new PlusExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      assertEquals(\"Should return String instance\", string.getInstanceData(), _etc.forPlusExpressionOnly(pe, string.getInstanceData(), _sd1.getInstanceData()));", "+      assertEquals(\"Should return String instance\", string.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, string.getInstanceData(), _sd1.getInstanceData()));", "-      assertEquals(\"Should return String instance\", string.getInstanceData(), _etc.forPlusExpressionOnly(pe, _sd1.getInstanceData(), string.getInstanceData()));", "+      assertEquals(\"Should return String instance\", string.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, _sd1.getInstanceData(), string.getInstanceData()));", "-      assertEquals(\"Should return String instance\", string.getInstanceData(), _etc.forPlusExpressionOnly(pe, string.getInstanceData(), string.getInstanceData()));", "+      assertEquals(\"Should return String instance\", string.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, string.getInstanceData(), string.getInstanceData()));", "-      assertEquals(\"Should return Double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forPlusExpressionOnly(pe, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return Double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                              SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return String instance\", string.getInstanceData(), _etc.forPlusExpressionOnly(pe, string.getInstanceData(), _sd1));", "+      assertEquals(\"Should return String instance\", string.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, string.getInstanceData(), _sd1));", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of \" + _sd1.getName(), errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type \"", "+                     + \"name.  Perhaps you meant to create a new instance of \" + _sd1.getName(), ", "+                   errors.getLast().getFirst());", "-      //one side is a string, not a string instance data", "-      assertEquals(\"Should return String instance\", string.getInstanceData(), _etc.forPlusExpressionOnly(pe, string, string.getInstanceData()));", "+      // One side is a string, not a string instance data", "+      assertEquals(\"Should return String instance\", string.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, string, string.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of java.lang.String\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type \"", "+                     + \"name.  Perhaps you meant to create a new instance of java.lang.String\", ", "+                   errors.getLast().getFirst());", "-      //one side is a number, the other is not", "-      assertEquals(\"Should return String instance\", string.getInstanceData(), _etc.forPlusExpressionOnly(pe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      // One side is a number, the other is not", "+      assertEquals(\"Should return String instance\", string.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                              SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Operator (+) must either include an instance of a String or both be numbers.  You have specified arguments of type int and boolean\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Operator (+) must either include an instance of a String or both \"", "+                     + \"be numbers.  You have specified arguments of type int and boolean\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forPlusExpressionOnly(pe, SymbolData.INT_TYPE, SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, SymbolData.INT_TYPE, SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "-      ", "-      //both sides are numbers, but the right side is not an instance data", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forPlusExpressionOnly(pe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.CHAR_TYPE));", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type \"", "+                     + \"name.  Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());", "+", "+      // Both sides are numbers, but the right side is not an instance data", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forPlusExpressionOnly(pe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.CHAR_TYPE));", "-      assertEquals(\"Error message should be correct\", \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type name.  Perhaps you meant to create a new instance of char\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to the Plus Operator (+) must both be instances, but you have specified a type \"", "+                     + \"name.  Perhaps you meant to create a new instance of char\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29ec520cfb5bcf9e70e3788bd0898c99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "               public void testForEqualityExpressionOnly()", "signatureAfterChange": "               public void testForEqualityExpressionOnly()", "diff": ["-      EqualityExpression ee = new EqualsExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                                   new NullLiteral(SourceInfo.NO_INFO));", "+      EqualityExpression ee = new EqualsExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-                   _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                  SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                  SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), integer.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), integer.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, integer.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, integer.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), bool.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.BOOLEAN_TYPE.getInstanceData(), bool.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, bool.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, bool.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                  SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type int and boolean\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, \"", "+                     + \"they must either both be number types or both be boolean types.  You have specified \"", "+                     + \"expressions with type int and boolean\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type int and i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, \"", "+                     + \"they must either both be number types or both be boolean types.  You have specified \"", "+                     + \"expressions with type int and i.like.monkey\", errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type i.like.monkey and int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they \"", "+                     + \"must either both be number types or both be boolean types.  You have specified expressions \"", "+                     + \"with type i.like.monkey and int\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1, _sd2.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1, _sd2.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the left side.  Perhaps you meant to create a new instance of \" + _sd1.getName(), errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have \"", "+                     +\"referenced a type name on the left side.  Perhaps you meant to create a new instance of \" + ", "+                   _sd1.getName(), ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forEqualityExpressionOnly(ee, _sd1.getInstanceData(), _sd2));", "-      assertEquals(\"Error message should be correct\", \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the right side.  Perhaps you meant to create a new instance of \" + _sd2.getName(), errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"The arguments to this Equality Operator(==, !=) must both \"", "+                     + \"be instances.  Instead, you have referenced a type name on the right side.  Perhaps you \"", "+                     + \"meant to create a new instance of \" + _sd2.getName(), ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9ef1c1619b061745a691eef6e7ebcd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "               public void testForComparisonExpressionOnly()", "signatureAfterChange": "          public void testForComparisonExpressionOnly()", "diff": ["-    ", "-      ComparisonExpression ce = new LessThanExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      ComparisonExpression ce = new LessThanExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                    SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(),", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                    SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison \"", "+                     + \"Operator (<, >; <=, >=) to it\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a \"", "+                     + \"new instance of double\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), _sd1.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                    _sd1.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison \"", "+                     + \"Operator (<, >; <=, >=) to it\", ", "+                   errors.getLast().getFirst());", "-      //gives an error if right side is not an instance type", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "+      // Gives an error if right side is not an instance type", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b8367c9f93d1a39f610aa7f990828d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "               public void testForNumericBinaryExpressionOnly()", "signatureAfterChange": "               public void testForNumericBinaryExpressionOnly()", "diff": ["-      NumericBinaryExpression nbe = new ModExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      NumericBinaryExpression nbe = new ModExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE, SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE, ", "+                                                       SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                       SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  \"", "+                     + \"Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", ", "+                   errors.getLast().getFirst());", "-      //right not an instance data", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE));", "+      // right not an instance data", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "-      ", "-      ", "-      ", "-      //right not a number", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "+", "+      // right not a number", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", errors.getLast().getFirst());", "-      ", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply a \"", "+                     + \"Numeric Binary Operator (*, /, -, %) to it\", errors.getLast().getFirst());"]}], "num": 15293}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0f4aeb3fef69f999a75828f82ff277f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dbe0b4dfe21ae40354900f2e1702e81", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "14370880ba431a91577f4a6da91962f3187c5d5d", "commitAfterChange": "5d8a3bdb2b4d5525535575f357c7961c2851e09a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      public void xtestDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "diff": ["-  public void xtestDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException{", "+  public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException {", "+    ", "+    DocChangeListener listener = new DocChangeListener();", "+    ", "-      public void finalized(FinalizationEvent<DefinitionsPane> e) {", "-        _finalPaneCt++;", "-//        System.out.println(\"Finalizing: \" + e.getObject().hashCode());", "-      }", "+      public void finalized(FinalizationEvent<DefinitionsPane> e) { _finalPaneCt++; }", "-      public void finalized(FinalizationEvent<DefinitionsDocument> e) {", "-        _finalDocCt++;", "-      }", "+      public void finalized(FinalizationEvent<DefinitionsDocument> e) { _finalDocCt++; }", "-    SingleDisplayModel _model = _frame.getModel();", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "-    _model.newFile().addFinalizationListener(fldoc);", "-    _frame.getCurrentDefPane().addFinalizationListener(fl);", "-//    System.out.println(\"Created File: \" + _frame.getCurrentDefPane().hashCode());", "+    final SingleDisplayModel _model = _frame.getModel();", "+    _model.addListener(listener);", "+    ", "+    listener.reset();", "+    OpenDefinitionsDocument d1 = _model.newFile();", "+    d1.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p1 = _frame.getCurrentDefPane();", "+    p1.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p1.hashCode());", "+    assertEquals(\"Doc1 setup correctly\", d1, p1.getOpenDefDocument());", "+", "+    listener.reset();", "+    OpenDefinitionsDocument d2 = _model.newFile();", "+    d2.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p2 = _frame.getCurrentDefPane();", "+    p2.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p2.hashCode());", "+    assertEquals(\"Doc2 setup correctly\", d2, p2.getOpenDefDocument());", "+    ", "+    listener.reset();", "+    OpenDefinitionsDocument d3 = _model.newFile();", "+    d3.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p3 = _frame.getCurrentDefPane();", "+    p3.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p3.hashCode()); ", "+    assertEquals(\"Doc3 setup correctly\", d3, p3.getOpenDefDocument());", "+       ", "+    listener.reset();", "+    OpenDefinitionsDocument d4 = _model.newFile();", "+    d4.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p4 = _frame.getCurrentDefPane();", "+    p4.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p4.hashCode());", "+    assertEquals(\"Doc4 setup correctly\", d4, p4.getOpenDefDocument());", "+        ", "+    listener.reset();", "+    OpenDefinitionsDocument d5 = _model.newFile();", "+    d5.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p5 = _frame.getCurrentDefPane();", "+    p5.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p5.hashCode()); ", "+    assertEquals(\"Doc5 setup correctly\", d5, p5.getOpenDefDocument());   ", "+    ", "+    listener.reset();", "+    OpenDefinitionsDocument d6 = _model.newFile();", "+    d6.addFinalizationListener(fldoc);", "+    listener.waitDocChanged();", "+    DefinitionsPane p6 = _frame.getCurrentDefPane();", "+    p6.addFinalizationListener(fl);", "+    System.err.println(\"Listener attached to DefintionsPane@\" + p6.hashCode()); ", "+    assertEquals(\"Doc6 setup correctly\", d6, p6.getOpenDefDocument()); ", "-    _model.closeAllFiles();", "+    p1 = p2 = p3 = p4 = p5 = p6 = null;", "+    d1 = d2 = d3 = d4 = d5 = d6 = null;", "+//    _model.newFile();  // create a new document and pane for the model to hold as active.", "+    ", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.closeAllFiles(); } });", "+    Utilities.clearEventQueue();", "+    ", "+    assertEquals(\"All files closed\", 7, listener.getClosedCt());  // 7 includes for initial open file", "-    while (ct < 10 && (_finalDocCt != 6 || _finalPaneCt != 6));", "+    while (ct < 10 && (_finalDocCt != 6 /* || _finalPaneCt != 6*/ ));", "-//    if (ct > 1) System.err.println(\"testDocumentPaneMemoryLeak required \" + ct + \" iterations\");", "+    if (ct > 1) System.out.println(\"testDocumentPaneMemoryLeak required \" + ct + \" iterations\");", "-    assertEquals(\"all the panes should have been garbage collected\", 6, _finalPaneCt);", "+//    assertEquals(\"all the panes should have been garbage collected\", 6, _finalPaneCt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeb6d8e64ce239f32429bf8c8c4d05a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "signatureAfterChange": "   public void testMultilineCommentOrUncommentAfterScroll() throws BadLocationException", "diff": ["-    String commented =", "+    final String commented =", "-    final int newPos = 20;", "-    ", "-    // The following statement hung when run in the main test thread.  There must be a pending access to doc in a", "-    // task on the event queue that sometimes has not yet executed.", "-    ", "-    Utilities.invokeAndWait(new Runnable() { public void run() { doc.append(text, null); } });", "-    Utilities.clearEventQueue();", "-    ", "-    assertEquals(\"insertion\", text, doc.getText());", "-    // I can't run the test here because I'm not sure how to select the text so that we can comment it.", "-", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "-     ", "-    doc.acquireWriteLock();", "-    try { doc.commentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "-    ", "-    //    pane.endCompoundEdit();", "-    assertEquals(\"commenting\", commented, doc.getText());", "-    ", "-    int oldPos = pane.getCaretPosition();", "+    // I can't run the test here because I'm not sure how to select the text so that we can comment it", "-        pane.setCaretPosition(newPos); ", "-        _frame.validate();", "-      } ", "+        doc.append(text, null);", "+        assertEquals(\"insertion\", text, doc.getText());", "+//        System.err.println(\"Compound? \" + pane._inCompoundEdit);", "+//        System.err.println(\"After append, loc = \" + doc.getCurrentLocation());", "+        pane.endCompoundEdit();", "+        doc.commentLines(0, doc.getLength()); ", "+", "+        assertEquals(\"commenting\", commented, doc.getText());", "+        int newPos = doc.getCurrentLocation();", "+//        System.err.println(\"newPos = \" + newPos);", "+", "+        doc.getUndoManager().undo(); ", "+//        System.err.println(\"cursor pos = \" + doc.getCurrentLocation());", "+//        int pos = doc.getCurrentLocation();", "+        assertEquals(\"undo commenting\", text, doc.getText());", "+//        System.err.println(\"cursor pos = \" + pos + \"\\n\");", "+//        // doc.commentLines moves the cursor to 0 before inserting wing comment chars", "+//", "+//        assertTrue(\"dummy test\", true);", "+//        System.err.println(\"undone text = '\" + doc.getText() + \"'\");", "+//        assertTrue(\"dummy test\", true);", "+", "+        assertEquals(\"undoing commenting restores cursor position\", 0, doc.getCurrentLocation());", "+        ", "+        doc.getUndoManager().redo();", "+        assertEquals(\"redo commenting\", commented, doc.getText());", "+        assertEquals(\"redoing commenting restores cursor position\", newPos, doc.getCurrentLocation());", "+", "+        pane.endCompoundEdit(); ", "+        doc.uncommentLines(0, doc.getLength()); ", "+        assertEquals(\"uncommenting\", text, doc.getText());", "+", "+        _redoPos = doc.getCurrentLocation();  ", "+    ", "+        doc.getUndoManager().undo();", "+        ", "+      } });", "+    ", "+    // undo may spawn new events that fix up the value of _currentLocation; must break our of invokeAndWait to let", "+    // them execute", "+", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        ", "+//        System.err.println(\"cursor pos = \" + doc.getCurrentLocation());", "+    ", "+        assertEquals(\"undo uncommenting\", commented, doc.getText());", "+//        System.err.println(\"cursor pos = \" + doc.getCurrentLocation());", "+", "+        // doc.uncommentLines moves the cursor to 0 before removing the wing comment chars", "+        assertEquals(\"undoing uncommenting restores cursor position\", 0, doc.getCurrentLocation());", "+    ", "+        doc.getUndoManager().redo();", "+        assertEquals(\"redo uncommenting\",text, doc.getText());", "+        assertEquals(\"redoing uncommenting restores cursor position\", _redoPos, doc.getCurrentLocation());", "+                                                        ", "+//        fail(\"print System.err\");", "+      }", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().undo();  ", "-    assertEquals(\"undo commenting\", text, doc.getText());", "-    assertEquals(\"undoing commenting restores caret position\", oldPos, pane.getCaretPosition());", "-    ", "-    // Perturb the caret position and redo", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().redo();", "-    assertEquals(\"redo commenting\", commented, doc.getText());", "-    assertEquals(\"redoing commenting restores caret position\", oldPos, pane.getCaretPosition());", "-    ", "-    // Need to do this here since the commentLines action in MainFrame usually takes care of this.  ", "-    // I can't simulate a keystroke here because I'm not sure how to select the text so that we can comment it.", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.endCompoundEdit(); } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.acquireWriteLock();", "-    try { doc.uncommentLines(0, doc.getLength()); }", "-    finally { doc.releaseWriteLock(); }", "-    ", "-    //    pane.endCompoundEdit();", "-    assertEquals(\"uncommenting\", text, doc.getText());", "-    ", "-    oldPos = pane.getCaretPosition();  // executing this method call outside of the event thread is borderline", "-    ", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos);  } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().undo();", "-    ", "-    assertEquals(\"undo uncommenting\", commented, doc.getText());", "-    assertEquals(\"undoing uncommenting restores caret position\", oldPos, pane.getCaretPosition());", "-    ", "-    Utilities.invokeAndWait(new Runnable() { public void run() { pane.setCaretPosition(newPos); } });", "-    Utilities.clearEventQueue();", "-    ", "-    doc.getUndoManager().redo();", "-    assertEquals(\"redo uncommenting\",text, doc.getText());", "-    assertEquals(\"redoing uncommenting restores caret position\", oldPos, pane.getCaretPosition());"]}], "num": 15839}
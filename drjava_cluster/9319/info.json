{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35cefdeab7c761711e135ff80a4c06bd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e41c3b362043c73def996f1be4b6e3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 77, "signatureBeforeChange": "   public static <T1, T2> Runnable3<T1, T2, Object> promote(final Runnable2<? super T1, ? super T2> r)", "signatureAfterChange": "   public static <T1, T2> Runnable3<T1, T2, Object> promote(Runnable2<? super T1, ? super T2> r)", "diff": ["-  /** @return A {@code Runnable3} equivalent to {@code r} with an additional, ignored argument */", "-  public static <T1, T2> Runnable3<T1, T2, Object> promote(final Runnable2<? super T1, ? super T2> r) {", "-    return new Runnable3<T1, T2, Object>() {", "-      public void run(T1 arg1, T2 arg2, Object arg3) { r.run(arg1, arg2); }", "-    };", "+  /** Create a {@code Runnable3} equivalent to {@code r} with an additional, ignored argument. */", "+  public static <T1, T2> Runnable3<T1, T2, Object> promote(Runnable2<? super T1, ? super T2> r) {", "+    return new PromotedRunnable3<T1, T2>(r);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0a0551dec1e9bb7f1a30aaeeb8bf2d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 74, "signatureBeforeChange": "   public static <T> Runnable2<T, Object> promote(final Runnable1<? super T> r)", "signatureAfterChange": "   public static <T> Runnable2<T, Object> promote(Runnable1<? super T> r)", "diff": ["-  /** @return A {@code Runnable2} equivalent to {@code r} with an additional, ignored argument */", "-  public static <T> Runnable2<T, Object> promote(final Runnable1<? super T> r) {", "-    return new Runnable2<T, Object>() {", "-      public void run(T arg1, Object arg2) { r.run(arg1); }", "-    };", "+  /** Create a {@code Runnable2} equivalent to {@code r} with an additional, ignored argument. */", "+  public static <T> Runnable2<T, Object> promote(Runnable1<? super T> r) { return new PromotedRunnable2<T>(r); }"]}], "num": 9319}
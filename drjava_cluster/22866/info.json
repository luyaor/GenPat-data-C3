{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60b34439366294e1348444ad1e9ca480", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db561c5dd68da71342e35f38b2cd46b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocumentTest.java", "commitBeforeChange": "ef639a33b339d361cf9175d5e5faf5683af2dec0", "commitAfterChange": "98f0c27d2704f53c27c12dba8736793eeeac44cf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "signatureAfterChange": "   public void testStylesListContentAndReset() throws EditDocumentException, InterruptedException", "diff": ["-    _doc.insertText(_doc.getLength(), \"5\", InteractionsDocument.NUMBER_RETURN_STYLE);", "+    _doc.append(\"5\", InteractionsDocument.NUMBER_RETURN_STYLE);", "-    // TODO: getStyles() technically requres a ReadLock! ", "-    assertEquals(\"StylesList after reset should contain 2 pairs\", 2, _adapter.getStyles().length);", "-    ", "-    assertEquals(\"The first element pushed on StylesList after reset should be\", styleElt1,", "-                 _adapter.getStyles()[1].toString());", "-    assertEquals(\"The second element pushed on StylesList after reset should be\", styleElt2,", "-                 _adapter.getStyles()[0].toString());", "+", "+    _doc.acquireReadLock();  // assures that any pending updates to _doc have been performed", "+    try {", "+      assertEquals(\"StylesList after reset should contain 2 pairs\", 2, _adapter.getStyles().length);", "+      ", "+      assertEquals(\"The first element pushed on StylesList after reset should be\", styleElt1,", "+                   _adapter.getStyles()[1].toString());", "+      assertEquals(\"The second element pushed on StylesList after reset should be\", styleElt2,", "+                   _adapter.getStyles()[0].toString());", "+    }", "+    finally { _doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7634bfbf24d545a9337cfc592c52219", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/ColoringView.java", "commitBeforeChange": "97f3497fff8964fcbfb5676986b962bdda4668d8", "commitAfterChange": "7eb3f352026fdd72406cad2b8b748f294e1fb77b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected int drawUnselectedText(Graphics g, int x, int y, int start, int end) throws BadLocationException", "signatureAfterChange": "   protected int drawUnselectedText(Graphics g, int x, int y, int start, int end) throws BadLocationException", "diff": ["-    ", "-    // Might be a PlainDocument (when AbstractDJPane is first constructed).", "-    //   See comments for DefinitionsEditorKit.createNewDocument() for details.", "-    Document doc = getDocument();", "-    AbstractDJDocument _doc = null;", "-    if (doc instanceof AbstractDJDocument) _doc = (AbstractDJDocument) doc;", "-    else return x; // return if there is no AbstracDJDocument", "-    ", "-    if (start == end) return  x;", "+    if (start == end) return x;", "-    Vector<HighlightStatus> stats = _doc.getHighlightStatus(start, end);", "-    if (stats.size() < 1) throw  new RuntimeException(\"GetHighlightStatus returned nothing!\");", "+    // doc might be a PlainDocument (when AbstractDJPane is first constructed).", "+    // See comments for DefinitionsEditorKit.createNewDocument() for details.", "+    Document doc = getDocument();", "+    if (! (doc instanceof AbstractDJDocument)) return x; // return if there is no AbstracDJDocument", "-    for (int i = 0; i < stats.size(); i++) {", "-      HighlightStatus stat = stats.get(i);", "-      int length = stat.getLength();", "-      int location = stat.getLocation();", "-      // If this highlight status extends past p1, end at p1", "-      if (location + length > end) length = end - stat.getLocation();", "+    final AbstractDJDocument _doc = (AbstractDJDocument) doc;", "+    ", "+    /* It is not clear if swing only calls this method doc read locked.  So we lock for safety's sake. */", "+    _doc.acquireReadLock();", "+    try {", "-      Segment text = getLineBuffer();", "+      Vector<HighlightStatus> stats = _doc.getHighlightStatus(start, end);", "+      if (stats.size() < 1) throw  new RuntimeException(\"GetHighlightStatus returned nothing!\");", "-      if (!(_doc instanceof InteractionsDJDocument) || !((InteractionsDJDocument)_doc).setColoring((start+end)/2,g))      ", "-        setFormattingForState(g, stat.getState());", "-      //      else", "-      //        DrJava.consoleErr().println(\"Highlight: p0=\"+p0+\"; p1=\"+p1+\"; location=\"+location+\"; color=\"+g.getColor()+\"; text=\"+text);", "-      ", "-      //      ", "-      //       DrJava.consoleErr().println(\"Highlight: loc=\" + location + \" length=\" +", "-      //       length + \" state=\" + stat.getState() +", "-      //       \" text=\" + text);", "-      //       ", "-      _doc.getText(location, length, text);", "-      x = Utilities.drawTabbedText(text, x, y, g, this, location);", "+      for (int i = 0; i < stats.size(); i++) {", "+        HighlightStatus stat = stats.get(i);", "+        int location = stat.getLocation();", "+        int length = stat.getLength();", "+        ", "+        // If this highlight status extends past p1, end at p1", "+        if (location + length > end) length = end - stat.getLocation();", "+        ", "+        if (! (_doc instanceof InteractionsDJDocument) || ", "+            ! ((InteractionsDJDocument)_doc).setColoring((start + end)/2, g))      ", "+          setFormattingForState(g, stat.getState());", "+        Segment text = getLineBuffer(); ", "+        _doc.getText(location, length, text);", "+        x = Utilities.drawTabbedText(text, x, y, g, this, location);  // updates x on each iteration", "+      }", "+    finally { _doc.releaseReadLock(); }"]}], "num": 22866}
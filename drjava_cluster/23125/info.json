{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64a19269d4b7fd59d5872896245fb234", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321e14b9324863660d7fade72c54bbdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "      protected Type substitute(Type t, final SubstitutionMap sigma)", "signatureAfterChange": "      protected Type substitute(Type t, final SubstitutionMap sigma)", "diff": ["-      // TODO: Make sure CopyDepthFirstVisitor isn't making unnecessary copies", "-      return t.apply(new TypeCopyDepthFirstVisitor() {", "-        ", "-        // TODO: This should be automatically defined in TypeCopyDepthFirstVisitor", "-        public Type defaultCase(Type t) { ", "-          throw new IllegalArgumentException(\"Visitor unexpectedly reached default case\");", "-        }", "-        ", "-        @Override public Type forParameterizedClassType(ParameterizedClassType t) {", "-          Iterable<Type> newArgs = applyToList(t.typeArguments());", "-          return (newArgs == null) ? t : new ParameterizedClassType(t.ofClass(), newArgs);", "-        }", "+      return t.apply(new TypeUpdateVisitor() {", "-        @Override public Type forIntersectionType(IntersectionType t) {", "-          Iterable<Type> newTypes = applyToList(t.ofTypes());", "-          return (newTypes == null) ? t : new IntersectionType(newTypes);", "-        }", "-        ", "-          final TypeVisitor<Type> visitor = this;", "-              Type newUpper = bounds.upperBound().apply(visitor);", "-              Type newLower = bounds.lowerBound().apply(visitor);", "+              Type newUpper = recur(bounds.upperBound());", "+              Type newLower = recur(bounds.lowerBound());", "-        }", "-        ", "-        // returns null if no change is necessary", "-        private Iterable<Type> applyToList(Iterable<? extends Type> ts) {", "-          Iterable<Type> newTs = EMPTY_TYPE_ITERABLE;", "-          boolean changed = false;", "-          for (Type t : ts) {", "-            Type newT = t.apply(this);", "-            newTs = IterUtil.compose(newTs, newT);", "-            changed = changed || (t != newT);", "-          }", "-          return changed ? newTs : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a11b770dfbd57abe301e0379fbffb7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 136, "signatureBeforeChange": "      private ParameterizedClassType capture(ParameterizedClassType t)", "signatureAfterChange": "      private ParameterizedClassType capture(ParameterizedClassType t)", "diff": ["+    boolean ground = true; // optimization: simply return non-wildcard cases", "+    for (Type arg : t.typeArguments()) {", "+      if (arg instanceof Wildcard) { ground = false; break; }", "+    }", "+    if (ground) { return t; }", "+    else {", "+      Iterable<VariableType> params = SymbolUtil.allTypeParameters(t.ofClass());", "+      Iterable<Type> captureArgs = captureTypeArgs(t.typeArguments(), params);", "+      return new ParameterizedClassType(t.ofClass(), captureArgs);", "+    }", "+  }", "-    boolean ground = true;", "-    for (Type arg : t.typeArguments()) {", "-        ground = false;", "-    if (ground) { return t; }", "-    else {", "-      Iterable<VariableType> params = SymbolUtil.allTypeParameters(t.ofClass());", "-      final SubstitutionMap sigma = new SubstitutionMap(params, newArgs);", "-      for (Triple<BoundedSymbol, Type, VariableType> triple : IterUtil.zip(captureVars, t.typeArguments(), params)) {", "-        Type arg = triple.second();", "-        if (arg instanceof Wildcard) {", "-          Wildcard argW = (Wildcard) arg;", "-          VariableType param = triple.third();", "-          Type paramU = substitute(param.symbol().upperBound(), sigma);", "-          Type paramL = substitute(param.symbol().lowerBound(), sigma);", "-          triple.first().initializeUpperBound(new IntersectionType(IterUtil.make(argW.symbol().upperBound(),", "-                                                                                 paramU)));", "-          triple.first().initializeLowerBound(new UnionType(IterUtil.make(argW.symbol().lowerBound(), paramL)));", "-        }", "-      return new ParameterizedClassType(t.ofClass(), newArgs);"]}], "num": 23125}
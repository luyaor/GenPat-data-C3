{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "395ba23c73ff448b3a1ffc8ad5da14c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96cbd1e97d540fc81be822f3f6f3e560", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "3bb525675df17c5cd50695a90ffe7d8bb2eb200c", "commitAfterChange": "cb572b3617cad32fd1949d7534520be983606d43", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 239, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "diff": ["-", "+      final OpenDefinitionsDocument doc;", "+      if (file instanceof DocFile) {", "+        doc = new ConcreteOpenDefDoc(file, ((DocFile)file).getPackage());", "+      }", "+      else {", "+        doc = new ConcreteOpenDefDoc(file);", "+      }", "-      ", "-      final OpenDefinitionsDocument doc = new ConcreteOpenDefDoc(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a96687be85d6119487e7b50e1b59bb3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpretResult.java", "commitBeforeChange": "01b10549898effa38e785508ee38f72b1a436fc2", "commitAfterChange": "7efaecd07a81de3f2ac89265612e2524162cef22", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public ExceptionResult(InterpreterException e)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")     public ExceptionResult(InterpreterException e)", "diff": ["+    @SuppressWarnings(\"unchecked\")", "-      StringWriter msg = new StringWriter();", "-      e.printUserMessage(new PrintWriter(msg));", "-      _msg = msg.toString().trim();", "+      if (e instanceof EvaluatorException) {", "+        _e = (EvaluatorException)e;", "+        _msg = null;", "+      }", "+      else {", "+        // for other InterpreterExceptions, we need to convert to a string here", "+        // because they cannot be unmarshalled (not serializable)", "+        StringWriter msg = new StringWriter();", "+        e.printUserMessage(new PrintWriter(msg));", "+        _msg = msg.toString().trim();", "+        _e = null;", "+      }"]}], "num": 14003}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f397b6f5d299446f97ddf78b4b2b117", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e3410c35f44d631941024616524c926", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 274, "signatureBeforeChange": "   public static <T1, T2> Runnable2<T1, T2> asRunnable(final Lambda2<? super T1, ? super T2, ?> lambda)", "signatureAfterChange": "   public static <T1, T2> Runnable2<T1, T2> asRunnable(Lambda2<? super T1, ? super T2, ?> lambda)", "diff": ["-  /** @return  A runnable that executes the given lambda (ignoring the result) */", "-  public static <T1, T2> Runnable2<T1, T2> asRunnable(final Lambda2<? super T1, ? super T2, ?> lambda) {", "-    return new Runnable2<T1, T2>() { ", "-      public void run(T1 arg1, T2 arg2) { lambda.value(arg1, arg2); }", "-    };", "-  }", "+  /** Create a runnable that executes the given lambda (ignoring the result). */", "+  public static <T1, T2> Runnable2<T1, T2> asRunnable(Lambda2<? super T1, ? super T2, ?> lambda) {", "+    return new LambdaRunnable2<T1, T2>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0a0551dec1e9bb7f1a30aaeeb8bf2d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 74, "signatureBeforeChange": "   public static <T> Runnable2<T, Object> promote(final Runnable1<? super T> r)", "signatureAfterChange": "   public static <T> Runnable2<T, Object> promote(Runnable1<? super T> r)", "diff": ["-  /** @return A {@code Runnable2} equivalent to {@code r} with an additional, ignored argument */", "-  public static <T> Runnable2<T, Object> promote(final Runnable1<? super T> r) {", "-    return new Runnable2<T, Object>() {", "-      public void run(T arg1, Object arg2) { r.run(arg1); }", "-    };", "+  /** Create a {@code Runnable2} equivalent to {@code r} with an additional, ignored argument. */", "+  public static <T> Runnable2<T, Object> promote(Runnable1<? super T> r) { return new PromotedRunnable2<T>(r); }"]}], "num": 29618}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "547f92cde5fd7403e45facaa9f860a01", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2430446c5b8b3d9a911cb22f63da2c36", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "          public void testForIncrementExpression()", "signatureAfterChange": "          public void testForIncrementExpression()", "diff": ["-      ComplexNameReference nf = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Ned\")), new Word(SourceInfo.NO_INFO, \"Flanders\"));", "-      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, nf);", "+      ComplexNameReference nf = ", "+        new ComplexNameReference(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Ned\")), ", "+                                 new Word(SourceInfo.NONE, \"Flanders\"));", "+      PositivePrefixIncrementExpression ppi = new PositivePrefixIncrementExpression(SourceInfo.NONE, nf);", "-      PositivePrefixIncrementExpression ppi2 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")));", "+      PositivePrefixIncrementExpression ppi2 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "-      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))));", "+      Parenthesized p1 = ", "+        new Parenthesized(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "+      PositivePrefixIncrementExpression ppi3 = new PositivePrefixIncrementExpression(SourceInfo.NONE, p1);", "-      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // For some reason, generated error is not a duplicate", "+      assertEquals(\"There should now be 4 errors\", 4, errors.size());  // Generated error is not a duplicate", "-      //test that words with a post-decrement operator afterwards only work if they already have a value and aren't final.", "+      // Test that words with post-decrement operator only work if they already have a value and aren't final.", "-      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, nf);", "+      NegativePostfixIncrementExpression npi = new NegativePostfixIncrementExpression(SourceInfo.NONE, nf);", "-      // test that attempting to decrement the value of a field that doesn't have a value will throw an error", "+      // Test that attempting to decrement the value of a field that doesn't have a value will throw an error", "-        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "-                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                       new Word(SourceInfo.NO_INFO, \"int\")));", "+        new NegativePostfixIncrementExpression(SourceInfo.NONE, ", "+                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                       new Word(SourceInfo.NONE, \"int\")));", "-      NegativePostfixIncrementExpression npi3 = ", "-        new NegativePostfixIncrementExpression(SourceInfo.NO_INFO, ", "-                                               new Parenthesized(SourceInfo.NO_INFO, ", "-                                                                 new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                         new Word(SourceInfo.NO_INFO, \"int\"))));", "+      Parenthesized p2 = ", "+        new Parenthesized(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"int\")));", "+      NegativePostfixIncrementExpression npi3 = new NegativePostfixIncrementExpression(SourceInfo.NONE, p2);", "-      PositivePrefixIncrementExpression ppi4 = ", "-        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "-                                              new Parenthesized(SourceInfo.NO_INFO, ", "-                                                                new NegativePrefixIncrementExpression(SourceInfo.NO_INFO, nf)));", "+      Parenthesized p3 = new Parenthesized(SourceInfo.NONE, new NegativePrefixIncrementExpression(SourceInfo.NONE, nf));", "+      PositivePrefixIncrementExpression ppi4 = new PositivePrefixIncrementExpression(SourceInfo.NONE, p3);", "-        new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, ", "-                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                      new Word(SourceInfo.NO_INFO, \"s\")));", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, ", "+                                              new SimpleNameReference(SourceInfo.NONE, ", "+                                                                      new Word(SourceInfo.NONE, \"s\")));", "-      PositivePrefixIncrementExpression ppi6 = new PositivePrefixIncrementExpression(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, new Parenthesized(SourceInfo.NO_INFO, nf)));", "+      PositivePrefixIncrementExpression ppi6 = ", "+        new PositivePrefixIncrementExpression(SourceInfo.NONE, new Parenthesized(SourceInfo.NONE, ", "+                                                                                 new Parenthesized(SourceInfo.NONE, nf)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e8321240314ae0db6c742cb982fce15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LValueTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "           public void testForComplexNameReference()", "signatureAfterChange": "           public void testForComplexNameReference()", "diff": ["-      ComplexNameReference ref1 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java\")), new Word(SourceInfo.NO_INFO, \"lang\"));", "+      ComplexNameReference ref1 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"java\")), new Word(SourceInfo.NONE, \"lang\"));", "-      ComplexNameReference ref2 = new ComplexNameReference(SourceInfo.NO_INFO, ref1, new Word(SourceInfo.NO_INFO, \"String\"));", "+      ComplexNameReference ref2 = new ComplexNameReference(SourceInfo.NONE, ref1, new Word(SourceInfo.NONE, \"String\"));", "-      ComplexNameReference varRef1 = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"myVar\"));", "+      ComplexNameReference varRef1 = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"myVar\"));", "-      ComplexNameReference varRef2 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"myVar\"));", "+      ComplexNameReference varRef2 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), new Word(SourceInfo.NONE, \"myVar\"));", "-      ComplexNameReference varRef3 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Snowball1\")),", "-                                                        new Word(SourceInfo.NO_INFO, \"Santa's Little Helper\"));", "-      ComplexNameReference varRef4 = new ComplexNameReference(SourceInfo.NO_INFO, varRef3, new Word(SourceInfo.NO_INFO, \"Mojo\"));", "+      ComplexNameReference varRef3 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Snowball1\")),", "+                                                        new Word(SourceInfo.NONE, \"Santa's Little Helper\"));", "+      ComplexNameReference varRef4 = new ComplexNameReference(SourceInfo.NONE, varRef3, new Word(SourceInfo.NONE, \"Mojo\"));", "-      ComplexNameReference innerRef0 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef0 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), new Word(SourceInfo.NONE, \"Inner\"));", "-      ComplexNameReference innerRef1 = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef1 = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"Inner\"));", "-      ComplexNameReference innerRef2 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef2 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), new Word(SourceInfo.NONE, \"Inner\"));", "-      ComplexNameReference noSense = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"nonsense\"));", "+      ComplexNameReference noSense = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"nonsense\"));", "-      ComplexNameReference ambigRef = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"cebu\")), new Word(SourceInfo.NO_INFO, \"ambigThing\"));", "+      ComplexNameReference ambigRef = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"cebu\")), new Word(SourceInfo.NONE, \"ambigThing\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f06b690f957202966c7f1a77e292cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "          public void testForComplexNamedClassInstantiation()", "signatureAfterChange": "          public void testForComplexNamedClassInstantiation()", "diff": ["+      ParenthesizedExpressionList pel1 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] { new IntegerLiteral(SourceInfo.NONE, 5)});", "-        new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                           new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"o\")), ", "-                                           new ClassOrInterfaceType(SourceInfo.NO_INFO, \"innerClass\", new Type[0]),                                  ", "-                                           new ParenthesizedExpressionList(SourceInfo.NO_INFO, ", "-                                                                           new Expression[] { new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"o\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"innerClass\", new Type[0]),                                  ", "+                                           pel1);", "-        new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                           new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                   new Word(SourceInfo.NO_INFO, \"o\")), ", "-                                           new ClassOrInterfaceType(SourceInfo.NO_INFO, \"innerClass\", new Type[0]), ", "-                                           new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, ", "+                                                                   new Word(SourceInfo.NONE, \"o\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"innerClass\", new Type[0]), ", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      //if outer class is in symbol table and visible, but there is not a matching inner constructor, should give an error but still return instance of type", "+      // if outer class is in symbol table and visible, but there is not a matching inner constructor, should give ", "+      // an error but still return instance of type", "-      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "+      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "-      assertEquals(\"Should return innerClass even though it could not find constructor\", innerClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return innerClass even though it could not find constructor\", innerClass.getInstanceData(), ", "+                   ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class outer.innerClass with signature: innerClass(int).\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\",", "+                   \"No constructor found in class outer.innerClass with signature: innerClass(int).\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return innerClass even though it cannot really be instantiated\", innerClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return innerClass even though it cannot really be instantiated\", innerClass.getInstanceData(), ", "+                   ci1.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"outer.innerClass is abstract and thus cannot be instantiated\", errors.getLast().getFirst());              ", "+      assertEquals(\"Error message should be correct\", \"outer.innerClass is abstract and thus cannot be instantiated\", ", "+                   errors.getLast().getFirst());              ", "-      ComplexNamedClassInstantiation ci3 = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"outer\")), new ClassOrInterfaceType(SourceInfo.NO_INFO, \"innerClass\", new Type[0]), ", "-                                                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));             ", "-      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      assertEquals(\"Should return innerClass even though the syntax was wrong\", innerClass.getInstanceData(), ci3.visit(_etc));", "+      ComplexNamedClassInstantiation ci3 = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"outer\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"innerClass\", new Type[0]), ", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));             ", "+      outerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      innerClass.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      assertEquals(\"Should return innerClass even though the syntax was wrong\", innerClass.getInstanceData(), ", "+                   ci3.visit(_etc));", "-                   \"The constructor of a non-static inner class can only be called on an instance of its containing class (e.g. new outer().new innerClass())\", errors.getLast().getFirst());", "+                   \"The constructor of a non-static inner class can only be called on an instance of its containing \"", "+                     + \"class (e.g. new outer().new innerClass())\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return innerClass even though the syntax was wrong\", innerClass.getInstanceData(), ci1.visit(_etc));", "+      assertEquals(\"Should return innerClass even though the syntax was wrong\", ", "+                   innerClass.getInstanceData(), ci1.visit(_etc));", "-                   \"You cannot instantiate a static inner class or interface with this syntax.  Instead, try new outer.innerClass()\",", "+                   \"You cannot instantiate a static inner class or interface with this syntax.  Instead, \"", "+                     + \"try new outer.innerClass()\",", "-      ComplexNamedClassInstantiation ci4 = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"o\")), new ClassOrInterfaceType(SourceInfo.NO_INFO, \"notInnerClass\", new Type[0]), ", "-                                                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      ParenthesizedExpressionList pel2 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new IntegerLiteral(SourceInfo.NONE, 5)});", "+      ComplexNamedClassInstantiation ci4 = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE, ", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"o\")), ", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"notInnerClass\", new Type[0]), ", "+                                           pel2);", "-      assertEquals(\"Error message should be correct\", \"Class or variable notInnerClass not found.\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"Class or variable notInnerClass not found.\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface outer.innerClass is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface outer.innerClass in outer.innerClass is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface outer is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface outer in outer is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4feeab47527334b1bb013f41fe73ec16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "          public void testForIfThenElseStatementOnly()", "signatureAfterChange": "          public void testForIfThenElseStatementOnly()", "diff": ["-      IfThenElseStatement ites1 = new IfThenElseStatement(SourceInfo.NO_INFO,", "-                                                          new IntegerLiteral(SourceInfo.NO_INFO, 1),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 4)),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new CharLiteral(SourceInfo.NO_INFO, 'j')));", "+      IfThenElseStatement ites1 = new IfThenElseStatement(SourceInfo.NONE,", "+                                                          new IntegerLiteral(SourceInfo.NONE, 1),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 4)),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new CharLiteral(SourceInfo.NONE, 'j')));", "-      IfThenElseStatement ites2 = new IfThenElseStatement(SourceInfo.NO_INFO,", "-                                                          new BooleanLiteral(SourceInfo.NO_INFO, true),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 4)),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new BooleanLiteral(SourceInfo.NO_INFO, true)));", "+      IfThenElseStatement ites2 = new IfThenElseStatement(SourceInfo.NONE,", "+                                                          new BooleanLiteral(SourceInfo.NONE, true),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 4)),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new BooleanLiteral(SourceInfo.NONE, true)));", "-      IfThenElseStatement ites3 = new IfThenElseStatement(SourceInfo.NO_INFO,", "-                                                          new BooleanLiteral(SourceInfo.NO_INFO, true),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 4)),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new CharLiteral(SourceInfo.NO_INFO, 'f')));", "+      IfThenElseStatement ites3 = new IfThenElseStatement(SourceInfo.NONE,", "+                                                          new BooleanLiteral(SourceInfo.NONE, true),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 4)),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new CharLiteral(SourceInfo.NONE, 'f')));", "-      IfThenElseStatement ites4 = new IfThenElseStatement(SourceInfo.NO_INFO,", "-                                                          new BooleanLiteral(SourceInfo.NO_INFO, true),", "-                                                          new EmptyStatement(SourceInfo.NO_INFO),", "-                                                          new EmptyStatement(SourceInfo.NO_INFO));", "+      IfThenElseStatement ites4 = new IfThenElseStatement(SourceInfo.NONE,", "+                                                          new BooleanLiteral(SourceInfo.NONE, true),", "+                                                          new EmptyStatement(SourceInfo.NONE),", "+                                                          new EmptyStatement(SourceInfo.NONE));", "-      IfThenElseStatement ites5 = new IfThenElseStatement(SourceInfo.NO_INFO,", "-                                                          new BooleanLiteral(SourceInfo.NO_INFO, true),", "-                                                          new EmptyStatement(SourceInfo.NO_INFO),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 3)));", "+      IfThenElseStatement ites5 = new IfThenElseStatement(SourceInfo.NONE,", "+                                                          new BooleanLiteral(SourceInfo.NONE, true),", "+                                                          new EmptyStatement(SourceInfo.NONE),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 3)));", "-      IfThenElseStatement ites6 = new IfThenElseStatement(SourceInfo.NO_INFO,", "-                                                          new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"boolean\")),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 4)),", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 4)));", "+      IfThenElseStatement ites6 = new IfThenElseStatement(SourceInfo.NONE,", "+                                                          new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"boolean\")),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 4)),", "+                                                          new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 4)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5396e443ac04a73bab7a5df8bbd8b710", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForConstructorDef()", "signatureAfterChange": "          public void testForConstructorDef()", "diff": ["-        new VariableDeclarator[] { new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                       new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                                       new Word(SourceInfo.NO_INFO, \"i\"))};", "+        new VariableDeclarator[] { new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                                                       new PrimitiveType(SourceInfo.NONE, \"int\"), ", "+                                                                       new Word(SourceInfo.NONE, \"i\"))};", "-      VariableDeclaration vd =  new VariableDeclaration(SourceInfo.NO_INFO, _finalMav, vds);", "+      VariableDeclaration vd =  new VariableDeclaration(SourceInfo.NONE, _finalMav, vds);", "-        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"));", "+        new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\"));", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 1)));      ", "-      BracedBody cbb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { es });", "-      ConstructorDef cd =  new ConstructorDef(SourceInfo.NO_INFO, ", "-                                              new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 1)));      ", "+      BracedBody cbb = new BracedBody(SourceInfo.NONE, new BodyItemI[] { es });", "+      ConstructorDef cd =  new ConstructorDef(SourceInfo.NONE, ", "+                                              new Word(SourceInfo.NONE, \"Jimes\"), ", "-      BracedBody b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd, cd});", "+      BracedBody b = new BracedBody(SourceInfo.NONE, new BodyItemI[] {vd, cd});", "-        new ClassDef(SourceInfo.NO_INFO, ", "+        new ClassDef(SourceInfo.NONE, ", "-                     new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                     new Word(SourceInfo.NONE, \"Jimes\"), ", "-                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.io.StreamTokenizer\", new Type[0]), ", "+                     new ClassOrInterfaceType(SourceInfo.NONE, \"java.io.StreamTokenizer\", new Type[0]), ", "-//      SymbolData obj = _cbbtc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NO_INFO), false, true);", "-      SymbolData tokenizer = _cbbtc.getSymbolData(\"java.io.StreamTokenizer\", new NullLiteral(SourceInfo.NO_INFO), false, true);", "+//      SymbolData obj = _cbbtc.getSymbolData(\"java.lang.Object\", new NullLiteral(SourceInfo.NONE), false, true);", "+      SymbolData tokenizer = _cbbtc.getSymbolData(\"java.io.StreamTokenizer\", new NullLiteral(SourceInfo.NONE), false, true);", "-      cbb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {});", "-      cd = new ConstructorDef(SourceInfo.NO_INFO, ", "-                              new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+      cbb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {});", "+      cd = new ConstructorDef(SourceInfo.NONE, ", "+                              new Word(SourceInfo.NONE, \"Jimes\"), ", "-      b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd, cd});", "-      classDef = new ClassDef(SourceInfo.NO_INFO, ", "+      b = new BracedBody(SourceInfo.NONE, new BodyItemI[] {vd, cd});", "+      classDef = new ClassDef(SourceInfo.NONE, ", "-                              new Word(SourceInfo.NO_INFO, \"Jimes\"), ", "+                              new Word(SourceInfo.NONE, \"Jimes\"), ", "-                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), ", "+                              new ClassOrInterfaceType(SourceInfo.NONE, \"java.lang.Object\", new Type[0]), ", "-      ExpressionStatement assign = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")), new IntegerLiteral(SourceInfo.NO_INFO, 45)));", "-      b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new ExpressionStatement(SourceInfo.NO_INFO, new SimpleThisConstructorInvocation(SourceInfo.NO_INFO, new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]))), assign});", "-      cd = new ConstructorDef(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"name\"), _publicMav, new FormalParameter[0], new ReferenceType[0], b);", "+      ExpressionStatement assign = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")), new IntegerLiteral(SourceInfo.NONE, 45)));", "+      b = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new ExpressionStatement(SourceInfo.NONE, new SimpleThisConstructorInvocation(SourceInfo.NONE, new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]))), assign});", "+      cd = new ConstructorDef(SourceInfo.NONE, new Word(SourceInfo.NONE, \"name\"), _publicMav, new FormalParameter[0], new ReferenceType[0], b);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b8e5304f49d05c121649e8fea15c06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "          public void testShouldBreak()", "signatureAfterChange": "          public void testShouldBreak()", "diff": ["-        new LeftShiftAssignmentExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                          new NullLiteral(SourceInfo.NO_INFO));", "+        new LeftShiftAssignmentExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                          new NullLiteral(SourceInfo.NONE));", "-        new RightUnsignedShiftAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                   new NullLiteral(SourceInfo.NO_INFO), ", "-                                                   new NullLiteral(SourceInfo.NO_INFO));", "+        new RightUnsignedShiftAssignmentExpression(SourceInfo.NONE, ", "+                                                   new NullLiteral(SourceInfo.NONE), ", "+                                                   new NullLiteral(SourceInfo.NONE));", "-        new RightSignedShiftAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                 new NullLiteral(SourceInfo.NO_INFO), ", "-                                                 new NullLiteral(SourceInfo.NO_INFO));", "+        new RightSignedShiftAssignmentExpression(SourceInfo.NONE, ", "+                                                 new NullLiteral(SourceInfo.NONE), ", "+                                                 new NullLiteral(SourceInfo.NONE));", "-        new BitwiseAndAssignmentExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                           new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseAndAssignmentExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                           new NullLiteral(SourceInfo.NONE));", "-        new BitwiseOrAssignmentExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                          new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseOrAssignmentExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                          new NullLiteral(SourceInfo.NONE));", "-        new BitwiseXorAssignmentExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                           new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseXorAssignmentExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                           new NullLiteral(SourceInfo.NONE));", "-        new BitwiseAndExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                 new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseAndExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                 new NullLiteral(SourceInfo.NONE));", "-        new BitwiseOrExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseOrExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                new NullLiteral(SourceInfo.NONE));", "-        new BitwiseXorExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                 new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseXorExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                 new NullLiteral(SourceInfo.NONE));", "-        new BitwiseNotExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO));", "+        new BitwiseNotExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE));", "-        new LeftShiftExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                new NullLiteral(SourceInfo.NO_INFO));", "+        new LeftShiftExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                new NullLiteral(SourceInfo.NONE));", "-        new RightUnsignedShiftExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                         new NullLiteral(SourceInfo.NO_INFO));", "+        new RightUnsignedShiftExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                         new NullLiteral(SourceInfo.NONE));", "-        new RightSignedShiftExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                                       new NullLiteral(SourceInfo.NO_INFO));", "+        new RightSignedShiftExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                                       new NullLiteral(SourceInfo.NONE));", "-      EmptyExpression e = new EmptyExpression(SourceInfo.NO_INFO);", "+      EmptyExpression e = new EmptyExpression(SourceInfo.NONE);", "-        new NoOpExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), ", "-                           new NullLiteral(SourceInfo.NO_INFO));", "+        new NoOpExpression(SourceInfo.NONE, new NullLiteral(SourceInfo.NONE), ", "+                           new NullLiteral(SourceInfo.NONE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570490a280fc007d1067190395ae4f9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "      public void testForNormalTryCatchStatement()", "signatureAfterChange": "      public void testForNormalTryCatchStatement()", "diff": ["-      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, ", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NONE, new BodyItemI[0]);", "+      BracedBody bb = new BracedBody(SourceInfo.NONE, ", "-        new ThrowStatement(SourceInfo.NO_INFO, ", "-        new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                         new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "+        new ThrowStatement(SourceInfo.NONE, ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                         new ClassOrInterfaceType(SourceInfo.NONE, ", "-                                          new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new StringLiteral(SourceInfo.NO_INFO, \"boo\")})))});", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new StringLiteral(SourceInfo.NONE, \"boo\")})))});", "-      Block b = new Block(SourceInfo.NO_INFO, bb);", "-      Block b2 = new Block(SourceInfo.NO_INFO, emptyBody);", "+      Block b = new Block(SourceInfo.NONE, bb);", "+      Block b2 = new Block(SourceInfo.NONE, emptyBody);", "-      NormalTryCatchStatement tcfs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[0]);", "+      NormalTryCatchStatement tcfs = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[0]);", "-      NormalTryCatchStatement inner = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[0]);", "-      NormalTryCatchStatement nested = new NormalTryCatchStatement(SourceInfo.NO_INFO, new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {inner})), new CatchBlock[0]);", "+      NormalTryCatchStatement inner = new NormalTryCatchStatement(SourceInfo.NONE, b, new CatchBlock[0]);", "+      NormalTryCatchStatement nested = new NormalTryCatchStatement(SourceInfo.NONE, new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {inner})), new CatchBlock[0]);", "-      UninitializedVariableDeclarator uvd1 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.util.prefs.BackingStoreException\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "-      FormalParameter fp1 = new FormalParameter(SourceInfo.NO_INFO, uvd1, false);", "+      UninitializedVariableDeclarator uvd1 = new UninitializedVariableDeclarator(SourceInfo.NONE, new ClassOrInterfaceType(SourceInfo.NONE, \"java.util.prefs.BackingStoreException\", new Type[0]), new Word(SourceInfo.NONE, \"e\"));", "+      FormalParameter fp1 = new FormalParameter(SourceInfo.NONE, uvd1, false);", "-      CatchBlock cb = new CatchBlock(SourceInfo.NO_INFO, fp1, b2);", "-      NormalTryCatchStatement nested2 = new NormalTryCatchStatement(SourceInfo.NO_INFO, new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {inner})), new CatchBlock[] {cb});", "+      CatchBlock cb = new CatchBlock(SourceInfo.NONE, fp1, b2);", "+      NormalTryCatchStatement nested2 = new NormalTryCatchStatement(SourceInfo.NONE, new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {inner})), new CatchBlock[] {cb});", "-      BracedBody reb = new BracedBody(SourceInfo.NO_INFO, ", "+      BracedBody reb = new BracedBody(SourceInfo.NONE, ", "-        new ThrowStatement(SourceInfo.NO_INFO, ", "-        new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                         new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "+        new ThrowStatement(SourceInfo.NONE, ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                         new ClassOrInterfaceType(SourceInfo.NONE, ", "-                                         new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0])))});", "+                                         new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0])))});", "-      NormalTryCatchStatement inner3 = new NormalTryCatchStatement(SourceInfo.NO_INFO, new Block(SourceInfo.NO_INFO, reb), new CatchBlock[0]);", "-      NormalTryCatchStatement nested3 = new NormalTryCatchStatement(SourceInfo.NO_INFO, new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {inner3})), new CatchBlock[0]);", "+      NormalTryCatchStatement inner3 = new NormalTryCatchStatement(SourceInfo.NONE, new Block(SourceInfo.NONE, reb), new CatchBlock[0]);", "+      NormalTryCatchStatement nested3 = new NormalTryCatchStatement(SourceInfo.NONE, new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {inner3})), new CatchBlock[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68b320d5221390d1d85f6128a4bf8724", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LValueWithValueTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "               public void testForComplexNameReference()", "signatureAfterChange": "               public void testForComplexNameReference()", "diff": ["-      ComplexNameReference ref1 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java\")), new Word(SourceInfo.NO_INFO, \"lang\"));", "+      ComplexNameReference ref1 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"java\")), new Word(SourceInfo.NONE, \"lang\"));", "-      ComplexNameReference ref2 = new ComplexNameReference(SourceInfo.NO_INFO, ref1, new Word(SourceInfo.NO_INFO, \"String\"));", "+      ComplexNameReference ref2 = new ComplexNameReference(SourceInfo.NONE, ref1, new Word(SourceInfo.NONE, \"String\"));", "-      ComplexNameReference varRef1 = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"myVar\"));", "+      ComplexNameReference varRef1 = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"myVar\"));", "-      ComplexNameReference varRef2 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"myVar\"));", "+      ComplexNameReference varRef2 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), new Word(SourceInfo.NONE, \"myVar\"));", "-      ComplexNameReference varRef3 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Snowball1\")),", "-                                                        new Word(SourceInfo.NO_INFO, \"Santa's Little Helper\"));", "-      ComplexNameReference varRef4 = new ComplexNameReference(SourceInfo.NO_INFO, varRef3, new Word(SourceInfo.NO_INFO, \"Mojo\"));", "+      ComplexNameReference varRef3 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Snowball1\")),", "+                                                        new Word(SourceInfo.NONE, \"Santa's Little Helper\"));", "+      ComplexNameReference varRef4 = new ComplexNameReference(SourceInfo.NONE, varRef3, new Word(SourceInfo.NONE, \"Mojo\"));", "-      ComplexNameReference innerRef0 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef0 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), new Word(SourceInfo.NONE, \"Inner\"));", "-      ComplexNameReference innerRef1 = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef1 = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"Inner\"));", "-      ComplexNameReference innerRef2 = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"s\")), new Word(SourceInfo.NO_INFO, \"Inner\"));", "+      ComplexNameReference innerRef2 = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"s\")), new Word(SourceInfo.NONE, \"Inner\"));", "-      ComplexNameReference noSense = new ComplexNameReference(SourceInfo.NO_INFO, ref2, new Word(SourceInfo.NO_INFO, \"nonsense\"));", "+      ComplexNameReference noSense = new ComplexNameReference(SourceInfo.NONE, ref2, new Word(SourceInfo.NONE, \"nonsense\"));", "-      ComplexNameReference ambigRef = new ComplexNameReference(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"cebu\")), new Word(SourceInfo.NO_INFO, \"ambigThing\"));", "+      ComplexNameReference ambigRef = new ComplexNameReference(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"cebu\")), new Word(SourceInfo.NONE, \"ambigThing\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7705e8847b91035dd5d7cdc8839b004c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "               public void testForComplexMethodInvocation()", "signatureAfterChange": "               public void testForComplexMethodInvocation()", "diff": ["-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"giraffe\")),", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NONE, 5)}));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "-        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"giraffe\")),", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NONE, 4.2)}));", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "-                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "-                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "-        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "+                                    new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"g\")), ", "+                                    new Word(SourceInfo.NONE, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NONE, 4.2)}));", "-      ", "-      assertEquals(\"Error message should be correct\", \"No method found in class giraffe with signature: myName().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"No method found in class giraffe with signature: myName().\", ", "+                   errors.getLast().getFirst());", "-      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[0], new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData noArgsM = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                                          new VariableData[0], new String[0], g, NULL_LITERAL);", "-                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], g, NULL_LITERAL);", "-                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], g, NULL_LITERAL);", "-//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", ", "+//      errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"The class or interface giraffe is private and cannot be accessed from i.like.monkey\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The class or interface giraffe in giraffe is private and cannot be accessed from i.like.monkey\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c74d23680522cf2cbedd545eb975bd69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "          public void testGetQualifiedSymbolData()", "signatureAfterChange": "          public void testGetQualifiedSymbolData()", "diff": ["-                   testLLVisitor.getQualifiedSymbolData(\"int\", SourceInfo.NO_INFO, true, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"int\", SourceInfo.NONE, true, true, true));", "-                   testLLVisitor.getQualifiedSymbolData(\"byte\", SourceInfo.NO_INFO, false, false, false));", "+                   testLLVisitor.getQualifiedSymbolData(\"byte\", SourceInfo.NONE, false, false, false));", "-      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NO_INFO);", "-      SymbolData result = testLLVisitor.getQualifiedSymbolData(\"int[]\", SourceInfo.NO_INFO, true, true, true);", "+      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NONE);", "+      SymbolData result = testLLVisitor.getQualifiedSymbolData(\"int[]\", SourceInfo.NONE, true, true, true);", "-                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, false, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NONE, false, true, true));", "-                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NO_INFO, true, false, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"java.lang.System\", SourceInfo.NONE, true, false, true));", "-      ClassDef cd = new ClassDef(SourceInfo.NO_INFO, ", "+      ClassDef cd = new ClassDef(SourceInfo.NONE, ", "-                                 new Word(SourceInfo.NO_INFO, \"Qwerty\"),", "+                                 new Word(SourceInfo.NONE, \"Qwerty\"),", "-                                 new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]),", "+                                 new ClassOrInterfaceType(SourceInfo.NONE, \"java.lang.Object\", new Type[0]),", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+                                 new BracedBody(SourceInfo.NONE, new BodyItemI[0]));", "-                   bv.getSymbolData(\"Qwerty\", SourceInfo.NO_INFO, true, true));", "+                   bv.getSymbolData(\"Qwerty\", SourceInfo.NONE, true, true));", "-                   bv.getQualifiedSymbolData(\"fully.qualified.Qwerty\", SourceInfo.NO_INFO, false, false, true));", "+                   bv.getQualifiedSymbolData(\"fully.qualified.Qwerty\", SourceInfo.NONE, false, false, true));", "-                   testLLVisitor.getQualifiedSymbolData(\"a.b.c\", SourceInfo.NO_INFO, false, true, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"a.b.c\", SourceInfo.NONE, false, true, true));", "-      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NONE, true, false, true);", "-//      SourceInfo.NO_INFO, true, true, true));", "+//      SourceInfo.NONE, true, true, true));", "-      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NONE, false, false, true);", "-      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NONE, false, false, true);", "-      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NONE, true, false, true);", "-                   testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, false, false, true));", "+                   testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NONE, false, false, true));", "-      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NO_INFO, true, false, true);", "+      result = testLLVisitor.getQualifiedSymbolData(\"fully.qualified.Woah\", SourceInfo.NONE, true, false, true);", "-      SymbolData newsd1 = testLLVisitor.getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NO_INFO, true, true, true);", "+      SymbolData newsd1 = testLLVisitor.getQualifiedSymbolData(\"java.lang.String\", SourceInfo.NONE, true, true, true);", "-      result = testLLVisitor.getSymbolData(\"String\", SourceInfo.NO_INFO);", "+      result = testLLVisitor.getSymbolData(\"String\", SourceInfo.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd5d9957ff1803469e78c77224affc95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "               public void testForSimpleAnonymousClassInstantiation()", "signatureAfterChange": "               public void testForSimpleAnonymousClassInstantiation()", "diff": ["-      ClassOrInterfaceType objType = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]);", "+      ClassOrInterfaceType objType = new ClassOrInterfaceType(SourceInfo.NONE, \"java.lang.Object\", new Type[0]);", "-        new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NONE, ", "-                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+                                              new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NONE, new BodyItemI[0]));", "-      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NO_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NONE,", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                            new Word (SourceInfo.NO_INFO, \"field1\")),", "-          new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                              new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "-                                              new Word (SourceInfo.NO_INFO, \"field2\"))});      ", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                            new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                            new Word (SourceInfo.NONE, \"field1\")),", "+          new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                              new PrimitiveType(SourceInfo.NONE, \"boolean\"), ", "+                                              new Word (SourceInfo.NONE, \"field2\"))});      ", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5))});", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "+      FormalParameter param = ", "+        new FormalParameter(SourceInfo.NONE, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NONE, intt, ", "+                                                                new Word(SourceInfo.NONE, \"j\")), false);", "+      BracedBody bb = ", "+        new BracedBody(SourceInfo.NONE, ", "+                       new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, ", "+                                                                new UninitializedVariableDeclarator[]{uvd}), ", "+                         new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5))});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                                     intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-                                                     new ReferenceType[0], bb);", "-      BracedBody classBb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { vdecl, cmd1 });", "+      ConcreteMethodDef cmd1 = ", "+        new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                              intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "+                              new ReferenceType[0], bb);", "+      BracedBody classBb = new BracedBody(SourceInfo.NONE, new BodyItemI[] { vdecl, cmd1 });", "-      SimpleAnonymousClassInstantiation  complicated = new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                                                                             new ClassOrInterfaceType(SourceInfo.NO_INFO, \"name\", new Type[0]), ", "-                                                                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), ", "-                                                                                             classBb);", "+      SimpleAnonymousClassInstantiation  complicated = ", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NONE, ", "+                                              new ClassOrInterfaceType(SourceInfo.NONE, \"name\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]), ", "+                                              classBb);", "-        new VariableDeclaration(SourceInfo.NO_INFO, _publicMav, new VariableDeclarator[] { ", "-        new InitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                          new ClassOrInterfaceType(SourceInfo.NO_INFO, \"name\", new Type[0]), ", "-                                          new Word(SourceInfo.NO_INFO, \"myAnon\"), complicated)});", "+        new VariableDeclaration(SourceInfo.NONE, _publicMav, new VariableDeclarator[] { ", "+        new InitializedVariableDeclarator(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"name\", new Type[0]), ", "+                                          new Word(SourceInfo.NONE, \"myAnon\"), complicated)});", "-        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+        new ComplexMethodInvocation(SourceInfo.NONE, ", "-                                    new Word(SourceInfo.NO_INFO, \"myMethod\"),", "-                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+                                    new Word(SourceInfo.NONE, \"myMethod\"),", "+                                    new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NONE, 5)}));", "-//      //Test that we can get a field from an anonymous inner class", "+      // Test that we can get a field from an anonymous inner class", "-      Expression nr = new ComplexNameReference(SourceInfo.NO_INFO, complicated, new Word(SourceInfo.NO_INFO, \"field1\"));", "+      Expression nr = new ComplexNameReference(SourceInfo.NONE, complicated, new Word(SourceInfo.NONE, \"field1\"));", "-//      // Now, what if the implemented sd is abstract, and it has an abstract method that our instantiation doesn't override.  Should throw an error.", "+      // Let sd be abstract with an abstract method that our instantiation doesn't override.  Should throw an error.", "-        new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"A.B\", new Type[0]), ", "-                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), ", "-                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NONE, ", "+                                              new ClassOrInterfaceType(SourceInfo.NONE, \"A.B\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]), ", "+                                              new BracedBody(SourceInfo.NONE, new BodyItemI[0]));", "-      a.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      b.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "+      a.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));", "+      b.setMav(new ModifiersAndVisibility(SourceInfo.NONE, new String[] {\"public\"}));"]}], "num": 28954}
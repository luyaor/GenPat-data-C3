{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fae4d4e524abba05e2ab4d3a8f0989a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6daffeba4bffd5e5cf95a04c90b138ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "    public boolean isCastableTo(SymbolData castTo, JavaVersion version)", "signatureAfterChange": "    public boolean isCastableTo(SymbolData castTo, JavaVersion version)", "diff": ["-         if (LanguageLevelConverter.versionSupportsAutoboxing(version)) { //You never box the left, so see if this can be unboxed to be a primitive.", "+         if (LanguageLevelConverter.versionSupportsAutoboxing(version)) { ", "+           //You never box the left, so see if this can be unboxed to be a primitive.", "-       else { //this is an interface", "+       else { // this is an interface", "-         else { //castTo is an interface", "-           //return false if this and castTo contain one or more methods with the same signature but different return types.", "-           if (LanguageLevelConverter.versionSupportsAutoboxing(version)) {return true;} //this check is no longer done in 1.5", "+         else { // castTo is an interface", "+           // return false if this and castTo contain methods with the same signature but different return types.", "+           if (LanguageLevelConverter.versionSupportsAutoboxing(version)) return true; ", "-               //TypeChecker._addError(\"Types \" + this.getName() + \" and \" + castTo.getName() + \" are incompatible.  Both implement \" + md.getName() + \" but have different return types\", md.getSourceInfo());", "+               /* TypeChecker._addError(\"Types \" + this.getName() + \" and \" + castTo.getName() + \" are incompatible.  ", "+                  Both implement \" + md.getName() + \" but have different return types\", md.getSourceInfo()); */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c853cb0aaaa326afbd38091dd4792804", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 88, "signatureBeforeChange": "   public String createUniqueMethodName(String methodName)", "signatureAfterChange": "   public String createUniqueMethodName(String methodName)", "diff": ["-    int counter = 0;  //note: it is possible that the counter could wrap around and this could run infinitely, but that is very unlikely.", "+    int counter = 0;  // Note: loop tests for counter overflow, but memory would be exhausted much earlier", "-      newName = methodName + counter; counter++;", "+      newName = methodName + counter; ", "+      counter++;", "-    if (counter == -1) {throw new RuntimeException(\"Internal Program Error: Unable to rename method \" + methodName + \".  All possible names were taken.  Please report this bug.\");}", "+    if (counter == -1) throw ", "+      new RuntimeException(\"Internal Program Error: Unable to rename method \" + methodName ", "+                             + \".  All possible names were taken.  Please report this bug.\");"]}], "num": 25406}
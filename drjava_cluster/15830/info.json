{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0ee53f3d480f345046692342cd1c714", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be064f9728d5a499bba62f955931ed5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "          public void testHandleInnerInterfaceDef()", "signatureAfterChange": "          public void testHandleInnerInterfaceDef()", "diff": ["-      InnerInterfaceDef cd1 = new InnerInterfaceDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Bart\"),", "+      InnerInterfaceDef cd1 = new InnerInterfaceDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Bart\"),", "-                                       new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                       new BracedBody(NO_INFO, new BodyItemI[0]));", "-      InnerInterfaceDef cd0 = new InnerInterfaceDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "+      InnerInterfaceDef cd0 = new InnerInterfaceDef(NO_INFO, _packageMav, new Word(NO_INFO, \"Lisa\"),", "-                                            new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cd1}));", "+                                            new BracedBody(NO_INFO, new BodyItemI[] {cd1}));", "-      SymbolData sd0 = new SymbolData(outerData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], new LinkedList<SymbolData>(), null); ", "-      SymbolData sd1 = new SymbolData(outerData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], new LinkedList<SymbolData>(), null);", "+      SymbolData sd0 = new SymbolData(outerData.getName() + \"$Lisa\", _packageMav, new TypeParameter[0], ", "+                                      new LinkedList<SymbolData>(), null); ", "+      SymbolData sd1 = new SymbolData(outerData.getName() + \"$Lisa$Bart\", _packageMav, new TypeParameter[0], ", "+                                      new LinkedList<SymbolData>(), null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "379a542d75b3c636d79b14bb787959a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void testCheckForCyclicInheritance()", "signatureAfterChange": "          public void testCheckForCyclicInheritance()", "diff": ["-      InterfaceDef nl = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"name\"), new TypeParameter[0], new ReferenceType[0], new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      assertFalse(\"Should not be cyclic inheritance\", _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "+      InterfaceDef nl = ", "+        new InterfaceDef(NONE, _publicMav, new Word(NONE, \"name\"), new TypeParameter[0], new ReferenceType[0], ", "+                         new BracedBody(NONE, new BodyItemI[0]));", "+      assertFalse(\"Should not be cyclic inheritance\", ", "+                  _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "-      assertFalse(\"Should not be cyclic inheritance\", _btc.checkForCyclicInheritance(_sd4, new LinkedList<SymbolData>(), nl));", "+      assertFalse(\"Should not be cyclic inheritance\", ", "+                  _btc.checkForCyclicInheritance(_sd4, new LinkedList<SymbolData>(), nl));", "-      ", "-      assertTrue(\"Should be cyclic inheritance\", _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "+      assertTrue(\"Should be cyclic inheritance\", ", "+                 _btc.checkForCyclicInheritance(_sd1, new LinkedList<SymbolData>(), nl));", "-      assertEquals(\"The error message should be correct\", \"Cyclic inheritance involving \" + _sd2.getName(), errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", \"Cyclic inheritance involving \" + _sd2.getName(), ", "+                   errors.get(0).getFirst());"]}], "num": 15830}
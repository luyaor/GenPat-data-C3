{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b27b77ba81d2345e90a566bc7632d2a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb796e1eada99ebb18175c0414cd7e75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "5123ecf97583235afcfb8f13ec9081cdf56dd15a", "commitAfterChange": "520cd2cdf6034dac2fccfb5515380300424aef81", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "diff": ["-", "-      if (indexOfClass > -1) {", "-", "-        if (indexOfInterface > -1) {", "-          // compare indices to find the lesser", "-          index = (indexOfClass < indexOfInterface) ?", "-            indexOfClass + \"class\".length() :", "-            indexOfInterface + \"interface\".length();", "-        }", "-        else {", "-          //top level class declaration found", "-          index = indexOfClass + \"class\".length();", "-        }", "+      int indexOfEnum = _findKeywordAtToplevel(\"enum\",text,startPos);", "+        ", "+      //If class exists at top level AND either there is no interface at top level or the index of class precedes the index of the top", "+      //level interface, AND the same for top level enum, then the class is the first top level declaration", "+      if(indexOfClass > -1 ", "+           && (indexOfInterface <= -1 || indexOfClass < indexOfInterface) ", "+           && (indexOfEnum <= -1 || indexOfClass < indexOfEnum) ) {", "+        index = indexOfClass + \"class\".length();", "+      }", "+      else if(indexOfInterface > -1 ", "+                && (indexOfClass <= -1 || indexOfInterface < indexOfClass) ", "+                && (indexOfEnum <= -1 || indexOfInterface < indexOfEnum) ) {", "+        index = indexOfInterface + \"interface\".length();", "+      }", "+      else if(indexOfEnum > -1", "+                && (indexOfClass <= -1 || indexOfEnum < indexOfClass)   ", "+                && (indexOfInterface <= -1 || indexOfEnum < indexOfInterface)) {", "+        index = indexOfEnum + \"enum\".length();", "-        if (indexOfInterface > -1) {", "-          index = indexOfInterface + \"interface\".length();", "-        }", "-        else {", "-          // neither index was valid", "-          throw new ClassNameNotFoundException(\"No top level class name found\");", "-        }", "+        // no index was valid", "+        throw new ClassNameNotFoundException(\"No top level class name found\");", "+        ", "+      ", "+//      if (indexOfClass > -1) {", "+//", "+//        if (indexOfInterface > -1) {", "+//          // compare indices to find the lesser", "+//          index = (indexOfClass < indexOfInterface) ?", "+//            indexOfClass + \"class\".length() :", "+//            indexOfInterface + \"interface\".length();", "+//        }", "+//        else {", "+//          //top level class declaration found", "+//          index = indexOfClass + \"class\".length();", "+//        }", "+//      }", "+//      else {", "+//        if (indexOfInterface > -1) {", "+//          index = indexOfInterface + \"interface\".length();", "+//        }", "+//        else {", "+//          // neither index was valid", "+//          throw new ClassNameNotFoundException(\"No top level class name found\");", "+//        }", "+//      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fceecd492adaa4f638fd3ab7406f979e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "0eaebdce24bcfe2760ebc5f3cb035431d62003fc", "commitAfterChange": "998d49ab48c08c55f388485512c281814a54c029", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private String getFirstClassName(int indexOfClass, int indexOfInterface) throws ClassNameNotFoundException", "signatureAfterChange": "   private String getFirstClassName(int indexOfClass, int indexOfInterface,                                    int indexOfEnum) throws ClassNameNotFoundException", "diff": ["-  private String getFirstClassName(int indexOfClass, int indexOfInterface) throws ClassNameNotFoundException {", "+  private String getFirstClassName(int indexOfClass, int indexOfInterface,", "+                                   int indexOfEnum) throws ClassNameNotFoundException {", "-    if ((indexOfClass == -1) && (indexOfInterface == -1)) throw ClassNameNotFoundException.DEFAULT;", "-    if ((indexOfInterface == -1) || (indexOfClass != -1 && indexOfClass < indexOfInterface)) ", "-      return getNextIdentifier(indexOfClass + \"class\".length());", "-    return getNextIdentifier(indexOfInterface + \"interface\".length());", "+    if ((indexOfClass == -1) && (indexOfInterface == -1) && (indexOfEnum == -1)) throw ClassNameNotFoundException.DEFAULT;", "+    ", "+    // should we convert this to a sorted queue or something like that?", "+    // should we have to extend this past three keywords, it will get rather hard to maintain", "+    if ((indexOfEnum == -1) || ", "+        ((indexOfClass != -1) && (indexOfClass < indexOfEnum)) ||", "+        ((indexOfInterface != -1) && (indexOfInterface < indexOfEnum))) {", "+      // either \"enum\" not found, or \"enum\" found after \"class\" or \"interface\"", "+      // \"enum\" is irrelevant", "+      // we know that at least one of indexOfClass and indexOfInterface is != -1", "+      if ((indexOfInterface == -1) ||", "+          ((indexOfClass != -1) && (indexOfClass < indexOfInterface))) {", "+        // either \"interface\" not found, or \"interface\" found after \"class\"", "+        return getNextIdentifier(indexOfClass + \"class\".length());", "+      }", "+      else {", "+        // \"interface\" found, and found before \"class\"", "+        return getNextIdentifier(indexOfInterface + \"interface\".length());", "+      }", "+    }", "+    else {", "+      // \"enum\" found, and found before \"class\" and \"interface\"", "+      return getNextIdentifier(indexOfEnum + \"enum\".length());", "+    }    "]}], "num": 17629}
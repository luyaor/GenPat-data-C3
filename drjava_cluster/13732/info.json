{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70cc911ad2582bac7e980bf6328888a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5095bbf6e2527f77dbf12288f3ddc22f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void interpretCurrentInteraction()", "signatureAfterChange": "   public void interpretCurrentInteraction()", "diff": ["-//    assert EventQueue.isDispatchThread();  // violated in GlobalModelIOTest, InteractionsModelTest", "-", "-    if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "-    ", "-    String text = _document.getCurrentInteraction();", "-    String toEval = text.trim();", "-    if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "-//          System.err.println(\"Preparing to interpret '\" + toEval +\"'\");", "-    _prepareToInterpret(toEval);  // Writes a newLine!", "-    final String evalText = toEval;", "-", "-    new Thread(new Runnable() { ", "-      public void run() { ", "-        try { interpret(evalText); } ", "-        catch(Throwable t) { DrJavaErrorHandler.record(t); }", "-      } ", "-    }).start(); ", "+    String toEval;", "+    _document.acquireWriteLock();", "+    try {", "+      if (_document.inProgress()) return;  // Don't start a new interaction while one is in progress", "+      ", "+      String text = _document.getCurrentInteraction();", "+      toEval = text.trim();", "+      if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);", "+//          System.err.println(\"Preparing to interpret '\" + text +\"'\");", "+      _prepareToInterpret(text);  // Writes a newLine!", "+    }", "+    finally{ _document.releaseWriteLock(); }", "+    interpret(toEval);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c2715c5abd47563babaf99018980e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": "      public void testSaveAsExistsAndOpen() throws BadLocationException, IOException", "signatureAfterChange": "      public void testSaveAsExistsAndOpen() throws BadLocationException, IOException", "diff": ["+    OpenDefinitionsDocument doc1,doc2;", "+    final File file1,file2;", "-    final File file1 = tempFile(1);", "-    final OpenDefinitionsDocument doc1 = _model.getDocumentForFile(file1);", "+    file1 = tempFile(1);", "+    doc1 = _model.getDocumentForFile(file1);", "-    saveFileAs(doc1, new FileSelector(file1));", "+    doc1.saveFileAs(new FileSelector(file1));", "-    final File file2 = tempFile(2);", "-    final OpenDefinitionsDocument doc2 = _model.getDocumentForFile(file2);", "+    file2 = tempFile(2);", "+    doc2 = _model.getDocumentForFile(file2);", "-    Utilities.invokeAndWait(new Runnable() {", "-      public void run() { ", "-        try { ", "-          doc2.saveFileAs(new WarningFileSelector(file1));", "-          fail(\"Did not warn of open file as expected\");", "-        }", "-        catch (Exception e) { /* Good behavior for file saving ... */ }", "-      }", "-    });", "+    try {", "+      doc2.saveFileAs(new WarningFileSelector(file1));", "+      fail(\"Did not warn of open file as expected\");", "+    }", "+    catch (OpenWarningException e) { /* Good behavior for file saving ... */ }"]}], "num": 13732}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f335dc50f1378f393411010d4aa340b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4afaa81cb249109c1dd3bf873c441ab1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BalancingStreamTokenizer.java", "commitBeforeChange": "1c7e0138b9996497cf68b90499ce66108cdb5ed6", "commitAfterChange": "527b327a81252940ede7723bc28a80b1911fdddb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public String getNextToken() throws IOException", "signatureAfterChange": "   public String getNextToken() throws IOException", "diff": ["+      _isEscape = ((_escape!=null) && (((char)c)==_escape));", "+      ", "-        if (buf.length()>0) {", "-          return buf.toString();", "+        if (_wasEscape) {", "+          // there was a previous escape, do not count as whitespace", "+          buf.append(String.valueOf((char)c));", "+          _wasEscape = false;", "+        }", "+        else {", "+          if (buf.length()>0) {", "+            return buf.toString();", "+          }", "-      // see if it can be a quote", "-      String temp;", "-      temp = findMatch(c, _state.quotes, new Lambda<String,String>() {", "-        public String apply(String in) {", "-          // we didn't find a match", "-          // push the tokens back, all except for the last one", "-          for(int i=in.length()-1; i>0; --i) {", "-            pushToken(in.charAt(i));", "-          }", "-          return null;", "-        }", "-      });", "-      if (temp!=null) {", "-        // we found the beginning of a quote", "-        if (buf.length()>0) {", "-          // but we still have regular text to output", "-          // so we need to push all tokens back", "-          for(int i=temp.length()-1; i>=0; --i) {", "-            pushToken(temp.charAt(i));", "-          }", "-          return buf.toString();", "-        }", "-        String begin = temp;", "-        Stack<String> quoteStack = new Stack<String>();", "-        quoteStack.add(begin);", "-        StringBuilder quoteBuf = new StringBuilder(begin);", "-        ", "-        // push the state of the tokenizer and set up a new state:", "-        // - no whitespace, i.e. whitespace is not discarded", "-        // - scan for both ending and beginning quotes, but as keywords", "-        // - no quotes at all", "-        pushState();", "-        _state = new State();", "-        _state.whitespace.clear();", "-        _state.keywords.clear();", "-        _state.keywords.addAll(_stateStack.peek().quotes);", "-        _state.keywords.addAll(_stateStack.peek().quoteEnds);", "-        _state.quotes.clear();", "-        _state.quoteEnds.clear();", "-        _state.quotePairs.clear();", "-        ", "-        while(quoteStack.size()>0) {", "-          String s = getNextToken();", "-          if (s==null) { break; }", "-          quoteBuf.append(s);", "-          if (_stateStack.peek().quoteEnds.contains(s)) {", "-            // ending quote", "-            String top = quoteStack.peek();", "-            if (_stateStack.peek().quotePairs.get(top).equals(s)) {", "-              // matches top of stack", "-              quoteStack.pop();", "+      if (!_wasEscape) {", "+        // see if it can be a quote", "+        String temp;", "+        temp = findMatch(c, _state.quotes, new Lambda<String,String>() {", "+          public String apply(String in) {", "+            // we didn't find a match", "+            // push the tokens back, all except for the last one", "+            for(int i=in.length()-1; i>0; --i) {", "+              pushToken(in.charAt(i));", "-            else {", "-              // closing quote does not match top of stack", "-              // it may be an opening quote though", "-              if (_stateStack.peek().quotes.contains(s)) {", "-                // beginning quote", "-                quoteStack.add(s);", "+            return null;", "+          }", "+        });", "+        if (temp!=null) {", "+          // we found the beginning of a quote", "+          if (buf.length()>0) {", "+            // but we still have regular text to output", "+            // so we need to push all tokens back", "+            for(int i=temp.length()-1; i>=0; --i) {", "+              pushToken(temp.charAt(i));", "+            }", "+            return buf.toString();", "+          }", "+          String begin = temp;", "+          Stack<String> quoteStack = new Stack<String>();", "+          quoteStack.add(begin);", "+          StringBuilder quoteBuf = new StringBuilder(unescape(begin));", "+          ", "+          // push the state of the tokenizer and set up a new state:", "+          // - no whitespace, i.e. whitespace is not discarded", "+          // - scan for both ending and beginning quotes, but as keywords", "+          // - no quotes at all", "+          pushState();", "+          _state = new State();", "+          _state.whitespace.clear();", "+          _state.keywords.clear();", "+          _state.keywords.addAll(_stateStack.peek().quotes);", "+          _state.keywords.addAll(_stateStack.peek().quoteEnds);", "+          _state.quotes.clear();", "+          _state.quoteEnds.clear();", "+          _state.quotePairs.clear();", "+          ", "+          while(quoteStack.size()>0) {", "+            String s = getNextToken();", "+            if (s==null) { break; }", "+            if (_stateStack.peek().quoteEnds.contains(s)) {", "+              // ending quote", "+              String top = quoteStack.peek();", "+              if (_stateStack.peek().quotePairs.get(top).equals(s)) {", "+                // matches top of stack", "+                quoteBuf.append(unescape(s));", "+                quoteStack.pop();", "-                // neither a matching closing brace nor an opening brace", "-                break;", "+                // closing quote does not match top of stack", "+                // it may be an opening quote though", "+                if (_stateStack.peek().quotes.contains(s)) {", "+                  // beginning quote", "+                  quoteBuf.append(unescape(s));", "+                  quoteStack.add(s);", "+                }", "+                else {", "+                  // neither a matching closing brace nor an opening brace", "+                  quoteBuf.append(s);", "+                  break;", "+                }", "+            else if (_stateStack.peek().quotes.contains(s)) {", "+              // beginning quote", "+              quoteBuf.append(unescape(s));", "+              quoteStack.add(s);", "+            }", "+            else {", "+              quoteBuf.append(s);", "+            }", "-          else if (_stateStack.peek().quotes.contains(s)) {", "-            // beginning quote", "-            quoteStack.add(s);", "-          }", "+          ", "+          // restore the old state", "+          popState();", "+          return quoteBuf.toString();", "-        ", "-        // restore the old state", "-        popState();", "-        return quoteBuf.toString();", "-", "-      // it wasn't a quote, see if it is a keyword", "-      temp = findMatch(c, _state.keywords, new Lambda<String,String>() {", "-        public String apply(String in) {", "-          // we didn't find a match", "-          // push the tokens back, all except for the last one", "-          for(int i=in.length()-1; i>0; --i) {", "-            pushToken(in.charAt(i));", "+      ", "+      if (!_wasEscape) {", "+        // it wasn't a quote, see if it is a keyword", "+        String temp = findMatch(c, _state.keywords, new Lambda<String,String>() {", "+          public String apply(String in) {", "+            // we didn't find a match", "+            // push the tokens back, all except for the last one", "+            for(int i=in.length()-1; i>0; --i) {", "+              pushToken(in.charAt(i));", "+            }", "+            return null;", "-          return null;", "-        }", "-      });", "-      if (temp!=null) {", "-        // we found a keyword", "-        if (buf.length()>0) {", "-          // but we still have regular text to output", "-          // so we need to push all tokens back", "-          for(int i=temp.length()-1; i>=0; --i) {", "-            pushToken(temp.charAt(i));", "+        });", "+        if (temp!=null) {", "+          // we found a keyword", "+          if (buf.length()>0) {", "+            // but we still have regular text to output", "+            // so we need to push all tokens back", "+            for(int i=temp.length()-1; i>=0; --i) {", "+              pushToken(temp.charAt(i));", "+            }", "+            return buf.toString();", "-          return buf.toString();", "+          return unescape(temp);", "-        return temp;", "-      buf.append(String.valueOf((char)c));", "+      if (_isEscape) {", "+        if (_wasEscape) {", "+          buf.append(String.valueOf(_escape));", "+          _isEscape = _wasEscape = false;", "+        }", "+      }", "+      else {", "+        buf.append(String.valueOf((char)c));", "+      }", "+      _wasEscape = _isEscape;", "+    if (_wasEscape) {", "+      // last thing we saw was a lone escape", "+      // generously append it", "+      buf.append(String.valueOf(_escape));", "+    }", "+    // end of stream, return remaining buffer as last token", "+    // or return null to represent the end of the stream"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adfcd4c0a1c53a163a1fb573252c1635", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "cd3fdc4192308881ec8f5fad639265e225a75848", "commitAfterChange": "f09079b576a626b69c1cf6a20aa2d21acb9dbff4", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "   public static File getShortFile(File f) throws IOException", "signatureAfterChange": "   public static File getShortFile(File f) throws IOException", "diff": ["+//      LOG.log(\"parent: \"+parent);", "-          // the format of a line is:", "-          //  Volume in drive C is SYSTEM", "-          //  Volume Serial Number is B4ED-7405", "-          //", "-          //  Directory of C:\\", "-          //", "-          // 09/02/2009  11:02 PM    <DIR>          DOCUME~1     Documents and Settings", "-          // 09/02/2009  11:02 PM               123 LONGFI~1     Long File Name", "-          // 09/02/2009  11:02 PM    <DIR>                       shortdir", "-          // 09/02/2009  11:02 PM               123              short", "-          ", "-          // skip empty lines", "-          if (line.trim().length() == 0) continue;", "-          ", "-          // header starts with whitespace", "-          if (line.startsWith(\" \")) continue;", "-          ", "-          // strip off first two columns", "-          int pos = line.indexOf(\"  \");", "-          if (pos == -1) continue;", "-          pos = line.indexOf(\"  \", pos+2);", "-          if (pos == -1) continue;", "-          line = line.substring(pos).trim();", "-          ", "-          // <DIR>          DOCUME~1     Documents and Settings", "-          //            123 LONGFI~1     Long File Name", "-          // <DIR>                       shortdir", "-          //            123              short", "-          ", "-          // strip off third column (<DIR> or file size)", "-          pos = line.indexOf(' ');", "-          if (pos == -1) continue;", "-          line = line.substring(pos).trim();", "-          ", "-          File shortF = null;", "-          // if the line ends with the file name we are looking for...", "-          if (line.equals(f.getName())) {", "-            // short file name only", "-            shortF = new File(parent, line);", "-            if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "-              // this is the short file name we are looking for", "-              found = true;", "-            }", "-          }", "-          else if (line.startsWith(f.getName())) {", "-            // perhaps already short file name of a long file name", "-            shortF = new File(parent, f.getName());", "-            if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "-              // this is the short file name we are looking for", "-              found = true;", "-            }", "-          }", "-          else if (line.endsWith(\" \"+f.getName())) {", "-            // remove the long file name at the end and trim off whitespace", "-            // DOCUME~1", "-            // LONGFI~1", "-            // ", "-            // ", "-            String shortLine = line.substring(0, line.length() - f.getName().length()).trim();", "+          if (!found) {", "+//            LOG.log(\"\\tline: '\"+line+\"'\");", "+            // the format of a line is:", "+            //  Volume in drive C is SYSTEM", "+            //  Volume Serial Number is B4ED-7405", "+            //", "+            //  Directory of C:\\", "+            //", "+            // 09/02/2009  11:02 PM    <DIR>          DOCUME~1     Documents and Settings", "+            // 09/02/2009  11:02 PM               123 LONGFI~1     Long File Name", "+            // 09/02/2009  11:02 PM    <DIR>                       shortdir", "+            // 09/02/2009  11:02 PM               123              short", "-            if (line.length() == 0) {", "-              // already short", "-              found = true;", "-              shortF = f;", "+            // skip empty lines", "+            if (line.trim().length() == 0) continue;", "+            ", "+            // header starts with whitespace", "+            if (line.startsWith(\" \")) continue;", "+            ", "+            // strip off first two columns", "+            int pos = line.indexOf(\"  \");", "+            if (pos == -1) continue;", "+            pos = line.indexOf(\"  \", pos+2);", "+            if (pos == -1) continue;", "+            line = line.substring(pos).trim();", "+//            LOG.log(\"\\t[1] '\"+line+\"'\");", "+            ", "+            // <DIR>          DOCUME~1     Documents and Settings", "+            //            123 LONGFI~1     Long File Name", "+            // <DIR>                       shortdir", "+            //            123              short", "+            ", "+            // strip off third column (<DIR> or file size)", "+            pos = line.indexOf(' ');", "+            if (pos == -1) continue;", "+            line = line.substring(pos).trim();", "+//            LOG.log(\"\\t[2] '\"+line+\"'\");", "+            ", "+            File shortF = null;", "+            // if the line ends with the file name we are looking for...", "+            if (line.equals(f.getName())) {", "+              // short file name only", "+              shortF = new File(parent, line);", "+//              LOG.log(\"\\t[3] shortF = \"+shortF);", "+              if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "+                // this is the short file name we are looking for", "+//                LOG.log(\"\\t[3a] found\");", "+                found = true;", "+              }", "-            else {", "-              shortF = new File(parent, shortLine);", "+            else if (line.startsWith(f.getName()) && f.getName().contains(\"~\")) {", "+              // perhaps already short file name of a long file name", "+              shortF = new File(parent, f.getName());", "+//              LOG.log(\"\\t[4] shortF = \"+shortF);", "+              if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "+                // this is the short file name we are looking for", "+//                LOG.log(\"\\t[4a] found\");", "+                found = true;", "+              }", "+            }", "+            else if (line.endsWith(\" \"+f.getName())) {", "+              // remove the long file name at the end and trim off whitespace", "+              // DOCUME~1", "+              // LONGFI~1", "+              // ", "+              // ", "+              String shortLine = line.substring(0, line.length() - f.getName().length()).trim();", "+//              LOG.log(\"\\t[5] shortLine: '\"+shortLine+\"'\");", "-              // if this file exists, check that it is exactly the file we're looking for", "-              if (shortF.exists()) {", "-                if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "-                  // this is the short file name we are looking for", "-                  // set flag to true, but continue reading lines from the process", "-                  // otherwise DIR /X may block because the stdout stream is full", "-                  found = true;", "+              if (line.length() == 0) {", "+                // already short", "+                found = true;", "+                shortF = f;", "+//                LOG.log(\"\\t[6] shortF = \"+shortF);", "+              }", "+              else {", "+                shortF = new File(parent, shortLine);", "+//                LOG.log(\"\\t[7] shortF = \"+shortF);", "+                ", "+                // if this file exists, check that it is exactly the file we're looking for", "+                if (shortF.exists()) {", "+                  if (f.getCanonicalFile().equals(shortF.getCanonicalFile())) {", "+                    // this is the short file name we are looking for", "+                    // set flag to true, but continue reading lines from the process", "+                    // otherwise DIR /X may block because the stdout stream is full", "+                    found = true;", "+                  }", "-          }", "-          if (found && (shortF != null)) {", "-            // prepend the short file name to s", "-            s = shortF.getName()+((s.length()==0)?\"\":(File.separator+s));", "+            if (found && (shortF != null)) {", "+              // prepend the short file name to s", "+//              LOG.log(\"\\t[8 ] s = '\"+s+\"'\");", "+              s = shortF.getName()+((s.length()==0)?\"\":(File.separator+s));", "+//              LOG.log(\"\\t[8a] s = '\"+s+\"'\");", "+            }"]}], "num": 15304}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e936d0e86d792030b67a1b588f758af2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a559d80b93f1ca7606ee8a2f6a75c69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "signatureAfterChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "diff": ["-  /** Tests that the interactions pane is reset after a successful compile if it has been used. */", "+  /** Tests that the interactions pane is reset after a successful compile. */", "+    ", "+//    System.err.println(\"Starting testCompileResetsInteractions\");", "-", "-    // Interpret something to force a reset", "-    // Note: the interpreter should reset now without any interactions.", "-//    interpret(\"Object o = new Object();\");", "+    ", "+//    /** Temporarily set the WORKING_DIRECTORY option to same file as the System \"user.dir\" property in the testing", "+//     *  JVM.  When the interactions pane is reset, the new slave JVM holds onto the created temp directory as ", "+//     * \"user.dir\". */", "+//    File savedWorkDir = _model.getRawWorkingDirectory();", "+//    _model.setWorkingDirectory(new File(System.getProperty(\"user.dir\")));", "+//        System.err.println(\"Compile failed\");", "-      listener.wait();", "+      while (listener.notDone()) listener.wait();", "+//    System.err.println(\"Reached end of compilation\");", "+    ", "+//    /* Restore original WORKING_DIRECTORY property in .drjava */", "+//    _model.setWorkingDirectory(savedWorkDir);", "+    ", "+//    System.err.println(\"Checked that compile occurred\");", "+//    System.err.println(\"Removed compilation listener\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40333c8f23c6d3933d00194f3a434f4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "098be4c27233835145531c86355bc697a3b62bfd", "commitAfterChange": "28db8fb2942dc00cad50f5244fe215d573867721", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private int _getDistToStart(TokenList.Iterator copyCursor)", "signatureAfterChange": "   private int _getDistToStart(TokenList.Iterator copyCursor)", "diff": ["-  /** Returns distance to previous newline. */", "+  /** Returns distance to previous newline (not including the newline itself). */", "+//    System.err.println(\"_getDistToStart called on \" + simpleString() + \" with cursor \" + copyCursor);", "+    ", "-    while (! copyCursor.atStart() && ! copyCursor.current().getType().equals(\"\\n\"))", "-    {", "+//    System.err.println(\"reduced model updated to \" + simpleString() + \" with cursor \" + copyCursor);", "+    ", "+    while (! copyCursor.atStart() && ! copyCursor.current().isNewline()) {", "+//      System.err.println(\"current token is \" + copyCursor.current() + \" with size \" + copyCursor.current().getSize());", "+//      System.err.println(\"reduced model updated to \" + simpleString() + \" with cursor \" + copyCursor);", "+//      System.err.println(\"walk count updated to \" + walkcount);", "-    ", "+//    System.err.println(\"On loop exit, reduced model is \" + simpleString() + \" with cursor \" + copyCursor);", "+//    System.err.println(\"distToStart = \" + walkcount);", "+//    System.err.println(\"current is \" + copyCursor.current());", "+//    System.err.println(\"getType is \" + copyCursor.current().getType());", "+    ", "+    assert copyCursor.current().isNewline();", "+//    System.err.println(\"Returning walk count of \" + walkcount);"]}], "num": 11492}
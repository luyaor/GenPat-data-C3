{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb009c55df6893396341c5c40602ac40", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3719deda1034006b47baedb0619977be", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelComment.java", "commitBeforeChange": "9ac042462ff2ccafde5facafd742598846cdb098", "commitAfterChange": "129e16928b37d25f1eb9e60e117e48de5dda4c3c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-      if ((copyCursor.current().getType().equals(\"//\"))&&", "-          (copyCursor.prevItem().getType().equals(\"*\")))", "-      { // now pointing to", "-        copyCursor.current().setType(\"/\");", "+      if ((copyCursor.current().getType().equals(\"\")) &&", "+          (copyCursor.prevItem().getType().equals(\"\"))) {", "+        // delete first Gap and augment the second", "-        copyCursor.current().setType(\"*/\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "+        int growth = copyCursor.current().getSize();", "+        copyCursor.remove();", "+        copyCursor.current().grow(growth);", "-      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "-               (copyCursor.prevItem().getType().equals(\"*\")))", "-      {", "-        copyCursor.current().setType(\"*\");", "+      else if (copyCursor.current().getType().length() == 2) {", "+        String tail = copyCursor.current().getType().substring(1,2);", "+        String head = copyCursor.prevItem().getType() + ", "+          copyCursor.current().getType().substring(0,1);        ", "+        copyCursor.current().setType(tail);", "-        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setType(head);", "-        return true;", "-      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "-               (copyCursor.prevItem().getType().equals(\"/\")))", "-      {", "-        copyCursor.current().setType(\"*\");", "+      else {", "+        // delete the first Brace and augment the second", "-        copyCursor.current().setType(\"//\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "+        copyCursor.remove();", "+        copyCursor.current().setType(first + second);", "-      else if ((copyCursor.current().getType().equals(\"//\")) &&", "-               (copyCursor.prevItem().getType().equals(\"/\")))", "-      {", "-        copyCursor.current().setType(\"/\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"//\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      }", "-      else if ((copyCursor.current().getType().equals(\"\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\")))", "-     {", "-       // delete first Gap and augment the second", "-       copyCursor.prev();", "-       int growth = copyCursor.current().getSize();", "-       copyCursor.remove();", "-       copyCursor.current().grow(growth);", "-       return true;", "-     }", "-      // the backslash examples.", "-      // \\-\\\\", "-      else if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-      {", "-        copyCursor.current().setType(\"\\\\\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"\\\\\\\\\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      } // \\-\\\"", "-      else if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-      {", "-        copyCursor.current().setType(\"\\\"\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"\\\\\\\\\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      } // \\-\\'", "-      else if ((copyCursor.current().getType().equals(\"\\\\'\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-      {", "-        copyCursor.current().setType(\"'\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"\\\\\\\\\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      }", "-      // delete the first Brace and augment the second", "-      copyCursor.prev();", "-      copyCursor.remove();", "-      copyCursor.current().setType(first + second);", "-    ", "-    // we couldn't combine, so move back and return", "-    copyCursor.prev();", "-    return false;", "+    else {", "+      // we couldn't combine, so move back and return", "+      copyCursor.prev();", "+      return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a04e44d9ed2600510483ed0238ca672", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelComment.java", "commitBeforeChange": "9ac042462ff2ccafde5facafd742598846cdb098", "commitAfterChange": "129e16928b37d25f1eb9e60e117e48de5dda4c3c", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "signatureAfterChange": "   private boolean  _combineCurrentAndNextIfFind     (String first,       String second,       ModelList<ReducedToken>.Iterator copyCursor)", "diff": ["-      if ((copyCursor.current().getType().equals(\"//\"))&&", "-          (copyCursor.prevItem().getType().equals(\"*\")))", "-      { // now pointing to", "-        copyCursor.current().setType(\"/\");", "+      if ((copyCursor.current().getType().equals(\"\")) &&", "+          (copyCursor.prevItem().getType().equals(\"\"))) {", "+        // delete first Gap and augment the second", "-        copyCursor.current().setType(\"*/\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "+        int growth = copyCursor.current().getSize();", "+        copyCursor.remove();", "+        copyCursor.current().grow(growth);", "-      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "-               (copyCursor.prevItem().getType().equals(\"*\")))", "-      {", "-        copyCursor.current().setType(\"*\");", "+      else if (copyCursor.current().getType().length() == 2) {", "+        String tail = copyCursor.current().getType().substring(1,2);", "+        String head = copyCursor.prevItem().getType() + ", "+          copyCursor.current().getType().substring(0,1);        ", "+        copyCursor.current().setType(tail);", "-        copyCursor.current().setType(\"*/\");", "+        copyCursor.current().setType(head);", "-        return true;", "-      else if ((copyCursor.current().getType().equals(\"/*\")) &&", "-               (copyCursor.prevItem().getType().equals(\"/\")))", "-      {", "-        copyCursor.current().setType(\"*\");", "+      else {", "+        // delete the first Brace and augment the second", "-        copyCursor.current().setType(\"//\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "+        copyCursor.remove();", "+        copyCursor.current().setType(first + second);", "-      else if ((copyCursor.current().getType().equals(\"//\")) &&", "-               (copyCursor.prevItem().getType().equals(\"/\")))", "-      {", "-        copyCursor.current().setType(\"/\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"//\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      }", "-      else if ((copyCursor.current().getType().equals(\"\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\")))", "-     {", "-       // delete first Gap and augment the second", "-       copyCursor.prev();", "-       int growth = copyCursor.current().getSize();", "-       copyCursor.remove();", "-       copyCursor.current().grow(growth);", "-       return true;", "-     }", "-      // the backslash examples.", "-      // \\-\\\\", "-      else if ((copyCursor.current().getType().equals(\"\\\\\\\\\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-      {", "-        copyCursor.current().setType(\"\\\\\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"\\\\\\\\\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      } // \\-\\\"", "-      else if ((copyCursor.current().getType().equals(\"\\\\\\\"\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-      {", "-        copyCursor.current().setType(\"\\\"\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"\\\\\\\\\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      } // \\-\\'", "-      else if ((copyCursor.current().getType().equals(\"\\\\'\")) &&", "-               (copyCursor.prevItem().getType().equals(\"\\\\\")))", "-      {", "-        copyCursor.current().setType(\"'\");", "-        copyCursor.prev();", "-        copyCursor.current().setType(\"\\\\\\\\\");", "-        copyCursor.current().setState(FREE);", "-        return true;", "-      }", "-      // delete the first Brace and augment the second", "-      copyCursor.prev();", "-      copyCursor.remove();", "-      copyCursor.current().setType(first + second);", "-    ", "-    // we couldn't combine, so move back and return", "-    copyCursor.prev();", "-    return false;", "+    else {", "+      // we couldn't combine, so move back and return", "+      copyCursor.prev();", "+      return false;", "+    }"]}], "num": 18299}
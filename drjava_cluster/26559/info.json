{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ad272b37e281ac9637b1222c259a216", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a14055216138bf26d27546232c4be15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Option.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "     T remove(DefaultOptionMap om)", "signatureAfterChange": "      void notifyListeners(Configuration config, T val)", "diff": ["-    /** the destructor for a mapping in the magic-typed hashtable. */", "-    T remove(DefaultOptionMap om) { return map.remove(om); }", "+    void notifyListeners(Configuration config, T val) {", "+\tVector<OptionListener<T>> v = listeners.get(config);", "+\tif(v==null) return; // no listeners", "+\tOptionEvent e = new OptionEvent<T>(this,val);", "+\tint size = v.size();", "+\tfor(int i = 0; i < size; i++) {", "+\t    v.elementAt(i).optionChanged(e);", "+\t}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e81a3ab63b3749a511981bc0bc63b0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Option.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   void notifyListeners(Configuration config, T val)", "signatureAfterChange": "   void notifyListeners(Configuration config, T val)", "diff": ["-   */", "+  /** Sends an OptionEvent to all OptionListeners who have registered on this Option. */", "-    Vector<OptionListener<T>> v = listeners.get(config);", "-    if (v==null) return; // no listeners", "-    OptionEvent<T> e = new OptionEvent<T>(this,val);", "-    int size = v.size();", "-    for (int i = 0; i < size; i++) {", "-      v.get(i).optionChanged(e);", "-    }", "+    final Vector<OptionListener<T>> v = listeners.get(config);", "+    if (v == null) return; // no listeners", "+    final OptionEvent<T> e = new OptionEvent<T>(this,val);", "+    final int size = v.size();", "+    Utilities.invokeLater(new Runnable() { ", "+      public void run() {", "+        for (int i = 0; i < size; i++) v.get(i).optionChanged(e);", "+      }", "+    });"]}], "num": 26559}
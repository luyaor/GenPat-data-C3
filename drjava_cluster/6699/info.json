{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ac7c130c4c03bd8773dba65225c6902", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02ce6cf5ee5d9e8e48564829780ed9ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": "    final public List<Type> TypeArguments() throws ParseException", "signatureAfterChange": "   final public List<Type> TypeArguments() throws ParseException", "diff": ["+//    | ", "-    Type temp;", "+    ReferenceType hookedType = new ReferenceType(\"java.lang.Object\");", "+    Type temp = new HookType(hookedType, false);", "+    Token hook = null;", "+    Token supered = null;", "-    temp = type();", "+    if (jj_2_63(2147483647)) {", "+      hook = jj_consume_token(HOOK);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case EXTENDS:", "+      case SUPER:", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case EXTENDS:", "+          jj_consume_token(EXTENDS);", "+          break;", "+        case SUPER:", "+          jj_consume_token(SUPER);", "+          break;", "+        default:", "+          jj_la1[211] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+        hookedType = ReferenceTypeName();", "+        break;", "+      default:", "+        jj_la1[212] = jj_gen;", "+        ;", "+      }", "+    } else {", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case SHORT:", "+      case IDENTIFIER:", "+        temp = type();", "+        break;", "+      default:", "+        jj_la1[213] = jj_gen;", "+        jj_consume_token(-1);", "+        throw new ParseException();", "+      }", "+    }", "+      if(hook!= null)", "+        temp = new HookType(hookedType, (supered!=null));", "-        jj_la1[212] = jj_gen;", "+        jj_la1[214] = jj_gen;", "-      temp = type();", "+      if (jj_2_64(2147483647)) {", "+        hook = jj_consume_token(HOOK);", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case EXTENDS:", "+        case SUPER:", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case EXTENDS:", "+            jj_consume_token(EXTENDS);", "+            break;", "+          case SUPER:", "+            jj_consume_token(SUPER);", "+            break;", "+          default:", "+            jj_la1[215] = jj_gen;", "+            jj_consume_token(-1);", "+            throw new ParseException();", "+          }", "+          hookedType = ReferenceTypeName();", "+          break;", "+        default:", "+          jj_la1[216] = jj_gen;", "+          ;", "+        }", "+      } else {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case DOUBLE:", "+        case FLOAT:", "+        case INT:", "+        case LONG:", "+        case SHORT:", "+        case IDENTIFIER:", "+          temp = type();", "+          break;", "+        default:", "+          jj_la1[217] = jj_gen;", "+          jj_consume_token(-1);", "+          throw new ParseException();", "+        }", "+      }", "+      if(hook!= null)", "+        temp = new HookType(hookedType, (supered!=null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b1177e1db3cb492126558f510d88db0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/autocomplete/parser/ACParser.java", "commitBeforeChange": "aa287bbb1c9881659edc121fbb5e7531149b5808", "commitAfterChange": "31b9f8dbee4928a805aac8571a8f70b93337e1d8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   final public SourceFile SourceFile() throws ParseException", "signatureAfterChange": "   final public SourceFile SourceFile() throws ParseException", "diff": ["+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BREAK:", "+        case BYTE:", "+        case CASE:", "+        case CATCH:", "+        case CHAR:", "+        case CLASS:", "+        case CONST:", "+        case CONTINUE:", "+        case _DEFAULT:", "+        case DO:", "+        case DOUBLE:", "+        case ELSE:", "+        case EXTENDS:", "+        case FALSE:", "+        case FINAL:", "+        case FINALLY:", "+        case FLOAT:", "+        case FOR:", "+        case GOTO:", "+        case IF:", "+        case IMPLEMENTS:", "+        case IMPORT:", "+        case INSTANCEOF:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case NEW:", "+        case NULL:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case RETURN:", "+        case SHORT:", "+        case STRICTFP:", "+        case STATIC:", "+        case SUPER:", "+        case SWITCH:", "+        case SYNCHRONIZED:", "+        case THIS:", "+        case THROW:", "+        case THROWS:", "+        case TRANSIENT:", "+        case TRUE:", "+        case TRY:", "+        case VOID:", "+        case VOLATILE:", "+        case WHILE:", "+        case DECIMAL_LITERAL:", "+        case HEX_LITERAL:", "+        case OCTAL_LITERAL:", "+        case LONG_DECIMAL_LITERAL:", "+        case LONG_HEX_LITERAL:", "+        case LONG_OCTAL_LITERAL:", "+        case DOUBLE_FLOATING_POINT_LITERAL:", "+        case FLOATING_POINT_LITERAL:", "+        case CHARACTER_LITERAL:", "+        case STRING_LITERAL:", "+        case IDENTIFIER:", "+        case LPAREN:", "+        case RPAREN:", "+        case LBRACE:", "+        case RBRACE:", "+        case LBRACKET:", "+        case RBRACKET:", "+        case SEMICOLON:", "+        case COMMA:", "+        case DOT:", "+        case ASSIGN:", "+        case GT:", "+        case LT:", "+        case BANG:", "+        case TILDE:", "+        case HOOK:", "+        case COLON:", "+        case EQ:", "+        case LE:", "+        case GE:", "+        case NE:", "+        case SC_OR:", "+        case SC_AND:", "+        case INCR:", "+        case DECR:", "+        case PLUS:", "+        case MINUS:", "+        case STAR:", "+        case SLASH:", "+        case BIT_AND:", "+        case BIT_OR:", "+        case XOR:", "+        case REM:", "+        case LSHIFT:", "+        case RSIGNEDSHIFT:", "+        case RSSHIFT1:", "+        case RSSHIFT2:", "+        case RUSHIFT1:", "+        case RUSHIFT2:", "+        case RUSHIFT3:", "+        case PLUSASSIGN:", "+        case MINUSASSIGN:", "+        case STARASSIGN:", "+        case SLASHASSIGN:", "+        case ANDASSIGN:", "+        case ORASSIGN:", "+        case XORASSIGN:", "+        case REMASSIGN:", "+        case LSHIFTASSIGN:", "+        case RSIGNEDSHIFTASSIGN:", "+        case RUNSIGNEDSHIFTASSIGN:", "+        case OTHER:", "-        try {", "-          temp1 = PackageStatement();", "-          packageStatements.addLast(temp1);", "-        } catch (ParseException e) {", "-", "-        }", "-      }", "-      label_2:", "-      while (true) {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case IMPORT:", "-          ;", "-          break;", "-        default:", "-          jj_la1[1] = jj_gen;", "-          break label_2;", "-        }", "-        try {", "+        if (jj_2_1(2147483647)) {", "-        } catch (ParseException e) {", "-", "-        }", "-      }", "-      label_3:", "-      while (true) {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case ABSTRACT:", "-        case CLASS:", "-        case FINAL:", "-        case INTERFACE:", "-        case NATIVE:", "-        case PRIVATE:", "-        case PROTECTED:", "-        case PUBLIC:", "-        case STRICTFP:", "-        case STATIC:", "-        case SYNCHRONIZED:", "-        case TRANSIENT:", "-        case VOLATILE:", "-        case SEPARATOR:", "-          ;", "-          break;", "-        default:", "-          jj_la1[2] = jj_gen;", "-          break label_3;", "-        }", "-        if (jj_2_1(2147483647)) {", "+        } else if (jj_2_2(2147483647)) {", "+          temp1 = PackageStatement();", "+          packageStatements.addLast(temp1);", "+        } else if (jj_2_3(2147483647)) {", "-        } else if (jj_2_2(2147483647)) {", "+        } else if (jj_2_4(2147483647)) {", "-        } else if (jj_2_3(2147483647)) {", "-          jj_consume_token(SEPARATOR);", "-         System.out.println(\"received separator\");", "+        } else if (jj_2_5(2147483647)) {", "+          AnyTokenButEOF();"]}], "num": 6699}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aedebc55ee54053d6dae6740b61f8a21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ffcb846fa047d998e2dd0f844361796", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "diff": ["-    String key = \"findPrevDelimiter:\" + pos;", "-    for (int i = 0; i < delims.length; i++) { key += \":\" + delims[i]; }", "-    key += \":\" + skipParenPhrases;", "+    StringBuffer keyBuf = new StringBuffer(\"findPrevDelimiter:\").append(pos);", "+    for (char ch: delims) { keyBuf.append(':').append(ch); }", "+    keyBuf.append(':').append(skipParenPhrases);", "+    String key = keyBuf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "765fb1f73f675a08b99eed6f4e812f32", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classfile/JVMUtilities.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static String createMethodDescriptor(String rt, String[] pt)", "signatureAfterChange": "   public static String createMethodDescriptor(String rt, String[] pts)", "diff": ["+  public static String createMethodDescriptor(String rt, String[] pts) {", "+    if (pts != null) {", "+      StringBuffer result = new StringBuffer(\"(\");", "+      for (String pt: pts) result.append(pt);", "+      return result.append(')').append(rt).toString();  // Note: append operation modifies the receiver!", "+    } ", "+    return rt;", "-   */", "-  public static String createMethodDescriptor(String rt, String[] pt) {", "-    if (pt != null) {", "-      String result = \"(\";", "-      for (int i = 0; i < pt.length; i++) {", "-        result += pt[i];", "-      }", "-      return result + \")\" + rt;", "-    } else {", "-      return rt;", "-    }", "-  }"]}], "num": 26688}
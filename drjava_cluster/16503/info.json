{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70ffa2af57663d0077fc771ae5b99d4c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e7d1e3bc9c3308142829f43a6497254", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName,                                            MethodData[] accessors)", "diff": ["-  protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName, MethodData[] accessors) {", "+  protected static void writeSafeToString(SymbolData sd, int baseIndent, String valueToStringName, ", "+                                          MethodData[] accessors) {", "-    VariableData toStringFlag = new VariableData(flagName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),", "-                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),", "+    VariableData toStringFlag = new VariableData(flagName, ", "+                                                 new ModifiersAndVisibility(NO_INFO, ", "+                                                                            new String[]{ \"private\", \"static\" }),", "+                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", SourceInfo.NO_INFO, ", "+                                                          false, false, false, false),", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\" + newLine);", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                    \"/** This field is automatically generated by the Language Level Converter. */\" + newLine);", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) +", "+                    \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da675b643d0e7fa095e93f1ade6937b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r   protected static void writeSimpleHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, \r                                             String valueHashCodeName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSimpleHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef,                                              String valueHashCodeName, MethodData[] accessors)", "diff": ["-   */\r", "-  protected static void writeSimpleHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, \r", "-                                            String valueHashCodeName, MethodData[] accessors) {\r", "-    \r", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\");\r", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"public int hashCode() {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"return getClass().hashCode()\");\r", "-    for (int i = 0; i < accessors.length; i++) {\r", "-      _writeToFileOut(\" ^ \" + newLine + indentString(baseIndent, 4));\r", "-      SymbolData type = accessors[i].getReturnType().getSymbolData();\r", "-      \r", "-      if (! type.isPrimitiveType()) {\r", "-        _writeToFileOut(\"(\" + accessors[i].getName() + \"() == null ? 0 : \" + accessors[i].getName() + \"().hashCode())\");\r", "-      }\r", "-      else if (type == SymbolData.BOOLEAN_TYPE) {\r", "-        _writeToFileOut(\"(\" + accessors[i].getName() + \"() ? 1 : 0)\");\r", "-      }\r", "-      else if (type.isAssignableTo(SymbolData.INT_TYPE, _targetVersion)) {\r", "-        _writeToFileOut(accessors[i].getName() + \"()\");\r", "-      }\r", "-      else {\r", "-        _writeToFileOut(\"(int) \" + accessors[i].getName() + \"()\");           \r", "-      }\r", "-    }\r", "-    \r", "-    _writeToFileOut(\";\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);\r", "-  }\r", "+   */", "+  protected static void writeSimpleHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, ", "+                                            String valueHashCodeName, MethodData[] accessors) {", "+    ", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\");", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"public int hashCode() {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"return getClass().hashCode()\");", "+    for (int i = 0; i < accessors.length; i++) {", "+      _writeToFileOut(\" ^ \" + newLine + indentString(baseIndent, 4));", "+      SymbolData type = accessors[i].getReturnType().getSymbolData();", "+      ", "+      if (! type.isPrimitiveType()) {", "+        _writeToFileOut(\"(\" + accessors[i].getName() + \"() == null ? 0 : \" + accessors[i].getName() + \"().hashCode())\");", "+      }", "+      else if (type == SymbolData.BOOLEAN_TYPE) {", "+        _writeToFileOut(\"(\" + accessors[i].getName() + \"() ? 1 : 0)\");", "+      }", "+      else if (type.isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+        _writeToFileOut(accessors[i].getName() + \"()\");", "+      }", "+      else {", "+        _writeToFileOut(\"(int) \" + accessors[i].getName() + \"()\");           ", "+      }", "+    }", "+    ", "+    _writeToFileOut(\";\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);", "+  }"]}], "num": 16503}
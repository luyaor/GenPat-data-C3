{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a334d6859d1b37abb596ac57e842d4d7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e6554d31cb3ab771c11ce55567ee66", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InteractionsProcessor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public String preProcess(String s) throws ParseException", "signatureAfterChange": "   public String preProcess(String s) throws ParseException", "diff": ["-    InteractionsInput tree = new GJParser( new StringReader( s ) ).InteractionsInput();", "-    JavaASTVisitor typeEraser = new TypeEraser();", "-    JavaAST typeErasedTree = (JavaAST) tree.accept( typeEraser );", "-    String source =  InteractionsPrinter.generateSource( typeErasedTree );", "+    InteractionsInput tree = new GJParser(new StringReader(s)) . InteractionsInput();", "+    JavaASTVisitor<JavaAST> typeEraser = new TypeEraser();", "+    JavaAST typeErasedTree = tree.accept(typeEraser);", "+    String source =  InteractionsPrinter.generateSource(typeErasedTree);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d021902cba1cacadebd0460ea93a6877", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "544421971f950fddb0a2cb99f1a22ae9b799a06f", "commitAfterChange": "dab158c5d408db6c4f930265bca0246d6ef37f1b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["+      public synchronized void interpreterReady(File wd) { interpreterReadyCount++; }", "-    ", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "+    listener.assertInterpreterResettingCount(0);", "-", "+    // we want a ready notification here; closeAllFiles is supposed to reset", "+    // the interactions pane, but the interpreter is supposed to be in a fresh running state", "+    // so it should immediately say \"ready\" without resetting the interpreter itself", "+    listener.assertInterpreterReadyCount(1);", "-    assertLength(0, _model.getActiveDocument()); ", "+    assertLength(0, _model.getActiveDocument());", "-", "+    "]}], "num": 7560}
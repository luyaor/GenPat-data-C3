{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e55ec570f29af3aac80c2be4cef2309", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ecf37be6f791647e18e08bf7c42c5ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "d3adc91fdbb30f43d4b7b0939237b3e1295f7b49", "commitAfterChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-      // Restart if there are custom JVM args", "-      boolean restart = (getConfig().getSetting(MASTER_JVM_ARGS).length() > 0)", "-        || ((!(\"\".equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))) &&", "-            (!(edu.rice.cs.drjava.config.OptionConstants.heapSizeChoices.get(0).equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))));", "-      ", "-      LinkedList<String> classArgsList = new LinkedList<String>();", "-      classArgsList.addAll(_filesToOpen);", "-      ", "-      // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "-      if (_showDebugConsole) { classArgsList.addFirst(\"-debugConsole\"); }", "-      ", "-      if (! _propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "-        // Placed in reversed order to get \"-config filename\"", "-        classArgsList.addFirst(_propertiesFile.getAbsolutePath());", "-        classArgsList.addFirst(\"-config\");", "-      }", "-      ", "-      String[] classArgs = classArgsList.toArray(new String[0]);", "-      ", "-      if (restart) {", "-        String classPath = System.getProperty(\"java.class.path\");", "+      // The code below is in a loop so that DrJava can retry launching itself", "+      // if it fails the first time after resetting the configuration file.", "+      // This helps for example when the main JVM heap size is too large, and", "+      // the JVM cannot be created.", "+      int failCount = 0;", "+      while(failCount<2) {", "+        // Restart if there are custom JVM args", "+        boolean restart = (getConfig().getSetting(MASTER_JVM_ARGS).length() > 0)", "+          || ((!(\"\".equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))) &&", "+              (!(edu.rice.cs.drjava.config.OptionConstants.heapSizeChoices.get(0).equals(DrJava.getConfig().getSetting(MASTER_JVM_XMX).trim()))));", "-        // Run a new copy of DrJava and exit", "-        try {", "+        LinkedList<String> classArgsList = new LinkedList<String>();", "+        classArgsList.addAll(_filesToOpen);", "+        ", "+        // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "+        if (_showDebugConsole) { classArgsList.addFirst(\"-debugConsole\"); }", "+        ", "+        if (! _propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "+          // Placed in reversed order to get \"-config filename\"", "+          classArgsList.addFirst(_propertiesFile.getAbsolutePath());", "+          classArgsList.addFirst(\"-config\");", "+        }", "+        ", "+        String[] classArgs = classArgsList.toArray(new String[0]);", "+        ", "+        if (restart) {", "+          String classPath = System.getProperty(\"java.class.path\");", "+          ", "+          // Run a new copy of DrJava and exit", "+          try {", "-          ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, _jvmArgs.toArray(new String[0]), null);", "+            Process p = ExecJVM.runJVM(\"edu.rice.cs.drjava.DrJavaRoot\", classArgs, classPath, _jvmArgs.toArray(new String[0]), null);", "+            final Thread mainThread = Thread.currentThread();", "+            // this thread waits some time for something to go wrong in the spawned JVM (p)", "+            // then it interrupts the main thread, which is waiting for the JVM to end", "+            Thread sleepThread = new Thread(new Runnable() {", "+              public void run() {", "+                try {", "+                  Thread.sleep(WAIT_BEFORE_DECLARING_SUCCESS); // wait 5 seconds for something to go wrong.", "+                  mainThread.interrupt();", "+                }", "+                catch(InterruptedException e) { /* just check if something has gone wrong now, even if it's not 5 seconds later */ }", "+              }", "+            });", "+            sleepThread.setDaemon(true);", "+            sleepThread.start(); // this will wait 5 seconds and then interrupt the main thread waiting for the other JVM to quit", "+            // let the main threat wait for the JVM to end", "+            try {", "+              p.waitFor();", "+              sleepThread.interrupt();", "+            }", "+            catch(InterruptedException e) { /* we got interrupted by the sleepThread */ }", "+            try {", "+              // check how the JVM ended", "+              if (p.exitValue()!=0) {", "+                // ended in failure", "+                if (failCount>0) {", "+                  // 2nd time that spawning has failed, give up", "+                  JOptionPane.showMessageDialog(null,", "+                                                \"DrJava was unable to start, and resetting your configuration\\n\"+", "+                                                \"did not help. Please file a support request at\\n\"+", "+                                                \"https://sourceforge.net/projects/drjava/\",", "+                                                \"Could Not Start DrJava\",", "+                                                JOptionPane.ERROR_MESSAGE);", "+                  System.exit(0);", "+                }", "+                else {", "+                  // 1st time that spawning has failred, offer to reset configuration", "+                  int result = JOptionPane.showConfirmDialog(null,", "+                                                             \"DrJava was unable to start. Your configuration file (.drjava)\\n\"+", "+                                                             \"might be corrupt. Do you want to reset your configuration?\",", "+                                                             \"Could Not Start DrJava\",", "+                                                             JOptionPane.YES_NO_OPTION);", "+                  if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+                  // reset configuration, save, and reload it", "+                  getConfig().resetToDefaults();", "+                  getConfig().saveConfiguration();", "+                  if (!handleCommandLineArgs(args)) { System.exit(0); }", "+                  ++failCount;", "+                  continue;", "+                }", "+              }", "+            }", "+            catch(IllegalThreadStateException e) {", "+              // the other JVM hasn't finished yet, assume it's running well", "+            }", "+          }", "+          catch (IOException ioe) {", "+            // Display error", "+            final String[] text = {", "+              \"DrJava was unable to load its compiler and debugger.  Would you \",", "+              \"like to start DrJava without a compiler and debugger?\", \"\\nReason: \" + ioe.toString()", "+            };", "+            int result = JOptionPane.showConfirmDialog(null, text, \"Could Not Load Compiler and Debugger\",", "+                                                       JOptionPane.YES_NO_OPTION);", "+            if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+          }", "-        catch (IOException ioe) {", "-          // Display error", "-          final String[] text = {", "-            \"DrJava was unable to load its compiler and debugger.  Would you \",", "-            \"like to start DrJava without a compiler and debugger?\", \"\\nReason: \" + ioe.toString()", "-          };", "-          int result = JOptionPane.showConfirmDialog(null, text, \"Could Not Load Compiler and Debugger\",", "-                                                     JOptionPane.YES_NO_OPTION);", "-          if (result != JOptionPane.YES_OPTION) { System.exit(0); }", "+        ", "+        else {", "+          // No restart -- just invoke DrJavaRoot.main.", "+          DrJavaRoot.main(classArgs);", "-      }", "-      ", "-      else {", "-        // No restart -- just invoke DrJavaRoot.main.", "-        DrJavaRoot.main(classArgs);", "+        break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecfa82498d86945990d4cb467d5aec6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "commitAfterChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testErrorsArrayInOrder() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder() throws Exception", "diff": ["-  public void testErrorsArrayInOrder() throws Exception {", "+  public void testErrorsArrayInOrder() throws Exception { ", "-    // Temporarily disabled?  Why?", "- ", "-    /*", "-       ", "-    doc.startCompile();", "+    ", "+    TestShouldSucceedListener listener = new TestShouldSucceedListener();", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    synchronized(listener) {", "+      doc.startJUnit();", "+      listener.assertJUnitStartCount(1);", "+      listener.wait();", "+    }", "-    /*final TestResult testResults = doc.startJUnit();", "+    //final TestResult testResults = doc.startJUnit();", "-    assertTrue(\"testResults should not be null\", testResults != null);", "+    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    _m = doc.getJUnitErrorModel();", "-    _m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    //JUnitError[] errorsWithPositions = _m.getErrorsWithPositions();", "+    //JUnitError[] errorsWithoutPositions = _m.getErrorsWithoutPositions();", "+    //assertTrue(\"testResults should not be null\", testResults != null);", "-    assertEquals(\"testResult should have one error and one failure\",", "+    assertEquals(\"the test results should have one error and one failure \"+_m.getErrorsWithPositions().length+\" \"+_m.getErrorsWithoutPositions().length,", "-    */", "+    //_model.setResetAfterCompile(true);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0368e0fd25e7e1a5d9a577c5a42765e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "99e17181157667354a79af5fff7558664559fae9", "commitAfterChange": "0f014669daf60c46746e3e582159e95f94a3d43c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testNoAssignment() throws ExceptionReturnedException", "signatureAfterChange": "   public void testAccessFieldsOfOuterClasses()      throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException", "diff": ["+   */", "+  public void testAccessFieldsOfOuterClasses() ", "+    throws DebugException, BadLocationException, DocumentAdapterException, IOException, InterruptedException {", "+    File file = new File(_tempDir, \"MonkeyStuff.java\");", "+    OpenDefinitionsDocument doc = doCompile(MONKEY_STUFF, file);", "+    BreakpointTestListener debugListener = new BreakpointTestListener();", "+    _debugger.addListener(debugListener);", "+    // Start debugger", "+    synchronized(_notifierLock) {", "+      _debugger.startup();", "+      _waitForNotifies(1);  // startup", "+      _notifierLock.wait();", "+    }", "+    ", "+    // Set one breakpoints", "+    int index = MONKEY_STUFF.indexOf(\"System.out.println\");", "+    _debugger.toggleBreakpoint(doc,index,11);", "+     ", "+    // Run the main() method, hitting both breakpoints in different threads", "+    synchronized(_notifierLock) {", "+      interpretIgnoreResult(\"java MonkeyStuff\");", "+       _waitForNotifies(3); // suspended, updated, breakpointReached", "+       _notifierLock.wait();", "+     }", "+    ", "+    // Calling interpret instead of interpretIgnoreResult because we want", "+    // to wait until the interaction has ended.", "+    interpret(\"try {\\n\" +", "+              \"  for (int i = MonkeyStuff.this.foo; i < 7; i++) {\\n\"+", "+              \"    do{System.out.println(MonkeyInner.this.innerFoo);}\\n\" +", "+              \"    while(MonkeyStuff.MonkeyInner.this.innerFoo == MonkeyThreeDeep.this.threeDeepFoo);\\n\" +", "+              \"    switch(MonkeyStuff.MonkeyInner.MonkeyTwoDeep.this.twoDeepFoo) {\\n\" + ", "+              \"      case 13: if (this.threeDeepFoo == 5) {\\n\" +", "+              \"                  System.out.println(MonkeyThreeDeep.this.threeDeepFoo);\\n\" +", "+              \"               }\\n\" +", "+              \"               else {\\n\" +", "+              \"                  MonkeyThreeDeep.this.threeDeepFoo = MonkeyThreeDeep.this.threeDeepFoo + MonkeyStuff.this.foo;\\n\" +", "+              \"               }\\n\" +", "+              \"    }\\n\" +", "+              \"  }\\n\" +", "+              \"}\\n\"+              ", "+              \"catch(Exception e) { System.out.println(MonkeyThreeDeep.this.threeDeepFoo);}\\n\" +", "+              \"finally {System.out.println(MonkeyInner.MonkeyTwoDeep.this.twoDeepFoo);}\");", "+    assertInteractionsDoesNotContain(\"18\");", "+    assertInteractionsDoesNotContain(\"6\");", "+    assertInteractionsContains(\"8\\n13\\n\");", "+    ", "+    // Close doc and make sure breakpoints are removed    ", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(1);  //fires once", "+      ", "+    // Shutdown the debugger", "+    if (printMessages) System.out.println(\"Shutting down...\");", "+    synchronized(_notifierLock) {", "+      _debugger.shutdown();", "+      _waitForNotifies(1);  // shutdown", "+      _notifierLock.wait();", "+    }", "+    ", "+    debugListener.assertDebuggerShutdownCount(1);  //fires", "+    if (printMessages) System.out.println(\"Shut down.\");", "+    _debugger.removeListener(debugListener);  ", "-   */", "-    /*", "-    */", "-  }"]}], "num": 29203}
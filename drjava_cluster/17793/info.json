{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f9a38e8c7b07530272a660c4bc21332", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15f8ea493a337bf752617e4c15b4df18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public Object visit(UnsignedShiftRightAssignExpression node)", "signatureAfterChange": "   public Object visit(UnsignedShiftRightAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.unsignedShiftRight", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.unsignedShiftRight(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9eb7e44af358c23f7411af229bdad8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public Object visit(MultiplyAssignExpression node)", "signatureAfterChange": "   public Object visit(MultiplyAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.multiply", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.multiply(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644961f9001159e372d351d8d2553f1c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public Object visit(DivideAssignExpression node)", "signatureAfterChange": "   public Object visit(DivideAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.divide", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.divide(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81a707976f2c172700ad13735121837d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public Object visit(SubtractAssignExpression node)", "signatureAfterChange": "   public Object visit(SubtractAssignExpression node)", "diff": ["+  ", "-", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.subtract", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.subtract(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e660817e9eab2fb495b7ee52d8b54aae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public Object visit(AddAssignExpression node)", "signatureAfterChange": "   public Object visit(AddAssignExpression node)", "diff": ["-    Node   left = node.getLeftExpression();", "+    Node left = node.getLeftExpression();", "+    ", "-", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.add", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.add(calcType, lhs,rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}], "num": 17793}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "025ef06add57890cf8c3173ee22a30aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0136a9b47463b570a6af56bc87ddf115", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   private SymbolData _lookupFromClassesToBeParsed(String qualifiedClassName, SourceInfo si, boolean resolve)", "signatureAfterChange": "   private SymbolData _lookupFromClassesToBeParsed(String qualifiedClassName, SourceInfo si, boolean resolve)", "diff": ["-      continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "-      SymbolData sd = new SymbolData(qualifiedClassName);", "-      symbolTable.put(qualifiedClassName, sd);", "+//      System.err.println(\"Creating continuation for class to be parsed: \" + qualifiedClassName);", "+      SymbolData sd = addSymbolData(si, qualifiedClassName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa71db457c6ce2c905c60e4e8c7bbfe2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 77, "signatureBeforeChange": "   public Void forSourceFile(SourceFile that)", "signatureAfterChange": "   public Void forSourceFile(SourceFile that)", "diff": ["-    _classNamesInThisFile = new LinkedList<String>();", "+    _classesInThisFile = new HashSet<String>();", "-      _classNamesInThisFile.addFirst(qualifiedClassName);", "-//      System.err.println(\"Adding \" + qualifiedClassName + \" to _classesToBeParsed\");", "-      _log.log(\"Adding \" + qualifiedClassName + \" to _classesToBeParsed\");", "-      _classesToBeParsed.put(qualifiedClassName, new Pair<TypeDefBase, LanguageLevelVisitor>(types[i], this));", "+      _classesInThisFile.add(qualifiedClassName);", "+//      System.err.println(\"Adding \" + qualifiedClassName + \" to _classesInThisFile\");", "+      _log.log(\"Adding \" + qualifiedClassName + \" to _classesInThisFile\");", "-      // Only visit a class if _classesToBeParsed contains it.  Otherwise, this class has ", "+      // Only visit a class if _classesInThisFile contains it.  Otherwise, this class has ", "-      if (_classesToBeParsed.containsKey(qualifiedClassName)) {", "+      if (_classesInThisFile.contains(qualifiedClassName)) {"]}], "num": 10631}
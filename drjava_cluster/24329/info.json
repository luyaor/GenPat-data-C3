{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "276044894f38cf9320cc3ca8c1a3e5a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6452b62f4557093e9d882db871e106f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/MintCompiler.java", "commitBeforeChange": "c1c33f1060f9022135b7f75a813b69c4045f6b46", "commitAfterChange": "0de85ca2b785d7ad489463f9a174133a91014910", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public MintCompiler(JavaVersion.FullVersion version, String location, java.util.List<? extends File> defaultBootClassPath)", "signatureAfterChange": "   public MintCompiler(JavaVersion.FullVersion version,                       String location,                       java.util.List<? extends File> defaultBootClassPath)", "diff": ["-", "-  public MintCompiler(JavaVersion.FullVersion version, String location, java.util.List<? extends File> defaultBootClassPath) {", "+public class MintCompiler extends Javac160FilteringCompiler {", "+  public MintCompiler(JavaVersion.FullVersion version,", "+                      String location,", "+                      java.util.List<? extends File> defaultBootClassPath) {", "-    _filterExe = version.compareTo(JavaVersion.parseFullVersion(\"1.6.0_04\")) >= 0;", "-    if (_filterExe) {", "-      // if we need to filter out exe files from the classpath, we also need to", "-      // extract junit.jar and create a temporary file", "-      try {", "-        // edu.rice.cs.util.Log LOG = new edu.rice.cs.util.Log(\"jdk160.txt\",true);", "-        // LOG.log(\"Filtering exe files from classpath.\");", "-        InputStream is = MintCompiler.class.getResourceAsStream(\"/junit.jar\");", "-        if (is!=null) {", "-          // LOG.log(\"\\tjunit.jar found\");", "-          _tempJUnit = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(PREFIX,SUFFIX);", "-          FileOutputStream fos = new FileOutputStream(_tempJUnit);", "-          int size = edu.rice.cs.plt.io.IOUtil.copyInputStream(is,fos);", "-          // LOG.log(\"\\t\"+size+\" bytes written to \"+_tempJUnit.getAbsolutePath());", "-        }", "-        else {", "-          // LOG.log(\"\\tjunit.jar not found\");", "-          if (_tempJUnit!=null) {", "-            _tempJUnit.delete();", "-            _tempJUnit = null;", "-          }", "-        }", "-      }", "-      catch(IOException ioe) {", "-        if (_tempJUnit!=null) {", "-          _tempJUnit.delete();", "-          _tempJUnit = null;", "-        }", "-      }", "-      // sometimes this file may be left behind, so create a shutdown hook", "-      // that deletes temporary files matching our pattern", "-      Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {", "-        public void run() {", "-          try {", "-            File temp = File.createTempFile(PREFIX, SUFFIX);", "-            IOUtil.attemptDelete(temp);", "-            File[] toDelete = temp.getParentFile().listFiles(new FilenameFilter() {", "-              public boolean accept(File dir, String name) {", "-                if ((!name.startsWith(PREFIX)) || (!name.endsWith(SUFFIX))) return false;", "-                String rest = name.substring(PREFIX.length(), name.length()-SUFFIX.length());", "-                try {", "-                  Integer i = new Integer(rest);", "-                  // we could create an integer from the rest, this is one of our temporary files", "-                  return true;", "-                }", "-                catch(NumberFormatException e) { /* couldn't convert, ignore this file */ }", "-                return false;", "-              }", "-            });", "-            for(File f: toDelete) {", "-              f.delete();", "-            }", "-          }", "-          catch(IOException ioe) { /* could not delete temporary files, ignore */ }", "-        }", "-      })); ", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa192ff17be54cf903652b2c7b8a3206", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-hj/edu/rice/cs/drjava/model/compiler/HjCompiler.java", "commitBeforeChange": "a0957e8972dd51e027c20f0e7d4410268a6b47b8", "commitAfterChange": "d911293c92d7a3fb39bbc2ab054e9452132d9003", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    public HjCompiler(JavaVersion.FullVersion version, String location, java.util.List<? extends File> defaultBootClassPath)", "signatureAfterChange": "    public HjCompiler(JavaVersion.FullVersion version, String location, java.util.List<? extends File> defaultBootClassPath)", "diff": ["-", "+public class HjCompiler extends Javac160FilteringCompiler { ", "-    _filterExe = version.compareTo(JavaVersion.parseFullVersion(\"1.6.0_04\")) >= 0;", "-    if (_filterExe) {", "-      // if we need to filter out exe files from the classpath, we also need to", "-      // extract junit.jar and create a temporary file", "-      try {", "-        // edu.rice.cs.util.Log LOG = new edu.rice.cs.util.Log(\"jdk160.txt\",true);", "-        // LOG.log(\"Filtering exe files from classpath.\");", "-        InputStream is = HjCompiler.class.getResourceAsStream(\"/junit.jar\");", "-        if (is!=null) {", "-          // LOG.log(\"\\tjunit.jar found\");", "-          _tempJUnit = edu.rice.cs.plt.io.IOUtil.createAndMarkTempFile(PREFIX,SUFFIX);", "-          FileOutputStream fos = new FileOutputStream(_tempJUnit);", "-          int size = edu.rice.cs.plt.io.IOUtil.copyInputStream(is,fos);", "-          // LOG.log(\"\\t\"+size+\" bytes written to \"+_tempJUnit.getAbsolutePath());", "-        }", "-        else {", "-          // LOG.log(\"\\tjunit.jar not found\");", "-          if (_tempJUnit!=null) {", "-            _tempJUnit.delete();", "-            _tempJUnit = null;", "-          }", "-        }", "-      }", "-      catch(IOException ioe) {", "-        if (_tempJUnit!=null) {", "-          _tempJUnit.delete();", "-          _tempJUnit = null;", "-        }", "-      }", "-      // sometimes this file may be left behind, so create a shutdown hook", "-      // that deletes temporary files matching our pattern", "-      java.lang.Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {", "-        public void run() {", "-          try {", "-            File temp = File.createTempFile(PREFIX, SUFFIX);", "-            IOUtil.attemptDelete(temp);", "-            File[] toDelete = temp.getParentFile().listFiles(new FilenameFilter() {", "-              public boolean accept(File dir, String name) {", "-                if ((!name.startsWith(PREFIX)) || (!name.endsWith(SUFFIX))) return false;", "-                String rest = name.substring(PREFIX.length(), name.length()-SUFFIX.length());", "-                try {", "-                  Integer i = new Integer(rest);", "-                  // we could create an integer from the rest, this is one of our temporary files", "-                  return true;", "-                }", "-                catch(NumberFormatException e) { /* couldn't convert, ignore this file */ }", "-                return false;", "-              }", "-            });", "-            for(File f: toDelete) {", "-              f.delete();", "-            }", "-          }", "-          catch(IOException ioe) { /* could not delete temporary files, ignore */ }", "-        }", "-      })); ", "-    }"]}], "num": 24329}
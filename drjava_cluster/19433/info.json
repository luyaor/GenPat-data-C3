{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c757b73f6798c8ecec1d8c78dce0fd20", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aa7592913ba15441af6bf8f7c0ca6f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String relName, String name)", "diff": ["-  protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String name) {", "+  protected void handleInnerInterfaceDef(InnerInterfaceDef that, Data data, String relName, String name) {", "+    System.err.println(\"Processing InnerInterfaceDef for \" + name);", "+    assert (data instanceof SymbolData) || (data instanceof MethodData);", "+    ", "-    SymbolData sd = defineInnerSymbolData(that, name, data);", "+    SymbolData sd = defineInnerSymbolData(that, relName, name, data);", "-                                                            _classNamesInThisFile, continuations));", "+                                                            _classesInThisFile, continuations, fixUps));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca9f66dbaf0db414c32d3ffd134324aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String relName, String name)", "diff": ["-  protected void handleInnerClassDef(InnerClassDef that, Data data, String name) {", "+  protected void handleInnerClassDef(InnerClassDef that, Data data, String relName, String name) {", "+    System.err.println(\"Processing InnerClassDef for \" + name + \" defined in \" + data.getName());", "+    ", "+    assert (data instanceof SymbolData) || (data instanceof MethodData);", "+//    assert (data instanceof SymbolData) ? data.getName().equals(_enclosingClassName) : true;", "+    ", "-    SymbolData sd = defineInnerSymbolData(that, name, data);", "-    if (sd != null) { //we have a symbol data to work with, so visit the body and augment", "-      that.getBody().visit(new ClassBodyFullJavaVisitor(sd, \"\", _file, _package, _importedFiles,", "-                                                        _importedPackages, _classNamesInThisFile, continuations));", "+    SymbolData sd = defineInnerSymbolData(that, relName, name, data);", "+    if (sd != null) { // We have a symbol data to work with, so visit the body and augment", "+", "+      that.getBody().visit(new ClassBodyFullJavaVisitor(sd, sd.getName(), _file, _package, _importedFiles,", "+                                                        _importedPackages, _classesInThisFile, continuations, fixUps));", "-    // Inner classes are not put into _classesToBeParsed since they are parsed whenever their outer classes are parsed.", "+    // Inner classes are not put into _classesInThisFile since they are parsed whenever their outer classes are parsed."]}], "num": 19433}
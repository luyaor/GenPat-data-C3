{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18155c65c32a80371337b88218a36948", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc36ddd377b34b1f7423970a6a37989", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "c12f68e3bc37fa5484d2cfb01f6ad9fc1d626551", "commitAfterChange": "69d4590eff40914052a36cc82d8a74c43211028e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "               protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "         protected void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-  ", "-        ", "-", "+      ", "-//        _getter.getDefinitionsDocuments().iterator();", "+      //        _getter.getDefinitionsDocuments().iterator();", "+      //Gets system classpaths from the main JVM so that junit tests can find every class file.", "+      //Given as one long String, this separates the paths into a list of strings. 3/12/05", "+      LinkedList<String> classpaths = new LinkedList<String>();", "+      String cpString = _jvm.getClasspathString();", "+      int cpLength = cpString.length();", "+      if (cpString.indexOf(File.pathSeparatorChar) == -1 && cpLength > 0) {", "+        classpaths.add(cpString);", "+      }", "+      else {", "+        int cpIndex;", "+        while ((cpIndex = cpString.indexOf(File.pathSeparatorChar)) != -1 && cpLength != 1) {", "+          if (cpIndex == 0) cpString = cpString.substring(1, cpLength);", "+          else {", "+            classpaths.add(cpString.substring(0, cpIndex));", "+            cpString = cpString.substring(cpIndex, cpLength-1);", "+            cpLength = cpString.length();", "+          }", "+        }", "+      }", "+      ", "+      //First adds the default document build directory to the class directories.", "-          // kep a record of unique built direcotries", "+          ", "+          // keep a record of unique built directories", "-//          String cn = doc.getQualifiedClassName();", "-//          classNames.add(cn);", "-//          files.add(f);", "-//          classNamesToODDs.put(cn, doc);", "+      //Next adds the JVM class paths to the class directories.", "+      //Junit will look here if the default build directories don't have the desired classes.", "+      it = lod.iterator();", "+      while (it.hasNext()) {", "+        try {", "+          OpenDefinitionsDocument doc = it.next();", "+          String packageName;", "+          try{", "+            packageName = doc.getPackageName();", "+          }catch(InvalidPackageException e){", "+            packageName = \"\";", "+          }", "+          packageName = packageName.replace('.', File.separatorChar);", "+          ", "+          //Adds unique classpaths to the list of class directories that junit tests look through. 3/12/05", "+          for (String classpath: classpaths) {", "+            File temp = new File (new File(classpath).getCanonicalPath());", "+            if (temp.isDirectory()) {", "+              temp = new File(temp.getCanonicalPath() + File.separator + packageName);", "+              if (!classDirs.contains(temp)) {", "+                classDirs.addLast(temp);", "+              }", "+            }", "+          }", "+        }", "+        catch(IOException e){", "+          // don't add it to the test suite b/c the directory doesn't exist", "+        }", "+      }", "+         ", "-        ", "-        ", "+", "-                  ", "-//              System.out.println(\"looking for file for: \" + classname);", "+              //              System.out.println(\"looking for file for: \" + classname);", "-//                  System.out.println(f.getCanonicalPath() + \" == \" + filename);", "+                  //                  System.out.println(f.getCanonicalPath() + \" == \" + filename);", "-  //                    System.out.println(\"testing: \" + classname + \" from \" + f.getCanonicalPath());", "-//                    Method methods[] = clazz.getMethods();", "-//                    for(Method d : methods){", "-//                      System.out.println(\" method: \" + d);", "-//                    }", "+                    //                    System.out.println(\"testing: \" + classname + \" from \" + f.getCanonicalPath());", "+                    //                    Method methods[] = clazz.getMethods();", "+                    //                    for(Method d : methods){", "+                    //                      System.out.println(\" method: \" + d);", "+                    //                    }", "-                    ", "+                    break;", "-      ", "+          ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7bb98734c159e342e81df5711344847", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "130f9e7a6442dd68cfc11d101e35a474ea759d8a", "commitAfterChange": "ac188710e667e0471c9bf96ef1dfafd4a8e52eff", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void junitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-    /** open java source files */", "+    /** Open java source files */", "+    ", "-        // Convert .dji extension to .java", "-        if (canonPathName.endsWith(\".dj0\") || canonPathName.endsWith(\".dj1\") || canonPathName.endsWith(\".dj2\")) ", "-          canonPathName = canonPathName.substring(0, canonPathName.length() - 4) + \".java\";", "-        else if (! canonPathName.endsWith(\".java\")) continue;", "+        // Ensure that file name ends with \".java\" or \".dji\" extension to .java", "+        if (! (canonPathName.endsWith(\".java\") || canonPathName.endsWith(\".dj0\") || canonPathName.endsWith(\".dj1\") || ", "+               canonPathName.endsWith(\".dj2\"))) ", "+              continue;", "-   ", "-    // new ScrollableDialog(null, \"builtDir \" + builtDir + \" added to classpath\", \"\", \"\").show();", "-    // Next, add the JVM class paths to the class directories.", "-    // Junit will look here if the default build directories don't have the desired classes.", "-    // TODO: fuse this loop with the preceding one", "-    // THIS LOOKS LIKE ABSURD OVERKILL; we already added a build directory for every open document which can either be a build file tree", "-    // or in the source directory.  We don't need to look in every Interactions class path root as well!", "-", "-//    for (OpenDefinitionsDocument doc: lod) {", "-//      try {", "-//        String packageName;", "-//        try { packageName = doc.getPackageName(); }", "-//        catch(InvalidPackageException e) { packageName = \"\";}", "-//        packageName = packageName.replace('.', File.separatorChar);", "-//        ", "-//        //Add unique classpaths to the list of class directories that junit tests look through. 3/12/05", "-//        for (String classpath: classpaths) {", "-//          File temp = new File(new File(classpath).getCanonicalPath());", "-//          if (temp.isDirectory()) {", "-//            temp = new File(temp.getCanonicalPath() + File.separator + packageName);", "-//            classDirs.add(temp);", "-//          }", "-//        }", "-//      }", "-//      catch(IOException e) { /* do nothing b/c the directory doesn't exist */ }", "-//    }", "-    ", "-    // new ScrollableDialog(null, \"classDirs assembled\", \"\", classDirs.toString()).show();", "-    ", "-          for (File entry : listing) {", "+          for (File entry : listing) { /* for each class file in the build directory */        ", "-            /* for each class file in the build directory */", "-              String sourceFileName = rootDir.getCanonicalPath() + File.separator + clazz.getSourceFileName();", "-//              System.err.println(\"Full source fileName = \" + sourceFileName);", "-              /* The index in fileName of the dot preceding the extension \".java\". */", "-              int indexOfExtDot = sourceFileName.lastIndexOf('.');", "+              String javaSourceFileName = rootDir.getCanonicalPath() + File.separator + clazz.getSourceFileName();", "+//              System.err.println(\"Full java source fileName = \" + javaSourceFileName);", "+              ", "+              /* The index in fileName of the dot preceding the extension \".java\", \".dj0*, \".dj1\", or \".dj2\" */", "+              int indexOfExtDot = javaSourceFileName.lastIndexOf('.');", "-              if (! openDocFiles.contains(sourceFileName)) continue;", "+              ", "+              /* Determine if this java source file was generated from a language levels file. */", "+              String strippedName = javaSourceFileName.substring(0, indexOfExtDot);", "+//              System.err.println(\"Stripped name = \" + strippedName);", "+              ", "+              String sourceFileName;", "+              ", "+              if (openDocFiles.contains(javaSourceFileName)) sourceFileName = javaSourceFileName;", "+              else if (openDocFiles.contains(strippedName + \".dj0\")) sourceFileName = strippedName + \".dj0\";", "+              else if (openDocFiles.contains(strippedName + \".dj1\")) sourceFileName = strippedName + \".dj1\";", "+              else if (openDocFiles.contains(strippedName + \".dj2\")) sourceFileName = strippedName + \".dj2\";", "+              else continue; // no matching source file is open", "+              "]}], "num": 26325}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c7e359ff1d88f246853d9c37f8533cb9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf990e9950ee2383b07a46c093ca21b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "536c00239bf186b1c81bb087b131d4cbb6302c23", "commitAfterChange": "ed1069955672117b4c9aac0875c5704fb5071788", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "         private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "+    Map<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>> results =", "+      new TreeMap<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>>();", "-      if (fromConfig.isValid()) { results.put(fromConfig.version().majorVersion().fullVersion(), fromConfig); }", "+      if (fromConfig.isValid()) { ", "+        JarJDKToolsLibrary.msg(\"From config: \"+fromConfig);", "+        putLib(results,", "+               fromConfig.version().vendor(),", "+               fvOnly(fromConfig.version()),", "+               fromConfig);", "+      }", "+      else { JarJDKToolsLibrary.msg(\"From config: invalid \"+fromConfig); }", "+    else { JarJDKToolsLibrary.msg(\"From config: not set\"); }", "-    if (fromRuntime.isValid() && !results.containsKey(runtimeVersion)) { results.put(runtimeVersion, fromRuntime); }", "+    if (fromRuntime.isValid()) {", "+      if ((getLib(results, runtimeVersion.vendor(), fvOnly(runtimeVersion))==null)) {", "+        JarJDKToolsLibrary.msg(\"From runtime: \"+fromRuntime);", "+        putLib(results,", "+               runtimeVersion.vendor(),", "+               fvOnly(runtimeVersion),", "+               fromRuntime);", "+      }", "+      else { JarJDKToolsLibrary.msg(\"From runtime: duplicate \"+fromRuntime); }", "+    }", "+    else { JarJDKToolsLibrary.msg(\"From runtime: invalid \"+fromRuntime); }", "-      BooleanOption displayAllOption = edu.rice.cs.drjava.config.OptionConstants.DISPLAY_ALL_COMPILER_VERSIONS;", "-      if (!DrJava.getConfig().getSetting(displayAllOption).booleanValue()) {", "-        tVersion = tVersion.majorVersion().fullVersion();", "+      if (getLib(results, tVersion.vendor(), fvOnly(tVersion))==null) {", "+        JarJDKToolsLibrary.msg(\"From search: \"+t);", "+        putLib(results,", "+               tVersion.vendor(),", "+               fvOnly(tVersion),", "+               t);", "-      if (!results.containsKey(tVersion)) { results.put(tVersion, t); }", "+      else { JarJDKToolsLibrary.msg(\"From search: duplicate \"+t); }", "-    return IterUtil.reverse(results.values());", "+    Iterable<JDKToolsLibrary> acc = IterUtil.empty();", "+    for(Map<JavaVersion.FullVersion, JDKToolsLibrary> vmap: results.values()) {", "+      acc = IterUtil.compose(acc, vmap.values());", "+    }", "+    return IterUtil.reverse(acc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d5092e1c34c0f8b8899b34a27d02d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ed1069955672117b4c9aac0875c5704fb5071788", "commitAfterChange": "bd123d07912360358a1a9262bb626bfc554bdb6a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["-    Map<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>> results =", "-      new TreeMap<JavaVersion.VendorType, Map<JavaVersion.FullVersion, JDKToolsLibrary>>();", "+    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "-        putLib(results,", "-               fromConfig.version().vendor(),", "-               fvOnly(fromConfig.version()),", "-               fromConfig);", "+        results.put(coarsenVersion(fromConfig.version()), fromConfig);", "-      if ((getLib(results, runtimeVersion.vendor(), fvOnly(runtimeVersion))==null)) {", "+      if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "-        putLib(results,", "-               runtimeVersion.vendor(),", "-               fvOnly(runtimeVersion),", "-               fromRuntime);", "+        results.put(coarsenVersion(runtimeVersion), fromRuntime);", "-      if (getLib(results, tVersion.vendor(), fvOnly(tVersion))==null) {", "+      if (!results.containsKey(coarsenVersion(tVersion))) {", "-        putLib(results,", "-               tVersion.vendor(),", "-               fvOnly(tVersion),", "-               t);", "+        results.put(coarsenVersion(tVersion), t);", "-    Iterable<JDKToolsLibrary> acc = IterUtil.empty();", "-    for(Map<JavaVersion.FullVersion, JDKToolsLibrary> vmap: results.values()) {", "-      acc = IterUtil.compose(acc, vmap.values());", "-    }", "-    return IterUtil.reverse(acc);", "+    return IterUtil.reverse(results.values());"]}], "num": 2948}
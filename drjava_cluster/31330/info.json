{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9251550ac68652fbd23aa881cefd90ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d641ef8c75cbe223295bb0afe35c75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyAdvancedVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-\r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-  }\r", "+   */", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Only constructors can have the same name as the class they appear in, and constructors do not have an explicit return type\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a808bb3adb182b847281a76d9951662", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyElementaryVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r   public void forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public void forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public void forAbstractMethodDef(AbstractMethodDef that) {\r", "-    forAbstractMethodDefDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    MethodData md = createMethodData(that, _symbolData);\r", "-    String className = getUnqualifiedClassName(_symbolData.getName());\r", "-    if (className.equals(md.getName())) {\r", "-      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",\r", "-                         that);\r", "-    }\r", "-    else {\r", "-      _symbolData.addMethod(md);\r", "-    }\r", "-    forAbstractMethodDefOnly(that);\r", "-  }\r", "+   */", "+  public void forAbstractMethodDef(AbstractMethodDef that) {", "+    forAbstractMethodDefDoFirst(that);", "+    if (prune(that)) return;", "+    MethodData md = createMethodData(that, _symbolData);", "+    String className = getUnqualifiedClassName(_symbolData.getName());", "+    if (className.equals(md.getName())) {", "+      _addAndIgnoreError(\"Constructors are they only methods that can have the same name as the class they appear in, and they are not allowed at the Elementary level\",", "+                         that);", "+    }", "+    else {", "+      _symbolData.addMethod(md);", "+    }", "+    forAbstractMethodDefOnly(that);", "+  }"]}], "num": 31330}
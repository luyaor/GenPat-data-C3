{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b1ea1b9f1e817212130f916ef053265", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8a599cd6937ed5909bfa885c609f18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public Object visit(InnerAllocation node)", "signatureAfterChange": "   public Object visit(InnerAllocation node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-      if(typs.length > 1){ ", "-        if(!TigerUtilities.isVarArgs(cons)){", "-          args[i++] = it.next().acceptVisitor(this);", "-        } else {", "-          args[i++] = buildArrayOfRemainingArgs(typs, larg.size()+1, it);", "+      if(typs.length > 0){", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(cons)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above", "+          args[i] = buildArrayOfRemainingArgs(typs, larg.size()+1, it);", "-    } else {", "+    } ", "+    else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d52b7d4a41b25b42e7d63bb9b941707", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Object visit(SuperMethodCall node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-        if(!TigerUtilities.isVarArgs(m)){", "-          args[i] = it.next().acceptVisitor(this);", "-          i++;", "-        } else {", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(m)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba8ae574a6a335117767e5385253513", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-      Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "+      Method m    = (Method)node.getProperty(NodeProperties.METHOD);", "-        Iterator<Expression> it = larg.iterator();", "-        int      i  = 0;", "+        ListIterator<Expression> it = larg.listIterator();", "+        int i  = 0;", "-          if(!TigerUtilities.isVarArgs(m)){", "-            Object p  = it.next().acceptVisitor(this);", "-            args[i] = performCast(typs[i], p);", "-            i++;", "-          } else { ", "-            /* Pass an array with all the remaining arguments of 'it' */", "-            args[typs.length-1] = buildArrayOfRemainingArgs(typs, larg.size(), it );", "+          Object last = null;", "+          if (it.hasNext()) {", "+            last = it.next().acceptVisitor(this);", "+          }", "+          ", "+          if(!TigerUtilities.isVarArgs(m)) {", "+            args[i] = last;", "+          }", "+//          else if (last == null) {", "+//            Class<?> compType = typs[i].getComponentType();", "+//            args[i] = Array.newInstance(compType, 0);", "+//          }", "+          else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+            args[i] = last;", "+          }", "+          else { // Either more/less args given than expected or is of the component type", "+            it.previous(); // back up since we pulled the expression out a few lines above", "+            args[i] = buildArrayOfRemainingArgs(typs, larg.size(), it);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a075ab116884233cf357803d4123312", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Object visit(StaticMethodCall node)", "diff": ["-        Object last = it.next().acceptVisitor(this);", "-        if(!TigerUtilities.isVarArgs(m) || ", "-           (last != null && typs[i].isAssignableFrom(last.getClass()))){", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(m)) {", "-        } else {", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba641fbcd8e4a7b0a29cb55dc53c239", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public Object visit(ClassAllocation node)", "signatureAfterChange": "   public Object visit(ClassAllocation node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-        if(!TigerUtilities.isVarArgs(cons)){", "-          args[i++] = it.next().acceptVisitor(this);", "-        } else {", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(cons)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0622c14719e99510358b7dd74651e2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "1db9953cef7434ec41dd008a314f29ee92873127", "commitAfterChange": "a13543680d64f9a7022fe7d3fbe6d9f298a83778", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public Object visit(SimpleAllocation node)", "signatureAfterChange": "   public Object visit(SimpleAllocation node)", "diff": ["-      Iterator<Expression> it = larg.iterator();", "+      ListIterator<Expression> it = larg.listIterator();", "-    ", "-        if(!TigerUtilities.isVarArgs(cons)){", "-          args[i++] = it.next().acceptVisitor(this);", "-        } else {", "+        Object last = null;", "+        if (it.hasNext()) {", "+          last = it.next().acceptVisitor(this);", "+        }", "+        ", "+        if(!TigerUtilities.isVarArgs(cons)) {", "+          args[i] = last;", "+        }", "+        //          else if (last == null) {", "+        //            Class<?> compType = typs[i].getComponentType();", "+        //            args[i] = Array.newInstance(compType, 0);", "+        //          }", "+        else if (last != null && typs[i].isAssignableFrom(last.getClass())){", "+          args[i] = last;", "+        }", "+        else { // Either more/less args given than expected or is of the component type", "+          it.previous(); // back up since we pulled the expression out a few lines above"]}], "num": 25899}
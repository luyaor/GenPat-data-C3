{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e1dd55ff6ea5e2d7b62bc16b1df745e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ba4e6175378b2d45ae3962574814cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "               public void testForArrayInitializerHelper()", "signatureAfterChange": "               public void testForArrayInitializerHelper()", "diff": ["-      LanguageLevelVisitor llv = new LanguageLevelVisitor(_b._file, _b._package, _b._importedFiles, ", "-                                                          _b._importedPackages, new LinkedList<String>(), new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "-                                                          new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+      LanguageLevelVisitor llv =", "+        new LanguageLevelVisitor(_b._file, _b._package, _b._importedFiles, ", "+                                 _b._importedPackages, new LinkedList<String>(), ", "+                                 new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>(), ", "+                                 new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-      SourceInfo si = JExprParser.NO_SOURCE_INFO;", "+      SourceInfo si = SourceInfo.NO_INFO;", "-      Expression e6 = new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\"));", "+      Expression e6 = new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"));", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray2));", "+      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray2));", "-      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray2));", "+      assertEquals(\"Should return instance of int[][]\", intArray2.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray2));", "-      assertEquals(\"Should return double\", SymbolData.DOUBLE_TYPE.getInstanceData(), _b.forArrayInitializerHelper(ia, SymbolData.DOUBLE_TYPE));", "+      assertEquals(\"Should return double\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"The error message should be correct\", \"You cannot initialize the non-array type double with an array initializer\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot initialize the non-array type double with an array initializer\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"The error message should be correct\", \"The elements of this initializer should have type int but element 2 has type double\", errors.getLast().getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The elements of this initializer should have type int but element 2 has type double\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(),", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"The error message should be correct\", \"The elements of this initializer should have type int but element 0 has type null\", errors.get(2).getFirst());", "-      assertEquals(\"The error message should be correct\", \"The elements of this initializer should have type int but element 1 has type null\", errors.get(3).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The elements of this initializer should have type int but element 0 has type null\", ", "+                   errors.get(2).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The elements of this initializer should have type int but element 1 has type null\", ", "+                   errors.get(3).getFirst());", "-      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), _b.forArrayInitializerHelper(ia, intArray));", "+      assertEquals(\"Should return instance of int[]\", intArray.getInstanceData(), ", "+                   _b.forArrayInitializerHelper(ia, intArray));", "-      assertEquals(\"Error message should be correct\", \"The elements of this initializer should all be instances, but you have specified the type name int.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The elements of this initializer should all be instances, but you have specified the type name\" + ", "+                   \" int.  Perhaps you meant to create a new instance of int\",", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1073f0a93e72d781588ffdb1b62392", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "          public void testClassInstantiationHelper()", "signatureAfterChange": "          public void testClassInstantiationHelper()", "diff": ["-      ClassInstantiation simpleCI = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "-                                                                      new ClassOrInterfaceType(SourceInfo.NO_INFO, \"testClass\", new Type[0]),", "-                                                                      new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      ClassInstantiation complexCI = new ComplexNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                                                        new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Outer\")),", "-                                                                        new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]),", "-                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      ClassInstantiation simpleCI = ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE, ", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"testClass\", new Type[0]),", "+                                          new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "+      ClassInstantiation complexCI = ", "+        new ComplexNamedClassInstantiation(SourceInfo.NONE,", "+                                           new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"Outer\")),", "+                                           new ClassOrInterfaceType(SourceInfo.NONE, \"Inner\", new Type[0]),", "+                                           new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]));", "-      ClassInstantiation badArgs = new SimpleNamedClassInstantiation(SourceInfo.NO_INFO,", "-                                                                     new ClassOrInterfaceType(SourceInfo.NO_INFO, \"anotherClass\", new Type[0]),", "-                                                                     new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "+      ParenthesizedExpressionList pel = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, ", "+                                        new Expression[] {new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                  new Word(SourceInfo.NONE, \"int\"))});", "+      ClassInstantiation badArgs =  ", "+        new SimpleNamedClassInstantiation(SourceInfo.NONE,", "+                                          new ClassOrInterfaceType(SourceInfo.NONE, \"anotherClass\", new Type[0]),", "+                                          pel);", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.classInstantiationHelper(badArgs, SymbolData.DOUBLE_TYPE));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.classInstantiationHelper(badArgs, SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"Error message should be correct\", \"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot pass a class or interface name as a constructor argument.  Perhaps you meant to create a \"", "+                     + \"new instance of int\", errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), _etc.classInstantiationHelper(simpleCI, testClass));", "+      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), ", "+                   _etc.classInstantiationHelper(simpleCI, testClass));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class testClass with signature: testClass().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class testClass with signature: testClass().\", errors.getLast().getFirst());", "-      assertEquals(\"Should return instance of Outer.Inner\", outerInner.getInstanceData(), _etc.classInstantiationHelper(complexCI, outerInner));", "+      assertEquals(\"Should return instance of Outer.Inner\", outerInner.getInstanceData(), ", "+                   _etc.classInstantiationHelper(complexCI, outerInner));", "-      assertEquals(\"Error message should be correct\", \"No constructor found in class Outer.Inner with signature: Inner().\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"No constructor found in class Outer.Inner with signature: Inner().\", errors.getLast().getFirst());", "-      //if everything is in order, just return", "+      // if everything is in order, just return", "-      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), _etc.classInstantiationHelper(simpleCI, testClass));", "+      assertEquals(\"Should return instance of testClass\", testClass.getInstanceData(), ", "+                   _etc.classInstantiationHelper(simpleCI, testClass));"]}], "num": 17257}
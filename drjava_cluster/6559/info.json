{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "080f38aa106ad4766ac375d4e1d70268", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1855583bebbcae232d80e045064fe9ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "6c7308b28231f013064e2caac6c40346905e6204", "commitAfterChange": "0aeaf959a1b3eeec380d4f686f4e9dc9fd607e92", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "signatureAfterChange": "   private List<File> _compileLanguageLevelsFiles(List<File> files, List<DJError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-    /* Rename any .dj0 files in files to be .java files, so the correct thing is compiled.  The hashset is used to ", "-     * make sure we never send in duplicate files. This can happen if the java file was sent in along with the ", "-     * corresponding .dj* file. The dj* file is renamed to a .java file and thus we have two of the same file in ", "-     * the list.  By adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+    /* Construct the collection of files to be compild by javac, renaming any language levels (.dj*) files to the ", "+     * corresponding java (.java) files.  By using a HashSet, we avoid creating duplicates in this collection.", "+    LinkedList<File> newFiles = new LinkedList<File>();  // Used to record the LL files that must be converted", "+        newFiles.add(javaFile);", "-        // Delete the .java file, it will be regenerated later", "+        // Delete the stale .java file (if it exists), a file with this name will subsequently be generated", "-    LanguageLevelConverter llc = new LanguageLevelConverter();", "-    Options llOpts;", "-    if (bootClassPath == null) { llOpts = new Options(getActiveCompiler().version(), classPath); }", "-    else { llOpts = new Options(getActiveCompiler().version(), classPath, bootClassPath); }", "-    Map<File,Set<String>> sourceToTopLevelClassMap = new HashMap<File,Set<String>>();", "-    /* LanguageLevels Bug Workaround:  JUnit test files can generate spurious conversion errors.  This", "-     * problem can be mitigated by compiling JUnit test files, which contain the substring \"Test\", last.  ", "-     */", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "-      llc.convert(_testFileSort(files).toArray(new File[0]), llOpts, sourceToTopLevelClassMap);", "-    ", "+      Map<File,Set<String>> sourceToTopLevelClassMap = new HashMap<File,Set<String>>();", "-          if (classNames==null) classNames = new HashSet<String>();", "+          if (classNames == null) classNames = new HashSet<String>();", "-            if (endPos<0) return false; // can't be a class file", "+            if (endPos < 0) return false; // can't be a class file", "-            if ((dollarPos>=0) && (dollarPos<endPos)) endPos = dollarPos;", "+            if ((dollarPos >= 0) && (dollarPos < endPos)) endPos = dollarPos;", "-              new File(dir,name).delete();", "+              new File(dir, name).delete();", "-    }", "+      /* Perform language levels conversion, creating corresponding .java files. */", "+      LanguageLevelConverter llc = new LanguageLevelConverter();", "+      Options llOpts;", "+      if (bootClassPath == null) { llOpts = new Options(getActiveCompiler().version(), classPath); }", "+      else { llOpts = new Options(getActiveCompiler().version(), classPath, bootClassPath); }", "+      ", "+      // NOTE: the following workaround (\"_testFileSort(files)\" instead of simply \"files\") may no longer be necessary.", "+      /* Perform the conversion incorporating the following Bug Workaround:  Forward references can generate spurious ", "+       * conversion errors in some cases.  This problem can be mitigated by compiling JUnit test files (with names", "+       * containing the substring \"Test\") last.  ", "+       */", "+      Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "+        llc.convert(_testFileSort(files).toArray(new File[0]), llOpts, sourceToTopLevelClassMap);", "+      /* Add any errors encountered in conversion to the compilation error log. */", "+      errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "+      errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "+      ", "+//      // Confirm that the .java files corresponding to .dj* files exist.", "+//      for (File f: newFiles)", "+//        if (! f.exists()) Utilities.show(f + \" does not exist\");", "-    files = new LinkedList<File>(javaFileSet);", "+    }", "-    errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "-    errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "-    if (containsLanguageLevels) { return files; }", "+    if (containsLanguageLevels) { return new LinkedList<File>(javaFileSet); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1f2e35529d5698dc1a5d994ce52b9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "a6c0afbadc103bc26f8a5c30f4735e1c0d62a541", "commitAfterChange": "f77d59d2a07360ad309276a41936f8bee75e9ad9", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "   final public Expression primaryExpression() throws ParseException", "signatureAfterChange": "   final public Expression primaryExpression() throws ParseException", "diff": ["+    List<Type> typeArgs = new LinkedList<Type>();", "+    if (jj_2_38(2147483647)) {", "+      typeArgs = TypeArguments();", "+    } else {", "+      ;", "+    }", "-      if (jj_2_37(2)) {", "+      if (jj_2_39(2)) {", "-      es = primarySuffix();", "+      es = primarySuffix(typeArgs);"]}], "num": 6559}
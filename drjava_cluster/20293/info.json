{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede284ed7669a2edaed2096e9251b5e7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9ef1c1619b061745a691eef6e7ebcd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "               public void testForComparisonExpressionOnly()", "signatureAfterChange": "          public void testForComparisonExpressionOnly()", "diff": ["-    ", "-      ComparisonExpression ce = new LessThanExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      ComparisonExpression ce = new LessThanExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                    SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(),", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                    SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison \"", "+                     + \"Operator (<, >; <=, >=) to it\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE, SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a \"", "+                     + \"new instance of double\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), _sd1.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                                                    _sd1.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison \"", "+                     + \"Operator (<, >; <=, >=) to it\", ", "+                   errors.getLast().getFirst());", "-      //gives an error if right side is not an instance type", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "+      // Gives an error if right side is not an instance type", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.forComparisonExpressionOnly(ce, SymbolData.DOUBLE_TYPE.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      ", "+      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3b8367c9f93d1a39f610aa7f990828d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "               public void testForNumericBinaryExpressionOnly()", "signatureAfterChange": "               public void testForNumericBinaryExpressionOnly()", "diff": ["-      NumericBinaryExpression nbe = new ModExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      NumericBinaryExpression nbe = new ModExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.CHAR_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE, SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE, ", "+                                                       SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"The left side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of int\", errors.getLast().getFirst());", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.BOOLEAN_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                                                       SymbolData.DOUBLE_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"The left side of this expression is not a number.  \"", "+                     + \"Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", ", "+                   errors.getLast().getFirst());", "-      //right not an instance data", "-      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.DOUBLE_TYPE));", "+      // right not an instance data", "+      assertEquals(\"Should return double instance\", SymbolData.DOUBLE_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.DOUBLE_TYPE));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "-      ", "-      ", "-      ", "-      //right not a number", "-      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), SymbolData.BOOLEAN_TYPE.getInstanceData()));", "+      assertEquals(\"Error message should be correct\", \"The right side of this expression is a type, not an instance.  \"", "+                     + \"Perhaps you meant to create a new instance of double\", errors.getLast().getFirst());", "+", "+      // right not a number", "+      assertEquals(\"Should return int instance\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forNumericBinaryExpressionOnly(nbe, SymbolData.INT_TYPE.getInstanceData(), ", "+                                                       SymbolData.BOOLEAN_TYPE.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"The right side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", errors.getLast().getFirst());", "-      ", "-      ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"The right side of this expression is not a number.  Therefore, you cannot apply a \"", "+                     + \"Numeric Binary Operator (*, /, -, %) to it\", errors.getLast().getFirst());"]}], "num": 20293}
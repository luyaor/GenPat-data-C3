{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2803350271039a224327c7a788c5915b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24d4c9d827de66217322b031a8e381d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "   private Type visitRelationalExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitRelationalExpression(BinaryExpression node)", "diff": ["-  private Type visitRelationalExpression(BinaryExpression node) {", "+  private Class<?> visitRelationalExpression(BinaryExpression node) {", "-    Type lc1 = leftExp.acceptVisitor(this);", "-    Type rc1 = rightExp.acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283999fc140ca32b71450b0cfab24785", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public Type visit(MultiplyAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(MultiplyAssignExpression node)", "diff": ["-  public Type visit(MultiplyAssignExpression node) {", "+  public Class<?> visit(MultiplyAssignExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e3de4fdd75d0df61c2a5a79f2829a7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public Type visit(AddAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(AddAssignExpression node)", "diff": ["-  public Type visit(AddAssignExpression node) {", "+  public Class<?> visit(AddAssignExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65821bdeab7a5d57011395cce7370788", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "   private Type visitBitwiseAssign(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitBitwiseAssign(BinaryExpression node)", "diff": ["-  private Type visitBitwiseAssign(BinaryExpression node) {", "+  private Class<?> visitBitwiseAssign(BinaryExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    ", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "+", "-        ((lc == boolean.class || lc == Boolean.class) ^ (rc == boolean.class || rc == Boolean.class)) ||", "+        ((lc == boolean.class || lc == Boolean.class) ^ ", "+         (rc == boolean.class || rc == Boolean.class)) ||", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f895556f2ce6f9f6a17196f06c83409", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public Type visit(NotEqualExpression node)", "signatureAfterChange": "   public Class<?> visit(NotEqualExpression node)", "diff": ["-  public Type visit(NotEqualExpression node) {", "+  public Class<?> visit(NotEqualExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = rn.acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19e75cc98bead36f328e0be686de5df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public Type visit(EqualExpression node)", "signatureAfterChange": "   public Class<?> visit(EqualExpression node)", "diff": ["-  public Type visit(EqualExpression node) {", "+  public Class<?> visit(EqualExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = rn.acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4add2232cb9b13f1a50e805f28249cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public Type visit(RemainderAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(RemainderAssignExpression node)", "diff": ["-  public Type visit(RemainderAssignExpression node) {", "+  public Class<?> visit(RemainderAssignExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95d5c4e93f0cad4615335bde311e9ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public Type visit(SubtractAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(SubtractAssignExpression node)", "diff": ["-  public Type visit(SubtractAssignExpression node) {", "+  public Class<?> visit(SubtractAssignExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "+", "+", "-    ", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd21be561224595b3d933d96e705d70f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public Type visit(DivideAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(DivideAssignExpression node)", "diff": ["-  public Type visit(DivideAssignExpression node) {", "+  public Class<?> visit(DivideAssignExpression node) {", "-    Type lc1 = ln.acceptVisitor(this);", "-    Type rc1 = node.getRightExpression().acceptVisitor(this);", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = node.getRightExpression().acceptVisitor(this);", "-        !(rc.isPrimitive()  || TigerUtilities.isBoxingType(rc))) {", "+        !(rc.isPrimitive()  || TigerUtilities.isBoxingType(rc)) ) {", "-    ", "+", "-    ", "+"]}], "num": 8465}
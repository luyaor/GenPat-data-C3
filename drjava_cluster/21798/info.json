{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "122967b1b6cf92115a195a028f490f2d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c34c412a7e434e8670b62252da14988", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos)     throws ClassNameNotFoundException", "diff": ["-      if(indexOfClass > -1 ", "+      if( (indexOfClass > -1) ", "-      else if(indexOfInterface > -1 ", "+      else if( (indexOfInterface > -1) ", "-      else if(indexOfEnum > -1", "+      else if( (indexOfEnum > -1)", "-      if (index == -1) {", "-        throw new ClassNameNotFoundException(\"No top level class name found\");", "-      }", "+      if (index == -1) throw new ClassNameNotFoundException(\"No top level class name found\");", "-      done = false;", "-      for (int i=index; i < textLength && !done; i++) {", "+      for (int i = index; i < textLength; i++) {", "-          done = true;", "+          break;", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "-    finally {", "-      setCurrentLocation(oldLocation);", "-    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }", "+    finally { setCurrentLocation(oldLocation); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b39a4e39690fee5e2620557879fc27b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "signatureAfterChange": "   public String getNextTopLevelClassName(int startPos, int endPos) throws ClassNameNotFoundException", "diff": ["-          throw new ClassNameNotFoundException(\"No top level class name found\");", "+          throw ClassNameNotFoundException.DEFAULT;", "-        //if we make it here we have a valid index", "-        //first find index of first non whitespace (from the index in document)", "-        index = getFirstNonWSCharPos(startPos + index) - startPos;", "-        if (index == -1) throw new ClassNameNotFoundException(\"No top level class name found\");", "-        ", "-        int endIndex = textLength; //just in case no whitespace at end of file", "-        ", "-        //find index of next delimiter or whitespace", "-        char c;", "-        for (int i = index; i < textLength; i++) {", "-          c = text.charAt(i);", "-          if (!Character.isJavaIdentifierPart(c)) {", "-            endIndex = i;", "-            break;", "-          }", "-        }", "-        return text.substring(index,endIndex);", "+        // we have a valid index", "+        return getNextIdentifier(startPos + index);", "+      catch (IllegalStateException e) { throw new ClassNameNotFoundException(\"No top level class name found\"); }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b8b35d0072df80364f53f596be746a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "fa78ee7a06602f123abf33b8aef0005c93bb3efa", "commitAfterChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "    public void appendSyntaxErrorResult(String message, String interaction, int startRow, int startCol,                                       int endRow, int endCol, String styleName)", "signatureAfterChange": "    public void appendSyntaxErrorResult(String message, String interaction, int startRow, int startCol,                                       int endRow, int endCol, String styleName)", "diff": ["-    //writeLock();", "-      if (null == message || \"null\".equals(message)) {", "-        message = \"\";", "-      }", "+      if (null == message || \"null\".equals(message))  message = \"\";", "-      if(message.indexOf(\"Lexical error\") != -1) {", "+      if (message.indexOf(\"Lexical error\") != -1) {", "-        if(i != -1)", "-          message = \"Syntax Error:\" + message.substring(i+2,message.length());                                ", "+        if (i != -1) message = \"Syntax Error:\" + message.substring(i+2,message.length());                                ", "-      if(message.indexOf(\"Error\") == -1) ", "-        message = \"Error: \" + message;", "+      if (message.indexOf(\"Error\") == -1) message = \"Error: \" + message;", "-    catch (DocumentAdapterException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "-//    finally {", "-//      writeUnlock();", "-//    }", "+    catch (DocumentAdapterException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c546627b89e584af153f6e070159759e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public int getOffset(int lineNum)", "signatureAfterChange": "   public int getOffset(int lineNum)", "diff": ["-    // throwErrorHuh();", "-", "+    ", "-      if (lineNum < 0) {", "-        return -1;", "-      }", "+      if (lineNum < 0) return -1;", "+      ", "-", "-", "+      ", "-", "-        if (curLine==lineNum) {", "-", "-          return offset;", "-        }", "-", "+        ", "+        if (curLine==lineNum) return offset;", "+        ", "-        if (nextNewline == -1) {", "-", "-          // end of the document, and couldn't find the supplied lineNum", "-          return -1;", "-        }", "-        else {", "-          curLine++;", "-          offset = nextNewline + 1;", "-        }", "+        if (nextNewline == -1) return -1; // end of the document, and couldn't find the supplied lineNum", "+          ", "+        curLine++;", "+        offset = nextNewline + 1;", "-", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9afc4c87539e63a73567fc019163eab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "47940fe74faf2ed044539c32c4d2eb5e5171e259", "commitAfterChange": "0d0c5947e7ead7115690128690c9c431a119fb4d", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   private static String makeBlankString(int n)", "signatureAfterChange": "   private static String makeBlankString(int n)", "diff": ["-  /** Generates a string containng n blanks.  Intended for small values of n (typically < 50). */", "-  private static String makeBlankString(int n) {", "-      case 0: return \"\";", "-      case 1: return \" \";", "-      case 2: return \"  \";", "-      case 3: return \"   \";", "-      case 4: return \"    \";", "-      case 5: return \"     \";", "-      case 6: return \"      \";", "-      case 7: return \"       \";", "-      case 8: return \"        \";", "-        StringBuilder buf = new StringBuilder();", "-        for (int i = 0; i < n; i++) buf.append(' ');", "-        return buf.toString();", "+  /** Constructs a new string containng n blanks.  Intended for small values of n (typically < 50). */", "+  private static String makeBlankString(int n) {", "+    StringBuilder buf = new StringBuilder();", "+    for (int i = 0; i < n; i++) buf.append(' ');", "+    return buf.toString();"]}], "num": 21798}
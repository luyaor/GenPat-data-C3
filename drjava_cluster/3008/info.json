{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2748d9c0a5f754c0b2b9ddd1f3233b51", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00591bd0686401fd843f783c820b7190", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 127, "signatureBeforeChange": "   public static <T> SizedIterable<T> makeIterable(T v1, T v2, T v3, T v4, T v5, T v6, T v7,                                                    T v8, T v9)", "signatureAfterChange": "   public static SizedIterable<Character> asIterable(CharSequence sequence)", "diff": ["+  /** Create an iterable that wraps the given {@code CharSequence} */", "+  public static SizedIterable<Character> asIterable(CharSequence sequence) {", "+    return new CharSequenceWrapper(sequence, false);", "+  }", "-  /** Create an immutable SizedIterable containing the given values */", "-  public static <T> SizedIterable<T> makeIterable(T v1, T v2, T v3, T v4, T v5, T v6, T v7, ", "-                                                  T v8, T v9) {", "-    SizedIterable<T> result = SingletonIterable.make(v1);", "-    result = ComposedIterable.make(result, v2);", "-    result = ComposedIterable.make(result, v3);", "-    result = ComposedIterable.make(result, v4);", "-    result = ComposedIterable.make(result, v5);", "-    result = ComposedIterable.make(result, v6);", "-    result = ComposedIterable.make(result, v7);", "-    result = ComposedIterable.make(result, v8);", "-    result = ComposedIterable.make(result, v9);", "-    return result;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71af945b8d4c3d62932c89463a7bef16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 129, "signatureBeforeChange": "   public static <T> SizedIterable<T> makeIterable(T v1, T v2, T v3, T v4, T v5, T v6, T v7,                                                    T v8, T v9, T v10)", "signatureAfterChange": "     public CharSequenceWrapper(CharSequence s, boolean fixed)", "diff": ["+    private final boolean _fixed;", "+    public CharSequenceWrapper(CharSequence s, boolean fixed) { _s = s; _fixed = fixed; }", "-  /** Create an immutable SizedIterable containing the given values */", "-  public static <T> SizedIterable<T> makeIterable(T v1, T v2, T v3, T v4, T v5, T v6, T v7, ", "-                                                  T v8, T v9, T v10) {", "-    SizedIterable<T> result = SingletonIterable.make(v1);", "-    result = ComposedIterable.make(result, v2);", "-    result = ComposedIterable.make(result, v3);", "-    result = ComposedIterable.make(result, v4);", "-    result = ComposedIterable.make(result, v5);", "-    result = ComposedIterable.make(result, v6);", "-    result = ComposedIterable.make(result, v7);", "-    result = ComposedIterable.make(result, v8);", "-    result = ComposedIterable.make(result, v9);", "-    result = ComposedIterable.make(result, v10);", "-    return result;", "-  }"]}], "num": 3008}
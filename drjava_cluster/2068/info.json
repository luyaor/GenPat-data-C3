{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46c54d34de85888683007387d74ac187", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21bf26ff66a682115ba8264cee85a4a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/JavaMethodInfo.java", "commitBeforeChange": "236aa7df79220d757b2ee9df059be4a4c3d5fd28", "commitAfterChange": "56602892a0ed21c5100101190a7b3d24e2204871", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public ClassInfo[] getExceptionTypes()", "signatureAfterChange": "     public ClassInfo[] getExceptionTypes()", "diff": ["-\tif (exceptions == null) {", "-\t    Class[] ecs = javaMethod.getExceptionTypes();", "-\t    exceptions  = new ClassInfo[ecs.length];", "+  if (exceptions == null) {", "+      Class[] ecs = javaMethod.getExceptionTypes();", "+      exceptions  = new ClassInfo[ecs.length];", "-\t    for (int i = 0; i < ecs.length; i++) {", "-\t\texceptions[i] = new JavaClassInfo(ecs[i]);", "-\t    }", "-\t}", "-        return (ClassInfo[])exceptions.clone();", "+      for (int i = 0; i < ecs.length; i++) {", "+    exceptions[i] = new JavaClassInfo(ecs[i]);", "+      }", "+  }", "+        return exceptions.clone();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25fe5a17475f205d990f14368fe99a8a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/JavaMethodInfo.java", "commitBeforeChange": "236aa7df79220d757b2ee9df059be4a4c3d5fd28", "commitAfterChange": "56602892a0ed21c5100101190a7b3d24e2204871", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ClassInfo[] getParameterTypes()", "signatureAfterChange": "     public ClassInfo[] getParameterTypes()", "diff": ["-\tif (parameters == null) {", "-\t    Class[] pcs = javaMethod.getParameterTypes();", "-\t    parameters  = new ClassInfo[pcs.length];", "+  if (parameters == null) {", "+      Class[] pcs = javaMethod.getParameterTypes();", "+      parameters  = new ClassInfo[pcs.length];", "-\t    for (int i = 0; i < pcs.length; i++) {", "-\t\tparameters[i] = new JavaClassInfo(pcs[i]);", "-\t    }", "-\t}", "-        return (ClassInfo[])parameters.clone();", "+      for (int i = 0; i < pcs.length; i++) {", "+    parameters[i] = new JavaClassInfo(pcs[i]);", "+      }", "+  }", "+        return parameters.clone();"]}], "num": 2068}
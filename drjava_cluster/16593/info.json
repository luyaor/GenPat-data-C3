{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c62998eee3d6b09deed965b4fee48a35", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62e88a9709d360ab41d6f63711ef1051", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ArgumentTokenizer.java", "commitBeforeChange": "e6059a690372d24d354206755ceb1326c1718997", "commitAfterChange": "30865706505ac032f7839e76656d4d5fb3416a82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public ArrayList<String> tokenize(String arguments, boolean stringify)", "signatureAfterChange": "   public ArrayList<String> tokenize(String arguments, boolean stringify)", "diff": ["-              // Seen the close quote; finish this arg and start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "+              // Seen the close quote; continue this arg until whitespace is seen", "+              state = NORMAL_TOKEN_STATE;", "-              // Seen the close quote; finish this arg and start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "+              // Seen the close quote; continue this arg until whitespace is seen", "+              state = NORMAL_TOKEN_STATE;", "-          case NORMAL_TOKEN_STATE:", "-            if (Character.isWhitespace(c)) {", "-              // Whitespace ends the token; start a new one", "-              argList.add(currArg.toString());", "-              currArg = new StringBuffer();", "-              state = NO_TOKEN_STATE;", "-            }", "-            else if (c == '\\\\') {", "-              // Backslash in a normal token: escape the next character", "-              escaped = true;", "-            }", "-            else {", "-              currArg.append(c);", "-            }", "-            break;", "+//          case NORMAL_TOKEN_STATE:", "+//            if (Character.isWhitespace(c)) {", "+//              // Whitespace ends the token; start a new one", "+//              argList.add(currArg.toString());", "+//              currArg = new StringBuffer();", "+//              state = NO_TOKEN_STATE;", "+//            }", "+//            else if (c == '\\\\') {", "+//              // Backslash in a normal token: escape the next character", "+//              escaped = true;", "+//            }", "+//            else if (c == '\\'') {", "+//              state = SINGLE_QUOTE_STATE;", "+//            }", "+//            else if (c == '\"') {", "+//              state = DOUBLE_QUOTE_STATE;", "+//            }", "+//            else {", "+//              currArg.append(c);", "+//            }", "+//            break;", "+          case NORMAL_TOKEN_STATE:", "+                else if (state == NORMAL_TOKEN_STATE) {", "+                  // Whitespace ends the token; start a new one", "+                  argList.add(currArg.toString());", "+                  currArg = new StringBuffer();", "+                  state = NO_TOKEN_STATE;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3b896023acb21896745e28f4ebbbf8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "commitAfterChange": "442c59b932709a9e16b8bf4afb9e7306f5a80d8b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "      @SuppressWarnings(\"fallthrough\")   protected String[] getMessage(Box<Boolean> availableRef)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   protected String[] getMessage(Box<Boolean> availableRef)", "diff": ["+    Box<String> weeklyString = new SimpleBox<String>(\"\");", "+    Box<Date> weeklyTime = new SimpleBox<Date>(new Date(0));", "+      case 3: if (getTargetFile().toString().endsWith(\".jar\")) { // only consider weekly builds if using *.jar file", "+        newVersion |= checkNewWeeklyVersion(weeklyString,weeklyTime); // fall-through required, not a mistake", "+      }", "-          String newestType = \"\";", "-          if (stableTime.value().after(betaTime.value())) {", "-            // stable newer than beta", "-            if (stableTime.value().after(devTime.value())) {", "-              // stable newer than beta and dev", "-              _newestVersionString = stableString.value();", "-              newestType = \"stable \";", "-            }", "-            else {", "-              // stable newer than beta, but dev is even newer", "-              _newestVersionString = devString.value();", "-              newestType = \"development \";              ", "-            }", "-          }", "-          else {", "-            // beta newer than stable", "-            if (betaTime.value().after(devTime.value())) {", "-              // beta newer than stable and dev", "-              _newestVersionString = betaString.value();", "-              newestType = \"beta \";", "-            }", "-            else {", "-              // beta newer than stable, but dev is even newer", "-              _newestVersionString = devString.value();", "-              newestType = \"development \";              ", "-            }", "-          }", "-          ", "+          TreeMap<Date,String[]> versionSorter = new TreeMap<Date,String[]>();", "+          versionSorter.put(stableTime.value(),new String[] {\"stable release\",      stableString.value() });", "+          versionSorter.put(betaTime.value(),  new String[] {\"beta release\",        betaString.value() });", "+          versionSorter.put(devTime.value(),   new String[] {\"development release\", devString.value() });", "+          versionSorter.put(weeklyTime.value(),new String[] {\"weekly build\",        weeklyString.value() });", "+          String newestType = versionSorter.get(versionSorter.lastKey())[0];", "+          _newestVersionString = versionSorter.get(versionSorter.lastKey())[1];", "+", "-            \"A new \"+newestType+\"version has been found.\",", "+            \"A new \"+newestType+\" has been found.\","]}], "num": 16593}
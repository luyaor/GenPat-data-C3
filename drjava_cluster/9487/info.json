{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19ce945a9ed00fce3386d54faf81c6b0", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2e7ecaa07ec2f5e1f1fd9e3ce31970", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 339, "methodNumberAfterChange": 247, "signatureBeforeChange": "   public StaticFieldReference lookupStaticField(Type t, final String name)     throws InvalidTargetException, UnmatchedLookupException", "signatureAfterChange": "      public StaticFieldReference lookupStaticField(Type t, final String name)     throws UnmatchedLookupException", "diff": ["+  ", "+  public StaticFieldReference lookupStaticField(Type t, final String name)", "+    throws UnmatchedLookupException {", "+    FieldFinder<StaticFieldReference> finder = new FieldFinder<StaticFieldReference>(name, true) {", "+      public StaticFieldReference makeFieldReference(Type t, DJField f) {", "+        return new StaticFieldReference(f, fieldType(f, t));", "+      }", "+    };", "+    return finder.findSingleField(t);", "+  }", "-   */", "-  public StaticFieldReference lookupStaticField(Type t, final String name)", "-    throws InvalidTargetException, UnmatchedLookupException {", "-    debug.logStart(new String[]{\"t\", \"name\"}, wrap(t), name); try {", "-    ", "-    class LookupField extends TypeAbstractVisitor<Iterable<StaticFieldReference>> {", "-      ", "-      private boolean _includePrivate;", "-      ", "-      public LookupField(boolean includePrivate) {", "-        _includePrivate = includePrivate;", "-      }", "-      ", "-      private boolean validField(DJField f) {", "-        if (_includePrivate) { return f.isStatic(); }", "-        else { return f.isStatic() && !f.accessibility().equals(Access.PRIVATE); }", "-      }", "-      ", "-      public Iterable<StaticFieldReference> defaultCase(Type t) { return IterUtil.empty(); }", "-      ", "-      @Override public Iterable<StaticFieldReference> forSimpleClassType(SimpleClassType t) {", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            return IterUtil.make(new StaticFieldReference(f, f.type()));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }", "-      ", "-      @Override public Iterable<StaticFieldReference> forRawClassType(RawClassType t) {", "-        // TODO: Handle raw member access warnings", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            return IterUtil.make(new StaticFieldReference(f, erase(f.type())));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }", "-      ", "-      @Override public Iterable<StaticFieldReference> forParameterizedClassType(ParameterizedClassType t) {", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            Type fieldType = substitute(f.type(), SymbolUtil.allTypeParameters(t.ofClass()), ", "-                                        t.typeArguments());", "-            return IterUtil.make(new StaticFieldReference(f, fieldType));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }", "-      ", "-    }", "-    Iterable<? extends StaticFieldReference> results = lookupMember(t, new LookupField(true), ", "-                                                                    new LookupField(false));", "-    // TODO: provide more error-message information", "-    int matches = IterUtil.sizeOf(results);", "-    if (matches != 1) { throw new UnmatchedLookupException(matches); }", "-    else { return IterUtil.first(results); }", "-    ", "-    } finally { debug.logEnd(); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc083f882d06c589b458ff6e003a071e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 331, "methodNumberAfterChange": 245, "signatureBeforeChange": "   public ObjectFieldReference lookupField(final Expression object, final String name)     throws InvalidTargetException, UnmatchedLookupException", "signatureAfterChange": "      public ObjectFieldReference lookupField(final Expression object, final String name)     throws UnmatchedLookupException", "diff": ["+  ", "+  public ObjectFieldReference lookupField(final Expression object, final String name)", "+    throws UnmatchedLookupException {", "+    FieldFinder<ObjectFieldReference> finder = new FieldFinder<ObjectFieldReference>(name, false) {", "+      public ObjectFieldReference makeFieldReference(Type t, DJField f) {", "+        return new ObjectFieldReference(f, fieldType(f, t), makeCast(t, object));", "+      }", "+    };", "+    return finder.findSingleField(NodeProperties.getType(object));", "+  }", "-   */", "-  public ObjectFieldReference lookupField(final Expression object, final String name)", "-    throws InvalidTargetException, UnmatchedLookupException {", "-    debug.logStart(new String[]{\"t\", \"name\"}, wrap(NodeProperties.getType(object)), name); try {", "-", "-    class LookupField extends TypeAbstractVisitor<Iterable<ObjectFieldReference>> {", "-      ", "-      private boolean _includePrivate;", "-      ", "-      public LookupField(boolean includePrivate) {", "-        _includePrivate = includePrivate;", "-      }", "-      ", "-      private boolean validField(DJField f) { ", "-        return _includePrivate || !f.accessibility().equals(Access.PRIVATE);", "-      }", "-      ", "-      public Iterable<ObjectFieldReference> defaultCase(Type t) { return IterUtil.empty(); }", "-      ", "-      @Override public Iterable<ObjectFieldReference> forArrayType(ArrayType t) {", "-        if (name.equals(\"length\")) {", "-          return IterUtil.make(new ObjectFieldReference(ArrayLengthField.INSTANCE, INT, object));", "-        }", "-        else { return IterUtil.empty(); }", "-      }", "-      ", "-      @Override public Iterable<ObjectFieldReference> forSimpleClassType(SimpleClassType t) {", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            return IterUtil.make(new ObjectFieldReference(f, f.type(), makeCast(t, object)));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }", "-      ", "-      @Override public Iterable<ObjectFieldReference> forRawClassType(RawClassType t) {", "-        // TODO: Handle raw member access warnings", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            return IterUtil.make(new ObjectFieldReference(f, erase(f.type()), makeCast(t, object)));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }", "-      ", "-      @Override public Iterable<ObjectFieldReference> forParameterizedClassType(ParameterizedClassType t) {", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            Type fieldType = substitute(f.type(), SymbolUtil.allTypeParameters(t.ofClass()), ", "-                                        t.typeArguments());", "-            return IterUtil.make(new ObjectFieldReference(f, fieldType, makeCast(t, object)));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }", "-      ", "-    }", "-    Iterable<? extends ObjectFieldReference> results = lookupMember(NodeProperties.getType(object), ", "-                                                                    new LookupField(true), ", "-                                                                    new LookupField(false));", "-    // TODO: provide more error-message information", "-    int matches = IterUtil.sizeOf(results);", "-    if (matches != 1) { throw new UnmatchedLookupException(matches); }", "-    else { return IterUtil.first(results); }", "-    ", "-    } finally { debug.logEnd(); }", "-  }"]}], "num": 9487}
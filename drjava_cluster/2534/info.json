{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6ce9b34cb920e4302d9dedb9bace26c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0669ceb10e922b624308b1637131a810", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Class visit(WhileStatement node)", "signatureAfterChange": "   public Class visit(WhileStatement whileStmt)", "diff": ["-  public Class visit(WhileStatement node) {", "+  public Class visit(WhileStatement whileStmt) {", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "-      throw new ExecutionError(\"condition.type\", node);", "+    Expression exp = whileStmt.getCondition();", "+    ", "+    Class type = exp.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+      throw new ExecutionError(\"condition.type\", whileStmt);", "-    node.getBody().acceptVisitor(this);", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"exp.booleanValue();\"", "+      whileStmt.setCondition(_unbox(exp, type));", "+    }", "+    ", "+    whileStmt.getBody().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fab841f108d8f771a89a30140d4fad0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ReferenceTypeName.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void setRepresentation(String s)", "signatureAfterChange": "   public void setIdentifiers(List<? extends IdentifierToken> ids)", "diff": ["-  public void setRepresentation(String s) {", "-    if (s == null) throw new IllegalArgumentException(\"s == null\");", "-", "-    firePropertyChange(REPRESENTATION, representation, representation = s);", "+  public void setIdentifiers(List<? extends IdentifierToken> ids) {", "+    if (ids == null) throw new IllegalArgumentException(\"ids == null\");", "+    if (ids.size() == 0) throw new IllegalArgumentException(\"ids.size() == 0\");", "+    firePropertyChange(IDENTIFIERS, identifiers, identifiers = ids);", "+    firePropertyChange(REPRESENTATION, representation, representation = TreeUtilities.listToName(ids));"]}], "num": 2534}
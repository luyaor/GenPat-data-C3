{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0f34fc00298de0cab406cd42b9b7982", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0697ff4b48dbfb77e01e0a75a87a4814", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError)", "signatureAfterChange": "   protected SymbolData getQualifiedSymbolData(String qualClassName, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError)", "diff": ["+//    System.err.println(\"***** Checking for primitive symbol \" + qualClassName);", "-    if (sd != null) { return sd; }", "+    if (sd != null) { ", "+//      System.err.println(\"***** Matched for primitive symbol \" + sd);", "+      return sd; ", "+    }", "+    ", "+    // Check for references to generic types  (only happens in FullJava code)", "+    // TODO !!! Does not handle forward references", "+    String name = getUnqualifiedClassName(qualClassName);", "+    if (_genericTypes.containsKey(name)) {", "+//      Utilities.show(\"Return type \" + name + \" is generic and value is \" + _genericTypes.get(name));", "+      return _genericTypes.get(name);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66492e6e6ac2ba725beb77e01ed855ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "6b9ff6f56b0790b5dcf6538e88477bff3ac6b3fe", "commitAfterChange": "103224007f1944639d3154dbdfddfd055a161a74", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public String getCurrent()", "signatureAfterChange": "   public String getCurrent()", "diff": ["+    Integer cursor = new Integer(_cursor);", "+    if (_editedEntries.containsKey(cursor)) {", "+      return _editedEntries.get(cursor);", "+    }", "+"]}], "num": 23772}
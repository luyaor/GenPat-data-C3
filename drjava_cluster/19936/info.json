{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0661dc39bdd898099eb83395061d77c3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a7c6b4e5fb264482d9acab8a316788b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsEditorKit.java", "commitBeforeChange": "3ce53d032ad1bc176a487b71ca8af2994e1e9b4a", "commitAfterChange": "f9cf0907b4c2618456fd74126eedfa638b8d8fcb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "signatureAfterChange": "   public DefinitionsEditorKit(GlobalEventNotifier notifier)", "diff": ["-      if (name.equals(beginWordAction)) {", "+      if (name.equals(beginWordAction))", "-      }", "-      else if (name.equals(endWordAction)) {", "+      else if (name.equals(endWordAction))", "-      }", "-      else if (name.equals(nextWordAction)){", "+      else if (name.equals(nextWordAction))", "-      }", "-      else if (name.equals(previousWordAction)) {", "+      else if (name.equals(previousWordAction))", "-      }", "-      else if (name.equals(selectionNextWordAction)){", "+      else if (name.equals(selectionNextWordAction))", "-      }", "-      else if (name.equals(selectionPreviousWordAction)) {", "+      else if (name.equals(selectionPreviousWordAction))", "-      }", "-      else if (name.equals(selectWordAction)) {", "+      else if (name.equals(selectWordAction))", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71cad6897ec776bf180356fef35e5165", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "+        if (!_searchBackwards) setPosition(getCurrentOffset() + wordLength);", "+        else setPosition(getCurrentOffset() - wordLength);", "-      // if we've found it", "-      if (foundOffset >= 0) {", "+", "+      if (foundOffset >= 0) { // we have found it", "-        if (!_searchBackwards) {", "-          foundOffset += findWord.length();", "-        }", "+        if (!_searchBackwards) foundOffset += findWord.length();", "-      else {", "-        // if we haven't found it", "+      else { // we haven't found it yet", "-        // we still haven't found it", "-        if (foundOffset == -1) {", "+        if (foundOffset == -1) {  // we still haven't found it", "-            if (len > _doc.getLength()) {", "-              len = _doc.getLength();", "-            }", "+            if (len > _doc.getLength()) len = _doc.getLength();", "-          else {", "+          else {  // found it", "-            if (start < 0) {", "-              start = 0;", "-            }", "+            if (start < 0) start = 0;", "-          if (!_matchCase) {", "-            findSpace = findSpace.toLowerCase();", "-          }", "+          if (!_matchCase) findSpace = findSpace.toLowerCase();", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-            }", "+            if (!_searchBackwards) foundOffset += findWord.length();", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4af7088c396b16a9f946ad6b5f19fca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   \r   @SuppressWarnings(\"fallthrough\")\r   public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)", "diff": ["-  \r", "-  @SuppressWarnings(\"fallthrough\")\r", "-  public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l) {\r", "-    int pos = value.indexOf(\"-Xmx\");\r", "-    if ((pos > 1 && Character.isWhitespace(value.charAt(pos-1))) || pos == 0) {\r", "-      int endpos = pos+(\"-Xmx\".length());\r", "-      while((endpos<value.length()) &&\r", "-            (!Character.isWhitespace(value.charAt(endpos)))) {\r", "-        ++endpos;\r", "-      }\r", "-      \r", "-      int startpos = pos+(\"-Xmx\".length());\r", "-      String size = value.substring(startpos,endpos);\r", "-      long factor = 1;\r", "-      long heapSize;\r", "-      switch(size.toLowerCase().charAt(size.length()-1)) {\r", "-        case 'g': {\r", "-          factor *= 1024; // fall-through intended\r", "-        }\r", "-        case 'm': {\r", "-          factor *= 1024; // fall-through intended\r", "-        }\r", "-        case 'k': {\r", "-          factor *= 1024; // fall-through intended\r", "-          break;\r", "-        }\r", "-        default: {\r", "-          if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1))) {\r", "-            factor = 0;\r", "-          }\r", "-        }\r", "-      }\r", "-      try {\r", "-        if (factor==1) {\r", "-          heapSize = new Long(size);\r", "-        }\r", "-        else if (factor>1) {\r", "-          heapSize = new Long(size.substring(0,size.length()-1)) * factor;\r", "-        }\r", "-        else {\r", "-          heapSize = -1;\r", "-        }\r", "-      }\r", "-      catch(NumberFormatException nfe) {\r", "-        heapSize = -1; // invalid\r", "-      }\r", "-      long heapSizeMB = (heapSize / 1024) / 1024;\r", "-      // find the next bigger of the choices\r", "-      String newSetting = getNextBiggerHeapSize(heapSizeMB);\r", "-      int result;\r", "-      if (heapSize>=0) {\r", "-        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\",\r", "-          \"Clean \\\"Master JVM Args\\\"\",\r", "-          \"Ignore\" };\r", "-        result = JOptionPane.\r", "-          showOptionDialog(parent,\r", "-                           \"You seem to have specified the maximum heap size as part of the\\n\" +\r", "-                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+\r", "-                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+\r", "-                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+\r", "-                           \"just clean up \\\"JVM Args for Main JVM\\\", or ignore this potential problem?\",\r", "-                           \"Maximum Heap Size Set in JVM Arguments\",\r", "-                           0,\r", "-                           JOptionPane.QUESTION_MESSAGE,\r", "-                           null,\r", "-                           options,\r", "-                           options[0]);\r", "-      }\r", "-      else {\r", "-        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\",\r", "-          \"Ignore\" };\r", "-        result = JOptionPane.\r", "-          showOptionDialog(parent,\r", "-                           \"You seem to have specified the maximum heap size as part of the\\n\" +\r", "-                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+\r", "-                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+\r", "-                           \"Furthermore, the specified heap size \\\"\"+size+\"\\\" is invalid.\\n\"+\r", "-                           \"Would you like to clean up the \\\"JVM Args for Main JVM\\\"\\n\"+\r", "-                           \"or ignore this potential problem?\",\r", "-                           \"Maximum Heap Size Set in JVM Arguments\",\r", "-                           0,\r", "-                           JOptionPane.QUESTION_MESSAGE,\r", "-                           null,\r", "-                           options,\r", "-                           options[0]);\r", "-        if (result==1) { result = 2; }\r", "-      }\r", "-      if (result!=2) {\r", "-        // clean up\r", "-        while((endpos<value.length()) &&\r", "-              (Character.isWhitespace(value.charAt(endpos)))) {\r", "-          ++endpos;\r", "-        }\r", "-        String newValue = value.substring(0,pos) + value.substring(endpos);\r", "-        DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, l);\r", "-        DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, new OptionListener<String>() {\r", "-          public void optionChanged(OptionEvent<String> oe) {\r", "-            DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);\r", "-            SwingUtilities.invokeLater(new Runnable() { \r", "-              public void run() {\r", "-                DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, l);\r", "-              }\r", "-            });\r", "-          }\r", "-        });\r", "-        DrJava.getConfig().setSetting(MASTER_JVM_ARGS, newValue);\r", "-        if (result==0) {\r", "-          // copy\r", "-          DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);\r", "-        }\r", "-        else {\r", "-          JOptionPane.showMessageDialog(parent,\r", "-                                        \"You will have to restart DrJava before the change takes effect.\");\r", "-        }\r", "-      }\r", "-    }\r", "-  }\r", "+  ", "+  @SuppressWarnings(\"fallthrough\")", "+  public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l) {", "+    int pos = value.indexOf(\"-Xmx\");", "+    if ((pos > 1 && Character.isWhitespace(value.charAt(pos-1))) || pos == 0) {", "+      int endpos = pos+(\"-Xmx\".length());", "+      while((endpos<value.length()) &&", "+            (!Character.isWhitespace(value.charAt(endpos)))) {", "+        ++endpos;", "+      }", "+      ", "+      int startpos = pos+(\"-Xmx\".length());", "+      String size = value.substring(startpos,endpos);", "+      long factor = 1;", "+      long heapSize;", "+      switch(size.toLowerCase().charAt(size.length()-1)) {", "+        case 'g': { factor *= 1024; /* fall-through intended */ }", "+        case 'm': { factor *= 1024; /* fall-through intended */ }", "+        case 'k': {", "+          factor *= 1024; /* fall-through intended */", "+          break;", "+        }", "+        default: { if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1)))  factor = 0; }", "+      }", "+      try {", "+        if (factor==1)  heapSize = new Long(size);", "+        else if (factor>1)  heapSize = new Long(size.substring(0,size.length()-1)) * factor;", "+        else  heapSize = -1;", "+      }", "+      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }", "+      long heapSizeMB = (heapSize / 1024) / 1024;", "+      ", "+      // find the next bigger of the choices", "+      String newSetting = getNextBiggerHeapSize(heapSizeMB);", "+      int result;", "+      if (heapSize>=0) {", "+        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Master JVM Args\\\"\", \"Ignore\" };", "+        result = JOptionPane.", "+          showOptionDialog(parent,", "+                           \"You seem to have specified the maximum heap size as part of the\\n\" +", "+                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+", "+                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+", "+                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "+                           \"just clean up \\\"JVM Args for Main JVM\\\", or ignore this potential problem?\",", "+                           \"Maximum Heap Size Set in JVM Arguments\",", "+                           0,", "+                           JOptionPane.QUESTION_MESSAGE,", "+                           null,", "+                           options,", "+                           options[0]);", "+      }", "+      else {", "+        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\", \"Ignore\" };", "+        result = JOptionPane.", "+          showOptionDialog(parent,", "+                           \"You seem to have specified the maximum heap size as part of the\\n\" +", "+                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\"+size+\"\\\"\\n\"+", "+                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\"+", "+                           \"Furthermore, the specified heap size \\\"\"+size+\"\\\" is invalid.\\n\"+", "+                           \"Would you like to clean up the \\\"JVM Args for Main JVM\\\"\\n\"+", "+                           \"or ignore this potential problem?\",", "+                           \"Maximum Heap Size Set in JVM Arguments\",", "+                           0,", "+                           JOptionPane.QUESTION_MESSAGE,", "+                           null,", "+                           options,", "+                           options[0]);", "+        if (result==1) { result = 2; }", "+      }", "+      if (result!=2) {", "+        // clean up", "+        while(endpos<value.length() && Character.isWhitespace(value.charAt(endpos))) ++endpos;", "+", "+        String newValue = value.substring(0,pos) + value.substring(endpos);", "+        DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, l);", "+        DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, new OptionListener<String>() {", "+          public void optionChanged(OptionEvent<String> oe) {", "+            DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);", "+            SwingUtilities.invokeLater(new Runnable() { ", "+              public void run() { DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, l); }", "+            });", "+          }", "+        });", "+        DrJava.getConfig().setSetting(MASTER_JVM_ARGS, newValue);", "+        if (result == 0) DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);   // copy", "+        else JOptionPane.showMessageDialog(parent, \"You will have to restart DrJava before the change takes effect.\");", "+      }", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9b30af170e5ecfc6357f5052cef438a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, InstanceData finallyBlock_result)", "signatureAfterChange": "   protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result,                                                        InstanceData finallyBlock_result)", "diff": ["-   */", "-  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, InstanceData finallyBlock_result) {// Return the common superclass or null if there exists a block that doesn't return no nothing (except the finally block) ", "-    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) {return finallyBlock_result;}", "+    */", "+  protected InstanceData tryCatchLeastRestrictiveType(InstanceData tryBlock_result, InstanceData[] catchBlocks_result, ", "+                                                      InstanceData finallyBlock_result) {", "+  // Return the common superclass or null if there exists a block that doesn't return a value(except the finally block) ", "+    if (tryBlock_result == null || tryBlock_result == SymbolData.NOT_FOUND.getInstanceData()) ", "+      return finallyBlock_result;", "-      if (catchBlocks_result[i] == null) {return finallyBlock_result;}", "-      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "+      if (catchBlocks_result[i] == null) return finallyBlock_result;", "+      if (catchBlocks_result[i] != SymbolData.NOT_FOUND.getInstanceData() && ", "+          _isAssignableFrom(catchBlocks_result[i].getSymbolData(), leastRestrictiveType.getSymbolData())) {", "-    if (leastRestrictiveType == null && finallyBlock_result == null) {return null;}", "-    else if (leastRestrictiveType == null) {result = getCommonSuperType(null, finallyBlock_result.getSymbolData());}", "-    else if (finallyBlock_result == null) {result = getCommonSuperType(leastRestrictiveType.getSymbolData(), null);}", "-    else { result = getCommonSuperType(leastRestrictiveType.getSymbolData(), finallyBlock_result.getSymbolData());} ", "+    if (leastRestrictiveType == null && finallyBlock_result == null) return null;", "+    else if (leastRestrictiveType == null) result = getCommonSuperType(null, finallyBlock_result.getSymbolData());", "+    else if (finallyBlock_result == null) result = getCommonSuperType(leastRestrictiveType.getSymbolData(), null);", "+    else result = getCommonSuperType(leastRestrictiveType.getSymbolData(), finallyBlock_result.getSymbolData()); ", "-    if (result != null) {return result.getInstanceData();}", "+    if (result != null) return result.getInstanceData();"]}], "num": 19936}
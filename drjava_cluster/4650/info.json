{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e5c1648756f458db7cc94d123d98e11", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e15e9a24de9e4c4ae76f4ec9fb1172c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "   public void createConstructor(SymbolData sd)", "signatureAfterChange": "   public void createConstructor(SymbolData sd)", "diff": ["-   */", "+    */", "-    LanguageLevelVisitor sslv = _newSDs.remove(superSd);", "+    LanguageLevelVisitor sslv = LanguageLevelConverter._newSDs.remove(superSd);", "-    //only add in those fields that do not have a value and are not static.", "+    // only add in those fields that do not have a value and are not static.", "-      if (!field.hasInitializer() && !field.hasModifier(\"static\")) {", "-        if (!hasOtherConstructor) { field.gotValue(); } // Set hasValue if no other constructors need to be visited", "+      if (! field.hasInitializer() && ! field.hasModifier(\"static\")) {", "+        if (! hasOtherConstructor) { field.gotValue(); } // Set hasValue if no other constructors need to be visited", "-    _newSDs.remove(sd); //this won't do anything if sd is not in _newSDs.", "+    LanguageLevelConverter._newSDs.remove(sd); // this won't do anything if sd is not in _newSDs."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b46e55a852800bd152e550116f4a0917", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/sexp/Lexer.java", "commitBeforeChange": "f4bc3bcffd0605705e0a0b1481ab0a56ae21344e", "commitAfterChange": "62a60c4b746d2a0603d2c223e7e3b1d46d413a58", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void initWordTable()", "signatureAfterChange": "   private void initWordTable()", "diff": ["-    wordTable.put(\"true\", BooleanToken.TRUE);", "-    wordTable.put(\"false\", BooleanToken.FALSE);", "+    wordTable.put(\"true\", Tokens.BooleanToken.TRUE);", "+    wordTable.put(\"false\", Tokens.BooleanToken.FALSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6acb47df34fd9c92bef8f0446c237ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 33, "signatureBeforeChange": "           public void testComplexAnonymousClassInstantiationHelper()", "signatureAfterChange": "               public void testComplexAnonymousClassInstantiationHelper()", "diff": ["-     ComplexAnonymousClassInstantiation basic = new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java.lang.Object\")),", "-                                                                                new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]), ", "-                                                                                new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                                                                new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-", "-     _iv._package = \"i.like\";", "-     _iv.complexAnonymousClassInstantiationHelper(basic, _sd1);", "-     assertEquals(\"There should be no errors\", 0, errors.size());", "-     SymbolData obj = symbolTable.get(\"java.lang.Object\");", "-     assertNotNull(\"Object should be in the symbol table\", obj);", "-     SymbolData objInner = symbolTable.get(\"java.lang.Object.Inner\");", "-     assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "-     SymbolData inner = _sd1.getInnerClasses().get(0);", "-     assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "-     assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "-     assertEquals(\"The inner class should have null as its super class\", null, inner.getSuperClass());", "-     assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "-     assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());", "+      ComplexAnonymousClassInstantiation basic = new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"java.lang.Object\")),", "+                                                                                        new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]), ", "+                                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                                                                        new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ", "+      _iv._package = \"i.like\";", "+      _iv.complexAnonymousClassInstantiationHelper(basic, _sd1);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData obj = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "+      assertNotNull(\"Object should be in the symbol table\", obj);", "+      SymbolData objInner = LanguageLevelConverter.symbolTable.get(\"java.lang.Object.Inner\");", "+      assertEquals(\"sd1 should have one inner class\", 1, _sd1.getInnerClasses().size());", "+      SymbolData inner = _sd1.getInnerClasses().get(0);", "+      assertEquals(\"The inner class should have the proper name\", \"i.like.monkey$1\", inner.getName());", "+      assertEquals(\"The inner class should have proper outer data\", _sd1, inner.getOuterData());", "+      assertEquals(\"The inner class should have null as its super class\", null, inner.getSuperClass());", "+      assertEquals(\"The inner class should have the right package\", \"i.like\", inner.getPackage());", "+      assertEquals(\"The inner class should have 3 methods\", 3, inner.getMethods().size());"]}], "num": 4650}
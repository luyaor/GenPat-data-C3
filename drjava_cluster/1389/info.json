{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79a562ffee5da879623e181346ea8dd2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00692801525964c5d46e81c37dd55de9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "signatureAfterChange": "   protected ObjectReference _getInterpreterJVMRef()     throws DebugException", "diff": ["-    throws DebugException", "-  {", "+    throws DebugException {", "-      if (field == null) {", "-        throw new DebugException(\"Unable to get ONLY field\");", "-      }", "-      else {", "-        return (ObjectReference) rt.getValue(field);", "-      }", "+      if (field == null) throw new DebugException(\"Unable to get ONLY field\");", "+      return (ObjectReference) rt.getValue(field);", "-    else {", "-      throw new DebugException(\"Could not get a reference to interpreterJVM\");", "-    }", "+    else throw new DebugException(\"Could not get a reference to interpreterJVM\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f8541e7b118fbf61a1d39f43de876e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "90ef69282c46168e0825e1541e1aac142b594af9", "commitAfterChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private void resumeThread(ThreadReference thread)", "signatureAfterChange": "      private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException", "diff": ["-  private void resumeThread(ThreadReference thread){", "+  private void resumeThread(ThreadReference thread, boolean shouldCopyBack) throws DebugException{", "+    ", "+    if( printMessages )  System.out.println(\"Getting suspendCount = \" + suspendCount);", "+", "-    currThreadResumed();", "+    if( shouldCopyBack ){", "+      _doCopyBack(); /* copy variables back into the thread */", "+    }", "+    try{", "+      currThreadResumed();", "+    }", "+    catch(DebugException e){", "+      throw new UnexpectedException(e);", "+    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1eb86ed1e077ee20e4c4a7583ddb80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "commitAfterChange": "b1b91197c778ee62ce767051b412c31f7bcdddb8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)     throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep)     throws DebugException", "diff": ["-  private void _resumeThread(ThreadReference thread, boolean shouldCopyBack)", "+  private void _resumeThread(ThreadReference thread, boolean fromStep)", "-    if (shouldCopyBack) {", "+    if (!fromStep) {", "+      _updateWatches();", "-      removeCurrentDebugInterpreter();", "-      _updateWatches();", "+      _removeCurrentDebugInterpreter(fromStep);", "-    if (!_suspendedThreads.isEmpty()) {", "+    if (!fromStep && !_suspendedThreads.isEmpty()) {", "-    }", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79f3c4195c16fbfaccf6be947112c74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   protected synchronized void _resumeHelper(boolean fromStep)     throws DebugException", "signatureAfterChange": "   private void _resumeHelper(boolean fromStep) throws DebugException", "diff": ["-  protected synchronized void _resumeHelper(boolean fromStep)", "-    throws DebugException", "-  {", "+  private void _resumeHelper(boolean fromStep) throws DebugException {", "-      if (printMessages) {", "-        printStream.println(\"In resumeThread()\");", "-      }", "+      if (printMessages) printStream.println(\"In resumeThread()\");", "-    catch (NoSuchElementException e) {", "-      throw new DebugException(\"No thread to resume.\");", "-    }", "+    catch (NoSuchElementException e) { throw new DebugException(\"No thread to resume.\"); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8f66ae9bd9063f5b263a57c4307f8ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep)     throws DebugException", "signatureAfterChange": "   private void _resumeThread(ThreadReference thread, boolean fromStep) throws DebugException", "diff": ["-  private void _resumeThread(ThreadReference thread, boolean fromStep)", "-    throws DebugException", "-  {", "+  private void _resumeThread(ThreadReference thread, boolean fromStep) throws DebugException {", "-    if (printMessages) {", "-      printStream.println(\"Getting suspendCount = \" + suspendCount);", "-    }", "+    _log.log(\"Getting suspendCount = \" + suspendCount);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e556472b634cbc63046bd05dc0b8b87b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException", "signatureAfterChange": "   private boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException", "diff": ["-  protected boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException {", "-    try {", "-      return thread.isSuspended() && thread.frameCount() > 0;", "-    }", "+  private boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException {", "+    ", "+    try { return thread.isSuspended() && thread.frameCount() > 0; }", "-      throw new DebugException(\"Could not count frames on a suspended thread: \" +", "-                               itse);", "+      throw new DebugException(\"Could not count frames on a suspended thread: \" + itse);"]}], "num": 1389}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4e6d67b42a0ff33368c637714161e73", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e913f3f0e9cfecb2da4558f4609c167", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     public Object visit(QualifiedName node)", "signatureAfterChange": "   public Node visit(QualifiedName node)", "diff": ["+   */", "+  public Node visit(QualifiedName node) {", "+    List<IdentifierToken>  ids = node.getIdentifiers();", "+    IdentifierToken t = ids.get(0);", "+    ", "+    if (context.isDefined(t.image())) {", "+      // The name starts with a reference to a local variable,", "+      // end of the name is a sequence of field access", "+      Expression result = context.createName(node, t);", "+      Iterator<IdentifierToken> it = ids.iterator();", "+      it.next();", "+      ", "+      IdentifierToken t2;", "+      while (it.hasNext()) {", "+        t2 = it.next();", "+        result = new ObjectFieldAccess(result, t2.image(),", "+                                       node.getFilename(),", "+                                       t.beginLine(), t.beginColumn(),", "+                                       t2.endLine(), t2.endColumn());", "+      }", "+      return result;", "+    } ", "+    ", "+    // The name must be, or starts with, a class name", "+    List<IdentifierToken> l = ListUtilities.listCopy(ids);", "+    boolean b = false;", "+    ", "+    while (l.size() > 0) {", "+      String s = TreeUtilities.listToName(l);", "+      if (b = context.classExists(s)) {", "+        break;", "+      }", "+      l.remove(l.size()-1);", "+    }", "+    ", "+    if (!b) {", "+      // It is an error if no matching class or field was found", "+      node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { t.image() });", "+      throw new ExecutionError(\"undefined.class\", node);", "+    }", "+    ", "+    // Creates a ReferenceType node", "+    IdentifierToken t2 = l.get(l.size()-1);", "+    ReferenceType rt = new ReferenceType(l,", "+                                         node.getFilename(),", "+                                         t.beginLine(), t.beginColumn(),", "+                                         t2.endLine(),  t2.endColumn());", "+    ", "+    if (l.size() != ids.size()) {", "+      // The end of the name is a sequence of field access", "+      ListIterator<IdentifierToken> it = ids.listIterator(l.size());", "+      t2 = it.next();", "+      Expression result =", "+        new StaticFieldAccess(rt, t2.image(), node.getFilename(),", "+                              t.beginLine(), t.beginColumn(),", "+                              t2.endLine(), t2.endColumn());", "+      while (it.hasNext()) {", "+        t2 = it.next();", "+        result = new ObjectFieldAccess(result, t2.image(),", "+                                       node.getFilename(),", "+                                       t.beginLine(), t.beginColumn(),", "+                                       t2.endLine(), t2.endColumn());", "+      }", "+      return result;", "+    } ", "+    else", "+      return rt;", "+  }", "-     */", "-    public Object visit(QualifiedName node) {", "-        List  ids = node.getIdentifiers();", "-        IdentifierToken t = (IdentifierToken)ids.get(0);", "-", "-        if (context.isDefined(t.image())) {", "-            // The name starts with a reference to a local variable,", "-            // end of the name is a sequence of field access", "-\t    Expression result = context.createName(node, t);", "-            Iterator it = ids.iterator();", "-            it.next();", "-", "-            IdentifierToken t2;", "-            while (it.hasNext()) {", "-                result = new ObjectFieldAccess(result,", "-                                               (t2 = (IdentifierToken)it.next()).image(),", "-                                               node.getFilename(),", "-                                               t.beginLine(), t.beginColumn(),", "-                                               t2.endLine(),  t2.endColumn());", "-            }", "-            return result;", "-        } ", "-\t    ", "-        // The name must be, or starts with, a class name", "-        List      l = (List)((LinkedList)ids).clone();", "-\tboolean   b = false;", "-", "-\twhile (l.size() > 0) {", "-\t    String s = TreeUtilities.listToName(l);", "-\t    if (b = context.classExists(s)) {", "-\t\tbreak;", "-\t    }", "-\t    l.remove(l.size()-1);", "-\t}", "-", "-        if (!b) {", "-            // It is an error if no matching class or field was found", "-\t    node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { t.image() });", "-           throw new ExecutionError(\"undefined.class\", node);", "-        }", "-", "-        // Creates a ReferenceType node", "-        IdentifierToken t2 = (IdentifierToken)l.get(l.size()-1);", "-        ReferenceType rt = new ReferenceType(l,", "-\t\t\t\t\t     node.getFilename(),", "-\t\t\t\t\t     t.beginLine(), t.beginColumn(),", "-\t\t\t\t\t     t2.endLine(),  t2.endColumn());", "-\t", "-        if (l.size() != ids.size()) {", "-            // The end of the name is a sequence of field access", "-            ListIterator it = ids.listIterator(l.size());", "-            Expression result =", "-\t\tnew StaticFieldAccess(rt,", "-\t\t\t\t      (t2 = (IdentifierToken)it.next()).image(),", "-\t\t\t\t      node.getFilename(),", "-\t\t\t\t      t.beginLine(), t.beginColumn(),", "-\t\t\t\t      t2.endLine(),  t2.endColumn());", "-            while (it.hasNext()) {", "-                result = new ObjectFieldAccess(result,", "-                                               (t2 = (IdentifierToken)it.next()).image(),", "-                                               node.getFilename(),", "-                                               t.beginLine(), t.beginColumn(),", "-                                               t2.endLine(),  t2.endColumn());", "-            }", "-            return result;", "-        } else { ", "-            return rt;", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95b26c0d8fbcbc8f82fe0992e0ac4fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17590567cb9f06269b33249dad955c39164a9028", "commitAfterChange": "6222fd84e3aa6c7b8b3da9d73ccf7a9a3370487b", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "          public List filter(List threads)", "signatureAfterChange": "          public List<ThreadReference> filter(List<ThreadReference> threads)", "diff": ["-    public List filter(List threads) {", "-      LinkedList retList = new LinkedList();", "-      Enumeration keys = _theDeadThreads.keys();", "-      ", "-      /**", "-       * The following code removes dead threads from _theDeadThreads if", "-       * the threads do not appear in the list of threads threads.  This", "-       * must be done to make sure that _theDeadThreads doesn't grow too", "-       * large with useless info", "-       */", "-      while(keys.hasMoreElements()){", "-        Long key = (Long)keys.nextElement();", "-        ", "+    public List<ThreadReference> filter(List<ThreadReference> threads) {", "+      LinkedList<ThreadReference> retList = new LinkedList();", "+      Iterator<Long> keys = _theDeadThreads.keySet().iterator();", "+", "+      // The following code removes dead threads from _theDeadThreads if", "+      // the threads do not appear in the list of threads threads.  This", "+      // must be done to make sure that _theDeadThreads doesn't grow too", "+      // large with useless info.", "+      while(keys.hasNext()){", "+        Long key = keys.next();", "+", "-          if( ((ThreadReference)threads.get(i)).uniqueID() == key.longValue() ){", "+          if(threads.get(i).uniqueID() == key.longValue()){", "-        ", "+", "-      ", "-      Iterator iterator = threads.iterator();", "-      ThreadReference ref = null;", "-      ", "+", "+      Iterator<ThreadReference> iterator = threads.iterator();", "-        ref = (ThreadReference)iterator.next();", "-        if( _theDeadThreads.get(new Long(ref.uniqueID())) == null ){", "+        ThreadReference ref = iterator.next();", "+        if(_theDeadThreads.get(new Long(ref.uniqueID())) == null) {"]}], "num": 18075}
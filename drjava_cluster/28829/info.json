{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dc5f26d491b2c00099f117927bdd0c7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5860e02864fb0a5e53fa25bf47e62238", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "fbaecba32a4936f7aab208313b312f73181698a7", "commitAfterChange": "6bd1f449c6b6476464bf38d05b5455668d0d2ac5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["+    // Test the resize cache method by increasing the size of the cache to 5, which is still less than the number of open documents: 6", "+    _cache.setCacheSize(5); // 4 3 5 6 | 2 1 ", "+    assertEquals(\"The cache size should now be 5\", 5, _cache.getCacheSize());", "+    assertEquals(\"There should still only be 4 files in the cache\", 4, _cache.getNumInCache());", "+    ", "+    doc2.getLength(); // 2 4 3 5 6 | 1", "+    assertTrue(\"The document 2 should now be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());", "+    assertEquals(\"There should be 5 documents in the cache\", 5, _cache.getNumInCache());", "+    ", "+    _cache.setCacheSize(3); // 2 4 3 | 5 6 1", "+    ", "+    assertEquals(\"The cache size should now be 3\", 3, _cache.getCacheSize());", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "+    assertTrue(\"The document 2 should be in the cache\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"The document 4 should be in the cache\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"The document 3 should be in the cache\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"The document 5 should now be out of the cache\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"The document 6 should now be out of the cache\", _adapterTable.get(doc6).isReady());", "+    assertFalse(\"The document 1 should still be out of the cache\", _adapterTable.get(doc1).isReady());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c797be14bf2c388301aa3e6e5a081e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "b79563bf1d51671314589f6c744a87acc54fe8fa", "commitAfterChange": "517a134496ea28d3d08f7cd449813e2a756de857", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "signatureAfterChange": "   public void testScriptLoading() throws IOException, OperationCanceledException", "diff": ["+    // Set up a sample history", "+    ", "+    // Load the history as a script", "-    ism.nextInteraction();", "-    assertEquals(\"Should have put the first interaction into the interactions document.\",", "-                 line1, doc.getCurrentInteraction());", "+    ", "+    // Should not be able to get the previous interaction", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    ", "+    // Get the next (first) interaction", "+    assertTrue(\"Should have next\", ism.hasNextInteraction());", "-    assertEquals(\"Should have put the second interaction into the interactions document.\",", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+", "+    // Still should not be able to get the previous interaction", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    try {", "+      ism.prevInteraction();", "+      fail(\"Should not have been able to get previous interaction!\");", "+    }", "+    catch (IllegalStateException ise) {", "+      // good, continue", "+    }", "+    ", "+    // Skip it; get the next (second) interaction", "+    assertTrue(\"Should have next\", ism.hasNextInteraction());", "+    ism.nextInteraction();", "+    assertEquals(\"Should have put the second line into the document.\",", "+    ", "+    // Now we should be able to get the previous interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+    ", "+    // Go back to the second line and execute it", "+    ism.nextInteraction();", "+    ", "+    // Should not be able to get the next interaction, since we're at the end", "+    assertTrue(\"Should have no next\", !ism.hasNextInteraction());", "+    // Get Previous should return the most recently executed interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "-    assertEquals(\"Should have put the first interaction into the interactions document.\",", "+    assertEquals(\"Should have put the second line into the document.\",", "+                 line2, doc.getCurrentInteraction());", "+    ", "+    // Get Previous should now return the first interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+    ", "+    // Should have no more previous", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());", "+    ", "+    // Now execute the first interaction", "+    ", "+    // Get Previous should return the most recent (first) interaction", "+    assertTrue(\"Should have previous\", ism.hasPrevInteraction());", "+    ism.prevInteraction();", "+    assertEquals(\"Should have put the first line into the document.\",", "+                 line1, doc.getCurrentInteraction());", "+    ", "+    // Should not be able to get the previous interaction this time", "+    assertTrue(\"Should have no previous\", !ism.hasPrevInteraction());"]}], "num": 28829}
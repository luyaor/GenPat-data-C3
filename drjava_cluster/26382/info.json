{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c192c318366a17dfdbed0ab273fb878b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0309e9d0f484b25978561fdc4ec61fca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashMultiset.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "      public Iterator<T> iterator()", "signatureAfterChange": "      public Iterator<T> iterator()", "diff": ["-    final Iterator<Map.Entry<T, Integer>> mapIter = _counts.entrySet().iterator();", "+    final Iterator<Map.Entry<T, Integer>> entries = _counts.entrySet().iterator();", "-      ", "-      private Map.Entry<T, Integer> currentEntry = null;", "-      private int i;", "-      private boolean removed = false;", "+      private Map.Entry<T, Integer> _current = null;", "+      private int _currentCount = 0;", "+      private boolean _removed = false;", "-      public boolean hasNext() { ", "-        return mapIter.hasNext() || (currentEntry != null && i < currentEntry.getValue());", "-      }", "+      public boolean hasNext() { return _currentCount > 0 || entries.hasNext(); }", "-        if (currentEntry == null || i >= currentEntry.getValue()) { ", "-          currentEntry = mapIter.next(); ", "-          i = 0;", "+        if (_currentCount == 0) {", "+          _current = entries.next();", "+          _currentCount = _current.getValue();", "-        removed = false;", "-        i++; // i will never be 0 at this point", "-        return currentEntry.getKey();", "+        _removed = false;", "+        _currentCount--;", "+        return _current.getKey();", "-        if (currentEntry == null || removed) { throw new IllegalStateException(); }", "+        if (_current == null || _removed) { throw new IllegalStateException(); }", "-          removed = true;", "+          _removed = true;", "-          int oldCount = currentEntry.getValue();", "-          if (oldCount == 1) {", "-            currentEntry = null;", "-            mapIter.remove();", "-          }", "-          else {", "-            currentEntry.setValue(oldCount - 1);", "-            i--; // guaranteed to be at least 1 before decrementing", "-          }", "+          int oldCount = _current.getValue();", "+          if (oldCount == 1) { entries.remove(); }", "+          else { _current.setValue(oldCount - 1); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ace8ec10196f6bb9cf27cc6b37b76cc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "7b90d9227a34693633b434e1d2773067e65a70e5", "commitAfterChange": "1b1a2ff927caf38a8f2ba21780232fcbeb4319bb", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   private void _updateWatches() throws DebugException", "signatureAfterChange": "   private void _updateWatches() throws DebugException", "diff": ["+      ObjectReference obj = currFrame.thisObject();", "+      ", "+        ", "-          ObjectReference obj = currFrame.thisObject();", "+          // Not compiled with debug flag.... ignore", "+        ObjectReference outer = obj;", "-          String className = outerRt.name();", "-          while (field == null) {", "+          Field outerThis = outerRt.fieldByName(\"this$0\");", "+          ", "+          while ((field == null) && (outerThis != null)) {", "+            outer = (ObjectReference) outer.getValue(outerThis);", "+            //outer = (ObjectReference)outer.getValue(outerThis);//currFrame.getValue(var);", "+            outerRt = outer.referenceType();", "+            field = outerRt.fieldByName(currName);", "+            ", "+            if (field == null) {", "+              // Enter the loop again with the next outer enclosing class", "+              outerThis = outerRt.fieldByName(\"this$0\");                ", "+            }    ", "+          }", "+          ", "+          if (field != null) {", "+            currWatch.setValue(_getValue(outer.getValue(field)));", "+            try {", "+              currWatch.setType(field.type());", "+            }", "+            catch (ClassNotLoadedException cnle) {", "+              currWatch.setType(null);", "+            }", "+          }", "+          /*", "+              LocalVariable var;", "+              ObjectReference outer;", "+              do {", "+                // get the object reference for outer classes", "+                var = currFrame.visibleVariableByName(\"this$0\");", "+                outer = (ObjectReference)currFrame.getValue(var);", "+              }", "+              while (!outer.referenceType().equals(outerRt));", "+                 ", "+              */", "+          ", "+              /*", "-            }", "-          }", "+              ", "+            }*/"]}], "num": 26382}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a51f735d7148ba1cd5c288a03b81c24", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a822c8f94338d383242af40f2bfd556", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2d6da2615a43c4b51e5b38392626de03e404cd1c", "commitAfterChange": "3a303b63c7111176b595875a69f29b6020aaa568", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "   public void generateJavaAPIList()", "signatureAfterChange": "   public void generateJavaAPIList()", "diff": ["-      String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+      String linkVersion = DrJava.getConfig().getSetting(JAVADOC_API_REF_VERSION);", "+      if (linkVersion.equals(JAVADOC_AUTO_TEXT)) {", "+        // use the compiler's version of the Java API Javadoc", "+        edu.rice.cs.plt.reflect.JavaVersion ver = _model.getCompilerModel().getActiveCompiler().version();", "+        if (ver==edu.rice.cs.plt.reflect.JavaVersion.JAVA_1_4) {", "+          linkVersion = JAVADOC_1_4_TEXT;", "+        }", "+        else if (ver==edu.rice.cs.plt.reflect.JavaVersion.JAVA_5) {", "+          linkVersion = JAVADOC_1_5_TEXT;", "+        }", "+        else if (ver==edu.rice.cs.plt.reflect.JavaVersion.JAVA_6) {", "+          linkVersion = JAVADOC_1_6_TEXT;", "+        }", "+        else {", "+          linkVersion = JAVADOC_1_3_TEXT;", "+        }", "+      }", "-        base = DrJava.getConfig().getSetting(JAVADOC_1_3_LINK);", "+        base = DrJava.getConfig().getSetting(JAVADOC_1_3_LINK) + \"/\";", "-        base = DrJava.getConfig().getSetting(JAVADOC_1_4_LINK);", "+        base = DrJava.getConfig().getSetting(JAVADOC_1_4_LINK) + \"/\";", "-        base = DrJava.getConfig().getSetting(JAVADOC_1_5_LINK);", "+        base = DrJava.getConfig().getSetting(JAVADOC_1_5_LINK) + \"/\";", "+      }", "+      else if (linkVersion.equals(JAVADOC_1_6_TEXT)) {", "+        base = \"\";", "+        suffix = \"/allclasses-1.6.html\";", "-                _javaAPIList.add(new JavaAPIListEntry(simpleClassName, fullClassName, new URL(base + \"/\" + link + \".html\")));", "+                URL pageURL = new URL(base + link + \".html\");", "+                _javaAPIList.add(new JavaAPIListEntry(simpleClassName, fullClassName, pageURL));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0d7ca2a590b14113b48f7c29e2963db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "faafdc2e01d97cbdc44ff87232cdd9b0c82af0fb", "commitAfterChange": "0956148bfc1a4479797fc110624bb0930312ee55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "diff": ["-", "+    ", "+    ", "+    /**", "+     * junit can come back with a string in two different formats:", "+     * so we'll parse both formats, and then decide which one to use", "+     */", "+    ", "+    String className;", "-    String className;", "-    ", "-    int indexOfClass = classNames.indexOf(className);", "-    File file;", "-    if (indexOfClass != -1) {", "-      file = files.get(indexOfClass);", "-    }", "-    else {", "-      file = _jmc.getFileForClassName(className);", "-    }", "-", "-", "+    ", "+    /**", "+     * if the classname is not in the stacktrace, then the test that", "+     * failed was inherited by a superclass. let's look for that classname", "+     */", "+    if(stackTrace.indexOf(className) == -1){", "+      /* get the stack trace of the junit error */", "+      String trace = failure.trace();", "+      /* knock off the first line of the stack trace.", "+       * now the string will look like", "+       * at my.package.class(file.java:line)", "+       * at other.package.class(anotherfile.java:line)", "+       * etc...", "+       */", "+      trace = trace.substring(trace.indexOf('\\n')+1);", "+      while(trace.indexOf(\"junit.framework.Assert\") != -1 &&", "+            trace.indexOf(\"junit.framework.Assert\") < trace.indexOf(\"(\")){", "+        /* the format of the trace will have \"at junit.framework.Assert...\"", "+         * on each line until the line of the actual source file.", "+         * if the exception was thrown from the test case (so the test failed", "+         * without going through assert), then the source file will be on", "+         * the first line of the stack trace", "+         */", "+        trace = trace.substring(trace.indexOf('\\n')+1);", "+      }", "+      trace = trace.substring(trace.indexOf('(')+1);", "+      trace = trace.substring(0, trace.indexOf(')'));", "+      className = trace.substring(0,trace.indexOf(':'));", "+      className = trace.substring(0,trace.lastIndexOf('.'));", "+      classNameAndTest = className + \".\" + testName;", "+    }", "+    ", "+    ", "+    ", "+    ", "+", "+    int indexOfClass = classNames.indexOf(className);", "+    File file;", "+    if (indexOfClass != -1) {", "+      file = files.get(indexOfClass);", "+    }", "+    else {", "+      file = _jmc.getFileForClassName(className);", "+    }", "+    "]}], "num": 29603}
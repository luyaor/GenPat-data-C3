{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8af7e3abc3a96d98a225390ad4ae3d68", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f924c62308084adfcf85a85aaf48922", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public Object visit(SimpleAssignExpression node)", "signatureAfterChange": "   public Node visit(SimpleAssignExpression node)", "diff": ["+   */", "+  public Node visit(SimpleAssignExpression node) {", "+    // First, visit the right expression", "+    Expression right  = node.getRightExpression();", "+    Node o = right.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,right);", "+      node.setRightExpression((Expression)o);", "+    }", "+    ", "+    // Perhaps is this assignment a variable declaration ?", "+    Expression left  = node.getLeftExpression();", "+    if (left instanceof QualifiedName) {", "+      List<IdentifierToken> ids = ((QualifiedName)left).getIdentifiers();", "+      String var = ids.get(0).image();", "+      if (ids.size() == 1 && !context.exists(var)) {", "+        context.define(var, null);", "+      }", "+    } ", "+    ", "+    // Visit the left expression", "+    o = left.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,left);", "+      node.setLeftExpression((Expression)o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(SimpleAssignExpression node) {", "-        // First, visit the right expression", "-        Expression right  = node.getRightExpression();", "-        Object o = right.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"right.expression\", right);", "-\t    }", "-\t    node.setRightExpression((Expression)o);", "-        }", "-", "-        // Perhaps is this assignment a variable declaration ?", "-        Expression left  = node.getLeftExpression();", "-        if (left instanceof QualifiedName) {", "-            List   ids = ((QualifiedName)left).getIdentifiers();", "-            String var = ((IdentifierToken)ids.get(0)).image();", "-            if (ids.size() == 1 && !context.exists(var)) {", "-\t\tcontext.define(var, null);", "-\t    }", "-\t}\t", "-", "-        // Visit the left expression", "-\to = left.acceptVisitor(this);", "-\tif (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-                throw new ExecutionError(\"left.expression\", node);", "-\t    }", "-\t    node.setLeftExpression((Expression)o);", "-\t}", "-\treturn null;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc656400d60c054e5a76bf6533b77c87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "     public Object visit(ConditionalExpression node)", "signatureAfterChange": "   public Node visit(ConditionalExpression node)", "diff": ["+   */", "+  public Node visit(ConditionalExpression node) {", "+    // Check each subexpression", "+    Node   n = node.getConditionExpression();", "+    Node o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setConditionExpression((Expression)o);", "+    }", "+    ", "+    n = node.getIfTrueExpression();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setIfTrueExpression((Expression)o);", "+    }", "+    ", "+    n = node.getIfFalseExpression();", "+    o = n.acceptVisitor(this);", "+    if (o != null) {", "+      rejectReferenceType(o,n);", "+      node.setIfFalseExpression((Expression)o);", "+    }", "+    return null;", "+  }", "-     */", "-    public Object visit(ConditionalExpression node) {", "-        // Check each subexpression", "-\tNode   n = node.getConditionExpression();", "-        Object o = n.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.expression\", n);", "-\t    }", "-\t    node.setConditionExpression((Expression)o);", "-        }", "-", "-\tn = node.getIfTrueExpression();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.second.operand\", n);", "-\t    }", "-\t    node.setIfTrueExpression((Expression)o);", "-        }", "-\t", "-\tn = node.getIfFalseExpression();", "-        o = n.acceptVisitor(this);", "-        if (o != null) {", "-\t    if (o instanceof ReferenceType) {", "-\t\tthrow new ExecutionError(\"malformed.third.operand\", n);", "-\t    }", "-\t    node.setIfFalseExpression((Expression)o);", "-        }", "-\treturn null;", "-    }"]}], "num": 9045}
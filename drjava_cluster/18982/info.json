{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b721f209d278474df4e3a1dd73d1c69", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e81dfc645df7c2a26225b7764f13db4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 412, "methodNumberAfterChange": 412, "signatureBeforeChange": "\r \r   public void forLabeledCase(LabeledCase that)", "signatureAfterChange": "    public void forLabeledCase(LabeledCase that)", "diff": ["-\r", "-  public void forLabeledCase(LabeledCase that) {\r", "-    forLabeledCaseDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLabel().visit(this);\r", "-    that.getCode().visit(this);\r", "-    forLabeledCaseOnly(that);\r", "-  }\r", "+", "+  public void forLabeledCase(LabeledCase that) {", "+    forLabeledCaseDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLabel().visit(this);", "+    that.getCode().visit(this);", "+    forLabeledCaseOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e0b1c37c9a9f523d10fd2c3c3d3093a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 413, "methodNumberAfterChange": 413, "signatureBeforeChange": "\r \r   public void forDefaultCase(DefaultCase that)", "signatureAfterChange": "    public void forDefaultCase(DefaultCase that)", "diff": ["-\r", "-  public void forDefaultCase(DefaultCase that) {\r", "-    forDefaultCaseDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getCode().visit(this);\r", "-    forDefaultCaseOnly(that);\r", "-  }\r", "+", "+  public void forDefaultCase(DefaultCase that) {", "+    forDefaultCaseDoFirst(that);", "+    if (prune(that)) return;", "+    that.getCode().visit(this);", "+    forDefaultCaseOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc33b31d0005d8f7bdb9406fad7868d1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 414, "methodNumberAfterChange": 414, "signatureBeforeChange": "\r \r   public void forCatchBlock(CatchBlock that)", "signatureAfterChange": "    public void forCatchBlock(CatchBlock that)", "diff": ["-\r", "-  public void forCatchBlock(CatchBlock that) {\r", "-    forCatchBlockDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getException().visit(this);\r", "-    that.getBlock().visit(this);\r", "-    forCatchBlockOnly(that);\r", "-  }\r", "+", "+  public void forCatchBlock(CatchBlock that) {", "+    forCatchBlockDoFirst(that);", "+    if (prune(that)) return;", "+    that.getException().visit(this);", "+    that.getBlock().visit(this);", "+    forCatchBlockOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa9931b88249977f407fd183297b9050", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 415, "methodNumberAfterChange": 415, "signatureBeforeChange": "\r \r   public void forSimpleAssignmentExpression(SimpleAssignmentExpression that)", "signatureAfterChange": "    public void forSimpleAssignmentExpression(SimpleAssignmentExpression that)", "diff": ["-\r", "-  public void forSimpleAssignmentExpression(SimpleAssignmentExpression that) {\r", "-    forSimpleAssignmentExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getName().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forSimpleAssignmentExpressionOnly(that);\r", "-  }\r", "+", "+  public void forSimpleAssignmentExpression(SimpleAssignmentExpression that) {", "+    forSimpleAssignmentExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getName().visit(this);", "+    that.getValue().visit(this);", "+    forSimpleAssignmentExpressionOnly(that);", "+  }"]}], "num": 18982}
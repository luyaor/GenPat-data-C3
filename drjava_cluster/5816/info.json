{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5124b1ea2158b5f992bcbbb5c1ea33ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1472addf79e4521c9f05363fc1b111ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public void testLookupConstructor()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException", "signatureAfterChange": "         public void testLookupConstructor()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException", "diff": ["-      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{int.class,int.class,int.class});", "+      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class<?>[]{int.class,int.class,int.class});", "-      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{String.class,int.class,int.class});", "+      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class<?>[]{String.class,int.class,int.class});", "-      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{Class.class,int.class});", "+      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class<?>[]{Class.class,int.class});", "-    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{Method.class,int.class});", "+    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class<?>[]{Method.class,int.class});", "-    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{Field.class,String.class,String.class,String.class});", "+    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class<?>[]{Field.class,String.class,String.class,String.class});", "-    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{int.class});", "+    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class<?>[]{int.class});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ded483da222466eb2f23ec1e21bb5c7b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "commitAfterChange": "0a07e9e014b16c2f39cd8c33e92a5be46fcf341e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public void testLookupConstructor()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException", "signatureAfterChange": "         public void testLookupConstructor()      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException", "diff": ["-      c = lookupConstructor(TestClass.class, new Class[]{int.class,int.class,int.class});", "+      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{int.class,int.class,int.class});", "-      c = lookupConstructor(TestClass.class, new Class[]{String.class,int.class,int.class});", "+      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{String.class,int.class,int.class});", "-      c = lookupConstructor(TestClass.class, new Class[]{Class.class,int.class});", "+      c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{Class.class,int.class});", "-    c = lookupConstructor(TestClass.class, new Class[]{Method.class,int.class});", "+    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{Method.class,int.class});", "-    c = lookupConstructor(TestClass.class, new Class[]{Field.class,String.class,String.class,String.class});", "+    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{Field.class,String.class,String.class,String.class});", "+    ", "+    c = ReflectionUtilities.lookupConstructor(TestClass.class, new Class[]{int.class});", "+    result = ((TestClass)c.newInstance(new Object[] {new Integer(1)})).value();", "+    assertEquals(\"(int) should have found correct constructor\",new TestClass(1).value(),result);"]}], "num": 5816}
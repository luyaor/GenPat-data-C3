{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48e8d15c32554af5a18514901c8fa03c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "331ba14f0ff277c74c4a9ef1228446a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "      public void testForPackageStatement()", "signatureAfterChange": "      public void testForPackageStatement()", "diff": ["-        new Word(SourceInfo.NO_INFO, \"java\"), ", "-        new Word(SourceInfo.NO_INFO, \"lang\"), ", "-        new Word(SourceInfo.NO_INFO, \"Object\")};", "-      Word[] okWords = new Word[] { new Word(SourceInfo.NO_INFO, \"java\"), new Word(SourceInfo.NO_INFO, \"lang\")};", "+        new Word(NONE, \"java\"), ", "+        new Word(NONE, \"lang\"), ", "+        new Word(NONE, \"Object\")};", "+      Word[] okWords = new Word[] { new Word(NONE, \"java\"), new Word(NONE, \"lang\")};", "-        new PackageStatement(SourceInfo.NO_INFO, new CompoundWord(SourceInfo.NO_INFO, badWords));", "+        new PackageStatement(NONE, new CompoundWord(NONE, badWords));", "-        new PackageStatement(SourceInfo.NO_INFO, new CompoundWord(SourceInfo.NO_INFO, okWords));", "+        new PackageStatement(NONE, new CompoundWord(NONE, okWords));", "-                   \"java.lang.Object is not a allowable package name, because it conflicts with a class you have already defined\", errors.getLast().getFirst());", "+                   \"java.lang.Object is not a allowable package name, because it conflicts with a class you have\"", "+                     + \" already defined\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a60c1a2964aa88fd4d0905df840270", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Lisa\"),", "-                                         new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superI\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      InterfaceDef id = new InterfaceDef(NONE, _publicMav, new Word(NONE, \"Lisa\"),", "+                                         new TypeParameter[0], ", "+                                         new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superI\", new Type[0])}, ", "+                                         new BracedBody(NONE, new BodyItemI[0]));", "-      InterfaceDef id2 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"somewhereElse.Lisa\"),", "-                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superI\",  new Type[0])},", "-                                  new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-                                  ", "-                                  ", "+      InterfaceDef id2 = new InterfaceDef(NONE, _publicMav, new Word(NONE, \"somewhereElse.Lisa\"),", "+                                          new TypeParameter[0], ", "+                                          new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superI\",  new Type[0])},", "+                                          new BracedBody(NONE, new BodyItemI[0]));                          ", "-      assertEquals(\"The error message should be correct\", \"The interface superI is private and cannot be accessed from somewhereElse.Lisa\", errors.get(1).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The interface superI in superI is private and cannot be accessed from somewhereElse.Lisa\", ", "+                   errors.get(1).getFirst());", "-//      InterfaceDef id3 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "-//                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+//      InterfaceDef id3 = ", "+//        new InterfaceDef(NONE, _publicMav, new Word(NONE, \"JimesH\"),", "+//                         new TypeParameter[0], ", "+//                         new ReferenceType[] {new ClassOrInterfaceType(NONE, \"java.lang.Runnable\", new Type[0])},", "+//                         new BracedBody(NONE, new BodyItemI[0]));", "-//      assertEquals(\"The error message should be correct\", \"JimesH extends the Runnable interface, which is not allowed at any language level\", errors.get(2).getFirst());", "+//      assertEquals(\"The error message should be correct\", ", "+//                   \"JimesH extends the Runnable interface, which is not allowed at any language level\", ", "+//                   errors.get(2).getFirst());", "-      InterfaceDef id4 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Bart\"),", "-                                         new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superC\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-", "-      //Test that no cyclic inheritance goes okay", "+      InterfaceDef id4 = ", "+        new InterfaceDef(NONE, _publicMav, new Word(NONE, \"Bart\"),", "+                         new TypeParameter[0], ", "+                         new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superC\", new Type[0])}, ", "+                         new BracedBody(NONE, new BodyItemI[0])); ", "+      // Test that no cyclic inheritance goes okay"]}], "num": 20572}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a568fbe3d837ebe4929d647656480332", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dc982da8dcd16195c43424d81faca98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyFullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "          public void testForAbstractMethodDef()", "signatureAfterChange": "          public void testForAbstractMethodDef()", "diff": ["-                                             new Word(SourceInfo.NO_INFO, \"monkey\"),", "+                                             new Word(SourceInfo.NO_INFO, \"MyInterface\"),", "-                   \"Interface methods cannot be made private.  They must be public.\" , ", "+                   \"Interface methods cannot be private.  They must be public.\" , ", "-                   \"Interface methods cannot be made protected.  They must be public.\" , ", "+                   \"Interface methods cannot be protected.  They must be public.\" , "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86dcdefdfcaf5b117a6036741bde3b04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/VoidMethodsNotAllowedClassBodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testForAbstractMethodDef()", "signatureAfterChange": "          public void testForAbstractMethodDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicAbstractMav, new TypeParameter[0], ", "-                                                     new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], ", "+      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NO_INFO, _publicAbstractMav, new TypeParameter[0], ", "+                                                     new VoidReturn(SourceInfo.NO_INFO, \"void\"), new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], "]}], "num": 24396}
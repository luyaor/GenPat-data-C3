{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f991cb5183dde9411c09f903a7d8b6b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa07f53ad7dc3b2dd22c8a5533906e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "e33f4d6f84850cd296a0da931db2c5376721147d", "commitAfterChange": "c7bde15c7f9b451331f476bd5459c183a6ad8b94", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public MainJVM(final GlobalModel model, int rmiPort) throws RemoteException", "signatureAfterChange": "    public boolean isInterpreterRunning()", "diff": ["-   */", "-  public MainJVM(final GlobalModel model, int rmiPort) throws RemoteException {", "-    super();", "-    if (rmiPort > -1) {", "-      _rmiPort = rmiPort;", "-    }", "-    _startNameServiceIfNeeded();", "-    _identifier = _createIdentifier();", "-", "-    try {", "-      Naming.rebind(_identifier, this);", "-    }", "-    catch (Exception e) {", "-      throw new edu.rice.cs.util.UnexpectedException(e);", "-    }", "-", "-    restartInterpreterJVM();", "+", "+  public boolean isInterpreterRunning() {", "+    return _interpreterJVM() != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36f0b64fdde498e8eacb260c53adbf67", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/FileOptionComponent.java", "commitBeforeChange": "85538cb484722f3ee8b8f52d4f19defc02bd67d5", "commitAfterChange": "ec727abc662388138ad4bf94694974ef5e13db3c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void chooseFile()", "signatureAfterChange": "       public void chooseFile()", "diff": ["-    String workDir = DrJava.CONFIG.getSetting(WORKING_DIRECTORY).toString();", "-    if ((workDir == null) || (workDir.equals(\"\"))) {", "-      workDir = System.getProperty(\"user.dir\");", "+", "+    if (_newFile != FileOption.NULL_FILE && _newFile.getParent() != null) {", "+      _jfc.setCurrentDirectory( new File(_newFile.getParent()));", "-    JFileChooser jfc = new JFileChooser(workDir);", "-    jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "+    ", "+    _jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);", "-    int returnValue = jfc.showDialog(_parent,", "+    int returnValue = _jfc.showDialog(_parent,", "-      c = jfc.getSelectedFile();", "+      c = _jfc.getSelectedFile();", "-      _updateButton(_newFile);", "+      _updateTextField(_newFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c5e6ddf89337b592fe57cc80df5f67e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void removeAuxiliaryFile(OpenDefinitionsDocument doc)", "diff": ["-    File file;", "-    try                           { file = doc.getFile(); } ", "-    catch(FileMovedException fme) { file = fme.getFile(); }", "-    ", "-    String path = \"\";", "-    try { path = file.getCanonicalPath(); }", "-    catch(IOException e) { throw new UnexpectedException(e); }", "+    File file = doc.getRawFile();", "+    if (file == null) return;  // Should never happen unless doc is Untitled.", "+    String path = FileOps.getCanonicalPath(file);", "-        try { ", "-          if (it.next().getCanonicalPath().equals(path)) {", "-            it.remove();", "-            setProjectChanged(true);", "-            break;", "-          }", "-        } ", "-        catch(IOException e) { /* Ignore f */ }", "-      }", "+        if (path.equals(FileOps.getCanonicalPath(it.next()))) {", "+          it.remove();", "+          setProjectChanged(true);", "+          break;", "+        }", "+      } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a4dcb76cb7cdc863e756ff7b3ee0506", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         public void removeDoc(OpenDefinitionsDocument odd)", "signatureAfterChange": "   private synchronized void remove(DocManager toRemove)", "diff": ["-  ", "-  public void removeDoc(OpenDefinitionsDocument odd){", "-    Pair<DefinitionsDocument,DDReconstructor> pair = table.remove(odd);", "-    if(pair.getFirst() != null){", "-//      pair.getSecond().saveDocInfo(pair.getFirst());", "-      pair.getFirst().close();", "-    }", "-    synchronized(lru) {", "-      lru.remove(odd);", "-    }", "-  }", "+   */", "+  private synchronized void remove(DocManager toRemove) {", "+    _lru.remove(toRemove);", "+    if (toRemove.isFirst()) {", "+      toRemove.setOut();", "+    }", "+    if (_lru.size() > 0 )", "+      _lru.getFirst().setFirst(); // just in case the one removed was first"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab92c1cc34b32a2a62d77f881d734161", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/History.java", "commitBeforeChange": "f50373a63f9f9d9922c2e62974843c1ad9a43aac", "commitAfterChange": "e23022134509d45381ef930935988636cfbc7d79", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void writeToFile(FileSaveSelector selector) throws IOException", "signatureAfterChange": "   public void writeToFile(FileSaveSelector selector, String editedVersion) throws IOException", "diff": ["-  public void writeToFile(FileSaveSelector selector) throws IOException {", "+  public void writeToFile(FileSaveSelector selector, String editedVersion) throws IOException {", "+    ", "-      return;", "-      // don't need to do anything", "+      return; // don't need to do anything", "-      if (c.getName().indexOf('.') == -1)", "-        c = new File(c.getAbsolutePath() + \".hist\");", "-      try {", "+\tif (c.getName().indexOf('.') == -1)", "+\t    c = new File(c.getAbsolutePath() + \".\" +", "+\t\t\t InteractionsHistoryFilter.HIST_EXTENSION);", "-        String currString;", "-        for (int i = 0; i < size(); i++) {", "-          currString = _vector.elementAt(i);", "-          currString.trim();", "-          bw.write(currString, 0, currString.length());", "-          bw.newLine();", "-        }", "+\tif (editedVersion == null)", "+\t    editedVersion = getHistoryAsStringWithSemicolons();", "+ \tbw.write(HISTORY_FORMAT_VERSION_2 + editedVersion, 0, HISTORY_FORMAT_VERSION_2.length() + editedVersion.length());", "-      }", "-      catch (IOException ioe) {/*JOptionPane.showMessageDialog(null,", "-                                  \"An IOException has occured\" + \"\\n\" + ioe,", "-                                  \"IOException\",", "-                                  JOptionPane.ERROR_MESSAGE);}*/", "-        throw new IOException(\"An error occured writing the history to a file\");", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc22a4697f8a649a0bee23d626b72e33", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean classLoadersCanFindDebugger()", "signatureAfterChange": "   public static boolean classLoadersCanFind(String className)", "diff": ["+   */", "+  public static boolean classLoadersCanFind(String className) {", "+    // First check the specified location", "+    File jar = getConfig().getSetting(JAVAC_LOCATION);", "+    if (jar != FileOption.NULL_FILE) {", "+      try {", "+        URL[] urls = new URL[] { jar.toURL() };", "+        URLClassLoader loader = new URLClassLoader(urls);", "+        if (canLoad(loader, className)) return true;", "+      }", "+      catch(MalformedURLException e) { /* fall through */ }", "+    }", "+    return canLoad(_toolsLoader, className);", "+  }", "-   */", "-  public static boolean classLoadersCanFindDebugger() {", "-    // First check the specified location", "-    File jar = getConfig().getSetting(JAVAC_LOCATION);", "-    if (jar != FileOption.NULL_FILE) {", "-      try {", "-        URL[] urls = new URL[] { jar.toURL() };", "-        URLClassLoader loader = new URLClassLoader(urls);", "-        loader.loadClass(TEST_DEBUGGER_CLASS);", "-        return true;", "-      }", "-      catch (ClassNotFoundException e) {", "-        // no debugger in this jar file; try ToolsJarClasLoader", "-      }", "-      catch (UnsupportedClassVersionError ucve) {", "-        return false;", "-      }", "-      catch (MalformedURLException e) {", "-        // specified jar invalid; try ToolsJarClassLoader", "-      }", "-    }", "-", "-    // If not, try to guess tools.jar location", "-    ToolsJarClassLoader loader = new ToolsJarClassLoader();", "-    try {", "-      loader.loadClass(TEST_DEBUGGER_CLASS);", "-      return true;", "-    }", "-    catch (ClassNotFoundException cnfe) { return false; }", "-    catch (UnsupportedClassVersionError ucve) { return false; }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c061eb0e5067ec012fbae5d9faa7ffc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "4276346051c6ab89c146c0041be28826e7dfbe12", "commitAfterChange": "86bed99990f6eb7fff2cb31d595e17b49135df26", "methodNumberBeforeChange": 181, "methodNumberAfterChange": 181, "signatureBeforeChange": "     public String getFilename()", "signatureAfterChange": "     public String getFilename()", "diff": ["-      String filename = \"(Untitled)\";", "-      try {", "-        File file = getFile();", "-        filename = file.getName();", "+      if (_file == null) {", "+        return \"(Untitled)\";", "-      catch (IllegalStateException ise) {", "-        // No file, leave as \"untitled\"", "+      else {", "+        return _file.getName();", "-      catch (FileMovedException fme) {", "-        // Recover, even though file has been deleted", "-        File file = fme.getFile();", "-        filename = file.getName();", "-      }", "-      return filename;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd021790aa48c2dad4c7cf580de13317", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "          private boolean _fileSaveHelper(OpenDefinitionsDocument doc, int paneOption)", "signatureAfterChange": "          private boolean _fileSaveHelper(OpenDefinitionsDocument doc, int paneOption)", "diff": ["-        fname = file.getName();", "-        text = fname + \" has been modified. Would you like to save it?\";", "-      }", "-      catch (IllegalStateException ise) {", "-        // No file exists", "-        fname = \"Untitled file\";", "-        text = \"Untitled file has been modified. Would you like to save it?\";", "+        if (file == null) {", "+          fname = \"Untitled file\";", "+          text = \"Untitled file has been modified. Would you like to save it?\";", "+        }", "+        else {", "+          fname = file.getName();", "+          text = fname + \" has been modified. Would you like to save it?\";", "+        }", "-          if (! saved) return false;", "-          if (doc.isAuxiliaryFile() || (_model.isProjectActive() && doc.isInProjectPath())) { // what is this test for?", "-            try { doc.getFile().getName(); }", "-            catch(IllegalStateException ise) { throw new UnexpectedException(ise); }", "-            catch(FileMovedException fme) { throw new UnexpectedException(fme); }", "-          }", "-          return true;", "+          return saved;"]}], "num": 23530}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c8e8a031ca7be41e3c39aec05f05266", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ab38ebc2dc92a97d1c0cd91624be2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8279bc33117c74621df6401dedd10a0cae247a2c", "commitAfterChange": "ce3350f89c936debb5fbaa8f27f501d1524368cf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-    synchronized(this) {", "-     if (_startupInProgress) {", "-        return;", "-      }", "+    if (isStartupInProgress()) {", "+      return;", "+    }", "-      _startupInProgress = true;", "-", "-      killInterpreter();", "-", "-      String className = InterpreterJVM.class.getName();", "-      String[] args = new String[] { getIdentifier() };", "-      try {", "-        //System.err.println(\"started interpreter jvm\");", "-        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "-        ", "-        // Start a thread to wait for the interpreter to die and to fire", "-        // off a new one (and notify model) when it happens", "-        Thread thread = new Thread() {", "-          public void run() {", "-            try {", "-              int status = _interpreterProcess.waitFor();", "-              restartInterpreterJVM();", "-              _model.replCalledSystemExit(status);", "-            }", "-            catch (InterruptedException ie) {", "-              throw new edu.rice.cs.util.UnexpectedException(ie);", "-            }", "-          }", "-        };", "-", "-        thread.start();", "-      }", "-      catch (IOException ioe) {", "-        _threwException(ioe);", "-      }", "+    try {", "+      invokeSlave();", "+    }", "+    catch (RemoteException re) {", "+      _threwException(re);", "+    }", "+    catch (IOException ioe) {", "+      _threwException(ioe);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dea4e77f47b1b57a2238200b86c5ebf0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-   */", "-  public void startInterpreterJVM() {", "-    if (isStartupInProgress() || isInterpreterRunning()) {", "-      return;", "-    }", "-", "-    try {", "-      invokeSlave();", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "-  }", "+   */", "+  public void restartInterpreterJVM() {", "+    synchronized(this) {", "+     if (_startupInProgress) {", "+        return;", "+      }", "+", "+      _startupInProgress = true;", "+", "+      killInterpreter();", "+", "+      String className = InterpreterJVM.class.getName();", "+      String[] args = new String[] { getIdentifier() };", "+      try {", "+        //System.err.println(\"started interpreter jvm\");", "+        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "+        ", "+        // Start a thread to wait for the interpreter to die and to fire", "+        // off a new one (and notify model) when it happens", "+        Thread thread = new Thread() {", "+          public void run() {", "+            try {", "+              int status = _interpreterProcess.waitFor();", "+              restartInterpreterJVM();", "+              _model.replCalledSystemExit(status);", "+            }", "+            catch (InterruptedException ie) {", "+              throw new edu.rice.cs.util.UnexpectedException(ie);", "+            }", "+          }", "+        };", "+", "+        thread.start();", "+      }", "+      catch (IOException ioe) {", "+        _threwException(ioe);", "+      }", "+    }", "+  }"]}], "num": 19039}
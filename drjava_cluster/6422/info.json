{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6352a17970cb9638626668896ce7c50a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a122c068eede7bd812edbac2b86f6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "commitAfterChange": "0d293f065df295b40875d176fa985aae8404680f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testBracket() throws BadLocationException", "signatureAfterChange": "      public void testBracket() throws BadLocationException", "diff": ["-\t/*", "-\t/* (1)* /", "+\t/* (1) */ ", "-\t/* (2)* /", "+\t/* (2) */ ", "-\t/* (3)* /", "+\t/* (3) */ ", "-\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b048460dea1b09c1f30ed473c53feb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsCurlyTest.java", "commitBeforeChange": "ab72ce86901addf5fe2a66f48b9dc4c5f7db818b", "commitAfterChange": "0d293f065df295b40875d176fa985aae8404680f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testOnlyCurly() throws BadLocationException", "signatureAfterChange": "      public void testOnlyCurly() throws BadLocationException", "diff": ["-\t/*", "-\t/* (1)* /", "+\t/* (1) */", "-\t    \"{ /* block1* / }\\n\" +", "-\t    \"{ /* block2* / }\\n\" +", "-\t    \"{ /* block3* / }\";", "+\t    \"{ /* block1 */ }\\n\" +", "+\t    \"{ /* block2 */ }\\n\" +", "+\t    \"{ /* block3 */ }\";", "-\t/* (2)* /", "+\t/* (2) */", "-\tassertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 28));\t    ", "-\tassertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 30));\t    ", "+\tassertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 18));\t    ", "+\tassertTrue(\"START's brace is an open curly brace.\", _rule.applyRule(_doc, 19));\t    ", "-\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f189f1ff16b5b1e04a047a6ee0fa95cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartAfterOpenBraceTest.java", "commitBeforeChange": "7514c1680e1d7e2676a0d61c09ad444070ccaf0d", "commitAfterChange": "5855aafbaf5a76e18e2b0e646fcf0b45b64b1fe3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "              public void testWithFree() throws BadLocationException", "signatureAfterChange": "              public void testWithFree() throws BadLocationException", "diff": ["-\tassertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 24));\t    ", "-\tassertTrue(\"START immediatly follows an open paren.\", _rule.applyRule(_doc, 25));\t    ", "+\tassertTrue(\"Only WS between open brace and START.\", _rule.applyRule(_doc, 23));\t    ", "+\tassertTrue(\"START immediatly follows an open paren.\", !_rule.applyRule(_doc, 25));\t    ", "-\t/* (6) ", "+\t/* (6) */", "-\t    \"array[\\n\" +", "-\t    \"    new Listener() {\\n\" +", "-\t    \"        method() {\\n\" +", "-\t    \"        }\\n\" +", "-\t    \"    }]\";", "-", "-\t_setDocText(_text);", "-", "-        try { _rule.applyRule(_doc, 0); fail(\"START has no brace.\"); }", "-\tcatch (UnexpectedException e) {}", "-", "-\tassertTrue(\"START's brace ('[') is on previous line.\", _rule.applyRule(_doc, 7));\t    ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 28));\t    ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 50));\t    ", "-\tassertTrue(\"START's brace ('{') is three lines above.\", !_rule.applyRule(_doc, _text.length() - 1));\t    ", "-", "-\t\t_text =", "-\t    \"{ /* block1* / }\\n\" +", "-\t    \"{ /* block2* / }\\n\" +", "-\t    \"{ /* block3* / }\";", "-", "-\t\t\t_text =", "-\t    \"{\\n\" +", "-\t    \"    {\\n\" +", "-\t    \"        {}\\n\" +", "-\t    \"    }\\n\" +", "+\t    \"class Foo {   \\n\" +", "+\t    \"              \\n\" +", "+\t    \"  /*          \\n\" +", "+\t    \"   *          \\n\" +", "+\t    \"   */         \\n\" +", "+\t    \"  int field;  \\n\" +", "-\t", "+ ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 7));\t    ", "-\tassertTrue(\"START's brace ('{') is on previous line.\", _rule.applyRule(_doc, 8));\t    ", "-\tassertTrue(\"START's brace ('{') is two lines above.\", !_rule.applyRule(_doc, 19));\t    ", "-\tassertTrue(\"START's brace ('{') is four lines above.\", !_rule.applyRule(_doc, _text.length() - 1));\t    ", "-\t*/", "-    }", "+\tassertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 0));", "+\tassertTrue(\"START = DOCSTART.\", !_rule.applyRule(_doc, 14));", "+\tassertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 15));", "+\tassertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 30));", "+\tassertTrue(\"Only WS between START and open brace.\", _rule.applyRule(_doc, 44));", "+\tassertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 45));", "+\tassertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 60));", "+\tassertTrue(\"Only comment and WS between START and open brace.\", _rule.applyRule(_doc, 77));"]}], "num": 6422}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da63f4dfaa7b4565f02eb90dc9af957e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2307a26bed37e9c9f4432a2119071cb6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "3ee95ee9c3ce55e37481a2db14179e5d878a2158", "commitAfterChange": "69c9884550bf4c7c91788f4d6006ee470704351d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void eval()", "signatureAfterChange": "    public String getCurrentInteraction()", "diff": ["+  public String getCurrentInteraction() {", "+    try {", "+      return getText(frozenPos, getLength() - frozenPos);", "+    }", "+    catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+    }", "+  }", "-   */", "-  public void eval() {", "-    try {", "-      String text = getText(frozenPos, getLength() - frozenPos);", "-      _history.add(text);", "-      String toEval = text.trim();", "-      // Result of interpretation, or JavaInterpreter.NO_RESULT if none.", "-      Object result;", "-      // Do nothing but prompt if there's nothing to evaluate!", "-      if (toEval.length() == 0) {", "-        result = JavaInterpreter.NO_RESULT;", "-      } ", "-      else {", "-        if (toEval.startsWith(\"java \")) {", "-          toEval = _testClassCall(toEval);", "-        }", "-        result = _interpreter.interpret(toEval);", "-        String resultStr;", "-        try {", "-          resultStr = String.valueOf(result);", "-        } catch (Throwable t) {", "-          // Very weird. toString() on result must have thrown this exception!", "-          // Let's act like DynamicJava would have if this exception were thrown", "-          // and rethrow as RuntimeException", "-          throw  new RuntimeException(t.toString());", "-        }", "-      }", "-      if (result != JavaInterpreter.NO_RESULT) {", "-        super.insertString(getLength(), \"\\n\" + String.valueOf(result) + \"\\n\", null);", "-      } ", "-      else {", "-        super.insertString(getLength(), \"\\n\", null);", "-      }", "-      prompt();", "-    } catch (BadLocationException e) {", "-      throw  new InternalError(\"getting repl text failed\");", "-    } catch (Throwable e) {", "-      String message = e.getMessage();", "-      // Don't let message be null. Java sadly makes getMessage() return", "-      // null if you construct an exception without a message.", "-      if (message == null) {", "-        message = e.toString();", "-        e.printStackTrace();", "-      }", "-      // Hack to prevent long syntax error messages", "-      try {", "-        if (message.startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\")) {", "-          super.insertString(getLength(), \"\\nError in evaluation: \" + \"Invalid syntax\\n\", ", "-              null);", "-        } ", "-        else {", "-          super.insertString(getLength(), \"\\nError in evaluation: \" + message + ", "-              \"\\n\", null);", "-        }", "-        prompt();", "-      } catch (BadLocationException willNeverHappen) {}", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e010cbabc921f6b4ae749cd1d402cfa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/InteractionsDocument.java", "commitBeforeChange": "3ee95ee9c3ce55e37481a2db14179e5d878a2158", "commitAfterChange": "69c9884550bf4c7c91788f4d6006ee470704351d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void eval()", "signatureAfterChange": "    public String getCurrentInteraction()", "diff": ["+  public String getCurrentInteraction() {", "+    try {", "+      return getText(frozenPos, getLength() - frozenPos);", "+    }", "+    catch (BadLocationException e) {", "+      throw new UnexpectedException(e);", "+    }", "+  }", "-   */", "-  public void eval() {", "-    try {", "-      String text = getText(frozenPos, getLength() - frozenPos);", "-      _history.add(text);", "-      String toEval = text.trim();", "-      // Result of interpretation, or JavaInterpreter.NO_RESULT if none.", "-      Object result;", "-      // Do nothing but prompt if there's nothing to evaluate!", "-      if (toEval.length() == 0) {", "-        result = JavaInterpreter.NO_RESULT;", "-      } ", "-      else {", "-        if (toEval.startsWith(\"java \")) {", "-          toEval = _testClassCall(toEval);", "-        }", "-        result = _interpreter.interpret(toEval);", "-        String resultStr;", "-        try {", "-          resultStr = String.valueOf(result);", "-        } catch (Throwable t) {", "-          // Very weird. toString() on result must have thrown this exception!", "-          // Let's act like DynamicJava would have if this exception were thrown", "-          // and rethrow as RuntimeException", "-          throw  new RuntimeException(t.toString());", "-        }", "-      }", "-      if (result != JavaInterpreter.NO_RESULT) {", "-        super.insertString(getLength(), \"\\n\" + String.valueOf(result) + \"\\n\", null);", "-      } ", "-      else {", "-        super.insertString(getLength(), \"\\n\", null);", "-      }", "-      prompt();", "-    } catch (BadLocationException e) {", "-      throw  new InternalError(\"getting repl text failed\");", "-    } catch (Throwable e) {", "-      String message = e.getMessage();", "-      // Don't let message be null. Java sadly makes getMessage() return", "-      // null if you construct an exception without a message.", "-      if (message == null) {", "-        message = e.toString();", "-        e.printStackTrace();", "-      }", "-      // Hack to prevent long syntax error messages", "-      try {", "-        if (message.startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\")) {", "-          super.insertString(getLength(), \"\\nError in evaluation: \" + \"Invalid syntax\\n\", ", "-              null);", "-        } ", "-        else {", "-          super.insertString(getLength(), \"\\nError in evaluation: \" + message + ", "-              \"\\n\", null);", "-        }", "-        prompt();", "-      } catch (BadLocationException willNeverHappen) {}", "-    }", "-  }"]}], "num": 17974}
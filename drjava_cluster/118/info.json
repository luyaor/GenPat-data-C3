{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc3f9ed9479b25d806cc4e992aac919f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d666c5118256fcaed17e50e5e501628", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "\r   private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName)", "signatureAfterChange": "   private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName)", "diff": ["-  /** Helper to writeValueHashCode; writes a valueHashCode that correctly handles arbitrary arrays. */\r", "-  private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName) {\r", "-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};\r", "-    boolean useGenerics = LanguageLevelConverter.versionSupportsGenerics(_targetVersion);\r", "-    \r", "-    _writeToFileOut(newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"/**\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to hashCode(), it recursively generates a hash code for any object,\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);\r", "-     _writeToFileOut(indentString(baseIndent, 1) + \" */\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private int \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"class ArrayHashCode {\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"public int valueFor(java.lang.Object o) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (o instanceof java.lang.Object[]) {\" + newLine);\r", "-    if (useGenerics) {\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());\" + newLine);\r", "-    }\r", "-    else {\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());\" + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    \r", "-    for (String type : primitiveTypes) {\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o instanceof \" + type + \") {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((\" + type + \") o);\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    }\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, hashCode() is called\" + newLine); \r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"return o.hashCode();\" + newLine); \r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    \r", "-    for (String type : primitiveTypes) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(\" + type + \" array) {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"int result = 0;\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 0; i < array.length; i++) {\" + newLine);\r", "-      if (type.equals(\"boolean[]\")) {\r", "-        _writeToFileOut(indentString(baseIndent, 5) + \"result = (result << 1) ^ (array[i] ? 1 : 0);\" + newLine);\r", "-      }\r", "-      else {\r", "-        _writeToFileOut(indentString(baseIndent, 5) + \"result = (result << 1) ^ (int) array[i];\" + newLine);\r", "-      }\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"return result;\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    }\r", "-    \r", "-    if (useGenerics) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList<java.lang.Object> alreadyGenerated) {\" + newLine + newLine);\r", "-    }\r", "-    else {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList alreadyGenerated) {\" + newLine + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"class ArrayWrapper {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public java.lang.Object[] array() { return array; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public boolean equals(java.lang.Object o) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"return (o != null) && (o instanceof ArrayWrapper)  && \" + valueEqualsName + \"(array, ((ArrayWrapper) o).array());\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return 0; } // This method should never be used -- only here for consistency.\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine + newLine);\r", "-\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"ArrayWrapper currentWrapper = new ArrayWrapper();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyGenerated.contains(currentWrapper)) { return -1; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"alreadyGenerated.addLast(currentWrapper);\" + newLine + newLine);\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"int result = 0;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 0; i < array.length; i++) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"if (array[i] instanceof java.lang.Object[]) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result = (result << 1) ^ \" + methodName + \"(array[i]);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"alreadyGenerated.removeLast();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"return result;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine + newLine); // end of inner class\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"if (o == null) { return 0; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else { return o.hashCode(); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);\r", "-  }\r", "+  /** Helper to writeValueHashCode; writes a valueHashCode that correctly handles arbitrary arrays. */", "+  private static void writeSafeValueHashCode(SymbolData sd, int baseIndent, String valueEqualsName, String methodName) {", "+    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    boolean useGenerics = LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5);", "+    ", "+    _writeToFileOut(newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"/**\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to hashCode(), it recursively generates a hash code for any object,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);", "+     _writeToFileOut(indentString(baseIndent, 1) + \" */\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private int \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"class ArrayHashCode {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"public int valueFor(java.lang.Object o) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (o instanceof java.lang.Object[]) {\" + newLine);", "+    if (useGenerics) {", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList<java.lang.Object>());\" + newLine);", "+    }", "+    else {", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((java.lang.Object[]) o, new java.util.LinkedList());\" + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    ", "+    for (String type : primitiveTypes) {", "+      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o instanceof \" + type + \") {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayHashCode((\" + type + \") o);\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    }", "+    ", "+    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, hashCode() is called\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 5) + \"return o.hashCode();\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    ", "+    for (String type : primitiveTypes) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(\" + type + \" array) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"int result = 0;\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 0; i < array.length; i++) {\" + newLine);", "+      if (type.equals(\"boolean[]\")) {", "+        _writeToFileOut(indentString(baseIndent, 5) + \"result = (result << 1) ^ (array[i] ? 1 : 0);\" + newLine);", "+      }", "+      else {", "+        _writeToFileOut(indentString(baseIndent, 5) + \"result = (result << 1) ^ (int) array[i];\" + newLine);", "+      }", "+      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"return result;\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    }", "+    ", "+    if (useGenerics) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList<java.lang.Object> alreadyGenerated) {\" + newLine + newLine);", "+    }", "+    else {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public int arrayHashCode(final java.lang.Object[] array, final java.util.LinkedList alreadyGenerated) {\" + newLine + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 4) + \"class ArrayWrapper {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public java.lang.Object[] array() { return array; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public boolean equals(java.lang.Object o) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"return (o != null) && (o instanceof ArrayWrapper)  && \" + valueEqualsName + \"(array, ((ArrayWrapper) o).array());\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return 0; } // This method should never be used -- only here for consistency.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine + newLine);", "+", "+    _writeToFileOut(indentString(baseIndent, 4) + \"ArrayWrapper currentWrapper = new ArrayWrapper();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyGenerated.contains(currentWrapper)) { return -1; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"alreadyGenerated.addLast(currentWrapper);\" + newLine + newLine);", "+    ", "+    _writeToFileOut(indentString(baseIndent, 4) + \"int result = 0;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 0; i < array.length; i++) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"if (array[i] instanceof java.lang.Object[]) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"result = (result << 1) ^ (arrayHashCode((java.lang.Object[]) array[i], alreadyGenerated) >> 1);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"result = (result << 1) ^ \" + methodName + \"(array[i]);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"alreadyGenerated.removeLast();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"return result;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    ", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine + newLine); // end of inner class", "+    _writeToFileOut(indentString(baseIndent, 2) + \"if (o == null) { return 0; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayHashCode().valueFor(o); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else { return o.hashCode(); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae539d2b1df29edad04c22a3341af574", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r \r   private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName)", "signatureAfterChange": "    private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName)", "diff": ["-\r", "-  private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName) {\r", "-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};\r", "-    boolean useGenerics = LanguageLevelConverter.versionSupportsGenerics(_targetVersion);\r", "-    \r", "-    _writeToFileOut(newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"/**\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to toString(), it recursively generates a string for any object,\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" */\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private java.lang.String \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"class ArrayToString {\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"public String valueFor(java.lang.Object o) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (o instanceof java.lang.Object[]) {\" + newLine);\r", "-\r", "-    if (useGenerics) {\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet<java.lang.Object[]>());\" + newLine);\r", "-    }\r", "-    else {\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet());\" + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    \r", "-    for (String type : primitiveTypes) {\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o instanceof \" + type + \") {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((\" + type + \") o);\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    }\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, toString() is called\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"return o.toString();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    \r", "-    for (String type : primitiveTypes) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(\" + type + \" array) {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"[\\\");\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"if (array.length > 0) { result.append(array[0]); }\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 1; i < array.length; i++) {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"result.append(\\\", \\\");\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"result.append(array[i]);\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"]\\\");\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"return result.toString();\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    }\r", "-    \r", "-    if (useGenerics) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet<java.lang.Object[]> alreadyPrinted) {\" + newLine);\r", "-    }\r", "-    else {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet alreadyPrinted) {\" + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyPrinted.contains(array)) { return (\\\"[...]\\\"); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"else { alreadyPrinted.add(array); }\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"[\\\");\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"boolean nonEmpty = false;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 0; i < array.length; i++) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"if (nonEmpty) { result.append(\\\", \\\"); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"nonEmpty = true;\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"if (array[i] instanceof java.lang.Object[]) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result.append(arrayToString((java.lang.Object[]) array[i], alreadyPrinted));\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"result.append(\" + methodName + \"(array[i]));\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"]\\\");\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"alreadyPrinted.remove(array);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"return result.toString();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine + newLine); // end of inner class\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"if (o == null) { return \\\"\\\" + null; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayToString().valueFor(o); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else { return o.toString(); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);\r", "-  }\r", "+", "+  private static void writeSafeValueToString(SymbolData sd, int baseIndent, String methodName) {", "+    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    boolean useGenerics = LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5);", "+    ", "+    _writeToFileOut(newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"/**\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to toString(), it recursively generates a string for any object,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" */\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private java.lang.String \" + methodName + \"(java.lang.Object o) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"class ArrayToString {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"public String valueFor(java.lang.Object o) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (o instanceof java.lang.Object[]) {\" + newLine);", "+", "+    if (useGenerics) {", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet<java.lang.Object[]>());\" + newLine);", "+    }", "+    else {", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((java.lang.Object[]) o, new java.util.HashSet());\" + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    ", "+    for (String type : primitiveTypes) {", "+      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o instanceof \" + type + \") {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayToString((\" + type + \") o);\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    }", "+    ", "+    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"// o should be an array, but if not, toString() is called\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"return o.toString();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    ", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    ", "+    for (String type : primitiveTypes) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(\" + type + \" array) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"[\\\");\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"if (array.length > 0) { result.append(array[0]); }\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 1; i < array.length; i++) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"result.append(\\\", \\\");\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"result.append(array[i]);\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"]\\\");\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"return result.toString();\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    }", "+    ", "+    if (useGenerics) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet<java.lang.Object[]> alreadyPrinted) {\" + newLine);", "+    }", "+    else {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public java.lang.String arrayToString(java.lang.Object[] array, java.util.HashSet alreadyPrinted) {\" + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (alreadyPrinted.contains(array)) { return (\\\"[...]\\\"); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"else { alreadyPrinted.add(array); }\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"java.lang.StringBuffer result = new java.lang.StringBuffer();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"[\\\");\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"boolean nonEmpty = false;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"for (int i = 0; i < array.length; i++) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"if (nonEmpty) { result.append(\\\", \\\"); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"nonEmpty = true;\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"if (array[i] instanceof java.lang.Object[]) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"result.append(arrayToString((java.lang.Object[]) array[i], alreadyPrinted));\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"result.append(\" + methodName + \"(array[i]));\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"result.append(\\\"]\\\");\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"alreadyPrinted.remove(array);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"return result.toString();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    ", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine + newLine); // end of inner class", "+    _writeToFileOut(indentString(baseIndent, 2) + \"if (o == null) { return \\\"\\\" + null; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o.getClass().isArray()) { return new ArrayToString().valueFor(o); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else { return o.toString(); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec6050665d0586f002bd9bb90eb9cc9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r   private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName)", "signatureAfterChange": "   private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName)", "diff": ["-  /** Helper to writeValueEquals; writes a valueEquals that correctly handles arbitrary arrays. */\r", "-  private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName) {\r", "-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};\r", "-    boolean useGenerics = LanguageLevelConverter.versionSupportsGenerics(_targetVersion);\r", "-    \r", "-    _writeToFileOut(newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"/**\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to equals(Object), it recursively compares any two objects,\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);\r", "-     _writeToFileOut(indentString(baseIndent, 1) + \" */\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private boolean \" + methodName + \"(java.lang.Object o1, java.lang.Object o2) {\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"class ArrayEquals {\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"public boolean valueFor(java.lang.Object o1, java.lang.Object o2) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (o1 instanceof java.lang.Object[] && o2 instanceof java.lang.Object[]) {\" + newLine);\r", "-    if (useGenerics) {\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet<java.lang.Object>());\" + newLine);\r", "-    }\r", "-    else {\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet());\" + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    \r", "-    for (String type : primitiveTypes) {\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o1 instanceof \" + type + \" && o2 instanceof \" + type + \") {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((\" + type + \") o1, (\" + type + \") o2);\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    }\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"// o1 and o2 should be arrays, but if not, or if they have different types, equals(Object) is called\" + newLine); \r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"return o1.equals(o2);\" + newLine); \r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    \r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    \r", "-    for (String type : primitiveTypes) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(\" + type + \" array1, \" + type + \" array2) {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"for (int i = 0; i < array1.length; i++) {\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 6) + \"if (array1[i] != array2[i]) { return false; }\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return true;\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-    }\r", "-    \r", "-    if (useGenerics) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet<java.lang.Object> alreadyCompared) {\" + newLine + newLine);\r", "-    }\r", "-    else {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet alreadyCompared) {\" + newLine + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"class ArrayPair {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public java.lang.Object[] array1() { return array1; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public java.lang.Object[] array2() { return array2; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public boolean equals(java.lang.Object o) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"if ((o == null) || ! (o instanceof ArrayPair)) { return false; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"else { return (array1.equals(((ArrayPair) o).array1())) && (array2.equals(((ArrayPair) o).array2())); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return array1.hashCode() ^ (array2.hashCode() << 1); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"ArrayPair currentPair = new ArrayPair();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"if (alreadyCompared.contains(currentPair)) { return true; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"alreadyCompared.add(currentPair);\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"boolean result = true;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"for (int i = 0; i < array1.length; i++) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"if (array1[i] instanceof java.lang.Object[] && array2[i] instanceof java.lang.Object[]) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 7) + \"result = arrayEquals((java.lang.Object[]) array1[i], (java.lang.Object[]) array2[i], alreadyCompared);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 7) + \"result = \" + methodName + \"(array1[i], array2[i]);\"+ newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"}\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 6) + \"if (!result) { break; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"alreadyCompared.remove(currentPair);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"return result;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);\r", "-\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine + newLine); // end of inner class\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"if (o1 == null) { return o2 == null; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o2 == null) { return false; }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o1.getClass().isArray() && o2.getClass().isArray()) { return new ArrayEquals().valueFor(o1, o2); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else { return o1.equals(o2); }\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);\r", "-  }\r", "+  /** Helper to writeValueEquals; writes a valueEquals that correctly handles arbitrary arrays. */", "+  private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName) {", "+    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    boolean useGenerics = LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5);", "+    ", "+    _writeToFileOut(newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"/**\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to equals(Object), it recursively compares any two objects,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);", "+     _writeToFileOut(indentString(baseIndent, 1) + \" */\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private boolean \" + methodName + \"(java.lang.Object o1, java.lang.Object o2) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"class ArrayEquals {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"public boolean valueFor(java.lang.Object o1, java.lang.Object o2) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (o1 instanceof java.lang.Object[] && o2 instanceof java.lang.Object[]) {\" + newLine);", "+    if (useGenerics) {", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet<java.lang.Object>());\" + newLine);", "+    }", "+    else {", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet());\" + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    ", "+    for (String type : primitiveTypes) {", "+      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o1 instanceof \" + type + \" && o2 instanceof \" + type + \") {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((\" + type + \") o1, (\" + type + \") o2);\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    }", "+    ", "+    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"// o1 and o2 should be arrays, but if not, or if they have different types, equals(Object) is called\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 5) + \"return o1.equals(o2);\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    ", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    ", "+    for (String type : primitiveTypes) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(\" + type + \" array1, \" + type + \" array2) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"for (int i = 0; i < array1.length; i++) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 6) + \"if (array1[i] != array2[i]) { return false; }\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return true;\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+    }", "+    ", "+    if (useGenerics) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet<java.lang.Object> alreadyCompared) {\" + newLine + newLine);", "+    }", "+    else {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet alreadyCompared) {\" + newLine + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 4) + \"class ArrayPair {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public java.lang.Object[] array1() { return array1; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public java.lang.Object[] array2() { return array2; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public boolean equals(java.lang.Object o) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"if ((o == null) || ! (o instanceof ArrayPair)) { return false; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"else { return (array1.equals(((ArrayPair) o).array1())) && (array2.equals(((ArrayPair) o).array2())); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return array1.hashCode() ^ (array2.hashCode() << 1); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"ArrayPair currentPair = new ArrayPair();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"if (alreadyCompared.contains(currentPair)) { return true; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"alreadyCompared.add(currentPair);\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"boolean result = true;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"for (int i = 0; i < array1.length; i++) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"if (array1[i] instanceof java.lang.Object[] && array2[i] instanceof java.lang.Object[]) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 7) + \"result = arrayEquals((java.lang.Object[]) array1[i], (java.lang.Object[]) array2[i], alreadyCompared);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 7) + \"result = \" + methodName + \"(array1[i], array2[i]);\"+ newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"}\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"if (!result) { break; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"}\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"alreadyCompared.remove(currentPair);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"return result;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine + newLine);", "+", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine + newLine); // end of inner class", "+    _writeToFileOut(indentString(baseIndent, 2) + \"if (o1 == null) { return o2 == null; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o2 == null) { return false; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o1.getClass().isArray() && o2.getClass().isArray()) { return new ArrayEquals().valueFor(o1, o2); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else { return o1.equals(o2); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);", "+  }"]}], "num": 118}
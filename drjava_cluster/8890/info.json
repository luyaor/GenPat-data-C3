{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2026466935e24e79ad4d573685b659d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f8e346a325c1f14fa0477d86fe91b6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "aa7f147d71330aa12463dfbc7a233e3ed25560e6", "commitAfterChange": "cfaac02e8e33f506b730c3f8ce96676d16b8f705", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void appendExceptionResult(String exceptionClass,                                     String message,                                     String stackTrace,                                     String styleName);", "signatureAfterChange": "   public void appendExceptionResult(String exceptionClass,                                     String message,                                     String stackTrace,                                     String styleName)", "diff": ["+                                    String styleName)", "+  {", "+    //writeLock();", "+    try {", "+", "+      if (null == message || \"null\".equals(message)) {", "+        message = \"\";", "+      }", "+", "+      // Simplify the common error messages", "+      if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "+          \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "+        exceptionClass = \"Error\";", "+      }", "+      ", "+      insertText(getDocLength(), ", "+                 exceptionClass + \": \" + message + \"\\n\", styleName);", "+", "+      // An example stack trace:", "+      //", "+      // java.lang.IllegalMonitorStateException: ", "+      // at java.lang.Object.wait(Native Method)", "+      // at java.lang.Object.wait(Object.java:425)", "+      if (! stackTrace.trim().equals(\"\")) {", "+        BufferedReader reader=new BufferedReader(new StringReader(stackTrace));", "+        ", "+        String line;", "+        // a line is parsable if it has ( then : then ), with some", "+        // text between each of those", "+        while ((line = reader.readLine()) != null) {", "+          String fileName = null;", "+          int lineNumber = -1;", "+", "+          int openLoc = line.indexOf('(');", "+", "+          if (openLoc != -1) {", "+            int closeLoc = line.indexOf(')', openLoc + 1);", "+", "+            if (closeLoc != -1) {", "+              int colonLoc = line.indexOf(':', openLoc + 1);", "+              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "+                // ok this line is parsable!", "+                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "+                try {", "+                  lineNumber = Integer.parseInt(lineNumStr);", "+                  fileName = line.substring(openLoc + 1, colonLoc);", "+                }", "+                catch (NumberFormatException nfe) {", "+                  // do nothing; we failed at parsing", "+                }", "+              }", "+            }", "+          }", "+", "+          insertText(getDocLength(), line, styleName);", "+", "+          // OK, now if fileName != null we did parse out fileName", "+          // and lineNumber.", "+          // Here's where we'd add the button, etc.", "+          if (fileName != null) {", "+            /*", "+            JButton button = new JButton(\"go\");", "+            button.addActionListener(new ExceptionButtonListener(fileName,", "+                                                                 lineNumber));", "+", "+            SimpleAttributeSet buttonSet = new SimpleAttributeSet(set);", "+            StyleConstants.setComponent(buttonSet, button);", "+            insertString(getDocLength(), \"  \", null);", "+            insertString(getDocLength() - 1, \" \", buttonSet);", "+            */", "+            //JOptionPane.showMessageDialog(null, \"button in\");", "+            //insertString(getDocLength(), \" \", null);", "+            //JOptionPane.showMessageDialog(null, \"extra space\");", "+          }", "+", "+          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "+          insertText(getDocLength(), \"\\n\", styleName);", "+", "+        } // end the while", "+      }", "+    }", "+    catch (IOException ioe) {", "+      // won't happen; we're readLine'ing from a String!", "+      throw new UnexpectedException(ioe);", "+    }", "+    catch (DocumentAdapterException ble) {", "+      throw new UnexpectedException(ble);", "+    }", "+    finally {", "+      //writeUnlock();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da083d82685011da69239c70513d1f74", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public synchronized void appendExceptionResult(String exceptionClass, String message, String stackTrace,                                                  String styleName)", "signatureAfterChange": "   public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName)", "diff": ["-  public synchronized void appendExceptionResult(String exceptionClass, String message, String stackTrace,", "-                                                 String styleName) {", "-    try {", "-      if (null == message || \"null\".equals(message)) message = \"\";", "-      ", "-      // Simplify the common error messages", "-      if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "-          \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "-        exceptionClass = \"Error\";", "-      }", "-", "-      String c = exceptionClass;", "-      if (c.indexOf('.') != -1) c = c.substring(c.lastIndexOf('.') + 1, c.length());      ", "-      insertText(getDocLength(), c + \": \" + message + \"\\n\", styleName);", "-", "-      // An example stack trace:", "-      //", "-      // java.lang.IllegalMonitorStateException:", "-      // at java.lang.Object.wait(Native Method)", "-      // at java.lang.Object.wait(Object.java:425)", "-      if (! stackTrace.trim().equals(\"\")) {", "-        BufferedReader reader=new BufferedReader(new StringReader(stackTrace));", "-", "-        String line;", "-        // a line is parsable if it has ( then : then ), with some", "-        // text between each of those", "-        while ((line = reader.readLine()) != null) {", "-          String fileName;", "-          int lineNumber;", "-", "-          // TODO:  Why is this stuff here??", "-          int openLoc = line.indexOf('(');", "-          if (openLoc != -1) {", "-            int closeLoc = line.indexOf(')', openLoc + 1);", "-", "-            if (closeLoc != -1) {", "-              int colonLoc = line.indexOf(':', openLoc + 1);", "-              if ((colonLoc > openLoc) && (colonLoc < closeLoc)) {", "-                // ok this line is parsable!", "-                String lineNumStr = line.substring(colonLoc + 1, closeLoc);", "-                try {", "-                  lineNumber = Integer.parseInt(lineNumStr);", "-                  fileName = line.substring(openLoc + 1, colonLoc);", "-                }", "-                catch (NumberFormatException nfe) {", "-                  // do nothing; we failed at parsing", "-                }", "-              }", "-            }", "-          }", "-", "-          insertText(getDocLength(), line, styleName);", "-", "-          // OK, now if fileName != null we did parse out fileName", "-          // and lineNumber.", "-          // Here's where we'd add the button, etc.", "-          /*", "-          if (fileName != null) {", "-            JButton button = new JButton(\"go\");", "-            button.addActionListener(new ExceptionButtonListener(fileName, lineNumber));", "-            SimpleAttributeSet buttonSet = new SimpleAttributeSet(set);", "-            StyleConstants.setComponent(buttonSet, button);", "-            insertString(getDocLength(), \"  \", null);", "-            insertString(getDocLength() - 1, \" \", buttonSet);", "-            JOptionPane.showMessageDialog(null, \"button in\");", "-            insertString(getDocLength(), \" \", null);", "-            JOptionPane.showMessageDialog(null, \"extra space\");", "-          }*/", "-", "-          //JOptionPane.showMessageDialog(null, \"\\\\n\");", "-          insertText(getDocLength(), \"\\n\", styleName);", "-", "-        } // end the while", "-      }", "+  public void appendExceptionResult(String exceptionClass, String message, String stackTrace, String styleName) {", "+    ", "+    ", "+    if (null == message || \"null\".equals(message)) message = \"\";", "+    ", "+    // Simplify the common error messages", "+    if (\"koala.dynamicjava.interpreter.error.ExecutionError\".equals(exceptionClass) ||", "+        \"edu.rice.cs.drjava.model.repl.InteractionsException\".equals(exceptionClass)) {", "+      exceptionClass = \"Error\";", "-    catch (IOException ioe) {", "-      // won't happen; we're readLine'ing from a String!", "-      throw new UnexpectedException(ioe);", "-    }", "-    catch (DocumentAdapterException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "+    ", "+    // The following is an ugly hack that should be fixed ASAP.  The read/writelock methods need to be added to", "+    // the DocumentAdapter interface.  This cast and a similar one in ConsoleDocument must be removed because they", "+    // defeat the purpose of the DocumentAdapter interface.", "+    InteractionsDocumentAdapter doc = ((InteractionsDocumentAdapter)_document);", "+    doc.appendExceptionResult(exceptionClass, message, stackTrace, styleName);"]}], "num": 8890}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1527e8bba66ce4e2d3f08cd8af2f6fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986d3dbc5847f156595e8ee1528209ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void checkSignatures(TypeDeclaration ast)", "signatureAfterChange": "   public void checkSignatures(TypeDeclaration ast)", "diff": ["-    sigChecker.ensureWellFormedTypeParameters(typeParameters(ast));", "-    if (ast instanceof ClassDeclaration) {", "-      sigChecker.ensureWellFormed(((ClassDeclaration) ast).getSuperclass());", "+    debug.logStart(\"Check type parameters\");", "+    try { sigChecker.ensureWellFormedTypeParameters(typeParameters(ast)); }", "+    finally { debug.logEnd(); }", "+    debug.logStart(\"Check supertypes\");", "+    try {", "+      if (ast instanceof ClassDeclaration) {", "+        sigChecker.ensureWellFormed(((ClassDeclaration) ast).getSuperclass());", "+      }", "+      if (ast.getInterfaces() != null) {", "+        for (TypeName tn : ast.getInterfaces()) { sigChecker.ensureWellFormed(tn); }", "+      }", "-    if (ast.getInterfaces() != null) {", "-      for (TypeName tn : ast.getInterfaces()) { sigChecker.ensureWellFormed(tn); }", "-    }", "+    finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f59ea7651dbc6f6fd42cfdc21da0231", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 371, "methodNumberAfterChange": 371, "signatureBeforeChange": "   private <T> Iterable<? extends T>     lookupMember(Type t, final List<Type> alreadyChecked,                  TypeVisitor<? extends Iterable<? extends T>> baseCase,                   final TypeVisitor<? extends Iterable<? extends T>> recursiveBaseCase)", "signatureAfterChange": "   private <T> Iterable<? extends T>     lookupMember(Type t, final Set<Type> alreadyChecked,                  TypeVisitor<? extends Iterable<? extends T>> baseCase,                   final TypeVisitor<? extends Iterable<? extends T>> recursiveBaseCase)", "diff": ["-    lookupMember(Type t, final List<Type> alreadyChecked,", "+    lookupMember(Type t, final Set<Type> alreadyChecked,", "-    for (Type checkedT : alreadyChecked) {", "-      // TODO: Improve the performance here (use a hash code consistent with isEqual)", "-      if (isEqual(t, checkedT)) { return IterUtil.empty(); }", "-    }", "+    debug.logStart(\"t\", wrap(t)); try {", "+      ", "+    if (alreadyChecked.contains(t)) { return IterUtil.empty(); }", "+    ", "+    } finally { debug.logEnd(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca877fa49d42df36946a35e318610be5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "46bcadf84d25b13a4fedcd62704db0f1ba315fe0", "commitAfterChange": "900f0639b0094b4c968af41d5a8352411b9f32cd", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "          public void run(Iterable<? extends T> args) throws InterpreterException", "signatureAfterChange": "          public void run(Iterable<? extends T> args) throws InterpreterException", "diff": ["+      debug.logStart(_description);", "+        debug.logStart(\"location\", location(arg));", "+        debug.logEnd();", "+      debug.logEnd(_description);"]}], "num": 29278}
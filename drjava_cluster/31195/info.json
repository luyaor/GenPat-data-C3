{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1780136a73164ded12bbcc88bf15721", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44fb9934fac8dac7b526b2a699330571", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4d1ec9f177e91fb20e1576118d8200b785c57af9", "commitAfterChange": "37a69b76cde1f0458405f92ba03376e7f77e1f0a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class visit(IfThenElseStatement node)", "signatureAfterChange": "   public Class visit(IfThenElseStatement node)", "diff": ["+    Expression cond = node.getCondition();", "+    ", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Class type = cond.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+    }", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"cond.booleanValue();\"", "+      node.setCondition(_unbox(cond, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0a232276d58fa811cba37c2b20cebe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Class visit(DoStatement node)", "signatureAfterChange": "   public Class visit(DoStatement node)", "diff": ["-    // Check the condition", "-    if (node.getCondition().acceptVisitor(this) != boolean.class) {", "+    Expression exp = node.getCondition();", "+    Class type = exp.acceptVisitor(this);", "+    if (type != boolean.class && type != Boolean.class) {", "+    }", "+    ", "+    // Auto unbox: Boolean->boolean", "+    if (type == Boolean.class) {", "+      // add method call on expression:", "+      //   \"exp.booleanValue();\"", "+      node.setCondition(_unbox(exp, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4027cbdd3d2c3c87c19e000a72ca836", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "   private static ObjectMethodCall _unbox(Expression child, Class type)", "signatureAfterChange": "   private static ObjectMethodCall _unbox(Expression child, Class type)", "diff": ["+    Class unboxedType = type;", "+      unboxedType = boolean.class;", "+      unboxedType = byte.class;", "+      unboxedType = char.class;", "+      unboxedType = short.class;", "+      unboxedType = int.class;", "+      unboxedType = long.class;", "+      unboxedType = float.class;", "+      unboxedType = double.class;", "+    ", "+    methodCall.setProperty(NodeProperties.TYPE, unboxedType);"]}], "num": 31195}
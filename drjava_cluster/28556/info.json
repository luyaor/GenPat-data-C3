{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e10ae0649ac133530e7df1d9b9912f3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d65bcd1df251df86dee3555c7db9cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "14b45aa3b3e4e065019fffca22e1561b9b0d2698", "commitAfterChange": "8e9c94b2b0f764af306682c5d62d4c11ac6175a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-              JavaClass clazz = new ClassParser(entry.getCanonicalPath()).parse();", "-              String className = clazz.getClassName(); // get classfile name", "-//              System.err.println(\"looking for source file for: \" + className);", "-              int indexOfDot = className.lastIndexOf('.');", "-              ", "+              final Box<String> className = new SimpleBox<String>();", "+              final Box<String> sourceName = new SimpleBox<String>();", "+              new ClassReader(IOUtil.toByteArray(entry)).accept(new ClassVisitor() {", "+                public void visit(int version, int access, String name, String sig, String sup, String[] inters) {", "+                  className.set(name);", "+                }", "+                public void visitSource(String source, String debug) {", "+                  sourceName.set(source);", "+                }", "+                public void visitOuterClass(String owner, String name, String desc) {}", "+                public AnnotationVisitor visitAnnotation(String desc, boolean visible) { return null; }", "+                public void visitAttribute(Attribute attr) {}", "+                public void visitInnerClass(String name, String out, String in, int access) {}", "+                public FieldVisitor visitField(int a, String n, String d, String s, Object v) { return null; }", "+                public MethodVisitor visitMethod(int a, String n, String d, String s, String[] e) { return null; }", "+                public void visitEnd() {}", "+              }, 0);", "+", "-              String javaSourceFileName = rootDir.getCanonicalPath() + File.separator + clazz.getSourceFileName();", "+              String javaSourceFileName = rootDir.getCanonicalPath() + File.separator + sourceName.value();", "-              classNames.add(className);", "+              classNames.add(className.value());", "-            catch(ClassFormatException e) { /* ignore it; class file is bad */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7afb7884a0a83bb1718132ee86801f4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "   private void _createDebugger()", "diff": ["+      ", "+      // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "+      _debugger.addListener(new DebugListener() {", "+        public void debuggerStarted() { }", "+        public void debuggerShutdown() { }", "+        public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "+        public void breakpointSet(final Breakpoint bp) {", "+          setProjectChanged(true);", "+        }", "+        public void breakpointReached(final Breakpoint bp) { }", "+        public void breakpointRemoved(final Breakpoint bp) {", "+          setProjectChanged(true);", "+        }    ", "+        public void watchSet(final DebugWatchData w) {", "+          setProjectChanged(true);", "+        }", "+        public void watchRemoved(final DebugWatchData w) {", "+          setProjectChanged(true);", "+        }    ", "+        public void stepRequested() { }", "+        public void currThreadSuspended() { }", "+        public void currThreadResumed() { }", "+        public void threadStarted() { }", "+        public void currThreadDied() { }", "+        public void nonCurrThreadDied() {  }", "+        public void currThreadSet(DebugThreadData thread) { }", "+      });"]}], "num": 28556}
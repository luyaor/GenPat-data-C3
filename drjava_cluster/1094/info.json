{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d6823e6f9dc2b431b87dea783d79c6e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2274986a18cc4ee97dfd75e747ae3762", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e8f4cbce06d140e9a09dd38237b848b4f27d8a", "commitAfterChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 139, "signatureBeforeChange": "   public void generateJavaAPIList()", "signatureAfterChange": "   public void generateJavaAPIList()", "diff": ["+      ", "+      // the string that will be ADDED to the beginning of the link to form the full URL", "+      ", "+      // the string that will be REMOVED from the beginning of the link to form the fully-qualified class name", "+      String stripPrefix = \"\";", "+      ", "+      // the HTML file name that contains all the links", "+        stripPrefix = \"\"; // nothing needs to be stripped, links in 1.3 Javadoc are relative", "+        stripPrefix = \"\"; // nothing needs to be stripped, links in 1.4 Javadoc are relative", "+        stripPrefix = \"\"; // nothing needs to be stripped, links in 1.5 Javadoc are relative", "-        base = \"\";", "+        base = \"\"; // links in 1.6 Javadoc are absolute, so nothing needs to be added to get an absolute URL", "+        // but we do need to strip the absolute part to get correct fully-qualified class names", "+        // and we take the default string here, not what the user entered, because the links in", "+        // our allclasses-1.6.html file go to the original Sun website.", "+        stripPrefix = JAVADOC_1_6_LINK.getDefaultString() + \"/\";", "-              String fullClassName = link.replace('/', '.');", "+              String fullClassName = link.substring(stripPrefix.length()).replace('/', '.');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b413c864140b46d02585293b7e749a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "     public boolean replaceCurrent()", "diff": ["+    */", "+    public boolean replaceCurrent() {", "+        return _state.replaceCurrent();", "-  */", "-  public boolean replaceCurrent() {", "-    try {", "-      if (isOnMatch()) {", "-        boolean atStart = false;", "-        int position = getCurrentOffset();", "-        if(!_searchBackwards) {", "-          position -= _findWord.length();", "-        }", "-        _doc.remove(position, _findWord.length());", "-        if (position == 0){", "-          atStart = true;", "-        }", "-        _doc.insertString(getCurrentOffset(), _replaceWord, null);", "-", "-        // the current offset will be the end of the inserted word", "-        //since we keep track of current as a Position.", "-        //The exception is if we are at the beginning of the document,", "-        //in which case the text is inserted AFTER the current position", "-        //So, current offset is correct for forwards searching unless", "-        //we were at the start of the document, in which case it is", "-        //correct for backwards searching.", "-        if(atStart && !_searchBackwards) {", "-          setPosition(_replaceWord.length());", "-        }", "-        if(!atStart && _searchBackwards){", "-          setPosition(getCurrentOffset() - _replaceWord.length());", "-        }", "-", "-        return true;", "-      }", "-      else {", "-        return false;", "-      }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b85196820f57348ba5038aaf8033bc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "cd663e9bf0c95c5bb5b12db38fbcd366660d665e", "commitAfterChange": "22cb21cbc806aa257284ccfb5bed593a93cc9671", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-        _doc.remove(getCurrentOffset() - _findWord.length(),", "-                    _findWord.length());", "-        // the current offset will be correct since we keep track", "-        // of it as a Position.", "+        boolean atStart = false;", "+        int position = getCurrentOffset();", "+        if(!_searchBackwards) {", "+          position -= _findWord.length();", "+        }", "+        _doc.remove(position, _findWord.length());", "+        if (position == 0){", "+          atStart = true;", "+        }", "+", "+        // the current offset will be the end of the inserted word", "+        //since we keep track of current as a Position.", "+        //The exception is if we are at the beginning of the document,", "+        //in which case the text is inserted AFTER the current position", "+        //So, current offset is correct for forwards searching unless", "+        //we were at the start of the document, in which case it is", "+        //correct for backwards searching.", "+        if(atStart && !_searchBackwards) {", "+          setPosition(_replaceWord.length());", "+        }", "+        if(!atStart && _searchBackwards){", "+          setPosition(getCurrentOffset() - _replaceWord.length());", "+        }", "+"]}], "num": 1094}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e0594778a82f7aad57805a1f7da25cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "632f5bb8a35dcf3853c02f8f4cda6c44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "28db8fb2942dc00cad50f5244fe215d573867721", "commitAfterChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   protected void matchUpdate(int offset)", "signatureAfterChange": "   public void matchUpdate(int offset)", "diff": ["-  protected void matchUpdate(int offset) { ", "-    _doc.setCurrentLocation(offset);  ", "-    _removePreviousHighlight();", "-    ", "-    // Update the highlight if there is any. Not necessarily executed in event thread", "-    int to = getCaretPosition();", "-    int from = _doc.balanceBackward();", "-    if (from > -1) {", "-      // Found a matching open brace to this close brace", "-      from = to - from;", "-      _addHighlight(from, to);", "-      //     Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "-      ", "-      String matchText = _matchText(from);", "-      ", "-      if (matchText != null) _mainFrame.updateStatusField(\"Bracket matches: \" + matchText);", "-      else _mainFrame.updateStatusField();", "-    }", "-    ", "-    // if this wasn't a close brace, check for an open brace", "-    else {", "-      // (getCaretPosition will be the start of the highlight)", "-      from = to;", "-      ", "-      to = _doc.balanceForward();", "-      if (to > -1) {", "-        to = to + from;", "-        _addHighlight(from - 1, to);", "+  public void matchUpdate(int offset) { ", "+    final DefinitionsDocument doc = _doc.getDocument();", "+    doc.acquireReadLock();", "+    try {", "+      synchronized(doc.getReduced()) {", "+        doc._setCurrentLocation(offset); ", "+        _removePreviousHighlight();", "+        ", "+        // Update the highlight if there is any. Not necessarily executed in event thread", "+        int to = getCaretPosition();", "+        ", "+        int from = doc._balanceBackward();", "+//        Utilities.show(\"balanceBackward() returned \" + from);", "+        if (from >= 0) {", "+          // Found a matching open brace to this close brace", "+          from = to - from;", "+          _addHighlight(from, to);", "+          //     Highlighter.Highlight[] _lites = getHighlighter().getHighlights();", "+          ", "+          String matchText = _matchText(from);", "+          ", "+          if (matchText != null) _mainFrame.updateStatusField(\"Bracket matches: \" + matchText);", "+          else _mainFrame.updateStatusField();", "+        }", "+        ", "+        // if this wasn't a closed brace, check for an open brace", "+        else {", "+          // (getCaretPosition will be the start of the highlight)", "+          from = to;", "+          to = doc._balanceForward();", "+//          System.err.println(\"balanceForward() returned \" + to + \"; from = \" + from);", "+          if (to >= 0) {", "+            to = to + from;", "+            _addHighlight(from - 1, to);", "+//            System.err.println(\"Added forward highlight\");", "-      }", "-      _mainFrame.updateStatusField();         ", "-    }", "+          }", "+          _mainFrame.updateStatusField();         ", "+        }", "+      } // end synchronized", "+    }  // end try", "+    finally { doc.releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98ae636f075bca98ceb0515ec04cca98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "92062677ca813cb9ab44428a0d2d54f0c3309b04", "commitAfterChange": "274f7defc49003e66c942e814c9ce22958b3814c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 34, "signatureBeforeChange": "         public void run()", "signatureAfterChange": "   void moveToEnd()", "diff": ["-      Utilities.invokeLater(new Runnable() {", "-        public void run() { ", "-          ConsoleDocument doc = getConsoleDoc();", "-          doc.acquireReadLock();", "-          try {", "-            int len = doc.getLength();", "-            if (_pane.getCaretPosition() > len) _pane.setCaretPosition(len);", "-          }", "-          finally { doc.releaseReadLock(); }", "-        }", "+  /** Moves the pane's caret to the end of the document. Only affects reduced_model not the document model.  */", "+  void moveToEnd() { ", "+    assert EventQueue.isDispatchThread();", "+    ConsoleDocument doc = getConsoleDoc();", "+    doc.acquireReadLock();", "+    try { _pane.setCaretPosition(getConsoleDoc().getLength()); }", "+    finally {doc.releaseReadLock(); }", "+  }"]}], "num": 26607}
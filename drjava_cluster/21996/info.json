{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1a2d27ec7f2efe46b275f380dc544e6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04f4c7a0059f9f906d757f0a7772ebe8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 34, "signatureBeforeChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "signatureAfterChange": "     @Override public Type visit(AnonymousInnerAllocation node)", "diff": ["-        Iterable<? extends Expression> args = IterUtil.empty();", "-        if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+        Iterable<? extends Expression> args = node.getArguments();", "+        checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b821c0dcc6ad3cb1373247ed6c795b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "     @Override public Type visit(SimpleMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SimpleMethodCall node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c19e707aaf2a30d7d8c3e092f7d121e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "f5712545338ec09fefb321f9e27396d8fb91a646", "commitAfterChange": "1676fcce81c19c5d647ee9a67867801bec666091", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "     @Override public Type visit(ObjectMethodCall node)", "signatureAfterChange": "     @Override public Type visit(ObjectMethodCall node)", "diff": ["-      Iterable<? extends Expression> args = IterUtil.empty();", "-      if (node.getArguments() != null) { args = node.getArguments(); checkList(args); }", "+      Iterable<? extends Expression> args = node.getArguments();", "+      checkList(args);"]}], "num": 21996}
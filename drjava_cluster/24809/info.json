{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9049ab029b6b04b63895e86d0d766245", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073399c7f334b6b3ba536e8292879b60", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void endCompoundEdit(int key)", "signatureAfterChange": "   public synchronized void endCompoundEdit(int key)", "diff": ["-    if (_keys.size() > 0) {", "-      if (_keys.get(0).intValue() == key) {", "-        CompoundEdit compoundEdit = _compoundEdits.remove(0);", "-        compoundEdit.end();", "-        ", "-        if (compoundEdit.canUndo()) {", "-          if (!_compoundEditInProgress()) {", "-            super.addEdit(compoundEdit);", "-            //          if (!canUndo()) {", "-            //            throw new RuntimeException(\"could not add the edit to the undomanager\");", "-            //          }", "-            _notifyUndoHappened();", "-          }", "-          else _compoundEdits.get(0).addEdit(compoundEdit);", "+    if (_keys.size() == 0) return;", "+    ", "+    if (_keys.get(0) == key) {", "+      _keys.remove(0);", "+      final CompoundEdit ce = _compoundEdits.remove(0);", "+ ", "+      ce.end();", "+      if (ce.canUndo()) {", "+        if (! _compoundEditInProgress()) {", "+          super.addEdit(ce);", "+          _notifyUndoHappened();", "-        _keys.remove(0);", "-        ", "-        // signal view to update undo state", "-      }", "-      else throw new IllegalStateException(\"Improperly nested compound edits.\");", "+        else _compoundEdits.get(0).addEdit(ce);", "+      } ", "+    else throw new IllegalStateException(\"Improperly nested compound edits.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f78287d0fb2f3ec297c2d81a0edeef59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionStartingNewStmt.java", "commitBeforeChange": "2929449ae6587f03038439e75c91a7d89b0daaf8", "commitAfterChange": "c1ff07970240c7ef75ff58b54b7af66d381343b1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    int prevDelimiter;", "+    int prevDelimiterPos;", "-      prevDelimiter = doc.findPrevDelimiter(lineStart, delims);", "+      prevDelimiterPos = doc.findPrevDelimiter(lineStart, delims);", "-    if(prevDelimiter == DefinitionsDocument.ERROR_INDEX) {", "-      prevDelimiter = DefinitionsDocument.DOCSTART;", "+    // For DOCSTART, imaginary delimiter at position -1", "+    if(prevDelimiterPos == DefinitionsDocument.ERROR_INDEX) {", "+      prevDelimiterPos = -1;", "+    // Delimiter must be at the end of its line (ignoring whitespace & comments)", "-      firstNonWSAfterDelimiter = doc.getFirstNonWSCharPos(prevDelimiter+1);", "+      firstNonWSAfterDelimiter = doc.getFirstNonWSCharPos(prevDelimiterPos+1);"]}], "num": 24809}
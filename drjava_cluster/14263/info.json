{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74e56a454a4912dd7230a2c2215b58b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77a90a9bca503367558182cfbfd6783b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 24, "signatureBeforeChange": "          @Override public Void visit(MethodDeclaration node)", "signatureAfterChange": "          @Override public Void visit(MethodDeclaration node)", "diff": ["-      DJMethod m = getMethod(node);", "-      TypeContext sigContext = new FunctionSignatureContext(_context, m);", "-      TypeContext bodyContext = new FunctionContext(sigContext, m);", "-      node.getBody().acceptVisitor(new StatementChecker(bodyContext, _opt));", "+      if (node.getBody() != null) {", "+        DJMethod m = getMethod(node);", "+        TypeContext sigContext = new FunctionSignatureContext(_context, m);", "+        TypeContext bodyContext = new FunctionContext(sigContext, m);", "+        node.getBody().acceptVisitor(new StatementChecker(bodyContext, _opt));", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8e56f9311e4aacd44aa53876a0046bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "6b936f625ceea21472b90559f34694154e802e14", "commitAfterChange": "8d43ad99265fb94492eb304c2a9128684a27d753", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   @Override public TypeContext visit(MethodDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(MethodDeclaration node)", "diff": ["+    TypeContext sigContext = new FunctionSignatureContext(context, f);", "+    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "+", "-    for (TypeParameter param : tparams) {", "-      setTypeVariable(param, new VariableType(new BoundedSymbol(param, param.getRepresentation())));", "-    }", "-    ", "-    TypeContext sigContext = new FunctionSignatureContext(context, f);", "-    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-    sigChecker.setTypeParameterBounds(tparams);", "+    sigChecker.checkTypeParameters(tparams);"]}], "num": 14263}
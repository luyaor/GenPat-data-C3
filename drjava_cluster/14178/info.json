{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "453b2841d20cab5f40e002b352bee774", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b822a6f79bfc5b6931e1fdd57e555cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "signatureAfterChange": "   public void junit(OpenDefinitionsDocument doc) throws ClassNotFoundException, IOException", "diff": ["+//    new ScrollableDialog(null, \"junit(\" + doc + \") called in DefaultJunitModel\", \"\", \"\").show();", "-      _isTestInProgress = false;", "-      _notifier.junitEnded();", "-      throw e;", "+        _notifier.junitEnded();", "+        synchronized (this) { _testInProgress = false; }", "+        throw e;", "-    catch (ExitingNotAllowedException enae) {", "-      _isTestInProgress = false;", "-      _notifier.junitEnded();", "+    catch (ExitingNotAllowedException enae) {  // test attempted to call System.exit", "+      _notifier.junitEnded();  // balances junitStarted()", "+      synchronized (this) { _testInProgress = false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc453184a04c373175874a94c5dedc6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void close()", "signatureAfterChange": "     public void close()", "diff": ["-    /** Closes the corresponding document for this adapter. */", "+    /** Closes the corresponding document for this adapter.  Done when a document is closed by the navigator. */", "-      kickOut(false); // should not save the doc info", "-      DocumentCache.this.remove(this);", "+//      Utilities.showDebug(\"close() called on \" + this);", "+      synchronized (DocumentCache.this) { _residentQueue.remove(this); }", "+      synchronized (this) { closingKickOut(); }", "+    }"]}], "num": 14178}
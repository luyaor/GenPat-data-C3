{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d1297caca8eb8befaa3fc0249793c69", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5738e9e3fce1d6a9c8183d79e9703fd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public TreeMap<Integer, Integer> readLLLineBlock(File LLFile)", "signatureAfterChange": "   public TreeMap<Integer, Integer> readLLLineBlock(File LLFile)", "diff": ["-    if (!rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "+    if (! rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "+    // Process header line of block", "-    if (rdLine.indexOf(\"//\") != 0) mapSize = 0;  //Kills the for loop if read line is not of correct format", "-    ", "-    String temp = \"\";", "-    String numRnum = \"\";", "+    if (rdLine.indexOf(\"//\") != 0) mapSize = 0;  // Kills the for loop if read line is not of correct format", "+   ", "+    // Create the LL map", "-    temp = rdLine.substring(2).trim() + \" \";", "+    // Process block lines containing map entries; rdLine is first such line", "+    // Invariant for text: text has no leading whitespace and trailing whitespace consisting of a single blank", "+    String text = rdLine.substring(2).trim() + \" \";", "-      if (temp.length() < 2)  temp = readLLLineBlockHelper(bufReader);", "-      if (temp == null) break;", "-//      Utilities.show(\"i = \" + i + \"     temp = '\" + temp + \"'\");", "-      numRnum = temp.substring(0, temp.indexOf(\" \"));", "+      if (text.length() < 2)  text = readNextLLBlockLine(bufReader);", "+      if (text == null) break;  // no more entries in block; mapSize is wrong  // ERROR should be raised !!!", "+", "+      int firstBlankPos = text.indexOf(\" \");", "+      String numRnum = text.substring(0, firstBlankPos);", "+      text = text.substring(firstBlankPos).trim() + \" \";  // Only need to trim leading blanks here; String API is clumsy", "-      temp = temp.substring(temp.indexOf(\" \")).trim() + \" \";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfd5e99b80af6c54f2dd42f176c5c860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/LanguageLevelStackTraceMapper.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile)", "signatureAfterChange": "   public TreeMap<Integer, Integer> readLLBlock(File LLFile)", "diff": ["-  public TreeMap<Integer, Integer> ReadLanguageLevelLineBlockRev(File LLFile) {", "+  public TreeMap<Integer, Integer> readLLBlock(File LLFile) {", "-    if (!rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "+    if (! rdLine.startsWith(\"// Language Level Converter line number map: dj*->java. Entries:\")) {", "-    try{ rdLine = bufReader.readLine(); } catch(java.io.IOException e){ }", "+    try { rdLine = bufReader.readLine(); } catch(java.io.IOException e){ }", "-    String temp = rdLine.substring(2).trim() + \" \";  // invariant: temp has no leading spaces and a single trailing space", "+    String text = rdLine.substring(2).trim() + \" \";  // invariant: temp has no leading spaces and a single trailing space", "-      if (temp.length() < 2)  temp = readLLLineBlockHelper(bufReader);", "-      if (temp == null) break;", "+      if (text.length() < 2)  text = readNextLLBlockLine(bufReader);", "+      if (text == null) break;", "-      numRnum = temp.substring(0, temp.indexOf(\" \"));", "+      numRnum = text.substring(0, text.indexOf(\" \"));", "-      temp = temp.substring(temp.indexOf(\" \")).trim() + \" \";  // slices off first non-blank section", "+      text = text.substring(text.indexOf(\" \")).trim() + \" \";  // slices off first non-blank section"]}], "num": 27100}
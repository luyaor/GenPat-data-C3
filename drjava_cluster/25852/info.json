{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e1a3e36ea9d5661223ddd3496b2d1aa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c975e6c67d68a2134b9a21f0545a8cf4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/SimpleAllocation.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public SimpleAllocation(TypeName tp, List<Expression> args,                           String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public SimpleAllocation(ReferenceTypeName tp, List<? extends Expression> args,                           String fn, int bl, int bc, int el, int ec)", "diff": ["-  public SimpleAllocation(TypeName tp, List<Expression> args,", "+  public SimpleAllocation(ReferenceTypeName tp, List<? extends Expression> args,", "-    super(tp, fn, bl, bc, el, ec);", "-    arguments = args;", "+    super(fn, bl, bc, el, ec);", "+", "+    if (tp == null) throw new IllegalArgumentException(\"tp == null\");", "+    creationType = tp;", "+    arguments = (args == null) ? null : new ArrayList<Expression>(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82c7edfe520ff2d7a190183e3680166", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/InnerAllocation.java", "commitBeforeChange": "33efe2539ca216fb14c21fb7ac7310d7b150d7ef", "commitAfterChange": "88de5f3657d6901624a99592baa687fe5666eed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public InnerAllocation(Expression exp, TypeName tp, List<Expression> args,                          String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args,                          String fn, int bl, int bc, int el, int ec)", "diff": ["-  public InnerAllocation(Expression exp, TypeName tp, List<Expression> args,", "+  public InnerAllocation(Expression exp, String cn, List<? extends TypeName> ctargs, List<? extends Expression> args,", "-    super(tp, fn, bl, bc, el, ec);", "+    super(fn, bl, bc, el, ec);", "+    if (cn == null) throw new IllegalArgumentException(\"cn == null\");", "-    arguments  = args;", "+    className = cn;", "+    classTypeArguments = (ctargs == null) ? null : new ArrayList<TypeName>(ctargs);", "+    arguments  = (args == null) ? null : new ArrayList<Expression>(args);"]}], "num": 25852}
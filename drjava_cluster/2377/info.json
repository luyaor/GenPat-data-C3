{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f0ebdbaab4d740f452080494ed0fb23", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f0546ffc520c2289e982e0484c8d599", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "   public void testUndoAndRedoAfterMultipleLineCommentAndUncomment()     throws BadLocationException", "signatureAfterChange": "   public void testUndoAndRedoAfterMultipleLineCommentAndUncomment()     throws BadLocationException", "diff": ["-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "+    _doc.addUndoableEditListener(_doc.getUndoManager());", "-    _defModel.insertString(0,text,null);", "-    assertEquals(\"insertion\",text, _defModel.getText());", "+    _doc.insertString(0,text,null);", "+    assertEquals(\"insertion\",text, _doc.getText());", "-    _defModel.getUndoManager().startCompoundEdit();", "-    _defModel.commentLines(0,_defModel.getLength());", "-    assertEquals(\"commenting\",commented, _defModel.getText());", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"undo commenting\",text, _defModel.getText());", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo commenting\",commented, _defModel.getText());", "+    _doc.getUndoManager().startCompoundEdit();", "+    _doc.commentLines(0,_doc.getLength());", "+    assertEquals(\"commenting\",commented, _doc.getText());", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"undo commenting\",text, _doc.getText());", "+    _doc.getUndoManager().redo();", "+    assertEquals(\"redo commenting\",commented, _doc.getText());", "-    _defModel.getUndoManager().startCompoundEdit();", "-    _defModel.uncommentLines(0,_defModel.getLength());", "-    assertEquals(\"uncommenting\",text, _defModel.getText());", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"undo uncommenting\",commented, _defModel.getText());", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo uncommenting\",text, _defModel.getText());", "+    _doc.getUndoManager().startCompoundEdit();", "+    _doc.uncommentLines(0,_doc.getLength());", "+    assertEquals(\"uncommenting\",text, _doc.getText());", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"undo uncommenting\",commented, _doc.getText());", "+    _doc.getUndoManager().redo();", "+    assertEquals(\"redo uncommenting\",text, _doc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314c6df4acffe1dcc752509958b50d85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException", "signatureAfterChange": "   public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException", "diff": ["-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "+    _doc.addUndoableEditListener(_doc.getUndoManager());", "-    _defModel.insertString(0,text,null);", "-    assertEquals(\"insertion\",text, _defModel.getText()); ", "+    _doc.insertString(0,text,null);", "+    assertEquals(\"insertion\",text, _doc.getText()); ", "-    _defModel.getUndoManager().startCompoundEdit();", "-    _defModel.indentLines(0,_defModel.getLength());", "-    assertEquals(\"indenting\",indented, _defModel.getText());", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"undo\",text, _defModel.getText());", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo\",indented, _defModel.getText());", "+    _doc.getUndoManager().startCompoundEdit();", "+    indentLines(0,_doc.getLength());", "+    assertEquals(\"indenting\",indented, _doc.getText());", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"undo\",text, _doc.getText());", "+    _doc.getUndoManager().redo();", "+    assertEquals(\"redo\",indented, _doc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3788b8851d21ce4688aff10aedf3f52b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public void testTopLevelEnclosingClassName() throws BadLocationException, ClassNameNotFoundException", "signatureAfterChange": "   public void testTopLevelEnclosingClassName() throws BadLocationException, ClassNameNotFoundException", "diff": ["-    _defModel.insertString(0, classes, null);", "+    _doc.insertString(0, classes, null);", "-      String result = _defModel.getEnclosingTopLevelClassName(3);", "+      String result = _doc.getEnclosingTopLevelClassName(3);", "-      _defModel.getEnclosingTopLevelClassName(15);", "+      _doc.getEnclosingTopLevelClassName(15);", "-      String result = _defModel.getEnclosingTopLevelClassName(186);", "+      String result = _doc.getEnclosingTopLevelClassName(186);", "-    assertEquals(\"top level class name after first open brace\", \"C1\", _defModel.getEnclosingTopLevelClassName(22));", "-    assertEquals(\"top level class name inside C1\", \"C1\", _defModel.getEnclosingTopLevelClassName(26));", "-    assertEquals(\"top level class name inside method of C1\", \"C1\", _defModel.getEnclosingTopLevelClassName(42));", "-    assertEquals(\"top level class name on C2's brace\", \"C1\", _defModel.getEnclosingTopLevelClassName(58));", "-    assertEquals(\"top level class name after C2's brace\", \"C1\", _defModel.getEnclosingTopLevelClassName(59));", "-    assertEquals(\"top level class name inside C2\", \"C1\", _defModel.getEnclosingTopLevelClassName(68));", "-    assertEquals(\"top level class name inside C3\", \"C1\", _defModel.getEnclosingTopLevelClassName(92));", "-    assertEquals(\"top level class name after C3's close brace\", \"C1\", _defModel.getEnclosingTopLevelClassName(93));", "-    assertEquals(\"top level class name after C2's close brace\", \"C1\", _defModel.getEnclosingTopLevelClassName(100));", "+    assertEquals(\"top level class name after first open brace\", \"C1\", _doc.getEnclosingTopLevelClassName(22));", "+    assertEquals(\"top level class name inside C1\", \"C1\", _doc.getEnclosingTopLevelClassName(26));", "+    assertEquals(\"top level class name inside method of C1\", \"C1\", _doc.getEnclosingTopLevelClassName(42));", "+    assertEquals(\"top level class name on C2's brace\", \"C1\", _doc.getEnclosingTopLevelClassName(58));", "+    assertEquals(\"top level class name after C2's brace\", \"C1\", _doc.getEnclosingTopLevelClassName(59));", "+    assertEquals(\"top level class name inside C2\", \"C1\", _doc.getEnclosingTopLevelClassName(68));", "+    assertEquals(\"top level class name inside C3\", \"C1\", _doc.getEnclosingTopLevelClassName(92));", "+    assertEquals(\"top level class name after C3's close brace\", \"C1\", _doc.getEnclosingTopLevelClassName(93));", "+    assertEquals(\"top level class name after C2's close brace\", \"C1\", _doc.getEnclosingTopLevelClassName(100));", "-      _defModel.getEnclosingTopLevelClassName(107);", "+      _doc.getEnclosingTopLevelClassName(107);", "-    assertEquals(\"class name inside C4\", \"C4\", _defModel.getEnclosingTopLevelClassName(122));", "-    assertEquals(\"class name inside C5\", \"C4\", _defModel.getEnclosingTopLevelClassName(135));", "-    assertEquals(\"class name inside C6\", \"C4\", _defModel.getEnclosingTopLevelClassName(167));", "-    assertEquals(\"class name inside C7\", \"C7\", _defModel.getEnclosingTopLevelClassName(185));", "+    assertEquals(\"class name inside C4\", \"C4\", _doc.getEnclosingTopLevelClassName(122));", "+    assertEquals(\"class name inside C5\", \"C4\", _doc.getEnclosingTopLevelClassName(135));", "+    assertEquals(\"class name inside C6\", \"C4\", _doc.getEnclosingTopLevelClassName(167));", "+    assertEquals(\"class name inside C7\", \"C7\", _doc.getEnclosingTopLevelClassName(185));", "-      String result = _defModel.getEnclosingTopLevelClassName(186);", "+      String result = _doc.getEnclosingTopLevelClassName(186);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b9e69a7ed972543a80dd397e114402", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public void testUndoOrRedoSetsUnmodifiedState() throws BadLocationException", "signatureAfterChange": "   public void testUndoOrRedoSetsUnmodifiedState() throws BadLocationException", "diff": ["-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "-    _defModel.insertString(0, \"This is text\", null);", "-    assertTrue(\"Document should be modified.\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().undo();", "-    _defModel.updateModifiedSinceSave();", "-    assertFalse(\"Document should no longer be modified after undo.\", _defModel.isModifiedSinceSave());", "-    _defModel.insertString(0, \"This is text\", null);", "-    _defModel.resetModification();", "-    assertFalse(\"Document should not be modified after \\\"save\\\".\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().undo();", "-    _defModel.updateModifiedSinceSave();", "-    assertTrue(\"Document should be modified after undo.\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().redo();", "-    _defModel.updateModifiedSinceSave();", "-    assertFalse(\"Document should no longer be modified after redo.\", _defModel.isModifiedSinceSave());", "+    _doc.addUndoableEditListener(_doc.getUndoManager());", "+    _doc.insertString(0, \"This is text\", null);", "+    assertTrue(\"Document should be modified.\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().undo();", "+    _doc.updateModifiedSinceSave();", "+    assertFalse(\"Document should no longer be modified after undo.\", _doc.isModifiedSinceSave());", "+    _doc.insertString(0, \"This is text\", null);", "+    _doc.resetModification();", "+    assertFalse(\"Document should not be modified after \\\"save\\\".\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().undo();", "+    _doc.updateModifiedSinceSave();", "+    assertTrue(\"Document should be modified after undo.\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().redo();", "+    _doc.updateModifiedSinceSave();", "+    assertFalse(\"Document should no longer be modified after redo.\", _doc.isModifiedSinceSave());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd737c2ae03bc4ae87d7a6badc55f86b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public void testCompoundUndoManager() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-    CompoundUndoManager undoManager = _defModel.getUndoManager();", "+    CompoundUndoManager undoManager = _doc.getUndoManager();", "-    _defModel.addUndoableEditListener(undoManager);", "+    _doc.addUndoableEditListener(undoManager);", "-    _defModel.insertString(0, text, null);", "-    assertEquals(\"Should have inserted the text properly.\", text, _defModel.getText());", "+    _doc.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented,  _defModel.getText());", "+    indentLines(0, _doc.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented,  _doc.getText());", "-    assertEquals(\"Should have undone correctly.\", \"\",  _defModel.getText());", "+    assertEquals(\"Should have undone correctly.\", \"\",  _doc.getText());", "-    key = _defModel.getUndoManager().startCompoundEdit();", "+    key = _doc.getUndoManager().startCompoundEdit();", "-    _defModel.insertString(0, text, null);", "+    _doc.insertString(0, text, null);", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "+    indentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.commentLines(0, _defModel.getLength());", "+    _doc.commentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.getUndoManager().undo();", "+    _doc.getUndoManager().undo();", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.getUndoManager().undo();", "+    _doc.getUndoManager().undo();", "-                 _defModel.getText());", "+                 _doc.getText());", "-    key = _defModel.getUndoManager().startCompoundEdit();", "+    key = _doc.getUndoManager().startCompoundEdit();", "-    _defModel.insertString(0, text, null);", "+    _doc.insertString(0, text, null);", "-                 _defModel.getText());", "+                 _doc.getText());", "-    _defModel.indentLines(0, _defModel.getLength());", "+    indentLines(0, _doc.getLength());", "-                 _defModel.getText());", "+                 _doc.getText());", "-//      _defModel.getUndoManager().undo();", "+//      _doc.getUndoManager().undo();", "-//      _defModel.getUndoManager().redo();", "+//      _doc.getUndoManager().redo();", "-      _defModel.getUndoManager().endCompoundEdit(key + 2);", "+      _doc.getUndoManager().endCompoundEdit(key + 2);", "-    _defModel.indentLines(0, _defModel.getLength());", "-    assertEquals(\"Should have indented correctly.\", indented, _defModel.getText());", "+    indentLines(0, _doc.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, _doc.getText());", "-//      _defModel.getUndoManager().undo();", "+//      _doc.getUndoManager().undo();", "-//    _defModel.getUndoManager().endCompoundEdit(key);", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"Should have undone the indenting and inserting.\", \"\", _defModel.getText());", "+//    _doc.getUndoManager().endCompoundEdit(key);", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"Should have undone the indenting and inserting.\", \"\", _doc.getText());"]}], "num": 2377}
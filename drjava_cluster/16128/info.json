{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cbe5a8e8bfccf5369cafbe270657a0b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "538d610d4fbcf4802bc0f4ec66c58cce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d331e9af4b7210b21c235397f4a55183e132c12e", "commitAfterChange": "4a4ec2d05d53f85461639265168dfd632b3bdad1", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "     public TestResult startJUnit() throws IOException", "signatureAfterChange": "     public TestResult startJUnit() throws IOException", "diff": ["-        TestRunner testRunner = getTestRunner();", "+        JUnitTestRunner testRunner = getTestRunner();", "-        Test suite= testRunner.getTest(testFilename);", "+        try {", "+          if (! testRunner.isTestCase(testFilename)) {", "+            notifyListeners(new EventNotifier() {", "+              public void notifyListener(GlobalModelListener l) {", "+              l.nonTestCase();", "+              l.junitEnded();", "+            }", "+            });", "+            return null;", "+          }", "+        }", "+        catch (ClassNotFoundException e) {", "+          throw new UnexpectedException(e);", "+        }", "+        ", "+        Test suite = testRunner.getTest(testFilename);", "-      } catch (IllegalStateException e) {", "+      } ", "+      catch (IllegalStateException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f921a82bfd4d2b1c6ea9b9578e276072", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected void handleStart(MasterRemote mainJVM)", "signatureAfterChange": "   protected void handleStart(MasterRemote mainJVM)", "diff": ["+    // redirect stdin", "+    try {", "+      System.setIn(new InputStreamRedirector() {", "+        protected String _getInput() {", "+          try {", "+            return _mainJVM.getConsoleInput();", "+          }", "+          catch (RemoteException re) {", "+            // blow up if no MainJVM found", "+            _log.log(re.toString());", "+            throw new IllegalStateException(\"Main JVM can't be reached.\\n\" + re);", "+          }", "+        }", "+      });", "+    }", "+    catch (IOException ioe) {", "+      // leaves System.in alone", "+      _log.log(ioe.toString());", "+    }", "+"]}], "num": 16128}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4404c6e25e5450a2817e37548027665", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43b44bab707e56fb6bbee227eaca62f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 150, "signatureBeforeChange": "   public static <T> Pair<Iterable<T>, Iterable<T>> split(Iterable<? extends T> iter, final int index)", "signatureAfterChange": "   public static <T> Pair<SizedIterable<T>, SizedIterable<T>> split(Iterable<? extends T> iter, int index)", "diff": ["+   */", "+  public static <T> Pair<SizedIterable<T>, SizedIterable<T>> split(Iterable<? extends T> iter, int index) {", "+    Iterator<? extends T> iterator = iter.iterator();", "+    @SuppressWarnings(\"unchecked\") SizedIterable<T> left = (EmptyIterable<T>) EmptyIterable.INSTANCE;", "+    for (int i = 0; i < index && iterator.hasNext(); i++) {", "+      left = new ComposedIterable<T>(left, iterator.next());", "+    }", "+    return new Pair<SizedIterable<T>, SizedIterable<T>>(left, new SnapshotIterable<T>(iterator));", "+  }", "-  public static <T> Pair<Iterable<T>, Iterable<T>> split(Iterable<? extends T> iter, final int index) {", "-    Iterator<? extends T> iterator = iter.iterator();", "-    Iterable<T> left = EmptyIterable.make();", "-    for (int i = 0; i < index && iterator.hasNext(); i++) {", "-      left = ComposedIterable.make(left, iterator.next());", "-    }", "-    return new Pair<Iterable<T>, Iterable<T>>(left, new SnapshotIterable<T>(iterator));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bff4d17002b2ad5cc78174873415fbf6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/IterUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 163, "signatureBeforeChange": "   public static <S, T> SnapshotIterable<T>      mapSnapshot(Iterable<? extends S> source, Lambda<? super S, ? extends T> map)", "signatureAfterChange": "   public static <S, T> SnapshotIterable<T> mapSnapshot(Iterable<? extends S> source, Lambda<? super S, ? extends T> map)", "diff": ["+  public static <S, T> SnapshotIterable<T> mapSnapshot(Iterable<? extends S> source, Lambda<? super S, ? extends T> map) {", "+    return new SnapshotIterable<T>(new MappedIterable<S, T>(source, map));", "-   */", "-  public static <S, T> SnapshotIterable<T> ", "-    mapSnapshot(Iterable<? extends S> source, Lambda<? super S, ? extends T> map) {", "-    return SnapshotIterable.make(MappedIterable.make(source, map));", "-  }"]}], "num": 28338}
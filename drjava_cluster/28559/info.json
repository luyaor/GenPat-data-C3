{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f601d565c34ff78f546ff80291a86bcf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "021f38f7af0aca59fe9f9a37b21148fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/TreeClassInfo.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "         public Object visit(ConstructorDeclaration node)", "signatureAfterChange": "     public Void visit(ConstructorDeclaration node)", "diff": ["+    public Void visit(ConstructorDeclaration node) {", "+      if (node.getConstructorInvocation() == null) {", "+        ConstructorInvocation ci;", "+        ci = new ConstructorInvocation(null, null, true);", "+        node.setConstructorInvocation(ci);", "+      }", "+      ", "+      // Add the outer parameter if needed", "+      ClassInfo dc = getDeclaringClass();", "+      if (!classTree.hasProperty(TREE_VISITED)) {", "+        if (dc != null && !Modifier.isStatic(getModifiers())) {", "+          ReferenceType t = new ReferenceType(dc.getName());", "+          node.getParameters().add(0,", "+                                   new FormalParameter(false, t, \"param$0\"));", "+      }", "+      ", "+      if (dc != null && !Modifier.isStatic(getModifiers())) {", "+        // Add the initialization of the outer instance reference", "+        SimpleAssignExpression sae;", "+        List<IdentifierToken> l1 = new LinkedList<IdentifierToken>();", "+        l1.add(new Identifier(\"this$\" + getNestingLevel()));", "+        List<IdentifierToken> l2 = new LinkedList<IdentifierToken>();", "+        l2.add(new Identifier(\"param$0\"));", "+        sae = new SimpleAssignExpression", "+          (new QualifiedName(l1),", "+           new QualifiedName(l2));", "+        node.getStatements().add(0, sae);", "+      }", "+      ", "+      constructors.add(new TreeConstructorInfo(node,", "+                                               classFinder,", "+                                               TreeClassInfo.this));", "+      return null;", "-         */", "-        public Object visit(ConstructorDeclaration node) {", "-\t    if (node.getConstructorInvocation() == null) {", "-\t\tConstructorInvocation ci;", "-\t\tci = new ConstructorInvocation(null, null, true);", "-\t\tnode.setConstructorInvocation(ci);", "-\t    }", "-", "-\t    // Add the outer parameter if needed", "-\t    ClassInfo dc = getDeclaringClass();", "-\t    if (!classTree.hasProperty(TREE_VISITED)) {", "-\t\tif (dc != null && !Modifier.isStatic(getModifiers())) {", "-\t\t    ReferenceType t = new ReferenceType(dc.getName());", "-\t\t    node.getParameters().add(0,", "-\t\t\t\t\t     new FormalParameter(false, t, \"param$0\"));", "-\t\t}", "-\t    }", "-", "-\t    if (dc != null && !Modifier.isStatic(getModifiers())) {", "-\t\t// Add the initialization of the outer instance reference", "-\t\tSimpleAssignExpression sae;", "-\t\tList l1 = new LinkedList();", "-\t\tl1.add(new Identifier(\"this$\" + getNestingLevel()));", "-\t\tList l2 = new LinkedList();", "-\t\tl2.add(new Identifier(\"param$0\"));", "-\t\tsae = new SimpleAssignExpression", "-\t\t    (new QualifiedName(l1),", "-\t\t     new QualifiedName(l2));", "-\t\tnode.getStatements().add(0, sae);", "-\t    }", "-", "-\t    constructors.add(new TreeConstructorInfo(node,", "-\t\t\t\t\t\t     classFinder,", "-\t\t\t\t\t\t     TreeClassInfo.this));", "-            return null;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c2c886be687ae82e187277079e2978b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/TreeClassInfo.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tMembersVisitor()", "signatureAfterChange": "     MembersVisitor()", "diff": ["+    MembersVisitor() {", "+      if (!isArray()) {", "+        Iterator<Node> it = classTree.getMembers().iterator();", "+        while (it.hasNext()) {", "+          ((Node)it.next()).acceptVisitor(this);", "+        }", "+        ", "+        if (!classTree.hasProperty(TREE_VISITED)) {", "+          ClassInfo dc = getDeclaringClass();", "+          if (dc != null && !Modifier.isStatic(getModifiers())) {", "+            // Add a reference to the outer instance", "+            FieldDeclaration fd;", "+            fd = new FieldDeclaration(Modifier.PUBLIC,", "+                                      new ReferenceType(dc.getName()),", "+                                      \"this$\" + getNestingLevel(),", "+                                      null);", "+            fd.acceptVisitor(this);", "+            classTree.getMembers().add(fd);", "+          }", "+          ", "+          if (constructors.size() == 0 &&", "+              !isInterface() &&", "+              !isPrimitive()) {", "+            ", "+            // Add a default constructor", "+            ConstructorInvocation  ci;", "+            ci = new ConstructorInvocation(null, null, true);", "+            ConstructorDeclaration cd;", "+            cd = new ConstructorDeclaration(Modifier.PUBLIC,", "+                                            classTree.getName(),", "+                                            new LinkedList<FormalParameter>(),", "+                                            new LinkedList<List<IdentifierToken>>(),", "+                                            ci,", "+                                            new LinkedList<Node>());", "+            cd.acceptVisitor(this);", "+            classTree.getMembers().add(cd);", "+          }", "+        }", "+      }", "-\t */", "-\tMembersVisitor() {", "-\t    if (!isArray()) {", "-\t\tIterator it = classTree.getMembers().iterator();", "-\t\twhile (it.hasNext()) {", "-\t\t    ((Node)it.next()).acceptVisitor(this);", "-\t\t}", "-", "-\t\tif (!classTree.hasProperty(TREE_VISITED)) {", "-\t\t    ClassInfo dc = getDeclaringClass();", "-\t\t    if (dc != null && !Modifier.isStatic(getModifiers())) {", "-\t\t\t// Add a reference to the outer instance", "-\t\t\tFieldDeclaration fd;", "-\t\t\tfd = new FieldDeclaration(Modifier.PUBLIC,", "-\t\t\t\t\t\t  new ReferenceType(dc.getName()),", "-\t\t\t\t\t\t  \"this$\" + getNestingLevel(),", "-\t\t\t\t\t\t  null);", "-\t\t\tfd.acceptVisitor(this);", "-\t\t\tclassTree.getMembers().add(fd);", "-\t\t    }", "-", "-\t\t    if (constructors.size() == 0 &&", "-\t\t\t!isInterface() &&", "-\t\t\t!isPrimitive()) {", "-\t\t    ", "-\t\t\t// Add a default constructor", "-\t\t\tConstructorInvocation  ci;", "-\t\t\tci = new ConstructorInvocation(null, null, true);", "-\t\t\tConstructorDeclaration cd;", "-\t\t\tcd = new ConstructorDeclaration(Modifier.PUBLIC,", "-\t\t\t\t\t\t\tclassTree.getName(),", "-\t\t\t\t\t\t\tnew LinkedList(),", "-\t\t\t\t\t\t\tnew LinkedList(),", "-\t\t\t\t\t\t\tci,", "-\t\t\t\t\t\t\tnew LinkedList());", "-\t\t\tcd.acceptVisitor(this);", "-\t\t\tclassTree.getMembers().add(cd);", "-\t\t    }", "-\t\t}", "-\t    }", "-\t}"]}], "num": 28559}
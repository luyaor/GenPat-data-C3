{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e557fd941e41c08db76b5feb409cf2f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e12c3f0dcc876dc47aca1759939686", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/CartesianIterable.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public int size(int bound)", "signatureAfterChange": "      public int size(int bound)", "diff": ["-    // won't overflow -- worst case is 2^31 * 2^31 = 2^62 < 2^63", "-    long result = ((long) IterUtil.sizeOf(_left, bound)) * ((long) IterUtil.sizeOf(_right, bound));", "-    return result <= bound ? (int) result : bound;", "+    int size1 = IterUtil.sizeOf(_left, bound);", "+    if (size1 == 0) { return 0; }", "+    else {", "+      int bound2 = bound / size1;", "+      if (bound2 < Integer.MAX_VALUE) { bound2++; } // division must round up, not down", "+      int size2 = IterUtil.sizeOf(_right, bound2);", "+      // if this overflows, it must be negative:", "+      // size1*size2 <= size1 * ((bound/size1)+1) = bound + size1", "+      int result = size1*size2;", "+      return (result > bound || result < 0) ? bound : result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bac0bb5222150afaf7179595575855cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/iter/DiagonalCartesianIterable.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public int size(int bound)", "signatureAfterChange": "      public int size(int bound)", "diff": ["-    // won't overflow -- worst case is 2^31 * 2^31 = 2^62 < 2^63", "-    long result = ((long) IterUtil.sizeOf(_left, bound)) * ((long) IterUtil.sizeOf(_right, bound));", "-    return result <= bound ? (int) result : bound;", "+    int size1 = IterUtil.sizeOf(_left, bound);", "+    if (size1 == 0) { return 0; }", "+    else {", "+      int bound2 = bound / size1;", "+      if (bound2 < Integer.MAX_VALUE) { bound2++; } // division must round up, not down", "+      int size2 = IterUtil.sizeOf(_right, bound2);", "+      // if this overflows, it must be negative:", "+      // size1*size2 <= size1 * ((bound/size1)+1) = bound + size1", "+      int result = size1*size2;", "+      return (result > bound || result < 0) ? bound : result;", "+    }"]}], "num": 26232}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "341036ff92e4fc0b3b7e09a3afb9f667", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c435010ee77b00df69ed50f3b2f7ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/CustomSystemClassLoader.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> loadClass(String name) throws ClassNotFoundException", "diff": ["-      }else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "+      }", "+      else if(fileName.startsWith(\"edu/rice/cs/util/newjvm/SlaveJVMRunner.class\")){", "-        try {", "-          return defineClass(name, data, 0, data.length);", "-        }", "-        catch (Error t) {", "-          throw t;", "-        }", "+        try { return defineClass(name, data, 0, data.length); }", "+        catch (Error t) { throw t; }", "-    }catch(ClassNotFoundException e){", "-      // the system couldn't find it, so let's try something else", "-    }catch(IOException e){", "-      // the system couldn't find it, so let's try something else", "+    catch(ClassNotFoundException e) { /* the system couldn't find it, so let's try something else */ }", "+    catch(IOException e) { /* the system couldn't find it, so let's try something else */ }", "-    try{", "-      if(_master != null){", "+    try {", "+      if (_master != null) {", "-        }else{", "-          byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "-          try {", "-            return defineClass(name, data, 0, data.length);", "-          }", "-          catch (Error t) {", "-            throw t;", "-          }", "-      }else{", "-        throw new ClassNotFoundException();", "+        else {", "+          byte[] data = FileOps.readStreamAsBytes(resource.openStream());", "+          try { return defineClass(name, data, 0, data.length); }", "+          catch (Error t) { throw t; }", "+        }", "-    }catch(RemoteException e){", "-      throw new ClassNotFoundException();", "-    }catch(IOException e){", "-      throw new ClassNotFoundException();", "+      else throw new ClassNotFoundException();", "+    catch(RemoteException e) { throw new ClassNotFoundException(); }", "+    catch(IOException e) { throw new ClassNotFoundException(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff336ada90828c075f9e7184f90af8b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TopLevelContext.java", "commitBeforeChange": "6b936f625ceea21472b90559f34694154e802e14", "commitAfterChange": "8d43ad99265fb94492eb304c2a9128684a27d753", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public DJClass getTopLevelClass(String name, TypeSystem ts) throws AmbiguousNameException", "signatureAfterChange": "   public DJClass getTopLevelClass(String name, TypeSystem ts) throws AmbiguousNameException", "diff": ["-    if (TextUtil.contains(name, '.')) {", "-      try { return SymbolUtil.wrapClass(_loader.loadClass(name)); }", "-      catch (ClassNotFoundException e) { return null; }", "-      catch (LinkageError e) { return null; }", "-    }", "+    if (TextUtil.contains(name, '.')) { return super.getTopLevelClass(name, ts); }", "-        try { result = SymbolUtil.wrapClass(_loader.loadClass(makeClassName(name))); }", "-        catch (ClassNotFoundException e) { /* ignore -- class is not in the imported/default package */ }", "-        catch (LinkageError e) { /* ignore -- class is not in the imported/default package */ }", "+        result = super.getTopLevelClass(makeClassName(name), ts);", "-          LinkedList<Class<?>> onDemandMatches = new LinkedList<Class<?>>();", "+          LinkedList<String> onDemandNames = new LinkedList<String>();", "-            try { onDemandMatches.add(_loader.loadClass(p + \".\" + name)); }", "-            catch (ClassNotFoundException e2) { /* ignore -- class is not in this package */ }", "-            catch (LinkageError e) { /* ignore -- class is not in this package */ }", "+            String fullName = p + \".\" + name;", "+            if (super.topLevelClassExists(fullName, ts)) { onDemandNames.add(fullName); }", "-          if (onDemandMatches.size() > 1) { throw new AmbiguousNameException(); }", "-          else if (onDemandMatches.size() == 1) { result = SymbolUtil.wrapClass(onDemandMatches.getFirst()); }", "+          if (onDemandNames.size() > 1) { throw new AmbiguousNameException(); }", "+          else if (onDemandNames.size() == 1) { result = super.getTopLevelClass(onDemandNames.get(0), ts); }"]}], "num": 15291}
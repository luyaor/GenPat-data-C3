{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55d20cb0c6e68996b0dd76e0065837d0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39712686c1dd9bdbc930a3fce2d38a13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 441, "methodNumberAfterChange": 441, "signatureBeforeChange": "\r \r   public void forPlusExpression(PlusExpression that)", "signatureAfterChange": "    public void forPlusExpression(PlusExpression that)", "diff": ["-\r", "-  public void forPlusExpression(PlusExpression that) {\r", "-    forPlusExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forPlusExpressionOnly(that);\r", "-  }\r", "+", "+  public void forPlusExpression(PlusExpression that) {", "+    forPlusExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forPlusExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aebf255645c7080fef49dac5f725de", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 457, "methodNumberAfterChange": 457, "signatureBeforeChange": "\r \r   public void forCastExpression(CastExpression that)", "signatureAfterChange": "    public void forCastExpression(CastExpression that)", "diff": ["-\r", "-  public void forCastExpression(CastExpression that) {\r", "-    forCastExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    that.getValue().visit(this);\r", "-    forCastExpressionOnly(that);\r", "-  }\r", "+", "+  public void forCastExpression(CastExpression that) {", "+    forCastExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    that.getValue().visit(this);", "+    forCastExpressionOnly(that);", "+  }"]}], "num": 16249}
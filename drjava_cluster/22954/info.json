{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fa4f6c9694c374d641f740cd77e5253", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c356e730419c1d7344347eeaf9fbc1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "e70766c672e058ab37ae5757bf5008b997a8ff63", "commitAfterChange": "5089bb7a50fb7750f9e599079bf91522d8072d34", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void declareMemberStaticImport(String member)", "signatureAfterChange": "     public void declareMemberStaticImport(String member)", "diff": ["-    //First, check for all static inner classes by the given name", "+    String name = member.substring(i+1,member.length());", "+    ", "+    ", "+    //First, check for a static inner class by the given name", "+    //**//Note, all static inner classes imported with \"import static\" have to be added to the list twice, once with a '.' and once with a '$'. ", "+    //The first class in the list which successfully works is the one used when the user actually instantiates the class, and both are needed because ", "+    //Different methods require different formats, and having both can't hurt anything. Any of the methods that use the list of classes try and catch through the", "+    //list until they come across a class that fits", "+      try {", "+        Class.forName(member, true, classLoader);", "+      } catch (ClassNotFoundException cnfe) {", "+        findInnerClass(member);", "+      }", "-      Field f = surroundingClass.getField(member);", "+      Field f = surroundingClass.getField(name);", "-        if(isPublicAndStatic(methodArray[j].getModifiers())) {", "+        if(isPublicAndStatic(methodArray[j].getModifiers()) && methodArray[j].getName().equals(name)) {", "-    if(foundSecurityException || ! foundSomethingToImport)", "-      throw new RuntimeException(\"No public members of the name \" + member);", "+    if(foundSomethingToImport)", "+      return;", "+    ", "+    throw new RuntimeException(\"No public members of the name \" + member);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86831ad75368dcafc95ae534d6cc0e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "b432c2a5363ca609f111d7dec3ae5ed814c173ea", "commitAfterChange": "9d11311a2c8fe69828f38bf3b0da9037a3e51914", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "signatureAfterChange": "   public Class lookupClass(String cname, String ccname)     throws ClassNotFoundException", "diff": ["+        ", "-    ", "-        return Class.forName(s, false, classLoader);", "+        try", "+        {", "+          return Class.forName(s, false, classLoader);", "+        } catch (ClassNotFoundException e) {", "+          return findInnerClass(s);         ", "+        }        ", "+     ", "+      } catch (ClassNotFoundException e) {", "+      }", "+    }", "+    //Now look through classes staticly imported with .*; for a static inner class ", "+    it = importOnDemandStaticClauses.iterator();", "+    while (it.hasNext()) {", "+      String s = it.next();", "+      try {", "+        return Class.forName(s+\"$\"+str, false, classLoader);"]}], "num": 22954}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cec5cc32797e3a6db4e8481dff43c7d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d4eae76c559bd09fae0be9d0c322487", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 56, "signatureBeforeChange": "   synchronized void reachedBreakpoint(BreakpointRequest request)", "signatureAfterChange": "   synchronized void reachedBreakpoint(BreakpointRequest request)", "diff": ["-   */", "-  synchronized void reachedBreakpoint(BreakpointRequest request) {", "-//    Utilities.showDebug(\"JPDADebugger.reachedBreakPoint(\" + request + \") called\");", "-    Object property = request.getProperty(\"debugAction\");", "-    if ( (property != null) && (property instanceof JPDABreakpoint) ) {", "-      final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "-      printMessage(\"Breakpoint hit in class \" + breakpoint.getClassName() + \"  [line \" + breakpoint.getLineNumber() + \"]\");", "-", "-      Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointReached(breakpoint); } });", "-    }", "-    else {", "-      // A breakpoint we didn't set??", "-      _log(\"Reached a breakpoint without a debugAction property: \" + request);", "-    }", "-  }", "+   */", "+  synchronized void reachedBreakpoint(BreakpointRequest request) {", "+//    Utilities.showDebug(\"JPDADebugger.reachedBreakPoint(\" + request + \") called\");", "+    Object property = request.getProperty(\"debugAction\");", "+    if ( (property != null) && (property instanceof JPDABreakpoint) ) {", "+      final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "+      printMessage(\"Breakpoint hit in class \" + breakpoint.getClassName() + \"  [line \" + breakpoint.getLineNumber() + \"]\");", "+", "+      Utilities.invokeLater(new Runnable() { public void run() { _notifier.breakpointReached(breakpoint); } });", "+    }", "+    else {", "+      // A breakpoint we didn't set??", "+      error.log(\"Reached a breakpoint without a debugAction property: \" + request);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d355272bdea2731b70baaf803e18948", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "bf2319a0fd4ff0da05d171cf995d395154267897", "commitAfterChange": "ce944bab12f670cf565ac442d0f81c8cbf5e4ad0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void testMatchBraceText()", "signatureAfterChange": "   public void testMatchBraceText()", "diff": ["-    final DefinitionsPane definitions = _frame.getCurrentDefPane();", "-    final OpenDefinitionsDocument doc = definitions.getOpenDefDocument();", "+    final DefinitionsPane defPane = _frame.getCurrentDefPane();", "+    final OpenDefinitionsDocument doc = defPane.getOpenDefDocument();", "-        definitions.setCaretPosition(4); ", "+        defPane.setCaretPosition(4); ", "-    Utilities.invokeAndWait(new Runnable() { public void run() {  definitions.setCaretPosition(115); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() {  defPane.setCaretPosition(115); } });", "-    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(102);  } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.setCaretPosition(102);  } });", "-    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(119); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.setCaretPosition(119); } });", "-    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(121); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.setCaretPosition(121); } });", "-    Utilities.invokeAndWait(new Runnable() { public void run() { definitions.setCaretPosition(122); } });", "+    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.setCaretPosition(122); } });"]}], "num": 31148}
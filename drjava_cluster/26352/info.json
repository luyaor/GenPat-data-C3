{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "436d52adbc2289eb650117885862d165", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88dd8d3f0a6fa76de53a1ef97e4f42c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": "               public void testForComplexAnonymousClassInstantiation()", "signatureAfterChange": "          public void testForComplexAnonymousClassInstantiation()", "diff": ["-    ", "-     AnonymousClassInstantiation basic = new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                                                                new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"bob\")),", "-                                                                                new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                                                        new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+     AnonymousClassInstantiation basic = ", "+       new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                      new Word(SourceInfo.NO_INFO, \"bob\")),", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-     MethodData cdObj = new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "+     MethodData cdObj = ", "+       new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "-     ", "-     //if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "-     try {", "-       basic.visit(_etc);", "-       fail(\"Should have thrown runtime exception\");", "-     }", "-     catch(RuntimeException e) {", "-       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "-     }", "+ ", "+     /* The code base now interprets the following situation as nesting an anonymous class in an anonymous class and ", "+      * classifies it as a LL syntax error. */", "+//     // if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "+//     try {", "+//       basic.visit(_etc);", "+//       fail(\"Should have thrown runtime exception\");", "+//     }", "+//     catch(RuntimeException e) {", "+//       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "+//     }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3f6ebe829c750912b84d8ed8593e5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "       public void testForSimpleAnonymousClassInstantiation()", "signatureAfterChange": "       public void testForSimpleAnonymousClassInstantiation()", "diff": ["-     MethodData cdObj = new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "+     MethodData cdObj = ", "+       new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "-     //if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "-     try {", "-       basic.visit(_etc);", "-       fail(\"Should have thrown runtime exception\");", "-     }", "-     catch(RuntimeException e) {", "-       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "-     }", "+     /* This erroneous configuration now throws an error message asserting anonymous inner classes cannot be nested in LL. */", "+//     // if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "+//     try {", "+//       basic.visit(_etc);", "+//       fail(\"Should have thrown runtime exception\");", "+//     }", "+//     catch(RuntimeException e) {", "+//       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "+//     }"]}], "num": 26352}
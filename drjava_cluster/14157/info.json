{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8367f8b388d0bb1f736033a5105eaca3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a040b661d87aa50c599d0a2708c161", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public static Runnable1<Object> promote(final Runnable r)", "signatureAfterChange": "   public static GeneralRunnable promote(Runnable r)", "diff": ["-  /** @return A {@code Runnable1} equivalent to {@code r} with an ignored argument */", "-  public static Runnable1<Object> promote(final Runnable r) {", "-    return new Runnable1<Object>() {", "-      public void run(Object arg) { r.run(); }", "-    };", "+  /** Create a {@code GeneralRunnable} equivalent to {@code r} that ignores any arguments. */", "+  public static GeneralRunnable promote(Runnable r) { return new PromotedGeneralRunnable(r); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa31b51ee6c765bc370314b9c1247d5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public static <T1, T2, T3>      Runnable4<T1, T2, T3, Object> promote(final Runnable3<? super T1, ? super T2, ? super T3> r)", "signatureAfterChange": "   public static <T1, T2, T3> Runnable4<T1, T2, T3, Object> promote(Runnable3<? super T1, ? super T2, ? super T3> r)", "diff": ["-  /** @return A {@code Runnable4} equivalent to {@code r} with an additional, ignored argument */", "-  public static <T1, T2, T3> ", "-    Runnable4<T1, T2, T3, Object> promote(final Runnable3<? super T1, ? super T2, ? super T3> r) {", "-    return new Runnable4<T1, T2, T3, Object>() {", "-      public void run(T1 arg1, T2 arg2, T3 arg3, Object arg4) { r.run(arg1, arg2, arg3); }", "-    };", "+  /** Create a {@code Runnable4} equivalent to {@code r} with an additional, ignored argument. */", "+  public static <T1, T2, T3> Runnable4<T1, T2, T3, Object> promote(Runnable3<? super T1, ? super T2, ? super T3> r) {", "+    return new PromotedRunnable4<T1, T2, T3>(r);", "+  }"]}], "num": 14157}
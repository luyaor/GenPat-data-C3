{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae5ebc21639b864168a96bef98f0ba72", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ba07989cb03c31c78339b7cd1cfd6e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected static Constructor selectTheMostSpecificConstructor(List<Constructor> list)", "signatureAfterChange": "   protected static Constructor selectTheMostSpecificConstructor(List<Constructor> list)", "diff": ["-      Class[] a1 = best.getParameterTypes();", "-      Class[] a2 = curr.getParameterTypes();", "+      Class<?>[] a1 = best.getParameterTypes();", "+      Class<?>[] a2 = curr.getParameterTypes();", "-          Class c1 = best.getDeclaringClass();", "-          Class c2 = curr.getDeclaringClass();", "+          Class<?> c1 = best.getDeclaringClass();", "+          Class<?> c2 = curr.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1944708dfb5bf6a40b325cadcd0ef8e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "    private PageChangerUpdater createPageChanger()", "signatureAfterChange": "    private PageChangerUpdater createPageChanger()", "diff": ["-      Class spinnerClass = Class.forName(\"javax.swing.JSpinner\");", "+      Class<?> spinnerClass = Class.forName(\"javax.swing.JSpinner\");", "-      Class modelClass = model.getClass();", "-      Class[] ca = new Class[] {Comparable.class};", "+      Class<?> modelClass = model.getClass();", "+      Class<?>[] ca = new Class<?>[] {Comparable.class};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20737b07142414552ae42cac45db9537", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "7d7f71637ac82cabd526a44e6c766574f76fc311", "commitAfterChange": "33c99bc453e2b8a224944d7334183adb0010fc32", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected ImportationManager(ImportationManager im)", "signatureAfterChange": "   protected ImportationManager(ImportationManager im)", "diff": ["+   */", "+  protected ImportationManager(ImportationManager im) {", "+    importOnDemandClauses     =", "+      (List<String>)((LinkedList<String>)im.importOnDemandClauses).clone();", "+    singleTypeImportClauses   =", "+      (List<String>)((LinkedList<String>)im.singleTypeImportClauses).clone();", "+    currentPackage            = im.currentPackage;", "+    classLoader               = im.classLoader;", "+  }", "-     */", "-    protected ImportationManager(ImportationManager im) {", "-\timportOnDemandClauses     =", "-\t    (List)((LinkedList)im.importOnDemandClauses).clone();", "-\tsingleTypeImportClauses   =", "-\t    (List)((LinkedList)im.singleTypeImportClauses).clone();", "-\tcurrentPackage            = im.currentPackage;", "-\tclassLoader               = im.classLoader;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332e595bf8288e646b2a53dc3ef22135", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "   public Class visit(AddExpression node)", "signatureAfterChange": "   public Class<?> visit(AddExpression node)", "diff": ["-  public Class visit(AddExpression node) {", "+  public Class<?> visit(AddExpression node) {", "-    Class lc = ln.acceptVisitor(this);", "-    Class rc = rn.acceptVisitor(this);", "-    Class c  = String.class;", "+    Class<?> lc = ln.acceptVisitor(this);", "+    Class<?> rc = rn.acceptVisitor(this);", "+    Class<?> c  = String.class;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "453b8da012e111c89eddefd22ad76cee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public Class visit(ArrayAllocation node)", "signatureAfterChange": "   public Class<?> visit(ArrayAllocation node)", "diff": ["-  public Class visit(ArrayAllocation node) {", "+  public Class<?> visit(ArrayAllocation node) {", "-      Class c = exp.acceptVisitor(this);", "+      Class<?> c = exp.acceptVisitor(this);", "-    Class c = node.getCreationType().acceptVisitor(this);", "+    Class<?> c = node.getCreationType().acceptVisitor(this);", "-    Class ac = Array.newInstance(c, new int[node.getDimension()]).getClass();", "+    Class<?> ac = Array.newInstance(c, new int[node.getDimension()]).getClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "469e1fc839383bddbc1751ae97eff8bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu)", "signatureAfterChange": "   public static boolean hasVarArgsCompatibleSignatures(Class<?>[] a1, Class<?>[] a2, TigerUsage tu)", "diff": ["-  public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu) {", "+  public static boolean hasVarArgsCompatibleSignatures(Class<?>[] a1, Class<?>[] a2, TigerUsage tu) {", "-    Class lastElt1 = a1[lastIdx1];", "+    Class<?> lastElt1 = a1[lastIdx1];", "-      Class varArgsType = lastElt1.getComponentType(); // Get the element type of the array", "+      Class<?> varArgsType = lastElt1.getComponentType(); // Get the element type of the array"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b8e06bc7b3274934e893dea033938b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "     public Object visit(ConstructorDeclaration node)", "signatureAfterChange": "     public Object visit(ConstructorDeclaration node)", "diff": ["-      LinkedList parameters = new LinkedList();", "+      LinkedList<Node> parameters = new LinkedList<Node>();", "-      LinkedList statements = new LinkedList();", "+      LinkedList<Node> statements = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49c5e12ebeecacae1f717b89386d0f72", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/print/DrJavaBook.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private void setUpPagePrinters(String text)", "signatureAfterChange": "   private void setUpPagePrinters(String text)", "diff": ["-    HashMap map = new HashMap(); // Add parameterization <TextAttribute, Object>. ", "-//    HashMap map = new HashMap();", "+    HashMap<TextAttribute,Object> map = new HashMap<TextAttribute,Object>(); // Added parameterization <TextAttribute, Object>. ", "+//  HashMap map = new HashMap();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5089110b327d8edb1c22f3eba5f20057", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   protected Object[] interpretArguments(Class<?> c,                                         ConstructorParametersDescriptor cpd,                                         Object[] args)", "signatureAfterChange": "   protected Object[] interpretArguments(Class<?> c,                                         ConstructorParametersDescriptor cpd,                                         Object[] args)", "diff": ["-      Context ctx = new StaticContext(this, c, cpd.importationManager);", "+      Context<Type> ctx = new StaticContext<Type>(this, c, cpd.importationManager);", "-      NameVisitor nv = new NameVisitor(ctx,checkVisitorContext);", "+      NameVisitor nv = new NameVisitor(ctx, checkVisitorContext);", "-    Context ctx = new StaticContext(this, c, cpd.variables);", "+    Context<Object> ctx = new StaticContext<Object>(this, c, cpd.variables);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70ad4136fc818c8a09873464c797ea8f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "   protected Class visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "   protected Class<?> visitNumericExpression(BinaryExpression node, String s)", "diff": ["-  protected Class visitNumericExpression(BinaryExpression node, String s) {", "+  protected Class<?> visitNumericExpression(BinaryExpression node, String s) {", "-    Class lc = NodeProperties.getType(leftExp);", "-    Class rc = NodeProperties.getType(rightExp);", "-    Class c  = null;", "+    Class<?> lc = NodeProperties.getType(leftExp);", "+    Class<?> rc = NodeProperties.getType(rightExp);", "+    Class<?> c  = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75029eea587a78dc07c6822811df774d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "     public Object visit(InnerClassAllocation node)", "signatureAfterChange": "     public Object visit(InnerClassAllocation node)", "diff": ["-      LinkedList arguments = null;", "+      LinkedList<Expression> arguments = null;", "-        arguments = new LinkedList();", "+        arguments = new LinkedList<Expression>();", "-      LinkedList members = new LinkedList();", "+      LinkedList<Node> members = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7510fe8e0390be5befbda3dfe1243148", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   protected void loadClass(String name) throws ClassNotFoundException", "signatureAfterChange": "   protected void loadClass(String name) throws ClassNotFoundException", "diff": ["-      Context ctx = new GlobalContext(interpreter, classInfoLoader);", "+      Context<Object> ctx = new GlobalContext<Object>(interpreter, classInfoLoader);", "-        Context ctx = new GlobalContext(interpreter, classInfoLoader);", "+        Context<Object> ctx = new GlobalContext<Object>(interpreter, classInfoLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82094104e5401c506f7753b71e10e8dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   protected static Method selectTheMostSpecificMethod(List<Method> list)", "signatureAfterChange": "   protected static Method selectTheMostSpecificMethod(List<Method> list)", "diff": ["-      Class[] a1 = best.getParameterTypes();", "-      Class[] a2 = curr.getParameterTypes();", "+      Class<?>[] a1 = best.getParameterTypes();", "+      Class<?>[] a2 = curr.getParameterTypes();", "-          Class c1 = best.getDeclaringClass();", "-          Class c2 = curr.getDeclaringClass();", "+          Class<?> c1 = best.getDeclaringClass();", "+          Class<?> c2 = curr.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f5da3f3f27569ee654587d18bece84e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/print/DrJavaBook.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private void setUpPagePrinters(String text)", "signatureAfterChange": "   private void setUpPagePrinters(String text)", "diff": ["-//    HashMap<TextAttribute, Object> map = new HashMap<TextAttribute, Object>();", "-    HashMap map = new HashMap();", "+    HashMap<TextAttribute, Object> map = new HashMap<TextAttribute, Object>();", "+//    HashMap map = new HashMap();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9790ce9c0f7256addd4ada4717deeadf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "   private void checkCastStaticRules(Class tc, Class ec, CastExpression castExp)", "signatureAfterChange": "   private void checkCastStaticRules(Class<?> tc, Class<?> ec, CastExpression castExp)", "diff": ["-  private void checkCastStaticRules(Class tc, Class ec, CastExpression castExp) {", "+  private void checkCastStaticRules(Class<?> tc, Class<?> ec, CastExpression castExp) {", "-            Class tec = tc.getComponentType();", "-            Class eec = ec.getComponentType();", "+            Class<?> tec = tc.getComponentType();", "+            Class<?> eec = ec.getComponentType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd910b9545fe195ce5ac8dfd257181c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/print/DrJavaBook.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   private void setUpPagePrinters(String text)", "signatureAfterChange": "   private void setUpPagePrinters(String text)", "diff": ["-    HashMap map = new HashMap(); // Add parameterization <TextAttribute, Object>. ", "-//    HashMap map = new HashMap();", "+    HashMap<TextAttribute,Object> map = new HashMap<TextAttribute,Object>(); // Added parameterization <TextAttribute, Object>. ", "+//  HashMap map = new HashMap();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a79a4fafde17394f363e7aee7ab6a580", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "     public Object visit(ClassAllocation node)", "signatureAfterChange": "     public Object visit(ClassAllocation node)", "diff": ["-      LinkedList arguments = null;", "+      LinkedList<Expression> arguments = null;", "-        arguments = new LinkedList();", "+        arguments = new LinkedList<Expression>();", "-      LinkedList members = new LinkedList();", "+      LinkedList<Node> members = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd53a51b4d72d58ee141ba78bd5d0c91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     protected ArrayInitializer createClassArrayInitializer()", "signatureAfterChange": "   protected ArrayInitializer createClassArrayInitializer()", "diff": ["+   */", "+  protected ArrayInitializer createClassArrayInitializer() {", "+    List<Expression> cells = new LinkedList<Expression>();", "+    ArrayInitializer cell;", "+    ", "+    Type tp = new ReferenceType(Object.class.getName());", "+    Map m = getConstants();", "+    Iterator it = m.keySet().iterator();", "+    while (it.hasNext()) {", "+      String s = (String)it.next();", "+      List<Expression> pair = new LinkedList<Expression>();", "+      pair.add(new StringLiteral('\\\"' + s + '\\\"'));", "+      Class c = (Class)m.get(s);", "+      pair.add(new TypeExpression(TreeUtilities.classToType(c)));", "+      ", "+      cell = new ArrayInitializer(pair);", "+      cell.setElementType(tp);", "+      cells.add(cell);", "+    }", "+    tp = new ArrayType(tp, 1);", "+    ArrayInitializer ai = new ArrayInitializer(cells);", "+    ai.setElementType(tp);", "+    return ai;", "+  }", "-     */", "-    protected ArrayInitializer createClassArrayInitializer() {", "-        List cells = new LinkedList();", "- ArrayInitializer cell;", "-", "- Type tp = new ReferenceType(Object.class.getName());", "- Map m = getConstants();", "- Iterator it = m.keySet().iterator();", "- while (it.hasNext()) {", "-            String s = (String)it.next();", "-            List pair = new LinkedList();", "-     pair.add(new StringLiteral('\\\"' + s + '\\\"'));", "-            Class c = (Class)m.get(s);", "-            pair.add(new TypeExpression(TreeUtilities.classToType(c)));", "-     ", "-     cell = new ArrayInitializer(pair);", "-     cell.setElementType(tp);", "-     cells.add(cell);", "- }", "-        tp = new ArrayType(tp, 1);", "-        ArrayInitializer ai = new ArrayInitializer(cells);", "-        ai.setElementType(tp);", "-        return ai;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd780c961bbda398d059ce164ac624c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "   private Class visitBitwiseExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitBitwiseExpression(BinaryExpression node)", "diff": ["-  private Class visitBitwiseExpression(BinaryExpression node) {", "+  private Class<?> visitBitwiseExpression(BinaryExpression node) {", "-    Class lc = leftExp.acceptVisitor(this);", "-    Class rc = rightExp.acceptVisitor(this);", "-    Class c = null;", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);", "+    Class<?> c = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f1fef65f81450e8cadff5c2593db46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Object visit(ForStatement node)", "signatureAfterChange": "   public Object visit(ForStatement node)", "diff": ["-    LinkedList init = null;", "+    LinkedList<Node> init = null;", "-      init = new LinkedList();", "+      init = new LinkedList<Node>();", "-    LinkedList updt = null;", "+    LinkedList<Node> updt = null;", "-      updt = new LinkedList();", "+      updt = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c91f52411eea22f892fccc298a82f617", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker15.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Class visit(ForEachStatement node)", "signatureAfterChange": "   public Class<?> visit(ForEachStatement node)", "diff": ["-  public Class visit(ForEachStatement node){", "+  public Class<?> visit(ForEachStatement node){", "-    Class paramTypeClass;", "-    Class collTypeClass;", "+    Class<?> paramTypeClass;", "+    Class<?> collTypeClass;", "-    Class component;", "+    Class<?> component;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7c3305d2a0ed243d42b5158dfa95cb5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "   private Class visitShiftExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitShiftExpression(BinaryExpression node)", "diff": ["-  private Class visitShiftExpression(BinaryExpression node) {", "+  private Class<?> visitShiftExpression(BinaryExpression node) {", "-    Class lc = leftExp.acceptVisitor(this);", "-    Class rc = rightExp.acceptVisitor(this);", "-    Class c  = null;", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);", "+    Class<?> c  = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de40118a6fed32139c65a002b709e5a2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   synchronized Vector<ReferenceType> getReferenceTypes(String className,                                                        int lineNumber)", "signatureAfterChange": "   synchronized Vector<ReferenceType> getReferenceTypes(String className,                                                        int lineNumber)", "diff": ["-    List classes;", "+    List<ReferenceType> classes;  ", "-      classes = _vm.classesByName(className);", "+      classes = _vm.classesByName(className);  // JDK 1.5 will eliminate this type warning", "-        List lines = new LinkedList();", "+        List<Location> lines = new LinkedList<Location>();", "-          lines = ref.locationsOfLine(lineNumber);", "+          lines = ref.locationsOfLine(lineNumber); // JDK 1.5 will eliminate this type warning", "-          List innerRefs = ref.nestedTypes();", "+          List<ThreadReference> innerRefs = ref.nestedTypes();  // JDK 1.5 will eliminate this type warning", "-              lines = currRef.locationsOfLine(lineNumber);", "+              lines = currRef.locationsOfLine(lineNumber);  // JDK 1.5 will eliminate this type warning"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47dd37688f43180c9e312cde39b7216", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected static Method selectTheMostSpecificBoxingMethod(List<Method> list)", "signatureAfterChange": "   protected static Method selectTheMostSpecificBoxingMethod(List<Method> list)", "diff": ["-      Class[] a1 = best.getParameterTypes();", "-      Class[] a2 = curr.getParameterTypes();", "+      Class<?>[] a1 = best.getParameterTypes();", "+      Class<?>[] a2 = curr.getParameterTypes();", "-          Class c1 = best.getDeclaringClass();", "-          Class c2 = curr.getDeclaringClass();", "+          Class<?> c1 = best.getDeclaringClass();", "+          Class<?> c2 = curr.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f92a2b0fc5753a3ae326c63d5c904fe1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected static Constructor selectTheMostSpecificBoxingConstructor(List<Constructor> list)", "signatureAfterChange": "   protected static Constructor selectTheMostSpecificBoxingConstructor(List<Constructor> list)", "diff": ["-      Class[] a1 = best.getParameterTypes();", "-      Class[] a2 = curr.getParameterTypes();", "+      Class<?>[] a1 = best.getParameterTypes();", "+      Class<?>[] a2 = curr.getParameterTypes();", "-          Class c1 = best.getDeclaringClass();", "-          Class c2 = curr.getDeclaringClass();", "+          Class<?> c1 = best.getDeclaringClass();", "+          Class<?> c2 = curr.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4a78545c1853c4143ecc931dd99681", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public boolean selectDocumentAt(int x, int y)", "signatureAfterChange": "   public boolean selectDocumentAt(int x, int y)", "diff": ["-      if (node instanceof LeafNode) {", "+      if (node instanceof LeafNode<?>) {", "-      else if (node instanceof InnerNode) {", "+      else if (node instanceof InnerNode<?,?>) {", "-      else if (node instanceof RootNode) {", "+      else if (node instanceof RootNode<?>) {"]}], "num": 25709}
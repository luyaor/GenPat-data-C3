{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95b9b81c124a797b1f435f32ac7379d7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199e10873f06a69b84846243a0cb12c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Command4<T1, T2, T3, T4>     compose(final Command4<? super T1, ? super T2, ? super T3, ? super T4> c1,              final Command4<? super T1, ? super T2, ? super T3, ? super T4> c2)", "signatureAfterChange": "   public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4>     compose(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r1,              final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r2)", "diff": ["-  /** @return  A command that executes {@code c1} followed by {@code c2} with the same input */", "-  public static <T1, T2, T3, T4> Command4<T1, T2, T3, T4>", "-    compose(final Command4<? super T1, ? super T2, ? super T3, ? super T4> c1, ", "-            final Command4<? super T1, ? super T2, ? super T3, ? super T4> c2) {", "-    return new Command4<T1, T2, T3, T4>() {", "+  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "+  public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4>", "+    compose(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r1, ", "+            final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r2) {", "+    return new Runnable4<T1, T2, T3, T4>() {", "-        c1.run(a1, a2, a3, a4); c2.run(a1, a2, a3, a4);", "+        r1.run(a1, a2, a3, a4); r2.run(a1, a2, a3, a4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "602dd09d3f4af65378293e4ef9ae6ba6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public static <T1, T2> Command2<T1, T2> compose(final Command2<? super T1, ? super T2> c1,                                                    final Command2<? super T1, ? super T2> c2)", "signatureAfterChange": "   public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1,                                                     final Runnable2<? super T1, ? super T2> r2)", "diff": ["-  /** @return  A command that executes {@code c1} followed by {@code c2} with the same input */", "-  public static <T1, T2> Command2<T1, T2> compose(final Command2<? super T1, ? super T2> c1, ", "-                                                  final Command2<? super T1, ? super T2> c2) { ", "-    return new Command2<T1, T2>() {", "-      public void run(T1 arg1, T2 arg2) { c1.run(arg1, arg2); c2.run(arg1, arg2); }", "+  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "+  public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1, ", "+                                                   final Runnable2<? super T1, ? super T2> r2) { ", "+    return new Runnable2<T1, T2>() {", "+      public void run(T1 arg1, T2 arg2) { r1.run(arg1, arg2); r2.run(arg1, arg2); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8791d12020574031ea05129c64d01493", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public static <T1, T2, T3> Command3<T1, T2, T3>      compose(final Command3<? super T1, ? super T2, ? super T3> c1,              final Command3<? super T1, ? super T2, ? super T3> c2)", "signatureAfterChange": "   public static <T1, T2, T3> Runnable3<T1, T2, T3>      compose(final Runnable3<? super T1, ? super T2, ? super T3> r1,              final Runnable3<? super T1, ? super T2, ? super T3> r2)", "diff": ["-  /** @return  A command that executes {@code c1} followed by {@code c2} with the same input */", "-  public static <T1, T2, T3> Command3<T1, T2, T3> ", "-    compose(final Command3<? super T1, ? super T2, ? super T3> c1, ", "-            final Command3<? super T1, ? super T2, ? super T3> c2) {", "-    return new Command3<T1, T2, T3>() {", "-      public void run(T1 a1, T2 a2, T3 a3) { c1.run(a1, a2, a3); c2.run(a1, a2, a3); }", "+  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "+  public static <T1, T2, T3> Runnable3<T1, T2, T3> ", "+    compose(final Runnable3<? super T1, ? super T2, ? super T3> r1, ", "+            final Runnable3<? super T1, ? super T2, ? super T3> r2) {", "+    return new Runnable3<T1, T2, T3>() {", "+      public void run(T1 a1, T2 a2, T3 a3) { r1.run(a1, a2, a3); r2.run(a1, a2, a3); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd4fd176fed029089ed34bbf8ce14cc1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 132, "signatureBeforeChange": "   public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1,                                                     final Runnable2<? super T1, ? super T2> r2)", "signatureAfterChange": "   public static <T1, T2> Runnable2<T1, T2> compose(Runnable2<? super T1, ? super T2> r1,                                                     Runnable2<? super T1, ? super T2> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1, ", "-                                                   final Runnable2<? super T1, ? super T2> r2) { ", "-    return new Runnable2<T1, T2>() {", "-      public void run(T1 arg1, T2 arg2) { r1.run(arg1, arg2); r2.run(arg1, arg2); }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T1, T2> Runnable2<T1, T2> compose(Runnable2<? super T1, ? super T2> r1, ", "+                                                   Runnable2<? super T1, ? super T2> r2) { ", "+    return new ComposedRunnable2<T1, T2>(IterUtil.<Runnable2<? super T1, ? super T2>>make(r1, r2));", "+  }"]}], "num": 4121}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89492e22d1226317a1b31faacfd70472", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90eae1c4c07ebe86b4964bb9c491934d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 71, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter() throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ArrayReference _mirrorArray(String elementClass, List<? extends ObjectReference> elts,                                       ThreadReference thread, List<ObjectReference> toRelease)     throws DebugException", "diff": ["-  /** Assumes that this method is only called immedeately after suspending a thread. */", "-  private ObjectReference _getDebugInterpreter() throws InvalidTypeException, ClassNotLoadedException,", "-    IncompatibleThreadStateException, InvocationException, DebugException {", "-    ", "-    ThreadReference threadRef = _suspendedThreads.peek();", "-    String interpreterName = _getUniqueThreadName(threadRef);", "-    return _getDebugInterpreter(interpreterName, threadRef);", "-  }", "+  /** Create an array of the given elements in the VM and prevent it from being garbage collected. */", "+  private ArrayReference _mirrorArray(String elementClass, List<? extends ObjectReference> elts,", "+                                      ThreadReference thread, List<ObjectReference> toRelease)", "+    throws DebugException {", "+    ClassType arrayC = (ClassType) _getClass(\"java.lang.reflect.Array\");", "+    ReferenceType elementC = _getClass(elementClass);", "+    for (int tries = 0; tries < OBJECT_COLLECTED_TRIES; tries++) {", "+      try {", "+        ArrayReference result =", "+          (ArrayReference) _invokeStaticMethod(thread, arrayC, \"newInstance\", NEW_INSTANCE_SIG,", "+                                               elementC.classObject(), _vm.mirrorOf(elts.size()));", "+        result.disableCollection();", "+        if (!result.isCollected()) {", "+          toRelease.add(result);", "+          try { result.setValues(elts); }", "+          catch (InvalidTypeException e) { throw new DebugException(e); }", "+          catch (ClassNotLoadedException e) { throw new DebugException(e); }", "+          return result;", "+        }", "+      }", "+      catch (ObjectCollectedException e) { /* try again */ }", "+    }", "+    throw new DebugException(\"Ran out of OBJECT_COLLECTED_TRIES\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "975ad0670fd4bbc77c37a2f846e9b3d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "bd0c5f6fb57379a8699a4cf01148b0c907e9220d", "commitAfterChange": "1fded97fdeda420f1a00832b34fbad92ca8d6567", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private void _startNameServiceIfNeeded()", "signatureAfterChange": "   private synchronized void _startNameServiceIfNeeded()", "diff": ["-  private void _startNameServiceIfNeeded() {", "-      Naming.list(\"\");", "-    catch (Exception e) {", "-      // Get a safe port to use.", "-      //  If each copy of DrJava used the same port (or the same port as", "-      //  another program's rmiregistry), then when the previous copy/program", "-      //  quit, we would lose our registry and not be able to reset!", "+   */", "+  private synchronized void _startNameServiceIfNeeded() {", "+    Exception exception = null;", "+    boolean success = false;", "+    for (int i=0; i < 2; i++) {", "-        ServerSocket socket = new ServerSocket(0);", "-        _rmiPort = socket.getLocalPort();", "-        socket.close();", "-        LocateRegistry.createRegistry(_rmiPort);", "+        // See if our registry already exists", "+        Naming.list(\"//127.0.0.1:\" + _rmiPort);", "+        //DrJava.consoleOut().println(\"registry exists\");", "+        success = true;", "+        break;", "-      catch (Exception e2) {", "-        throw new UnexpectedException(new RuntimeException(", "-          \"Could not find a usable RMI Port: \" + e2.toString()));", "+      catch (Exception e) {", "+        // Didn't already exist, so try to create it", "+        //e.printStackTrace(DrJava.consoleOut());", "+        try {", "+          //DrJava.consoleOut().println(\"trying to create registry on port: \" + _rmiPort);", "+          LocateRegistry.createRegistry(_rmiPort);", "+        }", "+        catch (Exception e2) {", "+          // Failed to create.  Try again on another port", "+          _rmiPort = _generateSafeRMIPort();", "+          exception = e2;", "+        }", "-      //DrJava.consoleOut().println(\"Created rmiregistry on port: \" + _rmiPort);", "+    }", "+    if (!success) {", "+      throw new UnexpectedException(new RuntimeException(", "+          \"Could not find a usable RMI Port: \" + exception.toString()));"]}], "num": 4212}
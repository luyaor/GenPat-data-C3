{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6252eec9b9d289b274a04a77fcef9034", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3cef9bff05488d97ef7012493f24a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 20, "signatureBeforeChange": "          public void testForFormalParameterDoFirst()", "signatureAfterChange": "          public void testForFormalParameterDoFirst()", "diff": ["-      assertEquals(\"should be one error\", 1, errors.size());", "-      assertEquals(\"The error message should be correct for a final parameter.\", ", "-                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", ", "-                   errors.getLast().getFirst());", "+      assertEquals(\"should be no errors\", 0, errors.size());", "+//      assertEquals(\"The error message should be correct for a final parameter.\", ", "+//                   \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", ", "+//                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "492bc61353480bbad59fb5f1328a3747", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilitiesTest.java", "commitBeforeChange": "6730b2e413a99565d4307ad95e1ac5e98eebdf83", "commitAfterChange": "e174f3f9eb19ef8a7530f2c7ad04a839e38770be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testIsVarArgs()", "signatureAfterChange": "   public void testIsVarArgs()", "diff": ["-      //Don't run test if the user is only using 1.4", "-      if(TigerUtilities.isTigerEnabled()) {", "-        assertEquals(\"The method should have variable arguments\",TigerUtilities.isVarArgs(m1),true);", "-        assertEquals(\"The method should not have variable arguments\",TigerUtilities.isVarArgs(m2),false);   ", "-      }", "+      assertEquals(\"The method should have variable arguments\",TigerUtilities.isVarArgs(m1),true);", "+      assertEquals(\"The method should not have variable arguments\",TigerUtilities.isVarArgs(m2),false);   ", "+      ", "+      TigerUtilities.setTigerEnabled(true);"]}], "num": 8767}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87f1779134b7f50295c12eb09d561f26", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "554e4d01b3f4e1d6a5e56b94ca3216fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "0bbc4205cb6cdac938c33646446cffe67a254d86", "commitAfterChange": "32c1a96bda59745efd4d13dbac97b7a11f8d7d24", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["+         ", "-          CompoundUndoManager undoMan = _doc.getUndoManager();", "-          int key = undoMan.startCompoundEdit();", "+             CompoundUndoManager undoMan = _doc.getUndoManager();", "+          //int key = undoMan.startCompoundEdit();", "-          undoMan.endCompoundEdit(key);", "+          // We call endCompoundEdit() here because one will automatically start when processKeyEvent finishes (see the definition of _undoListener).", "+          endCompoundEdit();", "+//          undoMan.endCompoundEdit(key); //commented out because of frenchkeyboard fix", "-          if ((((e.getModifiers() & InputEvent.META_MASK) != 0) || ((e.getModifiers() & InputEvent.ALT_MASK) != 0))", "+          // NOTE: no longer need to check for alt since we now only start a new compound edit if an undoable edit actually happened.", "+          if ((((e.getModifiers() & InputEvent.META_MASK) != 0)) // || ((e.getModifiers() & InputEvent.ALT_MASK) != 0)) //fixed for frenchkeyboard support", "-            //          System.out.println(\"not supering 1 \" + isAltF4);", "+            //            //          System.out.println(\"not supering 1 \" + isAltF4);", "-          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "-            int _keyval = (int) e.getKeyChar();", "-            if (_keyval >= 32 && _keyval <= 126) {", "-              CompoundUndoManager undoMan = _doc.getUndoManager();", "-              if (!_inCompoundEdit) {", "-                _inCompoundEdit = true;", "-                _compoundEditKey = undoMan.startCompoundEdit();", "-                getUndoAction().updateUndoState();", "-                getRedoAction().updateRedoState();", "-                //super.processKeyEvent(e);", "-              }", "+// Following IF block is commented out in regards to French Keyboard Fix", "+          //          if (((ks.getModifiers() & mask) == 0) && ks.getKeyChar() != '\\b') {", "+//            int _keyval = (int) e.getKeyChar();", "+//            if (_keyval >= 32 && _keyval <= 126) {", "+//              CompoundUndoManager undoMan = _doc.getUndoManager();", "+//              if (!_inCompoundEdit) {", "+//                _inCompoundEdit = true;", "+//                _compoundEditKey = undoMan.startCompoundEdit();", "+//                getUndoAction().updateUndoState();", "+//                getRedoAction().updateRedoState();", "+//                //super.processKeyEvent(e);", "+//              }", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca7465e018eb0cd37082a06be9a5f1a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "eceb1efda2a64c0d1777a241a780b6640565e74e", "commitAfterChange": "985a2a7aa160a776eff6e6187000ef0ccbcb7ce0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void processKeyEvent(KeyEvent e)", "signatureAfterChange": "   public void processKeyEvent(KeyEvent e)", "diff": ["+    if (ks.getKeyCode() == KeyEvent.VK_BACK_SPACE) {", "+    }", "+      endCompoundEdit();", "+        // We're breaking up compound edits at the granularity of \"enter\"'s.", "+        if (e.getKeyCode() == KeyEvent.VK_ENTER) {", "+          endCompoundEdit();", "+        }", "+            endCompoundEdit();", "+        ", "+        // If the KeyEvent is not a pressed event, process it before we do", "+        // granular undo or _inCompoundEdit may get set incorrectly.", "+        if (e.getID() != KeyEvent.KEY_TYPED) {", "+            super.processKeyEvent(e);", "+          e.consume();", "+          return;", "+        }", "-        // backspace deletes twice without this check, overrides other keystrokes", "-        // that use the mask modifier", "+          // backspace deletes twice without this check, overrides other keystrokes", "+        // that use the mask modifier          ", "+          int _keyval = (int)e.getKeyChar();", "+          if(_keyval >= 32 && _keyval <= 126) {", "+            CompoundUndoManager undoMan = _doc.getDocument().getUndoManager();", "+            if(!_inCompoundEdit) {", "+              _inCompoundEdit = true;", "+              _compoundEditKey = undoMan.startCompoundEdit();", "+              getUndoAction().updateUndoState();", "+              getRedoAction().updateRedoState();", "+              //              super.processKeyEvent(e);", "+            }", "+            //            else {", "+            //              UndoableEdit lastEdit = undoMan.getNextUndo();", "+            //              lastEdit.die();", "+            //              _compoundEditKey = undoMan.startCompoundEdit();", "+            //              super.processKeyEvent(e);", "+            //              undoMan.addEdit(lastEdit);", "+            //              undoMan.endCompoundEdit(_compoundEditKey);", "+            //            }", "+          }", "+        ", "+        //          else {", "+        e.consume();", "+        //            _inCompoundEdit = false;", "+        //          "]}], "num": 23279}
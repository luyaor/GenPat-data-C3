{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78f3ac69ba99100401ddf552fbd2aa73", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "243098e94813cb52420ad885b6c78924", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "33fc3d467fee5f4de09286fa1079029cb22ee327", "commitAfterChange": "ca0d74addfd439eb6314fb8167978328b41eb16f", "methodNumberBeforeChange": 712, "methodNumberAfterChange": 712, "signatureBeforeChange": "     public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "signatureAfterChange": "     public boolean shouldRevertFile(OpenDefinitionsDocument doc)", "diff": ["-      String text = fname + \" has changed on disk. Would you like to reload it?\\n\" + ", "-        \"This will discard any changes you have made.\";", "-      int rc = JOptionPane.showConfirmDialog(MainFrame.this, text, fname + \" Modified on Disk\", ", "-                                             JOptionPane.YES_NO_OPTION);", "+      String text = fname + \" has changed on disk.\\n\" + ", "+        \"Would you like to reload it and discard any changes you have made?\";", "+      String[] options = { \"Reload from disk\", \"Keep my changes\" };", "+      int rc = JOptionPane.showOptionDialog(MainFrame.this, text, fname + \" Modified on Disk\", ", "+                                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE,", "+                                            null, options, options[0]);", "-        case JOptionPane.YES_OPTION:    return true;", "-        case JOptionPane.NO_OPTION:     return false;", "+        case 0:                         return true;", "+        case 1:                         return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e6f5b7baf7ea3d671612e676d53b23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 405, "methodNumberAfterChange": 402, "signatureBeforeChange": "      public void nonTestCase(boolean isTestAll)", "signatureAfterChange": "      public void nonTestCase(boolean isTestAll)", "diff": ["+    /** Event that is fired with there is nothing to test.  JUnit is never started. */ ", "-      String message = isTestAll ?", "+      final String message = isTestAll ?", "+      ", "+      // Not necessarily invoked from event-handling thread!", "-      JOptionPane.showMessageDialog(MainFrame.this, message,", "-                                    \"Test Works Only On JUnit TestCases\",", "-                                    JOptionPane.ERROR_MESSAGE);", "-", "-", "+      SwingUtilities.invokeLater(new Runnable() {", "+        public void run() {", "+          JOptionPane.showMessageDialog(MainFrame.this, message,", "+                                        \"Test Works Only On JUnit TestCases\",", "+                                        JOptionPane.ERROR_MESSAGE);", "+          // clean up as junitEnded except hourglassOff (should factored into a private method)", "+           showTab(_junitErrorPanel);", "+            _junitAction.setEnabled(true);", "+            _junitAllAction.setEnabled(true);", "+            _junitErrorPanel.reset();", "+        }});"]}], "num": 13237}
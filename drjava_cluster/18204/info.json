{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac6c36c8c916ad1bc30e1c8f78568144", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f2a85399d396d4826911b9edad60b23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 231, "methodNumberAfterChange": 231, "signatureBeforeChange": "   private void _registerOptionListeners()", "signatureAfterChange": "   private void _registerOptionListeners()", "diff": ["-    // The following is unnecessary because the DefaultFileSaver constructor directly uses BACKUP_FILES", "-//    DrJava.getConfig().addOptionListener(BACKUP_FILES, new BackUpFileOptionListener());", "-//    Boolean makeBackups = DrJava.getConfig().getSetting(BACKUP_FILES);", "-//    FileOps.DefaultFileSaver.setBackupsEnabled(makeBackups.booleanValue ());", "+    DrJava.getConfig().addOptionListener(BACKUP_FILES, new BackUpFileOptionListener());", "+    Boolean makeBackups = DrJava.getConfig().getSetting(BACKUP_FILES);", "+    FileOps.DefaultFileSaver.setBackupsEnabled(makeBackups.booleanValue ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbf200bc668c32b0a6f6277697cd4e2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "c9e80bbae1d05915842b741e3f824da56b5b7a57", "commitAfterChange": "ecfa1b8571cf84d3fda1f3d6d93d5a8cea78d32a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public static void restartIfNecessary(boolean forToolsJar, String[] args)", "signatureAfterChange": "   public static void restartIfNecessary(boolean forToolsJar, String[] args)", "diff": ["+    //JOptionPane.showMessageDialog(null, \"forToolsJar = \" + forToolsJar);", "-      // Don't need to restart: just continue normally", "-      return;", "+      if (!_usingJSR14v20 || bootClasspathHasJSR14v20()) {", "+        return;", "+      }", "-    ", "+", "-    ", "+", "-    String[] jvmArgs = new String[0];", "+    String[] jvmArgs;", "+    ", "+    if (_usingJSR14v20) {", "+      //System.out.println(\"Using JSR14v20, appending bootclasspath\");", "+      String jsr14 = _config.getSetting(JSR14_LOCATION).getAbsolutePath();", "+      jvmArgs = new String[] { \"-Xbootclasspath/p:\" + jsr14 };", "+    }", "+    else {", "+      jvmArgs = new String[0];", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712c49c8641acc82c056eaaa0f7bc8eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   private void _setupJUnitPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJUnitPanel(ConfigPanel panel)", "diff": ["-    final ForcedChoiceOptionComponent concJUnitChecksEnabledComponent =", "-      newForcedChoiceOptionComponent(OptionConstants.CONCJUNIT_CHECKS_ENABLED);", "-    addOptionComponent(panel, concJUnitChecksEnabledComponent);", "-", "-    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));    ", "-", "-    final FileOptionComponent rtConcJUnitLoc =", "-      newFileOptionComponent(OptionConstants.RT_CONCJUNIT_LOCATION,", "-                             new FileSelectorComponent(this, _jarChooser, 30, 10f) {", "-      public void setFileField(File file) {", "-        if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(file)) {", "-          super.setFileField(file);", "-        }", "-        else if (file.exists()) { // invalid but exists", "-          JOptionPane.showMessageDialog(_parent, \"The file '\"+ file.getName() + \"'\\nis not a valid ConcJUnit Runtime file.\",", "-                                        \"Invalid ConcJUnit Runtime File\", JOptionPane.ERROR_MESSAGE);", "-          resetFileField(); // revert if not valid          ", "-        }", "-      }", "-      public boolean validateTextField() {", "-        String newValue = _fileField.getText().trim();", "-        ", "-        File newFile = FileOps.NULL_FILE;", "-        if (!newValue.equals(\"\"))", "-          newFile = new File(newValue);", "-        ", "-        if (newFile != FileOps.NULL_FILE && !newFile.exists()) {", "-          JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis invalid because it does not exist.\",", "-                                        \"Invalid File Name\", JOptionPane.ERROR_MESSAGE);", "-          if (_file != null && ! _file.exists()) _file = FileOps.NULL_FILE;", "-          resetFileField(); // revert if not valid", "-          ", "-          return false;", "-        }", "-        else {", "-          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(newFile) ||", "-              FileOps.NULL_FILE.equals(newFile)) {", "-            setFileField(newFile);", "-            return true;", "+    boolean javaVersion7 = JavaVersion.CURRENT.supports(JavaVersion.JAVA_7);", "+    if (!javaVersion7) {", "+      final ForcedChoiceOptionComponent concJUnitChecksEnabledComponent =", "+        newForcedChoiceOptionComponent(OptionConstants.CONCJUNIT_CHECKS_ENABLED);", "+      addOptionComponent(panel, concJUnitChecksEnabledComponent);", "+      ", "+      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));    ", "+      ", "+      final FileOptionComponent rtConcJUnitLoc =", "+        newFileOptionComponent(OptionConstants.RT_CONCJUNIT_LOCATION,", "+                               new FileSelectorComponent(this, _jarChooser, 30, 10f) {", "+        public void setFileField(File file) {", "+          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(file)) {", "+            super.setFileField(file);", "-          else {", "-            JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis not a valid ConcJUnit Runtime file.\",", "+          else if (file.exists()) { // invalid but exists", "+            JOptionPane.showMessageDialog(_parent, \"The file '\"+ file.getName() + \"'\\nis not a valid ConcJUnit Runtime file.\",", "+            resetFileField(); // revert if not valid          ", "+          }", "+        }", "+        public boolean validateTextField() {", "+          String newValue = _fileField.getText().trim();", "+          ", "+          File newFile = FileOps.NULL_FILE;", "+          if (!newValue.equals(\"\"))", "+            newFile = new File(newValue);", "+          ", "+          if (newFile != FileOps.NULL_FILE && !newFile.exists()) {", "+            JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis invalid because it does not exist.\",", "+                                          \"Invalid File Name\", JOptionPane.ERROR_MESSAGE);", "+            if (_file != null && ! _file.exists()) _file = FileOps.NULL_FILE;", "-        }", "-      }    ", "-    });", "-    rtConcJUnitLoc.setFileFilter(ClassPathFilter.ONLY);", "-    ", "-    ActionListener processRTListener = new ActionListener() {", "-      public void actionPerformed(ActionEvent e) {", "-        File concJUnitJarFile = FileOps.getDrJavaFile();", "-        if (junitLocEnabled.getComponent().isSelected()) {", "-          concJUnitJarFile = junitLoc.getComponent().getFileFromField();", "-        }", "-        File rtFile = rtConcJUnitLoc.getComponent().getFileFromField();", "-        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.", "-          showGenerateRTConcJUnitJarFileDialog(ConfigFrame.this,", "-                                               rtFile,", "-                                               concJUnitJarFile,", "-                                               new Runnable1<File>() {", "-          public void run(File targetFile) {", "-            rtConcJUnitLoc.getComponent().setFileField(targetFile);", "+          else {", "+            if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(newFile) ||", "+                FileOps.NULL_FILE.equals(newFile)) {", "+              setFileField(newFile);", "+              return true;", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis not a valid ConcJUnit Runtime file.\",", "+                                            \"Invalid ConcJUnit Runtime File\", JOptionPane.ERROR_MESSAGE);", "+              resetFileField(); // revert if not valid", "+              ", "+              return false;", "+            }", "-        },", "-                                               new Runnable() { public void run() { } });", "-      }", "-    };", "-    final ButtonComponent processRT =", "-      new ButtonComponent(processRTListener, \"Generate ConcJUnit Runtime File\", this,", "-                          \"<html>Generate the ConcJUnit Runtime file specified above.<br>\"+", "-                          \"This setting is deactivated if the path to ConcJUnit has not been specified above.</html>\");", "-    ", "-    OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {", "-      public Object value(Object oc) {", "-        File f = junitLoc.getComponent().getFileFromField();", "-        boolean enabled = (!junitLocEnabled.getComponent().isSelected()) ||", "-          edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f);", "-        rtConcJUnitLoc.getComponent().setEnabled(enabled);", "-        processRT.getComponent().setEnabled(enabled);", "-        concJUnitChecksEnabledComponent.getComponent().setEnabled(enabled);", "-        return null;", "-      }", "-    };", "-", "-    OptionComponent.ChangeListener junitLocListener = new OptionComponent.ChangeListener() {", "-      public Object value(Object oc) {", "-        boolean enabled = junitLocEnabled.getComponent().isSelected();", "-        junitLoc.getComponent().setEnabled(enabled);", "-        return null;", "-      }", "-    };", "-    junitLocEnabled.addChangeListener(junitLocListener);", "-    junitLocEnabled.addChangeListener(rtConcJUnitListener);", "-    junitLoc.addChangeListener(rtConcJUnitListener);", "-    addOptionComponent(panel, rtConcJUnitLoc);", "-    addOptionComponent(panel, processRT);", "-    ", "-    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "-    final LabelComponent internalExternalStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "-    final LabelComponent threadsStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "-    final LabelComponent joinStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "-    final LabelComponent luckyStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "-    OptionComponent.ChangeListener junitStatusChangeListener = new OptionComponent.ChangeListener() {", "-      public Object value(Object oc) {", "-        File f = junitLoc.getComponent().getFileFromField();", "-        String[] s = new String[] { \" \", \" \", \" \", \" \" };", "-        boolean isConcJUnit = true;", "-        if ((!junitLocEnabled.getComponent().isSelected()) || (f==null) || FileOps.NULL_FILE.equals(f) || !f.exists()) {", "-          s[0] = \"DrJava uses the built-in ConcJUnit framework.\";", "-        }", "-        else {", "-          String type = \"ConcJUnit\";", "-          if (!edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {", "-            type = \"JUnit\";", "-            isConcJUnit = false;", "+        }    ", "+      });", "+      rtConcJUnitLoc.setFileFilter(ClassPathFilter.ONLY);", "+      ", "+      ActionListener processRTListener = new ActionListener() {", "+        public void actionPerformed(ActionEvent e) {", "+          File concJUnitJarFile = FileOps.getDrJavaFile();", "+          if (junitLocEnabled.getComponent().isSelected()) {", "+            concJUnitJarFile = junitLoc.getComponent().getFileFromField();", "-          s[0] = \"DrJava uses an external \"+type+\" framework.\";", "+          File rtFile = rtConcJUnitLoc.getComponent().getFileFromField();", "+          edu.rice.cs.drjava.model.junit.ConcJUnitUtils.", "+            showGenerateRTConcJUnitJarFileDialog(ConfigFrame.this,", "+                                                 rtFile,", "+                                                 concJUnitJarFile,", "+                                                 new Runnable1<File>() {", "+            public void run(File targetFile) {", "+              rtConcJUnitLoc.getComponent().setFileField(targetFile);", "+            }", "+          },", "+                                                 new Runnable() { public void run() { } });", "-        if (!isConcJUnit) {", "-          s[1] = \"JUnit does not support all-thread, no-join\";", "-          s[2] = \"or lucky checks. They are all disabled.\";", "+      };", "+      final ButtonComponent processRT =", "+        new ButtonComponent(processRTListener, \"Generate ConcJUnit Runtime File\", this,", "+                            \"<html>Generate the ConcJUnit Runtime file specified above.<br>\"+", "+                            \"This setting is deactivated if the path to ConcJUnit has not been specified above.</html>\");", "+      ", "+      OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {", "+        public Object value(Object oc) {", "+          File f = junitLoc.getComponent().getFileFromField();", "+          boolean enabled = (!junitLocEnabled.getComponent().isSelected()) ||", "+            edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f);", "+          rtConcJUnitLoc.getComponent().setEnabled(enabled);", "+          processRT.getComponent().setEnabled(enabled);", "+          concJUnitChecksEnabledComponent.getComponent().setEnabled(enabled);", "+          return null;", "-        else {", "-          s[1] = \"All-thread checks are disabled.\";", "-          s[2] = \"No-join checks are disabled.\";", "-          s[3] = \"Lucky checks are disabled.\";", "-          if (!concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "-                equals(OptionConstants.ConcJUnitCheckChoices.NONE)) {", "-            s[1] = \"All-thread checks are enabled.\";", "-            if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "-                  equals(OptionConstants.ConcJUnitCheckChoices.ALL) ||", "-                concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "-                  equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {", "-              s[2] = \"No-join checks are enabled.\";", "+      };", "+      ", "+      OptionComponent.ChangeListener junitLocListener = new OptionComponent.ChangeListener() {", "+        public Object value(Object oc) {", "+          boolean enabled = junitLocEnabled.getComponent().isSelected();", "+          junitLoc.getComponent().setEnabled(enabled);", "+          return null;", "+        }", "+      };", "+      junitLocEnabled.addChangeListener(junitLocListener);", "+      junitLocEnabled.addChangeListener(rtConcJUnitListener);", "+      junitLoc.addChangeListener(rtConcJUnitListener);", "+      addOptionComponent(panel, rtConcJUnitLoc);", "+      addOptionComponent(panel, processRT);", "+      ", "+      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+      final LabelComponent internalExternalStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+      final LabelComponent threadsStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+      final LabelComponent joinStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+      final LabelComponent luckyStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+      OptionComponent.ChangeListener junitStatusChangeListener = new OptionComponent.ChangeListener() {", "+        public Object value(Object oc) {", "+          File f = junitLoc.getComponent().getFileFromField();", "+          String[] s = new String[] { \" \", \" \", \" \", \" \" };", "+          boolean isConcJUnit = true;", "+          if ((!junitLocEnabled.getComponent().isSelected()) || (f==null) || FileOps.NULL_FILE.equals(f) || !f.exists()) {", "+            s[0] = \"DrJava uses the built-in ConcJUnit framework.\";", "+          }", "+          else {", "+            String type = \"ConcJUnit\";", "+            if (!edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {", "+              type = \"JUnit\";", "+              isConcJUnit = false;", "+            }", "+            s[0] = \"DrJava uses an external \"+type+\" framework.\";", "+          }", "+          if (!isConcJUnit) {", "+            s[1] = \"JUnit does not support all-thread, no-join\";", "+            s[2] = \"or lucky checks. They are all disabled.\";", "+          }", "+          else {", "+            s[1] = \"All-thread checks are disabled.\";", "+            s[2] = \"No-join checks are disabled.\";", "+            s[3] = \"Lucky checks are disabled.\";", "+            if (!concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                  equals(OptionConstants.ConcJUnitCheckChoices.NONE)) {", "+              s[1] = \"All-thread checks are enabled.\";", "-                    equals(OptionConstants.ConcJUnitCheckChoices.ALL)) {", "-                File rtf = rtConcJUnitLoc.getComponent().getFileFromField();", "-                if ((rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&", "-                    edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {", "-                  s[3] = \"Lucky checks are enabled.\";", "+                    equals(OptionConstants.ConcJUnitCheckChoices.ALL) ||", "+                  concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                    equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {", "+                s[2] = \"No-join checks are enabled.\";", "+                if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                      equals(OptionConstants.ConcJUnitCheckChoices.ALL)) {", "+                  File rtf = rtConcJUnitLoc.getComponent().getFileFromField();", "+                  if ((rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&", "+                      edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {", "+                    s[3] = \"Lucky checks are enabled.\";", "+                  }", "+          internalExternalStatus.getComponent().setText(s[0]);", "+          threadsStatus.getComponent().setText(s[1]);", "+          joinStatus.getComponent().setText(s[2]);", "+          luckyStatus.getComponent().setText(s[3]);", "+          return null;", "-        internalExternalStatus.getComponent().setText(s[0]);", "-        threadsStatus.getComponent().setText(s[1]);", "-        joinStatus.getComponent().setText(s[2]);", "-        luckyStatus.getComponent().setText(s[3]);", "-        return null;", "-      }", "-    };", "-    concJUnitChecksEnabledComponent.addChangeListener(junitStatusChangeListener);", "-    junitLocEnabled.addChangeListener(junitStatusChangeListener);", "-    junitLoc.addChangeListener(junitStatusChangeListener);", "-    rtConcJUnitLoc.addChangeListener(junitStatusChangeListener);", "-    addOptionComponent(panel, internalExternalStatus);", "-    addOptionComponent(panel, threadsStatus);", "-    addOptionComponent(panel, joinStatus);", "-    addOptionComponent(panel, luckyStatus);", "-", "-    junitLocListener.value(null);", "-    rtConcJUnitListener.value(null);", "-    junitStatusChangeListener.value(null);", "+      };", "+      concJUnitChecksEnabledComponent.addChangeListener(junitStatusChangeListener);", "+      junitLocEnabled.addChangeListener(junitStatusChangeListener);", "+      junitLoc.addChangeListener(junitStatusChangeListener);", "+      rtConcJUnitLoc.addChangeListener(junitStatusChangeListener);", "+      addOptionComponent(panel, internalExternalStatus);", "+      addOptionComponent(panel, threadsStatus);", "+      addOptionComponent(panel, joinStatus);", "+      addOptionComponent(panel, luckyStatus);", "+      ", "+      junitLocListener.value(null);", "+      rtConcJUnitListener.value(null);", "+      junitStatusChangeListener.value(null);", "+    }", "+    else {", "+      addOptionComponent(panel, ", "+                         new LabelComponent(\"<html><br><br>ConcJUnit is currently not supported on Java 7.<br><br></html>\", this, true));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab1ca0ff3e49db5fefeda205437053bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3b9696a707d284763f4bff7a7d587935d483984c", "commitAfterChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "methodNumberBeforeChange": 496, "methodNumberAfterChange": 496, "signatureBeforeChange": "   private void _runMain()", "signatureAfterChange": "   private void _runMain()", "diff": ["-    updateStatusField(\"Running main Method of Current Document\");", "-    ", "-    try { _model.getActiveDocument().runMain(null); }", "+    try {", "+      boolean smart = DrJava.getConfig().getSetting(OptionConstants.SMART_RUN_FOR_APPLETS_AND_PROGRAMS);", "+      if (smart) {", "+        updateStatusField(\"Running main Method of Current Document\");", "+        _model.getActiveDocument().runSmart(null);", "+      }", "+      else {", "+        updateStatusField(\"Running Current Document\");", "+        _model.getActiveDocument().runMain(null);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c70d94f52a76b753137bb8cc17c9cb7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3b9696a707d284763f4bff7a7d587935d483984c", "commitAfterChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "methodNumberBeforeChange": 495, "methodNumberAfterChange": 495, "signatureBeforeChange": "      private void _runProject()", "signatureAfterChange": "      private void _runProject()", "diff": ["-          doc.runMain(_model.getMainClass());", "+          boolean smart = DrJava.getConfig().getSetting(OptionConstants.SMART_RUN_FOR_APPLETS_AND_PROGRAMS);", "+          if (smart) {", "+              doc.runSmart(_model.getMainClass());", "+          }", "+          else {", "+              doc.runMain(_model.getMainClass());", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e49a6d565c6855578e4490e7d6fa3f11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "c9e80bbae1d05915842b741e3f824da56b5b7a57", "commitAfterChange": "ecfa1b8571cf84d3fda1f3d6d93d5a8cea78d32a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["+    if (DrJava.usingJSR14v20()) {", "+      // System.out.println(\"using jsr14 v2.0\");", "+      File jsr14 = DrJava.getConfig().getSetting(OptionConstants.JSR14_LOCATION);", "+      jvmArgs.addElement(\"-Xbootclasspath/p:\" + jsr14.getAbsolutePath());", "+    }", "-    ", "+"]}], "num": 18204}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8121953d8105e242fcba3d0b7bd2e85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bb031cd081841e262087c8126e7bcb1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "96bf5a5cd2d40db16b0b6c02c789d4b37a3a9876", "commitAfterChange": "0bdf9ca1ec4730da3a7aefde2e61b8646efd7da7", "methodNumberBeforeChange": 307, "methodNumberAfterChange": 307, "signatureBeforeChange": "      private void _junitProject()", "signatureAfterChange": "   private void _junitProject()", "diff": ["-  private void _junitProject() { _junitAll(); }", "+  /** Tests the documents in the project source tree. Assumes that DrJava is in project mode. */", "+  private void _junitProject() { ", "+     new Thread(\"Running Junit Tests\") {", "+      public void run() {", "+        _disableJUnitActions();", "+        hourglassOn();  // turned off in JUnitStarted/NonTestCase event", "+        try { _model.getJUnitModel().junitProject(); } ", "+        catch(UnexpectedException e) { _junitInterrupted(e); }", "+      }", "+    }.start();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d35ac775af9c03a4e9ed47003214c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "53d061333fe3393f6569c1f553912f1a449482ad", "commitAfterChange": "12c8304e14a6d9eafe2f7093583d8040569150c1", "methodNumberBeforeChange": 321, "methodNumberAfterChange": 322, "signatureBeforeChange": "     protected DDReconstructor makeReconstructor()", "signatureAfterChange": "     protected DDReconstructor makeReconstructor()", "diff": ["-        private int _loc = 0;", "+        private volatile int _loc = 0;", "-        private DocumentListener[] _list = { };", "-        private List<FinalizationListener<DefinitionsDocument>> _finalListeners =", "+        private volatile DocumentListener[] _list = { };", "+        private volatile List<FinalizationListener<DefinitionsDocument>> _finalListeners =", "-        private WeakHashMap< DefinitionsDocument.WrappedPosition, Integer> _positions =", "+        private volatile WeakHashMap< DefinitionsDocument.WrappedPosition, Integer> _positions =", "-        /** Reconstruct this document.  Assumes _cacheLock is held.", "+        private volatile boolean _positionsMade = false;", "+        ", "+        /** Reconstructs this document except for embedded positions.  Assumes _cacheLock is held.", "-", "-          // re-create and update all positions", "-          newDefDoc.setWrappedPositionOffsets(_positions);", "+          ", "+          _positionsMade = false;", "+", "+        }", "+        ", "+        /** Reconstructs the embedded positions for this document.  Synchronized*/", "+        public void makePositions() { ", "+          if (_positionsMade) return;", "+          synchronized(this) {", "+            if (_positionsMade) return; // double-check works for volatile fields in Java 1.4 and later code", "+            _positionsMade = true;", "+          }", "+          try { getDocument().setWrappedPositionOffsets(_positions); }", "+          catch(Exception e) { /* ignore */ } // omitted positions are not fatal"]}], "num": 24348}
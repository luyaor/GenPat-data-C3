{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f104846e478dd6bd69d569ade3b9ef1e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e80231f0ffc926bfb8df164dc70103", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "866de9caf49de77a8432a870fb62f361a127a0f1", "commitAfterChange": "88b78fb542b0969283ae161ecd8928b9b81244e4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void _updateNoErrors() throws BadLocationException", "signatureAfterChange": "     private void _updateNoErrors() throws BadLocationException", "diff": ["-          message = _model.getActiveCompiler().getName() +", "-            \" compiler ready.\";", "+          if (_model.getActiveCompiler() == NoCompilerAvailable.ONLY) {", "+            message = \"No compiler available.\";", "+          }", "+          else {", "+            message = _model.getActiveCompiler().getName() + \" compiler ready.\";", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de75ff3c4aed07d8f43bca52ebbc3df8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "6a45646226e9121c2e31495774499cc0cdf516c3", "commitAfterChange": "558f3e76b0939d235eb8771fbc6a284d80a06f72", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["+      //System.err.print(\"compiler \" + name + \" check: \");", "+          //System.err.println(\"ok.\");", "+", "+          // can't use getActiveCompiler() because it will call back to", "+          // getAvailableCompiler, forming an infinite recursion!!", "+          if (_activeCompiler == NoCompilerAvailable.ONLY) {", "+            //System.err.println(\"\\tset to active.\");", "+            _activeCompiler = compiler;", "+          }", "+", "+        }", "+        else {", "+          //System.err.println(\"! .isAvailable.\");", "+        //System.err.println(\"failed to load:\");", "+        //t.printStackTrace();", "+        //System.err.println();"]}], "num": 9322}
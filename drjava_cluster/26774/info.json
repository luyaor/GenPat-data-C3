{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74c14e17526ad3da440c0dac607a57b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c64001c673e09afd59da9823b3c5a2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "e433bba86704c86b158b09f6c33458c252eb4b1b", "commitAfterChange": "009201ea5473f7ca59ef7e83c1f67ec0f1be92b0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "signatureAfterChange": "      public static void configureAndLoadDrJavaRoot(String[] args)", "diff": ["-        // Add the string pathSep to _filesToOpen if _showDebugConsole is true", "-        if (_showDebugConsole) _filesToOpen.add(pathSep);  // THIS IS A KLUDGE TO PASS THIS BOOLEAN FLAG TO DrJava", "+        LinkedList<String> classArgsList = new LinkedList<String>();", "+        // need to make the paths absolute since the working directory might change", "+        for(String fn: _filesToOpen) {", "+            classArgsList.add(new File(fn).getAbsolutePath());", "+        }", "+", "+        // Add the parameters \"-debugConsole\" to classArgsList if _showDebugConsole is true", "+        if (_showDebugConsole) classArgsList.add(0,\"-debugConsole\");", "-        String[] classArgs = _filesToOpen.toArray(new String[0]);", "+        if (!_propertiesFile.equals(DEFAULT_PROPERTIES_FILE)) {", "+          classArgsList.add(0,\"-config\");", "+          // need to make the paths absolute since the working directory might change", "+          classArgsList.add(1,_propertiesFile.getAbsolutePath());", "+        }", "+        String[] classArgs = classArgsList.toArray(new String[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf9ea0c318bb7f3552c8a3374aa1863", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "f858bdc4a8556fa2d602de70e64361813405ec96", "commitAfterChange": "9a6ce0c2dd9939538b22d21a227d64c36bc636d3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DefaultCompilerModel(GlobalModel m)", "signatureAfterChange": "   public DefaultCompilerModel(GlobalModel m, Iterable<? extends CompilerInterface> compilers)", "diff": ["-  public DefaultCompilerModel(GlobalModel m) {", "+  public DefaultCompilerModel(GlobalModel m, Iterable<? extends CompilerInterface> compilers) {", "+    _compilers = new ArrayList<CompilerInterface>();", "+    for (CompilerInterface i : compilers) { _compilers.add(i); }", "+    if (_compilers.size() > 0) { _active = _compilers.get(0); }", "+    else { _active = NoCompilerAvailable.ONLY; }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8f1f3a5725f0cc1bec07feb6db40d6c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/ToolsJarClassLoader.java", "commitBeforeChange": "d0895d1ac641d5855832b6d42c1c1052f9c47c9f", "commitAfterChange": "866de9caf49de77a8432a870fb62f361a127a0f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static File[] getToolsJarFiles()", "signatureAfterChange": "   public static File[] getToolsJarFiles()", "diff": ["-    File home = new File(System.getProperty(\"java.home\"));", "+    String javaHome = System.getProperty(\"java.home\");", "+    File home = new File(javaHome);", "+    ", "+    Vector<File> files = new Vector<File>();", "+    files.addElement(new File(libDir, \"tools.jar\"));", "+    files.addElement(new File(libDir2, \"tools.jar\"));", "+    ", "+    if (javaHome.indexOf(\"Program Files\") != -1) {", "+      // Windows: JavaHome is JRE; guess where SDK is", "+      files.addElement(new File(getWindowsToolsJar(javaHome)));", "+    }", "-    return new File[] {", "-      new File(libDir, \"tools.jar\"),", "-      new File(libDir2, \"tools.jar\")", "-    };", "+    File[] fileArray = new File[files.size()];", "+    files.copyInto(fileArray);", "+    return fileArray;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed46631d5463d834fceb84d50ad41893", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "e97d669e5368c283be3ec2a94ca1c792daab5138", "commitAfterChange": "d75bb4144501a8419376e0dc8dbe054c7511983f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "signatureAfterChange": "   private void _doCompile(List<OpenDefinitionsDocument> docs) throws IOException", "diff": ["+    ArrayList<CompilerError> packageErrors = new ArrayList<CompilerError>();", "+        ", "+        try { doc.getSourceRoot(); }", "+        catch (InvalidPackageException e) {", "+          packageErrors.add(new CompilerError(f, e.getMessage(), false));", "+        }", "-    } ", "-    ", "-    File buildDir = _model.getBuildDirectory();", "-    if ((buildDir != null) && !buildDir.exists() && !buildDir.mkdirs()) {", "-      throw new IOException(\"Could not create build directory: \"+buildDir);", "-", "-    File workDir = _model.getWorkingDirectory(); ", "-    if ((workDir != null) && ! workDir.exists() && ! workDir.mkdirs()) {", "-      throw new IOException(\"Could not create working directory: \"+workDir);", "-    }", "-     ", "+      ", "-    try { _compileFiles(filesToCompile, buildDir); }", "-    catch (Throwable t) {", "-      CompilerError err = new CompilerError(t.toString(), false);", "-      _distributeErrors(Arrays.asList(err));", "+    try {", "+      if (!packageErrors.isEmpty()) { _distributeErrors(packageErrors); }", "+      else {", "+        try {", "+          File buildDir = _model.getBuildDirectory();", "+          if ((buildDir != null) && !buildDir.exists() && !buildDir.mkdirs()) {", "+            throw new IOException(\"Could not create build directory: \"+buildDir);", "+          }", "+          ", "+          File workDir = _model.getWorkingDirectory(); ", "+          if ((workDir != null) && ! workDir.exists() && ! workDir.mkdirs()) {", "+            throw new IOException(\"Could not create working directory: \"+workDir);", "+          }", "+          ", "+          _compileFiles(filesToCompile, buildDir);", "+        }", "+        catch (Throwable t) {", "+          CompilerError err = new CompilerError(t.toString(), false);", "+          _distributeErrors(Arrays.asList(err));", "+        }", "+      }", "-    finally { _notifier.compileEnded(workDir, excludedFiles); }", "+    finally { _notifier.compileEnded(_model.getWorkingDirectory(), excludedFiles); }"]}], "num": 26774}
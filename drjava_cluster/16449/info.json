{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49d816453400c13bd3a947e595683caa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3690edde8b2591b39f7308ae14223a02", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "9252a1853f289706bd8613c5b3a7e1dae6638ae1", "commitAfterChange": "eaf9387d90b9ce749cafaa91a98fe5e7c77f98e0", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void _displayWatchpoints()", "signatureAfterChange": "   public synchronized void removeWatch(String field)", "diff": ["+   */", "+  public synchronized void removeWatch(String field) {", "+    if (!isReady()) return;", "+    ", "+    for (int i=0; i < _watches.size(); i++) {", "+      WatchData watch = _watches.elementAt(i);", "+      if (watch.getName().equals(field)) {", "+        _watches.removeElementAt(i);", "+      }", "+    }", "+  }", "-  ", "-  private void _displayWatchpoints() {", "-    for (int i = 0; i < _watchpoints.size(); i ++) {", "-      WatchpointData currWatchpoint = _watchpoints.elementAt(i);  ", "-      if (currWatchpoint.getChanged()) {", "-      }", "-      else {", "-      }", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a15fc821358609fe29d85e84b006318", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public synchronized void resume()", "signatureAfterChange": "   public synchronized void resume()", "diff": ["+   */", "+  public synchronized void resume() {", "+    if (!isReady()) return;", "+    ThreadReference thread = null;", "+    try{", "+      thread = _suspendedThreads.pop();", "+    }catch(NoSuchElementException e){", "+      /** Just return because there is no thread to resume */", "+    }", "+    ", "+    resumeThread(thread);", "-  public synchronized void resume() {", "-    if (_thread == null)", "-    int suspendCount = _thread.suspendCount();", "-    for (int i=suspendCount; i>0; i--) {", "-      _thread.resume();", "-    }"]}], "num": 16449}
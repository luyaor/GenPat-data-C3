{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e84d01d80e8964255e4307a8681dd214", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d7b9ad10806a014c241356b23906691", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileSuccessTest.java", "commitBeforeChange": "405bec7d97445f0020939e0560dc10393430aac1", "commitAfterChange": "070ce5905e33fc289f79bfc0035862d6493d03f5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testCompileClasspathOKDefaultPackage()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileClasspathOKDefaultPackage()     throws BadLocationException, IOException, InterruptedException", "diff": ["+    System.out.println(\"testCompileClasspathOKDefaultPackage()\");", "+    listener.checkCompileOccurred();", "-    listener.checkCompileOccurred();", "+    listener2.checkCompileOccurred();", "-    _model.removeListener(listener);", "+    _model.removeListener(listener2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "333b551d497e488f6f237da3792be694", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Void forTryCatchStatementDoFirst(TryCatchStatement that)", "signatureAfterChange": "   public Void forInnerInterfaceDef(InnerInterfaceDef that)", "diff": ["-  /** Override method in IntermediateVisitor that throws an error here.*/", "-  public Void forTryCatchStatementDoFirst(TryCatchStatement that) { return null; /*  No errors to throw here. */ }", "+  /** Process a local inner interface definition */", "+    System.err.println(\"***Signalling local interface error\");", "+    _addAndIgnoreError(\"Local interfaces are illegal in Java.\", that);", "+//    handleInnerInterfaceDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + '.' + ", "+//                        _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+//    // How do we know that generated number is correct?"]}], "num": 8900}
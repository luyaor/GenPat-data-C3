{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a70e446d3a1848cec8169720221b074", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c2924dc37ff28600820c93d339eade2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b128df4fa9d8df79a76ba9e19a170c160365e646", "commitAfterChange": "e16fd9dc1aa815e303a7aa80be407f3a031e237d", "methodNumberBeforeChange": 398, "methodNumberAfterChange": 344, "signatureBeforeChange": "     public int compareTo(OpenDefinitionsDocument o)", "signatureAfterChange": "     public int compareTo(OpenDefinitionsDocument o)", "diff": ["-    /** Orders ODDs by their id's. */", "-    public int compareTo(OpenDefinitionsDocument o) { return _id - o.id(); }", "+    /** Orders ODDs by their lexical names.  Note that equals defines a finer equivalence relation than compareTo. */", "+    public int compareTo(OpenDefinitionsDocument o) { ", "+      int diff = hashCode() - o.hashCode();", "+      if (diff != 0) return diff;", "+      return _lexiName.compareTo(o.getLexiName()); ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec1f9b439f60a3931a5e761f58ed231", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaProperty.java", "commitBeforeChange": "a0485f85335f36c90789dfb389fcf6d34d6ebb24", "commitAfterChange": "bdfe950dc400d21dc2bdd8774632b12854b9f66c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public int compareTo(DrJavaProperty o)", "signatureAfterChange": "   public int compareTo(DrJavaProperty o)", "diff": ["-  /** Compare two properties. */", "-  public int compareTo(DrJavaProperty o) {", "-    return _name.compareTo(o._name);", "+  /** Compare two properties lexicographically as tuples (_name, _value, _isCurrent). */", "+  public int compareTo(DrJavaProperty o) { ", "+    int nameDif = _name.compareTo(o._name);", "+    if (nameDif != 0) return nameDif;", "+    int valDif = _value.compareTo(o._value);", "+    if (valDif != 0) return valDif;", "+    return (_isCurrent == o._isCurrent) ? 0 : (_isCurrent ? 1 : -1);  // false < true in this ascending ordering"]}], "num": 28476}
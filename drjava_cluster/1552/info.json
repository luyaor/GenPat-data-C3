{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b4da03d0dfbd953ecb05367386eedd4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c42a58c6fd4f00cbf701972dbdad559", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "43a2124ad4386a02628eedfc537948ebb05ea232", "commitAfterChange": "c904ff4d12a1c03698cae74f161e803cd4959a58", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class visit(ConditionalExpression node)", "diff": ["-    if (_isBoxingType(c1) && c2.isPrimitive()) {", "+    if (TigerUtilities.isBoxingType(c1) && c2.isPrimitive()) {", "-    else if (_isBoxingType(c2) && c1.isPrimitive()) {", "+    else if (TigerUtilities.isBoxingType(c2) && c1.isPrimitive()) {", "-        node.setIfTrueExpression (_box(exp1, _correspondingRefType(c1)));", "-        node.setIfFalseExpression(_box(exp2, _correspondingRefType(c2)));", "+        node.setIfTrueExpression (_box(exp1, TigerUtilities.correspondingBoxingType(c1)));", "+        node.setIfFalseExpression(_box(exp2, TigerUtilities.correspondingBoxingType(c2)));", "-        node.setIfFalseExpression(_box(exp2, _correspondingRefType(c2)));", "+        node.setIfFalseExpression(_box(exp2, TigerUtilities.correspondingBoxingType(c2)));", "-        node.setIfTrueExpression(_box(exp1, _correspondingRefType(c1)));", "+        node.setIfTrueExpression(_box(exp1, TigerUtilities.correspondingBoxingType(c1)));", "-      else if (c1 == boolean.class && _isBoxingType(c2)) {", "+      else if (c1 == boolean.class && TigerUtilities.isBoxingType(c2)) {", "-      else if (c2 == boolean.class && _isBoxingType(c1)) {", "+      else if (c2 == boolean.class && TigerUtilities.isBoxingType(c1)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcbe4e09344719c501b3997135326ab8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled)", "signatureAfterChange": "   public static boolean isBoxCompatible(Class c1, Class c2, TigerUsage tu)", "diff": ["-  }", "-  public static boolean isBoxCompatible(Class c1, Class c2, boolean autoBoxEnabled) {", "+  public static boolean isBoxCompatible(Class c1, Class c2, TigerUsage tu) {", "-        ", "-      if (!c2.isPrimitive() && !autoBoxEnabled) {", "-        // We know autoboxing/unboxing is required but", "-        // the version of java doesn't support it", "-        throw new WrongVersionException(\"Auto-unboxing only supported in Java 1.5 or better\");", "+      if (!c2.isPrimitive()) {", "+        tu.autoBoxingIsUsed();", "+        //        throw new RuntimeException(\"autoboxing used1:\" + tu);", "-      else {", "-        // unbox the second type (may not change)", "-        c2 = _correspondingPrimType(c2);", "-      }", "+      ", "+      // unbox the second type (may not change)", "+      c2 = TigerUtilities.correspondingPrimType(c2);", "+      ", "-        if (!autoBoxEnabled) {", "-           throw new WrongVersionException(\"Auto-boxing/unboxing is only supported in Java 1.5 or better\");", "-        }", "-        c2 = _correspondingBoxingType(c2);", "+        tu.autoBoxingIsUsed();", "+        c2 = TigerUtilities.correspondingBoxingType(c2);", "+        //        throw new RuntimeException(\"autoboxing 2:\" + tu);"]}], "num": 1552}
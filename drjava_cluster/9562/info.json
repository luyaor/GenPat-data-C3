{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b537f3704d023a028315d9c42c4c50de", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63434ef62f95f26ea82886fa4961e47b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentHelperTest.java", "commitBeforeChange": "6d23d799552cf55313f22433cb12915906b19690", "commitAfterChange": "8a04e8e94a35e432777ebd444cf5fc70868fe9e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["-\t\t \"comments are ignored\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(23, delimiters1));", "-", "+                 \"comments are ignored\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(23, delimiters1));", "+    ", "-\t\t \"comments are ignored\",", "-\t\t 5,", "-\t\t _doc.findPrevDelimiter(16, delimiters1));", "-", "+                 \"comments are ignored\",", "+                 5,", "+                 _doc.findPrevDelimiter(16, delimiters1));", "+    ", "-\t\t \"are ignored\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(5, delimiters1));", "-", "+                 \"are ignored\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(5, delimiters1));", "+    ", "-\t\t \"are ignored\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(5, delimiters1));    ", "-", "+                 \"are ignored\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(5, delimiters1));", "+    ", "+    _setDocText(\"foo();\\nfor(;;)\\n\");", "+    assertEquals(\"Check that delimiters in paren phrases \" +", "+                 \"are usually ignored\",", "+                 5,", "+                 _doc.findPrevDelimiter(14, delimiters1));", "+    ", "+    _setDocText(\"foo();\\nfor(;;)\\n\");", "+    assertEquals(\"Check that delimiters in paren phrases \" +", "+                 \"can be detected\",", "+                 12,", "+                 _doc.findPrevDelimiter(14, delimiters1, false));", "+    ", "-\t\t DefinitionsDocument.ERROR_INDEX, ", "-\t\t _doc.findPrevDelimiter(20, delimiters2)); ", "+                 DefinitionsDocument.ERROR_INDEX, ", "+                 _doc.findPrevDelimiter(20, delimiters2)); ", "-\t\t 0,", "-\t\t _doc.findPrevDelimiter(20, delimiters3));", "+                 0,", "+                 _doc.findPrevDelimiter(20, delimiters3));", "-\t\t \"it is at cursor's position\",", "-\t\t DefinitionsDocument.ERROR_INDEX,", "-\t\t _doc.findPrevDelimiter(5, delimiters1));", "+                 \"it is at cursor's position\",", "+                 DefinitionsDocument.ERROR_INDEX,", "+                 _doc.findPrevDelimiter(5, delimiters1));", "-\t\t 17,", "-\t\t _doc.findPrevDelimiter(19, delimiters1));", "+                 17,", "+                 _doc.findPrevDelimiter(19, delimiters1));", "-\t\t 13,", "-\t\t _doc.findPrevDelimiter(17, delimiters1));", "+                 13,", "+                 _doc.findPrevDelimiter(17, delimiters1));", "-\t\t 5,", "-\t\t _doc.findPrevDelimiter(13, delimiters1));", "-", "+                 5,", "+                 _doc.findPrevDelimiter(13, delimiters1));", "+    ", "-\t\t \"after call to findPrevDelimiter\",", "-\t\t reducedModelPos,", "-\t\t _doc.getReduced().absOffset());", "+                 \"after call to findPrevDelimiter\",", "+                 reducedModelPos,", "+                 _doc.getReduced().absOffset());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ebca23ea0538e2a7921b7a32531c8d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/IndentHelperTest.java", "commitBeforeChange": "8b24a954c4ca31d0bfd4e6cf29968bdfd85074dd", "commitAfterChange": "7a16360ed3db92a5068288b3b626cc549d236342", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testFindPrevDelimiter() throws BadLocationException", "signatureAfterChange": "   public void testFindPrevDelimiter() throws BadLocationException", "diff": ["+    // Used to test finding delimiters that can be confused with comments", "+    char[] delimiters4 = {'/', '*'};", "+    ", "+    _setDocText(\"foo *\\n\" +", "+                \"// comment\\n\" +", "+                \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "+                 \"when delimiters include * and / (1)\",", "+                 4,", "+                 _doc.findPrevDelimiter(17, delimiters4));", "+    _setDocText(\"foo /\\n\" +", "+                \"/* comment */\\n\" +", "+                \"bar\\n\");", "+    assertEquals(\"Check that findprevDelimiter ignores comments even\" +", "+                 \"when delimiters include * and / (2)\",", "+                 4,", "+                 _doc.findPrevDelimiter(17, delimiters4));", "+", "+    ", "+"]}], "num": 9562}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3bc86d9b7648ad88d4a0ed4b5ddee51", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "995b8be53fb187887844d22ea778fd69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class visit(ConditionalExpression node)", "diff": ["-    Node n1 = node.getIfTrueExpression();", "-    Node n2 = node.getIfFalseExpression();", "-    Class c1 = n1.acceptVisitor(this);", "-    Class c2 = n2.acceptVisitor(this);", "+    Expression exp1 = node.getIfTrueExpression();", "+    Expression exp2 = node.getIfFalseExpression();", "+    Class c1 = exp1.acceptVisitor(this);", "+    Class c2 = exp2.acceptVisitor(this);", "+    // unbox a boxing type, except when the boxing type is ", "+    // Boolean and the other is not boolean", "+    if (_isBoxingType(c1) && c2.isPrimitive()) {", "+      if (!(c1 == Boolean.class && c2 != boolean.class)) {", "+        exp1 = _unbox(exp1, c1);", "+        c1 = _correspondingPrimType(c1).getValue();", "+        node.setIfTrueExpression(exp1);", "+      }", "+    }", "+    else if (_isBoxingType(c2) && c1.isPrimitive()) {", "+      if (!(c2 == Boolean.class && c1 != boolean.class)) {", "+        exp2 = _unbox(exp2, c2);", "+        c2 = _correspondingPrimType(c2).getValue();", "+        node.setIfFalseExpression(exp2);", "+      }", "+    }", "+    ", "+        // originally set to throw an error, this case now ", "+        // simply returns Object, the lowest common type", "+        ec = Object.class;", "+      }", "+    }", "+    else if (c1 == void.class || c2 == void.class) {", "+      throw new ExecutionError(\"incompatible.types\", node);", "+    }", "+    else if (c1 == boolean.class || c2 == boolean.class ||", "+             c1 == Boolean.class || c2 == Boolean.class) {", "+      if ((c1 == boolean.class && c2.isPrimitive()) || ", "+          (c2 == boolean.class && c1.isPrimitive())) {", "+        // box both", "+        node.setIfTrueExpression (_box(exp1, _correspondingRefType(c1)));", "+        node.setIfFalseExpression(_box(exp2, _correspondingRefType(c2)));", "+        ec = Object.class;", "+      }", "+      else if (c1 == Boolean.class && c2.isPrimitive()) {", "+        // box c2", "+        node.setIfFalseExpression(_box(exp2, _correspondingRefType(c2)));", "+        ec = Object.class;", "+      }", "+      else if (c2 == Boolean.class && c1.isPrimitive()) {", "+        // box c1", "+        node.setIfTrueExpression(_box(exp1, _correspondingRefType(c1)));", "+        ec = Object.class;", "+      }", "+      else if (c1 == boolean.class && _isBoxingType(c2)) {", "+        // box c1", "+        node.setIfTrueExpression(_box(exp1, Boolean.class));", "+        ec = Object.class;", "+      }", "+      else if (c2 == boolean.class && _isBoxingType(c1)) {", "+        // box c2", "+        node.setIfFalseExpression(_box(exp2, Boolean.class));", "+        ec = Object.class;", "+      }", "+      else {", "-    } ", "-    else if (c1 == boolean.class || c2 == boolean.class ||", "-             c1 == void.class    || c2 == void.class) {", "-      throw new ExecutionError(\"incompatible.types\", node);", "-             n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "-      Number n = (Number) n1.getProperty(NodeProperties.VALUE);", "+             exp1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "+      Number n = (Number) exp1.getProperty(NodeProperties.VALUE);", "-               n2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "-      Number n = (Number)n2.getProperty(NodeProperties.VALUE);", "+               exp2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "+      Number n = (Number)exp2.getProperty(NodeProperties.VALUE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19a8b16d61b92bf9fdb509abc4cf9a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class visit(ConditionalExpression node)", "diff": ["+    // Get the type of the conidition expression", "+    Expression condExp = node.getConditionExpression();", "+    Class type = condExp.acceptVisitor(this);", "+    ", "-    if (node.getConditionExpression().acceptVisitor(this) != boolean.class) {", "+    if (type != boolean.class && type != Boolean.class) {", "+    // Auto-unbox, if necessary", "+    if (type == Boolean.class) {", "+      node.setConditionExpression(_unbox(condExp, type));", "+    }", "+", "-    Node  n1 = node.getIfTrueExpression();", "-    Node  n2 = node.getIfFalseExpression();", "+    Node n1 = node.getIfTrueExpression();", "+    Node n2 = node.getIfFalseExpression();", "+    // See if the expression is typable", "-    } else if (c1 == null) {", "+    } ", "+    else if (c1 == null) {", "-    } else if (c2 == null) {", "+    }", "+    else if (c2 == null) {", "-    } else if (!c1.isPrimitive() && !c2.isPrimitive()) {", "+    }", "+    else if (!c1.isPrimitive() && !c2.isPrimitive()) {", "-      } else if (c2.isAssignableFrom(c1)) {", "+      }", "+      else if (c2.isAssignableFrom(c1)) {", "-      } else {", "+      }", "+      else {", "-    } else if (c1 == boolean.class || c2 == boolean.class ||", "-               c1 == void.class    || c2 == void.class) {", "+    } ", "+    else if (c1 == boolean.class || c2 == boolean.class ||", "+             c1 == void.class    || c2 == void.class) {", "-    } else if ((c1 == short.class && c2 == byte.class) ||", "-               (c1 == byte.class  && c2 == short.class)) {", "+    }", "+    else if ((c1 == short.class && c2 == byte.class) ||", "+             (c1 == byte.class  && c2 == short.class)) {", "-    } else if ((c2 == byte.class || c2 == short.class || c2 == char.class) &&", "-               n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "-      Number n = (Number)n1.getProperty(NodeProperties.VALUE);", "+    }", "+    else if ((c2 == byte.class || c2 == short.class || c2 == char.class) &&", "+             n1.hasProperty(NodeProperties.VALUE) && c1 == int.class) {", "+      Number n = (Number) n1.getProperty(NodeProperties.VALUE);", "-        } else {", "+        }", "+        else {", "-      } else if (n.intValue() == n.shortValue()) {", "+      } ", "+      else if (n.intValue() == n.shortValue()) {", "-      } else {", "+      }", "+      else {", "-    } else if ((c1 == byte.class || c1 == short.class || c1 == char.class) &&", "+    } ", "+    else if ((c1 == byte.class || c1 == short.class || c1 == char.class) &&", "-        } else {", "+        } ", "+        else {", "-      } else if (n.intValue() == n.shortValue()) {", "+      } ", "+      else if (n.intValue() == n.shortValue()) {", "-      } else {", "+      }", "+      else {", "-    } else if (c1 == double.class || c2 == double.class) {", "+    } ", "+    else if (c1 == double.class || c2 == double.class) {", "-    } else if (c1 == float.class || c2 == float.class) {", "+    }", "+    else if (c1 == float.class || c2 == float.class) {", "-    } else if (c1 == long.class || c2 == long.class) {", "+    } ", "+    else if (c1 == long.class || c2 == long.class) {", "-    } else {", "+    }", "+    else {"]}], "num": 29562}
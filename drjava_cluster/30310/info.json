{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7d9a2a789ae2c54c220af9beb8b9799", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "136508eb198362f59177e4f6afbb9204", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,      IncompatibleThreadStateException, AbsentInformationException,      InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,      IncompatibleThreadStateException, AbsentInformationException,      InvocationException, DebugException", "diff": ["+      if( printMessages ) System.out.println(\"Iterating through vars\");        ", "-      if( printMessages ) DrJava.consoleOut().println(\"Copying \" + localVar.name());", "-      List args = new LinkedList();", "-      args.add(_vm.mirrorOf(localVar.name()));", "-      if( printMessages ) DrJava.consoleOut().println(\"Getting getVariableMethod()\");", "-      if( printMessages ) DrJava.consoleOut().println(\"Invoking \" + method2Call.name());", "-      Value v = interpreter.invokeMethod(threadRef, method2Call, args, ", "-                                         ObjectReference.INVOKE_SINGLE_THREADED);", "-      if (v != null) {", "-        v = _convertToActualType(threadRef, localVar, v);", "+      ", "+      // invokeMethod would throw an ObjectCollectedException if the StringReference ", "+      // declared by _vm.mirrorOf(name) had been garbage collected before ", "+      // invokeMethod could execute. This happened infrequently so by trying this", "+      // multiple times, the chance of failure each time should be acceptably low.", "+      ", "+      int tries = 0;", "+      while (tries < MAXINVOKETRIES) {    ", "+        List args = new LinkedList();          ", "+        args.add(_vm.mirrorOf(localVar.name()));", "+        try {", "+          Value v = interpreter.invokeMethod(threadRef, method2Call, args, ", "+                                             ObjectReference.INVOKE_SINGLE_THREADED);", "+          if (v != null) {", "+            v = _convertToActualType(threadRef, localVar, v);", "+          }", "+          frame = threadRef.frame(0);           ", "+          frame.setValue(localVar, v);", "+          break;", "+        }", "+        catch (ObjectCollectedException oce) {", "+          if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "+          tries++;", "+        }        ", "+        catch (ClassNotLoadedException cnle) {", "+          printMessage(\"Could not update the value of '\" + localVar.name() + \"' (class not loaded)\");", "+          break;", "+        }", "-      frame = threadRef.frame(0);", "-      frame.setValue(localVar, v);", "+      if (tries >= MAXINVOKETRIES)", "+        throw new DebugException(\"The value of the variable: \" + localVar.name() + \" could not be obtained from interpreterJVM\");", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "391029ee38521625b3ad1bf766ea31f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "fb8ddcbfd71bd75d2b307b4e83f7a834ec364082", "commitAfterChange": "be84679bc73e85f88d6958fbfdf8b35be73855ab", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                 ThreadReference threadRef)      throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                 ThreadReference threadRef)      throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-    LinkedList args = new LinkedList();", "-    args.add(_vm.mirrorOf(interpreterName)); // make the String a JDI Value", "-    if( printMessages ) { ", "-      System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-      System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-    }", "-    ObjectReference tmpInterpreter = (ObjectReference)", "-      _interpreterJVM.invokeMethod(threadRef, m, args, ", "-                                   ObjectReference.INVOKE_SINGLE_THREADED);", "-    if( printMessages ) System.out.println(\"Returning...\");", "-    return tmpInterpreter;", "+    // invokeMethod would throw an ObjectCollectedException if the StringReference ", "+    // declared by _vm.mirrorOf(name) had been garbage collected before ", "+    // invokeMethod could execute. This happened infrequently so by trying this", "+    // multiple times, the chance of failure each time should be acceptably low.", "+    ", "+    int tries = 0;", "+    while (tries < MAXINVOKETRIES) {      ", "+      LinkedList args = new LinkedList();", "+      args.add(_vm.mirrorOf(interpreterName)); // make the String a JDI Value", "+      if( printMessages ) { ", "+        System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+        System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+      }", "+      ", "+      try {", "+        ObjectReference tmpInterpreter = (ObjectReference) _interpreterJVM.invokeMethod(threadRef, m, args, ", "+                                     ObjectReference.INVOKE_SINGLE_THREADED);", "+        if( printMessages ) System.out.println(\"Returning...\");        ", "+        return tmpInterpreter;", "+      }", "+      catch (ObjectCollectedException oce) {", "+        tries++;", "+      }", "+    }", "+    throw new DebugException(\"The debugInterpreter: \" + interpreterName + \" could not be obtained from interpreterJVM\");", "+    "]}], "num": 30310}
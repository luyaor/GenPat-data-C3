{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e35d32f7874094d81994bc45f6b58b30", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f4633c30ef402ab03a65e42dab066d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "      public void testNoPrefix() throws BadLocationException", "diff": ["-  public void testNoPrefix() throws BadLocationException", "-  {", "+  public void testNoPrefix() throws BadLocationException {", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "+//    System.err.println(\"****** Starting test that fails ******\");", "+    assertTrue(\"START starts one-line comment.\", ! rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", ! rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", ! rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", ! rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside javadoc comment.\", ! rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes javadoc comment.\", ! rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts multi-line comment.\", rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", ! rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", ! rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6530ace2336aa17e78f6ab15d27dc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionBraceIsParenOrBracketTest.java", "commitBeforeChange": "1f696bba6b9c3de27a02950134495c6a06573bab", "commitAfterChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testParen() throws BadLocationException", "signatureAfterChange": "          public void testParen() throws BadLocationException", "diff": ["-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i));     ", "+        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i));     ", "+        assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, i, Indenter.OTHER));", "-        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i));     ", "+        assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, i, Indenter.OTHER));", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0));     ", "-      assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7));     ", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8));     ", "-      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30));     ", "-      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1));     ", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, 0, Indenter.OTHER));", "+      assertTrue(\"START has no brace\", !_rule.applyRule(_doc, 7, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 8, Indenter.OTHER));", "+      assertTrue(\"START's brace is an open paren.\", _rule.applyRule(_doc, 30, Indenter.OTHER));", "+      assertTrue(\"START has no brace.\", !_rule.applyRule(_doc, _text.length() - 1, Indenter.OTHER));"]}], "num": 9633}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c8fc0fe99887e152d67985d98d0ba3f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32f3ae518e76193c9779c992ee854a21", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "2e0841eedc488bc59bd976576cad4ea91d3f46bd", "commitAfterChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static String replaceVariables(String str, Map<String,Properties> props)", "signatureAfterChange": "   public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter)", "diff": ["-  public static String replaceVariables(String str, Map<String,Properties> props) {", "+  public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter) {", "-      else if (str.charAt(pos)=='$') {", "+      else if ((str.charAt(pos)=='$')) {", "-        for(Map.Entry<String, Properties> table: props.entrySet()) {", "-          Enumeration<?> e = table.getValue().propertyNames();", "-          while(e.hasMoreElements()) {", "-            String key = (String)e.nextElement();", "-            int endPos = pos + key.length() + 3;", "-            if (str.substring(pos, Math.min(str.length(), endPos)).equals(\"${\"+key+\"}\")) {", "-              // found property name", "-              // replace \"${property.name}\" with the value of the property, e.g. /home/user", "-              String value = table.getValue().getProperty(key);", "-              str = str.substring(0, pos) + value + str.substring(endPos);", "-              // advance to the last character of the value", "-              pos = pos + value.length() - 1;", "-              break;", "+        if ((pos<str.length()-1) && (str.charAt(pos+1)=='{')) {", "+          int nextClose = str.indexOf('}',pos+1);", "+          if (nextClose>=0) {", "+            String key = str.substring(pos+2, nextClose);", "+            // LOG.log(\"\\tkey = '\"+key+\"'\");", "+            for(String category: props.getCategories()) {", "+              // LOG.log(\"\\ttrying category '\"+category+\"'\");", "+              DrJavaProperty p = props.getProperty(category, key);", "+              if (p!=null) {", "+                // found property name", "+                // replace \"${property.name}\" with the value of the property, e.g. /home/user", "+                String s = getter.apply(p);", "+                str = str.substring(0, pos) + s + str.substring(nextClose+1);", "+                // advance to the last character of the value", "+                pos = nextClose;", "+                break;", "+              }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd21e583cc9703ac3d5e77cc14028129", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileBuilder.java", "commitBeforeChange": "314c962d7f6ed2c6b00f5edc6e764b582b016016", "commitAfterChange": "3b2b8c4279d3d3c19a0254256362d4d46aeeddaf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private void makeEntries(StringBuffer buffer, Vector<File> files, String roottag, boolean checkrelpath)", "signatureAfterChange": "   private String encodeDocFile(DocFile df, String prefix, boolean relative) throws IOException", "diff": ["-  ", "-  private void makeEntries(StringBuffer buffer, Vector<File> files, String roottag, boolean checkrelpath)", "-  {", "-    buffer.append(\"(\" + roottag + \"\\n\");", "-    ", "-    for(int i = 0; i<files.size(); i++)", "-    {", "-      //System.out.println(files.get(i).getName());", "-      try", "-      {", "-        String path = files.elementAt(i).getCanonicalPath();", "-        path = path.replace('\\\\', '/');", "-        if(path.startsWith(_projectPath) || !checkrelpath)", "-        {", "-          if(checkrelpath)", "-          {", "-            path = path.substring(_projectPath.length());", "-          }", "-          buffer.append(\"  (\" + path + \")\\n\");", "-        }", "-      catch(IOException e)", "-      {", "-      ", "-    buffer.append(\")\\n\");", "+   */", "+  private String encodeDocFile(DocFile df, String prefix, boolean relative) throws IOException {", "+    String ret = \"\";", "+    String path;", "+    if (relative) {", "+      path = makeRelative(df);", "+    }", "+    else {", "+      path = df.getCanonicalPath();", "+    }", "+    ret += prefix + \"(file (name \" + convertToLiteral(path) + \")\";", "+    ", "+    Pair<Integer,Integer> p1 = df.getSelection();", "+    Pair<Integer,Integer> p2 = df.getScroll();", "+    boolean active = df.isActive();", "+    ", "+    // Add prefix to the next line if any tags exist", "+    if (p1 != null || p2 != null || active) {", "+      ret += \"\\n\" + prefix + \"      \";", "+    }", "+    // The next three tags go on the same line (if they exist)", "+    if (p1 != null) {", "+      ret += \"(select \" + p1.getFirst() + \" \" + p1.getSecond() + \")\";", "+    }", "+    if (p2 != null) {", "+      ret += \"(scroll \" + p2.getFirst() + \" \" + p2.getSecond() + \")\";", "+    }", "+    if (active) {", "+      ret += \"(active)\";", "+    }", "+    // the next tag goes on the next line if at all", "+    String pack = df.getPackage();", "+    if (pack != null) {", "+      ret += \"\\n\" + prefix + \"      \"; // add prefix", "+      ret += \"(package \" + pack + \")\";", "+    }", "+    ", "+    ret += \")\"; // close the file expression", "+    ", "+    return ret;", "+  }"]}], "num": 3823}
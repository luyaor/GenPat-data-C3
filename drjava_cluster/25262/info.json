{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a8026395a6f08241e601b06e8cff6e8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c10fbafd4e8be061d005a30ae021bd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "commitAfterChange": "cf5f5e0733e09b37dba594527997b94724b4e6bf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected void abortActionPerformed(ActionEvent e)", "signatureAfterChange": "\r   protected void abortActionPerformed(ActionEvent e)", "diff": ["-    * @param e action event performed by user, or null if aborted due to problem */", "-  protected void abortActionPerformed(ActionEvent e) {", "-    if (_is!=null) {", "-      try {", "-        _is.close();", "-      }", "-      catch(IOException ioe) { /* ignore, just stop polling */ }", "-      _is = null;", "-      updateButtons();", "-    }", "-    if (_erris!=null) {", "-      try {", "-        _erris.close();", "-      }", "-      catch(IOException ioe) { /* ignore, just stop polling */ }", "-      _erris = null;", "-      updateButtons();", "-    }", "-    if (_p!=null) {", "-      _p.destroy();", "-      _p = null;", "-    }", "-    updateText();", "-  }", "+    * @param e action event performed by user, or null if aborted due to problem */\r", "+  protected void abortActionPerformed(ActionEvent e) {    \r", "+    _abortButton.setEnabled(false);\r", "+    _updateNowButton.setEnabled(false);\r", "+    _runAgainButton.setEnabled(false);\r", "+    // spin this off in a separate thread so the event thread is free\r", "+    new Thread(new Runnable() {\r", "+      public void run() {\r", "+        if (_is!=null) {\r", "+          try {\r", "+            _is.close();\r", "+          }\r", "+          catch(IOException ioe) { /* ignore, just stop polling */ }\r", "+          _is = null;\r", "+          Utilities.invokeLater(new Runnable() {\r", "+            public void run() { updateButtons(); } });          \r", "+        }\r", "+        if (_erris!=null) {\r", "+          try {\r", "+            _erris.close();\r", "+          }\r", "+          catch(IOException ioe) { /* ignore, just stop polling */ }\r", "+          _erris = null;\r", "+          Utilities.invokeLater(new Runnable() {\r", "+            public void run() { updateButtons(); } });\r", "+        }\r", "+        if (_p!=null) {\r", "+          _p.destroy();\r", "+          _p = null;\r", "+        }\r", "+        Utilities.invokeLater(new Runnable() {\r", "+          public void run() { updateText(); updateButtons(); } });\r", "+        _abortMonitor.set();\r", "+      }\r", "+    }).start();\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dea4e77f47b1b57a2238200b86c5ebf0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-   */", "-  public void startInterpreterJVM() {", "-    if (isStartupInProgress() || isInterpreterRunning()) {", "-      return;", "-    }", "-", "-    try {", "-      invokeSlave();", "-    }", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "-  }", "+   */", "+  public void restartInterpreterJVM() {", "+    synchronized(this) {", "+     if (_startupInProgress) {", "+        return;", "+      }", "+", "+      _startupInProgress = true;", "+", "+      killInterpreter();", "+", "+      String className = InterpreterJVM.class.getName();", "+      String[] args = new String[] { getIdentifier() };", "+      try {", "+        //System.err.println(\"started interpreter jvm\");", "+        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "+        ", "+        // Start a thread to wait for the interpreter to die and to fire", "+        // off a new one (and notify model) when it happens", "+        Thread thread = new Thread() {", "+          public void run() {", "+            try {", "+              int status = _interpreterProcess.waitFor();", "+              restartInterpreterJVM();", "+              _model.replCalledSystemExit(status);", "+            }", "+            catch (InterruptedException ie) {", "+              throw new edu.rice.cs.util.UnexpectedException(ie);", "+            }", "+          }", "+        };", "+", "+        thread.start();", "+      }", "+      catch (IOException ioe) {", "+        _threwException(ioe);", "+      }", "+    }", "+  }"]}], "num": 25262}
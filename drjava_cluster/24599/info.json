{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af192c2b94314d2a84b50e631177c69c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2bb3d3c4b544307005d5378b194f9f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public TypeData forNumericBinaryExpressionOnly(NumericBinaryExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forNumericBinaryExpressionOnly(NumericBinaryExpression that, TypeData left_result, TypeData right_result)", "diff": ["-        !left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        !left_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", that);", "+      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary\" + ", "+                \" Operator (*, /, -, %) to it\", that);", "-        !right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "+        !right_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary Operator (*, /, -, %) to it\", that);", "+      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Numeric Binary \" + ", "+                \"Operator (*, /, -, %) to it\", that);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6444b6a1b183e68d29607cfa2c112b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forComparisonExpressionOnly(ComparisonExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */", "+    */", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "-      return null;", "-    }", "-", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) return null;", "-    if (!left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    if (!left_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      _addError(\"The left side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator\" +", "+                \" (<, >; <=, >=) to it\", that);", "-    if (!right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) {", "-      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator (<, >; <=, >=) to it\", that);", "+    if (!right_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      _addError(\"The right side of this expression is not a number.  Therefore, you cannot apply a Comparison Operator\" +", "+                \" (<, >; <=, >=) to it\", that);"]}], "num": 24599}
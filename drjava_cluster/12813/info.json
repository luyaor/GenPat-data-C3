{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "196d62404b84155c771c27952ed70e72", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5572505331c6f83a04f006e8deca655a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "885cfecca904bc390539dbda728502710df6c2d9", "commitAfterChange": "486e06f49cab17669850c6f2af5b6414d0649d5d", "methodNumberBeforeChange": 497, "methodNumberAfterChange": 497, "signatureBeforeChange": "   void debuggerAutomaticTrace()", "signatureAfterChange": "   void debuggerAutomaticTrace()", "diff": ["-    if(isDebuggerReady() && !_model.getDebugger().isAutomaticTraceEnabled()) {", "-      try {", "-        int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "-        ", "-        _automaticTraceTimer = new Timer(rate, new ActionListener() {", "-          public void actionPerformed(ActionEvent e) {", "-            if (_model.getDebugger().isAutomaticTraceEnabled()) {", "-              // hasn't been disabled in the meantime", "-              debuggerStep(Debugger.StepType.STEP_INTO);", "+    if(isDebuggerReady())  {", "+      if(!_model.getDebugger().isAutomaticTraceEnabled()) {", "+        try {", "+          int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "+          ", "+          _automaticTraceTimer = new Timer(rate, new ActionListener() {", "+            public void actionPerformed(ActionEvent e) {", "+              if (_model.getDebugger().isAutomaticTraceEnabled()) {", "+                // hasn't been disabled in the meantime", "+                debuggerStep(Debugger.StepType.STEP_INTO);", "+              }", "-          }", "-        });", "-        _automaticTraceTimer.setRepeats(false);", "-        _model.getDebugger().setAutomaticTraceEnabled(true);", "-        debuggerStep(Debugger.StepType.STEP_INTO);", "+          });", "+          _automaticTraceTimer.setRepeats(false);", "+          _model.getDebugger().setAutomaticTraceEnabled(true);", "+          _debugPanel.setAutomaticTraceButtonText();", "+          debuggerStep(Debugger.StepType.STEP_INTO);", "+        }", "+        catch (IllegalStateException ise) {", "+          // This may happen if the user if stepping very frequently,", "+          // and is even more likely if they are using both hotkeys", "+          // and UI buttons. Ignore it in this case.", "+          // Hopefully, there are no other situations where", "+          // the user can be trying to step while there are no", "+          // suspended threads.", "+        }        ", "-      catch (IllegalStateException ise) {", "-        // This may happen if the user if stepping very frequently,", "-        // and is even more likely if they are using both hotkeys", "-        // and UI buttons. Ignore it in this case.", "-        // Hopefully, there are no other situations where", "-        // the user can be trying to step while there are no", "-        // suspended threads.", "+      else {", "+        _model.getDebugger().setAutomaticTraceEnabled(false);", "+        _debugPanel.setAutomaticTraceButtonText();", "+        if (_automaticTraceTimer!=null) _automaticTraceTimer.stop();", "-    }", "+    }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c0792bf080569551b1dd6ce1a8446d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "73f217e0c6b0ae75f2fc2cd1e1de44ad543f3ec0", "commitAfterChange": "0dc7e614bba000cf5b59051fc409d9851d24e995", "methodNumberBeforeChange": 515, "methodNumberAfterChange": 515, "signatureBeforeChange": "   void debuggerAutomaticTrace()", "signatureAfterChange": "   void debuggerAutomaticTrace()", "diff": ["+    _log.log(\"debuggerAutomaticTrace(): isDebuggerReady() = \"+isDebuggerReady()); ", "-        try {", "-          int rate = DrJava.getConfig().getSetting(OptionConstants.AUTO_STEP_RATE);", "-          ", "-          _automaticTraceTimer = new Timer(rate, new ActionListener() {", "-            public void actionPerformed(ActionEvent e) {", "-              _debugStepTimer.stop();", "-              if (_model.getDebugger().isAutomaticTraceEnabled()) {", "-                // hasn't been disabled in the meantime", "-                debuggerStep(Debugger.StepType.STEP_INTO);", "-//                _debugStepTimer.restart();  // _debugStepTimer prints \"Stepping...\" when timer expires", "-              }", "-            }", "-          });", "-          _automaticTraceTimer.setRepeats(false);", "-          _model.getDebugger().setAutomaticTraceEnabled(true);", "-          _debugPanel.setAutomaticTraceButtonText();", "-          debuggerStep(Debugger.StepType.STEP_INTO);", "-          _debugStepTimer.stop();", "-        }", "-        catch (IllegalStateException ise) {", "-          /* This may happen if the user if stepping very frequently, and is even more likely if they are using both ", "-           * hotkeys and UI buttons. Ignore it in this case. Hopefully, there are no other situations where the user ", "-           * can be trying to step while there are no suspended threads. */", "-        }        ", "+        enableAutomaticTrace();", "-        _model.getDebugger().setAutomaticTraceEnabled(false);", "-        _debugPanel.setAutomaticTraceButtonText();", "-        if (_automaticTraceTimer != null) _automaticTraceTimer.stop();", "+        disableAutomaticTrace();", "+  }"]}], "num": 12813}
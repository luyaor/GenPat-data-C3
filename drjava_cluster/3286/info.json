{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4aac798154fceb0337bc58b7ba538de4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35700eaafd8c8fac90e858f8d83e4860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-      ClassDef cd = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Lisa\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      ClassDef cd2 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Me\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Parent\", new Type[0]), new ReferenceType[0], ", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd2 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Me\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"Parent\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"2nd Error message should be correct\", \"Class Me cannot extend the final class Parent\", errors.get(1).getFirst());", "+      assertEquals(\"2nd Error message should be correct\", \"Class Me cannot extend the final class Parent\", ", "+                   errors.get(1).getFirst());", "-      ClassDef cd3 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"somewhereElse.Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], ", "-                                 new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd3 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"somewhereElse.Lisa\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                     new ReferenceType[0], ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"3rd error message should be correct\", \"The class hungry is package protected because there is no access specifier and cannot be accessed from somewhereElse.Lisa\", errors.get(2).getFirst());", "+      assertEquals(\"3rd error message should be correct\", ", "+                   \"The class hungry is package protected because there is no access specifier and cannot be \"", "+                     + \"accessed from somewhereElse.Lisa\", ", "+                   errors.get(2).getFirst());", "-      ClassDef cd4 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"somewhereElse.Lisa\"),", "-                                  new TypeParameter[0], new TypeVariable(SourceInfo.NO_INFO, \"super\"), new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superI\",  new Type[0])},", "-                                  new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd4 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"somewhereElse.Lisa\"),", "+                     new TypeParameter[0], new TypeVariable(NONE, \"super\"), ", "+                     new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superI\",  new Type[0])},", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"The 4th error message should be correct\", \"The interface superI is package protected because there is no access specifier and cannot be accessed from somewhereElse.Lisa\", errors.get(3).getFirst());", "+      assertEquals(\"The 4th error message should be correct\", ", "+                   \"The interface superI is package protected because there is no access specifier and cannot be \"", "+                     + \"accessed from somewhereElse.Lisa\", ", "+                   errors.get(3).getFirst());", "-      VariableDeclaration vd = new VariableDeclaration(SourceInfo.NO_INFO, _finalMav, new VariableDeclarator[] {new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"))});", "-      ExpressionStatement se = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 1)));      ", "-      BracedBody cbb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {se});", "-      ConstructorDef consD = new ConstructorDef(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"Jimes\"), _publicMav, new FormalParameter[0], new ReferenceType[0], cbb);", "-      BracedBody b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd, consD});", "-      ClassDef cd5 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Jimes\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd, consD}));", "+      VariableDeclarator vdec = ", "+        new UninitializedVariableDeclarator(NONE, new PrimitiveType(NONE, \"int\"), new Word(NONE, \"i\"));", "+      VariableDeclaration vd = new VariableDeclaration(NONE, _finalMav, new VariableDeclarator[] {vdec});", "+      ExpressionStatement se = ", "+        new ExpressionStatement(NONE, ", "+                                new SimpleAssignmentExpression(NONE, new SimpleNameReference(NONE, new Word(NONE, \"i\")), ", "+                                                                     new IntegerLiteral(NONE, 1)));      ", "+      BracedBody cbb = new BracedBody(NONE, new BodyItemI[] {se});", "+      ConstructorDef consD = ", "+        new ConstructorDef(NONE, new Word(NONE, \"Jimes\"), _publicMav, new FormalParameter[0], new ReferenceType[0], cbb);", "+      BracedBody b = new BracedBody(NONE, new BodyItemI[] {vd, consD});", "+      ClassDef cd5 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Jimes\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                     new ReferenceType[0], new BracedBody(NONE, new BodyItemI[] {vd, consD}));", "-      MethodData objMd = new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], sd2, cd);", "+      MethodData objMd = ", "+        new MethodData(\"java.lang.Object\", _publicMav, new TypeParameter[0], sd2, new VariableData[0], new String[0], ", "+                       sd2, cd);", "-      MethodData md = new MethodData(\"Jimes\", _publicMav, new TypeParameter[0], sd, new VariableData[0], new String[0], sd, cd);", "+      MethodData md = new MethodData(\"Jimes\", _publicMav, new TypeParameter[0], sd, new VariableData[0], new String[0], ", "+                                     sd, cd);", "-      // Test that if a class has a final field, that if there are no constructors, an error is thrown since the value of the field cannot be set.", "+      // Test that if a class has a final field, that if there are no constructors, an error is thrown since the value ", "+      // of the field cannot be set.", "-      b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {vd});", "-      cd5 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Jimes\"), new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[0], b);", "+      b = new BracedBody(NONE, new BodyItemI[] {vd});", "+      cd5 = new ClassDef(NONE, _publicMav, new Word(NONE, \"Jimes\"), new TypeParameter[0], ", "+                         new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                         new ReferenceType[0], b);", "-      assertEquals(\"The error message should be correct\", \"The final field i has not been initialized\", errors.get(4).getFirst());", "+      assertEquals(\"The error message should be correct\", \"The final field i has not been initialized\", ", "+                   errors.get(4).getFirst());", "-      ClassDef cd6 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]), new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd6 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"JimesH\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NONE, \"java.lang.Object\", new Type[0]), ", "+                     new ReferenceType[] {new ClassOrInterfaceType(NONE, \"java.lang.Runnable\", new Type[0])}, ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"JimesH implements the Runnable interface, which is not allowed at any language level\", errors.get(5).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"JimesH implements the Runnable interface, which is not allowed at any language level\", ", "+                   errors.get(5).getFirst());", "-      ClassDef cd7 = new ClassDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Hspia\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superSD\", new Type[0]), new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.String\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassDef cd7 = ", "+        new ClassDef(NONE, _publicMav, new Word(NONE, \"Hspia\"),", "+                     new TypeParameter[0], new ClassOrInterfaceType(NONE, \"superSD\", new Type[0]), ", "+                     new ReferenceType[] {new ClassOrInterfaceType(NONE, \"java.lang.String\", new Type[0])}, ", "+                     new BracedBody(NONE, new BodyItemI[0]));", "-      assertEquals(\"The error message should be correct\", \"java.lang.String is not an interface and thus cannot appear after the keyword 'implements' here.  Perhaps you meant to say 'extends'?\" , errors.get(6).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"java.lang.String is not an interface and thus cannot appear after the keyword 'implements' here.\"", "+                     + \"  Perhaps you meant to say 'extends'?\" , ", "+                   errors.get(6).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a178e9d2f57f76cb7fe15db5b7a14d9e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 282, "methodNumberAfterChange": 286, "signatureBeforeChange": "   private void _dissableJUnitActions()", "signatureAfterChange": "   private void _disableJUnitActions()", "diff": ["-  private void _dissableJUnitActions() {", "-    _compileProjectActionEnabled = _compileProjectAction.isEnabled();", "-    _compileAllActionEnabled = _compileAllAction.isEnabled();", "-    //_compileOpenProjectActionEnabled = _compileOpenProjectAction.isEnabled();", "-    _compileFolderActionEnabled = _compileFolderAction.isEnabled();", "-    _junitFolderActionEnabled = _junitFolderAction.isEnabled();", "-    _junitAllActionEnabled = _junitAllAction.isEnabled();", "-    _junitActionEnabled = _junitAction.isEnabled();", "-    _junitOpenProjectFilesActionEnabled = _junitOpenProjectFilesAction.isEnabled();", "-    //_junitProjectActionEnabled = _junitProjectAction.isEnabled();", "-    _cleanActionEnabled = _cleanAction.isEnabled();", "-    _projectPropertiesActionEnabled = _projectPropertiesAction.isEnabled();", "-    _runProjectActionEnabled = _runProjectAction.isEnabled();", "-    _runActionEnabled = _runAction.isEnabled();", "+  private void _disableJUnitActions() {", "+    // _compileProjectActionEnabled = _compileProjectAction.isEnabled();", "+    // _compileAllActionEnabled = _compileAllAction.isEnabled();", "+    //_compileFolderActionEnabled = _compileFolderAction.isEnabled();", "+    //_junitFolderActionEnabled = _junitFolderAction.isEnabled();", "+    //_junitAllActionEnabled = _junitAllAction.isEnabled();", "+    //_junitActionEnabled = _junitAction.isEnabled();", "+    //_junitOpenProjectFilesActionEnabled = _junitOpenProjectFilesAction.isEnabled();", "+    //_cleanActionEnabled = _cleanAction.isEnabled();", "+    //_projectPropertiesActionEnabled = _projectPropertiesAction.isEnabled();", "+    //_runProjectActionEnabled = _runProjectAction.isEnabled();", "-    _compileProjectAction.setEnabled(false);", "-    _compileAllAction.setEnabled(false);", "-    //_compileOpenProjectAction.setEnabled(false);", "-    _compileFolderAction.setEnabled(false);", "-    _junitFolderAction.setEnabled(false);", "-    _junitAllAction.setEnabled(false);", "-    _junitAction.setEnabled(false);", "-    _junitOpenProjectFilesAction.setEnabled(false);", "-    //_junitProjectAction.setEnabled(false);", "-    _cleanAction.setEnabled(false);", "-    _projectPropertiesAction.setEnabled(false);", "-    _runProjectAction.setEnabled(false);", "-    _runAction.setEnabled(false);", "+    // _compileProjectAction.setEnabled(false);", "+    //_compileAllAction.setEnabled(false);", "+    //_compileFolderAction.setEnabled(false);", "+    //_junitFolderAction.setEnabled(false);", "+    //_junitAllAction.setEnabled(false);", "+    //_junitAction.setEnabled(false);", "+    //_junitOpenProjectFilesAction.setEnabled(false);", "+    //_cleanAction.setEnabled(false);", "+    //_projectPropertiesAction.setEnabled(false);", "+    //_runProjectAction.setEnabled(false);", "+", "+    _compileProjectAction = _junit_compileProjectDecoratedAction = new DecoratedAction(_compileProjectAction, false);", "+    _compileAllAction = _junit_compileAllDecoratedAction = new DecoratedAction(_compileAllAction, false);", "+    _compileFolderAction = _junit_compileFolderDecoratedAction = new DecoratedAction(_compileFolderAction, false);", "+    _junitFolderAction = _junit_junitFolderDecoratedAction = new DecoratedAction(_junitFolderAction, false);", "+    _junitAllAction = _junit_junitAllDecoratedAction = new DecoratedAction(_junitAllAction, false);", "+    _junitAction = _junit_junitDecoratedAction = new DecoratedAction(_junitAction, false);", "+    _junitOpenProjectFilesAction = _junit_junitOpenProjectFilesDecoratedAction = new DecoratedAction(_junitOpenProjectFilesAction, false);", "+    _cleanAction = _junit_cleanDecoratedAction = new DecoratedAction(_cleanAction, false);", "+    _projectPropertiesAction = _junit_projectPropertiesDecoratedAction = new DecoratedAction(_projectPropertiesAction, false);", "+    _runProjectAction = _junit_runProjectDecoratedAction = new DecoratedAction(_runProjectAction, false);", "+    _runAction = _junit_runDecoratedAction = new DecoratedAction(_runAction, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cafe3b094e4ec99b99f640c7a7443746", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "97a825e752ef3da28458a0080f0990b0f0659788", "commitAfterChange": "3f50a00dbfaba534529de5a114a9d7c30612e9a7", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      public void testGranularUndo() throws BadLocationException", "signatureAfterChange": "      public void testGranularUndo() throws BadLocationException", "diff": ["-        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "-                                                 KeyEvent.VK_A, KeyEvent.CHAR_UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "-                                                 KeyEvent.VK_UNDEFINED, 'a'));", "-        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "-                                                 KeyEvent.VK_A, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), 0, KeyEvent.VK_A, UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'a'));", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), 0, KeyEvent.VK_A, UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                 KeyEvent.KEY_PRESSED,", "-                                                 (new Date()).getTime(),", "-                                                 0,", "-                                                 KeyEvent.VK_EXCLAMATION_MARK, KeyEvent.CHAR_UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                 KeyEvent.KEY_TYPED,", "-                                                 (new Date()).getTime(),", "-                                                 0,", "-                                                 KeyEvent.VK_UNDEFINED, '!'));", "-        defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                 KeyEvent.KEY_RELEASED,", "-                                                 (new Date()).getTime(),", "-                                                 0,", "-                                                 KeyEvent.VK_EXCLAMATION_MARK, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), 0, BANG, UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, '!'));", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), 0, BANG, UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                 KeyEvent.KEY_PRESSED,", "-                                                 (new Date()).getTime(),", "-                                                 InputEvent.SHIFT_MASK,", "-                                                 KeyEvent.VK_B, KeyEvent.CHAR_UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                 KeyEvent.KEY_TYPED,", "-                                                 (new Date()).getTime(),", "-                                                 0,", "-                                                 KeyEvent.VK_UNDEFINED, 'B'));", "-        defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                 KeyEvent.KEY_RELEASED,", "-                                                 (new Date()).getTime(),", "-                                                 InputEvent.SHIFT_MASK,", "-                                                 KeyEvent.VK_B, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), SHIFT, KeyEvent.VK_B, UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, 'B'));", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), SHIFT, KeyEvent.VK_B, UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_PRESSED, (new Date()).getTime(), 0,", "-                                                 KeyEvent.VK_9, KeyEvent.CHAR_UNDEFINED));", "-        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_TYPED, (new Date()).getTime(), 0,", "-                                                 KeyEvent.VK_UNDEFINED, '9'));", "-        defPane.processKeyEvent(new KeyEvent(defPane, KeyEvent.KEY_RELEASED, (new Date()).getTime(), 0,", "-                                                 KeyEvent.VK_9, KeyEvent.CHAR_UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), 0, KeyEvent.VK_9, UNDEFINED));", "+        defPane.processKeyEvent(new KeyEvent(defPane, TYPED, (new Date()).getTime(), 0, VK_UNDEF, '9'));", "+        defPane.processKeyEvent(new KeyEvent(defPane, RELEASED, (new Date()).getTime(), 0, KeyEvent.VK_9, UNDEFINED));", "+        _frame.validate();", "+    Utilities.clearEventQueue();", "-    final KeyEvent e = new KeyEvent(defPane, KeyEvent.KEY_PRESSED, 0, ks.getModifiers(), ks.getKeyCode(),", "-                                    KeyEvent.CHAR_UNDEFINED);", "+    final KeyEvent e = new KeyEvent(defPane, PRESSED, 0, ks.getModifiers(), ks.getKeyCode(), UNDEFINED);", "-    Utilities.invokeAndWait(new Runnable() { public void run() { defPane.processKeyEvent(e); } });", "+    Utilities.invokeAndWait(new Runnable() { ", "+      public void run() { ", "+      defPane.processKeyEvent(e); ", "+      _frame.validate();", "+      } ", "+    });", "+    Utilities.clearEventQueue();", "+         defPane.processKeyEvent(new KeyEvent(defPane, PRESSED, (new Date()).getTime(), ALT, KeyEvent.VK_Q, UNDEFINED));", "-                                                  KeyEvent.KEY_PRESSED,", "+                                                  TYPED,", "-                                                  InputEvent.ALT_MASK,", "-                                                  KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+                                                  ALT,", "+                                                  VK_UNDEF, 'Q'));", "-                                                  KeyEvent.KEY_TYPED,", "+                                                  RELEASED,", "-                                                  InputEvent.ALT_MASK,", "-                                                  KeyEvent.VK_UNDEFINED, 'Q'));", "-         defPane.processKeyEvent(new KeyEvent(defPane,", "-                                                  KeyEvent.KEY_RELEASED,", "-                                                  (new Date()).getTime(),", "-                                                  InputEvent.ALT_MASK,", "-                                                  KeyEvent.VK_Q, KeyEvent.CHAR_UNDEFINED));", "+                                                  ALT,", "+                                                  KeyEvent.VK_Q, UNDEFINED));", "+         _frame.validate();", "-    ", "+     Utilities.clearEventQueue();", "-     KeyEvent.KEY_PRESSED,", "+     PRESSED,", "-     KeyEvent.VK_UNDEFINED, KeyEvent.CHAR_UNDEFINED));", "+     VK_UNDEF, UNDEFINED));", "-     KeyEvent.KEY_TYPED,", "+     TYPED,", "-     KeyEvent.VK_UNDEFINED, 'a'));", "+     VK_UNDEF, 'a'));", "-     KeyEvent.KEY_RELEASED,", "+     RELEASED,", "-     KeyEvent.VK_UNDEFINED, KeyEvent.CHAR_UNDEFINED));", "+     VK_UNDEF, UNDEFINED));", "-     KeyEvent.KEY_PRESSED,", "+     PRESSED,", "-     KeyEvent.VK_BACK_SPACE, KeyEvent.CHAR_UNDEFINED));", "+     KeyEvent.VK_BACK_SPACE, UNDEFINED));", "-     KeyEvent.KEY_TYPED,", "+     TYPED,", "-     KeyEvent.VK_UNDEFINED, '\\010'));", "+     VK_UNDEF, '\\010'));", "-     KeyEvent.KEY_RELEASED,", "+     RELEASED,", "-     KeyEvent.VK_BACK_SPACE, KeyEvent.CHAR_UNDEFINED));", "+     KeyEvent.VK_BACK_SPACE, UNDEFINED));", "-     //                              KeyEvent.KEY_PRESSED,", "+     //                              PRESSED,", "-     KeyEvent.KEY_PRESSED,", "+     PRESSED,", "-     ks.getKeyCode(), KeyEvent.CHAR_UNDEFINED));", "+     ks.getKeyCode(), UNDEFINED));"]}], "num": 3286}
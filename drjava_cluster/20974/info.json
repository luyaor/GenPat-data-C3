{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3705a8934f3bf12826bcc741b9d7e488", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "637fd55bb7ae357beaa82868070e9886", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelListTest.java", "commitBeforeChange": "4cf68dc70458288095c944d37276893b11daf353", "commitAfterChange": "c22ae4a2b42306ce89775aaf2a5b300676337b0d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public void testCurrent()", "signatureAfterChange": "    public void testCurrent()", "diff": ["-    try {", "-      itFull.current();", "-      fail(\"Current call in initial position did not fail.\");", "-    }", "-    catch (RuntimeException e) {", "-      //This call was supposed to throw an exception", "-            assertEquals(\"current() throws exception when at end\",", "-                   e.getMessage(),", "-                   \"Attempt to call current on an iterator in the initial position\");", "-    }", "-    try {", "-      itFull.current();", "-      fail(\"Current call in final position did not fail.\");", "-    }", "-    catch (RuntimeException e) {", "-      //This call was supposed to throw an exception", "-      assertEquals(\"current() throws exception when at end\",", "-                   e.getMessage(),", "-                   \"Attempt to call current on an iterator in the final position\");", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef785af52e2d73a42b6959b3af0dbe6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "81f7bc68ef7285bacd5689ea0a54ea5647d9a1d8", "commitAfterChange": "12384109e03448701c98d404f37be617f6e32fee", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, AbsentInformationException,     InvocationException, DebugException", "diff": ["-      // invokeMethod would throw an ObjectCollectedException if the StringReference", "-      // declared by _vm.mirrorOf(name) had been garbage collected before", "-      // invokeMethod could execute. This happened infrequently so by trying this", "-      // multiple times, the chance of failure each time should be acceptably low.", "-      ", "-      int tries = 0;", "-      while (tries < MAXINVOKETRIES) {", "-        try {", "-          Value v = _getValueOfLocalVariable(localVar, threadRef);", "-          frame = threadRef.frame(0);", "-          frame.setValue(localVar, v);", "-          break;", "-        }", "-        catch (ObjectCollectedException oce) {", "-          if (printMessages) System.out.println(\"Got ObjectCollectedException\");", "-          tries++;", "-        }", "-        catch (ClassNotLoadedException cnle) {", "-          printMessage(\"Could not update the value of '\" + localVar.name() + \"' (class not loaded)\");", "-          break;", "-        }", "-        catch (InvalidTypeException ite) {", "-          printMessage(\"Could not update the value of '\" + localVar.name() + \"' (invalid type exception)\");", "-          break;", "-        }", "+      try {", "+        Value v = _getValueOfLocalVariable(localVar, threadRef);", "+        frame = threadRef.frame(0);", "+        frame.setValue(localVar, v);", "-      if (tries >= MAXINVOKETRIES) {", "-        throw new DebugException(\"The value of the variable: \" + localVar.name() + \" could not be obtained from interpreterJVM\");", "+      catch (ClassNotLoadedException cnle) {", "+        printMessage(\"Could not update the value of '\" + localVar.name() + \"' (class not loaded)\");", "+      }", "+      catch (InvalidTypeException ite) {", "+        printMessage(\"Could not update the value of '\" + localVar.name() + \"' (invalid type exception)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3b6bc2ba441752b7cbc4376eff8a154", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "77b9ea56fffd44f6aad237da0f14f4908138204c", "commitAfterChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "    private void _print()", "signatureAfterChange": "   abstract protected void _print();", "diff": ["-  private void _print() {", "-    try {", "-      _document.print();", "-    }", "-    catch (FileMovedException fme) {", "-      _mainFrame._showFileMovedError(fme);", "-    }", "-    catch (PrinterException e) {", "-      _showError(e, \"Print Error\", \"An error occured while printing.\");", "-    }", "-    catch (BadLocationException e) {", "-      _showError(e, \"Print Error\", \"An error occured while printing.\");", "-    }", "-  }", "+  /** Prints the document being previewed */", "+  abstract protected void _print();"]}], "num": 20974}
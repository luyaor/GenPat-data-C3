{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18d5aad03e91795f0481432a6efc9218", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "692756cfd5032b0da4b697d2dcbdb797", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "               public void testForInterfaceDef()", "signatureAfterChange": "               public void testForInterfaceDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      InterfaceDef id = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                                                                               new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      AbstractMethodDef amd2 = new AbstractMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                                                                               new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "+                                         new BracedBody(SourceInfo.NO_INFO, ", "-      InterfaceDef id2 = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"id\", new Type[0])}, ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      InterfaceDef id2 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"id\", new Type[0])}, ", "+                                         new BracedBody(SourceInfo.NO_INFO, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84720ff044565ce1fc651948bb5353cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "               public void xtestForInterfaceDef()", "signatureAfterChange": "               public void xtestForInterfaceDef()", "diff": ["-      AbstractMethodDef amd = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      AbstractMethodDef amd2 = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"),", "-                                                                                               new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "-      InterfaceDef id = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      AbstractMethodDef amd = new AbstractMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                                                                               new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      AbstractMethodDef amd2 = new AbstractMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], new PrimitiveType(SourceInfo.NO_INFO, \"int\"),", "+                                                                                               new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[0], new ReferenceType[0]);", "+      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"id\"), new TypeParameter[0], new ReferenceType[0], ", "+                                         new BracedBody(SourceInfo.NO_INFO, ", "-      InterfaceDef id2 = new InterfaceDef(JExprParser.NO_SOURCE_INFO, _publicMav, new Word(JExprParser.NO_SOURCE_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"id\", new Type[0])}, ", "-                                         new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      InterfaceDef id2 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"id2\"), new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"id\", new Type[0])}, ", "+                                         new BracedBody(SourceInfo.NO_INFO, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a31303854b50962f12098808f483536b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "         public void testforValueReturnStatementOnly()", "signatureAfterChange": "         public void testforValueReturnStatementOnly()", "diff": ["-      BracedBody bb1 = new BracedBody(JExprParser.NO_SOURCE_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(JExprParser.NO_SOURCE_INFO,", "-                                                                                 new BooleanLiteral(JExprParser.NO_SOURCE_INFO, true))});", "+      BracedBody bb1 = new BracedBody(SourceInfo.NO_INFO,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "+                                                                                 new BooleanLiteral(SourceInfo.NO_INFO, true))});", "-      BracedBody bb2 = new BracedBody(JExprParser.NO_SOURCE_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(JExprParser.NO_SOURCE_INFO,", "-                                                                                 new CharLiteral(JExprParser.NO_SOURCE_INFO, 'c'))});", "+      BracedBody bb2 = new BracedBody(SourceInfo.NO_INFO,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "+                                                                                 new CharLiteral(SourceInfo.NO_INFO, 'c'))});", "-      BracedBody bb3 = new BracedBody(JExprParser.NO_SOURCE_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(JExprParser.NO_SOURCE_INFO,", "-                                                                                 new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 1))});", "+      BracedBody bb3 = new BracedBody(SourceInfo.NO_INFO,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "+                                                                                 new IntegerLiteral(SourceInfo.NO_INFO, 1))});", "-      BracedBody bb4 = new BracedBody(JExprParser.NO_SOURCE_INFO,", "-                                      new BodyItemI[] { new ValueReturnStatement(JExprParser.NO_SOURCE_INFO,", "-                                                                                 new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"int\")))});", "+      BracedBody bb4 = new BracedBody(SourceInfo.NO_INFO,", "+                                      new BodyItemI[] { new ValueReturnStatement(SourceInfo.NO_INFO,", "+                                                                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\")))});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e42eb24c828860afae6ea102bb52c6f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "          public void testForForStatementOnly()", "signatureAfterChange": "          public void testForForStatementOnly()", "diff": ["-      Expression te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      UnparenthesizedExpressionList sel = new UnparenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[] {new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10))});", "-      ForStatement fs = new ForStatement(JExprParser.NO_SOURCE_INFO, sel, new NullLiteral(JExprParser.NO_SOURCE_INFO), new UnparenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0]), new EmptyStatement(JExprParser.NO_SOURCE_INFO));", "+      UnparenthesizedExpressionList sel = new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10))});", "+      ForStatement fs = new ForStatement(SourceInfo.NO_INFO, sel, new NullLiteral(SourceInfo.NO_INFO), new UnparenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]), new EmptyStatement(SourceInfo.NO_INFO));"]}], "num": 18651}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6add4dd7478eb92b0e2e924e2dda5d86", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1798ac57b0b5ab42d0a2daa3b3d1da44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerClassDef(InnerClassDef that, Data enclosing, String relName, String name)", "diff": ["-  protected void handleInnerClassDef(InnerClassDef that, Data data, String name) {", "-//    System.err.println(\"Processing InnerClassDef for \" + name);", "+  // and hoist this code into LanguageLevelVisitor", "+  protected void handleInnerClassDef(InnerClassDef that, Data enclosing, String relName, String name) {", "+//    System.err.println(\"Processing InnerClassDef for \" + name + \" defined in \" + enclosing.getName());", "+    ", "+    assert (enclosing instanceof SymbolData) || (enclosing instanceof MethodData);", "-    SymbolData sd = defineInnerSymbolData(that, name, data);", "-    if (sd != null) { // We have a symbol data to work with, so visit the body and augment", "-      that.getBody().visit(new ClassBodyIntermediateVisitor(sd, ", "+    SymbolData sd = defineInnerSymbolData(that, relName, name, enclosing);", "+    if (sd != null) { // We have a SymbolData to work with, so visit the body and augment", "+      that.getBody().visit(new ClassBodyIntermediateVisitor(sd,", "+                                                            sd.getName(),", "-                                                            _classNamesInThisFile, ", "-                                                            continuations));", "+                                                            _classesInThisFile, ", "+                                                            continuations,", "+                                                            fixUps));", "+      // The following methods are no-ops in FullJavaVisitor", "-    // Inner classes are not entered in _classesToBeParsed since they are parsed when their outer classes are parsed.", "+    // Inner classes are not entered in _classesInThisFile since they are parsed when their outer classes are parsed."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca9f66dbaf0db414c32d3ffd134324aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/FullJavaVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String name)", "signatureAfterChange": "   protected void handleInnerClassDef(InnerClassDef that, Data data, String relName, String name)", "diff": ["-  protected void handleInnerClassDef(InnerClassDef that, Data data, String name) {", "+  protected void handleInnerClassDef(InnerClassDef that, Data data, String relName, String name) {", "+    System.err.println(\"Processing InnerClassDef for \" + name + \" defined in \" + data.getName());", "+    ", "+    assert (data instanceof SymbolData) || (data instanceof MethodData);", "+//    assert (data instanceof SymbolData) ? data.getName().equals(_enclosingClassName) : true;", "+    ", "-    SymbolData sd = defineInnerSymbolData(that, name, data);", "-    if (sd != null) { //we have a symbol data to work with, so visit the body and augment", "-      that.getBody().visit(new ClassBodyFullJavaVisitor(sd, \"\", _file, _package, _importedFiles,", "-                                                        _importedPackages, _classNamesInThisFile, continuations));", "+    SymbolData sd = defineInnerSymbolData(that, relName, name, data);", "+    if (sd != null) { // We have a symbol data to work with, so visit the body and augment", "+", "+      that.getBody().visit(new ClassBodyFullJavaVisitor(sd, sd.getName(), _file, _package, _importedFiles,", "+                                                        _importedPackages, _classesInThisFile, continuations, fixUps));", "-    // Inner classes are not put into _classesToBeParsed since they are parsed whenever their outer classes are parsed.", "+    // Inner classes are not put into _classesInThisFile since they are parsed whenever their outer classes are parsed."]}], "num": 1678}
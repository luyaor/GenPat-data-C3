{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a18e82df23572e43b976f84ddbe275e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27d5d29ed9589e8af567b7ef385e232b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "eb2f4d24d131ca33e62f1ffad890a3a16f4cec82", "commitAfterChange": "32ba174b30cfff4f2c73188ded7fd810622e7e12", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public Class visit(ObjectMethodCall node)", "signatureAfterChange": "   public Class visit(ObjectMethodCall node)", "diff": ["-        node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { mn, s });", "-        throw new ExecutionError(\"no.such.method\", node);", "+        String sargs = \"\";", "+        for (int i = 0; i < cargs.length-1; i++) {", "+          sargs += cargs[i].getName() + \", \";", "+        }", "+        if (cargs.length > 0) {", "+          sargs += cargs[cargs.length-1].getName();", "+        }", "+        node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { mn, s, sargs });", "+        throw new ExecutionError(\"no.such.method.with.args\", node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e816102dbb48b9997766baf52c0cf0d0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "eb2f4d24d131ca33e62f1ffad890a3a16f4cec82", "commitAfterChange": "32ba174b30cfff4f2c73188ded7fd810622e7e12", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public Class visit(StaticMethodCall node)", "signatureAfterChange": "   public Class visit(StaticMethodCall node)", "diff": ["-      node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { s0, s1 });", "-      throw new ExecutionError(\"no.such.method\", node);", "+      String sargs = \"\";", "+      for (int i = 0; i < cargs.length-1; i++) {", "+        sargs += cargs[i].getName() + \", \";", "+      }", "+      if (cargs.length > 0) {", "+        sargs += cargs[cargs.length-1].getName();", "+      }", "+      node.setProperty(NodeProperties.ERROR_STRINGS, new String[] { s0, s1, sargs });", "+      throw new ExecutionError(\"no.such.method.with.args\", node);"]}], "num": 12795}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "243af6a32fc7d08b3fe3eab2390a0290", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5988ed138c05810d282366c9f673c938", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, String className, boolean isError, String fileName)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "diff": ["-  private JUnitError _makeJUnitError(TestFailure failure, String className, boolean isError, String fileName) {", "-   ", "+  private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,", "+                                     boolean isError, List<File> files) {", "+", "-    ", "-    StringWriter sWriter = new StringWriter();", "-    PrintWriter pWriter  = new PrintWriter(sWriter);", "-    ", "-    failure.thrownException().printStackTrace(pWriter);", "-        ", "+", "+    String testString = failedTest.toString();", "+    int firstIndex = testString.indexOf('(') + 1;", "+    int secondIndex = testString.indexOf(')');", "+    String className = testString.substring(firstIndex, secondIndex);", "+    int indexOfClass = classNames.indexOf(className);", "+    File file;", "+    if (indexOfClass != -1) {", "+      file = files.get(indexOfClass);", "+    }", "+    else {", "+      file = _jmc.getFileForClassName(className);", "+    }", "+", "+//    String ps = System.getProperty(\"file.separator\");", "+//    // replace periods with the System's file separator", "+//    className = StringOps.replace(className, \".\", ps);", "+//", "+//    // crop off the $ if there is one and anything after it", "+//    int indexOfDollar = className.indexOf('$');", "+//    if (indexOfDollar > -1) {", "+//      className = className.substring(0, indexOfDollar);", "+//    }", "+//", "+//    String filename = className + \".java\";", "+", "-      ", "-      return new JUnitError(new File(fileName), lineNum, 0, exception,", "-                            ! (failure.thrownException() instanceof AssertionFailedError),", "-                            testName, stackTrace);", "+    boolean isFailure = (failure.thrownException() instanceof AssertionFailedError) &&", "+      !classNameAndTest.equals(\"junit.framework.TestSuite$1.warning\");", "+    return new JUnitError(file, lineNum, 0, exception, !isFailure, testName, className, stackTrace);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f4b3ea6c75b5921be019279c35ff140", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "ecd8712b87b08f04e81a172c17c295c61485659a", "commitAfterChange": "e240585fa71c6cba067e4f383e2111594b5db4e4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private static FullVersion guessVersion(File f)", "signatureAfterChange": "      private static FullVersion guessVersion(File f)", "diff": ["-      // Couldn't find a good version number, so we'll just guess that it's the currently-running version", "-      // Useful where the tools.jar file is in an unusual custom location", "-      result = JavaVersion.CURRENT_FULL;", "+      JarFile jf = null;", "+      try {", "+        jf = new JarFile(f);", "+        Manifest mf = jf.getManifest();", "+        String v = mf.getMainAttributes().getValue(\"Created-By\");", "+        if (v!=null) {", "+          int space = v.indexOf(' ');", "+          if (space>=0) v = v.substring(0,space);", "+          result = JavaVersion.parseFullVersion(v);", "+        }", "+      }", "+      catch(IOException ioe) { result = null; }", "+      finally {", "+        try {", "+          if (jf!=null) jf.close();", "+        }", "+        catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+      }", "+      if (result == null || result.majorVersion().equals(JavaVersion.UNRECOGNIZED)) {", "+        // Couldn't find a good version number, so we'll just guess that it's the currently-running version", "+        // Useful where the tools.jar file is in an unusual custom location      ", "+        result = JavaVersion.CURRENT_FULL;", "+      }"]}], "num": 14224}
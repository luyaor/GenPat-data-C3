{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6fde5c6307c88be9db8bda65bb8dd61", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b464a3ad70cd8da64f045ea8657a03", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "12c7c1796a51c2e7ab4bd2410636b833aaf2c7dd", "commitAfterChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-  public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "+  public synchronized void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-", "-    for(GroupNode r: _roots){", "-      if(r.getFilter().accept(doc)) {", "+    ", "+    for (GroupNode r: _roots){", "+      if (r.getFilter().accept(doc)) {", "-    if(_root == null) {", "-      return;", "-    }", "-", "+    if (_root == null) return;", "-    while(tok.hasMoreTokens()) {", "+    while (tok.hasMoreTokens()) {", "-          this.expandPath(new TreePath(lastNode.getPath()));", "+        this.expandPath(new TreePath(lastNode.getPath()));", "-       // System.out.println(\"path2node contains pathSoFar\");", "+        // System.out.println(\"path2node contains pathSoFar\");", "-      ", "-      ", "+       ", "-//    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());", "+    //    _model.insertNodeInto(child, lastNode, lastNode.getChildCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebe7827c450b522420d0da5ea8fe549", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void addDocument(INavigatorItem doc, String path)", "diff": ["-   */", "-  public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-    GroupNode _root = null;", "-    ", "-      ", "-      for (GroupNode r: _roots){", "-      ", "+   */", "+  public void addDocument(INavigatorItem doc, String path) {", "+    ", "+    synchronized(_model) {", "+      ", "+      GroupNode root = null;", "+      ", "+      for (GroupNode r: _roots) {", "+        if (r.getFilter().accept(doc)) {", "+          root = r;", "+          break;", "+        }", "+      }", "+      ", "+      if (root == null) return;", "-      String pathSoFar=\"\";", "-      InnerNode lastNode = _root;", "+      StringBuffer pathSoFarBuf = new StringBuffer();", "+      InnerNode lastNode = root;", "-        pathSoFar += (element + \"/\");", "+        pathSoFarBuf.append(element).append('/');", "+        String pathSoFar = pathSoFarBuf.toString();"]}], "num": 21785}
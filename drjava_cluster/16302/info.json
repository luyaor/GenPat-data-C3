{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b00d77a48b18bf8c5a38c85a4ea2d095", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c6862ab15ead9293dbf1688f27698b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashMultiset.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 23, "signatureBeforeChange": "      private void doRemove(Object key, int instances)", "signatureAfterChange": "      private void doRemove(T key, int instances)", "diff": ["-  ", "-  private void doRemove(Object key, int instances) {", "-    int newCount = count(key) - instances;", "-    if (newCount <= 0) {", "-      _counts.remove(key);", "-      int actualInstances = instances - newCount;", "-      _size -= actualInstances;", "-    }", "-    else {", "-      @SuppressWarnings(\"unchecked\") T keyAsT = (T) key;", "-      // guaranteed safe, because _counts contains key", "-      _counts.put(keyAsT, newCount);", "-      _size -= instances;", "-    }", "-  }", "+  ", "+  private void doRemove(T key, int instances) {", "+    int newCount = count(key) - instances;", "+    if (newCount <= 0) {", "+      int actualInstances = _counts.remove(key);", "+      _size -= actualInstances;", "+    else {", "+      _counts.put(key, newCount);", "+      _size -= instances;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9c4176afa9cb5b0a90c822d2f4145c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "          public void testForNoOpExpressionOnly()", "signatureAfterChange": "          public void testForNoOpExpressionOnly()", "diff": ["-      NoOpExpression noe = new NoOpExpression(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+      NoOpExpression noe = new NoOpExpression(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);"]}], "num": 16302}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aeecf825c42a5b8e4943b67ed35474d7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372dec7b24708624dc1a125fd6b5ef12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "          public void testShouldBreak()", "signatureAfterChange": "          public void testShouldBreak()", "diff": ["-      LeftShiftAssignmentExpression shift1 = new LeftShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightUnsignedShiftAssignmentExpression shift2 = new RightUnsignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightSignedShiftAssignmentExpression shift3 = new RightSignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      LeftShiftAssignmentExpression shift1 = ", "+        new LeftShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                          new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightUnsignedShiftAssignmentExpression shift2 = ", "+        new RightUnsignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "+                                                   new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                                   new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightSignedShiftAssignmentExpression shift3 = ", "+        new RightSignedShiftAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "+                                                 new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                                 new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Shift assignment operators cannot be used at any language level\",", "+                   errors.getLast().getFirst());", "-      BitwiseAndAssignmentExpression bit1 = new BitwiseAndAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseOrAssignmentExpression bit2 = new BitwiseOrAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseXorAssignmentExpression bit3 = new BitwiseXorAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseAndAssignmentExpression bit1 = ", "+        new BitwiseAndAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                           new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseOrAssignmentExpression bit2 = ", "+        new BitwiseOrAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                          new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseXorAssignmentExpression bit3 = ", "+        new BitwiseXorAssignmentExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                           new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      BitwiseAndExpression bit4 = new BitwiseAndExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseOrExpression bit5 = new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseXorExpression bit6 = new BitwiseXorExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      BitwiseNotExpression bit7 = new BitwiseNotExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseAndExpression bit4 = ", "+        new BitwiseAndExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                 new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseOrExpression bit5 = ", "+        new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseXorExpression bit6 = ", "+        new BitwiseXorExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                 new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      BitwiseNotExpression bit7 = ", "+        new BitwiseNotExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise and expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular and (&&)\", errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular or (||)\", errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise xor expressions cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bitwise not expressions cannot be used at any language level.\" +", "+                   \"  Perhaps you meant to negate this value using regular not (!)\", errors.getLast().getFirst());", "-      LeftShiftExpression shift4 = new LeftShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightUnsignedShiftExpression shift5 = new RightUnsignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      RightSignedShiftExpression shift6 = new RightSignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      LeftShiftExpression shift4 = ", "+        new LeftShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightUnsignedShiftExpression shift5 = ", "+        new RightUnsignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                         new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      RightSignedShiftExpression shift6 = ", "+        new RightSignedShiftExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                                       new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", errors.getLast().getFirst());", "+      assertEquals(\"error message should be correct\", \"Bit shifting operators cannot be used at any language level\", ", "+                   errors.getLast().getFirst());", "-      assertEquals(\"Error message should be correct\", \"You appear to be missing an expression here\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"You appear to be missing an expression here\", ", "+                   errors.getLast().getFirst());", "-      NoOpExpression noop = new NoOpExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      NoOpExpression noop = ", "+        new NoOpExpression(JExprParser.NO_SOURCE_INFO, new NullLiteral(JExprParser.NO_SOURCE_INFO), ", "+                           new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      assertEquals(\"Error message should be correct\", \"You are missing a binary operator here\", errors.getLast().getFirst());", "-      ", "-      ", "+      assertEquals(\"Error message should be correct\", \"You are missing a binary operator here\", ", "+                   errors.getLast().getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0dc2dd0647697569c51ffca8cd9d487", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "          public void test_forModifiersAndVisibility()", "signatureAfterChange": "          public void test_forModifiersAndVisibility()", "diff": ["-      ModifiersAndVisibility testMav = new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\", \"private\"});", "+      ModifiersAndVisibility testMav = ", "+        new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[] {\"public\", \"private\"});", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use private and public together.\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use private and public together.\", errors.get(0).getFirst());", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use final and abstract together.\", errors.get(1).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use final and abstract together.\", errors.get(1).getFirst());", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use final and abstract together.\", errors.get(2).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use final and abstract together.\", errors.get(2).getFirst());", "-      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers. Can't use final and volatile together.\", errors.get(3).getFirst());", "+      assertEquals(\"The error message should be correct.\", \"Illegal combination of modifiers.\" + ", "+                   \" Can't use final and volatile together.\", errors.get(3).getFirst());"]}], "num": 29739}
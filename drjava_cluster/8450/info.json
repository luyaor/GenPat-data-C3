{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a24fc54e1ae5e6e174b17fb84971308c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d459de71aa1448b0cf42fc49a6383333", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "          public void testCompareThrownAndCaught()", "signatureAfterChange": "          public void testCompareThrownAndCaught()", "diff": ["-        new SimpleMethodInvocation(SourceInfo.NO_INFO, ", "-                                   new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "-                                   new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "+        new SimpleMethodInvocation(SourceInfo.NONE, ", "+                                   new Word(SourceInfo.NONE, \"myMethod\"), ", "+                                   new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[] {new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\"))}));", "-      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "-      Block b = new Block(SourceInfo.NO_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NONE, new BodyItemI[0]);", "+      Block b = new Block(SourceInfo.NONE, emptyBody);", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "-        new FormalParameter(SourceInfo.NO_INFO, ", "-                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "+        new FormalParameter(SourceInfo.NONE, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"j\")), false);", "-        new NormalTryCatchStatement(SourceInfo.NO_INFO, ", "+        new NormalTryCatchStatement(SourceInfo.NONE, ", "-                                    new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});", "+                                    new CatchBlock[] {new CatchBlock(SourceInfo.NONE,  param, b)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2b64f84dd0764200f2535190737721c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "          public void testCompareThrownAndCaught()", "signatureAfterChange": "          public void testCompareThrownAndCaught()", "diff": ["-      JExpression j = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myMethod\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "+      ", "+      JExpression j = ", "+        new SimpleMethodInvocation(SourceInfo.NO_INFO, ", "+                                   new Word(SourceInfo.NO_INFO, \"myMethod\"), ", "+                                   new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\"))}));", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter param = ", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});", "+      NormalTryCatchStatement ntcs = ", "+        new NormalTryCatchStatement(SourceInfo.NO_INFO, ", "+                                    b, ", "+                                    new CatchBlock[] {new CatchBlock(SourceInfo.NO_INFO,  param, b)});", "-      SymbolData javaLangThrowable =  _bbtc.getSymbolData(\"java.lang.Throwable\", ntcs, false, true); ", "+      SymbolData javaLangThrowable =  _bbtc.getSymbolData(\"java.lang.Throwable\", ntcs, false, true);", "+      System.err.println(\"**** In symbol table, java.lang.Throwable = \" + symbolTable.get(\"java.lang.Throwable\"));", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      javaLangThrowable.setPackage(\"java.lang\");  // Don't know why it is not properly set already", "+ ", "+      System.err.println(\"***Name for java.lang.Throwable = \" + javaLangThrowable.getName());", "+      System.err.println(\"***notRightPackage for java.lang.Throwable = \" + _bbtc.notRightPackage(javaLangThrowable));", "+      System.err.println(\"***Package for java.lang.Throwable = \" + javaLangThrowable.getPackage());", "+                        ", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      for (int i = 0; i < errors.size(); i++) ", "+        System.err.println(\"Error \" + i + \":\\n\" + errors.get(i).getFirst());"]}], "num": 8450}
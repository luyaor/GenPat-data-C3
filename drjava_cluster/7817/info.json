{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "503ee1d6bcc06d11e35b51a307583bdb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e9cccbc3736d8290036250203d700d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "signatureAfterChange": "   public int getLineFirstCharPos(int pos) throws BadLocationException", "diff": ["-    int startLinePos = getLineStartPos(pos);", "-    int endLinePos = getLineEndPos(pos);", "-    ", "-    // Get all text on this line", "-    String text = this.getText(startLinePos, endLinePos - startLinePos);", "-    int walker = 0;", "-    while (walker < text.length()) {", "-      if (text.charAt(walker) == ' ' ||", "-          text.charAt(walker) == '\\t') {", "-        walker++;", "+    acquireReadLock();", "+    try {", "+      int startLinePos = getLineStartPos(pos);", "+      int endLinePos = getLineEndPos(pos);", "+      ", "+      // Get all text on this line", "+      String text = this.getText(startLinePos, endLinePos - startLinePos);", "+      int walker = 0;", "+      while (walker < text.length()) {", "+        if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;", "+        else {", "+          _storeInCache(key, startLinePos + walker);", "+          return startLinePos + walker;", "+        }", "-      else {", "-        _storeInCache(key, new Integer(startLinePos + walker));", "-        return startLinePos + walker;", "-      }", "+      // No non-WS char found, so return last position on line", "+      _storeInCache(key, endLinePos);", "+      return endLinePos;", "-    // No non-WS char found, so return last position on line", "-    _storeInCache(key, new Integer(endLinePos));", "-    return endLinePos;", "+    finally { releaseReadLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedb21d3cdddd92c8059aa221690b23b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "commitAfterChange": "46e11d94aab488b0f851c712b65caea9a087e829", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public FindReplaceMachine(DocumentIterator docIterator)", "signatureAfterChange": "   public FindReplaceMachine(DocumentIterator docIterator)", "diff": ["+   */", "+  public FindReplaceMachine(DocumentIterator docIterator) {    ", "+    _skipOneFind = false;", "+    _docIterator = docIterator;", "+    setFindAnyOccurrence();", "+    setFindWord(\"\");", "+    setReplaceWord(\"\");", "+    setSearchBackwards(false);", "+    setMatchCase(true);", "+    setSearchAllDocuments(false);", "+    setIgnoreCommentsAndStrings(false);", "+  }", "-    /** NonModal version */", "-    public FindReplaceMachine(DocumentIterator docIterator) {", "-        _findAnyOccurrence = new FindAnyOccurrenceState(docIterator);", "-        _matchWholeWord = new MatchWholeWordState(docIterator);", "-        setFindAnyOccurrence();", "-        setFindWord(\"\");", "-        setReplaceWord(\"\");", "-        setMatchCase(true);", "-        setSearchAllDocuments(false);", "-"]}], "num": 7817}
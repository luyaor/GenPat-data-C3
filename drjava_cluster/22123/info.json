{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f8e194890cde0421dda1215560c0581", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5470aef0a15a2f43bc0f805c941dbe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectMenuTest.java", "commitBeforeChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "commitAfterChange": "bd7a2dd06a797f540fad2fc718c0924e6e0b267b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public void testSaveProject() throws IOException, MalformedProjectFileException", "signatureAfterChange": "      public void testSaveProject()", "diff": ["-  public void testSaveProject() throws IOException, MalformedProjectFileException {", "-    ", "+  public void testSaveProject() {  ", "-      public void run() { ", "-        _frame.openProject(new FileOpenSelector() {", "-          public File[] getFiles() throws OperationCanceledException { return new File[] {_projFile}; }", "-        });", "-        ", "-        // open a new file and make it an auxiliary file", "-        _frame.open(new FileOpenSelector() {", "-          public File[] getFiles() throws OperationCanceledException { return new File[] {_auxFile}; }", "-        });", "-        _frame._moveToAuxiliary();", "-", "-        List<OpenDefinitionsDocument> auxDocs = _model.getAuxiliaryDocuments();", "-        assertEquals(\"One auxiliary document\", 1, auxDocs.size());", "-        _frame.saveProject();", "-        _frame._closeProject();", "-      } ", "+      public void run() {", "+        try {", "+          _frame.openProject(new FileOpenSelector() {", "+            public File[] getFiles() throws OperationCanceledException { return new File[] { _projFile}; }", "+          });", "+          ", "+          // open a new file and make it an auxiliary file", "+          _frame.open(new FileOpenSelector() {", "+            public File[] getFiles() throws OperationCanceledException { return new File[] { _auxFile}; }", "+          });", "+          _frame._moveToAuxiliary();", "+          ", "+          List<OpenDefinitionsDocument> auxDocs = _model.getAuxiliaryDocuments();", "+          assertEquals(\"One auxiliary document\", 1, auxDocs.size());", "+          _frame.saveProject();", "+          _frame._closeProject();", "+          ", "+          List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+          assertEquals(\"One empty document remaining\", 1, docs.size());", "+          assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "+          ", "+          ProjectFileIR pfir = ProjectFileParserFacade.ONLY.parse(_projFile);", "+          DocFile[] src = pfir.getSourceFiles();", "+//          System.err.println(Arrays.toString(src));", "+          DocFile[] aux = pfir.getAuxiliaryFiles();", "+//          System.err.println(Arrays.toString(aux));", "+          assertEquals(\"Number of saved src files\", 2, src.length);", "+          assertEquals(\"Number of saved aux files\", 1, aux.length);", "+          assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[1].getCanonicalPath()); // assumes same (not reverse) order", "+          assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "+          assertEquals(\"Wrong aux file\", _auxFile.getCanonicalPath(), aux[0].getCanonicalPath());", "+        }", "+        catch(Exception e) { throw new UnexpectedException(e); }", "+      }", "-    Utilities.clearEventQueue();", "-    ", "-    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "-    assertEquals(\"One empty document remaining\", 1, docs.size());", "-    assertEquals(\"Name is (Untitled)\", \"(Untitled)\", _model.getActiveDocument().toString());", "-    ", "-    ProjectFileIR pfir = ProjectFileParserFacade.ONLY.parse(_projFile);", "-    DocFile[] src = pfir.getSourceFiles();", "-//    System.err.println(Arrays.toString(src));", "-    DocFile[] aux = pfir.getAuxiliaryFiles();", "-//    System.err.println(Arrays.toString(aux));", "-    assertEquals(\"Number of saved src files\", 2, src.length);", "-    assertEquals(\"Number of saved aux files\", 1, aux.length);", "-    assertEquals(\"wrong name for _file2\", _file2.getCanonicalPath(), src[1].getCanonicalPath()); // assumes same (not reverse) order", "-    assertEquals(\"Wrong name for _file1\", _file1.getCanonicalPath(), src[0].getCanonicalPath());", "-    assertEquals(\"Wrong aux file\", _auxFile.getCanonicalPath(), aux[0].getCanonicalPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1615581785e199e69e3b0d04f498a7a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "1639b3f1b3160d5e213e76fb290ae016d8915dec", "commitAfterChange": "2f98d714c8ae956f9af2a1a53cad3b01a015d6ea", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 369, "signatureBeforeChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-      try {", "-        Utilities.invokeAndWait(new Runnable() {", "-          public void run() {", "-            _recentDocFrame.pokeDocument(active);", "-            _switchDefScrollPane();", "-            ", "-            boolean isModified = active.isModifiedSinceSave();", "-            boolean canCompile = (!isModified && !active.isUntitled());", "-            _saveAction.setEnabled(!canCompile);", "-            _revertAction.setEnabled(!active.isUntitled());", "-            ", "-            // Update error highlights", "-            int pos = _currentDefPane.getCaretPosition();", "-            _currentDefPane.getErrorCaretListener().updateHighlight(pos);", "-            ", "-            // Update FileChoosers' directory", "-            _setCurrentDirectory(active);", "-            ", "-            // Update title and position", "-            updateFileTitle();", "-            _currentDefPane.requestFocusInWindow();", "-            _posListener.updateLocation();", "-            ", "-            // update display (adding \"*\") in navigatgorPane", "-            if (isModified) _model.getDocumentNavigator().repaint();", "-            ", "-            ", "-            try { active.revertIfModifiedOnDisk(); }", "-            catch (FileMovedException fme) { _showFileMovedError(fme); }", "-            catch (IOException e) { _showIOError(e); }", "-            ", "-            // Change Find/Replace to the new defpane", "-            if (_findReplace.isDisplayed()) {", "-              _findReplace.stopListening();", "-              _findReplace.beginListeningTo(_currentDefPane);", "-              //uninstallFindReplaceDialog(_findReplace);", "-              //installFindReplaceDialog(_findReplace);", "-            }", "+//      try {  // used or invokeAndWait variation", "+      Utilities.invokeLater(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "+        public void run() {", "+          _recentDocFrame.pokeDocument(active);", "+          _switchDefScrollPane();", "+          ", "+          boolean isModified = active.isModifiedSinceSave();", "+          boolean canCompile = (!isModified && !active.isUntitled());", "+          _saveAction.setEnabled(!canCompile);", "+          _revertAction.setEnabled(!active.isUntitled());", "+          ", "+          // Update error highlights", "+          int pos = _currentDefPane.getCaretPosition();", "+          _currentDefPane.getErrorCaretListener().updateHighlight(pos);", "+          ", "+          // Update FileChoosers' directory", "+          _setCurrentDirectory(active);", "+          ", "+          // Update title and position", "+          updateFileTitle();", "+          _currentDefPane.requestFocusInWindow();", "+          _posListener.updateLocation();", "+          ", "+          // update display (adding \"*\") in navigatgorPane", "+          if (isModified) _model.getDocumentNavigator().repaint();", "+          ", "+          ", "+          try { active.revertIfModifiedOnDisk(); }", "+          catch (FileMovedException fme) { _showFileMovedError(fme); }", "+          catch (IOException e) { _showIOError(e); }", "+          ", "+          // Change Find/Replace to the new defpane", "+          if (_findReplace.isDisplayed()) {", "+            _findReplace.stopListening();", "+            _findReplace.beginListeningTo(_currentDefPane);", "+            //uninstallFindReplaceDialog(_findReplace);", "+            //installFindReplaceDialog(_findReplace);", "-        });", "-      }", "-      catch(InterruptedException e) { throw new UnexpectedException(e); }", "+        }", "+      });", "+//      }  // used for invokeAndWait variation", "+//      catch(InterruptedException e) { throw new UnexpectedException(e); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ba3336a09532569dfd5a3403eb6147", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 368, "methodNumberAfterChange": 369, "signatureBeforeChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-      Runnable command = new Runnable() {", "-        public void run() {", "-          _recentDocFrame.pokeDocument(active);", "-          _switchDefScrollPane();", "-", "-          boolean isModified = active.isModifiedSinceSave();", "-          boolean canCompile = (!isModified && !active.isUntitled());", "-          _saveAction.setEnabled(!canCompile);", "-          _revertAction.setEnabled(!active.isUntitled());", "-", "-          // Update error highlights", "-          int pos = _currentDefPane.getCaretPosition();", "-          _currentDefPane.getErrorCaretListener().updateHighlight(pos);", "-", "-          // Update FileChoosers' directory", "-          _setCurrentDirectory(active);", "-", "-          // Update title and position", "-          updateFileTitle();", "-          _currentDefPane.requestFocusInWindow();", "-          _posListener.updateLocation();", "-          ", "-          // update display (adding \"*\") in navigatgorPane", "-          if (isModified) _model.getDocumentNavigator().repaint();", "-          ", "-          ", "-          try { active.revertIfModifiedOnDisk(); }", "-          catch (FileMovedException fme) { _showFileMovedError(fme); }", "-          catch (IOException e) { _showIOError(e); }", "-", "-          // Change Find/Replace to the new defpane", "-          if (_findReplace.isDisplayed()) {", "-            _findReplace.stopListening();", "-            _findReplace.beginListeningTo(_currentDefPane);", "-            //uninstallFindReplaceDialog(_findReplace);", "-            //installFindReplaceDialog(_findReplace);", "+      try {", "+        Utilities.invokeAndWait(new Runnable() {", "+          public void run() {", "+            _recentDocFrame.pokeDocument(active);", "+            _switchDefScrollPane();", "+            ", "+            boolean isModified = active.isModifiedSinceSave();", "+            boolean canCompile = (!isModified && !active.isUntitled());", "+            _saveAction.setEnabled(!canCompile);", "+            _revertAction.setEnabled(!active.isUntitled());", "+            ", "+            // Update error highlights", "+            int pos = _currentDefPane.getCaretPosition();", "+            _currentDefPane.getErrorCaretListener().updateHighlight(pos);", "+            ", "+            // Update FileChoosers' directory", "+            _setCurrentDirectory(active);", "+            ", "+            // Update title and position", "+            updateFileTitle();", "+            _currentDefPane.requestFocusInWindow();", "+            _posListener.updateLocation();", "+            ", "+            // update display (adding \"*\") in navigatgorPane", "+            if (isModified) _model.getDocumentNavigator().repaint();", "+            ", "+            ", "+            try { active.revertIfModifiedOnDisk(); }", "+            catch (FileMovedException fme) { _showFileMovedError(fme); }", "+            catch (IOException e) { _showIOError(e); }", "+            ", "+            // Change Find/Replace to the new defpane", "+            if (_findReplace.isDisplayed()) {", "+              _findReplace.stopListening();", "+              _findReplace.beginListeningTo(_currentDefPane);", "+              //uninstallFindReplaceDialog(_findReplace);", "+              //installFindReplaceDialog(_findReplace);", "+            }", "-        }", "-      };", "-      Utilities.invokeLater(command);", "+        });", "+      }", "+      catch(InterruptedException e) { throw new UnexpectedException(e); }"]}], "num": 22123}
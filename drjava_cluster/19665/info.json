{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a0f9a22df506d132c9a5a30fdc6abcd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973e443e938a6a4c10a53afa7e22b0c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "e7660fffdb51451a3d4a61981945f6529addb874", "commitAfterChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException", "signatureAfterChange": "   public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException", "diff": ["+   /** Test to make sure all elements of the project are read correctly into the IR */", "+  public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException {", "+    String proj2 =", "+      \";; DrJava project file.  Written with build: 2006??\\n\" +", "+      \"(proj-root-and-base (file (name \\\"src\\\")))\\n\" +", "+      \"(source-files ;; comment\\n\" +", "+      \"   (file (name \\\"sexp/Atom.java\\\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"sexp/BoolAtom.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"sexp/Cons.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"sexp/Empty.java\\\")(select 24 28)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"sexp/Lexer.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"sexp/NumberAtom.java\\\")(select 12 12)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"sexp/SEList.java\\\")(select 0 0)))\\n\" + // doesn't have mod date", "+      \"(auxiliary ;; absolute file names\\n\" +", "+      \"   (file (name \" + convertToLiteral(new File(parent,\"junk/sexp/Tokens.java\").getCanonicalPath()) +", "+          \")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \" + convertToLiteral(new File(parent,\"jdk1.5.0/JScrollPane.java\").getCanonicalPath()) +", "+          \")(select 9086 8516)(mod-date \\\"16-Jul-2004 03:45:23\\\")))\\n\" +", "+      \"(collapsed ;; relative paths\\n\" +", "+      \"   (path \\\"./[ Source Files ]/sexp/\\\")\\n\" +", "+      \"   (path \\\"./[ External ]/\\\"))\\n\" +", "+      \"(build-dir ;; absolute path\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent, \"built\").getCanonicalPath()) + \")))\\n\" +", "+      \"(work-dir (file (name \\\"src\\\")))\\n\" +", "+      \"(classpaths\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent, \"src/edu/rice/cs/lib\").getCanonicalPath()) + \")))\\n\" +", "+      \"(main-class\\n\" +", "+      \"   (file (name \\\"src/sexp/SEList.java\\\")))\";", "+    ", "+    File f = new File(parent, \"test2.pjt\");", "+", "+    IOUtil.writeStringToFile(f, proj2);", "+//    System.err.println(\"Project directory is \" + parent);", "+//    System.err.println(\"Project file is \" + f);", "+//    System.err.println(\"projFile exists? \" + f.exists());", "+    ProjectFileIR pfir = ProjectFileParserFacade.ONLY.parse(f);", "+//    System.err.println(\"buildDir = \" + pfir.getBuildDirectory().getCanonicalPath());", "+    assertEquals(\"number of source files\", 7, pfir.getSourceFiles().length);", "+    assertEquals(\"number of aux files\", 2, pfir.getAuxiliaryFiles().length);", "+    assertEquals(\"number of collapsed\", 2, pfir.getCollapsedPaths().length);", "+    assertEquals(\"number of classpaths\", 1, IterUtil.sizeOf(pfir.getClassPaths()));", "+    File base = f.getParentFile();", "+    File root = new File(base, \"src\");", "+    assertEquals(\"proj-root-and-base\", root.getPath(), pfir.getProjectRoot().getPath());", "+    assertEquals(\"first source filename\", new File(base,\"src/sexp/Atom.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "+    assertEquals(\"mod-date value\", ", "+                 ProjectProfile.MOD_DATE_FORMAT.parse(\"16-Jul-2004 03:45:23\").getTime(),", "+                 pfir.getSourceFiles()[0].getSavedModDate());", "+    assertEquals(\"last source filename\", new File(root, \"sexp/SEList.java\").getPath(), ", "+                 pfir.getSourceFiles()[6].getPath());", "+    assertEquals(\"first aux filename\", new File(base,\"junk/sexp/Tokens.java\").getPath(), ", "+                 pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "+    assertEquals(\"last collapsed path\", \"./[ External ]/\", pfir.getCollapsedPaths()[1]);", "+    assertEquals(\"build-dir name\", new File(base, \"built\").getCanonicalPath(), ", "+                 pfir.getBuildDirectory().getCanonicalPath());", "+    assertEquals(\"work-dir name\", new File(base, \"src\").getCanonicalPath(), ", "+                 pfir.getWorkingDirectory().getCanonicalPath());", "+    assertEquals(\"classpath name\", new File(base, \"src/edu/rice/cs/lib\").getCanonicalPath(), ", "+                 IterUtil.first(pfir.getClassPaths()).getCanonicalPath());", "+    assertEquals(\"main-class name\", new File(root, \"sexp/SEList.java\").getCanonicalPath(), ", "+                 pfir.getMainClass().getCanonicalPath());", "+  }", "-  public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException {", "-    String proj1 =", "-    File f = new File(parent, \"test1.pjt\");", "-    IOUtil.writeStringToFile(f, proj1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10fce65d1a1f55d0d182c32aee233c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException", "signatureAfterChange": "   public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException", "diff": ["-      \"   (file (name \\\"sexp/Atom.java\\\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/BoolAtom.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/Cons.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/Empty.java\\\")(select 24 28)(mod-date \\\"16-Jul-2004 03:45:23\\\")(active))\\n\" +", "-      \"   (file (name \\\"sexp/Lexer.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/NumberAtom.java\\\")(select 12 12)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/SEList.java\\\")(select 0 0)))\\n\" + // doesn't have mod date", "+      \"   (file (name \\\"src/sexp/Atom.java\\\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/BoolAtom.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/Cons.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/Empty.java\\\")(select 24 28)(mod-date \\\"16-Jul-2004 03:45:23\\\")(active))\\n\" +", "+      \"   (file (name \\\"src/sexp/Lexer.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/NumberAtom.java\\\")(select 12 12)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/SEList.java\\\")(select 0 0)))\\n\" + // doesn't have mod date", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"junk/sexp/Tokens.java\").getCanonicalPath()) +\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"jdk1.5.0/JScrollPane.java\").getCanonicalPath()) +\")(select 9086 8516)(mod-date \\\"16-Jul-2004 03:45:23\\\")))\\n\" +", "+      \"   (file (name \" + convertToLiteral(new File(parent,\"junk/sexp/Tokens.java\").getCanonicalPath()) +\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \" + convertToLiteral(new File(parent,\"jdk1.5.0/JScrollPane.java\").getCanonicalPath()) +\")(select 9086 8516)(mod-date \\\"16-Jul-2004 03:45:23\\\")))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"drjava/built\").getCanonicalPath()) + \")))\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"built\").getCanonicalPath()) + \")))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"drjava/src\").getCanonicalPath()) + \")))\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"src\").getCanonicalPath()) + \")))\\n\" +", "+      \"(proj-root ;; absolute path\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"src\").getCanonicalPath()) + \")))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"drjava/src/edu/rice/cs/lib\").getCanonicalPath()) + \")))\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"src/edu/rice/cs/lib\").getCanonicalPath()) + \")))\\n\" +", "-      \"   (file (name \\\"sexp/SEList.java\\\")))\";", "+      \"   (file (name \\\"src/sexp/SEList.java\\\")))\";", "+    ", "+    File f = new File(parent, \"test1.pjt\");", "-    File f = _fillTempFile(\"test1.pjt\", proj1);", "+    FileOps.writeStringToFile(f, proj1);", "+//    System.err.println(\"Project directory is \" + parent);", "+//    System.err.println(\"Project file is \" + f);", "+//    System.err.println(\"projFile exists? \" + f.exists());", "+//    System.err.println(\"buildDir = \" + pfir.getBuildDirectory().getCanonicalPath());", "-    String base = f.getParent();", "-    assertEquals(\"first source filename\", new File(base,\"/sexp/Atom.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "+    File base = f.getParentFile();", "+    assertEquals(\"first source filename\", new File(base,\"src/sexp/Atom.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "-    assertEquals(\"last source filename\", new File(base,\"/sexp/SEList.java\").getPath(), pfir.getSourceFiles()[6].getPath());", "-    assertEquals(\"first aux filename\", new File(absp,\"junk/sexp/Tokens.java\").getPath(), pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "+    assertEquals(\"last source filename\", new File(base,\"src/sexp/SEList.java\").getPath(), ", "+                 pfir.getSourceFiles()[6].getPath());", "+    assertEquals(\"first aux filename\", new File(base,\"junk/sexp/Tokens.java\").getPath(), ", "+                 pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "-    assertEquals(\"build-dir name\", new File(absp,\"drjava/built\").getPath(), pfir.getBuildDirectory().getCanonicalPath());", "-    assertEquals(\"work-dir name\", new File(absp,\"drjava/src\").getPath(), pfir.getWorkingDirectory().getCanonicalPath());", "-    assertEquals(\"classpath name\", new File(absp,\"drjava/src/edu/rice/cs/lib\").getPath(), pfir.getClassPaths()[0].getCanonicalPath());", "-    assertEquals(\"main-class name\", new File(base,\"/sexp/SEList.java\").getCanonicalPath(), pfir.getMainClass().getCanonicalPath());", "+    assertEquals(\"build-dir name\", new File(base, \"built\").getCanonicalPath(), ", "+                 pfir.getBuildDirectory().getCanonicalPath());", "+    assertEquals(\"work-dir name\", new File(base, \"src\").getCanonicalPath(), ", "+                 pfir.getWorkingDirectory().getCanonicalPath());", "+    assertEquals(\"classpath name\", new File(base, \"src/edu/rice/cs/lib\").getCanonicalPath(), ", "+                 pfir.getClassPaths()[0].getCanonicalPath());", "+    assertEquals(\"main-class name\", new File(base, \"src/sexp/SEList.java\").getCanonicalPath(), ", "+                 pfir.getMainClass().getCanonicalPath());"]}], "num": 19665}
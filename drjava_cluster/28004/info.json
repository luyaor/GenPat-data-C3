{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b58280bd126bf106667b1aeb05e81ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e319206662f43926902408b13cfe0b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 364, "signatureBeforeChange": "              @Override public Iterable<StaticFieldReference> forRawClassType(RawClassType t)", "signatureAfterChange": "     public Iterable<Type> thrownTypes()", "diff": ["+    public Iterable<VariableType> declaredTypeParameters() { return _tparams; }", "+    public Iterable<Type> thrownTypes() { return IterUtil.relax(substitute(_delegate.thrownTypes(), _sigma)); }", "-      ", "-      @Override public Iterable<StaticFieldReference> forRawClassType(RawClassType t) {", "-        // TODO: Handle raw member access warnings", "-        for (DJField f : t.ofClass().declaredFields()) {", "-          if (f.declaredName().equals(name) && validField(f)) {", "-            return IterUtil.make(new StaticFieldReference(f, erase(f.type())));", "-          }", "-        }", "-        return IterUtil.empty();", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd92cbbb21e1b900bb7170381190dd7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 296, "methodNumberAfterChange": 356, "signatureBeforeChange": "              @Override public Iterable<Object> forClassType(ClassType t)", "signatureAfterChange": "     public Access.Module accessModule()", "diff": ["+    public Access accessibility() { return _delegate.accessibility(); }", "+    public Access.Module accessModule() { return _delegate.accessModule(); }", "-      ", "-      @Override public Iterable<Object> forClassType(ClassType t) {", "-        debug.logValues(new String[]{\"t\",\"methods\"}, wrap(t), t.ofClass().declaredMethods());", "-        for (DJMethod m : t.ofClass().declaredMethods()) {", "-          if (m.declaredName().equals(name) && validMethod(m)) {", "-            return IterUtil.singleton(null);", "-          }", "-        }", "-        return IterUtil.empty();", "-      }"]}], "num": 28004}
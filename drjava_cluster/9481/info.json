{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a26f96c84040a055cad9e5f6b61209c1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14333a2c3a7f2f4956d9d90a31aff672", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private void _setupColorPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupColorPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_NORMAL_COLOR, \"Normal Color\", this,", "-                                                \"The default color for text in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_KEYWORD_COLOR, \"Keyword Color\", this,", "-                                                \"The color for Java keywords in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_TYPE_COLOR, \"Type Color\", this,", "-                                                \"The color for classes and types in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_COMMENT_COLOR, \"Comment Color\", this,", "-                                                \"The color for comments in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, \"Double-quoted Color\", this,", "-                                                \"The color for quoted strings (eg. \\\"...\\\") in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, \"Single-quoted Color\", this,", "-                                                \"The color for quoted characters (eg. 'a') in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_NUMBER_COLOR, \"Number Color\", this,", "-                                                \"The color for numbers in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_BACKGROUND_COLOR, \"Background Color\", this,", "-                                                \"The background color of the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_COLOR, \"Line Number Color\", this,", "-                                                \"The color for line numbers in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_BACKGROUND_COLOR, \"Line Number Background Color\", this,", "-                                                \"The background color for line numbers in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_MATCH_COLOR, \"Brace-matching Color\", this,", "-                                                \"The color for matching brace highlights in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.COMPILER_ERROR_COLOR, \"Compiler Error Color\", this,", "-                                                \"The color for compiler error highlights in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.BOOKMARK_COLOR, \"Bookmark Color\", this,", "-                                                \"The color for bookmarks in the Definitions Pane.\", true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_NORMAL_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_KEYWORD_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_TYPE_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_COMMENT_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_NUMBER_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_BACKGROUND_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_BACKGROUND_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_MATCH_COLOR,true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.COMPILER_ERROR_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.BOOKMARK_COLOR, true));", "-      addOptionComponent(panel, new ColorOptionComponent(OptionConstants.FIND_RESULTS_COLORS[i], \"Find Results Color \"+(i+1), this,", "-                                                         \"A color for highlighting find results in the Definitions Pane.\", true));", "+      addOptionComponent(panel, newColorOptionComponent(OptionConstants.FIND_RESULTS_COLORS[i], true));", "-                       new ColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_COLOR, \"Debugger Breakpoint Color\", this,", "-                                                \"The color for breakpoints in the Definitions Pane.\", true));", "+                       newColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_COLOR, true));", "-                       new ColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_DISABLED_COLOR, \"Disabled Debugger Breakpoint Color\", this,", "-                                                \"The color for disabled breakpoints in the Definitions Pane.\", true));", "+                       newColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_DISABLED_COLOR, true));", "-                       new ColorOptionComponent(OptionConstants.DEBUG_THREAD_COLOR, \"Debugger Location Color\", this,", "-                                                \"The color for the location of the current suspended thread in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_OUT_COLOR, \"System.out Color\", this,", "-                                                       \"The color for System.out in the Interactions and Console Panes.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_ERR_COLOR, \"System.err Color\", this,", "-                                                       \"The color for System.err in the Interactions and Console Panes.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_IN_COLOR, \"System.in Color\", this,", "-                                                       \"The color for System.in in the Interactions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.INTERACTIONS_ERROR_COLOR, \"Interactions Error Color\", this,", "-                                                       \"The color for interactions errors in the Interactions Pane.\", false, true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEBUG_MESSAGE_COLOR, \"Debug Message Color\", this,", "-                                                       \"The color for debugger messages in the Interactions Pane.\", false, true));", "+                       newColorOptionComponent(OptionConstants.DEBUG_THREAD_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.SYSTEM_OUT_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.SYSTEM_ERR_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.SYSTEM_IN_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.INTERACTIONS_ERROR_COLOR, false, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEBUG_MESSAGE_COLOR, false, true));", "-                       new ColorOptionComponent(OptionConstants.DRJAVA_ERRORS_BUTTON_COLOR, \"DrJava Errors Button Background Color\", this,", "-                                                \"The background color of the \\\"Errors\\\" button used to show internal DrJava errors.\", true));", "+                       newColorOptionComponent(OptionConstants.DRJAVA_ERRORS_BUTTON_COLOR, true));", "-                       new ColorOptionComponent(OptionConstants.RIGHT_MARGIN_COLOR, \"Right Margin Color\", this,", "-                                                \"The color of the right margin line, if displayed.\", true));", "+                       newColorOptionComponent(OptionConstants.RIGHT_MARGIN_COLOR, true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5535ca6d99ab8633e168679fb132e8ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 58, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.INDENT_LEVEL,", "-                                                  \"Indent Level\", this,", "-                                                  \"The number of spaces to use for each level of indentation.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.RECENT_FILES_MAX_SIZE, \"Recent Files List Size\", this,", "-                                                  \"<html>The number of files to remember in<br>\" +", "-                                                  \"the recently used files list in the File menu.</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE,", "-                                                         \"Maximum Size of Browser History\", ", "-                                                         this,", "-                                                         \"Determines how many entries are kept in the browser history.\"));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.INDENT_LEVEL));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.RECENT_FILES_MAX_SIZE));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE));", "-                       new BooleanOptionComponent(OptionConstants.AUTO_CLOSE_COMMENTS, \"Automatically Close Block Comments\", ", "-                                                  this,", "-                                                  \"<html>Whether to automatically insert a closing comment tag (\\\"*/\\\")<br>\" +", "-                                                  \"when the enter key is pressed after typing a new block comment<br>\" +", "-                                                  \"tag (\\\"/*\\\" or \\\"/**\\\").</html>\"));", "-    String runWithAssertMsg = ", "-      \"<html>Whether to execute <code>assert</code> statements in classes running in the interactions pane.</html>\";", "+                       newBooleanOptionComponent(OptionConstants.AUTO_CLOSE_COMMENTS));", "-                       new BooleanOptionComponent(OptionConstants.RUN_WITH_ASSERT, \"Enable Assert Statement Execution\", ", "-                                                  this,", "-                                                  runWithAssertMsg));", "+                       newBooleanOptionComponent(OptionConstants.RUN_WITH_ASSERT));", "-                       new BooleanOptionComponent(OptionConstants.BACKUP_FILES, \"Keep Emacs-style Backup Files\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should keep a backup copy of each file that<br>\" +", "-                                                  \"the user modifies, saved with a '~' at the end of the filename.</html>\"));", "+                       newBooleanOptionComponent(OptionConstants.BACKUP_FILES));", "-                       new BooleanOptionComponent(OptionConstants.RESET_CLEAR_CONSOLE, \"Clear Console After Interactions Reset\", ", "-                                                  this,", "-                                                  \"Whether to clear the Console output after resetting the Interactions Pane.\"));", "+                       newBooleanOptionComponent(OptionConstants.RESET_CLEAR_CONSOLE));", "-                       new BooleanOptionComponent(OptionConstants.FIND_REPLACE_FOCUS_IN_DEFPANE, ", "-                                                  \"Focus on the definitions pane after find/replace\", ", "-                                                  this,", "-                                                  \"<html>Whether to focus on the definitions pane after executing a find/replace operation.<br>\" +", "-                                                  \"If this is not selected, the focus will be in the Find/Replace pane.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DRJAVA_USE_FORCE_QUIT, ", "-                                                  \"Forcefully Quit DrJava\", this,", "-                                                  \"<html>On some platforms, DrJava does not shut down properly when files are open<br>\"+", "-                                                  \"(namely tablet PCs). Check this option to force DrJava to close.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.REMOTE_CONTROL_ENABLED, ", "-                                                  \"Enable Remote Control\", this,", "-                                                  \"<html>Whether DrJava should listen to a socket (see below) so it<br>\"+", "-                                                         \"can be remote controlled and told to open files.<br>\"+", "-                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.REMOTE_CONTROL_PORT, ", "-                                                         \"Remote Control Port\", this,", "-                                                         \"<html>A running instance of DrJava can be remote controlled and<br>\"+", "-                                                         \"told to open files. This specifies the port used for remote control.<br>\" + ", "-                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.FOLLOW_FILE_DELAY, ", "-                                                         \"Follow File Delay\", this,", "-                                                         \"<html>The delay in milliseconds that has to elapse before DrJava will check<br>\"+", "-                                                         \"if a file that is being followed or the output of an external process has changed.</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.FOLLOW_FILE_LINES, ", "-                                                         \"Maximum Lines in \\\"Follow File\\\" Window\", this,", "-                                                         \"<html>The maximum number of lines to keep in a \\\"Follow File\\\"<br>\"+", "-                                                         \"or \\\"External Process\\\" pane. Enter 0 for unlimited.</html>\"));", "+                       newBooleanOptionComponent(OptionConstants.FIND_REPLACE_FOCUS_IN_DEFPANE));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DRJAVA_USE_FORCE_QUIT));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.REMOTE_CONTROL_ENABLED));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.REMOTE_CONTROL_PORT));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.FOLLOW_FILE_DELAY));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.FOLLOW_FILE_LINES));", "-//    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED, ", "-//                                                  \"Perform lightweight parsing\", this,", "-//                                                  \"<html>Whether to continuously parse the source file for useful information.<br>\" +", "-//                                                  \"Enabling this option might introduce delays when editing files.<html>\"));", "-//    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY, \"Light-weight parsing delay in milliseconds\", this,", "-//                                                  \"The amount of time DrJava will wait after the last keypress before beginning to parse.\"));", "+//    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED));", "+//    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d796e6a111823d399396bfe7a41c7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "3bb1b911d950f482b9e797d7de6104b1444684b7", "commitAfterChange": "045c3614cbae106e482ef86c608a22bd0f55ebc4", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   private void _setupJUnitPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJUnitPanel(ConfigPanel panel)", "diff": ["-                              \"<html>Optional location of the JUnit 3.8.2 junit.jar file.<br>\"+", "-                              \"If this is left blank, the JUnit integrated into DrJava is used.<br>\"+", "-                              \"To use ConcJUnit, select the concutest-junit-3.8.2-withrt.jar file.<br>\" + ", "-                              \"(Changes will not be applied until DrJava is restarted.)</html>\",", "+                              \"<html>Optional location of the JUnit or ConcJUnit jar file.<br>\"+", "+                              \"(Changes will not be applied until the Interactions Pane<br>\"+", "+                              \"is reset.)</html>\",", "-    ", "-    final BooleanOptionComponent rtConcJUnitLocEnabled =", "-      new BooleanOptionComponent(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, \"Use ConcJUnit Runtime\", this,", "-                                 \"<html>If this is enabled, DrJava will use the ConcJUnit Runtime<br>\"+", "-                                 \"configured below under 'ConcJUnit Runtime Location'. If it is<br>\"+", "-                                 \"disabled, DrJava will use the normal Java runtime.</html>\", false)", "-      .setEntireColumn(true);", "-    addOptionComponent(panel, rtConcJUnitLocEnabled);", "+", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));", "+", "+    final ForcedChoiceOptionComponent concJUnitChecksEnabledComponent =", "+      new ForcedChoiceOptionComponent(OptionConstants.CONCJUNIT_CHECKS_ENABLED, \"Enabled ConcJUnit Checks\", this,", "+                                      \"<html>The concurrent unit testing checks that should be performed.<br>\"+", "+                                      \"'none' uses plain JUnit. ConcJUnit can also detect failures in<br>\"+", "+                                      \"all threads ('all-threads'), detect threads that did not end in<br>\"+", "+                                      \"time ('all-threads, join'), and threads that ended in time only<br>\"+", "+                                      \"because they were lucky ('all-threads, nojoin, lucky).<br>\"+", "+                                      \"The last setting requires a 'ConcJUnit Runtime Location' to be set.</html>\");", "+    addOptionComponent(panel, concJUnitChecksEnabledComponent);", "+", "+    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));    ", "+", "-    OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {", "-      public Object value(Object oc) {", "-        File f = junitLoc.getComponent().getFileFromField();", "-        rtConcJUnitLoc.getComponent().", "-          setEnabled(edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f));", "-        return null;", "-      }", "-    };", "-    junitLoc.addChangeListener(rtConcJUnitListener);", "-    addOptionComponent(panel, rtConcJUnitLoc);", "-    OptionComponent.ChangeListener processRTChangeListener = new OptionComponent.ChangeListener() {", "+    ", "+    OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {", "-        processRT.getComponent().", "-          setEnabled(edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f));", "+        boolean enabled = (!junitLocEnabled.getComponent().isSelected()) ||", "+          edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f);", "+        rtConcJUnitLoc.getComponent().setEnabled(enabled);", "+        processRT.getComponent().setEnabled(enabled);", "+        concJUnitChecksEnabledComponent.getComponent().setEnabled(enabled);", "-    junitLoc.addChangeListener(processRTChangeListener);", "+    junitLocEnabled.addChangeListener(rtConcJUnitListener);", "+    junitLoc.addChangeListener(rtConcJUnitListener);", "+    addOptionComponent(panel, rtConcJUnitLoc);", "-    final LabelComponent junitStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+    final LabelComponent internalExternalStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+    final LabelComponent threadsStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "+    final LabelComponent joinStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);", "-        String s, t;", "+        String[] s = new String[] { \" \", \" \", \" \", \" \" };", "+        boolean isConcJUnit = true;", "-          s = \"DrJava uses the built-in JUnit.\";", "-          t = \"\";", "+          s[0] = \"DrJava uses the built-in ConcJUnit framework.\";", "-          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {", "-            s = \"DrJava uses ConcJUnit.\";", "-            File rtf = rtConcJUnitLoc.getComponent().getFileFromField();", "-            if (rtConcJUnitLocEnabled.getComponent().isSelected() && (rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&", "-                edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {", "-              t = \"\\\"Lucky\\\" warnings are enabled.\";", "-            }", "-            else {", "-              t = \"\\\"Lucky\\\" warnings are disabled.\";", "-            }", "+          String type = \"ConcJUnit\";", "+          if (!edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {", "+            type = \"JUnit\";", "+            isConcJUnit = false;", "-          else if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(f)) {", "-            s = \"DrJava uses JUnit in a separate file.\";", "-            t = \"\";", "-          }", "-          else {", "-            s = \"DrJava uses the built-in JUnit.\";", "-            t = \"\";", "+          s[0] = \"DrJava uses an external \"+type+\" framework.\";", "+        }", "+        if (!isConcJUnit) {", "+          s[1] = \"JUnit does not support all-thread, no-join\";", "+          s[2] = \"or lucky checks. They are all disabled.\";", "+        }", "+        else {", "+          s[1] = \"All-thread checks are disabled.\";", "+          s[2] = \"No-join checks are disabled.\";", "+          s[3] = \"Lucky checks are disabled.\";", "+          if (!concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                equals(OptionConstants.ConcJUnitCheckChoices.NONE)) {", "+            s[1] = \"All-thread checks are enabled.\";", "+            if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                  equals(OptionConstants.ConcJUnitCheckChoices.ALL) ||", "+                concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                  equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {", "+              s[2] = \"No-join checks are enabled.\";", "+              if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().", "+                    equals(OptionConstants.ConcJUnitCheckChoices.ALL)) {", "+                File rtf = rtConcJUnitLoc.getComponent().getFileFromField();", "+                if ((rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&", "+                    edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {", "+                  s[3] = \"Lucky checks are enabled.\";", "+                }", "+              }", "+            }", "-        junitStatus.getComponent().setText(s);", "-        luckyStatus.getComponent().setText(t);", "+        internalExternalStatus.getComponent().setText(s[0]);", "+        threadsStatus.getComponent().setText(s[1]);", "+        joinStatus.getComponent().setText(s[2]);", "+        luckyStatus.getComponent().setText(s[3]);", "+    concJUnitChecksEnabledComponent.addChangeListener(junitStatusChangeListener);", "-    rtConcJUnitLocEnabled.addChangeListener(junitStatusChangeListener);", "-    addOptionComponent(panel, junitStatus);", "+    addOptionComponent(panel, internalExternalStatus);", "+    addOptionComponent(panel, threadsStatus);", "+    addOptionComponent(panel, joinStatus);", "-    processRTChangeListener.value(junitLoc);", "-    addOptionComponent(panel, ", "-                       new BooleanOptionComponent(OptionConstants.FORCE_TEST_SUFFIX, ", "-                                                  \"Require test classes in projects to end in \\\"Test\\\"\", ", "-                                                  this,", "-                                                  \"Whether to force test classes in projects to end in \\\"Test\\\".\"));", "+    final BooleanOptionComponent forceTestSuffix  =", "+      new BooleanOptionComponent(OptionConstants.FORCE_TEST_SUFFIX,", "+                                 \"Require test classes in projects to end in \\\"Test\\\"\",", "+                                 this,", "+                                 \"Whether to force test classes in projects to end in \\\"Test\\\".\",", "+                                 false)", "+      .setEntireColumn(true);", "+    addOptionComponent(panel, forceTestSuffix);"]}], "num": 9481}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df365a408cb2386d89e1488c168e958c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ccdf3ca4003739f2f9bb51275aeeb62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 99, "signatureBeforeChange": "   private void _copyVariablesFromInterpreter() throws DebugException", "signatureAfterChange": "   private static Value _invokeConstructor(ThreadReference thread, ClassType location,                                           String signature, Value... args) throws DebugException", "diff": ["-      // copy variables values out of interpreter's environment and", "-      // into the relevant stack frame", "-      _log.log(\"In _copyBack()\");", "-      _copyBack(_runningThread);", "-      _log.log(\"Out of _copyBack()\");", "-    catch(AbsentInformationException e2) {", "-      //throw new DebugException(e2.toString());", "-      // Silently fail for now to ignore the AbsentInformationException that", "-      // we should have noticed when first suspending on this line (see currThreadSuspended).", "-    }", "-    catch(IncompatibleThreadStateException e) {", "-      throw new DebugException(e.toString());", "-    }", "-    catch(InvocationException e4) {", "-      throw new DebugException(e4.toString());", "+    */", "+  private static Value _invokeConstructor(ThreadReference thread, ClassType location,", "+                                          String signature, Value... args) throws DebugException {", "+    try {", "+      Method m = location.concreteMethodByName(\"<init>\", signature);", "+      if (m == null) { throw new DebugException(\"Cannot find requested constructor\"); }", "+      return location.newInstance(thread, m, Arrays.asList(args), ClassType.INVOKE_SINGLE_THREADED);", "+    }", "+    catch (ClassNotPreparedException e) { throw new DebugException(e); }", "+    catch (IllegalArgumentException e) { throw new DebugException(e); }", "+    catch (ClassNotLoadedException e) { throw new DebugException(e); }", "+    catch (IncompatibleThreadStateException e) { throw new DebugException(e); }", "+    catch (InvocationException e) { throw new DebugException(e); }", "+    catch (InvalidTypeException e) { throw new DebugException(e); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e50bfa90e970ae412fdcd9fde946ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v2_0/edu/rice/cs/drjava/model/compiler/JSR14v20Compiler.java", "commitBeforeChange": "255639a37a492530d2834e7741b324292706782a", "commitAfterChange": "c967e58952709e4269e937aeff522c6db9ffc4fb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "    protected void initCompiler(File[] sourceRoots)", "signatureAfterChange": "    protected void initCompiler(File[] sourceRoots)", "diff": ["-    compiler = JavaCompiler.make(context);", "+    ", "+    // Using reflection to allow for JSR14v2.3 since the \"make\"", "+    // method was changed to \"instance\".", "+    Class javaCompilerClass = JavaCompiler.class;", "+    Class[] validArgs1 = {", "+      Context.class", "+    };", "+    Method m;    ", "+    if (_isJSR14v2_3()) {    ", "+      try { ", "+        m = javaCompilerClass.getMethod(\"instance\", validArgs1);", "+        compiler = (JavaCompiler)m.invoke(null, new Object[] {context});", "+      }", "+      catch (NoSuchMethodException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (IllegalAccessException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (InvocationTargetException e) {", "+        throw new UnexpectedException(e);", "+      }      ", "+    }", "+    else {", "+      try { ", "+        m = javaCompilerClass.getMethod(\"make\", validArgs1);", "+        compiler = (JavaCompiler)m.invoke(null, new Object[] {context});", "+      }", "+      catch (NoSuchMethodException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (IllegalAccessException e) {", "+        throw new UnexpectedException(e);", "+      }", "+      catch (InvocationTargetException e) {", "+        throw new UnexpectedException(e);", "+      }", "+//      compiler = JavaCompiler.make(context);", "+    }", "+  }"]}], "num": 30496}
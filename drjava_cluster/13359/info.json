{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ec0407dccad256b2cb44334b62efefe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b5d662b11836ada7b711e98836db1ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "         public void testForIfThenStatement()", "signatureAfterChange": "         public void testForIfThenStatement()", "diff": ["-      Expression te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, ", "-                                             new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                                     new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-                                             new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NO_INFO, ", "+                                             new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                     new Word(SourceInfo.NO_INFO, \"j\")),", "+                                             new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "-                                                               new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                                                       new Word(JExprParser.NO_SOURCE_INFO, \"i\")), ", "-                                                               new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      IfThenStatement ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "+                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      IfThenStatement ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "-        new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                            new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, ", "-                                                                new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] { ", "-        new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, ", "+                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { ", "+        new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, ", "-                                  new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                          new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-                                  new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "+      te = new LessThanExpression(SourceInfo.NO_INFO, ", "+                                  new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                          new Word(SourceInfo.NO_INFO, \"j\")),", "+                                  new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, ", "-                                                               new SimpleNameReference(JExprParser.NO_SOURCE_INFO, ", "-                                                                                       new Word(JExprParser.NO_SOURCE_INFO, \"i\")), ", "-                                                               new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "+                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-        new ValueReturnStatement(JExprParser.NO_SOURCE_INFO, ", "-                                 new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")));", "-      ts = new Block(JExprParser.NO_SOURCE_INFO, new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "+        new ValueReturnStatement(SourceInfo.NO_INFO, ", "+                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "+      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      ts = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "-      bb = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new VariableDeclaration(JExprParser.NO_SOURCE_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(JExprParser.NO_SOURCE_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new PlusAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"j\")),", "-        new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 5));", "-      ts = new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleAssignmentExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)));", "-      ift = new IfThenStatement(JExprParser.NO_SOURCE_INFO, te, ts);", "+      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b4847969082b4378adfeb5eabcfa73d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "         public void testForIfThenStatement()", "signatureAfterChange": "         public void testForIfThenStatement()", "diff": ["-      Expression te = new LessThanExpression(SourceInfo.NO_INFO, ", "-                                             new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                     new Word(SourceInfo.NO_INFO, \"j\")),", "-                                             new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      Expression te = new LessThanExpression(SourceInfo.NONE, ", "+                                             new SimpleNameReference(SourceInfo.NONE, ", "+                                                                     new Word(SourceInfo.NONE, \"j\")),", "+                                             new IntegerLiteral(SourceInfo.NONE, 5));", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      IfThenStatement ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                       new Word(SourceInfo.NONE, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 10)));", "+      IfThenStatement ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "-        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+        new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "-        new FormalParameter(SourceInfo.NO_INFO, ", "-                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, ", "-                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] { ", "-        new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+        new FormalParameter(SourceInfo.NONE, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NONE, intt, ", "+                                                                new Word(SourceInfo.NONE, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] { ", "+        new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, ", "-                                  new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                          new Word(SourceInfo.NO_INFO, \"j\")),", "-                                  new IntegerLiteral(SourceInfo.NO_INFO, 5));", "+      te = new LessThanExpression(SourceInfo.NONE, ", "+                                  new SimpleNameReference(SourceInfo.NONE, ", "+                                                          new Word(SourceInfo.NONE, \"j\")),", "+                                  new IntegerLiteral(SourceInfo.NONE, 5));", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                       new Word(SourceInfo.NONE, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 10)));", "-        new ValueReturnStatement(SourceInfo.NO_INFO, ", "-                                 new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+        new ValueReturnStatement(SourceInfo.NONE, ", "+                                 new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+        new IntegerLiteral(SourceInfo.NONE, 5));", "+      ts = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift});", "-      cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      vd1 = new VariableData(\"j\", _packageMav, SymbolData.INT_TYPE, true, null);", "+      vd1 = new VariableData(\"b\", _packageMav, SymbolData.BOOLEAN_TYPE, true, null);", "-      te = new PlusAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-        new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+      te = new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"b\")),", "+        new BooleanLiteral(SourceInfo.NONE, true));", "+      ts = new ExpressionStatement(SourceInfo.NONE, ", "+                                   new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                                  new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                          new Word(SourceInfo.NONE, \"i\")), ", "+                                                                  new IntegerLiteral(SourceInfo.NONE, 10)));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      assertEquals(\"Error message should be correct\", \"You cannot use an assignment expression in the conditional expression of an if-then statement at any language level\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"You cannot use an assignment expression in the conditional \" +", "+                   \"expression of an if-then statement at any language level.  Perhaps you meant to compare two \" +", "+                   \"values with '=='\",", "+                   errors.get(0).getFirst());"]}], "num": 13359}
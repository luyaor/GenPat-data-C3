{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afa6b3265227e198d4fb2950633e11e9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062510af2ea3e2011224020b925e2727", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "591ec87995880046281596623701cb5a561fc66e", "commitAfterChange": "ce73fdb27a8e7aa886580e240ca54bfd98e64031", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public void collapse(Iterator iter)", "signatureAfterChange": "     public void collapse(Iterator iter)", "diff": ["-     */", "+      */", "-      int leftPos;", "-      int rightPos;", "-      Node<T> rightPoint;", "-", "-      if (this._pos > iter._pos) {", "-        leftPos = iter._pos;", "-        rightPos = this._pos;", "-        rightPoint = this._point;", "-", "-        this._point.pred = iter._point;", "-        iter._point.succ = this._point;", "-        //determine new length", "-        ModelList.this._length -= this._pos - iter._pos - 1;", "-        notifyOfCollapse(leftPos, rightPos, rightPoint);", "+      int itPos = iter._pos;", "+      int diff = Math.abs(_pos - itPos);", "+      if (diff <= 1) return; // _pos and iter.pos are either equal or adjacent", "+      ", "+      int leftPos, rightPos;", "+      Node<T> leftPoint, rightPoint;", "+      ", "+      if (_pos > itPos) {", "+        leftPos = itPos;", "+        leftPoint = iter._point;", "+        rightPos = _pos;", "+        rightPoint = _point;", "-      else if (this._pos < iter._pos) {", "-        leftPos = this._pos;", "-        rightPos = iter._pos;", "+      else /* _pos < iter._pos */ {", "+        leftPos = _pos;", "+        leftPoint = _point;", "+        rightPos = itPos;", "-", "-        iter._point.pred = this._point;", "-        this._point.succ = iter._point;", "-", "-        ModelList.this._length -= iter._pos - this._pos - 1;", "-        notifyOfCollapse(leftPos, rightPos, rightPoint);", "-      else { // this._pos == iter._pos", "-      }", "+      ", "+      rightPoint.pred = leftPoint;", "+      leftPoint.succ = rightPoint;", "+      _length -= rightPos - leftPos - 1;  //determine new length", "+      notifyOfCollapse(leftPos, rightPos, rightPoint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06fb8b80c3d8d43751bd482e30487957", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "6b9d21c46904df78c4c42153380af1416ff61bab", "commitAfterChange": "7ee1de808f3f616f32f05bbcf5fc74efb00c8d4a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "signatureAfterChange": "          private int getNewCaretPos(DocumentEvent e, ConsoleDocument doc)", "diff": ["+    ", "-      final int caretPos = _pane.getCaretPosition();", "+      final int oldCaretPos = _cachedCaretPos;", "+      final int oldPromptPos = _cachedPromptPos;", "+      // If caret preceded the previous prompt, move it to the new prompPos.  ", "+      if (oldCaretPos < oldPromptPos) return promptPos;", "-      // Figure out where the prompt was before the insertion; printed output precedes the prompt", "-      final int prevPromptPos = (insertPos < promptPos) ? promptPos - insertLen : promptPos;", "-      // If caret was at previous prompt (or before), move it to the new prompPos.  ", "-      if (caretPos <= prevPromptPos) return promptPos;", "-      /* Otherwise, caret was embedded in pending input following the previous prompt, advance it to preserve its", "-       * relative position to the prompt. (On keyboard input, prevPromptPos == promptPos, making this a no-op. */", "-      final int diff = caretPos - prevPromptPos;", "-      return Math.min(promptPos + diff, docLen);  ", "+//      System.err.println(\"oldPromptPos = \" + oldPromptPos + \" oldCaretPos = \" + oldCaretPos + \" insertPos = \" + insertPos", "+//                           + \" insertLen = \" + insertLen + \" promptPos = \" + promptPos + \" caretPos = \" + ", "+//                         _pane.getCaretPosition()); ", "+ ", "+      // Advance caret by insertion length (works both for echoed keyboard input and for writes to System.out", "+      int newCaretPos = oldCaretPos + insertLen;", "+      return Math.min(newCaretPos, docLen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8203b1e633cafde32a3bffe4f0ce2ab4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "a4a2af26b6c17a91ead92bae0871adcd6e96d716", "commitAfterChange": "d68c02cecc4cc58e597f55ca1d69f68604b75377", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 60, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   protected void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm)", "diff": ["-   */", "-  public void indent(final int reason) {", "-", "-    /**", "-     * Because indent() is a function called directly by the Keymap,", "-     * it does not go through the regular insertString channels and thus", "-     * it may not be in sync with the document's position.  For that", "-     * reason, we must sync the document with the pane before we go", "-     * ahead and indent.", "-     * old: _doc().setCurrentLocation(getCaretPosition());", "-     * new:", "-     */", "-    _doc.setCurrentLocation(getCaretPosition());", "-", "-    final int selStart = getSelectionStart();", "-    final int selEnd = getSelectionEnd();", "-", "-    //    final SwingWorker worker = new SwingWorker() {", "-    //      public Object construct() {", "-", "-    //        // Use a progress monitor to show a progress dialog only if necessary.", "-    ProgressMonitor pm = null;", "-    //= new ProgressMonitor(_mainFrame, \"Indenting...\",", "-    //                    null, 0, selEnd - selStart);", "-", "-    //pm.setProgress(0);", "-    // 3 seconds before displaying the progress bar.", "-    //pm.setMillisToDecideToPopup(3000);", "-", "-    // XXX: Temporary hack because of slow indent...", "-    //  Prompt if more than 10000 characters to be indented", "-    boolean doIndent = true;", "-          doIndent = false;", "-          break;", "-          doIndent = true;", "-          break;", "-", "-    // Do the indent", "-    if (doIndent) {", "-      _mainFrame.hourglassOn();", "+   */", "+  protected void indentLines(int selStart, int selEnd, int reason, ProgressMonitor pm) {", "+    _mainFrame.hourglassOn();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8761a75637b24544d84538032070d452", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "828da1589ecf80d1be67fffa7a1ab51335a3ab2f", "commitAfterChange": "faaa7b3cbc2c17378fdf27d2e0d53e3491783d3d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(DocumentEvent e)", "diff": ["+  class CaretUpdateListener implements DocumentListener {", "+    public void insertUpdate(DocumentEvent e) {", "+      int caretPos = _pane.getCaretPosition();", "+      int promptPos = _doc.getPromptPos();", "+      int length = _doc.getDocLength();", "+", "+      if (_doc.inProgress()) {", "+        // Scroll to the end of the document, since output has been", "+        // inserted after the prompt.", "+        moveToEnd();", "+      }", "+      else {", "+        // Only update caret if it has fallen behind the prompt.", "+        // (And be careful not to move it during a reset, when the", "+        //  prompt pos is temporarily far greater than the length.)", "+        if ((caretPos < promptPos) && (promptPos <= length)) {", "+          moveToPrompt();", "+        }", "+      }", "+    }", "-  class CaretUpdateListener implements DocumentListener {", "-    public void insertUpdate(DocumentEvent e) {", "-      int caretPos = _pane.getCaretPosition();", "-      int promptPos = _doc.getPromptPos();", "-      int length = _doc.getLength();", "-", "-      if (_doc.inProgress()) {", "-        // Scroll to the end of the document, since output has been", "-        // inserted after the prompt.", "-        moveToEnd();", "-        // Only update caret if it has fallen behind the prompt.", "-        // (And be careful not to move it during a reset, when the", "-        //  prompt pos is temporarily far greater than the length.)", "-        if ((caretPos < promptPos) && (promptPos <= length)) {", "-          moveToPrompt();", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca6fcc85023c666978959fb88cf37963", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "d187ef0ae751d72da55c4bc4f82be93731c1e46f", "commitAfterChange": "d8ed07c181201a238142caf2537f1e0f6da8bb42", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "   protected boolean _busy()", "diff": ["-  class CaretUpdateListener implements DocumentListener {", "-    public void insertUpdate(DocumentEvent e) {", "-      int caretPos = _pane.getCaretPosition();", "-      int promptPos = _doc.getPromptPos();", "-      int length = _doc.getDocLength();", "-      ", "-      // Figure out where the prompt was before the update", "-      int prevPromptPos = promptPos;", "-      if (e.getOffset() < promptPos) {", "-        // Insert happened before prompt,", "-        //  so previous position was further back", "-        prevPromptPos = promptPos - e.getLength();", "-      }", "-      if (_doc.inProgress()) {", "-        // Scroll to the end of the document, since output has been", "-        // inserted after the prompt.", "-        moveToEnd();", "-      }", "-      // (Be careful not to move caret during a reset, when the", "-      //  prompt pos is temporarily far greater than the length.)", "-      else if (promptPos <= length) {", "-        if (caretPos < prevPromptPos) {", "-          // Caret has fallen behind prompt, so make it catch up so", "-          //  the new input is visible.", "-          moveToPrompt();", "-        }", "-        else {", "-          // Caret was on or after prompt, so move it right by the size", "-          //  of the insert.", "-          int size = promptPos - prevPromptPos;", "-          if (size > 0) {", "-            moveTo(caretPos + size);", "-          }", "-        }", "-      }", "-    }", "+   */", "+  protected boolean _busy() {", "+    // should also check to see if we are resetting the interactions pane", "+    return _doc.inProgress();", "+  }"]}], "num": 30212}
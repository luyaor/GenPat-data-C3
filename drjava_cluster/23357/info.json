{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82b52cb185bb2172c37b109acd32a634", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "259fde8f7c3cfe97b330ebd536eff393", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ArgumentTokenizerTest.java", "commitBeforeChange": "e6059a690372d24d354206755ceb1326c1718997", "commitAfterChange": "30865706505ac032f7839e76656d4d5fb3416a82", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testTokenizeArguments()", "signatureAfterChange": "   public void testTokenizeArguments()", "diff": ["-    // [a b, c, d]", "-    //  This is different behavior than Unix or DOS, but it's more", "-    //  intuitive to the user (and easier to implement).", "+    // [a bc, d]", "+    // This behavior seems unintuitive, but it's the way both DOS and Unix", "+    //  handle command-line arguments.", "-                     new String[]{\"a b\",\"c\",\"d\"});", "+                     new String[]{\"a bc\",\"d\"});", "+", "+    // 'a b'c d", "+    // [a bc, d]", "+    // This behavior seems unintuitive, but it's the way both DOS and Unix", "+    //  handle command-line arguments.", "+    _assertTokenized(\"'a b'c d\",", "+                     new String[]{\"a bc\",\"d\"});", "+", "+    // a b\"c d\"", "+    // [a, bc d]", "+    // This behavior seems unintuitive, but it's the way both DOS and Unix", "+    //  handle command-line arguments.", "+    _assertTokenized(\"a b\\\"c d\\\"\",", "+                     new String[]{\"a\",\"bc d\"});", "+", "+    // a b'c d'", "+    // [a, bc d]", "+    // This behavior seems unintuitive, but it's the way both DOS and Unix", "+    //  handle command-line arguments.", "+    _assertTokenized(\"a b'c d'\",", "+                     new String[]{\"a\",\"bc d\"});", "+", "+    // a b'c d'\"e f\" g \"hi \"", "+    // [a, bc de f, g, hi ]", "+    _assertTokenized(\"a b'c d'\\\"e f\\\" g \\\"hi \\\"\",", "+                     new String[]{\"a\",\"bc de f\",\"g\",\"hi \"});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd46ec95def81037bfd9bc1fb72475a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModelTest.java", "commitBeforeChange": "f1cdd8ab40ec812de32945f859fe4268e830f213", "commitAfterChange": "03b2d2796342d42693cf58d323df575cbd1df053", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testInterpretJavaClassname() throws DocumentAdapterException", "signatureAfterChange": "   public void testInterpretJavaArguments() throws DocumentAdapterException", "diff": ["-  public void testInterpretJavaClassname() throws DocumentAdapterException {", "-    TestInteractionsModel model = new TestInteractionsModel(_adapter) {", "-      protected void _interpret(String toEval) {", "-        this.toEval = toEval;", "-      }", "-    };", "-    String code = \"java Foo arg1 arg2\";", "-    InteractionsDocument doc = model.getDocument();", "-    doc.insertText(doc.getDocLength(), code,", "-                   InteractionsDocument.DEFAULT_STYLE);", "-    model.interpretCurrentInteraction();", "-    // Arguments must be quoted as strings", "-    assertEquals(\"string being interpreted\",", "-                 \"Foo.main(new String[]{\\\"arg1\\\",\\\"arg2\\\"});\",", "-                 model.toEval);", "+  public void testInterpretJavaArguments() throws DocumentAdapterException {", "+    // java Foo a b c", "+    _assertProcessedContents(\"java Foo a b c\",", "+                             \"Foo.main(new String[]{\\\"a\\\",\\\"b\\\",\\\"c\\\"});\");", "+    // java Foo \"a b c\"", "+    _assertProcessedContents(\"java Foo \\\"a b c\\\"\",", "+                             \"Foo.main(new String[]{\\\"a b c\\\"});\");", "+    // java Foo \"a b\"c d", "+    //  This is different behavior than Unix or DOS, but it's more", "+    //  intuitive to the user (and easier to implement).", "+    _assertProcessedContents(\"java Foo \\\"a b\\\"c d\",", "+                             \"Foo.main(new String[]{\\\"a b\\\",\\\"c\\\",\\\"d\\\"});\");", "+"]}], "num": 23357}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22f9a3cbf30855e4ead4df062a6726e8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6b945430757e2f72b4b886c8a8c193", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public TypeData forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that)", "signatureAfterChange": "   public TypeData forSimpleAnonymousClassInstantiation(SimpleAnonymousClassInstantiation that)", "diff": ["-    if (_data.isDoublyAnonymous()) {", "-      _addError(_data + \"is a nested anonymous class, which is not supported at any language level\", that);", "+    /* Note: _data should be the enclosing class. */", "+//    System.err.println(\"******** Type-checking the anonymous class \" + that);", "+//    if (! (_data instanceof SymbolData) )", "+//      System.err.println(\"********* Type-checking following anon class blows up \" + that);", "+//                                     ", "+//    assert _data instanceof SymbolData;", "+    ", "+    SymbolData enclosing = _data.getSymbolData();  // grabs the enclosing class if _data not already a SymbolData", "+    ", "+    if (enclosing.isDoublyAnonymous()) {", "+      _addError(enclosing + \"is a nested anonymous class, which is not supported at any language level\", that);", "-    ", "-    final SymbolData superclass_result = getSymbolData(that.getType().getName(), _data, that); // resolve super class", "-    ", "+    System.err.println(\"***** forSACInst called for anon class in \" + enclosing);", "+    final SymbolData superClass = getSymbolData(that.getType().getName(), enclosing, that); // resolve super class", "+    System.err.println(\"**** SuperClass symbol is \" + superClass);", "-    SymbolData myData = handleAnonymousClassInstantiation(that, superclass_result);", "+    SymbolData myData = handleAnonymousClassInstantiation(that, enclosing /*.getEnclosingClass() */);", "+    System.err.println(\"This anonymous class's symbol is: \" + myData);", "-    int lastIndexOfDot = name.lastIndexOf(\".\");", "-    if (!superclass_result.hasModifier(\"static\") && !superclass_result.isInterface() && ", "-        (superclass_result.getOuterData() != null) && lastIndexOfDot != -1) {", "+    int lastIndexOfDot = name.lastIndexOf('.');", "+    if (!superClass.hasModifier(\"static\") && !superClass.isInterface() && ", "+        (superClass.getOuterData() != null) && lastIndexOfDot != -1) {", "-      _addError(Data.dollarSignsToDots(superclass_result.getName()) + ", "+      _addError(Data.dollarSignsToDots(superClass.getName()) + ", "-    //if superclass_result is an interface, then the constructor that should be used is Object--i.e. no arguments", "-    if (superclass_result.isInterface()) {", "+    //if superClass is an interface, then the constructor that should be used is Object--i.e. no arguments", "+    if (superClass.isInterface()) {", "-    else classInstantiationHelper(that, superclass_result); //use super class here, since it has constructors in it", "+    else classInstantiationHelper(that, superClass); //use super class here, since it has constructors in it"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4edf4be469746a2dc01a16608c1bebe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOpsTest.java", "commitBeforeChange": "f9b0aacda7d0b19ff2541b10e4df48c67eef3bf5", "commitAfterChange": "51d1f2e57f80c21afa7918fd2fa925d58d67589d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      public void testReplaceVariables3()", "signatureAfterChange": "      public void testReplaceVariables3()", "diff": ["-    assertEquals(\"abc ${xxx}xyz\", StringOps.replaceVariables(\"abc \\\\${xxx}xyz\",props,PropertyMaps.TO_STRING));", "-    assertEquals(\"${xxx}xyz\", StringOps.replaceVariables(\"\\\\${xxx}xyz\",props,PropertyMaps.TO_STRING));", "+    String source = \"abc $${xxx}xyz\";", "+    String actual = StringOps.replaceVariables(source,props,PropertyMaps.TO_STRING);", "+    String expected = \"abc ${xxx}xyz\";", "+    System.err.println(\"source  : \"+source);", "+    System.err.println(\"expected: \"+expected);", "+    System.err.println(\"actual  : \"+actual);", "+    assertEquals(expected, actual);", "+    assertEquals(\"${xxx}xyz\", StringOps.replaceVariables(\"$${xxx}xyz\",props,PropertyMaps.TO_STRING));"]}], "num": 3575}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ce9949399b6972cb66d1edbd1172413", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13c9a18a724585796f08ce2c90016e3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 307, "methodNumberAfterChange": 313, "signatureBeforeChange": "              @Override public Iterable<ObjectMethodInvocation> forParameterizedClassType(final ParameterizedClassType t)", "signatureAfterChange": "     public Access accessibility()", "diff": ["+    }", "+    public Access accessibility() { return _method.accessibility(); }", "-      ", "-      @Override public Iterable<ObjectMethodInvocation> forParameterizedClassType(final ParameterizedClassType t) {", "-        final SubstitutionMap classSigma =", "-          new SubstitutionMap(SymbolUtil.allTypeParameters(t.ofClass()), t.typeArguments());", "-        Iterable<DJMethod> methods = IterUtil.filter(t.ofClass().declaredMethods(), _matchMethod);", "-//        System.out.println(\"Matching methods in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(matchingMethods));", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            // TODO: substitute out class type parameters from the method's parameters' bounds", "-            //       (how does the JLS handle this?)", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, ", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "-                               args, m.returnType(), expected);", "-          }", "-        };", "-        Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation> makeResult = ", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type rawReturned = m.returnType();", "-            Type returned = substitute(substitute(rawReturned, classSigma), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(methods, makeChecker, makeResult);", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff4457ea490d44209bc37f61a2a26716", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 301, "methodNumberAfterChange": 301, "signatureBeforeChange": "              @Override public Iterable<ObjectMethodInvocation> forSimpleClassType(final SimpleClassType t)", "signatureAfterChange": "          public FunctionInvocationCandidate(Function f, Iterable<? extends Type> targs,                                        Iterable<? extends Expression> args, Option<Type> expected)", "diff": ["+    ", "+    public FunctionInvocationCandidate(Function f, Iterable<? extends Type> targs,", "+                                       Iterable<? extends Expression> args, Option<Type> expected) {", "+      _f = f;", "+      _matcher = makeMatcher(f.declaredTypeParameters(), targs, parameterTypes(), args, f.returnType(), expected);", "+    }", "-      ", "-      @Override public Iterable<ObjectMethodInvocation> forSimpleClassType(final SimpleClassType t) {", "-        Iterable<DJMethod> methods = IterUtil.filter(t.ofClass().declaredMethods(), _matchMethod);", "-//        System.out.println(\"Matching methods in type \" + userRepresentation(t) + \": \" +", "-//                           IterUtil.multilineToString(matchingMethods));", "-        Lambda<DJMethod, SignatureChecker> makeChecker = new Lambda<DJMethod, SignatureChecker>() {", "-          public SignatureChecker value(DJMethod m) {", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m),", "-                               args, m.returnType(), expected);", "-          }", "-        };", "-        Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation> makeResult = ", "-          new Lambda2<DJMethod, SignatureChecker, ObjectMethodInvocation>() {", "-          public ObjectMethodInvocation value(DJMethod m, SignatureChecker checker) {", "-            SubstitutionMap sigma = new SubstitutionMap(checker.typeParameters(), checker.typeArguments());", "-            Type returned = substitute(m.returnType(), sigma);", "-            // TODO: Handle the thrown types", "-            return new ObjectMethodInvocation(m, returned, makeCast(t, object), checker.typeArguments(), ", "-                                              checker.arguments(), m.thrownTypes());", "-          }", "-        };", "-        return findSignatureMatches(methods, makeChecker, makeResult);", "-      }"]}], "num": 29447}
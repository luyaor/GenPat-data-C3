{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aff19da713ebf53ffa4217b4b0a4b217", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0083844bf9fbeb6557aecfb151241b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "efaccf437175951cd0b6645fd51acf615d54103d", "commitAfterChange": "eba3fba4afbda1a0953798485a71c0bfbe1bb5cf", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testUndoAndRedoAfterHittingEnter() throws BadLocationException", "signatureAfterChange": "   public void testCompoundUndoManager() throws BadLocationException", "diff": ["-  public void testUndoAndRedoAfterHittingEnter() throws BadLocationException {", "-    String text = \"public class foo {\";", "-    ", "-    String afterEnter =", "+  public void testCompoundUndoManager() throws BadLocationException {", "+    String text =", "-      \"  \";", "-", "+      \"int bar;\\n\" +", "+      \"}\";", "+    ", "+    String indented =", "+      \"public class foo {\\n\" +", "+      \"  int bar;\\n\" +", "+      \"}\";", "+    ", "-    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL, new Integer(2));", "-    _defModel.insertString(0, text, null);", "-    assertEquals(\"Should have inserted correctly.\", text, ", "-                 _defModel.getText(0, _defModel.getLength()));", "+    DrJava.getConfig().setSetting(OptionConstants.INDENT_LEVEL,new Integer(2));", "-    _defModel.insertString(18, \"\\n\", null);", "-/*", "-    assertEquals(\"Should have entered the newline correctly.\", afterEnter, ", "-                 _defModel.getText(0,_defModel.getLength()));", "+    // Start a compound edit and verify the returned key", "+    int key = _defModel.getUndoManager().startCompoundEdit();", "+    assertEquals(\"Should have returned the correct key.\", 0, key);", "+    ", "+    // Insert a test string into the document", "+    _defModel.insertString(0, text, null);", "+    assertEquals(\"Should have inserted the text properly.\", text, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // Indent the lines, so as to trigger a nested compond edit", "+    _defModel.indentLines(0, _defModel.getLength());", "+    assertEquals(\"Should have indented correctly.\", indented, ", "+                 _defModel.getText(0, _defModel.getLength()));", "+    ", "+    // End the outer compound edit and verify that both get undone", "+    _defModel.getUndoManager().endCompoundEdit(key);", "-    assertEquals(\"undo commenting\",text, _defModel.getText(0,_defModel.getLength()));", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo commenting\",commented, _defModel.getText(0,_defModel.getLength()));", "-*/    ", "+    assertEquals(\"Should have undone correctly.\", \"\", ", "+                 _defModel.getText(0, _defModel.getLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b424f91708e11dfd68f785cc630edf1f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocumentTest.java", "commitBeforeChange": "aa7f147d71330aa12463dfbc7a233e3ed25560e6", "commitAfterChange": "cfaac02e8e33f506b730c3f8ce96676d16b8f705", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void interpretCurrentInteraction()", "signatureAfterChange": "   public void testRecallFromHistory() throws DocumentAdapterException", "diff": ["-    }", "-    public void interpretCurrentInteraction() {", "-      fail(\"interpretCurrentInteraction called unexpectedly\");", "-    }", "+  public void testRecallFromHistory() throws DocumentAdapterException {", "+    String origText = _doc.getDocText(0, _doc.getDocLength());", "+    _doc.addToHistory(\"command\");", "+    assertEquals(\"Contents before recall prev\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    _doc.recallPreviousInteractionInHistory();", "+    assertEquals(\"Contents after recall prev\", ", "+                 origText + \"command\", _doc.getDocText(0, _doc.getDocLength()));", "+    ", "+    _doc.recallNextInteractionInHistory();", "+    assertEquals(\"Contents after recall next\", ", "+                 origText, _doc.getDocText(0, _doc.getDocLength()));"]}], "num": 2828}
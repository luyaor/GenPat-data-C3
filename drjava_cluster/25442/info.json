{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "530a43a71eda8a1b60dc35916e653808", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8244ee84c0746fcf847f2c701f752096", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "df1e36f71885ed44596fe30b7349f6c2af6222fa", "commitAfterChange": "45db1409c8267a28de60f839cd50b04fc79ebe8a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-          TypeChecker tc = makeTypeChecker(checkVisitorContext);", "+          AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(checkVisitorContext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bb828a560d0d1cb0cc09e44c2b1d33e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExprParserTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public void testParseSucceeds() throws IOException, ParseException", "signatureAfterChange": "   public void testParseSucceeds() throws IOException, ParseException", "diff": ["-   */\r", "-  public void testParseSucceeds() throws IOException, ParseException {\r", "-    File directory = new File(\"testFiles\");\r", "-\r", "-    File[] testFiles = directory.listFiles(new FileFilter() {\r", "-      public boolean accept(File pathName) {\r", "-        return pathName.getAbsolutePath().endsWith(\".test\");\r", "-      }\r", "-    });\r", "-\r", "-    for(int i = 0; i < testFiles.length; i++) {\r", "-      File currFile = testFiles[i];\r", "-      SourceFile sf = null;\r", "-      try {\r", "-        sf = new JExprParser(currFile).SourceFile();\r", "-      }\r", "-      catch (ParseException pe) {\r", "-        throw pe;\r", "-      }\r", "-\r", "-      String path2 = currFile.getAbsolutePath();\r", "-      int indexOfLastDot2 = path2.lastIndexOf('.');\r", "-      String newPath2 = path2.substring(0, indexOfLastDot2) + \".actual\";\r", "-      FileWriter fw = new FileWriter(newPath2);\r", "-      fw.write(sf.toString());\r", "-      fw.close();\r", "-      \r", "-      // Get the corresponding expected String value for the toString of the SourceFile.\r", "-      String path = currFile.getAbsolutePath();\r", "-      int indexOfLastDot = path.lastIndexOf('.');\r", "-      String newPath = path.substring(0, indexOfLastDot) + \".expected\";\r", "-      File f = new File(newPath);\r", "-      String text = readFileAsString(f);\r", "-      assertEquals(\"The resulting SourceFile generated from \" + currFile + \" is not correct.\", text, sf.toString());\r", "-    }\r", "-  }\r", "+   */", "+  public void testParseSucceeds() throws IOException, ParseException {", "+    File directory = new File(\"testFiles\");", "+", "+    File[] testFiles = directory.listFiles(new FileFilter() {", "+      public boolean accept(File pathName) {", "+        return pathName.getAbsolutePath().endsWith(\".test\");", "+      }", "+    });", "+", "+    for(int i = 0; i < testFiles.length; i++) {", "+      File currFile = testFiles[i];", "+      SourceFile sf = null;", "+      try {", "+        sf = new JExprParser(currFile).SourceFile();", "+      }", "+      catch (ParseException pe) {", "+        throw pe;", "+      }", "+", "+      String path2 = currFile.getAbsolutePath();", "+      int indexOfLastDot2 = path2.lastIndexOf('.');", "+      String newPath2 = path2.substring(0, indexOfLastDot2) + \".actual\";", "+      FileWriter fw = new FileWriter(newPath2);", "+      fw.write(sf.toString());", "+      fw.close();", "+      ", "+      // Get the corresponding expected String value for the toString of the SourceFile.", "+      String path = currFile.getAbsolutePath();", "+      int indexOfLastDot = path.lastIndexOf('.');", "+      String newPath = path.substring(0, indexOfLastDot) + \".expected\";", "+      File f = new File(newPath);", "+      String text = IOUtil.toString(f);", "+      assertEquals(\"The resulting SourceFile generated from \" + currFile + \" is not correct.\", text, sf.toString());", "+    }", "+  }"]}], "num": 25442}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7c8e9051e4eb059d99b378e3c71859f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01237e7b1ad9fe894307cac73a1279d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "ec1234c8205fc39cf1fac2ca94b073f8a0c191b4", "commitAfterChange": "dc012dd7d972609a38d1836c72ebe86b07df0e53", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private FindResult _findNextInAllDocs(AbstractDocumentInterface docToSearch, int start, int end) throws BadLocationException", "signatureAfterChange": "   private FindResult _findNextInAllDocs(AbstractDocumentInterface docToSearch, int start, int end) throws BadLocationException", "diff": ["-//      Utilities.showDebug(\"DEBUG: Acquiring other documents lock\");", "-//      Utilities.showDebug(\"DEBUG: Lock acquired\");", "-//        Utilities.showDebug(\"DEBUG: startPos = \" + start);", "-//        Utilities.showDebug(\"DEBUG: end = \" + end);", "-        if (!_searchBackwards) text = docToSearch.getText(start, end /*docToSearch.getLength() - start*/);", "-        else text = docToSearch.getText(start, end);", "+        text = docToSearch.getText(start, end);", "-//      Utilities.showDebug(\"DEBUG: text = \" + text);", "-//      Utilities.showDebug(\"DEBUG: foundOffset = \" + foundOffset);", "-        // the found location is inside a comment or a string that the user has asked to ignore", "-//          Utilities.showDebug(\"DEBUG: We are in a position to be ignored in another document\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e33d46dff9f5163c6ec812ee0ad13d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "1551840e0590a4d224d98cf5aeb081d54054aafb", "commitAfterChange": "fe644290d76f63ed4693cfbe935eaacd56666243", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     public void selectItem(CompilerError error)", "signatureAfterChange": "     public void selectItem(CompilerError error)", "diff": ["-     */", "+    /** Selects the given error inside the error list pane. */", "+//      Utilities.showDebug(\"selectItem(\" + error + \") called\");", "+//        Utilities.showDebug(\"selected index = \" + i);", "-        if (i + 1 >= (_numErrors)) {", "-          endPos = getDocument().getLength();", "-        }", "-        else {", "-          endPos = _errorListPositions[i + 1].getOffset();", "-        }", "+        if (i + 1 >= (_numErrors)) endPos = getDocument().getLength();", "+        else endPos = _errorListPositions[i + 1].getOffset();", "+        ", "+//        Utilities.showDebug(\"startpos = \" + startPos + \" endpos = \" + endPos);", "+//            Utilities.showDebug(\"Either startRect or endRect is null!\");"]}], "num": 3356}
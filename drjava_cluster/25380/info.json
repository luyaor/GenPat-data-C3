{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e771d68ee7f73a98eb9261bbc36bf637", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "283db4e66090b82160840a28e705f4f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 746, "methodNumberAfterChange": 746, "signatureBeforeChange": "   private void _setUpKeyBindingMaps()", "signatureAfterChange": "   private void _setUpKeyBindingMaps()", "diff": ["-    kbm.addShiftAction(KEY_BACKWARD, DefaultEditorKit.selectionBackwardAction);", "+    kbm.put(KEY_BACKWARD_SELECT, actionMap.get(DefaultEditorKit.selectionBackwardAction), null, \"Select Backward\");", "-    kbm.addShiftAction(KEY_BEGIN_DOCUMENT, DefaultEditorKit.selectionBeginAction);", "+    kbm.put(KEY_BEGIN_DOCUMENT_SELECT, actionMap.get(DefaultEditorKit.selectionBeginAction), null, \"Select Begin Document\");", "-//    kbm.put(KEY_BEGIN_LINE, actionMap.get(DefaultEditorKit.beginLineAction), null, \"Begin Line\");", "-//    kbm.addShiftAction(KEY_BEGIN_LINE, DefaultEditorKit.selectionBeginLineAction);", "-    kbm.addShiftAction(KEY_BEGIN_LINE, _selectionBeginLineAction);", "+    kbm.put(KEY_BEGIN_LINE_SELECT, _selectionBeginLineAction, null, \"Select Begin Line\");", "-    kbm.addShiftAction(KEY_PREVIOUS_WORD, _currentDefDoc.getEditor().selectionPreviousWordAction);", "+    kbm.put(KEY_PREVIOUS_WORD_SELECT, actionMap.get(_currentDefDoc.getEditor().selectionPreviousWordAction), null, \"Select Previous Word\");", "-    kbm.addShiftAction(KEY_DOWN, DefaultEditorKit.selectionDownAction);", "+    kbm.put(KEY_DOWN_SELECT, actionMap.get(DefaultEditorKit.selectionDownAction), null, \"Select Down\");", "-    kbm.addShiftAction(KEY_END_DOCUMENT, DefaultEditorKit.selectionEndAction);", "+    kbm.put(KEY_END_DOCUMENT_SELECT, actionMap.get(DefaultEditorKit.selectionEndAction), null, \"Select End Document\");", "-    kbm.put(KEY_END_LINE, actionMap.get(DefaultEditorKit.endLineAction), null, \"End Line\");", "-    kbm.addShiftAction(KEY_END_LINE, DefaultEditorKit.selectionEndLineAction);", "+    kbm.put(KEY_END_LINE, actionMap.get(DefaultEditorKit.endLineAction), null, \"End Line\"); // ?", "+    kbm.put(KEY_END_LINE_SELECT, actionMap.get(DefaultEditorKit.selectionEndLineAction), null, \"Select End Line\");", "-    kbm.addShiftAction(KEY_NEXT_WORD, _currentDefDoc.getEditor().selectionNextWordAction);", "+    kbm.put(KEY_NEXT_WORD_SELECT, actionMap.get(_currentDefDoc.getEditor().selectionNextWordAction), null, \"Select Next Word\");", "-    kbm.addShiftAction(KEY_FORWARD, DefaultEditorKit.selectionForwardAction);", "+    kbm.put(KEY_FORWARD_SELECT, actionMap.get(DefaultEditorKit.selectionForwardAction), null, \"Select Forward\");", "-    kbm.addShiftAction(KEY_UP, DefaultEditorKit.selectionUpAction);", "+    kbm.put(KEY_UP_SELECT, actionMap.get(DefaultEditorKit.selectionUpAction), null, \"Select Up\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c27999ca61854f046fd85efda968272b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "signatureAfterChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "diff": ["-   */\r", "-  protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2) {\r", "-    if ((sd1.isDoubleType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-        (sd2.isDoubleType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.DOUBLE_TYPE;\r", "-    }\r", "-    else if ((sd1.isFloatType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-             (sd2.isFloatType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.FLOAT_TYPE;\r", "-    }\r", "-    else if ((sd1.isLongType(_targetVersion) && sd2.isNumberType(_targetVersion)) ||\r", "-             (sd2.isLongType(_targetVersion) && sd1.isNumberType(_targetVersion))) {\r", "-      return SymbolData.LONG_TYPE;\r", "-    }\r", "-    else if (sd1.isBooleanType(_targetVersion) && sd2.isBooleanType(_targetVersion)) {\r", "-      return SymbolData.BOOLEAN_TYPE;\r", "-    }\r", "-    else return SymbolData.INT_TYPE; // NOTE: It seems like any binary operation on number types with only ints, shorts, chars, or bytes will return an int\r", "-  }\r", "+   */", "+  protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2) {", "+    if ((sd1.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "+         sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+        (sd2.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "+         sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.DOUBLE_TYPE;", "+    }", "+    else if ((sd1.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+             (sd2.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.FLOAT_TYPE;", "+    }", "+    else if ((sd1.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "+             (sd2.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "+              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+      return SymbolData.LONG_TYPE;", "+    }", "+    else if (sd1.isBooleanType(LanguageLevelConverter.OPT.javaVersion()) &&", "+             sd2.isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+      return SymbolData.BOOLEAN_TYPE;", "+    }", "+    else return SymbolData.INT_TYPE; // NOTE: It seems like any binary operation on number types with only ints, shorts, chars, or bytes will return an int", "+  }"]}], "num": 25380}
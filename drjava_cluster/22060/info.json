{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69e32b42ac84bbd96b701b599b819264", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46411f02ad5c7a5d9edd0d2e4a7034a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void interpret(String s, String interpreterName)", "signatureAfterChange": "   public InterpretResult interpret(String s, String interpreterName)", "diff": ["-   */", "-  public void interpret(String s, String interpreterName) { interpret(s, getInterpreter(interpreterName));  }", "+   */", "+  public InterpretResult interpret(String s, String interpreterName) {", "+    Interpreter i = _interpreters.get(interpreterName);", "+    if (i == null) {", "+      throw new IllegalArgumentException(\"Interpreter '\" + interpreterName + \"' does not exist.\");", "+    }", "+    return interpret(s, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca6f7412eab7d7a270ae87fb10230d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized boolean setActiveInterpreter(String name)", "signatureAfterChange": "   public synchronized boolean setActiveInterpreter(String name)", "diff": ["-   */", "-  public synchronized boolean setActiveInterpreter(String name) {", "-    _activeInterpreter = getInterpreter(name);", "-    return _activeInterpreter.inProgress();", "-  }", "+   */", "+  public synchronized boolean setActiveInterpreter(String name) {", "+    Interpreter i = _interpreters.get(name);", "+    if (i == null) { throw new IllegalArgumentException(\"Interpreter '\" + name + \"' does not exist.\"); }", "+    _activeInterpreter = i;", "+    return _busyInterpreters.contains(i);", "+  }"]}], "num": 22060}
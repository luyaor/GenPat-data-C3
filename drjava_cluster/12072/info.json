{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd9a31dfca44bb65fdc656d0b08eda67", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ffa73c78bfe7692d5c6ed61becd280e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionStartStmtOfBracePlus.java", "commitBeforeChange": "70db0284b961b782fbf10e4ee909c772468f8240", "commitAfterChange": "fa8797d559c4407e7439087045a904fdcd0edde8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void indentLine(DefinitionsDocument doc)", "signatureAfterChange": "   public void indentLine(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /**", "-    int startPos = startOfLine(doc, pos);", "-    IndentInfo ii = doc.getIndentInfo(startPos);", "-    int bracePos = ii.positionOfBrace;", "-    int endOfPrevStmt = findPrevDelimiter(doc, bracePos, {';','{','}'});", "-    int startStmtBrace = getFirstNonWSChar(doc, endOfPrevStmt);", "-    int indent = getWSToPrevNewLine(doc, startStmtBrace);", "+    int pos = doc.getCurrentLocation();", "+", "+    // Get distance to brace", "+    IndentInfo info = doc.getReduced().getIndentInformation();", "+    int distToBrace = info.distToBrace;", "+      ", "+    // If there is no brace, s.th. went wrong!", "+    if (distToBrace == -1) {", "+      throw new UnexpectedException(new RuntimeException(\"Precondition for ActionStartStmtOfBracePlus \" +", "+\t\t\t\t\t\t\t \"not met: there is no brace.\"));", "+    }", "+", "+    // Get the absolute position of the brace", "+    int bracePos = pos - distToBrace;", "+", "+    String indent = \"\";", "+    try {", "+      indent = doc.getIndentOfCurrStmt(bracePos);", "+    } catch (BadLocationException e) {", "+      // Should not happen", "+      throw new UnexpectedException(e);", "+    }", "+", "-    ", "-    adjustIndent(doc, startPos, indent);", "-    */", "+", "+    doc.setTab(indent, pos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbba3ed0c5c8a427bda69456f15ef8fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionNewParenPhrase.java", "commitBeforeChange": "1cb762451f589947c585a2a219ca59cd916faaa1", "commitAfterChange": "33157731339c994882aa1f63ed4a691707c328ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    throw new RuntimeException(\"Not yet implemented.\");", "-    ", "-    /**", "-    int startPos = startOfLine(doc, pos);", "-    IndentInfo ii = doc.getIndentInfo(pos);", "-    int delimPos = findPrevDelimiter(doc, startPos, {';',',','(','['});", "-    return (non-WS/comment after delimPos?);", "-", "-    */", "+    try {", "+      // Find start of line", "+      int here = doc.getCurrentLocation();", "+      int startLine = doc.getLineStartPos(here);", "+      ", "+      if (startLine > DefinitionsDocument.DOCSTART) {", "+        // Find previous delimiter", "+        char[] delims = {';', ',', '(', '['};", "+        int prevDelim = doc.findPrevDelimiter(here, delims);", "+        ", "+        if (prevDelim == DefinitionsDocument.ERROR_INDEX) {", "+          return false;", "+        }", "+        ", "+        // Make sure the delim is the previous non-WS char", "+        int nextNonWS = doc.getFirstNonWSCharPos(prevDelim + 1);", "+        if (nextNonWS == DefinitionsDocument.ERROR_INDEX) {", "+          nextNonWS = startLine;", "+        }", "+        return (nextNonWS >= startLine);", "+      }", "+    }", "+    catch (BadLocationException e) {", "+      // Shouldn't happen", "+      throw new UnexpectedException(e);", "+    }", "+    // On first line", "+    return false;"]}], "num": 12072}
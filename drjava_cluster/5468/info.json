{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b6966478e51256a4e91a2d03ae2678b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67f317f3d2f87388b27fb7da403bf6c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 488, "methodNumberAfterChange": 497, "signatureBeforeChange": "   public ObjectMethodInvocation lookupMethod(final Expression object, final String name,                                               final Iterable<? extends Type> typeArgs,                                               final Iterable<? extends Expression> args)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ObjectMethodInvocation lookupMethod(final Expression object, final String name,                                               final Iterable<? extends Type> typeArgs,                                               final Iterable<? extends Expression> args,                                              final Option<Type> expected)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                             final Iterable<? extends Expression> args)", "+                                             final Iterable<? extends Expression> args,", "+                                             final Option<Type> expected)", "-//                       userRepresentation(IterUtil.map(args, TYPE_OF_EXPRESSION)) + \")\");", "+//                       userRepresentation(IterUtil.map(args, NodeProperties.NODE_TYPE)) + \")\");", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m), args);", "+            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m),", "+                               args, m.returnType(), expected);", "-                               IterUtil.map(SymbolUtil.declaredParameterTypes(m), ERASE_LAMBDA), args);", "+                               IterUtil.map(SymbolUtil.declaredParameterTypes(m), ERASE_LAMBDA),", "+                               args, m.returnType(), expected);", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma), args);", "+                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "+                               args, m.returnType(), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d02a8dd585dbd107da3b228993274d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 501, "methodNumberAfterChange": 510, "signatureBeforeChange": "   public StaticMethodInvocation lookupStaticMethod(Type t, final String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public StaticMethodInvocation lookupStaticMethod(Type t, final String name,                                                     final Iterable<? extends Type> typeArgs,                                                     final Iterable<? extends Expression> args,                                                    final Option<Type> expected)     throws InvalidTargetException, InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                                   final Iterable<? extends Expression> args)", "+                                                   final Iterable<? extends Expression> args,", "+                                                   final Option<Type> expected)", "-//    System.out.println(\"\\nLooking up static method \" + name + \" in type \" + userRepresentation(t) +", "-//                       \" with typeArgs (\" + userRepresentation(typeArgs) + \") and args (\" +", "-//                       userRepresentation(IterUtil.map(args, TYPE_OF_EXPRESSION)) + \")\");", "+    //debug.logValues(\"Looking up method\", new String[]{ \"t\", \"name\", \"typeArgs\", \"args\", \"expected\" },", "+    //                wrap(t), name, wrap(typeArgs), args, wrap(expected));", "-            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m), args);", "+            return makeChecker(m.declaredTypeParameters(), typeArgs, SymbolUtil.declaredParameterTypes(m),", "+                               args, m.returnType(), expected);", "-                               IterUtil.map(SymbolUtil.declaredParameterTypes(m), ERASE_LAMBDA), args);", "+                               IterUtil.map(SymbolUtil.declaredParameterTypes(m), ERASE_LAMBDA),", "+                               args, m.returnType(), expected);", "-                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma), args);", "+                               substitute(SymbolUtil.declaredParameterTypes(m), classSigma),", "+                               args, m.returnType(), expected);"]}], "num": 5468}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfbb9d651ac38d94d6076b5fcb4a910e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1216ac714f5425be34b6efdda3a50242", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneMemoryLeakTest.java", "commitBeforeChange": "1591118711b9174a5cd4314e14319296b969ee78", "commitAfterChange": "deb4bbe3644e2d17508378353337903e5f2c956b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private void runIsolatedDrJavaSession() throws InterruptedException, IOException", "signatureAfterChange": "   private void runIsolatedDrJavaSession() throws InterruptedException, IOException", "diff": ["-    listener.reset();", "-    OpenDefinitionsDocument d1 = _model.newFile();", "-//    try {", "-//      java.lang.reflect.Field fTimeStamp = d1.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "-//      fTimeStamp.setAccessible(true);", "-//      fTimeStamp.setLong(d1,System.identityHashCode(d1));", "-//    } catch(Exception e) { throw new RuntimeException(e); }", "-    d1.addFinalizationListener(fldoc);", "-    listener.waitDocChanged();", "-    DefinitionsPane p1 = _frame.getCurrentDefPane();", "-    p1.addFinalizationListener(fl);", "-//    System.err.println(\"Listener attached to DefintionsPane@\" + p1.hashCode());", "-    assertEquals(\"Doc1 setup correctly\", d1, p1.getOpenDefDocument());", "-", "-    listener.reset();", "-    OpenDefinitionsDocument d2 = _model.newFile();", "-//    try {", "-//      java.lang.reflect.Field fTimeStamp = d2.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "-//      fTimeStamp.setAccessible(true);", "-//      fTimeStamp.setLong(d2,System.identityHashCode(d1));", "-//    } catch(Exception e) { throw new RuntimeException(e); }", "-    d2.addFinalizationListener(fldoc);", "-    listener.waitDocChanged();", "-    DefinitionsPane p2 = _frame.getCurrentDefPane();", "-    p2.addFinalizationListener(fl);", "-//    System.err.println(\"Listener attached to DefintionsPane@\" + p2.hashCode());", "-    assertEquals(\"Doc2 setup correctly\", d2, p2.getOpenDefDocument());", "+    OpenDefinitionsDocument[] d = new OpenDefinitionsDocument[PANE_COUNT];", "+    DefinitionsPane[] p = new DefinitionsPane[PANE_COUNT];", "-    listener.reset();", "-    OpenDefinitionsDocument d3 = _model.newFile();", "-//    try {", "-//      java.lang.reflect.Field fTimeStamp = d3.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "-//      fTimeStamp.setAccessible(true);", "-//      fTimeStamp.setLong(d3,System.identityHashCode(d1));", "-//    } catch(Exception e) { throw new RuntimeException(e); }", "-    d3.addFinalizationListener(fldoc);", "-    listener.waitDocChanged();", "-    DefinitionsPane p3 = _frame.getCurrentDefPane();", "-    p3.addFinalizationListener(fl);", "-//    System.err.println(\"Listener attached to DefintionsPane@\" + p3.hashCode()); ", "-    assertEquals(\"Doc3 setup correctly\", d3, p3.getOpenDefDocument());", "-       ", "-    listener.reset();", "-    OpenDefinitionsDocument d4 = _model.newFile();", "-//    try {", "-//      java.lang.reflect.Field fTimeStamp = d4.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "-//      fTimeStamp.setAccessible(true);", "-//      fTimeStamp.setLong(d4,System.identityHashCode(d1));", "-//    } catch(Exception e) { throw new RuntimeException(e); }", "-    d4.addFinalizationListener(fldoc);", "-    listener.waitDocChanged();", "-    DefinitionsPane p4 = _frame.getCurrentDefPane();", "-    p4.addFinalizationListener(fl);", "-//    System.err.println(\"Listener attached to DefintionsPane@\" + p4.hashCode());", "-    assertEquals(\"Doc4 setup correctly\", d4, p4.getOpenDefDocument());", "-        ", "-    listener.reset();", "-    OpenDefinitionsDocument d5 = _model.newFile();", "-//    try {", "-//      java.lang.reflect.Field fTimeStamp = d5.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "-//      fTimeStamp.setAccessible(true);", "-//      fTimeStamp.setLong(d5,System.identityHashCode(d1));", "-//    } catch(Exception e) { throw new RuntimeException(e); }", "-    d5.addFinalizationListener(fldoc);", "-    listener.waitDocChanged();", "-    DefinitionsPane p5 = _frame.getCurrentDefPane();", "-    p5.addFinalizationListener(fl);", "-//    System.err.println(\"Listener attached to DefintionsPane@\" + p5.hashCode()); ", "-    assertEquals(\"Doc5 setup correctly\", d5, p5.getOpenDefDocument());   ", "-    ", "-    listener.reset();", "-    OpenDefinitionsDocument d6 = _model.newFile();", "-//    try {", "-//      java.lang.reflect.Field fTimeStamp = d6.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "-//      fTimeStamp.setAccessible(true);", "-//      fTimeStamp.setLong(d6,System.identityHashCode(d1));", "-//    } catch(Exception e) { throw new RuntimeException(e); }", "-    d6.addFinalizationListener(fldoc);", "-    listener.waitDocChanged();", "-    DefinitionsPane p6 = _frame.getCurrentDefPane();", "-    p6.addFinalizationListener(fl);", "-//    System.err.println(\"Listener attached to DefintionsPane@\" + p6.hashCode()); ", "-    assertEquals(\"Doc6 setup correctly\", d6, p6.getOpenDefDocument()); ", "+    for(int i=0; i<PANE_COUNT; ++i) {", "+      listener.reset();", "+      d[i] = _model.newFile();", "+      try {", "+        java.lang.reflect.Field fTimeStamp = d[i].getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+        fTimeStamp.setAccessible(true);", "+        fTimeStamp.setLong(d[i],System.identityHashCode(d[i]));", "+      } catch(Exception e) {", "+        println(\"Couldn't set _timestamp field of Document \"+i+\" to identity hashcode \");", "+        throw new RuntimeException(e);", "+      }", "+      d[i].addFinalizationListener(fldoc);", "+      listener.waitDocChanged();", "+      p[i] = _frame.getCurrentDefPane();", "+      p[i].addFinalizationListener(fl);", "+      println(\"Listener attached to DefinitionsPane \"+i+\" 0x\" + hexIdentityHashCode(p[i]));", "+      println(\"\\tDocument is 0x\" + hexIdentityHashCode(d[i]));", "+      try {", "+        java.lang.reflect.Field fTimeStamp = d[i].getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+        fTimeStamp.setAccessible(true);", "+        println(\"\\tDocument's _timestamp is set to \" + Long.toHexString(fTimeStamp.getLong(d[i])));", "+      } catch(Exception e) {", "+        println(\"Couldn't get _timestamp field of Document \"+i);", "+        throw new RuntimeException(e);", "+      }", "+      assertEquals(\"Doc \"+i+\" set up correctly\", d[i], p[i].getOpenDefDocument());", "+    }", "-//    StringBuilder sbIdHashCodes = new StringBuilder();", "-//    sbIdHashCodes.append(\"_frame = ", "-//      \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-//    sbIdHashCodes.append(\"_model = ", "-//      \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-//    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "-//    sbIdHashCodes.append(\"p2     = \"+p2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "-//    sbIdHashCodes.append(\"p3     = \"+p3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "-//    sbIdHashCodes.append(\"p4     = \"+p4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "-//    sbIdHashCodes.append(\"p5     = \"+p5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "-//    sbIdHashCodes.append(\"p6     = \"+p6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "-//    sbIdHashCodes.append(\"d1     = \"+d1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "-//    sbIdHashCodes.append(\"d2     = \"+d2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "-//    sbIdHashCodes.append(\"d3     = \"+d3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "-//    sbIdHashCodes.append(\"d4     = \"+d4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "-//    sbIdHashCodes.append(\"d5     = \"+d5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "-//    sbIdHashCodes.append(\"d6     = \"+d6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "+    sbIdHashCodes = new StringBuilder();", "+    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+hexIdentityHashCode(_frame)+\"\\n\");", "+    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+hexIdentityHashCode(_frame)+\"\\n\");", "+    for(int i=0; i<PANE_COUNT;++i) {", "+      sbIdHashCodes.append(\"p[\"+i+\"]   = \"+p[i].getClass().getName()+\"@0x\"+hexIdentityHashCode(p[i])+\"\\n\");", "+    }", "+    for(int i=0; i<PANE_COUNT;++i) {", "+      sbIdHashCodes.append(\"d[\"+i+\"]   = \"+d[i].getClass().getName()+\"@0x\"+hexIdentityHashCode(d[i])+\"\\n\");", "+    }", "+", "+    WeakReference[] wd = new WeakReference[PANE_COUNT];", "+    WeakReference[] wp = new WeakReference[PANE_COUNT];", "+    for(int i=0; i<PANE_COUNT;++i) {", "+      wd[i] = new WeakReference<OpenDefinitionsDocument>(d[i]);", "+      wp[i] = new WeakReference<DefinitionsPane>(p[i]);", "+    }", "-    p1 = p2 = p3 = p4 = p5 = p6 = null;", "-    d1 = d2 = d3 = d4 = d5 = d6 = null;", "-//    _model.newFile();  // create a new document and pane for the model to hold as active.", "+    for(int i=0; i<PANE_COUNT; ++i) {", "+      p[i] = null;", "+      d[i] = null;", "+    }", "-    assertEquals(\"All files closed\", 7, listener.getClosedCt());  // 7 includes for initial open file", "+    assertEquals(\"All files closed\", PANE_COUNT+1, listener.getClosedCt()); // includes for initial open file", "+    ", "+    _model.newFile();  // create a new document and pane for the model to hold as active.", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _model.closeAllFiles(); } });", "+    Utilities.clearEventQueue();", "+    ", "+    ", "+    for(int i=0; i<PANE_COUNT; ++i) {", "+      assertGC(\"Document \"+i+\" leaked\", wd[i]);", "+      assertGC(\"Pane \"+i+\" leaked\", wp[i]);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c871ff5c780638a880e03b4ad3d80132", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "7f5ff64d986e80db8fa3ceeb1048b991af6a4ea0", "commitAfterChange": "6b936f625ceea21472b90559f34694154e802e14", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "diff": ["+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d1.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d1,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d2.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d2,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d3.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d3,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d4.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d4,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d5.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d5,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d6.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d6,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "-    StringBuilder sbIdHashCodes = new StringBuilder();", "-    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "-    sbIdHashCodes.append(\"p2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "-    sbIdHashCodes.append(\"p3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "-    sbIdHashCodes.append(\"p4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "-    sbIdHashCodes.append(\"p5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "-    sbIdHashCodes.append(\"p6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "-    sbIdHashCodes.append(\"d1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "-    sbIdHashCodes.append(\"d2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "-    sbIdHashCodes.append(\"d3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "-    sbIdHashCodes.append(\"d4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "-    sbIdHashCodes.append(\"d5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "-    sbIdHashCodes.append(\"d6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "-", "+//    StringBuilder sbIdHashCodes = new StringBuilder();", "+//    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+//    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+//    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "+//    sbIdHashCodes.append(\"p2     = \"+p2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "+//    sbIdHashCodes.append(\"p3     = \"+p3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "+//    sbIdHashCodes.append(\"p4     = \"+p4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "+//    sbIdHashCodes.append(\"p5     = \"+p5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "+//    sbIdHashCodes.append(\"p6     = \"+p6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "+//    sbIdHashCodes.append(\"d1     = \"+d1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "+//    sbIdHashCodes.append(\"d2     = \"+d2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "+//    sbIdHashCodes.append(\"d3     = \"+d3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "+//    sbIdHashCodes.append(\"d4     = \"+d4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "+//    sbIdHashCodes.append(\"d5     = \"+d5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "+//    sbIdHashCodes.append(\"d6     = \"+d6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "-      LOG.log(sbIdHashCodes.toString());", "+//      LOG.log(sbIdHashCodes.toString());"]}], "num": 22013}
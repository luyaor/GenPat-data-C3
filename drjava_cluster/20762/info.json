{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54470d955dde7b2fe48b339c9635d2ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f97f4dfba4c58c0b669519041970266", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 72, "signatureBeforeChange": "   private Method _getDefineVariableMethod(ReferenceType interpreterRef, Value val) throws DebugException", "signatureAfterChange": "   private ObjectReference _box(PrimitiveValue val, ThreadReference thread,                                List<ObjectReference> toRelease) throws DebugException", "diff": ["-  /** @return the appropriate Method to call in the InterpreterJVM in order to define a variable of the type val. */", "-  private Method _getDefineVariableMethod(ReferenceType interpreterRef, Value val) throws DebugException {", "-    List<Method> methods;", "-    String signature_beginning = \"(Ljava/lang/String;\";", "-    String signature_end = \")V\";", "-    String signature_mid;", "-    String signature;", "-", "-    if ((val == null) || ( val instanceof ObjectReference )) {", "-      signature_mid = \"Ljava/lang/Object;Ljava/lang/Class;\";", "-    }", "-    else if ( val instanceof BooleanValue ) {", "-      signature_mid = \"Z\";", "-    }", "-    else if ( val instanceof ByteValue ) {", "-      signature_mid = \"B\";", "-    }", "-    else if ( val instanceof CharValue ) {", "-      signature_mid = \"C\";", "-    }", "-    else if ( val instanceof DoubleValue ) {", "-      signature_mid = \"D\";", "-    }", "-    else if ( val instanceof FloatValue ) {", "-      signature_mid = \"F\";", "-    }", "-    else if ( val instanceof IntegerValue ) {", "-      signature_mid = \"I\";", "-    }", "-    else if ( val instanceof LongValue ) {", "-      signature_mid = \"J\";", "-    }", "-    else if ( val instanceof ShortValue ) {", "-      signature_mid = \"S\";", "-    }", "-    else{", "-      throw new IllegalArgumentException(\"Tried to define a variable which is\\n\" +", "-                                         \"not an Object or a primitive type:\\n\" +", "-                                         val);", "-    }", "-", "-    signature = signature_beginning + signature_mid + signature_end;", "-    methods = interpreterRef.methodsByName(\"defineVariable\", signature);  // JDK 1.5 will eliminate this warning", "-    if (methods.size() <= 0) {", "-      throw new DebugException(\"Could not find defineVariable method.\");", "-    }", "-", "-    // Make sure we have a concrete method", "-    Method tempMethod = methods.get(0);", "-    for (int i = 1; i < methods.size() && tempMethod.isAbstract(); i++) {", "-      tempMethod = methods.get(i);", "-    }", "-    if (tempMethod.isAbstract()) {", "-      throw new DebugException(\"Could not find concrete defineVariable method.\");", "-    }", "-", "-    return tempMethod;", "-  }", "+  /** Create a boxed object corresponding to the given primitive. */", "+  private ObjectReference _box(PrimitiveValue val, ThreadReference thread,", "+                               List<ObjectReference> toRelease) throws DebugException {", "+    String c = null;", "+    String prim = null;", "+    if (val instanceof BooleanValue) { c = \"java.lang.Boolean\"; prim = \"Z\"; }", "+    else if (val instanceof IntegerValue) { c = \"java.lang.Integer\"; prim = \"I\"; }", "+    else if (val instanceof DoubleValue) { c = \"java.lang.Double\"; prim = \"D\"; }", "+    else if (val instanceof CharValue) { c = \"java.lang.Character\"; prim = \"C\"; }", "+    else if (val instanceof ByteValue) { c = \"java.lang.Byte\"; prim = \"B\"; }", "+    else if (val instanceof ShortValue) { c = \"java.lang.Short\"; prim = \"S\"; }", "+    else if (val instanceof LongValue) { c = \"java.lang.Long\"; prim = \"J\"; }", "+    else if (val instanceof FloatValue) { c = \"java.lang.Float\"; prim = \"F\"; }", "+    ClassType location = (ClassType) _getClass(c);", "+    for (int tries = 0; tries < OBJECT_COLLECTED_TRIES; tries++) {", "+      try {", "+        ObjectReference result;", "+        try {", "+          String valueOfSig = \"(\" + prim + \")L\" + c.replace('.', '/') + \";\";", "+          result = (ObjectReference) _invokeStaticMethod(thread, location, \"valueOf\",", "+                                                         valueOfSig, val);", "+        }", "+        catch (DebugException e) {", "+          // valueOf() is not available in all classes in Java 1.4", "+          debug.log(\"Can't invoke valueOf()\", e);", "+          String consSig = \"(\" + prim + \")V\";", "+          result = (ObjectReference) _invokeConstructor(thread, location, consSig, val);", "+        }", "+        ", "+        result.disableCollection();", "+        if (!result.isCollected()) {", "+          toRelease.add(result);", "+          return result;", "+        }", "+      }", "+      catch (ObjectCollectedException e) { /* try again */ }", "+    }", "+    throw new DebugException(\"Ran out of OBJECT_COLLECTED_TRIES\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc59342aafe9c2db44e056a7264b4d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 64, "signatureBeforeChange": "          private void compareObjects(String name, Object leftVal, SourceInfo.Wrapper left,                                  Object rightVal, SourceInfo.Wrapper right)", "signatureAfterChange": "          private void compareObjects(String context, Object leftVal, SourceInfo.Wrapper left,                                  Object rightVal, SourceInfo.Wrapper right)", "diff": ["-    private void compareObjects(String name, Object leftVal, SourceInfo.Wrapper left,", "+    private void compareObjects(String context, Object leftVal, SourceInfo.Wrapper left,", "-          mismatch(\"Different \" + name, \"\"+leftVal, left, \"\"+rightVal, right);", "+          _log.mismatch(\"Different value\", context, \"\"+leftVal, left, \"\"+rightVal, right);", "+      ", "+      else if (leftVal instanceof Object[] && rightVal instanceof Object[]) {", "+        compareObjects(context, Arrays.asList((Object[]) leftVal), left, Arrays.asList((Object[]) rightVal), right);", "+      }", "+      ", "+      else if (leftVal instanceof Thunk<?> && rightVal instanceof Thunk<?> ||", "+                leftVal instanceof Lambda<?,?> && rightVal instanceof Lambda<?,?> ||", "+                leftVal instanceof Lambda2<?,?,?> && rightVal instanceof Lambda2<?,?,?>)  {} // ignore", "-          mismatch(\"Different \" + name, leftName, left, rightName, right);", "+          _log.mismatch(\"Different value\", context, leftName, left, rightName, right);", "-        compare((Node) leftVal, (Node) rightVal);", "+        compare(context, (Node) leftVal, (Node) rightVal);", "-            compareObjects(\"element of \" + name, p.first(), left, p.second(), right);", "+            compareObjects(\"element of \" + context, p.first(), left, p.second(), right);", "-          mismatch(\"Different lengths of \" + name, \"\"+leftList.size(), left, \"\"+rightList.size(), right);", "+          _log.mismatch(\"Different lengths\", context, \"\"+leftList.size(), left, \"\"+rightList.size(), right);", "-          compareObjects(name, leftOpt.unwrap(), left, rightOpt.unwrap(), right);", "+          compareObjects(context, leftOpt.unwrap(), left, rightOpt.unwrap(), right);", "-          mismatch(\"Different \" + name, leftVal.toString(), left, rightVal.toString(), right);", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "-      else if (supportedObject(leftVal) && supportedObject(rightVal)) {", "+      else if (leftVal instanceof Pair<?,?> && rightVal instanceof Pair<?,?>) {", "+        Pair<?,?> leftPair = (Pair<?,?>) leftVal;", "+        Pair<?,?> rightPair = (Pair<?,?>) rightVal;", "+        compareObjects(context, leftPair.first(), left, rightPair.first(), right);", "+        compareObjects(context, leftPair.second(), left, rightPair.second(), right);", "+      }", "+      ", "+      else if (leftVal instanceof DJClass && rightVal instanceof DJClass) {", "+        if (!sameClass((DJClass) leftVal, (DJClass) rightVal)) {", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "+        }", "+      }", "+      ", "+      else if (leftVal instanceof Variable && rightVal instanceof Variable) {", "+        if (!sameVariable((Variable) leftVal, (Variable) rightVal)) {", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "+        }", "+      }", "+      ", "+      else if (leftVal instanceof Function && rightVal instanceof Function) {", "+        if (!sameFunction((Function) leftVal, (Function) rightVal)) {", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "+        }", "+      }", "+      ", "+      else if (leftVal instanceof Type && rightVal instanceof Type) {", "+        if (!sameType((Type) leftVal, (Type) rightVal)) {", "+          _log.mismatchedType(context, (Type) leftVal, left, (Type) rightVal, right);", "+        }", "+      }", "+      ", "+      else if (supportedAtom(leftVal) && supportedAtom(rightVal)) {", "-          mismatch(\"Different \" + name, leftVal.toString(), left, rightVal.toString(), right);", "+          _log.mismatch(\"Different value\", context, leftVal.toString(), left, rightVal.toString(), right);", "-        mismatch(\"Unsupported object type in \" + name,", "-                 leftVal.getClass().getName(), left, rightVal.getClass().getName(), right);", "+        _log.mismatch(\"Unsupported object type\", context,", "+                      leftVal.getClass().getName(), left, rightVal.getClass().getName(), right);"]}], "num": 20762}
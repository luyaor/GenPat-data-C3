{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "332b2585b48da9e95b034352f2e908f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d1c235641eee4569f0164fd22a7259a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 238, "signatureBeforeChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> and3(Predicate3<? super T1, ? super T2, ? super T3> p1,                                  Predicate3<? super T1, ? super T2, ? super T3> p2)", "signatureAfterChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> and(Predicate3<? super T1, ? super T2, ? super T3> p1,                                 Predicate3<? super T1, ? super T2, ? super T3> p2)", "diff": ["-  /** @return  The conjunction ({@code &&}) of {@code p1} and {@code p2} */", "+  /** Produce the conjunction ({@code &&}) of {@code p1} and {@code p2}. */", "-    Predicate3<T1, T2, T3> and3(Predicate3<? super T1, ? super T2, ? super T3> p1, ", "-                                Predicate3<? super T1, ? super T2, ? super T3> p2) {", "-    return and3(IterUtil.makeIterable(p1, p2));", "-  }", "+    Predicate3<T1, T2, T3> and(Predicate3<? super T1, ? super T2, ? super T3> p1, ", "+    return new AndPredicate3<T1, T2, T3>(IterUtil.<Predicate3<? super T1, ? super T2, ? super T3>>", "+                                         make(p1, p2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "571db8a481d19893a6fb77113105185a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 239, "signatureBeforeChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> and3(Predicate3<? super T1, ? super T2, ? super T3> p1,                                  Predicate3<? super T1, ? super T2, ? super T3> p2,                                 Predicate3<? super T1, ? super T2, ? super T3> p3)", "signatureAfterChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> and(Predicate3<? super T1, ? super T2, ? super T3> p1,                                 Predicate3<? super T1, ? super T2, ? super T3> p2,                                Predicate3<? super T1, ? super T2, ? super T3> p3)", "diff": ["-  /** @return  The conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3} */", "-  public static <T1, T2, T3> ", "-    Predicate3<T1, T2, T3> and3(Predicate3<? super T1, ? super T2, ? super T3> p1, ", "-                                Predicate3<? super T1, ? super T2, ? super T3> p2,", "-                                Predicate3<? super T1, ? super T2, ? super T3> p3) {", "-    return and3(IterUtil.makeIterable(p1, p2, p3));", "-  }", "+  /** Produce the conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3}. */", "+    Predicate3<T1, T2, T3> and(Predicate3<? super T1, ? super T2, ? super T3> p1, ", "+    return new AndPredicate3<T1, T2, T3>(IterUtil.<Predicate3<? super T1, ? super T2, ? super T3>>", "+                                         make(p1, p2, p3));"]}], "num": 21377}
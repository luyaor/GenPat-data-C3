{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a31002e804f092969030b5f718bfab35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33f93e2559a84137be1ba111ad4eb309", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName,                                          MethodData[] accessors)", "diff": ["-  protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, MethodData[] accessors) {", "+  protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, ", "+                                        MethodData[] accessors) {", "-    VariableData equalsList = new VariableData(listName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),", "-                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),", "-                                 true, sd);", "+    VariableData equalsList = ", "+      new VariableData(listName, new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[]{ \"private\", \"static\" }),", "+                       _llv.getSymbolDataHelper(\"java.util.LinkedList\", SourceInfo.NO_INFO, false, false, false, false),", "+                       true, sd);", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\");", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                    \"/** This field is automatically generated by the Language Level Converter. */\");", "-      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList<\" + className + \"> \" + listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList<\" + className + \"> \" +", "+                      listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);", "-      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine + newLine);", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList \" + listName + ", "+                      \" = new java.util.LinkedList();\" + newLine + newLine);", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + ", "+                    \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if ((o == null) || (! o.getClass().equals(getClass()))) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else if ((o == null) || (! o.getClass().equals(getClass()))) {\" +", "+                    newLine);", "-      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == element);\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == element);\" + newLine + ", "+                      newLine);", "-        _writeToFileOut(indentString(baseIndent, 3) + \"java.util.Iterator<\" + className + \"> i = \" + listName + \".iterator();\" + newLine);", "+        _writeToFileOut(indentString(baseIndent, 3) + \"java.util.Iterator<\" + className + \"> i = \" + listName + ", "+                        \".iterator();\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == i.next());\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == i.next());\" + newLine +", "+                      newLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff0d3d3b0c25a3362c53ea4538df69ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "          public void test_isAssignable()", "signatureAfterChange": "          public void test_isAssignable()", "diff": ["-      MethodData md = new MethodData(\"Overwritten\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "-      MethodData md2 = new MethodData(\"Overwriting\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+      MethodData md = new MethodData(\"Overwritten\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData md2 = new MethodData(\"Overwriting\", _publicMav, new TypeParameter[0], _sd, new VariableData[0], new String[0], _sd, new NullLiteral(SourceInfo.NO_INFO));"]}], "num": 28566}
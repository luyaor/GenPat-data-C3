{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db464b9e9dd5ef1488648aaac8b7ad28", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90666e57d6895ccb6ae4cfdc465ebc69", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "commitAfterChange": "6d55d86705248616cac5b324a7c528485ceb6104", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void addDocument(ItemT doc, String path)", "signatureAfterChange": "   public void addDocument(ItemT doc, String path)", "diff": ["-    ", "-    synchronized(_model) {", "+    assert EventQueue.isDispatchThread();", "+    synchronized(_model) { // lock for mutation", "-      child.setUserObject(doc);", "-    }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5aab1c67c144ce98d45dd0c248631a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 43, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["-  /** Handles the details of attaching to the interpreterJVM. Assume lock is already held. */", "+  /** Handles the details of attaching to the interpreterJVM. Only runs in the event thread. */", "-    // Blocks until the interpreter has registered if hasn't already.  Blocks all synchronized methods in this class.", "-    _model.waitForInterpreter();", "+    assert EventQueue.isDispatchThread();", "+//    System.err.println(\"Debugger attaching to VM\");", "-    catch(Exception e) { throw new DebugException(\"Could not connect to VM: \" + e); }", "+    catch(Exception e) { ", "+//      System.err.println(\"Could not connect to VM: \" + e);", "+      throw new DebugException(\"Could not connect to VM: \" + e); ", "+    }", "+//    System.err.println(\"_interpreterm vm is \" + _interpreterJVM);"]}], "num": 13974}
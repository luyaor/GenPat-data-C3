{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d0d8d58dfec2081a17460fd983ec357", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d44bdd508436d8f3f5d6d3008e94c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 111, "signatureBeforeChange": "   public static <S, T, U> Lambda<S, U> compose(final Lambda<? super S, ? extends T> l1,                                                 final Lambda<? super T, ? extends U> l2)", "signatureAfterChange": "   public static <S, T, U> Lambda<S, U> compose(Lambda<? super S, ? extends T> l1,                                                 Lambda<? super T, ? extends U> l2)", "diff": ["-  /** @return  A lambda that executes {@code l2} with the result of {@code l1} */", "-  public static <S, T, U> Lambda<S, U> compose(final Lambda<? super S, ? extends T> l1, ", "-                                               final Lambda<? super T, ? extends U> l2) {", "-    return new Lambda<S, U>() {", "-      public U value(S arg) { return l2.value(l1.value(arg)); }", "-    };", "+  /** Create a lambda that executes {@code l2} with the result of {@code l1}. */", "+  public static <S, T, U> Lambda<S, U> compose(Lambda<? super S, ? extends T> l1, ", "+                                               Lambda<? super T, ? extends U> l2) {", "+    return new ComposedLambda<S, T, U>(l1, l2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e53f800740bc40f77644798d8d801e8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 120, "signatureBeforeChange": "   public static <S1, S2, S3, S4, T, U> Lambda4<S1, S2, S3, S4, U>      compose(final Lambda4<? super S1, ? super S2, ? super S3, ? super S4, ? extends T> l1,              final Lambda<? super T, ? extends U> l2)", "signatureAfterChange": "   public static <S1, S2, S3, S4, T, U> Lambda4<S1, S2, S3, S4, U>      compose(final Lambda4<? super S1, ? super S2, ? super S3, ? super S4, ? extends T> l1,              final Lambda<? super T, ? extends U> l2)", "diff": ["-  /** @return  A lambda that executes {@code l2} with the result of {@code l1} */", "+  /** Create a lambda that executes {@code l2} with the result of {@code l1}. */", "-    return new Lambda4<S1, S2, S3, S4, U>() {", "-      public U value(S1 a1, S2 a2, S3 a3, S4 a4) { return l2.value(l1.value(a1, a2, a3, a4)); }", "-    };", "+    return new ComposedLambda4<S1, S2, S3, S4, T, U>(l1, l2);"]}], "num": 20189}
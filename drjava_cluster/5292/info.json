{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec80e0d684a6453d0c3f2bdfc6244b5b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ab5935037198e30a482e2f12e462296", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/AdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-      ClassDef cd0 = new ClassDef(JExprParser.NO_SOURCE_INFO, _packageMav, new Word(JExprParser.NO_SOURCE_INFO, \"Lisa\"),", "-                                 new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"Object\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0])); ", "+      ClassDef cd0 =", "+        new ClassDef(NO_INFO, _packageMav, ", "+                     new Word(NO_INFO, \"Lisa\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NO_INFO, \"Object\", new Type[0]),", "+                     new ReferenceType[0], ", "+                     new BracedBody(NO_INFO, new BodyItemI[0])); ", "-      ClassDef cd1 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"Bart\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"System\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+      ClassDef cd1 = ", "+        new ClassDef(NO_INFO, _abstractMav, ", "+                     new Word(NO_INFO, \"Bart\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NO_INFO, \"System\", new Type[0]), ", "+                     new ReferenceType[0], ", "+                     new BracedBody(NO_INFO, new BodyItemI[0]));", "-      ConcreteMethodDef cmd = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd = new ConcreteMethodDef(NO_INFO, ", "-                                                    new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"testMethodName\"),", "+                                                    new VoidReturn(NO_INFO, \"void\"), ", "+                                                    new Word(NO_INFO, \"testMethodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      ClassDef cd3 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestSuper2\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"TestCase\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd}));", "+      ClassDef cd3 = new ClassDef(NO_INFO, _abstractMav,", "+                                  new Word(NO_INFO, \"TestSuper2\"),", "+                                  new TypeParameter[0], ", "+                                  new ClassOrInterfaceType(NO_INFO, \"TestCase\", new Type[0]), new ReferenceType[0], ", "+                                  new BracedBody(NO_INFO, new BodyItemI[] {cmd}));", "-      ConcreteMethodDef cmd2 = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      ConcreteMethodDef cmd2 = new ConcreteMethodDef(NO_INFO, ", "-                                                    new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"uhOh\"),", "+                                                    new VoidReturn(NO_INFO, \"void\"), ", "+                                                    new Word(NO_INFO, \"uhOh\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(NO_INFO, new BodyItemI[0]));", "-      ClassDef cd4 = new ClassDef(JExprParser.NO_SOURCE_INFO, _abstractMav, new Word(JExprParser.NO_SOURCE_INFO, \"TestVoidNoTestMethod\"),", "-                                  new TypeParameter[0], new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"junit.framework.TestCase\", new Type[0]), new ReferenceType[0], ", "-                                  new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {cmd2}));", "-", "-", "-", "+      ClassDef cd4 =", "+        new ClassDef(NO_INFO, _abstractMav, ", "+                     new Word(NO_INFO, \"TestVoidNoTestMethod\"),", "+                     new TypeParameter[0], ", "+                     new ClassOrInterfaceType(NO_INFO, \"junit.framework.TestCase\", new Type[0]), new ReferenceType[0], ", "+                     new BracedBody(NO_INFO, new BodyItemI[] {cmd2}));", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a8eb308c83e90886e75b5d002479ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyAdvancedVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "          public void testForTryCatchStatement()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(NO_INFO, emptyBody);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0]);", "-      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0], b);", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(NO_INFO, b, new CatchBlock[0]);", "+      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(NO_INFO, b, new CatchBlock[0], b);", "-      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, there should be no errors\", 0, errors.size());", "+      assertEquals(\"After visiting both NormalTryCatchStatement and TryCatchFinallyStatement, \" + ", "+                   \"there should be no errors\", 0, errors.size());", "-      BracedBody errorBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 1), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 2)))});", "-      Block errorBlock = new Block(JExprParser.NO_SOURCE_INFO, errorBody);", "+      BracedBody errorBody = new BracedBody(NO_INFO, new BodyItemI[] {", "+        new ExpressionStatement(NO_INFO, ", "+                                new BitwiseOrExpression(NO_INFO, new IntegerLiteral(NO_INFO, 1), ", "+                                                        new IntegerLiteral(NO_INFO, 2)))});", "+      Block errorBlock = new Block(NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, errorBlock, new CatchBlock[0]);", "+      ntcs = new NormalTryCatchStatement(NO_INFO, errorBlock, new CatchBlock[0]);", "-      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.get(0).getFirst());", "+      assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.\" + ", "+                   \"  Perhaps you meant to compare two values using regular or (||)\", ", "+                   errors.get(0).getFirst());", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(JExprParser.NO_SOURCE_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = ", "+        new UninitializedVariableDeclarator(NO_INFO, new PrimitiveType(NO_INFO, \"int\"), new Word(NO_INFO, \"i\"));", "+      FormalParameter fp = new FormalParameter(NO_INFO, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[] {", "-        new CatchBlock(JExprParser.NO_SOURCE_INFO, fp, errorBlock)}, b);", "+      tcfs = new TryCatchFinallyStatement(NO_INFO, b, new CatchBlock[] {", "+        new CatchBlock(NO_INFO, fp, errorBlock)}, b);", "-     assertEquals(\"Error message should be correct\", \"Bitwise or expressions cannot be used at any language level.  Perhaps you meant to compare two values using regular or (||)\", errors.get(1).getFirst());", "+     assertEquals(\"Error message should be correct\", ", "+                  \"Bitwise or expressions cannot be used at any language level.  \" + ", "+                  \"Perhaps you meant to compare two values using regular or (||)\", ", "+                  errors.get(1).getFirst());"]}], "num": 5292}
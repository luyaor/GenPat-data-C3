{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57785e1909d880f70699791dbf57e56f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92fc432ce1d8c00ea21be8ad245ae4e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "14e7dcc7e0d6b6b7a5f38bdc40af083f2a31ac1c", "commitAfterChange": "d9797799d98ee81bc00384a3ae9ce9cc3c77298a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-    // Make sure RMI doesn't use an IP address that might change", "-    System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");", "-", "-    if (args.length != 2) System.exit(1);", "-", "+      // Make sure RMI doesn't use an IP address that might change", "+      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");", "+      ", "+      if (args.length != 2) System.exit(1);", "+      ", "-      catch (Throwable e) {", "-        System.err.println(\"Exception while instantiating slave \" + args[1]);", "-        e.printStackTrace();", "-        //javax.swing.JOptionPane.showMessageDialog(null, e.toString());", "+      catch (Throwable t) {", "+        // Couldn't instantiate the slave.", "+        try {", "+          // Try to show the error properly, through the master", "+          remote.errorStartingSlave(t);", "+        }", "+        catch (RemoteException re) {", "+          // Couldn't show the error properly, so use another approach", "+          String msg = \"Couldn't instantiate and register the slave.\\n\" +", "+            \"  Also failed to display error through master JVM, because:\\n\" +", "+            StringOps.getStackTrace(re) + \"\\n\";", "+          _showErrorMessage(msg, t);", "+        }", "-    catch (Throwable e) {", "-      System.err.println(\"Exception while deserializing remote stub\");", "-      e.printStackTrace();", "+    catch (Throwable t) {", "+      // There's no master to display the error, so we'll do it ourselves", "+      _showErrorMessage(\"Couldn't deserialize remote stub for the master JVM.\", t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdafe2b64fa4b858e7acf5b2c1f7de18", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": "     @Override public Type visit(SimpleMethodCall node)", "signatureAfterChange": "     @Override public Type visit(SimpleMethodCall node)", "diff": ["+      DJClass enclosingThis = enclosingThis(t);", "+      boolean onlyStatic = (enclosingThis == null);", "-        if (context.getThis() == null) {", "+        if (onlyStatic) {", "-        if (!inv.method().isStatic()) {", "-          setDJClass(node, t.ofClass());", "-        }", "+        if (!onlyStatic) { setDJClass(node, enclosingThis); }", "-        setErrorStrings(node, ts.userRepresentation(t), node.getMethodName(), nodeTypesString(args));", "-        if (e.matches() > 1) { throw new ExecutionError(\"ambiguous.method\", node); }", "-        else { throw new ExecutionError(\"no.such.method\", node); }", "+        throw unmatchedFunctionError(\"method\", e, node, t, node.getMethodName(), targs, args, expected, onlyStatic);"]}], "num": 15935}
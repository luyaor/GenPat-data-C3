{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9aa456fd595aa043c070b5ddd15a80c5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a936e27d04fd538b073e3d4fb9037382", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   public void testSaveClearAndLoadHistory()       throws EditDocumentException, IOException", "signatureAfterChange": "   public void testSaveClearAndLoadHistory() throws EditDocumentException, IOException, InterruptedException", "diff": ["-   */", "-  public void testSaveClearAndLoadHistory()", "-      throws EditDocumentException, IOException", "-  {", "+  /** Interprets some statements, saves the history, clears the history, then loads  the history. */", "+  public void testSaveClearAndLoadHistory() throws EditDocumentException, IOException, InterruptedException {", "-    TestListener listener = new TestListener() {", "-      public void interactionStarted() {", "-        synchronized(this) {", "-          interactionStartCount++;", "-        }", "-      }", "-      public void interactionEnded() {", "-        synchronized(this) {", "-          interactionEndCount++;", "-          // stops threads from waiting", "-          this.notify();", "-        }", "-      }", "-    };", "+    InteractionListener listener = new InteractionListener();", "+    ", "-    // wait for interpret to finish", "-    while (listener.interactionEndCount == 0) {", "-      synchronized(listener) {", "-        try { listener.wait(); }  // TODO: move the while loop inside synchronized", "-        catch (InterruptedException ie) {", "-          throw new UnexpectedException(ie);", "-        }", "-      }", "-    }", "+    listener.waitInteractionDone();", "+    ", "+    ", "+    listener.logInteractionStart();", "-    while (listener.interactionEndCount == 1) {", "-      synchronized(listener) {", "-        try { listener.wait(); }  // TODO: move the while loop inside synchronized", "-        catch (InterruptedException ie) {", "-          throw new UnexpectedException(ie);", "-        }", "-      }", "-    }", "+    listener.waitInteractionDone();", "+    ", "+    listener.logInteractionStart();", "-    while (listener.interactionEndCount == 2) {", "-      synchronized(listener) {", "-        try { listener.wait(); }  // TODO: move the while loop inside synchronized", "-        catch (InterruptedException ie) {", "-          throw new UnexpectedException(ie);", "-        }", "-      }", "-    }", "+    listener.waitInteractionDone();", "+   ", "-    // check that the history is clear", "-    assertEquals(\"History is not clear\",", "-                 \"\",", "-                 _model.getHistoryAsString());", "+    // confirm that the history is clear", "+    assertEquals(\"History is not clear\", \"\", _model.getHistoryAsString());", "+    ", "+    listener.logInteractionStart();", "-    while (listener.interactionEndCount == 3) {", "-      synchronized(listener) {", "-        try { listener.wait(); }  // TODO: move the while loop inside synchronized", "-        catch (InterruptedException ie) {", "-          throw new UnexpectedException(ie);", "-        }", "-      }", "-    }", "+   listener.waitInteractionDone();", "+   ", "+    ", "+    ", "+    _log.log(\"testSaveClearAndLoadHistory completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dab338ac32c9ede165076faee3c6ce25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public void testLoadHistoryWithAndWithoutSemicolons() throws IOException, EditDocumentException", "signatureAfterChange": "   public void testLoadHistoryWithAndWithoutSemicolons() throws IOException, EditDocumentException,      InterruptedException", "diff": ["-  public void testLoadHistoryWithAndWithoutSemicolons() throws IOException, EditDocumentException {", "-    TestListener listener = new TestListener() {", "-      public void interactionStarted() {", "-        synchronized(this) {", "-          interactionStartCount++;", "-        }", "-      }", "-      public void interactionEnded() {", "-        synchronized(this) {", "-          interactionEndCount++;", "-          // stops threads from waiting", "-          this.notify();", "-        }", "-      }", "-    };", "-", "+  public void testLoadHistoryWithAndWithoutSemicolons() throws IOException, EditDocumentException, ", "+    InterruptedException {", "+    ", "+    InteractionListener listener = new InteractionListener();", "-    while (listener.interactionEndCount == 0) {", "-      synchronized(listener) {", "-        try { listener.wait(); }  // TODO: move the while loop inside synchronized", "-        catch (InterruptedException ie) {", "-          throw new UnexpectedException(ie);", "-        }", "-      }", "-    }", "+    listener.waitInteractionDone();", "+", "+    listener.logInteractionStart();", "-    while (listener.interactionEndCount < 2) {", "-      synchronized(listener) {", "-        try { listener.wait(); }  // TODO: move the while loop inside synchronized", "-        catch (InterruptedException ie) {", "-          throw new UnexpectedException(ie);", "-        }", "-      }", "-    }", "+    listener.waitInteractionDone();", "+    ", "-    assertEquals(\"Output of loaded history is not correct: \" +", "-                 con.getDocText(0, con.getLength()).trim(),", "-                 \"x = 5\"+System.getProperty(\"line.separator\")+\"x = 5\",", "+    assertEquals(\"Output of loaded history is not correct: \" + con.getDocText(0, con.getLength()).trim(),", "+                 \"x = 5\" + System.getProperty(\"line.separator\") + \"x = 5\",", "+    ", "+    ", "+    _log.log(\"testLoadHistoryWithAndWithoutSemicolons completed\");"]}], "num": 17187}
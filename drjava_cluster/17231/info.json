{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2df6dc6c22594405a87ce0b8790992d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a474889af3522f71169c3b636fc2e0d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public synchronized void killInterpreter(boolean shouldRestart)", "signatureAfterChange": "   public void killInterpreter(boolean shouldRestart)", "diff": ["-  public synchronized void killInterpreter(boolean shouldRestart) {", "-    try {", "-      _enabled = shouldRestart;", "-      _cleanlyRestarting = true;", "-      if (shouldRestart)  _interactionsModel.interpreterResetting();", "-      quitSlave();", "+  public void killInterpreter(boolean shouldRestart) {", "+    synchronized(_masterJVMLock) {", "+      try {", "+        _enabled = shouldRestart;", "+        _cleanlyRestarting = true;", "+        if (shouldRestart)  _interactionsModel.interpreterResetting();", "+        quitSlave();", "+      }", "+      catch (ConnectException ce) {", "+        _log.logTime(\"Could not connect to the interpreterJVM while trying to kill it\", ce);", "+      }", "+      catch (RemoteException re) { _threwException(re); }", "-    catch (ConnectException ce) {", "-      _log.logTime(\"Could not connect to the interpreterJVM while trying to kill it\", ce);", "-    }", "-    catch (RemoteException re) { _threwException(re); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3149c4135759f7d03ad94ff05de7b8ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected synchronized final void quitSlave() throws RemoteException", "signatureAfterChange": "   protected final void quitSlave() throws RemoteException", "diff": ["-  protected synchronized final void quitSlave() throws RemoteException {", "-    if (isStartupInProgress())", "-      // There is a slave to be quit, but we don't have a handle to it yet.", "-      // Instead we set this flag, which makes it quit immediately after it", "-      // registers in registerSlave.", "-      _quitOnStartup = true;", "-    ", "-    else if (_slave == null)", "-      throw new IllegalStateException(\"tried to quit when no slave running\" +", "-                                      \" and startup not in progress\");", "-    else  _slave.quit();", "+  protected final void quitSlave() throws RemoteException {", "+    synchronized(_masterJVMLock) {", "+      if (isStartupInProgress())", "+        // There is a slave to be quit, but we don't have a handle to it yet.", "+        // Instead we set this flag, which makes it quit immediately after it", "+        // registers in registerSlave.", "+        _quitOnStartup = true;", "+      ", "+      else if (_slave == null)", "+        throw new IllegalStateException(\"tried to quit when no slave running\" +", "+                                        \" and startup not in progress\");", "+      else  _slave.quit();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f3bad31ef228870bc5299e6051fd5aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public void quitFailed(Throwable th) throws RemoteException", "signatureAfterChange": "   public void quitFailed(Throwable th) throws RemoteException", "diff": ["-    _interactionsModel.interpreterResetFailed(th);", "-    _cleanlyRestarting = false;", "+    synchronized(_masterJVMLock) {", "+      _interactionsModel.interpreterResetFailed(th);", "+      _cleanlyRestarting = false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dadd293852eff5d0d32f4cbce30aa8d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp) throws IOException,      RemoteException", "signatureAfterChange": "   protected final void invokeSlave(String[] jvmArgs, String cp) throws IOException, RemoteException", "diff": ["-  protected synchronized final void invokeSlave(String[] jvmArgs, String cp) throws IOException, ", "-    RemoteException {", "-    if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "+  protected final void invokeSlave(String[] jvmArgs, String cp) throws IOException, RemoteException {", "-    if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "-    _startupInProgress = true;", "-    ", "-    //*******************************************", "-    // first, we we export ourselves to a file...", "-    //*******************************************", "-    ", "-    Thread t = new Thread(_exportMasterThreadName) {", "-      public void run() {", "-        synchronized(lock) {", "-          try {", "-            _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "-            ", "-            // Debug: check that the IP address is 127.0.0.1", "-            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-          }", "-          catch (RemoteException re) {", "-            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-            throw new edu.rice.cs.util.UnexpectedException(re);", "-          }", "-          lock.notify();", "-        }", "-      }", "-    };", "-    synchronized (lock) {", "-      t.start();", "-      while (_stub == null) {", "-        try { lock.wait(); }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-      }", "-    }", "-    _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _stubFile.deleteOnExit();", "-    // serialize stub to _stubFile", "-    FileOutputStream fstream = new FileOutputStream(_stubFile);", "-    ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_stub);", "-    ostream.flush();", "-    fstream.close();", "-", "-    //*******************************************", "-    // done exporting ourselves to a file...", "-    // now lets export our classloader", "-    // this will be used to handle classloading ", "-    // requests from the slave jvm", "-    //*******************************************", "-    final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "-    t = new Thread(_exportMasterThreadName) {", "-      public void run() {", "-        synchronized(lock) {", "-          try {", "-            _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "-            ", "-            // Debug: check that the IP address is 127.0.0.1", "-            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-          }", "-          catch (RemoteException re) {", "-            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "-            throw new edu.rice.cs.util.UnexpectedException(re);", "-          }", "-          lock.notify();", "-        }", "-      }", "-    };", "-    synchronized(lock){", "-      t.start();", "-      while (_classLoaderStub == null) {", "-        try { lock.wait(); }", "-        catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-      }", "-    }", "-    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "-    _classLoaderStubFile.deleteOnExit();", "-    // serialize stub to _stubFile", "-    fstream = new FileOutputStream(_classLoaderStubFile);", "-    ostream = new ObjectOutputStream(fstream);", "-    ostream.writeObject(_classLoaderStub);", "-    ostream.flush();", "-    fstream.close();", "-    ", "-    String[] args = new String[] { ", "-      _stubFile.getAbsolutePath(),", "-      _slaveClassName,", "-      _classLoaderStubFile.getAbsolutePath()", "-    };", "-    ", "-    final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs);", "-    ", "-    // Start a thread to wait for the slave to die.  When it dies, restart it.", "-    Thread thread = new Thread(_waitForQuitThreadName) {", "-      public void run() {", "-        try {", "-          int status = process.waitFor();", "-          synchronized(AbstractMasterJVM.this) {", "-            if (_startupInProgress) {", "-              // If we get here, the process died without registering.", "-              //  (This might be the case if something was wrong with the", "-              //   classpath, or if the new JVM couldn't acquire a port", "-              //   for debugging.)", "-              //", "-              // Proper behavior in this case is unclear, so we'll let", "-              //  our subclasses decide.  By default, we print a stack", "-              //  trace and do not proceed, to avoid going into a loop.", "-              slaveQuitDuringStartup(status);", "+    synchronized(_masterJVMLock) {", "+      if (_startupInProgress) throw new IllegalStateException(\"startup is in progress in invokeSlave\");", "+      ", "+      if (_slave != null) throw new IllegalStateException(\"slave nonnull in invoke: \" + _slave);", "+      _startupInProgress = true;", "+      ", "+      //*******************************************", "+      // first, we we export ourselves to a file...", "+      //*******************************************", "+      ", "+      Thread t = new Thread(_exportMasterThreadName) {", "+        public void run() {", "+          synchronized(lock) {", "+            try {", "+              _stub = UnicastRemoteObject.exportObject(AbstractMasterJVM.this);", "+              ", "+              // Debug: check that the IP address is 127.0.0.1", "+              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "-            _slave = null;", "-            UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "-            handleSlaveQuit(status);", "+            catch (RemoteException re) {", "+              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+              throw new edu.rice.cs.util.UnexpectedException(re);", "+            }", "+            lock.notify();", "-        catch (NoSuchObjectException e) {", "-          throw new edu.rice.cs.util.UnexpectedException(e);", "-        }", "-        catch (InterruptedException ie) {", "-          throw new edu.rice.cs.util.UnexpectedException(ie);", "+      };", "+      synchronized (lock) {", "+        t.start();", "+        while (_stub == null) {", "+          try { lock.wait(); }", "+          catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "-    };", "-    ", "-    thread.start();", "+      _stubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _stubFile.deleteOnExit();", "+      // serialize stub to _stubFile", "+      FileOutputStream fstream = new FileOutputStream(_stubFile);", "+      ObjectOutputStream ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_stub);", "+      ostream.flush();", "+      fstream.close();", "+      ", "+      //*******************************************", "+      // done exporting ourselves to a file...", "+      // now lets export our classloader", "+      // this will be used to handle classloading ", "+      // requests from the slave jvm", "+      //*******************************************", "+      final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+      t = new Thread(_exportMasterThreadName) {", "+        public void run() {", "+          synchronized(lock) {", "+            try {", "+              _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "+              ", "+              // Debug: check that the IP address is 127.0.0.1", "+              //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+            }", "+            catch (RemoteException re) {", "+              //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+              throw new edu.rice.cs.util.UnexpectedException(re);", "+            }", "+            lock.notify();", "+          }", "+        }", "+      };", "+      synchronized(lock){", "+        t.start();", "+        while (_classLoaderStub == null) {", "+          try { lock.wait(); }", "+          catch (InterruptedException ie) { throw new edu.rice.cs.util.UnexpectedException(ie); }", "+        }", "+      }", "+      _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+      _classLoaderStubFile.deleteOnExit();", "+      // serialize stub to _stubFile", "+      fstream = new FileOutputStream(_classLoaderStubFile);", "+      ostream = new ObjectOutputStream(fstream);", "+      ostream.writeObject(_classLoaderStub);", "+      ostream.flush();", "+      fstream.close();", "+      ", "+      String[] args = new String[] { ", "+        _stubFile.getAbsolutePath(),", "+          _slaveClassName,", "+          _classLoaderStubFile.getAbsolutePath()", "+      };", "+      ", "+      final Process process = ExecJVM.runJVM(RUNNER, args, cp, jvmArgs);", "+      ", "+      // Start a thread to wait for the slave to die.  When it dies, restart it.", "+      Thread thread = new Thread(_waitForQuitThreadName) {", "+        public void run() {", "+          try {", "+            int status = process.waitFor();", "+            synchronized(AbstractMasterJVM.this) {", "+              if (_startupInProgress) {", "+                // If we get here, the process died without registering.", "+                //  (This might be the case if something was wrong with the", "+                //   classpath, or if the new JVM couldn't acquire a port", "+                //   for debugging.)", "+                //", "+                // Proper behavior in this case is unclear, so we'll let", "+                //  our subclasses decide.  By default, we print a stack", "+                //  trace and do not proceed, to avoid going into a loop.", "+                slaveQuitDuringStartup(status);", "+              }", "+              _slave = null;", "+              UnicastRemoteObject.unexportObject(AbstractMasterJVM.this, true);", "+              handleSlaveQuit(status);", "+            }", "+          }", "+          catch (NoSuchObjectException e) {", "+            throw new edu.rice.cs.util.UnexpectedException(e);", "+          }", "+          catch (InterruptedException ie) {", "+            throw new edu.rice.cs.util.UnexpectedException(ie);", "+          }", "+        }", "+      };", "+      ", "+      thread.start();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c659c87e3ae78e14c5e110c362a9d2b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "commitAfterChange": "024873f55ad7ba6280213fee7183c6688ba3b395", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public void setStartupClasspath(String classpath)", "signatureAfterChange": "   public void setStartupClasspath(String classpath)", "diff": ["-    _startupClasspath = classpath;", "-    _parseStartupClasspath();", "+    synchronized(_masterJVMLock) {", "+      _startupClasspath = classpath;", "+      _parseStartupClasspath();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0409492b61c8ab242f86e1efa0e35f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "af0fc1431a7909c247b6b6799db5232d12cbecb2", "commitAfterChange": "1ca22d8d9e892abbe72cd6aa5627cc7ce0e56b03", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "    public synchronized void registerSlave(SlaveRemote slave)     throws RemoteException", "signatureAfterChange": "    public void registerSlave(SlaveRemote slave) throws RemoteException", "diff": ["-  public synchronized void registerSlave(SlaveRemote slave)", "-    throws RemoteException {", "-    _slave = slave;", "-    _startupInProgress = false;", "-    _stubFile.delete();", "-    _stub = null;", "-    _classLoaderStub = null;", "-    _classLoaderStubFile.delete();", "-    ", "-    handleSlaveConnected();", "-", "-    if (_quitOnStartup) {", "-      // quitSlave was called before the slave registered, so we now act on", "-      // the deferred quit request.", "-      _quitOnStartup = false;", "-      quitSlave();", "+  public void registerSlave(SlaveRemote slave) throws RemoteException {", "+    synchronized(_masterJVMLock) {", "+      _slave = slave;", "+      _startupInProgress = false;", "+      _stubFile.delete();", "+      _stub = null;", "+      _classLoaderStub = null;", "+      _classLoaderStubFile.delete();", "+      ", "+      handleSlaveConnected();", "+      ", "+      if (_quitOnStartup) {", "+        // quitSlave was called before the slave registered, so we now act on", "+        // the deferred quit request.", "+        _quitOnStartup = false;", "+        quitSlave();", "+      }"]}], "num": 17231}
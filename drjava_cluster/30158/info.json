{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1df64bf3ef3ebfa8cbbb25dcc74ef83", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2021154a5675f6cb08b147c746388743", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fe10ec3049d7833e404492f382e59e4a2bb44b0e", "commitAfterChange": "ac147bfd47d7e558bfd3f0afa39ad091a35b6f6f", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 201, "signatureBeforeChange": "   public void updateFileTitle()", "signatureAfterChange": "   public void updateFileTitle()", "diff": ["-    String fileName = doc.getDisplayFullPath();", "+    String fileName = doc.getCompletePath();", "-    String fileTitle = doc.getDisplayFullPath();", "+    String fileTitle = doc.getCompletePath();", "-      if ((temp!=null) && (temp.length()>0)) { fileTitle = fileTitle + \" - \" + temp; }", "+      if ((temp != null) && (temp.length() > 0)) { fileTitle = fileTitle + \" - \" + temp; }", "-    // Always update this field-- two files in different directories", "-    //  can have the same _fileTitle", "-    if (!_fileNameField.getText().equals(fileTitle)) { _fileNameField.setText(fileTitle); }", "-//    System.out.println(\"setting \" + doc + \" to display name: \" + GlobalModelNaming.getDisplayFullPath(doc));", "+    if (! _fileNameField.getText().equals(fileTitle)) { _fileNameField.setText(fileTitle); }", "+    ", "+    //  Two files in different directories can have the same _fileTitle", "+    _fileNameField.setToolTipText(\"Full path for file: \" + doc.getCompletePath());", "+//    System.out.println(\"setting \" + doc + \" to display name: \" + getCompletePath(doc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db007bd668da5270cba746539d8e6b8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/io/IOUtil.java", "commitBeforeChange": "0ac52f53a2294a0b953466aec03659d013cafdbf", "commitAfterChange": "08c462cbf462d512f79df4f5a94a883bf34f3387", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   public static Iterable<File> parsePath(String path)", "signatureAfterChange": "   public static Iterable<File> parsePath(String path)", "diff": ["-    /* StringTokenizer documentation recommends using String.split() instead.", "-     * The problem with doing that is that the path separator might not translate into", "-     * a regex without escaping.  So we need a general way to translate a literal", "-     * String into an escaped regex String (better would be a way to compile a regex", "-     * directly from a literal String).", "-     */", "-    StringTokenizer tokenizer = new StringTokenizer(path, File.pathSeparator);", "-    Iterable<String> filenames = IterUtil.snapshot(IterUtil.asIterator(tokenizer));", "-    return IterUtil.map(filenames, FILE_FACTORY);", "+    String[] filenames = path.split(TextUtil.regexEscape(File.pathSeparator));", "+    return IterUtil.mapSnapshot(IterUtil.asIterable(filenames), FILE_FACTORY);"]}], "num": 30158}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b613f3711e1af6aca9bacf3e2b4bb455", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4436da05839722662012ffcd8616429a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "506c5d6a5606459c5317089961c227d94f8d45b9", "commitAfterChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testDebugSourcepath() throws Exception", "signatureAfterChange": "   public void testDebugSourcepath() throws Exception", "diff": ["-    if (printMessages)  System.out.println(\"----testDebugSourcePath----\");", "+    if (printMessages) {", "+      System.out.println(\"----testDebugSourcePath----\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb7267f913fa747e6371fb8990462bbb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate int _deleteRight(int offset,int endOffset, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": "   private int _deleteRight(int offset,int endOffset,                            ModelList<ReducedToken>.Iterator delFrom,                            ModelList<ReducedToken>.Iterator delTo)", "diff": ["-\t */", "-\tprivate int _deleteRight(int offset,int endOffset,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "-\t\t{\t\t\t\t\t", "-\t\t\tdelFrom.collapse(delTo);", "-\t\t\t\t\t\t", "-\t\t\t// if both pointing to same item, and it's a gap", "-\t\t\tif (delFrom.eq(delTo) && delFrom.current().isGap()){", "-\t\t\t\t// inside gap", "-\t\t\t\tdelFrom.current().shrink(endOffset-offset);", "-\t\t\t\treturn offset;", "-\t\t\t}", "-", "-\t\t\t//if brace is multiple char it must be a comment because the above if", "- \t\t\t//test gaurentees it can't be a gap.", "-\t\t\tif (!delFrom.eq(delTo))", "-\t\t\t\t_clipLeft(offset, delFrom);", "-", "-\t\t\t_clipRight(endOffset, delTo);\t\t\t", "-", "-\t\t\tdelFrom.setTo(delTo);", "-\t\t\tif (!delFrom.atStart())", "-\t\t\t\tdelFrom.prev();", "-", "-\t\t\tif (delFrom.atStart()){", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-", "-\t\t\tif (delTo.atEnd()){", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (delFrom.current().isGap() && delTo.current().isGap()){", "-\t\t\t\tint gapSize = delFrom.current().getSize();", "-\t\t\t\tdelFrom.remove();", "-\t\t\t\tdelFrom.current().grow(gapSize);", "-\t\t\t\treturn gapSize;", "-\t\t\t}", "-", "-\t\t\tdelFrom.setTo(delTo);", "-\t\t\treturn 0;", "-\t\t}", "+  private int _deleteRight(int offset,int endOffset,", "+                           ModelList<ReducedToken>.Iterator delFrom,", "+                           ModelList<ReducedToken>.Iterator delTo)", "+  {", "+    delFrom.collapse(delTo);", "+    // if both pointing to same item, and it's a gap", "+    if (delFrom.eq(delTo) && delFrom.current().isGap()) {", "+      // inside gap", "+      delFrom.current().shrink(endOffset-offset);", "+      return offset;", "+    }", "+    ", "+    // If brace is multiple char it must be a comment because the above if", "+    // test gaurentees it can't be a gap.", "+    if (!delFrom.eq(delTo))", "+      _clipLeft(offset, delFrom);", "+    ", "+    _clipRight(endOffset, delTo);", "+    ", "+    delFrom.setTo(delTo);", "+    if (!delFrom.atStart()) {", "+      delFrom.prev();", "+    }", "+    if (delFrom.atStart()) {", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+  ", "+    if (delTo.atEnd()) {", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+  ", "+    if (delFrom.current().isGap() && delTo.current().isGap()) {", "+      int gapSize = delFrom.current().getSize();", "+      delFrom.remove();", "+      delFrom.current().grow(gapSize);", "+      return gapSize;", "+    }", "+    ", "+    delFrom.setTo(delTo);", "+    return 0;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfc50c4649a8710f923d0bb05fdb7438", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ReducedModelBrace.java", "commitBeforeChange": "5a2a5e61cb4a1ee4d053834c9eda949c73544637", "commitAfterChange": "fa2aa8dc78d037bc99ec51d48049f6b3df0aecfb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tprivate int _deleteRight(int offset,int endOffset, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom, \t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "signatureAfterChange": "   private int _deleteRight(int offset,int endOffset,                            ModelList<ReducedToken>.Iterator delFrom,                            ModelList<ReducedToken>.Iterator delTo)", "diff": ["-\t */", "-\tprivate int _deleteRight(int offset,int endOffset,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delFrom,", "-\t\t\t\t\t\t\t\t\t\t\t\t\t ModelList<ReducedToken>.Iterator delTo)", "-\t\t{\t\t\t\t\t", "-\t\t\tdelFrom.collapse(delTo);", "-\t\t\t\t\t\t", "-\t\t\t// if both pointing to same item, and it's a gap", "-\t\t\tif (delFrom.eq(delTo) && delFrom.current().isGap()){", "-\t\t\t\t// inside gap", "-\t\t\t\tdelFrom.current().shrink(endOffset-offset);", "-\t\t\t\treturn offset;", "-\t\t\t}", "-", "-\t\t\t//if brace is multiple char it must be a comment because the above if", "- \t\t\t//test gaurentees it can't be a gap.", "-\t\t\tif (!delFrom.eq(delTo))", "-\t\t\t\t_clipLeft(offset, delFrom);", "-", "-\t\t\t_clipRight(endOffset, delTo);\t\t\t", "-", "-\t\t\tdelFrom.setTo(delTo);", "-\t\t\tif (!delFrom.atStart())", "-\t\t\t\tdelFrom.prev();", "-", "-\t\t\tif (delFrom.atStart()){", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-", "-\t\t\tif (delTo.atEnd()){", "-\t\t\t\tdelFrom.setTo(delTo);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (delFrom.current().isGap() && delTo.current().isGap()){", "-\t\t\t\tint gapSize = delFrom.current().getSize();", "-\t\t\t\tdelFrom.remove();", "-\t\t\t\tdelFrom.current().grow(gapSize);", "-\t\t\t\treturn gapSize;", "-\t\t\t}", "-", "-\t\t\tdelFrom.setTo(delTo);", "-\t\t\treturn 0;", "-\t\t}", "+  private int _deleteRight(int offset,int endOffset,", "+                           ModelList<ReducedToken>.Iterator delFrom,", "+                           ModelList<ReducedToken>.Iterator delTo)", "+  {", "+    delFrom.collapse(delTo);", "+    // if both pointing to same item, and it's a gap", "+    if (delFrom.eq(delTo) && delFrom.current().isGap()) {", "+      // inside gap", "+      delFrom.current().shrink(endOffset-offset);", "+      return offset;", "+    }", "+    ", "+    // If brace is multiple char it must be a comment because the above if", "+    // test gaurentees it can't be a gap.", "+    if (!delFrom.eq(delTo))", "+      _clipLeft(offset, delFrom);", "+    ", "+    _clipRight(endOffset, delTo);", "+    ", "+    delFrom.setTo(delTo);", "+    if (!delFrom.atStart()) {", "+      delFrom.prev();", "+    }", "+    if (delFrom.atStart()) {", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+  ", "+    if (delTo.atEnd()) {", "+      delFrom.setTo(delTo);", "+      return 0;", "+    }", "+  ", "+    if (delFrom.current().isGap() && delTo.current().isGap()) {", "+      int gapSize = delFrom.current().getSize();", "+      delFrom.remove();", "+      delFrom.current().grow(gapSize);", "+      return gapSize;", "+    }", "+    ", "+    delFrom.setTo(delTo);", "+    return 0;", "+  }"]}], "num": 23385}
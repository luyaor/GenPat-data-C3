{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d00821204e57b8cd4ff426fc429cd0c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ccdf3ca4003739f2f9bb51275aeeb62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "5293cb4cfbc2f45d6061ba4101ad60348aa251ed", "commitAfterChange": "f68f43e5a680bb235f87f6125c6c0de6d15a12f4", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 99, "signatureBeforeChange": "   private void _copyVariablesFromInterpreter() throws DebugException", "signatureAfterChange": "   private static Value _invokeConstructor(ThreadReference thread, ClassType location,                                           String signature, Value... args) throws DebugException", "diff": ["-      // copy variables values out of interpreter's environment and", "-      // into the relevant stack frame", "-      _log.log(\"In _copyBack()\");", "-      _copyBack(_runningThread);", "-      _log.log(\"Out of _copyBack()\");", "-    catch(AbsentInformationException e2) {", "-      //throw new DebugException(e2.toString());", "-      // Silently fail for now to ignore the AbsentInformationException that", "-      // we should have noticed when first suspending on this line (see currThreadSuspended).", "-    }", "-    catch(IncompatibleThreadStateException e) {", "-      throw new DebugException(e.toString());", "-    }", "-    catch(InvocationException e4) {", "-      throw new DebugException(e4.toString());", "+    */", "+  private static Value _invokeConstructor(ThreadReference thread, ClassType location,", "+                                          String signature, Value... args) throws DebugException {", "+    try {", "+      Method m = location.concreteMethodByName(\"<init>\", signature);", "+      if (m == null) { throw new DebugException(\"Cannot find requested constructor\"); }", "+      return location.newInstance(thread, m, Arrays.asList(args), ClassType.INVOKE_SINGLE_THREADED);", "+    }", "+    catch (ClassNotPreparedException e) { throw new DebugException(e); }", "+    catch (IllegalArgumentException e) { throw new DebugException(e); }", "+    catch (ClassNotLoadedException e) { throw new DebugException(e); }", "+    catch (IncompatibleThreadStateException e) { throw new DebugException(e); }", "+    catch (InvocationException e) { throw new DebugException(e); }", "+    catch (InvalidTypeException e) { throw new DebugException(e); }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d2305880c399d6c612230d2265d4ea7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 72, "signatureBeforeChange": "      private void _doCopyBack() throws DebugException", "signatureAfterChange": "      protected void _copyVariablesFromInterpreter() throws DebugException", "diff": ["-  private void _doCopyBack() throws DebugException{", "-    try{", "-       /* copy variables values out of interpreter's environment and into the relevant stack frame */", "-       if( printMessages ) System.out.println(\"In _copyBack()\");", "-       _copyBack(_runningThread);", "-       if( printMessages ) System.out.println(\"Out of _copyBack()\");", "-     }", "-     catch(InvalidTypeException exc) {", "-       throw new DebugException(exc.toString());", "-     }    ", "-     catch(AbsentInformationException e2) {", "-       throw new DebugException(e2.toString());", "-     }", "-     catch(IncompatibleThreadStateException e) {", "-       throw new DebugException(e.toString());", "-     }", "-     catch(ClassNotLoadedException e3) {", "-       throw new DebugException(e3.toString());", "-     }", "-     catch(InvocationException e4) {", "-       throw new DebugException(e4.toString());", "-     }", "+  protected void _copyVariablesFromInterpreter() throws DebugException {", "+    try {", "+      // copy variables values out of interpreter's environment and", "+      // into the relevant stack frame", "+      if( printMessages ) System.out.println(\"In _copyBack()\");", "+      _copyBack(_runningThread);", "+      if( printMessages ) System.out.println(\"Out of _copyBack()\");", "+    }", "+    catch(InvalidTypeException exc) {", "+      throw new DebugException(exc.toString());", "+    }    ", "+    catch(AbsentInformationException e2) {", "+      throw new DebugException(e2.toString());", "+    }", "+    catch(IncompatibleThreadStateException e) {", "+      throw new DebugException(e.toString());", "+    }", "+    catch(ClassNotLoadedException e3) {", "+      throw new DebugException(e3.toString());", "+    }", "+    catch(InvocationException e4) {", "+      throw new DebugException(e4.toString());", "+    }"]}], "num": 19740}
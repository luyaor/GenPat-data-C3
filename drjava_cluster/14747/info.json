{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6564ac93d5701aed9251dc0c7c565ba6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fb31d114399fc63eaf4c7664c107be1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 229, "signatureBeforeChange": "   public static <T> Predicate<T> and(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3)", "signatureAfterChange": "   public static <T> Predicate<T> and(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3)", "diff": ["-  /** @return  The conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3} */", "+  /** Produce the conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3}. */", "-    return and(IterUtil.makeIterable(p1, p2, p3));", "+    return new AndPredicate<T>(IterUtil.<Predicate<? super T>>make(p1, p2, p3));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d8b5a5abbd7124bc2cf8136d278a58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 228, "signatureBeforeChange": "   public static <T> Predicate<T> and(Predicate<? super T> p1, Predicate<? super T> p2)", "signatureAfterChange": "   public static <T> Predicate<T> and(Predicate<? super T> p1, Predicate<? super T> p2)", "diff": ["-  /** @return  The conjunction ({@code &&}) of {@code p1} and {@code p2} */", "+  /** Produce the conjunction ({@code &&}) of {@code p1} and {@code p2}. */", "-    return and(IterUtil.makeIterable(p1, p2));", "+    // explicit type argument required due to compiler (or language) bug", "+    return new AndPredicate<T>(IterUtil.<Predicate<? super T>>make(p1, p2));"]}], "num": 14747}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "898d0754bbf9bc4b7964e75502acf338", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85b2717a48e0e2e4c68fff8f4f10a345", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "c2a6567c6b5cf5eb1741bdddf032b869b2234b72", "commitAfterChange": "b1b91197c778ee62ce767051b412c31f7bcdddb8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["-      // Not suspended, so all watches are blank", "+      // Not suspended, get values in interpreter", "-        currWatch.hideValueAndType();", "+        if (!_getWatchFromInterpreter(currWatch)) {", "+          currWatch.hideValueAndType();", "+        }", "+//      for (int i = 0; i < _watches.size(); i++) {", "+//        DebugWatchData currWatch = _watches.elementAt(i);", "+//        currWatch.hideValueAndType();", "+//      }", "+//      return;", "-        String currValue = currWatch.getValue();", "-        ", "-        // check for \"this\"", "-        if (currName.equals(\"this\")) {", "-          if (obj != null) {", "-            currWatch.setValue(_getValue(obj));", "-            currWatch.setType(String.valueOf(obj.type()));", "-          }", "-          else {", "-            // \"this\" is not defined in a static context", "-            currWatch.setNoValue();", "-            currWatch.setNoType();", "-          }", "+        if (_getWatchFromInterpreter(currWatch)) {", "+//        // check for \"this\"", "+//        if (currName.equals(\"this\")) {", "+//          if (obj != null) {", "+//            currWatch.setValue(_getValue(obj));", "+//            currWatch.setType(String.valueOf(obj.type()));", "+//          }", "+//          else {", "+//            // \"this\" is not defined in a static context", "+//            currWatch.setNoValue();", "+//            currWatch.setNoType();", "+//          }", "+//          continue;", "+//        }", "-        // Look for a variable with this name", "-        LocalVariable localVar = null;", "-        try {", "-          frames = thread.frames();", "-          currFrame = (StackFrame) frames.get(0);", "-          localVar = currFrame.visibleVariableByName(currName);", "-        }", "-        catch (AbsentInformationException aie) {", "-          // Not compiled with debug flag.... ignore", "-        }", "-        catch (InvalidStackFrameException isfe) {", "-          currWatch.setNoValue();", "-          currWatch.setNoType();", "-          _log(\"Failed to get local var from stack frame\", isfe);", "-          continue;", "-        }", "-", "-        if (localVar != null) {", "-          // currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "-          try {", "-            Value v = _getValueOfLocalVariable(localVar, thread);", "-            if (v == null) {", "-              currWatch.setValue(_getValue(null));", "-              try {", "-                currWatch.setType(localVar.type().name());", "-              }", "-              catch (ClassNotLoadedException cnle) {", "-                List classes = _vm.classesByName(localVar.typeName());", "-                if (!classes.isEmpty()) {", "-                  currWatch.setType(((Type)classes.get(0)).name());", "-                }", "-                else {", "-                  currWatch.setTypeNotLoaded();", "-                }", "-              }", "-            }", "-            else {              ", "-              currWatch.setValue(_getValue(v));", "-              currWatch.setType(v.type().name());", "-            }", "-          }", "-          catch (Exception ex) {", "-            _log(\"Exception when getting the value of a local variable\", ex);", "-            currWatch.setNoValue();", "-            currWatch.setNoType();", "-          }", "-        }", "+//        // Look for a variable with this name", "+//        LocalVariable localVar = null;", "+//        try {", "+//          frames = thread.frames();", "+//          currFrame = (StackFrame) frames.get(0);", "+//          localVar = currFrame.visibleVariableByName(currName);", "+//        }", "+//        catch (AbsentInformationException aie) {", "+//          // Not compiled with debug flag.... ignore", "+//        }", "+//        catch (InvalidStackFrameException isfe) {", "+//          currWatch.setNoValue();", "+//          currWatch.setNoType();", "+//          _log(\"Failed to get local var from stack frame\", isfe);", "+//          continue;", "+//        }", "+//", "+//        if (localVar != null) {", "+//          // currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "+//          try {", "+//            Value v = _getValueOfLocalVariable(localVar, thread);", "+//            if (v == null) {", "+//              currWatch.setValue(_getValue(null));", "+//              try {", "+//                currWatch.setType(localVar.type().name());", "+//              }", "+//              catch (ClassNotLoadedException cnle) {", "+//                List classes = _vm.classesByName(localVar.typeName());", "+//                if (!classes.isEmpty()) {", "+//                  currWatch.setType(((Type)classes.get(0)).name());", "+//                }", "+//                else {", "+//                  currWatch.setTypeNotLoaded();", "+//                }", "+//              }", "+//            }", "+//            else {              ", "+//              currWatch.setValue(_getValue(v));", "+//              currWatch.setType(v.type().name());", "+//            }", "+//          }", "+//          catch (Exception ex) {", "+//            _log(\"Exception when getting the value of a local variable\", ex);", "+//            currWatch.setNoValue();", "+//            currWatch.setNoType();", "+//          }", "+//        }", "-        else {", "-          ReferenceType outerRt = rt;", "-          ObjectReference outer = obj;  // (null if static context)", "-          Field field = outerRt.fieldByName(currName);", "+        ReferenceType outerRt = rt;", "+        ObjectReference outer = obj;  // (null if static context)", "+        Field field = outerRt.fieldByName(currName);", "+        ", "+        if (obj != null) {", "+          // We're not in a static context", "-          if (obj != null) {", "-            // We're not in a static context", "-            ", "-            // If we don't find it in this class, loop through any enclosing ", "-            // classes. Start at this$N, where N is the number of dollar signs in", "-            // the reference type's name, minus one.", "-            int outerIndex = numDollars - 1;", "-            if (hasAnonymous(outerRt)) {", "-              // We don't know the appropriate this$N to look for so we have to", "-              // search for a field that begins with this$.", "-              List fields = outerRt.allFields();", "-              Iterator iter = fields.iterator();", "-              while (iter.hasNext()) {", "-                Field f = (Field)iter.next();", "-                String name = f.name();", "-                if (name.startsWith(\"this$\")) {", "-                  int lastIndex = name.lastIndexOf(\"$\");", "-                  outerIndex = Integer.valueOf(name.substring(lastIndex+1, name.length())).intValue();", "-                  break;", "-                }", "+          // If we don't find it in this class, loop through any enclosing ", "+          // classes. Start at this$N, where N is the number of dollar signs in", "+          // the reference type's name, minus one.", "+          int outerIndex = numDollars - 1;", "+          if (hasAnonymous(outerRt)) {", "+            // We don't know the appropriate this$N to look for so we have to", "+            // search for a field that begins with this$.", "+            List fields = outerRt.allFields();", "+            Iterator iter = fields.iterator();", "+            while (iter.hasNext()) {", "+              Field f = (Field)iter.next();", "+              String name = f.name();", "+              if (name.startsWith(\"this$\")) {", "+                int lastIndex = name.lastIndexOf(\"$\");", "+                outerIndex = Integer.valueOf(name.substring(lastIndex+1, name.length())).intValue();", "+                break;", "-            Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-            if (field == null) {", "+          }", "+          Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+          if (field == null) {", "+            // Try concatenating \"val$\" to the beginning of the field in", "+            // case it's a final local variable of the outer class", "+            field = outerRt.fieldByName(\"val$\" + currName);", "+          }", "+          ", "+          while ((field == null) && (outerThis != null)) {", "+            outer = (ObjectReference) outer.getValue(outerThis);", "+            if (outer == null) {", "+              // We're probably in the constructor and this$N has", "+              // not yet been initialized. We can't do anything, so just", "+              // break display no value.", "+              break;", "+            }", "+            outerRt = outer.referenceType();", "+            field = outerRt.fieldByName(currName);", "+            ", "+            if (field == null) {  ", "-            }", "-            ", "-            while ((field == null) && (outerThis != null)) {", "-              outer = (ObjectReference) outer.getValue(outerThis);", "-              if (outer == null) {", "-                // We're probably in the constructor and this$N has", "-                // not yet been initialized. We can't do anything, so just", "-                // break display no value.", "-                break;", "-              }", "-              outerRt = outer.referenceType();", "-              field = outerRt.fieldByName(currName);", "-              ", "-              if (field == null) {  ", "-                // Try concatenating \"val$\" to the beginning of the field in", "-                // case it's a final local variable of the outer class", "-                field = outerRt.fieldByName(\"val$\" + currName);", "-                ", "-                if (field == null) {", "-                  // Enter the loop again with the next outer enclosing class", "-                  outerIndex--;", "-                  outerThis = outerRt.fieldByName(\"this$\" + outerIndex);                  ", "-                }", "-              }", "-            }", "-          }", "-          else {", "-            // We're in a static context", "-            ", "-            // If we don't find it in this class, loop through any enclosing", "-            // classes. Do this by loading any outer classes by invoking the ", "-            // method on the class loader that loaded this class and passing", "-            // it the class name with the last class removed each time.", "-            String rtClassName = outerRt.name();", "-            int index = rtClassName.lastIndexOf(\"$\");", "-            while ((field == null) && (index != -1)) {", "-              rtClassName = rtClassName.substring(0, index);", "-              List l = _vm.classesByName(rtClassName);", "-              if (l.isEmpty()) {", "-                // field is null, we will end up setting", "-                // the value to no value", "-                break;", "-              }", "-              outerRt = (ReferenceType)l.get(0);", "-              field = outerRt.fieldByName(currName);", "-                index = rtClassName.lastIndexOf(\"$\");", "+                outerIndex--;", "+                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);                  ", "-          }", "-          ", "-          // Try to set the value and type of the field.", "-          //  If the field is not static and we are in a static context", "-          //  (outer==null), we have to setNoValue.", "-          if ((field != null) &&", "-              (field.isStatic() || (outer != null))) {", "-            Value v = (field.isStatic()) ?", "-              outerRt.getValue(field) :", "-              outer.getValue(field);", "-            currWatch.setValue(_getValue(v));", "-            try {", "-              currWatch.setType(field.type().name());", "-            }", "-            catch (ClassNotLoadedException cnle) {", "-              List classes = _vm.classesByName(field.typeName());", "-              if (!classes.isEmpty()) {", "-                currWatch.setType(((Type)classes.get(0)).name());", "-              }", "-              else {", "-                currWatch.setTypeNotLoaded();", "-              }", "-            }", "-          }", "-          else {", "-            currWatch.setNoValue();", "-            currWatch.setNoType();", "+        else {", "+          // We're in a static context", "+          ", "+          // If we don't find it in this class, loop through any enclosing", "+          // classes. Do this by loading any outer classes by invoking the ", "+          // method on the class loader that loaded this class and passing", "+          // it the class name with the last class removed each time.", "+          String rtClassName = outerRt.name();", "+          int index = rtClassName.lastIndexOf(\"$\");", "+          while ((field == null) && (index != -1)) {", "+            rtClassName = rtClassName.substring(0, index);", "+            List l = _vm.classesByName(rtClassName);", "+            if (l.isEmpty()) {", "+              // field is null, we will end up setting", "+              // the value to no value", "+              break;", "+            }", "+            outerRt = (ReferenceType)l.get(0);", "+            field = outerRt.fieldByName(currName);", "+            ", "+            if (field == null) {", "+              // Enter the loop again with the next outer enclosing class", "+              index = rtClassName.lastIndexOf(\"$\");", "+            }", "+          }", "+        }", "+        ", "+        // Try to set the value and type of the field.", "+        //  If the field is not static and we are in a static context", "+        //  (outer==null), we have to setNoValue.", "+        if ((field != null) &&", "+            (field.isStatic() || (outer != null))) {", "+          Value v = (field.isStatic()) ?", "+            outerRt.getValue(field) :", "+            outer.getValue(field);", "+          currWatch.setValue(_getValue(v));", "+          try {", "+            currWatch.setType(field.type().name());", "+          }", "+          catch (ClassNotLoadedException cnle) {", "+            List classes = _vm.classesByName(field.typeName());", "+            if (!classes.isEmpty()) {", "+              currWatch.setType(((Type)classes.get(0)).name());", "+            }", "+            else {", "+              currWatch.setTypeNotLoaded();", "+            }", "+          }", "+        }", "+        else {", "+          currWatch.setNoValue();", "+          currWatch.setNoType();", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9457c9a1b7bde5d8d9f53fd2063768c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "   private JMenu _setUpEditMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpEditMenu(int mask)", "diff": ["-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = editMenu.add(_undoAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, mask));", "-      tmpItem = editMenu.add(_redoAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, mask));", "-    }", "-    else {", "-      _addMenuItem(editMenu, _undoAction, KEY_UNDO);", "-      _addMenuItem(editMenu, _redoAction, KEY_REDO);", "-    }", "+    _addMenuItem(editMenu, _undoAction, KEY_UNDO);", "+    _addMenuItem(editMenu, _redoAction, KEY_REDO);", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = editMenu.add(cutAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, mask));", "-      tmpItem = editMenu.add(copyAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, mask));", "-      tmpItem = editMenu.add(pasteAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, mask));", "-      tmpItem = editMenu.add(_selectAllAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, mask));", "-    }", "-    else {", "-      _addMenuItem(editMenu, cutAction, KEY_CUT);", "-      _addMenuItem(editMenu, copyAction, KEY_COPY);", "-      _addMenuItem(editMenu, pasteAction, KEY_PASTE);", "-      _addMenuItem(editMenu, _selectAllAction, KEY_SELECT_ALL);", "-    }", "+    _addMenuItem(editMenu, cutAction, KEY_CUT);", "+    _addMenuItem(editMenu, copyAction, KEY_COPY);", "+    _addMenuItem(editMenu, pasteAction, KEY_PASTE);", "+    _addMenuItem(editMenu, _selectAllAction, KEY_SELECT_ALL);", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = editMenu.add(_findReplaceAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, mask));", "-      tmpItem = editMenu.add(_gotoLineAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, mask));", "-    }", "-    else {", "-      _addMenuItem(editMenu, _findReplaceAction, KEY_FIND_REPLACE);", "-      _addMenuItem(editMenu, _gotoLineAction, KEY_GOTO_LINE);", "-    }", "+    _addMenuItem(editMenu, _findReplaceAction, KEY_FIND_REPLACE);", "+    _addMenuItem(editMenu, _gotoLineAction, KEY_GOTO_LINE);", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = editMenu.add(_switchToPrevAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, mask));", "-      tmpItem = editMenu.add(_switchToNextAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, mask));", "-    }", "-    else {", "-      _addMenuItem(editMenu, _switchToPrevAction, KEY_PREVIOUS_DOCUMENT);", "-      _addMenuItem(editMenu, _switchToNextAction, KEY_NEXT_DOCUMENT);", "-    }", "+    _addMenuItem(editMenu, _switchToPrevAction, KEY_PREVIOUS_DOCUMENT);", "+    _addMenuItem(editMenu, _switchToNextAction, KEY_NEXT_DOCUMENT);", "-    if (CodeStatus.DEVELOPMENT) {", "-      editMenu.addSeparator();", "-      editMenu.add(_editPreferencesAction);", "-    }", "+    editMenu.addSeparator();", "+    editMenu.add(_editPreferencesAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdeebe21cf856660c0ac77e4b3b749b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "   private JMenu _setUpFileMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpFileMenu(int mask)", "diff": ["-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = fileMenu.add(_newAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, mask));", "-      tmpItem = fileMenu.add(_openAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, mask));", "-    }", "-    else {", "-      _addMenuItem(fileMenu, _newAction, KEY_NEW_FILE);", "-      _addMenuItem(fileMenu, _openAction, KEY_OPEN_FILE);", "-    }", "+    _addMenuItem(fileMenu, _newAction, KEY_NEW_FILE);", "+    _addMenuItem(fileMenu, _openAction, KEY_OPEN_FILE);", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = fileMenu.add(_saveAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, mask));", "-    }", "-    else {", "-      _addMenuItem(fileMenu, _saveAction, KEY_SAVE_FILE);", "-    }", "+    _addMenuItem(fileMenu, _saveAction, KEY_SAVE_FILE);", "-", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = fileMenu.add(_saveAsAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ", "-                                                    mask | InputEvent.SHIFT_MASK));", "-    }", "-    else {", "-      _addMenuItem(fileMenu, _saveAsAction, KEY_SAVE_FILE_AS);", "-    }", "+    _addMenuItem(fileMenu, _saveAsAction, KEY_SAVE_FILE_AS);", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = fileMenu.add(_closeAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W, mask));", "-    }", "-    else {", "-      _addMenuItem(fileMenu, _closeAction, KEY_CLOSE_FILE);", "-    }", "+    _addMenuItem(fileMenu, _closeAction, KEY_CLOSE_FILE);", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = fileMenu.add(_printPreviewAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ", "-                                                    mask | InputEvent.SHIFT_MASK));", "-      tmpItem = fileMenu.add(_printAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, mask));", "-    }", "-    else {", "-      _addMenuItem(fileMenu, _printPreviewAction, KEY_PRINT_PREVIEW);", "-      _addMenuItem(fileMenu, _printAction, KEY_PRINT);", "-    }", "-    ", "+    _addMenuItem(fileMenu, _printPreviewAction, KEY_PRINT_PREVIEW);", "+    _addMenuItem(fileMenu, _printAction, KEY_PRINT);", "-    ", "-    if (!CodeStatus.DEVELOPMENT) {", "-      tmpItem = fileMenu.add(_quitAction);", "-      tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, mask));", "-    }", "-    else {", "-      _addMenuItem(fileMenu, _quitAction, KEY_QUIT);", "-    }", "+    _addMenuItem(fileMenu, _quitAction, KEY_QUIT);", "+"]}], "num": 29249}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69648afaa232370b0cf3c939ce56860c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7feefb261c82f97b61e2a66f105ba66d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/Breakpoint.java", "commitBeforeChange": "f1f97edd57f558d6d34abcd1fe039afc22f7a202", "commitAfterChange": "fc098bf0e8c385557d32ed3c183745582612add6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void _createBreakpointRequest(VirtualMachine vm) throws DebugException", "signatureAfterChange": "   protected void _createRequest(ReferenceType rt) throws DebugException", "diff": ["-  private void _createBreakpointRequest(VirtualMachine vm) throws DebugException {", "-    String packageName = \"\";", "-    try {", "-      packageName = _doc.getDocument().getPackageName();", "-    }", "-    catch (InvalidPackageException e) {", "-      // Couldn't find package, pretend there's none", "-    }", "-    _className = packageName + _doc.getClassName();", "-    _ref = _getReferenceType(_className, vm);", "-  }", "+   */", "+  protected void _createRequest(ReferenceType rt) throws DebugException {", "+    DrJava.consoleOut().println(\"Breakpoint._createRequest starting...\");", "+    /*", "+    DrJava.consoleOut().println(\"rt.isVerified: \" + rt.isVerified() +", "+                                \" rt.isInitialized: \" + rt.isInitialized() +", "+                                \" rt.isPrepared: \" + rt.isPrepared());", "+                                */", "+    // Get locations for the line number, use the first", "+    try {", "+      List lines = rt.locationsOfLine(_lineNumber);", "+      if (lines.size() == 0) {", "+        // Can't find a location on this line", "+        //System.out.println(\"No locations found.\");", "+        throw new DebugException(\"Could not find line number: \" + _lineNumber);", "+      }", "+      Location loc = (Location) lines.get(0);", "+      _request = _manager.getEventRequestManager().createBreakpointRequest(loc);", "+      DrJava.consoleOut().println(\"Created a breakpoint request: \" + _request);", "+      //DrJava.consoleOut().println(\"new Breakpoint: \" + toString());", "+      //_breakpointReq.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);", "+      //_breakpointReq.enable();", "+      //System.out.println(\"Breakpoint: \" + req);", "+      _manager.addBreakpointToMap(this);", "+    catch (AbsentInformationException aie) {", "+      throw new DebugException(\"Could not find line number: \" + aie);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4d87e23ecd3125926e1772cc5fa6628", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d41b5de79662496f09ec590840d7e35134702a41", "commitAfterChange": "fd26cc12b714205eb66ef1427d78a124c29d57fc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "signatureAfterChange": "   public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "diff": ["-  public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+  public void setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "-    String packageName = \"\";", "-    try {", "-      doc.getDocument().getPackageName();", "-    }", "-    catch (InvalidPackageException e) {", "-      // Couldn't find package, pretend there's none", "-    }", "-    String className = packageName + doc.getClassName();", "-    //System.out.println(\"Setting breakpoint in class: \" + className + ", "-    //                   \", line: \" + lineNumber);", "+", "+    Breakpoint breakpoint = new Breakpoint (doc, lineNumber, _vm);", "+", "+    System.out.println(breakpoint);", "-    // Get all classes that match this name", "-    List classes = _vm.classesByName(className);", "-    //System.out.println(\"Num of classes found: \" + classes.size());", "-    ReferenceType rt = null;", "-    Iterator it = classes.iterator();", "-    // Assume first one is correct, for now", "-    if (it.hasNext()) {", "-      rt = (ReferenceType) it.next();", "-    }", "-    if (rt == null) {", "-      //System.out.println(\"No reference type found\");", "-      return false;", "-    }", "-    ", "-    // Get locations for the line number, use the first", "-    try {", "-      List lines = rt.locationsOfLine(lineNumber);", "-      if (lines.size() == 0) {", "-        // Can't find a location on this line", "-        //System.out.println(\"No locations found.\");", "-        return false;", "-      }", "-      Location loc = (Location) lines.get(0);", "-      BreakpointRequest req = _eventManager.createBreakpointRequest(loc);", "-      req.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);", "-      req.enable();", "-      //System.out.println(\"Breakpoint: \" + req);", "-      return true;", "-    }", "-    catch (AbsentInformationException aie) {", "-      throw new DebugException(\"Could not find line number: \" + aie);", "-    }", "-    ", "-    /**", "-    BreakpointManager bpManager = (BreakpointManager)_session.getManager(BreakpointManager.class);", "-    try {", "-      bpManager.createBreakpoint(className, lineNumber);", "-    } catch (ResolveException re) {", "-      throw new DebugException(re.toString());", "-    } catch (ClassNotFoundException cnfe) {", "-      throw new DebugException(cnfe.toString());", "-    }", "-    writeToLog(\"Breakpoint added: \" + className + \":\" + lineNumber + \"\\n\");", "-    */", "+    _breakpoints.put(breakpoint.getRequest(), breakpoint);", "+    doc.addBreakpoint(breakpoint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3c971fd01521c8637ad1fb1a2a56290", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 8, "signatureBeforeChange": "       protected void setBreakpoint(String className, int lineNumber) throws DebugException", "signatureAfterChange": "   public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws DebugException", "diff": ["-   */    ", "-  protected void setBreakpoint(String className, int lineNumber) throws DebugException {", "+   */", "+  public boolean setBreakpoint(OpenDefinitionsDocument doc, int lineNumber)", "+    throws DebugException", "+  {", "+    String packageName = \"\";", "+    try {", "+      doc.getDocument().getPackageName();", "+    }", "+    catch (InvalidPackageException e) {", "+      // Couldn't find package, pretend there's none", "+    }", "+    String className = packageName + doc.getClassName();", "+    //System.out.println(\"Setting breakpoint in class: \" + className + ", "+    //                   \", line: \" + lineNumber);", "+    ", "+    // Get all classes that match this name", "+    List classes = _vm.classesByName(className);", "+    //System.out.println(\"Num of classes found: \" + classes.size());", "+    ReferenceType rt = null;", "+    Iterator it = classes.iterator();", "+    // Assume first one is correct, for now", "+    if (it.hasNext()) {", "+      rt = (ReferenceType) it.next();", "+    }", "+    if (rt == null) {", "+      //System.out.println(\"No reference type found\");", "+      return false;", "+    }", "+    ", "+    // Get locations for the line number, use the first", "+    try {", "+      List lines = rt.locationsOfLine(lineNumber);", "+      if (lines.size() == 0) {", "+        // Can't find a location on this line", "+        //System.out.println(\"No locations found.\");", "+        return false;", "+      }", "+      Location loc = (Location) lines.get(0);", "+      BreakpointRequest req = _eventManager.createBreakpointRequest(loc);", "+      req.setSuspendPolicy(EventRequest.SUSPEND_ALL);", "+      req.enable();", "+      //System.out.println(\"Breakpoint: \" + req);", "+      return true;", "+    }", "+    catch (AbsentInformationException aie) {", "+      throw new DebugException(\"Could not find line number: \" + aie);", "+    }", "+    ", "+    /**", "+    */"]}], "num": 13688}
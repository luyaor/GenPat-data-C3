{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38c147c682eb5b4d7df0e7e20fbcd414", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f9af36e47ec14027e087183cc1ded0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "910d746e63f304ca12ddaf504f429a40f31bf858", "commitAfterChange": "5aa76b13dff40570c1cd7aec5ad8f4bfd4acc66f", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "   private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException", "signatureAfterChange": "   private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException", "diff": ["-    String text = this.getText(0, _currentLocation);", "+    String text = getText(0, _currentLocation);", "-    text = text.substring(text.lastIndexOf(\"\\n\")+1);", "+    text = text.substring(text.lastIndexOf(\"\\n\") + 1);", "-    //check all positions in the new text to determine if there are any non-whitespace chars", "-    int index = text.length()-1;", "+    //check all positions in the new text to determine if there are any blank chars", "+    int pos = text.length() - 1;", "-    while(lastChar == ' ' && index >= 0){", "-      lastChar = text.charAt(index);", "-      index--;", "-    }", "-    ", "-    if (index < 0) return true;", "-    return false;", "+    while (pos >= 0 && text.charAt(pos) == ' ') pos--;", "+    return (pos < 0); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac03c64c417ced95f69d36670df48f49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 75, "signatureBeforeChange": "   private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException", "signatureAfterChange": "   private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException", "diff": ["-    String text = getText(0, _currentLocation);  // _currentLocation is length", "-    //get the text after the previous new line, but before the current location", "-    text = text.substring(text.lastIndexOf(\"\\n\") + 1);", "-    //check all positions in the new text to determine if there are any blank chars", "-    int pos = text.length() - 1;", "+    assert isReadLocked();", "+    ", "+    int lineStart = _getLineStartPos(_currentLocation);", "+    if (lineStart < 0) lineStart = 0;    // _currentLocation on first line", "+    int prefixSize = _currentLocation - lineStart;", "+    ", "+    // get prefix of _currentLocation (the text after the previous new line, but before the current location)", "+    String prefix = getText(lineStart, prefixSize);", "+    ", "+    //check all positions in the prefix to determine if there are any blank chars", "+    int pos = prefixSize - 1;", "-    while (pos >= 0 && text.charAt(pos) == ' ') pos--;", "-    return (pos < 0); ", "+    while (pos >= 0 && prefix.charAt(pos) == ' ') pos--;", "+    return (pos < 0);", "+  }"]}], "num": 11815}
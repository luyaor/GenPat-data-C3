{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e9e532ff190fa3d532e79149a90e267", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a135470c6f83ab2f177af617c382c216", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "893c07e82b5df8a5ee457745ae613e9f4f3395b7", "commitAfterChange": "e7565df68be50967f0383d34df0b493ae42a4e83", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames,                                String description, boolean moveButtonEnabled)", "diff": ["+    */", "+  public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames,", "+                               String description, boolean moveButtonEnabled) {", "+    _moveButtonEnabled = moveButtonEnabled;", "-    _tableModel = _makeTableModel();", "+    _tableModel = _makeDecoratedTableModel(_makeTableModel());", "-        final TableCellRenderer renderer = getTableHeader().getDefaultRenderer();", "-        ", "-        for (int i=0;i<getColumnCount(); ++i) {", "-          int w = renderer.getTableCellRendererComponent(this,getModel().getColumnName(i), false, false, 0, i).getPreferredSize().width;", "-          getColumnModel().getColumn(i).setPreferredWidth(w);", "-        }", "+        // set the column with the \"remove\" buttons to width 18 (icon is width 16)", "+        getColumnModel().getColumn(getColumnCount()-1).setMinWidth(18);", "+        getColumnModel().getColumn(getColumnCount()-1).setMaxWidth(18);", "+      // auto size the columns", "+    // if moving up and down is enabled, allow column drag and drop", "+    if (_moveButtonEnabled) {", "+      _table.setUI(new DragDropRowTableUI());", "+    }", "+    _table.setColumnSelectionAllowed(false);", "-", "-    _addButton = new JButton(_getAddAction());", "-    _removeButton = new JButton(new AbstractAction(\"Remove\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          // remove starting from the back so the indices don't have to be adjusted", "-          for(int i=rows.length-1; i>=0; --i) {", "-            _removeIndex(rows[i]);", "-          }", "-          int last = rows[rows.length-1];", "-          if (last==_data.size()) { // we removed the last element", "-            if (last>0) { // and there's more than one element in the list", "-              _table.getSelectionModel().setSelectionInterval(last-1,last-1);", "-            }", "-          }", "-          else {", "-            _table.getSelectionModel().setSelectionInterval(last,last);", "-          }", "-          notifyChangeListeners();", "-        }", "+    _table.getTableHeader().setReorderingAllowed(false);", "+    ", "+    // create the remove button", "+    final JButton removeButton = new CommonCloseButton();", "+    ButtonEditor buttonEditor = new ButtonEditor(removeButton);", "+    removeButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        _removeAction();", "-    ", "-    /* Only used in VectorFileOptionComponent subclass */", "+    // add remove button as default renderer/editor for buttons", "+    _table.setDefaultRenderer(JButton.class, new ComponentCellRenderer());", "+    _table.setDefaultEditor(JButton.class, buttonEditor);", "+", "+    // create other buttons", "+    _addButton = new JButton(_getAddAction());    ", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          _table.getSelectionModel().clearSelection();", "-          for(int i=0; i<rows.length; ++i) {", "-            if (rows[i]>0) {", "-              T el = _data.remove(rows[i]);", "-              _data.insertElementAt(el, rows[i]-1);", "-              _table.getSelectionModel().addSelectionInterval(rows[i]-1,rows[i]-1);", "-              _tableModel.fireTableRowsUpdated(rows[i]-1,rows[i]);", "-            }", "-          }", "-          notifyChangeListeners();", "-        }", "+        _moveUpAction();", "-", "-    /* Only used in VectorFileOptionComponent subclass */", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          _table.getSelectionModel().clearSelection();", "-          for(int i=0; i<rows.length; ++i) {", "-            if (rows[i]<_data.size()-1) {", "-              T el = _data.remove(rows[i]);", "-              _data.insertElementAt(el, rows[i]+1);", "-              _table.getSelectionModel().addSelectionInterval(rows[i]+1,rows[i]+1);", "-              _tableModel.fireTableRowsUpdated(rows[i],rows[i]+1);", "-            }", "-          }", "-          notifyChangeListeners();", "-        }", "+        _moveDownAction();", "-    _buttonPanel = new JPanel();", "-    _buttonPanel.setBorder(new EmptyBorder(5,5,5,5));", "-    _buttonPanel.setLayout(new BoxLayout(_buttonPanel, BoxLayout.X_AXIS));", "-    ", "-    _buttonPanel.add(Box.createHorizontalGlue());", "-    _addButtons(); // all buttons needs to be added consecutively as a group for glue to work properly               ", "-    _buttonPanel.add(Box.createHorizontalGlue());", "+    // list of buttons", "+    final java.util.List<JButton> buttons = getButtons();", "+    // table model of buttons, for the table situated under the values table", "+    // one row, n buttons", "+    _buttonTableModel = new AbstractTableModel() {", "+      public String getColumnName(int col) { return \"\"; }", "+      public int getRowCount() { return 1; }", "+      public int getColumnCount() { return buttons.size(); }", "+      public Object getValueAt(int row, int column) { return buttons.get(column); }", "+      public Class getColumnClass(int col) { return JButton.class; }", "+      public boolean isCellEditable(int row, int col) { return true; }", "+      public void setValueAt(Object value, int row, int col) { fireTableCellUpdated(row, col); }", "+    };", "+    // button table", "+    _buttonTable = new JTable(_buttonTableModel);", "+    _buttonTable.setColumnSelectionAllowed(false);", "+    _buttonTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+    _buttonTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);", "+    _buttonTable.getTableHeader().setReorderingAllowed(false);", "+    // add button editors/renderers to the button table", "+    for(int i=0; i<_buttonTable.getColumnCount(); ++i) {      ", "+      buttonEditor = new ButtonEditor(buttons.get(i));", "+      _buttonTable.getColumnModel().getColumn(i).setCellEditor(buttonEditor);", "+    }", "+    _buttonTable.setDefaultRenderer(JButton.class, new ComponentCellRenderer());", "+    _buttonTable.setTableHeader(null);", "+    ", "+    // if moving up and down is enabled, add a selection listener that", "+    // enabled and disables the move up/down buttons if we have enough elements", "+    // in the table and a row is selected", "+    if (_moveButtonEnabled) {", "+      ListSelectionListener selListener = new ListSelectionListener() {", "+        public void valueChanged(ListSelectionEvent e) {", "+          updateButtons();", "+        }", "+      };", "+      _table.getSelectionModel().addListSelectionListener(selListener);", "+      _table.getColumnModel().getSelectionModel().addListSelectionListener(selListener);    ", "+    }", "+    ", "+    // add components", "+    JPanel tablesPanel = new JPanel(new BorderLayout());", "+    tablesPanel.add(_tableScrollPane, BorderLayout.CENTER);", "+    tablesPanel.add(_buttonTable, BorderLayout.SOUTH);", "+", "-    _panel.add(_tableScrollPane, BorderLayout.CENTER);", "-    _panel.add(_buttonPanel, BorderLayout.SOUTH);", "+    _panel.add(tablesPanel, BorderLayout.CENTER);", "+    _panel.add(Box.createRigidArea(new Dimension(0,10)), BorderLayout.SOUTH);", "+", "+    setDescription(description);", "+    updateButtons();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d728841dcad8acc9ead2e15e26a5ed96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0c95fc4366bd5654ddd2a4c942b1634c96be89c8", "commitAfterChange": "57576abf3c61a61cbc760b4b0e10c533bcfaab23", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void _newClassFileGUI()", "signatureAfterChange": "   public void _newJavaClass()", "diff": ["- //newclass addition", "-  public void _newClassFileGUI(){", "-    ", "-    final JFrame frame = new JFrame(\"New Java Class\");", "-    final JButton createClass = new JButton(\"Create\");", "-    final JTextField className = new JTextField(20);", "-    final JTextField interfaces = new JTextField(20);", "-    final JTextField superClass = new JTextField(20);", "-    final JLabel classNameLable = new JLabel(\"Class Name: \");", "-    final JLabel superClassLabel = new JLabel(\"SuperClass: \");", "-    final JLabel interfacesLabel = new JLabel(\"InterFaces: \");", "-    final JLabel modifierLabel = new JLabel(\"Modifier: \");", "-    final JLabel blankLabel = new JLabel(\"                \");", "-    ", "-    ", "-    final JLabel errorMessage = new JLabel();", "-    final JRadioButton defaultRadio= new JRadioButton(\"default\", false);", "-    final JRadioButton publicRadio= new JRadioButton(\"public\", true);", "-    final JRadioButton abstractRadio= new JRadioButton(\"abstract\", false);", "-    final JRadioButton finalRadio= new JRadioButton(\"final\", false);", "-    final ButtonGroup group1 = new ButtonGroup();", "-    final ButtonGroup group2 = new ButtonGroup();", "-    final JCheckBox mainMethod = new JCheckBox(\"Include main method\");", "-    final JCheckBox classConstructor = new JCheckBox(\"Include class constructor\");", "-    ", "-    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );", "-    frame.setSize(250, 350);", "-    frame.setLocationRelativeTo(null);", "-    frame.setVisible(true);", "-    ", "-    frame.setLayout(new FlowLayout());", "-    //the modifiers", "-    frame.add(modifierLabel);", "-    frame.add(publicRadio);", "-    frame.add(defaultRadio);", "-    ", "-    //blankLabel.setSize(150,2);", "-    frame.add(blankLabel);", "-    frame.add(abstractRadio);", "-    frame.add(finalRadio);", "-    ", "-    //grouping the modifiers", "-    group1.add(publicRadio);", "-    group1.add(defaultRadio);", "-    ", "-    group2.add(abstractRadio);", "-    group2.add(finalRadio);", "-    ", "-    frame.add(classNameLable);", "-    frame.add(className);", "-    frame.add(superClassLabel);", "-    frame.add(superClass);", "-    frame.add(interfacesLabel);", "-    frame.add(interfaces);", "-    ", "-    frame.add(errorMessage);", "-    frame.add(mainMethod);", "-    frame.add(classConstructor);", "-    frame.add(createClass);", "-    //listen to the button when it is pressed", "-    //createClass.addActionListener(this);", "-    ", "-    createClass.addActionListener( ", "-                                  new ActionListener() { ", "-      public void actionPerformed(ActionEvent e) { ", "-        JRadioButton selectedRadioButton1 = new JRadioButton();", "-        JRadioButton selectedRadioButton2 = new JRadioButton();", "-        //to check which radio buttom has been choosen", "-        for (Enumeration enu = group1.getElements(); enu.hasMoreElements(); ) {", "-          JRadioButton b = (JRadioButton)enu.nextElement();", "-          if (b.getModel() == group1.getSelection())", "-            selectedRadioButton1 = b;", "-        }//for", "-        ", "-        for (Enumeration enu = group2.getElements(); enu.hasMoreElements(); ) {", "-          JRadioButton b = (JRadioButton)enu.nextElement();", "-          if (b.getModel() == group2.getSelection())", "-            selectedRadioButton2 = b;", "-        }//for", "-        ", "-        NewJavaClass javaClass = new NewJavaClass();", "-        boolean sc = false;", "-        boolean in = false;", "-        ", "-        // probability of entering the 3 variables", "-        String msg = \"\";", "-        ", "-        if(javaClass.classNameMeetsNamingConvention(className.getText())){", "-          ", "-          if(superClass.getText().length() != 0)", "-            if(javaClass.classNameMeetsNamingConvention(superClass.getText())) ", "-            sc = true;", "-          else", "-            msg += \"<html>Enter correct superclass name.<br></html>\";", "-          ", "-          if(interfaces.getText().length() != 0)", "-            if(javaClass.interfacesNameMeetsNamingConvention(interfaces.getText()))", "-            in = true;", "-          else", "-            msg += \"Enter correct interfaces name.\";", "-          ", "-          if( ((superClass.getText().length() == 0 && interfaces.getText().length() == 0)) || ", "-             ((superClass.getText().length() != 0 && sc == true) && (interfaces.getText().length() != 0 && in == true)) ||", "-             ((superClass.getText().length() != 0 && sc == true) && (interfaces.getText().length() == 0)) ||", "-             ((superClass.getText().length() == 0) && (interfaces.getText().length() != 0 && in == true))", "-            ) {", "-            _model.newClass(selectedRadioButton1.getText(), selectedRadioButton2.getText() ,className.getText(), mainMethod.isSelected(), classConstructor.isSelected(), superClass.getText(), interfaces.getText());", "-            frame.setVisible(false);", "-            _save();", "-          } else {", "-            errorMessage.setForeground(Color.RED);", "-            errorMessage.setText(msg);", "-          }", "-          ", "-        } else {", "-          msg += \"Enter correct class name. \";", "-          errorMessage.setForeground(Color.RED);", "-          errorMessage.setText(msg);", "-        }", "-      }", "-    } ", "-    ); ", "-  } ", "+  //newclass addition", "+  public void _newJavaClass(){", "+    NewJavaClassDialog njc = new NewJavaClassDialog(this);", "+    njc.setVisible(true);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7c9fd99e4736ea3ae131cad10d7c30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "b59ea5c5062a947f96790df7fe854009e693434a", "commitAfterChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "diff": ["+    */", "+  public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames) {", "+    _columnNames = colNames;", "-    //set up list", "-    _listModel = new DefaultListModel();", "-    _list = _makeList(_listModel);", "+    //set up table", "+    _data = new Vector<T>();", "+    _tableModel = _makeTableModel();", "+    _table = new JTable(_tableModel) {", "+      {", "+        final TableCellRenderer renderer = getTableHeader().getDefaultRenderer();", "+        ", "+        for (int i=0;i<getColumnCount(); ++i) {", "+          int w = renderer.getTableCellRendererComponent(this,getModel().getColumnName(i), false, false, 0, i).getPreferredSize().width;", "+          getColumnModel().getColumn(i).setPreferredWidth(w);", "+        }", "+      }", "+      ", "+      public Component prepareRenderer(final TableCellRenderer renderer,", "+                                       final int row, final int column) {", "+        final Component prepareRenderer = super.prepareRenderer(renderer, row, column);", "+        final TableColumn tableColumn = getColumnModel().getColumn(column);", "+        ", "+        tableColumn.setPreferredWidth(Math.max(prepareRenderer.getPreferredSize().width,tableColumn.getPreferredWidth()));", "+        ", "+        return prepareRenderer;", "+      }    ", "+    };", "+    _table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-", "-    /*", "-    Vector v = DrJava.getConfig().getSetting(_option);", "-    String[] array = new String[v.size()];", "-    v.copyInto(array);", "-    //_list.setListData(array);", "-    for (int i = 0; i < array.length; i++) {", "-      _listModel.add(array[i]);", "-    }", "-    */", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          _listModel.remove(index);", "-          if (index == _listModel.getSize()) { // we removed the last element", "-            if (index > 0) // and there's more than one element in the list", "-            _list.setSelectedIndex(index - 1);", "-            notifyChangeListeners();", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          // remove starting from the back so the indices don't have to be adjusted", "+          for(int i=rows.length-1; i>=0; --i) {", "+            _data.remove(rows[i]);", "+            _tableModel.fireTableRowsDeleted(rows[i],rows[i]); System.out.flush();", "+          }", "+          int last = rows[rows.length-1];", "+          if (last==_data.size()) { // we removed the last element", "+            if (last>0) { // and there's more than one element in the list", "+              _table.getSelectionModel().setSelectionInterval(last-1,last-1);", "+            }", "-            _list.setSelectedIndex(index);", "-            notifyChangeListeners();", "+            _table.getSelectionModel().setSelectionInterval(last,last);", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          if (index > 0) {", "-            Object o = _listModel.getElementAt(index);", "-            _listModel.remove(index);", "-            _listModel.insertElementAt(o, index - 1);", "-            _list.setSelectedIndex(index - 1);", "-            notifyChangeListeners();", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          _table.getSelectionModel().clearSelection();", "+          for(int i=0; i<rows.length; ++i) {", "+            if (rows[i]>0) {", "+              T el = _data.remove(rows[i]);", "+              _data.insertElementAt(el, rows[i]-1);", "+              _table.getSelectionModel().addSelectionInterval(rows[i]-1,rows[i]-1);", "+              _tableModel.fireTableRowsUpdated(rows[i]-1,rows[i]);", "+            }", "-        if (!_list.isSelectionEmpty()) {", "-          int index = _list.getSelectedIndex();", "-          if (index < _listModel.getSize() - 1) {", "-            Object o = _listModel.getElementAt(index);", "-            _listModel.remove(index);", "-            _listModel.insertElementAt(o, index + 1);", "-            _list.setSelectedIndex(index + 1);", "-            notifyChangeListeners();", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          _table.getSelectionModel().clearSelection();", "+          for(int i=0; i<rows.length; ++i) {", "+            if (rows[i]<_data.size()-1) {", "+              T el = _data.remove(rows[i]);", "+              _data.insertElementAt(el, rows[i]+1);", "+              _table.getSelectionModel().addSelectionInterval(rows[i]+1,rows[i]+1);", "+              _tableModel.fireTableRowsUpdated(rows[i],rows[i]+1);", "+            }", "-    ", "-    _listScrollPane = new JScrollPane(_list, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "-                                      JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    _tableScrollPane = new JScrollPane(_table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "+                                       JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-    _panel.add(_listScrollPane, BorderLayout.CENTER);", "+    _panel.add(_tableScrollPane, BorderLayout.CENTER);", "-    _listScrollPane.setPreferredSize(new Dimension(0, NUM_ROWS * PIXELS_PER_ROW));", "+    _tableScrollPane.setPreferredSize(new Dimension(0, NUM_ROWS * PIXELS_PER_ROW));", "+    if (_columnNames.length==0) {", "+      _table.setTableHeader(null);", "+      _tableScrollPane.setColumnHeaderView(null);", "+    }", "+  }"]}], "num": 28919}
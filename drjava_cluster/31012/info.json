{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8205753837767fe71c35b300d61386a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16ee87ad9c28194af83dcdd22c7d2875", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "signatureAfterChange": "   private SymbolData _getSymbolData_FromFileSystem(final String qualifiedClassName, SourceInfo si, boolean resolve,                                                    boolean addError)", "diff": ["-//        _addAndIgnoreError(\"The class \" + qualifiedClassName + \" was not found in the file \" + sourceFile, new NullLiteral(si));", "+//        _addAndIgnoreError(\"The class \" + qualifiedClassName + \" was not found in the file \" + sourceFile, ", "+//                           new NullLiteral(si));", "-//    if (qualifiedClassName.contains(\"List\")) {System.out.println(\"Line 777: There are \" + continuations.size() + \" continuations \" + continuations);}", "+//    if (qualifiedClassName.contains(\"List\")) {System.out.println(\"Line 777: There are \" + continuations.size() + ", "+//      \" continuations \" + continuations);}", "-          continuations.put(qualifiedClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, createANewInstanceOfMe(sourceFile)));//this));", "+          continuations.put(qualifiedClassName, ", "+                            new Pair<SourceInfo, LanguageLevelVisitor>(si, createANewInstanceOfMe(sourceFile)));//this));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" is present, but does not have proper read permissions\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" is present, but does not have proper read permissions\", new NullLiteral(si));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" needs to be recompiled, but its directory does not have proper write permissions\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" needs to be recompiled, but its directory does not have proper write permissions\", ", "+                               new NullLiteral(si));", "-            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + \" is present, but its full path cannot be resolved (symbolic links may not have proper permissions)\", new NullLiteral(si));", "+            _addAndIgnoreError(\"The file \" + sourceFile.getAbsolutePath() + ", "+                               \" is present, but its full path cannot be resolved \" + ", "+                               \"(symbolic links may not have proper permissions)\", ", "+                               new NullLiteral(si));", "-          throw new RuntimeException(\"Internal Program Error: Invalid file format not caught initially\" + sourceFile.getName() + \". Please report this bug\");", "+          throw new RuntimeException(\"Internal Program Error: Invalid file format not caught initially\" + ", "+                                     sourceFile.getName() + \". Please report this bug\");", "-              //  errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, new NullLiteral(p.getFirst())));", "+              //  errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, ", "+              //                                             new NullLiteral(p.getFirst())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5357d5ba95a754201a8f0fe51f1193f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void handleUncheckedException(SymbolData sd, JExpression j)", "signatureAfterChange": "   public void handleUncheckedException(SymbolData sd, JExpression j)", "diff": ["-  /**If an exception is thrown but not caught, throw the appropriate error, based on the JExpression.*/", "+  /** If an exception is thrown but not caught, throw the appropriate error, based on the JExpression.*/", "-      _addError(\"The method \" + ((MethodInvocation)j).getName().getText() + \" is declared to throw the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "+      _addError(\"The method \" + ((MethodInvocation)j).getName().getText() + \" is declared to throw the exception \" + ", "+                sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "-        _addError(\"This statement throws the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "+        _addError(\"This statement throws the exception \" + sd.getName() + ", "+                  \" which needs to be caught or declared to be thrown\", j);", "-        _addError(\"The constructor for the class \" + ((ClassInstantiation)j).getType().getName() + \" is declared to throw the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown.\", j);", "+        _addError(\"The constructor for the class \" + ((ClassInstantiation)j).getType().getName() + ", "+                  \" is declared to throw the exception \" + sd.getName() +", "+                  \" which needs to be caught or declared to be thrown.\", j);", "-        _addError(\"The constructor of this class's super class could throw the exception \" + sd.getName() + \", so the enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"The constructor of this class's super class could throw the exception \" + sd.getName() + ", "+                  \", so the enclosing constructor needs to be declared to throw it\", j);", "-        _addError(\"This constructor could throw the exception \" + sd.getName() + \", so this enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"This constructor could throw the exception \" + sd.getName() + ", "+                  \", so this enclosing constructor needs to be declared to throw it\", j);", "-        _addError(\"There is an implicit call to the superclass's constructor here.  That constructor could throw the exception \" + sd.getName() + \", so the enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"There is an implicit call to the superclass's constructor here.  \" + ", "+                  \"That constructor could throw the exception \" + sd.getName() + ", "+                  \", so the enclosing constructor needs to be declared to throw it\", j);", "-        throw new RuntimeException(\"Internal Program Error: Something besides a method invocation or throw statement threw an exception.  Please report this bug.\");", "+        throw new RuntimeException(\"Internal Program Error: Something besides a method invocation or throw statement\" + ", "+                                   \" threw an exception.  Please report this bug.\");"]}], "num": 31012}
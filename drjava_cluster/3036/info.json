{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e49c1a6e39e8c1007e35ac2288e67053", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b540f86d42333b057ff76d0779a9193", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "    protected void assertCompileErrorsPresent(String name, boolean b)", "signatureAfterChange": "    protected void assertCompileErrorsPresent(String name, boolean b)", "diff": ["-    CompilerError[] errors = _model.getCompileErrors();", "+    //CompilerError[] errors = _model.getCompileErrors();", "+    int numErrors = _model.getNumErrors();", "-    StringBuffer buf = new StringBuffer();", "-    for (int i = 0; i < errors.length; i++) {", "-      buf.append(\"\\nerror #\" + i + \": \" + errors[i]);", "-    }", "+    //StringBuffer buf = new StringBuffer();", "+    //for (int i = 0; i < errors.length; i++) {", "+    //  buf.append(\"\\nerror #\" + i + \": \" + errors[i]);", "+    //}", "-    assertEquals(name + \"compile errors > 0? errors=\" + buf,", "+    assertEquals(name + \"compile errors > 0? numErrors=\" + numErrors,", "-                 errors.length > 0);", "+                 numErrors > 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "920b6e1b2c7123bcbf3a9a5f1511d061", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "   public void setTab(String tab, int pos)", "signatureAfterChange": "   public void setTab(int tab, int pos)", "diff": ["+    */", "+  public void setTab(int tab, int pos) {", "+    try {", "+      int startPos = getLineStartPos(pos);", "+      int firstNonWSPos = getLineFirstCharPos(pos);", "+      int len = firstNonWSPos - startPos;", "+      ", "+      // Adjust prefix", "+      if (len != tab) {", "+        // Only add or remove the difference", "+        int diff = tab - len;", "+        if (diff > 0) insertString(firstNonWSPos, getBlankString(diff), null);", "+        else remove(firstNonWSPos + diff, -diff);", "+      }", "+      /* else do nothing */ ", "+    }", "+    catch (BadLocationException e) {", "+      // Should never see a bad location", "+      throw new UnexpectedException(e);", "+    }", "+  }", "-      // Adjust prefix", "-      boolean onlySpaces = _hasOnlySpaces(tab);", "-      if (! onlySpaces || len != tab.length()) {", "-        ", "-        if (onlySpaces) {", "-          // Only add or remove the difference", "-          int diff = tab.length() - len;", "-          if (diff > 0) insertString(firstNonWSPos, tab.substring(0, diff), null);", "-          else remove(firstNonWSPos + diff, -diff);", "-        }", "-        else {", "-          // Remove the whole prefix, then add the new one", "-          remove(startPos, len);", "-          insertString(startPos, tab, null);", "-        }", "-      }"]}], "num": 3036}
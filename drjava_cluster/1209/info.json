{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09eae1ec9e716664f05f615deba686cf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2ec5ac197ef0f81a56967c8474166a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void runTest(final String className, final String fileName)", "signatureAfterChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "diff": ["-  public void runTest(final String className, final String fileName) {", "-    Thread t = new Thread(\"JUnit Test Thread\") {", "-      public void run() {", "-        try {", "-          if (!_isTestCase(className)) {", "-            _jvm.nonTestCase();", "-           return;", "+   */", "+  public List<String> runTest(final List<String> classNames, final List<File> files,", "+                              final boolean isTestAll) {", "+    final ArrayList<String> stuff = new ArrayList<String>();", "+    synchronized (stuff) {", "+      _testRunner = new JUnitTestRunner(_jmc);", "+      new Thread(\"JUnit Test Thread\") {", "+        public void run() {", "+          try {", "+            boolean noJUnitTests = true;", "+            TestSuite suite = new TestSuite();", "+            synchronized (stuff) {", "+              try {", "+                for (int i = 0; i < classNames.size(); i++) {", "+                  String className = classNames.get(i);", "+                  if (_isTestCase(className)) {", "+                    Test test = _testRunner.getTest(className);", "+                    suite.addTest(test);", "+                    stuff.add(className);", "+                    noJUnitTests = false;", "+                  }", "+                }", "+              }", "+              finally {", "+                stuff.notify();", "+              }", "+            }", "+            if (noJUnitTests) {", "+              _jmc.nonTestCase(isTestAll);", "+              //            _jmc.testSuiteEnded(new JUnitError[] {new JUnitError(null, \"No JUnit tests open!\", false, \"\")});", "+              return;", "+            }", "+            ", "+            TestResult result = _testRunner.doRun(suite); ", "+            ", "+            JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "+            ", "+            Enumeration failures = result.failures();", "+            Enumeration errEnum = result.errors();", "+            ", "+            int i = 0;", "+            ", "+            while (errEnum.hasMoreElements()) {", "+              TestFailure tErr = (TestFailure) errEnum.nextElement();", "+              errors[i] = _makeJUnitError(tErr, classNames, true, files);", "+              i++;", "+            }", "+            while (failures.hasMoreElements()) {", "+              TestFailure tFail = (TestFailure) failures.nextElement();", "+              errors[i] = _makeJUnitError(tFail, classNames, false, files);", "+              i++;", "+            }", "+            ", "+            _jmc.testSuiteEnded(errors);", "-          Test suite = _testRunner.getTest(className);", "-          TestResult result = _testRunner.doRun(suite); ", "-          ", "-          JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "-          ", "-          Enumeration failures = result.failures();", "-          Enumeration errEnum = result.errors(); ", "-          ", "-          int i=0;", "-          ", "-          while ( errEnum.hasMoreElements()) {", "-            TestFailure tErr = (TestFailure) errEnum.nextElement();", "-            errors[i] = _makeJUnitError(tErr, className, true, fileName);", "-            i++;", "+          catch (Throwable t) {", "+            _failedWithError(t);", "-          ", "-          while (failures.hasMoreElements()) {", "-            TestFailure tFail = (TestFailure) failures.nextElement();", "-            errors[i] = _makeJUnitError(tFail, className, false, fileName);", "-            i++;", "-          }", "-          ", "-          _jvm.testSuiteFinished(errors);", "-        catch (Throwable t) {", "-          JUnitError[] errors = new JUnitError[1];", "-          errors[0] = new JUnitError(new File(fileName), -1, -1, t.getMessage(),", "-                                    false, className, StringOps.getStackTrace(t));", "-          _jvm.testSuiteFinished(errors);", "-        }", "+      }.start();", "+      try {", "+        stuff.wait();", "-    };", "-    t.start();", "+      catch (InterruptedException ex) {", "+      }", "+    }", "+    return stuff;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc024bf0dc906173b90a85a333f3fae3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "signatureAfterChange": "   public synchronized boolean runTestSuite()", "diff": ["-  public List<String> runTest(final List<String> classNames, final List<File> files,", "-                              final boolean isTestAll) {", "-    final ArrayList<String> testClassNames = new ArrayList<String>();", "-    synchronized (testClassNames) {", "-      _testRunner = new JUnitTestRunner(_jmc);", "-      new Thread(\"JUnit Test Thread\") {", "-        public void run() {", "-          try {", "-            boolean noJUnitTests = true;", "-            TestSuite suite = new TestSuite();", "-            synchronized (testClassNames) {", "-              try {", "-                for (int i = 0; i < classNames.size(); i++) {", "-                  String className = classNames.get(i);", "-                  if (_isTestCase(className)) {", "-                    Test test = _testRunner.getTest(className);", "-                    suite.addTest(test);", "-                    testClassNames.add(className);", "-                    noJUnitTests = false;", "-                  }", "-                }", "-              }", "-              finally { testClassNames.notify(); }", "-            }", "-            if (noJUnitTests) {", "-              _jmc.nonTestCase(isTestAll);", "-              //            _jmc.testSuiteEnded(new JUnitError[] {new JUnitError(null, \"No JUnit tests open!\", false, \"\")});", "-              return;", "-            }", "-            TestResult result = _testRunner.doRun(suite);", "-", "-            JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "-", "-            Enumeration failures = result.failures();", "-            Enumeration errEnum = result.errors();", "-", "-            int i = 0;", "-", "-            while (errEnum.hasMoreElements()) {", "-              TestFailure tErr = (TestFailure) errEnum.nextElement();", "-              errors[i] = _makeJUnitError(tErr, classNames, true, files);", "-              i++;", "-            }", "-            while (failures.hasMoreElements()) {", "-              TestFailure tFail = (TestFailure) failures.nextElement();", "-              errors[i] = _makeJUnitError(tFail, classNames, false, files);", "-              i++;", "-            }", "-            _jmc.testSuiteEnded(errors);", "-          }", "-          catch (Throwable t) {", "-            _failedWithError(t);", "-          }", "-        }", "-      }.start();", "-      try {", "-        testClassNames.wait();", "-      }", "-      catch (InterruptedException ex) {", "-    return testClassNames;", "+   */", "+  public synchronized boolean runTestSuite() {", "+    ", "+    if (_testClassNames == null || _testClassNames.isEmpty()) return false;", "+    ", "+//    new ScrollableDialog(null, \"runTestSuite() in SlaveJVM called\", \"\", \"\").show();", "+    try {", "+      TestResult result = _testRunner.doRun(_suite);", "+    ", "+      JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "+      ", "+      Enumeration failures = result.failures();", "+      Enumeration errEnum = result.errors();", "+      ", "+      int i = 0;", "+      ", "+      while (errEnum.hasMoreElements()) {", "+        TestFailure tErr = (TestFailure) errEnum.nextElement();", "+        errors[i] = _makeJUnitError(tErr, _testClassNames, true, _testFiles);", "+        i++;", "+      }", "+      ", "+      while (failures.hasMoreElements()) {", "+        TestFailure tFail = (TestFailure) failures.nextElement();", "+        errors[i] = _makeJUnitError(tFail, _testClassNames, false, _testFiles);", "+        i++;", "+      }", "+//      new ScrollableDialog(null, \"Slave JVM: testSuite ended with errors\", \"\", Arrays.toString(errors)).show();", "+      ", "+      _jmc.testSuiteEnded(errors);", "+    }", "+    catch(Throwable t) { ", "+      JUnitError[] errors = new JUnitError[1];", "+      errors[0] = new JUnitError(null, -1, -1, t.getMessage(),", "+                                 false, \"\", \"\", StringOps.getStackTrace(t));", "+      _jmc.testSuiteEnded(errors);", "+       // new ScrollableDialog(null, \"Slave JVM: testSuite ended with errors\", \"\", Arrays.toString(errors)).show();", "+      ", "+    }", "+    finally {", "+      _suite = null;", "+      _testClassNames = null;", "+      _testFiles = null;", "+    }", "+    return true;"]}], "num": 1209}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "781a85d8df9d28029263556270e54b99", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e167804581740f5b47cb625c89ca034", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "signatureAfterChange": "   protected SymbolData addSymbolData(TypeDefBase typeDefBase, String qualifiedClassName)", "diff": ["-      if (tempSd != null) {", "-        interfaces.addLast(tempSd);  ", "-      }", "-      ", "-      else if (qualifiedClassName.indexOf(\"$\") != -1) {", "-        //check to see if this is an inner class referencing an inner interface", "+      if (tempSd != null) interfaces.addLast(tempSd);  ", "+      else if (qualifiedClassName.indexOf(\"$\") != -1) { // class is inner", "+        // check to see if this is an inner class referencing an inner interface", "-        ", "-      ", "-      else if (tempSd == null) {", "-        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "-        // Couldn't resolve the interface.", "-        return null;", "+      else if (tempSd == null) {  // class is not inner; ith superinterface not yet defined", "+//        _addAndIgnoreError(\"Could not resolve \" + rts[i].getName(), rts[i]);", "+//        // Couldn't resolve the interface.", "+        _log.log(\"CREATING continuation \" + rts[i].getName() + \" with SourceInfo \" + rts[i].getSourceInfo());", "+        continuations.put(rts[i].getName(), new Pair<SourceInfo, LanguageLevelVisitor>(rts[i].getSourceInfo(), this));    ", "-      superClass = getSymbolData(superClassName, rt.getSourceInfo(), false); //TODO: change this back to true?", "+      SourceInfo si = rt.getSourceInfo();", "+      superClass = getSymbolData(superClassName, si, false); //TODO: change this back to true?", "-        superClass = getSymbolData(\"java.lang.Object\", typeDefBase.getSourceInfo(), false);", "+        superClass = new SymbolData(superClassName);", "+        symbolTable.put(superClassName, sd);", "+        continuations.put(superClassName, new Pair<SourceInfo, LanguageLevelVisitor>(si, this));", "+    _log.log(\"REMOVING continuation \" + sd.getName());", "-    if (!sd.isInterface()) {_newSDs.put(sd, this); }", "+    if (! sd.isInterface()) {_newSDs.put(sd, this); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b69b34b086ed230b3609ebd6a7d0822", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "    private SymbolData _getSymbolData_IsQualified(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                                  boolean addError)", "signatureAfterChange": "    private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                               boolean addError)", "diff": ["-   */ ", "-  private SymbolData _getSymbolData_IsQualified(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "-                                                boolean addError) {", "+    */ ", "+  private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "+                                             boolean addError) {", "+    _log.log(\"_getQualifiedSymbolData called on '\" + className + \"'\");", "+   ", "-    /* If sd is not null then if it's not a continuation, we're done, return it.", "+//    if (className.equals(\"fully.qualified.Woah\")) System.err.println(\"_getQualifiedSymbolData(\" + className + \", ...) called\" +", "+//                                                                    \"\\nsd = \" + sd);", "+    /* If sd is not null then return it unless it is continuation that we are resolving.", "-     * that we'll find it later.  If you don't return here, you can get into", "+     * that we'll find it later. (?)  If you don't return here, you can get into", "-    if (sd != null && (!sd.isContinuation() || fromClassFile)) { return sd; }", "+    _log.log(\"Corresponding symbolTable entry = \" + sd);", "+    if (sd != null && (!resolve || !sd.isContinuation() || fromClassFile)) { ", "+      _log.log(\"Returning \" + sd);", "+      return sd; ", "+    }", "+      _log.log(\"Calling  _classFile2SymbolData\");", "-    else {", "-      sd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "-      if (sd != SymbolData.KEEP_GOING) {", "-        return sd;", "+    else if (resolve) {  // Look for class file if resolving a continuation", "+      SymbolData newSd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "+      if (newSd != SymbolData.NOT_FOUND) {", "+        _log.log(\"Returning \" + sd + \" from file system\");", "+        return newSd;", "+      else if (sd != null && sd.isContinuation()) return sd;", "-      return null;", "+    _log.log(\"Returning null\");", "+    return null;"]}], "num": 27897}
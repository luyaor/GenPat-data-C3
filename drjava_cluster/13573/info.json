{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6086a96607a8c21fea7e0a8dd02d388b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b0e0173d08f1d97af03204e3ba640e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "45f11437d24a95250c66e3a94437d7de4d6682c1", "commitAfterChange": "97bb3c70440590a053a3f2aff064ff2a0f94447e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   public String getClassName()", "signatureAfterChange": "   public String getClassName()", "diff": ["-      while (!done) {", "-        index = text.indexOf(\"class\", index);", "-        if (index == -1) {  //not found", "-          done = true; break;", "-        } else {", "-          //found a match, check quality", "-          setCurrentLocation(index);", "-          if (!_isCommentedOrSpace(index,text)) {", "-            done = true;", "-            if (!posNotInPhrase(index)) { //in a paren phrase, gone too far", "-              index = -1;", "-            }", "-          } else {", "-            index++;  //move past so we can search again", "-          }", "+      int indexOfClass = _findKeywordAtToplevel(\"class\", text);", "+      int indexOfInterface = _findKeywordAtToplevel(\"interface\", text);", "+      ", "+      if ( indexOfClass > -1 ) {", "+        ", "+        if (indexOfInterface > -1) {", "+          // compare indices to find the lesser", "+          index = (indexOfClass < indexOfInterface) ?", "+            indexOfClass + \"class\".length() :", "+            indexOfInterface + \"interface\".length();     ", "+        }", "+        else {", "+          //top level class declaration found", "+          index = indexOfClass + \"class\".length();", "-", "-      if (index > -1) {", "-        //top level class declaration found", "-        index = index + \"class\".length();", "+      else {", "-      } else {", "-        //no acceptable match, search for interface", "-        done = false;", "-        index = 0; ", "-", "-        //search again for interface", "-        while (!done) {", "-          index = text.indexOf(\"interface\", index);", "-          if (index == -1) {  //not found", "-            done = true; break;", "-          } else {", "-            //found a match, check for quality", "-            setCurrentLocation(index);", "-            if (!_isCommentedOrSpace(index,text)) {", "-              done = true;", "-              if (!posNotInPhrase(index)) { //in a paren phrase, gone too far", "-                index = -1;", "-              }", "-            } else { ", "-              index++; //move past so we can search again", "-            }", "-          }", "+        if (indexOfInterface > -1) {", "+          index = indexOfInterface + \"interface\".length();", "-", "-        if (index > -1) {", "-          index = index + \"interface\".length();", "-        } else {", "-          //no match", "+        else { ", "+          // neither index was valid", "+      ", "-      char c;  //tmp char", "-      int j;   ", "-", "-      done = false;", "-      char[] whitespace = {' ', '\\t', '\\n'};", "-      for (int i=index; i < docLength && !done; i++) {", "-        c = text.charAt(i);", "-", "-        done = true;", "-        for (j = 0; j < whitespace.length; j++) {", "-          if (c == whitespace[j]) {", "-            done = false;", "-          }", "-        }", "-        if (done) index = i;", "-      }", "-", "+      index = getFirstNonWSCharPos(index);", "+      if (index == -1) return \"\";", "+      ", "-", "+      char c;", "-      char[] delims = {' ', '\\t', '\\n','{','}','[',']','(',')',';','<','>'};", "-", "-        for (j = 0; j < delims.length; j++) {", "-          if (c == delims[j]) {", "-            endIndex = i;", "-            done = true; break;", "-          }", "+        if (!Character.isJavaIdentifierPart(c)) {", "+          endIndex = i;", "+          done = true;", "+      System.out.println(\"In finally\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b34b4859b7e99c13fa5529defde68c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   private int _findWrapped(int start, int end)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["+   */  ", "+  private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped) {", "+    int newLen, newStart;", "+    ", "+    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "+    ", "+//    System.err.println(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "+//                       doc.getLength() + \", _isForward = \" + _isForward);", "+", "+    doc.readLock();", "+    try {", "+      if (doc.getLength() == 0) return new FindResult(doc, -1, true, allWrapped);", "+      if (_isForward) {", "+        newLen = start;", "+        newStart = 0;", "+      }", "+      else {", "+        newStart = len;", "+        newLen = doc.getLength() - len;", "+      }", "+//      System.err.println(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "+//                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);", "+      return _findNextInDocSegment(doc, newStart, newLen, true, allWrapped);", "+    }", "+    finally { doc.readUnlock(); }", "+  } ", "-   */", "-  private int _findWrapped(int start, int end) {", "-    int foundOffset = -1;", "-    try{", "-      boolean stillSearching = true;", "-      while(stillSearching) {", "-        stillSearching = false;", "-        _wrapped = true;", "-        int docLen;", "-        String findSpace;", "-        _doc.acquireReadLock();  ", "-        try { ", "-          docLen = _doc.getLength(); ", "-          if (!_searchBackwards) {", "-            if (end > docLen) end = docLen;", "-          }", "-          ", "-          else {  // searching backwards", "-            if (start < 0){ ", "-              start = 0;", "-              end = docLen;", "-            }", "-          }", "-          findSpace = _doc.getText(start, end);", "-        }", "-        finally { _doc.releaseReadLock(); }", "-        String findWord = _findWord;", "-        ", "-        if (!_matchCase) {", "-          findSpace = findSpace.toLowerCase();", "-          findWord = findWord.toLowerCase();", "-        }", "-        ", "-        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-          : findSpace.lastIndexOf(findWord);", "-        ", "-        if (foundOffset >= 0) {", "-          int locationToIgnore = start + foundOffset;", "-          _model.getODDForDocument(_doc).setCurrentLocation(locationToIgnore);", "-          if (_shouldIgnore(locationToIgnore, _doc)) {", "-            foundOffset += start;", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-              start = foundOffset;", "-              end = docLen-foundOffset;", "-              stillSearching = true;", "-              continue;", "-              // return _findWrapped(foundOffset, docLen-foundOffset);", "-            }", "-            end = foundOffset-start;", "-            stillSearching = true;", "-            continue;", "-            // return _findWrapped(start, foundOffset-start);", "-          }       ", "-          // otherwise we have found it", "-//        _found = true;", "-          foundOffset += start;", "-          if (!_searchBackwards) foundOffset += findWord.length();", "-          _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc", "-        }", "-    return foundOffset;"]}], "num": 13573}
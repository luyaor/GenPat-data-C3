{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bf74e022951077a3a91390c96ddd451", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c1d92a9a331d4cd69be8b763d6b6761", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "commitAfterChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 80, "signatureBeforeChange": "     public void startCompile() throws IOException", "signatureAfterChange": "      public void startCompile() throws IOException", "diff": ["-     */", "-      synchronized(_compilerLock) {", "-        // Only compile if all are saved", "-        if (hasModifiedDocuments()) {", "-          _notifier.saveBeforeCompile();", "-        }", "-", "-        if (hasModifiedDocuments()) {", "-          // if any files haven't been saved after we told our", "-          // listeners to do so, don't proceed with the rest", "-          // of the compile.", "-        }", "-        else {", "-          try {", "-            File file = _doc.getFile();", "-            File[] files = new File[] { file };", "-", "-            try {", "-              _notifier.compileStarted();", "-", "-              File[] sourceRoots = new File[] { getSourceRoot() };", "-", "-              _compileFiles(sourceRoots, files);", "-            }", "-            catch (Throwable e) {", "-              CompilerError err = new CompilerError(file, -1, -1, e.getMessage(), false);", "-              CompilerError[] errors = new CompilerError[] { err };", "-              _distributeErrors(errors);", "-            }", "-            finally {", "-              // Fire a compileEnded event", "-              _notifier.compileEnded();", "-", "-              // Only clear interactions if there were no errors", "-              if (_numErrors == 0 && _interactionsModel.interpreterUsed()) {", "-//                  && _resetAfterCompile) {", "-                resetInteractions();", "-              }", "-            }", "-          }", "-          catch (IllegalStateException ise) {", "-            // No file exists, don't try to compile", "-          }", "-        }", "-      }", "+      _compilerModel.compile(DefinitionsDocumentHandler.this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b68b5501936519fef8754a8a7ee42e91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorPanel.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 40, "signatureBeforeChange": "     void switchToError(CompilerError error)", "signatureAfterChange": "     void switchToError(CompilerError error)", "diff": ["-     ", "-", "-       ", "+      ", "+      ", "+      ", "-          ", "+//          Utilities.showDebug(\"The position of the error is: \" + pos);", "-//        Utilities.showDebug(\"active document being set to \" + doc + \" in ErrorPanel.switchToError\");", "+//          Utilities.showDebug(\"active document being set to \" + doc + \" in ErrorPanel.switchToError\");", "+          ", "-//        Utilities.showDebug(\"setting active document has completed\");", "+          ", "+//          Utilities.showDebug(\"setting active document has completed\");", "+          ", "+          ", "-            if (errPos >= 0 && errPos <= doc.getLength()) defPane.centerViewOnOffset(errPos);", "+            if (errPos >= 0 && errPos <= doc.getLength()) {", "+              defPane.centerViewOnOffset(errPos);", "+              ", "+              /* The folowing fixes a bug where, if two consecutive errors are in the same position, the previous error", "+               * is unhighlighted and the new error is not highlighted because the CaretListener does not act because there", "+               * is no change in caret position. (This is the only place where updateHighlight was called from before) */", "+              defPane.getErrorCaretListener().updateHighlight(errPos);", "+            }", "+            ", "-          _frame._switchDefScrollPane(); // resets an out-of-kilter DefinitionsPane on the first error after a compilation", "+//          _frame._switchDefScrollPane(); // resets an out-of-kilter DefinitionsPane on the first error after a compilation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f075f5acd60cbdfb892f11ec70a2df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "signatureAfterChange": "   public void compile(OpenDefinitionsDocument doc) throws IOException", "diff": ["-    try {", "-      File file = doc.getFile();", "-      File[] files = new File[] { file };", "-      ", "-      try {", "-        _notifier.compileStarted();", "-        File[] sourceRoots = new File[] { doc.getSourceRoot() };", "-        _compileFiles(sourceRoots, files, buildDir);", "-      }", "-      catch (Throwable e) {", "-        CompilerError err = new CompilerError(file, -1, -1, e.getMessage(), false);", "-        CompilerError[] errors = new CompilerError[] { err };", "-        _distributeErrors(errors);", "-      }", "-      finally {", "-        // Fire a compileEnded event", "-        _notifier.compileEnded();", "-      }", "-    }", "-    catch (IllegalStateException ise) {", "-      // No file exists, don't try to compile", "-    }", "+    File[] files = { doc.getFile() };  ", "+    // throws a FileMovedException if file has moved, which is preferable to the InvalidPackageException produced", "+    // by getSourceRoot for the same circumstances", "+     ", "+    _rawCompile(new File[] { doc.getSourceRoot() }, files, buildDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f842dae849b8b32e03f244bfc5fdf83b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "24e790b85d3a1a29de15955ca1ba9200a6865f83", "commitAfterChange": "4ceb386773fd5eb837ddcd34820c563b6c3c20cb", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 63, "signatureBeforeChange": "   public void javadocAll(String destDir)     throws IOException, JavadocException, InvalidPackageException", "signatureAfterChange": "   public boolean javadocAll(String destDir) throws IOException, InvalidPackageException", "diff": ["-  public void javadocAll(String destDir)", "-    throws IOException, JavadocException, InvalidPackageException {", "-", "+  public boolean javadocAll(String destDir) throws IOException, InvalidPackageException {", "+    ", "+    // Notify all listeners that Javadoc is starting.", "+    this.javadocStarted();", "+    ", "+    if (areAnyModifiedSinceSave()) {", "+      // if any files haven't been saved after we told our", "+      // listeners to do so, don't proceed with the rest", "+      // of the operation.", "+      return false;", "+    }", "+    ", "-        File sourceRoot = doc.getSourceRoot();", "+        // This call will abort the iteration if there is no file.", "+        File sourceRoot = doc.getSourceRoot();", "-            // TO DO: write a unit test for a package name w/ no dot!", "+            // TODO: write a unit test for a package name w/ no dot!", "+    }", "+    ", "+    // Don't attempt to create Javadoc if no files are open, or if open file is unnamed.", "+    if (docUnits.size() == 0) { ", "+      return false;", "-    ", "-    System.out.println(\"javadoc started with args:\\n\" + args);", "-    javadoc_1_3((String[]) args.toArray(new String[0]));", "+    boolean result;", "+    try {", "+      result = javadoc_1_3((String[]) args.toArray(new String[0]));", "+    }", "+    catch (Throwable e) {", "+      throw new UnexpectedException(e);", "+    }", "+    finally {", "+      // Notify all listeners that Javadoc is done.", "+      this.javadocEnded();", "+    }", "+    return result;", "+  }"]}], "num": 29106}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "761f4ce1db78b69ef125e13840165586", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e18716b37883e3e1b63f8fce3c0b10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/tuple/Option.java", "commitBeforeChange": "e490c351e810c170e9a54bc18f1c5b2e0028d6c4", "commitAfterChange": "13af1d4637272a2bca0732db4100c8afaf72a24e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static <T> T unwrap(Option<T> opt)", "signatureAfterChange": "   public abstract T unwrap() throws OptionUnwrapException;", "diff": ["+   */", "+  public abstract T unwrap() throws OptionUnwrapException;", "-   */", "-  public static <T> T unwrap(Option<T> opt) {", "-    if (opt instanceof Wrapper<?>) { return ((Wrapper<T>)opt).value(); }", "-    else { throw new IllegalArgumentException(\"Cannot unwrap a none option\"); }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d81e240401dd4f4189f902d345314dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/tuple/Option.java", "commitBeforeChange": "e490c351e810c170e9a54bc18f1c5b2e0028d6c4", "commitAfterChange": "13af1d4637272a2bca0732db4100c8afaf72a24e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static <T> T unwrap(Option<T> opt, T forNone)", "signatureAfterChange": "   public abstract T unwrap(T forNone);", "diff": ["+  /** Get the value wrapped by this Option, or {@code forNone} if there is no wrapped value. */", "+  public abstract T unwrap(T forNone);", "-   */", "-  public static <T> T unwrap(Option<T> opt, T forNone) {", "-    if (opt instanceof Wrapper<?>) { return ((Wrapper<T>)opt).value(); }", "-    else { return forNone; }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f35b28aa0dbd1299a98af8121a20550a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/generic/TypeParameter.java", "commitBeforeChange": "5b5f2904835c915b37abb6c152c5288911830c19", "commitAfterChange": "5b5070cb6e562c6e3dd5fb5f31e00061b061c439", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public <T> T acceptVisitor(Visitor<T> visitor)", "signatureAfterChange": "      public <T> T acceptVisitor(GenericVisitor<T> visitor)", "diff": ["-  public <T> T acceptVisitor(Visitor<T> visitor) {", "-    if(visitor instanceof GenericVisitor<T>){", "-      // did static method overloading resolution not work?!", "-      return acceptVisitor((GenericVisitor<T>)visitor);", "-    }", "-    else {", "-      throw new IllegalArgumentException(\"*Generic* AST nodes should be visited only by *generic* visitors\");", "-    }", "-  } "]}], "num": 18760}
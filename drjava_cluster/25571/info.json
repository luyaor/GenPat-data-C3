{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33287e28a0232de5b397bb0429ad700e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f2eb19739b59af2f55290961d80a5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "6595282fd67e77d6079df1ee1647ba51751bbcec", "commitAfterChange": "de0f38d123822794b2970bd8e5814e75677feb46", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "signatureAfterChange": "   final public ReferenceType ReferenceTypeName() throws ParseException", "diff": ["-    List<Type> typeArgs = null;", "+    List<Type> typeArgs = new LinkedList<Type>();", "+    List<List<? extends Type>> allTypeArgs = new LinkedList<List<? extends Type>>();", "+      allTypeArgs.add( typeArgs );", "+      typeArgs = new LinkedList<Type>();", "+      allTypeArgs.add( typeArgs );", "+      typeArgs = new LinkedList<Type>();", "-      if(typeArgs == null){", "+      boolean Parameterized = false;", "+      for( int i = 0; i < allTypeArgs.size(); i++ ){", "+        List<? extends Type> targs = allTypeArgs.get(i);", "+        if(targs.size() > 0) {", "+          Parameterized = true;", "+          break;", "+        }", "+      }", "+      if(!Parameterized){", "-                                        typeArgs);}", "+                                        allTypeArgs);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f82ddf5440c29417ce37ef3c714dc3e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "ea5caceb61fece070d7111a62941070cf2982769", "commitAfterChange": "997d67839eca4386dbc5f66cebcd8a080dee4cfc", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "   private int _highlightKeywords(Vector<HighlightStatus> v, int i)", "signatureAfterChange": "   private int _highlightKeywords(Vector<HighlightStatus> v, int i)", "diff": ["+    boolean process = false;", "+    int state = 0;", "-      if (_keywords.contains(token)) {", "+", "+      //first check to see if we need highlighting", "+      process = false;", "+      if (_isType(token)) {", "+        //right now keywords incl prim types, so must put this first", "+        state = HighlightStatus.TYPE;", "+        process = true;", "+      } else if (_keywords.contains(token)) {", "+        state = HighlightStatus.KEYWORD;", "+        process = true;", "+      } else if (_isNum(token)) {", "+        state = HighlightStatus.NUMBER;", "+        process = true;", "+      }", "+", "+      if (process) {", "-                                              HighlightStatus.KEYWORD),", "+                                              state),", "+    }"]}], "num": 25571}
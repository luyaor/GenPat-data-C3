{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b32fb10150201da55b9a3d4de40d0e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca693a9c45acf041d940f21bbcb70c34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "             public void testForComplexMethodInvocation()", "signatureAfterChange": "               public void testForComplexMethodInvocation()", "diff": ["-  ", "+    ", "-      MethodInvocation staticNoArgs = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation noArgs = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation oneIntArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "-      MethodInvocation staticOneDoubleArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-      MethodInvocation oneDoubleArg = new ComplexMethodInvocation(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "-", "+      MethodInvocation staticNoArgs = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation noArgs = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "+      MethodInvocation oneIntArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] { ", "+        new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "+      MethodInvocation staticOneDoubleArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"giraffe\")),", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      MethodInvocation oneDoubleArg = ", "+        new ComplexMethodInvocation(SourceInfo.NO_INFO, ", "+                                    new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"g\")), ", "+                                    new Word(SourceInfo.NO_INFO, \"myName\"), ", "+                                    new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {", "+        new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      ", "-", "+      ", "-            ", "-      //if method is in class, should work fine!", "+      ", "+      // if method is in class, should work fine!", "-      //should be able to reference a static method from instance context", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      // should be able to reference a static method from instance context", "+      MethodData doubleArg = ", "+        new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, ", "+                       new VariableData[] { new VariableData(SymbolData.DOUBLE_TYPE) }, ", "+                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "-      //should be able to reference a static method from static context", "+      // should be able to reference a static method from static context", "-      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), staticOneDoubleArg.visit(_etc));", "+      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   staticOneDoubleArg.visit(_etc));", "-      //should not be able to reference a non-static method from a static context", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), staticNoArgs.visit(_etc));", "+      // should not be able to reference a non-static method from a static context", "+      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(),", "+                   staticNoArgs.visit(_etc));", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "-                           ", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot access the non-static method myName from a static context\", ", "+                   errors.getLast().getFirst());", "+      ", "-      //if in context of static method, should not be able to reference non-static method", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "+      // if in context of static method, should be able to reference non-static method given a receiver", "+      MethodData intArg = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, ", "+                       new VariableData[] { new VariableData(SymbolData.INT_TYPE)}, ", "+                       new String[0], g, new NullLiteral(SourceInfo.NO_INFO));", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), oneIntArg.visit(_etc).getName());", "-      assertEquals(\"Should be 3 errors\", 3, errors.size());", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "-", "-      //if enclosing class is private, should not work!", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData().getName(), ", "+                   oneIntArg.visit(_etc).getName());", "+      assertEquals(\"Should be 2 errors\", 2, errors.size());", "+//      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+      ", "+      // if enclosing class is private, should not work!", "-      assertEquals(\"Should be 4 errors\", 4, errors.size());", "+      assertEquals(\"Should be 3 errors\", 3, errors.size());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec50b4ddf41981337211d015289951aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "          public void testMethodInvocationHelper()", "signatureAfterChange": "          public void testMethodInvocationHelper()", "diff": ["-      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]));", "-      MethodInvocation typeArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"int\"))}));", "-      MethodInvocation oneIntArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new IntegerLiteral(SourceInfo.NO_INFO, 5)}));", "-      MethodInvocation oneDoubleArg = new SimpleMethodInvocation(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"myName\"), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[]{new DoubleLiteral(SourceInfo.NO_INFO, 4.2)}));", "+      ParenthesizedExpressionList exp1 = new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[0]);", "+      MethodInvocation noArgs = new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp1);", "+      ParenthesizedExpressionList exp2 = ", "+        new ParenthesizedExpressionList(SourceInfo.NONE, ", "+                                        new Expression[]{new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                 new Word(SourceInfo.NONE, \"int\"))});", "+      MethodInvocation typeArg = new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp2);", "+      ParenthesizedExpressionList exp3 =", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new IntegerLiteral(SourceInfo.NONE, 5)});", "+      MethodInvocation oneIntArg =", "+        new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp3);", "+      ParenthesizedExpressionList exp4 =", "+        new ParenthesizedExpressionList(SourceInfo.NONE, new Expression[]{new DoubleLiteral(SourceInfo.NONE, 4.2)});", "+      MethodInvocation oneDoubleArg = ", "+        new SimpleMethodInvocation(SourceInfo.NONE, new Word(SourceInfo.NONE, \"myName\"), exp4);", "-                       new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "+                       new String[0], _sd2, NULL_LITERAL);", "-      assertEquals(\"Should return boolean instance\", SymbolData.BOOLEAN_TYPE.getInstanceData(), _etc.methodInvocationHelper(noArgs, _sd2.getInstanceData()));", "+      assertEquals(\"Should return boolean instance\", ", "+                   SymbolData.BOOLEAN_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(noArgs, _sd2.getInstanceData()));", "-      assertEquals(\"Error message should be correct\", \"No method found in class \" + _sd2.getName() + \" with signature: myName(int).\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", \"No method found in class \" + _sd2.getName() ", "+                     + \" with signature: myName(int).\", ", "+                   errors.getLast().getFirst());", "-      //if matching method, but arg is not instance type, give error", "-      MethodData intArg = new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "+      // if matching method, but arg is not instance type, give error", "+      MethodData intArg = ", "+        new MethodData(\"myName\", _publicMav, new TypeParameter[0], SymbolData.LONG_TYPE, ", "+                       new VariableData[] {new VariableData(SymbolData.INT_TYPE)}, new String[0], _sd2, NULL_LITERAL);", "-      //if matching method, no error", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), _etc.methodInvocationHelper(oneIntArg, _sd2.getInstanceData()));", "+      // if matching method, no error", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(oneIntArg, _sd2.getInstanceData()));", "-      ", "-      //non-static method from static context gives error", "-      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), _etc.methodInvocationHelper(oneIntArg, _sd2));", "+      // non-static method from static context gives error", "+      assertEquals(\"Should return long instance\", SymbolData.LONG_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(oneIntArg, _sd2));", "-      assertEquals(\"Error message should be correct\", \"Cannot access the non-static method myName from a static context\", errors.getLast().getFirst());", "+      assertEquals(\"Error message should be correct\", ", "+                   \"Cannot access the non-static method myName from a static context\", ", "+                   errors.getLast().getFirst());", "-      MethodData doubleArg = new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, new NullLiteral(SourceInfo.NO_INFO));", "+      MethodData doubleArg = ", "+        new MethodData(\"myName\", _publicStaticMav, new TypeParameter[0], SymbolData.CHAR_TYPE, ", "+                       new VariableData[] {new VariableData(SymbolData.DOUBLE_TYPE)}, new String[0], _sd2, NULL_LITERAL);", "-      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), _etc.methodInvocationHelper(oneDoubleArg, _sd2));", "+      assertEquals(\"Should return char instance\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   _etc.methodInvocationHelper(oneDoubleArg, _sd2));"]}], "num": 11110}
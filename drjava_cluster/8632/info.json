{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa2fa35bd19fdd5e977f8d39a627c617", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9fb51466d0e8b89a26db4b10976f4c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "5c04353ab7b698c453865873d8b52819717956e7", "commitAfterChange": "30a085f8fe1392fe66c465a0e90bdaac3e7000b4", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   private Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,                                                  Node node, Expression v)", "signatureAfterChange": "   private Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,                                                  Node node, Expression v)", "diff": ["-      else if (rc != null) {", "-        if (TigerUtilities.boxesTo(rc, lc)) { ", "-          return _box(v, lc);", "-        }", "+      else /* lc is not Primitive */", "+        if (rc != null) {", "+          if (rc.isPrimitive() && lc.isAssignableFrom(rc)) return _box(v,_correspondingRefClass(rc));", "+          if (rc.isPrimitive() && TigerUtilities.boxesTo(rc, lc)) return _box(v, lc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffaa933457443bca94614b05e3a41cf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "43a2124ad4386a02628eedfc537948ebb05ea232", "commitAfterChange": "c904ff4d12a1c03698cae74f161e803cd4959a58", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   private Class visitBitwiseExpression(BinaryExpression node)", "signatureAfterChange": "   private Class visitBitwiseExpression(BinaryExpression node)", "diff": ["-    boolean intLeft   = _isIntegralType(lc);", "-    boolean intRight  = _isIntegralType(rc);", "+    boolean intLeft   = TigerUtilities.isIntegralType(lc);", "+    boolean intRight  = TigerUtilities.isIntegralType(rc);", "-    if (_isBoxingType(lc)) {", "+    if (TigerUtilities.isBoxingType(lc)) {", "-    if (_isBoxingType(rc)) {", "+    if (TigerUtilities.isBoxingType(rc)) {"]}], "num": 8632}
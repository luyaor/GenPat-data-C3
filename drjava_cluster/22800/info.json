{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a06282f2f875f5cb78da5e1023ab4986", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dfe4ff2834e89baaf493fe61dfc961f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DocumentDebugAction.java", "commitBeforeChange": "b1b91197c778ee62ce767051b412c31f7bcdddb8", "commitAfterChange": "bb4b98f439d908bb82a053d84050800352efc81c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset)     throws DebugException", "signatureAfterChange": "   public DocumentDebugAction (JPDADebugger manager,                               OpenDefinitionsDocument doc,                               int offset)     throws DebugException", "diff": ["-      // Couldn't find class name, leave as empty string", "-      _className = \"\";", "+      // Couldn't find class name at offset, use the first class name", "+      // found.", "+      try {", "+        _className = doc.getDocument().getQualifiedClassName();", "+      }", "+      catch (ClassNameNotFoundException cnnfe2) {", "+        // Still couldn't find a class name, use \"\"", "+        _className = \"\";", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c531be2e81cb796bfd3f8d0180f5b5f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "6db5aed459adbcc79fd8627688e6f75efa4c495b", "commitAfterChange": "640d94c961319de37237c21816ee469b313568b5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public Node visit(QualifiedName node)", "signatureAfterChange": "   public Node visit(QualifiedName node)", "diff": ["-    // The name must be, or starts with, a class name", "+    //Added to support static field importation", "+    try{", "+      if(context.isFieldImported(t.image())) ", "+        ids = context.getQualifiedName(t.image());        ", "+    }", "+    catch(NoSuchFieldException e) {}", "+    ", "+     // The name must be, or starts with, a class name", "+    ", "+    ", "-    else", "+    else {", "+    }"]}], "num": 22800}
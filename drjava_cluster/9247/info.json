{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0c651b61ab4a318057515e948a89cd4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f49527f3eb3a5b6ff13cbe0e823bf9f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "6f65660ac59d60c67824b69ecafc847d84a92da8", "commitAfterChange": "8279bc33117c74621df6401dedd10a0cae247a2c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-        // Note that both of these calls result in unchecked warnings", "-        // from GJ, since they have lost the parametric typing information.", "-        // The warnings, if you're curious, are:", "-        //", "-        // warning: unchecked call to registerSlave(SlaveType) as a member", "-        // of the raw type edu.rice.cs.util.newjvm.MasterRemote", "-        // warning: unchecked method invocation:", "-        // start(edu.rice.cs.util.newjvm.MasterRemote<SlaveType>) in ", "-        // edu.rice.cs.util.newjvm.SlaveRemote is applied to", "-        // (edu.rice.cs.util.newjvm.MasterRemote)", "+        // start the slave before notifying the master", "-        javax.swing.JOptionPane.showMessageDialog(null, e);", "+        //javax.swing.JOptionPane.showMessageDialog(null, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc3c689ec1a0423a5d216645eaae10e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorCaretListener.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-  ", "-      if (_errorListPane.shouldShowHighlightsInSource()) {", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(shouldSelect);", "-      }", "-      _errorListPane.selectItem(errors[shouldSelect]);", "+      try {", "+        _errorListPane.selectItem(errors[shouldSelect]);", "+        ", "+        if (_errorListPane.shouldShowHighlightsInSource()) {", "+          // No need to move the caret since it's already here!", "+          _highlightErrorInSource(shouldSelect);", "+        }", "+      }", "+      catch (IllegalArgumentException e) {", "+        // A new test could perhaps have started before this listener", "+        //  has been reset, so be prepared if it throws an exception.", "+        //  We'll ignore it here, so nothing gets highlighted.", "+      }"]}], "num": 9247}
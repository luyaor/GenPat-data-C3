{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "159e6b384db6ceb2316a8542f44b6708", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c9b4ac84fc69838774d9607c36b1ba8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "commitAfterChange": "c0ad820565377d42d023afeab71166682f497054", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-    List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree", "+    final List<OpenDefinitionsDocument> projDocs = getProjectDocuments();  // opened documents in the project source tree", "-    for (OpenDefinitionsDocument d: projDocs) {", "-      if (d.isProjectFile()) closeFile(d);", "-      else {", "-        try {", "-          final INavigatorItem idoc = d;", "-          final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "-          Utilities.invokeAndWait(new Runnable() { ", "-            public void run() { _documentNavigator.refreshDocument(idoc, path); }", "-          });", "-        }", "-        catch(IOException e) { ", "-          /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        for (OpenDefinitionsDocument d: projDocs) {", "+          if (d.isProjectFile()) closeFile(d);", "+          else {", "+            try {", "+              final INavigatorItem idoc = d;", "+              final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+              _documentNavigator.refreshDocument(idoc, path);  // this operation must run in event thread", "+            }", "+            catch(IOException e) { ", "+              /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+            }", "+          }", "-    }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcff77a50f8504630e9ba9138c2e34fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fee21edb1b15f1499b5409a250cdb90d3f204739", "commitAfterChange": "e100da4da75b9cbdfc04df45bf52679ed811f23a", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 179, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["+    edu.rice.cs.util.Log LOG = new edu.rice.cs.util.Log(\"docs.txt\",true);", "-      if (f.isActive()) active = f;", "-      else projFiles.add(f);  // add to projFiles unless active", "-      if(f.isActive()) active = f;", "+      if (f.isActive()) { active = f; }", "+      projFiles.add(f);", "-      if (f.isActive()) active = f;", "-      else projFiles.add(f);  // add to projFiles unless active", "+      if (f.isActive()) { active = f; }", "+      projFiles.add(f);", "-    ", "-    // Insert active file as last file on list.", "-    if (active != null) projFiles.add(active);   ", "-//    //Set active document from project file", "-//    if(active != null) { //TEMP", "-//      setActiveDocument(projDocs.get(projDocs.size() - 1));", "-//    }", "-//    OpenDefinitionsDocument.getCanonicalPath()", "-////  Search for active document within opendefdocs", "-//    Utilities.show(\"Setting Active Document...\");", "-//    if(active != null) {", "-//      String path = projFiles.get(projFiles.size() - 1).getCanonicalPath();", "-//      Utilities.show(\"Active document path: \" + path);", "-//      for(OpenDefinitionsDocument doc: projDocs) {", "-//        Utilities.show(\"Searching path: \" + doc.getCanonicalPath());", "-//        if(doc.getCanonicalPath().compareTo(path) == 0) {", "-//          setActiveDocument(doc);", "-//          Utilities.show(\"New active document set\");", "-//          break;", "-//        }", "-//      }", "-//    }", "+    //Set active document from project file", "+    if(active != null) {", "+      setActiveDocument(getDocumentForFile(active));", "+    }", "-    ", "-    if(_state.getAutoRefreshStatus()) { openNewFilesInProject(); }", "+    // perform a project auto-refresh if specified", "+    if(_state.getAutoRefreshStatus()) { autoRefreshProject(); }", "+  }"]}], "num": 7724}
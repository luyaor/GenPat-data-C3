{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d632f27b9a8a15c0a99c8d28d008f811", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a17360e40f525df6a45099faf59ab7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JavadocFrame.java", "commitBeforeChange": "ba6275930e25f1b0898c45319a21c16860b3e177", "commitAfterChange": "1bd0fb2319802a0180bca30c066879626028c532", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private static String introPagePath(File destDir)", "signatureAfterChange": "      private static String introPagePath(File destDir, String curClass)", "diff": ["-  private static String introPagePath(File destDir) {", "+  private static String introPagePath(File destDir, String curClass) {", "-    File test = new File(destDir, INTRO_PAGE[0]);", "-    int i = 0;", "+    File test = new File(destDir, curClass + \".html\");", "+    int i = -1;", "+    ", "+    // Packages.html might just be a pointer to another file", "+    if (test.getName().equals(\"packages.html\")) {", "+      test = _parsePackagesFile(test, destDir);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0136b15c4a8011a5f68fefc8eda4603", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewJavaClassDialog.java", "commitBeforeChange": "6207c0d4b83ee23d6d4624c513f270e47c43cc83", "commitAfterChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public static String createClassContent(String accessMod, String modifier, String className,                                            boolean mainMethod, boolean classConstructor, String inheritance,                                            String interfaces)", "signatureAfterChange": "      public static String getClassContent(String accessMod, String modifier, String className,                                         boolean mainMethod, boolean classConstructor, String inheritance,                                         String interfaces,                                        boolean elementaryOrFunctionalJava)", "diff": ["-  public static String createClassContent(String accessMod, String modifier, String className, ", "-                                          boolean mainMethod, boolean classConstructor, String inheritance, ", "-                                          String interfaces){", "+  public static String getClassContent(String accessMod, String modifier, String className, ", "+                                       boolean mainMethod, boolean classConstructor, String inheritance, ", "+                                       String interfaces,", "+                                       boolean elementaryOrFunctionalJava) {", "-    sb.append(\"* Auto Generated Java Class.\\n\");", "+    if (elementaryOrFunctionalJava) {", "+      sb.append(\"* Auto Generated Java Language Level Class.\\n\");", "+    }", "+    else {", "+      sb.append(\"* Auto Generated Java Class.\\n\");", "+    }", "-    sb.append(createClassNameDecleration(accessMod, modifier, className, inheritance, interfaces));", "+    sb.append(getClassDeclaration(accessMod, modifier, className, inheritance, interfaces,", "+                                  elementaryOrFunctionalJava));", "-    if(classConstructor) {", "-      sb.append(\"public \" + capitalizeClassName(className) + \"() { \\n\");", "+    if(classConstructor && !elementaryOrFunctionalJava) {", "+      sb.append(\"public \" + getCapitalizedClassName(className) + \"() { \\n\");", "-    if(mainMethod) {", "+    if(mainMethod && !elementaryOrFunctionalJava) {"]}], "num": 31254}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0a7414a2513887cc886eec63931f58e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ac42cd6598560b8b157de6e69d4eac3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "762f9487498790edfa8d7b58c3d83cb6592af447", "commitAfterChange": "1ea7874872b93b44444c8711a298524cf05a221e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void _setupKeyBindingsPanel( ConfigPanel panel)", "signatureAfterChange": "   private void _setupKeyBindingsPanel( ConfigPanel panel)", "diff": ["-  private void _setupKeyBindingsPanel( ConfigPanel panel) {", "-     ", "+  private void _setupKeyBindingsPanel( ConfigPanel panel) {     ", "+    TreeSet _comps = new TreeSet();", "+", "+    ", "+    KeyStrokeData tmpKsd;", "+    KeyStrokeOptionComponent tmpKsoc;", "+    ", "+    Enumeration e = KeyBindingManager.Singleton.getKeyStrokeData();", "+    while (e.hasMoreElements()) {", "+      tmpKsd = (KeyStrokeData) e.nextElement();", "+      if (tmpKsd.getOption() != null) {", "+        tmpKsoc = new KeyStrokeOptionComponent((KeyStrokeOption)tmpKsd.getOption(),", "+                                               tmpKsd.getName(), this);", "+        if (tmpKsoc != null) { ", "+          _comps.add(tmpKsoc);", "+        }", "+      }", "+    }", "+    ((KeyStrokeConfigPanel)panel).setKeyStrokeComponents(_comps);", "+", "+    ", "+    Iterator iter = _comps.iterator();", "+    while (iter.hasNext()) {", "+      KeyStrokeOptionComponent x = (KeyStrokeOptionComponent) iter.next();", "+      panel.addComponent(x);", "+    }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a3ec2dcb380e877902f94fc053a5a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 233, "signatureBeforeChange": "           @Override public boolean overrides(FunctionInvocationCandidate<MethodInvocation> c)", "signatureAfterChange": "      public ObjectMethodInvocation lookupMethod(final Expression object, String name,                                               final Iterable<? extends Type> typeArgs,                                               final Iterable<? extends Expression> args,                                              final Option<Type> expected)       throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-          public MethodInvocation invocation() { throw new UnsupportedOperationException(); }", "-          @Override public boolean overrides(FunctionInvocationCandidate<MethodInvocation> c) { return false; }", "+    Type t = NodeProperties.getType(object);", "+    FunctionInvocationCandidate<DJMethod> result =", "+        new MethodFinder(name, false).findSingleMethod(t, typeArgs, args, expected);", "+    DJMethod m = result.function();", "+    SubstitutionMap sigma = result.substitution();", "+    // TODO: Is there any reason to invoke makeCast on the receiver?", "+    return new ObjectMethodInvocation(m, substitute(m.returnType(), sigma), object, result.typeArguments(),", "+                                      result.arguments(), substitute(m.thrownTypes(), sigma));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489cddea489c15f4dde5f305ff6e611c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "diff": ["+        ", "+        // A hack to allow declarations without types: (TODO: fix this)", "+        if (n instanceof SimpleAssignExpression) {", "+          SimpleAssignExpression assign = (SimpleAssignExpression) n;", "+          if (assign.getLeftExpression() instanceof AmbiguousName) {", "+            AmbiguousName ambigName = (AmbiguousName) assign.getLeftExpression();", "+            if (ambigName.getIdentifiers().size() == 1) {", "+              String name = ambigName.getRepresentation();", "+              if (!newContext.variableExists(name, _opt.typeSystem())) {", "+                SourceInfo si = n.getSourceInfo();", "+                n = new VariableDeclaration(false, null, name, assign.getRightExpression(),", "+                                            si.getFilename(), si.getStartLine(), si.getStartColumn(),", "+                                            si.getEndLine(), si.getEndColumn());", "+                assign.setProperty(\"assignmentAsDeclaration\", n);", "+              }", "+            }", "+          }", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c09366b12f2583b0a12fb07bce514ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 67, "signatureBeforeChange": "          private void compare(String context, Node left, Node right)", "signatureAfterChange": "          private void compare(String context, Node left, Node right)", "diff": ["-        if (left instanceof Statement || left instanceof VariableDeclaration || left instanceof Expression) {", "-          if (hasNestedError(left) || hasNestedError(right)) {", "-            _log.statementWithError(context, left, right);", "+        if ((left instanceof Statement && !(left instanceof BlockStatement)) ||", "+             left instanceof VariableDeclaration ||", "+             left instanceof FieldDeclaration ||", "+             left instanceof Expression) {", "+          if (hasNestedError(left)) {", "+            if (hasNestedError(right)) { _log.commonErrorStatement(context, left, right); }", "+            else { _log.leftErrorStatement(context, left, right); }", "+            return;", "+          }", "+          else if (hasNestedError(right)) {", "+            _log.rightErrorStatement(context, left, right);", "+          }", "+          else if (left instanceof MethodDeclaration && !IterUtil.isEmpty(m.typeParameters())) {", "+            _log.polymorphicDeclaration(context, left, right);", "+            if (left instanceof ConstructorDeclaration) { _log.polymorphicDeclaration(context, left, right); }", "+        }", "+        if (left instanceof HookTypeName) {", "+          HookTypeName t = (HookTypeName) left;", "+          _log.wildcard(context, left, right, t.getUpperBound().isSome(), t.getLowerBound().isSome());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b298be04e4cd6d2ed477aece5e68cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/util/text/SWTDocumentAdapter.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void forceInsertText(int offs, String str, String style)     throws DocumentAdapterException", "signatureAfterChange": "   public synchronized void forceInsertText(final int offs, final String str,                                             final String style)     throws DocumentAdapterException", "diff": ["-  public void forceInsertText(int offs, String str, String style)", "+  public synchronized void forceInsertText(final int offs, final String str, ", "+                                           final String style)", "-    //AttributeSet s = null;", "-    //if (style != null) {", "-    //  s = _styles.get(style);", "-    //}", "-    try {", "-      _pane.replaceTextRange(offs, 0, str);", "+    SWTStyle s = null;", "+    if (style != null) {", "+      s = _styles.get(style);", "-    catch (IllegalArgumentException e) {", "-      throw new DocumentAdapterException(e);", "+    final SWTStyle chosenStyle = s;", "+    ", "+    _editException = null;", "+    _forceInsert = true;", "+", "+    // Do the insert", "+    _pane.getDisplay().syncExec(new Runnable() {", "+      public void run() {", "+        try {", "+          _pane.replaceTextRange(offs, 0, str);", "+          ", "+          // Add the style", "+          if (chosenStyle != null) {", "+            StyleRange range = new StyleRange();", "+            range.start = offs;", "+            range.length = str.length();", "+            range.fontStyle = chosenStyle.getFontStyle();", "+            range.foreground = chosenStyle.getColor();", "+            _pane.setStyleRange(range);", "+          }", "+        }", "+        catch (IllegalArgumentException e) {", "+          _editException = new DocumentAdapterException(e);", "+        }", "+      }", "+    });", "+    _forceInsert = false;", "+    if (_editException != null) {", "+      throw _editException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da7e777370b2a9d29252c5cfcf2988cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "2524a2a1b5a7cc778c8b061339118272829309f0", "commitAfterChange": "ef639a33b339d361cf9175d5e5faf5683af2dec0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset)", "signatureAfterChange": "   public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset)", "diff": ["+    */", "+  public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset) {", "+    /* First try finding the rightmost region on the same line containing the selection. Unnecessary in Java 6.0. */", "+    int lineStart = odd.getLineStartPos(startOffset);", "+    SortedSet<R> tail = getTailSet((R) newDocumentRegion(odd, lineStart, endOffset));", "+    // tail is sorted by <startOffset, endOffset>; tail may be empty", "+    R match = null;", "+    for (R r: tail) {", "+      if (r.getStartOffset() <= startOffset) {", "+        if (r.getEndOffset() >= endOffset) match = r;", "+      }", "+      else break;  // for all remaining r : R (r.getStartOffset() > offset)", "+    }", "+    if (match != null) return match;", "+    /* No match found starting on same line; look for best match starting on preceding lines. */", "+    SortedSet<R> revHead = reverse(getHeadSet((R) newDocumentRegion(odd, lineStart, lineStart))); // linear cost! Ugh!", "+    ", "+    /* Find first match in revHead */", "+    Iterator<R> it = revHead.iterator();  // In Java 6.0, it is computable in constant time from headSet using reverseIterator", "+    ", "+    while (it.hasNext()) {", "+      match = it.next();", "+      if (match.getEndOffset() >= endOffset) break;", "+    if (match == null) return null; // no match found", "+   ", "+    /* Try to improve the match by narrowing endOffset. */", "+    R next;", "+    while (it.hasNext()) { ", "+      next = it.next();", "+      if (next.getStartOffset() < match.getStartOffset()) return match;  // no more improvement possible", "+      assert next.getStartOffset() == match.getStartOffset();", "+      if (next.getEndOffset() >= endOffset) match = next;  // improvement because next precedes match in getRegions(odd)", "-    ", "-    public R getRegionContaining(OpenDefinitionsDocument odd, int startOffset, int endOffset) {", "-      ", "-      int lineStart = odd.getLineStartPos(startOffset);", "-      ", "-      @SuppressWarnings(\"unchecked\")", "-      SortedSet<R> tail = getTailSet((R) newDocumentRegion(odd, lineStart, endOffset));", "-      // tail is sorted by <startOffset, endOffset>; tail may be empty", "-      R match = null;", "-      for (R r: tail) {", "-        if (r.getStartOffset() <= startOffset) {", "-          if (r.getEndOffset() >= endOffset) match = r;", "-        }", "-        else break;  // for all remaining r : R (r.getStartOffset() > offset)", "-      }", "-      return match;  // match is rightmost region in R containing offset", "+    return match;  // last region in revHead was the best match", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f0d5164ef9460d477bde054dbc5a38", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["+            if (hasAnonymous(outerRt)) {", "+              // We don't know the appropriate this$N to look for so we have to", "+              // search for a field that begins with this$.", "+              List fields = outerRt.allFields();", "+              Iterator iter = fields.iterator();", "+              while (iter.hasNext()) {", "+                Field f = (Field)iter.next();", "+                String name = f.name();", "+                if (name.startsWith(\"this$\")) {", "+                  int lastIndex = name.lastIndexOf(\"$\");", "+                  outerIndex = Integer.valueOf(name.substring(lastIndex+1, name.length())).intValue();", "+                  break;", "+                }", "+              }", "+            }", "+            if (field == null) {", "+              // Try concatenating \"val$\" to the beginning of the field in", "+              // case it's a final local variable of the outer class", "+              field = outerRt.fieldByName(\"val$\" + currName);", "+            }", "+            ", "+              if (outer == null) {", "+                // We're probably in the constructor and this$N has", "+                // not yet been initialized. We can't do anything, so just", "+                // break display no value.", "+                break;", "+              }", "-              if (field == null) {", "-                // Enter the loop again with the next outer enclosing class", "-                outerIndex--;", "-                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+              if (field == null) {  ", "+                // Try concatenating \"val$\" to the beginning of the field in", "+                // case it's a final local variable of the outer class", "+                field = outerRt.fieldByName(\"val$\" + currName);", "+                ", "+                if (field == null) {", "+                  // Enter the loop again with the next outer enclosing class", "+                  outerIndex--;", "+                  outerThis = outerRt.fieldByName(\"this$\" + outerIndex);                  ", "+                }"]}], "num": 5652}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6a24c2efa775b74d3c07094ae2c4b03", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5450854b9c4804c6f11abc53e4e4dae9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ConstructorDeclaration.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public ConstructorDeclaration(ModifierSet mods, String name,                                 List<FormalParameter> params, List<? extends ReferenceTypeName> excepts,                                 ConstructorCall eci, List<Node> stmts,                                 SourceInfo si)", "signatureAfterChange": "   public ConstructorDeclaration(ModifierSet mods, String name,                                 List<FormalParameter> params, List<? extends ReferenceTypeName> excepts,                                 ConstructorCall eci, List<Node> stmts,                                 SourceInfo si)", "diff": ["+    this(mods, Option.<List<TypeParameter>>none(), name, params, excepts, eci, stmts, si);", "+  }", "-    if (name == null)    throw new IllegalArgumentException(\"name == null\");", "-    if (params == null)  throw new IllegalArgumentException(\"params == null\");", "-    if (excepts == null) throw new IllegalArgumentException(\"excepts == null\");", "-    if (stmts == null)   throw new IllegalArgumentException(\"stmts == null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63c2c9538ba89dc366f9eecfa4427e5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/HookTypeName.java", "commitBeforeChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "commitAfterChange": "30059ed25163a0d152720ce9c2edb44f030e5f3b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public HookTypeName(ReferenceTypeName type, boolean _supered, String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public HookTypeName(Option<TypeName> up, Option<TypeName> low,                       String fn, int bl, int bc, int el, int ec)", "diff": ["-  public HookTypeName(ReferenceTypeName type, boolean _supered, String fn, int bl, int bc, int el, int ec) {", "-    super(Arrays.asList(new Identifier(\"?\")), fn, bl, bc, el, ec);", "+  public HookTypeName(Option<TypeName> up, Option<TypeName> low,", "+                      String fn, int bl, int bc, int el, int ec) {", "+    super(\"?\");", "-    if (type == null) throw new IllegalArgumentException(\"type == null\");", "-    hookedType = type;", "-    supered = _supered;", "+    if (up == null) throw new IllegalArgumentException(\"up == null\");", "+    if (low == null) throw new IllegalArgumentException(\"low == null\");", "+    upperBound = up;", "+    lowerBound = low;"]}], "num": 9278}
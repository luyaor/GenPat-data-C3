{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d34bd84f07ae2ee338d299fefea398c0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cfb4b593931580254c51a8ae756cf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void testForClassDef()", "signatureAfterChange": "          public void testForClassDef()", "diff": ["-      assertEquals(\"The error message should be correct\", \"SuperSD is an interface and thus cannot appear after the keyword 'extends' here.  Perhaps you meant to say 'implements'?\", errors.get(7).getFirst());", "-      ", "-      ", "+      assertEquals(\"The error message should be correct\", ", "+                   \"SuperSD is an interface and thus cannot appear after the keyword 'extends' here.\" + ", "+                   \"  Perhaps you meant to say 'implements'?\", errors.get(7).getFirst());", "+     ", "-      assertEquals(\"The error message should be correct\", \"Hspia is public thus must be defined in a file with the same name.\", errors.get(8).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"Hspia is public thus must be defined in a file with the same name.\", errors.get(8).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c51694b5428bdef657d2adb4853f4667", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          public void testForAbstractMethodDef()", "signatureAfterChange": "          public void testForAbstractMethodDef()", "diff": ["-      _ibiv._symbolData.setMav(_abstractMav);", "+      _ibiv._enclosing.setMav(_abstractMav);", "+      ", "-      assertTrue(\"The method def should be public\", _ibiv._symbolData.getMethods().get(1).hasModifier(\"public\"));", "+      assertTrue(\"The method def should be public\", _ibiv._enclosing.getMethods().get(1).hasModifier(\"public\"));", "-      assertEquals(\"The error message should be correct\",\"Interface methods cannot be made private.  They must be public.\" , errors.get(1).getFirst());", "+      assertEquals(\"The error message should be correct\",\"Interface methods cannot be private.  They must be public.\" , errors.get(1).getFirst());", "-      assertEquals(\"The error message should be correct\",\"Interface methods cannot be made protected.  They must be public.\" , errors.get(2).getFirst());", "+      assertEquals(\"The error message should be correct\",\"Interface methods cannot be protected.  They must be public.\" , errors.get(2).getFirst());"]}], "num": 5285}
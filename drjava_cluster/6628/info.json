{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b17cfbce8b3c214a1e9eeef62060a163", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "188909faf375d598f3b74d9beffcb65d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/JavaVersionTest.java", "commitBeforeChange": "391e45139a20d29595a89151324a2e220b5d12fb", "commitAfterChange": "b3945c97981b1413d538a04b218b57bbc9b0fda9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void testParseFullVersionSort()", "signatureAfterChange": "    public void testParseFullVersionSort() throws IOException", "diff": ["-  public void testParseFullVersionSort() {", "+  public void testParseFullVersionSort() throws IOException {", "-    FullVersion vMint = parseFullVersion(\"1.6.0_11\",\"mint\",\"mint\");", "+    File mintJDK = File.createTempFile(\"jdk-mint-\",\".tmp\");", "+    mintJDK.delete();", "+    FullVersion vMint = parseFullVersion(\"1.6.0_11\",\"mint\",\"mint\", mintJDK);", "-    FullVersion vOpenJDK = parseFullVersion(\"1.6.0_11\",\"OpenJDK Runtime Environment\",\"Sun Microsystems Inc.\");", "+    File hjJDK = File.createTempFile(\"jdk-hj-\",\".tmp\");", "+    hjJDK.delete();", "+    FullVersion vHJ = parseFullVersion(\"1.6.0_11\",\"hj\",\"hj\", hjJDK);", "+    assertEquals(UNKNOWN, vHJ.vendor());", "+    assertEquals(\"6.0_11\", vHJ.versionString());", "+    File nextGenJDK = File.createTempFile(\"jdk-nextgen-\",\".tmp\");", "+    nextGenJDK.delete();", "+    FullVersion vNextGen = parseFullVersion(\"1.6.0_11\",\"nextgen\",\"nextgen\", nextGenJDK);", "+    assertEquals(UNKNOWN, vNextGen.vendor());", "+    assertEquals(\"6.0_11\", vNextGen.versionString());", "+    FullVersion vOpenJDK = parseFullVersion(\"1.6.0_11\",\"OpenJDK Runtime Environment\",", "+                                            \"Sun Microsystems Inc.\");", "-    FullVersion vApple = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",\"\\\"Apple Computer, Inc.\\\"\");", "+    FullVersion vApple = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",", "+                                          \"\\\"Apple Computer, Inc.\\\"\");", "-    FullVersion vSun = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",\"Sun Microsystems Inc.\");", "+    FullVersion vSun = parseFullVersion(\"1.6.0_11\",\"Java(TM) 2 Runtime Environment, Standard Edition\",", "+                                        \"Sun Microsystems Inc.\");", "+    sorter.add(vHJ);", "+    sorter.add(vNextGen);", "-    Iterable<FullVersion> expected = IterUtil.make(vUnrecognized, vMint, vOpenJDK, vApple, vSun);", "+    // alphabetically ordered by file: jdk-hj... < jdk-mint... < jdk-nextgen...", "+    Iterable<FullVersion> expected = IterUtil.make(vUnrecognized, vHJ, vMint, vNextGen, vOpenJDK, vApple, vSun);", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75fc5480899e7c7f0d10ecd68034d8f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelIOTest.java", "commitBeforeChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "commitAfterChange": "0b53b816728d7888dd8424a695754000657f778a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public void testSaveAlreadySaved() throws BadLocationException, IOException", "signatureAfterChange": "   public void testSaveAlreadySaved() throws BadLocationException, IOException", "diff": ["+    //disable file backups, remember original setting", "+    Boolean backupStatus = DrJava.getConfig().getSetting(BACKUP_FILES);", "+    DrJava.getConfig().setSetting(BACKUP_FILES, Boolean.FALSE);", "+    ", "-    // Listener to use on future save", "+    // Listener to use on future saves", "+", "+    File backup = new File(file.getPath() + \"~\");", "+    backup.delete();", "-    ", "+", "-    assertEquals(\"contents of saved file\",", "+    assertEquals(\"contents of saved file 2nd write\",", "+", "+    assertEquals(\"no backup was made\", false, backup.exists());", "+", "+    ", "+    //enable file backups", "+    DrJava.getConfig().setSetting(BACKUP_FILES, Boolean.TRUE);", "+    ", "+    // Muck up the document", "+    changeDocumentText(FOO_TEXT, doc);", "+", "+    // Save over top of the previous file", "+    doc.saveFile(new FileSelector(file));", "+    listener.assertSaveCount(2);", "+    ", "+    assertEquals(\"contents of saved file 3rd write\",", "+                 FOO_TEXT,", "+                 FileOps.readFileAsString(file));", "+    assertEquals(\"contents of backup file 3rd write\",", "+\t\t BAR_TEXT,", "+\t\t FileOps.readFileAsString(backup));", "+", "+    /* Set the config back to the original option */", "+    DrJava.getConfig().setSetting(BACKUP_FILES, backupStatus);"]}], "num": 6628}
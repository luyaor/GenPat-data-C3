{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cd46ed740bdcf4bf3f12506e510801a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0053a9cf2df014bf7ac8de3742f91198", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "7fd25882874ad9a06ac74fda13ef9cc77e52813e", "commitAfterChange": "028b13db63615f9cda7227ddd738bbfc3e1c04ec", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter)", "signatureAfterChange": "   public static String replaceVariables(String str, final PropertyMaps props, final Lambda<String,DrJavaProperty> getter)", "diff": ["-  public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter) {", "+  public static String replaceVariables(String str, final PropertyMaps props, final Lambda<String,DrJavaProperty> getter) {", "-          boolean found = false;", "-          for(String category: props.getCategories()) {", "-            DrJavaProperty p = props.getProperty(category, key);", "-            if (p!=null) {", "-              // found property name", "-              p.resetAttributes();", "-              ", "-              // if we have a list of attributes", "-              try {", "-                if (attrList.length()>0) {", "-                  BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList), '$');", "-                  atok.wordRange(0,255);", "-                  atok.whitespaceRange(0,32); ", "-                  atok.addQuotes(\"\\\"\", \"\\\"\");", "-                  atok.addQuotes(\"${\", \"}\");", "-                  atok.addKeyword(\";\");", "-                  atok.addKeyword(\"=\");", "-                  // LOG.log(\"\\tProcessing AttrList\");", "-                  String n = null;", "-                  while((n=atok.getNextToken())!=null) {", "-                    if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.NORMAL) ||", "-                        n.equals(\";\") || n.equals(\"=\") || n.startsWith(\"\\\"\")) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected name, but was \"+n);", "-                    }", "-                    String name = n;", "-                    // LOG.log(\"\\t\\tname = '\"+name+\"'\");", "-                    n = atok.getNextToken();", "-                    if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\"=\"))) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected =, but was \"+n);", "-                    }", "-                    // LOG.log(\"\\t\\tread '='\");", "-                    n = atok.getNextToken();", "-                    if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.QUOTED) || (!n.startsWith(\"\\\"\"))) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected \\\", but was \"+n);", "-                    }", "-                    String value = \"\";", "-                    if (n.length()>1) {", "-                      value = n.substring(1,n.length()-1);", "-                      // LOG.log(\"\\t\\tvalue = '\"+value+\"'\");", "-                    }", "-                    n = atok.getNextToken();", "-                    if (((n!=null) && ((atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\";\")))) ||", "-                        ((n==null) && (atok.token()!=BalancingStreamTokenizer.Token.END))) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "-                    }", "-                    // LOG.log(\"\\t\\tread ';' or EOF\");", "-                    // processed correctly", "-                    // LOG.log(\"\\t\\treplacing variables in '\"+value+\"'...\");", "-                    String replacedValue = replaceVariables(value, props, getter);", "-                    // LOG.log(\"\\t\\treplaced value is '\"+replacedValue+\"'\");", "-                    ", "-                    p.setAttribute(name, replacedValue);", "-                    ", "-                    if (n==null) { break; }", "+          DrJavaProperty p = props.getProperty(key);", "+          if (p!=null) {", "+            // found property name", "+            p.resetAttributes();", "+            ", "+            // if we have a list of attributes", "+            try {", "+              if (attrList.length()>0) {", "+                BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList), '$');", "+                atok.wordRange(0,255);", "+                atok.whitespaceRange(0,32); ", "+                atok.addQuotes(\"\\\"\", \"\\\"\");", "+                atok.addQuotes(\"${\", \"}\");", "+                atok.addKeyword(\";\");", "+                atok.addKeyword(\"=\");", "+                // LOG.log(\"\\tProcessing AttrList\");", "+                String n = null;", "+                HashMap<String,String> attrs = new HashMap<String,String>();", "+                while((n=atok.getNextToken())!=null) {", "+                  if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.NORMAL) ||", "+                      n.equals(\";\") || n.equals(\"=\") || n.startsWith(\"\\\"\")) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected name, but was \"+n);", "+                  String name = n;", "+                  // LOG.log(\"\\t\\tname = '\"+name+\"'\");", "+                  n = atok.getNextToken();", "+                  if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\"=\"))) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected =, but was \"+n);", "+                  }", "+                  // LOG.log(\"\\t\\tread '='\");", "+                  n = atok.getNextToken();", "+                  if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.QUOTED) || (!n.startsWith(\"\\\"\"))) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected \\\", but was \"+n);", "+                  }", "+                  String value = \"\";", "+                  if (n.length()>1) {", "+                    value = n.substring(1,n.length()-1);", "+                    // LOG.log(\"\\t\\tvalue = '\"+value+\"'\");", "+                  }", "+                  n = atok.getNextToken();", "+                  if (((n!=null) && ((atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\";\")))) ||", "+                      ((n==null) && (atok.token()!=BalancingStreamTokenizer.Token.END))) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "+                  }", "+                  // LOG.log(\"\\t\\tread ';' or EOF\");", "+                  // processed correctly", "+                  // LOG.log(\"\\t\\treplacing variables in '\"+value+\"'...\");", "+                  // String replacedValue = replaceVariables(value, props, getter);", "+                  // LOG.log(\"\\t\\treplaced value is '\"+replacedValue+\"'\");", "+                  attrs.put(name,value);", "+                  // p.setAttribute(name, replacedValue);", "+                  ", "+                  if (n==null) { break; }", "-                // append the value of the property, e.g. /home/user instead of \"${property.name}\"", "-                String finalValue = getter.apply(p);", "-                // LOG.log(\"\\tfinal value: '\"+finalValue+\"'\");", "-                found = true;", "-                sb.append(finalValue);", "-              }              ", "-              catch(IllegalArgumentException e) {", "-                sb.append(\"<-- Error: \"+e.getMessage()+\" -->\");", "+                p.setAttributes(attrs, new Lambda<String,String>() {", "+                  public String apply(String param) {", "+                    return replaceVariables(param, props, getter);", "+                  }", "+                });", "-              if (found) { break; }", "-              continue;", "+              // append the value of the property, e.g. /home/user instead of \"${property.name}\"", "+              String finalValue = getter.apply(p);", "+              // LOG.log(\"\\tfinal value: '\"+finalValue+\"'\");", "+              sb.append(finalValue);", "+            }              ", "+            catch(IllegalArgumentException e) {", "+              sb.append(\"<-- Error: \"+e.getMessage()+\" -->\");", "-            if (found) { break; }", "-          if (!found) {", "+          else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5483748e094db9ac6cda3e3d97695ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 227, "methodNumberAfterChange": 223, "signatureBeforeChange": "      protected Type immediateSupertype(RawClassType t)", "signatureAfterChange": "      protected Type immediateSupertype(RawClassType t)", "diff": ["-    Type result = null;", "-    for (Type sup : t.ofClass().declaredSupertypes()) {", "-      Type erasedSup = erase(sup);", "-      result = (result == null) ? erasedSup : meet(result, erasedSup);", "-    }", "-    if (result == null) result = OBJECT;", "-    return result;", "+    Iterable<Type> erasedSups = IterUtil.map(t.ofClass().declaredSupertypes(), new Lambda<Type, Type>() {", "+      public Type value(Type t) { return t.apply(ERASE); }", "+    });", "+    return meet(IterUtil.compose(OBJECT, erasedSups));"]}], "num": 10721}
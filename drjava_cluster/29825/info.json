{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e9a9cec637d6a96e64ff37a29809735", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354bf22a6b7a78a044e0f86819d06705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public synchronized String getEnclosingTopLevelClassName(int pos) throws     ClassNameNotFoundException", "signatureAfterChange": "   public String getEnclosingTopLevelClassName(int pos) throws     ClassNameNotFoundException", "diff": ["-  public synchronized String getEnclosingTopLevelClassName(int pos) throws", "-    ClassNameNotFoundException", "-  {", "-    throwErrorHuh();", "-    int oldLocation = getCurrentLocation();", "-", "-    try {", "-      setCurrentLocation(pos);", "-", "-      IndentInfo info = getIndentInformation();", "-", "-      // Find top level open brace", "-      int topLevelBracePos = -1;", "-      String braceType = info.braceTypeCurrent;", "-      while (!braceType.equals(IndentInfo.noBrace)) {", "-        if (braceType.equals(IndentInfo.openSquiggly)) {", "-          topLevelBracePos = getCurrentLocation() - info.distToBraceCurrent;", "+  public String getEnclosingTopLevelClassName(int pos) throws", "+    ClassNameNotFoundException {", "+    // throwErrorHuh();", "+    ", "+    synchronized (_reduced) {", "+      int oldLocation = getCurrentLocation();", "+      ", "+      try {", "+        setCurrentLocation(pos);", "+        ", "+        IndentInfo info = getIndentInformation();", "+        ", "+        // Find top level open brace", "+        int topLevelBracePos = -1;", "+        String braceType = info.braceTypeCurrent;", "+        while (!braceType.equals(IndentInfo.noBrace)) {", "+          if (braceType.equals(IndentInfo.openSquiggly)) {", "+            topLevelBracePos = getCurrentLocation() - info.distToBraceCurrent;", "+          }", "+          move(-info.distToBraceCurrent);", "+          info = getIndentInformation();", "+          braceType = info.braceTypeCurrent;", "-        move(-info.distToBraceCurrent);", "-        info = getIndentInformation();", "-        braceType = info.braceTypeCurrent;", "-      }", "-      if (topLevelBracePos == -1) {", "-        // No top level brace was found, so we can't find a top level class name", "+        if (topLevelBracePos == -1) {", "+          // No top level brace was found, so we can't find a top level class name", "+          setCurrentLocation(oldLocation);", "+          throw new ClassNameNotFoundException(\"no top level brace found\");", "+        }", "+        ", "+        char[] delims = {'{', '}', ';'};", "+        int prevDelimPos = findPrevDelimiter(topLevelBracePos, delims);", "+        if (prevDelimPos == ERROR_INDEX) {", "+          // Search from start of doc", "+          prevDelimPos = DOCSTART;", "+        }", "+        else {", "+          prevDelimPos++;", "+        }", "-        throw new ClassNameNotFoundException(\"no top level brace found\");", "+        ", "+        // Parse out the class name", "+        return getNextTopLevelClassName(prevDelimPos, topLevelBracePos);", "-", "-      char[] delims = {'{', '}', ';'};", "-      int prevDelimPos = findPrevDelimiter(topLevelBracePos, delims);", "-      if (prevDelimPos == ERROR_INDEX) {", "-        // Search from start of doc", "-        prevDelimPos = DOCSTART;", "+      catch (BadLocationException ble) {", "+        // All positions here should be legal", "+        throw new UnexpectedException(ble);", "-      else {", "-        prevDelimPos++;", "-      }", "-      setCurrentLocation(oldLocation);", "-", "-      // Parse out the class name", "-      return getNextTopLevelClassName(prevDelimPos, topLevelBracePos);", "-    }", "-    catch (BadLocationException ble) {", "-      // All positions here should be legal", "-      throw new UnexpectedException(ble);", "-    }", "-    finally {", "-      setCurrentLocation(oldLocation);", "+      finally { setCurrentLocation(oldLocation); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e908dd4b03aea69da230f919e092816", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": "      public synchronized void resetReducedModelLocation()", "signatureAfterChange": "      public synchronized void resetReducedModelLocation()", "diff": ["-    throwErrorHuh();", "-    _reduced.resetLocation();", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      _reduced.resetLocation();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b9c98430b40eb239e8d0c726bc9244f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public synchronized int balanceBackward()", "signatureAfterChange": "   public int balanceBackward()", "diff": ["-  public synchronized int balanceBackward() {", "-    throwErrorHuh();", "-    return _reduced.balanceBackward();", "+  public int balanceBackward() {", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      return _reduced.balanceBackward();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678f01f8f4d58af7cdb03a222f5150c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public synchronized ReducedModelState stateAtRelLocation(int dist)", "signatureAfterChange": "      public ReducedModelState stateAtRelLocation(int dist)", "diff": ["-  public synchronized ReducedModelState stateAtRelLocation(int dist){", "-    throwErrorHuh();", "-    return _reduced.moveWalkerGetState(dist);", "+  public ReducedModelState stateAtRelLocation(int dist){", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      return _reduced.moveWalkerGetState(dist);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "701174b8988b3f231e970f2645e0536d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": "      public synchronized ReducedModelState getStateAtCurrent()", "signatureAfterChange": "      public ReducedModelState getStateAtCurrent()", "diff": ["-  public synchronized ReducedModelState getStateAtCurrent(){", "-    throwErrorHuh();", "-    return _reduced.getStateAtCurrent();", "+  public ReducedModelState getStateAtCurrent(){", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      return _reduced.getStateAtCurrent();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "819f651d91c7913dd19ab4453cf7a3ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public void uncommentLines(int selStart, int selEnd)", "signatureAfterChange": "   public void uncommentLines(int selStart, int selEnd)", "diff": ["-    throwErrorHuh();", "-    try {", "-      //int key = _undoManager.startCompoundEdit(); //commented out for FrenchKeyBoardFix", "-      if (selStart == selEnd) {", "-        Position oldCurrentPosition = createPosition(_currentLocation);", "-        _uncommentLine();", "-        //int caretPos = getCaretPosition();", "-        //_doc().setCurrentLocation(caretPos);", "-        setCurrentLocation(oldCurrentPosition.getOffset());", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      try {", "+        //int key = _undoManager.startCompoundEdit(); //commented out for FrenchKeyBoardFix", "+        if (selStart == selEnd) {", "+          Position oldCurrentPosition = createPosition(_currentLocation);", "+          _uncommentLine();", "+          //int caretPos = getCaretPosition();", "+          //_doc().setCurrentLocation(caretPos);", "+          setCurrentLocation(oldCurrentPosition.getOffset());", "+        }", "+        else {", "+          _uncommentBlock(selStart, selEnd);", "+        }", "+        //_undoManager.endCompoundEdit(key); //Commented out for FrenchKeyBoardFix, Replaced with endLastCompoundEdit();", "+        _undoManager.endLastCompoundEdit();", "-      else {", "-        _uncommentBlock(selStart, selEnd);", "+      catch (BadLocationException e) {", "+        throw new UnexpectedException(e);", "-      //_undoManager.endCompoundEdit(key); //Commented out for FrenchKeyBoardFix, Replaced with endLastCompoundEdit();", "-      _undoManager.endLastCompoundEdit();", "-    }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89366cc56dc79bdf746042625ca8b873", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["-    throwErrorHuh();", "-    move(loc - _currentLocation);", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      move(loc - _currentLocation);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a30d82af4821f279534fffb7d41a2fa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public synchronized int balanceForward()", "signatureAfterChange": "   public synchronized int balanceForward()", "diff": ["-    throwErrorHuh();", "-    return _reduced.balanceForward();", "+    // throwErrorHuh();", "+    synchronized (_reduced) {", "+      return _reduced.balanceForward();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d1012628530c9652a9988a286a911a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public synchronized void move(int dist)", "signatureAfterChange": "   public void move(int dist)", "diff": ["-  public synchronized void move(int dist) {", "-    throwErrorHuh();", "+  public void move(int dist) {", "+    // throwErrorHuh();", "-    int newLoc = _currentLocation + dist;", "-    if (newLoc < 0) {", "-      //      throw new RuntimeException(\"location < 0?! oldLoc=\" + _currentLocation + \" dist=\" +", "-      //                                  dist);", "-      throw new IllegalStateException(\"Tried to cursor to a negative location\");", "+    synchronized (_reduced) {", "+      int newLoc = _currentLocation + dist;", "+      if (newLoc < 0) {", "+        //      throw new RuntimeException(\"location < 0?! oldLoc=\" + _currentLocation + \" dist=\" +", "+        //                                  dist);", "+        throw new IllegalStateException(\"Tried to cursor to a negative location\");", "+      }", "+      _currentLocation = newLoc;", "+      _reduced.move(dist);", "-    _currentLocation = newLoc;", "-    _reduced.move(dist);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc6e463711c197f5f928be07626a8322", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private synchronized int _findKeywordAtToplevel(String keyword,                                                   String text,                                                   int textOffset)", "signatureAfterChange": "   private int _findKeywordAtToplevel(String keyword,                                                   String text,                                                   int textOffset)", "diff": ["-  private synchronized int _findKeywordAtToplevel(String keyword,", "+  private int _findKeywordAtToplevel(String keyword,", "-    throwErrorHuh();", "-    int oldLocation = getCurrentLocation();", "-", "-    int index = 0;", "-    boolean done = false;", "-", "-    while (!done) {", "-      index = text.indexOf(keyword, index);", "-      if (index == -1) {  //not found", "-        done = true;", "-        break;", "-      }", "-      else {", "-        //found a match, check quality", "-        setCurrentLocation(textOffset + index);", "-", "-        // check that the keyword is not in a comment and is followed by whitespace", "-        ReducedToken rt = _reduced.currentToken();", "-        int indexPastKeyword = index + keyword.length();", "-        if (indexPastKeyword < text.length()) {", "-          if (rt.getState() == ReducedModelStates.FREE &&", "-              Character.isWhitespace(text.charAt(indexPastKeyword))) {", "-            //if (!_isCommentedOrSpace(index,text)) {", "-            done = true;", "-            if (!posNotInBlock(index)) { //in a paren phrase, gone too far", "-              index = -1;", "+    // throwErrorHuh();", "+    ", "+    synchronized (_reduced) {", "+      int oldLocation = getCurrentLocation();", "+      ", "+      int index = 0;", "+      boolean done = false;", "+      ", "+      while (!done) {", "+        index = text.indexOf(keyword, index);", "+        if (index == -1) {  //not found", "+          done = true;", "+          break;", "+        }", "+        else {", "+          //found a match, check quality", "+          setCurrentLocation(textOffset + index);", "+          ", "+          // check that the keyword is not in a comment and is followed by whitespace", "+          ReducedToken rt = _reduced.currentToken();", "+          int indexPastKeyword = index + keyword.length();", "+          if (indexPastKeyword < text.length()) {", "+            if (rt.getState() == ReducedModelStates.FREE &&", "+                Character.isWhitespace(text.charAt(indexPastKeyword))) {", "+              //if (!_isCommentedOrSpace(index,text)) {", "+              done = true;", "+              if (!posNotInBlock(index)) { //in a paren phrase, gone too far", "+                index = -1;", "+              }", "+            }", "+            else {", "+              index++;  //move past so we can search again", "-            index++;  //move past so we can search again", "+            // No space found past the keyword", "+            index = -1;", "+            done = true;", "-        else {", "-          // No space found past the keyword", "-          index = -1;", "-          done = true;", "-        }", "+      setCurrentLocation(oldLocation);", "+      return index;", "-    setCurrentLocation(oldLocation);", "-    return index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a3bb62ebfcd7f9be44e30beac312fe", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 37, "signatureBeforeChange": "   protected void _storeInCache(String key, Object result)", "signatureAfterChange": "   protected void _storeInCache(String key, Object result)", "diff": ["-    throwErrorHuh();", "-    _cacheInUse = true;", "-    ", "-    // Prevent going over max size", "-    if (_helperCache.size() >= MAX_CACHE_SIZE) {", "-      if (_helperCacheHistory.size() > 0) {", "-        _helperCache.remove( _helperCacheHistory.get(0) );", "-        _helperCacheHistory.remove(0);", "+    // throwErrorHuh();", "+    synchronized (_helperCache) {", "+      ", "+      _cacheInUse = true;", "+      ", "+      // Prevent going over max size", "+      if (_helperCache.size() >= MAX_CACHE_SIZE) {", "+        if (_helperCacheHistory.size() > 0) {", "+          _helperCache.remove( _helperCacheHistory.get(0) );", "+          _helperCacheHistory.remove(0);", "+        }", "+        else {", "+          // Shouldn't happen", "+          throw new RuntimeException(\"Cache larger than cache history!\");", "+        }", "-      else {", "-        // Shouldn't happen", "-        throw new RuntimeException(\"Cache larger than cache history!\");", "+      Object prev = _helperCache.put(key, result);", "+      // Add to history if the insert increased the size of the table", "+      if (prev == null) {", "+        _helperCacheHistory.add(key);", "-    Object prev = _helperCache.put(key, result);", "-    // Add to history if the insert increased the size of the table", "-    if (prev == null) {", "-      _helperCacheHistory.add(key);", "-    }", "-    ", "-    /*", "-     long end = System.currentTimeMillis();", "-     Long start = (Long)_helperCache.get(key+\"|time\");", "-     if (start != null) {", "-     _helperCache.remove(key+\"|time\");", "-     long delay = end - start.longValue();", "-     if (delay > maxHelpDelay) {", "-     maxHelpDelay = delay;", "-     maxKey = key;", "-     //DrJava.consoleOut().println(\"   Longest: \" + maxHelpDelay + \"ms from \" + maxKey +", "-     //                            \", line \" + getCurrentLine());", "-     }", "-     }", "-     else {", "-     DrJava.consoleOut().println(\"  CACHE MISS: \" + key);", "-     }", "-     */", "-  }"]}], "num": 29825}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c74035faa18983b2c280c4fef658bddd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "422cc4a793c8325ea35c2fd9120055a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "          public void testForConstructorDef()", "signatureAfterChange": "          public void testForConstructorDef()", "diff": ["-      ConstructorDef cd = new ConstructorDef(JExprParser.NO_SOURCE_INFO, ", "-                                             new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, ", "+      ConstructorDef cd = new ConstructorDef(SourceInfo.NO_INFO, ", "+                                             new Word(SourceInfo.NO_INFO, \"MyClass\"), _publicMav, ", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                             new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-        new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                            new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                                new Word(JExprParser.NO_SOURCE_INFO, \"i\")), false);", "-      ReferenceType rt = new TypeVariable(JExprParser.NO_SOURCE_INFO, \"MyMadeUpException\");", "-      ConstructorDef cd2 = new ConstructorDef(JExprParser.NO_SOURCE_INFO, ", "-                                              new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, ", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                                new Word(SourceInfo.NO_INFO, \"i\")), false);", "+      ReferenceType rt = new TypeVariable(SourceInfo.NO_INFO, \"MyMadeUpException\");", "+      ConstructorDef cd2 = new ConstructorDef(SourceInfo.NO_INFO, ", "+                                              new Word(SourceInfo.NO_INFO, \"MyClass\"), _publicMav, ", "-                                              new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-        new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                            new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                                                new Word(JExprParser.NO_SOURCE_INFO, \"i\")), false);", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                                                new Word(SourceInfo.NO_INFO, \"i\")), false);", "-      ConstructorDef cd3 = new ConstructorDef(JExprParser.NO_SOURCE_INFO, ", "-                                              new Word(JExprParser.NO_SOURCE_INFO, \"MyClass\"), _publicMav, ", "+      ConstructorDef cd3 = new ConstructorDef(SourceInfo.NO_INFO, ", "+                                              new Word(SourceInfo.NO_INFO, \"MyClass\"), _publicMav, ", "-                                             new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                             new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d02d8abd2993ada8d420cc46795b2db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "      public void testFormalParameters2TypeDatas()", "signatureAfterChange": "      public void testFormalParameters2TypeDatas()", "diff": ["-      PrimitiveType intt = new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\");", "-      FormalParameter param = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, intt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "+      FormalParameter param = ", "+        new FormalParameter(SourceInfo.NO_INFO,", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, ", "+                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      ClassOrInterfaceType stringt = new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"java.lang.String\", new Type[0]);", "-      FormalParameter param2 = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, stringt, new Word(JExprParser.NO_SOURCE_INFO, \"j\")), false);", "+      ClassOrInterfaceType stringt = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.String\", new Type[0]);", "+      FormalParameter param2 =", "+        new FormalParameter(SourceInfo.NO_INFO, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, stringt, ", "+                                                                new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      assertTrue(\"Arrays should be equal\", LanguageLevelVisitor.arrayEquals(result, new TypeData[]{ intData, stringData }));", "+      assertTrue(\"Arrays should be equal\", ", "+                 LanguageLevelVisitor.arrayEquals(result, new TypeData[]{ intData, stringData }));", "+      UninitializedVariableDeclarator vd =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Inner\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"t\"));", "-      FormalParameter param3 = new FormalParameter(JExprParser.NO_SOURCE_INFO, new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO,  new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, \"Inner\", new Type[0]), new Word(JExprParser.NO_SOURCE_INFO, \"t\")), false);", "+      FormalParameter param3 = ", "+        new FormalParameter(SourceInfo.NO_INFO, vd, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d7e2ed0d78dfdcc8699acf5d79afaf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyFullJavaVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "          public void xtestForTryCatchStatement()", "signatureAfterChange": "          public void xtestForTryCatchStatement()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(SourceInfo.NO_INFO, emptyBody);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0]);", "-      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0], b);", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[0]);", "+      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[0], b);", "-      BracedBody errorBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 1), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 2)))});", "-      Block errorBlock = new Block(JExprParser.NO_SOURCE_INFO, errorBody);", "+      BracedBody errorBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new BitwiseOrExpression(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 1), new IntegerLiteral(SourceInfo.NO_INFO, 2)))});", "+      Block errorBlock = new Block(SourceInfo.NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, errorBlock, new CatchBlock[0]);", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, errorBlock, new CatchBlock[0]);", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(JExprParser.NO_SOURCE_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter fp = new FormalParameter(SourceInfo.NO_INFO, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[] {", "-        new CatchBlock(JExprParser.NO_SOURCE_INFO, fp, errorBlock)}, b);", "+      tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {", "+        new CatchBlock(SourceInfo.NO_INFO, fp, errorBlock)}, b);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785d76a1f4481db8d982beffec7cb8e0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "          public void testGetSymbolData()", "signatureAfterChange": "          public void testGetSymbolData()", "diff": ["-      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "-      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"Object\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "-      _btc.getSymbolData(\"koala\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true);", "+      assertEquals(\"Should get _sd3 from the Symboltable.\", _sd3, _btc.getSymbolData(\"zebra\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      assertEquals(\"Should get sd from the Symboltable.\", sd, _btc.getSymbolData(\"Object\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "+      _btc.getSymbolData(\"koala\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "-      _btc.getSymbolData(\"Object\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true);", "+      _btc.getSymbolData(\"Object\", new NullLiteral(SourceInfo.NO_INFO), true, true);", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"Thread\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(JExprParser.NO_SOURCE_INFO), true, true));", "+      assertEquals(\"Should return sdOther\", sdOther, _btc.getSymbolData(\"myClass\", new NullLiteral(SourceInfo.NO_INFO), true, true));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sdInner\", sdInner, _btc.getSymbolData(\"inner\", sdOuter, new NullLiteral(SourceInfo.NO_INFO)));", "-      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "-      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return A.D\", sd4, _btc.getSymbolData(\"A.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return B.D\", sd5, _btc.getSymbolData(\"B.D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return null\", null, _btc.getSymbolData(\"D\", sd3, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return B\", sd2, _btc.getSymbolData(\"B\", sd1, new NullLiteral(SourceInfo.NO_INFO)));", "+      assertEquals(\"Should return C.A\", sd1, _btc.getSymbolData(\"A\", sd5, new NullLiteral(SourceInfo.NO_INFO)));", "-                    new NullLiteral(JExprParser.NO_SOURCE_INFO));", "+                    new NullLiteral(SourceInfo.NO_INFO));", "-      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(JExprParser.NO_SOURCE_INFO)));", "+      assertEquals(\"Should return sd3\", sd3, _btc.getSymbolData(\"C\", md, new NullLiteral(SourceInfo.NO_INFO)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df713f317ef46d9192ad476047e2e41a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyElementaryVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-      VariableDeclaration vdecl = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl = new VariableDeclaration(SourceInfo.NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                               new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                               new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                               new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"boolean\"), ", "-                               new Word (JExprParser.NO_SOURCE_INFO, \"field2\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                               new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                               new Word (SourceInfo.NO_INFO, \"field1\")),", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                               new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "+                               new Word (SourceInfo.NO_INFO, \"field2\"))});", "-      VariableDeclaration vdecl2 = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl2 = new VariableDeclaration(SourceInfo.NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field3\")),", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field3\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field3\")),", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field3\"))});", "-      VariableDeclaration vdecl3 = new VariableDeclaration(JExprParser.NO_SOURCE_INFO,", "+      VariableDeclaration vdecl3 = new VariableDeclaration(SourceInfo.NO_INFO,", "-        new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                            new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                            new Word (JExprParser.NO_SOURCE_INFO, \"field4\"))});", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word (SourceInfo.NO_INFO, \"field4\"))});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9347fc66960f87d7a4c64e5aa89b12b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "          public void testForTryCatchStatement()", "signatureAfterChange": "          public void testForTryCatchStatement()", "diff": ["-      BracedBody emptyBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]);", "-      Block b = new Block(JExprParser.NO_SOURCE_INFO, emptyBody);", "+      BracedBody emptyBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      Block b = new Block(SourceInfo.NO_INFO, emptyBody);", "-      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0]);", "-      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[0], b);", "+      NormalTryCatchStatement ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, b, new CatchBlock[0]);", "+      TryCatchFinallyStatement tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[0], b);", "-      BracedBody errorBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new BitwiseOrExpression(JExprParser.NO_SOURCE_INFO, new SimpleNameReference(JExprParser.NO_SOURCE_INFO, new Word(JExprParser.NO_SOURCE_INFO, \"i\")), new IntegerLiteral(JExprParser.NO_SOURCE_INFO, 10)))});", "-      Block errorBlock = new Block(JExprParser.NO_SOURCE_INFO, errorBody);", "+      BracedBody errorBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new BitwiseOrExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)))});", "+      Block errorBlock = new Block(SourceInfo.NO_INFO, errorBody);", "-      ntcs = new NormalTryCatchStatement(JExprParser.NO_SOURCE_INFO, errorBlock, new CatchBlock[0]);", "+      ntcs = new NormalTryCatchStatement(SourceInfo.NO_INFO, errorBlock, new CatchBlock[0]);", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), new Word(JExprParser.NO_SOURCE_INFO, \"i\"));", "-      FormalParameter fp = new FormalParameter(JExprParser.NO_SOURCE_INFO, uvd, false);", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new PrimitiveType(SourceInfo.NO_INFO, \"int\"), new Word(SourceInfo.NO_INFO, \"i\"));", "+      FormalParameter fp = new FormalParameter(SourceInfo.NO_INFO, uvd, false);", "-      tcfs = new TryCatchFinallyStatement(JExprParser.NO_SOURCE_INFO, b, new CatchBlock[] {", "-        new CatchBlock(JExprParser.NO_SOURCE_INFO, fp, errorBlock)}, b);", "+      tcfs = new TryCatchFinallyStatement(SourceInfo.NO_INFO, b, new CatchBlock[] {", "+        new CatchBlock(SourceInfo.NO_INFO, fp, errorBlock)}, b);"]}], "num": 14007}
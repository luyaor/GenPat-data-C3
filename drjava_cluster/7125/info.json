{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82c30439d39f84790df744ac63a5653b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8db5e387f82bb892283fe363ff3acb72", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r   protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, MethodData[] accessors)", "diff": ["-  /** Helper to writeEquals; writes an equals that handles infinitely-recursive data structures. */\r", "-  protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, MethodData[] accessors) {\r", "-    \r", "-    String listName = sd.createUniqueName(\"__equalsList\");\r", "-    \r", "-    VariableData equalsList = new VariableData(listName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),\r", "-                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),\r", "-                                 true, sd);\r", "-    equalsList.setGenerated(true);\r", "-    sd.addVar(equalsList);\r", "-    \r", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\");\r", "-    if (LanguageLevelConverter.versionSupportsGenerics(_targetVersion))\r", "-      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList<\" + className + \"> \" + listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);\r", "-    else\r", "-      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine + newLine);\r", "-\r", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"public boolean equals(java.lang.Object o) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"if (this == o) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"return true;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if ((o == null) || (! o.getClass().equals(getClass()))) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"return false;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"boolean alreadyTested = false;\" + newLine);\r", "-    if (LanguageLevelConverter.versionSupportsForEach(_targetVersion)) {\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"for (\" + className + \" element : \" + listName + \")\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == element);\" + newLine + newLine);\r", "-    }\r", "-    else {\r", "-      if (LanguageLevelConverter.versionSupportsGenerics(_targetVersion)) {\r", "-        _writeToFileOut(indentString(baseIndent, 3) + \"java.util.Iterator<\" + className + \"> i = \" + listName + \".iterator();\" + newLine);\r", "-      }\r", "-      else {\r", "-        _writeToFileOut(indentString(baseIndent, 3) + \"java.util.Iterator i = \" + listName + \".iterator();\" + newLine);\r", "-      }\r", "-      _writeToFileOut(indentString(baseIndent, 3) + \"while (!alreadyTested && i.hasNext())\" + newLine);\r", "-      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == i.next());\" + newLine + newLine);\r", "-    }\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"if (alreadyTested) { \" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"return true;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + className + \" cast = ((\" + className + \") o);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + listName + \".addLast(cast);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"boolean result;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"try {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"result = \");\r", "-    int variablesCompared = 0;\r", "-    for (int i = 0; i < accessors.length; i++) {\r", "-      if (variablesCompared > 0) {\r", "-        _writeToFileOut(\" && \" + newLine + indentString(baseIndent, 7));\r", "-      }\r", "-      variablesCompared++;\r", "-      \r", "-      String varName = accessors[i].getName() + \"()\";\r", "-      \r", "-      if (LanguageLevelConverter.versionSupportsAutoboxing(_targetVersion) ||\r", "-            ! accessors[i].getReturnType().getSymbolData().isPrimitiveType()) {\r", "-        \r", "-        _writeToFileOut(valueEqualsName + \"(\" + varName + \", cast.\" + varName + \")\");\r", "-      }\r", "-      else {\r", "-        _writeToFileOut(\"(\" + varName + \" == cast.\" + varName + \")\");\r", "-      }\r", "-    }\r", "-  \r", "-    if (variablesCompared == 0)\r", "-      _writeToFileOut(\"true\");\r", "-    \r", "-    _writeToFileOut(\";\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"catch (RuntimeException e) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + listName + \".removeLast();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 5) + \"throw e;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + listName + \".removeLast();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"return result;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);\r", "-  }\r", "+  /** Helper to writeEquals; writes an equals that handles infinitely-recursive data structures. */", "+  protected static void writeSafeEquals(String className, SymbolData sd, int baseIndent, String valueEqualsName, MethodData[] accessors) {", "+    ", "+    String listName = sd.createUniqueName(\"__equalsList\");", "+    ", "+    VariableData equalsList = new VariableData(listName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),", "+                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),", "+                                 true, sd);", "+    equalsList.setGenerated(true);", "+    sd.addVar(equalsList);", "+    ", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\");", "+    if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5))", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList<\" + className + \"> \" + listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);", "+    else", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine + newLine);", "+", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"public boolean equals(java.lang.Object o) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"if (this == o) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"return true;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else if ((o == null) || (! o.getClass().equals(getClass()))) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"return false;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"boolean alreadyTested = false;\" + newLine);", "+    if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5)) {", "+      _writeToFileOut(indentString(baseIndent, 3) + \"for (\" + className + \" element : \" + listName + \")\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == element);\" + newLine + newLine);", "+    }", "+    else {", "+      if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5)) {", "+        _writeToFileOut(indentString(baseIndent, 3) + \"java.util.Iterator<\" + className + \"> i = \" + listName + \".iterator();\" + newLine);", "+      }", "+      else {", "+        _writeToFileOut(indentString(baseIndent, 3) + \"java.util.Iterator i = \" + listName + \".iterator();\" + newLine);", "+      }", "+      _writeToFileOut(indentString(baseIndent, 3) + \"while (!alreadyTested && i.hasNext())\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"alreadyTested = alreadyTested || (o == i.next());\" + newLine + newLine);", "+    }", "+    _writeToFileOut(indentString(baseIndent, 3) + \"if (alreadyTested) { \" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"return true;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + className + \" cast = ((\" + className + \") o);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + listName + \".addLast(cast);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"boolean result;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"try {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"result = \");", "+    int variablesCompared = 0;", "+    for (int i = 0; i < accessors.length; i++) {", "+      if (variablesCompared > 0) {", "+        _writeToFileOut(\" && \" + newLine + indentString(baseIndent, 7));", "+      }", "+      variablesCompared++;", "+      ", "+      String varName = accessors[i].getName() + \"()\";", "+      ", "+      if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5) ||", "+            ! accessors[i].getReturnType().getSymbolData().isPrimitiveType()) {", "+        ", "+        _writeToFileOut(valueEqualsName + \"(\" + varName + \", cast.\" + varName + \")\");", "+      }", "+      else {", "+        _writeToFileOut(\"(\" + varName + \" == cast.\" + varName + \")\");", "+      }", "+    }", "+  ", "+    if (variablesCompared == 0)", "+      _writeToFileOut(\"true\");", "+    ", "+    _writeToFileOut(\";\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"catch (RuntimeException e) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + listName + \".removeLast();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"throw e;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + listName + \".removeLast();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"return result;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f63ba4bed1747977c9ea8240154a4c8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r   protected static void writeSafeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, \r                                           String valueHashCodeName, MethodData[] accessors)", "signatureAfterChange": "   protected static void writeSafeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef,                                            String valueHashCodeName, MethodData[] accessors)", "diff": ["-   */\r", "-  protected static void writeSafeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, \r", "-                                          String valueHashCodeName, MethodData[] accessors) {\r", "-    \r", "-    String listName = \"__hashCodeList\";\r", "-    listName = sd.createUniqueName(listName);\r", "-    VariableData hashCodeList = new VariableData(listName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),\r", "-                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),\r", "-                                 true, sd);\r", "-    hashCodeList.setGenerated(true);\r", "-    \r", "-    if (waitForVarDef) {\r", "-      SymbolData outermostData = sd;\r", "-      while (outermostData.getOuterData() != null) {\r", "-        outermostData = outermostData.getOuterData().getSymbolData();\r", "-      }\r", "-      outermostData.addVar(hashCodeList);\r", "-      _endOfClassVarDefs.add(\"/** This field is automatically generated by the Language Level Converter. */\");\r", "-      if (LanguageLevelConverter.versionSupportsGenerics(_targetVersion)) {\r", "-        _endOfClassVarDefs.add(\"private static java.util.LinkedList<Object> \" + listName + \" = new java.util.LinkedList<Object>();\");\r", "-      }\r", "-      else {\r", "-        _endOfClassVarDefs.add(\"private static java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\");\r", "-      }\r", "-      _endOfClassVarDefs.add(\"\");\r", "-    }\r", "-    else {\r", "-      sd.addVar(hashCodeList);\r", "-      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\");\r", "-      if (LanguageLevelConverter.versionSupportsGenerics(_targetVersion)) {\r", "-        _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private static java.util.LinkedList<\" + className + \"> \" + listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);\r", "-      }\r", "-      else {\r", "-        _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private static java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine);\r", "-      }\r", "-    }\r", "-    \r", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\");\r", "-    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"public int hashCode() {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"if (\" + listName + \".contains(this)) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"return -1;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + listName + \".addLast(this);\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"int result;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"try {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"result = getClass().hashCode()\");\r", "-    for (int i = 0; i < accessors.length; i++) {\r", "-      _writeToFileOut(\" ^ \" + newLine + indentString(baseIndent, 6));\r", "-      SymbolData type = accessors[i].getReturnType().getSymbolData();\r", "-      \r", "-      if (LanguageLevelConverter.versionSupportsAutoboxing(_targetVersion) ||\r", "-          ! type.isPrimitiveType()) {\r", "-        \r", "-        _writeToFileOut(valueHashCodeName + \"(\" + accessors[i].getName() + \"())\");\r", "-      }\r", "-      else if (type == SymbolData.BOOLEAN_TYPE) {\r", "-        _writeToFileOut(\"(\" + accessors[i].getName() + \"() ? 1 : 0)\");\r", "-      }\r", "-      else if (type.isAssignableTo(SymbolData.INT_TYPE, _targetVersion)) {\r", "-        _writeToFileOut(accessors[i].getName() + \"()\");\r", "-      }\r", "-      else {\r", "-        _writeToFileOut(\"(int) \" + accessors[i].getName() + \"()\");           \r", "-      }\r", "-    }\r", "-    \r", "-    _writeToFileOut(\";\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"catch (RuntimeException e) {\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + listName + \".removeLast();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 4) + \"throw e;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + listName + \".removeLast();\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 3) + \"return result;\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);\r", "-    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);\r", "-  }\r", "+   */", "+  protected static void writeSafeHashCode(String className, SymbolData sd, int baseIndent, boolean waitForVarDef, ", "+                                          String valueHashCodeName, MethodData[] accessors) {", "+    ", "+    String listName = \"__hashCodeList\";", "+    listName = sd.createUniqueName(listName);", "+    VariableData hashCodeList = new VariableData(listName, new ModifiersAndVisibility(JExprParser.NO_SOURCE_INFO, new String[]{ \"private\", \"static\" }),", "+                                 _llv.getSymbolDataHelper(\"java.util.LinkedList\", JExprParser.NO_SOURCE_INFO, false, false, false, false),", "+                                 true, sd);", "+    hashCodeList.setGenerated(true);", "+    ", "+    if (waitForVarDef) {", "+      SymbolData outermostData = sd;", "+      while (outermostData.getOuterData() != null) {", "+        outermostData = outermostData.getOuterData().getSymbolData();", "+      }", "+      outermostData.addVar(hashCodeList);", "+      _endOfClassVarDefs.add(\"/** This field is automatically generated by the Language Level Converter. */\");", "+      if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5)) {", "+        _endOfClassVarDefs.add(\"private static java.util.LinkedList<Object> \" + listName + \" = new java.util.LinkedList<Object>();\");", "+      }", "+      else {", "+        _endOfClassVarDefs.add(\"private static java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\");", "+      }", "+      _endOfClassVarDefs.add(\"\");", "+    }", "+    else {", "+      sd.addVar(hashCodeList);", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This field is automatically generated by the Language Level Converter. */\");", "+      if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5)) {", "+        _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private static java.util.LinkedList<\" + className + \"> \" + listName + \" = new java.util.LinkedList<\" + className + \">();\" + newLine);", "+      }", "+      else {", "+        _writeToFileOut(newLine + indentString(baseIndent, 1) + \"private static java.util.LinkedList \" + listName + \" = new java.util.LinkedList();\" + newLine);", "+      }", "+    }", "+    ", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"/** This method is automatically generated by the Language Level Converter. */\");", "+    _writeToFileOut(newLine + indentString(baseIndent, 1) + \"public int hashCode() {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"if (\" + listName + \".contains(this)) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"return -1;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"else {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + listName + \".addLast(this);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"int result;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"try {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"result = getClass().hashCode()\");", "+    for (int i = 0; i < accessors.length; i++) {", "+      _writeToFileOut(\" ^ \" + newLine + indentString(baseIndent, 6));", "+      SymbolData type = accessors[i].getReturnType().getSymbolData();", "+      ", "+      if (LanguageLevelConverter.OPT.javaVersion().supports(JavaVersion.JAVA_5) ||", "+          ! type.isPrimitiveType()) {", "+        ", "+        _writeToFileOut(valueHashCodeName + \"(\" + accessors[i].getName() + \"())\");", "+      }", "+      else if (type == SymbolData.BOOLEAN_TYPE) {", "+        _writeToFileOut(\"(\" + accessors[i].getName() + \"() ? 1 : 0)\");", "+      }", "+      else if (type.isAssignableTo(SymbolData.INT_TYPE, LanguageLevelConverter.OPT.javaVersion())) {", "+        _writeToFileOut(accessors[i].getName() + \"()\");", "+      }", "+      else {", "+        _writeToFileOut(\"(int) \" + accessors[i].getName() + \"()\");           ", "+      }", "+    }", "+    ", "+    _writeToFileOut(\";\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"catch (RuntimeException e) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + listName + \".removeLast();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + \"throw e;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + listName + \".removeLast();\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + \"return result;\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + \"}\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"}\" + newLine);", "+  }"]}], "num": 7125}
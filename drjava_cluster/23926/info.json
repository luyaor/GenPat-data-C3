{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d8e3e5e49f7671edb478a4fa7c3b2d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb8e5f91da7b9a40bc99c8ea6d677bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData value_result, TypeData type_result)", "signatureAfterChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData type_result, TypeData value_result)", "diff": ["-  /** Not currently supported */", "-  public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData value_result, TypeData type_result) {", "-    throw new RuntimeException(\"Internal Program Error: instanceof is not currently supported.\" + ", "-                               \"  This should have been caught before the Type Checker.  Please report this bug.\");", "+    */", "+  public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData type_result, TypeData value_result) {", "+    if (type_result == null)  return null; ", "+    ", "+    // Make sure that lhs could be resolved (not PackageData)", "+    if (! assertFound(value_result, that) || ! assertFound(type_result, that)) return null;", "+    ", "+    if (type_result.isInstanceType()) {", "+      _addError(\"You are trying to test if an expression value belongs to an instance of a type, which is not allowed.\"", "+                  + \"  Perhaps you meant to check membership in the type itself, \" + type_result.getName(),", "+                that);", "+    }", "+    ", "+    else if (assertInstanceType(value_result, \"You are trying to test if \" + value_result.getName() + ", "+                                \" belongs to type, but it is a class or interface type, not an instance\", that) ", "+               && ! value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), JAVA_VERSION)) {", "+      ", "+      _addError(\"You cannot test whether an expression of type \" + value_result.getName() + \" belongs to type \"", "+                  + type_result.getName() + \" because they are not related\", ", "+                that);", "+    }", "+    ", "+    return SymbolData.BOOLEAN_TYPE.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c3088c3349d065c11ea194fa7c1093", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "signatureAfterChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "diff": ["-   */", "+    */", "-    throw new RuntimeException(\"Internal Program Error: Instance of expressions are not supported.  This should have been caught before the Type Checker.  Please report this bug.\");", "+    //this call to getSymbolData will not throw any errors, but may return null.  If null is returned, an error needs to be added.", "+    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "+    final TypeData value_result = that.getValue().visit(this);", "+    ", "+    if (type_result == null) {", "+      _addError(that.getType().getName()", "+                  + \" cannot appear as the type of a instanceof expression because it is not a valid type\", ", "+                that.getType());", "+      return null;", "+    }", "+    ", "+    if (! assertFound(value_result, that.getValue())) {", "+      // An error occurred type-checking the value; return the expected type to", "+      // allow type-checking to continue.", "+      return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+    }", "+    ", "+    // Neither type_result nor value_result are null.", "+    return forInstanceofExpressionOnly(that, type_result, value_result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d63aaa8986345a2ef15ec83275b754", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ddcbad2909e9c9411b7283368e21d7790422a21d", "commitAfterChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "   void debuggerToggleBreakpoint()", "signatureAfterChange": "   void debuggerToggleBreakpoint()", "diff": ["+      ", "+      boolean isUntitled = doc.getDocument().isUntitled();", "+      if (isUntitled) {", "+        JOptionPane.showMessageDialog(this,", "+                                      \"Before you can set a breakpoint you must save and compile\\n\" +", "+                                      \"this document.\",", "+                                      \"Cannot set breakpoint on untitled document.\",", "+                                      JOptionPane.ERROR_MESSAGE);", "+        return;", "+      }", "+      ", "+      boolean isModified = doc.isModifiedSinceSave();", "+      if (isModified  && !_currentDefPane.hasWarnedAboutModified()) {", "+        ", "+        int rc = JOptionPane.showConfirmDialog(this,", "+                                               \"This document has been modified since its last save and\\n\" + ", "+                                               \"may be out of sync with the debugger. It is suggested that\\n\" +", "+                                               \"you save and recompile before continuing to debug in order\\n\" +", "+                                               \"to avoid any unexpected errors. Would you still like to toggle\\n\" +", "+                                               \"the breakpoint at the specified line?\",", "+                                               \"Toggle breakpoint on modified file?\",", "+                                               JOptionPane.YES_NO_OPTION);", "+        _currentDefPane.hasWarnedAboutModified(true);", "+        ", "+        switch (rc) {", "+          case JOptionPane.YES_OPTION:", "+            break;", "+          case JOptionPane.NO_OPTION:", "+          case JOptionPane.CANCEL_OPTION:", "+          case JOptionPane.CLOSED_OPTION:", "+            // do nothing", "+            return;", "+          default:", "+            throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        }", "+        ", "+      }", "+           "]}], "num": 23926}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb834a6ea305eda64a5e7227f7c389c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39248a5f45239a534e196a6b0ff12ef7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void testDancingUIFileOpened() throws IOException", "signatureAfterChange": "   public void testDancingUIFileOpened() throws IOException", "diff": ["+    ", "+    _log.log(\"Starting testingDancingUIFileOpened\");", "+    ", "+    final GlobalModel _model = _frame.getModel();", "+    ", "+", "+     ", "+     _log.log(\"DancingUIFileOpened Set Up\");", "+     ", "+     // set up listeners and signal flags", "+     final SingleDisplayModelFileOpenedListener openListener = new SingleDisplayModelFileOpenedListener();", "+     ", "+     _openDone = false;", "-//     try {", "-       Utilities.invokeLater(new Runnable() { public void run() {", "-         _frame.pack();", "-         _frame.open(new FileOpenSelector() {", "+     Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+//       _frame.setVisible(true);", "+        _frame.pack();", "+        _frame.addComponentListenerToOpenDocumentsList(listener);", "+      }", "+     });", "+     ", "+     _model.addListener(openListener);", "+     ", "+     _log.log(\"opening file\");", "+     ", "+     Utilities.invokeLater(new Runnable() {", "+       public void run() {", "+        _frame.open(new FileOpenSelector() {", "-         _frame.getModel().addListener(compileListener);", "-         _frame.addComponentListenerToOpenDocumentsList(listener);", "-         _compileDone = false;", "+       }", "+     });", "+     ", "+     /* wait until file has been open and active document changed. */", "+     synchronized(_openLock) {", "+       try { while (! _openDone) _openLock.wait(); }", "+       catch(InterruptedException e) { fail(e.toString()); }", "+     }", "+     ", "+     _model.removeListener(openListener);", "+     ", "+     _log.log(\"File opened\");", "+     ", "+     _compileDone = false;", "+     _model.addListener(compileListener);", "+     ", "+     // save and compile the new file asynchronously", "+     ", "+     Utilities.invokeLater(new Runnable() { ", "+       public void run() { ", "+         _log.log(\"saving all files\");", "+         _frame._saveAll();", "+         _log.log(\"invoking compileAll action\");", "-       }});", "-//     }", "-//     catch(InterruptedException e) { fail(e.toString()); }", "+       }", "+     });", "+     _log.log(\"File saved and compiled\");", "-//     _log.log(\"testDancingUIFileOpened completed\");", "+     _log.log(\"testDancingUIFileOpened completed\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4153c8cfb43a3c48a74794535b66d778", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "commitAfterChange": "48e9711d768be0e10f630f8284db4c31a0256844", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "diff": ["-    _m = new JUnitErrorModel(new JUnitError[0], _model, false);", "+    _log.log(\"testErrorArrayInOrder_NOJOIN started\");", "+    final JUnitTestListener listener = new JUnitTestListener();", "-    final File file = new File(_tempDir, \"MonkeyTestFail.java\");", "-    saveFile(doc, new FileSelector(file));", "+    _log.log(\"doc setUp\");", "-    JUnitTestListener listener = new JUnitTestListener();", "-    _model.addListener(listener);", "-    ", "-    testStartCompile(doc);", "-    ", "-    listener.waitCompileDone();", "-    ", "-    if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "-    listener.checkCompileOccurred();", "-    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try {", "+          _m = new JUnitErrorModel(new JUnitError[0], _model, false);", "+", "+          final File file = new File(_tempDir, \"MonkeyTestFail.java\");", "+          saveFile(doc, new FileSelector(file));", "+          ", "+          _model.addListener(listener);", "+          ", "+          testStartCompile(doc);", "+          _log.log(\"Compile started\");", "+          ", "+          listener.waitCompileDone();", "+          _log.log(\"Compile done\");", "+          ", "+          if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "+          listener.checkCompileOccurred();", "+          _log.log(\"Done with first block\");", "+        }", "+        catch(Exception e) { fail(\"The following exception was thrown in the first block of testErrorsArrayInOrder: /n\" + e); }", "+      }", "+    });", "+         ", "-    // Clear document so we can make sure it's written to after startJUnit; ", "-    // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "-    // Perform the clear operation atomically in the event thread.", "+    ", "-        try {", "+        try {     ", "+          // Clear document so we can make sure it's written to after startJUnit; ", "+          // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "+          // Performing the clear operation atomically in the event thread.", "+          ", "+          assertEquals(\"Confirm document is empty\", 0, _model.getJUnitModel().getJUnitDocument().getLength());", "+          _log.log(\"JUnitDocument is empty\");", "+        catch(Exception e) { fail(\"The following exception was thrown in testErrorsArrayInOrder: /n\" + e); }", "-    //final TestResult testResults = doc.startJUnit();", "-    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    // Wait until events triggered by running unit tests have cleared ? (should be done by code above)", "+    Utilities.clearEventQueue();", "+    _log.log(\"Event queue cleared\");", "+    ", "+    //final TestResult testResults = doc.startJUnit();", "+    ", "+    _log.log(\"testErrorArrayInOrder complete\");", "+    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749f5659680d246a7b3f2689a020b284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "335e15356f81cc767efd4886353e6890e8c905fa", "commitAfterChange": "8ccb5b5787c23c1ec149415240d859632e14b0eb", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["+    if (active != null) al.add(active);", "+    ", "+    List<OpenDefinitionsDocument> nonProjDocs = getNonProjectDocuments();", "+    List<OpenDefinitionsDocument> projDocs = getProjectDocuments();", "+    File[] projectFiles = getProjectFiles();   ", "+    // keep all nonproject files open.  External files in the previous project", "+    // may become project files in the new project and must be closed while external", "+    // files in the previous project that are still external to the new project ", "+    // should be kept open.", "+     ", "+    //List<OpenDefinitionsDocument> docsToClose = new LinkedList<OpenDefinitionsDocument>();", "+    for(OpenDefinitionsDocument d: projDocs){", "+      if(d.isProjectFile()){", "+        closeFile(d);", "+      }else{", "+        try{", "+          INavigatorItem idoc = getIDocGivenODD(d);", "+          String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+          _documentNavigator.refreshDocument(idoc, path);", "+        }catch(IOException e){", "+          // noop", "+        }", "+      }", "+    }", "-    return al.toArray(new File[0]);", "+    // call on the GUI to finish up by opening the files and making", "+    // necessary gui component changes", "+    final File[] filesToOpen = al.toArray(new File[0]);", "+    _notifier.projectOpened(projectFile, new FileOpenSelector(){", "+      public File[] getFiles() {", "+        return filesToOpen;", "+      }", "+    });", "+    ", "+    if (_documentNavigator instanceof JTreeSortNavigator) {", "+      ((JTreeSortNavigator)_documentNavigator).collapsePaths(ir.getCollapsedPaths());", "+    }", "+    ", "+    return srcFiles; // Unnecessarily returns src files in keeping with the previous interface."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820e20e87cf3fd83f0d10c17bbfb64a2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "commitAfterChange": "48e9711d768be0e10f630f8284db4c31a0256844", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testErrorInSuperClass_NOJOIN() throws Exception", "signatureAfterChange": "   public void testErrorInSuperClass_NOJOIN() throws Exception", "diff": ["+    _log.log(\"testErrorInSuperClass_NOJOIN started\");", "-    OpenDefinitionsDocument doc1 = setupDocument(TEST_ONE);", "-    OpenDefinitionsDocument doc2 = setupDocument(TEST_TWO);", "+    final OpenDefinitionsDocument doc1 = setupDocument(TEST_ONE);", "+    final OpenDefinitionsDocument doc2 = setupDocument(TEST_TWO);", "-    saveFile(doc1, new FileSelector(file1));", "-    saveFile(doc2, new FileSelector(file2));", "-    JUnitTestListener listener = new JUnitTestListener();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() {", "+        try {", "+          saveFile(doc1, new FileSelector(file1));", "+          saveFile(doc2, new FileSelector(file2));", "+        }", "+        catch(Exception e) { fail(\"The following exception was thrown in testErrorInSuperClass_NOJOIN location 1: /n\" + e); }", "+      }", "+    });    ", "+    JUnitTestListener listener = new JUnitTestListener(true);", "-    _model.getCompilerModel().compileAll();", "+    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try { _model.getCompilerModel().compileAll(); }", "+        catch(Exception e) { fail(\"The following exception was thrown in testErrorInSuperClass_NOJOIN location 12: /n\" + e); }", "+      }", "+    });", "+    ", "+    Utilities.clearEventQueue();", "+    ", "+    ", "+    Utilities.clearEventQueue();", "+    Utilities.clearEventQueue();", "+    ", "-    ", "+", "-    _log.log(\"Second document testing should be complete\");", "+    _log.log(\"Second document testing should be complete\");", "+     _log.log(\"testErrorInSuperClass_NOJOIN complete\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf3fe933fab67267a52ff422e4c8e26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "commitAfterChange": "48e9711d768be0e10f630f8284db4c31a0256844", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testVerifyErrorHandledCorrectly_NOJOIN() throws Exception", "signatureAfterChange": "   public void testVerifyErrorHandledCorrectly_NOJOIN() throws Exception", "diff": ["-    OpenDefinitionsDocument doc = setupDocument(ABC_CLASS_ONE);", "+    _log.log(\"testVerifyErrorHandledCorrectly_NOJOIN started\");", "+    ", "+    final OpenDefinitionsDocument doc = setupDocument(ABC_CLASS_ONE);", "-    saveFile(doc, new FileSelector(file));", "-    ", "-    Utilities.clearEventQueue();", "-    ", "-    OpenDefinitionsDocument doc2 = setupDocument(ABC_TEST);", "+    final OpenDefinitionsDocument doc2 = setupDocument(ABC_TEST);", "-    saveFile(doc2, new FileSelector(file2));", "-    // Compile the correct ABC and the test", "-//    JUnitTestListener listener = new JUnitTestListener(false);", "-//      System.out.println(\"compiling all\");", "-    _model.getCompilerModel().compileAll();", "-    Utilities.clearEventQueue();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try {     ", "+          saveFile(doc, new FileSelector(file));", "+          saveFile(doc2, new FileSelector(file2));", "+          ", "+          // Compile the correct ABC and the test", "+//          JUnitTestListener listener = new JUnitTestListener(false);", "+//          System.out.println(\"compiling all\");", "+          _model.getCompilerModel().compileAll();", "+        }", "+        catch(Exception e) { fail(\"The following exception was thrown in testVerifyErrorHandledCorrectly_NOJOIN location 1: /n\" + e); }", "+      } ", "+    });", "+   _log.log(\"First compile in  testVerifyErrorHandledCorrectly_NOJOIN comlete\");", "+   ", "-    saveFile(doc3, new FileSelector(file3));", "-    JUnitTestListener listener = new JUnitNonTestListener();", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { saveFile(doc3, new FileSelector(file3)); }", "+    });", "+    ", "+    final JUnitTestListener listener = new JUnitNonTestListener();", "-    listener.compile(doc3);", "-", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try { listener.compile(doc3); }", "+        catch(Exception e) { fail(\"The following exception was thrown in testVerifyErrorHandledCorrectly_NOJOIN location 2: /n\" + e); }", "+      }", "+    });", "+    ", "+    _log.log(\"Second compile complete\");", "+    _log.log(\"JUnit execution complete\");", "+    ", "+    _log.log(\"testVerifyErrorHandledCorrectly_NOJOIN comlete\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ff15623fdb079545e91f64b2a3dbe4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/AbstractMasterJVM.java", "commitBeforeChange": "754c5c6ad2cb355b22670132dd3802b39cd047ad", "commitAfterChange": "96733f3b5667642e9fe604cf00e9cf6d6a2ed1f5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp)     throws IOException, RemoteException", "signatureAfterChange": "   protected synchronized final void invokeSlave(String[] jvmArgs, String cp)     throws IOException, RemoteException", "diff": ["+    ", "+    //*******************************************", "+    // first, we we export ourselves to a file...", "+    //*******************************************", "+    ", "-        synchronized(AbstractMasterJVM.this) {", "+        synchronized(lock) {", "-          AbstractMasterJVM.this.notify();", "+          lock.notify();", "-", "-    t.start();", "-    while (_stub == null) {", "-      try {", "-        wait();", "-      }", "-      catch (InterruptedException ie) {", "-        throw new edu.rice.cs.util.UnexpectedException(ie);", "+    synchronized(lock){", "+      t.start();", "+      while (_stub == null) {", "+        try {", "+          lock.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new edu.rice.cs.util.UnexpectedException(ie);", "+        }", "-", "-", "+", "+    //*******************************************", "+    // done exporting ourselves to a file...", "+    // now lets export our classloader", "+    // this will be used to handle classloading ", "+    // requests from the slave jvm", "+    //*******************************************", "+    final RemoteClassLoader rClassLoader = new RemoteClassLoader(getClass().getClassLoader());", "+    t = new Thread(_exportMasterThreadName) {", "+      public void run() {", "+        synchronized(lock) {", "+          try {", "+            _classLoaderStub = UnicastRemoteObject.exportObject(rClassLoader);", "+            ", "+            // Debug: check that the IP address is 127.0.0.1", "+            //javax.swing.JOptionPane.showMessageDialog(null, _stub.toString());", "+          }", "+          catch (RemoteException re) {", "+            //javax.swing.JOptionPane.showMessageDialog(null, edu.rice.cs.util.StringOps.getStackTrace(re));", "+            throw new edu.rice.cs.util.UnexpectedException(re);", "+          }", "+          lock.notify();", "+        }", "+      }", "+    };", "+    synchronized(lock){", "+      t.start();", "+      while (_classLoaderStub == null) {", "+        try {", "+          lock.wait();", "+        }", "+        catch (InterruptedException ie) {", "+          throw new edu.rice.cs.util.UnexpectedException(ie);", "+        }", "+      }", "+    }", "+    _classLoaderStubFile = File.createTempFile(\"DrJava-remote-stub\", \".tmp\");", "+    _classLoaderStubFile.deleteOnExit();", "+    // serialize stub to _stubFile", "+    fstream = new FileOutputStream(_classLoaderStubFile);", "+    ostream = new ObjectOutputStream(fstream);", "+    ostream.writeObject(_classLoaderStub);", "+    ostream.flush();", "+    fstream.close();", "+    ", "-      _slaveClassName", "+      _slaveClassName,", "+      _classLoaderStubFile.getAbsolutePath()", "-    // When it dies,", "+    // When it dies, restart it"]}], "num": 20124}
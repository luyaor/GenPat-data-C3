{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4ea5c388bf15890681b4ed5fc1d7201", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e2426c924927dde9fa931be9a41a008", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     @Override public Type visit(GenericReferenceTypeName node)", "signatureAfterChange": "     @Override public Type visit(GenericReferenceTypeName node)", "diff": ["-            if (outer != null) { t = ts.lookupClass(outer, name, targs); }", "+            if (outer != null) { t = ts.lookupClass(outer, name, targs, context.accessModule()); }", "-          ClassType memberType = ts.lookupClass(t, ids.next().image(), targs);", "-          new ExpressionChecker(context, opt).checkAccessibility(memberType.ofClass(), node);", "+          ClassType memberType = ts.lookupClass(t, ids.next().image(), targs, context.accessModule());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0ab085f74f687105ace6f2b0cfa5501", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     @Override public Type visit(ReferenceTypeName node)", "signatureAfterChange": "     @Override public Type visit(ReferenceTypeName node)", "diff": ["-              if (outer != null) { t = ts.lookupClass(outer, name, IterUtil.<Type>empty()); }", "+              if (outer != null) { t = ts.lookupClass(outer, name, IterUtil.<Type>empty(), context.accessModule()); }", "-          ClassType memberType = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty());", "-          new ExpressionChecker(context, opt).checkAccessibility(memberType.ofClass(), node);", "+          ClassType memberType = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty(), context.accessModule());"]}], "num": 26167}
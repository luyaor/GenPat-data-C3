{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfb7bc83243427b10303d18883b44019", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4616f744f072dd5de1d3fa8efbc7bcc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/PopupConsole.java", "commitBeforeChange": "f5e0f21c1557f81d0d7f0c29eb237b06db708ca4", "commitAfterChange": "0d9f1553021bdec23ece7e3cb20a25799f49e14f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected String silentInput()", "signatureAfterChange": "   protected String silentInput()", "diff": ["-    synchronized(commandLock) {", "-      _insertTextCommand = new Lambda<Object,String>() {", "-        public synchronized Object apply(String s) {", "-          input.append(s);", "-          return null;", "-        }", "-      };", "-      _interruptCommand = new Runnable() {", "-        public void run() {", "-          _insertTextCommand = null;", "-          _interruptCommand = null;", "-          synchronized(monitor) {", "-            monitor.notify();", "+    synchronized(monitor) {", "+      synchronized(commandLock) {", "+        _insertTextCommand = new Lambda<Object,String>() {", "+          public synchronized Object apply(String s) {", "+            input.append(s);", "+            return null;", "-        }", "-      };", "-    }", "-    synchronized (CONSOLE_READY) {", "-      CONSOLE_READY.notifyAll();", "-    }", "-    synchronized (monitor) {", "+        };", "+        ", "+        _interruptCommand = new Runnable() {", "+          public void run() {", "+            System.out.println(\"in interrupt command\");", "+            _insertTextCommand = null;", "+            _interruptCommand = null;", "+            synchronized(monitor) {", "+              System.out.println(\"notifying monitor\");", "+              monitor.notifyAll();", "+            }", "+            System.out.println(\"released lock on monitor\");", "+          }", "+        };", "+        ", "+        commandLock.notifyAll();", "+      }", "-        monitor.wait();", "+        long time = System.currentTimeMillis();", "+        System.out.println(\"waiting for monitor\");", "+        ", "+        monitor.wait(4000);", "+        ", "+        System.out.println(\"done waiting - time=\" + (System.currentTimeMillis() - time));", "+        if (System.currentTimeMillis() - time > 3999) throw new RuntimeException(\"monitor.wait() timeout\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0e9c65e6a41d1297716c819936da5af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public String getPackageName() throws InvalidPackageException", "signatureAfterChange": "   public String getPackageName() throws InvalidPackageException", "diff": ["+    int oldLocation;", "+    readLock();", "-      int oldLocation = getCurrentLocation();", "-      ", "+      oldLocation = _currentLocation;", "+        int firstNormalLocation;", "-        //      System.out.println(\"oldlocation: \" + oldLocation + \", doclength: \" + docLength + \", text: \\\"\" + text + \"\\\"\");", "-        // The location of the first non-whitespace character that", "-        // is not inside quote or comment.", "-        int firstNormalLocation = 0;", "-        while ((firstNormalLocation < docLength)) {", "+        // The location of the first non-whitespace character that is not inside a string or comment.", "+        firstNormalLocation = 0;", "+        while (firstNormalLocation < docLength) {", "-            if (!Character.isWhitespace(curChar)) {", "-              break;", "-            }", "+            if (! Character.isWhitespace(curChar)) break;", "-        ", "+", "-            ! text.substring(firstNormalLocation, endLocation).equals(\"package\"))", "-        {", "-          // the first normal text is not \"package\" or there is not enough", "-          // text for there to be a package statement.", "-          // thus, there is no valid package statement.", "+            ! text.substring(firstNormalLocation, endLocation).equals(\"package\")) {", "+          // The first normal text is not \"package\" or there is not enough text for there to be a package statement.", "+          // Thus, there is no valid package statement.", "-          ", "-          if (semicolonLocation == -1) {", "+          if (semicolonLocation == -1)", "-          }", "-        if (toReturn.equals(\"\")) {", "+        if (toReturn.equals(\"\"))", "-        }", "-        setCurrentLocation(0);", "+        setCurrentLocation(0);  // Why?", "+        readUnlock();  // _reduced lock will be released in the next instruction"]}], "num": 17805}
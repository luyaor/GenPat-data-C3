{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00e07bfc4f24f22ebad8020880cf73ce", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5357d5ba95a754201a8f0fe51f1193f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Bob.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void handleUncheckedException(SymbolData sd, JExpression j)", "signatureAfterChange": "   public void handleUncheckedException(SymbolData sd, JExpression j)", "diff": ["-  /**If an exception is thrown but not caught, throw the appropriate error, based on the JExpression.*/", "+  /** If an exception is thrown but not caught, throw the appropriate error, based on the JExpression.*/", "-      _addError(\"The method \" + ((MethodInvocation)j).getName().getText() + \" is declared to throw the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "+      _addError(\"The method \" + ((MethodInvocation)j).getName().getText() + \" is declared to throw the exception \" + ", "+                sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "-        _addError(\"This statement throws the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown\", j);", "+        _addError(\"This statement throws the exception \" + sd.getName() + ", "+                  \" which needs to be caught or declared to be thrown\", j);", "-        _addError(\"The constructor for the class \" + ((ClassInstantiation)j).getType().getName() + \" is declared to throw the exception \" + sd.getName() + \" which needs to be caught or declared to be thrown.\", j);", "+        _addError(\"The constructor for the class \" + ((ClassInstantiation)j).getType().getName() + ", "+                  \" is declared to throw the exception \" + sd.getName() +", "+                  \" which needs to be caught or declared to be thrown.\", j);", "-        _addError(\"The constructor of this class's super class could throw the exception \" + sd.getName() + \", so the enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"The constructor of this class's super class could throw the exception \" + sd.getName() + ", "+                  \", so the enclosing constructor needs to be declared to throw it\", j);", "-        _addError(\"This constructor could throw the exception \" + sd.getName() + \", so this enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"This constructor could throw the exception \" + sd.getName() + ", "+                  \", so this enclosing constructor needs to be declared to throw it\", j);", "-        _addError(\"There is an implicit call to the superclass's constructor here.  That constructor could throw the exception \" + sd.getName() + \", so the enclosing constructor needs to be declared to throw it\", j);", "+        _addError(\"There is an implicit call to the superclass's constructor here.  \" + ", "+                  \"That constructor could throw the exception \" + sd.getName() + ", "+                  \", so the enclosing constructor needs to be declared to throw it\", j);", "-        throw new RuntimeException(\"Internal Program Error: Something besides a method invocation or throw statement threw an exception.  Please report this bug.\");", "+        throw new RuntimeException(\"Internal Program Error: Something besides a method invocation or throw statement\" + ", "+                                   \" threw an exception.  Please report this bug.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88278bc7d32f2922e19f261c1d9beaa6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ConstructorBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public TypeData complexSuperConstructorInvocationAllowed(ComplexSuperConstructorInvocation that)", "signatureAfterChange": "   public TypeData complexSuperConstructorInvocationAllowed(ComplexSuperConstructorInvocation that)", "diff": ["-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.  The class \" + _data.getSymbolData().getName() + \" does not have a super class, so you cannot do this here\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.  The class \" + _data.getSymbolData().getName() + ", "+                \" does not have a super class, so you cannot do this here\", ", "+                that);", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.  The super class \" + superClass.getName() + \" does not have an outer class, so you cannot do this here\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.  The super class \" + superClass.getName() ", "+                  + \" does not have an outer class, so you cannot do this here\", ", "+                that);", "-    ", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.\", ", "+                that);", "-    ", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super class from the context of its outer class.  The class or interface \" + enclosingResult.getSymbolData().getName() + \" is not the outer class of the super class \" + superClass.getName(), that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of your super \"", "+                  + \"class from the context of its outer class.  The class or interface \" ", "+                  + enclosingResult.getSymbolData().getName() + \" is not the outer class of the super class \" ", "+                  + superClass.getName(), ", "+                that);", "-    ", "-      _addError(\"A qualified super constructor invocation can only be made from the context of an instance of the outer class of the super class.  You have specified a type name\", that);", "+      _addError(\"A qualified super constructor invocation can only be made from the context of an instance of the \"", "+                  + \"outer class of the super class.  You have specified a type name\", ", "+                that);", "-      ", "-      ", "-      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of a non-static super class from the context of its outer class.  The super class \" + superClass.getName() + \" is a static inner class\", that);", "+      _addError(\"A qualified super constructor invocation can only be used to invoke the constructor of a non-static \"", "+                  + \"super class from the context of its outer class.  The super class \" + superClass.getName() ", "+                  + \" is a static inner class\",", "+                that);", "-", "-    ", "-", "-", "-    "]}], "num": 11955}
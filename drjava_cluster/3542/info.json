{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ad1cb3b47dbde511f5988bb96a6e01e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18451aa22b365f3e9c89311ea2eb1b5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TigerTest.java", "commitBeforeChange": "dbdd53c636f6618ffbae999ad0ee607bc3e2b6a3", "commitAfterChange": "689d9f23e5437e0982e3819c2bbd111dd456dac2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testStaticImportOfMethods()", "signatureAfterChange": "   public void testStaticImportOfMethods()", "diff": ["+    ", "+    testString = ", "+      \"package NN;\\n\"+", "+      \"import static java.lang.Math.abs;\\n\"+", "+      \"public abstract class OO {\\n\"+", "+      \"  public int abs(int i) { return i; }\\n\"+", "+      \"}\\n\"+", "+      \"public class PP extends OO {\\n\"+", "+      \"  public static int m() {\\n\"+", "+      \"    return abs(-2);\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"PP.m();\";", "+    try {", "+      interpret(testString);", "+      fail(\"Static method cannot reference non-static members of super class\");", "+    } catch(Error e) {", "+      //Expected to fail", "+    }", "+    ", "+    ", "+    testString = ", "+      \"package QQ;\\n\"+", "+      \"import static java.lang.Math.abs;\\n\"+", "+      \"public abstract class RR {\\n\"+", "+      \"  public static int abs(int i) { return i; }\\n\"+", "+      \"}\\n\"+", "+      \"public class SS extends RR {\\n\"+", "+      \"  public static int m() {\\n\"+", "+      \"    return abs(-2);\\n\"+", "+      \"  }\\n\"+", "+      \"}\\n\"+", "+      \"SS.m();\";", "+    assertEquals(\"Super class method should take precedence over staticly imported member\",-2,interpret(testString));", "+      ", "+    ", "+    //Tests that a non-static method cannot be imported", "+    testString =", "+      \"package TT;\\n\"+", "+      \"public class UU {\\n\"+", "+      \"  public int m1() { return 5;}\\n\"+", "+      \"}\\n\"+", "+      \"package VV;\\n\"+", "+      \"import static TT.UU.*;\\n\"+", "+      \"public class WW {\\n\"+", "+      \"  public int m2() { return m1(); } \\n\"+", "+      \"}\\n\"+", "+      \"WW ww = new WW(); ww.m2();\";", "+    try {", "+      assertEquals(5,interpret(testString));", "+      fail(\"Non static member should not be imported\");", "+    } ", "+    catch(InterpreterException e) {", "+      //Expected to fail", "+    }", "+    ", "+    //Tests that a non-static method cannot be imported", "+    testString =", "+      \"package XX;\\n\"+", "+      \"public class YY {\\n\"+", "+      \"  public int m() { return 5;}\\n\"+", "+      \"}\\n\"+", "+      \"package ZZ;\\n\"+", "+      \"import static XX.YY.m;\\n\";", "+    try {", "+      interpret(testString);", "+      fail(\"Non static member should not be imported\");", "+    } ", "+    catch(RuntimeException e) {", "+      //Expected to fail", "+    }", "+  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dec45c0c8e0d866e098fd451303abe72", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TigerTest.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void testInterpretMultiplePrintf()", "signatureAfterChange": "     public void testInterpretMultiplePrintf()", "diff": ["-        \"ps.printf(\\\"SomeStr %d %s somestr\\\",new Integer(26),\\\"str\\\")\\n;\";", "+        \"ps.printf(\\\"SomeStr %d %s somestr\\\",new Integer(26),\\\"str\\\")\\n;\\n\"+", "+        \"ps.printf(\\\"SomeStr\\\");\";", "-        try {", "-          testString = ", "-            \"ps.printf(\\\"SomeStr\\\")\\n;\";", "-          interpret(testString);", "-          fail(\"Should have failed, as Printf needs some parameters\");", "-        }", "-        catch(InterpreterException ie){", "-          //Expected to fail.", "-        }", "+        /** ", "+         * This test was originally expected to fail, but we found that ", "+         * this actually was an acceptable varargs behavior", "+         */", "+//        try {", "+//          testString = ", "+//            \"ps.printf(\\\"SomeStr\\\")\\n;\";", "+//          interpret(testString);", "+//          fail(\"Should have failed, as Printf needs some parameters\");", "+//        }", "+//        catch(InterpreterException ie){", "+//          //Expected to fail.", "+//        }"]}], "num": 3542}
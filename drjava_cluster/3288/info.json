{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58584b4cd42ae2c20d5c2e091f7363d1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9f9d41abba69a162caf6c2253a86ad4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f1270b4a562e0ecd61507987f82e57d121a23edd", "commitAfterChange": "12067b12cea198f72f8758eab77d6f544c743a53", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 136, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException", "diff": ["-  public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException {", "-    ", "-    // add opendefinitionsdocument", "-    ", "+   */", "+  public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) throws IOException {", "+    ProjectProfile builder = _makeProjectProfile(file, info);", "+    ", "-    // set the state if all went well", "-    File[] srcFiles = srcFileList.toArray(new File[srcFileList.size()]);", "+    synchronized(_auxiliaryFiles) { ", "+      _auxiliaryFiles = new LinkedList<File>();", "+      for (File f: builder.getAuxiliaryFiles()) { _auxiliaryFiles.add(f); }", "+    }", "-    synchronized(_auxiliaryFiles) { _auxiliaryFiles = auxFileList;  }", "-    ", "-    setFileGroupingState(makeProjectFileGroupingState(pr, mainClass, bd, wd, file, srcFiles, exCp, createJarFile, ", "-                                                      createJarFlags));", "+    ClassPathVector exCp = new ClassPathVector();", "+    for (File f : builder.getClassPaths()) { exCp.add(f); }", "+    setFileGroupingState(makeProjectFileGroupingState(builder.getProjectRoot(), builder.getMainClass(), builder.getBuildDirectory(),", "+                                                      builder.getWorkingDirectory(), file, builder.getSourceFiles(), exCp, builder.getCreateJarFile(), ", "+                                                      builder.getCreateJarFlags()));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b62849ebdc63b840a74059a4433906ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException", "signatureAfterChange": "   private void _compileFiles(List<? extends File> files, File buildDir) throws IOException", "diff": ["-  private void _compileFiles(File[] sourceRoots, File[] files, File buildDir) throws IOException {", "-", "-//    CompilerError[] errors = new CompilerError[0];", "-    ", "-//    System.err.println(\"Compiling files: \" + Arrays.toString(files) + \" to \" + buildDir);", "+  private void _compileFiles(List<? extends File> files, File buildDir) throws IOException {", "+    if (!files.isEmpty()) {", "+      /* Canonicalize buildDir */", "+      if (buildDir != null) buildDir = FileOps.getCanonicalFile(buildDir);", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> errors;", "-    LinkedList<JExprParseException> parseExceptions;", "-", "-    LinkedList<Pair<String, JExpressionIF>> visitorErrors;", "-    LinkedList<CompilerError> compilerErrors = new LinkedList<CompilerError>();", "-    CompilerInterface compiler = CompilerRegistry.ONLY.getActiveCompiler();", "-    ", "-    /* Canonicalize buildDir */", "-    if (buildDir != null) buildDir = FileOps.getCanonicalFile(buildDir);", "-", "-    compiler.setBuildDirectory(buildDir);", "-    ClassPathVector extraClassPath = new ClassPathVector();", "-    if (_model.isProjectActive()) ", "-      extraClassPath.addAll(_model.getExtraClassPath());", "-//    Utilities.showDebug(\"extra class path is: \" + extraClasspath);", "-    for (File f : DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH)) extraClassPath.add(f);", "-    ", "-//    Utilities.showDebug(\"Extra classpath passed to compiler: \" + extraClasspath.toString());", "-    compiler.setExtraClassPath(extraClassPath);", "-    if (files.length > 0) {", "-//      if (DrJava.getConfig().getSetting(OptionConstants.LANGUAGE_LEVEL) == DrJava.ELEMENTARY_LEVEL) {", "-      LanguageLevelConverter llc = new LanguageLevelConverter(getActiveCompiler().getName());", "-//      System.err.println(getActiveCompiler().getName());", "-      /* Language level files are moved to another file, copied back in augmented form to be compiled.  This", "-       * compiled version is also copied to another file with the same path with the \".augmented\" suffix on the ", "-       * end.  We have to copy the original back to its original spot so the user doesn't have to do anything funny.", "-       */", "-//      Utilities.showDebug(\"Getting ready to call LL converter on \" + Arrays.toString(files));", "-      errors = llc.convert(files);", "-//      Utilities.showDebug(\"Conversion complete\");", "+      List<File> classPath = _model.getClassPath().asFileVector();", "-      compiler.setWarningsEnabled(true);", "-      ", "-      /* Rename any .dj0 files in files to be .java files, so the correct thing is compiled.  The hashset is used to ", "-       * make sure we never send in duplicate files. This can happen if the java file was sent in along with the ", "-       * corresponding .dj* file. The dj* file is renamed to a .java file and thus we have two of the same file in ", "-       * the list.  By adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "-      */", "-      HashSet<File> javaFileSet = new HashSet<File>();", "-      for (File f : files) {", "-        File canonicalFile;", "-        try { canonicalFile = f.getCanonicalFile(); } ", "-        catch(IOException e) { canonicalFile = f.getAbsoluteFile(); }", "-        String fileName = canonicalFile.getPath();", "-        int lastIndex = fileName.lastIndexOf(\".dj\");", "-        if (lastIndex != -1) {", "-          /** If compiling a language level file, do not show warnings, as these are not caught by the language level parser */", "-          compiler.setWarningsEnabled(false);", "-          javaFileSet.add(new File(fileName.substring(0, lastIndex) + \".java\"));", "+      // Temporary hack to allow a boot class path to be specified", "+      List<File> bootClassPath = null;", "+      if (System.getProperty(\"drjava.bootclasspath\") != null) {", "+        bootClassPath = new LinkedList<File>();", "+        StringTokenizer st = new StringTokenizer(System.getProperty(\"drjava.bootclasspath\"), File.pathSeparator);", "+        while (st.hasMoreTokens()) {", "+          bootClassPath.add(new File(st.nextToken()));", "-        else javaFileSet.add(canonicalFile);", "-      files = javaFileSet.toArray(new File[javaFileSet.size()]);", "-        ", "-      parseExceptions = errors.getFirst();", "-      compilerErrors.addAll(_parseExceptions2CompilerErrors(parseExceptions));", "-      visitorErrors = errors.getSecond();", "-      compilerErrors.addAll(_visitorErrors2CompilerErrors(visitorErrors));", "-      CompilerError[] compilerErrorsArray = null;", "-      compilerErrorsArray = compilerErrors.toArray(new CompilerError[compilerErrors.size()]);", "-", "-      /** Compile the files in specified sourceRoots and files */", "-    ", "-      if (compilerErrorsArray.length == 0) ", "-        synchronized(_compilerLock) { compilerErrorsArray = compiler.compile(sourceRoots, files); }", "-", "-      _distributeErrors(compilerErrorsArray);", "+      List<CompilerError> errors = new LinkedList<CompilerError>();", "+      ", "+      List<? extends File> preprocessedFiles = _compileLanguageLevelsFiles(files, errors);", "+      ", "+      if (errors.isEmpty()) {", "+        CompilerInterface compiler = CompilerRegistry.ONLY.getActiveCompiler();", "+        ", "+        synchronized(_compilerLock) {", "+          if (preprocessedFiles == null) {", "+            errors.addAll(compiler.compile(files, classPath, null, buildDir, bootClassPath, null, true));", "+          }", "+          else {", "+            /** If compiling a language level file, do not show warnings, as these are not caught by the language level parser */", "+            errors.addAll(compiler.compile(preprocessedFiles, classPath, null, buildDir, bootClassPath, null, false));", "+          }", "+        }", "+      }", "+      _distributeErrors(errors);", "-    else _distributeErrors(new CompilerError[0]);", "+    else { ", "+      // TODO: Is this necessary?", "+      _distributeErrors(Collections.<CompilerError>emptyList());", "+    }"]}], "num": 3288}
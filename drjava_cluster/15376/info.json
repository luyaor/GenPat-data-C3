{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f792ba5abf1707d4d4f33ce94a1515ee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3e2adc7881e31b70e57d918921b1db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b43f29e50ad9a747c307023da2022e85812a7a06", "commitAfterChange": "f9bd2a484c4505cc2dff97c8f9bad6e0c712ff50", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 45, "signatureBeforeChange": "   protected void _clearCache(int offset)", "signatureAfterChange": "   protected void _clearCache(int offset)", "diff": ["-    * document is modified. */", "-  protected void _clearCache(int offset) {", "-    if (_queryCache == null) return;", "-//    synchronized(_reduced) {", "-      if (offset <= 0) {", "-        _queryCache.clear();", "-        _offsetToQueries.clear();", "-        return;", "-      }", "-      ", "-      Integer[] deadOffsets = _offsetToQueries.tailMap(offset).keySet().toArray(new Integer[0]);", "-      for (int i: deadOffsets) {", "-        for (Query query: _offsetToQueries.get(i)) {", "-          _queryCache.remove(query);  // remove query entry from cache", "-        }", "-        _offsetToQueries.remove(i);   // remove query bucket for i from offsetToQueries table", "-      }", "-//    }", "-  }", "+    * document is modified. */", "+  protected void _clearCache(int offset) {", "+    if (_queryCache == null || ! _cacheModified) return;", "+    _cacheModified = false;", "+    ", "+//    synchronized(_reduced) {", "+      if (offset <= 0) {", "+        _queryCache.clear();", "+        _offsetToQueries.clear();", "+        return;", "+      }", "+      ", "+      Integer[] deadOffsets = _offsetToQueries.tailMap(offset).keySet().toArray(new Integer[0]);", "+      for (int i: deadOffsets) {", "+        for (Query query: _offsetToQueries.get(i)) {", "+          _queryCache.remove(query);  // remove query entry from cache", "+        }", "+        _offsetToQueries.remove(i);   // remove query bucket for i from offsetToQueries table", "+      }", "+//    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9c96c3459b20e5700fa510fb14a7ad0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   private void _clearCache()", "signatureAfterChange": "   protected void _clearCache(int offset)", "diff": ["+    * document is modified. */", "+  protected void _clearCache(int offset) {", "+    synchronized(_reduced) {", "+      if (offset < 0) {", "+        _queryCache.clear();", "+        _offsetToQueries.clear();", "+        return;", "+      }", "+      ", "+      Integer[] deadOffsets = _offsetToQueries.tailMap(offset).keySet().toArray(new Integer[0]);", "+      for (int i: deadOffsets) {", "+        for (String query: _offsetToQueries.get(i)) {", "+          _queryCache.remove(query);  // remove query entry from cache", "+        }", "+        _offsetToQueries.remove(i);   // remove query bucket for i from offsetToQueries table", "+      }", "+    }", "-  /** Clears the helper method cache.  Should be called every time the document is modified. */", "-  private void _clearCache() {", "-    _helperCache.clear();", "-    _helperCacheHistory.clear();", "-    _cacheInUse = false;", "-  }"]}], "num": 15376}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e70992366d424c1ebedbc706e02dc2e5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fa3f4fa449e45af0e530bc5fe7435a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "         public void run()", "signatureAfterChange": "       public InterpretResult forSome(Object obj)", "diff": ["-      Thread thread = new Thread(\"interpret thread: \" + input) {", "-        public void run() {", "-          String s = input;", "-          try {  // Delimiting a catch for RemoteExceptions that might be thrown in catch clauses of enclosed try", "-            try {", "-              _log.log(\"Interpreter thread for \" + input + \" has started\");", "-//              _dialog(\"to interp: \" + s);", "-              ", "-//            Utilities.showDebug(\"Preparing to invoke interpret method on \" + s);", "-              Object result = interpreter.getInterpreter().interpret(s);", "-              String resultString = String.valueOf(result);", "-//            Utilities.showDebug(\"Result string is: \" + resultString);", "-              ", "-              if (result == Interpreter.NO_RESULT) {", "-                //return new VoidResult();", "-                //_dialog(\"void interp ret: \" + resultString);", "-                _mainJVM.interpretResult(new VoidResult());", "-              }", "-              else {", "-                // we use String.valueOf because it deals with result = null!", "-                //_dialog(\"about to tell main result was \" + resultString);", "-                //return new ValueResult(resultString);", "-                String style = InteractionsDocument.OBJECT_RETURN_STYLE;", "-                if (result instanceof String) {", "-                  style = InteractionsDocument.STRING_RETURN_STYLE;", "-                  //Single quotes have already been added to chars by now, so they are read as strings", "-                  String possibleChar = (String)result;", "-                  ", "-                  if (possibleChar.startsWith(\"\\'\") && possibleChar.endsWith(\"\\'\") && possibleChar.length()==3)", "-                    style = InteractionsDocument.CHARACTER_RETURN_STYLE;                ", "-                }", "-                if (result instanceof Number) style = InteractionsDocument.NUMBER_RETURN_STYLE;", "-                _mainJVM.interpretResult(new ValueResult(resultString, style));", "-              }", "-            }", "-            catch (ExceptionReturnedException e) {", "-              Throwable t = e.getContainedException();", "-//            Utilities.showStackTrace(t);", "-              _dialog(\"interp exception: \" + t);", "-              // TODO: replace the following if ladder by dynamic dispatch.  Create a visitor for DynamicJava errors?", "-              if (t instanceof ParseException)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((ParseException) t, input));", "-              else if (t instanceof TokenMgrError)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((TokenMgrError) t, input));", "-              else if (t instanceof ParseError)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((ParseError) t, input));", "-              else {", "-                //Other exceptions are non lexical/parse related exceptions. These include arithmetic exceptions, ", "-                //wrong version exceptions, etc.", "-                ", "-                _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(), t.getMessage(),", "-                                                             InterpreterJVM.getStackTrace(t), null));", "-              }                                                                                                                                        ", "-            }", "-            catch (Throwable t) {", "-              // A user's toString method might throw anything, so we need to be careful", "-              _dialog(\"irregular interp exception: \" + t);", "-//            Utilities.showStackTrace(t);", "-              String shortMsg = null;", "-              if ((t instanceof ParseError) &&  ((ParseError) t).getParseException() != null) ", "-                shortMsg = ((ParseError) t).getMessage(); // in this case, getMessage is equivalent to getShortMessage", "-              _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(), t.getMessage(),", "-                                                           InterpreterJVM.getStackTrace(t), shortMsg));", "-            }", "-          }", "-          catch(RemoteException re) { /* MainJVM no longer accessible.  Cannot recover. */  ", "-            _log.log(\"MainJVM.interpret threw \" + re.toString());", "-          }", "-        }", "+      public InterpretResult forNone() { return InterpretResult.noValue(); }", "+      public InterpretResult forSome(Object obj) {", "+        if (obj instanceof String) { debug.logEnd(); return InterpretResult.stringValue((String) obj); }", "+        else if (obj instanceof Character) { debug.logEnd(); return InterpretResult.charValue((Character) obj); }", "+        else if (obj instanceof Number) { debug.logEnd(); return InterpretResult.numberValue((Number) obj); }", "+        else if (obj instanceof Boolean) { debug.logEnd(); return InterpretResult.booleanValue((Boolean) obj); }", "+        else {", "+          try {", "+            String resultString = TextUtil.toString(obj);", "+            debug.logEnd();", "+            return InterpretResult.objectValue(resultString);", "+          }", "+          catch (Throwable t) {", "+            // an exception occurred during toString", "+            debug.logEnd(); ", "+            return InterpretResult.exception(new EvaluatorException(t));", "+          }", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fafe96f6604cd3a44afd7e34d2cbea9f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void interpret(final String input, final InterpreterData interpreter)", "signatureAfterChange": "          private InterpretResult interpret(String input, Interpreter interpreter)", "diff": ["-   */", "-  public void interpret(final String input, final InterpreterData interpreter) {", "-    _log.log(this + \".interpret(\" + input + \") called\");", "-    try {", "-      synchronized(interpreter) { ", "-        if (interpreter.inProgress()) {", "-            _mainJVM.interpretResult(new InterpreterBusy());", "-          return;", "-        }", "-//      interpretationInProgress = true; ", "-      interpreter.setInProgress(true);  // records that a given interpreter is in progress (used by debugger?)", "-      }", "-      // The following code is NOT synchronized on this. Mutual exclusion is guaranteed by preceding synchronized block.", "-//        Utilities.showDebug(\"InterpreterJVM.interpret(\" + input + \", ...) called\");", "-      Thread thread = new Thread(\"interpret thread: \" + input) {", "-        public void run() {", "-          String s = input;", "-          try {  // Delimiting a catch for RemoteExceptions that might be thrown in catch clauses of enclosed try", "-            try {", "-              _log.log(\"Interpreter thread for \" + input + \" has started\");", "-//              _dialog(\"to interp: \" + s);", "-              ", "-//            Utilities.showDebug(\"Preparing to invoke interpret method on \" + s);", "-              Object result = interpreter.getInterpreter().interpret(s);", "-              String resultString = String.valueOf(result);", "-//            Utilities.showDebug(\"Result string is: \" + resultString);", "-              ", "-              if (result == Interpreter.NO_RESULT) {", "-                //return new VoidResult();", "-                //_dialog(\"void interp ret: \" + resultString);", "-                _mainJVM.interpretResult(new VoidResult());", "-              }", "-              else {", "-                // we use String.valueOf because it deals with result = null!", "-                //_dialog(\"about to tell main result was \" + resultString);", "-                //return new ValueResult(resultString);", "-                String style = InteractionsDocument.OBJECT_RETURN_STYLE;", "-                if (result instanceof String) {", "-                  style = InteractionsDocument.STRING_RETURN_STYLE;", "-                  //Single quotes have already been added to chars by now, so they are read as strings", "-                  String possibleChar = (String)result;", "-                  ", "-                  if (possibleChar.startsWith(\"\\'\") && possibleChar.endsWith(\"\\'\") && possibleChar.length()==3)", "-                    style = InteractionsDocument.CHARACTER_RETURN_STYLE;                ", "-                }", "-                if (result instanceof Number) style = InteractionsDocument.NUMBER_RETURN_STYLE;", "-                _mainJVM.interpretResult(new ValueResult(resultString, style));", "-              }", "-            }", "-            catch (ExceptionReturnedException e) {", "-              Throwable t = e.getContainedException();", "-//            Utilities.showStackTrace(t);", "-              _dialog(\"interp exception: \" + t);", "-              // TODO: replace the following if ladder by dynamic dispatch.  Create a visitor for DynamicJava errors?", "-              if (t instanceof ParseException)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((ParseException) t, input));", "-              else if (t instanceof TokenMgrError)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((TokenMgrError) t, input));", "-              else if (t instanceof ParseError)", "-                _mainJVM.interpretResult(new SyntaxErrorResult((ParseError) t, input));", "-              else {", "-                //Other exceptions are non lexical/parse related exceptions. These include arithmetic exceptions, ", "-                //wrong version exceptions, etc.", "-                ", "-                _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(), t.getMessage(),", "-                                                             InterpreterJVM.getStackTrace(t), null));", "-              }                                                                                                                                        ", "-            }", "-            catch (Throwable t) {", "-              // A user's toString method might throw anything, so we need to be careful", "-              _dialog(\"irregular interp exception: \" + t);", "-//            Utilities.showStackTrace(t);", "-              String shortMsg = null;", "-              if ((t instanceof ParseError) &&  ((ParseError) t).getParseException() != null) ", "-                shortMsg = ((ParseError) t).getMessage(); // in this case, getMessage is equivalent to getShortMessage", "-              _mainJVM.interpretResult(new ExceptionResult(t.getClass().getName(), t.getMessage(),", "-                                                           InterpreterJVM.getStackTrace(t), shortMsg));", "-            }", "-          }", "-          catch(RemoteException re) { /* MainJVM no longer accessible.  Cannot recover. */  ", "-            _log.log(\"MainJVM.interpret threw \" + re.toString());", "-          }", "-        }", "-      }; // end of Thread definition", "-      ", "-      thread.setDaemon(true);", "-      thread.start();", "-    } // end of interpretation block including synchronized prelude ", "-    catch(RemoteException re) { /* MainJVM not accessible.  Cannot recover. */  ", "-      _log.log(\"MainJVM.interpret threw\" + re.toString());", "-    }", "-    finally { // fields are volatile so no synchronization is necessary", "-//      interpretationInProgress = false;", "-      interpreter.setInProgress(false); ", "-    }", "-  }", "+   ", "+  private InterpretResult interpret(String input, Interpreter interpreter) {", "+    debug.logStart(\"Interpret \" + input);", "+    ", "+    boolean available = _busyInterpreters.add(interpreter);", "+    if (!available) { debug.logEnd(); return InterpretResult.busy(); }", "+    ", "+    Option<Object> result = null;", "+    try { result = interpreter.interpret(input); }", "+    catch (InterpreterException e) { debug.logEnd(); return InterpretResult.exception(e); }", "+    catch (Throwable e) { debug.logEnd(); return InterpretResult.unexpectedException(e); }", "+    finally { _busyInterpreters.remove(interpreter); }", "+    ", "+    return result.apply(new OptionVisitor<Object, InterpretResult>() {", "+      public InterpretResult forNone() { return InterpretResult.noValue(); }", "+      public InterpretResult forSome(Object obj) {", "+        if (obj instanceof String) { debug.logEnd(); return InterpretResult.stringValue((String) obj); }", "+        else if (obj instanceof Character) { debug.logEnd(); return InterpretResult.charValue((Character) obj); }", "+        else if (obj instanceof Number) { debug.logEnd(); return InterpretResult.numberValue((Number) obj); }", "+        else if (obj instanceof Boolean) { debug.logEnd(); return InterpretResult.booleanValue((Boolean) obj); }", "+        else {", "+          try {", "+            String resultString = TextUtil.toString(obj);", "+            debug.logEnd();", "+            return InterpretResult.objectValue(resultString);", "+          }", "+          catch (Throwable t) {", "+            // an exception occurred during toString", "+            debug.logEnd(); ", "+            return InterpretResult.exception(new EvaluatorException(t));", "+          }", "+        }", "+      }", "+    });", "+  }"]}], "num": 1451}
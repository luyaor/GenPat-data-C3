{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "485a0f8a63bc508ba0cb1cdf0aea074d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab20588dfe14ea52df8a11a98b17bce2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 76, "signatureBeforeChange": "   final public WhileStatement whileStatement() throws ParseException", "signatureAfterChange": "   final public WhileStatement whileStatement() throws ParseException", "diff": ["-    t = jj_consume_token(WHILE);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    stat = statement();", "-      {if (true) return new WhileStatement(exp, stat,", "-                                filename,", "-                                t.beginLine,       t.beginColumn,", "-                                stat.getEndLine(), stat.getEndColumn());}", "+    try {", "+      t = jj_consume_token(WHILE);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      stat = statement();", "+        {if (true) return new WhileStatement(exp, stat,", "+                                  filename,", "+                                  t.beginLine,       t.beginColumn,", "+                                  stat.getEndLine(), stat.getEndColumn());}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid while statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9431dfd1c202a705cfece41bd6ba3a4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": "   final public SynchronizedStatement synchronizedStatement() throws ParseException", "signatureAfterChange": "   final public SynchronizedStatement synchronizedStatement() throws ParseException", "diff": ["-    t = jj_consume_token(SYNCHRONIZED);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    stmt = block();", "-      {if (true) return new SynchronizedStatement(exp, stmt,", "-                                       filename,", "-                                       t.beginLine, t.beginColumn,", "-                                       stmt.getEndLine(), stmt.getEndColumn());}", "+    try {", "+      t = jj_consume_token(SYNCHRONIZED);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      stmt = block();", "+        {if (true) return new SynchronizedStatement(exp, stmt,", "+                                         filename,", "+                                         t.beginLine, t.beginColumn,", "+                                         stmt.getEndLine(), stmt.getEndColumn());}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid synchronized statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e30107b3a40c6fde3b48f2b305dc99f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 77, "signatureBeforeChange": "   final public DoStatement doStatement() throws ParseException", "signatureAfterChange": "   final public DoStatement doStatement() throws ParseException", "diff": ["-    t1 = jj_consume_token(DO);", "-    stat = statement();", "-    jj_consume_token(WHILE);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    t2 = jj_consume_token(SEMICOLON);", "-      {if (true) return new DoStatement(exp, stat,", "-                             filename,", "-                             t1.beginLine, t1.beginColumn,", "-                             t2.endLine,   t2.endColumn);}", "+    try {", "+      t1 = jj_consume_token(DO);", "+      stat = statement();", "+      jj_consume_token(WHILE);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      t2 = jj_consume_token(SEMICOLON);", "+        {if (true) return new DoStatement(exp, stat,", "+                               filename,", "+                               t1.beginLine, t1.beginColumn,", "+                               t2.endLine,   t2.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid do statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7722ccdd6f08b46caa6ae1382b354c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 85, "signatureBeforeChange": "   final public ThrowStatement throwStatement() throws ParseException", "signatureAfterChange": "   final public ThrowStatement throwStatement() throws ParseException", "diff": ["-    b = jj_consume_token(THROW);", "-    exp = expression();", "-    e = jj_consume_token(SEMICOLON);", "-      {if (true) return new ThrowStatement(exp,", "-                                filename,", "-                                b.beginLine, b.beginColumn,", "-                                e.endLine,   e.endColumn);}", "+    try {", "+      b = jj_consume_token(THROW);", "+      exp = expression();", "+      e = jj_consume_token(SEMICOLON);", "+        {if (true) return new ThrowStatement(exp,", "+                                  filename,", "+                                  b.beginLine, b.beginColumn,", "+                                  e.endLine,   e.endColumn);}", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid throw statement\");", "+    }"]}], "num": 31161}
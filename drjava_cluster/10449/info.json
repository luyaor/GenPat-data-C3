{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dedfce231ce070a8791ff8a5d34e5838", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00fb899eb665103aec0d201a815b83b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "bffcae721f8dbc844dc8a667963f0caab39047ea", "commitAfterChange": "0af0c72004872701891228fa18659a3204fb6e2f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private static FullVersion guessVersion(File f, CompoundJDKDescriptor desc)", "signatureAfterChange": "      private static FullVersion guessVersion(File f)", "diff": ["-  private static FullVersion guessVersion(File f, CompoundJDKDescriptor desc) {", "+  private static FullVersion guessVersion(File f) {", "-    List<Lambda3<String,String,String,String>> detectors;", "-    if (desc!=null) {", "-      detectors = Collections.<Lambda3<String,String,String,String>>singletonList(desc.getDetector());", "-    }", "-    else {", "-      detectors = Collections.<Lambda3<String,String,String,String>>emptyList();", "-    }", "-", "-      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor,detectors); }", "-      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor,detectors); }", "-      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor,detectors); }", "+      else if (path.toLowerCase().contains(\"sun\")) vendor = \"sun\";", "+      if (name.startsWith(\"jdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor); }", "+      else if (name.startsWith(\"j2sdk\")) { result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor); }", "+      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) { result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor); }", "-            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor,detectors);", "+            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor);", "-    // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "-    if ((result == null) ||", "-        (result.vendor()==JavaVersion.VendorType.UNKNOWN &&", "-         result.majorVersion().compareTo(JavaVersion.JAVA_6)>=0) ||", "-        (f.getAbsolutePath().toLowerCase().contains(\"mint\"))) {", "-      JarFile jf = null;", "-      try {", "-        jf = new JarFile(f);", "-        if (jf.getJarEntry(\"edu/rice/cs/mint/comp/TransStaging.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/BracketExprTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/BracketStatTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/EscapeExprTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/source/tree/EscapeStatTree.class\")!=null &&", "-            jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null) {", "-          vendor = \"mint\";", "-        }    ", "-        else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")==null) {", "-          vendor = \"openjdk\";", "-        }", "-        else {", "-          vendor = \"sun\";", "-        }", "-        result = JavaVersion.parseFullVersion(parsedVersion,vendor,vendor,detectors);", "+    ", "+    if ((result == null) || (result.vendor()==JavaVersion.VendorType.UNKNOWN)) {", "+      if (result.majorVersion().compareTo(JavaVersion.JAVA_6)<0) {", "+        // Java 5 or earlier, assume Sun", "+        vendor = \"sun\";", "-      catch(IOException ioe) { /* keep existing version */ }", "-      finally {", "+      else {", "+        // distinguish Sun Java 6 and OpenJDK 6 if it is still unknown", "+        JarFile jf = null;", "-          if (jf != null) jf.close();", "+          jf = new JarFile(f);", "+          if (jf.getJarEntry(\"com/sun/tools/javac/util/JavacFileManager.class\")!=null) {", "+            // NOTE: this may cause Sun's Java 7 to also be recognized as openjdk", "+            vendor = \"openjdk\";", "+          }", "+          else if (jf.getJarEntry(\"com/sun/tools/javac/util/DefaultFileManager.class\")!=null) {", "+            vendor = \"sun\";", "+          }", "-        catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+        catch(IOException ioe) { /* keep existing version */ }", "+        finally {", "+          try {", "+            if (jf != null) jf.close();", "+          }", "+          catch(IOException ioe) { /* ignore, just trying to close the file */ }", "+        }", "+      result = JavaVersion.parseFullVersion(parsedVersion,vendor,vendor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75c829a42ac2694c35582131a51b99d9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public DefinitionsDocument get(OpenDefinitionsDocument odd) throws IOException, FileMovedException", "signatureAfterChange": "     public synchronized DefinitionsDocument getDocument()        throws IOException, FileMovedException", "diff": ["-   */", "-  public DefinitionsDocument get(OpenDefinitionsDocument odd) throws IOException, FileMovedException{", "-    DefinitionsDocument retdoc;", "-    Pair<DefinitionsDocument,DDReconstructor> pair = table.get(odd);", "-    if(pair == null){", "-      throw new NoSuchDocumentException(\"Cannot obtain the definitions document for: \" + odd);", "-    }", "-    retdoc = pair.getFirst();", "-    updatelru(odd, pair);", "-//    System.out.println(this);", "-    if(retdoc == null){", "-      try{", "-//        System.out.println(\"DocumentCache.java: 114: creating document from reconstructor for \" + odd);", "-        retdoc = pair.getSecond().make();", "-        pair = new Pair<DefinitionsDocument,DDReconstructor>(retdoc, pair.getSecond());", "-        table.remove(odd);", "-        table.put(odd, pair);", "-      } catch(BadLocationException e){", "-        throw new UnexpectedException(e);", "-      }", "-    }", "-    return retdoc;", "-  }", "+     */", "+    public synchronized DefinitionsDocument getDocument() ", "+      throws IOException, FileMovedException {", "+        ", "+      if (_stat != FIRST_IN_LRU && ", "+          _stat != UNMANAGED) {", "+        makeMeFirst();", "+      }", "+      else if (_stat == UNMANAGED && _doc !=null && ", "+               !_doc.isModifiedSinceSave()) {", "+        _stat = NOT_IN_LRU;", "+      }", "+", "+      if (_doc != null) {", "+        return _doc;", "+      }", "+      else {", "+        try {", "+          _doc = _rec.make();", "+          if (_doc == null) ", "+            throw new IllegalStateException(\"the reconstructor made a null document\");", "+        }", "+        catch(BadLocationException e) {", "+          throw new UnexpectedException(e);", "+        }", "+        return _doc;", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a306367a35aab1e4904c4f305d072097", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "4276346051c6ab89c146c0041be28826e7dfbe12", "commitAfterChange": "86bed99990f6eb7fff2cb31d595e17b49135df26", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public synchronized boolean closeFiles(List<OpenDefinitionsDocument> docList)", "signatureAfterChange": "   public synchronized boolean closeFiles(List<OpenDefinitionsDocument> docList, boolean together)", "diff": ["-  public synchronized boolean closeFiles(List<OpenDefinitionsDocument> docList) {", "-    OpenDefinitionsDocument last = null;", "-    Iterator<OpenDefinitionsDocument> it = docList.iterator();", "-    while(it.hasNext()) {", "-      last = it.next();", "-      if(it.hasNext())", "-        closeFile(last);      ", "-    }", "-    if(last != null) {", "-      IDocumentNavigator nav = getDocumentNavigator();", "-      INavigatorItem switchTo = nav.getNext(getIDocGivenODD(last));", "-      /** if we can't move forward, go backwards */", "-      if( switchTo == getIDocGivenODD(last)) {", "-        switchTo = nav.getPrevious(switchTo);", "-      }", "-      ", "-      //close the last file", "-      if (closeFile(last))", "-      {        ", "-        if(getDocumentCount() == 1){", "-          setActiveFirstDocument();", "-        }", "-        else {", "-          /* this will select the active document in the navigator, which", "-           * will signal a listener to call _setActiveDoc(...)", "-           */", "-          nav.setActiveDoc(switchTo);", "-        }", "-      }", "-      else", "-      {", "-        nav.setActiveDoc(getIDocGivenODD(last)); ", "+  public synchronized boolean closeFiles(List<OpenDefinitionsDocument> docList, boolean together) {", "+    if (docList.size() == 0) return true;", "+", "+    if (together) { // if together then do all prompting at once", "+      for (OpenDefinitionsDocument doc : docList) {", "+        if (!doc.canAbandonFile()) return false;", "+    ", "+    // create new file before you start closing in order to have ", "+    // an active file that's not in the list of closing files.", "+    // If the current active document is closed before the MainFrame", "+    // can switch to a new file, drjava throws some unexpected exceptions", "+    // relating to the document not being found.", "+    OpenDefinitionsDocument newDoc = null;", "+    if (docList.size() == getDefinitionsDocumentsSize()) newDoc = newFile();", "+    _ensureNotActive(docList);", "+        ", "+    // Close all files. If together, then don't let it prompt a 2nd time;", "+    // but, if not together, then call closeFile which may prompt the user.", "+    for (OpenDefinitionsDocument doc : docList) {", "+      if (together) {", "+        super.closeFileWithoutPrompt(doc);", "+      }", "+      else if (!super.closeFile(doc)) {", "+        setActiveDocument(doc);", "+        if (newDoc != null) super.closeFile(newDoc); // undo previous newFile() ", "+        return false;", "+      }", "+    }", "+        "]}], "num": 10449}
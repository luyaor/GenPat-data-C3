{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc2c7a1068461c28ca44f6294e3ed346", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d8d2698e8c2aa9d0f5673fa82a307c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacCompiler.java", "commitBeforeChange": "e6fa54ed979b83446e1beb2860a027fb0270836a", "commitAfterChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public static String transformRunCommand(String s)", "signatureAfterChange": "   public static String transformRunCommand(String s)", "diff": ["-    // check the return type and public access before executing, per bug #1585210", "-    String command = ", "-      \"'{' boolean isProgram = false; boolean isApplet = false; Class c = {0}.class;\\n\" +", "-      // cannot use Class.forName, doesn't work in Interactions Pane (see bug #1080869)", "-      \"while(c != null) '{'\\n\" +", "-      \"  if (\\\"acm.program.Program\\\".equals(c.getName()) ||\\n\" +", "-      \"      \\\"acm.graphics.GTurtle\\\".equals(c.getName())) '{' isProgram = true; break; '}'\\n\" +", "-      \"  c = c.getSuperclass();\\n\" +", "-      \"'}'\\n\" +", "-      \"if (!isProgram) '{'\\n\" +", "-      \"  try '{'\\n\" +", "-      // if this doesn't throw, {0} is a subclass of Applet", "-      \"    {0}.class.asSubclass(java.applet.Applet.class);\\n\" +", "-      \"    isApplet = true;\\n\" +", "-      \"  '}' catch(ClassCastException cce) '{' '}'\\n\" +", "-      \"'}'\\n\" +", "-      \"java.lang.reflect.Method m = null;\\n\" +", "-      \"String[] args = null;\\n\" +", "-      \"if (isApplet) '{'\\n\" +", "-      \"  try '{'\\n\" +", "-      \"    m = {0}.class.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "-      \"    if (!m.getReturnType().equals(void.class)) m = null;\\n\" +", "-      \"'}'\\n\" +", "-      \"  catch (java.lang.NoSuchMethodException e) '{' m = null; '}'\\n\" +", "-      \"  if (m==null) edu.rice.cs.plt.swing.SwingUtil.showApplet(java.applet.Applet.class.cast(new {0}({1})), 400, 300);\\n\" +", "-      \"'}'\\n\" +", "-      \"else '{'\\n\" +", "-      \"  try '{'\\n\" +", "-      \"    m = {0}.class.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "-      \"    if (!m.getReturnType().equals(void.class)) throw new java.lang.NoSuchMethodException();\\n\" +", "-      \"  '}'\\n\" +", "-      \"  catch (java.lang.NoSuchMethodException e) '{'\\n\" +", "-      \"    throw new java.lang.NoSuchMethodError(\\\"main\\\");\\n\" +", "-      \"  '}'\\n\" +", "-      \"  args = new String[]'{'{1}'}';\\n\" +", "-      \"  if (isProgram) '{'\\n\" +", "-      \"    String[] newArgs = new String[args.length+1];\\n\" +", "-      \"    newArgs[0] = \\\"code={0}\\\";\\n\" +", "-      \"    System.arraycopy(args, 0, newArgs, 1, args.length);\\n\" +", "-      \"    args = newArgs;\\n\" +", "-      \"  '}'\\n\" +", "-      \"'}'\\n\" +", "-      \"if (m!=null) '{'\\n\"+", "-      \"  try '{'\" +", "-      \"    m.setAccessible(true);\\n\" +", "-      \"    m.invoke(null, new Object[] '{' args '}');\\n\" +", "-      \"  '}' catch(SecurityException se) '{'\\n\" +", "-      \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-      \"  '}' catch(IllegalAccessException iae) '{'\\n\" +", "-      \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-      \"  '}' catch(java.lang.reflect.InvocationTargetException ite) '{'\\n\" +", "-      \"    if (ite.getCause()!=null) throw ite.getCause(); else\\n\" +", "-      \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-      \"'}' '}' '}'\";", "-    return _transformCommand(s, command);", "+    if (s.endsWith(\";\"))  s = _deleteSemiColon(s);", "+    List<String> tokens = ArgumentTokenizer.tokenize(s, true);", "+    final String classNameWithQuotes = tokens.get(1); // this is \"MyClass\"", "+    final String className =", "+      classNameWithQuotes.substring(1, classNameWithQuotes.length() - 1); // removes quotes, becomes MyClass", "+    String[] args = new String[tokens.size() - 2];", "+    final StringBuilder argsString = new StringBuilder();", "+    boolean seenArg = false;", "+    for (int i = 2; i < tokens.size(); i++) {", "+      String t = tokens.get(i); // with quotes", "+      args[i - 2] = t.substring(1, t.length() - 1);", "+      ", "+      if (seenArg) argsString.append(\",\");", "+      else seenArg = true;", "+      argsString.append(t);", "+    }", "+    ", "+    StringBuilder command = new StringBuilder();", "+    ", "+    command.append(\"{\\n\"+", "+       \"boolean isProgram = false;\\n\" +", "+       \"boolean isApplet = false;\\n\" +", "+       \"Class c = \").append(className).append(\".class;\\n\" +", "+       \"while(c != null) {\\n\" +", "+       \"  if (\\\"acm.program.Program\\\".equals(c.getName()) ||\\n\" +", "+       \"      \\\"acm.graphics.GTurtle\\\".equals(c.getName())) { isProgram = true; break; }\\n\" +", "+       \"  c = c.getSuperclass();\\n\" +", "+       \"}\\n\" +", "+       \"c = \").append(className).append(\".class;\\n\" +", "+       \"if (!isProgram) {\\n\" +", "+       \"  try {\\n\" +", "+       \"    // if this doesn't throw, c is a subclass of Applet\\n\" +", "+       \"    c.asSubclass(java.applet.Applet.class);\\n\" +", "+       \"    isApplet = true;\\n\" +", "+       \"  } catch(ClassCastException cce) { }\\n\" +", "+       \"}\\n\" +", "+       \"java.lang.reflect.Method m = null;\\n\" +", "+       \"String[] args = new String[] {\").append(argsString.toString()).append(\"};\\n\" +", "+       \"if (isApplet) {\\n\" +", "+       \"  try {\\n\" +", "+       \"    m = c.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "+       \"    if (!m.getReturnType().equals(void.class)) { m = null; }\\n\" +", "+       \"  }\\n\" +", "+       \"  catch (java.lang.NoSuchMethodException e) { m = null; }\\n\" +", "+       \"  if (m==null) {\\n\" +", "+       \"    java.applet.Applet instance = null;\\n\" +", "+       \"    boolean fail = false;\\n\");", "+    if (args.length==0) {", "+      command.append(", "+       \"    try {\\n\" +", "+       \"      // try default (nullary) constructor first\\n\" +", "+       \"      java.lang.reflect.Constructor ctor = c.getConstructor();\\n\" +", "+       \"      instance = java.applet.Applet.class.cast(ctor.newInstance());\\n\" +", "+       \"    }\\n\" +", "+       \"    catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "+       \"    catch(InstantiationException ie) { instance = null; }\\n\" +", "+       \"    catch(IllegalAccessException iae) { instance = null; }\\n\" +", "+       \"    catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "+       \"      if (ite.getCause()!=null) {\\n\" +", "+       \"        throw ite.getCause();\\n\" +", "+       \"      }\\n\" +", "+       \"      else {\\n\" +", "+       \"        System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "+       \"      }\\n\" +", "+       \"    }\\n\" +", "+       \"    if (instance==null) {\\n\" +", "+       \"      try {\\n\" +", "+       \"        // try String[] constructor next\\n\" +", "+       \"        java.lang.reflect.Constructor ctor = c.getConstructor(String[].class);\\n\" +", "+       \"        instance = java.applet.Applet.class.cast(ctor.newInstance(new Object[] { new String[0] }));\\n\" +", "+       \"      }\\n\" +", "+       \"      catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "+       \"      catch(InstantiationException ie) { instance = null; }\\n\" +", "+       \"      catch(IllegalAccessException iae) { instance = null; }\\n\" +", "+       \"      catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "+       \"        if (ite.getCause()!=null) {\\n\" +", "+       \"          throw ite.getCause();\\n\" +", "+       \"        }\\n\" +", "+       \"        else {\\n\" +", "+       \"          System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "+       \"          fail = true;\\n\" +", "+       \"        }\\n\" +", "+       \"      }\\n\" +", "+       \"    }\\n\" +", "+       \"    if (!fail && (instance==null)) {\\n\" +", "+       \"      System.err.println(\\\"Error: This applet does not have a default constructor or a constructor \\\"+\\n\" +", "+       \"                         \\\"accepting String[].\\\");\\n\" +", "+       \"      fail = true;\\n\" +", "+       \"    }\\n\");", "+    }", "+    else {", "+      command.append(", "+       \"    try {\\n\" +", "+       \"      // try String[] constructor\\n\" +", "+       \"      java.lang.reflect.Constructor ctor = c.getConstructor(String[].class);\\n\" +", "+       \"      instance = java.applet.Applet.class.cast(ctor.newInstance(new Object[] { args }));\\n\" +", "+       \"    }\\n\" +", "+       \"    catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "+       \"    catch(InstantiationException ie) { instance = null; }\\n\" +", "+       \"    catch(IllegalAccessException iae) { instance = null; }\\n\" +", "+       \"    catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "+       \"      if (ite.getCause()!=null) {\\n\" +", "+       \"        throw ite.getCause();\\n\" +", "+       \"      }\\n\" +", "+       \"      else {\\n\" +", "+       \"        System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "+       \"        fail = true;\\n\" +", "+       \"      }\\n\" +", "+       \"    }\\n\" +", "+       \"    if (!fail && (instance==null)) {\\n\" +", "+       \"      System.err.println(\\\"Error: This applet does not have a constructor accepting String[].\\\");\\n\" +", "+       \"      fail = true;\\n\" +", "+       \"    }\\n\");", "+    }", "+    command.append(", "+       \"    if (!fail) { edu.rice.cs.plt.swing.SwingUtil.showApplet(instance, 400, 300); }\\n\" +", "+       \"  } // if (m==null)\\n\" +", "+       \"} // if (isApplet)\\n\" +", "+       \"else {\\n\" +", "+       \"  try {\\n\" +", "+       \"    m = c.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "+       \"    if (!m.getReturnType().equals(void.class)) {\\n\" +", "+       \"      System.err.println(\\\"Error: This class does not have a static void main method accepting String[].\\\");\\n\" +", "+       \"      m = null;\\n\" +", "+       \"    }\\n\" +", "+       \"  }\\n\" +", "+       \"  catch (java.lang.NoSuchMethodException e) {\\n\" +", "+       \"    System.err.println(\\\"Error: This class does not have a static void main method accepting String[].\\\");\\n\" +", "+       \"    m = null;\\n\" +", "+       \"  }\\n\" +", "+       \"} // else\\n\" +", "+       \"if (m != null) {\\n\" +", "+       \"  if (isProgram) {\\n\" +", "+       \"    String[] newArgs = new String[args.length+1];\\n\" +", "+       \"    newArgs[0] = \\\"code=\\\"+c.getName();\\n\" +", "+       \"    System.arraycopy(args, 0, newArgs, 1, args.length);\\n\" +", "+       \"    args = newArgs;\\n\" +", "+       \"  }\\n\" +", "+       \"  try {\\n\" +", "+       \"    m.setAccessible(true);\\n\" +", "+       \"    m.invoke(null, new Object[] { args });\\n\" +", "+       \"  }\\n\" +", "+       \"  catch(SecurityException se) {\\n\" +", "+       \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "+       \"  }\\n\" +", "+       \"  catch(IllegalAccessException iae) {\\n\" +", "+       \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "+       \"  }\\n\" +", "+       \"  catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "+       \"    if (ite.getCause()!=null) {\\n\" +", "+       \"      throw ite.getCause();\\n\" +", "+       \"    }\\n\" +", "+       \"    else {\\n\" +", "+       \"      System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "+       \"    }\\n\" +", "+       \"  }\\n\" +", "+       \"}\\n\" +", "+    \"}\");", "+    ", "+    // System.out.println(command);", "+", "+    return command.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2ff77c924fc0c1940baec138503b498", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "0707afe81b4d2dfe9c2f27d4ef0cf8fcb3dfd8ff", "commitAfterChange": "a2ecf7f1dd3c4baa5e86a7675beca418200c8154", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "diff": ["-  public void testDocumentPaneMemoryLeak()  throws InterruptedException, java.io.IOException {", "+  public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException {", "+", "+    // print identity hash codes into a StringBuilder in case we need them later;", "+    // this does not create any references", "+    StringBuilder sbIdHashCodes = new StringBuilder();", "+    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "+    sbIdHashCodes.append(\"p2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "+    sbIdHashCodes.append(\"p3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "+    sbIdHashCodes.append(\"p4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "+    sbIdHashCodes.append(\"p5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "+    sbIdHashCodes.append(\"p6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "+    sbIdHashCodes.append(\"d1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "+    sbIdHashCodes.append(\"d2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "+    sbIdHashCodes.append(\"d3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "+    sbIdHashCodes.append(\"d4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "+    sbIdHashCodes.append(\"d5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "+    sbIdHashCodes.append(\"d6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "+", "-    ", "-    if (ct == 10) fail(\"Failed to reclaim all documents; panes left = \" + (6 - _finalPaneCt) + \"; docs left = \" + ", "-                       (6 - _finalDocCt));", "-    ", "+", "+    if (ct == 10) {", "+      // if we fail with a garbage collection problem, dump heap", "+      LOG.setEnabled(true);", "+      LOG.log(sbIdHashCodes.toString());", "+      try { LOG.log(\"heap dump in \"+dumpHeap()); }", "+      catch(Exception e) {", "+        System.err.println(\"Could not dump heap.\");", "+        e.printStackTrace(System.err);", "+      }", "+      ", "+      fail(\"Failed to reclaim all documents; panes left = \" + (6 - _finalPaneCt) + \"; docs left = \" + ", "+           (6 - _finalDocCt));", "+    }", "+"]}], "num": 7043}
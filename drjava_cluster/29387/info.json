{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6116bd1f4bfdd87b303cbc5745cbd5fb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21545cd3c382dfd2d1f9893909b9a3ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/NewJVMTest.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "    public void testToStringThrowsRuntimeException() throws Throwable", "signatureAfterChange": "    public void testToStringThrowsRuntimeException() throws Throwable", "diff": ["+    debug.logStart();", "-    synchronized(_testLock) {", "-      _jvm.interpret(", "-        \"class A { public String toString() { throw new RuntimeException(); } };\" +", "-        \"new A()\");", "-      _testLock.wait();", "-      assertTrue(\"exception should have been thrown by toString\",", "-                 _jvm.exceptionClassBuf != null);", "-    }", "+    ", "+    _jvm.interpret(\"class A { public String toString() { throw new RuntimeException(); } };\" +", "+                   \"new A()\");", "+    assertTrue(\"exception should have been thrown by toString\",", "+               _jvm.exceptionMsgBuf != null);", "+    ", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a85db6e1215b3f463587dea9d7f453", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/NewJVMTest.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void testThrowRuntimeException() throws Throwable", "signatureAfterChange": "     public void testThrowRuntimeException() throws Throwable", "diff": ["+    debug.logStart();", "-    synchronized(_testLock) {", "-      _jvm.interpret(\"throw new RuntimeException();\");", "-      _testLock.wait();", "-      assertEquals(\"exception class\", \"java.lang.RuntimeException\", _jvm.exceptionClassBuf);", "-    }", "+    ", "+    _jvm.interpret(\"throw new RuntimeException();\");", "+    assertTrue(\"exception message\", _jvm.exceptionMsgBuf.startsWith(\"java.lang.RuntimeException\"));", "+    // TODO: eliminate the unnecessary stack trace from the error message (replacing with an", "+    // accurate stack trace from the interpreted language's point of view)", "+", "+    debug.logEnd();"]}], "num": 29387}
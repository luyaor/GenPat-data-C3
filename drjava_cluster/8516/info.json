{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abf878c5fa76fb3d810d582a21530e52", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c35aa4344f79a1ce46a327d1ffd26d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Void forAnonymousClassInstantiation(AnonymousClassInstantiation e)", "signatureAfterChange": "   public Void forAnonymousClassInstantiation(AnonymousClassInstantiation e)", "diff": ["-    if (_isElementaryFile() || _isIntermediateFile()) {", "-      String className = Data.dollarSignsToDots(e.getType().getName());", "-      writeAccessors(sd, baseIndent);", "-      String valueToStringName = writeValueToString(sd, baseIndent);", "-      String valueEqualsName = writeValueEquals(sd, baseIndent);", "-      String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "-      writeToString(sd, baseIndent, valueToStringName);", "-      if (!_safeSupportCode) { writeAnonEquals(baseIndent);}", "-      else { writeEquals(className, sd, baseIndent, valueEqualsName); }", "-      writeHashCode(className, sd, baseIndent, true, valueHashCodeName);", "-      _writeToFileOut(indentString(baseIndent, 0));", "-", "-    }", "+//    if (_isElementaryFile() || _isIntermediateFile()) {", "+    String className = Data.dollarSignsToDots(e.getType().getName());", "+    writeAccessors(sd, baseIndent);", "+    String valueToStringName = writeValueToString(sd, baseIndent);", "+    String valueEqualsName = writeValueEquals(sd, baseIndent);", "+    String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "+    writeToString(sd, baseIndent, valueToStringName);", "+    if (!_safeSupportCode) { writeAnonEquals(baseIndent);}", "+    else { writeEquals(className, sd, baseIndent, valueEqualsName); }", "+    writeHashCode(className, sd, baseIndent, true, valueHashCodeName);", "+    _writeToFileOut(indentString(baseIndent, 0));", "+    ", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f4aa36f7593b823216b6f360515a4b8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public Void forClassDef(ClassDef cd)", "signatureAfterChange": "   public Void forClassDef(ClassDef cd)", "diff": ["-", "-    ModifiersAndVisibility m = cd.getMav();", "-    if (_isElementaryFile() && sd.hasModifier(\"public\")) { ", "-      // If this is an Elementary level file that we augmented with \"public\", then we need to", "-      // augment the .java file with \"public\".  We should do this for all TestCase files.", "+    ModifiersAndVisibility m = cd.getMav();", "+    String[] modifiers = m.getModifiers();", "+    ", "+    /* Support legacy Elementary level (dj0) files by generating a Junit import statement if this import has", "+     * been auto-generated. */", "+", "+    if (sd.hasAutoGeneratedJunitImport()) {", "+      // import statement should be OK here because language level test files can only contain one class. */", "+      _writeToFileOut(\"import junit.framework.TestCase;\" + newLine);  ", "+    }", "+    ", "+    /* Support legacy Elementary level (dj0) files by add \"public \" prefix to classes that must be public (TestCase ", "+     * files). */", "+    if (sd.hasModifier(\"public\") && (! Utilities.isPublic(m.getModifiers()))) {", "+      assert ! Utilities.hasVisibilityModifier(modifiers);", "-", "+    ", "-    // Do all that crazy augmentation stuff.", "-    if (_isElementaryFile() || _isIntermediateFile()) {", "-      writeConstructor(className, sd, baseIndent);", "-      writeAccessors(sd, baseIndent);", "-      String valueToStringName = writeValueToString(sd, baseIndent);", "-      String valueEqualsName = writeValueEquals(sd, baseIndent);", "-      String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "-      writeToString(sd, baseIndent, valueToStringName);", "-      writeEquals(className, sd, baseIndent, valueEqualsName);", "-      writeHashCode(className, sd, baseIndent, false, valueHashCodeName);", "-      for (String s : _endOfClassVarDefs) {", "-        _writeToFileOut(newLine + indentString(baseIndent, 1) + s);", "-      }", "-      if (_endOfClassVarDefs.size() > 0) {", "+    // Augment this class declaration", "+    writeConstructor(className, sd, baseIndent);", "+    writeAccessors(sd, baseIndent);", "+    String valueToStringName = writeValueToString(sd, baseIndent);", "+    String valueEqualsName = writeValueEquals(sd, baseIndent);", "+    String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "+    writeToString(sd, baseIndent, valueToStringName);", "+    writeEquals(className, sd, baseIndent, valueEqualsName);", "+    writeHashCode(className, sd, baseIndent, false, valueHashCodeName);", "+    for (String s : _endOfClassVarDefs) {", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + s);", "+    }", "+    if (_endOfClassVarDefs.size() > 0) {", "-      }", "-      _writeToFileOut(indentString(baseIndent, 0));", "-", "+    _writeToFileOut(indentString(baseIndent, 0));", "-"]}], "num": 8516}
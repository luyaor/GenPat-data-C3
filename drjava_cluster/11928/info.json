{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d40a2327d72bdcabca0a0fb50576f0b2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86a60c1a2964aa88fd4d0905df840270", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "          public void testForInterfaceDef()", "signatureAfterChange": "          public void testForInterfaceDef()", "diff": ["-      InterfaceDef id = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Lisa\"),", "-                                         new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superI\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      InterfaceDef id = new InterfaceDef(NONE, _publicMav, new Word(NONE, \"Lisa\"),", "+                                         new TypeParameter[0], ", "+                                         new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superI\", new Type[0])}, ", "+                                         new BracedBody(NONE, new BodyItemI[0]));", "-      InterfaceDef id2 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"somewhereElse.Lisa\"),", "-                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superI\",  new Type[0])},", "-                                  new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-                                  ", "-                                  ", "+      InterfaceDef id2 = new InterfaceDef(NONE, _publicMav, new Word(NONE, \"somewhereElse.Lisa\"),", "+                                          new TypeParameter[0], ", "+                                          new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superI\",  new Type[0])},", "+                                          new BracedBody(NONE, new BodyItemI[0]));                          ", "-      assertEquals(\"The error message should be correct\", \"The interface superI is private and cannot be accessed from somewhereElse.Lisa\", errors.get(1).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"The interface superI in superI is private and cannot be accessed from somewhereElse.Lisa\", ", "+                   errors.get(1).getFirst());", "-//      InterfaceDef id3 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"JimesH\"),", "-//                                  new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Runnable\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+//      InterfaceDef id3 = ", "+//        new InterfaceDef(NONE, _publicMav, new Word(NONE, \"JimesH\"),", "+//                         new TypeParameter[0], ", "+//                         new ReferenceType[] {new ClassOrInterfaceType(NONE, \"java.lang.Runnable\", new Type[0])},", "+//                         new BracedBody(NONE, new BodyItemI[0]));", "-//      assertEquals(\"The error message should be correct\", \"JimesH extends the Runnable interface, which is not allowed at any language level\", errors.get(2).getFirst());", "+//      assertEquals(\"The error message should be correct\", ", "+//                   \"JimesH extends the Runnable interface, which is not allowed at any language level\", ", "+//                   errors.get(2).getFirst());", "-      InterfaceDef id4 = new InterfaceDef(SourceInfo.NO_INFO, _publicMav, new Word(SourceInfo.NO_INFO, \"Bart\"),", "-                                         new TypeParameter[0], new ReferenceType[] {new ClassOrInterfaceType(SourceInfo.NO_INFO, \"superC\", new Type[0])}, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-", "-      //Test that no cyclic inheritance goes okay", "+      InterfaceDef id4 = ", "+        new InterfaceDef(NONE, _publicMav, new Word(NONE, \"Bart\"),", "+                         new TypeParameter[0], ", "+                         new ReferenceType[] {new ClassOrInterfaceType(NONE, \"superC\", new Type[0])}, ", "+                         new BracedBody(NONE, new BodyItemI[0])); ", "+      // Test that no cyclic inheritance goes okay"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9445c61c1e57b98c0a68b0716777fa91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "          public void testCheckDuplicateExceptions()", "signatureAfterChange": "          public void testCheckDuplicateExceptions()", "diff": ["-      UninitializedVariableDeclarator uvd1 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Exception\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "-      UninitializedVariableDeclarator uvd2 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"RuntimeException\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "-      UninitializedVariableDeclarator uvd3 = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"IOException\", new Type[0]), new Word(SourceInfo.NO_INFO, \"e\"));", "+      UninitializedVariableDeclarator uvd1 = ", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Exception\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+      UninitializedVariableDeclarator uvd2 = ", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"RuntimeException\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"e\"));", "+      UninitializedVariableDeclarator uvd3 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new ClassOrInterfaceType(SourceInfo.NO_INFO, \"IOException\", new Type[0]), ", "+                                            new Word(SourceInfo.NO_INFO, \"e\"));", "-      LanguageLevelVisitor llv = new LanguageLevelVisitor(new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), ", "-                                      new LinkedList<String>(), new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "+      LanguageLevelVisitor llv = ", "+        new LanguageLevelVisitor(new File(\"\"), \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                 new LinkedList<String>(), new Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>>());", "-      //just one exception, no error", "+      // Just one exception, no error", "-      //2nd exception is subclass of 1st exception: should throw error", "+      // Second exception is subclass of 1st exception: should throw error", "+//      System.out.println(\"First error is: \" + errors.get(0));", "-      //two exceptions, unrelated.  no error", "+      // Two exceptions, unrelated.  no error", "-", "-      //2nd and 3rd exceptions subclasses of 1st exception: should throw 2 errors", "+      ", "+      // 2nd and 3rd exceptions subclasses of 1st exception: should throw 2 errors, but one is a duplicate ", "-      assertEquals(\"Should be three errors\", 3, errors.size());", "-      assertEquals(\"2nd Error message should be correct\", \"Exception java.lang.RuntimeException has already been caught\", errors.get(1).getFirst());", "-      assertEquals(\"3rd Error message should be correct\", \"Exception java.io.IOException has already been caught\", errors.get(2).getFirst());", "+", "+      assertEquals(\"Should be two errors\", 2, errors.size());", "+      assertEquals(\"2nd Error message should be correct\", \"Exception java.lang.RuntimeException has already been caught\", errors.get(0).getFirst());", "+      assertEquals(\"3rd Error message should be correct\", \"Exception java.io.IOException has already been caught\", errors.get(1).getFirst());", "-      //1st exception subclass of 2nd exception: should be no error", "+      // 1st exception subclass of 2nd exception: should be no error", "-      assertEquals(\"Should still be three errors\", 3, errors.size());", "+      assertEquals(\"Should still be two errors\", 2, errors.size());"]}], "num": 11928}
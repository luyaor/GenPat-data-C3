{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3113bbca73b3e647e521cd1ea6fafddd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53f815700620083ada43636141d43dbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsComment.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-   */", "+    */", "-    // If the start of the current line is the start of the", "-    // document, there was no previous line and so this", "-    // line must have started the comment", "-    if (cursor == AbstractDJDocument.DOCSTART) {", "-      return false;", "-    } else {", "-      // Move the cursor to the previous line", "-      cursor = cursor - 1;", "-      ", "-      // Move it to the start of the previous line", "-      cursor = doc.getLineStartPos(cursor);", "-      ", "-      // Return if the start of the previous line is", "-      // in a comment.", "-      //BraceReduction reduced = doc.getReduced();", "-      doc.resetReducedModelLocation();", "-      ReducedModelState state = doc.stateAtRelLocation(cursor -", "-          doc.getCurrentLocation());", "-      return !state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT);", "-    }", "+    /* If the start of the current line is the start of the document, there was no previous line and so this line must ", "+     * have started the comment. */", "+    if (cursor == AbstractDJDocument.DOCSTART) return false;", "+    ", "+    // Move the cursor to the previous line", "+    cursor = cursor - 1;", "+    ", "+    // Move it to the start of the previous line", "+    cursor = doc.getLineStartPos(cursor);", "+    ", "+    // Return if the start of the previous line is in a comment.", "+//    BraceReduction reduced = doc.getReduced();", "+    doc.resetReducedModelLocation();", "+    ReducedModelState state = doc.stateAtRelLocation(cursor - doc.getCurrentLocation());", "+    return !state.equals(ReducedModelStates.INSIDE_BLOCK_COMMENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba8f3d141d99beb46ed066e94a0ef419", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/AFindReplaceMachineState.java", "commitBeforeChange": "f26f93ad5e4b158c960a6cefd64cf99f7137ecbc", "commitAfterChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-   */", "+  /** If we're on a match for the find word, replace it with the replace word. */", "-        if (!_searchBackwards) {", "-          position -= _findWord.length();", "-        }", "+        if (!_searchBackwards) position -= _findWord.length();", "-        if (position == 0) {", "-          atStart = true;", "-        }", "+        if (position == 0) atStart = true;", "-        if (atStart && !_searchBackwards) {", "-          setPosition(_replaceWord.length());", "-        }", "-        if (!atStart && _searchBackwards) {", "-          setPosition(getCurrentOffset() - _replaceWord.length());", "-        }", "+        if (atStart && !_searchBackwards) setPosition(_replaceWord.length());", "+        else if (!atStart && _searchBackwards) setPosition(getCurrentOffset() - _replaceWord.length());", "-      else {", "-        return false;", "-      }", "+      return false;", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-    }", "+    catch (BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 947}
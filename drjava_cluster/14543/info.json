{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d04bc3f1ded5c3501f92ef09a5b506d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "079290f69c0b137d949cd175fe9b6121", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "commitAfterChange": "a80c6de11e537b6579c447ea812ef2f4f98b5f2f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public OpenDefinitionsDocument preloadDocument(Location location)", "signatureAfterChange": "   public OpenDefinitionsDocument preloadDocument(Location location)", "diff": ["-    // No stored doc, look on the source root set (later, also the sourcepath)", "-    ReferenceType rt = location.declaringType();", "-    try { fileName = getPackageDir(rt.name()) + rt.sourceName(); }", "-    catch (AbsentInformationException aie) {", "-      // Don't know real source name:", "-      //   assume source name is same as file name", "-      String className = rt.name().replace('.', File.separatorChar);", "+    try {", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+      Location lll = getLLLocation(location, files);", "-      // crop off the $ if there is one and anything after it", "-      int indexOfDollar = className.indexOf('$');", "-      if (indexOfDollar > -1) {", "-        className = className.substring(0, indexOfDollar);", "+      fileName = lll.sourcePath();", "+", "+      // Check source root set (open files)", "+      File f = _model.getSourceFile(fileName);", "+      if (f != null) {", "+        // Get a document for this file, forcing it to open", "+        try { doc = _model.getDocumentForFile(f); }", "+        catch (IOException ioe) {", "+          doc = null;", "+        }", "+      }", "+", "+    }", "+    catch(AbsentInformationException e) {", "+      // No stored doc, look on the source root set (later, also the sourcepath)", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+", "+      ReferenceType rt = location.declaringType();", "+      fileName = null;", "+      try { fileName = getPackageDir(rt.name()) + rt.sourceName(); }", "+      catch (AbsentInformationException aie) {", "+        // Don't know real source name:", "+        //   assume source name is same as file name", "+        fileName = null;", "+        String className = rt.name().replace('.', File.separatorChar);", "+        ", "+        // crop off the $ if there is one and anything after it", "+        int indexOfDollar = className.indexOf('$');", "+        if (indexOfDollar > -1) {", "+          className = className.substring(0, indexOfDollar);", "+        }", "+        ", "+        for(File f: files) {", "+          if (f.getName().equals(className+\".java\") ||", "+              f.getName().equals(className+\".dj0\") ||", "+              f.getName().equals(className+\".dj1\") ||", "+              f.getName().equals(className+\".dj2\")) {", "+            fileName = f.getName();", "+            break;", "+          }", "+        }", "+        if (fileName==null) {", "+          fileName = className + \".java\";", "+        }", "-      fileName = className + \".java\";", "+      if (fileName!=null) {", "+        // Check source root set (open files)", "+        File f = _model.getSourceFile(fileName);", "+        if (f != null) {", "+          // Get a document for this file, forcing it to open", "+          try { doc = _model.getDocumentForFile(f); }", "+          catch (IOException ioe) {", "+            // No doc, so don't notify listener", "+          }", "+        }", "+      }", "-    // Check source root set (open files)", "-    File f = _model.getSourceFile(fileName);", "-    if (f != null) {", "-      // Get a document for this file, forcing it to open", "-      try { doc = _model.getDocumentForFile(f); }", "-      catch (IOException ioe) {", "-        // No doc, so don't notify listener", "-      }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237a12474cc95cf38d9df21aa8d4a676", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "d7ad233986e68ea13b262a57ebd130ce2e9ceed5", "commitAfterChange": "d581c32ea49adc707a4c5dd3f5443e6e5e93cd47", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   void scrollToSource(LocatableEvent e)", "diff": ["-    ReferenceType rt = location.declaringType();", "-    String className = rt.name();", "-    String ps = System.getProperty(\"file.separator\");", "-    // replace periods with the System's file separator", "-    className = StringOps.replace(className, \".\", ps);", "+    OpenDefinitionsDocument doc = null;", "-    // crop off the $ if there is one and anything after it", "-    int indexOfDollar = className.indexOf('$');    ", "-    if (indexOfDollar > -1) {", "-      className = className.substring(0, indexOfDollar);", "+    // First see if doc is stored", "+    EventRequest request = e.request();", "+    Object docProp = request.getProperty(\"document\");", "+    if ((docProp != null) && (docProp instanceof OpenDefinitionsDocument)) {", "+      doc = (OpenDefinitionsDocument) docProp;", "-    ", "-    File[] roots = _model.getSourceRootSet();", "-    File f = null;", "-    boolean found = false;", "-    for (int i = 0; i < roots.length; i++) {", "-      String currRoot = roots[i].getAbsolutePath();", "-      DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "-                                  \".java\");", "-      f = new File(currRoot + ps + className + \".java\");", "-      if (f.exists()) {", "-        found = true;", "-        break;", "+    else {", "+      // No stored doc, look on the source root set (later, also the sourcepath)", "+      ReferenceType rt = location.declaringType();", "+      String className = rt.name();", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      ", "+      // crop off the $ if there is one and anything after it", "+      int indexOfDollar = className.indexOf('$');    ", "+      if (indexOfDollar > -1) {", "+        className = className.substring(0, indexOfDollar);", "+      }", "+      ", "+      File[] roots = _model.getSourceRootSet();", "+      File f = null;", "+      boolean foundFile = false;", "+      for (int i = 0; i < roots.length; i++) {", "+        String currRoot = roots[i].getAbsolutePath();", "+        DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "+                                    \".java\");", "+        f = new File(currRoot + ps + className + \".java\");", "+        if (f.exists()) {", "+          foundFile = true;", "+          break;", "+        }", "+      }", "+      if (foundFile) {", "+        // Get a document for this file, forcing it to open", "+        DrJava.consoleOut().println(\"found file: \" + f.getAbsolutePath());", "+        try {", "+          doc = _model.getDocumentForFile(f);", "+        }", "+        catch (IOException ioe) {", "+          // No doc, so don't notify listener", "+          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + ioe);", "+        }", "+        catch (OperationCanceledException oce) {", "+          // No doc, so don't notify listener", "+          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + oce);", "+        }", "-    if (found) {", "-      DrJava.consoleOut().println(\"found file: \" + f.getAbsolutePath() + ", "-                                  \", will scroll to line: \" + location.lineNumber());", "-      _listener.scrollToLineInSource(f, ", "+    ", "+    // Open and scroll if doc was found", "+    if (doc != null) {", "+      DrJava.consoleOut().println(\"Will scroll to line: \" + location.lineNumber());", "+      _listener.scrollToLineInSource(doc, "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d797b39023e01be6a24829a707c472d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 41, "signatureBeforeChange": "   synchronized void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   synchronized void scrollToSource(Location location)", "diff": ["-      // No stored doc, look on the source root set (later, also the sourcepath)", "-      ReferenceType rt = location.declaringType();", "-      String filename = \"\";", "+   */", "+  synchronized void scrollToSource(Location location){", "+    OpenDefinitionsDocument doc = null;", "+    ", "+    // No stored doc, look on the source root set (later, also the sourcepath)", "+    ReferenceType rt = location.declaringType();", "+    String filename = \"\";", "+    try {", "+      filename = rt.sourceName();", "+      filename = getPackageDir(rt.name()) + filename;", "+    }", "+    catch (AbsentInformationException aie) {", "+      // Don't know real source name:", "+      //   assume source name is same as file name", "+      String className = rt.name();", "+      String ps = System.getProperty(\"file.separator\");", "+      // replace periods with the System's file separator", "+      className = StringOps.replace(className, \".\", ps);", "+      ", "+      // crop off the $ if there is one and anything after it", "+      int indexOfDollar = className.indexOf('$');    ", "+      if (indexOfDollar > -1) {", "+        className = className.substring(0, indexOfDollar);", "+      }", "+      ", "+      filename = className + \".java\";", "+    }", "+    ", "+    // Check source root set (open files)", "+    File[] sourceRoots = _model.getSourceRootSet();", "+    Vector<File> roots = new Vector<File>();", "+    for (int i=0; i < sourceRoots.length; i++) {", "+      roots.addElement(sourceRoots[i]);", "+    }", "+    File f = _model.getSourceFileFromPaths(filename, roots);", "+    if (f == null) {", "+      Vector<File> sourcepath = ", "+        DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "+      f = _model.getSourceFileFromPaths(filename, sourcepath);", "+    }", "+    ", "+    if (f != null) {", "+      // Get a document for this file, forcing it to open", "-        filename = rt.sourceName();", "-        filename = getPackageDir(rt.name()) + filename;", "+        doc = _model.getDocumentForFile(f);", "-      catch (AbsentInformationException aie) {", "-        // Don't know real source name:", "-        //   assume source name is same as file name", "-        String className = rt.name();", "-        String ps = System.getProperty(\"file.separator\");", "-        // replace periods with the System's file separator", "-        className = StringOps.replace(className, \".\", ps);", "-        ", "-        // crop off the $ if there is one and anything after it", "-        int indexOfDollar = className.indexOf('$');    ", "-        if (indexOfDollar > -1) {", "-          className = className.substring(0, indexOfDollar);", "-        }", "-      ", "-        filename = className + \".java\";", "+      catch (IOException ioe) {", "+        // No doc, so don't notify listener", "-        ", "-      // Check source root set (open files)", "-      File[] sourceRoots = _model.getSourceRootSet();", "-      Vector<File> roots = new Vector<File>();", "-      for (int i=0; i < sourceRoots.length; i++) {", "-        roots.addElement(sourceRoots[i]);", "-      }", "-      File f = _model.getSourceFileFromPaths(filename, roots);", "-      if (f == null) {", "-        Vector<File> sourcepath = ", "-          DrJava.getConfig().getSetting(OptionConstants.DEBUG_SOURCEPATH);", "-        f = _model.getSourceFileFromPaths(filename, sourcepath);", "-      }", "-      ", "-      if (f != null) {", "-        // Get a document for this file, forcing it to open", "-        try {", "-          doc = _model.getDocumentForFile(f);", "-        }", "-        catch (IOException ioe) {", "-          // No doc, so don't notify listener", "-        }", "-        catch (OperationCanceledException oce) {", "-          // No doc, so don't notify listener", "-        }", "+      catch (OperationCanceledException oce) {", "+        // No doc, so don't notify listener", "+    openAndScroll(doc, location);", "+  }", "-  }  "]}], "num": 14543}
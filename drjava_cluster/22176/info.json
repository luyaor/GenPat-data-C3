{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aef89ddf88800132f2111b03c1705ed9", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f82e94eeb8abcfb99e337baad921848", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Void forInnerClassDef(InnerClassDef cd)", "signatureAfterChange": "   public Void forInnerClassDef(InnerClassDef cd)", "diff": ["-    if (_enclosingData == null) {throw new RuntimeException(\"Internal Program Error: Enclosing Data is null.  Please report this bug.\");}", "+    if (_enclosingData == null) {", "+      throw new RuntimeException(\"Internal Program Error: Enclosing Data is null.  Please report this bug.\");", "+    }", "-      throw new RuntimeException(\"Internal Program Error: Can't find SymbolData for \" + cd.getName().getText() + \". Please report this bug.\");", "+      throw new RuntimeException(\"Internal Program Error: Can't find SymbolData for \" + cd.getName().getText() + ", "+                                 \". Please report this bug.\");", "-    ", "-//    int baseIndent = cd.getSourceInfo().getStartColumn() - 1;", "-//    className = LanguageLevelVisitor.getUnqualifiedClassName(sd.getName());", "-    _readAndWriteThroughIndex(cd.getSourceInfo().getEndLine(), cd.getSourceInfo().getEndColumn() - 1);", "-//    writeConstructor(className, sd, baseIndent);", "-//    writeAccessors(sd, baseIndent);", "-//    String valueToStringName = writeValueToString(sd, baseIndent);", "-//    String valueEqualsName = writeValueEquals(sd, baseIndent);", "-//    String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "-//    writeToString(sd, baseIndent, valueToStringName);", "-//    writeEquals(className, sd, baseIndent, valueEqualsName);", "-//    writeHashCode(className, sd, baseIndent, true, valueHashCodeName);", "-//    _writeToFileOut(indentString(baseIndent, 0));", "+", "+    _readAndWriteThroughIndex(cd.getSourceInfo().getEndLine(), cd.getSourceInfo().getEndColumn() - 1);;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0d881e64af4589e5c9573298b2d8b77", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public Void forInnerClassDef(InnerClassDef cd)", "signatureAfterChange": "   public Void forInnerClassDef(InnerClassDef cd)", "diff": ["-   */", "+    */", "-", "+    ", "+    /** WARNING: the code suffix copied from ClassDef; it it works it should be refactored. */", "-", "-    _readAndWriteThroughIndex(cd.getSourceInfo().getEndLine(), cd.getSourceInfo().getEndColumn() - 1);;", "-", "-    // We don't bother visiting any of the signature nodes -- parameters, type, name, etc.", "+    ", "+    int baseIndent = cd.getSourceInfo().getStartColumn() - 1;", "+    className = LanguageLevelVisitor.getUnqualifiedClassName(sd.getName());", "+    _readAndWriteThroughIndex(cd.getSourceInfo().getEndLine(), cd.getSourceInfo().getEndColumn() - 1);", "+    ", "+    // Augment this class declaration", "+    writeConstructor(className, sd, baseIndent);", "+    writeAccessors(sd, baseIndent);", "+    String valueToStringName = writeValueToString(sd, baseIndent);", "+    String valueEqualsName = writeValueEquals(sd, baseIndent);", "+    String valueHashCodeName = writeValueHashCode(sd, baseIndent, valueEqualsName);", "+    writeToString(sd, baseIndent, valueToStringName);", "+    writeEquals(className, sd, baseIndent, valueEqualsName);", "+    writeHashCode(className, sd, baseIndent, false, valueHashCodeName);", "+    for (String s : _endOfClassVarDefs) {", "+      _writeToFileOut(newLine + indentString(baseIndent, 1) + s);", "+    }", "+    if (_endOfClassVarDefs.size() > 0) {", "+      _writeToFileOut(newLine);", "+      _endOfClassVarDefs.clear();", "+    }", "+    _writeToFileOut(indentString(baseIndent, 0));", "+    ", "+    ", "+// We don't bother visiting any of the signature nodes -- parameters, type, name, etc.", "-}", "+  }"]}], "num": 22176}
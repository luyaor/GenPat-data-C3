{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f411336d2df67dc8e9aaae64bad37b55", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6953448d1b4946d62278972d0ca44dd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected Pair<LinkedList<MethodData>, LinkedList<MethodData>> _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr, boolean isConstructor, SymbolData thisSD)", "signatureAfterChange": "     protected Pair<LinkedList<MethodData>, LinkedList<MethodData>>      _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr,                          boolean isConstructor, SymbolData thisSD)", "diff": ["-   */  ", "-  protected Pair<LinkedList<MethodData>, LinkedList<MethodData>> _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr, boolean isConstructor, SymbolData thisSD) {", "+    */  ", "+  protected Pair<LinkedList<MethodData>, LinkedList<MethodData>> ", "+    _getMatchingMethods(String methodName, SymbolData enclosingSD, InstanceData[] arguments, JExpression jexpr, ", "+                        boolean isConstructor, SymbolData thisSD) {", "-          if (matches == false) {break;}", "+          if (matches == false) break;", "-        if (matches == false) { //it didn't match the method directly, but let's see if we can add it to the list of methods done through autoboxing", "+        if (matches == false) { // Didn't match the method directly; try to match it with autoboxing", "-          //Now check to see if any methods exist that match the invocation while using autoboxing.", "+          // Now check to see if any methods exist that match the invocation while using autoboxing.", "-            if (matches == false) {break;}", "+            if (matches == false) break;", "-          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a729e901cc463c0804cf934f19f9d4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private Pair<Integer,Integer> parseIntPair(SExp s)", "signatureAfterChange": "      private Pair<Integer,Integer> parseIntPair(SExp s)", "diff": ["-    /**", "-     * we're getting in a \"(select # #)\"", "-     */", "+    ", "+    /* we're getting in a \"(select # #)\" */", "-      public List<Integer> forEmpty(Empty e) {", "-        return intList;", "-      }", "+      public List<Integer> forEmpty(Empty e) { return intList; }", "-    if (li.size() == 2) {", "-      return new Pair<Integer,Integer>(li.get(0), li.get(1));", "-    }else{", "-      throw new PrivateProjectException(\"expected a list of 2 ints for select, found list of size \" + li.size());", "-    }", "+    if (li.size() == 2) return new Pair<Integer,Integer>(li.get(0), li.get(1));", "+    else throw new PrivateProjectException(\"expected a list of 2 ints for select, found list of size \" + li.size());"]}], "num": 20248}
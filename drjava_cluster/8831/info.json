{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "292e8c6a66190755930388fe3c4061ec", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0698a9e96da10b3d5fec321cd4cb2088", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public Action getShiftAction()", "signatureAfterChange": "      private void removeExistingKeyStroke(KeyStroke ks)", "diff": ["+  ", "+  private void removeExistingKeyStroke(KeyStroke ks) {", "+    // check for conflicting key binding", "+    if (_keyToDataMap.containsKey(ks) && _shouldCheckConflict) {", "+      // if new key in map, and shouldUpdate returns true, we are overwriting it", "+      KeyStrokeData conflictKSD = _keyToDataMap.get(ks);", "+      // remove ks from the conflicting keystroke data", "+      Set<KeyStroke> conflictKeys = new LinkedHashSet<KeyStroke>(conflictKSD.getKeyStrokes());", "+      conflictKeys.remove(ks);", "+      conflictKSD.setKeyStrokes(new Vector<KeyStroke>(conflictKeys));", "+      updateMenuItem(conflictKSD);", "+      _keyToDataMap.remove(ks);", "+      DrJava.getConfig().setSetting(conflictKSD.getOption(), conflictKSD.getKeyStrokes());", "+    }", "+  }", "-    public Option<KeyStroke> getOption() { return _kso; }", "-    public Action getShiftAction() { return _shiftA; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bb5c04c25a6f6bb09cca0bf9656cfdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ToolbarOptionComponent.java", "commitBeforeChange": "c302d1db72cb508e0cec30d24e39d48cce8fd663", "commitAfterChange": "68d14b52468e7fad6eb9d5f26ee2e88ac93b395f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public JComponent getComponent()", "signatureAfterChange": "   public void setComponent(JComponent component)", "diff": ["-  /** Return's this OptionComponent's configurable component. */", "-  public JComponent getComponent() { return _buttonPanel; }", "+    * @param component GUI component */", "+  public void setComponent(JComponent component) {", "+    _guiComponent = component;", "+    if (_guiComponent!=null) {", "+      boolean wasEditable = DrJava.getConfig().isEditable(OptionConstants.TOOLBAR_TEXT_ENABLED);", "+      wasEditable = wasEditable && DrJava.getConfig().isEditable(OptionConstants.TOOLBAR_ICONS_ENABLED);", "+      wasEditable = wasEditable && DrJava.getConfig().isEditable(OptionConstants.TOOLBAR_ENABLED);", "+      ", "+      _guiComponent.setEnabled(wasEditable);", "+      // also enable/disable all subcomponents (see Java bug 4177727)", "+      for (Component subComponent: _guiComponent.getComponents()) {", "+        subComponent.setEnabled(wasEditable);", "+      }", "+    }", "+  }"]}], "num": 8831}
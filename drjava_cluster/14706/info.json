{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db66984db1d41d7c45d53dec15fa162b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba511ff3c3af0fe0d9ea6f3f9c111c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/DictionaryMap.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Set<K> keySet()", "signatureAfterChange": "      public PredicateSet<K> keySet()", "diff": ["+  public PredicateSet<K> keySet() {", "+    return new AbstractPredicateSet<K>() {", "+      public boolean contains(Object o) { return _d.get(o) != null; }", "+      public Iterator<K> iterator() { return IterUtil.asIterator(_d.keys()); }", "+      public boolean isInfinite() { return false; }", "+      public boolean hasFixedSize() { return false; }", "+      public boolean isStatic() { return false; }", "+      @Override public int size() { return _d.size(); }", "+      @Override public int size(int b) { int s = _d.size(); return (s < b) ? s : b; }", "+      @Override public boolean isEmpty() { return _d.isEmpty(); }", "+      @Override public boolean remove(Object o) { return _d.remove(o) != null; }", "+    };", "-  public Set<K> keySet() { return _keys.value(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecdab7b6a059e0f8b1e9295de367f5dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "        public static void main(String... args)", "signatureAfterChange": "        public static void main(String... args)", "diff": ["-    ArgumentParser.Result parsedArgs = argParser.parse(args);", "+    final ArgumentParser.Result parsedArgs = argParser.parse(args);", "-    final TypeSystem ts = parsedArgs.hasOption(\"jls\") ? JLSTypeSystem.INSTANCE : ExtendedTypeSystem.INSTANCE;", "-      public TypeSystem typeSystem() { return ts; }", "-      public boolean enforceAllAccess() { return true; }", "+      @Override protected Thunk<? extends TypeSystem> typeSystemFactory() {", "+        TypeSystem result = parsedArgs.hasOption(\"jls\") ? new JLSTypeSystem(this) : new ExtendedTypeSystem(this);", "+        return LambdaUtil.valueLambda(result);", "+      }", "+      @Override public boolean enforceAllAccess() { return true; }", "+      @Override public boolean prohibitUncheckedCasts() { return false; }"]}], "num": 14706}
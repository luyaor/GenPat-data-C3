{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c097fbdade4b763b3e17cc0992ad1b90", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "018fee97b429e8b1a8da7d90b168cdf8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace) throws      BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)", "diff": ["-  public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace) throws ", "-    BadLocationException {", "+  public String getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)  {", "+//    Utilities.show(\"getIdentOfCurrentStmt(\" + pos + \", \" + Arrays.toString(delims) + \", \" + Arrays.toString(whitespace) + \")\");", "-        // Find the previous delimiter that closes a statement", "+        // Find the previous delimiter (typically an enclosing brace or closing symbol) skipping over balanced braces", "+        // that are not delims", "-        int prevDelim = lineStart;", "-        boolean ignoreParens = posInParenPhrase(prevDelim);", "+        int prevDelim = findPrevDelimiter(lineStart, delims, /* skipBracePhrases */ true);", "+    ", "+        if (prevDelim == -1) reachedStart = true; // no delimiter found", "-        do {", "-          prevDelim = findPrevDelimiter(prevDelim, delims, ignoreParens);", "-          if (prevDelim > 0 && prevDelim < getLength() && getText(prevDelim,1).charAt(0) == '{') break;", "-          if (prevDelim == -1) { // no delimiter found", "-            reachedStart = true;", "-            break;", "-          }", "-          ignoreParens = posInParenPhrase(prevDelim);", "-        } while (ignoreParens);  ", "-        ", "-        // From the previous delimiter, find the next non-whitespace character", "+        // From the previous delimiter or start, find the next non-whitespace character (why?)", "-        else nextNonWSChar = getFirstNonWSCharPos(prevDelim+1, whitespace, false);", "+        else nextNonWSChar = getFirstNonWSCharPos(prevDelim + 1, whitespace, false);", "+        ", "+        // The following statement looks right; otherwise, the indenting of the current line depends on how it is indented", "+//        if (nextNonWSChar >= lineStart) nextNonWSChar = prevDelim;  ", "-        lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt); ", "+        lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt);", "-    ", "+//    Utilities.show(\"getIdentCurrStmt(...) call completed\");    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2fee3a10f10ee3b40b49f7e7fd4fa4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "diff": ["-    String key = \"getIndentOfCurrStmt:\" + pos;", "-    for (int i=0; i < delims.length; i++) {", "-      key += \":\" + delims[i];", "-    }", "+    StringBuffer keyBuf = new StringBuffer(\"getIndentOfCurrStmt:\").append(pos);", "+    for (char ch: delims) { keyBuf.append(':').append(ch); }", "+    String key = keyBuf.toString();", "+    ", "-    if (cached != null) {", "-      return cached;", "-    }", "+    if (cached != null) return cached;", "-    boolean ignoreParens;", "+    boolean ignoreParens = posInParenPhrase(prevDelimiter);", "-      ignoreParens = posInParenPhrase(prevDelimiter);", "-        if ((prevDelimiter > 0) && (prevDelimiter < getLength()) &&", "-            (getText(prevDelimiter,1).charAt(0) == '{')) {", "+        if (prevDelimiter > 0 && prevDelimiter < getLength() && getText(prevDelimiter,1).charAt(0) == '{')", "-        }", "-      catch (BadLocationException e) {", "-        // Shouldn't happen", "-        throw new UnexpectedException(e);", "-      }", "+      catch (BadLocationException e) { throw new UnexpectedException(e); }", "+      ", "-      if(prevDelimiter == ERROR_INDEX) {", "+      if (prevDelimiter == ERROR_INDEX) {", "-    } while(posInParenPhrase(prevDelimiter));  // this is being calculated twice...", "+      ignoreParens = posInParenPhrase(prevDelimiter);", "+    } while (ignoreParens);  ", "+    ", "-    if(reachedStart) {", "-      nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "-    }", "-    else {", "+    if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(DOCSTART);", "+    else", "-    }", "+    ", "-    if(nextNonWSChar == ERROR_INDEX) {", "-      nextNonWSChar = getLength();", "-    }", "+    if (nextNonWSChar == ERROR_INDEX) nextNonWSChar = getLength();", "-    try {", "-      lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt);", "-    }", "-    catch(BadLocationException e) {", "-      // Should not happen", "-      throw new UnexpectedException(e);", "-    }", "+    try { lineText = getText(lineStartStmt, lineFirstNonWS - lineStartStmt); }", "+    catch(BadLocationException e) { throw new UnexpectedException(e); }"]}], "num": 19627}
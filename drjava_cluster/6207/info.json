{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c865cbda504fa09a5e749e6377b4984", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4afaa81cb249109c1dd3bf873c441ab1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/BalancingStreamTokenizer.java", "commitBeforeChange": "1c7e0138b9996497cf68b90499ce66108cdb5ed6", "commitAfterChange": "527b327a81252940ede7723bc28a80b1911fdddb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public String getNextToken() throws IOException", "signatureAfterChange": "   public String getNextToken() throws IOException", "diff": ["+      _isEscape = ((_escape!=null) && (((char)c)==_escape));", "+      ", "-        if (buf.length()>0) {", "-          return buf.toString();", "+        if (_wasEscape) {", "+          // there was a previous escape, do not count as whitespace", "+          buf.append(String.valueOf((char)c));", "+          _wasEscape = false;", "+        }", "+        else {", "+          if (buf.length()>0) {", "+            return buf.toString();", "+          }", "-      // see if it can be a quote", "-      String temp;", "-      temp = findMatch(c, _state.quotes, new Lambda<String,String>() {", "-        public String apply(String in) {", "-          // we didn't find a match", "-          // push the tokens back, all except for the last one", "-          for(int i=in.length()-1; i>0; --i) {", "-            pushToken(in.charAt(i));", "-          }", "-          return null;", "-        }", "-      });", "-      if (temp!=null) {", "-        // we found the beginning of a quote", "-        if (buf.length()>0) {", "-          // but we still have regular text to output", "-          // so we need to push all tokens back", "-          for(int i=temp.length()-1; i>=0; --i) {", "-            pushToken(temp.charAt(i));", "-          }", "-          return buf.toString();", "-        }", "-        String begin = temp;", "-        Stack<String> quoteStack = new Stack<String>();", "-        quoteStack.add(begin);", "-        StringBuilder quoteBuf = new StringBuilder(begin);", "-        ", "-        // push the state of the tokenizer and set up a new state:", "-        // - no whitespace, i.e. whitespace is not discarded", "-        // - scan for both ending and beginning quotes, but as keywords", "-        // - no quotes at all", "-        pushState();", "-        _state = new State();", "-        _state.whitespace.clear();", "-        _state.keywords.clear();", "-        _state.keywords.addAll(_stateStack.peek().quotes);", "-        _state.keywords.addAll(_stateStack.peek().quoteEnds);", "-        _state.quotes.clear();", "-        _state.quoteEnds.clear();", "-        _state.quotePairs.clear();", "-        ", "-        while(quoteStack.size()>0) {", "-          String s = getNextToken();", "-          if (s==null) { break; }", "-          quoteBuf.append(s);", "-          if (_stateStack.peek().quoteEnds.contains(s)) {", "-            // ending quote", "-            String top = quoteStack.peek();", "-            if (_stateStack.peek().quotePairs.get(top).equals(s)) {", "-              // matches top of stack", "-              quoteStack.pop();", "+      if (!_wasEscape) {", "+        // see if it can be a quote", "+        String temp;", "+        temp = findMatch(c, _state.quotes, new Lambda<String,String>() {", "+          public String apply(String in) {", "+            // we didn't find a match", "+            // push the tokens back, all except for the last one", "+            for(int i=in.length()-1; i>0; --i) {", "+              pushToken(in.charAt(i));", "-            else {", "-              // closing quote does not match top of stack", "-              // it may be an opening quote though", "-              if (_stateStack.peek().quotes.contains(s)) {", "-                // beginning quote", "-                quoteStack.add(s);", "+            return null;", "+          }", "+        });", "+        if (temp!=null) {", "+          // we found the beginning of a quote", "+          if (buf.length()>0) {", "+            // but we still have regular text to output", "+            // so we need to push all tokens back", "+            for(int i=temp.length()-1; i>=0; --i) {", "+              pushToken(temp.charAt(i));", "+            }", "+            return buf.toString();", "+          }", "+          String begin = temp;", "+          Stack<String> quoteStack = new Stack<String>();", "+          quoteStack.add(begin);", "+          StringBuilder quoteBuf = new StringBuilder(unescape(begin));", "+          ", "+          // push the state of the tokenizer and set up a new state:", "+          // - no whitespace, i.e. whitespace is not discarded", "+          // - scan for both ending and beginning quotes, but as keywords", "+          // - no quotes at all", "+          pushState();", "+          _state = new State();", "+          _state.whitespace.clear();", "+          _state.keywords.clear();", "+          _state.keywords.addAll(_stateStack.peek().quotes);", "+          _state.keywords.addAll(_stateStack.peek().quoteEnds);", "+          _state.quotes.clear();", "+          _state.quoteEnds.clear();", "+          _state.quotePairs.clear();", "+          ", "+          while(quoteStack.size()>0) {", "+            String s = getNextToken();", "+            if (s==null) { break; }", "+            if (_stateStack.peek().quoteEnds.contains(s)) {", "+              // ending quote", "+              String top = quoteStack.peek();", "+              if (_stateStack.peek().quotePairs.get(top).equals(s)) {", "+                // matches top of stack", "+                quoteBuf.append(unescape(s));", "+                quoteStack.pop();", "-                // neither a matching closing brace nor an opening brace", "-                break;", "+                // closing quote does not match top of stack", "+                // it may be an opening quote though", "+                if (_stateStack.peek().quotes.contains(s)) {", "+                  // beginning quote", "+                  quoteBuf.append(unescape(s));", "+                  quoteStack.add(s);", "+                }", "+                else {", "+                  // neither a matching closing brace nor an opening brace", "+                  quoteBuf.append(s);", "+                  break;", "+                }", "+            else if (_stateStack.peek().quotes.contains(s)) {", "+              // beginning quote", "+              quoteBuf.append(unescape(s));", "+              quoteStack.add(s);", "+            }", "+            else {", "+              quoteBuf.append(s);", "+            }", "-          else if (_stateStack.peek().quotes.contains(s)) {", "-            // beginning quote", "-            quoteStack.add(s);", "-          }", "+          ", "+          // restore the old state", "+          popState();", "+          return quoteBuf.toString();", "-        ", "-        // restore the old state", "-        popState();", "-        return quoteBuf.toString();", "-", "-      // it wasn't a quote, see if it is a keyword", "-      temp = findMatch(c, _state.keywords, new Lambda<String,String>() {", "-        public String apply(String in) {", "-          // we didn't find a match", "-          // push the tokens back, all except for the last one", "-          for(int i=in.length()-1; i>0; --i) {", "-            pushToken(in.charAt(i));", "+      ", "+      if (!_wasEscape) {", "+        // it wasn't a quote, see if it is a keyword", "+        String temp = findMatch(c, _state.keywords, new Lambda<String,String>() {", "+          public String apply(String in) {", "+            // we didn't find a match", "+            // push the tokens back, all except for the last one", "+            for(int i=in.length()-1; i>0; --i) {", "+              pushToken(in.charAt(i));", "+            }", "+            return null;", "-          return null;", "-        }", "-      });", "-      if (temp!=null) {", "-        // we found a keyword", "-        if (buf.length()>0) {", "-          // but we still have regular text to output", "-          // so we need to push all tokens back", "-          for(int i=temp.length()-1; i>=0; --i) {", "-            pushToken(temp.charAt(i));", "+        });", "+        if (temp!=null) {", "+          // we found a keyword", "+          if (buf.length()>0) {", "+            // but we still have regular text to output", "+            // so we need to push all tokens back", "+            for(int i=temp.length()-1; i>=0; --i) {", "+              pushToken(temp.charAt(i));", "+            }", "+            return buf.toString();", "-          return buf.toString();", "+          return unescape(temp);", "-        return temp;", "-      buf.append(String.valueOf((char)c));", "+      if (_isEscape) {", "+        if (_wasEscape) {", "+          buf.append(String.valueOf(_escape));", "+          _isEscape = _wasEscape = false;", "+        }", "+      }", "+      else {", "+        buf.append(String.valueOf((char)c));", "+      }", "+      _wasEscape = _isEscape;", "+    if (_wasEscape) {", "+      // last thing we saw was a lone escape", "+      // generously append it", "+      buf.append(String.valueOf(_escape));", "+    }", "+    // end of stream, return remaining buffer as last token", "+    // or return null to represent the end of the stream"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8551f5133c6cd454f73929fb67ae0255", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "commitAfterChange": "c5aaf72fbd7fa889788e2cd72fe646345421a547", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["+        ", "-            currWatch.setValue(v);", "-            // currWatch.setType(String.valueOf(localVar.type()));", "-            currWatch.setType(v.type().name());", "+            if (v == null) {", "+              currWatch.setValue(_getValue(null));", "+              try {", "+                currWatch.setType(localVar.type().name());", "+              }", "+              catch (ClassNotLoadedException cnle) {", "+                List classes = _vm.classesByName(localVar.typeName());", "+                if (!classes.isEmpty()) {", "+                  currWatch.setType(((Type)classes.get(0)).name());", "+                }", "+                else {", "+                  currWatch.setTypeNotLoaded();", "+                }", "+              }", "+            }", "+            else {              ", "+              currWatch.setValue(_getValue(v));", "+              currWatch.setType(v.type().name());", "+            }", "-              currWatch.setType(String.valueOf(field.type()));", "+              currWatch.setType(field.type().name());", "-              currWatch.setNoType();", "+              List classes = _vm.classesByName(field.typeName());", "+              if (!classes.isEmpty()) {", "+                currWatch.setType(((Type)classes.get(0)).name());", "+              }", "+              else {", "+                currWatch.setTypeNotLoaded();", "+              }"]}], "num": 6207}
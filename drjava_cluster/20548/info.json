{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cee761bc3e2dc8455cae3f700effb782", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c546627b89e584af153f6e070159759e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public int getOffset(int lineNum)", "signatureAfterChange": "   public int getOffset(int lineNum)", "diff": ["-    // throwErrorHuh();", "-", "+    ", "-      if (lineNum < 0) {", "-        return -1;", "-      }", "+      if (lineNum < 0) return -1;", "+      ", "-", "-", "+      ", "-", "-        if (curLine==lineNum) {", "-", "-          return offset;", "-        }", "-", "+        ", "+        if (curLine==lineNum) return offset;", "+        ", "-        if (nextNewline == -1) {", "-", "-          // end of the document, and couldn't find the supplied lineNum", "-          return -1;", "-        }", "-        else {", "-          curLine++;", "-          offset = nextNewline + 1;", "-        }", "+        if (nextNewline == -1) return -1; // end of the document, and couldn't find the supplied lineNum", "+          ", "+        curLine++;", "+        offset = nextNewline + 1;", "-", "-    catch (BadLocationException ble) {", "-      throw new UnexpectedException(ble);", "-    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9afc4c87539e63a73567fc019163eab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "47940fe74faf2ed044539c32c4d2eb5e5171e259", "commitAfterChange": "0d0c5947e7ead7115690128690c9c431a119fb4d", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   private static String makeBlankString(int n)", "signatureAfterChange": "   private static String makeBlankString(int n)", "diff": ["-  /** Generates a string containng n blanks.  Intended for small values of n (typically < 50). */", "-  private static String makeBlankString(int n) {", "-      case 0: return \"\";", "-      case 1: return \" \";", "-      case 2: return \"  \";", "-      case 3: return \"   \";", "-      case 4: return \"    \";", "-      case 5: return \"     \";", "-      case 6: return \"      \";", "-      case 7: return \"       \";", "-      case 8: return \"        \";", "-        StringBuilder buf = new StringBuilder();", "-        for (int i = 0; i < n; i++) buf.append(' ');", "-        return buf.toString();", "+  /** Constructs a new string containng n blanks.  Intended for small values of n (typically < 50). */", "+  private static String makeBlankString(int n) {", "+    StringBuilder buf = new StringBuilder();", "+    for (int i = 0; i < n; i++) buf.append(' ');", "+    return buf.toString();"]}], "num": 20548}
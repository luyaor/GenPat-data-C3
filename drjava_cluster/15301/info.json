{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "915155d18b09856ce58cac92ef21f96f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c22b950a70dbffe3ac36a19105f257", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandler.java", "commitBeforeChange": "3b59320116caa764393e45ce9d0ac1ba782d2b0d", "commitAfterChange": "84d383e8fea49389da19c11522947d451646ef3e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void _handleThreadDeathEvent(ThreadDeathEvent e)", "signatureAfterChange": "      private void _handleThreadDeathEvent(ThreadDeathEvent e)", "diff": ["-    if (e.thread().equals(_manager.getCurrentThread())) {", "+    /** no need to check if there are suspended threads on the stack", "+     * because all that logic should be in the debugger", "+     */", "+    if(e.thread().equals(_manager.getCurrentRunningThread())) {", "+      EventRequestManager erm = _vm.eventRequestManager();", "+      List steps = erm.stepRequests();", "+      for (int i = 0; i < steps.size(); i++) {", "+        StepRequest step = (StepRequest)steps.get(i);", "+        if (step.thread().equals(e.thread())) {", "+          erm.deleteEventRequest(step);", "+          break;", "+        }", "+      }", "-      _manager.setCurrentThread(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db16a3f27ae48bee6a817a1860c5f57a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "ff6e7ba398be9a577f63882c7a59f62ba76dc9b6", "commitAfterChange": "ec45520bd7c034fcd5a1e91bf25ccd1d46b70ecf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public synchronized void step(int flag) throws DebugException", "signatureAfterChange": "   public synchronized void step(int flag) throws DebugException", "diff": ["-      System.out.println(\"Current thread is null\");", "+      //System.out.println(\"Current thread is null\");", "+    //if (!_thread.isSuspended()) ", "+      //DrJava.consoleOut().println(\"Current thread is not suspended while trying to create a step request!\");    ", "+    // don't allow the creation of a new StepRequest if there's already one on", "+    // the current thread", "+    List steps = _eventManager.stepRequests();", "+    for (int i = 0; i < steps.size(); i++) {", "+      //DrJava.consoleOut().println(\"creating a new step: event thread: \" + ", "+      //                            ((StepRequest)steps.get(i)).thread() + ", "+      //                            \" current thread: \" +", "+      //                            _thread);", "+      if (((StepRequest)steps.get(i)).thread().equals(_thread)) {", "+        //DrJava.consoleOut().println(\"There's already a StepRequest on the current thread\");", "+        //DrJava.consoleOut().println(\"suspendCount: \" + _thread.suspendCount());", "+        /*try {", "+          DrJava.consoleOut().println(\"frames: \" + _thread.frames());", "+        }", "+        catch(IncompatibleThreadStateException itse) {", "+          DrJava.consoleOut().println(\"Can't print frames, thread is not suspended!\");", "+        }*/", "+        _thread.resume();", "+        return;", "+      }", "+    }", "+        ", "-    System.out.println(\"_thread resumed\");", "+    //System.out.println(\"_thread resumed\");"]}], "num": 15301}
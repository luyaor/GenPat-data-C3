{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f64bbe671a4e95679e985fdd772cda43", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "011e224d2c8ac2b8d59fc023ccd989ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 43, "signatureBeforeChange": "   protected void slaveQuitDuringStartup(int status)", "signatureAfterChange": "   private void _doStartup()", "diff": ["+  /** Call invokeSlave with the appropriate JVMBuilder.  Defined here to allow for multiple attempts. */", "+  private void _doStartup() {", "+    Iterable<File> classPath;", "+    List<String> jvmArgs = new ArrayList<String>();", "+    File dir;", "+    synchronized (_startupLock) {", "+      if (_allowAssertions) { jvmArgs.add(\"-ea\"); }", "+      classPath = _startupClassPath;", "+      dir = _workingDir;", "+    }", "+    // TODO: Eliminate NULL_FILE.  It is a bad idea!  The correct behavior when it is used always depends on", "+    // context, so it can never be treated transparently.  In this case, the process won't start.", "+    if (dir == FileOps.NULL_FILE) { dir = IOUtil.WORKING_DIRECTORY; }", "+    int debugPort = _getDebugPort();", "+    String slaveMemory = DrJava.getConfig().getSetting(OptionConstants.SLAVE_JVM_XMX);", "+    if (!\"\".equals(slaveMemory) && !OptionConstants.heapSizeChoices.get(0).equals(slaveMemory)) {", "+      jvmArgs.add(\"-Xmx\" + slaveMemory + \"M\");", "+    String slaveArgs = DrJava.getConfig().getSetting(OptionConstants.SLAVE_JVM_ARGS);", "+    if (PlatformFactory.ONLY.isMacPlatform()) {", "+      jvmArgs.add(\"-Xdock:name=Interactions\");", "+    jvmArgs.addAll(ArgumentTokenizer.tokenize(slaveArgs));", "+    invokeSlave(new JVMBuilder(classPath).directory(dir).jvmArguments(jvmArgs));", "-    */", "-  protected void slaveQuitDuringStartup(int status) {", "-    super.slaveQuitDuringStartup(status);", "-    _numAttempts++;  // no synchronization since this is the only place that _numAttempts is modified", "-    if (Utilities.TEST_MODE || _numAttempts < MAX_COUNT) return;  // Some tests kill the slave immediately after it starts.", "-    ", "-    // The slave JVM is not enabled after this to prevent an infinite loop of attempted startups", "-    _restart = false;", "-    ", "-    // Signal that an internal error occurred", "-    String msg = \"Interpreter JVM exited before registering, status: \" + status;", "-    IllegalStateException e = new IllegalStateException(msg);", "-    new edu.rice.cs.drjava.ui.DrJavaErrorHandler().handle(e);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a116f2dea3f061502e2b9b1973068e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "commitAfterChange": "1210f15594c9808455815ddca20501677d42bd7f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public ExecuteExternalDialog(MainFrame mf, boolean showRunButton)", "signatureAfterChange": "   public ExecuteExternalDialog(MainFrame mf, boolean editMode, int editIndex, CompletionMonitor cm)", "diff": ["-  public ExecuteExternalDialog(MainFrame mf, boolean showRunButton) {", "+  public ExecuteExternalDialog(MainFrame mf, boolean editMode, int editIndex, CompletionMonitor cm) {", "-    _showRunButton = showRunButton;", "+    _editMode = editMode;", "+    _editIndex = editIndex;", "+    _cm = cm;", "+    if (editMode) {", "+      if (editIndex>=DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT)) {", "+        throw new IllegalArgumentException(\"Trying to edit saved external process that does not exist\");", "+      }", "+      final String type = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).get(editIndex);", "+      final String cmdline = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES).get(editIndex);", "+      final String jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).get(editIndex);", "+      final String workdir = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS).get(editIndex);", "+      if (type.equals(\"cmdline\")) {", "+        _commandLine.setText(cmdline);", "+        _commandWorkDirLine.setText(workdir);", "+        _tabbedPane.remove(_javaPanel);", "+      }", "+      else if (type.equals(\"java\")) {", "+        _javaCommandLine.setText(cmdline);", "+        _jvmLine.setText(jvmargs);", "+        _javaCommandWorkDirLine.setText(workdir);", "+        _tabbedPane.remove(_commandPanel);", "+      }", "+      else {", "+        throw new IllegalArgumentException(\"Trying to edit saved external process of unknown type\");", "+      }", "+    }"]}], "num": 11338}
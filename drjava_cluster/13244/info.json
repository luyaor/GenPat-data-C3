{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0d98aea8ac60a716881c071659f4915", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27d5e0850aa2ad8c787c15d6a6dff837", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "          public void testForBracedBody()", "signatureAfterChange": "          public void testForBracedBody()", "diff": ["-      SymbolData eb = llv.getSymbolData(\"java.util.prefs.BackingStoreException\", JExprParser.NO_SOURCE_INFO, true);", "-      SymbolData re = llv.getSymbolData(\"java.lang.RuntimeException\", JExprParser.NO_SOURCE_INFO, true);", "+      SymbolData eb = llv.getSymbolData(\"java.util.prefs.BackingStoreException\", SourceInfo.NO_INFO, true);", "+      SymbolData re = llv.getSymbolData(\"java.lang.RuntimeException\", SourceInfo.NO_INFO, true);", "-      BracedBody plainBody = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[] {new UnlabeledBreakStatement(JExprParser.NO_SOURCE_INFO)});", "+      BracedBody plainBody = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new UnlabeledBreakStatement(SourceInfo.NO_INFO)});", "-      BracedBody runtimeBB = new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      BracedBody runtimeBB = new BracedBody(SourceInfo.NO_INFO, ", "-        new ThrowStatement(JExprParser.NO_SOURCE_INFO, ", "-                           new SimpleNamedClassInstantiation(JExprParser.NO_SOURCE_INFO, ", "-                                         new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, ", "+        new ThrowStatement(SourceInfo.NO_INFO, ", "+                           new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "+                                         new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "-                                                             new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0])))});", "+                                                             new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0])))});", "-      BracedBody bb = new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, ", "-        new ThrowStatement(JExprParser.NO_SOURCE_INFO, ", "-        new SimpleNamedClassInstantiation(JExprParser.NO_SOURCE_INFO, ", "-                                         new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, ", "+        new ThrowStatement(SourceInfo.NO_INFO, ", "+        new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, ", "+                                         new ClassOrInterfaceType(SourceInfo.NO_INFO, ", "-                                          new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[] {new StringLiteral(JExprParser.NO_SOURCE_INFO, \"wee\")})))});", "+                                          new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[] {new StringLiteral(SourceInfo.NO_INFO, \"wee\")})))});", "-        new BracedBody(JExprParser.NO_SOURCE_INFO, ", "+        new BracedBody(SourceInfo.NO_INFO, ", "-        new ExpressionStatement(JExprParser.NO_SOURCE_INFO, ", "-                                new SimpleMethodInvocation(JExprParser.NO_SOURCE_INFO, ", "-                                                           new Word(JExprParser.NO_SOURCE_INFO, \"throwsException\"), ", "-                                                           new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, ", "+        new ExpressionStatement(SourceInfo.NO_INFO, ", "+                                new SimpleMethodInvocation(SourceInfo.NO_INFO, ", "+                                                           new Word(SourceInfo.NO_INFO, \"throwsException\"), ", "+                                                           new ParenthesizedExpressionList(SourceInfo.NO_INFO, ", "-      BracedBody bbConstr = new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[]{new ExpressionStatement(JExprParser.NO_SOURCE_INFO, new SimpleNamedClassInstantiation(JExprParser.NO_SOURCE_INFO, new ClassOrInterfaceType(JExprParser.NO_SOURCE_INFO, _sd3.getName(), new Type[0]), new ParenthesizedExpressionList(JExprParser.NO_SOURCE_INFO, new Expression[0])))});", "+      BracedBody bbConstr = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[]{new ExpressionStatement(SourceInfo.NO_INFO, new SimpleNamedClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, _sd3.getName(), new Type[0]), new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0])))});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfce8c6d2e0b4a87390d63021522521c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "          public void testCheckAccessibility()", "signatureAfterChange": "          public void testCheckAccessibility()", "diff": ["-      assertTrue(\"checkAccessibility with public mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and different packages\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with public mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertTrue(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _publicMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with public mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertTrue(\"checkAccessibility with public mav and different packages\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with public mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility with public mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertTrue(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _publicMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with protected mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with protected mav and different package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with protected mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _protectedMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with protected mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccessibility with protected mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with protected mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility with protected mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _protectedMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "-      assertFalse(\"checkAccessibility with private mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and different package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with private mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertFalse(\"checkAccessibility with private mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertFalse(\"checkAccessibility with private mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccessibility with private mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with private mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertFalse(\"checkAccessibility with private mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with private mav and same file\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _privateMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with private mav and same file\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, \"fieldOfDreams\", _sd3, _sd3, \"field\"));      ", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _privateMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "-      assertTrue(\"checkAccessibility with package mav and same package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "-      assertFalse(\"checkAccessibility with package mav and different package\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility with package mav and is super class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "-      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "-      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(JExprParser.NO_SOURCE_INFO), _packageMav, _sd6.getName(), _sd2, _sd4, \"class\"));", "+      assertTrue(\"checkAccessibility with package mav and same package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd2, \"field\"));", "+      assertFalse(\"checkAccessibility with package mav and different package\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd1, _sd4, \"field\"));", "+      assertTrue(\"checkAccessibility with package mav and is outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd2, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility with package mav and is super class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, \"fieldOfDreams\", _sd3, _sd6, \"field\"));", "+      assertTrue(\"checkAccessibility for a class and its outer class\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd6, \"class\"));", "+      assertFalse(\"checkAccessibility for a class and a class it is not related to\", _btc.checkAccessibility(new NullLiteral(SourceInfo.NO_INFO), _packageMav, _sd6.getName(), _sd2, _sd4, \"class\"));"]}], "num": 13244}
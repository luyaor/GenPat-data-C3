{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8ff9667f0551bc70a434bf6e24229c0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ceff2c10ea69e66ed4d1fd34205d906", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "       public void testForSwitchStatement()", "signatureAfterChange": "       public void testForSwitchStatement()", "diff": ["-      SwitchStatement ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)), new SwitchCase[0]);", "+      SwitchStatement ss = new SwitchStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new IntegerLiteral(SourceInfo.NONE, 5)), new SwitchCase[0]);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new DoubleLiteral(SourceInfo.NO_INFO, 4.2), new SwitchCase[0]);", "+      ss = new SwitchStatement(SourceInfo.NONE, new DoubleLiteral(SourceInfo.NONE, 4.2), new SwitchCase[0]);", "-      UnbracedBody emptyBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      UnbracedBody emptyBody = new UnbracedBody(SourceInfo.NONE, new BodyItemI[0]);", "-      LabeledCase l1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), emptyBody);", "-      LabeledCase l2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), emptyBody);", "-      LabeledCase l3 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 7), emptyBody);", "+      LabeledCase l1 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), emptyBody);", "+      LabeledCase l2 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), emptyBody);", "+      LabeledCase l3 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 7), emptyBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {l1, l2, l3});", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {l1, l2, l3});", "-      DefaultCase dc1 = new DefaultCase(SourceInfo.NO_INFO, emptyBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {dc1, dc1});", "+      DefaultCase dc1 = new DefaultCase(SourceInfo.NONE, emptyBody);", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {dc1, dc1});", "-      ExpressionStatement assignX = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"x\")), new IntegerLiteral(SourceInfo.NO_INFO, 5)));", "-      UnbracedBody returnBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignX, new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5))});", "-      UnbracedBody breakBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignX, new UnlabeledBreakStatement(SourceInfo.NO_INFO)});", "-      UnbracedBody breakNoAssignBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new UnlabeledBreakStatement(SourceInfo.NO_INFO)});", "-      UnbracedBody fallThroughBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignX});", "-      UnbracedBody fallThroughNoAssignBody = new UnbracedBody(SourceInfo.NO_INFO, new BodyItemI[0]);", "+      ExpressionStatement assignX = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"x\")), new IntegerLiteral(SourceInfo.NONE, 5)));", "+      UnbracedBody returnBody = new UnbracedBody(SourceInfo.NONE, new BodyItemI[] {assignX, new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5))});", "+      UnbracedBody breakBody = new UnbracedBody(SourceInfo.NONE, new BodyItemI[] {assignX, new UnlabeledBreakStatement(SourceInfo.NONE)});", "+      UnbracedBody breakNoAssignBody = new UnbracedBody(SourceInfo.NONE, new BodyItemI[] {new UnlabeledBreakStatement(SourceInfo.NONE)});", "+      UnbracedBody fallThroughBody = new UnbracedBody(SourceInfo.NONE, new BodyItemI[] {assignX});", "+      UnbracedBody fallThroughNoAssignBody = new UnbracedBody(SourceInfo.NONE, new BodyItemI[0]);", "-      SwitchCase c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), returnBody);", "-      SwitchCase c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), breakBody);", "-      SwitchCase c3 = new DefaultCase(SourceInfo.NO_INFO, breakBody);", "+      SwitchCase c1 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), returnBody);", "+      SwitchCase c2 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 6), breakBody);", "+      SwitchCase c3 = new DefaultCase(SourceInfo.NONE, breakBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new DefaultCase(SourceInfo.NO_INFO, breakBody);", "-      c3 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), breakBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), fallThroughNoAssignBody);", "+      c2 = new DefaultCase(SourceInfo.NONE, breakBody);", "+      c3 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 6), breakBody);", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), breakNoAssignBody);", "-      c3 = new DefaultCase(SourceInfo.NO_INFO, breakBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), fallThroughNoAssignBody);", "+      c2 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 6), breakNoAssignBody);", "+      c3 = new DefaultCase(SourceInfo.NONE, breakBody);", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), fallThroughNoAssignBody);", "-      c3 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 7), breakBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), fallThroughNoAssignBody);", "+      c2 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 6), fallThroughNoAssignBody);", "+      c3 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 7), breakBody);", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {c1, c2, c3});", "-      c1 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5), fallThroughNoAssignBody);", "-      c2 = new LabeledCase(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 6), fallThroughNoAssignBody);", "-      c3 = new DefaultCase(SourceInfo.NO_INFO, fallThroughBody);", "-      ss = new SwitchStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"dan\")), new SwitchCase[] {c1, c2, c3});", "+      c1 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5), fallThroughNoAssignBody);", "+      c2 = new LabeledCase(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 6), fallThroughNoAssignBody);", "+      c3 = new DefaultCase(SourceInfo.NONE, fallThroughBody);", "+      ss = new SwitchStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"dan\")), new SwitchCase[] {c1, c2, c3});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a67f7a1300dfa730076de1f9f8e6ad58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void testForConcreteMethodDef()", "signatureAfterChange": "          public void testForConcreteMethodDef()", "diff": ["-        new FormalParameter(SourceInfo.NO_INFO, ", "-                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                              new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                              new Word (SourceInfo.NO_INFO, \"field1\")),", "+        new FormalParameter(SourceInfo.NONE, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                                              new PrimitiveType(SourceInfo.NONE, \"double\"), ", "+                                                              new Word (SourceInfo.NONE, \"field1\")),", "-        new FormalParameter(SourceInfo.NO_INFO, ", "-                            new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                              new PrimitiveType(SourceInfo.NO_INFO, \"boolean\"), ", "-                                                              new Word (SourceInfo.NO_INFO, \"field2\")),", "+        new FormalParameter(SourceInfo.NONE, ", "+                            new UninitializedVariableDeclarator(SourceInfo.NONE, ", "+                                                              new PrimitiveType(SourceInfo.NONE, \"boolean\"), ", "+                                                              new Word (SourceInfo.NONE, \"field2\")),", "-      ConcreteMethodDef cmd = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "+      ConcreteMethodDef cmd = new ConcreteMethodDef(SourceInfo.NONE, ", "-                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                    new Word(SourceInfo.NO_INFO, \"methodName\"),", "+                                                    new PrimitiveType(SourceInfo.NONE, \"int\"), ", "+                                                    new Word(SourceInfo.NONE, \"methodName\"),", "-                                                    new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "-        new ValueReturnStatement(SourceInfo.NO_INFO, new IntegerLiteral(SourceInfo.NO_INFO, 5) )}));", "+                                                    new BracedBody(SourceInfo.NONE, new BodyItemI[] {", "+        new ValueReturnStatement(SourceInfo.NONE, new IntegerLiteral(SourceInfo.NONE, 5) )}));", "-      cmd = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "+      cmd = new ConcreteMethodDef(SourceInfo.NONE, ", "-                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                    new Word(SourceInfo.NO_INFO, \"Selma\"),", "+                                                    new PrimitiveType(SourceInfo.NONE, \"int\"), ", "+                                                    new Word(SourceInfo.NONE, \"Selma\"),", "-                                                    new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {", "-                                                          new ValueReturnStatement(SourceInfo.NO_INFO, ", "-                                                                                   new IntegerLiteral(SourceInfo.NO_INFO, 5))}));", "+                                                    new BracedBody(SourceInfo.NONE, new BodyItemI[] {", "+                                                          new ValueReturnStatement(SourceInfo.NONE, ", "+                                                                                   new IntegerLiteral(SourceInfo.NONE, 5))}));", "-      PrimitiveType intt = new PrimitiveType(SourceInfo.NO_INFO, \"int\");", "-      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"i\"));", "+      PrimitiveType intt = new PrimitiveType(SourceInfo.NONE, \"int\");", "+      UninitializedVariableDeclarator uvd = new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"i\"));", "-      Statement s = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "-      ConcreteMethodDef cmd0 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], intt,", "-                                                    new Word(SourceInfo.NO_INFO, \"invalidMethod\"), new FormalParameter[0],", "-                                                    new ReferenceType[0], new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), s}));", "+      Statement s = new ValueReturnStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "+      ConcreteMethodDef cmd0 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], intt,", "+                                                    new Word(SourceInfo.NONE, \"invalidMethod\"), new FormalParameter[0],", "+                                                    new ReferenceType[0], new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), s}));", "-      Expression te = new LessThanExpression(SourceInfo.NO_INFO,", "-                                             new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-                                             new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      Statement ts = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      IfThenStatement ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+      Expression te = new LessThanExpression(SourceInfo.NONE,", "+                                             new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+                                             new IntegerLiteral(SourceInfo.NONE, 5));", "+      Statement ts = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      IfThenStatement ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      FormalParameter param = new FormalParameter(SourceInfo.NO_INFO, new UninitializedVariableDeclarator(SourceInfo.NO_INFO, intt, new Word(SourceInfo.NO_INFO, \"j\")), false);", "-      BracedBody bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift,", "-        new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")))});", "+      FormalParameter param = new FormalParameter(SourceInfo.NONE, new UninitializedVariableDeclarator(SourceInfo.NONE, intt, new Word(SourceInfo.NONE, \"j\")), false);", "+      BracedBody bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ift,", "+        new ValueReturnStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")))});", "-      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd1 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod\"), new FormalParameter[] {param}, ", "-      s = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                               new Word(SourceInfo.NO_INFO, \"i\")));", "+      s = new ValueReturnStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, ", "+                                                                               new Word(SourceInfo.NONE, \"i\")));", "-        new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd});", "+        new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd});", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 2)));", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                       new Word(SourceInfo.NONE, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 2)));", "-        new ExpressionStatement(SourceInfo.NO_INFO, ", "-                                new SimpleAssignmentExpression(SourceInfo.NO_INFO, ", "-                                                               new SimpleNameReference(SourceInfo.NO_INFO, ", "-                                                                                       new Word(SourceInfo.NO_INFO, \"i\")), ", "-                                                               new IntegerLiteral(SourceInfo.NO_INFO, 5)));", "+        new ExpressionStatement(SourceInfo.NONE, ", "+                                new SimpleAssignmentExpression(SourceInfo.NONE, ", "+                                                               new SimpleNameReference(SourceInfo.NONE, ", "+                                                                                       new Word(SourceInfo.NONE, \"i\")), ", "+                                                               new IntegerLiteral(SourceInfo.NONE, 5)));", "-      BracedBody b = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {i, se, se2, s});", "+      BracedBody b = new BracedBody(SourceInfo.NONE, new BodyItemI[] {i, se, se2, s});", "-        new ConcreteMethodDef(SourceInfo.NO_INFO, ", "+        new ConcreteMethodDef(SourceInfo.NONE, ", "-                              new Word(SourceInfo.NO_INFO, \"doubleAssignmentMethod\"), ", "+                              new Word(SourceInfo.NONE, \"doubleAssignmentMethod\"), ", "-      te = new LessThanExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"j\")),", "-       new IntegerLiteral(SourceInfo.NO_INFO, 5));", "-      Statement assignStatement = new ExpressionStatement(SourceInfo.NO_INFO, new SimpleAssignmentExpression(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")), new IntegerLiteral(SourceInfo.NO_INFO, 10)));", "-      Statement returnStatement = new ValueReturnStatement(SourceInfo.NO_INFO, new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"i\")));", "-      ts = new Block(SourceInfo.NO_INFO, new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {assignStatement, returnStatement}));", "-      ift = new IfThenStatement(SourceInfo.NO_INFO, te, ts);", "+      te = new LessThanExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"j\")),", "+       new IntegerLiteral(SourceInfo.NONE, 5));", "+      Statement assignStatement = new ExpressionStatement(SourceInfo.NONE, new SimpleAssignmentExpression(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")), new IntegerLiteral(SourceInfo.NONE, 10)));", "+      Statement returnStatement = new ValueReturnStatement(SourceInfo.NONE, new SimpleNameReference(SourceInfo.NONE, new Word(SourceInfo.NONE, \"i\")));", "+      ts = new Block(SourceInfo.NONE, new BracedBody(SourceInfo.NONE, new BodyItemI[] {assignStatement, returnStatement}));", "+      ift = new IfThenStatement(SourceInfo.NONE, te, ts);", "-      bb = new BracedBody(SourceInfo.NO_INFO, new BodyItemI[] {new VariableDeclaration(SourceInfo.NO_INFO,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ", "+      bb = new BracedBody(SourceInfo.NONE, new BodyItemI[] {new VariableDeclaration(SourceInfo.NONE,  _packageMav, new UninitializedVariableDeclarator[]{uvd}), ", "-        new ValueReturnStatement(SourceInfo.NO_INFO, ", "-                                 new IntegerLiteral(SourceInfo.NO_INFO, 5))});", "+        new ValueReturnStatement(SourceInfo.NONE, ", "+                                 new IntegerLiteral(SourceInfo.NONE, 5))});", "-      ConcreteMethodDef cmd4 = new ConcreteMethodDef(SourceInfo.NO_INFO, _publicMav, new TypeParameter[0], ", "-                                   intt, new Word(SourceInfo.NO_INFO, \"myMethod3\"), new FormalParameter[] {param}, ", "+      ConcreteMethodDef cmd4 = new ConcreteMethodDef(SourceInfo.NONE, _publicMav, new TypeParameter[0], ", "+                                   intt, new Word(SourceInfo.NONE, \"myMethod3\"), new FormalParameter[] {param}, "]}], "num": 21206}
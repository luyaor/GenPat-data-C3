{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ffbd89efb33aa0e7666dbafaa1756c0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eb57b8a2a20486814018075ac9ecec7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void compileConstructor(ConstructorDeclaration ast, Type extendsT)", "signatureAfterChange": "      private void compileConstructor(ConstructorDeclaration ast, Type extendsT)", "diff": ["-    Type outerT = SymbolUtil.thisType(outerC);", "+    Type outerT = (outerC == null) ? null : SymbolUtil.thisType(outerC);", "-    MethodVisitor mv = _classWriter.visitMethod(ast.getAccessFlags(), \"<init>\", methodDescriptor,", "+    // Promote default access to protected -- a subclass may logically appear in the same", "+    // package but, due to implementation constraints, be loaded by a different class loader.", "+    // In that situation, default access isn't permitted at run time.", "+    int access = defaultToProtectedAccess(ast.getAccessFlags());", "+    MethodVisitor mv = _classWriter.visitMethod(access, \"<init>\", methodDescriptor,", "-          emitUnbox(mv, paramT, stack);", "+          emitConvert(mv, paramT, stack);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541744acf337a648bd5423107174ba8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "bb97cd9f73d55ae676f0ba1f2e25693ba56b3a94", "commitAfterChange": "5b93e80cb10dee78dfbc4bb12adf88d5e7123ec9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public String getText()", "signatureAfterChange": "   public String getText()", "diff": ["-    if (_force) return _pim.getCurrentItem().toString();", "+    if (_force) {", "+      Object item = _matchList.getSelectedValue();", "+      return (item==null)?\"\":item.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67bee700f6dd401413cdf7eafe25d660", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/SingleDisplayModel.java", "commitBeforeChange": "492227e53d4f60169465f2fd7192a458815ea62f", "commitAfterChange": "8bce57471a5d2761f2096c66cde557596d4532bf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void setActiveDocument(int index)", "signatureAfterChange": "   public void setActiveDocument(int index)", "diff": ["+    int oldIndex = _selectionModel.getMinSelectionIndex();", "+    // Automatically fires event if index has changed", "+    ", "+    // Make sure field is set and event is fired,", "+    //  even if selection index did not change", "+    if (index == oldIndex) {", "+      _setActiveDoc(index);", "+    }"]}], "num": 9518}
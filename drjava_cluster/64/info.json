{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a211529ff49511d54dae72a6a34d312a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18573df88062e4b0762f44fb42f24e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "diff": ["+    // add breakpoints and watches", "+    try {", "+      ArrayList<DebugBreakpointData> l = new ArrayList<DebugBreakpointData>();", "+      for(Breakpoint bp: getDebugger().getBreakpoints()) { l.add(bp); }", "+      builder.setBreakpoints(l);", "+    }", "+    catch(DebugException de) { /* ignore, just don't store breakpoints */ }", "+    try {", "+      builder.setWatches(getDebugger().getWatches());", "+    }", "+    catch(DebugException de) { /* ignore, just don't store watches */ }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd9ee042f32e63d47258dd4915899ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 135, "signatureBeforeChange": "   private File[] _loadProject(ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private File[] _loadProject(ProjectFileIR ir) throws IOException", "diff": ["+    // set breakpoints", "+    try { getDebugger().removeAllBreakpoints(); }", "+    catch(DebugException de) { /* ignore, just don't remove old breakpoints */ }", "+    for (DebugBreakpointData dbd: ir.getBreakpoints()) {", "+      try { getDebugger().toggleBreakpoint(getDocumentForFile(dbd.getFile()), dbd.getOffset(), dbd.getLineNumber(), dbd.isEnabled()); }", "+      catch(DebugException de) { /* ignore, just don't add breakpoint */ }", "+    }", "+    ", "+    // set watches", "+    try { getDebugger().removeAllWatches(); }", "+    catch(DebugException de) { /* ignore, just don't remove old watches */ }", "+    for (DebugWatchData dwd: ir.getWatches()) {", "+      try { getDebugger().addWatch(dwd.getName()); }", "+      catch(DebugException de) { /* ignore, just don't add watch */ }", "+    }", "+    "]}], "num": 64}
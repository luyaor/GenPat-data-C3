{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2764db9217fe06baafa684fcecb0ad2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36743dacd349c72fb9e8fcb1001d90f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentDocFrame.java", "commitBeforeChange": "52434f6649577bc83989d279c33ddbe6369a078c", "commitAfterChange": "bfc3e0843658fe88dfa445991b253f3abfe88628", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public void next()", "signatureAfterChange": "   public void next()", "diff": ["-   */", "-  public void next(){", "-    if(_docs.size() > 0){", "-      _current++;", "-      if(_current >= _docs.size()){", "-        _current = 0;", "-      }", "-      ", "+   */", "+  public void next(){", "+    if(_docs.size() > 0){", "+      _current++;", "+      if(_current >= _docs.size()){", "+        _current = 0;", "+      }", "+      show(_current);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "431686c1d1784c39f08cccbb0f8254f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-windows/edu/rice/cs/drjava/platform/WindowsPlatform.java", "commitBeforeChange": "df01c8be1037a04090a700d45d88a837db8c2901", "commitAfterChange": "b58fba4c05c7b2fa2ddfeee6a4be5d11082f0498", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private String getCommandLine() throws WindowsRegistry.RegistryException, IOException", "signatureAfterChange": "      private String getCommandLine() throws WindowsRegistry.RegistryException, IOException", "diff": ["-  ", "-  private String getCommandLine() throws WindowsRegistry.RegistryException, IOException {", "-    final File drjavaFile = found;", "+  ", "+  private String getCommandLine() throws WindowsRegistry.RegistryException, IOException {", "+    final File drjavaFile = getDrJavaFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b212cdceb71105dc86817e218bc41c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/repl/EclipseInteractionsModel.java", "commitBeforeChange": "9e872e89ecbb011ef008c884ca8c25835ce56230", "commitAfterChange": "643b18bac8370f79aefcf668722f7c98ff72b6b4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected void _resetInteractionsClasspath()", "signatureAfterChange": "   protected void _resetInteractionsClasspath()", "diff": ["-        ", "-        // Get the project's location on disk", "-        IProject proj = jProj.getProject();", "-        IPath projRoot = proj.getDescription().getLocation();", "-        // Note: getLocation returns null if the default location is used", "-        //  (brilliant...)", "-        ", "-        // Get the resolved classpath entries - this should filter out", "-        //   all CPE_VARIABLE and CPE_CONTAINER entries.", "-        IClasspathEntry entries[] = jProj.getResolvedClasspath(true);", "-        ", "-        // For each of the classpath entries...", "-        for(int j = 0; j < entries.length; j++) {", "-          IClasspathEntry entry = entries[j];", "-          ", "-          // Check what kind of entry it is...", "-          int kind = entry.getEntryKind();", "-          ", "-          // And get the appropriate path.", "-          IPath path;", "-          switch (kind) {", "-            case IClasspathEntry.CPE_LIBRARY:", "-              // The raw location of a JAR.", "-              path = entry.getPath();", "-              //System.out.println(\"Adding library: \" + path.toOSString());", "-              addToClassPath(path.toOSString());", "-              break;", "-            case IClasspathEntry.CPE_SOURCE:", "-              // The output location of source.", "-              // Need to append it to the user's workspace directory.", "-              path = entry.getOutputLocation();", "-              if (path == null) {", "-                path = jProj.getOutputLocation();", "-                //System.out.println(\" output location from proj: \" + path);", "-              }", "-              ", "-              // At this point, the output location contains the project", "-              //  name followed by the actual output folder name", "-              ", "-              if (projRoot != null) {", "-                // We have a custom project location, so the project name", "-                //  is not part of the *actual* output directory.  We need", "-                //  to remove the project name (first segment) and then", "-                //  append the rest of the output location to projRoot.", "-                path = path.removeFirstSegments(1);", "-                path = projRoot.append(path);", "-              }", "-              else {", "-                // A null projRoot means use the default location, which", "-                //  *does* include the project name in the output directory.", "-                path = root.getLocation().append(path);", "-              }", "-              ", "-              //System.out.println(\"Adding source: \" + path.toOSString());", "-              addToClassPath(path.toOSString());", "-              break;", "-            case IClasspathEntry.CPE_PROJECT:", "-              // In this case, just the project name is given.", "-              // We don't actually need to add anything to the classpath,", "-              //  since the project is open and we will get its classpath", "-              //  on another pass.", "-              break;", "-            default:", "-              // This should never happen.", "-              throw new RuntimeException(\"Unsupported classpath entry type.\");", "-          }", "-        }", "+        _addProjectToClasspath(jProj, jModel, root);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9581f79c1af313b0cf203ed2031b234e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "eeab4bd745c9b7c513ba67239c4619739d7387ef", "commitAfterChange": "cfea3e13a321911fb98c8bdb6bf527cebe9e8065", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void testLanguageLevelJUnitErrorLine() throws Exception", "signatureAfterChange": "   public void testLanguageLevelJUnitErrorLine() throws Exception", "diff": ["+    ", "+    // ADAM LOOK HERE", "+    /*", "+    if(true) throw new RuntimeException(\"asdf\");", "+    if(true) throw new RuntimeException(\"asdf\");", "+    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b21b7aea05f03b1f2510d7ad6cf6302", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e4597735ed480ff103992a6b4edd98783ce62b7c", "commitAfterChange": "c918fda29945e681706734ce52051eaf13078f8d", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   private void _indentLine()", "signatureAfterChange": "   private void _indentLine()", "diff": ["+  private void _indentLine() {", "-   */", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea5b99703286d13373c960dd1596da2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "a8ca493ddf5cf029f49ecf9b980d8fcf5bf2653b", "commitAfterChange": "f758aacbc5e404bb5b48be8d2800987cd77d8e79", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void _setupTabPanes()", "signatureAfterChange": "   public void _setupTabPanes()", "diff": ["-      _threadTable = new JTable( new ThreadTableModel());", "-      _threadTable.addMouseListener(new ThreadMouseAdapter());", "-      _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable)); ", "-      // Sets the name column to always be 2 times as wide as the status column", "-      TableColumn nameColumn = null;", "-      TableColumn statusColumn = null;", "-      nameColumn = _threadTable.getColumnModel().getColumn(0);", "-      statusColumn = _threadTable.getColumnModel().getColumn(1);", "-      nameColumn.setPreferredWidth(2*statusColumn.getPreferredWidth()); ", "-      ", "-      // Adds a cell renderer to the threads table", "-      _currentThreadIndex = -1;", "-      _threadTable.getColumnModel().getColumn(0).setCellRenderer(new DebugTableCellRenderer());", "+       _initThreadTable();", "-            _threadTable = new JTable( new ThreadTableModel());", "-            _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable));", "-            // Sets the name column to always be 2 times as wide as the status column", "-            TableColumn nameColumn = null;", "-            TableColumn statusColumn = null;", "-            nameColumn = _threadTable.getColumnModel().getColumn(0);", "-            statusColumn = _threadTable.getColumnModel().getColumn(1);", "-            nameColumn.setPreferredWidth(2*statusColumn.getPreferredWidth()); ", "+             _initThreadTable();"]}], "num": 26857}
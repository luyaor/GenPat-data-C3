{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d44b5273c0080aa9ac657ea548d55f16", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df1a1ee4e625ef85e39e821148d02a0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 81, "signatureBeforeChange": "   @Override public Type visit(InstanceOfExpression node)", "signatureAfterChange": "     @Override public Type visit(InstanceOfExpression node)", "diff": ["+     */", "+    @Override public Type visit(InstanceOfExpression node) {", "+      Type expT = check(node.getExpression());", "+      Type targetT = checkTypeName(node.getReferenceType());", "+      if (!ts.isReference(expT) || !ts.isReference(targetT) || !ts.isCastable(targetT, expT)) {", "+        throw new ExecutionError(\"instanceof.type\", node);", "+      }", "+      if (!ts.isReifiable(targetT)) {", "+        throw new ExecutionError(\"reifiable.type\", node);", "+      }", "+      setErasedType(node.getReferenceType(), ts.erasedClass(targetT));", "-   */", "-  @Override public Type visit(InstanceOfExpression node) {", "-    Type expT = node.getExpression().acceptVisitor(this);", "-    Type targetT = node.getReferenceType().acceptVisitor(this);", "-    if (!ts.isReference(expT) || !ts.isReference(targetT) || !ts.isCastable(targetT, expT)) {", "-      throw new ExecutionError(\"instanceof.type\", node);", "-    }", "-    if (!ts.isReifiable(targetT)) {", "-      throw new ExecutionError(\"reifiable.type\", node);", "-    }", "-    setErasedType(node.getReferenceType(), ts.erasedClass(targetT));", "-    return setType(node, TypeSystem.BOOLEAN);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f35d118055f033f15619adb2f3e8f2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 38, "signatureBeforeChange": "   @Override public Type visit(ComplementExpression node)", "signatureAfterChange": "     @Override public Type visit(ComplementExpression node)", "diff": ["-   */", "-  @Override public Type visit(ComplementExpression node) {", "-    node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.unaryPromote(ts.makePrimitive(node.getExpression()));", "-      if (!(getType(exp) instanceof IntegralType)) {", "-        throw new ExecutionError(\"complement.expression.type\", node);", "-      }", "-      node.setExpression(exp);", "-      return setType(node, getType(exp));", "-    }", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"complement.expression.type\", node);", "-    }", "-  }", "+     */", "+    @Override public Type visit(ComplementExpression node) {", "+      check(node.getExpression());", "+        Expression exp = ts.unaryPromote(ts.makePrimitive(node.getExpression()));", "+        if (!(getType(exp) instanceof IntegralType)) {", "+          throw new ExecutionError(\"complement.expression.type\", node);", "+        }", "+        node.setExpression(exp);", "+        return setType(node, getType(exp));", "+        throw new ExecutionError(\"complement.expression.type\", node);"]}], "num": 16349}
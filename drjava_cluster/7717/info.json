{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b19d5f6ddf6c740389ff97887192d09", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80e856ca21e32479c2645fd9f6517e57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "     public Object visit(ShiftRightExpression node)", "signatureAfterChange": "   public Class visit(ShiftRightExpression node)", "diff": ["+   */", "+  public Class visit(ShiftRightExpression node) {", "+    Class c = visitShiftExpression(node);", "+    ", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.shiftRight", "+           (NodeProperties.getType(node),", "+            ln.getProperty(NodeProperties.VALUE),", "+            rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(ShiftRightExpression node) {", "-        Class c = visitShiftExpression(node);", "-", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.shiftRight", "-                     (NodeProperties.getType(node),", "-                      ln.getProperty(NodeProperties.VALUE),", "-                      rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f46c0f7047d234c49522624d10104e61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "     public Object visit(ShiftLeftExpression node)", "signatureAfterChange": "   public Class visit(ShiftLeftExpression node)", "diff": ["+   */", "+  public Class visit(ShiftLeftExpression node) {", "+    Class c = visitShiftExpression(node);", "+    ", "+    Node  ln = node.getLeftExpression();", "+    Node  rn = node.getRightExpression();", "+    ", "+    // Compute the expression if it is constant", "+    if (ln.hasProperty(NodeProperties.VALUE) &&", "+        rn.hasProperty(NodeProperties.VALUE)) {", "+      node.setProperty", "+        (NodeProperties.VALUE,", "+         InterpreterUtilities.shiftLeft", "+           (NodeProperties.getType(node),", "+            ln.getProperty(NodeProperties.VALUE),", "+            rn.getProperty(NodeProperties.VALUE)));", "+    }", "+    return c;", "+  }", "-     */", "-    public Object visit(ShiftLeftExpression node) {", "-        Class c = visitShiftExpression(node);", "-", "-        Node  ln = node.getLeftExpression();", "-        Node  rn = node.getRightExpression();", "-", "-        // Compute the expression if it is constant", "-        if (ln.hasProperty(NodeProperties.VALUE) &&", "-            rn.hasProperty(NodeProperties.VALUE)) {", "-            node.setProperty", "-                (NodeProperties.VALUE,", "-                 InterpreterUtilities.shiftLeft", "-                     (NodeProperties.getType(node),", "-                      ln.getProperty(NodeProperties.VALUE),", "-                      rn.getProperty(NodeProperties.VALUE)));", "-        }", "-        return c;", "-    }"]}], "num": 7717}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cae31e77a41a4c1200c03c41868e4f2c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31a6004725f22a09d96bc7279ed7c7eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Iterable<CompilationUnit> parse(Iterable<? extends File> sources) throws InterpreterException", "signatureAfterChange": "      private Iterable<CompilationUnit> parse(Iterable<? extends File> sources) throws InterpreterException", "diff": ["-    List<CompilationUnit> result = new ArrayList<CompilationUnit>();", "-    List<InterpreterException> errors = new ArrayList<InterpreterException>();", "-    FileFilter filter = IOUtil.extensionFilePredicate(\"java\");", "-    for (File f : sources) {", "-      for (File source : IOUtil.listFilesRecursively(f, filter)) {", "+    final List<CompilationUnit> result = new ArrayList<CompilationUnit>();", "+    Iterable<File> files = IterUtil.collapse(IterUtil.map(sources, new Lambda<File, Iterable<File>>() {", "+      private final FileFilter _filter = IOUtil.extensionFilePredicate(\"java\");", "+      public Iterable<File> value(File f) { return IOUtil.listFilesRecursively(f, _filter); }", "+    }));", "+    new Phase<File>(\"Parsing\") {", "+      protected void step(File source) throws InterpreterException {", "-          result.add(new JavaCCParser(new FileReader(source), source).parseCompilationUnit());", "+          JavaCCParser parser = new JavaCCParser(new FileReader(source), source);", "+          result.add(parser.parseCompilationUnit());", "-        catch (ParseError e) {", "-          errors.add(new ParserException(e));", "-        }", "-        catch (FileNotFoundException e) {", "-          errors.add(new SourceException(e));", "-        }", "-        debug.log(\"Parsed file \" + source);", "+        catch (ParseError e) { throw new ParserException(e); }", "+        catch (FileNotFoundException e) { throw new SourceException(e); }", "-    }", "-    if (errors.isEmpty()) { return result; }", "-    else { throw new CompositeException(errors); }", "+      protected SourceInfo location(File f) { return SourceInfo.point(f, 0, 0); }", "+    }.run(files);", "+    return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40138c9d6bb1bd3fc14964db18a54d73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void _setupView()", "signatureAfterChange": "   protected void _setupView()", "diff": ["-    KeyStroke beginLineKey = DrJava.getConfig().getSetting(OptionConstants.KEY_BEGIN_LINE);", "-    _pane.addActionForKeyStroke(beginLineKey, gotoPromptPosAction);", "-    _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(beginLineKey),", "-                                selectToPromptPosAction);", "-    KeyStroke endLineKey = DrJava.getConfig().getSetting(OptionConstants.KEY_END_LINE);", "-    _pane.addActionForKeyStroke(endLineKey, gotoEndAction);", "-    _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(endLineKey),", "-                                selectToEndAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_BEGIN_LINE), gotoPromptPosAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_BEGIN_LINE_SELECT), selectToPromptPosAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_END_LINE), gotoEndAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_END_LINE_SELECT), selectToEndAction);", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_BEGIN_LINE,", "-                                         new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_BEGIN_LINE, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "-        _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(oe.value),", "-                                    selectToPromptPosAction);", "+      }", "+    });", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_BEGIN_LINE_SELECT, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "+        _pane.addActionForKeyStroke(oe.value, selectToPromptPosAction);", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_END_LINE,", "-                                         new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_END_LINE, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "-        _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(oe.value),", "-                                    selectToEndAction);", "+     }", "+    });", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_END_LINE_SELECT, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "+        _pane.addActionForKeyStroke(oe.value, selectToEndAction);", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_CUT, new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_CUT, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_COPY, new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_COPY, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {"]}], "num": 12348}
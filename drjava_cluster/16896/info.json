{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21c102e9100d09123d8438ee91fa6240", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a188ee6234379e2ad700a98dfcfd09", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/ActionBracePlus.java", "commitBeforeChange": "098be4c27233835145531c86355bc697a3b62bfd", "commitAfterChange": "28db8fb2942dc00cad50f5244fe215d573867721", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   public boolean indentLine(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    doc.setCurrentLocation(startLine);", "-    IndentInfo info = doc._getIndentInformation();", "-    int dist = info.distToLineEnclosingBrace();", "+    doc.setCurrentLocation(startLine);  // Is this necessary?  _getLineEnclosingBrace only depends on current LINE", "+    BraceInfo info = doc._getLineEnclosingBrace();", "+    int dist = info.distance();", "-    if (info.lineEnclosingBraceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "+    if (info.braceType().equals(\"\") || dist < 0) {  // Should use interned Strings here", "-    int braceNewline = 0;", "-    int distStart = info.distToEnclosingBraceStart();", "-    if (distStart > 0) braceNewline = startLine - distStart;", "-    int braceLen = bracePos - braceNewline;", "+    // Get distance to start of line from enclosing brace", "+    int braceNewline = doc._getLineStartPos(bracePos);", "+    int braceIndent = bracePos - braceNewline;", "-    final int tab = _suffixCt + braceLen;", "+    final int tab = _suffixCt + braceIndent;", "-    if (here > doc.getLength()) {", "-      here = doc.getLength() - 1;", "-    }", "+    if (here > doc.getLength()) here = doc.getLength() - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ca6b5ed7b9c5229bac563543de0433", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionHasCharPrecedingOpenBrace.java", "commitBeforeChange": "b17c3d3d0edf27a5d35f38839287840198b5808d", "commitAfterChange": "80e5b2a4860b03c09786e96e9454b1209681f568", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, Indenter.IndentReason reason)", "diff": ["-    doc.move(lineStart - origin);  // TODO: use setCurrentLocation instead of move", "-    IndentInfo info = doc.getIndentInformation();  // TODO: revise to use getLineEnclosingBrace", "-    doc.move(origin - lineStart);  // TODO: use setCurrentLocation instead of move", "+//    doc.setCurrentLocation(lineStart);  ", "+    BraceInfo info = doc.getLineEnclosingBrace();  ", "+//    doc.setCurrentLocation(origin);  ", "-    if (! info.lineEnclosingBraceType().equals(IndentInfo.OPEN_CURLY) || info.distToLineEnclosingBrace() < 0) {  // How can distTo... be < 0?", "+    int dist = info.distance();", "+    ", "+    if (! info.braceType().equals(BraceInfo.OPEN_CURLY) || dist < 0) {  // dist < 0 means no such brace exists", "-    int bracePos = lineStart - info.distToLineEnclosingBrace();", "+    int bracePos = lineStart - dist;", "-      prevNonWS = doc.findPrevNonWSCharPos(bracePos);", "-      char c = doc.getText(prevNonWS,1).charAt(0);", "-      for (char pchar: _prefix) if (c == pchar) return true;", "+      int loc = doc.findPrevNonWSCharPos(bracePos);", "+      char ch = doc.getText(loc,1).charAt(0);", "+      for (char pch: _prefix) if (ch == pch) return true;"]}], "num": 16896}
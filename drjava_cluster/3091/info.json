{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "078c9160073af1f8d76be03d8f636f7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df4e8eab47824555b7e17d712551229c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public List buildStatementList (Reader r, String fname) throws InterpreterException", "signatureAfterChange": "   public List<Node> buildStatementList (Reader r, String fname) throws InterpreterException", "diff": ["+   */", "+  public List<Node> buildStatementList (Reader r, String fname) throws InterpreterException {", "+    List<Node> resultingList;", "+    try {", "+      SourceCodeParser    p = parserFactory.createParser(r, fname);", "+      List<Node> statements = p.parseStream();", "+      ListIterator<Node> it = statements.listIterator();", "+      ", "+      resultingList = new ArrayList<Node>();", "+      while (it.hasNext()) {", "+        Node n = it.next();", "+        NameVisitor nv = new NameVisitor(nameVisitorContext);", "+        Node o = n.acceptVisitor(nv);", "+        if (o != null) n = o;", "+        resultingList.add(n);", "+        TypeChecker tc = new TypeChecker(checkVisitorContext);", "+        n.acceptVisitor(tc);", "+        ", "+        evalVisitorContext.defineVariables", "+          (checkVisitorContext.getCurrentScopeVariables());", "+      }", "+      ", "+      return resultingList;", "+    } catch (ParseError e) {", "+      throw new InterpreterException(e);", "+  }", "-     */", "-    public List buildStatementList (Reader r, String fname) throws InterpreterException {", "-\tList resultingList;", "-\ttry {", "-\t    SourceCodeParser p = parserFactory.createParser(r, fname);", "-\t    List    statements = p.parseStream();", "-\t    ListIterator    it = statements.listIterator();", "-", "-            resultingList = new ArrayList();", "-\t    while (it.hasNext()) {", "-\t\tNode n = (Node)it.next();", "-\t\tVisitor v = new NameVisitor(nameVisitorContext);", "-\t\tObject o = n.acceptVisitor(v);", "-\t\tif (o != null) { ", "-\t\t    n = (Node)o;", "-\t\t}", "-\t\tresultingList.add(n);", "-\t\tv = new TypeChecker(checkVisitorContext);", "-\t\tn.acceptVisitor(v);", "-\t\t", "-\t\tevalVisitorContext.defineVariables", "-\t\t    (checkVisitorContext.getCurrentScopeVariables());", "-\t    }", "-", "-\t    return resultingList;", "-\t} catch (ParseError e) {", "-\t    throw new InterpreterException(e);", "-\t}", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3ecb6a009628035d1984c4ef974a7a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["-        List<Node>   statements = p.parseStream();", "-        ListIterator<Node>   it = statements.listIterator();", "+        List    statements = p.parseStream();", "+        ListIterator    it = statements.listIterator();", "-          NameVisitor nv = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "-          Node o = n.acceptVisitor(nv);", "-          if (o != null) n = o;", "+          Visitor v = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "+          Object o = n.acceptVisitor(v);", "+          if (o != null) {", "+            n = (Node)o;", "+          }", "-          TypeChecker tc = makeTypeChecker(checkVisitorContext);", "-          n.acceptVisitor(tc);", "+          v = makeTypeChecker(checkVisitorContext);", "+          n.acceptVisitor(v);", "-          EvaluationVisitor ev = makeEvaluationVisitor(evalVisitorContext);", "-          result = n.acceptVisitor(ev);", "+          v = makeEvaluationVisitor(evalVisitorContext);", "+          result = n.acceptVisitor(v);"]}], "num": 3091}
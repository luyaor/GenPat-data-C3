{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37337fb06fd42652233e7535c80ae144", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f002901bb1e5e08f3fe03a546bfc06a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["+    if (loc < 0) {", "+      throw new UnexpectedException(\"Illegal location \" + loc);  // was loc = 0", "+    }", "+    if (loc > getLength()) {", "+      throw new UnexpectedException(\"Illegal location \" + loc); // was loc = getLength();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "238568cacc22d3c48f4164a11b0decd3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/GeneralProcessCreator.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r   public Process start() throws IOException", "signatureAfterChange": "   public Process start() throws IOException", "diff": ["-  /** Starts a new process using the attributes of this process creator. */\r", "-  public Process start() throws IOException {\r", "-    // set up work directory\r", "-    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);\r", "-    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);\r", "-    File dir = null;\r", "-    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }\r", "-\r", "-    // set up environment\r", "-    String[] env = null;\r", "-    if ((_env!=null) && (_env.size()>0)) {\r", "-      env = new String[_env.size()];\r", "-      int i = 0;\r", "-      for(String key: _env.keySet()) {\r", "-        String value = _env.get(key);\r", "-        env[i] = key+\"=\"+value;\r", "-      }\r", "-    }\r", "-\r", "-    // set up command line\r", "-    if (_cmdline!=null) {\r", "-      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);\r", "-      _seqs = StringOps.commandLineToLists(_evaluatedCmdLine);\r", "-    }\r", "-    LOG.log(\"\\t\"+edu.rice.cs.plt.iter.IterUtil.toString(_seqs));\r", "-    if (_seqs.size()<1) { throw new IOException(\"No process to start.\"); }\r", "-    if (_seqs.size()==1) {\r", "-      // only one piping chain, creating a process sequence is not necessary\r", "-      List<List<String>> pipe = _seqs.get(0);\r", "-      if (pipe.size()<1) { throw new IOException(\"No process to start.\"); }\r", "-      if (pipe.size()==1) {\r", "-        // only one process, creating a piping chain is not necessary\r", "-        List<String> cmds = pipe.get(0);\r", "-        String[] cmdarray = new String[cmds.size()];\r", "-        for (int i=0; i<cmds.size(); ++i) {\r", "-          cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));\r", "-        }\r", "-        // creating a simple process\r", "-        return Runtime.getRuntime().exec(cmdarray,env,dir);\r", "-      }\r", "-      // more than one process, create a process chain\r", "-      ProcessCreator[] creators = new ProcessCreator[pipe.size()];\r", "-      for (int i=0; i<pipe.size(); ++i) {\r", "-        List<String> cmds = pipe.get(i);\r", "-        String[] cmdarray = new String[cmds.size()];\r", "-        for (int j=0; j<cmds.size(); ++j) {\r", "-          cmdarray[j] = StringOps.unescapeFileName(cmds.get(j));\r", "-        }\r", "-        creators[i] = new ProcessCreator(cmdarray, _workdir);\r", "-      }\r", "-      return new ProcessChain(creators);\r", "-    }\r", "-    // more than one piping chain, create a process sequence\r", "-    ProcessCreator[] creators = new ProcessCreator[_seqs.size()];\r", "-    for (int i=0; i<_seqs.size(); ++i) {\r", "-      List<List<List<String>>> l = new ArrayList<List<List<String>>>();\r", "-      l.add(_seqs.get(i));\r", "-      creators[i] = new GeneralProcessCreator(l, _workdir, _props);\r", "-    }\r", "-    return new ProcessSequence(creators);\r", "-  }\r", "+  /** Starts a new process using the attributes of this process creator. */", "+  public Process start() throws IOException {", "+    // set up work directory", "+    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);", "+    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);", "+    File dir = null;", "+    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }", "+", "+    // set up environment", "+    String[] env = null;", "+    if ((_env!=null) && (_env.size()>0)) {", "+      env = new String[_env.size()];", "+      int i = 0;", "+      for(String key: _env.keySet()) {", "+        String value = _env.get(key);", "+        env[i] = key+\"=\"+value;", "+      }", "+    }", "+", "+    // set up command line", "+    if (_cmdline!=null) {", "+      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);", "+      _seqs = StringOps.commandLineToLists(_evaluatedCmdLine);", "+    }", "+    LOG.log(\"\\t\"+edu.rice.cs.plt.iter.IterUtil.toString(_seqs));", "+    if (_seqs.size()<1) { throw new IOException(\"No process to start.\"); }", "+    if (_seqs.size()==1) {", "+      // only one piping chain, creating a process sequence is not necessary", "+      List<List<String>> pipe = _seqs.get(0);", "+      if (pipe.size()<1) { throw new IOException(\"No process to start.\"); }", "+      if (pipe.size()==1) {", "+        // only one process, creating a piping chain is not necessary", "+        List<String> cmds = pipe.get(0);", "+        if (cmds.size()<1) { throw new IOException(\"No process to start.\"); }", "+        String[] cmdarray = new String[cmds.size()];", "+        for (int i=0; i<cmds.size(); ++i) {", "+          cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));", "+        }", "+        // creating a simple process", "+        return Runtime.getRuntime().exec(cmdarray,env,dir);", "+      }", "+      // more than one process, create a process chain", "+      ProcessCreator[] creators = new ProcessCreator[pipe.size()];", "+      for (int i=0; i<pipe.size(); ++i) {", "+        List<String> cmds = pipe.get(i);", "+        if (cmds.size()<1) { throw new IOException(\"No process to start.\"); }", "+        String[] cmdarray = new String[cmds.size()];", "+        for (int j=0; j<cmds.size(); ++j) {", "+          cmdarray[j] = StringOps.unescapeFileName(cmds.get(j));", "+        }", "+        creators[i] = new ProcessCreator(cmdarray, _workdir);", "+      }", "+      return new ProcessChain(creators);", "+    }", "+    // more than one piping chain, create a process sequence", "+    ProcessCreator[] creators = new ProcessCreator[_seqs.size()];", "+    for (int i=0; i<_seqs.size(); ++i) {", "+      List<List<List<String>>> l = new ArrayList<List<List<String>>>();", "+      l.add(_seqs.get(i));", "+      creators[i] = new GeneralProcessCreator(l, _workdir, _props);", "+    }", "+    return new ProcessSequence(creators);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6302cae54e29716c9494d733031dd11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "   @Override public TypeContext visit(MethodDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(MethodDeclaration node)", "diff": ["+    if (node.getBody() == null) {", "+      setErrorStrings(node, node.getName());", "+      throw new ExecutionError(\"missing.method.body\", node);", "+    }"]}], "num": 17331}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "699b8a605b6e58e2b0ebe72b2790e667", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c933f7da760f413e9a9bd3be71f4860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "\r   public static boolean _isAssignable(MethodData overwritten, MethodData overwriting)", "signatureAfterChange": "   private static boolean _isCompatible(MethodData overwritten, MethodData overwriting)", "diff": ["-  /**Compare the ModifiersAndVisibility of the 2 method data to determine if overwriting can override the access priviledges of overwritten.  */\r", "-  public static boolean _isAssignable(MethodData overwritten, MethodData overwriting) {\r", "-    if (overwritten.hasModifier(\"public\")) { //a public method can only be overwritten by a public method.\r", "-      return overwriting.hasModifier(\"public\");\r", "-    }\r", "-    if (overwritten.hasModifier(\"protected\")) { //a protected method can only be overwritten by a protected or public method\r", "-      return overwriting.hasModifier(\"protected\") || overwriting.hasModifier(\"public\");\r", "-    } \r", "-    \r", "-    if (!overwritten.hasModifier(\"private\")) { //only private methods can be overwritten by private methods\r", "-      return !overwriting.hasModifier(\"private\");\r", "-    }\r", "-    return true;\r", "-      \r", "-    \r", "-  }\r", "+    */", "+  private static boolean _isCompatible(MethodData overwritten, MethodData overwriting) {", "+    if (overwritten.hasModifier(\"public\")) { // A public method can only be overwritten by a public method.", "+      return overwriting.hasModifier(\"public\");", "+    }", "+    if (overwritten.hasModifier(\"protected\")) { // A protected method can only be overwritten by protected/public method", "+      return overwriting.hasModifier(\"protected\") || overwriting.hasModifier(\"public\");", "+    } ", "+    if (! overwritten.hasModifier(\"private\")) { // only private methods can be overwritten by private methods", "+      return !overwriting.hasModifier(\"private\");", "+    }", "+    return true;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "215a9e4b10045fd96b3dc85b4f0577ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f487bb6e047f5c14a35953a64eee82a506af3ed7", "commitAfterChange": "828da1589ecf80d1be67fffa7a1ab51335a3ab2f", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 192, "signatureBeforeChange": "      public void fileClosed(OpenDefinitionsDocument doc)", "signatureAfterChange": "     private void _fileClosed(OpenDefinitionsDocument doc)", "diff": ["-    public void fileClosed(OpenDefinitionsDocument doc) {", "+    /** Does the work of closing a file */", "+    private void _fileClosed(OpenDefinitionsDocument doc){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b43f59868d492a111f1877549ed8a141", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 164, "signatureBeforeChange": "       protected void _waitJUnitDone() throws InterruptedException", "signatureAfterChange": "          public void waitJUnitDone() throws InterruptedException", "diff": ["-   ", "-  protected void _waitJUnitDone() throws InterruptedException {", "-    synchronized(_junitLock) {", "-      while (!_junitDone) {", "-//        System.err.println(\"Waiting for JUnit to complete\");", "-        _junitLock.wait();", "-      }", "-    }", "-  }", "+    ", "+    public void waitJUnitDone() throws InterruptedException {", "+      synchronized(_junitLock) {", "+        while (!_junitDone) { _junitLock.wait(); }", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc47c9a1d0279e60abf5b61d42b45352", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 44, "signatureBeforeChange": "   protected int getDebugPort()", "signatureAfterChange": "   private int _getDebugPort()", "diff": ["-  protected int getDebugPort() {", "+  private int _getDebugPort() {"]}], "num": 8456}
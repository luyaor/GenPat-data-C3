{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be0a87fe059773b105d65b6ef32365e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9402f6770aa730a4520bd54daf5bbe08", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 147, "signatureBeforeChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "signatureAfterChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["+    ", "+    final Set<VariableType> inputTParams = new HashSet<VariableType>();", "+    for (VariableType tparam : tparams) {", "+      for (Type t : params) {", "+        if (containsVar(t, tparam)) { inputTParams.add(tparam); break; }", "+      }", "+    }", "-    // try to use packed lower bounds", "+    // try to use packed bounds", "-            while (result instanceof VariableType && ((VariableType) result).symbol().generated()) {", "-              result = ((VariableType) result).symbol().upperBound();", "+            // use upper bound for input variables with a null lower bound", "+            if (result.equals(NULL) && inputTParams.contains(param)) {", "+              result = s.upperBound(param);", "+              while (result instanceof VariableType && ((VariableType) result).symbol().generated()) {", "+                result = ((VariableType) result).symbol().lowerBound();", "+              }", "+            }", "+            else {", "+              while (result instanceof VariableType && ((VariableType) result).symbol().generated()) {", "+                result = ((VariableType) result).symbol().upperBound();", "+              }", "-    // packed lower bounds don't work, try to use lower bounds", "+    // packed bounds don't work, try to use bounds", "-        public Type value(VariableType param) { return s.lowerBound(param); }", "+        public Type value(VariableType param) {", "+          Type result = s.lowerBound(param);", "+          // use upper bound for input variables with a null lower bound", "+          if (result.equals(NULL) && inputTParams.contains(param)) { result = s.upperBound(param); }", "+          return result;", "+        }", "-    // lower bounds don't work, try to use capture variables", "+    // bounds don't work, try to use capture variables"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28ceaf6d65146841b061bd691b583d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "e8c00117275c4794f9b044ac36c056a72d163888", "commitAfterChange": "615ff23a704e8a18c51abf1bd9015de115551141", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 145, "signatureBeforeChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "signatureAfterChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-    // try to use lower bounds", "+    // try to use packed lower bounds", "+    if (_packCaptureVars) {", "+      for (final ConstraintScenario s : transConstraints.scenarios()) {", "+        Iterable<Type> result = IterUtil.mapSnapshot(tparams, new Lambda<VariableType, Type>() {", "+          public Type value(VariableType param) {", "+            Type result = s.lowerBound(param);", "+            while (result instanceof VariableType && ((VariableType) result).symbol().generated()) {", "+              result = ((VariableType) result).symbol().upperBound();", "+            }", "+            return result;", "+          }", "+        });", "+        if (inBounds(tparams, result)) { return result; }", "+      }", "+    }", "+    ", "+    // packed lower bounds don't work, try to use lower bounds"]}], "num": 15361}
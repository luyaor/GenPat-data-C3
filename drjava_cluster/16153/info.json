{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f513fc852a6493c70d28a56e87d7f36", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0414f7b4fed38b1c92e41dfde5983c7a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessCreator.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Process start() throws IOException", "signatureAfterChange": "   public Process start() throws IOException", "diff": ["-    String workdir = StringOps.replaceVariables(_workdir, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "-    workdir = StringOps.unescapeSpacesWith1bHex(workdir);", "+    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);", "+    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);", "-    if (!workdir.trim().equals(\"\")) { dir = new File(workdir); }", "+    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }", "-      String replacedCmdLine = StringOps.replaceVariables(_cmdline, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "-      List<String> cmds = StringOps.commandLineToList(replacedCmdLine);", "+      _evaluatedCmdLine = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);", "+      List<String> cmds = StringOps.commandLineToList(_evaluatedCmdLine);", "-        _cmdarray[i] = StringOps.unescapeSpacesWith1bHex(cmds.get(i));", "+        _cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5205a852a0fd3b7f9d0927089c3e078e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessCreator.java", "commitBeforeChange": "b68b258fee7c24e8a8c68fc2e7d3d99ccd585753", "commitAfterChange": "ec06880aa408b928b2f252538b208a76154d8334", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public Process start() throws IOException", "signatureAfterChange": "   public Process start() throws IOException", "diff": ["-   */", "+    */", "-    List<String> cmds = StringOps.commandLineToList(StringOps.replaceVariables(_cmdline, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT));", "-    String[] cmdarray = new String[cmds.size()];", "-    for (int i=0; i<cmds.size(); ++i) {", "-      cmdarray[i] = StringOps.unescapeSpacesWith1bHex(cmds.get(i));", "-    }", "+    // set up work directory", "+    ", "+    // set up environment", "-    // edu.rice.cs.util.Log log = new edu.rice.cs.util.Log(\"process.txt\", true);", "-    // for(String c: cmdarray) { log.log(c); }", "-    // log.log(\"workdir: \"+dir);", "+    // set up command line, if necessary", "+    if (_cmdline!=null) {", "+      String replacedCmdLine = StringOps.replaceVariables(_cmdline, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "+      List<String> cmds = StringOps.commandLineToList(replacedCmdLine);", "+      _cmdarray = new String[cmds.size()];", "+      for (int i=0; i<cmds.size(); ++i) {", "+        _cmdarray[i] = StringOps.unescapeSpacesWith1bHex(cmds.get(i));", "+      }", "+    }", "-    return Runtime.getRuntime().exec(cmdarray,env,dir);", "+    return Runtime.getRuntime().exec(_cmdarray,env,dir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e28f0b2c6beed457d4b71d2bac5530e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/GeneralProcessCreator.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public Process start() throws IOException", "signatureAfterChange": "   public Process start() throws IOException", "diff": ["-    String workdir = StringOps.replaceVariables(_workdir, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "-    workdir = StringOps.unescapeSpacesWith1bHex(workdir);", "+    _evaluatedWorkDir = StringOps.replaceVariables(_workdir, _props, PropertyMaps.GET_CURRENT);", "+    _evaluatedWorkDir = StringOps.unescapeFileName(_evaluatedWorkDir);", "-    if (!workdir.trim().equals(\"\")) { dir = new File(workdir); }", "+    if (!_evaluatedWorkDir.trim().equals(\"\")) { dir = new File(_evaluatedWorkDir); }", "-      String replacedCmdLine = StringOps.replaceVariables(_cmdline, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "-      _seqs = StringOps.commandLineToLists(replacedCmdLine);", "+      _evaluatedWorkDir = StringOps.replaceVariables(_cmdline, _props, PropertyMaps.GET_CURRENT);", "+      _seqs = StringOps.commandLineToLists(_evaluatedWorkDir);", "-          cmdarray[i] = StringOps.unescapeSpacesWith1bHex(cmds.get(i));", "+          cmdarray[i] = StringOps.unescapeFileName(cmds.get(i));", "-          cmdarray[j] = StringOps.unescapeSpacesWith1bHex(cmds.get(j));", "+          cmdarray[j] = StringOps.unescapeFileName(cmds.get(j));", "-      creators[i] = new GeneralProcessCreator(l, _workdir);", "+      creators[i] = new GeneralProcessCreator(l, _workdir, _props);"]}], "num": 16153}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f81f859069ed839acda3aaeef3534760", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "525f7b82faa7ec307f856ac08aeb1609", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/MainFrame.java", "commitBeforeChange": "a84ad1a0e810fabf34d99b6942e7d43f11aaebeb", "commitAfterChange": "6c72ee3271e405b3e1eb75ff7cd6ca6f659b9121", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 38, "signatureBeforeChange": "   DefinitionsPane getDefPane()", "signatureAfterChange": "   private JMenu _setUpEditMenu()", "diff": ["-   */", "-  DefinitionsPane getDefPane() {", "-    return  _definitionsPane;", "-  }", "+   */", "+  private JMenu _setUpEditMenu() {", "+    JMenuItem tmpItem;", "+    JMenu editMenu = new JMenu(\"Edit\");", "+    /*The undo/redo menus and key action", "+     //tmpItem = editMenu.add(_definitionsPane.getUndoAction());", "+     //tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,", "+     //                                             ActionEvent.CTRL_MASK));    ", "+     //tmpItem = editMenu.add(_definitionsPane.getRedoAction());", "+     //tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,", "+     //                                             ActionEvent.CTRL_MASK));", "+     editMenu.addSeparator();", "+     */", "+", "+    // set up the actions for cut/copy/paste with regards to menu", "+    // items and keystrokers.", "+    Action cutAction = new DefaultEditorKit.CutAction();", "+    cutAction.putValue(Action.NAME, \"Cut\");", "+    Action copyAction = new DefaultEditorKit.CopyAction();", "+    copyAction.putValue(Action.NAME, \"Copy\");", "+    Action pasteAction = new DefaultEditorKit.PasteAction();", "+    pasteAction.putValue(Action.NAME, \"Paste\");", "+", "+    tmpItem = editMenu.add(cutAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ", "+                                                  ActionEvent.CTRL_MASK));", "+    tmpItem = editMenu.add(copyAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ", "+                                                  ActionEvent.CTRL_MASK));", "+    tmpItem = editMenu.add(pasteAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ", "+                                                  ActionEvent.CTRL_MASK));", "+    editMenu.addSeparator();", "+    tmpItem = editMenu.add(_findReplaceAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ", "+                                                  ActionEvent.CTRL_MASK));", "+    tmpItem = editMenu.add(_gotoLineAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, ", "+                                                  ActionEvent.CTRL_MASK));", "+    editMenu.add(_clearOutputAction);", "+    editMenu.add(_resetInteractionsAction);", "+    // Add the menus to the menu bar", "+    return editMenu;", "+  }  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9758ff922ce02a9221d1a4c49d300199", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "606df60980e3cc99d6da6907f3f1ce716cb9aae3", "commitAfterChange": "dbed8a61b502959ade9624734104a39bb55bea38", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(final String[] args)", "signatureAfterChange": "      public static void main(final String[] args)", "diff": ["+    ", "+    /*", "+     * Set the LookAndFeel for this session. If using a Plastic LAF, the theme must be set before setting the LAF.", "+     */", "-      if (! configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "+      String failureMessage =", "+        \"DrJava could not load the configured theme for the Plastic Look and Feel.\\n\" +", "+        \"If you've manually edited your configuration file, try \\n\" +", "+        \"removing the key \\\"plastic.theme\\\" and restarting DrJava.\\n\" +", "+        \"In the meantime, the system default Look and Feel will be used.\\n\";", "+      String failureTitle = \"Theme not found\";", "+      if(Utilities.isPlasticLaf(configLAFName)) {", "+        String themeName = PLASTIC_THEMES_PACKAGE + \".\" + DrJava.getConfig().getSetting(PLASTIC_THEMES);", "+        try {", "+          PlasticTheme theme = (PlasticTheme) Class.forName(themeName).getConstructor(new Class<?>[]{}).newInstance();", "+          PlasticLookAndFeel.setPlasticTheme(theme);", "+          PlasticLookAndFeel.setTabStyle(PlasticLookAndFeel.TAB_STYLE_METAL_VALUE);", "+          com.jgoodies.looks.Options.setPopupDropShadowEnabled(true);", "+          if(! configLAFName.equals(currLAFName)) UIManager.setLookAndFeel(configLAFName);", "+        } catch(NoSuchMethodException nsmex) {", "+          JOptionPane.showMessageDialog(null, failureMessage, failureTitle, JOptionPane.ERROR_MESSAGE);", "+        } catch(SecurityException sex) {", "+          JOptionPane.showMessageDialog(null, failureMessage, failureTitle, JOptionPane.ERROR_MESSAGE);", "+        } catch(InstantiationException iex) {", "+          JOptionPane.showMessageDialog(null, failureMessage, failureTitle, JOptionPane.ERROR_MESSAGE);", "+        } catch(IllegalAccessException iaex) {", "+          JOptionPane.showMessageDialog(null, failureMessage, failureTitle, JOptionPane.ERROR_MESSAGE);", "+        } catch(IllegalArgumentException iaex) {", "+          JOptionPane.showMessageDialog(null, failureMessage, failureTitle, JOptionPane.ERROR_MESSAGE);", "+        } catch(InvocationTargetException itex) {", "+          JOptionPane.showMessageDialog(null, failureMessage, failureTitle, JOptionPane.ERROR_MESSAGE);", "+        }", "+      } else if (! configLAFName.equals(currLAFName)) {", "+        UIManager.setLookAndFeel(configLAFName);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c310c2d43a2cd9a0d07c240f5cca9efb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "a84ad1a0e810fabf34d99b6942e7d43f11aaebeb", "commitAfterChange": "6c72ee3271e405b3e1eb75ff7cd6ca6f659b9121", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 38, "signatureBeforeChange": "   DefinitionsPane getDefPane()", "signatureAfterChange": "   private JMenu _setUpEditMenu()", "diff": ["-   */", "-  DefinitionsPane getDefPane() {", "-    return  _definitionsPane;", "-  }", "+   */", "+  private JMenu _setUpEditMenu() {", "+    JMenuItem tmpItem;", "+    JMenu editMenu = new JMenu(\"Edit\");", "+    /*The undo/redo menus and key action", "+     //tmpItem = editMenu.add(_definitionsPane.getUndoAction());", "+     //tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,", "+     //                                             ActionEvent.CTRL_MASK));    ", "+     //tmpItem = editMenu.add(_definitionsPane.getRedoAction());", "+     //tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R,", "+     //                                             ActionEvent.CTRL_MASK));", "+     editMenu.addSeparator();", "+     */", "+", "+    // set up the actions for cut/copy/paste with regards to menu", "+    // items and keystrokers.", "+    Action cutAction = new DefaultEditorKit.CutAction();", "+    cutAction.putValue(Action.NAME, \"Cut\");", "+    Action copyAction = new DefaultEditorKit.CopyAction();", "+    copyAction.putValue(Action.NAME, \"Copy\");", "+    Action pasteAction = new DefaultEditorKit.PasteAction();", "+    pasteAction.putValue(Action.NAME, \"Paste\");", "+", "+    tmpItem = editMenu.add(cutAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, ", "+                                                  ActionEvent.CTRL_MASK));", "+    tmpItem = editMenu.add(copyAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C, ", "+                                                  ActionEvent.CTRL_MASK));", "+    tmpItem = editMenu.add(pasteAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, ", "+                                                  ActionEvent.CTRL_MASK));", "+    editMenu.addSeparator();", "+    tmpItem = editMenu.add(_findReplaceAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F, ", "+                                                  ActionEvent.CTRL_MASK));", "+    tmpItem = editMenu.add(_gotoLineAction);", "+    tmpItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_G, ", "+                                                  ActionEvent.CTRL_MASK));", "+    editMenu.add(_clearOutputAction);", "+    editMenu.add(_resetInteractionsAction);", "+    // Add the menus to the menu bar", "+    return editMenu;", "+  }  "]}], "num": 30031}
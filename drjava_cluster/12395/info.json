{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b52696fc531c815f6ca00b1a9a6d2c67", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "051760dd38243e1e42950df3c1564239", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 212, "signatureBeforeChange": "     public boolean saveFile(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public boolean saveFile(FileSaveSelector com) throws IOException", "diff": ["-      FileSaveSelector realCommand;", "-      final File file;", "+//      System.err.println(\"saveFile called on \" + this);", "+//      System.err.println(this + \" is untitled? \" + isUntitled());", "+      if (isUntitled()) return saveFileAs(com);", "-      if (!isModifiedSinceSave() && !isUntitled()) return true;", "-        // Don't need to save; return true, since the save wasn't \"canceled\"", "+      if (! isModifiedSinceSave()) return true;", "+      // Didn't need to save since file is named and unmodified; return true, since the save wasn't \"canceled\"", "+      FileSaveSelector realCommand = com;", "-        if (isUntitled()) realCommand = com;", "-        else", "-          try {", "-          file = getFile();", "+        final File file = getFile();", "+//        System.err.println(\"file name for doc to be saved is: \" + file);", "+        if (file != null) {", "+//          System.err.println(\"TrivialFSS set up\");", "-        catch (FileMovedException fme) {", "-          // getFile() failed, prompt the user if a new one should be selected", "-          if (com.shouldSaveAfterFileMoved(this, fme.getFile())) realCommand = com;", "-          else return false;", "-            // User declines to save as a new file, so don't save ", "-        }", "-        return saveFileAs(realCommand);", "-      catch (IllegalStateException ise) {", "-        // No file--  this should have been caught by isUntitled()", "-        throw new UnexpectedException(ise);", "+      catch (FileMovedException fme) {", "+        // getFile() failed, prompt the user if a new one should be selected", "+        if (com.shouldSaveAfterFileMoved(this, fme.getFile())) realCommand = com;", "+        else return false;", "+        // User declines to save as a new file, so don't save ", "+//      System.err.println(\"Calling saveFileAs\");", "+      return saveFileAs(realCommand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2394ead5480ff5d849164ea202664c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "   private void _uncommentLine()", "signatureAfterChange": "   private void _uncommentLine() throws BadLocationException", "diff": ["+   */", "+  private void _uncommentLine() throws BadLocationException {", "+    // Look for \"//\" at the beginning of the line, and remove it.", "+    int curCol = getCurrentCol();", "+    int lineStart = _currentLocation - curCol;", "+    String text = getText(lineStart, curCol + _reduced.getDistToNextNewline());", "+    int pos = text.indexOf(\"//\");", "+    ", "+    //      System.out.println(\"\" + _currentLocation + \" \" + curCol + \" \"", "+    //                           + text + \" \" + pos + \" \" + _reduced.getDistToNextNewline());", "+    ", "+    // Look for any non-whitespace chars before the \"//\" on the line.", "+    boolean goodWing = true;", "+    for (int i = pos-1; i >= 0; i--) {", "+      char c = text.charAt(i);", "+      // If a previous char is not whitespace, we're not looking at a wing comment.", "+      if (c != ' ') {", "+        goodWing = false;", "+        break;", "+      }", "+    }", "+    ", "+    // If a wing comment wasn't found, or if the wings aren't the first", "+    // non-whitespace characters on the line, do nothing.", "+    if (pos >= 0 && goodWing) {", "+      // Otherwise, remove the wings and indent.", "+      remove(lineStart + pos, 2);", "+      _indentLine(Indenter.OTHER);", "-   */", "-  private void _uncommentLine() {", "-    // throwErrorHuh();", "-    try {", "-      // Look for \"//\" at the beginning of the line, and remove it.", "-      int curCol = getCurrentCol();", "-      int lineStart = getCurrentLocation() - curCol;", "-      String text = getText(lineStart, curCol + _reduced.getDistToNextNewline());", "-      int pos = text.indexOf(\"//\");", "-//      System.out.println(\"\" + getCurrentLocation() + \" \" + curCol + \" \"", "-//                           + text + \" \" + pos + \" \" + _reduced.getDistToNextNewline());", "-      // Look for any non-whitespace chars before the \"//\" on the line.", "-      boolean goodWing = true;", "-      for (int i = pos-1; ((i >= 0) && goodWing); i--) {", "-        char c = text.charAt(i);", "-        // If a previous char is not whitespace, we're not looking at a wing comment.", "-        // TODO: why the following???", "-        if (!((c == ' ') || (c == ' ') || (c == ' '))) goodWing = false;", "-      }", "-", "-      // If a wing comment wasn't found, or if the wings aren't the first", "-      // non-whitespace characters on the line, do nothing.", "-      if ((pos >= 0) && goodWing) {", "-        // Otherwise, remove the wings and indent.", "-        remove(lineStart + pos, 2);", "-        _indentLine(Indenter.OTHER);", "-      }", "-    } catch (BadLocationException e) { throw new UnexpectedException(e); }", "-  }"]}], "num": 12395}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d5d4d8e0c0f5dfb1a699fbe50087c8e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7533243d59f73a2ab2e1a0e157db474f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 129, "signatureBeforeChange": "       public void run(final Type t)", "signatureAfterChange": "     @Override public void run(final Type t)", "diff": ["+     */", "+    @Override public void run(final Type t) {", "+//        String prefix = \"\"; for (int i = 0; i < _stack.size(); i++) { prefix += \"  \"; }", "+//        System.out.println(prefix + \"Running on id \" + System.identityHashCode(t) + \": \" + t);", "+      Runnable recur = new Runnable() { public void run() { t.apply(TypeWriter.this); } };", "+      Runnable dontRecur = new Runnable() { public void run() { _result.append(\"...\"); } };", "+      //Threshold of 2 causes the loop to be printed twice", "+      _stack.run(recur, dontRecur, t/*, 2*/); ", "+    }", "-       */", "-      public void run(final Type t) {", "-//        String prefix = \"\"; for (int i = 0; i < _stack.size(); i++) { prefix += \"  \"; }", "-//        System.out.println(prefix + \"Running on id \" + System.identityHashCode(t) + \": \" + t);", "-        Runnable recur = new Runnable() { public void run() { t.apply(DumpType.this); } };", "-        Runnable dontRecur = new Runnable() { public void run() { result.append(\"...\"); } };", "-        //Threshold of 2 causes the loop to be printed twice", "-        _stack.run(recur, dontRecur, t/*, 2*/); ", "-      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b19215b8a8eb074b47ce65a16d063a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "commitAfterChange": "733b3cf4d974c1c6ea9506fe8718b272fd7a917d", "methodNumberBeforeChange": 223, "methodNumberAfterChange": 222, "signatureBeforeChange": "     public boolean changeRegion(R oldRegion, R newRegion)", "signatureAfterChange": "     public void changeRegion(R region, Lambda<Object,R> cmd)", "diff": ["-     *  @return true if a change was made */", "-    public boolean changeRegion(R oldRegion, R newRegion) {", "-      int index = _regions.indexOf(oldRegion);", "-      if (index<0) { return false; }", "+     *  @param cmd command that mutates the region. */", "+    public void changeRegion(R region, Lambda<Object,R> cmd) {", "+      int index = _regions.indexOf(region);", "+      if (index<0) { return; }", "-      boolean changed = changeRegionHelper(r, newRegion);", "-      if (changed) {", "-        Utilities.invokeLater(new Runnable() { public void run() { ", "-          // notify", "-          _lock.startRead();", "-          try {", "-            for (RegionManagerListener<R> l: _listeners) { l.regionChanged(r); }", "-          } finally { _lock.endRead(); }            ", "-        } });", "-      }", "-      return changed;", "+      cmd.apply(r);", "+      Utilities.invokeLater(new Runnable() { public void run() { ", "+        // notify", "+        _lock.startRead();", "+        try {", "+          for (RegionManagerListener<R> l: _listeners) { l.regionChanged(r); }", "+        } finally { _lock.endRead(); }            ", "+      } });"]}], "num": 9196}
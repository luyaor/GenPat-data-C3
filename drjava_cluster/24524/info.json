{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "795fd529dd7318c923c4f9b7ff4ccc3c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99dc0ee5dfbcb42ba73854c1f4423f3f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 7, "signatureBeforeChange": "   static void checkForCompilersAndDebugger(String[] args)", "signatureAfterChange": "   static void checkForCompilersAndDebugger(String[] args)", "diff": ["+   */", "+  static void checkForCompilersAndDebugger(String[] args) {", "+    ", "+    boolean needCompiler = ! hasAvailableCompiler();", "+    boolean needDebugger = ! hasAvailableDebugger();", "+", "+    // Try to make sure both compiler and debugger are available", "+    if (needCompiler || needDebugger) promptForToolsJar(needCompiler, needDebugger);", "-   */", "-  static void checkForCompilersAndDebugger(String[] args) {", "-    if (_attemptingAugmentedClassPath) {", "-      // We're on our second attempt-- just load DrJava", "-      return;", "-    }", "-", "-    boolean restartForToolsJar = false;", "-", "-    // Try to make sure both compiler and debugger are available", "-    if (hasAvailableCompiler()) {", "-      if (hasAvailableDebugger()) {", "-        // Everything is already on the classpath; start normally", "-        restartForToolsJar = false;", "-      }", "-      else if (classLoadersCanFindDebugger()) {", "-        // We know where tools.jar is, so restart with it on the classpath", "-        restartForToolsJar = true;", "-      }", "-      else {", "-        // Have a compiler (probably JSR14) but can't find JDI classes...", "-        // Prompt user for debugger (in tools.jar)", "-        restartForToolsJar = promptForToolsJar(false, true);", "-      }", "-    }", "-    else {", "-", "-      if (hasAvailableDebugger()) {", "-        // Debugger but no compiler => probably jpda on classpath.", "-        // Prompt user for compiler (in tools.jar)", "-        promptForToolsJar(true, false);", "-        // don't need to restart for tools.jar", "-      }", "-      else if (classLoadersCanFindDebugger()) {", "-        // Debugger if we restart, but no compiler => jpda in prefs?", "-        // Prompt use for compiler (in tools.jar)", "-//        promptForToolsJar(true, false);", "-        restartForToolsJar = true;", "-      }", "-      else {", "-        // No debugger or compiler", "-        // Prompt user for tools.jar", "-        restartForToolsJar = promptForToolsJar(true, true);", "-      }", "-    }", "-", "-    // Originally this also took in a flag if it was necessary to", "-    // restart to be able to use JSR-14 on OS X.  That is no longer", "-    // necessary, but I'll leave the contract like this for the time", "-    // being (in case another condition comes up).", "-    restartIfNecessary(restartForToolsJar, args);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7d13b8c973e44668e342a51b5080c80", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "832e5dfbee9301c0432d02f86eab2d13af7f51bc", "commitAfterChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void compileAll() throws IOException", "signatureAfterChange": "        public void compileEnded()", "diff": ["+", "+      public void compileEnded() {", "+        // Only clear interactions if there were no errors", "+        if ((_compilerModel.getNumErrors() == 0)", "+              && _interactionsModel.interpreterUsed()", "+              /* && _resetAfterCompile */) {", "+          resetInteractions();", "+        }", "+      }", "-   */", "-  public void compileAll() throws IOException {", "-    synchronized(_compilerLock) {", "-      // Only compile if all are saved", "-      if (hasModifiedDocuments()) {", "-        _notifier.saveBeforeCompile();", "-      }", "-", "-      if (hasModifiedDocuments()) {", "-        // if any files haven't been saved after we told our", "-        // listeners to do so, don't proceed with the rest", "-        // of the compile.", "-      }", "-      else {", "-        // Get sourceroots and all files", "-        File[] sourceRoots = getSourceRootSet();", "-        ArrayList<File> filesToCompile = new ArrayList<File>();", "-        for (int i = 0; i < _definitionsDocs.getSize(); i++) {", "-          OpenDefinitionsDocument doc = (OpenDefinitionsDocument)", "-            _definitionsDocs.getElementAt(i);", "-          try {", "-            filesToCompile.add(doc.getFile());", "-          }", "-          catch (IllegalStateException ise) {", "-            // No file for this document; skip it", "-          }", "-        }", "-        File[] files = filesToCompile.toArray(new File[0]);", "-", "-        _notifier.compileStarted();", "-", "-        try {", "-          // Compile the files", "-          _compileFiles(sourceRoots, files);", "-        }", "-        catch (Throwable t) {", "-          CompilerError err = new CompilerError(t.toString(), false);", "-          CompilerError[] errors = new CompilerError[] { err };", "-          _distributeErrors(errors);", "-        }", "-        finally {", "-          // Fire a compileEnded event", "-          _notifier.compileEnded();", "-", "-          // Only clear interactions if there were no errors", "-          if (_numErrors == 0) {", "-            if (/*_resetAfterCompile && */", "-                _interactionsModel.interpreterUsed()) {", "-              resetInteractions();", "-            }", "-          }", "-        }", "-      }", "-    }", "-  }"]}], "num": 24524}
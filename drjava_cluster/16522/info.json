{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4712ec2e8f2b549fcace5b00690978dc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d33244ca97ce19ffb9d470ee53bbbbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "signatureAfterChange": "   public void loadHistory(FileOpenSelector selector) throws IOException", "diff": ["-    try {", "-      histories = _getHistoryText(selector);", "-    }", "-    catch (OperationCanceledException oce) {", "-      return;", "-    }", "+    try { histories = _getHistoryText(selector); }", "+    catch (OperationCanceledException oce) { return; }", "-    for (int i = 0; i < histories.size(); i++) {", "-      ArrayList<String> interactions = _removeSeparators(histories.get(i));", "-      for (int j = 0; j < interactions.size(); j++) {", "-        String curr = interactions.get(j);", "+    for (String hist: histories) {", "+      ArrayList<String> interactions = _removeSeparators(hist);", "+      for (String curr: interactions) {", "-        if (len > 0 && curr.charAt(len - 1) != ';') {", "-          buf.append(';');", "-        }", "+        if (len > 0 && curr.charAt(len - 1) != ';')  buf.append(';');"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c42693d367b39fe8c7d46c90752362", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/HighlightManager.java", "commitBeforeChange": "c700f0baf9132c8d6ae724f82bf91ce8e4038f2f", "commitAfterChange": "da0a29e11c230fab76957a17e5a2991c9ab7978b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Stack<HighlightInfo> _getStackAt ( int from, int to)", "signatureAfterChange": "     private Stack<HighlightInfo> _getStackAt (HighlightInfo h)", "diff": ["-    private Stack<HighlightInfo> _getStackAt ( int from, int to) {", "+    private Stack<HighlightInfo> _getStackAt (HighlightInfo h) {", "-      for (int i=0; i<_highlights.size(); i++) {", "-", "-        Stack<HighlightInfo> stack = _highlights.get(i);", "-", "-        if (stack.isEmpty()) continue;", "-", "-        if (stack.get(0).matchesRegion(from, to)) {", "-          return _highlights.get(i);", "+      for (Stack<HighlightInfo> stack : _highlights) {", "+        if (stack.get(0).matchesRegion(h)) {", "+          return stack;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9286361c83397602de01784e010a869", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private void _javadocAllWorker(File destDirFile,                                  FileSaveSelector saver,                                  String classpath)", "signatureAfterChange": "   private void _javadocAllWorker(File destDirFile, FileSaveSelector saver, String classpath)", "diff": ["-  private void _javadocAllWorker(File destDirFile,", "-                                 FileSaveSelector saver,", "-                                 String classpath)", "-  {", "-    if (!_ensureValidToolsJar()) {", "-      return;", "-    }", "+  private void _javadocAllWorker(File destDirFile, FileSaveSelector saver, String classpath) {", "+    ", "+    if (!_ensureValidToolsJar()) return;", "-    HashSet<String> docUnits = new HashSet<String>();  // units to send to Javadoc (packages or files)", "-    HashSet<File> sourceRootSet = new HashSet<File>();  // set of unique source roots for open files", "-    HashSet<File> defaultRoots = new HashSet<File>();  // source roots for files in default package", "-    HashSet<String> topLevelPacks = new HashSet<String>();  // top level package names to include", "+    HashSet<String> docUnits      = new HashSet<String>(); // units to send to Javadoc (packages or files)", "+    HashSet<File>   sourceRootSet = new HashSet<File>();   // set of unique source roots for open files", "+    HashSet<File>   defaultRoots  = new HashSet<File>();   // source roots for files in default package", "+    HashSet<String> topLevelPacks = new HashSet<String>(); // top level package names to include", "-    for (int i = 0; i < docs.size(); i++) {", "-      OpenDefinitionsDocument doc = docs.get(i);", "+    for (OpenDefinitionsDocument doc: docs) {", "-        if (file == null) {", "-          throw new IllegalStateException(\"No file for this document.\");", "-        }", "+        if (file == null) throw new IllegalStateException(\"No file for this document.\");", "-          if (!defaultRoots.contains(sourceRoot)) {", "+          if (! defaultRoots.contains(sourceRoot)) {", "-", "-            for (int j = 0; j < javaFiles.length; j++) {", "-              docUnits.add(javaFiles[j].getAbsolutePath());", "-            }", "+            for (File f: javaFiles) { docUnits.add(f.getAbsolutePath());}", "-            searchRoot = new File(sourceRoot,", "-                                  pack.replace('.', File.separatorChar));", "+            searchRoot = new File(sourceRoot, pack.replace('.', File.separatorChar));", "-          if (!topLevelPacks.contains(topLevelPack)", "-                || !sourceRootSet.contains(sourceRoot)) {", "+          if (! topLevelPacks.contains(topLevelPack) || ! sourceRootSet.contains(sourceRoot)) {", "-    if (docUnits.size() == 0) {", "-      return;", "-    }", "+    if (docUnits.size() == 0) return;", "-      if (a != 0) {", "-        sourcePath.append(separator);", "-      }", "+      if (a != 0)  sourcePath.append(separator);", "-"]}], "num": 16522}
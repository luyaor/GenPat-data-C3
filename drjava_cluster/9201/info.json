{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9267e704a996934f536ce2eb34b1a6f7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d7ceea26bdf61cea31ff95892260036", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "f21f60b12bbd978bd39980f3ff0792b181091994", "commitAfterChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testSetFromNode() throws Exception", "signatureAfterChange": "\r   public void testSetFromNode() throws Exception", "diff": ["-  }", "-  public void testSetFromNode() throws Exception {", "-    XMLConfig xc = new XMLConfig();", "-    Node n = xc.set(\"foo/bar\", \"abc\", false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "-    ", "-    xc.set(\".fuz\", \"def\", n, false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "-    ", "-    n = xc.set(\"fum\", \"\", n.getParentNode(), false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum></fum>\"+NL+\"</foo>\"+NL, xc.toString());", "-    assertEquals(\"\", xc.get(\"foo/fum\"));", "-    ", "-    xc.set(\"file\", \"test1.txt\", n, false);", "-    xc.set(\"file\", \"test2.txt\", n, false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL", "-                   + \"  <fum><file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL, xc.toString());", "-    List<String> r = xc.getMultiple(\"foo/fum/file\");", "-    assertEquals(2, r.size());", "-    assertEquals(\"test1.txt\", r.get(0));", "-    assertEquals(\"test2.txt\", r.get(1));", "-  }", "+  }\r", "+  public void testSetFromNode() throws Exception {\r", "+    XMLConfig xc = new XMLConfig();\r", "+    Node n = xc.set(\"foo/bar\", \"abc\", false);\r", "+    \r", "+    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "+    \r", "+    xc.set(\".fuz\", \"def\", n, false);\r", "+    \r", "+    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "+    \r", "+    n = xc.set(\"fum\", \"\", n.getParentNode(), false);\r", "+    \r", "+    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum></fum>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    else {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum/>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    assertEquals(\"\", xc.get(\"foo/fum\"));\r", "+    \r", "+    xc.set(\"file\", \"test1.txt\", n, false);\r", "+    xc.set(\"file\", \"test2.txt\", n, false);\r", "+    \r", "+    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL\r", "+                     + \"  <fum><file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    else {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL\r", "+                     + \"  <fum>\"+NL+\"    <file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    List<String> r = xc.getMultiple(\"foo/fum/file\");\r", "+    assertEquals(2, r.size());\r", "+    assertEquals(\"test1.txt\", r.get(0));\r", "+    assertEquals(\"test2.txt\", r.get(1));\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b69b34b086ed230b3609ebd6a7d0822", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "    private SymbolData _getSymbolData_IsQualified(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                                  boolean addError)", "signatureAfterChange": "    private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                               boolean addError)", "diff": ["-   */ ", "-  private SymbolData _getSymbolData_IsQualified(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "-                                                boolean addError) {", "+    */ ", "+  private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "+                                             boolean addError) {", "+    _log.log(\"_getQualifiedSymbolData called on '\" + className + \"'\");", "+   ", "-    /* If sd is not null then if it's not a continuation, we're done, return it.", "+//    if (className.equals(\"fully.qualified.Woah\")) System.err.println(\"_getQualifiedSymbolData(\" + className + \", ...) called\" +", "+//                                                                    \"\\nsd = \" + sd);", "+    /* If sd is not null then return it unless it is continuation that we are resolving.", "-     * that we'll find it later.  If you don't return here, you can get into", "+     * that we'll find it later. (?)  If you don't return here, you can get into", "-    if (sd != null && (!sd.isContinuation() || fromClassFile)) { return sd; }", "+    _log.log(\"Corresponding symbolTable entry = \" + sd);", "+    if (sd != null && (!resolve || !sd.isContinuation() || fromClassFile)) { ", "+      _log.log(\"Returning \" + sd);", "+      return sd; ", "+    }", "+      _log.log(\"Calling  _classFile2SymbolData\");", "-    else {", "-      sd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "-      if (sd != SymbolData.KEEP_GOING) {", "-        return sd;", "+    else if (resolve) {  // Look for class file if resolving a continuation", "+      SymbolData newSd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "+      if (newSd != SymbolData.NOT_FOUND) {", "+        _log.log(\"Returning \" + sd + \" from file system\");", "+        return newSd;", "+      else if (sd != null && sd.isContinuation()) return sd;", "-      return null;", "+    _log.log(\"Returning null\");", "+    return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c33144342c0a5b1b7fea399a04de54", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "signatureAfterChange": "     private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped)", "diff": ["-//    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "+    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "-//    System.err.println(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "-//                       doc.getLength() + \", _isForward = \" + _isForward);", "+    _log.log(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +", "+                       doc.getLength() + \", _isForward = \" + _isForward);", "-//      System.err.println(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "-//                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);", "+      _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + ", "+                     newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7be414ebddbb514f4363b3d8b16874", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "signatureAfterChange": "   public Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>>     convert(File[] files, Options options, Map<File,Set<String>> sourceToTopLevelClassMap)", "diff": ["-    //  WHAT IS THE FOLLOWING STATIC FIELD REFERNCE DOING HERE?  THIS IS ABOMINABLE CODE!", "+    ", "+    LanguageLevelVisitor.symbolTable = symbolTable = new Symboltable();  // redundant?", "-    ", "-    // Similarly, we need a Hashtable for a shared symbolTable.", "-    Symboltable languageLevelVisitorSymbolTable = new Symboltable();", "+//            System.err.println(\"Parsing \" + f);", "+//            System.err.println(\"Completed parsing \" + f);", "+            _log.log(\"GENERATED ParseException for file \" + f);", "-              new ElementaryVisitor(f, new LinkedList<Pair<String, JExpressionIF>>(), languageLevelVisitorSymbolTable, ", "+              new ElementaryVisitor(f, new LinkedList<Pair<String, JExpressionIF>>(), symbolTable, ", "-              new IntermediateVisitor(f, new LinkedList<Pair<String, JExpressionIF>>(), languageLevelVisitorSymbolTable,", "+              new IntermediateVisitor(f, new LinkedList<Pair<String, JExpressionIF>>(), symbolTable,", "-              new AdvancedVisitor(f, new LinkedList<Pair<String, JExpressionIF>>(), languageLevelVisitorSymbolTable, ", "+              new AdvancedVisitor(f, new LinkedList<Pair<String, JExpressionIF>>(), symbolTable, ", "-          ", "+          _log.log(\"\\nDUMPING SYMBOLTABLE AFTER PHASE 1 PROCESSING OF \" + f + \"\\n\\n\" + symbolTable + \"\\n\");", "-      ", "-    ", "-    ", "+ ", "+    _log.log(\"\\nDUMPING SYMBOLTABLE BEFORE CONTINUATION RESOLUTION\\n\\n\" + symbolTable + \"\\n\");", "+    _log.log(\"Resolving continuations: \" + continuations + \"\\n\");", "+        _log.log(\"Attempting to resolve \" + className + \"\\n  Result = \" + returnedSd);", "-          LanguageLevelVisitor.errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, new NullLiteral(pair.getFirst())));", "+          LanguageLevelVisitor.errors.add(new Pair<String, JExpressionIF>(\"Could not resolve \" + className, ", "+                                                                          new NullLiteral(pair.getFirst())));", "-    ", "+     ", "+    _log.log(\"\\nDUMPING SYMBOLTABLE AFTER PASS 1\\n\\n\" + symbolTable + \"\\n\");", "+", "-        TypeChecker btc = new TypeChecker(llv._file, llv._package, llv.errors, llv.symbolTable, llv._importedFiles, llv._importedPackages);", "+        TypeChecker btc = new TypeChecker(llv._file, llv._package, llv.errors, symbolTable, llv._importedFiles, llv._importedPackages);"]}], "num": 9201}
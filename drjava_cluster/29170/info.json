{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8db3938633a025970997e14bd8f06f84", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4162e05a1c5f3c2dcf2e51bd810a2ea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/BodyBodyIntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public Void forInnerInterfaceDef(InnerInterfaceDef that)", "signatureAfterChange": "           public void testForInnerClassDef()", "diff": ["-   /** Process a local inner interface definition */", "-    handleInnerInterfaceDef(that, _bodyData, getQualifiedClassName(_bodyData.getSymbolData().getName()) + \".\" + ", "-                        _bodyData.getSymbolData().preincrementLocalClassNum() + that.getName().getText());", "+     public void testForInnerClassDef() {", "+     ", "+      // Test a local inner class definition and reference", "+      SymbolData obj = new SymbolData(\"ILikeMonkey\");", "+      LanguageLevelConverter.symbolTable.put(\"ILikeMonkey\", obj);", "+      InnerClassDef cd0 = ", "+        new InnerClassDef(SourceInfo.NO_INFO, ", "+                          _packageMav, ", "+                          new Word(SourceInfo.NO_INFO, \"Rod\"),", "+                          new TypeParameter[0], ", "+                          new ClassOrInterfaceType(SourceInfo.NO_INFO, \"ILikeMonkey\", new Type[0]), ", "+                          new ReferenceType[0], ", "+                          new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      cd0.visit(_bbv);", "+      assertEquals(\"There should be no errors\", 0, errors.size());", "+      SymbolData innerClass1 = _bbv._bodyData.getInnerClassOrInterface(\"Rod\");", "+      assertNotNull(\"Should have a inner class named Rod\", innerClass1);", "+      ", "+      // Test one with explicit modifiers", "+      InnerClassDef cd1 = ", "+        new InnerClassDef(SourceInfo.NO_INFO, ", "+                          _publicMav, ", "+                          new Word(SourceInfo.NO_INFO, \"Todd\"),", "+                          new TypeParameter[0], ", "+                          new ClassOrInterfaceType(SourceInfo.NO_INFO, \"ILikeMonkey\", new Type[0]), ", "+                          new ReferenceType[0], ", "+                          new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      cd1.visit(_bbv);", "+      assertEquals(\"There should be no errors\", 0, errors.size());  // modifiers are allowed", "+      SymbolData innerClass2 = _bbv._bodyData.getInnerClassOrInterface(\"Todd\");", "+      assertNotNull(\"Should have a inner class named Todd\", innerClass2);", "+     }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e68b336eba3d60793bc13eeb4a4c9924", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void testForConcreteMethodDefDoFirst()", "signatureAfterChange": "          public void testForConcreteMethodDefDoFirst()", "diff": ["-      // Check one that doesn't work because it is static", "-      ConcreteMethodDef cmd3 = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "-                                                     _staticMav, ", "-                                                     new TypeParameter[0], ", "-                                                     new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                     new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                                     new FormalParameter[0],", "-                                                     new ReferenceType[0], ", "-                                                     new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      cmd3.visit(_cbiv);", "-      assertEquals(\"There should be two errors\", 2, errors.size());", "-      assertEquals(\"The error message should be correct\", \"Static methods cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-      ", "+//      // Check one that doesn't work because it is static", "+//      ConcreteMethodDef cmd3 = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "+//                                                     _staticMav, ", "+//                                                     new TypeParameter[0], ", "+//                                                     new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+//                                                     new Word(SourceInfo.NO_INFO, \"methodName\"),", "+//                                                     new FormalParameter[0],", "+//                                                     new ReferenceType[0], ", "+//                                                     new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+//      cmd3.visit(_cbiv);", "+//      assertEquals(\"There should be two errors\", 2, errors.size());", "+//      assertEquals(\"The error message should be correct\", \"Static methods cannot be used at the Intermediate level\", errors.get(1).getFirst());", "+//      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f486076bb7d7776a74b501034e1ec741", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "    public void testLiveUpdateOfIndentLevel() throws BadLocationException", "signatureAfterChange": "      public void testLiveUpdateOfIndentLevel() throws BadLocationException", "diff": ["- ", "- public void testLiveUpdateOfIndentLevel() throws BadLocationException {", "-   ", "-   if (CodeStatus.DEVELOPMENT) {", "-     String text =", "-       \"int[2][] a ={\\n\" +", "-       \"{\\n\"  +", "-       \"1,\\n\" +", "-       \"2,\\n\" +", "-       \"3},\\n\" + ", "-       \"{\\n\" +", "-       \"4,\\n\" +", "-       \"5}\\n\" +", "-       \"};\\n\";", "-     ", "-     String indentedBefore =", "-       \"int[2][] a ={\\n\" +", "-       \"  {\\n\"  +", "-       \"    1,\\n\" +", "-       \"    2,\\n\" +", "-       \"    3},\\n\" + ", "-       \"  {\\n\" +", "-       \"    4,\\n\" +", "-       \"    5}\\n\" +", "-       \"};\\n\";", "-     ", "-     String indentedAfter =", "-       \"int[2][] a ={\\n\" + ", "-       \"        {\\n\" + ", "-       \"                1,\\n\" + ", "-       \"                2,\\n\" + ", "-       \"                3},\\n\" + ", "-       \"        {\\n\" + ", "-       \"                4,\\n\" + ", "-       \"                5}\\n\" + ", "-       \"};\\n\";", "-     ", "-     doc.insertString(0, text, null);", "-     _assertContents(text, doc);", "-     doc.indentLines(0, doc.getLength());", "-     _assertContents(indentedBefore, doc);", "-     ConfigurationTool.CONFIG.setSetting(OptionConstants.INDENT_LEVEL, new Integer(8));", "-     doc.indentLines(0, doc.getLength());", "-     _assertContents(indentedAfter, doc);", "-   }", "-   else return;", "-   ", "- }", "+  ", "+  public void testLiveUpdateOfIndentLevel() throws BadLocationException {", "+    ", "+    String text =", "+      \"int[2][] a ={\\n\" +", "+      \"{\\n\"  +", "+      \"1,\\n\" +", "+      \"2,\\n\" +", "+      \"3},\\n\" + ", "+      \"{\\n\" +", "+      \"4,\\n\" +", "+      \"5}\\n\" +", "+      \"};\\n\";", "+    ", "+    String indentedBefore =", "+      \"int[2][] a ={\\n\" +", "+      \"  {\\n\"  +", "+      \"    1,\\n\" +", "+      \"    2,\\n\" +", "+      \"    3},\\n\" + ", "+      \"  {\\n\" +", "+      \"    4,\\n\" +", "+      \"    5}\\n\" +", "+      \"};\\n\";", "+    ", "+    String indentedAfter =", "+      \"int[2][] a ={\\n\" + ", "+      \"        {\\n\" + ", "+      \"                1,\\n\" + ", "+      \"                2,\\n\" + ", "+      \"                3},\\n\" + ", "+      \"        {\\n\" + ", "+      \"                4,\\n\" + ", "+      \"                5}\\n\" + ", "+      \"};\\n\";", "+    ", "+    doc.insertString(0, text, null);", "+    _assertContents(text, doc);", "+    doc.indentLines(0, doc.getLength());", "+    _assertContents(indentedBefore, doc);", "+    ConfigurationTool.CONFIG.setSetting(OptionConstants.INDENT_LEVEL, new Integer(8));", "+    doc.indentLines(0, doc.getLength());", "+    _assertContents(indentedAfter, doc);   ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9356160076a44854935109b4901bb40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "d63224548fc8865b0ab459659b530c0d39d21fc7", "commitAfterChange": "d8eee91536a378507eadfac2f106d06ff2703bff", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "          public void testForVariableDeclarationOnly()", "signatureAfterChange": "          public void testForVariableDeclarationOnly()", "diff": ["-      assertEquals(\"The error message should be correct\", \"You cannot have two fields with the same name.  Either you already have a field by that name in this class, or one of your superclasses or interfaces has a field by that name\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"You cannot have two fields with the same name.  Either you already have a field by that name in \"", "+                     + \"this class, or one of your superclasses or interfaces has a field by that name\", ", "+                   errors.get(0).getFirst());", "-                                                        _staticMav,", "-                                                        new VariableDeclarator[] {", "+                                                           _staticMav,", "+                                                           new VariableDeclarator[] {", "-      VariableData vd4 = new VariableData(\"field4\", _finalStaticMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);", "-          vdecl3.visit(_cbiv);", "-        assertEquals(\"There should be two errors\", 2, errors.size());", "-        assertEquals(\"The error message should be correct\", \"All static fields must be initialized\", errors.get(1).getFirst());", "-        assertFalse(\"field4 was not added.\", _sd1.getVars().contains(vd4));", "-        ", "+      VariableData vd4 = new VariableData(\"field4\", _staticFinalMav, SymbolData.DOUBLE_TYPE, false, _cbiv._classData);  ", "+      ", "+      vdecl3.visit(_cbiv);", "+//      System.err.println(\"vd4 = \" + vd4);", "+      assertEquals(\"There should still be one error\", 1, errors.size());", "+//      assertEquals(\"The error message should be correct\", \"All static fields must be initialized\", ", "+//                   errors.get(1).getFirst());", "+//      System.err.println(\"_sd1 vars =  \" + _sd1.getVars());", "+      assertTrue(\"field4 was added.\", _sd1.getVars().contains(vd4));   ", "-                                            new Word (SourceInfo.NO_INFO, \"field5\"), new DoubleLiteral(SourceInfo.NO_INFO, 2.4))});", "+                                            new Word (SourceInfo.NO_INFO, \"field5\"), ", "+                                          new DoubleLiteral(SourceInfo.NO_INFO, 2.4))});", "-      assertEquals(\"There should be three errors.\", 3, errors.size());", "+      assertEquals(\"There should be two errors.\", 2, errors.size());", "-                   errors.get(2).getFirst());", "+                   errors.get(1).getFirst());"]}], "num": 29170}
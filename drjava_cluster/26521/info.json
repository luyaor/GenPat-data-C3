{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df7e53161349bb8d285c20c2aecc0757", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "450a67ff3109ba8f3f636f71e609edaa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public void testSuiteEnded(JUnitError[] errors)", "signatureAfterChange": "   public void testSuiteEnded(JUnitError[] errors)", "diff": ["-    if (_isTestInProgress) {", "-      _junitErrorModel = new JUnitErrorModel(errors, _getter, true);", "-      synchronized(this) { // so that it's not called until junitStarted is fired", "-        _isTestInProgress = false;", "-        _notifier.junitEnded();", "-      }", "-    }", "+//    new ScrollableDialog(null, \"DefaultJUnitModel.testSuiteEnded(...) called\", \"\", \"\").show();", "+    _junitErrorModel = new JUnitErrorModel(errors, _getter, true);", "+    _notifier.junitEnded();", "+    synchronized(this) { _testInProgress = false; }", "+//    new ScrollableDialog(null, \"DefaultJUnitModel.testSuiteEnded(...) finished\", \"\", \"\").show();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71470a68407520563132f5c17f995c9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/KeyBindingManager.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "signatureAfterChange": "          public void optionChanged(OptionEvent<KeyStroke> oce)", "diff": ["-      if (CodeStatus.DEVELOPMENT) {", "-        if(shouldUpdate(oce.value, _a)) ", "-        {", "-          KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a); ", "-          _keyToDataMap.remove(_ks);", "-          ", "-          //check for conflicting key binding", "-          if (_keyToDataMap.containsKey(oce.value) && _shouldCheckConflict) {", "-            //if new key in map, and shouldUpdate returns true, we are overwriting it", "-            KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "-            conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "-            _updateMenuItem(conflictKSD);", "-            _keyToDataMap.remove(oce.value);", "-            DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-          }", "-          ", "-          if (oce.value != KeyStrokeOption.NULL_KEYSTROKE) {", "-            _keyToDataMap.put(oce.value,data);", "-          }", "-          data.setKeyStroke(oce.value);", "-          _updateMenuItem(data);", "-          ", "-          //Check associated shift-version's binding", "-          Action shiftAction = (Action) data.getShiftAction();", "-          if (shiftAction != null) {", "-            //_keyToActionMap.remove(addShiftModifier(_ks));", "-            KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "-            _keyToDataMap.remove(shiftKSD.getKeyStroke());", "-            shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "-            _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "-            //mapInsert(addShiftModifier(oce.value), shiftAction);", "-          }", "-          ", "-          _ks = oce.value;          ", "+      if(shouldUpdate(oce.value, _a)) ", "+      {", "+        KeyStrokeData data = (KeyStrokeData)_actionToDataMap.get(_a); ", "+        _keyToDataMap.remove(_ks);", "+        ", "+        //check for conflicting key binding", "+        if (_keyToDataMap.containsKey(oce.value) && _shouldCheckConflict) {", "+          //if new key in map, and shouldUpdate returns true, we are overwriting it", "+          KeyStrokeData conflictKSD = (KeyStrokeData)_keyToDataMap.get(oce.value);", "+          conflictKSD.setKeyStroke(KeyStrokeOption.NULL_KEYSTROKE);", "+          _updateMenuItem(conflictKSD);", "+          _keyToDataMap.remove(oce.value);", "+          DrJava.CONFIG.setSetting(conflictKSD.getOption(), KeyStrokeOption.NULL_KEYSTROKE);", "-        else if (_ks != oce.value)", "-          DrJava.CONFIG.setSetting(oce.option, _ks);", "+        ", "+        if (oce.value != KeyStrokeOption.NULL_KEYSTROKE) {", "+          _keyToDataMap.put(oce.value,data);", "+        }", "+        data.setKeyStroke(oce.value);", "+        _updateMenuItem(data);", "+        ", "+        //Check associated shift-version's binding", "+        Action shiftAction = (Action) data.getShiftAction();", "+        if (shiftAction != null) {", "+          //_keyToActionMap.remove(addShiftModifier(_ks));", "+          KeyStrokeData shiftKSD = (KeyStrokeData) _actionToDataMap.get(shiftAction);", "+          _keyToDataMap.remove(shiftKSD.getKeyStroke());", "+          shiftKSD.setKeyStroke(addShiftModifier(oce.value));", "+          _keyToDataMap.put(shiftKSD.getKeyStroke(), shiftKSD);", "+          //mapInsert(addShiftModifier(oce.value), shiftAction);", "+        }", "+          ", "+        _ks = oce.value;          ", "-      ", "-      ", "+      else if (_ks != oce.value) {", "+        DrJava.CONFIG.setSetting(oce.option, _ks);", "+      }"]}], "num": 26521}
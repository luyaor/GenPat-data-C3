{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95c9510b955c117799a8cccd5cbcb0ee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520bb910ca91dd31e3ffbb308d15deb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "     public Node visit(ArrayAllocation node)", "diff": ["-    public Object visit(ArrayAllocation node) {", "+    public Node visit(ArrayAllocation node) {", "-      LinkedList sizes = new LinkedList(); // Add parameterization <Expression>.", "-      Iterator it = node.getSizes().iterator();", "+      LinkedList<Expression> sizes = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+      Iterator<Expression> it = node.getSizes().iterator();", "-        sizes.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        sizes.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761dd7b809e77d72208589f68912208f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "     public Node visit(ArrayAllocation node)", "diff": ["-    public Object visit(ArrayAllocation node) {", "+    public Node visit(ArrayAllocation node) {", "-      LinkedList sizes = new LinkedList(); // Add parameterization <Expression>.", "-      Iterator it = node.getSizes().iterator();", "+      LinkedList<Expression> sizes = new LinkedList<Expression>(); // Add parameterization <Expression>.", "+      Iterator<Expression> it = node.getSizes().iterator();", "-        sizes.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+        sizes.add((Expression)it.next().acceptVisitor(this));"]}], "num": 19096}
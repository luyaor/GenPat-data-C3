{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb5c127d69abb19c2401800b421f8c80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541bf8a1850545e83118454582a7b0db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TreeClass.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "            public Iterable<VariableType> typeParameters()", "signatureAfterChange": "            public Iterable<VariableType> typeParameters()", "diff": ["-      if (_m instanceof PolymorphicMethodDeclaration) {", "-        TypeParameter[] ps = ((PolymorphicMethodDeclaration)_m).getTypeParameters();", "-        return IterUtil.mapSnapshot(IterUtil.asIterable(ps), NodeProperties.NODE_TYPE_VARIABLE);", "-      }", "-      else { return IterUtil.empty(); }", "+      List<TypeParameter> paramAsts = _m.getTypeParams().unwrap(Collections.<TypeParameter>emptyList());", "+      return IterUtil.mapSnapshot(paramAsts, NodeProperties.NODE_TYPE_VARIABLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95d1ebbd257365e7e29f3a987d5a7639", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/TreeClass.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "     public Iterable<VariableType> typeParameters()", "signatureAfterChange": "     public Iterable<VariableType> typeParameters()", "diff": ["-      if (_k instanceof PolymorphicConstructorDeclaration) {", "-        TypeParameter[] ps = ((PolymorphicConstructorDeclaration)_k).getTypeParameters();", "-        return IterUtil.mapSnapshot(IterUtil.asIterable(ps), NodeProperties.NODE_TYPE_VARIABLE);", "-      }", "-      else { return IterUtil.empty(); }", "+      List<TypeParameter> paramAsts = _k.getTypeParams().unwrap(Collections.<TypeParameter>emptyList());", "+      return IterUtil.mapSnapshot(paramAsts, NodeProperties.NODE_TYPE_VARIABLE);"]}], "num": 2343}
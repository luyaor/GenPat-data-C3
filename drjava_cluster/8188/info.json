{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "549c61ef516499a92e23bdc098c81285", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4139ee6ecee8a9929e6b189df09288a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["-    // Blocks until interpreter has registered itself", "+    // Blocks until the interpreter has registered if hasn't already", "-    VirtualMachineManager vmm = Bootstrap.virtualMachineManager();", "-    List connectors = vmm.attachingConnectors();", "-    AttachingConnector connector = null;", "-    java.util.Iterator iter = connectors.iterator();", "-    while (iter.hasNext()) {", "-      AttachingConnector conn = (AttachingConnector)iter.next();", "-      if (conn.name().equals(\"com.sun.jdi.SocketAttach\")) {", "-        connector = conn;", "-      }", "-    }", "-    if (connector == null) {", "-      throw new DebugException(\"Could not find an AttachingConnector!\");", "-    }", "+    AttachingConnector connector = _getAttachingConnector();", "-    // get the singleton instance of the interpreterJVM", "-    List referenceTypes = _vm.classesByName(\"edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM\");", "-    if (referenceTypes.size() <= 0) {", "+    _interpreterJVM = _getInterpreterJVMRef();", "+  }", "-    ReferenceType rt = (ReferenceType)referenceTypes.get(0);", "-    Field field = rt.fieldByName(\"ONLY\");", "-    _interpreterJVM = (ObjectReference)rt.getValue(field);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb94758ecf786d765a3dccc1f14aabdb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "      private void _attachToVM() throws DebugException", "diff": ["+  ", "+  private void _attachToVM() throws DebugException {", "+    VirtualMachineManager vmm = Bootstrap.virtualMachineManager();", "+    List connectors = vmm.attachingConnectors();", "+    AttachingConnector connector = null;", "+    Iterator iter = connectors.iterator();", "+    while (iter.hasNext()) {", "+      AttachingConnector conn = (AttachingConnector)iter.next();", "+      if (conn.name().equals(\"com.sun.jdi.SocketAttach\")) {", "+        connector = conn;", "+      }", "+    }", "+    if (connector == null) {", "+      throw new DebugException(\"Could not find an AttachingConnector!\");", "+    }", "+    ", "+    // Try to connect", "+    Map args = connector.defaultArguments();", "+    Connector.Argument port = (Connector.Argument) args.get(\"port\");", "+    try {", "+      int debugPort = _model.getDebugPort();", "+      port.setValue(\"\" + debugPort);", "+      _vm = connector.attach(args);", "+      _eventManager = _vm.eventRequestManager();", "+    }", "+    catch (IOException ioe) {", "+      throw new DebugException(\"Could not connect to VM: \" + ioe);", "+    }", "+    catch (IllegalConnectorArgumentsException icae) {", "+      throw new DebugException(\"Could not connect to VM: \" + icae);", "+    }", "+  }"]}], "num": 8188}
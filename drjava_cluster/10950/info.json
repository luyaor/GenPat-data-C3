{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7d0c27f12209d1553e8018eee006cd5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027a947bfef6e4e84d45caf565745c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 44, "signatureBeforeChange": "   private static void archiveProperties(Node ast, final String prefix)", "signatureAfterChange": "          private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "diff": ["-   */", "-  private static void archiveProperties(Node ast, final String prefix) {", "-    new DepthFirstVisitor() {", "-      public void run(Node node) {", "-        node.archiveProperties(prefix);", "-        super.run(node);", "-      }", "-    }.run(ast);", "-  }", "+    ", "+    private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,", "+                                     Map<?,?> rightProps, SourceInfo.Wrapper right) {", "+      Set<Object> keys = new HashSet<Object>(leftProps.keySet());", "+      keys.retainAll(rightProps.keySet());", "+      Set<Object> leftKeys = new HashSet<Object>(leftProps.keySet());", "+      leftKeys.removeAll(keys);", "+      Set<Object> rightKeys = new HashSet<Object>(rightProps.keySet());", "+      rightKeys.removeAll(keys);", "+      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "+        mismatch(\"Extra properties\", leftKeys.toString(), left, rightKeys.toString(), right);", "+      }", "+      for (Object k : keys) {", "+        compareObjects(\"property \" + k, leftProps.get(k), left, rightProps.get(k), right);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c51ac675d183fc898721add7a5f981a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 63, "signatureBeforeChange": "          private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "signatureAfterChange": "          private void compareProperties(Class<?> c, Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "diff": ["-    private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,", "+    private void compareProperties(Class<?> c, Map<?,?> leftProps, SourceInfo.Wrapper left,", "-      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "-        mismatch(\"Extra properties\", leftKeys.toString(), left, rightKeys.toString(), right);", "-      }", "-        compareObjects(\"property \" + k, leftProps.get(k), left, rightProps.get(k), right);", "+        compareObjects(\"property \" + k + \" of \" + c.getName(), leftProps.get(k), left, rightProps.get(k), right);", "+      }", "+      if (leftKeys.contains(\"checkedType\")) {", "+        _log.extraLeftCast(c.getName(), left, right);", "+        leftKeys.remove(\"checkedType\");", "+      }", "+      if (rightKeys.contains(\"checkedType\")) {", "+        _log.extraRightCast(c.getName(), left, right);", "+        rightKeys.remove(\"checkedType\");", "+      }", "+      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "+        _log.mismatch(\"Extra properties\", c.getName(), leftKeys.toString(), left, rightKeys.toString(), right);"]}], "num": 10950}
/*BEGIN_COPYRIGHT_BLOCK
 *
 * This file is a part of DrJava. Current versions of this project are available
 * at http://sourceforge.net/projects/drjava
 *
 * Copyright (C) 2001-2002 JavaPLT group at Rice University (javaplt@rice.edu)
 * 
 * DrJava is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * DrJava is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * or see http://www.gnu.org/licenses/gpl.html
 *
 * In addition, as a special exception, the JavaPLT group at Rice University
 * (javaplt@rice.edu) gives permission to link the code of DrJava with
 * the classes in the gj.util package, even if they are provided in binary-only
 * form, and distribute linked combinations including the DrJava and the
 * gj.util package. You must obey the GNU General Public License in all
 * respects for all of the code used other than these classes in the gj.util
 * package: Dictionary, HashtableEntry, ValueEnumerator, Enumeration,
 * KeyEnumerator, Vector, Hashtable, Stack, VectorEnumerator.
 *
 * If you modify this file, you may extend this exception to your version of the
 * file, but you are not obligated to do so. If you do not wish to
 * do so, delete this exception statement from your version. (However, the
 * present version of DrJava depends on these classes, so you'd want to
 * remove the dependency first!)
 *
END_COPYRIGHT_BLOCK*/

package edu.rice.cs.drjava.config;

import gj.util.Vector;

/**
 * Abstract class defining behavior shared by all
 * configuration options with values of type
 * Vector<T>.
 */
public abstract class VectorOption<T> extends Option<Vector<T>>
{  
  /**
   * @param key The name of this option.
   */
  public <T> VectorOption(String key) { super(key); }
  
  /**
   * @param s The String to be parsed.
   * @return An instance of Vector<T> represented by "s".
   * @exception IllegalArgumentException if "s" is not formatted
   * according to the method Vector<T>.toString().
   */
  public Vector<T> parse(String s)
  {  
    // Enforced String format: "[<element>, <element>, <element>]"
      
    if (s.charAt(0) != '[' || s.charAt(s.length() - 1) != ']')
      throw new IllegalArgumentException("Input must be String representation" +
                                           " of a Vector.");
  
    Vector<T> res = new Vector<T>();
 
    int i = 1;
 
    while (i != s.length() - 1)
      i = this.parseElement(s, i, res);
     
    return res;
  }
  
  /**
   * @param v The Vector to be formatted.
   * @return A String representing "v". The overall String
   * format is determined by the method Vector<T>.tString(),
   * but each element of the vector is formatted by calling
   * formatElement().
   */
  public String format(Vector<T> v)
  {
    String res = "[";
    
    for (int i = 0; i < v.size(); i++)
    {
      res += this.formatElement(v.elementAt(i));
      
      if (i != v.size() - 1) res += ", ";
    }
    return res + "]";
  }
  
  /**
   * @param s A String representing an instance of class Vector<T>.
   * @param i The index in "s" marking the first character of
   * the instance of type T to be parsed and added to "v".
   * @param v The vector to which the new parsed element is added.
   * @return The index in "s" marking the first character of the
   * next instance of type T to be parsed, or the index of the last
   * character in "s" if this call parses the last element in "v".
   */
  abstract int parseElement(String s, int i, Vector<T> v);
  
  /**
   * @param element The vector element to be formatted.
   * @return A String representing "element". This operation
   * must be symmetrical in behavior to parseElement():
   * any String generated by this method must be recognized
   * by parseElement() as a legal String representation of
   * an instance of type T. Any other String must be rejected
   * by the method parseElement().
   */
  String formatElement(T element) { return element.toString(); }
}

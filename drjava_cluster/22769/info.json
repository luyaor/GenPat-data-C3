{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12a5a82d3b280f4ae2b4ed5cd8f13e14", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a23b7aa7f3583bfbb228e659eef78e0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/RecursiveFileListProperty.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected List<File> getList()", "signatureAfterChange": "\r   protected List<File> getList(PropertyMaps pm)", "diff": ["-  /** Abstract factory method specifying the list. */", "-  protected List<File> getList() {", "-    FileMaskFilter fFilter = new FileMaskFilter(_attributes.get(\"filter\"));", "-    FileMaskFilter fDirFilter = new FileMaskFilter(_attributes.get(\"dirfilter\"));", "-    String start = StringOps.replaceVariables(_attributes.get(\"dir\"), PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "-    start = StringOps.unescapeSpacesWith1bHex(start);", "-    File fStart = new File(start);", "-    // if the specified starting point is a directory, allow that directory", "-    if (fStart.isDirectory()) { fDirFilter.addIncludedFile(fStart); }", "-    Iterable<File> it = edu.rice.cs.plt.io.IOUtil.listFilesRecursively(fStart, fFilter, fDirFilter);", "-//    StringBuilder sb = new StringBuilder();  // not used", "-    ArrayList<File> l = new ArrayList<File>();", "-    for(File f: it) { l.add(f); }", "-    return l;", "-  }", "+    * @param pm PropertyMaps used for substitution when replacing variables */\r", "+  protected List<File> getList(PropertyMaps pm) {\r", "+    FileMaskFilter fFilter = new FileMaskFilter(_attributes.get(\"filter\"));\r", "+    FileMaskFilter fDirFilter = new FileMaskFilter(_attributes.get(\"dirfilter\"));\r", "+    String start = StringOps.replaceVariables(_attributes.get(\"dir\"), pm, PropertyMaps.GET_CURRENT);\r", "+    start = StringOps.unescapeFileName(start);\r", "+    File fStart = new File(start);\r", "+    // if the specified starting point is a directory, allow that directory\r", "+    if (fStart.isDirectory()) { fDirFilter.addIncludedFile(fStart); }\r", "+    Iterable<File> it = edu.rice.cs.plt.io.IOUtil.listFilesRecursively(fStart, fFilter, fDirFilter);\r", "+//    StringBuilder sb = new StringBuilder();  // not used\r", "+    ArrayList<File> l = new ArrayList<File>();\r", "+    for(File f: it) { l.add(f); }\r", "+    return l;\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5fdbb2ba9bcdcdea030ee3a09b284ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public SymbolData(String name)", "signatureAfterChange": "    public SymbolData(String name, SourceInfo si)", "diff": ["-  /** Called to create a continuation when all you know is the name */", "-  public SymbolData(String name) {", "+  /** Creates a continuation symbol for the specified name and source info; does not enter this name in any table. */ ", "+  public SymbolData(String name, SourceInfo si) {", "-    _modifiersAndVisibility = new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[0]);", "+    _modifiersAndVisibility = new ModifiersAndVisibility(si, new String[0]);", "-    _interfaces = new LinkedList<SymbolData>();", "+    _interfaces = new ArrayList<SymbolData>();"]}], "num": 22769}
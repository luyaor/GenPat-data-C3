{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f1582b0d9c20124da9df101970c814a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fdf76e581a229632339211109df1268", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "916bc85df19ddbd805549b35967e6345e48d28cd", "commitAfterChange": "293d2f48775237a9d88a9314fbc923b9c0083492", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "      public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "signatureAfterChange": "    public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "diff": ["+  } ", "-", "-    String compilerAdapter = adapterForCompiler(version.majorVersion());", "+    String compilerAdapter = null;", "+    ", "+    // force DrJava to try to load the javac main class;", "+    // if tools.jar isn't on the class path, this will fail", "+    // having tools.jar on the class path is not sufficient", "+    try {", "+      ReflectUtil.class.getClassLoader().loadClass(compilerMainClass(JavaVersion.CURRENT));", "+      compilerAdapter = adapterForCompiler(version.majorVersion());", "+    }", "+    catch(ClassNotFoundException e) { /* keep compilerAdapter == null */ }", "+    catch(UnsupportedClassVersionError e) { /* keep compilerAdapter == null */ }", "+    catch(RuntimeException e) { /* keep compilerAdapter == null */ }  ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9fb94159a3c29ea0be9362bb422ceb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JDKToolsLibrary.java", "commitBeforeChange": "f9f0ab44b47660447cfff11e665a39c76a7f44d4", "commitAfterChange": "45133bcfe62104f64c54f0a9dd6f0b7d50269b38", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "    public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "signatureAfterChange": "      public static JDKToolsLibrary makeFromRuntime(GlobalModel model)", "diff": ["-  } ", "-    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "-    String compilerAdapter = null;", "-    ", "-    // force DrJava to try to load the javac main class;", "-    // if tools.jar isn't on the class path, this will fail", "-    // having tools.jar on the class path is not sufficient", "-    try {", "-      ReflectUtil.class.getClassLoader().loadClass(compilerMainClass(JavaVersion.CURRENT));", "-      compilerAdapter = adapterForCompiler(version.majorVersion());", "-    }", "-    catch(ClassNotFoundException e) { /* keep compilerAdapter == null */ }", "-    catch(UnsupportedClassVersionError e) { /* keep compilerAdapter == null */ }", "-    catch(RuntimeException e) { /* keep compilerAdapter == null */ }  ", "+    CompilerInterface compiler = NoCompilerAvailable.ONLY;", "+    String compilerAdapter = adapterForCompiler(version.majorVersion());"]}], "num": 18603}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d272257b8f7bd5824d78c5a75b35df1d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59ca576dc71af69d71cee5075fcc7180", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/descriptors/MintDescriptor.java", "commitBeforeChange": "5e4fadedf6da2c2718ee8846afe69f5d1e599662", "commitAfterChange": "391e45139a20d29595a89151324a2e220b5d12fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public Iterable<File> getSearchDirectories()", "signatureAfterChange": "\r \r   public Iterable<File> getSearchDirectories()", "diff": ["-", "-  public Iterable<File> getSearchDirectories() { return IterUtil.empty(); }", "+\r", "+  public Iterable<File> getSearchDirectories() {\r", "+    return IterUtil.singleton(edu.rice.cs.util.FileOps.getDrJavaFile().getParentFile());\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7bda8cef37e15822e68f51cc7b8102d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "cd3fdc4192308881ec8f5fad639265e225a75848", "commitAfterChange": "f09079b576a626b69c1cf6a20aa2d21acb9dbff4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "signatureAfterChange": "\r   public static Iterable<JarJDKToolsLibrary> search(GlobalModel model)", "diff": ["-   */", "-  public static Iterable<JarJDKToolsLibrary> search(GlobalModel model) {", "-    String javaHome = System.getProperty(\"java.home\");", "-    String envJavaHome = null;", "-    String programFiles = null;", "-    String systemDrive = null;", "-    if (JavaVersion.CURRENT.supports(JavaVersion.JAVA_5)) {", "-      // System.getenv is deprecated under 1.3 and 1.4, and may throw a java.lang.Error (!),", "-      // which we'd rather not have to catch", "-      envJavaHome = System.getenv(\"JAVA_HOME\");", "-      programFiles = System.getenv(\"ProgramFiles\");", "-      systemDrive = System.getenv(\"SystemDrive\");", "-    }", "-    ", "-    /* roots is a list of possible parent directories of Java installations; we want to eliminate duplicates & ", "-     * remember insertion order", "-     */", "-    LinkedHashSet<File> roots = new LinkedHashSet<File>();", "-    ", "-    if (javaHome != null) {", "-      addIfDir(new File(javaHome), roots);", "-      addIfDir(new File(javaHome, \"..\"), roots);", "-      addIfDir(new File(javaHome, \"../..\"), roots);", "-    }", "-    if (envJavaHome != null) {", "-      addIfDir(new File(envJavaHome), roots);", "-      addIfDir(new File(envJavaHome, \"..\"), roots);", "-      addIfDir(new File(envJavaHome, \"../..\"), roots);", "-    }", "-    ", "-    if (programFiles != null) {", "-      addIfDir(new File(programFiles, \"Java\"), roots);", "-      addIfDir(new File(programFiles), roots);", "-    }", "-    addIfDir(new File(\"/C:/Program Files/Java\"), roots);", "-    addIfDir(new File(\"/C:/Program Files\"), roots);", "-    if (systemDrive != null) {", "-      addIfDir(new File(systemDrive, \"Java\"), roots);", "-      addIfDir(new File(systemDrive), roots);", "-    }", "-    addIfDir(new File(\"/C:/Java\"), roots);", "-    addIfDir(new File(\"/C:\"), roots);", "-    ", "-    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);", "-", "-    addIfDir(new File(\"/usr/java\"), roots);", "-    addIfDir(new File(\"/usr/j2se\"), roots);", "-    addIfDir(new File(\"/usr\"), roots);", "-    addIfDir(new File(\"/usr/local/java\"), roots);", "-    addIfDir(new File(\"/usr/local/j2se\"), roots);", "-    addIfDir(new File(\"/usr/local\"), roots);", "-", "-    /* Entries for Linux java packages */", "-    addIfDir(new File(\"/usr/lib/jvm\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);", "-    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);", "-", "-    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);", "-", "-    /* jars is a list of possible tools.jar (or classes.jar) files; we want to eliminate duplicates & ", "-     * remember insertion order", "-     */", "-    LinkedHashSet<File> jars = new LinkedHashSet<File>();", "-    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), starts with \"java-\" (Linux)", "-    Predicate<File> subdirFilter = LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"j2sdk.*\"),", "-                                                 IOUtil.regexCanonicalCaseFilePredicate(\"jdk.*\"),", "-                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\"),", "-                                                               IOUtil.regexCanonicalCaseFilePredicate(\"java.*\")));", "-    for (File root : roots) {", "-      for (File subdir : IOUtil.attemptListFilesAsIterable(root, subdirFilter)) {", "-        addIfFile(new File(subdir, \"lib/tools.jar\"), jars);", "-        addIfFile(new File(subdir, \"Classes/classes.jar\"), jars);", "-      }", "-    }", "-    ", "-    // JavaMint", "-    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);", "-    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);", "-    try {", "-      String mint_home = System.getenv(\"MINT_HOME\");", "-      if (mint_home!=null) {", "-        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/classes.jar\"), jars);", "-        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/tools.jar\"), jars);", "-      }", "-    }", "-    catch(Exception e) { /* ignore MINT_HOME variable */ }", "-    ", "-    // We store everything in reverse order, since that's the natural order of the versions", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> results = ", "-      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> mintResults =", "-      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();", "-    ", "-    for (File jar : jars) {", "-      JarJDKToolsLibrary lib = makeFromFile(jar, model);", "-      if (lib.isValid()) {", "-        FullVersion v = lib.version();", "-        Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;", "-        if (v.vendor().equals(JavaVersion.VendorType.MINT)) { mapToAddTo = mintResults; }", "-        ", "-        if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }", "-        else { mapToAddTo.put(v, IterUtil.singleton(lib)); }", "-      }", "-    }", "-    ", "-    Iterable<JarJDKToolsLibrary> collapsed = IterUtil.reverse(IterUtil.collapse(results.values()));", "-    Iterable<JarJDKToolsLibrary> mintCollapsed = IterUtil.reverse(IterUtil.collapse(mintResults.values()));", "-    ", "-    Map<FullVersion, Iterable<JarJDKToolsLibrary>> javaMintResults =", "-      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();", "-    // now we have the JDK libraries in collapsed and the Mint libraries in mintCollapsed", "-    for(JarJDKToolsLibrary mintLib: mintCollapsed) {", "-//      msg(\"mintLib: \"+mintLib.version());", "-      FullVersion mintVersion = mintLib.version();", "-      JarJDKToolsLibrary found = null;", "-      // try to find a JDK in results that matches mintVersion exactly, except for vendor", "-      for(JarJDKToolsLibrary javaLib: collapsed) {", "-//        msg(\"\\texact? \"+javaLib.version());", "-        FullVersion javaVersion = javaLib.version();", "-        if ((javaVersion.majorVersion().equals(mintVersion.majorVersion())) &&", "-            (javaVersion.maintenance()==mintVersion.maintenance()) &&", "-            (javaVersion.update()==mintVersion.update()) &&", "-            (javaVersion.release()==mintVersion.release())) {", "-//          msg(\"\\t\\tfound\");", "-          found = javaLib;", "-          break;", "-        }", "-      }", "-      // if we didn't find one, take the best JDK that matches the major version", "-      if (found==null) {", "-        for(JarJDKToolsLibrary javaLib: collapsed) {", "-//          msg(\"\\tmajor? \"+javaLib.version());", "-          FullVersion javaVersion = javaLib.version();", "-          if (javaVersion.majorVersion().equals(mintVersion.majorVersion())) {", "-//            msg(\"\\t\\tfound\");", "-            found = javaLib;", "-            break;", "-          }", "-        }", "-      }", "-      // if we found a JDK, then create a new Mint library", "-      if (found!=null) {", "-        JarJDKToolsLibrary lib = makeFromFile(mintLib.location(), model, found.bootClassPath());", "-        if (lib.isValid()) {", "-//          msg(\"\\t==> \"+lib.version());", "-          FullVersion v = lib.version();", "-          if (javaMintResults.containsKey(v)) { javaMintResults.put(v, IterUtil.compose(lib, javaMintResults.get(v))); }", "-          else { javaMintResults.put(v, IterUtil.singleton(lib)); }", "-        }", "-      }", "-    }", "-    return IterUtil.compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));", "-  }", "+   */\r", "+  public static Iterable<JarJDKToolsLibrary> search(GlobalModel model) {\r", "+    String javaHome = System.getProperty(\"java.home\");\r", "+    String envJavaHome = null;\r", "+    String programFiles = null;\r", "+    String systemDrive = null;\r", "+    if (JavaVersion.CURRENT.supports(JavaVersion.JAVA_5)) {\r", "+      // System.getenv is deprecated under 1.3 and 1.4, and may throw a java.lang.Error (!),\r", "+      // which we'd rather not have to catch\r", "+      envJavaHome = System.getenv(\"JAVA_HOME\");\r", "+      programFiles = System.getenv(\"ProgramFiles\");\r", "+      systemDrive = System.getenv(\"SystemDrive\");\r", "+    }\r", "+    \r", "+    /* roots is a list of possible parent directories of Java installations; we want to eliminate duplicates & \r", "+     * remember insertion order\r", "+     */\r", "+    LinkedHashSet<File> roots = new LinkedHashSet<File>();\r", "+    \r", "+    if (javaHome != null) {\r", "+      addIfDir(new File(javaHome), roots);\r", "+      addIfDir(new File(javaHome, \"..\"), roots);\r", "+      addIfDir(new File(javaHome, \"../..\"), roots);\r", "+    }\r", "+    if (envJavaHome != null) {\r", "+      addIfDir(new File(envJavaHome), roots);\r", "+      addIfDir(new File(envJavaHome, \"..\"), roots);\r", "+      addIfDir(new File(envJavaHome, \"../..\"), roots);\r", "+    }\r", "+    \r", "+    if (programFiles != null) {\r", "+      addIfDir(new File(programFiles, \"Java\"), roots);\r", "+      addIfDir(new File(programFiles), roots);\r", "+    }\r", "+    addIfDir(new File(\"/C:/Program Files/Java\"), roots);\r", "+    addIfDir(new File(\"/C:/Program Files\"), roots);\r", "+    if (systemDrive != null) {\r", "+      addIfDir(new File(systemDrive, \"Java\"), roots);\r", "+      addIfDir(new File(systemDrive), roots);\r", "+    }\r", "+    addIfDir(new File(\"/C:/Java\"), roots);\r", "+    addIfDir(new File(\"/C:\"), roots);\r", "+    \r", "+    addIfDir(new File(\"/System/Library/Frameworks/JavaVM.framework/Versions\"), roots);\r", "+\r", "+    addIfDir(new File(\"/usr/java\"), roots);\r", "+    addIfDir(new File(\"/usr/j2se\"), roots);\r", "+    addIfDir(new File(\"/usr\"), roots);\r", "+    addIfDir(new File(\"/usr/local/java\"), roots);\r", "+    addIfDir(new File(\"/usr/local/j2se\"), roots);\r", "+    addIfDir(new File(\"/usr/local\"), roots);\r", "+\r", "+    /* Entries for Linux java packages */\r", "+    addIfDir(new File(\"/usr/lib/jvm\"), roots);\r", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-sun\"), roots);\r", "+    addIfDir(new File(\"/usr/lib/jvm/java-1.5.0-sun\"), roots);\r", "+    addIfDir(new File(\"/usr/lib/jvm/java-6-openjdk\"), roots);\r", "+\r", "+    addIfDir(new File(\"/home/javaplt/java/Linux-i686\"), roots);\r", "+\r", "+    /* jars is a list of possible tools.jar (or classes.jar) files; we want to eliminate duplicates & \r", "+     * remember insertion order\r", "+     */\r", "+    LinkedHashSet<File> jars = new LinkedHashSet<File>();\r", "+    // matches: starts with \"j2sdk\", starts with \"jdk\", has form \"[number].[number].[number]\" (OS X), starts with \"java-\" (Linux)\r", "+    Predicate<File> subdirFilter = LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"j2sdk.*\"),\r", "+                                                 IOUtil.regexCanonicalCaseFilePredicate(\"jdk.*\"),\r", "+                                                 LambdaUtil.or(IOUtil.regexCanonicalCaseFilePredicate(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\"),\r", "+                                                               IOUtil.regexCanonicalCaseFilePredicate(\"java.*\")));\r", "+    for (File root : roots) {\r", "+      for (File subdir : IOUtil.attemptListFilesAsIterable(root, subdirFilter)) {\r", "+        addIfFile(new File(subdir, \"lib/tools.jar\"), jars);\r", "+        addIfFile(new File(subdir, \"Classes/classes.jar\"), jars);\r", "+      }\r", "+    }\r", "+    \r", "+    // JavaMint\r", "+    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/C:/Program Files/JavaMint/langtools/dist/lib/tools.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/soylatte/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/soylatte/lib/tools.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/classes.jar\"), jars);\r", "+    addIfFile(new File(\"/usr/local/JavaMint/langtools/dist/lib/tools.jar\"), jars);\r", "+    try {\r", "+      String mint_home = System.getenv(\"MINT_HOME\");\r", "+      if (mint_home!=null) {\r", "+        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/classes.jar\"), jars);\r", "+        addIfFile(new File(new File(mint_home), \"langtools/dist/lib/tools.jar\"), jars);\r", "+      }\r", "+    }\r", "+    catch(Exception e) { /* ignore MINT_HOME variable */ }\r", "+    addIfFile(edu.rice.cs.util.FileOps.getDrJavaFile(), jars); // drjava.jar file itself; check if it's a combined Mint/DrJava jar\r", "+    \r", "+    // We store everything in reverse order, since that's the natural order of the versions\r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> results = \r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> mintResults =\r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    \r", "+    for (File jar : jars) {\r", "+      JarJDKToolsLibrary lib = makeFromFile(jar, model);\r", "+      if (lib.isValid()) {\r", "+        FullVersion v = lib.version();\r", "+        Map<FullVersion, Iterable<JarJDKToolsLibrary>> mapToAddTo = results;\r", "+        if (v.vendor().equals(JavaVersion.VendorType.MINT)) { mapToAddTo = mintResults; }\r", "+        \r", "+        if (mapToAddTo.containsKey(v)) { mapToAddTo.put(v, IterUtil.compose(lib, mapToAddTo.get(v))); }\r", "+        else { mapToAddTo.put(v, IterUtil.singleton(lib)); }\r", "+      }\r", "+    }\r", "+    \r", "+    Iterable<JarJDKToolsLibrary> collapsed = IterUtil.reverse(IterUtil.collapse(results.values()));\r", "+    Iterable<JarJDKToolsLibrary> mintCollapsed = IterUtil.reverse(IterUtil.collapse(mintResults.values()));\r", "+    \r", "+    Map<FullVersion, Iterable<JarJDKToolsLibrary>> javaMintResults =\r", "+      new TreeMap<FullVersion, Iterable<JarJDKToolsLibrary>>();\r", "+    // now we have the JDK libraries in collapsed and the Mint libraries in mintCollapsed\r", "+    for(JarJDKToolsLibrary mintLib: mintCollapsed) {\r", "+//      msg(\"mintLib: \"+mintLib.version());\r", "+//      msg(\"\\t\"+mintLib.location());\r", "+      FullVersion mintVersion = mintLib.version();\r", "+      JarJDKToolsLibrary found = null;\r", "+      // try to find a JDK in results that matches mintVersion exactly, except for vendor\r", "+      for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+//        msg(\"\\texact? \"+javaLib.version());\r", "+        FullVersion javaVersion = javaLib.version();\r", "+        if ((javaVersion.majorVersion().equals(mintVersion.majorVersion())) &&\r", "+            (javaVersion.maintenance()==mintVersion.maintenance()) &&\r", "+            (javaVersion.update()==mintVersion.update()) &&\r", "+            (javaVersion.release()==mintVersion.release())) {\r", "+//          msg(\"\\t\\tfound\");\r", "+          found = javaLib;\r", "+          break;\r", "+        }\r", "+      }\r", "+      // if we didn't find one, take the best JDK that matches the major version\r", "+      if (found==null) {\r", "+        for(JarJDKToolsLibrary javaLib: collapsed) {\r", "+//          msg(\"\\tmajor? \"+javaLib.version());\r", "+          FullVersion javaVersion = javaLib.version();\r", "+          if (javaVersion.majorVersion().equals(mintVersion.majorVersion())) {\r", "+//            msg(\"\\t\\tfound\");\r", "+            found = javaLib;\r", "+            break;\r", "+          }\r", "+        }\r", "+      }\r", "+      // if we found a JDK, then create a new Mint library\r", "+      if (found!=null) {\r", "+        JarJDKToolsLibrary lib = makeFromFile(mintLib.location(), model, found.bootClassPath());\r", "+        if (lib.isValid()) {\r", "+//          msg(\"\\t==> \"+lib.version());\r", "+          FullVersion v = lib.version();\r", "+          if (javaMintResults.containsKey(v)) { javaMintResults.put(v, IterUtil.compose(lib, javaMintResults.get(v))); }\r", "+          else { javaMintResults.put(v, IterUtil.singleton(lib)); }\r", "+        }\r", "+      }\r", "+    }\r", "+    return IterUtil.compose(collapsed,IterUtil.reverse(IterUtil.collapse(javaMintResults.values())));\r", "+  }\r"]}], "num": 12428}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c63b9b047076a5cadc3dd1ca4022e0f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58fd77a1310ff1352eb2a0f8461c3e78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 173, "methodNumberAfterChange": 173, "signatureBeforeChange": "   final public void returnStatementLookahead() throws ParseException", "signatureAfterChange": "   final public void returnStatementLookahead() throws ParseException", "diff": ["-      jj_la1[192] = jj_gen;", "+      jj_la1[191] = jj_gen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7222e417fcb0c5a5f06852c35bdff586", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 192, "methodNumberAfterChange": 192, "signatureBeforeChange": "    final public Token RightAngledBracket() throws ParseException", "signatureAfterChange": "   final public Token RightAngledBracket() throws ParseException", "diff": ["+//  }", "-      jj_la1[213] = jj_gen;", "+      jj_la1[218] = jj_gen;", "-    throw new Error(\"Missing return statement in function\");", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b776a86824661ac3795a1aead162cf10", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": "   final public void variableInitializerLookahead() throws ParseException", "signatureAfterChange": "   final public void variableInitializerLookahead() throws ParseException", "diff": ["-      jj_la1[201] = jj_gen;", "+      jj_la1[200] = jj_gen;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5194904d6688935460cf72bf69a2db4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "c46bb3730e5e9806be895b69d7883311c35ca984", "commitAfterChange": "9aa0c6bec51662a685ea4b86bc02a52c9e593d8a", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": "    final public TypeParameter TypeParameter() throws ParseException", "signatureAfterChange": "    final public TypeParameter TypeParameter() throws ParseException", "diff": ["-      jj_la1[211] = jj_gen;", "+      jj_la1[210] = jj_gen;", "-          //if(hook == null){", "-        if(bound instanceof ReferenceType){", "-          {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "-        } else {", "-          {if (true) throw new ParseException(\"Primitives are not allowed as bound\"+", "-                                   \"types, and array types are temporarily disabled due to a \"+", "-                                   \"DynamicJava AST hierarchy bug!\");}", "-        }", "-          //} else { // process wildcard", "-          //  throw new ParseException(\"DynamicJava Parser does not support wildcards yet\");", "-          //}", "-", "+      if(bound instanceof ReferenceType){", "+        {if (true) return new TypeParameter(_loc(first), name, (ReferenceType)bound);}", "+      } else {", "+        {if (true) throw new ParseException(\"Primitives are not allowed as bound\"+", "+                                 \"types, and array types are temporarily disabled due to a \"+", "+                                 \"DynamicJava AST hierarchy bug!\");}", "+      }"]}], "num": 24313}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a902b2d874ff1d0e654bf8691a41d12e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399faa76ba027ce7b656f5d6f771e44b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/JLSTypeSystem.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 141, "signatureBeforeChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "signatureAfterChange": "   protected Iterable<Type> inferTypeArguments(Iterable<? extends VariableType> tparams,                                              Iterable<? extends Type> params, Type returned,                                             Iterable<? extends Type> args, Option<Type> expected)", "diff": ["-    ", "-    // perform inference for expected type (JLS is not clear on whether these should be combined with", "-    // previous bounds; Eclipse does use the previous bounds)", "-    SubstitutionMap firstPhaseSigma = new SubstitutionMap(instantiations);", "-    if (expected.isSome()) {", "-      inf.supertype(expected.unwrap(), substitute(returned, firstPhaseSigma));", "+    if (!_alwaysUseArgumentConstraints) {", "+      inf = new Inferencer(CollectUtil.makeSet(toInfer));", "+      constraints = inf.constraints();", "-    // handle upper bounds", "-    for (VariableType var : toInfer) {", "-      Set<Type> upperBounds = union(constraints.upperBounds(var),", "-                                    substitute(var.symbol().upperBound(), firstPhaseSigma));", "-      instantiations.put(var, meet(upperBounds));", "+    // perform inference for expected type", "+    if (expected.isSome()) {", "+      inf.supertype(expected.unwrap(), substitute(returned, new SubstitutionMap(instantiations)));", "+      for (VariableType var : toInfer) {", "+        Set<Type> eqBounds = constraints.equalBounds(var);", "+        if (!eqBounds.isEmpty()) { instantiations.put(var, IterUtil.first(eqBounds)); }", "+      }", "+    }", "+    ", "+    // use upper bounds (may be inferred from args or expected, and may be declared)", "+    if (_waitToUseDeclaredBounds) {", "+      for (VariableType var : toInfer) {", "+        Set<Type> upperBounds = constraints.upperBounds(var);", "+        if (!upperBounds.isEmpty()) { instantiations.put(var, meet(upperBounds)); }", "+      }", "+      for (VariableType var : toInfer) {", "+        instantiations.put(var, substitute(var.symbol().upperBound(), new SubstitutionMap(instantiations)));", "+      }", "+    }", "+    else {", "+      for (VariableType var : toInfer) {", "+        Set<Type> upperBounds = constraints.upperBounds(var);", "+        Type declared = var.symbol().upperBound();", "+        if (!declared.equals(OBJECT)) {", "+          upperBounds = union(upperBounds, substitute(declared, new SubstitutionMap(instantiations)));", "+        }", "+        instantiations.put(var, meet(upperBounds));", "+      }", "-    if (inBounds(tparams, result)) { return result; }", "-    else { return null; }", "+    SubstitutionMap sigma = new SubstitutionMap(tparams, result);", "+    boolean valid = inBounds(tparams, result);", "+    for (Pair<Type, Type> pair : zip(args, params)) {", "+      if (!valid) { break; }", "+      valid &= isSubtype(pair.first(), substitute(pair.second(), sigma));", "+    }", "+    return valid ? result : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a71cc7f09481b5648cf32014d77e46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 274, "signatureBeforeChange": "     public boolean overrides(FunctionInvocationCandidate<I> c)", "signatureAfterChange": "     private boolean overrides(DJMethod child, DJMethod parent)", "diff": ["+    /** True iff child is override-compatible with the parent.  (See JLS 8.4.2.) */", "+    private boolean overrides(DJMethod child, DJMethod parent) {", "+      if (child.declaredName().equals(parent.declaredName())) {", "+        Iterable<Type> subParams = SymbolUtil.parameterTypes(child);", "+        Iterable<Type> supParams = SymbolUtil.parameterTypes(parent);", "+        Iterable<VariableType> subTParams = child.typeParameters();", "+        Iterable<VariableType> supTParams = parent.typeParameters();", "+        if (IterUtil.sizeOf(subParams) == IterUtil.sizeOf(supParams)) {", "+          Iterable<? extends Type> supParamsToCompare;", "+          if (IterUtil.isEmpty(subTParams) && !IterUtil.isEmpty(supTParams)) {", "+            supParamsToCompare = IterUtil.map(supParams, ERASE);", "+          }", "+          else if (IterUtil.sizeOf(subTParams) == IterUtil.sizeOf(supTParams)) {", "+            supParamsToCompare = substitute(supParams, supTParams, subTParams);", "+          }", "+          else { return false; }", "+          for (Pair<Type, Type> p : IterUtil.zip(subParams, supParamsToCompare)) {", "+            if (!isEqual(p.first(), p.second())) { return false; }", "+          }", "+          return true;", "+        }", "+        else { return false; }", "+      }", "+      else { return false; }", "+    }", "-     */", "-    public boolean overrides(FunctionInvocationCandidate<I> c) {", "-      if (_f.declaredName().equals(c._f.declaredName())) {", "-        Iterable<Type> subParams = parameterTypes();", "-        Iterable<Type> supParams = c.parameterTypes();", "-        Iterable<VariableType> subTParams = typeParameters();", "-        Iterable<VariableType> supTParams = c.typeParameters();", "-        if (IterUtil.sizeOf(subParams) == IterUtil.sizeOf(supParams)) {", "-          Iterable<? extends Type> supParamsToCompare;", "-          if (IterUtil.isEmpty(subTParams) && !IterUtil.isEmpty(supTParams)) {", "-            supParamsToCompare = IterUtil.map(supParams, ERASE);", "-          }", "-          else if (IterUtil.sizeOf(subTParams) == IterUtil.sizeOf(supTParams)) {", "-            supParamsToCompare = substitute(supParams, supTParams, subTParams);", "-          }", "-          else { return false; }", "-          for (Pair<Type, Type> p : IterUtil.zip(subParams, supParamsToCompare)) {", "-            if (!isEqual(p.first(), p.second())) { return false; }", "-          }", "-          return true;", "-        }", "-        else { return false; }", "-      }", "-      else { return false; }", "-    }"]}], "num": 23316}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abb5c6a383f7188184a8ef96e770dee8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b6e7f212cc01da932f2033ac3b740f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "8456129e482008d30378f168a7fb1c04534c45f5", "commitAfterChange": "e75c5cd21291e963b76e361d5f6daa19b9b1a0ff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-    Object lock = new Object();", "-    // Check to see if it's already in the correct path.", "-    InnerNode parent = _path2node.getValue(path);", "-    String oldPath = _path2node.getKey(null);", "-    if (path.equals(oldPath)) {", "-      node.removeFromParent(); // doesn't cause a repaint.", "-      insertNodeSortedInto(node, parent); // causes a repaint.", "-    }", "-    ", "-    //System.out.println(\"refresh -> remove\");", "-    synchronized(lock) {", "-      removeNode(node);", "-    }", "-    //System.out.println(\"refresh -> add\");", "-    synchronized(lock) {", "+    if (node == null) {", "-    //System.out.println(\"refresh done\");", "+    ", "+    InnerNode oldParent = (InnerNode)node.getParent();", "+    // Check to see if the new parent (could be same) exists already", "+    String newPath = path;", "+    if (newPath.length() > 0) {", "+      if (newPath.substring(0,1).equals(\"/\")) newPath = newPath.substring(1);", "+      if (!newPath.substring(newPath.length()-1).equals(\"/\")) newPath = newPath + \"/\";", "+    }", "+    InnerNode newParent = _path2node.getValue(newPath); // node that should be parent", "+    ", "+    if (newParent == oldParent) { ", "+      if (!node.toString().equals(doc.getName())) {", "+        removeNode(node);", "+        LeafNode newLeaf= new LeafNode(doc);", "+        _doc2node.put(doc,newLeaf);", "+        insertNodeSortedInto(newLeaf, newParent);", "+      }", "+      // don't do anything if its name or parents haven't changed", "+    }", "+    else {", "+      Object lock = new Object();", "+      synchronized(lock) {", "+        removeNode(node);", "+      }", "+      synchronized(lock) {", "+        addDocument(doc, path);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47a3ec2dcb380e877902f94fc053a5a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "e2abbf01d6f3b23be51f493f663daa5ce8abf706", "commitAfterChange": "d7bd3eaf7514715e375acabd9bf0f41e4281985a", "methodNumberBeforeChange": 237, "methodNumberAfterChange": 233, "signatureBeforeChange": "           @Override public boolean overrides(FunctionInvocationCandidate<MethodInvocation> c)", "signatureAfterChange": "      public ObjectMethodInvocation lookupMethod(final Expression object, String name,                                               final Iterable<? extends Type> typeArgs,                                               final Iterable<? extends Expression> args,                                              final Option<Type> expected)       throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-          public MethodInvocation invocation() { throw new UnsupportedOperationException(); }", "-          @Override public boolean overrides(FunctionInvocationCandidate<MethodInvocation> c) { return false; }", "+    Type t = NodeProperties.getType(object);", "+    FunctionInvocationCandidate<DJMethod> result =", "+        new MethodFinder(name, false).findSingleMethod(t, typeArgs, args, expected);", "+    DJMethod m = result.function();", "+    SubstitutionMap sigma = result.substitution();", "+    // TODO: Is there any reason to invoke makeCast on the receiver?", "+    return new ObjectMethodInvocation(m, substitute(m.returnType(), sigma), object, result.typeArguments(),", "+                                      result.arguments(), substitute(m.thrownTypes(), sigma));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489cddea489c15f4dde5f305ff6e611c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "diff": ["+        ", "+        // A hack to allow declarations without types: (TODO: fix this)", "+        if (n instanceof SimpleAssignExpression) {", "+          SimpleAssignExpression assign = (SimpleAssignExpression) n;", "+          if (assign.getLeftExpression() instanceof AmbiguousName) {", "+            AmbiguousName ambigName = (AmbiguousName) assign.getLeftExpression();", "+            if (ambigName.getIdentifiers().size() == 1) {", "+              String name = ambigName.getRepresentation();", "+              if (!newContext.variableExists(name, _opt.typeSystem())) {", "+                SourceInfo si = n.getSourceInfo();", "+                n = new VariableDeclaration(false, null, name, assign.getRightExpression(),", "+                                            si.getFilename(), si.getStartLine(), si.getStartColumn(),", "+                                            si.getEndLine(), si.getEndColumn());", "+                assign.setProperty(\"assignmentAsDeclaration\", n);", "+              }", "+            }", "+          }", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c09366b12f2583b0a12fb07bce514ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "be902882edd6ee8f5b7260e86997569bf07255e2", "commitAfterChange": "ead43466202abb204c90f7ee2c316fec230d4415", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 67, "signatureBeforeChange": "          private void compare(String context, Node left, Node right)", "signatureAfterChange": "          private void compare(String context, Node left, Node right)", "diff": ["-        if (left instanceof Statement || left instanceof VariableDeclaration || left instanceof Expression) {", "-          if (hasNestedError(left) || hasNestedError(right)) {", "-            _log.statementWithError(context, left, right);", "+        if ((left instanceof Statement && !(left instanceof BlockStatement)) ||", "+             left instanceof VariableDeclaration ||", "+             left instanceof FieldDeclaration ||", "+             left instanceof Expression) {", "+          if (hasNestedError(left)) {", "+            if (hasNestedError(right)) { _log.commonErrorStatement(context, left, right); }", "+            else { _log.leftErrorStatement(context, left, right); }", "+            return;", "+          }", "+          else if (hasNestedError(right)) {", "+            _log.rightErrorStatement(context, left, right);", "+          }", "+          else if (left instanceof MethodDeclaration && !IterUtil.isEmpty(m.typeParameters())) {", "+            _log.polymorphicDeclaration(context, left, right);", "+            if (left instanceof ConstructorDeclaration) { _log.polymorphicDeclaration(context, left, right); }", "+        }", "+        if (left instanceof HookTypeName) {", "+          HookTypeName t = (HookTypeName) left;", "+          _log.wildcard(context, left, right, t.getUpperBound().isSome(), t.getLowerBound().isSome());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8b298be04e4cd6d2ed477aece5e68cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/util/text/SWTDocumentAdapter.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void forceInsertText(int offs, String str, String style)     throws DocumentAdapterException", "signatureAfterChange": "   public synchronized void forceInsertText(final int offs, final String str,                                             final String style)     throws DocumentAdapterException", "diff": ["-  public void forceInsertText(int offs, String str, String style)", "+  public synchronized void forceInsertText(final int offs, final String str, ", "+                                           final String style)", "-    //AttributeSet s = null;", "-    //if (style != null) {", "-    //  s = _styles.get(style);", "-    //}", "-    try {", "-      _pane.replaceTextRange(offs, 0, str);", "+    SWTStyle s = null;", "+    if (style != null) {", "+      s = _styles.get(style);", "-    catch (IllegalArgumentException e) {", "-      throw new DocumentAdapterException(e);", "+    final SWTStyle chosenStyle = s;", "+    ", "+    _editException = null;", "+    _forceInsert = true;", "+", "+    // Do the insert", "+    _pane.getDisplay().syncExec(new Runnable() {", "+      public void run() {", "+        try {", "+          _pane.replaceTextRange(offs, 0, str);", "+          ", "+          // Add the style", "+          if (chosenStyle != null) {", "+            StyleRange range = new StyleRange();", "+            range.start = offs;", "+            range.length = str.length();", "+            range.fontStyle = chosenStyle.getFontStyle();", "+            range.foreground = chosenStyle.getColor();", "+            _pane.setStyleRange(range);", "+          }", "+        }", "+        catch (IllegalArgumentException e) {", "+          _editException = new DocumentAdapterException(e);", "+        }", "+      }", "+    });", "+    _forceInsert = false;", "+    if (_editException != null) {", "+      throw _editException;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df277efefcaa483e41b126719685e7b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2)", "signatureAfterChange": "   public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu)", "diff": ["+   */", "+  public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu) {", "+    if (a1.length == 0) {", "+      return a2.length == 0;", "+    }", "+    ", "+    if (a1.length > (a2.length + 1)) {", "+      return false;", "+    }", "+    ", "+    // Now we know that a1.length > 0;", "+    for (int i = 0; i < a1.length-1; i++) { //  a2 can have length larger than or equal to a1", "+      if (!isBoxCompatible(a1[i], a2[i], tu)) {", "+        return false;", "+      }", "+    }", "+    int lastIdx1 = a1.length - 1;", "+    Class lastElt1 = a1[lastIdx1];", "+    if(lastElt1.isArray() && (a2.length == a1.length - 1)) {", "+      tu.varArgsAreUsed();", "+      return true; // No varargs given.", "+    }", "+    else if(lastElt1.isArray() && !a2[lastIdx1].isArray()){", "+      tu.varArgsAreUsed();", "+      Class varArgsType = lastElt1.getComponentType(); // Get the element type of the array", "+      for( int i = lastIdx1; i < a2.length; i++ ){", "+        if(!isBoxCompatible(varArgsType, a2[i], tu)){", "+          return false;", "+    else { // if equal lengths, then check the last one for compatibility", "+      if (!isBoxCompatible(lastElt1, a2[lastIdx1], tu) || (a1.length != a2.length) ) {", "-   */", "-  public static boolean hasVarArgsCompatibleSignatures(Class[] a1, Class[] a2) {", "-    for (int i = 0; i < a1.length-1; i++) { //  a2 can have length larger than or equal to a1", "-      if (!isCompatible(a1[i], a2[i])) {", "-        return false;", "-      }", "-    }", "-    if(!a1[a1.length-1].isArray()){", "-      return false; ", "-      // in fact it indicates a more serious error that should be reported to DynamicJava ", "-      // developers. That's, for the time being, US!", "-    }", "-    Class VarArgsType = a1[a1.length-1].getComponentType(); // Get the element type of the array", "-    for( int i = a1.length-1; i < a2.length; i++ ){", "-      if(!isCompatible(VarArgsType, a2[i])){", "-        return false;", "-      }", "-    }", "-    return true;", "-  }"]}], "num": 14555}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "331a067d61b1e388914d15c401620408", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2882533029ea08ed9fc76c9ed265cb94", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fb266d92ba9efd43e20ccabcb8837490fbeddaea", "commitAfterChange": "9b317c4ea1656d56bf74b4b1688b4337b5b40277", "methodNumberBeforeChange": 322, "methodNumberAfterChange": 323, "signatureBeforeChange": "     protected DDReconstructor makeReconstructor()", "signatureAfterChange": "     protected DDReconstructor makeReconstructor()", "diff": ["-        private volatile boolean _positionsMade = false;", "-        ", "-        /** Reconstructs this document except for embedded positions.  Assumes _cacheLock is held.", "-          * @param image the bytes in the cached file image for this document. ", "-          */", "-          else if (_file != null) {", "+          else if (! isUntitled()) {", "-          ", "-          _positionsMade = false;", "+", "+          // re-create and update all positions", "+          newDefDoc.setWrappedPositionOffsets(_positions);", "-", "-        /** Reconstructs the embedded positions for this document.  Synchronized*/", "-        public void makePositions() { ", "-          if (_positionsMade) return;", "-          synchronized(this) {", "-            if (_positionsMade) return; // double-check works for volatile fields in Java 1.4 and later code", "-            _positionsMade = true;", "-          }", "-          try { getDocument().setWrappedPositionOffsets(_positions); }", "-          catch(Exception e) { /* ignore */ } // omitted positions are not fatal", "-        }", "+        ", "+//        private volatile boolean _positionsMade = false;", "+//        ", "+//        /** Reconstructs this document except for embedded positions.  Assumes _cacheLock is held.", "+//          * @param image the bytes in the cached file image for this document. ", "+//          */", "+//        public DefinitionsDocument make() throws IOException, BadLocationException, FileMovedException {  // should sync on _file", "+//          ", "+////          System.err.println(\"DDReconstructor.make() called on \" + ConcreteOpenDefDoc.this);", "+//          DefinitionsDocument newDefDoc = new DefinitionsDocument(_notifier);", "+//          newDefDoc.setOpenDefDoc(ConcreteOpenDefDoc.this);", "+//          ", "+//          if (_image != null) {", "+//            _editorKit.read(new InputStreamReader(new ByteArrayInputStream(_image)), newDefDoc, 0);", "+//            _log.log(\"Reading from image for \" + _file + \" containing \" + _image.length + \" chars\");", "+//          }", "+//          else if (! isUntitled()) {", "+//            final InputStreamReader reader = new FileReader(_file);", "+//            _editorKit.read(reader, newDefDoc, 0);", "+//            reader.close(); // win32 needs readers closed explicitly!", "+//          }", "+//          _loc = Math.min(_loc, newDefDoc.getLength()); // make sure not past end", "+//          _loc = Math.max(_loc, 0); // make sure not less than 0", "+//          newDefDoc.setCurrentLocation(_loc);", "+//          for (DocumentListener d : _list) {", "+//            if (d instanceof DocumentUIListener) newDefDoc.addDocumentListener(d);", "+//          }", "+//          for (FinalizationListener<DefinitionsDocument> l: _finalListeners) {", "+//            newDefDoc.addFinalizationListener(l);", "+//          }", "+//          ", "+//          _positionsMade = false;", "+//          ", "+//          newDefDoc.resetModification();  // Why is this necessary? A reconstructed document is already unmodified.", "+//", "+//          //            tempDoc.setUndoManager(_undo);", "+//          assert ! newDefDoc.isModifiedSinceSave();", "+////          System.err.println (\"_packageName in make() = \" + _packageName);", "+////          System.err.println(\"tempDoc.getLength() = \" + tempDoc.getLength());", "+//          _packageName = newDefDoc.getPackageName();", "+////          System.err.println(\"make() returned \" + newDefDoc);", "+//          return newDefDoc;", "+//", "+//        }", "+        ", "+//        /** Reconstructs the embedded positions for this document.  Synchronized*/", "+//        public void makePositions() { ", "+//          if (_positionsMade) return;", "+//          synchronized(this) {", "+//            if (_positionsMade) return; // double-check works for volatile fields in Java 1.4 and later code", "+//            _positionsMade = true;", "+//          }", "+//          try { getDocument().setWrappedPositionOffsets(_positions); }", "+//          catch(Exception e) { /* ignore */ } // omitted positions are not fatal", "+//        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69c6797a1bb3475bdf5136157d664bd3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "signatureAfterChange": "   public void testCompileResetsInteractions() throws BadLocationException, IOException, InterruptedException,     EditDocumentException", "diff": ["-    saveFile(doc, new FileSelector(file));", "+    doc.saveFile(new FileSelector(file));", "-     Utilities.invokeLater(new Runnable() { ", "-      public void run() { ", "-        try { _model.getCompilerModel().compileAll(); } ", "-        catch(Exception e) { throw new UnexpectedException(e); }", "-      }", "-    });", "+    _model.getCompilerModel().compileAll();", "-    _log.log(\"reset confirmed\");", "+    ", "-    _log.log(\"testCompileResetsInteractions complete\");"]}], "num": 8247}
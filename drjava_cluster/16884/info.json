{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16372a2c4808e1defbc6aacab5490765", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026b83087c5d6d93d60e469d2a914b5e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public IDocumentNavigator makeTreeNavigator(String name, final IDocumentNavigator parent,                                                  final List<Pair<String, INavigatorItemFilter>> l)", "signatureAfterChange": "     public IDocumentNavigator<ItemT> makeTreeNavigator(String name, final IDocumentNavigator<ItemT> parent,                                                  final List<Pair<String, INavigatorItemFilter<ItemT>>> l)", "diff": ["-    public IDocumentNavigator makeTreeNavigator(String name, final IDocumentNavigator parent, ", "-                                                final List<Pair<String, INavigatorItemFilter>> l) {", "+    public IDocumentNavigator<ItemT> makeTreeNavigator(String name, final IDocumentNavigator<ItemT> parent, ", "+                                                final List<Pair<String, INavigatorItemFilter<ItemT>>> l) {", "-      final IDocumentNavigator tbr = makeTreeNavigator(name);", "+      final IDocumentNavigator<ItemT> tbr = makeTreeNavigator(name);", "-          for(Pair<String, INavigatorItemFilter> p: l) { tbr.addTopLevelGroup(p.getFirst(), p.getSecond()); }", "+          for(Pair<String, INavigatorItemFilter<ItemT>> p: l) { tbr.addTopLevelGroup(p.getFirst(), p.getSecond()); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5049692a8d9af65a9abc2d8543e2aa16", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/FileOps.java", "commitBeforeChange": "b583f95ca38940907816c4beb7118ff0df1017e2", "commitAfterChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public static LinkedList packageExplore(String prefix, File root)", "signatureAfterChange": "   public static LinkedList<String> packageExplore(String prefix, File root)", "diff": ["-  public static LinkedList packageExplore(String prefix, File root) {", "+  public static LinkedList<String> packageExplore(String prefix, File root) {", "-    final Set exploredDirectories = new HashSet();", "+    final Set<File> exploredDirectories = new HashSet<File>();", "-    LinkedList output = new LinkedList();", "+    LinkedList<String> output = new LinkedList<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68cabfa5a7a72546e25293e246df9bbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected Class compileClass(ClassInfo ci, String name)", "signatureAfterChange": "   protected Class<?> compileClass(ClassInfo ci, String name)", "diff": ["-  protected Class compileClass(ClassInfo ci, String name) {", "-    Class result = null;", "+  protected Class<?> compileClass(ClassInfo ci, String name) {", "+    Class<?> result = null;", "-      Class c = compileClass(t, name);", "+      Class<?> c = compileClass(t, name);", "-        Class c = compileClass(t, name);", "+        Class<?> c = compileClass(t, name);", "-    Class c = new ClassInfoCompiler(ci).compile();", "+    Class<?> c = new ClassInfoCompiler(ci).compile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f1866e7cab7a2c501d1af513c7aec61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacCompiler.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public static void runCommand(String s, Class c) throws Throwable", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public static void runCommand(String s, Class<?> c) throws Throwable", "diff": ["-  public static void runCommand(String s, Class c) throws Throwable {", "+  public static void runCommand(String s, Class<?> c) throws Throwable {", "-    Class oldC = c;", "+    Class<?> oldC = c;", "-            Constructor ctor = c.getConstructor();", "+            Constructor<?> ctor = c.getConstructor();", "-              Constructor ctor = c.getConstructor(String[].class);", "+              Constructor<?> ctor = c.getConstructor(String[].class);", "-            Constructor ctor = c.getConstructor(String[].class);", "+            Constructor<?> ctor = c.getConstructor(String[].class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8213d76b450b05cc9ab36d97601eed05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public Class visit(ConditionalExpression node)", "signatureAfterChange": "   public Class<?> visit(ConditionalExpression node)", "diff": ["-  public Class visit(ConditionalExpression node) {", "+  public Class<?> visit(ConditionalExpression node) {", "-    Class type = condExp.acceptVisitor(this);", "+    Class<?> type = condExp.acceptVisitor(this);", "-    Class c1 = exp1.acceptVisitor(this);", "-    Class c2 = exp2.acceptVisitor(this);", "-    Class ec = null;", "+    Class<?> c1 = exp1.acceptVisitor(this);", "+    Class<?> c2 = exp2.acceptVisitor(this);", "+    Class<?> ec = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2498322bd09ff0ce69f51997fee03f5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void migrateListeners(IDocumentNavigator child, IDocumentNavigator parent)", "signatureAfterChange": "     private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent)", "diff": ["-    private void migrateListeners(IDocumentNavigator child, IDocumentNavigator parent) {", "-      Collection<INavigationListener> listeners = parent.getNavigatorListeners();", "-      Iterator<INavigationListener> it = listeners.iterator();", "+    // long as it extends ItemT.", "+    private void migrateListeners(IDocumentNavigator<ItemT> child, IDocumentNavigator<ItemT> parent) {", "+      Collection<INavigationListener<? super ItemT>> listeners = parent.getNavigatorListeners();", "+      Iterator<INavigationListener<? super ItemT>> it = listeners.iterator();", "-        INavigationListener listener = it.next();", "+        INavigationListener<? super ItemT> listener = it.next();", "+        ", "+        // I don't understand the motivation behind this line.  Is it possible for", "+        // it to become invalid?  If so, what's to prevent that from happening", "+        // again after this line but before we call next()?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1ea9cef8039284f436366b8f2dc877", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultJavadocModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private boolean _javadoc_1_3(String[] args, String[] classpath)     throws IOException, ClassNotFoundException, InterruptedException", "signatureAfterChange": "   private boolean _javadoc_1_3(String[] args, String[] classpath)     throws IOException, ClassNotFoundException, InterruptedException", "diff": ["-    LinkedList outLines = new LinkedList();", "-    LinkedList errLines = new LinkedList();", "+    LinkedList<String> outLines = new LinkedList<String>();", "+    LinkedList<String> errLines = new LinkedList<String>();", "-    ArrayList errors = extractErrors(outLines);", "+    ArrayList<CompilerError> errors = extractErrors(outLines);"]}], "num": 16884}
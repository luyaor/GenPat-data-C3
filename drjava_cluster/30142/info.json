{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b94674cdbff2ac7bcbd13e68a0c4e0ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4fe999d692ec8f04d3921d00d0f0dd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "e1dcefe3e90273735b79612c3705804954f26ea0", "commitAfterChange": "9dc40dd0cbfd24b9ef61af3572708c18e3aeae2c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "    public Object visit(StaticMethodCall node)", "signatureAfterChange": "    public Object visit(StaticMethodCall node)", "diff": ["-        if (first) {", "-          first = false;", "-        }", "-        else {", "-          buf.append(\", \");", "-        }", "-", "+        if (first) first = false;", "+        else buf.append(\", \");", "-    if (m.getReturnType().equals(Void.TYPE)) {", "-      return Interpreter.NO_RESULT;", "-    }", "-    else {", "-      return ret;", "-    }", "+    if (m.getReturnType().equals(Void.TYPE)) return Interpreter.NO_RESULT;", "+    else return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb5852a1a1472f7ef36639267f780e07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "701cda038bdbb4505f738d5f2728e5888b8608b3", "commitAfterChange": "a2c3a24c2af61d289658b8fde0de718a948c97d9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "    public Object visit(ObjectMethodCall node)", "signatureAfterChange": "    public Object visit(ObjectMethodCall node)", "diff": ["-", "-    // workaround to not return null for void returns", "-    if (m.getReturnType().equals(Void.TYPE)) return Interpreter.NO_RESULT;", "-    else return ret;", "+    ", "+    // this workaround avoids returning null for void returns; null test intercepts array clone invocation which has ", "+    // no METHOD property", "+    if (m != null && m.getReturnType().equals(Void.TYPE)) return Interpreter.NO_RESULT;", "+    return ret;"]}], "num": 30142}
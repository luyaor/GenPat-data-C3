{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31e87a40c1ada89adc6d2c2c1b276d49", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0002ffa2776c33d45c57be9129138924", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TypeNameChecker.java", "commitBeforeChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "commitAfterChange": "30059ed25163a0d152720ce9c2edb44f030e5f3b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     @Override public Type visit(HookTypeName node)", "signatureAfterChange": "     @Override public Type visit(HookTypeName node)", "diff": ["-      Type bound = check(node.getHookedType());", "-      if (node.isSupered()) {", "-        return setType(node, new Wildcard(new BoundedSymbol(node, TypeSystem.OBJECT, bound)));", "+      Type upper = TypeSystem.OBJECT;", "+      if (node.getUpperBound().isSome()) {", "+        upper = check(node.getUpperBound().unwrap());", "+        if (!ts.isReference(upper)) {", "+          setErrorStrings(node, ts.userRepresentation(upper));", "+          throw new ExecutionError(\"wildcard.bound\", node);", "+        }", "-      else { return setType(node, new Wildcard(new BoundedSymbol(node, bound, TypeSystem.NULL))); }", "+      ", "+      Type lower = TypeSystem.NULL;", "+      if (node.getLowerBound().isSome()) {", "+        lower = check(node.getLowerBound().unwrap());", "+        if (!ts.isReference(lower)) {", "+          setErrorStrings(node, ts.userRepresentation(lower));", "+          throw new ExecutionError(\"wildcard.bound\", node);", "+        }", "+      }", "+", "+      if (!ts.isSubtype(lower, upper)) {", "+        setErrorStrings(node, ts.userRepresentation(upper), ts.userRepresentation(lower));", "+        throw new ExecutionError(\"wildcard.bounds\", node);", "+      }", "+      ", "+      return setType(node, new Wildcard(new BoundedSymbol(node, upper, lower)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76eb6907ae415ba9d631c585b493e28d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 255, "signatureBeforeChange": "      public void appendConstraints()", "signatureAfterChange": "              private String nameForVariable(VariableType t)", "diff": ["-", "-    public void appendConstraints() {", "-      if (!_variableHandler.isEmpty()) {", "-        _result.append(\" [\");", "-        _variableHandler.dumpBounds();", "-        _result.append(\"]\");", "-      }", "-    }", "+      ", "+      private String nameForVariable(VariableType t) {", "+        String name = _names.get(t);", "+        if (name == null) {", "+          if (t.symbol().generated()) { _captureVars++; name = \"?T\" + _captureVars; }", "+          else { name = t.symbol().name(); }", "+          _names.put(t, name);", "+          // check to see if bounds need to be printed", "+          Type upper = t.symbol().upperBound();", "+          Type lower = t.symbol().lowerBound();", "+          boolean printUpper = !isEqual(upper, OBJECT) /*&& !isEqual(upper, TOP)*/;", "+          boolean printLower = !isEqual(lower, NULL) /*&& !isEqual(lower, BOTTOM)*/;", "+          if (printUpper || printLower) _boundedVars.add(t);", "+        }", "+        return name;", "+      }"]}], "num": 23597}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "413994eeddc2e17984f65b1c049ab7ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f01de5f51278b32c6bcba446b2d1d4e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/DirectoryChooser.java", "commitBeforeChange": "79e38a44be6c4c379730bdfb5468461330077836", "commitAfterChange": "3be3cfbc674d7ccc211966342e06cebac6416af4", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      protected JDialog createDialog()", "signatureAfterChange": "      protected JDialog createDialog()", "diff": ["-    final JDialog diag;", "+    final JDialog dialog;", "-      diag = new JDialog((Dialog)_owner, title, true);", "+      dialog = new JDialog((Dialog)_owner, title, true);", "-      diag = new JDialog((Frame)_owner, title, true);", "+      dialog = new JDialog((Frame)_owner, title, true);", "-    Container cp = diag.getContentPane();", "+    Container cp = dialog.getContentPane();", "-        diag.setVisible(false);", "+        dialog.setVisible(false);", "-        diag.setVisible(false);", "+        dialog.setVisible(false);", "-    diag.getRootPane().getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), key);", "-    diag.getRootPane().getActionMap().put(key, _cancelAction);", "+    dialog.getRootPane().getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), key);", "+    dialog.getRootPane().getActionMap().put(key, _cancelAction);", "-    diag.getRootPane().setDefaultButton(_approveButton);", "+    dialog.getRootPane().setDefaultButton(_approveButton);", "-    diag.addWindowListener(new WindowAdapter() {", "+    dialog.addWindowListener(new WindowAdapter() {", "-    diag.setGlassPane(_glassPane);", "-    diag.setLocationRelativeTo(null);", "-    diag.setSize(330, 400);", "-    return diag;", "+    dialog.setGlassPane(_glassPane);", "+//    dialog.setLocationRelativeTo(_owner);", "+    dialog.setSize(330, 400);", "+    dialog.setLocationRelativeTo(_owner);", "+//    dialog.setLocation(_owner.getLocation().x+_owner.getWidth()/2-dialog.getWidth()/2,", "+//                       _owner.getLocation().y+_owner.getHeight()/2-dialog.getHeight()/2);", "+    return dialog;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aed557f8e4289ac52a5e4df5830225f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 306, "signatureBeforeChange": "         private SignatureChecker makeChecker(Iterable<? extends VariableType> tparams, Iterable<? extends Type> targs,                                        Iterable<? extends Type> params, Iterable<? extends Expression> args,                                        Type returned, Option<Type> expected)", "signatureAfterChange": "          private SignatureMatcher makeMatcher(Iterable<? extends VariableType> tparams,                                          Iterable<? extends Type> targs,                                          Iterable<? extends Type> params,                                          Iterable<? extends Expression> args,                                          Type returned, Option<Type> expected)", "diff": ["+    ", "+    private SignatureMatcher makeMatcher(Iterable<? extends VariableType> tparams,", "+                                         Iterable<? extends Type> targs,", "+                                         Iterable<? extends Type> params,", "+                                         Iterable<? extends Expression> args,", "+                                         Type returned, Option<Type> expected) {", "+      // Note: per the JLS, we allow the presence of (ignored) targs when tparams is empty", "+      int argCount = IterUtil.sizeOf(args);", "+      int paramCount = IterUtil.sizeOf(params);", "+      if (argCount == paramCount - 1) {", "+        if (IterUtil.isEmpty(tparams)) {", "+          return new EmptyVarargMatcher(params, args, tparams, EMPTY_TYPE_ITERABLE);", "+        }", "+        else if (IterUtil.isEmpty(targs)) {", "+          return new EmptyVarargInferenceMatcher(params, args, tparams, returned, expected);", "+        }", "+        else if (IterUtil.sizeOf(tparams) == IterUtil.sizeOf(targs) && inBounds(tparams, targs)) {", "+          return new EmptyVarargMatcher(substitute(params, tparams, targs), args, tparams, targs);", "+        }", "+        else { return NullMatcher.INSTANCE; }", "+      }", "+      else if (argCount == paramCount) {", "+        if (IterUtil.isEmpty(tparams)) { ", "+          return new SimpleMatcher(params, args, tparams, EMPTY_TYPE_ITERABLE);", "+        }", "+        else if (IterUtil.isEmpty(targs)) {", "+          return new InferenceMatcher(params, args, tparams, returned, expected);", "+        }", "+        else if (IterUtil.sizeOf(tparams) == IterUtil.sizeOf(targs) && inBounds(tparams, targs)) { ", "+          return new SimpleMatcher(substitute(params, tparams, targs), args, tparams, targs);", "+        }", "+        else { return NullMatcher.INSTANCE; }", "+      }", "+      else if (argCount > paramCount && paramCount >= 1) {", "+        if (IterUtil.isEmpty(tparams)) { ", "+          return new MultiVarargMatcher(params, args, tparams, EMPTY_TYPE_ITERABLE);", "+        }", "+        else if (IterUtil.isEmpty(targs)) {", "+          return new MultiVarargInferenceMatcher(params, args, tparams, returned, expected);", "+        }", "+        else if (IterUtil.sizeOf(tparams) == IterUtil.sizeOf(targs) && inBounds(tparams, targs)) {", "+          return new MultiVarargMatcher(substitute(params, tparams, targs), args, tparams, targs);", "+        }", "+        else { return NullMatcher.INSTANCE; }", "+      }", "+      else { return NullMatcher.INSTANCE; }", "+    }", "-  ", "-  private SignatureChecker makeChecker(Iterable<? extends VariableType> tparams, Iterable<? extends Type> targs,", "-                                       Iterable<? extends Type> params, Iterable<? extends Expression> args,", "-                                       Type returned, Option<Type> expected) {", "-    // Note: per the JLS, we allow the presense of (ignored) targs when tparams is empty", "-    int argCount = IterUtil.sizeOf(args);", "-    int paramCount = IterUtil.sizeOf(params);", "-    if (argCount == paramCount - 1) {", "-      if (IterUtil.isEmpty(tparams)) {", "-        return new EmptyVarargChecker(params, args, tparams, EMPTY_TYPE_ITERABLE);", "-      }", "-      else if (IterUtil.isEmpty(targs)) {", "-        return new EmptyVarargInferenceChecker(params, args, tparams, returned, expected);", "-      }", "-      else if (IterUtil.sizeOf(tparams) == IterUtil.sizeOf(targs) && inBounds(tparams, targs)) {", "-        return new EmptyVarargChecker(substitute(params, tparams, targs), args, tparams, targs);", "-      }", "-      else { return NullChecker.INSTANCE; }", "-    }", "-    else if (argCount == paramCount) {", "-      if (IterUtil.isEmpty(tparams)) { ", "-        return new SimpleChecker(params, args, tparams, EMPTY_TYPE_ITERABLE);", "-      }", "-      else if (IterUtil.isEmpty(targs)) {", "-        return new InferenceChecker(params, args, tparams, returned, expected);", "-      }", "-      else if (IterUtil.sizeOf(tparams) == IterUtil.sizeOf(targs) && inBounds(tparams, targs)) { ", "-        return new SimpleChecker(substitute(params, tparams, targs), args, tparams, targs);", "-      }", "-      else { return NullChecker.INSTANCE; }", "-    }", "-    else if (argCount > paramCount && paramCount >= 1) {", "-      if (IterUtil.isEmpty(tparams)) { ", "-        return new MultiVarargChecker(params, args, tparams, EMPTY_TYPE_ITERABLE);", "-      }", "-      else if (IterUtil.isEmpty(targs)) {", "-        return new MultiVarargInferenceChecker(params, args, tparams, returned, expected);", "-      }", "-      else if (IterUtil.sizeOf(tparams) == IterUtil.sizeOf(targs) && inBounds(tparams, targs)) {", "-        return new MultiVarargChecker(substitute(params, tparams, targs), args, tparams, targs);", "-      }", "-      else { return NullChecker.INSTANCE; }", "-    }", "-    else { return NullChecker.INSTANCE; }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de9f6c251f506fc31ba142fcbb19284a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "734866577ba652e258c158eef25bcbc68a43749a", "commitAfterChange": "06c097879b27ffb8ca08a54a4961265ba5907f07", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 251, "signatureBeforeChange": "      public String userRepresentation(Function f)", "signatureAfterChange": "          public String print(Function f)", "diff": ["-  ", "-  public String userRepresentation(Function f) {", "-    TypeWriter w = new TypeWriter();", "-    if (!IterUtil.isEmpty(f.typeParameters())) {", "-      w.append(\"<\");", "-      w.runOnList(f.typeParameters(), \", \");", "-      w.append(\"> \");", "-    }", "-    if (!(f instanceof DJConstructor)) {", "-      w.run(f.returnType());", "-      w.append(\" \");", "-    }", "-    w.append(f.declaredName());", "-    w.append(\"(\");", "-    w.runOnList(SymbolUtil.parameterTypes(f), \", \");", "-    w.append(\")\");", "-    w.appendConstraints();", "-    return w.result();", "-  }", "+    ", "+    public String print(Function f) {", "+      Visitor v = new Visitor();", "+      if (!IterUtil.isEmpty(f.typeParameters())) {", "+        v.append(\"<\");", "+        v.runOnList(f.typeParameters(), \", \");", "+        v.append(\"> \");", "+      }", "+      if (!(f instanceof DJConstructor)) {", "+        v.run(f.returnType());", "+        v.append(\" \");", "+      }", "+      v.append(f.declaredName());", "+      v.append(\"(\");", "+      v.runOnList(SymbolUtil.parameterTypes(f), \", \");", "+      v.append(\")\");", "+      v.appendConstraints();", "+      return v.result();", "+    }"]}], "num": 17509}
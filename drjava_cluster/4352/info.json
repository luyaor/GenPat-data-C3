{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d17f1d92fd14a20fb8586d9350bc1c4b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354bf22a6b7a78a044e0f86819d06705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public synchronized String getEnclosingTopLevelClassName(int pos) throws     ClassNameNotFoundException", "signatureAfterChange": "   public String getEnclosingTopLevelClassName(int pos) throws     ClassNameNotFoundException", "diff": ["-  public synchronized String getEnclosingTopLevelClassName(int pos) throws", "-    ClassNameNotFoundException", "-  {", "-    throwErrorHuh();", "-    int oldLocation = getCurrentLocation();", "-", "-    try {", "-      setCurrentLocation(pos);", "-", "-      IndentInfo info = getIndentInformation();", "-", "-      // Find top level open brace", "-      int topLevelBracePos = -1;", "-      String braceType = info.braceTypeCurrent;", "-      while (!braceType.equals(IndentInfo.noBrace)) {", "-        if (braceType.equals(IndentInfo.openSquiggly)) {", "-          topLevelBracePos = getCurrentLocation() - info.distToBraceCurrent;", "+  public String getEnclosingTopLevelClassName(int pos) throws", "+    ClassNameNotFoundException {", "+    // throwErrorHuh();", "+    ", "+    synchronized (_reduced) {", "+      int oldLocation = getCurrentLocation();", "+      ", "+      try {", "+        setCurrentLocation(pos);", "+        ", "+        IndentInfo info = getIndentInformation();", "+        ", "+        // Find top level open brace", "+        int topLevelBracePos = -1;", "+        String braceType = info.braceTypeCurrent;", "+        while (!braceType.equals(IndentInfo.noBrace)) {", "+          if (braceType.equals(IndentInfo.openSquiggly)) {", "+            topLevelBracePos = getCurrentLocation() - info.distToBraceCurrent;", "+          }", "+          move(-info.distToBraceCurrent);", "+          info = getIndentInformation();", "+          braceType = info.braceTypeCurrent;", "-        move(-info.distToBraceCurrent);", "-        info = getIndentInformation();", "-        braceType = info.braceTypeCurrent;", "-      }", "-      if (topLevelBracePos == -1) {", "-        // No top level brace was found, so we can't find a top level class name", "+        if (topLevelBracePos == -1) {", "+          // No top level brace was found, so we can't find a top level class name", "+          setCurrentLocation(oldLocation);", "+          throw new ClassNameNotFoundException(\"no top level brace found\");", "+        }", "+        ", "+        char[] delims = {'{', '}', ';'};", "+        int prevDelimPos = findPrevDelimiter(topLevelBracePos, delims);", "+        if (prevDelimPos == ERROR_INDEX) {", "+          // Search from start of doc", "+          prevDelimPos = DOCSTART;", "+        }", "+        else {", "+          prevDelimPos++;", "+        }", "-        throw new ClassNameNotFoundException(\"no top level brace found\");", "+        ", "+        // Parse out the class name", "+        return getNextTopLevelClassName(prevDelimPos, topLevelBracePos);", "-", "-      char[] delims = {'{', '}', ';'};", "-      int prevDelimPos = findPrevDelimiter(topLevelBracePos, delims);", "-      if (prevDelimPos == ERROR_INDEX) {", "-        // Search from start of doc", "-        prevDelimPos = DOCSTART;", "+      catch (BadLocationException ble) {", "+        // All positions here should be legal", "+        throw new UnexpectedException(ble);", "-      else {", "-        prevDelimPos++;", "-      }", "-      setCurrentLocation(oldLocation);", "-", "-      // Parse out the class name", "-      return getNextTopLevelClassName(prevDelimPos, topLevelBracePos);", "-    }", "-    catch (BadLocationException ble) {", "-      // All positions here should be legal", "-      throw new UnexpectedException(ble);", "-    }", "-    finally {", "-      setCurrentLocation(oldLocation);", "+      finally { setCurrentLocation(oldLocation); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b49c1137156d0857884766dec49b3a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "54d0a17e7a37f15a89960f683e082d8fac346424", "commitAfterChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 15, "signatureBeforeChange": "   synchronized public void setCurrentThread(DebugThreadData threadData) throws DebugException", "signatureAfterChange": "   public synchronized void setCurrentThread(DebugThreadData threadData)     throws DebugException", "diff": ["-  synchronized public void setCurrentThread(DebugThreadData threadData) throws DebugException {", "-    if (!isReady()) {", "-      return;", "+  public synchronized void setCurrentThread(DebugThreadData threadData)", "+    throws DebugException", "+  {", "+    _ensureReady();", "+    ", "+    if (threadData == null) {", "+      throw new IllegalArgumentException(\"Cannot set current thread to null.\");", "-    if ( threadData == null) {", "-      return;", "-    }", "+    ThreadReference threadRef = _getThreadFromDebugThreadData(threadData);", "-    ThreadReference thread_ref = getThreadFromDebugThreadData(threadData);", "-    ", "-    /** ", "-     * Special case to avoid overhead of scrollToSource() if we", "-     * are selecting the thread we have already selected currently", "-     */", "-    if(_suspendedThreads.size() > 0 && ", "-       _suspendedThreads.peek().uniqueID() == thread_ref.uniqueID() ){", "+    // Special case to avoid overhead of scrollToSource() if we", "+    // are selecting the thread we have already selected currently", "+    if ( _suspendedThreads.size() > 0 && ", "+       _suspendedThreads.peek().uniqueID() == threadRef.uniqueID() ) {", "-    if( _suspendedThreads.contains(thread_ref.uniqueID()) ) {", "-      _suspendedThreads.remove(thread_ref.uniqueID());", "+    if ( _suspendedThreads.contains(threadRef.uniqueID()) ) {", "+      _suspendedThreads.remove(threadRef.uniqueID());", "-    if( !thread_ref.isSuspended() ){", "-//       thread_ref.suspend();", "+    if ( !threadRef.isSuspended() ) {", "+      throw new IllegalArgumentException(\"Given thread must be suspended.\");", "+//       threadRef.suspend();", "-//         if( thread_ref.frameCount() <= 0 ) {", "-//           printMessage(thread_ref.name() + \" could not be suspended. It had no stackframes.\");", "-//           _suspendedThreads.push(thread_ref);", "+//         if( threadRef.frameCount() <= 0 ) {", "+//           printMessage(threadRef.name() + \" could not be suspended. It had no stackframes.\");", "+//           _suspendedThreads.push(threadRef);", "-//       /** ", "-//        * Step now so that we can get an interpreter, ", "-//        * do not notify (hence the false argument) ", "-//        */", "+//       // ", "+//       // Step now so that we can get an interpreter, ", "+//       // do not notify (hence the false argument) ", "-      return;", "+      //return;", "-    _suspendedThreads.push(thread_ref);", "+    _suspendedThreads.push(threadRef);", "+", "-      if( thread_ref.frameCount() <= 0 ) {", "-        printMessage(thread_ref.name() + \" could not be suspended. It had no stackframes.\");", "+      if ( threadRef.frameCount() > 0 ) {", "+        scrollToSource(threadRef.frame(0).location());", "+      }", "+      else {", "+        printMessage(threadRef.name() + ", "+                     \" could not be suspended since it has no stackframes.\");", "-      scrollToSource(thread_ref.frame(0).location());", "-    catch(IncompatibleThreadStateException e){", "-      throw new UnexpectedException(e);", "-    }    ", "-    ", "-    // also uncomment lines in currThreadSuspended() and in currThreadResumed() to make new functionality work", "-    _switchToInterpreterForThreadReference(thread_ref);", "+    catch (IncompatibleThreadStateException e) {", "+      throw new DebugException(\"Could not suspend thread: \" + e);", "+    }", "+", "+    // Activate the debug interpreter for interacting with this thread", "+    _switchToInterpreterForThreadReference(threadRef);"]}], "num": 4352}
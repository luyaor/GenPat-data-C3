{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59faad597e476bfa9b242cb4bb72e6f9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00403974bcddd44944034cb2d3827dab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/recur/RecurUtil.java", "commitBeforeChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "commitAfterChange": "34d03e4ba66c612a034017381b72d822fe9c84d0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private static boolean isAnonymousClass(Class<?> c)", "signatureAfterChange": "       protected String prefix()", "diff": ["-  /** An implementation of {@link Class#isAnonymousClass}, which is unavailable prior to Java 5.0 */", "-  private static boolean isAnonymousClass(Class<?> c) {", "-    String name = c.getName();", "-    String nameEnd = name.substring(name.lastIndexOf('$') + 1); // index is -1 if there is none", "-    for (int i = 0; i < nameEnd.length(); i++) {", "-      if (Character.isJavaIdentifierStart(nameEnd.charAt(i))) { return false; }", "-    }", "-    return true;", "-  }", "+    SHALLOW_MULTILINE {", "+      protected String prefix() { return \"\"; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "796f3965df9fa7e2efd8bce4a04effa3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "ce0ecf66ce1ecec7e4abe0bd534cf2fbbb576f91", "commitAfterChange": "4e52eec7688cbd5ec3584417f424923ba61a75e0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public Void forClassDef(ClassDef that)", "signatureAfterChange": "   public Void forClassDef(ClassDef that)", "diff": ["-    boolean isTestCase = false;  // flag to support automatic importing of junit.framework.*;", "-    ", "-    if (superName.equals(\"TestCase\") || superName.equals(\"junit.framework.TestCase\")) {", "-      isTestCase = true;", "-      if (! _importedPackages.contains(\"junit.framework\") && ! _importedFiles.contains(\"junit.framework.TestCase\")) {", "-        _importedFiles.addLast(\"junit.framework.TestCase\");", "-        createImportedSymbolContinuation(\"junit.framework.TestCase\", that.getSourceInfo());", "-      }", "-      assert getQualifiedSymbolData(\"junit.framework.TestCase\", that.getSourceInfo()) != null;", "-    }", "-    assert getQualifiedSymbolData(className, that.getSourceInfo()) != null;", "+  ", "+    // Note: sd returns null only if there is an error such as redefining a class", "+//    assert getQualifiedSymbolData(className, that.getSourceInfo()) != null;", "-    // Process fields of this ClassDef (the get method is misnamed!)", "-    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "+    // Type parameters are illegal in functional code.", "+//    for (int i = 0; i < that.getTypeParameters().length; i++) that.getTypeParameters()[i].visit(this);", "-      if (isTestCase) {", "+      // Perform special processing for classes extending TestCase   ", "+      if (superName.equals(\"TestCase\") || superName.equals(\"junit.framework.TestCase\")) {", "-        if (! _importedPackages.contains(\"junit.framework\") && ! _importedFiles.contains(\"junit.framework.TestCase\"))", "+        // Check to see if we need to autognerate an import of TestCase class", "+        if (! _importedPackages.contains(\"junit.framework\") && ! _importedFiles.contains(\"junit.framework.TestCase\")) {", "+          _importedFiles.addLast(\"junit.framework.TestCase\");", "+          createImportedSymbolContinuation(\"junit.framework.TestCase\", that.getSourceInfo());", "+//          System.err.println(\"*********** Imported symbol continuation created for junit.framework.TestCase\");", "+        }", "+        assert getQualifiedSymbolData(\"junit.framework.TestCase\", that.getSourceInfo()) != null;", "+      "]}], "num": 19312}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d81f06986ed078e8ef920c99d5a8ef2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30b0e0173d08f1d97af03204e3ba640e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "45f11437d24a95250c66e3a94437d7de4d6682c1", "commitAfterChange": "97bb3c70440590a053a3f2aff064ff2a0f94447e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   public String getClassName()", "signatureAfterChange": "   public String getClassName()", "diff": ["-      while (!done) {", "-        index = text.indexOf(\"class\", index);", "-        if (index == -1) {  //not found", "-          done = true; break;", "-        } else {", "-          //found a match, check quality", "-          setCurrentLocation(index);", "-          if (!_isCommentedOrSpace(index,text)) {", "-            done = true;", "-            if (!posNotInPhrase(index)) { //in a paren phrase, gone too far", "-              index = -1;", "-            }", "-          } else {", "-            index++;  //move past so we can search again", "-          }", "+      int indexOfClass = _findKeywordAtToplevel(\"class\", text);", "+      int indexOfInterface = _findKeywordAtToplevel(\"interface\", text);", "+      ", "+      if ( indexOfClass > -1 ) {", "+        ", "+        if (indexOfInterface > -1) {", "+          // compare indices to find the lesser", "+          index = (indexOfClass < indexOfInterface) ?", "+            indexOfClass + \"class\".length() :", "+            indexOfInterface + \"interface\".length();     ", "+        }", "+        else {", "+          //top level class declaration found", "+          index = indexOfClass + \"class\".length();", "-", "-      if (index > -1) {", "-        //top level class declaration found", "-        index = index + \"class\".length();", "+      else {", "-      } else {", "-        //no acceptable match, search for interface", "-        done = false;", "-        index = 0; ", "-", "-        //search again for interface", "-        while (!done) {", "-          index = text.indexOf(\"interface\", index);", "-          if (index == -1) {  //not found", "-            done = true; break;", "-          } else {", "-            //found a match, check for quality", "-            setCurrentLocation(index);", "-            if (!_isCommentedOrSpace(index,text)) {", "-              done = true;", "-              if (!posNotInPhrase(index)) { //in a paren phrase, gone too far", "-                index = -1;", "-              }", "-            } else { ", "-              index++; //move past so we can search again", "-            }", "-          }", "+        if (indexOfInterface > -1) {", "+          index = indexOfInterface + \"interface\".length();", "-", "-        if (index > -1) {", "-          index = index + \"interface\".length();", "-        } else {", "-          //no match", "+        else { ", "+          // neither index was valid", "+      ", "-      char c;  //tmp char", "-      int j;   ", "-", "-      done = false;", "-      char[] whitespace = {' ', '\\t', '\\n'};", "-      for (int i=index; i < docLength && !done; i++) {", "-        c = text.charAt(i);", "-", "-        done = true;", "-        for (j = 0; j < whitespace.length; j++) {", "-          if (c == whitespace[j]) {", "-            done = false;", "-          }", "-        }", "-        if (done) index = i;", "-      }", "-", "+      index = getFirstNonWSCharPos(index);", "+      if (index == -1) return \"\";", "+      ", "-", "+      char c;", "-      char[] delims = {' ', '\\t', '\\n','{','}','[',']','(',')',';','<','>'};", "-", "-        for (j = 0; j < delims.length; j++) {", "-          if (c == delims[j]) {", "-            endIndex = i;", "-            done = true; break;", "-          }", "+        if (!Character.isJavaIdentifierPart(c)) {", "+          endIndex = i;", "+          done = true;", "+      System.out.println(\"In finally\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d134b82a3ef4102af9c7b75f15be8ad0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "commitAfterChange": "516755fb1bc3cdf62239f31eeb5aaa4ca6ac65ed", "methodNumberBeforeChange": 124, "methodNumberAfterChange": 124, "signatureBeforeChange": "    private void _updateToolbarButtons()", "signatureAfterChange": "    private void _updateToolbarButtons()", "diff": ["-    if (CodeStatus.DEVELOPMENT) {", "-      Component[] buttons = _toolBar.getComponents();", "+    Component[] buttons = _toolBar.getComponents();", "+    ", "+    for (int i = 0; i< buttons.length; i++) {", "-      for (int i = 0; i< buttons.length; i++) {", "+      if (buttons[i] instanceof JButton) {", "-        if (buttons[i] instanceof JButton) {", "-          ", "-          JButton b = (JButton) buttons[i];", "-          Action a = b.getAction();", "+        JButton b = (JButton) buttons[i];", "+        Action a = b.getAction();", "-          // Work-around for strange configuration of undo/redo buttons", "-          /**if (a == null) {", "-            ActionListener[] al = b.getActionListeners(); // 1.4 only", "+        // Work-around for strange configuration of undo/redo buttons", "+        /**if (a == null) {", "+          ActionListener[] al = b.getActionListeners(); // 1.4 only", "-            for (int j=0; j<al.length; j++) {", "-              if (al[j] instanceof Action) {", "-                a = (Action) al[j];", "-                break;", "-              }", "+          for (int j=0; j<al.length; j++) {", "+            if (al[j] instanceof Action) {", "+              a = (Action) al[j];", "+              break;", "+          }", "-            */", "+          */", "-          Font toolbarFont = DrJava.CONFIG.getSetting(FONT_TOOLBAR);", "-          ", "-          b.setFont(toolbarFont);", "+        Font toolbarFont = DrJava.CONFIG.getSetting(FONT_TOOLBAR);", "+        b.setFont(toolbarFont);", "-            if (a==null) continue;", "-          //}", "+        if (a==null) continue;", "+        //}", "-          boolean iconsEnabled = DrJava.CONFIG.getSetting(TOOLBAR_ICONS_ENABLED).booleanValue();", "+        boolean iconsEnabled = DrJava.CONFIG.getSetting(TOOLBAR_ICONS_ENABLED).booleanValue();", "-          if (b.getIcon() == null) {", "-            if (iconsEnabled) {", "-              b.setIcon( (Icon) a.getValue(Action.SMALL_ICON));", "-            }", "+        if (b.getIcon() == null) {", "+          if (iconsEnabled) {", "+            b.setIcon( (Icon) a.getValue(Action.SMALL_ICON));", "-          else {", "-            if (!iconsEnabled && b.getText() != \"\") {", "-              b.setIcon(null);", "-            }", "-          }", "-          ", "-          boolean textEnabled = DrJava.CONFIG.getSetting(TOOLBAR_TEXT_ENABLED).booleanValue();", "-          ", "-          if (b.getText() == \"\") {", "-            if (textEnabled) {", "-              b.setText( (String) a.getValue(Action.DEFAULT));", "-            }", "-          }", "-          else {", "-            if (!textEnabled && b.getIcon() != null) {", "-              b.setText(\"\");", "-            }", "-          }", "-          ", "-          ", "+        else {", "+          if (!iconsEnabled && b.getText() != \"\") {", "+            b.setIcon(null);", "+          }", "+        }", "+          ", "+        boolean textEnabled = DrJava.CONFIG.getSetting(TOOLBAR_TEXT_ENABLED).booleanValue();", "+          ", "+        if (b.getText() == \"\") {", "+          if (textEnabled) {", "+            b.setText( (String) a.getValue(Action.DEFAULT));", "+          }", "+        }", "+        else {", "+          if (!textEnabled && b.getIcon() != null) {", "+            b.setText(\"\");", "+          }", "+        }", "+          ", "-    }   ", "+    }"]}], "num": 31380}
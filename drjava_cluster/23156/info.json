{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb8c8feb25ba20483e75bc817facb713", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a1dc4437a37fda42818408303f67ce5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   @Override public TypeContext visit(VariableDeclaration node)", "signatureAfterChange": "   @Override public TypeContext visit(VariableDeclaration node)", "diff": ["-        Type initT = checkType(node.getInitializer(), t);", "-          Expression newInit = ts.assign(t, node.getInitializer());", "-          node.setInitializer(newInit);", "+          Type initT = checkType(node.getInitializer(), t);", "+          try {", "+            Expression newInit = ts.assign(t, node.getInitializer());", "+            node.setInitializer(newInit);", "+          }", "+          catch (UnsupportedConversionException e) {", "+            TypePrinter printer = ts.typePrinter();", "+            setErrorStrings(node, printer.print(initT), printer.print(t));", "+            throw new ExecutionError(\"assignment.types\", node);", "+          }", "-        catch (UnsupportedConversionException e) {", "-          TypePrinter printer = ts.typePrinter();", "-          setErrorStrings(node, printer.print(initT), printer.print(t));", "-          throw new ExecutionError(\"assignment.types\", node);", "-        }", "+        catch (ExecutionError e) { setErrorContext(node, newContext); throw e; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9489f4f2ba40fa4507cb1d64f0075213", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private Type handleIncrementExpression(UnaryExpression node)", "signatureAfterChange": "     private Type handleIncrementExpression(UnaryExpression node)", "diff": ["-   */", "-  private Type handleIncrementExpression(UnaryExpression node) {", "-    Type result = node.getExpression().acceptVisitor(this);", "-    try {", "-      Expression exp = ts.makePrimitive(node.getExpression());", "-      if (!(getType(exp) instanceof NumericType) || !hasVariableType(node.getExpression())) {", "+     */", "+    private Type handleIncrementExpression(UnaryExpression node) {", "+      Type result = check(node.getExpression());", "+      try {", "+        Expression exp = ts.makePrimitive(node.getExpression());", "+        ", "+        if (!(getType(exp) instanceof NumericType) || !hasVariableType(node.getExpression())) {", "+          throw new ExecutionError(\"increment.type\", node);", "+        }", "+        ", "+        setLeftExpression(node, exp);", "+        return setType(node, result);", "+      }", "+      catch (UnsupportedConversionException e) {", "-      ", "-      setLeftExpression(node, exp);", "-      return setType(node, result);", "-    catch (UnsupportedConversionException e) {", "-      throw new ExecutionError(\"increment.type\", node);", "-    }", "-  }"]}], "num": 23156}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c2d5c83d25c89ad3af7ca018dd92e48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a81c4f2fac0889d95a4ee6b7e0691ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "61e5b2f858911ea73a13dba9fbe943d7030fb9fb", "commitAfterChange": "efaccf437175951cd0b6645fd51acf615d54103d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void interpretCurrentInteraction()", "signatureAfterChange": "   public void testClearCurrentInteraction() throws BadLocationException", "diff": ["-  public class TestInteractionsDocument extends AbstractInteractionsDocument {", "-    public void interpretCurrentInteraction() {", "-      fail(\"interpretCurrentInteraction called unexpectedly\");", "-    }", "+   */", "+  public void testClearCurrentInteraction() throws BadLocationException {", "+    _doc.insertString(_doc.getLength(), \"typed text\", _simpleAttributes);", "+    _controller.moveToEnd();", "+    ", "+    _doc.clearCurrentInteraction();", "+    assertEquals(\"Caret is at the prompt after output cleared.\",", "+                 _doc.getPromptPos(),", "+                 _pane.getCaretPosition());", "+    assertEquals(\"Prompt is at the end after output cleared.\",", "+                 _doc.getLength(),", "+                 _doc.getPromptPos());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334ecf5ad4bf506629886b8c1c2cd8d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "0bbc4205cb6cdac938c33646446cffe67a254d86", "commitAfterChange": "32c1a96bda59745efd4d13dbac97b7a11f8d7d24", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException", "signatureAfterChange": "   public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException", "diff": ["-  public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException {", "+  public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException {  //this fails", "-    assertEquals(\"insertion\",text, _defModel.getText(0,_defModel.getLength()));", "+    assertEquals(\"insertion\",text, _defModel.getText(0,_defModel.getLength())); ", "+    /* This is necessary here and other places where indenting or commenting takes place because the undoListener in DefinitionsPane ", "+     * currently starts compound edits, but here, there's no DefinitionsPane.", "+     * Perhaps there's some way to factor the undoListener in CompoundUndoManager to be the one that starts compound edits ", "+     * so that it will work with or without the view.", "+     */", "+    _defModel.getUndoManager().startCompoundEdit();"]}], "num": 1521}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51f90c30d4e7c9638e58177c83ca0b2a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a061494e21445544adaf25f51c7c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void _interpret(String toEval)", "signatureAfterChange": "   protected void _interpret(String toEval)", "diff": ["-      Object result = _interpreter.interpret(toEval);", "-      if (result != Interpreter.NO_RESULT) {", "-        append(String.valueOf(result) + \"\\n\" /* formerly StringOps.EOL*/, InteractionsDocument.OBJECT_RETURN_STYLE);", "+      Option<Object> result = _interpreter.interpret(toEval);", "+      if (result.isSome()) {", "+        String objString = null;", "+        try { objString = TextUtil.toString(Option.unwrap(result)); }", "+        catch (Throwable t) { throw new EvaluatorException(t); }", "+        append(objString + \"\\n\", InteractionsDocument.OBJECT_RETURN_STYLE);", "-    catch (ExceptionReturnedException e) {", "-      Throwable t = e.getContainedException();", "-      // getStackTrace should be a utility method somewhere...", "-      _document.appendExceptionResult(t.getClass().getName(),", "-                                      t.getMessage(),", "-                                      InterpreterJVM.getStackTrace(t),", "-                                      InteractionsDocument.DEFAULT_STYLE);", "+    catch (InterpreterException e) {", "+      StringWriter msg = new StringWriter();", "+      e.printUserMessage(new PrintWriter(msg));", "+      _document.appendExceptionResult(msg.toString(), InteractionsDocument.DEFAULT_STYLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ff9c3dda48bbc2372344811a729fdc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public Object interpret(List statements) throws InterpreterException", "signatureAfterChange": "   public Object interpret(List<Node> statements) throws InterpreterException", "diff": ["+   */", "+  public Object interpret(List<Node> statements) throws InterpreterException {", "+    try {", "+      ListIterator<Node> it = statements.listIterator();", "+      Object result = null;", "+      ", "+      while (it.hasNext()) {", "+        Node n = it.next();", "+        EvaluationVisitor ev = new EvaluationVisitor(evalVisitorContext);", "+        result = n.acceptVisitor(ev);", "+      }", "+      ", "+      return result;", "+    } catch (ExecutionError e) {", "+      throw new InterpreterException(e);", "+    } catch (ParseError e) {", "+      throw new InterpreterException(e);", "+    }", "+  }", "-     */", "-    public Object interpret(List statements) throws InterpreterException {", "-\t    ListIterator it = statements.listIterator();", "-            Object   result = null;", "-", "-            while (it.hasNext()) {", "-                Node n = (Node)it.next();", "-                Visitor v = new EvaluationVisitor(evalVisitorContext);", "-                result = n.acceptVisitor(v);", "-", "-            return result;", "-        } catch (ExecutionError e) {", "-            throw new InterpreterException(e);", "-        } catch (ParseError e) {", "-\t    throw new InterpreterException(e);", "-    }"]}], "num": 8577}
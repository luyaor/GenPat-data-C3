{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "388b3367a6341264d256afbcefc6faa4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35a05aeac7f53618796236573f53d945", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69b7f744a06a218546e1e05a5acb1e8cacf5750d", "commitAfterChange": "e10e7bd83f125e1856c739971a7fde05620d52b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void _attachToVM() throws DebugException", "signatureAfterChange": "   private void _attachToVM() throws DebugException", "diff": ["+    ", "+    // get the singleton instance of the interpreterJVM", "+    List referenceTypes = _vm.classesByName(\"edu.rice.cs.drjava.model.repl.newjvm.InterpreterJVM\");", "+    if (referenceTypes.size() <= 0) {", "+      throw new DebugException(\"Could not get a reference to interpreterJVM\");", "+    }", "+    ReferenceType rt = (ReferenceType)referenceTypes.get(0);", "+    Field field = rt.fieldByName(\"ONLY\");", "+    _interpreterJVM = (ObjectReference)rt.getValue(field);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbff0327355a25f4508e6d7490c3855", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/ExtendedTypeSystem.java", "commitBeforeChange": "9c6f88c259086ee69c4d958032e8427e6f011b12", "commitAfterChange": "9437c2299622c109c03b30ccc782cae5639dae6e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public boolean isEqual(Type t1, Type t2)", "signatureAfterChange": "   public boolean isEqual(Type t1, Type t2)", "diff": ["-  public boolean isEqual(Type t1, Type t2) { return t1.equals(t2) || (isSubtype(t1, t2) && isSubtype(t2, t1)); }", "+  public boolean isEqual(Type t1, Type t2) {", "+    if (t1.equals(t2)) { return true; }", "+    else {", "+      NormSubtype sub = new NormSubtype();", "+      Type t1Norm = NORMALIZE.value(t1);", "+      Type t2Norm = NORMALIZE.value(t2);", "+      return sub.contains(t1Norm, t2Norm) && sub.contains(t2Norm, t1Norm);", "+    }", "+  }"]}], "num": 4218}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28800f0bfc6d80e51e393f14ea30a624", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d3fc852948ff02a6cc6a04d4efc759c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 693, "methodNumberAfterChange": 696, "signatureBeforeChange": "          public void junitEnded()", "signatureAfterChange": "          public void junitEnded()", "diff": ["-      _junitErrorPanel.reset();", "+      // Use EventQueue invokeLater to ensure that JUnitErrorPanel is \"reset\" after it is updated with test results", "+      EventQueue.invokeLater(new Runnable() { public void run() { _junitErrorPanel.reset(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5912ede819c470a81bec6bf7a876cad6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "78a303372faa78d0b652d299ad0a178c5f2f97b5", "commitAfterChange": "fcfb3e435ad420a0dbbe54bf22acb85899b60361", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void updateAction()", "signatureAfterChange": "\r   \r   protected void updateAction()", "diff": ["-  ", "-  protected void updateAction() {", "-    JPanel cp = new JPanel(new BorderLayout(5,5));", "-    cp.setBorder(new EmptyBorder(5,5,5,5));", "-    setContentPane(cp);", "-    cp.add(new JOptionPane(\"Waiting for www.sourceforge.net ...\",JOptionPane.INFORMATION_MESSAGE,", "-                           JOptionPane.DEFAULT_OPTION,null,", "-                           new Object[0]), BorderLayout.CENTER);", "-    JProgressBar pb = new JProgressBar(0,100);", "-    pb.setIndeterminate(true);", "-    cp.add(pb, BorderLayout.SOUTH);", "-    validate();", "-    ", "-    new Thread(new Runnable() {", "-      public void run() {", "-        // list of things to clean up in case the update fails or is aborted", "-        ArrayList<File> toCleanUp = new ArrayList<File>();", "-        ", "-        try {", "-          LOG.log(\"updateAction\");", "-          ", "-          final File targetFile = getTargetFile();", "-          LOG.log(\"\\ttargetFile = \"+targetFile);", "-          if ((targetFile == null) || (targetFile.getParentFile() == null)) {", "-            abortUpdate(\"Could not determine where DrJava is located on this computer.\", true);", "-            return;", "-          }", "-          ", "-          // determine file name", "-          String fileName = _newestVersionString;", "-          final int lastDotPos = fileName.length();", "-          if (targetFile.toString().endsWith(\".jar\")) { fileName += \".jar\"; }", "-          else if (targetFile.toString().endsWith(\".exe\")) { fileName += \".exe\"; }", "-          else if (targetFile.toString().endsWith(\".app\")) { fileName += \"-osx.tar.gz\"; }", "-          else { abortUpdate(\"Could not determine the file type to download.\", true); return; }", "-          LOG.log(\"\\tfileName = \"+fileName);", "-          ", "-          // determine temp file name", "-          File destFile = FileOps.generateNewFileName(targetFile.getParentFile(),", "-                                                      fileName.substring(0,lastDotPos),", "-                                                      fileName.substring(lastDotPos));", "-          toCleanUp.add(destFile);", "-          LOG.log(\"Downloading to \"+destFile);", "-          ", "-          File macTempDir = null;", "-          File macTarFile = null;", "-          if (fileName.endsWith(\"-osx.tar.gz\")) {", "-            // assume this is on the Mac", "-            // check that tar exists", "-            macTarFile = new File(\"/usr/bin/tar\");", "-            LOG.log(\"Searching for \"+macTarFile);", "-            if (!macTarFile.exists()) {", "-              String path = System.getenv(\"PATH\");", "-              for(String p: path.split(System.getProperty(\"path.separator\"))) {", "-                macTarFile = new File(p, \"tar\");", "-                LOG.log(\"Searching for \"+macTarFile);", "-                if (macTarFile.exists()) break;", "-              }", "-              if (!macTarFile.exists()) { abortUpdate(\"Could not find tar on this computer.\", true); return; }", "-            }", "-            ", "-            // determine temporary directory", "-            macTempDir = FileOps.generateNewFileName(destFile.getParentFile(), _newestVersionString);", "-          }", "-          ", "-          // extract DrJavaRestart from this jar", "-          final File tempClassFile = File.createTempFile(\"drjavarestart-\",\".jar\");", "-          toCleanUp.add(tempClassFile);", "-          BufferedOutputStream tempClassOut = new BufferedOutputStream(new FileOutputStream(tempClassFile));", "-          BufferedInputStream tempClassIn = new BufferedInputStream(new FileInputStream(getDrJavaFile()));", "-          edu.rice.cs.plt.io.IOUtil.copyInputStream(tempClassIn, tempClassOut);", "-          tempClassIn.close();", "-          tempClassOut.close();", "-          LOG.log(\"Copied drjava.jar to \"+tempClassFile);", "-          ", "-          // download new file", "-          URL fileURL = new URL(getAutomaticDownloadURL()+fileName);", "-          LOG.log(\"fileURL = \"+fileURL);", "-          ", "-          URLConnection uc = fileURL.openConnection();", "-          final int length = uc.getContentLength();", "-          InputStream in = uc.getInputStream();", "-          ProgressMonitorInputStream pin = new ProgressMonitorInputStream(_mainFrame, \"Downloading \"+fileName+\" ...\", in);", "-          ProgressMonitor pm = pin.getProgressMonitor();", "-          pm.setMaximum(length);", "-          pm.setMillisToDecideToPopup(0);", "-          pm.setMillisToPopup(0);", "-          closeAction();", "-          ", "-          BufferedInputStream bin = new BufferedInputStream(pin);", "-          BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(destFile));", "-          edu.rice.cs.plt.io.IOUtil.copyInputStream(bin,bout);", "-          bin.close();", "-          bout.close();", "-          if ((!destFile.exists()) || (destFile.length() != length)) {", "-            abortUpdate(\"Could not download update.\"); return;", "-          }", "-          ", "-          LOG.log(\"Downloaded to \"+destFile);", "-          ", "-          if (fileName.endsWith(\"-osx.tar.gz\")) {", "-            // assume this is on the Mac, make temporary directory and tar xfz", "-            macTempDir.mkdirs();", "-            toCleanUp.add(macTempDir);", "-            Process p = new ProcessBuilder()", "-              .command(macTarFile.getAbsolutePath(), \"xfz\", destFile.getAbsolutePath())", "-              .directory(macTempDir)", "-              .redirectErrorStream(true)", "-              .start();", "-            boolean waiting = false;", "-            do {", "-              try {", "-                p.waitFor();", "-                waiting = false;", "-              }", "-              catch(InterruptedException ie) { abortUpdate(\"Installation was interrupted.\"); return; }", "-            } while(waiting);", "-            if (p.exitValue() != 0) { abortUpdate(\"Unpacking with tar failed.\"); return; }", "-            // delete tar.gz file", "-            destFile.delete();", "-            destFile = new File(macTempDir, \"DrJava.app\");", "-            if (!destFile.exists() ||", "-                !new File(destFile,\"Contents/Resources/Java/drjava.jar\").exists()) {", "-              abortUpdate(\"Downloaded file contained unexpected files.\"); return;", "-            }", "-          }", "-          else {", "-            // this is a jar or exe file, check that it can be opened as a JarFile", "-            JarFile jf = new JarFile(destFile);", "-          }", "-          ", "-          // we got to this point, assume that we have successfully downloaded everything", "-          // clear the list of files to clean up", "-          toCleanUp.clear();", "-          ", "-          // ask DrJava to close", "-          final File finalDestFile = destFile;", "-          Thread restart = new Thread() {", "-            public void run() {", "-              try {", "-                LOG.log(\"Restarting...\");", "-                Process p = JVMBuilder.DEFAULT.classPath(tempClassFile).start(DrJavaRestart.class.getName(),", "-                                                                              finalDestFile.getAbsolutePath(),", "-                                                                              targetFile.getAbsolutePath(),", "-                                                                              tempClassFile.getAbsolutePath());", "-              }", "-              catch(Exception e) {", "-                LOG.log(\"Exception in shutdown hook: \"+e);", "-                tempClassFile.delete();", "-                JOptionPane.showMessageDialog(null, ", "-                                              \"A new version of DrJava was downloaded. However,\\n\"+", "-                                              \"it could not be started automatically.\\n\\n\"+", "-                                              \"The new copy is now installed at:\\n\"+", "-                                              finalDestFile.getAbsolutePath()+\"\\n\\n\"+", "-                                              \"The old copy is still installed at:\\n\"+", "-                                              targetFile.getAbsolutePath()+\"\\n\\n\"+", "-                                              \"Please start DrJava manually.\",", "-                                              \"Error Updating DrJava\", JOptionPane.ERROR_MESSAGE);", "-                // NOTE: it would be nice if this error message would keep the application alive until the user closes it", "-              }", "-            }", "-          };", "-          Runtime.getRuntime().addShutdownHook(restart);", "-          Utilities.invokeAndWait(new Runnable() { public void run() { _mainFrame.quit(); } });", "-          // if we get here, then the user has cancelled the shutdown", "-          // remove the hook", "-          Runtime.getRuntime().removeShutdownHook(restart);", "-          tempClassFile.delete();", "-          JOptionPane.showMessageDialog(_mainFrame, ", "-                                        \"A new version of DrJava was downloaded. However, you chose\\n\"+", "-                                        \"not to restart DrJava, so the old version was not automatically\\n\"+", "-                                        \"replaced.\\n\\n\"+", "-                                        \"The new copy is now installed at:\\n\"+", "-                                        finalDestFile.getAbsolutePath()+\"\\n\\n\"+", "-                                        \"The old copy is still installed at:\\n\"+", "-                                        targetFile.getAbsolutePath());", "-        }", "-        catch(InterruptedIOException iie) { /* aborted by user */ return; }", "-        catch(IOException e) { abortUpdate(\"Error installing update:\\n\"+e.getMessage()); return; }", "-        finally {", "-          // clean up files", "-          for(File f: toCleanUp) { edu.rice.cs.plt.io.IOUtil.deleteRecursively(f); }", "-        }", "-      }", "-    }).start();", "-  }", "+  \r", "+  protected void updateAction() {\r", "+    JPanel cp = new JPanel(new BorderLayout(5,5));\r", "+    cp.setBorder(new EmptyBorder(5,5,5,5));\r", "+    setContentPane(cp);\r", "+    cp.add(new JOptionPane(\"Waiting for www.sourceforge.net ...\",JOptionPane.INFORMATION_MESSAGE,\r", "+                           JOptionPane.DEFAULT_OPTION,null,\r", "+                           new Object[0]), BorderLayout.CENTER);\r", "+    JProgressBar pb = new JProgressBar(0,100);\r", "+    pb.setIndeterminate(true);\r", "+    cp.add(pb, BorderLayout.SOUTH);\r", "+    validate();\r", "+    \r", "+    new Thread(new Runnable() {\r", "+      public void run() {\r", "+        // list of things to clean up in case the update fails or is aborted\r", "+        ArrayList<File> toCleanUp = new ArrayList<File>();\r", "+        \r", "+        try {\r", "+          LOG.log(\"updateAction\");\r", "+          \r", "+          final File targetFile = getTargetFile();\r", "+          LOG.log(\"\\ttargetFile = \"+targetFile);\r", "+          if ((targetFile == null) || (targetFile.getParentFile() == null)) {\r", "+            abortUpdate(\"Could not determine where DrJava is located on this computer.\", true);\r", "+            return;\r", "+          }\r", "+          \r", "+          // determine file name\r", "+          String fileName = _newestVersionString;\r", "+          final int lastDotPos = fileName.length();\r", "+          if (targetFile.toString().endsWith(\".jar\")) { fileName += \".jar\"; }\r", "+          else if (targetFile.toString().endsWith(\".exe\")) { fileName += \".exe\"; }\r", "+          else if (targetFile.toString().endsWith(\".app\")) { fileName += \"-osx.tar.gz\"; }\r", "+          else { abortUpdate(\"Could not determine the file type to download.\", true); return; }\r", "+          LOG.log(\"\\tfileName = \"+fileName);\r", "+          \r", "+          // determine temp file name\r", "+          File destFile = FileOps.generateNewFileName(targetFile.getParentFile(),\r", "+                                                      fileName.substring(0,lastDotPos),\r", "+                                                      fileName.substring(lastDotPos));\r", "+          toCleanUp.add(destFile);\r", "+          LOG.log(\"Downloading to \"+destFile);\r", "+          \r", "+          File macTempDir = null;\r", "+          File macTarFile = null;\r", "+          if (fileName.endsWith(\"-osx.tar.gz\")) {\r", "+            // assume this is on the Mac\r", "+            // check that tar exists\r", "+            macTarFile = new File(\"/usr/bin/tar\");\r", "+            LOG.log(\"Searching for \"+macTarFile);\r", "+            if (!macTarFile.exists()) {\r", "+              String path = System.getenv(\"PATH\");\r", "+              for(String p: path.split(System.getProperty(\"path.separator\"))) {\r", "+                macTarFile = new File(p, \"tar\");\r", "+                LOG.log(\"Searching for \"+macTarFile);\r", "+                if (macTarFile.exists()) break;\r", "+              }\r", "+              if (!macTarFile.exists()) { abortUpdate(\"Could not find tar on this computer.\", true); return; }\r", "+            }\r", "+            \r", "+            // determine temporary directory\r", "+            macTempDir = FileOps.generateNewFileName(destFile.getParentFile(), _newestVersionString);\r", "+          }\r", "+          \r", "+          // extract DrJavaRestart from this jar\r", "+          final File tempClassFile = File.createTempFile(\"drjavarestart-\",\".jar\");\r", "+          toCleanUp.add(tempClassFile);\r", "+          BufferedOutputStream tempClassOut = new BufferedOutputStream(new FileOutputStream(tempClassFile));\r", "+          BufferedInputStream tempClassIn = new BufferedInputStream(new FileInputStream(getDrJavaFile()));\r", "+          edu.rice.cs.plt.io.IOUtil.copyInputStream(tempClassIn, tempClassOut);\r", "+          tempClassIn.close();\r", "+          tempClassOut.close();\r", "+          LOG.log(\"Copied drjava.jar to \"+tempClassFile);\r", "+          \r", "+          // download new file\r", "+          URL fileURL = new URL(getAutomaticDownloadURL()+fileName);\r", "+          LOG.log(\"fileURL = \"+fileURL);\r", "+          \r", "+          URLConnection uc = fileURL.openConnection();\r", "+          final int length = uc.getContentLength();\r", "+          InputStream in = uc.getInputStream();\r", "+          ProgressMonitorInputStream pin = new ProgressMonitorInputStream(_mainFrame, \"Downloading \"+fileName+\" ...\", in);\r", "+          ProgressMonitor pm = pin.getProgressMonitor();\r", "+          pm.setMaximum(length);\r", "+          pm.setMillisToDecideToPopup(0);\r", "+          pm.setMillisToPopup(0);\r", "+          EventQueue.invokeLater(new Runnable() { public void run() { closeAction(); } });\r", "+          \r", "+          BufferedInputStream bin = new BufferedInputStream(pin);\r", "+          BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(destFile));\r", "+          edu.rice.cs.plt.io.IOUtil.copyInputStream(bin,bout);\r", "+          bin.close();\r", "+          bout.close();\r", "+          if ((!destFile.exists()) || (destFile.length() != length)) {\r", "+            abortUpdate(\"Could not download update.\"); return;\r", "+          }\r", "+          \r", "+          LOG.log(\"Downloaded to \"+destFile);\r", "+          \r", "+          if (fileName.endsWith(\"-osx.tar.gz\")) {\r", "+            // assume this is on the Mac, make temporary directory and tar xfz\r", "+            macTempDir.mkdirs();\r", "+            toCleanUp.add(macTempDir);\r", "+            Process p = new ProcessBuilder()\r", "+              .command(macTarFile.getAbsolutePath(), \"xfz\", destFile.getAbsolutePath())\r", "+              .directory(macTempDir)\r", "+              .redirectErrorStream(true)\r", "+              .start();\r", "+            boolean waiting = false;\r", "+            do {\r", "+              try {\r", "+                p.waitFor();\r", "+                waiting = false;\r", "+              }\r", "+              catch(InterruptedException ie) { abortUpdate(\"Installation was interrupted.\"); return; }\r", "+            } while(waiting);\r", "+            if (p.exitValue() != 0) { abortUpdate(\"Unpacking with tar failed.\"); return; }\r", "+            // delete tar.gz file\r", "+            destFile.delete();\r", "+            destFile = new File(macTempDir, \"DrJava.app\");\r", "+            if (!destFile.exists() ||\r", "+                !new File(destFile,\"Contents/Resources/Java/drjava.jar\").exists()) {\r", "+              abortUpdate(\"Downloaded file contained unexpected files.\"); return;\r", "+            }\r", "+          }\r", "+          else {\r", "+            // this is a jar or exe file, check that it can be opened as a JarFile\r", "+            JarFile jf = new JarFile(destFile);\r", "+          }\r", "+          \r", "+          // we got to this point, assume that we have successfully downloaded everything\r", "+          // clear the list of files to clean up\r", "+          toCleanUp.clear();\r", "+          \r", "+          // ask DrJava to close\r", "+          final File finalDestFile = destFile;\r", "+          Thread restart = new Thread() {\r", "+            public void run() {\r", "+              try {\r", "+                LOG.log(\"Restarting...\");\r", "+                Process p = JVMBuilder.DEFAULT.classPath(tempClassFile).start(DrJavaRestart.class.getName(),\r", "+                                                                              finalDestFile.getAbsolutePath(),\r", "+                                                                              targetFile.getAbsolutePath(),\r", "+                                                                              tempClassFile.getAbsolutePath());\r", "+              }\r", "+              catch(Exception e) {\r", "+                LOG.log(\"Exception in shutdown hook: \"+e);\r", "+                tempClassFile.delete();\r", "+                JOptionPane.showMessageDialog(null, \r", "+                                              \"A new version of DrJava was downloaded. However,\\n\"+\r", "+                                              \"it could not be started automatically.\\n\\n\"+\r", "+                                              \"The new copy is now installed at:\\n\"+\r", "+                                              finalDestFile.getAbsolutePath()+\"\\n\\n\"+\r", "+                                              \"The old copy is still installed at:\\n\"+\r", "+                                              targetFile.getAbsolutePath()+\"\\n\\n\"+\r", "+                                              \"Please start DrJava manually.\",\r", "+                                              \"Error Updating DrJava\", JOptionPane.ERROR_MESSAGE);\r", "+                // NOTE: it would be nice if this error message would keep the application alive until the user closes it\r", "+              }\r", "+            }\r", "+          };\r", "+          Runtime.getRuntime().addShutdownHook(restart);\r", "+          Utilities.invokeAndWait(new Runnable() { public void run() { _mainFrame.quit(); } });\r", "+          // if we get here, then the user has cancelled the shutdown\r", "+          // remove the hook\r", "+          Runtime.getRuntime().removeShutdownHook(restart);\r", "+          tempClassFile.delete();\r", "+          JOptionPane.showMessageDialog(_mainFrame, \r", "+                                        \"A new version of DrJava was downloaded. However, you chose\\n\"+\r", "+                                        \"not to restart DrJava, so the old version was not automatically\\n\"+\r", "+                                        \"replaced.\\n\\n\"+\r", "+                                        \"The new copy is now installed at:\\n\"+\r", "+                                        finalDestFile.getAbsolutePath()+\"\\n\\n\"+\r", "+                                        \"The old copy is still installed at:\\n\"+\r", "+                                        targetFile.getAbsolutePath());\r", "+        }\r", "+        catch(InterruptedIOException iie) { /* aborted by user */ return; }\r", "+        catch(IOException e) { abortUpdate(\"Error installing update:\\n\"+e.getMessage()); return; }\r", "+        finally {\r", "+          // clean up files\r", "+          for(File f: toCleanUp) { edu.rice.cs.plt.io.IOUtil.deleteRecursively(f); }\r", "+        }\r", "+      }\r", "+    }).start();\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e50ee56285bd53c152e58ef7dea0168", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "de413eda4232899a577fad80816630301e25a4de", "commitAfterChange": "1510cae783655f3e20fbad13671dbf97008c3ec2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["-    FindResultsPanel panel = ", "+    final FindResultsPanel panel = ", "-    panel._regTree.scrollRowToVisible(0);", "+    EventQueue.invokeLater(new Runnable() { public void run() { panel._regTree.scrollRowToVisible(0); } });"]}], "num": 3195}
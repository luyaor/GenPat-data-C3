{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f7b4a5b4faceb458163ff1d6adea5ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c9b10bed961a5fa1143cb4df07b5a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public void interruptConsoleInput()", "signatureAfterChange": "   public void interruptConsoleInput()", "diff": ["-  public void interruptConsoleInput() { SwingUtilities.invokeLater(_inputCompletionCommand); }", "+  public void interruptConsoleInput() { EventQueue.invokeLater(_inputCompletionCommand); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147b218ceb3ecaa117fc0aed5a957b07", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-      SwingUtilities.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+      EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd4e63dcbe025124e51eb38655376ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void startUp() throws DebugException", "signatureAfterChange": "   public synchronized void startUp() throws DebugException", "diff": ["-      SwingUtilities.invokeLater(new Runnable() {", "+      EventQueue.invokeLater(new Runnable() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d00a0d0e84e49a0d9a116790c76cd1b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public ExternalProcessPanel(MainFrame frame, String title, ProcessCreator pc)", "signatureAfterChange": "   public ExternalProcessPanel(MainFrame frame, String title, ProcessCreator pc)", "diff": ["-    */\r", "-  public ExternalProcessPanel(MainFrame frame, String title, ProcessCreator pc) {\r", "-    super(frame, title);\r", "-    _sb = new StringBuilder(\"Command line: \");\r", "-    _sb.append(pc.cmdline());\r", "-    _sb.append('\\n');\r", "-    _header = _sb.toString();\r", "-    _textArea.setText(_header);\r", "-    initThread(pc);\r", "-    _textArea.addMouseListener(new MouseListener() {\r", "-      public void mouseClicked(MouseEvent e) {\r", "-        if ((SwingUtilities.isLeftMouseButton(e)) &&\r", "-            (e.getClickCount()==2)) {\r", "-          doubleClicked(e);\r", "-        }\r", "-      }\r", "-      public void mouseEntered(MouseEvent e) { }\r", "-      public void mouseExited(MouseEvent e) { }\r", "-      public void mousePressed(MouseEvent e) { }\r", "-      public void mouseReleased(MouseEvent e) { }\r", "-    });\r", "-    SwingUtilities.invokeLater(new Runnable() {\r", "-      public void run() { updateText(); } });\r", "-    // MainFrame.LOG.log(\"\\tProcessPanel ctor done\");\r", "-  }\r", "+    */", "+  public ExternalProcessPanel(MainFrame frame, String title, ProcessCreator pc) {", "+    super(frame, title);", "+    _sb = new StringBuilder(\"Command line: \");", "+    _sb.append(pc.cmdline());", "+    _sb.append('\\n');", "+    _header = _sb.toString();", "+    _textArea.setText(_header);", "+    initThread(pc);", "+    _textArea.addMouseListener(new MouseListener() {", "+      public void mouseClicked(MouseEvent e) {", "+        if ((SwingUtilities.isLeftMouseButton(e)) &&", "+            (e.getClickCount()==2)) {", "+          doubleClicked(e);", "+        }", "+      }", "+      public void mouseEntered(MouseEvent e) { }", "+      public void mouseExited(MouseEvent e) { }", "+      public void mousePressed(MouseEvent e) { }", "+      public void mouseReleased(MouseEvent e) { }", "+    });", "+    EventQueue.invokeLater(new Runnable() {", "+      public void run() { updateText(); } });", "+    // MainFrame.LOG.log(\"\\tProcessPanel ctor done\");", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54d669aab86c746a5794e7c93dfaeac6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r   private void initComponents()", "signatureAfterChange": "   private void initComponents()", "diff": ["-  /** Build the dialog. */\r", "-  private void initComponents() {\r", "-    _dirChooser = new DirectoryChooser(this);\r", "-    _dirChooser.setDialogTitle(\"Select Work Directory\");\r", "-    _dirChooser.setApproveButtonText(\"Select\");\r", "-    _fileChooser = new FileChooser(null);\r", "-    _fileChooser.setDialogTitle(\"Select Enclosing .djapp File\");\r", "-    _fileChooser.setApproveButtonText(\"Select\");\r", "-    \r", "-    super.getContentPane().setLayout(new GridLayout(1,1));\r", "-    \r", "-    if (_editMode) {\r", "-      Action saveCommandAction = new AbstractAction(\"Save\") {\r", "-        public void actionPerformed(ActionEvent e) {\r", "-          _saveCommand();\r", "-        }\r", "-      };\r", "-      _saveCommandButton = new JButton(saveCommandAction);\r", "-    }\r", "-    else {\r", "-      Action runCommandAction = new AbstractAction(\"Run Command Line\") {\r", "-        public void actionPerformed(ActionEvent e) {\r", "-          _runCommand();\r", "-        }\r", "-      };\r", "-      _runCommandButton = new JButton(runCommandAction);\r", "-      _runCommandButton.addFocusListener(new FocusAdapter() {\r", "-        @SuppressWarnings(\"unchecked\")\r", "-        public void focusGained(FocusEvent e) {\r", "-          _insertCommandButton.setEnabled(false);\r", "-        }\r", "-        public void focusLost(FocusEvent e) {\r", "-          if ((e.getOppositeComponent() == _commandLinePreview) || \r", "-              (e.getOppositeComponent() == _commandWorkDirLinePreview) ||\r", "-              (e.getOppositeComponent() == _commandEnclosingFileLinePreview)) {\r", "-            _runCommandButton.requestFocus();\r", "-          }\r", "-        }\r", "-      });\r", "-      \r", "-      Action saveCommandAction = new AbstractAction(\"Save to Menu...\") {\r", "-        public void actionPerformed(ActionEvent e) {\r", "-          _saveCommand();\r", "-        }\r", "-      };\r", "-      _saveCommandButton = new JButton(saveCommandAction);\r", "-    }\r", "-    \r", "-    _insertVarDialog = new InsertVariableDialog(_mainFrame, _insertVarDialogMonitor);\r", "-    Action insertCommandAction = new AbstractAction(\"Insert Variable...\") {\r", "-      public void actionPerformed(ActionEvent e) {\r", "-        _insertVariableCommand();\r", "-      }\r", "-    };\r", "-    _insertCommandButton = new JButton(insertCommandAction);\r", "-    _insertCommandButton.setEnabled(false);\r", "-    \r", "-    Action cancelAction = new AbstractAction(\"Cancel\") {\r", "-      public void actionPerformed(ActionEvent e) {\r", "-        _cancel();\r", "-      }\r", "-    };\r", "-    _cancelCommandButton = new JButton(cancelAction);\r", "-    \r", "-    // set up \"Command Line\" panel\r", "-    _commandPanel = makeCommandPane();\r", "-    \r", "-    super.getContentPane().add(_commandPanel);\r", "-    super.setResizable(false);\r", "-    \r", "-    setSize(FRAME_WIDTH, FRAME_HEIGHT);\r", "-    MainFrame.setPopupLoc(this, _mainFrame);\r", "-    SwingUtilities.invokeLater(new Runnable() {\r", "-      public void run() {\r", "-        _commandLine.requestFocus();\r", "-      }\r", "-    });\r", "-  }\r", "+  /** Build the dialog. */", "+  private void initComponents() {", "+    _dirChooser = new DirectoryChooser(this);", "+    _dirChooser.setDialogTitle(\"Select Work Directory\");", "+    _dirChooser.setApproveButtonText(\"Select\");", "+    _fileChooser = new FileChooser(null);", "+    _fileChooser.setDialogTitle(\"Select Enclosing .djapp File\");", "+    _fileChooser.setApproveButtonText(\"Select\");", "+    ", "+    super.getContentPane().setLayout(new GridLayout(1,1));", "+    ", "+    if (_editMode) {", "+      Action saveCommandAction = new AbstractAction(\"Save\") {", "+        public void actionPerformed(ActionEvent e) {", "+          _saveCommand();", "+        }", "+      };", "+      _saveCommandButton = new JButton(saveCommandAction);", "+    }", "+    else {", "+      Action runCommandAction = new AbstractAction(\"Run Command Line\") {", "+        public void actionPerformed(ActionEvent e) {", "+          _runCommand();", "+        }", "+      };", "+      _runCommandButton = new JButton(runCommandAction);", "+      _runCommandButton.addFocusListener(new FocusAdapter() {", "+        @SuppressWarnings(\"unchecked\")", "+        public void focusGained(FocusEvent e) {", "+          _insertCommandButton.setEnabled(false);", "+        }", "+        public void focusLost(FocusEvent e) {", "+          if ((e.getOppositeComponent() == _commandLinePreview) || ", "+              (e.getOppositeComponent() == _commandWorkDirLinePreview) ||", "+              (e.getOppositeComponent() == _commandEnclosingFileLinePreview)) {", "+            _runCommandButton.requestFocus();", "+          }", "+        }", "+      });", "+      ", "+      Action saveCommandAction = new AbstractAction(\"Save to Menu...\") {", "+        public void actionPerformed(ActionEvent e) {", "+          _saveCommand();", "+        }", "+      };", "+      _saveCommandButton = new JButton(saveCommandAction);", "+    }", "+    ", "+    _insertVarDialog = new InsertVariableDialog(_mainFrame, _insertVarDialogMonitor);", "+    Action insertCommandAction = new AbstractAction(\"Insert Variable...\") {", "+      public void actionPerformed(ActionEvent e) {", "+        _insertVariableCommand();", "+      }", "+    };", "+    _insertCommandButton = new JButton(insertCommandAction);", "+    _insertCommandButton.setEnabled(false);", "+    ", "+    Action cancelAction = new AbstractAction(\"Cancel\") {", "+      public void actionPerformed(ActionEvent e) {", "+        _cancel();", "+      }", "+    };", "+    _cancelCommandButton = new JButton(cancelAction);", "+    ", "+    // set up \"Command Line\" panel", "+    _commandPanel = makeCommandPane();", "+    ", "+    super.getContentPane().add(_commandPanel);", "+    super.setResizable(false);", "+    ", "+    setSize(FRAME_WIDTH, FRAME_HEIGHT);", "+    MainFrame.setPopupLoc(this, _mainFrame);", "+    EventQueue.invokeLater(new Runnable() {", "+      public void run() {", "+        _commandLine.requestFocus();", "+      }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e47bdb99a02ac09fe0351ef81c65d2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7228cea597c372946661a7e1f1db20fd24b9dee1", "commitAfterChange": "8bb2649bd077e2bf6ccaf611ff49da8ad083e7b7", "methodNumberBeforeChange": 172, "methodNumberAfterChange": 172, "signatureBeforeChange": "   public void showFindResultsPanel(final FindResultsPanel panel)", "signatureAfterChange": "   public void showFindResultsPanel(final FindResultsPanel panel)", "diff": ["-    SwingUtilities.invokeLater(new Runnable() { public void run() { panel.requestFocusInWindow(); } });", "+    EventQueue.invokeLater(new Runnable() { public void run() { panel.requestFocusInWindow(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9440c8423d6f9bb400beb23503d4f7a3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 442, "methodNumberAfterChange": 391, "signatureBeforeChange": "    final private boolean jj_3R_129()", "signatureAfterChange": "    final private boolean jj_3R_129()", "diff": ["+  final private boolean jj_3R_129() {", "+    if (jj_3R_90()) return true;", "-", "-  final private boolean jj_3R_129() {", "-    if (jj_3R_193()) return true;", "-    return false;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f37892fb5186e90cfcd35c11f625ddd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 628, "methodNumberAfterChange": 628, "signatureBeforeChange": "   void askToIncreaseMasterMaxHeap()", "signatureAfterChange": "   void askToIncreaseMasterMaxHeap()", "diff": ["-      SwingUtilities.invokeLater(new Runnable() {", "+      EventQueue.invokeLater(new Runnable() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0739c24bf54476416fafc7d03630857", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExternalProcessPanel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r   protected void updateText()", "signatureAfterChange": "   protected void updateText()", "diff": ["-  /** Update the text area with the text that was read. */\r", "-  protected void updateText() {\r", "-    // MainFrame.LOG.log(\"updateText\");\r", "-    if (_updateNowButton.isEnabled()) {\r", "-//      try {\r", "-//        if ((_is!=null) && (_p!=null) &&\r", "-//            (_is.ready()) &&\r", "-//            (_p.getInputStream().available()>0)) { readText(false); }\r", "-//      }\r", "-//      catch(IOException ioe) {\r", "-//        try {\r", "-//          _p.exitValue();\r", "-//          // if we get here, process has finished, and we don't display the I/O exception\r", "-//        }\r", "-//        catch(IllegalThreadStateException e) {\r", "-//          // process has NOT finished yet, display the I/O exception\r", "-//          _sb.append(\"\\n\\nI/O Exception reading from process\\n\");\r", "-//        }\r", "-//        abortActionPerformed(null);\r", "-//        ++_changeCount;\r", "-//      }\r", "-      if (_changeCount>0) {\r", "-        _changeCount = 0;\r", "-        SwingUtilities.invokeLater(new Runnable() {\r", "-          public void run() {\r", "-            // MainFrame.LOG.log(\"\\tsetting text\");\r", "-            _textArea.setText(_sb.toString());\r", "-            int maxLines = edu.rice.cs.drjava.DrJava.getConfig().\r", "-              getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);\r", "-            if (maxLines>0) { // if maxLines is 0, buffer is unlimited\r", "-              try {\r", "-                int start = 0;\r", "-                int len = _textArea.getText().length();\r", "-                int curLines = _textArea.getLineCount();\r", "-                if (curLines>maxLines) {\r", "-                  start = _textArea.getLineStartOffset(curLines-maxLines);\r", "-                  len -= start;\r", "-                  _sb = new StringBuilder(_textArea.getText(start,len));\r", "-                  _textArea.setText(_sb.toString());\r", "-                }\r", "-              }\r", "-              catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }\r", "-            }\r", "-            // MainFrame.LOG.log(\"\\ttext length = \"+s.length());\r", "-          }\r", "-        });\r", "-      }\r", "-      // MainFrame.LOG.log(\"\\tupdating buttons\");\r", "-      updateButtons();\r", "-    }\r", "-  }\r", "+  /** Update the text area with the text that was read. */", "+  protected void updateText() {", "+    // MainFrame.LOG.log(\"updateText\");", "+    if (_updateNowButton.isEnabled()) {", "+//      try {", "+//        if ((_is!=null) && (_p!=null) &&", "+//            (_is.ready()) &&", "+//            (_p.getInputStream().available()>0)) { readText(false); }", "+//      }", "+//      catch(IOException ioe) {", "+//        try {", "+//          _p.exitValue();", "+//          // if we get here, process has finished, and we don't display the I/O exception", "+//        }", "+//        catch(IllegalThreadStateException e) {", "+//          // process has NOT finished yet, display the I/O exception", "+//          _sb.append(\"\\n\\nI/O Exception reading from process\\n\");", "+//        }", "+//        abortActionPerformed(null);", "+//        ++_changeCount;", "+//      }", "+      if (_changeCount>0) {", "+        _changeCount = 0;", "+        EventQueue.invokeLater(new Runnable() {", "+          public void run() {", "+            // MainFrame.LOG.log(\"\\tsetting text\");", "+            _textArea.setText(_sb.toString());", "+            int maxLines = edu.rice.cs.drjava.DrJava.getConfig().", "+              getSetting(edu.rice.cs.drjava.config.OptionConstants.FOLLOW_FILE_LINES);", "+            if (maxLines>0) { // if maxLines is 0, buffer is unlimited", "+              try {", "+                int start = 0;", "+                int len = _textArea.getText().length();", "+                int curLines = _textArea.getLineCount();", "+                if (curLines>maxLines) {", "+                  start = _textArea.getLineStartOffset(curLines-maxLines);", "+                  len -= start;", "+                  _sb = new StringBuilder(_textArea.getText(start,len));", "+                  _textArea.setText(_sb.toString());", "+                }", "+              }", "+              catch(javax.swing.text.BadLocationException e) { /* ignore, do not truncate */ }", "+            }", "+            // MainFrame.LOG.log(\"\\ttext length = \"+s.length());", "+          }", "+        });", "+      }", "+      // MainFrame.LOG.log(\"\\tupdating buttons\");", "+      updateButtons();", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a524c4943e3b7c6953096f553f58f747", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _notifyUndoHappened()", "signatureAfterChange": "   private void _notifyUndoHappened()", "diff": ["-    SwingUtilities.invokeLater(new Runnable() { public void run() { _notifier.undoableEditHappened(); } });", "+    EventQueue.invokeLater(new Runnable() { public void run() { _notifier.undoableEditHappened(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b303f8659409dbf861cd3f5aaeee50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r   protected void colorVariables(final JTextPane pane,\r                                 final PropertyMaps props,\r                                 final DocumentListener dl,\r                                 final SimpleAttributeSet normal,\r                                 final SimpleAttributeSet variable,\r                                 final SimpleAttributeSet error)", "signatureAfterChange": "   protected void colorVariables(final JTextPane pane,                                 final PropertyMaps props,                                 final DocumentListener dl,                                 final SimpleAttributeSet normal,                                 final SimpleAttributeSet variable,                                 final SimpleAttributeSet error)", "diff": ["-    * @param props the properties to color */\r", "-  protected void colorVariables(final JTextPane pane,\r", "-                                final PropertyMaps props,\r", "-                                final DocumentListener dl,\r", "-                                final SimpleAttributeSet normal,\r", "-                                final SimpleAttributeSet variable,\r", "-                                final SimpleAttributeSet error) {\r", "-    SwingUtilities.invokeLater(new Runnable() {\r", "-      public void run() {\r", "-        StyledDocument doc = (StyledDocument)pane.getDocument();\r", "-        doc.removeDocumentListener(dl);\r", "-        String str = pane.getText();\r", "-        BalancingStreamTokenizer tok = new BalancingStreamTokenizer(new StringReader(str), '$');\r", "-        tok.wordRange(0,255);\r", "-        tok.addQuotes(\"${\", \"}\");\r", "-        \r", "-        int pos = 0;\r", "-        doc.setCharacterAttributes(0,str.length(),normal,true);\r", "-        String next = null;\r", "-        try {\r", "-          while((next=tok.getNextToken())!=null) {\r", "-            if ((tok.token()==BalancingStreamTokenizer.Token.QUOTED) && (next.startsWith(\"${\"))) {\r", "-              if (next.endsWith(\"}\")) {\r", "-                String key;\r", "-                String attrList = \"\";\r", "-                int firstCurly = next.indexOf('}');\r", "-                int firstSemi = next.indexOf(';');\r", "-                if (firstSemi<0) {\r", "-                  key = next.substring(2,firstCurly);\r", "-                }\r", "-                else {\r", "-                  key = next.substring(2,firstSemi);\r", "-                  attrList = next.substring(firstSemi+1,next.length()-1).trim();\r", "-                }\r", "-                boolean found = false;\r", "-                for(String category: props.getCategories()) {\r", "-                  DrJavaProperty p = props.getProperty(category, key);\r", "-                  if (p!=null) {\r", "-                    found = true;\r", "-                    doc.setCharacterAttributes(pos,pos+next.length(),variable,true);\r", "-                    \r", "-                    // found property name\r", "-                    // if we have a list of attributes\r", "-                    if (attrList.length()>0) {\r", "-                      // +2 for \"${\", +1 for \";\"\r", "-                      int subpos = pos + 2 + key.length() + 1;\r", "-                      int added = 0;\r", "-                      BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList), '$');\r", "-                      atok.wordRange(0,255);\r", "-                      atok.addQuotes(\"${\", \"}\");\r", "-                      atok.addQuotes(\"\\\"\", \"\\\"\");\r", "-                      atok.addKeyword(\";\");\r", "-                      atok.addKeyword(\"=\");\r", "-                      // LOG.log(\"\\tProcessing AttrList\");\r", "-                      String n = null;\r", "-                      while((n=atok.getNextToken())!=null) {\r", "-                        if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.NORMAL) ||\r", "-                            n.trim().equals(\";\") || n.trim().equals(\"=\") || n.trim().startsWith(\"\\\"\")) {\r", "-                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);\r", "-                          break;\r", "-                        }\r", "-                        added += n.length();\r", "-                        String name = n.trim();\r", "-                        n = atok.getNextToken();\r", "-                        if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.trim().equals(\"=\"))) {\r", "-                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);\r", "-                          break;\r", "-                        }\r", "-                        added += n.length();\r", "-                        n = atok.getNextToken();\r", "-                        if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.QUOTED) || (!n.trim().startsWith(\"\\\"\"))) {\r", "-                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);\r", "-                          break;\r", "-                        }\r", "-                        added += n.length();\r", "-                        n = atok.getNextToken();\r", "-                        if (((n!=null) && ((atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\";\")))) ||\r", "-                            ((n==null) && (atok.token()!=BalancingStreamTokenizer.Token.END))) {\r", "-                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);\r", "-                          break;\r", "-                        }\r", "-                        if (n!=null) { added += n.length(); }\r", "-                        try { p.getAttribute(name); }\r", "-                        catch(IllegalArgumentException e) { doc.setCharacterAttributes(subpos,subpos+added,error,true); }\r", "-                        subpos += added;\r", "-                      }\r", "-                    }\r", "-                  }\r", "-                  if (found) break;\r", "-                }\r", "-                if (!found) doc.setCharacterAttributes(pos,pos+next.length(),error,true);\r", "-              }\r", "-              else doc.setCharacterAttributes(pos,pos+next.length(),error,true);\r", "-            }\r", "-            else doc.setCharacterAttributes(pos,pos+next.length(),normal,true);\r", "-            pos += next.length();\r", "-          }\r", "-        }\r", "-        catch(IOException e) { /* ignore  */ }\r", "-        finally { doc.addDocumentListener(dl); }\r", "-      }\r", "-    });\r", "-  }\r", "+    * @param props the properties to color */", "+  protected void colorVariables(final JTextPane pane,", "+                                final PropertyMaps props,", "+                                final DocumentListener dl,", "+                                final SimpleAttributeSet normal,", "+                                final SimpleAttributeSet variable,", "+                                final SimpleAttributeSet error) {", "+    EventQueue.invokeLater(new Runnable() {", "+      public void run() {", "+        StyledDocument doc = (StyledDocument)pane.getDocument();", "+        doc.removeDocumentListener(dl);", "+        String str = pane.getText();", "+        BalancingStreamTokenizer tok = new BalancingStreamTokenizer(new StringReader(str), '$');", "+        tok.wordRange(0,255);", "+        tok.addQuotes(\"${\", \"}\");", "+        ", "+        int pos = 0;", "+        doc.setCharacterAttributes(0,str.length(),normal,true);", "+        String next = null;", "+        try {", "+          while((next=tok.getNextToken())!=null) {", "+            if ((tok.token()==BalancingStreamTokenizer.Token.QUOTED) && (next.startsWith(\"${\"))) {", "+              if (next.endsWith(\"}\")) {", "+                String key;", "+                String attrList = \"\";", "+                int firstCurly = next.indexOf('}');", "+                int firstSemi = next.indexOf(';');", "+                if (firstSemi<0) {", "+                  key = next.substring(2,firstCurly);", "+                }", "+                else {", "+                  key = next.substring(2,firstSemi);", "+                  attrList = next.substring(firstSemi+1,next.length()-1).trim();", "+                }", "+                boolean found = false;", "+                for(String category: props.getCategories()) {", "+                  DrJavaProperty p = props.getProperty(category, key);", "+                  if (p!=null) {", "+                    found = true;", "+                    doc.setCharacterAttributes(pos,pos+next.length(),variable,true);", "+                    ", "+                    // found property name", "+                    // if we have a list of attributes", "+                    if (attrList.length()>0) {", "+                      // +2 for \"${\", +1 for \";\"", "+                      int subpos = pos + 2 + key.length() + 1;", "+                      int added = 0;", "+                      BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList), '$');", "+                      atok.wordRange(0,255);", "+                      atok.addQuotes(\"${\", \"}\");", "+                      atok.addQuotes(\"\\\"\", \"\\\"\");", "+                      atok.addKeyword(\";\");", "+                      atok.addKeyword(\"=\");", "+                      // LOG.log(\"\\tProcessing AttrList\");", "+                      String n = null;", "+                      while((n=atok.getNextToken())!=null) {", "+                        if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.NORMAL) ||", "+                            n.trim().equals(\";\") || n.trim().equals(\"=\") || n.trim().startsWith(\"\\\"\")) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        String name = n.trim();", "+                        n = atok.getNextToken();", "+                        if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || ", "+                            (!n.trim().equals(\"=\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        n = atok.getNextToken();", "+                        if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.QUOTED) || ", "+                            (!n.trim().startsWith(\"\\\"\"))) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        added += n.length();", "+                        n = atok.getNextToken();", "+                        if ((n != null && (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD || ! n.equals(\";\"))) ||", "+                            (n == null && atok.token()!=BalancingStreamTokenizer.Token.END)) {", "+                          doc.setCharacterAttributes(subpos,pos+next.length(),error,true);", "+                          break;", "+                        }", "+                        if (n!=null) { added += n.length(); }", "+                        try { p.getAttribute(name); }", "+                        catch(IllegalArgumentException e) { ", "+                          doc.setCharacterAttributes(subpos, subpos + added, error, true); ", "+                        }", "+                        subpos += added;", "+                      }", "+                    }", "+                  }", "+                  if (found) break;", "+                }", "+                if (!found) doc.setCharacterAttributes(pos,pos+next.length(),error,true);", "+              }", "+              else doc.setCharacterAttributes(pos,pos+next.length(),error,true);", "+            }", "+            else doc.setCharacterAttributes(pos,pos+next.length(),normal,true);", "+            pos += next.length();", "+          }", "+        }", "+        catch(IOException e) { /* ignore  */ }", "+        finally { doc.addDocumentListener(dl); }", "+      }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b577ef05621eed33e090e672b6cd6193", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/ScrollableListSelectionDialog.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public static void main(String args[])", "signatureAfterChange": "   public static void main(String args[])", "diff": ["-    SwingUtilities.invokeLater(new Runnable() {", "+    EventQueue.invokeLater(new Runnable() {", "-        ScrollableListSelectionDialog ld = new ScrollableListSelectionDialog(null, \"TITLE\", \"LEADER\", data, \"Words\", SelectionState.SELECTED, JOptionPane.ERROR_MESSAGE) {", "+        ScrollableListSelectionDialog ld = ", "+          new ScrollableListSelectionDialog(null, \"TITLE\", \"LEADER\", data, \"Words\", SelectionState.SELECTED, ", "+                                            JOptionPane.ERROR_MESSAGE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8696f2a3b5a0b24ecdd8debb5ec275f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(final String[] args)", "signatureAfterChange": "      public static void main(final String[] args)", "diff": ["-      SwingUtilities.invokeLater(new Runnable(){ public void run(){ ", "+      EventQueue.invokeLater(new Runnable(){ public void run(){ "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0cbfd52a5401ec8e026b2cb2a1caaff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 626, "methodNumberAfterChange": 626, "signatureBeforeChange": "   void askToIncreaseSlaveMaxHeap()", "signatureAfterChange": "   void askToIncreaseSlaveMaxHeap()", "diff": ["-    String res = (String)JOptionPane.showInputDialog(MainFrame.this,", "-                                                     \"Your program ran out of memory. You may try to enter a larger\\n\" +", "-                                                     \"maximum heap size for the Interactions JVM. The maximum heap size is\\n\" +", "-                                                     \"currently \"+value+\".\\n\"+", "-                                                     \"A restart is required after changing this setting.\",", "-                                                     \"Increase Maximum Heap Size?\",", "-                                                     JOptionPane.QUESTION_MESSAGE,", "-                                                     null,", "-                                                     OptionConstants.heapSizeChoices.toArray(),", "-                                                     DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+    String res = (String)JOptionPane.", "+      showInputDialog(MainFrame.this,", "+                      \"Your program ran out of memory. You may try to enter a larger\\n\" +", "+                      \"maximum heap size for the Interactions JVM. The maximum heap size is\\n\" +", "+                      \"currently \"+value+\".\\n\"+", "+                      \"A restart is required after changing this setting.\",", "+                      \"Increase Maximum Heap Size?\",", "+                      JOptionPane.QUESTION_MESSAGE,", "+                      null,", "+                      OptionConstants.heapSizeChoices.toArray(),", "+                      DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "-      SwingUtilities.invokeLater(new Runnable() {", "+      EventQueue.invokeLater(new Runnable() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1a6532481f3383eebf427f61fd6cc98", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "4d3fa64499badc01be2d089cba1394a47c2f30de", "commitAfterChange": "ed48d6b9cb86b6e63d0852d1106c5aba17823c84", "methodNumberBeforeChange": 418, "methodNumberAfterChange": 422, "signatureBeforeChange": "    final private boolean jj_3R_119()", "signatureAfterChange": "    final private boolean jj_3R_119()", "diff": ["-  final private boolean jj_3R_119() {", "+  final private boolean jj_3R_119() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2db0d18271602200bdc958e69644005", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 670, "methodNumberAfterChange": 670, "signatureBeforeChange": "          public void runStarted(final OpenDefinitionsDocument doc)", "signatureAfterChange": "          public void runStarted(final OpenDefinitionsDocument doc)", "diff": ["-      SwingUtilities.invokeLater(new Runnable() {", "+      EventQueue.invokeLater(new Runnable() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4f351e6f09cbcbf972fdbdb4a9dfcb2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/KeyStrokeOptionComponent.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public GetKeyDialog(Frame f, String title, boolean modal)", "signatureAfterChange": "      public GetKeyDialog(Frame f, String title, boolean modal)", "diff": ["-      SwingUtilities.invokeLater(new Runnable() { public void run() { GetKeyDialog.this.pack(); } });", "+      EventQueue.invokeLater(new Runnable() { public void run() { GetKeyDialog.this.pack(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c99b77abb3215276ee5edd4720d74a2c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _selectFoundOrReplacedItem(int from, int to)", "signatureAfterChange": "   private void _selectFoundOrReplacedItem(int from, int to)", "diff": ["-    SwingUtilities.invokeLater(new Runnable() { ", "+    EventQueue.invokeLater(new Runnable() { "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c6ab897e1e091f93b9f193c49fc7ee", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": "   public void dispose()", "signatureAfterChange": "   public void dispose()", "diff": ["-    SwingUtilities.invokeLater(new Runnable() { public void run() { _notifier.removeAllListeners(); } });", "+    EventQueue.invokeLater(new Runnable() { public void run() { _notifier.removeAllListeners(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de810ceef9d449236df7ee28151960bd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp() throws Exception", "signatureAfterChange": "   public void setUp() throws Exception", "diff": ["-    SwingUtilities.invokeLater(new Runnable() { public void run() { _frame.pack(); } });", "+    EventQueue.invokeLater(new Runnable() { public void run() { _frame.pack(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50fbe12653be7dc3038d824c414fbd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   public synchronized void shutdown()", "signatureAfterChange": "   public synchronized void shutdown()", "diff": ["-      SwingUtilities.invokeLater(command);", "+      EventQueue.invokeLater(command);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edbf787878760a271817a121bba818b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/CompoundUndoManager.java", "commitBeforeChange": "591f8aac4f79eab75475a3d9dd862c3b019f02a1", "commitAfterChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public synchronized void undo(int key)", "signatureAfterChange": "   public synchronized void undo(int key)", "diff": ["-      SwingUtilities.invokeLater(new Runnable() { ", "+      EventQueue.invokeLater(new Runnable() { "]}], "num": 2412}
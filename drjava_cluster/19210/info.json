{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f8ada24a7f02e54fb94bd7137c9650d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c28e32e66050f3caf0d8d7fbd853056", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindReplaceMachine.java", "commitBeforeChange": "a2b28a9213fa3cc634db7fda88e14ebb0a103974", "commitAfterChange": "56df485f00337d373f1f0b94fc58f7c7b8b714d4", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "     public FindResult findNext()", "diff": ["-   */", "-  public FindResult findNext() {", "-    try {", "-      FindResult tempFr = new FindResult(_doc, -1, false);", "-      // If the user just found and toggled the \"Search Backwards\"", "-      // option, we should skip the first find.", "-      if (_skipOneFind) {", "-        int wordLength = _lastFindWord.length();", "-        if (!_searchBackwards) {", "-          setPosition(getCurrentOffset() + wordLength);", "-        }", "-        else {", "-          setPosition(getCurrentOffset() - wordLength);", "-        }", "-        positionChanged();", "-      }", "-      int start, len;", "-      String findWord = this._findWord;", "-      // get the search space in the document", "-      String findSpace;", "-      if(!_searchBackwards){", "-        start = _current.getOffset();", "-        len = _doc.getLength() - start;", "-      } else {", "-        start = 0;", "-        len = _current.getOffset();", "-      }", "-      findSpace = _doc.getText(start, len);", "-      if (!_matchCase){", "-        findSpace = findSpace.toLowerCase();", "-        findWord = findWord.toLowerCase();", "-      }", "-", "-      // find the first occurrence of findWord", "-      int foundOffset;", "-      foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-                                      : findSpace.lastIndexOf(findWord);", "-      // if we've found it", "-      if (foundOffset >= 0) {", "-        _found = true;", "-        foundOffset += start;", "-        if (!_searchBackwards){", "-           foundOffset += findWord.length();", "-        }", "-        _current = _doc.createPosition(foundOffset);", "-      }", "-      else {", "-        // if we haven't found it", "-        if (_searchAllDocuments) {", "-          tempFr = _findNextInAllDocs(!_searchBackwards ? _docIterator.getNextDocument(_doc) :", "-                                        _docIterator.getPrevDocument(_doc));", "-          foundOffset = tempFr.getFoundOffset();", "-        }", "-        // we still haven't found it", "-        if (foundOffset == -1) {", "-          _wrapped = true;", "-          //When we wrap, we need to include some text that was already searched before wrapping.", "-          //Otherwise, we won't find an only match that has the caret in it already.", "-          if(!_searchBackwards){", "-            start = 0;", "-            len = _current.getOffset() + (_findWord.length() - 1);", "-            if(len > _doc.getLength()){", "-              len = _doc.getLength();", "-            }", "-          } ", "-          else {", "-            start = _current.getOffset() - (_findWord.length() - 1);", "-            if (start < 0){", "-              start = 0;", "-            }", "-            len = _doc.getLength() - start;", "-          }", "-          findSpace = _doc.getText(start, len);", "-          ", "-          if (!_matchCase) {", "-            findSpace = findSpace.toLowerCase();", "-          }", "-          foundOffset = !_searchBackwards ? findSpace.indexOf(findWord)", "-            : findSpace.lastIndexOf(findWord);", "-          ", "-          if (foundOffset >= 0) {", "-            foundOffset += start;", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-            }", "-            _current = _doc.createPosition(foundOffset);", "-          }", "-        }", "-      }", "-      // flag the return value so that they can tell that we had to wrap", "-      // the file to determine the info.", "-", "-      //This means we have found the word before, just not in this call", "-//      if(foundOffset == -1 && _found) {", "-//        _current = _start;", "-//        _found = false;", "-//        return findNext();", "-//      }", "-//      else {", "-      FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped);", "-      _wrapped = false;", "-      return fr;", "-//      }", "-    catch (BadLocationException e) {", "-      throw new UnexpectedException(e);", "-  }", "+    */", "+    public FindResult findNext() {", "+        return _state.findNext();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa09d5b97aae28d3e44e1a3160f00a00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": "   private FindResult _findNext(int start, int end)", "signatureAfterChange": "    private FindResult _findNext(OpenDefinitionsDocument doc, int start, int len, boolean searchAll)", "diff": ["+   */ ", "+  private FindResult _findNext(OpenDefinitionsDocument doc, int start, int len, boolean searchAll) {", "+//    System.err.println(\"_findNext([\" + doc.getText() + \"], \" +  start + \", \" + len + \", \" + searchAll + \")\");", "+    assert (_isForward && start + len == doc.getLength()) || (! _isForward && start == 0);", "+    FindResult fr = _findNextInDoc(doc, start, len, searchAll);", "+    if ((fr.getFoundOffset() >= 0) || ! searchAll) return fr;", "+    ", "+    return _findNextInOtherDocs(doc, start, len);", "+  }", "-  private FindResult _findNext(int start, int end) {", "-    int foundOffset = -1;", "-    FindResult tempFr = new FindResult(_doc, -1, false, false);      ", "-    try {", "-      boolean stillSearching = true;", "-      while(stillSearching) {", "-        foundOffset = -1;", "-        tempFr = new FindResult(_doc, -1, false, false);      ", "-        stillSearching = false;", "-//      Utilities.showDebug(\"\"+ _model.getODDForDocument(_doc).getStateAtCurrent());", "-        int docLen;", "-        String findWord = _findWord;", "-        // get the search space in the document", "-        String findSpace;", "-        _doc.acquireReadLock();", "-        try {", "-          docLen = _doc.getLength();", "-          findSpace = _doc.getText(start, end);", "-        }", "-        finally { _doc.releaseReadLock(); }", "-        if (!_matchCase) {", "-          findSpace = findSpace.toLowerCase();", "-          findWord = findWord.toLowerCase();", "-        // find the first occurrence of findWord", "-        foundOffset = !_searchBackwards ? findSpace.indexOf(findWord) : findSpace.lastIndexOf(findWord);", "-        if (foundOffset >= 0) {", "-          int locationToIgnore = foundOffset + start;", "-          _model.getODDForDocument(_doc).setCurrentLocation(locationToIgnore);", "-          if (_shouldIgnore(locationToIgnore, _doc)) {", "-            foundOffset += start;", "-            if (!_searchBackwards) {", "-              foundOffset += findWord.length();", "-              start = foundOffset;", "-              end = docLen-foundOffset;", "-              stillSearching = true;", "-              continue; ", "-              // return _findNext(foundOffset, docLen-foundOffset);", "-            }", "-            end = foundOffset;", "-            stillSearching = true;", "-            continue;", "-            // return _findNext(start, foundOffset); //searching backwards", "-          }       ", "-          // otherwise we have found it", "-//        _found = true;", "-          foundOffset += start;", "-          if (!_searchBackwards) foundOffset += findWord.length();", "-          _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc", "-        }", "-        else { // we haven't found it yet", "-          if (_searchAllDocuments) {", "-            AbstractDocumentInterface nextDocToSearch;", "-            ", "-            nextDocToSearch = ", "-              (!_searchBackwards ? _docIterator.getNextDocument(_doc) : _docIterator.getPrevDocument(_doc));", "-            ", "-            tempFr = _findNextInAllDocs(nextDocToSearch, 0, nextDocToSearch.getLength());", "-            foundOffset = tempFr.getFoundOffset();", "-          }", "-          else { ", "-            _checkAllDocsWrapped = false;", "-            _allDocsWrapped = false;", "-          }", "-          ", "-          if (foundOffset == -1) {   // we still haven't found it            ", "-            if (!_searchBackwards) foundOffset = _findWrapped(0, _current.getOffset() + (_findWord.length() - 1));", "-            else {", "-              int startBackOffset = _current.getOffset() - (_findWord.length() - 1);", "-              foundOffset = _findWrapped(startBackOffset, docLen - startBackOffset);", "-            }", "-          }", "-        }", "-        if (_checkAllDocsWrapped && tempFr.getDocument() == _firstDoc) {", "-          _allDocsWrapped = true;", "-          _checkAllDocsWrapped = false;", "-        }", "-      }        ", "-    }", "-    catch (BadLocationException e) { throw new UnexpectedException(e); }", "-    FindResult fr = new FindResult(tempFr.getDocument(), foundOffset, _wrapped, _allDocsWrapped);", "-    _wrapped = false;", "-    _allDocsWrapped = false;", "-    return fr;", "-  }"]}], "num": 19210}
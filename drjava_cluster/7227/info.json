{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62ca53b023a4626d287739da31cf9a33", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45642612b53377016fe3d76c2d7e2fa2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "74ef9fbe03efcd82eb19c1e26298c6b9ada091d1", "commitAfterChange": "2635960b836d3430a185539ff1211d21f9bd0bdd", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public OpenDefinitionsDocument openFiles(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "signatureAfterChange": "   public OpenDefinitionsDocument openFiles(FileOpenSelector com)     throws IOException, OperationCanceledException, AlreadyOpenException", "diff": ["-    OpenDefinitionsDocument retDoc = null;", "-", "+    return _openFiles(files);", "+    ", "+  }", "-", "-", "-      try {", "-        //always return last opened Doc", "-        retDoc = _openFile(files[i].getAbsoluteFile());", "-      catch (AlreadyOpenException aoe) {", "-        retDoc = aoe.getOpenDocument();", "-        //Remember the first AOE", "-        if (storedAOE == null) {", "-          storedAOE = aoe;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a88b9e18d6e19f1d3505e5bc71f31429", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpretResult.java", "commitBeforeChange": "1baaca56848b77e4ea889da1ec6855791456c263", "commitAfterChange": "ce42478b992adc6ef5f56e78e788484f10488ff4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     @SuppressWarnings(\"unchecked\")     public ExceptionResult(InterpreterException e)", "signatureAfterChange": "     @SuppressWarnings(\"unchecked\")     public ExceptionResult(InterpreterException e)", "diff": ["+    private final StackTraceElement[] _stackTrace;", "-        _e = (EvaluatorException)e;", "-        _msg = null;", "+        // for EvaluatorException, we want to keep the stack trace", "+        _msg = e.getMessage();", "+        _stackTrace = e.getStackTrace();", "-        // because they cannot be unmarshalled (not serializable)", "-        _e = null;", "+        _stackTrace = null;"]}], "num": 7227}
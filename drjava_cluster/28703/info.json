{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6b1e9f0d6c99dc77d806557390b3fbc", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eb57b8a2a20486814018075ac9ecec7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private void compileConstructor(ConstructorDeclaration ast, Type extendsT)", "signatureAfterChange": "      private void compileConstructor(ConstructorDeclaration ast, Type extendsT)", "diff": ["-    Type outerT = SymbolUtil.thisType(outerC);", "+    Type outerT = (outerC == null) ? null : SymbolUtil.thisType(outerC);", "-    MethodVisitor mv = _classWriter.visitMethod(ast.getAccessFlags(), \"<init>\", methodDescriptor,", "+    // Promote default access to protected -- a subclass may logically appear in the same", "+    // package but, due to implementation constraints, be loaded by a different class loader.", "+    // In that situation, default access isn't permitted at run time.", "+    int access = defaultToProtectedAccess(ast.getAccessFlags());", "+    MethodVisitor mv = _classWriter.visitMethod(access, \"<init>\", methodDescriptor,", "-          emitUnbox(mv, paramT, stack);", "+          emitConvert(mv, paramT, stack);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9437fb7d0317e1170799735f92ed7a9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "66044dc35b8be11319705314c96973e09057e03e", "commitAfterChange": "a5ae5bcbd4d40718a2d40d7b0f66e985886102c4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         private void compileClass(Node ast)", "signatureAfterChange": "         private void compileClass(Node ast)", "diff": ["+    // Promote default access to public -- a reference may logically appear in the same", "+    // package but, due to implementation constraints, be loaded by a different class loader.", "+    // In that situation, default access isn't permitted at run time.", "+    accessFlags = defaultToPublicAccess(accessFlags);", "+    "]}], "num": 28703}
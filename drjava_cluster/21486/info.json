{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e2f68171dc85baa9fce2fa9579307c4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015cc429db03071824c796dc88a0e14b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 401, "methodNumberAfterChange": 410, "signatureBeforeChange": "          public void junitTestStarted(final String name)", "signatureAfterChange": "          public void junitTestStarted(final String name)", "diff": ["-      _junitErrorPanel.getErrorListPane().testStarted(name); // this does nothing!", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { _junitErrorPanel.getErrorListPane().testStarted(name); /* this does nothing! */ }", "+      });          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04ce53246f47d1987d1aa5b8a5ca55f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void testStarted(final String testName)", "signatureAfterChange": "   public void testStarted(final String testName)", "diff": ["-  public void testStarted(final String testName) { _notifier.junitTestStarted(testName); }", "+  public void testStarted(final String testName) { ", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.junitTestStarted(testName); } });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07cd450696f5f91e0f56231755b1099d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/EventHandlerThread.java", "commitBeforeChange": "cc814c34f96bfde67f8ae465727b510fa3ed34c9", "commitAfterChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private void _handleThreadStartEvent(ThreadStartEvent e)", "signatureAfterChange": "   private void _handleThreadStartEvent(ThreadStartEvent e)", "diff": ["-//    synchronized(_debugger) { ", "-      _debugger.threadStarted(); ", "-//    } ", "+    // To ensure non-interference, run in Event thread", "+    SwingUtilities.invokeLater(new Runnable() {", "+      public void run() { _debugger.threadStarted(); }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09fe9c7a3968a4b5b25bb3efb506db97", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/EventHandlerThread.java", "commitBeforeChange": "27f4730bb628f4f21b5ace9b8592e93a615017f8", "commitAfterChange": "08f616afaebe02cc02ba5da4da4990852caead81", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _cleanUp(Event e) throws DebugException", "signatureAfterChange": "   private void _cleanUp(Event e) throws DebugException", "diff": ["-    synchronized(_debugger) {", "-      _connected = false;", "-      if (_debugger.isReady()) {", "-        // caused crash if \"Run Document's Main Method\" was invoked while debugging", "-        // if (_debugger.hasSuspendedThreads()) _debugger.currThreadDied();", "-        _debugger.shutdown();", "+//    synchronized(_debugger) {", "+    SwingUtilities.invokeLater(new Runnable() {", "+      public void run() {", "+        _connected = false;", "+        if (_debugger.isReady()) {", "+          // caused crash if \"Run Document's Main Method\" was invoked while debugging", "+          // if (_debugger.hasSuspendedThreads()) _debugger.currThreadDied();", "+          _debugger.shutdown();", "+        }", "+//    }", "-    }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12e080dcc79dacbf83ddc443b1a2c221", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 20, "signatureBeforeChange": "   protected void _notifyInterpreterResetFailed(final Throwable t)", "signatureAfterChange": "   protected void _notifyInterpreterResetFailed(final Throwable t)", "diff": ["-    _notifier.interpreterResetFailed(t);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.interpreterResetFailed(t); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181b25ce548e2d4e1808ab7407e2afa8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void testSuiteEnded(JUnitError[] errors)", "signatureAfterChange": "   public void testSuiteEnded(final JUnitError[] errors)", "diff": ["-  public void testSuiteEnded(JUnitError[] errors) {", "+  public void testSuiteEnded(final JUnitError[] errors) {", "-    ", "-    List<File> files = new ArrayList<File>();", "-    for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }", "+    Utilities.invokeLater(new Runnable() { public void run() { ", "+      List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()) { files.add(odd.getRawFile()); }", "-    for(JUnitError e: errors){", "-      try {", "-        e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "-      } catch(Exception ex) { DrJavaErrorHandler.record(ex); }", "-      File f = e.file();", "-      if ((f != null) && (DrJavaFileUtils.isLLFile(f))) {", "-        String dn = DrJavaFileUtils.getJavaForLLFile(f.getName());", "-        StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "-        ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "-        e.setLineNumber(ste.getLineNumber());", "+      for(JUnitError e: errors){", "+        try {", "+          e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "+        } catch(Exception ex) { DrJavaErrorHandler.record(ex); }", "+        File f = e.file();", "+        if ((f != null) && (DrJavaFileUtils.isLLFile(f))) {", "+          String dn = DrJavaFileUtils.getJavaForLLFile(f.getName());", "+          StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "+          ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "+          e.setLineNumber(ste.getLineNumber());", "+        }", "-    }", "-    _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "-    _notifyJUnitEnded();", "-    _testInProgress = false;", "+      _junitErrorModel = new JUnitErrorModel(errors, _model, true);", "+      _notifyJUnitEnded();", "+      _testInProgress = false;", "+    }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c83a74a93852a861fc7c4118624caef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public void testEnded(final String testName, final boolean wasSuccessful, final boolean causedError)", "signatureAfterChange": "   public void testEnded(final String testName, final boolean wasSuccessful, final boolean causedError)", "diff": ["-    _notifier.junitTestEnded(testName, wasSuccessful, causedError);", "+    EventQueue.invokeLater(new Runnable() { ", "+      public void run() { _notifier.junitTestEnded(testName, wasSuccessful, causedError); }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e830c949cdd9f07cb7f8bf89e5008d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "   protected void _notifySyntaxErrorOccurred(final int offset, final int length)", "signatureAfterChange": "   protected void _notifySyntaxErrorOccurred(final int offset, final int length)", "diff": ["-    _notifier.interactionErrorOccurred(offset,length);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.interactionErrorOccurred(offset,length); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "294174c3132884f322cd91d9c4cc755c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void caretUpdate(final CaretEvent evt)", "signatureAfterChange": "   public void caretUpdate(final CaretEvent evt)", "diff": ["-    if (_frame.getSelectedErrorPanel() == null) return;", "-    updateHighlight(evt.getDot()); // invokeLater unnecessary here; this method runs in the event thread!", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        if (_frame.getSelectedErrorPanel() == null) return;", "+        updateHighlight(evt.getDot());", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e2b31eb070a42f1468f9f20f140973", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void _notifyInterpreterChanged(final boolean inProgress)", "signatureAfterChange": "   protected void _notifyInterpreterChanged(final boolean inProgress)", "diff": ["-    _notifier.interpreterChanged(inProgress);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.interpreterChanged(inProgress); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34b3d8df218991c2a9fe5a60b46cd7dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewVersionPopup.java", "commitBeforeChange": "c81f6b5d4f9c5e82bbc1d256cff92f2dc0220bb1", "commitAfterChange": "96de3271b3fc642f6fc2040de3586eac4ebac810", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected void updateAction()", "signatureAfterChange": "      protected void updateAction()", "diff": ["-        catch(IOException e) { abortUpdate(\"Error installing update:\\n\"+e.getMessage()); return; }", "+        catch(final IOException e) {", "+          EventQueue.invokeLater(new Runnable() {", "+            public void run() {", "+              abortUpdate(\"Error installing update:\\n\"+e.getMessage()); return; ", "+            }", "+          });", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e2bbf9dd7b31d52d968bcc215ac3313", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 18, "signatureBeforeChange": "   protected void _notifyInterpreterExited(final int status)", "signatureAfterChange": "   protected void _notifyInterpreterExited(final int status)", "diff": ["-    _notifier.interpreterExited(status);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.interpreterExited(status); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e2f347b1f74f1d2ee83f5508fd5a95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": "      public void changedUpdate(DocumentEvent e)", "signatureAfterChange": "      public void changedUpdate(DocumentEvent e)", "diff": ["-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() { ", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { ", "-//        }", "-//      });", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a6e0eaa4fdb70e571531f7afb5dff73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public void testSuiteStarted(final int numTests)", "signatureAfterChange": "   public void testSuiteStarted(final int numTests)", "diff": ["-  public void testSuiteStarted(final int numTests) { _notifier.junitSuiteStarted(numTests); }", "+  public void testSuiteStarted(final int numTests) { ", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.junitSuiteStarted(numTests); } });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b3fcb313755997c7c5ce4b77984868a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public void interpreterResetting()", "signatureAfterChange": "   public void interpreterResetting()", "diff": ["-      _document.insertBeforeLastPrompt(\" Resetting Interactions ...\\n\", InteractionsDocument.ERROR_STYLE);", "-      _document.setInProgress(true);", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          _document.insertBeforeLastPrompt(\" Resetting Interactions ...\\n\", InteractionsDocument.ERROR_STYLE);", "+          _document.setInProgress(true);", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd47a3743ffb67d07b8f7f42f0df85c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "      public void removeUpdate(DocumentEvent e)", "signatureAfterChange": "      public void removeUpdate(DocumentEvent e)", "diff": ["-      removeListener();", "-      _pim.setMask(_textField.getText());", "-      updateExtensionLabel();", "-      updateList();", "-      addListener();", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { ", "+          removeListener();", "+          _pim.setMask(_textField.getText());", "+          updateExtensionLabel();", "+          updateList();", "+          addListener();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5321535b045490b906ff5e8c373af4c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "      public void removeUpdate(DocumentEvent e)", "signatureAfterChange": "      public void removeUpdate(DocumentEvent e)", "diff": ["+      Utilities.invokeLater(new Runnable() {", "+        public void run() { ", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "555767df3ab484935f5e2a78c2d32e91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public void systemErrPrint(String s)", "signatureAfterChange": "   public void systemErrPrint(final String s)", "diff": ["-  /** Prints System.err to the DrJava console. */", "-  public void systemErrPrint(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+  /** Prints System.err to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemErrPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5805f19da912a2e3360a28d79dc212a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 237, "signatureBeforeChange": "   public void systemInEcho(String s)", "signatureAfterChange": "   public void systemInEcho(final String s)", "diff": ["-  /** Prints the given string to the DrJava console as an echo of System.in */", "-  public void systemInEcho(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    */", "+  public void systemInEcho(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598d39d1988cd9a8a2f5892ec04054cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": "   public void systemOutPrint(String s)", "signatureAfterChange": "   public void systemOutPrint(final String s)", "diff": ["-  /** Prints System.out to the DrJava console. */", "-  public void systemOutPrint(String s) {_docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+  /** Prints System.out to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemOutPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f0032677ba1bfc6af5d3c84fb503ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6dc623f6cf84dd216f6949b3ebdd52b19c8912b4", "commitAfterChange": "3bfda0ffd8a22eda2f2daab913b510305e1ef801", "methodNumberBeforeChange": 780, "methodNumberAfterChange": 780, "signatureBeforeChange": "   public void handleRemoteOpenFile(final File f, final int lineNo)", "signatureAfterChange": "   public void handleRemoteOpenFile(final File f, final int lineNo)", "diff": ["-      FileOpenSelector openSelector = new FileOpenSelector() {", "+      final FileOpenSelector openSelector = new FileOpenSelector() {", "-        openProject(openSelector);", "+        Utilities.invokeLater(new Runnable() { ", "+          public void run() {", "+            openProject(openSelector);", "+          }", "+        });", "-        open(openSelector);", "-        if (lineNo>=0) {", "-          final int l = lineNo;", "-          Utilities.invokeLater(new Runnable() { ", "-            public void run() { _jumpToLine(l); }", "-          });", "-        }", "+        final int l = lineNo;", "+        Utilities.invokeLater(new Runnable() { ", "+          public void run() {", "+            open(openSelector);", "+            if (l>=0) {                ", "+              _jumpToLine(l);", "+            }", "+          }", "+        });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc277a5823cef789f75d03a2c3004bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 552, "methodNumberAfterChange": 552, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-    // The following method only runs in the event thread because it is called from DefinitionsPane", "+    // The following method does not necessarity run in the event thread.  Yuck!", "-//      DefinitionsDocument doc = _model.getActiveDocument().getDocument();", "-      int offset = ce.getDot();", "-      try { ", "-        if (offset == _offset + 1 && _currentDefDoc.getText(_offset, 1).charAt(0) != '\\n') {", "-          _col += 1;", "-          _offset += 1;", "+      ", "+      Utilities.invokeLater(new Runnable() { ", "+        public void run() {", "+", "+          int offset = ce.getDot();", "+          try { ", "+            if (offset == _offset + 1 && _currentDefDoc.getText(_offset, 1).charAt(0) != '\\n') {", "+              _col += 1;", "+              _offset += 1;", "+            }", "+            else {", "+              Element root = _currentDefDoc.getDefaultRootElement();", "+              int line = root.getElementIndex(offset); ", "+              _line = line + 1;     // line numbers are 1-based", "+              _col = offset - root.getElement(line).getStartOffset();", "+            }", "+          }", "+          catch(BadLocationException e) { /* do nothing; should never happen */ }", "+          finally { ", "+            _offset = offset;", "+            updateLocation(_line, _col);", "+          }", "-        else {", "-          Element root = _currentDefDoc.getDefaultRootElement();", "-          int line = root.getElementIndex(offset); ", "-          _line = line + 1;     // line numbers are 1-based", "-          _col = offset - root.getElement(line).getStartOffset();", "-        }", "-      }", "-      catch(BadLocationException e) { /* do nothing; should never happen */ }", "-      finally { ", "-        _offset = offset;", "-        updateLocation(_line, _col);", "-      }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e81a3ab63b3749a511981bc0bc63b0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/Option.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   void notifyListeners(Configuration config, T val)", "signatureAfterChange": "   void notifyListeners(Configuration config, T val)", "diff": ["-   */", "+  /** Sends an OptionEvent to all OptionListeners who have registered on this Option. */", "-    Vector<OptionListener<T>> v = listeners.get(config);", "-    if (v==null) return; // no listeners", "-    OptionEvent<T> e = new OptionEvent<T>(this,val);", "-    int size = v.size();", "-    for (int i = 0; i < size; i++) {", "-      v.get(i).optionChanged(e);", "-    }", "+    final Vector<OptionListener<T>> v = listeners.get(config);", "+    if (v == null) return; // no listeners", "+    final OptionEvent<T> e = new OptionEvent<T>(this,val);", "+    final int size = v.size();", "+    Utilities.invokeLater(new Runnable() { ", "+      public void run() {", "+        for (int i = 0; i < size; i++) v.get(i).optionChanged(e);", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "662d28a12a9ffce273e7cf1c2d136eb0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 440, "methodNumberAfterChange": 454, "signatureBeforeChange": "   public void showTab(Component c)", "signatureAfterChange": "   public void showTab(final Component c)", "diff": ["-  public void showTab(Component c) {", "-    int numVisible = 0;", "+  public void showTab(final Component c) {", "-    // This retarded method doesn't work for our two always-on tabs,", "-    // so here's a temporary kludge.", "-    if (c == _interactionsPane) _tabbedPane.setSelectedIndex(0);", "-    else if (c == _consolePane) _tabbedPane.setSelectedIndex(1);", "-    else {", "-      for (TabbedPanel tp: _tabs) {", "-        if (tp == c) {", "-          // 2 right now is a magic number for the number of tabs always visible", "-          // interactions & console", "-          if (! tp.isDisplayed()) {", "-            _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "-            tp.setDisplayed(true);", "+    // This retarded method doesn't work for our two always-on tabs, so here's a temporary kludge.", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {", "+        int numVisible = 0;", "+        if (c == _interactionsPane) _tabbedPane.setSelectedIndex(0);", "+        else if (c == _consolePane) _tabbedPane.setSelectedIndex(1);", "+        else {", "+          for (TabbedPanel tp: _tabs) {", "+            if (tp == c) {", "+              // 2 right now is a magic number for the number of tabs always visible", "+              // interactions & console", "+              if (! tp.isDisplayed()) {", "+                _tabbedPane.insertTab(tp.getName(), null, tp, null, numVisible + 2);", "+                tp.setDisplayed(true);", "+              }", "+              _tabbedPane.setSelectedIndex(numVisible + 2);", "+              ", "+              c.requestFocusInWindow();", "+              return;", "+            }", "+            if (tp.isDisplayed()) numVisible++;", "-          _tabbedPane.setSelectedIndex(numVisible + 2);", "-          ", "-          c.requestFocusInWindow();", "-          return;", "-        if (tp.isDisplayed()) numVisible++;", "-    }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de48a159b1677c56fcd350c4cd15180", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/plugins/eclipse/src/edu/rice/cs/drjava/plugins/eclipse/views/InteractionsView.java", "commitBeforeChange": "d2486bb242e4127e9ef18191ee729a7dd368e35a", "commitAfterChange": "c7350c43cf88b83fadf7abd46778d953858e61df", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void setEditable(boolean editable)", "signatureAfterChange": "   public void setEditable(final boolean editable)", "diff": ["-  public void setEditable(boolean editable) {", "-    _styledText.setEditable(editable);", "+  public void setEditable(final boolean editable) {", "+    _styledText.getDisplay().syncExec(new Runnable() {", "+      public void run() {", "+        _styledText.setEditable(editable);", "+      }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e55086eda36ec18177d57fef36f00e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private void junitOpenDefDocs(final List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void junitOpenDefDocs(final List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-    if (_testInProgress) return; ", "+    if (_testInProgress) return;", "-            _rawJUnitOpenDefDocs(lod, allTests);", "+            SwingUtilities.invokeLater(new Runnable() {  // defer running this code; would prefer to waitForInterpreter", "+              public void run() { _rawJUnitOpenDefDocs(lod, allTests); }", "+            });", "+      _testInProgress = true;", "+      _testInProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81d00aee20555bbec2aabdc7731e36ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 61, "signatureBeforeChange": "   synchronized void openAndScroll(final OpenDefinitionsDocument doc, final int line,                                   String className, final boolean shouldHighlight)", "signatureAfterChange": "   synchronized void openAndScroll(final OpenDefinitionsDocument doc, final int line, String className, final boolean shouldHighlight)", "diff": ["-  synchronized void openAndScroll(final OpenDefinitionsDocument doc, final int line,", "-                                  String className, final boolean shouldHighlight) {", "+  synchronized void openAndScroll(final OpenDefinitionsDocument doc, final int line, String className, final boolean shouldHighlight) {", "-    if (doc != null) {", "+    if (doc != null) { ", "-      _notifier.threadLocationUpdated(doc, line, shouldHighlight);", "+      Utilities.invokeLater(new Runnable() { public void run() { _notifier.threadLocationUpdated(doc, line, shouldHighlight); } });", "-    else {", "-      printMessage(\"  (Source for \" + className + \" not found.)\");", "-    }", "+    else printMessage(\"  (Source for \" + className + \" not found.)\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85290dadb3a84b491bce47afbd90c2b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 387, "methodNumberAfterChange": 394, "signatureBeforeChange": "          public void interactionErrorOccurred(int offset, int length)", "signatureAfterChange": "          public void interactionErrorOccurred(final int offset, final int length)", "diff": ["-    public void interactionErrorOccurred(int offset, int length) {", "-      _interactionsPane.highlightError(offset, length);", "+    public void interactionErrorOccurred(final int offset, final int length) {", "+      Utilities.invokeLater(new Runnable() { public void run() { _interactionsPane.highlightError(offset, length); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c0c46bde570f963f4d8f3c83810992", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "   protected void _notifySyntaxErrorOccurred(final int offset, final int length)", "signatureAfterChange": "   protected void _notifySyntaxErrorOccurred(final int offset, final int length)", "diff": ["-   */", "+  /** Notifies listeners that an interaction contained a syntax error. */", "-    _notifier.interactionErrorOccurred(offset, length);", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.interactionErrorOccurred(offset, length); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89caac31417885bdf7516493fcb8bbb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "1e64dff50a32582d182c950c323629608db6f054", "commitAfterChange": "d999f0af23b00e87ee091cf6b7f8d16576621e4d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(final DocumentEvent e)", "diff": ["-    public void insertUpdate(DocumentEvent e) {", "-      ConsoleDocument doc = getConsoleDoc();", "-      int caretPos = _pane.getCaretPosition();", "-      int promptPos = doc.getPromptPos();", "-      int length = doc.getDocLength();", "-", "-      // Figure out where the prompt was before the update", "-      int prevPromptPos = promptPos;", "-      if (e.getOffset() < promptPos) {", "-        // Insert happened before prompt,", "-        //  so previous position was further back", "-        prevPromptPos = promptPos - e.getLength();", "-      }", "-", "-      if (!doc.hasPrompt()) {", "-        // Scroll to the end of the document, since output has been", "-        // inserted after the prompt.", "-        moveToEnd();", "-      }", "-      // (Be careful not to move caret during a reset, when the", "-      //  prompt pos is temporarily far greater than the length.)", "-      else if (promptPos <= length) {", "-        if (caretPos < prevPromptPos) {", "-          // Caret has fallen behind prompt, so make it catch up so", "-          //  the new input is visible.", "-          moveToPrompt();", "-        }", "-        else {", "-          // Caret was on or after prompt, so move it right by the size", "-          //  of the insert.", "-          int size = promptPos - prevPromptPos;", "-          if (size > 0) {", "-            moveTo(caretPos + size);", "+    public void insertUpdate(final DocumentEvent e) {", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          ConsoleDocument doc = getConsoleDoc();", "+          int caretPos = _pane.getCaretPosition();", "+          int promptPos = doc.getPromptPos();", "+          int length = doc.getDocLength();", "+          ", "+          // Figure out where the prompt was before the update", "+          int prevPromptPos = promptPos;", "+          if (e.getOffset() < promptPos) {", "+            // Insert happened before prompt,", "+            //  so previous position was further back", "+            prevPromptPos = promptPos - e.getLength();", "+          }", "+          ", "+          if (!doc.hasPrompt()) {", "+            // Scroll to the end of the document, since output has been", "+            // inserted after the prompt.", "+            moveToEnd();", "+          }", "+          // (Be careful not to move caret during a reset, when the", "+          //  prompt pos is temporarily far greater than the length.)", "+          else if (promptPos <= length) {", "+            if (caretPos < prevPromptPos) {", "+              // Caret has fallen behind prompt, so make it catch up so", "+              //  the new input is visible.", "+              moveToPrompt();", "+            }", "+            else {", "+              // Caret was on or after prompt, so move it right by the size", "+              //  of the insert.", "+              int size = promptPos - prevPromptPos;", "+              if (size > 0)  moveTo(caretPos + size);", "+            }", "-      }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a6ed94cbf502175efd49e423578e1b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DefaultInteractionsModel.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected void _interpreterResetFailed(Throwable t)", "signatureAfterChange": "   protected void _interpreterResetFailed(final Throwable t)", "diff": ["-  protected void _interpreterResetFailed(Throwable t) {", "-    _document.insertBeforeLastPrompt(\"Reset Failed! See the console tab for details.\" + StringOps.NEWLINE,", "-                                     InteractionsDocument.ERROR_STYLE);", "-    // Print the exception to the console", "-    _model.systemErrPrint(StringOps.getStackTrace(t));", "+  protected void _interpreterResetFailed(final Throwable t) {", "+    Utilities.invokeLater(new Runnable() { ", "+      public void run() {", "+        _document.insertBeforeLastPrompt(\"Reset Failed! See the console tab for details.\" + StringOps.NEWLINE,", "+                                         InteractionsDocument.ERROR_STYLE);", "+         // Print the exception to the console", "+        _model.systemErrPrint(StringOps.getStackTrace(t));  // redundantly moves code to event thread", "+      }", "+    });", "+   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bc0b99e997674c26c9d566600422856", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 439, "methodNumberAfterChange": 452, "signatureBeforeChange": "      public void removeTab(Component c)", "signatureAfterChange": "      public void removeTab(final Component c)", "diff": ["-  public void removeTab(Component c) {", "-    _tabbedPane.remove(c);", "-    ((TabbedPanel)c).setDisplayed(false);", "-    _tabbedPane.setSelectedIndex(0);", "-    _currentDefPane.requestFocusInWindow();", "+  public void removeTab(final Component c) {", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() {  ", "+        _tabbedPane.remove(c);", "+        ((TabbedPanel)c).setDisplayed(false);", "+        _tabbedPane.setSelectedIndex(0);", "+        _currentDefPane.requestFocusInWindow();", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94851b23bb74409e6c57248b5277b64a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 381, "methodNumberAfterChange": 384, "signatureBeforeChange": "          public void fileReverted(OpenDefinitionsDocument doc)", "signatureAfterChange": "          public void fileReverted(OpenDefinitionsDocument doc)", "diff": ["-      updateFileTitle();", "-      _saveAction.setEnabled(false);", "-      _currentDefPane.resetUndo();", "-      _currentDefPane.hasWarnedAboutModified(false);", "-      _currentDefPane.setPositionAndScroll(0);", "-      if (inDebugMode()) _updateDebugStatus();", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          updateFileTitle();", "+          _saveAction.setEnabled(false);", "+          _currentDefPane.resetUndo();", "+          _currentDefPane.hasWarnedAboutModified(false);", "+          _currentDefPane.setPositionAndScroll(0);", "+          if (inDebugMode()) _updateDebugStatus();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94b0a75f0d80ffe7bc988ba02d4a6581", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "      public void removeUpdate(DocumentEvent e)", "signatureAfterChange": "      public void removeUpdate(DocumentEvent e)", "diff": ["-//      Utilities.invokeLater(new Runnable() {", "-//        public void run() { ", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { ", "-//        }", "-//      });", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9aad37626c4003f480cb160d607fa562", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorHandler.java", "commitBeforeChange": "f8e4975fc86eccfc2e1e190be55c64d1a287745a", "commitAfterChange": "1b5ef0eebd43a246e897081eb432b396efa2d20e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static void record(Throwable thrown)", "signatureAfterChange": "   public static void record(final Throwable thrown)", "diff": ["-  public static void record(Throwable thrown) {", "-    _errors.add(thrown);", "-    if (_errorsButton != null) {", "-      _errorsButton.setVisible(true);", "-    }", "-    if (_errors.size() == 1 && DrJava.getConfig().getSetting(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED).booleanValue()) {", "-      DrJavaErrorPopup popup = new DrJavaErrorPopup(DrJavaErrorWindow.getFrame(), thrown);", "-      MainFrame.setPopupLoc(popup, popup.getOwner());", "-      popup.setVisible(true);", "-    }", "+  public static void record(final Throwable thrown) {", "+    SwingUtil.invokeLater(new Runnable() {", "+      public void run() {", "+        _errors.add(thrown);", "+        if (_errorsButton != null) {", "+          _errorsButton.setVisible(true);", "+        }", "+        if (_errors.size() == 1 && DrJava.getConfig().getSetting(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED).booleanValue()) {", "+          DrJavaErrorPopup popup = new DrJavaErrorPopup(DrJavaErrorWindow.getFrame(), thrown);", "+          MainFrame.setPopupLoc(popup, popup.getOwner());", "+          popup.setVisible(true);", "+        }", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3f0ea76c105ff92f846b942e4a1b31c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 396, "signatureBeforeChange": "     public void interpreterChanged(boolean inProgress)", "signatureAfterChange": "     public void interpreterChanged(final boolean inProgress)", "diff": ["-    public void interpreterChanged(boolean inProgress) {", "-      _runAction.setEnabled(!inProgress);", "-      if (inProgress) _disableInteractionsPane();", "-      else _enableInteractionsPane();", "+    public void interpreterChanged(final boolean inProgress) {", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+          _runAction.setEnabled(! inProgress);", "+          if (inProgress) _disableInteractionsPane();", "+          else _enableInteractionsPane();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8fc52a9128c53e9149c752473ea79dd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "cbb9f04386fdbcd6c82a6f2a5ae6b635359499fb", "commitAfterChange": "e77b9389e0feb3169a20412f8892f630db108f0e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 38, "signatureBeforeChange": "   public void classFileError(ClassFileError e)", "signatureAfterChange": "   public void classFileError(final ClassFileError e)", "diff": ["-  public void classFileError(ClassFileError e) { _notifier.classFileError(e); }", "+  public void classFileError(final ClassFileError e) { ", "+    Utilities.invokeLater(new Runnable() { public void run() {_notifier.classFileError(e); } });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a910fd8306971c4077bda58c4531cea8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "efcb480f108037d7c0b99dc2961b03df4f014419", "commitAfterChange": "7f24fc05ac677df06d9826a05db0243e50dd0b59", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "      public void changedUpdate(DocumentEvent e)", "signatureAfterChange": "      public void changedUpdate(DocumentEvent e)", "diff": ["+      Utilities.invokeLater(new Runnable() {", "+        public void run() {", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9f34d98f8a1c73f12e2ece082b35a34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "6693d9c4c939c2a7891f553e531587735bbb981b", "commitAfterChange": "b80bef2bb88aa4ee0628e83d51ed337e5c1af06e", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "      public void changedUpdate(DocumentEvent e)", "signatureAfterChange": "      public void changedUpdate(DocumentEvent e)", "diff": ["-      removeListener();", "-      _pim.setMask(_textField.getText());", "-      updateExtensionLabel();", "-      updateList();", "-      addListener();", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { ", "+          removeListener();", "+          _pim.setMask(_textField.getText());", "+          updateExtensionLabel();", "+          updateList();", "+          addListener();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b331cda2b3a1f0b80f1c25afbf896b45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void _indentLine(Indenter.IndentReason reason)", "signatureAfterChange": "   private void safeIndentLine(final Indenter.IndentReason reason)", "diff": ["-  /** Convenience method that wraps _doc._indentLine calls in a write lock. */", "-  private void _indentLine(Indenter.IndentReason reason) {", "-//    _doc.acquireWriteLock();", "-//    try { ", "-    _doc._indentLine(reason); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+  /** Convenience method that performs _doc._indentLine in the event thread. */", "+  private void safeIndentLine(final Indenter.IndentReason reason) {", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _doc._indentLine(reason); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4e1ddfabce1d617ed09e5341ade1448", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-      if (pos >= 0) {", "-        _selectFoundItem();", "-        ", "-        _replaceAction.setEnabled(true);", "-        _replaceFindNextAction.setEnabled(true);", "-        _replaceFindPreviousAction.setEnabled(true);", "-        _machine.setLastFindWord();", "+      if (pos >= 0) {  // defer executing this code until after active document switch (if any) is complete", "+        SwingUtilities.invokeLater(new Runnable() {", "+          public void run() {", "+            _selectFoundItem();", "+            _replaceAction.setEnabled(true);", "+            _replaceFindNextAction.setEnabled(true);", "+            _replaceFindPreviousAction.setEnabled(true);", "+            _machine.setLastFindWord();", "+          }});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a9391904d09708b67f7534d51b5641", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 237, "signatureBeforeChange": "   public void systemInEcho(String s)", "signatureAfterChange": "   public void systemInEcho(final String s)", "diff": ["-  /** Prints the given string to the DrJava console as an echo of System.in */", "-  public void systemInEcho(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    */", "+  public void systemInEcho(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_IN_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf550e071d6f3916fb6a028015bc7546", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 233, "methodNumberAfterChange": 233, "signatureBeforeChange": "   public void systemOutPrint(String s)", "signatureAfterChange": "   public void systemOutPrint(final String s)", "diff": ["-  /** Prints System.out to the DrJava console. */", "-  public void systemOutPrint(String s) {_docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+  /** Prints System.out to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemOutPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_OUT_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d0099bff6a9a0ee10d5e652bf4c26b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-      throw new UnexpectedException(e); ", "+      throw new UnexpectedException(e); // triggers _junitInterrupted which runs hourglassOff", "-//    finally { ", "-//      new ScrollableDialog(null, \"junit setup loop terminated\", classNames.toString(), \"\").show();", "-//    }", "-      try {", "-        /** Run the junit test suite that has already been set up on the slave JVM */", "-        _notifier.junitStarted(); // notify listeners that JUnit testing has finally started!", "-        //          new ScrollableDialog(null, \"junitStarted executed in DefaultJunitModel\", \"\", \"\").show();", "+     try {  /** Run the junit test suite that has already been set up on the slave JVM */", "+        _testInProgress = true;", "+        ", "+        // notify listeners that JUnit testing has finally started!", "+        Utilities.invokeLater(new Runnable() { public void run() { _notifier.junitStarted(); } });", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc179f4c7b463d954ed874407b31f53e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/predictive/PredictiveInputFrame.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "     public void insertUpdate(DocumentEvent e)", "signatureAfterChange": "     public void insertUpdate(DocumentEvent e)", "diff": ["-      removeListener();", "-      _pim.setMask(_textField.getText());", "-      updateExtensionLabel();", "-      updateList();", "-      addListener();", "+      Utilities.invokeLater(new Runnable() {", "+        public void run() { ", "+          removeListener();", "+          _pim.setMask(_textField.getText());", "+          updateExtensionLabel();", "+          updateList();", "+          addListener();", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddb84da753e9bd67b9fe7b33a3d3efc4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 373, "methodNumberAfterChange": 374, "signatureBeforeChange": "          public void newFileCreated(OpenDefinitionsDocument doc)", "signatureAfterChange": "          public void newFileCreated(final OpenDefinitionsDocument doc)", "diff": ["-    public void newFileCreated(OpenDefinitionsDocument doc) {", "-      _createDefScrollPane(doc);", "+    public void newFileCreated(final OpenDefinitionsDocument doc) {", "+      Utilities.invokeLater(new Runnable() { public void run() { _createDefScrollPane(doc); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df47f2cdfd498ed2a52be1427ce78e73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentTest.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void indentLines(int startSel, int endSel)", "signatureAfterChange": "   private void safeIndentLines(final int startSel, final int endSel)", "diff": ["-  /** Convenience method that wraps _doc._indentLines calls in a write lock. */", "-  private void indentLines(int startSel, int endSel) {", "-//    _doc.acquireWriteLock();", "-//    try { ", "-      _doc.indentLines(startSel, endSel); ", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+  /** Convenience method that performs _doc._indentLines in the event thread. */", "+  private void safeIndentLines(final int startSel, final int endSel) {", "+    Utilities.invokeAndWait(new Runnable() { public void run() { _doc.indentLines(startSel, endSel); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfdcfc84b2294c6a8c5ed59a8e32775c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 234, "methodNumberAfterChange": 235, "signatureBeforeChange": "   public void systemErrPrint(String s)", "signatureAfterChange": "   public void systemErrPrint(final String s)", "diff": ["-  /** Prints System.err to the DrJava console. */", "-  public void systemErrPrint(String s) { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+  /** Prints System.err to the DrJava console.  This method can safely be run outside the event thread. */", "+  public void systemErrPrint(final String s) { ", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { _docAppend(_consoleDoc, s, ConsoleDocument.SYSTEM_ERR_STYLE); }", "+    });", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3531e039a3e8ada08207a5fddfdc9f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "   private void junitOpenDefDocs(final List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void junitOpenDefDocs(final List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-    if (_testInProgress) return; ", "+    if (_testInProgress) return;", "-            _rawJUnitOpenDefDocs(lod, allTests);", "+            SwingUtilities.invokeLater(new Runnable() {  // defer running this code; would prefer to waitForInterpreter", "+              public void run() { _rawJUnitOpenDefDocs(lod, allTests); }", "+            });", "+      _testInProgress = true;", "+      _testInProgress = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5aa27c8e450a1f2c4ea8efc80072a13", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "6e00bd0fe78b22f9b84f30182d050c16081947ef", "commitAfterChange": "d6801eea8d321f3e0015cdd20a1cba75837384cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testDebugSourcepath() throws Exception", "signatureAfterChange": "   public void testDebugSourcepath() throws Exception", "diff": ["-    StepTestListener debugListener = new StepTestListener();", "+    final StepTestListener debugListener = new StepTestListener();", "-    OpenDefinitionsDocument doc = _startupDebugger(\"DrJavaDebugClass.java\", DEBUG_CLASS);", "-    Vector<File> path = new Vector<File>();", "+    final OpenDefinitionsDocument doc = _startupDebugger(\"DrJavaDebugClass.java\", DEBUG_CLASS);", "+    final Vector<File> path = new Vector<File>();", "-      DrJava.getConfig().setSetting(OptionConstants.DEBUG_SOURCEPATH, path);", "+      Utilities.invokeAndWait(new Runnable() { ", "+        public void run() { ", "+          DrJava.getConfig().setSetting(OptionConstants.DEBUG_SOURCEPATH, path);", "+        }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec5ba17a3f997cfe1ead8539d31327fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   private void notifyRegistrationListeners(OpenDefinitionsDocument odd, DocManager man)", "signatureAfterChange": "   private void notifyRegistrationListeners(final OpenDefinitionsDocument odd, final DocManager man)", "diff": ["-  private void notifyRegistrationListeners(OpenDefinitionsDocument odd, DocManager man) {", "-    for (RegistrationListener list : _regListeners) { list.registered(odd,man); }", "+  private void notifyRegistrationListeners(final OpenDefinitionsDocument odd, final DocManager man) {", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { for (RegistrationListener list : _regListeners) { list.registered(odd, man); } }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb43032012ba3be523dc0edd022c8c9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "46cea5a7a0c855a8fea823abed0517765efa40d7", "commitAfterChange": "db91dcc7aa4674cfe5508cd82ff717a758a32bca", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 93, "signatureBeforeChange": "   synchronized void currThreadDied() throws DebugException", "signatureAfterChange": "   synchronized void currThreadDied() throws DebugException", "diff": ["-      try{", "+      try {", "-        else {", "-          scrollToSource(thread.frame(0).location());", "-        }", "+        else scrollToSource(thread.frame(0).location());", "-      catch(IncompatibleThreadStateException e) {", "-        throw new UnexpectedException(e);", "-      }", "+      catch(IncompatibleThreadStateException e) { throw new UnexpectedException(e); }", "-    _notifier.currThreadDied();", "+    Utilities.invokeLater(new Runnable() { public void run() { _notifier.currThreadDied(); } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8ac507b4ea2e7525450efe9e1d87150", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 503, "methodNumberAfterChange": 509, "signatureBeforeChange": "   private JMenu _setUpToolsMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpToolsMenu(int mask)", "diff": ["-//        Utilities.invokeLater(new Runnable() {", "-//          public void run() {", "+        Utilities.invokeLater(new Runnable() {", "+          public void run() {", "-            if (oce.value>0) { extMenu.addSeparator(); }", "+            if (oce.value>0) { ", "+              extMenu.addSeparator();", "+            }", "-//          }", "-//        });", "+          }", "+        });"]}], "num": 21486}
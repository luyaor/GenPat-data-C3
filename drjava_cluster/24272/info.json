{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "651b5fbeb6c41960ea94f1d289250aef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51210032b7c614c9f222624fd1f7cfae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   public Object visit(ShiftLeftAssignExpression node)", "signatureAfterChange": "   public Object visit(ShiftLeftAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.shiftLeft", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.shiftLeft(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76436cb88932c565806c8e249783fa44", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public Object visit(ShiftRightAssignExpression node)", "signatureAfterChange": "   public Object visit(ShiftRightAssignExpression node)", "diff": ["-    Object lhs = mod.prepare(this, context);", "+    Object lhs = mod.prepare(this, context);", "+    Object rhs = node.getRightExpression().acceptVisitor(this);", "+    Class resType = NodeProperties.getType(node);", "+    Class calcType = resType; // always a primitive type", "+    ", "+    // This code facilitates autoboxing/unboxing", "+    if (_isBoxingType(resType)) {", "+      calcType = _correspondingPrimType(resType);", "+    }", "+    ", "-    Object result = InterpreterUtilities.shiftRight", "-      (NodeProperties.getType(node),", "-       lhs,", "-       node.getRightExpression().acceptVisitor(this));", "+    Object result = InterpreterUtilities.shiftRight(calcType, lhs, rhs);", "-    result = performCast(NodeProperties.getType(left), result);", "+    result = performCast(calcType, result);"]}], "num": 24272}
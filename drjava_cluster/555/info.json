{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3aa195dd72634b72fe85e22f852b158", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7264c6d3be52a7036d7f7559ec54d4fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public void testCorrectFilesAfterIncorrectChanges() throws Exception", "signatureAfterChange": "   public void testCorrectFilesAfterIncorrectChanges() throws Exception", "diff": ["-//    _log.log(\"Starting testCorrectFilesAfterIncorrectChanges\");", "+    if (printMessages) System.out.println(\"-----testCorrectFilesAfterIncorrectChanges-----\");", "-    saveFile(doc, new FileSelector(file));", "-    _model.addListener(listener);", "-   ", "-    listener.compile(doc);", "-    listener.checkCompileOccurred();", "-    _model.removeListener(listener);", "-    // What is the preceding code segment supposed to test; it has already been done!", "-    ", "+    doc.saveFile(new FileSelector(file));", "+    doc.startCompile();", "-    saveFile(doc, new FileSelector(file));", "-    ", "-    listener = new JUnitNonTestListener(true);", "+    doc.saveFile(new FileSelector(file));", "+    doc.startCompile();", "-    listener.compile(doc);", "-    if (printMessages) System.err.println(\"after test\");", "+    if (printMessages) System.out.println(\"after test\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad15ebdc0b41b5fa3811b2023a47cd87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "c62d3e0fe024c724a67e86baf30c41235da58454", "commitAfterChange": "bd499b8e6c590fd3376a82010e399ae7edfc6975", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "               public InputBox(boolean endOfStream)", "signatureAfterChange": "          public InputBox(boolean endOfStream)", "diff": ["+      // First clone the InputMap so we can change the keystroke mappings", "+      for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }", "+      ", "-      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO)) { im.put(ks, UNDO_NAME); }", "-      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_REDO)) { im.put(ks, REDO_NAME); }", "+      ", "+      updateKeyBindings();"]}], "num": 555}
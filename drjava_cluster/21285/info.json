{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "064efbafc1770568803aaeea596bc5f2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "804ba638c8b719e3b85fee0ea902fa2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "6b936f625ceea21472b90559f34694154e802e14", "commitAfterChange": "8d43ad99265fb94492eb304c2a9128684a27d753", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "signatureAfterChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "diff": ["+    TypeContext sigContext = new ClassSignatureContext(context, c, loader);", "+    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "+", "-    for (TypeParameter param : tparams) {", "-      setTypeVariable(param, new VariableType(new BoundedSymbol(param, param.getRepresentation())));", "-    }", "-    ", "-    TypeContext sigContext = new ClassSignatureContext(context, c, loader);", "-    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-    sigChecker.setTypeParameterBounds(tparams);", "+    sigChecker.checkTypeParameters(tparams);", "+", "-    TypeContext bodyContext = new ClassContext(sigContext, c);", "+    ClassMemberChecker classChecker = new ClassMemberChecker(new ClassContext(sigContext, c), opt); ", "-      new ClassMemberChecker(bodyContext, opt).checkInterfaceMembers(node.getMembers());", "+      classChecker.checkInterfaceSignatures(node.getMembers());", "-      new ClassMemberChecker(bodyContext, opt).checkClassMembers(node.getMembers());", "+      classChecker.checkClassSignatures(node.getMembers());", "+    classChecker.checkBodies(node.getMembers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86e1b51db3ea844ec5dffd77a5bd2b84", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "e664df55ae0a7bd09b3050ad4027139ea59836cd", "commitAfterChange": "41fd33d17362a9b484003b73b5562d87a9b206fa", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "signatureAfterChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "diff": ["-    ", "-    TypeContext sigContext = new ClassSignatureContext(context, c, loader);", "-    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-", "-    final TypeParameter[] tparams;", "-    if (node instanceof GenericClassDeclaration) {", "-      tparams = ((GenericClassDeclaration) node).getTypeParameters();", "-    }", "-    else if (node instanceof GenericInterfaceDeclaration) {", "-      tparams = ((GenericInterfaceDeclaration) node).getTypeParameters();", "-    }", "-    else { tparams = new TypeParameter[0]; }", "-    sigChecker.checkTypeParameters(tparams);", "-", "-    if (node instanceof ClassDeclaration) {", "-      sigChecker.check(((ClassDeclaration) node).getSuperclass());", "-    }", "-    if (node.getInterfaces() != null) {", "-      for (TypeName tn : node.getInterfaces()) { sigChecker.check(tn); }", "-    }", "-", "-    ClassMemberChecker classChecker = new ClassMemberChecker(new ClassContext(sigContext, c), opt); ", "-    if (node instanceof InterfaceDeclaration) {", "-      classChecker.checkInterfaceSignatures(node.getMembers());", "-    }", "-    else {", "-      classChecker.checkClassSignatures(node.getMembers());", "-    }", "-    classChecker.checkBodies(node.getMembers());", "-    ", "+    ClassChecker classChecker = new ClassChecker(c, loader, context, opt);", "+    classChecker.initializeClassSignatures(node);", "+    classChecker.checkSignatures(node);", "+    classChecker.checkBodies(node);"]}], "num": 21285}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bbfa4d25fe7ae6660eb63c65ceebd2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "533ee550cfa3599bab1849cf0bf40346", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "47c398bb655e51c115c8c0eb3d0935db42834771", "commitAfterChange": "62776e907e3e6dddd6b4161559ae3b70f27cc2e5", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-    config.addOptionListener(JSR14_LOCATION, new OptionListener<File>() {", "-      public void optionChanged(OptionEvent<File> oe) {", "-        boolean bootClassPathHasv2 = DrJava.bootClassPathHasJSR14v20();", "-        boolean bootClassPathHasv24 = DrJava.bootClassPathHasJSR14v24();", "-        if (oe.value != FileOption.NULL_FILE) {", "-          boolean checkForV20 = DrJava.checkForJSR14v20();", "-          boolean checkForV24 = DrJava.checkForJSR14v24();", "-          if (checkForV24 && !bootClassPathHasv24) {", "-            JOptionPane.showMessageDialog(_configFrame,", "-                                          \"You must restart DrJava to use the JSR-14 v2.4 compiler.\",", "-                                          \"JSR14 Warning\", JOptionPane.WARNING_MESSAGE);", "-          }", "-          else if ((checkForV20 && !checkForV24) && (!bootClassPathHasv2 || bootClassPathHasv24)) {", "-            JOptionPane.showMessageDialog(_configFrame,", "-                                          \"You must restart DrJava to use the JSR-14 v2.0/2.2 compiler.\",", "-                                          \"JSR14 Warning\", JOptionPane.WARNING_MESSAGE);", "-          }", "-          else if (!checkForV20 && bootClassPathHasv2) {", "-            JOptionPane.showMessageDialog(_configFrame,", "-                                          \"You must restart DrJava to switch to 1.x versions of the JSR-14 compiler.\",", "-                                          \"JSR14 Warning\", JOptionPane.WARNING_MESSAGE);", "-          }", "-        }", "-      }", "-    });", "-    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7d9d42e8f896a786f8ad0497526790", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 50, "signatureBeforeChange": "     public void breakpointRemoved(final Breakpoint bp)", "signatureAfterChange": "     public void breakpointRemoved(final Breakpoint bp)", "diff": ["-     */", "-    public void breakpointRemoved(final Breakpoint bp) {", "-      // Only change GUI from event-dispatching thread", "-      Runnable doCommand = new Runnable() {", "-        public void run() {", "-          DefaultMutableTreeNode bpDocNode = new DefaultMutableTreeNode(bp.getClassName());", "-", "-          // Find the document node for this breakpoint", "-          Enumeration documents = _breakpointRootNode.children();", "-          while (documents.hasMoreElements()) {", "-            DefaultMutableTreeNode doc = (DefaultMutableTreeNode)documents.nextElement();", "-            if (doc.getUserObject().equals(bpDocNode.getUserObject())) {", "-              // Find the correct line number node for this breakpoint", "-              Enumeration lineNumbers = doc.children();", "-              while (lineNumbers.hasMoreElements()) {", "-                DefaultMutableTreeNode lineNumber =", "-                  (DefaultMutableTreeNode)lineNumbers.nextElement();", "-                if (lineNumber.getUserObject().equals(new Integer(bp.getLineNumber()))) {", "-                  _bpTreeModel.removeNodeFromParent(lineNumber);", "-                  if (doc.getChildCount() == 0) {", "-                    // this document has no more breakpoints, remove it", "-                    _bpTreeModel.removeNodeFromParent(doc);", "-                  }", "-                  return;", "-                }", "-              }", "-            }", "-          }", "-        }", "-      };", "-      Utilities.invokeLater(doCommand);", "-    }", "+    /** Called when a breakpoint is removed from a document. */", "+    public void breakpointRemoved(final Breakpoint bp) { }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "978dfa81cb4ba6a09acc3b2925854548", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "1f215280ffb4deee1474aa0ea630d96d544831f9", "commitAfterChange": "36da33844ba54377479a55c5dc3b578eed405d70", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void toggleBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws IOException, ClassNotFoundException, DebugException", "signatureAfterChange": "   public void toggleBreakpoint(OpenDefinitionsDocument doc, int lineNumber)     throws IOException, ClassNotFoundException, DebugException", "diff": ["+    /**", "+    */"]}], "num": 15728}
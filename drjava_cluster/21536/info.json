{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ca3e21575b35e064798661b7c323574", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "056f80535e3a052adf58c6c4e28222af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public void interpret(final String s)", "signatureAfterChange": "   public boolean interpret(final String s)", "diff": ["-  public void interpret(final String s) {", "-    // silently fail if disabled. see killInterpreter docs for details.", "-    if (! _restart) return;", "-    ", "-    InterpreterJVMRemoteI slave = ensureInterpreterConnected();", "-    ", "-    // Spawn thread on InterpreterJVM side", "+  public boolean interpret(final String s) {", "+    InterpreterJVMRemoteI remote = _accessInterpreterJVM();", "+    if (remote == null) { return false; }", "-      _interactionsModel.slaveJVMUsed();", "-      InterpretResult result = slave.interpret(s);", "-      debug.logEnd();", "-      debug.logValue(\"result\", result);", "-      result.apply(getResultHandler());", "+      InterpretResult result = remote.interpret(s);", "+      result.apply(resultHandler());", "+      debug.logEnd(\"result\", result);", "+      return true;", "-    catch (UnmarshalException ume) {", "-      debug.logEnd();", "-", "-      if (Utilities.TEST_MODE) { ", "-//        Utilities.show(\"Unmarshalling exception found!\");", "-//        System.err.println(\"Exception is: \" + ume);", "-//        ume.printStackTrace();", "-        throw new UnexpectedException(ume);", "-      }", "-        ", "-      Throwable cause = ume.getCause(); ", "-      if (cause != null && cause instanceof EOFException) {", "-        // Interpreter JVM has disappeared (perhaps reset); just ignore error and wait", "-        // for reset.", "-      }", "-      else { _threwException(ume); }", "-    }", "-    catch (RemoteException re) { debug.logEnd(); _threwException(re); }", "+    catch (RemoteException e) { debug.logEnd(); _handleRemoteException(e); return false; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "728cf14be4979c1dec6a24fb61942bd5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "530cb3b64455d081e962324602750973729aa1fb", "commitAfterChange": "edb6c56f8ad5495255b4157f1e495f302271cd2d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "signatureAfterChange": "   public void classPrepared (ClassPrepareEvent event) throws DebugException", "diff": ["-    Vector<DebugAction> actions = _pendingActions.get(className);", "-    Vector<DebugAction> failedActions = new Vector<DebugAction>();", "+    ", "+    // Get the pending actions for this class (and inner classes)", "+    Vector<DocumentDebugAction> actions = _pendingActions.get(className);", "+    Vector<DocumentDebugAction> failedActions = ", "+      new Vector<DocumentDebugAction>();", "-    for (int i = 0; i < actions.size();) {", "+    for (int i = 0; i < actions.size(); i++) {", "-      /*", "-      System.out.println(\"i: \"+i+\" actions.size(): \" + actions.size() + ", "-                         \" actions.elementAt(i): \" + actions.elementAt(i) +", "-                         \" actions.elementAt(i).getLineNumber(): \" + ", "-                         actions.elementAt(i).getLineNumber());", "-                         */", "-        List lines = new LinkedList();", "-          lines = rt.locationsOfLine(lineNumber);", "+          List lines = rt.locationsOfLine(lineNumber);", "+          if (lines.size() == 0) {", "+            // Requested line number not in reference type, skip this action", "+            //i++;", "+            continue;", "+          }", "-        }", "-        if (lines.size() == 0) {", "-          i++;", "-        if (!actions.elementAt(i).createRequest(rt)) {", "+        Vector<ReferenceType> refTypes = new Vector<ReferenceType>();", "+        refTypes.addElement(rt);", "+        if (!actions.elementAt(i).createRequests(refTypes)) {", "-          i++;", "+          //i++;", "+          // Experiment: try never removing the action or event request.", "+          //  This way, multiple classloads of this class will always have", "+          //  the DebugActions set properly", "+          /*", "+            ", "+        */", "-        i++;", "+        //i++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5d278c8d0fcaaf62e3bd7dc8272875", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "2c16e0d4d9158060234171af20b20d5de3e555f9", "commitAfterChange": "e1f5c81c52809e8bace735e11df6213768d823f8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedBreakpointsAndStep() throws Exception", "diff": ["-  public synchronized void testMultiThreadedBreakpointsAndStep()", "-    throws DebugException, BadLocationException, DocumentAdapterException,", "-    IOException, InterruptedException", "-  {", "+  public synchronized void testMultiThreadedBreakpointsAndStep() throws Exception {", "-    ", "-    // Compile the class", "-    OpenDefinitionsDocument doc = doCompile(MONKEY_CLASS, tempFile());", "-    ", "-    // Start debugger", "-    synchronized(_notifierLock) {", "-      _debugger.startup();", "-      _waitForNotifies(1);  // startup", "-      _notifierLock.wait();", "-    }", "+    ", "+    // Start up", "+    OpenDefinitionsDocument doc = _startupDebugger(\"Monkey.java\",", "+                                                   MONKEY_CLASS);", "-    // Run the main() method, hitting breakpoints", "+    // Run the main method, hitting breakpoints", "-    // Close doc", "-    _model.closeFile(doc);", "-    ", "-    // Shutdown the debugger", "-    if (printMessages) System.out.println(\"Shutting down...\");", "-    synchronized(_notifierLock) {", "-      _debugger.shutdown();", "-      _waitForNotifies(1);  // shutdown", "-      _notifierLock.wait();", "-    }", "-    ", "-    if (printMessages) System.out.println(\"Shut down.\");", "+    // Shut down", "+    _shutdownWithoutSuspendedInteraction();", "+    _debugger.removeListener(debugListener);"]}], "num": 21536}
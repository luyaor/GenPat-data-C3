{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d1ff2fd8ef5b0e3ec7c7a05d4236f4b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f8338f4557a6c87bb97e68d8454c48", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 309, "signatureBeforeChange": "   public static <T1, T2, T3> Predicate3<T1, T2, T3>      asPredicate(final Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda)", "signatureAfterChange": "   public static <T1, T2, T3>      Predicate3<T1, T2, T3> asPredicate(Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda)", "diff": ["-  /** @return  A predicate based on an input that acts as a predicate but is not typed as one */", "-  public static <T1, T2, T3> Predicate3<T1, T2, T3> ", "-    asPredicate(final Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda) {", "-    return new Predicate3<T1, T2, T3>() { ", "-      public Boolean value(T1 arg1, T2 arg2, T3 arg3) { return lambda.value(arg1, arg2, arg3); }", "-    };", "-  }", "+  /** Create a predicate based on an input that acts as a predicate but is not typed as one. */", "+  public static <T1, T2, T3> ", "+    Predicate3<T1, T2, T3> asPredicate(Lambda3<? super T1, ? super T2, ? super T3, ? extends Boolean> lambda) {", "+    return new LambdaPredicate3<T1, T2, T3>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b57d23b074f5d2fee63bfb236036a58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 222, "signatureBeforeChange": "   public static <T1, T2, T3> Predicate3<T1, T2, T3>      negate3(final Predicate3<? super T1, ? super T2, ? super T3> pred)", "signatureAfterChange": "   public static <T1, T2, T3> Predicate3<T1, T2, T3> negate(Predicate3<? super T1, ? super T2, ? super T3> pred)", "diff": ["+  /** Produce the negation ({@code !}) of {@code pred}. */", "+  public static <T1, T2, T3> Predicate3<T1, T2, T3> negate(Predicate3<? super T1, ? super T2, ? super T3> pred) {", "+    return new NegationPredicate3<T1, T2, T3>(pred);", "+  }", "-  /** @return  The negation ({@code !}) of {@code pred} */", "-  public static <T1, T2, T3> Predicate3<T1, T2, T3> ", "-    negate3(final Predicate3<? super T1, ? super T2, ? super T3> pred) {", "-    return new Predicate3<T1, T2, T3>() { ", "-      public Boolean value(T1 arg1, T2 arg2, T3 arg3) { return !pred.value(arg1, arg2, arg3); }", "-    };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "599bd26a453a09610f0c6bca74b6ad57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 93, "signatureBeforeChange": "   public static <T1, T2, R>      Lambda3<T1, T2, Object, R> promote(final Lambda2<? super T1, ? super T2, ? extends R> lambda)", "signatureAfterChange": "   public static <T1, T2, R> Lambda3<T1, T2, Object, R> promote(Lambda2<? super T1, ? super T2, ? extends R> lambda)", "diff": ["-  /** @return A {@code Lambda3} equivalent to {@code lambda} with an additional, ignored argument */", "-  public static <T1, T2, R> ", "-    Lambda3<T1, T2, Object, R> promote(final Lambda2<? super T1, ? super T2, ? extends R> lambda) {", "-    return new Lambda3<T1, T2, Object, R>() {", "-      public R value(T1 arg1, T2 arg2, Object arg3) { return lambda.value(arg1, arg2); }", "-    };", "+  /** Create a {@code Lambda3} equivalent to {@code lambda} with an additional, ignored argument. */", "+  public static <T1, T2, R> Lambda3<T1, T2, Object, R> promote(Lambda2<? super T1, ? super T2, ? extends R> lambda) {", "+    return new PromotedLambda3<T1, T2, R>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820ec96919e7c05b4d986ec2ac4e72c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 102, "signatureBeforeChange": "   public static <T1, T2>      Predicate3<T1, T2, Object> promote(final Predicate2<? super T1, ? super T2> pred)", "signatureAfterChange": "   public static <T1, T2> Predicate3<T1, T2, Object> promote(Predicate2<? super T1, ? super T2> pred)", "diff": ["-  /** @return A {@code Predicate3} equivalent to {@code pred} with an additional, ignored argument */", "-  public static <T1, T2> ", "-    Predicate3<T1, T2, Object> promote(final Predicate2<? super T1, ? super T2> pred) {", "-    return new Predicate3<T1, T2, Object>() {", "-      public Boolean value(T1 arg1, T2 arg2, Object arg3) { return pred.value(arg1, arg2); }", "-    };", "+  /** Create a {@code Predicate3} equivalent to {@code pred} with an additional, ignored argument. */", "+  public static <T1, T2> Predicate3<T1, T2, Object> promote(Predicate2<? super T1, ? super T2> pred) {", "+    return new PromotedPredicate3<T1, T2>(pred);", "+  }"]}], "num": 21454}
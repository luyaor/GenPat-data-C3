{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc8505ec3406fd76f53a918f24198bd2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6636385a14f7c45945c09638d2febe1d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "               public void testForSimpleAnonymousClassInstantiation()", "signatureAfterChange": "               public void testForSimpleAnonymousClassInstantiation()", "diff": ["-      AnonymousClassInstantiation basic = new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                                                                                new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                                                                new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+      ClassOrInterfaceType objType = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]);", "+      AnonymousClassInstantiation basic = ", "+        new SimpleAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+                                              objType, ", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      ", "-      SymbolData object = new SymbolData(\"java.lang.Object\");", "-      object.setIsContinuation(false);", "-      object.setPackage(\"java.lang\");", "-      object.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      MethodData cdObj = ", "-        new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "-      object.addMethod(cdObj);", "-      ", "-      ", "-      symbolTable.put(\"java.lang.Object\", object);", "-      ", "-      /* This erroneous configuration now throws an error message asserting anonymous inner classes cannot be nested in LL. */", "-//     // if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "-//     try {", "-//       basic.visit(_etc);", "-//       fail(\"Should have thrown runtime exception\");", "-//     }", "-//     catch(RuntimeException e) {", "-//       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "-//     }", "+      SymbolData object = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "-      //once our enclosing data does have an anonymous inner class, it's okay to look it up", "+      // Once our enclosing data does have an anonymous inner class, it's okay to look it up", "+      assert object != null;", "+      anon1.setSuperClass(object);", "-      ", "+      System.err.println(\"****** anon1 is: \" + anon1);", "+      System.err.println(\"****** instance data = \" + anon1.getInstanceData());", "-      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84c9a89216c661c34dd22d2507e079bf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": "          public void testForComplexAnonymousClassInstantiation()", "signatureAfterChange": "          public void testForComplexAnonymousClassInstantiation()", "diff": ["+      ClassOrInterfaceType objType = new ClassOrInterfaceType(SourceInfo.NO_INFO, \"java.lang.Object\", new Type[0]);", "+      ", "-                                               new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                               objType, ", "+      // Create a variable 'bob' of type _sd2 within _sd1", "-      _etc._vars.add(bob);", "+      _etc._vars.add(bob);  // _data for _etc is _sd1", "-      SymbolData object = new SymbolData(\"java.lang.Object\");", "-      object.setIsContinuation(false);", "-      object.setPackage(\"java.lang\");", "-      object.setMav(new ModifiersAndVisibility(SourceInfo.NO_INFO, new String[] {\"public\"}));", "-      MethodData cdObj = ", "-        new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "-      object.addMethod(cdObj);", "-      ", "-      _sd2.addInnerClass(object);", "-      object.setOuterData(_sd2);", "-      ", "-      /* The code base now interprets the following situation as nesting an anonymous class in an anonymous class and ", "-       * classifies it as a LL syntax error. */", "-//     // if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "-//     try {", "-//       basic.visit(_etc);", "-//       fail(\"Should have thrown runtime exception\");", "-//     }", "-//      catch(RuntimeException e) {", "-//        assertEquals(\"Should throw correct exception\", ", "-//                     \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  \"", "-//                       + \"Please report this bug.\", ", "-//                     e.getMessage());", "-//      }", "+      SymbolData object = LanguageLevelConverter.symbolTable.get(\"java.lang.Object\");", "-      //once our enclosing data does have an anonymous inner class, it's okay to look it up", "+      // Once our enclosing data does have an anonymous inner class, it's okay to look it up", "+      assert object != null;", "+      anon1.setSuperClass(object);", "-      ", "+      System.err.println(\"****** anon1 is: \" + anon1);", "+      System.err.println(\"****** instance data = \" + anon1.getInstanceData());", "+      ", "+      // This test is not well-documented.  In refactoring, I tried to preserve it as best as possible.", "+      sd.setSuperClass(object);", "-      anon2.setSuperClass(null);", "+      anon2.setSuperClass(sd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88dd8d3f0a6fa76de53a1ef97e4f42c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": "               public void testForComplexAnonymousClassInstantiation()", "signatureAfterChange": "          public void testForComplexAnonymousClassInstantiation()", "diff": ["-    ", "-     AnonymousClassInstantiation basic = new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "-                                                                                new SimpleNameReference(SourceInfo.NO_INFO, new Word(SourceInfo.NO_INFO, \"bob\")),", "-                                                                                new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "-                                                                        new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "-                                                                        new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "+     AnonymousClassInstantiation basic = ", "+       new ComplexAnonymousClassInstantiation(SourceInfo.NO_INFO, ", "+                                              new SimpleNameReference(SourceInfo.NO_INFO, ", "+                                                                      new Word(SourceInfo.NO_INFO, \"bob\")),", "+                                              new ClassOrInterfaceType(SourceInfo.NO_INFO, \"Object\", new Type[0]), ", "+                                              new ParenthesizedExpressionList(SourceInfo.NO_INFO, new Expression[0]),", "+                                              new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-     MethodData cdObj = new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "+     MethodData cdObj = ", "+       new MethodData(\"Object\", _publicMav, new TypeParameter[0], object, new VariableData[0], new String[0], object, basic);", "-     ", "-     //if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "-     try {", "-       basic.visit(_etc);", "-       fail(\"Should have thrown runtime exception\");", "-     }", "-     catch(RuntimeException e) {", "-       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "-     }", "+ ", "+     /* The code base now interprets the following situation as nesting an anonymous class in an anonymous class and ", "+      * classifies it as a LL syntax error. */", "+//     // if our enclosing data does not have any anonymous inner classes, throw runtime exception:", "+//     try {", "+//       basic.visit(_etc);", "+//       fail(\"Should have thrown runtime exception\");", "+//     }", "+//     catch(RuntimeException e) {", "+//       assertEquals(\"Should throw correct exception\", \"Internal Program Error: Couldn't find the SymbolData for the anonymous inner class.  Please report this bug.\", e.getMessage());", "+//     }"]}], "num": 10075}
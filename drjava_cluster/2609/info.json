{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3985660475122e660fc47277f67f7c89", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a54d2362259a5100af76ed6f96e08aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public Node visit(SuperMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["+  public Object visit(ObjectMethodCall node) {", "+    LinkedList arguments = null; // Add parameterization <Node>.", "+      arguments = new LinkedList(); // Add parameterization <Node>.", "+      Iterator it = node.getArguments().iterator();", "+        arguments.add((Node)((Node)it.next()).acceptVisitor(this));", "-    public Node visit(SuperMethodCall node) {", "-      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "-        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c62937813ec239ccb7fddfaca123e17b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "fe8cbcadc8194137c2479c12d0066ef99902fa72", "commitAfterChange": "9534991a742704e6d48a5e6976811d37ff43ac31", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 26, "signatureBeforeChange": "     public Node visit(ConstructorInvocation node)", "signatureAfterChange": "   public Object visit(FunctionCall node)", "diff": ["+  public Object visit(FunctionCall node) {", "+    LinkedList arguments = null; // Add parameterization <Node>.", "+      arguments = new LinkedList(); // Add parameterization <Node>.", "+      Iterator it = node.getArguments().iterator();", "+        arguments.add((Node)((Node)it.next()).acceptVisitor(this));", "-    public Node visit(ConstructorInvocation node) {", "-      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "-        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)it.next().acceptVisitor(this));"]}], "num": 2609}
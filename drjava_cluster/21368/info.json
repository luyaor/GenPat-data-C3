{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3d4f417862b224f3acacb3025135f2f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04df16be02436b57f5799c93133d4e7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": "                    public void testCreateMethodData()", "signatureAfterChange": "                    public void testCreateMethodData()", "diff": ["-                                             _privateAbstractMav, ", "+                                             PRIVATE_ABSTRACT_MAV, ", "-      MethodData mdata = new MethodData(\"methodName\", _privateAbstractMav, new TypeParameter[0], SymbolData.INT_TYPE, ", "+      MethodData mdata = new MethodData(\"methodName\", PRIVATE_ABSTRACT_MAV, new TypeParameter[0], SymbolData.INT_TYPE, ", "+      _iv._package = \"i.like\";", "+      _iv._enclosingClassName = \"i.like.monkey\";", "+      _iv.symbolTable.put(\"i.like.monkey\", _sd1);", "+      System.err.println(\"SymbolData for i.like.monkey = \" + _iv.getQualifiedSymbolData(\"i.like.monkey\", SourceInfo.NO_INFO));", "-//      assertEquals(\"The error message should be correct.\", \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", errors.get(0).getFirst());", "+//      assertEquals(\"The error message should be correct.\", ", "+//      \"The keyword \\\"final\\\" cannot be used at the Intermediate level\", ", "+//        errors.get(0).getFirst());", "+      UninitializedVariableDeclarator uvd1 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                            new Word(SourceInfo.NO_INFO, \"field1\"));", "+      UninitializedVariableDeclarator uvd2 =", "+        new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                            new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                            new Word(SourceInfo.NO_INFO, \"field1\"));", "-                              _abstractMav, ", "+                              ABSTRACT_MAV, ", "-                                                    new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                        new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "-                                                                                        new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                    uvd1,", "-                                                      new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "-                                                                                          new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "-                                                                                          new Word (SourceInfo.NO_INFO, \"field1\")),", "+                                                      uvd2,", "-                       _abstractMav, ", "+                       ABSTRACT_MAV, ", "-                       new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, null),", "-                         new VariableData(\"field1\", _finalMav, SymbolData.INT_TYPE, true, null) }, ", "+                       new VariableData[] { new VariableData(\"field1\", FINAL_MAV, SymbolData.DOUBLE_TYPE, true, _sd1),", "+                         new VariableData(\"field1\", FINAL_MAV, SymbolData.INT_TYPE, true, _sd1) }, ", "-      mdata.getParams()[0].setEnclosingData(result);", "-      mdata.getParams()[1].setEnclosingData(result);", "+      /* Enclosing data for formal parameters is the enclosing class, not the enclosing method. */", "+//      mdata.getParams()[0].setEnclosingData(result);", "+//      mdata.getParams()[1].setEnclosingData(result);", "+      ", "-      mdata.addVars(new VariableData[] { new VariableData(\"field1\", _finalMav, SymbolData.DOUBLE_TYPE, true, result) });                                                          ", "+      mdata.addVars(new VariableData[] { new VariableData(\"field1\", FINAL_MAV, SymbolData.DOUBLE_TYPE, true, _sd1) });", "+      System.err.println(\"****** mdata  = \" + mdata);", "+      System.err.println(\"****** result = \" + result);", "-      //This is now caught in the type checker.", "-      //assertEquals(\"The second error message should be correct.\", \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", errors.get(1).getFirst());", "-      assertEquals(\"The second error message should be correct.\", \"You cannot have two method parameters with the same name\", errors.get(1).getFirst());", "+      // This is now caught in the type checker.", "+//      assertEquals(\"The second error message should be correct.\", ", "+//                   \"The keyword \\\"void\\\" cannot be used at the Intermediate level\", ", "+//                   errors.get(1).getFirst());", "+      assertEquals(\"The second error message should be correct.\", ", "+                   \"You cannot have two method parameters with the same name\", ", "+                   errors.get(1).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92bef9691c5053a06640242d2f025ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/IntermediateVisitor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "               public void testCreateMethodData()", "signatureAfterChange": "               public void testCreateMethodData()", "diff": ["-      MethodDef mdef = new ConcreteMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      MethodDef mdef = new ConcreteMethodDef(SourceInfo.NO_INFO, ", "-                                                    new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                    new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                                    new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                    new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                                    new BracedBody(JExprParser.NO_SOURCE_INFO, new BodyItemI[0]));", "+                                                    new BracedBody(SourceInfo.NO_INFO, new BodyItemI[0]));", "-      mdef = new AbstractMethodDef(JExprParser.NO_SOURCE_INFO, ", "+      mdef = new AbstractMethodDef(SourceInfo.NO_INFO, ", "-                                   new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                           new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))},", "-                                   new VoidReturn(JExprParser.NO_SOURCE_INFO, \"void\"), ", "-                                   new Word(JExprParser.NO_SOURCE_INFO, \"methodName\"),", "+                                   new TypeParameter[] { new TypeParameter(SourceInfo.NO_INFO,", "+                                                                           new TypeVariable(SourceInfo.NO_INFO, \"T\"),", "+                                                                           new TypeVariable(SourceInfo.NO_INFO, \"U\"))},", "+                                   new VoidReturn(SourceInfo.NO_INFO, \"void\"), ", "+                                   new Word(SourceInfo.NO_INFO, \"methodName\"),", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"double\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "+                                     new FormalParameter(SourceInfo.NO_INFO, ", "+                                                         new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                                             new PrimitiveType(SourceInfo.NO_INFO, \"double\"), ", "+                                                                                             new Word (SourceInfo.NO_INFO, \"field1\")),", "-                                     new FormalParameter(JExprParser.NO_SOURCE_INFO, ", "-                                                         new UninitializedVariableDeclarator(JExprParser.NO_SOURCE_INFO, ", "-                                                                                             new PrimitiveType(JExprParser.NO_SOURCE_INFO, \"int\"), ", "-                                                                                             new Word (JExprParser.NO_SOURCE_INFO, \"field1\")),", "+                                     new FormalParameter(SourceInfo.NO_INFO, ", "+                                                         new UninitializedVariableDeclarator(SourceInfo.NO_INFO, ", "+                                                                                             new PrimitiveType(SourceInfo.NO_INFO, \"int\"), ", "+                                                                                             new Word (SourceInfo.NO_INFO, \"field1\")),", "-                                   new ReferenceType[] { new TypeVariable(JExprParser.NO_SOURCE_INFO, \"X\") }", "+                                   new ReferenceType[] { new TypeVariable(SourceInfo.NO_INFO, \"X\") }", "-                              new TypeParameter[] { new TypeParameter(JExprParser.NO_SOURCE_INFO,", "-                                                                      new TypeVariable(JExprParser.NO_SOURCE_INFO, \"T\"),", "-                                                                      new TypeVariable(JExprParser.NO_SOURCE_INFO, \"U\"))}, ", "+                              new TypeParameter[] { new TypeParameter(SourceInfo.NO_INFO,", "+                                                                      new TypeVariable(SourceInfo.NO_INFO, \"T\"),", "+                                                                      new TypeVariable(SourceInfo.NO_INFO, \"U\"))}, "]}], "num": 21368}
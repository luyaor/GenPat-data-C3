{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb765d8dbeb2057806c3bc54eaed0c7c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e7456a2f86de5839e60768deef4171", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0fae02937c58237a9087228b753c7aa76d749043", "commitAfterChange": "c8e1edb3cb12a79ab0af0ab2389da353a2a824bf", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 75, "signatureBeforeChange": "   final public Statement ifStatement() throws ParseException", "signatureAfterChange": "   final public Statement ifStatement() throws ParseException", "diff": ["-    t = jj_consume_token(IF);", "-    jj_consume_token(LPAREN);", "-    exp = expression();", "-    jj_consume_token(RPAREN);", "-    stat1 = statement();", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case ELSE:", "-      jj_consume_token(ELSE);", "-      stat2 = statement();", "-      break;", "-    default:", "-      jj_la1[68] = jj_gen;", "-      ;", "-    }", "-      if (stat2 == null) {", "-        {if (true) return new IfThenStatement(exp, stat1,", "-                                   filename,", "-                                   t.beginLine,       t.beginColumn,", "-                                   stat1.getEndLine(), stat1.getEndColumn());}", "-      } else {", "-        {if (true) return new IfThenElseStatement(exp, stat1, stat2,", "-                                       filename,", "-                                       t.beginLine,       t.beginColumn,", "-                                       stat2.getEndLine(), stat2.getEndColumn());}", "+    try {", "+      t = jj_consume_token(IF);", "+      jj_consume_token(LPAREN);", "+      exp = expression();", "+      jj_consume_token(RPAREN);", "+      stat1 = statement();", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case ELSE:", "+        jj_consume_token(ELSE);", "+        stat2 = statement();", "+        break;", "+      default:", "+        jj_la1[69] = jj_gen;", "+        ;", "+        if (stat2 == null) {", "+          {if (true) return new IfThenStatement(exp, stat1,", "+                                     filename,", "+                                     t.beginLine,       t.beginColumn,", "+                                     stat1.getEndLine(), stat1.getEndColumn());}", "+        } else {", "+          {if (true) return new IfThenElseStatement(exp, stat1, stat2,", "+                                         filename,", "+                                         t.beginLine,       t.beginColumn,", "+                                         stat2.getEndLine(), stat2.getEndColumn());}", "+        }", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid if statement\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df501c5b245faab0ac70bae7a91a19b6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "d7e29fae36890273cb02f65a4dcc06babb1b1e53", "commitAfterChange": "40502fe8d6d2aa924af9e28579518088d3c23148", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-        resultExp = new VariableAccess(first.image(), node.getFilename(), first.beginLine(),", "-                                       first.beginColumn(), first.endLine(), first.endColumn());", "+        resultExp = new VariableAccess(first.image(), first.getSourceInfo()); ", "-        resultExp = new SimpleFieldAccess(first.image(), node.getFilename(), first.beginLine(),", "-                                          first.beginColumn(), first.endLine(), first.endColumn());", "+        resultExp = new SimpleFieldAccess(first.image(), first.getSourceInfo());", "-            ReferenceTypeName rt = new ReferenceTypeName(classIds, node.getFilename(),", "-                                                         first.beginLine(), first.beginColumn(),", "-                                                         last.endLine(),  last.endColumn());", "-            resultExp = new StaticFieldAccess(rt, memberName.image(), rt.getFilename(),", "-                                              first.beginLine(), first.beginColumn(),", "-                                              memberName.endLine(), memberName.endColumn());", "+            ReferenceTypeName rt = new ReferenceTypeName(classIds, SourceInfo.span(first, last)); ", "+            resultExp = new StaticFieldAccess(rt, memberName.image(), SourceInfo.span(first, memberName)); ", "-          return new ReferenceTypeName(classIds, node.getFilename(),", "-                                       first.beginLine(), first.beginColumn(),", "-                                       last.endLine(),  last.endColumn());", "+          return new ReferenceTypeName(classIds, SourceInfo.span(first, last));", "-        resultExp = new ObjectFieldAccess(resultExp, field.image(), node.getFilename(), ", "-                                          first.beginLine(), first.beginColumn(),", "-                                          field.endLine(), field.endColumn());", "+        resultExp = new ObjectFieldAccess(resultExp, field.image(), SourceInfo.span(first, field));"]}], "num": 21291}
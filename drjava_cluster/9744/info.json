{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c17421451ea9c967ddd6bde29ba3950b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b54407d6d06688a9ba951b077157bd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": "   protected SymbolData getInnerClassOrInterfaceHelper(String nameToMatch, int firstIndexOfDot)", "signatureAfterChange": "   protected SymbolData getInnerClassOrInterfaceHelper(String nameToMatch, int firstIndexOfDot)", "diff": ["-    //Next, look through the inner classes/interfaces of this class's super class", "-    //Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "+    // Next, look through the inner classes/interfaces of this class's super class", "+    // Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "-        if (firstIndexOfDot > 0) {", "+        ", "+        if (firstIndexOfDot > 0)", "-        }", "-        else {", "-          outerPiece = newResult;", "-        }", "+        else outerPiece = newResult;", "+        ", "-        else {privateResult = newResult;}", "+        else privateResult = newResult;", "-    //Next, look through the inner classes/interfaces of each of this class's interfaces", "-    //Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "-    for (SymbolData id: _interfaces) {", "-      newResult = id.getInnerClassOrInterfaceHelper(nameToMatch, firstIndexOfDot);", "+    // Next, look through the inner classes/interfaces of each of this class's interfaces", "+    // Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "+    for (SymbolData id: _interfaces) {  // TODO: find out how null is being inserted in _interfaces", "+      if (id == null) {", "+//        System.err.println(\"In SymbolData \" + getName() + \", _interfaces contains a null entry\");", "+//        assert false;", "+        continue;", "+      }", "+       newResult = id.getInnerClassOrInterfaceHelper(nameToMatch, firstIndexOfDot);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f34ddddcef0e15018032db86c98d5f6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "          public void testGetInnerClassOrInterface()", "signatureAfterChange": "          public void testGetInnerClassOrInterface()", "diff": ["-      ", "-      //one level can be found", "+      // One level can be found", "-      //dollars or dots are okay, and nested inner classes can be found", "+      // Dollars or dots are okay, and nested inner classes can be found", "-      //dollars or dots are okay, and nested inner classes can be found", "+      // Dollars or dots are okay, and nested inner classes can be found", "-      //null is returned when a non-present inner class is looked for.", "+      // null is returned when a non-present inner class is looked for.", "-      ", "-      //one level can be found", "+      // One level can be found", "-      ", "-      assertEquals(\"Should return SymbolData.AMBIGUOUS_REFERENCE\", SymbolData.AMBIGUOUS_REFERENCE, me.getInnerClassOrInterface(\"MyInner\"));", "+      assertEquals(\"Should return SymbolData.AMBIGUOUS_REFERENCE\", SymbolData.AMBIGUOUS_REFERENCE, ", "+                   me.getInnerClassOrInterface(\"MyInner\"));", "-      //Test a case where the inner class is private in one, but not the other", "+      // Test a case where the inner class is private in one, but not the other", "-      //Test a case where the inner class is private in both--returns one of them", "+      // Test a case where the inner class is private in both--returns one of them", "-      //Test a case where the inner most class is private, but one layer is public", "+      // Test a case where the inner most class is private, but one layer is public", "-      assertEquals(\"Should return innerInterfaceInner\", innerInterfaceInner, me.getInnerClassOrInterface(\"MyInner.Inner\"));", "+      assertEquals(\"Should return innerInterfaceInner\", innerInterfaceInner, ", "+                   me.getInnerClassOrInterface(\"MyInner.Inner\"));", "+      ", "+      System.err.println(\"testGetInnerClassOrInterface finished\");"]}], "num": 9744}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52b0927a883ae05974ffd5edb95812b9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "490ab709ae604d2d1b74358b4c6128b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "d9483f6c228cd09f3431ad6b50a3d96bdaf83832", "commitAfterChange": "f998596e58db467638fd2c5025aacbfb31d4199f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, int start, int len,                                             final boolean wrapped, final boolean allWrapped)", "signatureAfterChange": "   private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, final int len,                                             final boolean wrapped, final boolean allWrapped)", "diff": ["-  private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, int start, int len, ", "+  private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, final int len, ", "-      // loop carried variables are text, len, start; ", "-      // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen.", "-      // On forward search, (start + len) is invariant; on backward search start is invariant.", "+      // loop carried variables are rem, foundOffset; ", "+      // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen, start, len.", "+      // Invariant:  on forwardsearch, foundOffset + rem == len; on backward search foundOffset == rem.", "-      while (len >= wordLen) {", "-        ", "+      int foundOffset = _isForward? 0 : len;", "+      int rem = len;", "+//      _log.log(\"Starting search loop; text = '\" + text + \"' findWord = '\" + findWord + \"' forward? = \" + _isForward + \" rem = \" + rem + \" foundOffset = \" + foundOffset);", "+      while (rem >= wordLen) {", "+", "-        int foundOffset = _isForward ? text.indexOf(findWord) : text.lastIndexOf(findWord);", "+        foundOffset = _isForward ? text.indexOf(findWord, foundOffset) : text.lastIndexOf(findWord, foundOffset);", "+//        _log.log(\"foundOffset = \" + foundOffset);", "-          int adjustedOffset = foundOffset + wordLen;", "-          start += adjustedOffset;                       // start is moved to match", "-          text = text.substring(adjustedOffset, len);    // len is length of text before update", "-          len = len - adjustedOffset;                    // len is updated to length of text after update", "-          matchLocation = start;                         // matchLocation is index in _doc of right edge of match", "+          foundOffset += wordLen;                          // skip over matched word", "+//          text = text.substring(adjustedOffset, len);    // len is length of text before update", "+          rem = len - foundOffset;                         // len is updated to length of remaining text to search", "+          matchLocation = foundLocation + wordLen;         // matchLocation is index in _doc of right edge of match", "-        else {", "-          len = foundOffset;                             // start is left invariant; len is moved to match", "-          matchLocation = start + foundOffset;           // matchLocation is index in _doc of left edge of match", "-          text = text.substring(0, len);                 // len is length of text after update", "+        else { ", "+          foundOffset -= wordLen;                        // skip over matched word        ", "+          rem = foundOffset;                             // rem is adjusted to match foundOffset", "+          matchLocation = foundLocation;                 // matchLocation is index in _doc of left edge of match", "+//          text = text.substring(0, len);               // len is length of text after update", "-        ", "+//        _log.log(\"rem = \" + rem);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536909db16eddd792b4cbee72ea14d8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "66cf5c18c85c49dd4268e6eb5e205df7e4243a71", "commitAfterChange": "f6fc0c2918885b86d7588893e1a025f2fac926cd", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "      public void testPromptListClearedOnReset() throws Exception", "signatureAfterChange": "      public void testPromptListClearedOnReset() throws Exception", "diff": ["-                 InteractionsDocument.DEFAULT_BANNER.length() + InteractionsDocument.DEFAULT_PROMPT.length(),", "+                 InteractionsModel.getStartUpBanner().length() + InteractionsDocument.DEFAULT_PROMPT.length(),", "-                 InteractionsDocument.DEFAULT_BANNER.length() + InteractionsDocument.DEFAULT_PROMPT.length(),", "+                 InteractionsModel.getStartUpBanner().length() + InteractionsDocument.DEFAULT_PROMPT.length(),", "-                 InteractionsDocument.DEFAULT_BANNER.length() + InteractionsDocument.DEFAULT_PROMPT.length() * 2 + 1,", "+                 InteractionsModel.getStartUpBanner().length() + InteractionsDocument.DEFAULT_PROMPT.length() * 2 + 1,", "-      _model.resetInterpreter();", "+      _model.resetInterpreter(FileOption.NULL_FILE);  // restarting the interpreter since argument is not null"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "804ba638c8b719e3b85fee0ea902fa2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/StatementChecker.java", "commitBeforeChange": "6b936f625ceea21472b90559f34694154e802e14", "commitAfterChange": "8d43ad99265fb94492eb304c2a9128684a27d753", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "signatureAfterChange": "      private TypeContext handleTypeDeclaration(TypeDeclaration node)", "diff": ["+    TypeContext sigContext = new ClassSignatureContext(context, c, loader);", "+    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "+", "-    for (TypeParameter param : tparams) {", "-      setTypeVariable(param, new VariableType(new BoundedSymbol(param, param.getRepresentation())));", "-    }", "-    ", "-    TypeContext sigContext = new ClassSignatureContext(context, c, loader);", "-    TypeNameChecker sigChecker = new TypeNameChecker(sigContext, opt);", "-    sigChecker.setTypeParameterBounds(tparams);", "+    sigChecker.checkTypeParameters(tparams);", "+", "-    TypeContext bodyContext = new ClassContext(sigContext, c);", "+    ClassMemberChecker classChecker = new ClassMemberChecker(new ClassContext(sigContext, c), opt); ", "-      new ClassMemberChecker(bodyContext, opt).checkInterfaceMembers(node.getMembers());", "+      classChecker.checkInterfaceSignatures(node.getMembers());", "-      new ClassMemberChecker(bodyContext, opt).checkClassMembers(node.getMembers());", "+      classChecker.checkClassSignatures(node.getMembers());", "+    classChecker.checkBodies(node.getMembers());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e13f9c013e98444c72b35f02cb2825", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testMemoryLeak() throws InterruptedException", "signatureAfterChange": "   public void testMemoryLeak() throws InterruptedException, IOException", "diff": ["-  public void testMemoryLeak() throws InterruptedException{", "+  public void testMemoryLeak() throws InterruptedException, IOException {", "-    OpenDefinitionsDocument doc1 = _model.newFile();", "-    OpenDefinitionsDocument doc2 = _model.newFile();", "-    OpenDefinitionsDocument doc3 = _model.newFile();", "-    OpenDefinitionsDocument doc4 = _model.newFile();", "-    OpenDefinitionsDocument doc5 = _model.newFile();", "+    ", "+   ", "+    OpenDefinitionsDocument doc1 = openFile(tempFile(1));", "+    OpenDefinitionsDocument doc2 = openFile(tempFile(2));", "+    OpenDefinitionsDocument doc3 = openFile(tempFile(3));", "+    OpenDefinitionsDocument doc4 = openFile(tempFile(4));", "+    OpenDefinitionsDocument doc5 = openFile(tempFile(5));", "-    assertEquals(\"There should be 4 in the LRU\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should be 4 in the QUEUE\", 4, _cache.getNumInCache());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0c236c9e4251748b54e9605fadea8f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk15/edu/rice/cs/drjava/model/compiler/Javac150Compiler.java", "commitBeforeChange": "9e416ec969ee1b990100c9d98abf8588475251ab", "commitAfterChange": "5333b963d0d699214d4f763e3246299880072474", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends CompilerError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-  */", "+    */", "-    DebugUtil.debug.logStart(\"compile()\");", "-    DebugUtil.debug.logValues(new String[]{ \"files\", \"classPath\", \"sourcePath\", \"destination\", \"bootClassPath\", ", "+    debug.logStart(\"compile()\");", "+    debug.logValues(new String[]{ \"this\", \"files\", \"classPath\", \"sourcePath\", \"destination\", \"bootClassPath\", ", "-                              files, classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "-    if (bootClassPath == null) { bootClassPath = _defaultBootClassPath; }", "+                    this, files, classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    ", "-      DebugUtil.debug.logEnd(\"compile() (caught an exception)\");", "+      error.log(t);", "+      debug.logEnd(\"compile() (caught an exception)\");", "-    DebugUtil.debug.logEnd(\"compile()\");", "+    debug.logEnd(\"compile()\");"]}], "num": 23533}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d30ef32e4dce32aac99756c799c27b00", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5331bbbd637e487210bf30f54d877e4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5e43ed9b0ccc485edbf101000ea86b2ab5a8036f", "commitAfterChange": "1aafd33bee421dfc8c5f72d0c8fbfbf4f1acd534", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Class visit(ObjectMethodCall node)", "signatureAfterChange": "   public Class visit(ObjectMethodCall node)", "diff": ["-      List args = node.getArguments();", "+      List<Expression> args = node.getArguments();", "-        Iterator it = args.iterator();", "+        Iterator<Expression> it = args.iterator();", "-          cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+          cargs[i++] = it.next().acceptVisitor(this);", "-      } catch (NoSuchMethodException e) {", "+      } ", "+      catch (NoSuchMethodException e) {", "-      } catch (MethodModificationError e) {", "+      } ", "+      catch (MethodModificationError e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93276063cdeb92c9cc6f8287eef1c327", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public Class visit(StaticMethodCall node)", "signatureAfterChange": "   public Class<?> visit(StaticMethodCall node)", "diff": ["-  public Class visit(StaticMethodCall node) {", "+  public Class<?> visit(StaticMethodCall node) {", "-    List args = node.getArguments();", "+    List<Expression> args = node.getArguments();", "-      Iterator it = args.iterator();", "+      Iterator<Expression> it = args.iterator();", "-        cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+        cargs[i++] = it.next().acceptVisitor(this);", "-    Class  c = n.acceptVisitor(this);", "+    Class<?>  c = n.acceptVisitor(this);"]}], "num": 203}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d430c985e10100bafafa0571424ee8b6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "324d9097ebf876e427e9eca254714ba2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelTestCase.java", "commitBeforeChange": "1333ad40debe120f6d8fd5fb5ff36c57ce6b1ccf", "commitAfterChange": "3907c0e8430f2d380a191d1ad8364cbfdd1d1b28", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void interactionEnded()", "signatureAfterChange": "   protected void doCompile(OpenDefinitionsDocument doc, File file)     throws IOException, InterruptedException", "diff": ["+   */", "+  protected void doCompile(OpenDefinitionsDocument doc, File file)", "+    throws IOException, InterruptedException", "+  {", "+    doc.saveFile(new FileSelector(file));", "+", "+    CompileShouldSucceedListener listener = new CompileShouldSucceedListener(true);", "+    _model.addListener(listener);", "+    synchronized(listener) {", "+      doc.startCompile();", "+      if (_model.getNumErrors() > 0) {", "+        fail(\"compile failed: \" + doc.getCompilerErrorModel());", "+      }", "+      listener.wait();", "+    }", "+    listener.checkCompileOccurred();", "+    assertCompileErrorsPresent(false);", "+    _model.removeListener(listener);", "+  }", "-    }", "-    public void interactionEnded() {", "-      synchronized(this) {", "-        interactionEndCount++;", "-        this.notify();", "-      }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c78a4e2e6352996f5c066944c0be5e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/SingleDisplayModelTest.java", "commitBeforeChange": "d1e77e5d0818e6bb43ce09eb1ecec03bb76646fd", "commitAfterChange": "936df97bedea66175f36cae49ba74b17abf11e8a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testCloseFiles() throws BadLocationException", "signatureAfterChange": "   public void testCloseFiles() throws BadLocationException", "diff": ["+        synchronized(_readyLock) { _readyLock.notify(); }", "-// THIS TEST COMMENTED OUT TEMPORARILY BECAUSE IT IS BROKEN (dlsmith, 2006-08-21)", "-//    _model.closeAllFiles();", "-//    Utilities.clearEventQueue();", "-//    assertNumOpenDocs(1);", "-//    assertLength(0, _model.getActiveDocument());    ", "-//    listener.assertInterpreterReadyCount(1);", "-//    listener.assertNewCount(4);", "-//    listener.assertCloseCount(4);", "-//    listener.assertAbandonCount(4);", "+    _model.closeAllFiles();", "+    Utilities.clearEventQueue();", "+    assertNumOpenDocs(1);", "+    assertLength(0, _model.getActiveDocument()); ", "+    ", "+    // wait for interpreter to be ready", "+    try {", "+      synchronized(_readyLock) {", "+        if (listener.getInterpreterReadyCount() == 0) _readyLock.wait(10000);  // intentionally not a while ", "+      }", "+    }", "+    catch(InterruptedException e) { fail(\"Wait for interpreterReady event was interrupted by \" + e); }", "+    listener.assertInterpreterReadyCount(1);  ", "+    listener.assertNewCount(4);", "+    listener.assertCloseCount(4);", "+    listener.assertAbandonCount(4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b617fdfb35d557cf2ab11503250d4728", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "9b0fcbb3228b9af9991188ef0db212c58aa3b9cb", "commitAfterChange": "42161d6697319e0431a875a1f8336eb6cdd1fe73", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public synchronized void testBreakpointsNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testBreakpointsAndStepsInNonPublicClasses()      throws DebugException, BadLocationException, IOException, InterruptedException", "diff": ["-  public synchronized void testBreakpointsNonPublicClasses() ", "+  public synchronized void testBreakpointsAndStepsInNonPublicClasses() ", "-    BreakpointTestListener debugListener = new BreakpointTestListener();", "+    StepTestListener debugListener = new StepTestListener();", "-      ", "+    ", "+    // Step to next line", "+    synchronized(_notifierLock){", "+      _debugManager.step(DebugManager.STEP_OVER);", "+      _waitForNotifies(2);  // suspended, updated", "+      _notifierLock.wait();", "+    }", "+    ", "+    if (printMessages) System.out.println(\"****\"+getInteractionsText());", "+    debugListener.assertStepRequestedCount(1);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(1); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(2); // fires", "+    debugListener.assertCurrThreadDiedCount(0);", "+    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertBreakpointReachedCount(1);", "+    assertInteractionsContains(\"Baz Line 1\");", "+    assertInteractionsDoesNotContain(\"Bar Line 1\");", "-    debugListener.assertCurrThreadResumedCount(1);  //fires (no waiting)", "+    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "-    debugListener.assertThreadLocationUpdatedCount(2);  //fires", "-    debugListener.assertCurrThreadSuspendedCount(2);  //fires", "+    debugListener.assertThreadLocationUpdatedCount(3);  //fires", "+    debugListener.assertCurrThreadSuspendedCount(3);  //fires", "-    assertInteractionsContains(\"Baz Line 1\");", "-    debugListener.assertCurrThreadResumedCount(2);  //fires (no waiting)", "+    debugListener.assertCurrThreadResumedCount(3);  //fires (no waiting)", "-    debugListener.assertThreadLocationUpdatedCount(2);", "-    debugListener.assertCurrThreadSuspendedCount(2);", "+    debugListener.assertThreadLocationUpdatedCount(3);", "+    debugListener.assertCurrThreadSuspendedCount(3);"]}], "num": 8264}
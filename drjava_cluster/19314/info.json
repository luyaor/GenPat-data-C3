{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d4cfc107b5bb628772ac0857e6d62e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62dd390f5cc3f9c932a1548e973c9899", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "e48d5f3129b8001e5afe1a32af197a9281189fe3", "commitAfterChange": "7c30ebf6c2ad7a3fa703d87cd5aaa9a3fff06bee", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   protected R getSelectedRegion()", "signatureAfterChange": "   protected ArrayList<R> getSelectedRegions()", "diff": ["-  protected R getSelectedRegion() {", "-    TreePath path = _regTree.getSelectionPath();", "-    if (path == null || path.getPathCount() != 3) {", "-      return null;", "+  protected ArrayList<R> getSelectedRegions() {", "+    ArrayList<R> regs = new ArrayList<R>();", "+    TreePath[] paths = _regTree.getSelectionPaths();", "+    if (paths!=null) {", "+      for (TreePath path: paths) {", "+        if (path != null && path.getPathCount() == 3) {", "+          DefaultMutableTreeNode lineNode = (DefaultMutableTreeNode)path.getLastPathComponent();", "+          @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>) lineNode.getUserObject()).region();", "+          regs.add(r);", "+        }", "+      }", "-    else {", "-      DefaultMutableTreeNode lineNode = (DefaultMutableTreeNode)path.getLastPathComponent();", "-      @SuppressWarnings(\"unchecked\") R r = ((RegionTreeUserObj<R>) lineNode.getUserObject()).region();", "-      return r;", "-    }", "+    return regs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b8461cc9a0beccaeb825dfd9d09602", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void updateLines(R r)", "signatureAfterChange": "   public void updateLines(R firstRegion, R lastRegion)", "diff": ["-    * necessarily a region in this manager.  */", "-  public void updateLines(R r) { ", "+    */", "+  public void updateLines(R firstRegion, R lastRegion) { ", "-    SortedSet<R> tail = getTailSet(r);", "+    SortedSet<R> tail = getTailSet(firstRegion);", "+    LinkedList<R> toBeRemoved = new LinkedList<R>();  // nonsense to avoid concurrent modification exception", "-    for (OrderedDocumentRegion region: tailRegions) {", "-      // The following cast is gross, but the silly erasure based generics won't let me execute new R[0]", "-      if (region.getStartOffset() == region.getEndOffset()) removeRegion((R) region);", "-      region.update();", "+    for (R region: tail) {", "+      if (region.compareTo(lastRegion) > 0) break;", "+      if (region.getStartOffset() == region.getEndOffset()) toBeRemoved.add(region); ", "+      else region.update();  // The bounds of this region must be recomputed.", "+", "+    for (R r: toBeRemoved) removeRegion(r);"]}], "num": 19314}
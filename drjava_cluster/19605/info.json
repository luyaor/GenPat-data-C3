{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d977195fe4c6122e3735d3a8e8a2442", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "021f9dcb96407491224aa89749bf3173", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCacheTest.java", "commitBeforeChange": "d95e05b94bb85b9fefc27bcb5d21a4779fe83bf0", "commitAfterChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "signatureAfterChange": "      public void testOldDocumentsInAndOutOfTheCache() throws BadLocationException, IOException", "diff": ["-  public void testDocumentsInAndOutOfTheCache() throws BadLocationException, IOException {", "-    // The documents should not be activated upon creation ", "-    assertEquals(\"There should be 4 documents in the cache\", 0, _cache.getNumInCache());", "-    // Activate all documents and make sure that the right ones get kicked out", "-    // Front of LRU -> a b c d | e f <- out of LRU", "+  ", "+  public void testOldDocumentsInAndOutOfTheCache() throws BadLocationException, IOException {", "+    ", "+    File file1 = tempFile(1);", "+    File file2 = tempFile(2);", "+    File file3 = tempFile(3);", "+    File file4 = tempFile(4);", "+    File file5 = tempFile(5);", "+    File file6 = tempFile(6);", "+    ", "+    // opening a document makes it active", "+    OpenDefinitionsDocument doc1 = openFile(file1);", "+    assertEquals(\"There should be 1 document in the cache\", 1, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc2 = openFile(file2);", "+    assertEquals(\"There should be 2 documents in the cache\", 2, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc3 = openFile(file3);", "+    assertEquals(\"There should be 3 documents in the cache\", 3, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc4 = openFile(file4);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc5 = openFile(file5);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    OpenDefinitionsDocument doc6 = openFile(file6);", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    ", "+    assertEquals(\"Wrong Cache Size\", 4, _cache.getCacheSize());", "+", "+    // cache = [3 4 5 6]", "+    // This tests that isModifiedSinceSave does not cause the document to load into the cache,", "+    // so the two that should have been kicked out, 1 & 2 should not be loaded uppon calling isModified.", "+", "+    assertFalse(\"Document 1 shouldn't be modified\", doc1.isModifiedSinceSave());", "+    assertFalse(\"Document 2 shouldn't be modified\", doc2.isModifiedSinceSave());", "+    assertFalse(\"Document 3 shouldn't be modified\", doc3.isModifiedSinceSave());", "+    assertFalse(\"Document 4 shouldn't be modified\", doc4.isModifiedSinceSave());", "+    assertFalse(\"Document 5 shouldn't be modified\", doc5.isModifiedSinceSave());", "+    assertFalse(\"Document 6 shouldn't be modified\", doc6.isModifiedSinceSave());", "+    ", "+    assertEquals(\"There should be 4 documents in the cache\", 4, _cache.getNumInCache());", "+    ", "-    assertTrue(\"Document 3 shouldn't be ready\", _adapterTable.get(doc3).isReady());", "-    assertTrue(\"Document 4 shouldn't be ready\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"Document 5 shouldn't be ready\", _adapterTable.get(doc5).isReady());", "-    assertTrue(\"Document 6 shouldn't be ready\", _adapterTable.get(doc6).isReady());", "-        ", "-    doc1.getLength(); // 1 6 5 4 | 3 2", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    assertTrue(\"Document 6 should be ready\", _adapterTable.get(doc6).isReady());", "+    ", "+    ", "+    // Rectivate all documents and make sure that the right ones get kicked out", "+ ", "+    doc1.getLength();", "+    doc2.getLength();", "+    doc3.getLength();", "+    doc4.getLength();", "+    ", "+   // cache = [1 2 3 4]", "+    ", "+    assertTrue(\"Document 1 should be ready\", _adapterTable.get(doc1).isReady());", "+    assertTrue(\"Document 2 should be ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    ", "+    doc5.getLength();", "+    // cache -> 2 3 4 5", "+    assertFalse(\"Document 1 is not longer ready\", _adapterTable.get(doc1).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc6.getLength();", "+    // cache -> 3 4 5 6", "+    assertFalse(\"Document 2 is not longer ready\", _adapterTable.get(doc2).isReady());", "+    assertTrue(\"Document 6 should be ready\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"Document 3 should be ready\", _adapterTable.get(doc3).isReady());", "+    assertTrue(\"Document 4 should be ready\", _adapterTable.get(doc4).isReady());", "+    assertTrue(\"Document 5 should be ready\", _adapterTable.get(doc5).isReady());", "+    ", "+    doc1.getLength(); // 4 5 6 1", "-    assertEquals(\"There should still be 1 documents in the cache\", 4, _cache.getNumInCache()); ", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache()); ", "-    doc2.getLength(); // 2 1 6 5 | 4 3", "+    doc2.getLength(); // 5 6 1 2", "-    assertEquals(\"There should still be 2 documents in the cache\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    doc3.getLength(); // 3 2 1 6 | 5 4", "+    doc3.getLength(); // 6 1 2 3", "-    assertEquals(\"There should still be 3 documents in the cache\", 4, _cache.getNumInCache());", "+    assertEquals(\"There should still be 4 documents in the cache\", 4, _cache.getNumInCache());", "-    doc4.getLength(); // 4 3 2 1 | 6 5", "+    doc4.getLength(); // 1 2 3 4", "-    doc5.getLength(); // 5 4 3 2 | 1 6", "+    doc5.getLength(); // 2 3 4 5", "-    doc6.getLength(); // 6 5 4 3 | 2 1", "+    doc6.getLength(); // 3 4 5 6", "-    doc4.getLength(); // 4 6 5 3 | 2 1", "+    doc4.getLength(); // 3 4 5 6", "-    doc5.getLength(); // 5 4 6 3 | 2 1", "+    doc5.getLength(); // 3 4 5 6", "-    doc3.getLength(); // 3 5 4 6 | 2 1", "+    doc3.getLength(); // 3 4 5 6", "-    doc4.getLength(); // 4 3 5 6 | 2 1", "+    doc4.getLength(); // 3 4 5 6", "-    _cache.setCacheSize(5); // 4 3 5 6 | 2 1 ", "+    _cache.setCacheSize(5); // 3 4 5 6", "-    doc2.getLength(); // 2 4 3 5 6 | 1", "+    doc2.getLength(); // 3 4 5 6 2", "-    _cache.setCacheSize(3); // 2 4 3 | 5 6 1", "+    _cache.setCacheSize(3); // 5 6 2", "-    assertTrue(\"The document 4 should be in the cache\", _adapterTable.get(doc4).isReady());", "-    assertTrue(\"The document 3 should be in the cache\", _adapterTable.get(doc3).isReady());", "-    assertFalse(\"The document 5 should now be out of the cache\", _adapterTable.get(doc5).isReady());", "-    assertFalse(\"The document 6 should now be out of the cache\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"The document 6 should be in the cache\", _adapterTable.get(doc6).isReady());", "+    assertTrue(\"The document 5 should be in the cache\", _adapterTable.get(doc5).isReady());", "+    assertFalse(\"The document 3 should now be out of the cache\", _adapterTable.get(doc3).isReady());", "+    assertFalse(\"The document 4 should now be out of the cache\", _adapterTable.get(doc4).isReady());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcff35de693b892b9d0c25dadb85fb4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "17285283461a98a54216b38ffd842a9ade691a61", "commitAfterChange": "c5c5f6e584e52b0f1a2d2a9448693aba4f7f3980", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void testNonStaticWatches() throws Exception", "signatureAfterChange": "   public void testNonStaticWatches() throws Exception", "diff": ["-    debugListener.assertBreakpointSetCount(1);", "+    _debugger.toggleBreakpoint(doc,MONKEY_WITH_INNER_CLASS.indexOf(\"System.out.println(\\\"localVar = \\\" + localVar);\"), 32);", "+    debugListener.assertBreakpointSetCount(2);", "-      interpretIgnoreResult(\"new Monkey().new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+      interpretIgnoreResult(\"new Monkey().bar()\");//new MonkeyInner().new MonkeyInnerInner().innerMethod()\");", "+    _debugger.addWatch(\"localVar\");", "+    // Resumes one thread, finishing it and switching to the next break point", "+    synchronized(_notifierLock) {", "+      _asyncResume();", "+      _waitForNotifies(3);  // breakpointReached, suspended, updated", "+      _notifierLock.wait();", "+    }", "+    debugListener.assertStepRequestedCount(6);  // fires (don't wait)", "+    debugListener.assertCurrThreadResumedCount(7); // fires (don't wait)", "+    debugListener.assertThreadLocationUpdatedCount(8);  // fires", "+    debugListener.assertCurrThreadSuspendedCount(8);  // fires", "+    debugListener.assertBreakpointReachedCount(2);", "+    debugListener.assertCurrThreadDiedCount(0);    ", "+    ", "+    // Test watching a final local variable of an outer class", "+    watches = _debugger.getWatches();", "+    assertEquals(\"watch name incorrect\", \"localVar\", watches.elementAt(6).getName());", "+    assertEquals(\"watch value incorrect\", \"11\", watches.elementAt(6).getValue());", "+    ", "+    // Close doc and make sure breakpoints are removed", "+    _model.closeFile(doc);", "+    debugListener.assertBreakpointRemovedCount(2);  //fires (no waiting)", "+    "]}], "num": 19605}
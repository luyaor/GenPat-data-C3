{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26c5c2740d129f29dca473eef01839e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2ec5ac197ef0f81a56967c8474166a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "1313de8815d48e0a1c60eb5bee6900b6b7af3993", "commitAfterChange": "802c4acbf71daa5d149dbcd67d1f360241574951", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void runTest(final String className, final String fileName)", "signatureAfterChange": "   public List<String> runTest(final List<String> classNames, final List<File> files,                               final boolean isTestAll)", "diff": ["-  public void runTest(final String className, final String fileName) {", "-    Thread t = new Thread(\"JUnit Test Thread\") {", "-      public void run() {", "-        try {", "-          if (!_isTestCase(className)) {", "-            _jvm.nonTestCase();", "-           return;", "+   */", "+  public List<String> runTest(final List<String> classNames, final List<File> files,", "+                              final boolean isTestAll) {", "+    final ArrayList<String> stuff = new ArrayList<String>();", "+    synchronized (stuff) {", "+      _testRunner = new JUnitTestRunner(_jmc);", "+      new Thread(\"JUnit Test Thread\") {", "+        public void run() {", "+          try {", "+            boolean noJUnitTests = true;", "+            TestSuite suite = new TestSuite();", "+            synchronized (stuff) {", "+              try {", "+                for (int i = 0; i < classNames.size(); i++) {", "+                  String className = classNames.get(i);", "+                  if (_isTestCase(className)) {", "+                    Test test = _testRunner.getTest(className);", "+                    suite.addTest(test);", "+                    stuff.add(className);", "+                    noJUnitTests = false;", "+                  }", "+                }", "+              }", "+              finally {", "+                stuff.notify();", "+              }", "+            }", "+            if (noJUnitTests) {", "+              _jmc.nonTestCase(isTestAll);", "+              //            _jmc.testSuiteEnded(new JUnitError[] {new JUnitError(null, \"No JUnit tests open!\", false, \"\")});", "+              return;", "+            }", "+            ", "+            TestResult result = _testRunner.doRun(suite); ", "+            ", "+            JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "+            ", "+            Enumeration failures = result.failures();", "+            Enumeration errEnum = result.errors();", "+            ", "+            int i = 0;", "+            ", "+            while (errEnum.hasMoreElements()) {", "+              TestFailure tErr = (TestFailure) errEnum.nextElement();", "+              errors[i] = _makeJUnitError(tErr, classNames, true, files);", "+              i++;", "+            }", "+            while (failures.hasMoreElements()) {", "+              TestFailure tFail = (TestFailure) failures.nextElement();", "+              errors[i] = _makeJUnitError(tFail, classNames, false, files);", "+              i++;", "+            }", "+            ", "+            _jmc.testSuiteEnded(errors);", "-          Test suite = _testRunner.getTest(className);", "-          TestResult result = _testRunner.doRun(suite); ", "-          ", "-          JUnitError[] errors = new JUnitError[result.errorCount() + result.failureCount()];", "-          ", "-          Enumeration failures = result.failures();", "-          Enumeration errEnum = result.errors(); ", "-          ", "-          int i=0;", "-          ", "-          while ( errEnum.hasMoreElements()) {", "-            TestFailure tErr = (TestFailure) errEnum.nextElement();", "-            errors[i] = _makeJUnitError(tErr, className, true, fileName);", "-            i++;", "+          catch (Throwable t) {", "+            _failedWithError(t);", "-          ", "-          while (failures.hasMoreElements()) {", "-            TestFailure tFail = (TestFailure) failures.nextElement();", "-            errors[i] = _makeJUnitError(tFail, className, false, fileName);", "-            i++;", "-          }", "-          ", "-          _jvm.testSuiteFinished(errors);", "-        catch (Throwable t) {", "-          JUnitError[] errors = new JUnitError[1];", "-          errors[0] = new JUnitError(new File(fileName), -1, -1, t.getMessage(),", "-                                    false, className, StringOps.getStackTrace(t));", "-          _jvm.testSuiteFinished(errors);", "-        }", "+      }.start();", "+      try {", "+        stuff.wait();", "-    };", "-    t.start();", "+      catch (InterruptedException ex) {", "+      }", "+    }", "+    return stuff;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdc1f0376dc1d832b92210aafc6a5d5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "66e5a8936ddc9a6a54b90689df97ecc4178fb4cc", "commitAfterChange": "937476ee8896348910d6d75752ebec9108601607", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, final boolean allTests)", "diff": ["-    ", "-    ", "+", "-    ArrayList<String> classNames = new ArrayList<String>();", "+    final ArrayList<String> classNames = new ArrayList<String>();", "-    ArrayList<File> files = new ArrayList<File>();", "+    final ArrayList<File> files = new ArrayList<File>();", "-    // synchronized over _compilerModel to ensure that compilation and junit testing are mutually exclusive.", "-    // TODO: should we disable compile commands while testing?  Should we use protected flag instead of lock?", "-//    Utilities.show(\"Preparing to synchronize\");", "-    synchronized(_compilerModel.getCompilerLock()) {", "-      /** Set up junit test suite on slave JVM; get TestCase classes forming that suite */", "-      List<String> tests = _jvm.findTestClasses(classNames, files).unwrap(null);", "-      if (tests == null || tests.isEmpty()) {", "-        nonTestCase(allTests);", "-        return;", "-      }", "-      ", "-      /** Run the junit test suite that has already been set up on the slave JVM */", "-      _testInProgress = true;", "-//        System.err.println(\"Spawning test thread\");", "-      new Thread(new Runnable() {", "-        public void run() { ", "-          try {", "-//              Utilities.show(\"Starting JUnit\");", "-            _notifyJUnitStarted(); ", "-            boolean testsPresent = _jvm.runTestSuite();  // The false return value could be changed to an exception.", "-            if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "-          }", "-          catch(RemoteException e) { // Unit testing aborted; cleanup; hourglassOff already called in junitStarted", "-            _notifyJUnitEnded();  // balances junitStarted()", "-            _testInProgress = false;", "+    /** Run the junit test suite that has already been set up on the slave JVM */", "+    _testInProgress = true;", "+    // System.err.println(\"Spawning test thread\");", "+    new Thread(new Runnable() {", "+      public void run() { ", "+        // TODO: should we disable compile commands while testing?  Should we use protected flag instead of lock?", "+        // Utilities.show(\"Preparing to synchronize\");", "+        ", "+        // The call to findTestClasses had to be moved out of the event thread (bug 2722310)", "+        // The event thread is still blocked in findTestClasses when JUnit needs to", "+        // have a class prepared. This invokes EventHandlerThread._handleClassPrepareEvent, which puts a call to", "+        // _debugger.getPendingRequestManager().classPrepared(e); (which presumably", "+        // deals with preparing the class) on the event thread using invokeLater.", "+        // This, however, doesn't get executed because the event thread is still blocking --> deadlock.", "+        synchronized(_compilerModel.getCompilerLock()) {", "+          // synchronized over _compilerModel to ensure that compilation and junit testing are mutually exclusive.", "+          /** Set up junit test suite on slave JVM; get TestCase classes forming that suite */", "+          List<String> tests = _jvm.findTestClasses(classNames, files).unwrap(null);", "+          if (tests == null || tests.isEmpty()) {", "+            nonTestCase(allTests);", "+            return;", "-      }).start();", "-    }", "+        ", "+        try {", "+          // Utilities.show(\"Starting JUnit\");", "+          ", "+          _notifyJUnitStarted(); ", "+          boolean testsPresent = _jvm.runTestSuite();  // The false return value could be changed to an exception.", "+          if (! testsPresent) throw new RemoteException(\"No unit test classes were passed to the slave JVM\");", "+        }", "+        catch(RemoteException e) { // Unit testing aborted; cleanup; hourglassOff already called in junitStarted", "+          _notifyJUnitEnded();  // balances junitStarted()", "+          _testInProgress = false;", "+        }", "+      }", "+    }).start();"]}], "num": 3925}
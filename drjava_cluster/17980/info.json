{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5be25801f67bf30eea044a657b303175", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "430500c8b1e47f08b75e1ac6797eaaa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "06a5c45ef1fc363387e831a72bae96256df629e8", "commitAfterChange": "d38c322133f95b0654ce8d1107bb215e7f56de2e", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "     public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i)", "signatureAfterChange": "   public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i, ClasspathManager c)", "diff": ["-     */", "-    public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i) {", "-      super(i);", "-      // The protected variable classLoader contains the class loader to use", "-      // to find classes. When a new class path is added to the loader,", "-      // it adds on an auxilary classloader and chains the old classLoader", "-      // onto the end.", "-      // Here we initialize classLoader to be the system class loader.", "-      classLoader = new WrapperClassLoader(getClass().getClassLoader()); // classLoader is only used in getResource()", "-      // NOTE that the superclass of ClassLoaderExtension (TreeClassLoader) adds (appends)", "-      // URLs to the classpath of this classloader", "-", "-      // don't load the dynamic java stuff using the sticky loader!", "-      // without this, interpreter-defined classes don't work.", "-      String[] excludes = {", "-        \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$InterpreterExtension\",", "-        \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$ClassLoaderExtension\"", "-      };", "-", "-      if (!classLoaderCreated) {", "-        _stickyLoader = new StickyClassLoader(this, // Sticky's newLoader, indirectly points to the (dynamic) classLoader", "-                                              classLoader, // Sticky's oldLoader", "-                                              excludes);", "-        classLoaderCreated = true;", "-      }", "-", "-      // we will use this to getResource classes", "-    }", "+   */", "+  public ClassLoaderExtension(koala.dynamicjava.interpreter.Interpreter i, ClasspathManager c) {", "+    super(i);", "+    cpm = c;", "+    // The protected variable classLoader contains the class loader to use", "+    // to find classes. When a new class path is added to the loader,", "+    // it adds on an auxilary classloader and chains the old classLoader", "+    // onto the end.", "+    // Here we initialize classLoader to be the system class loader, and wrap it to not load edu.rice.cs classes", "+    classLoader = new WrapperClassLoader(getClass().getClassLoader()); // classLoader is only used in getResource()", "+    // NOTE that the superclass of ClassLoaderExtension (TreeClassLoader) adds (appends)", "+    // URLs to the classpath of this classloader", "+    ", "+    // don't load the dynamic java stuff using the sticky loader!", "+    // without this, interpreter-defined classes don't work.", "+    String[] excludes = {", "+      \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$InterpreterExtension\",", "+      \"edu.rice.cs.drjava.model.repl.DynamicJavaAdapter$ClassLoaderExtension\"", "+    };", "+    ", "+    if (!classLoaderCreated) {", "+      _stickyLoader = new StickyClassLoader(this, // Sticky's newLoader, indirectly points to the (dynamic) classLoader", "+                                            classLoader, // Sticky's oldLoader", "+                                            excludes);", "+      classLoaderCreated = true;", "+    // we will use this to getResource classes", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c969da9f0988f4b24be53bf8042f8903", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "e783b76611d7e152e89196e486dc2b772b1c80a9", "commitAfterChange": "b796c376864058d232f1be02ccfb0bd7548b3f89", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   private synchronized void _updateWatches() throws DebugException", "signatureAfterChange": "   private synchronized void _updateWatches() throws DebugException", "diff": ["-", "-          // If we don't find it here, loop through any enclosing classes", "-          //  Start at this$N, where N is the number of dollar signs in", "-          //  the reference type's name, minus one.", "-          int outerIndex = numDollars - 1;", "-          Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "-          while ((field == null) && (outerThis != null)) {", "-            outer = (ObjectReference) outer.getValue(outerThis);", "-            outerRt = outer.referenceType();", "-            field = outerRt.fieldByName(currName);", "+          ", "+          if (obj != null) {", "+            // We're not in a static context", "-            if (field == null) {", "-              // Enter the loop again with the next outer enclosing class", "-              outerIndex--;", "-              outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+            // If we don't find it in this class, loop through any enclosing ", "+            // classes. Start at this$N, where N is the number of dollar signs in", "+            // the reference type's name, minus one.", "+            int outerIndex = numDollars - 1;", "+            Field outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+            while ((field == null) && (outerThis != null)) {", "+              outer = (ObjectReference) outer.getValue(outerThis);", "+              outerRt = outer.referenceType();", "+              field = outerRt.fieldByName(currName);", "+              ", "+              if (field == null) {", "+                // Enter the loop again with the next outer enclosing class", "+                outerIndex--;", "+                outerThis = outerRt.fieldByName(\"this$\" + outerIndex);", "+              }", "+            }", "+          }", "+          else {", "+            // We're in a static context", "+            ", "+            // If we don't find it in this class, loop through any enclosing", "+            // classes. Do this by loading any outer classes by invoking the ", "+            // method on the class loader that loaded this class and passing", "+            // it the class name with the last class removed each time.", "+            String rtClassName = outerRt.name();", "+            int index = rtClassName.lastIndexOf(\"$\");", "+            while ((field == null) && (index != -1)) {", "+              rtClassName = rtClassName.substring(0, index);", "+              List l = _vm.classesByName(rtClassName);", "+              if (l.isEmpty()) {", "+                // field is null, we will end up setting", "+                // the value to no value", "+                break;", "+              }", "+              outerRt = (ReferenceType)l.get(0);", "+              field = outerRt.fieldByName(currName);", "+              ", "+              if (field == null) {", "+                // Enter the loop again with the next outer enclosing class", "+                index = rtClassName.lastIndexOf(\"$\");", "+              }"]}], "num": 17980}
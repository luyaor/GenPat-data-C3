{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f1775ea76c83e6fb687143d9d581e33", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db4e547cbd20efd832ba01de708db40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsComment.java", "commitBeforeChange": "ef72bde352b18dc4ba661aa460f476829dae95cc", "commitAfterChange": "42669dc5656697beebfecb16842ba181e2bab301", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(DefinitionsDocument doc)", "signatureAfterChange": "   boolean applyRule(DefinitionsDocument doc)", "diff": ["-    // return ", "-    //   (stateAtRelLocation(dist. to PREVSTART) != INSIDE_BLOCK_COMMENT)", "-    // NB: not always accurate.  No false positives, but may give false", "-    // negative.  Example:", "-    // * /  foo  / *", "-    // bar", "-    // Indenting at \"bar\" will not notice that its comment begins on the", "-    // \"foo\" line.  But it will be treated as a continuation of the comment", "-    // before \"foo\", so I think this is acceptable.", "-    throw new RuntimeException(\"Not yet implemented!\");", "+    int cursor;", "+", "+    // Move back to start of current line", "+    cursor = doc.getLineStartPos(doc.getCurrentLocation());", "+    ", "+    // If the start of the current line is the start of the", "+    // document, there was no previous line and so this", "+    // line must have started the comment", "+    if(cursor == DefinitionsDocument.DOCSTART) {", "+      return false;", "+    } else {", "+      // Move the cursor to the previous line", "+      cursor = cursor - 1;", "+      ", "+      // Move it to the start of the previous line", "+      cursor = doc.getLineStartPos(cursor);", "+      ", "+      // Return if the start of the previous line is", "+      // in a comment.", "+      BraceReduction reduced = doc.getReduced();", "+      reduced.resetLocation();", "+      ReducedModelState state = reduced.stateAtRelLocation(cursor -", "+\t\t\t\t\t\t\t   reduced.absOffset());", "+      return !state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53f815700620083ada43636141d43dbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionPrevLineStartsComment.java", "commitBeforeChange": "c0487ade35919fa6d08b7c39361898d3c5751c04", "commitAfterChange": "7b4296c095d59b57f25b910a8bdce57816e7621f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "signatureAfterChange": "   boolean applyRule(AbstractDJDocument doc, int reason)", "diff": ["-   */", "+    */", "-    // If the start of the current line is the start of the", "-    // document, there was no previous line and so this", "-    // line must have started the comment", "-    if (cursor == AbstractDJDocument.DOCSTART) {", "-      return false;", "-    } else {", "-      // Move the cursor to the previous line", "-      cursor = cursor - 1;", "-      ", "-      // Move it to the start of the previous line", "-      cursor = doc.getLineStartPos(cursor);", "-      ", "-      // Return if the start of the previous line is", "-      // in a comment.", "-      //BraceReduction reduced = doc.getReduced();", "-      doc.resetReducedModelLocation();", "-      ReducedModelState state = doc.stateAtRelLocation(cursor -", "-          doc.getCurrentLocation());", "-      return !state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT);", "-    }", "+    /* If the start of the current line is the start of the document, there was no previous line and so this line must ", "+     * have started the comment. */", "+    if (cursor == AbstractDJDocument.DOCSTART) return false;", "+    ", "+    // Move the cursor to the previous line", "+    cursor = cursor - 1;", "+    ", "+    // Move it to the start of the previous line", "+    cursor = doc.getLineStartPos(cursor);", "+    ", "+    // Return if the start of the previous line is in a comment.", "+//    BraceReduction reduced = doc.getReduced();", "+    doc.resetReducedModelLocation();", "+    ReducedModelState state = doc.stateAtRelLocation(cursor - doc.getCurrentLocation());", "+    return !state.equals(ReducedModelStates.INSIDE_BLOCK_COMMENT);"]}], "num": 15812}
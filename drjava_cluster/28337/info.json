{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44f434181106e36d4c5f248be67f3b3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e325a0de59bedfb566256e5dacf36e0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 430, "methodNumberAfterChange": 430, "signatureBeforeChange": "\r \r   public void forBitwiseXorExpression(BitwiseXorExpression that)", "signatureAfterChange": "    public void forBitwiseXorExpression(BitwiseXorExpression that)", "diff": ["-\r", "-  public void forBitwiseXorExpression(BitwiseXorExpression that) {\r", "-    forBitwiseXorExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getLeft().visit(this);\r", "-    that.getRight().visit(this);\r", "-    forBitwiseXorExpressionOnly(that);\r", "-  }\r", "+", "+  public void forBitwiseXorExpression(BitwiseXorExpression that) {", "+    forBitwiseXorExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getLeft().visit(this);", "+    that.getRight().visit(this);", "+    forBitwiseXorExpressionOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe7eb08a6db6dcb452a7c80ba774d130", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 456, "methodNumberAfterChange": 456, "signatureBeforeChange": "\r \r   public void forInstanceofExpression(InstanceofExpression that)", "signatureAfterChange": "    public void forInstanceofExpression(InstanceofExpression that)", "diff": ["-\r", "-  public void forInstanceofExpression(InstanceofExpression that) {\r", "-    forInstanceofExpressionDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getValue().visit(this);\r", "-    that.getType().visit(this);\r", "-    forInstanceofExpressionOnly(that);\r", "-  }\r", "+", "+  public void forInstanceofExpression(InstanceofExpression that) {", "+    forInstanceofExpressionDoFirst(that);", "+    if (prune(that)) return;", "+    that.getValue().visit(this);", "+    that.getType().visit(this);", "+    forInstanceofExpressionOnly(that);", "+  }"]}], "num": 28337}
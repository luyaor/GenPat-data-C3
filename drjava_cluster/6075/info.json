{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa8422a9f397bf6d8c407ba49ce28c35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19edb881c8dbb880cfc29cfa7d728e20", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Augmentor.java", "commitBeforeChange": "fda8ed09ab1fd83aa0718b8a14f03f9745835af9", "commitAfterChange": "f82cbb172a00c2d57ed2feb202b1bece43cc7ef2", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName)", "signatureAfterChange": "   private static void writeSafeValueEquals(SymbolData sd, int baseIndent, String methodName)", "diff": ["-    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", \"boolean[]\"};", "+    String[] primitiveTypes = new String[]{\"byte[]\", \"short[]\", \"char[]\", \"int[]\", \"long[]\", \"float[]\", \"double[]\", ", "+      \"boolean[]\"};", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * As a helper to equals(Object), it recursively compares any two objects,\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \" * including nulls, arrays, and standard reference types.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * This method is automatically generated by the LanguageLevelConverter.\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * As a helper to equals(Object), it recursively compares any two objects,\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + ", "+                    \" * including nulls, arrays, and standard reference types.\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 1) + \"private boolean \" + methodName + \"(java.lang.Object o1, java.lang.Object o2) {\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 1) + \"private boolean \" + methodName + ", "+                    \"(java.lang.Object o1, java.lang.Object o2) {\" + newLine + newLine);", "-    _writeToFileOut(indentString(baseIndent, 3) + \"public boolean valueFor(java.lang.Object o1, java.lang.Object o2) {\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (o1 instanceof java.lang.Object[] && o2 instanceof java.lang.Object[]) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 3) + ", "+                    \"public boolean valueFor(java.lang.Object o1, java.lang.Object o2) {\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + ", "+                    \"if (o1 instanceof java.lang.Object[] && o2 instanceof java.lang.Object[]) {\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet<java.lang.Object>());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, \" + ", "+                      \"(java.lang.Object[]) o2, new java.util.HashSet<java.lang.Object>());\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, (java.lang.Object[]) o2, new java.util.HashSet());\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((java.lang.Object[]) o1, \" + ", "+                      \"(java.lang.Object[]) o2, new java.util.HashSet());\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o1 instanceof \" + type + \" && o2 instanceof \" + type + \") {\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((\" + type + \") o1, (\" + type + \") o2);\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"else if (o1 instanceof \" + type + \" && o2 instanceof \" + ", "+                      type + \") {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 5) + \"return arrayEquals((\" + type + \") o1, (\" + type + \") o2);\" + ", "+                      newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"// o1 and o2 should be arrays, but if not, or if they have different types, equals(Object) is called\" + newLine); ", "+    _writeToFileOut(indentString(baseIndent, 5) + \"// o1 and o2 should be arrays, but if not, \" + ", "+                    \"or if they have different types, equals(Object) is called\" + newLine); ", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(\" + type + \" array1, \" + type + \" array2) {\" + newLine);", "-      _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(\" + type + \" array1, \" + type + ", "+                      \" array2) {\" + newLine);", "+      _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" +", "+                      newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet<java.lang.Object> alreadyCompared) {\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, \" + ", "+                      \"final java.lang.Object[] array2, java.util.HashSet<java.lang.Object> alreadyCompared) {\" + ", "+                      newLine + newLine);", "-      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1, final java.lang.Object[] array2, java.util.HashSet alreadyCompared) {\" + newLine + newLine);", "+      _writeToFileOut(indentString(baseIndent, 3) + \"public boolean arrayEquals(final java.lang.Object[] array1,\" +", "+                      \" final java.lang.Object[] array2, java.util.HashSet alreadyCompared) {\" + newLine + newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"if ((o == null) || ! (o instanceof ArrayPair)) { return false; }\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"else { return (array1.equals(((ArrayPair) o).array1())) && (array2.equals(((ArrayPair) o).array2())); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + \"if ((o == null) || ! (o instanceof ArrayPair)) { return false; }\" + ", "+                    newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + ", "+                    \"else { return (array1.equals(((ArrayPair) o).array1())) && \" + ", "+                    \"(array2.equals(((ArrayPair) o).array2())); }\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"public int hashCode() { return array1.hashCode() ^ (array2.hashCode() << 1); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + ", "+                    \"public int hashCode() { return array1.hashCode() ^ (array2.hashCode() << 1); }\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 4) + \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);", "+    _writeToFileOut(indentString(baseIndent, 4) + ", "+                    \"if (array1.length != array2.length) { return false; }\" + newLine + newLine);", "-    _writeToFileOut(indentString(baseIndent, 5) + \"if (alreadyCompared.contains(currentPair)) { return true; }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 5) + \"if (alreadyCompared.contains(currentPair)) { return true; }\" + ", "+                    newLine);", "-    _writeToFileOut(indentString(baseIndent, 6) + \"if (array1[i] instanceof java.lang.Object[] && array2[i] instanceof java.lang.Object[]) {\" + newLine);", "-    _writeToFileOut(indentString(baseIndent, 7) + \"result = arrayEquals((java.lang.Object[]) array1[i], (java.lang.Object[]) array2[i], alreadyCompared);\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 6) + ", "+                    \"if (array1[i] instanceof java.lang.Object[] && array2[i] instanceof java.lang.Object[]) {\" + ", "+                    newLine);", "+    _writeToFileOut(indentString(baseIndent, 7) + ", "+                    \"result = arrayEquals((java.lang.Object[]) array1[i], \" + ", "+                    \"(java.lang.Object[]) array2[i], alreadyCompared);\" + ", "+                    newLine);", "-    _writeToFileOut(indentString(baseIndent, 2) + \"else if (o1.getClass().isArray() && o2.getClass().isArray()) { return new ArrayEquals().valueFor(o1, o2); }\" + newLine);", "+    _writeToFileOut(indentString(baseIndent, 2) + ", "+                    \"else if (o1.getClass().isArray() && o2.getClass().isArray()) \" +", "+                    \"{ return new ArrayEquals().valueFor(o1, o2); }\" + newLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6570202fadfd87a15c570528d178ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/XMLProjectFileParserTest.java", "commitBeforeChange": "015f584d4fd84a66059ace3c33a4092f1db5bd4c", "commitAfterChange": "d76a1ef24ee4d923e6ea3f06169ea8196ce68877", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testXMLParse() throws IOException, MalformedProjectFileException, java.text.ParseException", "signatureAfterChange": "   public void testXMLParse() throws IOException, MalformedProjectFileException, java.text.ParseException", "diff": ["+      ", "+      \"    <excluded>\\n\"+", "+      \"      <file name=\\\"edu/rice/cs/drjava/ui/config/ColorOptionComponent.java\\\" package=\\\"edu.rice.cs.drjava.ui.config\\\" timestamp=\\\"30-Mar-2008 09:27:01\\\">\\n\"+", "+      \"        <select from=\\\"0\\\" to=\\\"0\\\"/>\\n\"+", "+      \"        <scroll column=\\\"0\\\" row=\\\"0\\\"/>\\n\"+", "+      \"      </file>\\n\"+", "+      \"    </excluded>\\n\"+", "+      ", "+    assertEquals(\"number of excluded files\", 1, pfir.getExcludedFiles().length);"]}], "num": 6075}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63c0c27ff7cf3fb826effe0178f5f30e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a011424f695b29ff613120129442ddb9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "8a844a8f24b61cc57420bdf2211acc634ec89fef", "commitAfterChange": "f22d0a1255bdf1029bb9a8ca3e33cbdaf890f9a0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static boolean isEnum(Class<?> c)", "signatureAfterChange": "   public static boolean isEnum(Class<?> c)", "diff": ["-    try {", "-      return _tigerEnabled && (c.getSuperclass() == Class.forName(\"java.lang.Enum\"));", "-    }", "-    // this try/catch block should in fact not be there, but to use", "-    // c.isEnum() instead if the value of the ENUM flag", "-    // was known (see commented line below)", "-    catch(ClassNotFoundException e){", "-      throw new ExecutionError(\"Tiger is enabled, but cannot find class java.lang.Enum! Please contact the DynamicJava/DrJava team (javaplt@cs.rice.edu).\");", "-    }", "-", "-    //return _tigerEnabled && c.isEnum();", "+    System.out.println(\"enabled: \"+_tigerEnabled+\", \"+c+\".super: \"+c.getSuperclass());", "+    return _tigerEnabled && c.getSuperclass()!=null && (c.getSuperclass().getName().equals(\"java.lang.Enum\"));", "+    ", "+    // The following is what it should be.  The reason why this commented is that", "+    // setting the ENUM modifier in the EnumDeclaration constructor causes some other", "+    // problems when trying to access the elements of the enum using reflection.", "+    // return _tigerEnabled && ((c.getModifiers() & ENUM) != 0); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd010fb99ac1d27bd39a638ecd7ba0e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelJUnitTest.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "signatureAfterChange": "   public void testJUnitAllWithNoValidTests() throws Exception", "diff": ["+    _log.log(\"First test of NoValidTests complete\");", "+    ", "+    _log.log(\"Second listener added to model\");", "-//    System.err.println(\"-----> file = \"+file+\" -- canWrite() = \"+file.canWrite()+\" -- exists() = \"+file.exists());", "-    saveFile(doc, new FileSelector(file));", "+    System.out.println(\"-----> file = \"+file+\" -- canWrite() = \"+file.canWrite()+\" -- exists() = \"+file.exists());", "+    doc.saveFile(new FileSelector(file));", "-", "+    ", "+    _log.log(\"Resetting compile counts\");", "-    saveFile(doc2, new FileSelector(file2));", "+    doc2.saveFile(new FileSelector(file2));"]}], "num": 29000}
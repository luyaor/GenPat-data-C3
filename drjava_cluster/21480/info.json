{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc82f2c42f2b1b9d4b3cf3c262312d11", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a86e8d466cfd98dadcb809a37beafc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/UnaryOpProperty.java", "commitBeforeChange": "abaea23707eba81455db9185a249740d89273b85", "commitAfterChange": "0dda00089189758fcd0a0e6dab08cb8c08b0176d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public UnaryOpProperty(String name,                          String help,                          Lambda<R,P> op,                          Lambda<P,String> parse,                          Lambda<String,R> format)", "signatureAfterChange": "   public UnaryOpProperty(String name,                          String help,                          Lambda<R,P> op,                          Lambda<P,String> parse,                          Lambda<String,R> format)", "diff": ["+  /** Create an eager property. */", "+  public UnaryOpProperty(String name,", "+                         String help,", "+                         Lambda<R,P> op,", "+                         Lambda<P,String> parse,", "+                         Lambda<String,R> format) {", "+    this(name, help, op, \"op\", null, parse, format);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c7f9ff57f007fad033ef9a15e6f798", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/BinaryOpProperty.java", "commitBeforeChange": "abaea23707eba81455db9185a249740d89273b85", "commitAfterChange": "0dda00089189758fcd0a0e6dab08cb8c08b0176d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public BinaryOpProperty(String name,                           String help,                           Lambda2<P,Q,R> op,                           Lambda<P,String> parse1,                           Lambda<Q,String> parse2,                           Lambda<String,R> format)", "signatureAfterChange": "   public BinaryOpProperty(String name,                           String help,                           Lambda2<P,Q,R> op,                           Lambda<P,String> parse1,                           Lambda<Q,String> parse2,                           Lambda<String,R> format)", "diff": ["+  /** Create an eager property. */", "+  public BinaryOpProperty(String name,", "+                          String help,", "+                          Lambda2<P,Q,R> op,", "+                          Lambda<P,String> parse1,", "+                          Lambda<Q,String> parse2,", "+                          Lambda<String,R> format) {", "+    this(name,help,op,\"op1\",null,parse1,\"op2\",null,parse2,format);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1c6c8738180fa2f638c8643bdfcdb05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitError.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public JUnitError(String message, boolean isWarning, String test)", "signatureAfterChange": "   public JUnitError(String message, boolean isWarning, String test)", "diff": ["-    super(message, isWarning);", "-    _stackTrace = \"No associated stack trace\";", "-    _test = test;", "-    _className = \"\";", "+    this(null, -1, -1, message, isWarning, test, \"\", \"No associated stack trace\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3dbf082d83de61d277b9baa2dd27907", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "8cb3141a044af3c7f18d018980f5a22b0b342ea8", "commitAfterChange": "3c8d894853a99e6e32b5d7c276413441b9c000ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public DefinitionsDocument(Indenter indenter, GlobalEventNotifier notifier)", "signatureAfterChange": "   public DefinitionsDocument(Indenter indenter, GlobalEventNotifier notifier)", "diff": ["-  public DefinitionsDocument(Indenter indenter, GlobalEventNotifier notifier) {", "-    resetUndoManager();", "+  /** Convenience constructor used ?? */", "+  public DefinitionsDocument(Indenter indenter, GlobalEventNotifier notifier) {", "+    // initialize _indenter, _notifier, _undoManager, _wrappedPosListLock, _editor", "+    this(indenter, notifier, new CompoundUndoManager(notifier));", "+    // finish setting up _undomanager", "+    _undoManager.setLimit(UNDO_LIMIT);", "+  }"]}], "num": 21480}
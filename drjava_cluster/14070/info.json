{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "013ed8e7a34beb2a528808174c17d4a3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02492a9fe2f0383e4dca66e9b5d8974d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 52, "signatureBeforeChange": "   public void testSimpleAssignBoxAddExp()", "signatureAfterChange": "   public void testSimpleAssignBoxAddExp() throws ExceptionReturnedException", "diff": ["-  public void testSimpleAssignBoxAddExp() {", "-    Node exp = _parseCode(\"X = new Integer(1) + new Integer(3);\").get(0);", "+  public void testSimpleAssignBoxAddExp() throws ExceptionReturnedException {", "+    String text = \"X = new Integer(1) + new Integer(3);\";", "+    String leftExpected = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    String rightExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: java.lang.Integer) [(koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.AddExpression: (koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 1 1 int)])) (koala.dynamicjava.tree.ObjectMethodCall: intValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Integer) [(koala.dynamicjava.tree.IntegerLiteral: 3 3 int)]))) (koala.dynamicjava.tree.IntType: int))])\";", "+    _checkBinaryExpression(text, leftExpected, rightExpected);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "476fbc55bc7922d86ed9911fa8da7e06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "commitAfterChange": "dd7f7fbbfae186b155b4ab01f1629e1623154745", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "      public void testSimpleAssignBox()", "signatureAfterChange": "      public void testSimpleAssignBox() throws ExceptionReturnedException", "diff": ["-  public void testSimpleAssignBox() {", "-    Node exp = _parseCode(\"B = true;\").get(0);", "+  public void testSimpleAssignBox() throws ExceptionReturnedException {", "+    String text = \"B = true;\";", "+    String leftExpected = \"(koala.dynamicjava.tree.QualifiedName: B)\";", "+    String rightExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: true true boolean)])\";", "+    _checkBinaryExpression(text, leftExpected, rightExpected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52e0d186becaadd2e1bdca0624f4bc0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public void testSimpleAssignUnbox()", "signatureAfterChange": "   public void testSimpleAssignUnbox() throws ExceptionReturnedException", "diff": ["-  public void testSimpleAssignUnbox() {  ", "-    Node exp = _parseCode(\"b = new Boolean(false);\").get(0);", "+  public void testSimpleAssignUnbox() throws ExceptionReturnedException {  ", "+    String text = \"b = new Boolean(false);\";", "+    String leftExpected = \"(koala.dynamicjava.tree.QualifiedName: b)\";", "+    String rightExpected = \"(koala.dynamicjava.tree.ObjectMethodCall: booleanValue null (koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: Boolean) [(koala.dynamicjava.tree.BooleanLiteral: false false boolean)]))\";", "+    _checkBinaryExpression(text, leftExpected, rightExpected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8e49b1a55e38c06ae780d98c8ca89f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "520c98c03a1e651efb4dfbf7d7f2a55510c74658", "commitAfterChange": "3f953b8fb783fe3ca1b336468898f35cd9cde7db", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public void testSimpleAssignBoxInt()", "signatureAfterChange": "   public void testSimpleAssignBoxInt() throws ExceptionReturnedException", "diff": ["-  public void testSimpleAssignBoxInt() {", "-    Node exp = _parseCode(\"X = 3 + 5;\").get(0);", "+  public void testSimpleAssignBoxInt() throws ExceptionReturnedException {", "+    String text = \"X = 3 + 5;\";", "+    String leftExpected = \"(koala.dynamicjava.tree.QualifiedName: X)\";", "+    String rightExpected = \"(koala.dynamicjava.tree.SimpleAllocation: (koala.dynamicjava.tree.ReferenceType: java.lang.Integer) [(koala.dynamicjava.tree.CastExpression: (koala.dynamicjava.tree.AddExpression: (koala.dynamicjava.tree.IntegerLiteral: 3 3 int) (koala.dynamicjava.tree.IntegerLiteral: 5 5 int)) (koala.dynamicjava.tree.IntType: int))])\";", "+    _checkBinaryExpression(text, leftExpected, rightExpected);"]}], "num": 14070}
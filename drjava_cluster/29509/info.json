{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9ecc6a0a81ef9ac632aba7e8ca2f3c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ebe7827c450b522420d0da5ea8fe549", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "55fb98a726c0190aa8a7fbeee084f55def19ac79", "commitAfterChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void addDocument(INavigatorItem doc, String path)", "diff": ["-   */", "-  public void addDocument(INavigatorItem doc, String path) throws IllegalArgumentException {", "-    GroupNode _root = null;", "-    ", "-      ", "-      for (GroupNode r: _roots){", "-      ", "+   */", "+  public void addDocument(INavigatorItem doc, String path) {", "+    ", "+    synchronized(_model) {", "+      ", "+      GroupNode root = null;", "+      ", "+      for (GroupNode r: _roots) {", "+        if (r.getFilter().accept(doc)) {", "+          root = r;", "+          break;", "+        }", "+      }", "+      ", "+      if (root == null) return;", "-      String pathSoFar=\"\";", "-      InnerNode lastNode = _root;", "+      StringBuffer pathSoFarBuf = new StringBuffer();", "+      InnerNode lastNode = root;", "-        pathSoFar += (element + \"/\");", "+        pathSoFarBuf.append(element).append('/');", "+        String pathSoFar = pathSoFarBuf.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f89be1f1de4ddfbecd546ef781ec715d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/XMLProjectFileParserTest.java", "commitBeforeChange": "c3fb656e676b9139addd78f759d02f23bc0ddcb3", "commitAfterChange": "0f1ebded0cf3f3c1433e87b9a6d077f0d67078af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testXMLParse() throws IOException, MalformedProjectFileException, java.text.ParseException", "signatureAfterChange": "   public void testXMLParse() throws IOException, MalformedProjectFileException, java.text.ParseException", "diff": ["-    File base = new File(System.getProperty(\"user.dir\"));", "+    File base = new File(f.getParent());", "-    assertEquals(\"first source filename\", new File(root,\"edu/rice/cs/drjava/DrJava.java\").getAbsolutePath(),", "-                 pfir.getSourceFiles()[0].getPath());", "+    assertEquals(\"first source filename\", new File(root,\"edu/rice/cs/drjava/DrJava.java\").getCanonicalPath(),", "+                 pfir.getSourceFiles()[0].getCanonicalPath());", "-    assertEquals(\"last source filename\", new File(root,\"edu/rice/cs/drjava/ui/BackgroundColorListener.java\").getAbsolutePath(), ", "-                 pfir.getSourceFiles()[5].getPath());", "-    assertEquals(\"first aux filename\", System.getProperty(\"user.dir\")+\"/testFiles/sample-project-file.xml\", ", "-                 pfir.getAuxiliaryFiles()[0].getPath());", "+    assertEquals(\"last source filename\", new File(root,\"edu/rice/cs/drjava/ui/BackgroundColorListener.java\").getCanonicalPath(), ", "+                 pfir.getSourceFiles()[5].getCanonicalPath());", "+    assertEquals(\"first aux filename\", new File(System.getProperty(\"user.dir\"),\"/testFiles/sample-project-file.xml\").getCanonicalPath(), ", "+                 pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "-    assertEquals(\"classpath name\", System.getProperty(\"user.dir\")+\"/lib\", ", "-                 IterUtil.first(pfir.getClassPaths()).getPath());", "+    assertEquals(\"classpath name\", new File(System.getProperty(\"user.dir\"),\"lib\").getCanonicalPath(), ", "+                 IterUtil.first(pfir.getClassPaths()).getCanonicalPath());"]}], "num": 29509}
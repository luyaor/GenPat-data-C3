{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a816287a852e92a287eadb5b4c127ef9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72f5395f7e89341bba0752e16aec446", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/TypeChecker.java", "commitBeforeChange": "95fc34f702728d19ab12beabcddae9a69d422c00", "commitAfterChange": "5607cf775ad2ef70ccd49a101fe31fb06f6903bb", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "          public void testAutoBoxingAndUnboxing()", "signatureAfterChange": "          public void testAutoBoxingAndUnboxing()", "diff": ["-      assertEquals(\"The error message should be correct\", \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  It matches both myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", errors.get(0).getFirst());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  \" +", "+                   \"It matches both myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", ", "+                   errors.get(0).getFirst());", "-      MethodData md3 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, new NullLiteral(SourceInfo.NO_INFO));", "-      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "-      assertEquals(\"There should still be one error\", 1, errors.size());", "+      MethodData md3 = new MethodData(\"myMethod2\", _publicMav, new TypeParameter[0], SymbolData.BOOLEAN_TYPE, ", "+                                      new VariableData[] {vd1Prim, vd2Prim}, new String[0], _sd1, ", "+                                      new NullLiteral(SourceInfo.NO_INFO));", "+      b.visit(new ClassBodyTypeChecker(subSd, _btc._file, \"\", new LinkedList<String>(), new LinkedList<String>(), ", "+                                       _sd1.getVars(), new LinkedList<Pair<SymbolData, JExpression>>()));", "+      assertEquals(\"There should still be one error\", 1, errors.size());  // Generated a duplicate error", "-      assertEquals(\"There should now be two errors\", 2, errors.size());", "-      assertEquals(\"The error message should be correct\", \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  It matches both myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", errors.get(1).getFirst());", "+      assertEquals(\"There should still be one error\", 1, errors.size());", "+      assertEquals(\"The error message should be correct\", ", "+                   \"myMethod2(int, java.lang.Short) is an ambiguous invocation.  It matches both \" +", "+                   \"myMethod2(int, short) and myMethod2(java.lang.Integer, java.lang.Short)\", ", "+                   errors.get(0).getFirst());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9b8d6ed94a139769084c73139653c57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "e66e301ba3e7c9392b46f6d5762feacdcedbfdde", "commitAfterChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void testParse()", "signatureAfterChange": "    public void testParse()", "diff": ["-    v = _svo.parse(\"[\\\\\\\\]\");", "+    v = _svo.parse(\"[||]\");", "-    assertEquals(\"\\\\\", v.get(0));", "+    assertEquals(\"|\", v.get(0));", "-    v = _svo.parse(\"[\\\\,]\");", "+    v = _svo.parse(\"[|,]\");", "-    v = _svo.parse(\"[\\\\,]\");", "-    assertEquals(1, v.size());", "+    v = _svo.parse(\"[|,,]\");", "+    assertEquals(2, v.size());", "+    assertEquals(\"\", v.get(1));", "-    try { _svo.parse(\"[\\\\x]\"); fail(\"Backslash not in front of another backslash or delimiter.\"); } ", "+    try { _svo.parse(\"[|x]\"); fail(\"Pipe not in front of another pipe or delimiter.\"); } ", "-    v = _svo.parse(\"[11,\\\\,,22]\");", "+    v = _svo.parse(\"[11,|,,22]\");", "-    v = _svo.parse(\"[11,abc\\\\,def,22]\");", "+    v = _svo.parse(\"[11,abc|,def,22]\");", "-    v = _svo.parse(\"[11,\\\\\\\\,22]\");", "+    v = _svo.parse(\"[11,||,22]\");", "-    assertEquals(\"\\\\\", v.get(1));", "+    assertEquals(\"|\", v.get(1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d7f484bc0fabc213298e0124ddf3ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "dc012dd7d972609a38d1836c72ebe86b07df0e53", "commitAfterChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void testMatchBraceText()", "signatureAfterChange": "   public void testMatchBraceText()", "diff": ["-                       \"public class Foo {\\n\" + //19", "-                       \"  private int whatev\\n\" + //40", "-                       \"  private void _method()\\n\" + //65", "-                       \"  {\\n\" + //69", "-                       \"     do stuff\\n\" + //83", "-                       \"     new Object() {\\n\" + //103", "-                       \"         }\\n\" + //114", "+                       \"{\\n\" +", "+                       \"public class Foo {\\n\" + //21", "+                       \"  private int whatev\\n\" + //42", "+                       \"  private void _method()\\n\" + //67", "+                       \"  {\\n\" + //71", "+                       \"     do stuff\\n\" + //85", "+                       \"     new Object() {\\n\" + //105", "+                       \"         }\\n\" + //116", "-                       \"} \"", "+                       \"}\" +", "+                       \"}\"", "-      definitions.setCaretPosition(2);", "+      definitions.setCaretPosition(4);", "-      definitions.setCaretPosition(113);", "+      definitions.setCaretPosition(115);", "-      definitions.setCaretPosition(100);", "+      definitions.setCaretPosition(102);", "-      definitions.setCaretPosition(117);", "-      assertEquals(\"Should display the line matched\", \"Matches:   private void _method()...{\", _frame.getFileNameField());", "+      assertEquals(\"Should display the line matched\", \"Matches:   private void _method()...{\", _frame.getFileNameField());", "+      definitions.setCaretPosition(121);", "+      definitions.setCaretPosition(122);", "+      assertEquals(\"Should display only one brace when matching an open brace that is the first character in a line\",", "+                   \"Matches: {\", _frame.getFileNameField());"]}], "num": 11885}
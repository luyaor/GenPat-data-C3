{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a009482586b8f427d83ac5b00a32dcf0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0086c400470ac360e125e3152b529a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "   public Class visit(ArrayAllocation node)", "diff": ["-     */", "-    public Object visit(ArrayAllocation node) {", "-        // Do the checking of the size expressions", "-        Iterator it = node.getSizes().iterator();", "-            Class c = (Class)((Node)it.next()).acceptVisitor(this);", "-            // Dimension expression must be of an integral type, but not long", "-            if (c != byte.class && c != short.class && c != int.class) {", "-                throw new ExecutionError(\"array.dimension.type\", node);", "-            }", "-        Class c = (Class)node.getCreationType().acceptVisitor(this);", "-", "-        // Visits the initializer if one", "-        if (node.getInitialization() != null) {", "-            node.getInitialization().acceptVisitor(this);", "-", "-        // Set the type properties of this node", "-        Class  ac = Array.newInstance(c, new int[node.getDimension()]).getClass();", "-", "-        node.setProperty(NodeProperties.TYPE, ac);", "-        node.setProperty(NodeProperties.COMPONENT_TYPE, c);", "-        return ac;", "+   */", "+  public Class visit(ArrayAllocation node) {", "+    // Do the checking of the size expressions", "+    Iterator it = node.getSizes().iterator();", "+    while (it.hasNext()) {", "+      Class c = (Class)((Node)it.next()).acceptVisitor(this);", "+      // Dimension expression must be of an integral type, but not long", "+      if (c != byte.class && c != short.class && c != int.class) {", "+        throw new ExecutionError(\"array.dimension.type\", node);", "+      }", "+    ", "+    Class c = (Class)node.getCreationType().acceptVisitor(this);", "+    ", "+    // Visits the initializer if one", "+    if (node.getInitialization() != null) {", "+      node.getInitialization().acceptVisitor(this);", "+    ", "+    // Set the type properties of this node", "+    Class  ac = Array.newInstance(c, new int[node.getDimension()]).getClass();", "+    ", "+    node.setProperty(NodeProperties.TYPE, ac);", "+    node.setProperty(NodeProperties.COMPONENT_TYPE, c);", "+    return ac;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66dc41145b0421b59c2c47294ffb4e4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-mint/edu/rice/cs/drjava/model/compiler/descriptors/MintDescriptor.java", "commitBeforeChange": "9d83c5e72c3c3a4b777224dfc83ca830e4a2d380", "commitAfterChange": "d5a76eb30f8febc02797eff15a790d6bbcae28ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public Set<String> getToolsPackages()", "signatureAfterChange": "\r   public Set<String> getToolsPackages()", "diff": ["-    */", "-  public Set<String> getToolsPackages() {", "-    HashSet<String> set = new HashSet<String>();", "-    Collections.addAll(set, new String[] {", "-      // Additional from 6 tools.jar:", "-      \"com.sun.codemodel\",", "-        \"com.sun.istack.internal.tools\", // other istack packages are in rt.jar", "-        \"com.sun.istack.internal.ws\",", "-        \"com.sun.source\",", "-        \"com.sun.xml.internal.dtdparser\", // other xml.internal packages are in rt.jar", "-        \"com.sun.xml.internal.rngom\",", "-        \"com.sun.xml.internal.xsom\",", "-        \"org.relaxng\",", "-        ", "-        // Mint:", "-        \"com.sun.tools.javac\",", "-        \"com.sun.tools.javac.tree\",", "-        \"com.sun.tools.javac.comp\",", "-        \"com.sun.tools.javac.main\",", "-        \"edu.rice.cs.mint\",", "-        \"edu.rice.cs.mint.comp\",", "-        \"edu.rice.cs.mint.runtime\",", "-        \"edu.rice.cs.mint.runtime.mspTree\"", "-    });", "-    return set;", "-  }", "+    */\r", "+  public Set<String> getToolsPackages() {\r", "+    HashSet<String> set = new HashSet<String>();\r", "+    Collections.addAll(set, new String[] {\r", "+      // Additional from 6 tools.jar:\r", "+      \"com.sun.codemodel\",\r", "+        \"com.sun.istack.internal.tools\", // other istack packages are in rt.jar\r", "+        \"com.sun.istack.internal.ws\",\r", "+        \"com.sun.source\",\r", "+        \"com.sun.xml.internal.dtdparser\", // other xml.internal packages are in rt.jar\r", "+        \"com.sun.xml.internal.rngom\",\r", "+        \"com.sun.xml.internal.xsom\",\r", "+        \"org.relaxng\",\r", "+        \r", "+        // Mint:\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac\",\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac.tree\",\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac.comp\",\r", "+        \"edu.rice.cs.mint.comp.com.sun.tools.javac.main\",\r", "+        \"edu.rice.cs.mint\",\r", "+        \"edu.rice.cs.mint.comp\",\r", "+        \"edu.rice.cs.mint.runtime\",\r", "+        \"edu.rice.cs.mint.runtime.mspTree\"\r", "+    });\r", "+    return set;\r", "+  }\r"]}], "num": 24705}
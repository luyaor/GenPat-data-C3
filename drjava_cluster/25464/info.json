{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6f2e7b422d88ea9165f9f3cb8354b27", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee54f8a9a8fdab0737925d215d0243d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "c95281d4127bdbd843c86748b646c5941d6c6e28", "commitAfterChange": "7fc4acf0464a18794ecf4448364493c7686c450b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, boolean isKSOC)", "diff": ["+    */", "+  public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, boolean isKSOC) {", "+    super(opt, text, parent);", "+    _columnNames = new String[0];", "+", "+    //set up table", "+    _ksData = new Vector<Object[]>();", "+    _data = null;", "+    ", "+    _tableModel = _makeTableModel();    ", "+    _table = new JTable(_tableModel) {", "+      {", "+        final TableCellRenderer renderer = getTableHeader().getDefaultRenderer();", "+        ", "+        //int w = renderer.getTableCellRendererComponent(this,getModel().getColumnName(0), false, false, 0, 0).getPreferredSize().width;", "+        //getColumnModel().getColumn(0).setMinWidth(30);", "+        getColumnModel().getColumn(1).setMinWidth(50);", "+        getColumnModel().getColumn(1).setMaxWidth(50);", "+      }", "+      ", "+      public Component prepareRenderer(final TableCellRenderer renderer,", "+                                       final int row, final int column) {", "+        final Component prepareRenderer = super.prepareRenderer(renderer, row, column);", "+        final TableColumn tableColumn = getColumnModel().getColumn(column);", "+        ", "+        tableColumn.setPreferredWidth(Math.max(prepareRenderer.getPreferredSize().width,tableColumn.getPreferredWidth()));", "+        ", "+        return prepareRenderer;", "+      }    ", "+    };", "+    _table.getColumnModel().getColumn(0).setCellRenderer(new AddButtonRenderer());", "+    _table.getColumnModel().getColumn(0).setCellEditor( new AddButtonEditor(new JCheckBox()));", "+    _table.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());", "+    _table.getColumnModel().getColumn(1).setCellEditor( new ButtonEditor(new JCheckBox()));", "+    _table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "+", "+    resetToCurrent();", "+", "+    //_addButton = new JButton(_getAddAction());", "+    ", "+    /* Only used in VectorFileOptionComponent subclass */", "+    _moveUpButton = new JButton(new AbstractAction(\"Move Up\") {", "+      public void actionPerformed(ActionEvent ae) {", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          _table.getSelectionModel().clearSelection();", "+          for(int i=0; i<rows.length; ++i) {", "+            if (rows[i]>0) {", "+              T el = _data.remove(rows[i]);", "+              _data.insertElementAt(el, rows[i]-1);", "+              _table.getSelectionModel().addSelectionInterval(rows[i]-1,rows[i]-1);", "+              _tableModel.fireTableRowsUpdated(rows[i]-1,rows[i]);", "+            }", "+          }", "+          notifyChangeListeners();", "+        }", "+      }", "+    });", "+", "+    /* Only used in VectorFileOptionComponent subclass */", "+    _moveDownButton = new JButton(new AbstractAction(\"Move Down\") {", "+      public void actionPerformed(ActionEvent ae) {", "+        int[] rows = _table.getSelectedRows();", "+        if (rows.length>0) {", "+          _table.getSelectionModel().clearSelection();", "+          for(int i=0; i<rows.length; ++i) {", "+            if (rows[i]<_data.size()-1) {", "+              T el = _data.remove(rows[i]);", "+              _data.insertElementAt(el, rows[i]+1);", "+              _table.getSelectionModel().addSelectionInterval(rows[i]+1,rows[i]+1);", "+              _tableModel.fireTableRowsUpdated(rows[i],rows[i]+1);", "+            }", "+          }", "+          notifyChangeListeners();", "+        }", "+      }", "+    });", "+    ", "+    _buttonPanel = new JPanel();", "+    _buttonPanel.setBorder(new EmptyBorder(15,15,15,15));", "+    _buttonPanel.setLayout(new BoxLayout(_buttonPanel, BoxLayout.X_AXIS));", "+    ", "+    _buttonPanel.add(Box.createHorizontalGlue());", "+    JLabel spaceFiller = new JLabel();", "+    spaceFiller.setMinimumSize(new Dimension(50,50));", "+    _buttonPanel.add(spaceFiller);", "+    //_addButtons(); // all buttons needs to be added consecutively as a group for glue to work properly               ", "+    _buttonPanel.add(Box.createHorizontalGlue());", "+", "+    _tableScrollPane = new JScrollPane(_table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "+                                       JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "+    _panel = new JPanel(new BorderLayout());", "+    _panel.add(_tableScrollPane, BorderLayout.CENTER);", "+    _panel.add(_buttonPanel, BorderLayout.SOUTH);", "+", "+    int rows = _tableModel.getRowCount();", "+    if (rows == 0) rows = 1;", "+    _tableScrollPane.setPreferredSize(new Dimension(0,  (rows * PIXELS_PER_ROW) - ((2*rows)-1)));", "+    if (_columnNames.length==0) {", "+      _table.setTableHeader(null);", "+      _tableScrollPane.setColumnHeaderView(null);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd6d73c5db0daf81f8de93deb347a978", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/VectorOptionComponent.java", "commitBeforeChange": "433b13a797196089fe338c13ae74a57a898d3d4c", "commitAfterChange": "dffb568c2302b16a97ba0780ebf9b8a7292012c9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, boolean isKSOC)", "signatureAfterChange": "   public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, String[] colNames)", "diff": ["-    */", "-  public VectorOptionComponent(VectorOption<T> opt, String text, SwingFrame parent, boolean isKSOC) {", "-    super(opt, text, parent);", "-    _columnNames = new String[0];", "-", "-    //set up table", "-    _ksData = new Vector<Object[]>();", "-    _data = null;", "-    ", "-    _tableModel = _makeTableModel();    ", "-    _table = new JTable(_tableModel) {", "-      {", "-        final TableCellRenderer renderer = getTableHeader().getDefaultRenderer();", "-        ", "-        //int w = renderer.getTableCellRendererComponent(this,getModel().getColumnName(0), false, false, 0, 0).getPreferredSize().width;", "-        //getColumnModel().getColumn(0).setMinWidth(30);", "-        getColumnModel().getColumn(1).setMinWidth(50);", "-        getColumnModel().getColumn(1).setMaxWidth(50);", "-      }", "-      ", "-      public Component prepareRenderer(final TableCellRenderer renderer,", "-                                       final int row, final int column) {", "-        final Component prepareRenderer = super.prepareRenderer(renderer, row, column);", "-        final TableColumn tableColumn = getColumnModel().getColumn(column);", "-        ", "-        tableColumn.setPreferredWidth(Math.max(prepareRenderer.getPreferredSize().width,tableColumn.getPreferredWidth()));", "-        ", "-        return prepareRenderer;", "-      }    ", "-    };", "-    _table.getColumnModel().getColumn(0).setCellRenderer(new AddButtonRenderer());", "-    _table.getColumnModel().getColumn(0).setCellEditor( new AddButtonEditor(new JCheckBox()));", "-    _table.getColumnModel().getColumn(1).setCellRenderer(new ButtonRenderer());", "-    _table.getColumnModel().getColumn(1).setCellEditor( new ButtonEditor(new JCheckBox()));", "-    _table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-", "-    resetToCurrent();", "-", "-    //_addButton = new JButton(_getAddAction());", "-    ", "-    /* Only used in VectorFileOptionComponent subclass */", "-    _moveUpButton = new JButton(new AbstractAction(\"Move Up\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          _table.getSelectionModel().clearSelection();", "-          for(int i=0; i<rows.length; ++i) {", "-            if (rows[i]>0) {", "-              T el = _data.remove(rows[i]);", "-              _data.insertElementAt(el, rows[i]-1);", "-              _table.getSelectionModel().addSelectionInterval(rows[i]-1,rows[i]-1);", "-              _tableModel.fireTableRowsUpdated(rows[i]-1,rows[i]);", "-            }", "-          }", "-          notifyChangeListeners();", "-        }", "-      }", "-    });", "-", "-    /* Only used in VectorFileOptionComponent subclass */", "-    _moveDownButton = new JButton(new AbstractAction(\"Move Down\") {", "-      public void actionPerformed(ActionEvent ae) {", "-        int[] rows = _table.getSelectedRows();", "-        if (rows.length>0) {", "-          _table.getSelectionModel().clearSelection();", "-          for(int i=0; i<rows.length; ++i) {", "-            if (rows[i]<_data.size()-1) {", "-              T el = _data.remove(rows[i]);", "-              _data.insertElementAt(el, rows[i]+1);", "-              _table.getSelectionModel().addSelectionInterval(rows[i]+1,rows[i]+1);", "-              _tableModel.fireTableRowsUpdated(rows[i],rows[i]+1);", "-            }", "-          }", "-          notifyChangeListeners();", "-        }", "-      }", "-    });", "-    ", "-    _buttonPanel = new JPanel();", "-    _buttonPanel.setBorder(new EmptyBorder(15,15,15,15));", "-    _buttonPanel.setLayout(new BoxLayout(_buttonPanel, BoxLayout.X_AXIS));", "-    ", "-    _buttonPanel.add(Box.createHorizontalGlue());", "-    JLabel spaceFiller = new JLabel();", "-    spaceFiller.setMinimumSize(new Dimension(50,50));", "-    _buttonPanel.add(spaceFiller);", "-    //_addButtons(); // all buttons needs to be added consecutively as a group for glue to work properly               ", "-    _buttonPanel.add(Box.createHorizontalGlue());", "-", "-    _tableScrollPane = new JScrollPane(_table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,", "-                                       JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-    _panel = new JPanel(new BorderLayout());", "-    _panel.add(_tableScrollPane, BorderLayout.CENTER);", "-    _panel.add(_buttonPanel, BorderLayout.SOUTH);", "-", "-    int rows = _tableModel.getRowCount();", "-    if (rows == 0) rows = 1;", "-    _tableScrollPane.setPreferredSize(new Dimension(0,  (rows * PIXELS_PER_ROW) - ((2*rows)-1)));", "-    if (_columnNames.length==0) {", "-      _table.setTableHeader(null);", "-      _tableScrollPane.setColumnHeaderView(null);", "-    }", "-  }"]}], "num": 25464}
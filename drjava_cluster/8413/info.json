{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e139c8317d3e37cf98420726103c297a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b9a0bbf10d244439374ade4e93357e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "commitAfterChange": "dd7f7fbbfae186b155b4ab01f1629e1623154745", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   private static void checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Node v)", "signatureAfterChange": "   private static Expression checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Expression v)", "diff": ["-  private static void checkAssignmentStaticRules(Class lc, Class rc,", "-                                                 Node node, Node v) {", "+  private static Expression checkAssignmentStaticRules(Class lc, Class rc,", "+                                                 Node node, Expression v) {", "+          if (rc == Boolean.class) {", "+            return _unbox(v,Boolean.class);", "+          }", "+          if (rc == Byte.class) {", "+            return _unbox(v,Byte.class);", "+          }", "-              return;", "+              return v;", "-        else if ((lc == short.class || rc == char.class) &&", "-                   (rc != byte.class && rc != short.class && rc != char.class)) {", "+        else if ((lc == short.class || lc == char.class) &&", "+                 (rc != byte.class && rc != short.class && rc != char.class)) {", "+          if (lc == short.class && rc == Short.class) {", "+            return _unbox(v, Short.class);", "+          }", "+          if (lc == char.class && rc == Character.class) {", "+            return _unbox(v, Character.class);", "+          }", "-              return;", "+              return v;", "-                   (rc != byte.class  &&", "-                    rc != short.class &&", "-                    rc != char.class  &&", "-                    rc != int.class)) {", "+                 (rc != byte.class  &&", "+                  rc != short.class &&", "+                  rc != char.class  &&", "+                  rc != int.class)) {", "+          if (rc == Byte.class      || rc == Short.class ||", "+              rc == Character.class || rc == Integer.class) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null          ||", "-                    !rc.isPrimitive()   ||", "-                    rc == void.class    ||", "-                    rc == boolean.class ||", "-                    rc == float.class   ||", "-                    rc == double.class)) {", "+                 (rc == null          ||", "+                  !rc.isPrimitive()   ||", "+                  rc == void.class    ||", "+                  rc == boolean.class ||", "+                  rc == float.class   ||", "+                  rc == double.class)) {", "+          if (_isBoxingType(rc) && _isIntegralType(rc)) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null          ||", "-                    !rc.isPrimitive()   ||", "-                    rc == void.class    ||", "-                    rc == boolean.class ||", "-                    rc == double.class)) {", "+                 (rc == null          ||", "+                  !rc.isPrimitive()   ||", "+                  rc == void.class    ||", "+                  rc == boolean.class ||", "+                  rc == double.class)) {", "+          if (_isBoxingType(rc) && rc != Boolean.class && rc != Double.class) {", "+            return _unbox(v, rc);", "+          }", "-                   (rc == null        ||", "-                    !rc.isPrimitive() ||", "-                    rc == void.class  ||", "-                    rc == boolean.class)) {", "+                 (rc == null        ||", "+                  !rc.isPrimitive() ||", "+                  rc == void.class  ||", "+                  rc == boolean.class)) {", "+          if (_isBoxingType(rc) && rc != Boolean.class) {", "+            return _unbox(v, rc);", "+          }", "+        if (_boxesTo(rc, lc)) { ", "+          return _box(v, rc);", "+        }", "+    return v;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de4b80ac864119d9a3d738bd6511b3e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "1e77c64ba83c36855cc971f17dd702002ed1f841", "commitAfterChange": "7f1dfe0049dc6481ecb6545fa089b139bb9c72af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-      \"Remove the specified file or directory, recursively if desired. Evaluates to the empty string \\\"\\\" if successful.\\n\" +", "-      \"Required attributes:\\n\" +", "+      \"Remove the specified file or directory, recursively if desired. Evaluates to the empty string \\\"\\\" \" + ", "+      \"if successful.\\n\" + \"Required attributes:\\n\" +", "-      \"Returns the current time in milliseconds since 01/01/1970, unless other format is specified by the fmt attribute.\\n\" +", "-      \"Optional attributes:\\n\" +", "+      \"Returns the current time in milliseconds since 01/01/1970, \" + ", "+      \"unless other format is specified by the fmt attribute.\\n\" + \"Optional attributes:\\n\" + ", "-    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "-                                        <Double,Double,Double>(\"sub\",", "-                                                               \"Returns the difference between the two operands (op1-op2).\\n\" +", "-                                                               \"Required attributes:\\n\" +", "-                                                               \"\\top1=\\\"<string evaluating to a number>\\\"\\n\" +", "-                                                               \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                               lam27,", "-                                                               UnaryOpProperty.PARSE_DOUBLE,", "-                                                               UnaryOpProperty.PARSE_DOUBLE,", "-                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.", "+      setProperty(\"Misc\", new BinaryOpProperty", "+                    <Double,Double,Double>(\"sub\",", "+                                           \"Returns the difference between the two operands (op1-op2).\\n\" +", "+                                           \"Required attributes:\\n\" +", "+                                           \"\\top1=\\\"<string evaluating to a number>\\\"\\n\" +", "+                                           \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                           lam27,", "+                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                           UnaryOpProperty.PARSE_DOUBLE,", "+                                           UnaryOpProperty.FORMAT_DOUBLE));"]}], "num": 8413}
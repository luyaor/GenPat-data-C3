{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20efe94fd1fbcd6abedc6138f5b7c3a6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "579c8c01b1f0973e5f6ec8f7428c231e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/DynamicJavaAdapter.java", "commitBeforeChange": "dffeb55b275906c40458f2a767d0f62b0845e9e5", "commitAfterChange": "b1aa79fb7a1aab3c0f34f51e168c7e7a945d8cf6", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["+      List<Node> statements;", "-        List<Node>   statements = p.parseStream();", "-        ListIterator<Node>   it = statements.listIterator();", "-        Object result = JavaInterpreter.NO_RESULT;", "-", "-        while (it.hasNext()) {", "-          Node n = (Node)it.next();", "-", "-          // Process, if necessary", "-          n = processTree(n);", "-", "-", "-          NameVisitor nv = makeNameVisitor(nameVisitorContext, checkVisitorContext);", "-          Node o = n.acceptVisitor(nv);", "-          if (o != null) n = o;", "-", "-          AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(checkVisitorContext);", "-", "-          n.acceptVisitor(tc);", "-", "-          evalVisitorContext.defineVariables", "-            (checkVisitorContext.getCurrentScopeVariables());", "-", "-          EvaluationVisitor ev = makeEvaluationVisitor(evalVisitorContext);", "-          result = n.acceptVisitor(ev);", "-        }", "-", "-        if (result instanceof String) {", "-          result = \"\\\"\" + result + \"\\\"\";", "-        }", "-        else if (result instanceof Character) {", "-          result = \"'\" + result + \"'\";", "-        }", "-", "-        return result;", "-      }", "-      catch (ExecutionError e) {", "-        //e.printStackTrace(); // For Loop....", "-        throw new InterpreterException(e);", "-      }", "+        statements = p.parseStream();", "+      } ", "+      ", "+      Object result = JavaInterpreter.NO_RESULT;", "+      ", "+      nameVisitorContext.setRevertPoint();", "+      checkVisitorContext.setRevertPoint();", "+      evalVisitorContext.setRevertPoint();", "+      ", "+      try {", "+        for (Node n : statements) {", "+          n = processTree(n);", "+          ", "+          NameVisitor nv = makeNameVisitor(nameVisitorContext);", "+          Node o = n.acceptVisitor(nv);", "+          if (o != null) n = o;", "+          ", "+          AbstractTypeChecker tc = AbstractTypeChecker.makeTypeChecker(checkVisitorContext);", "+          ", "+          n.acceptVisitor(tc);", "+          ", "+          evalVisitorContext.defineVariables", "+            (checkVisitorContext.getCurrentScopeVariables());", "+          ", "+          EvaluationVisitor ev = makeEvaluationVisitor(evalVisitorContext);", "+          result = n.acceptVisitor(ev);", "+        }", "+      }", "+      catch (ExecutionError e) {", "+        // revert the contexts just in case a binding was made in", "+        // one context before this error was thrown.", "+        nameVisitorContext.revert();", "+        checkVisitorContext.revert();", "+        evalVisitorContext.revert();", "+        ", "+        //e.printStackTrace(); // For Loop....", "+        throw new InterpreterException(e);", "+      }", "+      ", "+      if (result instanceof String) {", "+        result = \"\\\"\" + result + \"\\\"\";", "+      }", "+      else if (result instanceof Character) {", "+        result = \"'\" + result + \"'\";", "+      }", "+      ", "+      return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a9051f22dc8cbddc14882cb74ad4753", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public Object interpret(Reader r, String fname) throws InterpreterException", "signatureAfterChange": "   public Object interpret(Reader r, String fname) throws InterpreterException", "diff": ["+   */", "+  public Object interpret(Reader r, String fname) throws InterpreterException {", "+    try {", "+      SourceCodeParser    p = parserFactory.createParser(r, fname);", "+      List<Node> statements = p.parseStream();", "+      ListIterator<Node> it = statements.listIterator();", "+      Object result = null;", "+      ", "+      while (it.hasNext()) {", "+        Node n = it.next();", "+        ", "+        NameVisitor nv = new NameVisitor(nameVisitorContext);", "+        Node o = n.acceptVisitor(nv);", "+        if (o != null) n = o;", "+        ", "+        TypeChecker tc = new TypeChecker(checkVisitorContext);", "+        n.acceptVisitor(tc);", "+        ", "+        evalVisitorContext.defineVariables", "+          (checkVisitorContext.getCurrentScopeVariables());", "+        ", "+        EvaluationVisitor ev = new EvaluationVisitor(evalVisitorContext);", "+        result = n.acceptVisitor(ev);", "+      }", "+      ", "+      return result;", "+    } catch (ExecutionError e) {", "+      throw new InterpreterException(e);", "+    } catch (ParseError e) {", "+      throw new InterpreterException(e);", "+  }", "-     */", "-    public Object interpret(Reader r, String fname) throws InterpreterException {", "-\ttry {", "-\t    SourceCodeParser p = parserFactory.createParser(r, fname);", "-\t    List    statements = p.parseStream();", "-\t    ListIterator    it = statements.listIterator();", "-\t    Object result = null;", "-", "-\t    while (it.hasNext()) {", "-\t\tNode n = (Node)it.next();", "-", "-\t\tVisitor v = new NameVisitor(nameVisitorContext);", "-\t\tObject o = n.acceptVisitor(v);", "-\t\tif (o != null) {", "-\t\t    n = (Node)o;", "-\t\t}", "-", "-\t\tv = new TypeChecker(checkVisitorContext);", "-\t\tn.acceptVisitor(v);", "-", "-\t\tevalVisitorContext.defineVariables", "-\t\t    (checkVisitorContext.getCurrentScopeVariables());", "-", "-\t\tv = new EvaluationVisitor(evalVisitorContext);", "-\t\tresult = n.acceptVisitor(v);", "-\t    }", "-", "-\t    return result;", "-\t} catch (ExecutionError e) {", "-\t    throw new InterpreterException(e);", "-\t} catch (ParseError e) {", "-\t    throw new InterpreterException(e);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df4e8eab47824555b7e17d712551229c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public List buildStatementList (Reader r, String fname) throws InterpreterException", "signatureAfterChange": "   public List<Node> buildStatementList (Reader r, String fname) throws InterpreterException", "diff": ["+   */", "+  public List<Node> buildStatementList (Reader r, String fname) throws InterpreterException {", "+    List<Node> resultingList;", "+    try {", "+      SourceCodeParser    p = parserFactory.createParser(r, fname);", "+      List<Node> statements = p.parseStream();", "+      ListIterator<Node> it = statements.listIterator();", "+      ", "+      resultingList = new ArrayList<Node>();", "+      while (it.hasNext()) {", "+        Node n = it.next();", "+        NameVisitor nv = new NameVisitor(nameVisitorContext);", "+        Node o = n.acceptVisitor(nv);", "+        if (o != null) n = o;", "+        resultingList.add(n);", "+        TypeChecker tc = new TypeChecker(checkVisitorContext);", "+        n.acceptVisitor(tc);", "+        ", "+        evalVisitorContext.defineVariables", "+          (checkVisitorContext.getCurrentScopeVariables());", "+      }", "+      ", "+      return resultingList;", "+    } catch (ParseError e) {", "+      throw new InterpreterException(e);", "+  }", "-     */", "-    public List buildStatementList (Reader r, String fname) throws InterpreterException {", "-\tList resultingList;", "-\ttry {", "-\t    SourceCodeParser p = parserFactory.createParser(r, fname);", "-\t    List    statements = p.parseStream();", "-\t    ListIterator    it = statements.listIterator();", "-", "-            resultingList = new ArrayList();", "-\t    while (it.hasNext()) {", "-\t\tNode n = (Node)it.next();", "-\t\tVisitor v = new NameVisitor(nameVisitorContext);", "-\t\tObject o = n.acceptVisitor(v);", "-\t\tif (o != null) { ", "-\t\t    n = (Node)o;", "-\t\t}", "-\t\tresultingList.add(n);", "-\t\tv = new TypeChecker(checkVisitorContext);", "-\t\tn.acceptVisitor(v);", "-\t\t", "-\t\tevalVisitorContext.defineVariables", "-\t\t    (checkVisitorContext.getCurrentScopeVariables());", "-\t    }", "-", "-\t    return resultingList;", "-\t} catch (ParseError e) {", "-\t    throw new InterpreterException(e);", "-\t}", "-    }"]}], "num": 23838}
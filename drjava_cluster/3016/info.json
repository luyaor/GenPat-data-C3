{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "449318b2109994cfd46c4e1cb4ca3cfa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e1f707cd462884038202343bd27ea6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtilTest.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "       public void testComputeInThread()", "signatureAfterChange": "       public void testComputeInThread()", "diff": ["+    debug.logStart();", "+    ", "-    final CompletionMonitor monitor = new CompletionMonitor();", "+    final CompletionMonitor started = new CompletionMonitor();", "+    final CompletionMonitor finish = new CompletionMonitor();", "-        monitor.attemptEnsureSignaled();", "+        started.signal();", "+        finish.attemptEnsureSignaled();", "+    started.attemptEnsureSignaled();", "-    monitor.signal();", "+    finish.signal();", "+    assertSame(TaskController.Status.FINISHED, c.status());", "+    ", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91677b782d9b81e388bf164d0ce23a1a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugTest.java", "commitBeforeChange": "3c002733e6bec1f112ca58ec38806686ba48b477", "commitAfterChange": "781f0d0cc2beb96bc72b49283dde3e8cd187c6ba", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "signatureAfterChange": "   public synchronized void testMultiThreadedBreakpointsAndStep()     throws DebugException, BadLocationException, DocumentAdapterException,     IOException, InterruptedException", "diff": ["-    _debugger.toggleBreakpoint(doc,index,5);", "-    index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I just woke up.  I\\'m a big boy now.\\\");\");", "+    index = MONKEY_CLASS.indexOf(\"System.out.println(\\\"I just woke up.  I\\'m a big boy now.\\\");\");", "+    _debugger.toggleBreakpoint(doc,index,16);", "-    ", "+     _debugger.addListener(debugListener);", "+    // Resume until finished, waiting for interpret call to end", "+     InterpretListener interpretListener = new InterpretListener();", "+     _model.addListener(interpretListener);", "+     synchronized(_notifierLock) {", "+       _debugger.resume();", "+       _waitForNotifies(2);  // interactionEnded, currThreadDied", "+       _notifierLock.wait();", "+     }", "+     interpretListener.assertInteractionEndCount(1);", "+     _model.removeListener(interpretListener);", "+     ", "-    _debugger.addListener(debugListener);", "-      _model.resetInteractions();", "+      _debugger.shutdown();"]}], "num": 3016}
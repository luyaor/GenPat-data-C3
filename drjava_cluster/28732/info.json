{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4acfe4930356e4699ed42a4337586603", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3166a5e1dd8379779d07f8c90c331e65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public TypeData forAbstractMethodDef(AbstractMethodDef that) {\r", "-    final TypeData mav_result = that.getMav().visit(this);\r", "-    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) {\r", "-      typeParams_result[i] = that.getTypeParams()[i].visit(this);\r", "-    }\r", "-    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);\r", "-    final TypeData name_result = that.getName().visit(this);\r", "-\r", "-    // This is not used because this call eventually invokes the forUninitializedVariableDeclarator method above.\r", "-    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);\r", "-    for (int i = 0; i<params_result.length; i++) {\r", "-      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);\r", "-    }\r", "-    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);\r", "-    for (int i = 0; i < that.getThrows().length; i++) {\r", "-      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);\r", "-    }\r", "-    // Ensure that this method doesn't override another method with a different return type.\r", "-    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);\r", "-    if (md == null) {\r", "-      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in class \" + _symbolData.getName() +\".  Please report this bug.\");\r", "-    }\r", "-    SymbolData.checkDifferentReturnTypes(md, _symbolData, _targetVersion);\r", "-\r", "-    return result_result;\r", "-  }\r", "+   */", "+  public TypeData forAbstractMethodDef(AbstractMethodDef that) {", "+    final TypeData mav_result = that.getMav().visit(this);", "+    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);", "+    for (int i = 0; i < that.getTypeParams().length; i++) {", "+      typeParams_result[i] = that.getTypeParams()[i].visit(this);", "+    }", "+    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);", "+    final TypeData name_result = that.getName().visit(this);", "+", "+    // This is not used because this call eventually invokes the forUninitializedVariableDeclarator method above.", "+    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);", "+    for (int i = 0; i<params_result.length; i++) {", "+      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);", "+    }", "+    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);", "+    for (int i = 0; i < that.getThrows().length; i++) {", "+      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);", "+    }", "+    // Ensure that this method doesn't override another method with a different return type.", "+    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);", "+    if (md == null) {", "+      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in class \" + _symbolData.getName() +\".  Please report this bug.\");", "+    }", "+    SymbolData.checkDifferentReturnTypes(md, _symbolData, LanguageLevelConverter.OPT.javaVersion());", "+", "+    return result_result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bf4aa450618fd1c093ddb6818837109", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/InterfaceBodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "signatureAfterChange": "   public TypeData forAbstractMethodDef(AbstractMethodDef that)", "diff": ["-   */\r", "-  public TypeData forAbstractMethodDef(AbstractMethodDef that) {\r", "-    final TypeData mav_result = that.getMav().visit(this);\r", "-    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) {\r", "-      typeParams_result[i] = that.getTypeParams()[i].visit(this);\r", "-    }\r", "-    final TypeData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);//that.getResult().visit(this);\r", "-    final TypeData name_result = that.getName().visit(this);\r", "-    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);\r", "-    for (int i = 0; i<params_result.length; i++) {\r", "-      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);\r", "-    }\r", "-    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);\r", "-    for (int i = 0; i < that.getThrows().length; i++) {\r", "-      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);//that.getThrows()[i].visit(this);\r", "-    }\r", "-    // Ensure that this method doesn't override another method with a different return type.\r", "-    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);\r", "-    if (md == null) {\r", "-      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in interface \" + _symbolData.getName() + \".  Please report this bug.\");\r", "-    }\r", "-    SymbolData.checkDifferentReturnTypes(md, _symbolData, _targetVersion);\r", "-    return result_result;\r", "-  }\r", "+   */", "+  public TypeData forAbstractMethodDef(AbstractMethodDef that) {", "+    final TypeData mav_result = that.getMav().visit(this);", "+    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);", "+    for (int i = 0; i < that.getTypeParams().length; i++) {", "+      typeParams_result[i] = that.getTypeParams()[i].visit(this);", "+    }", "+    final TypeData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);//that.getResult().visit(this);", "+    final TypeData name_result = that.getName().visit(this);", "+    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);", "+    for (int i = 0; i<params_result.length; i++) {", "+      params_result[i] = getSymbolData(that.getParams()[i].getDeclarator().getType().getName(), _symbolData, that.getParams()[i]);", "+    }", "+    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);", "+    for (int i = 0; i < that.getThrows().length; i++) {", "+      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);//that.getThrows()[i].visit(this);", "+    }", "+    // Ensure that this method doesn't override another method with a different return type.", "+    MethodData md = _symbolData.getMethod(that.getName().getText(), params_result);", "+    if (md == null) {", "+      throw new RuntimeException(\"Internal Program Error: Could not find the method \" + that.getName().getText() + \" in interface \" + _symbolData.getName() + \".  Please report this bug.\");", "+    }", "+    SymbolData.checkDifferentReturnTypes(md, _symbolData, LanguageLevelConverter.OPT.javaVersion());", "+    return result_result;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b89ddbf2e2dd65c93c0beb856ac9feb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyTypeChecker.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r   public TypeData forConcreteMethodDef(ConcreteMethodDef that)", "signatureAfterChange": "   public TypeData forConcreteMethodDef(ConcreteMethodDef that)", "diff": ["-   */\r", "-  public TypeData forConcreteMethodDef(ConcreteMethodDef that) {\r", "-    final TypeData mav_result = that.getMav().visit(this);\r", "-    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);\r", "-    for (int i = 0; i < that.getTypeParams().length; i++) {\r", "-      typeParams_result[i] = that.getTypeParams()[i].visit(this);\r", "-    }\r", "-    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);\r", "-    final TypeData name_result = that.getName().visit(this);\r", "-    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);\r", "-    for (int i = 0; i < that.getThrows().length; i++) {\r", "-      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);\r", "-    }\r", "-    // We need to match the name and params.\r", "-    // First find the correct MethodData.\r", "-    MethodData md = null;\r", "-    FormalParameter[] fParams = that.getParams();\r", "-    String[] paramTypes = new String[fParams.length];\r", "-    for (int i = 0; i < fParams.length; i++) {\r", "-      paramTypes[i] = fParams[i].getDeclarator().getType().getName();\r", "-    }\r", "-    LinkedList<MethodData> mds = _symbolData.getMethods();\r", "-    Iterator<MethodData> iter = mds.iterator();\r", "-    while (iter.hasNext()) {\r", "-      boolean match = false;\r", "-      MethodData tempMd = iter.next();\r", "-      if (tempMd.getName().equals(that.getName().getText())) {\r", "-        match = true;\r", "-\r", "-        // Check the params.\r", "-        VariableData[] vds = tempMd.getParams();\r", "-        if (paramTypes.length == vds.length) {\r", "-          for (int i = 0; i < paramTypes.length; i++) {\r", "-            // The parameters should be in order.  Must also check the unqualified form of the VariableData's type.\r", "-            if(!vds[i].getType().getName().equals(paramTypes[i]) &&\r", "-               !LanguageLevelVisitor.getUnqualifiedClassName(vds[i].getType().getName()).equals(paramTypes[i])) {\r", "-              match = false;\r", "-              break;\r", "-            }\r", "-          }\r", "-          if (match) {\r", "-            md = tempMd;            \r", "-            break;\r", "-          }\r", "-        }\r", "-      }\r", "-    }\r", "-    if (md == null) {\r", "-      throw new RuntimeException(\"Internal Program Error: The method \" + that.getName().getText() + \" was not in the class \" + _symbolData.getName() + \".  Please report this bug.\");\r", "-    }\r", "-    \r", "-    LinkedList<VariableData> ll = new LinkedList<VariableData>();\r", "-    VariableData[] vds = md.getParams();\r", "-    for (int i = 0; i<vds.length; i++) {\r", "-      ll.addLast(vds[i]);\r", "-    }\r", "-    ll.addAll(cloneVariableDataList(_vars));\r", "-    \r", "-    LinkedList<VariableData> thingsWeAssigned = new LinkedList<VariableData>();\r", "-    for (int i = 0; i<_symbolData.getVars().size(); i++) {\r", "-      VariableData tempVd = _symbolData.getVars().get(i);\r", "-      if (tempVd.gotValue()) { //then this variable did not have a value previously.\r", "-        thingsWeAssigned.addLast(tempVd);\r", "-      }\r", "-    }\r", "-    \r", "-    BodyTypeChecker btc = new BodyTypeChecker(md, _file, _package, _importedFiles, _importedPackages, ll, new LinkedList<Pair<SymbolData, JExpression>>());\r", "-    \r", "-    TypeData body_result = that.getBody().visit(btc); // We assume that this will return an InstanceData -- the return type of the body\r", "-    \r", "-    // This checks to see that the method returns the correct type.  It throws its own errors.\r", "-    if (body_result != null) {body_result = body_result.getSymbolData();}\r", "-    _checkReturnType(md.getReturnType(), (SymbolData) body_result, that);\r", "-    if (md.getReturnType() != null) {\r", "-      // Ensure that this method doesn't override another method with a different return type.\r", "-      SymbolData.checkDifferentReturnTypes(md, _symbolData, _targetVersion);\r", "-    }\r", "-    \r", "-    // This is not used because this call eventually invokes the forUninitializedVariableDeclarator method above.\r", "-    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);\r", "-\r", "-    for (int i = 0; i<thingsWeAssigned.size(); i++) {\r", "-      thingsWeAssigned.get(i).lostValue();\r", "-    }\r", "-    \r", "-    return result_result;\r", "-\r", "-  }\r", "+   */", "+  public TypeData forConcreteMethodDef(ConcreteMethodDef that) {", "+    final TypeData mav_result = that.getMav().visit(this);", "+    final TypeData[] typeParams_result = makeArrayOfRetType(that.getTypeParams().length);", "+    for (int i = 0; i < that.getTypeParams().length; i++) {", "+      typeParams_result[i] = that.getTypeParams()[i].visit(this);", "+    }", "+    final SymbolData result_result = getSymbolData(that.getResult().getName(), _symbolData, that);", "+    final TypeData name_result = that.getName().visit(this);", "+    final TypeData[] throws_result = makeArrayOfRetType(that.getThrows().length);", "+    for (int i = 0; i < that.getThrows().length; i++) {", "+      throws_result[i] = getSymbolData(that.getThrows()[i].getName(), _symbolData, that.getThrows()[i]);", "+    }", "+    // We need to match the name and params.", "+    // First find the correct MethodData.", "+    MethodData md = null;", "+    FormalParameter[] fParams = that.getParams();", "+    String[] paramTypes = new String[fParams.length];", "+    for (int i = 0; i < fParams.length; i++) {", "+      paramTypes[i] = fParams[i].getDeclarator().getType().getName();", "+    }", "+    LinkedList<MethodData> mds = _symbolData.getMethods();", "+    Iterator<MethodData> iter = mds.iterator();", "+    while (iter.hasNext()) {", "+      boolean match = false;", "+      MethodData tempMd = iter.next();", "+      if (tempMd.getName().equals(that.getName().getText())) {", "+        match = true;", "+", "+        // Check the params.", "+        VariableData[] vds = tempMd.getParams();", "+        if (paramTypes.length == vds.length) {", "+          for (int i = 0; i < paramTypes.length; i++) {", "+            // The parameters should be in order.  Must also check the unqualified form of the VariableData's type.", "+            if(!vds[i].getType().getName().equals(paramTypes[i]) &&", "+               !LanguageLevelVisitor.getUnqualifiedClassName(vds[i].getType().getName()).equals(paramTypes[i])) {", "+              match = false;", "+              break;", "+            }", "+          }", "+          if (match) {", "+            md = tempMd;            ", "+            break;", "+          }", "+        }", "+      }", "+    }", "+    if (md == null) {", "+      throw new RuntimeException(\"Internal Program Error: The method \" + that.getName().getText() + \" was not in the class \" + _symbolData.getName() + \".  Please report this bug.\");", "+    }", "+    ", "+    LinkedList<VariableData> ll = new LinkedList<VariableData>();", "+    VariableData[] vds = md.getParams();", "+    for (int i = 0; i<vds.length; i++) {", "+      ll.addLast(vds[i]);", "+    }", "+    ll.addAll(cloneVariableDataList(_vars));", "+    ", "+    LinkedList<VariableData> thingsWeAssigned = new LinkedList<VariableData>();", "+    for (int i = 0; i<_symbolData.getVars().size(); i++) {", "+      VariableData tempVd = _symbolData.getVars().get(i);", "+      if (tempVd.gotValue()) { //then this variable did not have a value previously.", "+        thingsWeAssigned.addLast(tempVd);", "+      }", "+    }", "+    ", "+    BodyTypeChecker btc = new BodyTypeChecker(md, _file, _package, _importedFiles, _importedPackages, ll, new LinkedList<Pair<SymbolData, JExpression>>());", "+    ", "+    TypeData body_result = that.getBody().visit(btc); // We assume that this will return an InstanceData -- the return type of the body", "+    ", "+    // This checks to see that the method returns the correct type.  It throws its own errors.", "+    if (body_result != null) {body_result = body_result.getSymbolData();}", "+    _checkReturnType(md.getReturnType(), (SymbolData) body_result, that);", "+    if (md.getReturnType() != null) {", "+      // Ensure that this method doesn't override another method with a different return type.", "+      SymbolData.checkDifferentReturnTypes(md, _symbolData, LanguageLevelConverter.OPT.javaVersion());", "+    }", "+    ", "+    // This is not used because this call eventually invokes the forUninitializedVariableDeclarator method above.", "+    final TypeData[] params_result = makeArrayOfRetType(that.getParams().length);", "+", "+    for (int i = 0; i<thingsWeAssigned.size(); i++) {", "+      thingsWeAssigned.get(i).lostValue();", "+    }", "+    ", "+    return result_result;", "+", "+  }"]}], "num": 28732}
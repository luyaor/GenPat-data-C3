{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f9a4af78f36c33ae82eb0cee9c50bb9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb6bb1b5da6a0e59ae95233966d277a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "7c4507413beb0e75cdce1379ffec8d0279bed992", "commitAfterChange": "d1bf0f940bc3d914d8d8293a0e85760984d7b371", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 226, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R region)", "diff": ["-      boolean added = false;", "-      for (int i=0; i< _regions.size();i++) {", "-        DocumentRegion r = _regions.get(i);", "-        int oldStart = r.getStartOffset();", "-        int newStart = region.getStartOffset ();", "-        ", "-        if ( newStart < oldStart) {", "-          // Starts before, add here", "-          _regions.add(i, region);", "-          added = true;", "-          break;", "+      int index = getIndexOf(_current);", "+      // only add if current, previous, and next are not already the region; prevents trivial duplicates", "+      if (!region.equals(_current) && ", "+          ((index==_regions.size()-1) || (!region.equals(_regions.get(index+1)))) &&", "+          ((index<=0) || (!region.equals(_regions.get(index-1))))) {", "+        if ((_current!=null) && (index>=0)) {", "+          _regions.add(index+1, region);", "-        if ( newStart == oldStart) {", "-          // Starts at the same place", "-          int oldEnd = r.getEndOffset();", "-          int newEnd = region.getEndOffset();", "-          ", "-          if ( newEnd < oldEnd) {", "-            // Ends before, add here", "-            _regions.add(i, region);", "-            added = true;", "-            break;", "+        else {", "+          _regions.add(region);", "+        }", "+        ", "+        _current = region;", "+        final int regionIndex = getIndexOf(region);", "+        final String stackTrace = StringOps.getStackTrace();", "+        ", "+        // notify", "+        Utilities.invokeLater(new Runnable() { public void run() {", "+          _lock.startRead();", "+          try {", "+            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region, regionIndex); }", "+          } finally { _lock.endRead(); }", "+        } });", "+        ", "+        // remove region if necessary", "+        shrinkManager();", "+      }", "+      else {", "+        // if next was the region to be added, make that the current region", "+        if ((index<_regions.size()-1) && (region.equals(_regions.get(index+1)))) {", "+          nextCurrentRegion();", "+        }", "+        // if previous was the region to be added, make that the current region", "+        else if ((index>0) && (region.equals(_regions.get(index-1)))) {", "+          prevCurrentRegion();", "+        }", "+      }", "+    }", "-      if (!added) { _regions.add(region); }", "-          ", "-      // notify", "-      Utilities.invokeLater (new Runnable() { public void run() {", "-        _lock.startRead();", "-        try {", "-          for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region); }", "-        } finally { _lock.endRead(); }", "-      } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7a5f2282071a1d790eb91265bd7d114", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "ceeb43b0cd71a090481b6c99329a86882de7136d", "commitAfterChange": "229b97efe43c666e9a5a8a6450aaf594c37171c3", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 232, "signatureBeforeChange": "     public void addRegion(final R region)", "signatureAfterChange": "     public void addRegion(final R r)", "diff": ["-    public void addRegion(final R region) {", "-      int index = getIndexOf(_current);", "-      // only add if current, previous, and next are not already the region; prevents trivial duplicates", "-      if (! region.equals(_current) && ", "-          (index == _regions.size() - 1 || ! region.equals(_regions.get(index + 1))) &&", "-          (index <= 0 || ! region.equals(_regions.get(index - 1)))) {", "-        if ((_current != null) && (index >= 0)) _regions.add(index + 1, region);", "-        else _regions.add(region);", "+    public void addRegion(final R r) {", "+      if (! _regionsSet.contains(r)) { // only add if not already present", "+        _regions.add(r);", "+        _regionsSet.add(r);", "+        assert _regions.size() == _regionsSet.size();", "+      }", "-        _current = region;", "-        final int regionIndex = getIndexOf(region);", "-        final String stackTrace = StringOps.getStackTrace();", "+      if (! r.equals(_current)) {", "+        _current = r;", "+ ", "-            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(region, regionIndex); }", "+            for (RegionManagerListener<R> l: _listeners) { l.regionAdded(r); }", "+        int index = getIndexOf(_current);", "-        if ((index < _regions.size()-1) && (region.equals(_regions.get(index+1)))) nextCurrentRegion();", "+        if (index < _regions.size() - 1 && r.equals(_regions.get(index + 1))) nextCurrentRegion();", "-        else if ((index > 0) && (region.equals(_regions.get(index-1)))) prevCurrentRegion();", "+        else if (index > 0 && r.equals(_regions.get(index - 1))) prevCurrentRegion();"]}], "num": 6290}
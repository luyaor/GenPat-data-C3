{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08259b9dd9138e89993c70b39047c354", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86b61eabf4259591f879c3359c7497c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "4ebe3c86a9c7402a414ee21bfa81b87bb3fb5032", "commitAfterChange": "a80c90b8428392cd32bdf80517cd25701896680b", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, boolean addError, boolean checkImportedStuff)", "signatureAfterChange": "   protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                       boolean addError, boolean checkImportedStuff)", "diff": ["-   */", "-  protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, boolean addError, boolean checkImportedStuff) {", "+    */", "+  protected SymbolData getSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "+                                     boolean addError, boolean checkImportedStuff) {", "+    ", "+    _log.log(\"getSymbolData(\" + className + \", \" + si + \", \" + resolve + \", \" + fromClassFile + \", \" + addError +", "+             \", \" + checkImportedStuff);", "+    ", "-    int indexOfNextDollar = className.indexOf(\"$\");  //we don't think this is necessay, but as a safety percausion, check the $ that denotes anonymous inner classes and inner classes", "+    /* we don't think this is necessay, but as a safety percausion, check the $ that denotes anonymous inner classes ", "+     * and inner classes. */", "+    int indexOfNextDollar = className.indexOf(\"$\");  ", "-            SymbolData sd = getSymbolData(className.substring(0, className.length() - 2), si, resolve, fromClassFile, addError, checkImportedStuff);", "+            SymbolData sd = ", "+              getSymbolData(className.substring(0, className.length() - 2), si, resolve, fromClassFile, addError, ", "+                            checkImportedStuff);", "-            _addAndIgnoreError(\"Class \" + innerClassName + ", "-                               \" is not an inner class of the class \" + ", "+            _addAndIgnoreError(\"Class \" + innerClassName + \" is not an inner class of the class \" + ", "-    if (!fromClassFile && addError) {", "+    ", "+    if (! fromClassFile && addError) {", "+      _log.log(\"Returning an Invalid class name for \" + className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b69b34b086ed230b3609ebd6a7d0822", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "c7ce54f2435a198c543bef7b35866738d8690d46", "commitAfterChange": "f9b3ce896f60a5fa583a421b5b2bb827822b30df", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 25, "signatureBeforeChange": "    private SymbolData _getSymbolData_IsQualified(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                                  boolean addError)", "signatureAfterChange": "    private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                               boolean addError)", "diff": ["-   */ ", "-  private SymbolData _getSymbolData_IsQualified(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "-                                                boolean addError) {", "+    */ ", "+  private SymbolData _getQualifiedSymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "+                                             boolean addError) {", "+    _log.log(\"_getQualifiedSymbolData called on '\" + className + \"'\");", "+   ", "-    /* If sd is not null then if it's not a continuation, we're done, return it.", "+//    if (className.equals(\"fully.qualified.Woah\")) System.err.println(\"_getQualifiedSymbolData(\" + className + \", ...) called\" +", "+//                                                                    \"\\nsd = \" + sd);", "+    /* If sd is not null then return it unless it is continuation that we are resolving.", "-     * that we'll find it later.  If you don't return here, you can get into", "+     * that we'll find it later. (?)  If you don't return here, you can get into", "-    if (sd != null && (!sd.isContinuation() || fromClassFile)) { return sd; }", "+    _log.log(\"Corresponding symbolTable entry = \" + sd);", "+    if (sd != null && (!resolve || !sd.isContinuation() || fromClassFile)) { ", "+      _log.log(\"Returning \" + sd);", "+      return sd; ", "+    }", "+      _log.log(\"Calling  _classFile2SymbolData\");", "-    else {", "-      sd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "-      if (sd != SymbolData.KEEP_GOING) {", "-        return sd;", "+    else if (resolve) {  // Look for class file if resolving a continuation", "+      SymbolData newSd = _getSymbolData_FromFileSystem(className, si, resolve, addError);", "+      if (newSd != SymbolData.NOT_FOUND) {", "+        _log.log(\"Returning \" + sd + \" from file system\");", "+        return newSd;", "+      else if (sd != null && sd.isContinuation()) return sd;", "-      return null;", "+    _log.log(\"Returning null\");", "+    return null;"]}], "num": 21475}
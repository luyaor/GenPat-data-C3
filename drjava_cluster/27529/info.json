{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca8453516325cf104a9cb6222f6090a6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10cb97ad0ec38480905027a2a2e1bc05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result,                                                      TypeData value_result)", "signatureAfterChange": "   public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData nameRes,                                                      TypeData valueRes)", "diff": ["-  public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData name_result, ", "-                                                    TypeData value_result) {", "-    if (name_result == null || value_result == null) {return null;}", "+  public TypeData forSimpleAssignmentExpressionOnly(SimpleAssignmentExpression that, TypeData nameRes, ", "+                                                    TypeData valueRes) {", "+    if (nameRes == null || valueRes == null) {return null;}", "-    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {", "+    if (!assertFound(nameRes, that) || !assertFound(valueRes, that)) {", "-    if (assertInstanceType(name_result, \"You cannot assign a value to the type \" + name_result.getName(), that) &&", "-        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + ", "+    if (assertInstanceType(nameRes, \"You cannot assign a value to the type \" + nameRes.getName(), that) &&", "+        assertInstanceType(valueRes, \"You cannot use the type name \" + valueRes.getName() + ", "-      if (! value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), JAVA_VERSION)) {", "-        _addError(\"You cannot assign something of type \" + value_result.getName() + \" to something of type \" + ", "-                  name_result.getName(), that);", "+      if (! valueRes.getSymbolData().isAssignableTo(nameRes.getSymbolData(), JAVA_VERSION)) {", "+        _addError(\"You cannot assign something of type \" + valueRes.getName() + \" to something of type \" + ", "+                  nameRes.getName(), that);", "-    return name_result.getInstanceData();", "+    return nameRes.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a219f8e5289852a7d4ae3eb136ade8a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result,                                                       TypeData value_result)", "signatureAfterChange": "   public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData nameRes,                                                       TypeData valueRes)", "diff": ["-  public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData name_result, ", "-                                                     TypeData value_result) {", "-    if (name_result == null || value_result == null) {return null;}", "+  public TypeData forNumericAssignmentExpressionOnly(NumericAssignmentExpression that, TypeData nameRes, ", "+                                                     TypeData valueRes) {", "+    if (nameRes == null || valueRes == null) {return null;}", "-    if (!assertFound(name_result, that) || !assertFound(value_result, that)) {", "+    if (!assertFound(nameRes, that) || !assertFound(valueRes, that)) {", "-    if (assertInstanceType(name_result, \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type \" + ", "-                           name_result.getName(), that) &&", "-        assertInstanceType(value_result, \"You cannot use the type name \" + value_result.getName() + ", "+    if (assertInstanceType(nameRes, \"You cannot use a numeric assignment (-=, %=, *=, /=) on the type \" + ", "+                           nameRes.getName(), that) &&", "+        assertInstanceType(valueRes, \"You cannot use the type name \" + valueRes.getName() + ", "-      if (!name_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      if (!nameRes.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      if (!value_result.getSymbolData().isNumberType(JAVA_VERSION)) {", "+      if (!valueRes.getSymbolData().isNumberType(JAVA_VERSION)) {", "-      if (!error && !value_result.getSymbolData().isAssignableTo(name_result.getSymbolData(), ", "+      if (!error && !valueRes.getSymbolData().isAssignableTo(nameRes.getSymbolData(), ", "-        _addError(\"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type \" + name_result.getName() + ", "-                  \" with something of type \" + value_result.getName(), that);", "+        _addError(\"You cannot use a numeric assignment (-=, %=, *=, /=) on something of type \" + nameRes.getName() + ", "+                  \" with something of type \" + valueRes.getName(), that);", "-    return name_result.getInstanceData();  ", "+    return nameRes.getInstanceData();  "]}], "num": 27529}
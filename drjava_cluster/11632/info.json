{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a60bf676f6b5f2dbd64dd53e3885b758", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b482c99c9d2e30fd478d0082f931a46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/InteractionsDocument.java", "commitBeforeChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "commitAfterChange": "afb4d888e2c907babf9fe3737eb7d3791cf965d8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "    public void eval()", "signatureAfterChange": "    public void eval()", "diff": ["+", "-      String toEval = getText(frozenPos, getLength()-frozenPos).trim();", "-\t\t\t", "-\t\t\tif (toEval.startsWith(\"java \"))", "-\t\t\t\ttoEval = _testClassCall(toEval);", "-\t\t\t\t\t\t\t", "-      Object result = _interpreter.interpret(toEval);", "-      String resultStr;", "+      String text = getText(frozenPos, getLength()-frozenPos);", "+      _history.add(text);", "-      try {", "-        resultStr = String.valueOf(result);", "+      String toEval = text.trim();", "+", "+      // Result of interpretation, or JavaInterpreter.NO_RESULT if none.", "+      Object result; ", "+      ", "+      // Do nothing but prompt if there's nothing to evaluate!", "+      if (toEval.length() == 0) {", "+        result = JavaInterpreter.NO_RESULT;", "-      catch (Throwable t) {", "-        // Very weird. toString() on result must have thrown this exception!", "-        // Let's act like DynamicJava would have if this exception were thrown", "-        // and rethrow as RuntimeException", "-        throw new RuntimeException(t.toString());", "+      else {", "+        if (toEval.startsWith(\"java \")) {", "+          toEval = _testClassCall(toEval);", "+        }", "+                ", "+        result = _interpreter.interpret(toEval);", "+        String resultStr;", "+", "+        try {", "+          resultStr = String.valueOf(result);", "+        }", "+        catch (Throwable t) {", "+          // Very weird. toString() on result must have thrown this exception!", "+          // Let's act like DynamicJava would have if this exception were thrown", "+          // and rethrow as RuntimeException", "+          throw new RuntimeException(t.toString());", "+        }", "-\t\t\tif(result != JavaInterpreter.NO_RESULT) {", "-\t\t\t\t super.insertString(getLength(), \"\\n\" + String.valueOf(result)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"\\n\", null);", "+      if(result != JavaInterpreter.NO_RESULT) {", "+        super.insertString(getLength(), \"\\n\" + String.valueOf(result)", "+            + \"\\n\", null);", "-\t\t\telse {", "-\t\t\t\tsuper.insertString(getLength(), \"\\n\", null);", "+      else {", "+        super.insertString(getLength(), \"\\n\", null);", "-\t\t\t//System.out.println(\"\\n\\nhey!!!!!!\\n\\n\");", "+      // Hack to prevent long syntax error messages", "-\t\t//System.out.println(\"\\n\\neval done!!!!!!\\n\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb4a1b5529d1f1e3652436ce7cb1d96e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "62cd56918db49abf5170cd3da7ff92f86724ef97", "commitAfterChange": "afb4d888e2c907babf9fe3737eb7d3791cf965d8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "    public void eval()", "signatureAfterChange": "    public void eval()", "diff": ["+", "-      String toEval = getText(frozenPos, getLength()-frozenPos).trim();", "-\t\t\t", "-\t\t\tif (toEval.startsWith(\"java \"))", "-\t\t\t\ttoEval = _testClassCall(toEval);", "-\t\t\t\t\t\t\t", "-      Object result = _interpreter.interpret(toEval);", "-      String resultStr;", "+      String text = getText(frozenPos, getLength()-frozenPos);", "+      _history.add(text);", "-      try {", "-        resultStr = String.valueOf(result);", "+      String toEval = text.trim();", "+", "+      // Result of interpretation, or JavaInterpreter.NO_RESULT if none.", "+      Object result; ", "+      ", "+      // Do nothing but prompt if there's nothing to evaluate!", "+      if (toEval.length() == 0) {", "+        result = JavaInterpreter.NO_RESULT;", "-      catch (Throwable t) {", "-        // Very weird. toString() on result must have thrown this exception!", "-        // Let's act like DynamicJava would have if this exception were thrown", "-        // and rethrow as RuntimeException", "-        throw new RuntimeException(t.toString());", "+      else {", "+        if (toEval.startsWith(\"java \")) {", "+          toEval = _testClassCall(toEval);", "+        }", "+                ", "+        result = _interpreter.interpret(toEval);", "+        String resultStr;", "+", "+        try {", "+          resultStr = String.valueOf(result);", "+        }", "+        catch (Throwable t) {", "+          // Very weird. toString() on result must have thrown this exception!", "+          // Let's act like DynamicJava would have if this exception were thrown", "+          // and rethrow as RuntimeException", "+          throw new RuntimeException(t.toString());", "+        }", "-\t\t\tif(result != JavaInterpreter.NO_RESULT) {", "-\t\t\t\t super.insertString(getLength(), \"\\n\" + String.valueOf(result)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t+ \"\\n\", null);", "+      if(result != JavaInterpreter.NO_RESULT) {", "+        super.insertString(getLength(), \"\\n\" + String.valueOf(result)", "+            + \"\\n\", null);", "-\t\t\telse {", "-\t\t\t\tsuper.insertString(getLength(), \"\\n\", null);", "+      else {", "+        super.insertString(getLength(), \"\\n\", null);", "-\t\t\t//System.out.println(\"\\n\\nhey!!!!!!\\n\\n\");", "+      // Hack to prevent long syntax error messages", "-\t\t//System.out.println(\"\\n\\neval done!!!!!!\\n\\n\");"]}], "num": 11632}
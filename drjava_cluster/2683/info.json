{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9df14564977ac12d829b241a66d35a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b31bf433529ee327d990a787d803f12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public void testLog() throws IOException", "signatureAfterChange": "   public void testLog() throws IOException", "diff": ["+    //File file1 = new File(\"logtest001.txt\");", "+", "+    Date earlier = new Date();", "+", "-    ", "+   ", "-    Date earlier = new Date(new Date().getTime() - SHORT_TIME);", "-    ", "-    String s0 = fin.readLine();", "-//    System.err.println(\"s0 = \" + s0);", "-//    System.err.println(\"s0 converted to millis \" + parse(s0));", "-//    System.err.println(\"Current time in millis is: \" + System.currentTimeMillis());", "+    String s0 = fin.readLine();", "-//    System.err.println(\"s0 = '\" + s0 + \"'\");", "-//    System.err.println(\"time0 = \" + time0);", "-    assertTrue(\"Log opened within last few seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);", "-    String log1OpenMsg = \"Log '\" + file1.getName() + \"' opened\";", "-    int offset = dateEnd(s0);", "-    ", "-    assertEquals(\"Log open message\", log1OpenMsg , s0.substring(offset, offset + log1OpenMsg.length()));", "+    assertTrue(\"Log not opened after 'earlier' and before 'now'\", withinASecond(earlier, time0, now));", "+", "+    String log1OpenMsg = \"Log '\" + file1.getName() + \"' opened: \";", "+    assertEquals(\"Incorrect log open message\", log1OpenMsg , getStringAfterDate(s0).substring(0, log1OpenMsg.length()));", "-//    System.err.println(\"s1 = '\" + s1 + \"'\");", "-    assertTrue(\"Date of message 1 within last few seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);", "-    assertEquals(\"Log message 1\", \"Message 1\", s1.substring(dateEnd(s1)));", "+    assertTrue(\"Date of message 1 not after 'earlier' and before 'now'\", withinASecond(earlier, time1, now));", "+    assertTrue(\"Date of message 1 not after 'log opened' and before 'now'\", withinASecond(time0, time1, now));", "+    assertEquals(\"Log message 1\", \"Message 1\", getStringAfterDate(s1));", "-    assertTrue(\"Date of message 2 within last few seconds\", time2.compareTo(earlier) >= 0 && time2.compareTo(now) <= 0);", "-    assertEquals(\"Log message 2\", \"Message 2\", s2.substring(dateEnd(s2)));", "+    assertTrue(\"Date of message 2 not after 'earlier' and before 'now'\", withinASecond(earlier, time2, now));", "+    assertTrue(\"Date of message 2 not after 'message 1' and before 'now'\", withinASecond(time1, time2, now));", "+    assertEquals(\"Log message 2\", \"Message 2\", getStringAfterDate(s2));", "-    assertTrue(\"Date of message 3 within last few seconds\", time3.compareTo(earlier) >= 0 && time3.compareTo(now) <= 0);", "-    assertEquals(\"Log message 3\", \"Message 3\", s3.substring(dateEnd(s3)));", "+    assertTrue(\"Date of message 3 not after 'earlier' and before 'now'\", withinASecond(earlier, time3, now));", "+    assertTrue(\"Date of message 3 not after 'message 2' and before 'now'\", withinASecond(time2, time3, now));", "+    assertEquals(\"Log message 3\", \"Message 3\", getStringAfterDate(s3));", "+    assertEquals(\"End of log expected\", null, fin.readLine());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd2799f3f1964287d3916497859cfbb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void testExceptionPrinting() throws IOException", "signatureAfterChange": "   public void testExceptionPrinting() throws IOException", "diff": ["+    //File file2 = new File(\"logtest002.txt\");", "+", "+    Date earlier = new Date();", "+", "+", "+    String method = null;", "-      log2.log(\"Message 2\", e.getStackTrace());", "+      StackTraceElement[] stes = e.getStackTrace();", "+      method = \"\\tat \"+stes[0].toString();", "+      log2.log(\"Message 2\", stes);", "-    Date earlier = new Date(new Date().getTime() - SHORT_TIME);", "-    assertTrue(\"Log opened within last few seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);", "-    String log2OpenMsg = \"Log '\" + file2.getName() + \"' opened\";", "-    int offset = dateEnd(s0);", "-    assertEquals(\"Log open message\", log2OpenMsg, s0.substring(offset, offset + log2OpenMsg.length()));", "-    ", "+    assertTrue(\"Log not opened after 'earlier' and before 'now'\", withinASecond(earlier, time0, now));", "+", "+    String log2OpenMsg = \"Log '\" + file2.getName() + \"' opened: \";", "+    assertEquals(\"Incorrect log open message\", log2OpenMsg , getStringAfterDate(s0).substring(0, log2OpenMsg.length()));", "+   ", "-    assertTrue(\"Date of message 1 within last few seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);", "-    assertEquals(\"Log message 1\", \"Message 1\", s1.substring(dateEnd(s1)));", "+    assertTrue(\"Date of message 1 not after 'earlier' and before 'now'\", withinASecond(earlier, time1, now));", "+    assertTrue(\"Date of message 1 not after 'log opened' and before 'now'\", withinASecond(time0, time1, now));", "-//      System.err.println(\"traceback line = \" + s2);", "-    assertTrue(\"Date of message 2 within last few seconds\", time2.compareTo(earlier) >= 0 && time2.compareTo(now) <= 0);", "-    assertEquals(\"Log message 2\", \"Message 2\", s2.substring(dateEnd(s2)));", "-    String method = \"edu.rice.cs.util.LogTest.testExceptionPrinting\";", "-    assertEquals(\"Log exception 2 (trace line 1)\", method, fin.readLine().substring(0, method.length()));", "+    assertTrue(\"Date of message 2 not after 'earlier' and before 'now'\", withinASecond(earlier, time2, now));", "+    assertTrue(\"Date of message 2 not after 'message 1' and before 'now'\", withinASecond(time1, time2, now)); ", "+    assertEquals(\"Log message 2\", \"Message 2\", getStringAfterDate(s2));", "+    assertEquals(\"Log exception 2 (trace line 1)\", method, fin.readLine());"]}], "num": 2683}
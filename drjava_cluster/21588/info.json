{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e892eb82ccf3be60c4e6c58a5c5647d9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812f02b0525b5106243aa5bc0dedf2c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/ProcessChain.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r   public ProcessChain(ProcessCreator[] pcs)", "signatureAfterChange": "   public ProcessChain(ProcessCreator[] pcs)", "diff": ["-    * @param pcs array of ProcessCreators */\r", "-  public ProcessChain(ProcessCreator[] pcs) {\r", "-    _creators = pcs;\r", "-    _processes = new Process[_creators.length];\r", "-\r", "-    _combinedInputStream = new PipedInputStream();\r", "-    try {\r", "-      _combinedStdOutStream = new PipedOutputStream(_combinedInputStream);\r", "-      _combinedInputStream.connect(_combinedStdOutStream);\r", "-    }\r", "-    catch(IOException e) { /* ignore, no output if this goes wrong */ }\r", "-    _combinedErrorStream = new PipedInputStream();\r", "-    try {\r", "-      _combinedStdErrStream = new PipedOutputStream(_combinedErrorStream);\r", "-      _combinedErrorStream.connect(_combinedStdErrStream);\r", "-    }\r", "-    catch(IOException e) { /* ignore, no output if this goes wrong */ }\r", "-\r", "-    // _deathThreads = new Thread[_creators.length];\r", "-    for(int i=0; i<_processes.length; ++i) {\r", "-      final int index = i;\r", "-      try {\r", "-        _processes[i] = _creators[i].start();\r", "-//        _deathThreads[i] = new Thread(new Runnable() {\r", "-//          public void run() {\r", "-//            boolean interrupted = false;\r", "-//            do {\r", "-//              interrupted = false;\r", "-//              try {\r", "-//                _processes[index].waitFor();\r", "-//              }\r", "-//              catch(InterruptedException e) { interrupted = true; }\r", "-//            } while(interrupted);\r", "-//            GeneralProcessCreator.LOG.log(\"Process \"+index+\" has terminated\");\r", "-//          }\r", "-//        });\r", "-//        _deathThreads[i].start();\r", "-      }\r", "-      catch(IOException e) {\r", "-        _aborted = true;\r", "-        destroy();\r", "-        return;\r", "-      }\r", "-    }\r", "-    \r", "-    for(int i=0; i<_processes.length-1; ++i) {\r", "-      // _processes.length-1 because we're processing the gaps between the processes:\r", "-      // (P0 P1 P2) has two gaps: P0-P1 and P1-P2. There's always one less gap than processes.\r", "-      StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+i,\r", "-                                                        _processes[i].getInputStream(),\r", "-                                                        _processes[i+1].getOutputStream(),\r", "-                                                        new ProcessChainThreadGroup(this));\r", "-      _redirectors.add(r);\r", "-      r.start();\r", "-      r = new StreamRedirectThread(\"stderr Redirector \"+i,\r", "-                                   _processes[i].getErrorStream(),\r", "-                                   _processes[i+1].getOutputStream(),\r", "-                                   new ProcessChainThreadGroup(this));\r", "-      _redirectors.add(r);\r", "-      r.start();\r", "-    }\r", "-    // now pipe output from the last process into our output streams\r", "-    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+(_processes.length-1),\r", "-                                                      _processes[_processes.length-1].getInputStream(),\r", "-                                                      _combinedStdOutStream,\r", "-                                                      new ProcessChainThreadGroup(this));\r", "-    _redirectors.add(r);\r", "-    r.start();\r", "-    r = new StreamRedirectThread(\"stderr Redirector \"+(_processes.length-1),\r", "-                                 _processes[_processes.length-1].getErrorStream(),\r", "-                                 _combinedStdErrStream,\r", "-                                 new ProcessChainThreadGroup(this));\r", "-    _redirectors.add(r);\r", "-    r.start();\r", "-  }\r", "+    * @param pcs array of ProcessCreators */", "+  public ProcessChain(ProcessCreator[] pcs) {", "+    _creators = pcs;", "+    _processes = new Process[_creators.length];", "+", "+    _combinedInputStream = new PipedInputStream();", "+    try {", "+      _combinedStdOutStream = new PipedOutputStream(_combinedInputStream);", "+      _combinedInputStream.connect(_combinedStdOutStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+    ", "+    _debugInputStream = new PipedInputStream();", "+    try {", "+      _debugOutputStream = new PipedOutputStream(_debugInputStream);", "+      _debugInputStream.connect(_debugOutputStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+     _combinedInputJoinedWithDebugStream = new JoinInputStream(_combinedInputStream, _debugInputStream);", "+    _debugOutput = new PrintWriter(new OutputStreamWriter(_debugOutputStream));", "+", "+    _combinedErrorStream = new PipedInputStream();", "+    try {", "+      _combinedStdErrStream = new PipedOutputStream(_combinedErrorStream);", "+      _combinedErrorStream.connect(_combinedStdErrStream);", "+    }", "+    catch(IOException e) { /* ignore, no output if this goes wrong */ }", "+", "+    // _deathThreads = new Thread[_creators.length];", "+    for(int i=0; i<_processes.length; ++i) {", "+      final int index = i;", "+      try {", "+        _processes[i] = _creators[i].start();", "+//        _deathThreads[i] = new Thread(new Runnable() {", "+//          public void run() {", "+//            boolean interrupted = false;", "+//            do {", "+//              interrupted = false;", "+//              try {", "+//                _processes[index].waitFor();", "+//              }", "+//              catch(InterruptedException e) { interrupted = true; }", "+//            } while(interrupted);", "+//            GeneralProcessCreator.LOG.log(\"Process \"+index+\" has terminated\");", "+//          }", "+//        });", "+//        _deathThreads[i].start();", "+      }", "+      catch(IOException e) {", "+        GeneralProcessCreator.LOG.log(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+        // could not start the process, record error and abort", "+        _debugOutput.println(\"\\nIOException in external process: \"+e.getMessage()+\"\\nCheck your command line.\\n\");", "+        _debugOutput.flush();", "+        _aborted = true;", "+        destroy();", "+        return;", "+      }", "+    }", "+    ", "+    for(int i=0; i<_processes.length-1; ++i) {", "+      // _processes.length-1 because we're processing the gaps between the processes:", "+      // (P0 P1 P2) has two gaps: P0-P1 and P1-P2. There's always one less gap than processes.", "+      StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+i,", "+                                                        _processes[i].getInputStream(),", "+                                                        _processes[i+1].getOutputStream(),", "+                                                        new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "+      r.start();", "+      r = new StreamRedirectThread(\"stderr Redirector \"+i,", "+                                   _processes[i].getErrorStream(),", "+                                   _processes[i+1].getOutputStream(),", "+                                   new ProcessChainThreadGroup(this));", "+      _redirectors.add(r);", "+      r.start();", "+    }", "+    // now pipe output from the last process into our output streams", "+    StreamRedirectThread r = new StreamRedirectThread(\"stdout Redirector \"+(_processes.length-1),", "+                                                      _processes[_processes.length-1].getInputStream(),", "+                                                      _combinedStdOutStream,", "+                                                      new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();", "+    r = new StreamRedirectThread(\"stderr Redirector \"+(_processes.length-1),", "+                                 _processes[_processes.length-1].getErrorStream(),", "+                                 _combinedStdErrStream,", "+                                 new ProcessChainThreadGroup(this));", "+    _redirectors.add(r);", "+    r.start();", "+//    _debugOutput.println(\"\\n\\nProcessChain started\\n\\n\");", "+//    _debugOutput.flush();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de481dbf4d95228b6363f622b80f94b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "97f966af08ae6bec968f68d8b2fce6c5531a12b8", "commitAfterChange": "d4f8b5e1e15fc2c34ba6969d4ef7bdb04cc8916b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public synchronized void restartInterpreterJVM()", "diff": ["-  public void restartInterpreterJVM() {", "-    synchronized(this) {", "-      i++;", "-      //DrJava.consoleOut().println(\"MainJVM: iteration \" + i);", "+  public synchronized void restartInterpreterJVM() {", "+    if (_startupInProgress) {", "+      return;", "+    }", "+    _startupInProgress = true;   ", "+    ", "+    // _model may be null if we're running a test on this", "+    if (_model != null)", "+      _model.interactionsResetting();", "+    ", "+    if (_restartThread != null) {", "+      //DrJava.consoleOut().println(\"Disabling _restartThread\");", "+      _restartThread.disable();", "+    }", "+    ", "+    killInterpreter();", "+    ", "+    int debugPort = getDebugPort();", "+    ", "+    String className = InterpreterJVM.class.getName();", "+    String[] args = new String[] { getIdentifier() };", "+    Vector<String> jvmArgs = new Vector<String>();", "+    ", "+    if (allowAssertions()) {", "+      jvmArgs.addElement(\"-ea\");", "+    }", "+    ", "+    if (debugPort > -1) {", "+      jvmArgs.addElement(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + ", "+                         debugPort);", "+      jvmArgs.addElement(\"-Xdebug\");", "+      jvmArgs.addElement(\"-Xnoagent\");", "+      jvmArgs.addElement(\"-Djava.compiler=NONE\");", "+    }", "+    ", "+    String[] jvmArgsArray = new String[jvmArgs.size()];", "+    for (int i=0; i < jvmArgs.size(); i++) {", "+      jvmArgsArray[i] = jvmArgs.elementAt(i);", "+    }", "+    ", "+    //System.out.println(\"starting interpreter... \" + jvmargs[1]);", "+    /*String classpath = _model.getClasspath() +", "+     System.getProperty(\"path.separator\") +", "+     System.getProperty(\"java.class.path\");", "+     */", "+    try {", "+      //DrJava.consoleOut().println(\"In MainJVM: starting interpreter jvm\");", "+      _interpreterProcess = ExecJVM.", "+        runJVMPropogateClassPath(className, args, jvmArgsArray);", "-      if (_startupInProgress) {", "-        return;", "-      }", "-      _startupInProgress = true;   ", "-      ", "-      // _model may be null if we're running a test on this", "-      if (_model != null)", "-        _model.interactionsResetting();", "-      ", "-      if (_restartThread != null) {", "-        //DrJava.consoleOut().println(\"Disabling _restartThread\");", "-        _restartThread.disable();", "-      }", "-", "-      killInterpreter();", "-      ", "-      int debugPort = getDebugPort();", "-", "-      String className = InterpreterJVM.class.getName();", "-      String[] args = new String[] { getIdentifier() };", "-      String[] jvmargs;", "-      if (debugPort > -1) {", "-        jvmargs = new String[] {", "-          //\"-Dcom.apple.backgroundOnly=true\",", "-            // For debug interface:", "-            \"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + debugPort,", "-            \"-Xdebug\",", "-            \"-Xnoagent\",", "-            \"-Djava.compiler=NONE\"", "-            //  \"-ea\"", "-        };", "-      }", "-      else {", "-        jvmargs = new String[] {};", "-      }", "-      ", "-      //System.out.println(\"starting interpreter... \" + jvmargs[1]);", "-      /*String classpath = _model.getClasspath() +", "-        System.getProperty(\"path.separator\") +", "-        System.getProperty(\"java.class.path\");", "-      */", "-      try {", "-        //DrJava.consoleOut().println(\"In MainJVM: starting interpreter jvm\");", "-        _interpreterProcess = ExecJVM.", "-            runJVMPropogateClassPath(className, args, jvmargs);", "-        //DrJava.consoleOut().println(\"In MainJVM: started interpreter jvm \" +i);", "-        ", "-        // Start a thread to wait for the interpreter to die and to fire", "-        // off a new one (and notify model) when it happens", "-        _restartThread = new RestartThread(i) {", "-          public void run() {", "-            try {", "-              int status = _interpreterProcess.waitFor();", "-              //DrJava.consoleOut().println(\"In Thread: interpreterProcess ended. status=\" +", "-              //                            status + \", i = \" + j);", "+      // Start a thread to wait for the interpreter to die and to fire", "+      // off a new one (and notify model) when it happens", "+      _restartThread = new RestartThread() {", "+        public void run() {", "+          try {", "+            int status = _interpreterProcess.waitFor();", "+            synchronized(MainJVM.this) {", "+              if (_shouldReset) {", "+                boolean currentlyStarting = _startupInProgress;", "+                restartInterpreterJVM();", "+                if (!currentlyStarting) {", "+                  replCalledSystemExit(status);", "+                }", "+              }", "+            }", "+          }", "+          catch (InterruptedException ie) {", "+            throw new edu.rice.cs.util.UnexpectedException(ie);", "+          }", "+        }", "+      };", "+      // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "+      _timerThread = new RestartThread() {", "+        public void run() {", "+          _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "+            int count = 0;", "+            public void actionPerformed(ActionEvent e) {", "-                if (_shouldReset) {", "-                  //DrJava.consoleOut().println(\"I should reset (thread \" + j + \")\");", "-                  boolean currentlyStarting = _startupInProgress;", "-                  //DrJava.consoleOut().println(\"Currently starting for \" + j + \" = \" + currentlyStarting);", "-                  restartInterpreterJVM();", "-                  if (!currentlyStarting) {", "-                    //DrJava.consoleOut().println(\"Not starting up, so display message, thread \" + j);", "-                    replCalledSystemExit(status);", "-                  }", "-                }", "-              }", "-              //DrJava.consoleOut().println(\"Thread finished: \" + j);", "-            }", "-            catch (InterruptedException ie) {", "-              throw new edu.rice.cs.util.UnexpectedException(ie);", "-            }", "-          }", "-        };", "-        // If RESET_TIME_OUT seconds pass before the new InterpreterJVM registers, try restarting the JVM", "-        _timerThread = new RestartThread(i) {", "-          public void run() {", "-            _restartTimer = new Timer(RESET_TIME_OUT*1000, new ActionListener() {", "-              int count = 0;", "-              public void actionPerformed(ActionEvent e) {", "-                synchronized(MainJVM.this) {", "-                  if (!_shouldReset) {", "-                    _stopTimerThread();", "-                    return;", "-                  }", "-                  if (count < 2) {", "-                    _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "-                    restartInterpreterJVM();", "-                    count++;", "-                    return;", "-                  }", "-                  _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                if (!_shouldReset) {", "+                  return;", "+                if (count < 2) {", "+                  _model.printDebugMessage(\"Could not connect to InterpreterJVM, trying again...\");", "+                  restartInterpreterJVM();", "+                  count++;", "+                  return;", "+                }", "+                _model.printDebugMessage(\"Connection failed, the interactions window will not work\");", "+                _stopTimerThread();", "-            });               ", "-            _restartTimer.setRepeats(true);", "-            _restartTimer.start();   ", "-          }", "-        };", "-        //DrJava.consoleOut().println(\"In MainJVM: starting thread \" + i);", "-        _restartThread.start();", "-        _timerThread.start();", "-      }", "-      catch (IOException ioe) {", "-        _threwException(ioe);", "-      }", "-      ", "+            }", "+          });               ", "+          _restartTimer.setRepeats(true);", "+          _restartTimer.start();   ", "+        }", "+      };", "+      _restartThread.start();", "+      _timerThread.start();", "+    }", "+    catch (IOException ioe) {", "+      _threwException(ioe);"]}], "num": 21588}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1d1d4893861b5e1a7d0ea805120e301", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d836b67e93837a7627ba8140aa0420", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "6ec50bbad6902867dbbd689ce421d583e985cd75", "commitAfterChange": "40c5d59f4d83560f5b1a6adb2abd1bc3bc016193", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void killInterpreterJVM(File wd)", "signatureAfterChange": "   public void restartInterpreterJVM(boolean force)", "diff": ["-   */", "-  public void killInterpreterJVM(File wd) {", "-    debug.logStart();", "-    _startupComplete.attemptEnsureSignaled();", "-    boolean restart = (wd != null);", "-    InterpreterJVMRemoteI current;", "-    synchronized (_startupLock) {", "-      _workingDir = wd;", "-      _restart = restart;", "-      _cleanlyRestarting = true;", "-      current = _interpreterJVM.getAndSet(null);", "-    }", "-    if (current != null) {", "-      if (restart) _interactionsModel.interpreterResetting();", "-      quitSlave();", "-      // new slave JVM is started by in handleSlaveQuit()", "-    }", "-    debug.logEnd();", "-  }", "+   */", "+  public void restartInterpreterJVM(boolean force) { _state.value().restart(force); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a9ed6c854b78f880f6bb78d05b875d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "98f0c27d2704f53c27c12dba8736793eeeac44cf", "commitAfterChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void setChanging(boolean b)", "signatureAfterChange": "   public void startChanging()", "diff": ["+    * this state should be set to postpone some actions until the changes are finished. */", "+  public void startChanging() {", "+    _changeState.switchStateTo(CHANGING_STATE);", "+  }", "-    * @param b new state of the \"is changing\" flag */", "-  public void setChanging(boolean b) {", "-    _isChanging = b;", "-    if (!b) {", "-      updateButtons();", "-      if (_lastAdded!=null) {", "-        TreePath pathToNewRegion = new TreePath(_lastAdded.getPath());", "-        _regTree.scrollPathToVisible(pathToNewRegion);", "-      }", "-      expandAll();", "-      _regTree.revalidate();", "-    }"]}], "num": 8137}
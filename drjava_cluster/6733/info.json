{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83dd2877484e537b710a74b298519330", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4303b39b9cb1735c7313ff4d55e504d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "8907059ef43f15e7b338686159e3333fd997b238", "commitAfterChange": "191c3e4b63ea8ecc780014db5fc908a6ccd9ee7a", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void _removePreviousHighlight()", "signatureAfterChange": "   public void stopListening()", "diff": ["+    */", "+  public void stopListening() {", "+    if(_defPane!=null) {", "+      _defPane.removeCaretListener(_caretListener);", "+      _defPane = null;", "+    } else {", "+      throw new UnexpectedException(new RuntimeException(\"FindReplaceDialog should be listening to something\"));", "+    }", "+", "+  }", "-   */", "-  private void _removePreviousHighlight() {", "-    if (_previousHighlightTag != null) {", "-      _defPane.getHighlighter().removeHighlight(_previousHighlightTag);", "-      _previousHighlightTag = null;", "-    }", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5318427f06ca674f38391a065ea517c8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "ed15f1e3933f222801a436b129bc84e5a740d057", "commitAfterChange": "bbd785aca5328b3626f876bbde3d11c7481ab852", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private int _getIndexForError(CompilerError error)", "signatureAfterChange": "     private int _getIndexForError(CompilerError error)", "diff": ["-      if (error == null) return -1;", "+      if (error == null) {", "+        throw new IllegalArgumentException(\"Couldn't find index for null error\");", "+      }", "-      int index = -1;", "+", "-          index = i;", "-          break;", "+          return i;", "-      return index;", "+", "+      throw new IllegalArgumentException(\"Couldn't find index for error \" + error);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f68d4c1aa1a6407fc360fab1918a387", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "80b5fb6a38e815634acd75afbaca24da4d11be21", "commitAfterChange": "dea430b985112dc86310f3cdaf8b15a8dea3799c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir, DocFileListVisitor flv) throws IOException", "signatureAfterChange": "   private void evaluateExpression(SEList e, ProjectFileIR pfir, DocFileListVisitor flv) throws IOException", "diff": ["-   */", "+    */", "-      else if (fList.size() == 0) pfir.setProjectRoot(null); // can this ever happen?", "+      else if (fList.size() == 0) throw new PrivateProjectException(\"Cannot have no source roots\");", "+      else if (fList.size() == 0) throw new PrivateProjectException(\"Cannot have no source roots\");", "-      else if (fList.size() == 0) pfir.setBuildDirectory(null);", "+      else if (fList.size() == 0) pfir.setBuildDirectory(FileOps.NULL_FILE);", "-      else if (fList.size() == 0) pfir.setWorkingDirectory(null);", "+//      else if (fList.size() == 0) pfir.setWorkingDirectory(null); // working directory should never be set to null;"]}], "num": 6733}
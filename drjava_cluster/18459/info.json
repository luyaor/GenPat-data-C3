{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac8b70d751ac3703c03b66687e5a141e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fffd3f64960753ccd331a8fd6405179", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   public Class visit(ClassAllocation node)", "signatureAfterChange": "   public Class<?> visit(ClassAllocation node)", "diff": ["-  public Class visit(ClassAllocation node) {", "+  public Class<?> visit(ClassAllocation node) {", "-      Class   ct   = ctn.acceptVisitor(this);", "-      List   largs = node.getArguments();", "+      Class<?>   ct   = ctn.acceptVisitor(this);", "+      List<Expression>   largs = node.getArguments();", "-        Iterator it = largs.iterator();", "+        Iterator<Expression> it = largs.iterator();", "-          args[i++] = ((Node)it.next()).acceptVisitor(this);", "+          args[i++] = it.next().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b7b6a86c30e76299897f81df46643d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public Class visit(SimpleAllocation node)", "signatureAfterChange": "   public Class<?> visit(SimpleAllocation node)", "diff": ["-  public Class visit(SimpleAllocation node) {", "+  public Class<?> visit(SimpleAllocation node) {", "-    Class c  = type.acceptVisitor(this);", "+    Class<?> c  = type.acceptVisitor(this);", "-    List args = node.getArguments();", "-    Class[] cargs = Constants.EMPTY_CLASS_ARRAY;", "+    List<Expression> args = node.getArguments();", "+    Class<?>[] cargs = Constants.EMPTY_CLASS_ARRAY;", "-      ListIterator it = args.listIterator();", "+      ListIterator<Expression> it = args.listIterator();", "-        cargs[i++] = ((Node)it.next()).acceptVisitor(this);", "+        cargs[i++] = it.next().acceptVisitor(this);"]}], "num": 18459}
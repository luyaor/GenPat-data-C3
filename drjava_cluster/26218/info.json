{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1c63f17132b569980f1a58838c1ddd8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a061494e21445544adaf25f51c7c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void _interpret(String toEval)", "signatureAfterChange": "   protected void _interpret(String toEval)", "diff": ["-      Object result = _interpreter.interpret(toEval);", "-      if (result != Interpreter.NO_RESULT) {", "-        append(String.valueOf(result) + \"\\n\" /* formerly StringOps.EOL*/, InteractionsDocument.OBJECT_RETURN_STYLE);", "+      Option<Object> result = _interpreter.interpret(toEval);", "+      if (result.isSome()) {", "+        String objString = null;", "+        try { objString = TextUtil.toString(Option.unwrap(result)); }", "+        catch (Throwable t) { throw new EvaluatorException(t); }", "+        append(objString + \"\\n\", InteractionsDocument.OBJECT_RETURN_STYLE);", "-    catch (ExceptionReturnedException e) {", "-      Throwable t = e.getContainedException();", "-      // getStackTrace should be a utility method somewhere...", "-      _document.appendExceptionResult(t.getClass().getName(),", "-                                      t.getMessage(),", "-                                      InterpreterJVM.getStackTrace(t),", "-                                      InteractionsDocument.DEFAULT_STYLE);", "+    catch (InterpreterException e) {", "+      StringWriter msg = new StringWriter();", "+      e.printUserMessage(new PrintWriter(msg));", "+      _document.appendExceptionResult(msg.toString(), InteractionsDocument.DEFAULT_STYLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4955e4e6f25ae4f0fb99664e74e00168", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/InteractionsDocument.java", "commitBeforeChange": "42453ef03053968f9ca85cc1f502a43bd9378c76", "commitAfterChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public void eval()", "signatureAfterChange": "    public void eval()", "diff": ["-\t\t\tif(result != JavaInterpreter.NO_RESULT)", "+      String resultStr;", "+", "+      try {", "+        resultStr = String.valueOf(result);", "+      }", "+      catch (Throwable t) {", "+        // Very weird. toString() on result must have thrown this exception!", "+        // Let's act like DynamicJava would have if this exception were thrown", "+        // and rethrow as RuntimeException", "+        throw new RuntimeException(t.toString());", "+      }", "+", "+\t\t\tif(result != JavaInterpreter.NO_RESULT) {", "-\t\t\telse", "+      }", "+\t\t\telse {", "+      }", "-    catch (Exception e) {", "+    catch (Throwable e) {", "+      String message = e.getMessage();", "+      // Don't let message be null. Java sadly makes getMessage() return", "+      // null if you construct an exception without a message.", "+      if (message == null) {", "+        message = e.toString();", "+        e.printStackTrace();", "+      }", "+", "-\t\t\t\tif (e.getMessage().startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\"))", "+\t\t\t\tif (message.startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\"))", "-          int end = e.toString().indexOf('\\n');", "-          super.insertString(getLength(), \"\\nError in evaluation: \" +", "-              \"Invalid syntax\\n\", null);", "+          super.insertString(getLength(),", "+                             \"\\nError in evaluation: \" +", "+                             \"Invalid syntax\\n\", null);", "-          super.insertString(getLength(), \"\\nError in evaluation: \" + e.getMessage() + \"\\n\", null);", "+          super.insertString(getLength(),", "+                             \"\\nError in evaluation: \" + message + \"\\n\",", "+                             null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6774ebfb0c4e9a5f0918051cc951757a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsDocument.java", "commitBeforeChange": "42453ef03053968f9ca85cc1f502a43bd9378c76", "commitAfterChange": "84ce5397e59f2c9953a60bb68d966b69ec59ad8c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    public void eval()", "signatureAfterChange": "    public void eval()", "diff": ["-\t\t\tif(result != JavaInterpreter.NO_RESULT)", "+      String resultStr;", "+", "+      try {", "+        resultStr = String.valueOf(result);", "+      }", "+      catch (Throwable t) {", "+        // Very weird. toString() on result must have thrown this exception!", "+        // Let's act like DynamicJava would have if this exception were thrown", "+        // and rethrow as RuntimeException", "+        throw new RuntimeException(t.toString());", "+      }", "+", "+\t\t\tif(result != JavaInterpreter.NO_RESULT) {", "-\t\t\telse", "+      }", "+\t\t\telse {", "+      }", "-    catch (Exception e) {", "+    catch (Throwable e) {", "+      String message = e.getMessage();", "+      // Don't let message be null. Java sadly makes getMessage() return", "+      // null if you construct an exception without a message.", "+      if (message == null) {", "+        message = e.toString();", "+        e.printStackTrace();", "+      }", "+", "-\t\t\t\tif (e.getMessage().startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\"))", "+\t\t\t\tif (message.startsWith(\"koala.dynamicjava.interpreter.InterpreterException: Encountered\"))", "-          int end = e.toString().indexOf('\\n');", "-          super.insertString(getLength(), \"\\nError in evaluation: \" +", "-              \"Invalid syntax\\n\", null);", "+          super.insertString(getLength(),", "+                             \"\\nError in evaluation: \" +", "+                             \"Invalid syntax\\n\", null);", "-          super.insertString(getLength(), \"\\nError in evaluation: \" + e.getMessage() + \"\\n\", null);", "+          super.insertString(getLength(),", "+                             \"\\nError in evaluation: \" + message + \"\\n\",", "+                             null);"]}], "num": 26218}
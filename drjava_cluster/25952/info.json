{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d246bcb4f759c79b3ef65f8e7192175a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02aad6a21e094ff49d5b8e16b6e35d40", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "commitAfterChange": "b35a353aefac369485a6c43b1b1d62dab2d5057c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath)", "signatureAfterChange": "   public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,                                                 List<File> additionalBootClassPath)", "diff": ["-  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, List<File> additionalBootClassPath) {", "-    FullVersion version = guessVersion(f);", "-//    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+  public static JarJDKToolsLibrary makeFromFile(File f, GlobalModel model, CompoundJDKDescriptor desc,", "+                                                List<File> additionalBootClassPath) {", "+    FullVersion version = guessVersion(f);", "+    JDKToolsLibrary.msg(\"makeFromFile: \"+f+\" --> \"+version);", "+    JDKToolsLibrary.msg(\"\\tdesc = \"+desc);", "+    ", "+    boolean isSupported = JavaVersion.CURRENT.supports(version.majorVersion());", "+    if (desc!=null) {", "+      isSupported |= JavaVersion.CURRENT.supports(desc.getMinimumMajorVersion());", "+    }", "+    ", "-    if (JavaVersion.CURRENT.supports(version.majorVersion())) {", "+    if (isSupported) {", "+      if (desc!=null) {", "+        compilerAdapter = desc.getAdapterForCompiler();", "+      }", "+      ", "+      if (desc!=null) {", "+        debuggerAdapter = desc.getAdapterForDebugger();", "+      }", "-    return new JarJDKToolsLibrary(f, version, compiler, debugger, javadoc, bootClassPath);", "+    return new JarJDKToolsLibrary(f, version, desc, compiler, debugger, javadoc, bootClassPath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b6d5e7efbf71958ece6917f05ae17cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "dac1911c42074b029b90bbb69267d350628d7300", "commitAfterChange": "6ac6b30c03b8f321199592a97e544cb4056701f0", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 258, "signatureBeforeChange": "      private Type fieldType(final DJField f, Type declaringType)", "signatureAfterChange": "      private Type fieldType(final DJField f, Type declaringType)", "diff": ["-    return declaringType.apply(new TypeAbstractVisitor<Type>() {", "-      @Override public Type defaultCase(Type declaringType) { return f.type(); }", "-      @Override public Type forRawClassType(RawClassType declaringType) { return erase(f.type()); }", "-      @Override public Type forParameterizedClassType(ParameterizedClassType declaringType) {", "-        ParameterizedClassType cap = capture(declaringType);", "-        return substitute(f.type(), SymbolUtil.allTypeParameters(cap.ofClass()), cap.typeArguments());", "+    Type dynamicContext;", "+    if (f.isStatic()) {", "+      if (declaringType instanceof ClassType) {", "+        dynamicContext = SymbolUtil.dynamicOuterClassType((ClassType) declaringType);", "-    });", "+      else { dynamicContext = null; }", "+    }", "+    else { dynamicContext = declaringType; }", "+    if (dynamicContext == null) { return f.type(); }", "+    else {", "+      return dynamicContext.apply(new TypeAbstractVisitor<Type>() {", "+        @Override public Type defaultCase(Type dynamicContext) { return f.type(); }", "+        @Override public Type forRawClassType(RawClassType dynamicContext) {", "+          // TODO: raw member access warnings", "+          return erase(f.type());", "+        }", "+        @Override public Type forParameterizedClassType(ParameterizedClassType dynamicContext) {", "+          ParameterizedClassType dynamicContextCap = capture(dynamicContext);", "+          Iterable<VariableType> tparams = SymbolUtil.allTypeParameters(dynamicContextCap.ofClass());", "+          return substitute(f.type(), tparams, dynamicContextCap.typeArguments());", "+        }", "+      });", "+    }"]}], "num": 25952}
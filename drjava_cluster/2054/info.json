{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff399feff0464eba496a826070d9007d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207b2fbbe662f035dbb3b6c7b20d19ba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public int _getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "signatureAfterChange": "   public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "diff": ["-  public int _getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "+  public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "-//    synchronized(_reduced) {", "-      String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "-      _setCurrentLocation(pos);  // Move reduced model to location pos", "-      try {", "-        int i = pos;", "-        int reducedPos = pos;", "-        // Walk forward from specificed position", "-        while (i < endPos) {", "-          ", "-          // Check if character is whitespace", "-          if (_match(line.charAt(i-pos), whitespace)) {", "-            i++;", "-            continue;", "-          }", "-          // Found a non whitespace character", "-          // Move reduced model to walker's location for subsequent processing", "-          _setCurrentLocation(i);  // reduced model points to location i", "-          reducedPos = i;", "-          ", "-          // Check if non-ws char is within comment and if we want to ignore them.", "-          if (! acceptComments &&", "-              ((_reduced._getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-               (_reduced._getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "-            i++;  // TODO: increment i to skip over entire comment", "-            continue;", "-          }", "-          ", "-          // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "-          if (! acceptComments && _isStartOfComment(line, i - pos)) {", "-            // ith char is first char in comment open market; skip past this marker and continue searching", "-            i = i + 2;  // TODO: increment i to skip over entire comment", "-            continue;", "-          }", "-          ", "-          // Return position of matching char", "-          _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "-//          _setCurrentLocation(origPos);", "-          return reducedPos;", "+    String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "+    setCurrentLocation(pos);  // Move reduced model to location pos", "+    try {", "+      int i = pos;", "+      int reducedPos = pos;", "+      // Walk forward from specificed position", "+      while (i < endPos) {", "+        ", "+        // Check if character is whitespace", "+        if (match(line.charAt(i-pos), whitespace)) {", "+          i++;", "+          continue;", "+        }", "+        // Found a non whitespace character", "+        // Move reduced model to walker's location for subsequent processing", "+        setCurrentLocation(i);  // reduced model points to location i", "+        reducedPos = i;", "+        ", "+        // Check if non-ws char is within comment and if we want to ignore them.", "+        if (! acceptComments &&", "+            ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+             (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "+          i++;  // TODO: increment i to skip over entire comment", "+          continue;", "-        // No matching char found on this line", "-        if (endPos + 1 >= docLen) { // No matching char found in doc", "-          _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "-//          _setCurrentLocation(origPos);", "-          return -1;", "+        // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "+        if (! acceptComments && _isStartOfComment(line, i - pos)) {", "+          // ith char is first char in comment open market; skip past this marker and continue searching", "+          i = i + 2;  // TODO: increment i to skip over entire comment", "+          continue;", "+        ", "+        // Return position of matching char", "+        _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "+//          _setCurrentLocation(origPos);", "+        return reducedPos;", "-      finally { _setCurrentLocation(origPos); }  // restore _currentLocation", "-//    }  // end sync", "+      // No matching char found on this line", "+      if (endPos + 1 >= docLen) { // No matching char found in doc", "+        _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "+//          _setCurrentLocation(origPos);", "+        return -1;", "+      }", "+    }", "+    finally { setCurrentLocation(origPos); }  // restore _currentLocation", "+    ", "-    return _getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);", "+    return getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf1d2c7334465a95ddd097b03dd0a9a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "signatureAfterChange": "   public int _getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws      BadLocationException", "diff": ["-  public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "+  public int _getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws ", "+    ", "+    assert isReadLocked();", "+    ", "-    acquireReadLock();", "-    try {", "-      final int docLen = getLength();", "-      final int origPos = _currentLocation;", "-      final int endPos = getLineEndPos(pos);", "-      ", "-      synchronized(_reduced) {", "-        String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "-        _setCurrentLocation(pos);  // Move reduced model to location pos", "-        try {", "-          int i = pos;", "-          int reducedPos = pos;", "-          // Walk forward from specificed position", "-          while (i < endPos) {", "-            ", "-            // Check if character is whitespace", "-            if (match(line.charAt(i-pos), whitespace)) {", "-              i++;", "-              continue;", "-            }", "-            // Found a non whitespace character", "-            // Move reduced model to walker's location for subsequent processing", "-            _setCurrentLocation(i);  // reduced model points to location i", "-            reducedPos = i;", "-            ", "-            // Check if non-ws char is within comment and if we want to ignore them.", "-            if (! acceptComments &&", "-                ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "-                 (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "-              i++;  // TODO: increment i to skip over entire comment", "-              continue;", "-            }", "-            ", "-            // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "-            if (! acceptComments && _isStartOfComment(line, i - pos)) {", "-              // ith char is first char in comment open market; skip past this marker and continue searching", "-              i = i + 2;  // TODO: increment i to skip over entire comment", "-              continue;", "-            }", "-            ", "-            // Return position of matching char", "-            _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "-//          _setCurrentLocation(origPos);", "-            return reducedPos;", "+//    acquireReadLock();", "+//    try {", "+    final int docLen = getLength();", "+    final int origPos = _currentLocation;", "+    final int endPos = _getLineEndPos(pos);", "+    ", "+    synchronized(_reduced) {", "+      String line = getText(pos, endPos - pos);   // Get text from pos to end of line", "+      _setCurrentLocation(pos);  // Move reduced model to location pos", "+      try {", "+        int i = pos;", "+        int reducedPos = pos;", "+        // Walk forward from specificed position", "+        while (i < endPos) {", "+          ", "+          // Check if character is whitespace", "+          if (match(line.charAt(i-pos), whitespace)) {", "+            i++;", "+            continue;", "+          }", "+          // Found a non whitespace character", "+          // Move reduced model to walker's location for subsequent processing", "+          _setCurrentLocation(i);  // reduced model points to location i", "+          reducedPos = i;", "+          ", "+          // Check if non-ws char is within comment and if we want to ignore them.", "+          if (! acceptComments &&", "+              ((_reduced._getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||", "+               (_reduced._getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {", "+            i++;  // TODO: increment i to skip over entire comment", "+            continue;", "-          // No matching char found on this line", "-          if (endPos + 1 >= docLen) { // No matching char found in doc", "-            _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "-//          _setCurrentLocation(origPos);", "-            return -1;", "+          // Check if non-ws char is part of comment opening bracket and if we want to ignore them", "+          if (! acceptComments && _isStartOfComment(line, i - pos)) {", "+            // ith char is first char in comment open market; skip past this marker and continue searching", "+            i = i + 2;  // TODO: increment i to skip over entire comment", "+            continue;", "+          ", "+          // Return position of matching char", "+          _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]", "+//          _setCurrentLocation(origPos);", "+          return reducedPos;", "-        finally { _setCurrentLocation(origPos); }  // restore _currentLocation", "-      }  // end sync", "-      // Search through remaining lines of document; recursion depth is bounded by number of blank lines following pos", "-      return getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);", "-    }", "-    finally { releaseReadLock(); }", "+        // No matching char found on this line", "+        if (endPos + 1 >= docLen) { // No matching char found in doc", "+          _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!", "+//          _setCurrentLocation(origPos);", "+          return -1;", "+        }", "+      }", "+      finally { _setCurrentLocation(origPos); }  // restore _currentLocation", "+      ", "+    }  // end sync", "+    // Search through remaining lines of document; recursion depth is bounded by number of blank lines following pos", "+    return _getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);", "+//    }", "+//    finally { releaseReadLock(); }"]}], "num": 2054}
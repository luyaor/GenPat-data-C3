{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "262ceb20fc78b3fe2ce5f355ea22610f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea3831cb367942f3d7a6af559a8a3f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testCompileAllFailsDifferentSourceRoots()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException", "diff": ["-  public void testCompileAllFailsDifferentSourceRoots()", "-    throws BadLocationException, IOException", "-  {", "+  public void testCompileAllFailsDifferentSourceRoots() throws BadLocationException, IOException {", "+", "-", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "-    _model.getCompilerModel().compileAll();", "+    ", "+    _compileDone = false;", "+    _model.addListener(_failListener);", "+    CompilerModel cm = _model.getCompilerModel();", "+    cm.compileAll();", "+    _waitCompileDone();", "+    ", "-    assertEquals(\"Should have 2 compiler errors\", 2,", "-                 _model.getCompilerModel().getNumErrors());", "-    listener.checkCompileOccurred();", "+    assertEquals(\"Should have 2 compiler errors\", 2, _model.getCompilerModel().getNumErrors());", "+    _failListener.checkCompileOccurred();", "-    assertEquals(_name() + \"Class file exists after failing compile (1)\",", "-                 false,", "-                 compiled.exists());", "+    assertEquals(_name() + \"Class file exists after failing compile (1)\", false, compiled.exists());", "-    assertEquals(_name() + \"Class file exists after failing compile (2)\",", "-                 false,", "-                 compiled2.exists());", "-    _model.removeListener(listener);", "+    assertEquals(_name() + \"Class file exists after failing compile (2)\", false, compiled2.exists());", "+    _model.removeListener(_failListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3c13fa2f1eb42c173f61f1220d81ec8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileErrorsTest.java", "commitBeforeChange": "1b9869851f567b7b6474eabaac96584b4771f5f3", "commitAfterChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testCompileWithPackageStatementInsideClass()     throws BadLocationException, IOException", "signatureAfterChange": "   public void testCompileWithPackageStatementInsideClass() throws BadLocationException, IOException", "diff": ["-   */", "-  public void testCompileWithPackageStatementInsideClass()", "-    throws BadLocationException, IOException", "-  {", "+  /** Puts an otherwise valid package statement inside a class declaration. This better not work! */", "+  public void testCompileWithPackageStatementInsideClass() throws BadLocationException, IOException {", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "+    _compileDone = false;", "+    _model.addListener(_failListener);", "+    _waitCompileDone();", "-    listener.checkCompileOccurred();", "+    _failListener.checkCompileOccurred();", "-    assertTrue(_name() + \"Class file exists after failed compile\",", "-               !compiled.exists());", "+    assertTrue(_name() + \"Class file exists after failed compile\", !compiled.exists());", "-    assertEquals(\"CompilerErrorModel has errors after reset\",", "-                 0,", "-                 cem.getNumErrors());", "-    _model.removeListener(listener);", "+    assertEquals(\"CompilerErrorModel has errors after reset\", 0, cem.getNumErrors());", "+    _model.removeListener(_failListener);"]}], "num": 5998}
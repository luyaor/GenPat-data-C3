{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec192428c7a382ef246113a28dc3bd15", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7891a5a960b99e5418cccf7845e69906", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "4b21424812450d42c0dde2aef3c483c11b298e24", "commitAfterChange": "ede26ceaad5c407d940ac773a5e7f457dc1f5187", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "signatureAfterChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "diff": ["-        if (!ts.isCastable(leftT, rightT) && !ts.isCastable(rightT, leftT)) {", "+        if (ts.isDisjoint(leftT, rightT)) {", "+          setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+            setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+          setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5eb343972f4152538e58a5845adedb1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/NewJavaClassTest.java", "commitBeforeChange": "6207c0d4b83ee23d6d4624c513f270e47c43cc83", "commitAfterChange": "f4c8eb851d98f4da2479f32fb767dac4b3a40e1c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testInterfacesNamingConventionsCorrectNames()", "signatureAfterChange": "      public void testInterfacesNamingConventionsCorrectNames()", "diff": ["-               NewJavaClassDialog.interfacesNameMeetsNamingConvention(\"interfaces\"));", "+               NewJavaClassDialog.checkInterfaceNames(\"interfaces\"));", "-               NewJavaClassDialog.interfacesNameMeetsNamingConvention(\"interfaces, interfaceme\"));", "+               NewJavaClassDialog.checkInterfaceNames(\"interfaces, interfaceme\"));", "-               NewJavaClassDialog.interfacesNameMeetsNamingConvention(\"interfaces1, interfaceme123\"));", "+               NewJavaClassDialog.checkInterfaceNames(\"interfaces1, interfaceme123\"));", "-               NewJavaClassDialog.interfacesNameMeetsNamingConvention(\"int12erfaces1 , interfaceme123 , goodName\"));", "+               NewJavaClassDialog.checkInterfaceNames(\"int12erfaces1 , interfaceme123 , goodName\"));", "-               NewJavaClassDialog.interfacesNameMeetsNamingConvention(\"int12erfaces1 ,interfaceme123,goodName\"));", "+               NewJavaClassDialog.checkInterfaceNames(\"int12erfaces1 ,interfaceme123,goodName\"));", "+    assertTrue(\"Correct Interfaces Name\", ", "+               NewJavaClassDialog.checkInterfaceNames(\"inter.faces\"));", "+    assertTrue(\"Correct Interfaces Name\", ", "+               NewJavaClassDialog.checkInterfaceNames(\"interfaces, interf.aceme\"));", "+    assertTrue(\"Correct Interfaces Name\", ", "+               NewJavaClassDialog.checkInterfaceNames(\"interfaces1, interf.ace.me123\"));", "+    assertTrue(\"Correct Interfaces Name\", ", "+               NewJavaClassDialog.checkInterfaceNames(\"int12erfaces1 , interfaceme123 , good.Name\"));", "+    assertTrue(\"Correct Interfaces Name\", ", "+               NewJavaClassDialog.checkInterfaceNames(\"int12.erfaces1 ,interf.aceme123,good.Name\"));"]}], "num": 12005}
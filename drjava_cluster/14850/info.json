{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67885e46df181096acb6ded32dbe7e57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56b17ec63249c971df5cc61b9aa1eaef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public TypeData forParenthesizedOnly(Parenthesized that, TypeData value_result)", "signatureAfterChange": "   public TypeData forParenthesizedOnly(Parenthesized that, TypeData valueRes)", "diff": ["-  public TypeData forParenthesizedOnly(Parenthesized that, TypeData value_result) {", "-    if (value_result == null) {return null;}", "+  public TypeData forParenthesizedOnly(Parenthesized that, TypeData valueRes) {", "+    if (valueRes == null) {return null;}", "-    if (!assertFound(value_result, that.getValue())) {", "+    if (!assertFound(valueRes, that.getValue())) {", "-    assertInstanceType(value_result, \"This class or interface name cannot appear in parentheses\", that);", "-    return value_result.getInstanceData();", "+    assertInstanceType(valueRes, \"This class or interface name cannot appear in parentheses\", that);", "+    return valueRes.getInstanceData();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cb78d12d5dd6dc3addb5f68be3cdc17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result)", "signatureAfterChange": "   public TypeData forNotExpressionOnly(NotExpression that, TypeData valueRes)", "diff": ["-  public TypeData forNotExpressionOnly(NotExpression that, TypeData value_result) {", "-    if (value_result == null) {return null;}", "+  public TypeData forNotExpressionOnly(NotExpression that, TypeData valueRes) {", "+    if (valueRes == null) {return null;}", "-    if (!assertFound(value_result, that)) {", "+    if (!assertFound(valueRes, that)) {", "-    if (assertInstanceType(value_result, ", "-                           \"You cannot use the not (!) operator with \" + value_result.getName() + ", "+    if (assertInstanceType(valueRes, ", "+                           \"You cannot use the not (!) operator with \" + valueRes.getName() + ", "-        ! value_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, ", "+        ! valueRes.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, ", "-      _addError(\"You cannot use the not (!) operator with something of type \" + value_result.getName() + ", "+      _addError(\"You cannot use the not (!) operator with something of type \" + valueRes.getName() + "]}], "num": 14850}
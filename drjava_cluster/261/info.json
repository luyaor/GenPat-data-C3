{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfd01a6adf71882abb923397a039690b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004a15f3c7edb330adfe005cb5c887cc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public synchronized void treeCollapsed(TreeExpansionEvent event)", "signatureAfterChange": "   public synchronized void treeCollapsed(TreeExpansionEvent event)", "diff": ["-    if (o instanceof InnerNode) ((InnerNode)o).setCollapsed(true);", "+    if (o instanceof InnerNode) ((InnerNode<?, ?>)o).setCollapsed(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "023a481f3d3ee517a95119245e6b18f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public MethodContext(Interpreter i, Class c, Object obj, ImportationManager im)", "signatureAfterChange": "   public MethodContext(Interpreter i, Class c, Object obj, ImportationManager im)", "diff": ["-     */", "-    public MethodContext(Interpreter i, Class c, Object obj, ImportationManager im) {", "-\tsuper(i, c, im);", "-\timportationManager = im;", "-", "-\tList l = new LinkedList();", "-\tl.add(thisIdentifier);", "-\tdefaultQualifier = new QualifiedName(l);", "-\tsetConstant(\"this\", obj);", "-    }", "+   */", "+  public MethodContext(Interpreter i, Class c, Object obj, ImportationManager im) {", "+    super(i, c, im);", "+    importationManager = im;", "+    ", "+    List<IdentifierToken> l = new LinkedList<IdentifierToken>();", "+    l.add(thisIdentifier);", "+    defaultQualifier = new QualifiedName(l);", "+    setConstant(\"this\", obj);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f274d9888f49aa28cbd7ead87e48f0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   void collapsePaths(HashSet<String> paths)", "signatureAfterChange": "   void collapsePaths(HashSet<String> paths)", "diff": ["-      if (tn instanceof InnerNode) {", "+      if (tn instanceof InnerNode<?,?>) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049284575c2e67cc1b0899a6068d82c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 198, "signatureBeforeChange": "   private void _resetNavigatorPane()", "signatureAfterChange": "   private void _resetNavigatorPane()", "diff": ["-      JTreeSortNavigator nav = (JTreeSortNavigator)_model.getDocumentNavigator();", "+      JTreeSortNavigator<?> nav = (JTreeSortNavigator<?>)_model.getDocumentNavigator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c96ce2ca101143328d47e1ef335a15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigPanel.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void resetToCurrent()", "signatureAfterChange": "   public void resetToCurrent()", "diff": ["-      if (_components.get(i) instanceof VectorOptionComponent)", "-        ((VectorOptionComponent)_components.get(i)).resizeTable();", "+      if (_components.get(i) instanceof VectorOptionComponent<?>)", "+        ((VectorOptionComponent<?>)_components.get(i)).resizeTable();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073e2f911287524068e6d1ca39bcf3ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private Class _checkUnaryExpression(String text, String expected)      throws InterpreterException", "signatureAfterChange": "      private Class<?> _checkUnaryExpression(String text, String expected)      throws InterpreterException", "diff": ["-  private Class _checkUnaryExpression(String text, String expected) ", "+  private Class<?> _checkUnaryExpression(String text, String expected) ", "-    Class type = exp.acceptVisitor(_typeChecker);", "+    Class<?> type = exp.acceptVisitor(_typeChecker);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07aa7d65f2170023d45b9b19e0406d0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectAdvancedPropertiesFrame.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "    @SuppressWarnings(\"unchecked\")   public void setPreferencesStoredInProject(Map<OptionParser,String> sp)", "signatureAfterChange": "\r \r   @SuppressWarnings(\"unchecked\")\r   public void setPreferencesStoredInProject(Map<OptionParser<?>,String> sp)", "diff": ["-", "-  @SuppressWarnings(\"unchecked\")", "-  public void setPreferencesStoredInProject(Map<OptionParser,String> sp) {", "-    ArrayList<PreferencesRecord> list = new ArrayList<PreferencesRecord>();", "-    for(OptionParser o: sp.keySet()) {", "-      list.add(new PreferencesRecord", "-                 (o,", "-                  edu.rice.cs.drjava.ui.config.ConfigDescriptions.CONFIG_DESCRIPTIONS.get(o),", "-                  edu.rice.cs.drjava.ui.config.ConfigDescriptions.CONFIG_LONG_DESCRIPTIONS.get(o)));", "-    }", "-    _preferencesList.setValue(list);", "-  }", "+\r", "+  @SuppressWarnings(\"unchecked\")\r", "+  public void setPreferencesStoredInProject(Map<OptionParser<?>,String> sp) {\r", "+    ArrayList<PreferencesRecord> list = new ArrayList<PreferencesRecord>();\r", "+    for(OptionParser<?> o: sp.keySet()) {\r", "+      list.add(new PreferencesRecord\r", "+                 (o,\r", "+                  edu.rice.cs.drjava.ui.config.ConfigDescriptions.CONFIG_DESCRIPTIONS.get(o),\r", "+                  edu.rice.cs.drjava.ui.config.ConfigDescriptions.CONFIG_LONG_DESCRIPTIONS.get(o)));\r", "+    }\r", "+    _preferencesList.setValue(list);\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08c5b539d027b8bd44262226befd0568", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void setUp() throws IOException", "signatureAfterChange": "      public void setUp() throws IOException", "diff": ["-    tree = new JTreeSortNavigator(f.getCanonicalPath());", "+    tree = new JTreeSortNavigator<DummyINavigatorItem>(f.getCanonicalPath());", "-    tree.addTopLevelGroup(\"[ Source Files ]\", new INavigatorItemFilter(){", "+    tree.addTopLevelGroup(\"[ Source Files ]\", new INavigatorItemFilter<INavigatorItem>(){"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e8dcbac220b7d0519260a8c7ae81a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public Class visit(ObjectMethodCall node)", "signatureAfterChange": "   public Class<?> visit(ObjectMethodCall node)", "diff": ["-  public Class visit(ObjectMethodCall node) {", "+  public Class<?> visit(ObjectMethodCall node) {", "-    Class      c   = exp.acceptVisitor(this);", "+    Class<?>      c   = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0922cb11197a1c1c78dfe33efbcb48cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "798fcd5fdec1efc6698cb1c49cd62bdab41daffc", "commitAfterChange": "42465b0c95801c83cae0d8e781c43cb17e95c775", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "signatureAfterChange": "   final public ForSlashEachStatement forStatement() throws ParseException", "diff": ["-    List       init   = null;", "+    List<Node>       init   = null;", "-    List       update = null;", "+    List<Node>       update = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0987043f59b953763627678113e12eb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "   public Class visit(UnsignedShiftRightExpression node)", "signatureAfterChange": "   public Class<?> visit(UnsignedShiftRightExpression node)", "diff": ["-  public Class visit(UnsignedShiftRightExpression node) {", "-    Class c = visitShiftExpression(node);", "+  public Class<?> visit(UnsignedShiftRightExpression node) {", "+    Class<?> c = visitShiftExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfe9a4035f4df64bac5c083c7862c4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public Class visit(ReferenceType node)", "signatureAfterChange": "   public Class<?> visit(ReferenceType node)", "diff": ["-  public Class visit(ReferenceType node) {", "+  public Class<?> visit(ReferenceType node) {", "-    Class c = null;", "+    Class<?> c = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f83a7f253c8b8c0a38c72288a71e7bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected QualifiedName _convertThisToName(ThisExpression node)", "signatureAfterChange": "   protected QualifiedName _convertThisToName(ThisExpression node)", "diff": ["-    List ids = new LinkedList(); // Add parameterization <Identifier>.", "+    List<IdentifierToken> ids = new LinkedList<IdentifierToken>(); // Add parameterization <Identifier>."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f976b6c48e3e3b6f680a48d9322e7e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ProjectAdvancedPropertiesFrame.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void reset(Map<OptionParser,String> sp)", "signatureAfterChange": "\r   \r   public void reset(Map<OptionParser<?>,String> sp)", "diff": ["-  ", "-  public void reset(Map<OptionParser,String> sp) {", "-    _unmodifiedStoredPreferences = new HashMap<OptionParser,String>(sp);", "-    setPreferencesStoredInProject(_unmodifiedStoredPreferences);", "-  }", "+  \r", "+  public void reset(Map<OptionParser<?>,String> sp) {\r", "+    _unmodifiedStoredPreferences = new HashMap<OptionParser<?>,String>(sp);\r", "+    setPreferencesStoredInProject(_unmodifiedStoredPreferences);\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9e62d4c8bae0f03b7817b94ce71d39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected QualifiedName _convertThisToName(ThisExpression node)", "signatureAfterChange": "   protected QualifiedName _convertThisToName(ThisExpression node)", "diff": ["-    List ids = new LinkedList();", "+    List<Identifier> ids = new LinkedList<Identifier>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11328d5dde8abd4ebaf9b41cd8459af1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public Object visit(TryStatement node)", "signatureAfterChange": "   public Object visit(TryStatement node)", "diff": ["-    LinkedList catchStatements = new LinkedList();", "+    LinkedList<Node> catchStatements = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11be4c871943ea6ca5e153b1734e1492", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public Object visit(AddAssignExpression node)", "signatureAfterChange": "   public Object visit(AddAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11ea42a66b1c2f748157714cf2dc2f00", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(ConstructorInvocation node)", "signatureAfterChange": "     public Object visit(ConstructorInvocation node)", "diff": ["-      LinkedList arguments = null;", "+      LinkedList<Node> arguments = null;", "-        arguments = new LinkedList();", "+        arguments = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12308420c1f0d9075199987fa3caa32d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public Class visit(DivideExpression node)", "signatureAfterChange": "   public Class<?> visit(DivideExpression node)", "diff": ["-  public Class visit(DivideExpression node) {", "+  public Class<?> visit(DivideExpression node) {", "-    Class c = visitNumericExpression(node, \"division.type\");", "+    Class<?> c = visitNumericExpression(node, \"division.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1230d78800f8724b20ef43e70bdd748d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public Class visit(MultiplyExpression node)", "signatureAfterChange": "   public Class<?> visit(MultiplyExpression node)", "diff": ["-  public Class visit(MultiplyExpression node) {", "+  public Class<?> visit(MultiplyExpression node) {", "-    Class c = visitNumericExpression(node, \"multiplication.type\");", "+    Class<?> c = visitNumericExpression(node, \"multiplication.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1269e78d26c85e931134403c747eb058", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void addTopLevelGroupToRoot(InnerNode parent)", "signatureAfterChange": "      private void addTopLevelGroupToRoot(InnerNode<?, ItemT> parent)", "diff": ["-  private void addTopLevelGroupToRoot(InnerNode parent) {", "+  private void addTopLevelGroupToRoot(InnerNode<?, ItemT> parent) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14345daa009a92e2b46d55c2db277cad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public static boolean isCompatible(Class c1, Class c2)", "signatureAfterChange": "   public static boolean isCompatible(Class<?> c1, Class<?> c2)", "diff": ["-  public static boolean isCompatible(Class c1, Class c2) {", "+  public static boolean isCompatible(Class<?> c1, Class<?> c2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16c9b9d377d5c90952dbe93b6c677fae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "     public Object visit(SuperMethodCall node)", "diff": ["-      LinkedList arguments = null;", "+      LinkedList<Node> arguments = null;", "-        arguments = new LinkedList();", "+        arguments = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16cb6c4c222466fd638127a83226eae7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "     public Object visit(MethodDeclaration node)", "signatureAfterChange": "     public Object visit(MethodDeclaration node)", "diff": ["-      LinkedList parameters = new LinkedList();", "+      LinkedList<Node> parameters = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "178be45e7b61642e06e1ad61a154b768", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        List args = new LinkedList(); //Add parameterization <Mirror>. ", "+        List<Mirror> args = new LinkedList<Mirror>(); //Added parameterization <Mirror>. "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a7c1abf6dc6dafaa7c6dc935769785", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "   public Class visit(FormalParameter node)", "signatureAfterChange": "   public Class<?> visit(FormalParameter node)", "diff": ["-  public Class visit(FormalParameter node) {", "-    Class c = node.getType().acceptVisitor(this);", "+  public Class<?> visit(FormalParameter node) {", "+    Class<?> c = node.getType().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17dcc37901ef6db9ea4a987d84ab6ff2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ForcedChoiceOptionTest.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testParse()", "signatureAfterChange": "      public void testParse()", "diff": ["-    ArrayList aList = new ArrayList(4);", "+    ArrayList<String> aList = new ArrayList<String>(4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181f4e56ddd6c9a0f4e6470af2a5fdda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public Object visit(DivideAssignExpression node)", "signatureAfterChange": "   public Object visit(DivideAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18ad7433329a1b89443e4f8835bb7e65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "     public Object visit(BlockStatement node)", "signatureAfterChange": "     public Object visit(BlockStatement node)", "diff": ["-      LinkedList statements = new LinkedList();", "+      LinkedList<Node> statements = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1952d3f580d690ee469fb4048ab59018", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   public Object visit(ExclusiveOrAssignExpression node)", "signatureAfterChange": "   public Object visit(ExclusiveOrAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aba641bf165dee8a789b71a1874e80c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/PreviewFrame.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "    private static Object callMethod(Object rec, Class c, String name,                                    Class[] ca,                                    Object[] args) throws Exception", "signatureAfterChange": "    private static Object callMethod(Object rec, Class<?> c, String name,                                    Class<?>[] ca,                                    Object[] args) throws Exception", "diff": ["-  private static Object callMethod(Object rec, Class c, String name,", "-                                   Class[] ca,", "+  private static Object callMethod(Object rec, Class<?> c, String name,", "+                                   Class<?>[] ca,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c99b820829d4292f3d4ccbd5f366bf3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "   public Class visit(GreaterOrEqualExpression node)", "signatureAfterChange": "   public Class<?> visit(GreaterOrEqualExpression node)", "diff": ["-  public Class visit(GreaterOrEqualExpression node) {", "-    Class c = visitRelationalExpression(node);", "+  public Class<?> visit(GreaterOrEqualExpression node) {", "+    Class<?> c = visitRelationalExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d0ac4aa9016596d09f67b309d97ad5f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public Object visit(PostIncrement node)", "signatureAfterChange": "   public Object visit(PostIncrement node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e7c5ec9c0d0b465d8ed75c661407527", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean isExpanded,                                                   boolean leaf, int row, boolean hasFocus)", "signatureAfterChange": "     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean isExpanded,                                                   boolean leaf, int row, boolean hasFocus)", "diff": ["-      if (node instanceof RootNode && _rootIcon != null) setIcon(_rootIcon);", "+      if (node instanceof RootNode<?> && _rootIcon != null) setIcon(_rootIcon);", "-      else if (node instanceof LeafNode) {", "+      else if (node instanceof LeafNode<?>) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20f34729b23687ab07bd472547e53e0b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "   public Class visit(PostIncrement node)", "signatureAfterChange": "   public Class<?> visit(PostIncrement node)", "diff": ["-  public Class visit(PostIncrement node) {", "+  public Class<?> visit(PostIncrement node) {", "-    Class c  = exp.acceptVisitor(this);", "+    Class<?> c  = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "224997f9d4ad58837d3935845e1add8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public Class visit(LessOrEqualExpression node)", "signatureAfterChange": "   public Class<?> visit(LessOrEqualExpression node)", "diff": ["-  public Class visit(LessOrEqualExpression node) {", "-    Class c = visitRelationalExpression(node);", "+  public Class<?> visit(LessOrEqualExpression node) {", "+    Class<?> c = visitRelationalExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2266d49426eda97223e97d2be712609b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public Class visit(BitAndExpression node)", "signatureAfterChange": "   public Class<?> visit(BitAndExpression node)", "diff": ["-  public Class visit(BitAndExpression node) {", "-    Class c = visitBitwiseExpression(node);", "+  public Class<?> visit(BitAndExpression node) {", "+    Class<?> c = visitBitwiseExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "228aed3deebf53902f607e98958f46d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public int getGroupSelectedCount()", "signatureAfterChange": "   public int getGroupSelectedCount()", "diff": ["-      if (n instanceof InnerNode) { ++count; }", "+      if (n instanceof InnerNode<?,?>) { ++count; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2568a61a2e0c35daf6dc593f508e5d78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "   public Class visit(CastExpression node)", "signatureAfterChange": "   public Class<?> visit(CastExpression node)", "diff": ["-  public Class visit(CastExpression node) {", "-    Class c = node.getTargetType().acceptVisitor(this);", "+  public Class<?> visit(CastExpression node) {", "+    Class<?> c = node.getTargetType().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277d4a432dfa50ab6bd7a45bc5e08ae5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Expression createName(Node node, IdentifierToken name)", "signatureAfterChange": "   public Expression createName(Node node, IdentifierToken name)", "diff": ["-          Class c = declaringClass;", "-          Class fc = f.getDeclaringClass();", "+          Class<?> c = declaringClass;", "+          Class<?> fc = f.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2861e08cd09a0671fce23040e221cf23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "     protected void visitShiftExpression(BinaryExpression node, String s)", "signatureAfterChange": "     protected void visitShiftExpression(BinaryExpression node, String s)", "diff": ["-      Class     lc  = null;", "-      Class     rc  = null;", "+      Class<?>     lc  = null;", "+      Class<?>     rc  = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2adf671d84b5592db17419c9c4669304", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "     public Object visit(InnerAllocation node)", "signatureAfterChange": "     public Object visit(InnerAllocation node)", "diff": ["-      LinkedList arguments = null;", "+      LinkedList<Expression> arguments = null;", "-        arguments = new LinkedList();", "+        arguments = new LinkedList<Expression>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be4aee5a170c5c3cd121bdacfdf0e7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public Object visit(BitOrAssignExpression node)", "signatureAfterChange": "   public Object visit(BitOrAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c47759f62f1c41ef7710d9b15fd896e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public Class visit(MinusExpression node)", "signatureAfterChange": "   public Class<?> visit(MinusExpression node)", "diff": ["-  public Class visit(MinusExpression node) {", "-    Class c = visitUnaryOperation(node, \"minus.expression.type\");", "+  public Class<?> visit(MinusExpression node) {", "+    Class<?> c = visitUnaryOperation(node, \"minus.expression.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c9a72d71131a683bf227d887e400701", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public static Field getOuterField(Class cl, String name)     throws NoSuchFieldException, AmbiguousFieldException", "signatureAfterChange": "   public static Field getOuterField(Class<?> cl, String name)     throws NoSuchFieldException, AmbiguousFieldException", "diff": ["-  public static Field getOuterField(Class cl, String name)", "+  public static Field getOuterField(Class<?> cl, String name)", "-    Class   c  = (cl != null) ? cl.getDeclaringClass() : null;", "+    Class<?>   c  = (cl != null) ? cl.getDeclaringClass() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ce66a9d29988f40338830a4bd5a7a93", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public void treeExpanded(TreeExpansionEvent event)", "signatureAfterChange": "   public void treeExpanded(TreeExpansionEvent event)", "diff": ["-    if (o instanceof InnerNode) ((InnerNode<?, ?>)o).setCollapsed(false);", "+    if (o instanceof InnerNode<?,?>) ((InnerNode<?,?>)o).setCollapsed(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d3e0ad24bc31632481bdd7e6f2b3687", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public Class visit(PlusExpression node)", "signatureAfterChange": "   public Class<?> visit(PlusExpression node)", "diff": ["-  public Class visit(PlusExpression node) {", "-    Class c = visitUnaryOperation(node, \"plus.expression.type\");", "+  public Class<?> visit(PlusExpression node) {", "+    Class<?> c = visitUnaryOperation(node, \"plus.expression.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f2fd60df62d1bd8fc9c6d4c05fe1fe4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ForEachNamingTest.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testSuperForEach() throws ParseException", "signatureAfterChange": "   public void testSuperForEach() throws ParseException", "diff": ["-    Context cntxt = new GlobalContext(new TreeInterpreter(new JavaCCParserFactory()));", "+    Context<Type> cntxt = new GlobalContext<Type>(new TreeInterpreter(new JavaCCParserFactory()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306c0b9da59882ac348402312da8c47b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public Object visit(BitAndAssignExpression node)", "signatureAfterChange": "   public Object visit(BitAndAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30c003df60495484082a49a2f72ddbef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NodeProperties.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static Class getType(Node n)", "signatureAfterChange": "     public static Class<?> getType(Node n)", "diff": ["-    public static Class getType(Node n) {", "-        return (Class)n.getProperty(TYPE);", "+    public static Class<?> getType(Node n) {", "+        return (Class<?>)n.getProperty(TYPE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3169ae17d14760d4a9bea8da540fa3e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/StaticContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Method lookupMethod(Node prefix, String mname, Class[] params)     throws NoSuchMethodException", "signatureAfterChange": "   public Method lookupMethod(Node prefix, String mname, Class<?>[] params)     throws NoSuchMethodException", "diff": ["-  public Method lookupMethod(Node prefix, String mname, Class[] params)", "+  public Method lookupMethod(Node prefix, String mname, Class<?>[] params)", "-    Class  c = NodeProperties.getType(prefix);", "+    Class<?>  c = NodeProperties.getType(prefix);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "322362f9214faa091ecf26c17e474c35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public Class visit(DoStatement node)", "signatureAfterChange": "   public Class<?> visit(DoStatement node)", "diff": ["-  public Class visit(DoStatement node) {", "+  public Class<?> visit(DoStatement node) {", "-    Class type = exp.acceptVisitor(this);", "+    Class<?> type = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32cd2f0eac8f1cbcf590f933373889fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected static Object equalityOperation(Class lc, Class rc,                                             Object l, Object r,                                             BinaryPredicate p)", "signatureAfterChange": "   protected static Object equalityOperation(Class<?> lc, Class<?> rc,                                             Object l, Object r,                                             BinaryPredicate p)", "diff": ["-  protected static Object equalityOperation(Class lc, Class rc,", "+  protected static Object equalityOperation(Class<?> lc, Class<?> rc,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "342664c9496c297327e30a089c46f93f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public Object visit(SwitchStatement node)", "signatureAfterChange": "   public Object visit(SwitchStatement node)", "diff": ["-    LinkedList cases = new LinkedList();", "+    LinkedList<Node> cases = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34af36cc0c4ace7ca73109214824eafd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public Class visit(StaticFieldAccess node)", "signatureAfterChange": "   public Class<?> visit(StaticFieldAccess node)", "diff": ["-  public Class visit(StaticFieldAccess node) {", "+  public Class<?> visit(StaticFieldAccess node) {", "-    Class c = node.getFieldType().acceptVisitor(this);", "+    Class<?> c = node.getFieldType().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "357bf1244d2a86836fa8997d8a0aab1e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilitiesTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testIsVarArgs()", "signatureAfterChange": "   public void testIsVarArgs()", "diff": ["-      Method m1 = java.io.PrintStream.class.getMethod(\"printf\", new Class[]{String.class, Object[].class});", "-      Method m2 = java.io.PrintStream.class.getMethod(\"println\",new Class[]{ });", "+      Method m1 = java.io.PrintStream.class.getMethod(\"printf\", new Class<?>[]{String.class, Object[].class});", "+      Method m2 = java.io.PrintStream.class.getMethod(\"println\",new Class<?>[]{ });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35cf3b13a5ec34a8fa857ce81cadf128", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public Object visit(ArrayAllocation node)", "signatureAfterChange": "     public Object visit(ArrayAllocation node)", "diff": ["-      LinkedList sizes = new LinkedList();", "+      LinkedList<Expression> sizes = new LinkedList<Expression>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36d4fad40d4e5e937901c3f205adaff3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-    LinkedList arguments = null;", "+    LinkedList<Node> arguments = null;", "-      arguments = new LinkedList();", "+      arguments = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c7a486f9f35787817e2344f60a83df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Node getDefaultQualifier(Node node, String tname)", "signatureAfterChange": "   public Node getDefaultQualifier(Node node, String tname)", "diff": ["-        Class c = lookupClass(tname);", "-        Class t = declaringClass;", "+        Class<?> c = lookupClass(tname);", "+        Class<?> t = declaringClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38b792480a9d903b2e16cad0b9fe695e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "b583f95ca38940907816c4beb7118ff0df1017e2", "commitAfterChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public static Process runJVM(String mainClass,                                String[] classParams,                                String[] jvmParams) throws IOException", "signatureAfterChange": "   public static Process runJVM(String mainClass,                                String[] classParams,                                String[] jvmParams) throws IOException", "diff": ["-                               String[] jvmParams) throws IOException", "-  {", "-    LinkedList args = new LinkedList();", "+                               String[] jvmParams) throws IOException {", "+    LinkedList<String> args = new LinkedList<String>();", "-", "+    ", "-", "+    ", "-      //System.err.println(\"arg #\" + i + \": \" + argArray[i]);", "+    //System.err.println(\"arg #\" + i + \": \" + argArray[i]);", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399e1ee117d6b9c34f4b787f48e2b071", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "   public Object visit(MultiplyAssignExpression node)", "signatureAfterChange": "   public Object visit(MultiplyAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a27e07f861c87feddf62419da32300b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void _assertBoxCompatible(Class c1, Class c2, boolean boxEnabled)", "signatureAfterChange": "   private void _assertBoxCompatible(Class<?> c1, Class<?> c2, boolean boxEnabled)", "diff": ["-  private void _assertBoxCompatible(Class c1, Class c2, boolean boxEnabled) {", "+  private void _assertBoxCompatible(Class<?> c1, Class<?> c2, boolean boxEnabled) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a525ef77f3ecfc9a0026c86df1069cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        List args = new LinkedList(); //Add parameterization <Mirror>. ", "+        List<Mirror> args = new LinkedList<Mirror>(); //Added parameterization <Mirror>. "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bef057638c92380e6e86fd3be980421", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public Object visit(SubtractAssignExpression node)", "signatureAfterChange": "   public Object visit(SubtractAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d3afa887988bf92eab1d729c050d7ac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected ThisExpression buildUnqualifiedThis()", "signatureAfterChange": "   protected ThisExpression buildUnqualifiedThis()", "diff": ["-    LinkedList ids = new LinkedList();", "+    LinkedList<IdentifierToken> ids = new LinkedList<IdentifierToken>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4087555c0daf433905be5574801dd1fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "   private void checkEqualityStaticRules(Class lc, Class rc, BinaryExpression n)", "signatureAfterChange": "   private void checkEqualityStaticRules(Class<?> lc, Class<?> rc, BinaryExpression n)", "diff": ["-  private void checkEqualityStaticRules(Class lc, Class rc, BinaryExpression n) {", "+  private void checkEqualityStaticRules(Class<?> lc, Class<?> rc, BinaryExpression n) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "425f3101cdb108de42735991b8daaf95", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "     public Map<OptionParser,String> getPreferencesStoredInProject()", "signatureAfterChange": "     public Map<OptionParser<?>,String> getPreferencesStoredInProject()", "diff": ["-    public Map<OptionParser,String> getPreferencesStoredInProject() {", "-      return new HashMap<OptionParser,String>(_storedPreferences);", "+    public Map<OptionParser<?>,String> getPreferencesStoredInProject() {", "+      return new HashMap<OptionParser<?>,String>(_storedPreferences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "432873933ddd11ffb050cc98b9de8cca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public Object visit(SimpleAllocation node)", "signatureAfterChange": "     public Object visit(SimpleAllocation node)", "diff": ["-      LinkedList arguments = null;", "+      LinkedList<Expression> arguments = null;", "-        arguments = new LinkedList();", "+        arguments = new LinkedList<Expression>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448322c9b18ca1c114f916eda2c08d4b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Class visit(ForStatement node)", "signatureAfterChange": "   public Class<?> visit(ForStatement node)", "diff": ["-  public Class visit(ForStatement node) {", "+  public Class<?> visit(ForStatement node) {", "-      Class type = cond.acceptVisitor(this);", "+      Class<?> type = cond.acceptVisitor(this);", "-    // (a map of String-Class mappings) in the \"variables\" property", "+    // (a map of String-Class<?> mappings) in the \"variables\" property"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f0196ddc3d63f57c158158c07713d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public Class visit(SuperFieldAccess node)", "signatureAfterChange": "   public Class<?> visit(SuperFieldAccess node)", "diff": ["-  public Class visit(SuperFieldAccess node) {", "+  public Class<?> visit(SuperFieldAccess node) {", "-    Class c;", "+    Class<?> c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c008fa236ec606927246a5a259338c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/DisplayVisitorTest.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp()", "signatureAfterChange": "   public void setUp()", "diff": ["-    _globalContext = new GlobalContext(new TreeInterpreter(parserFactory));", "+    _globalContext = new GlobalContext<Type>(new TreeInterpreter(parserFactory));", "-    _globalNameContext = new GlobalContext(new TreeInterpreter(parserFactory));", "+    _globalNameContext = new GlobalContext<Type>(new TreeInterpreter(parserFactory));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4815f187b3f96da991f64b948d3d2627", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerRegistry.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public CompilerInterface[] getAvailableCompilers()", "signatureAfterChange": "   public CompilerInterface[] getAvailableCompilers()", "diff": ["-    LinkedList availableCompilers = new LinkedList();", "+    LinkedList<CompilerInterface> availableCompilers =", "+      new LinkedList<CompilerInterface>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a0cb8ebed5a14987759706f3d8f4e5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "   private Expression checkAssignmentStaticRules(Class lc, Class rc,                                                  Node node, Expression v)", "signatureAfterChange": "   private Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,                                                  Node node, Expression v)", "diff": ["-  private Expression checkAssignmentStaticRules(Class lc, Class rc,", "+  private Expression checkAssignmentStaticRules(Class<?> lc, Class<?> rc,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a78ae184f7a2c04eb6c4e25775e8706", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Expression createName(Node node, IdentifierToken name)", "signatureAfterChange": "   public Expression createName(Node node, IdentifierToken name)", "diff": ["+   */", "+  public Expression createName(Node node, IdentifierToken name) {", "+    if (!isDefined(name.image())) throw new IllegalStateException();", "+    ", "+    List<IdentifierToken> l = new LinkedList<IdentifierToken>();", "+    l.add(name);", "+    return new QualifiedName(l);", "+  }", "-     */", "-    public Expression createName(Node node, IdentifierToken name) {", "- if (!isDefined(name.image())) throw new IllegalStateException();", "-     ", "- List l = new LinkedList();", "- l.add(name);", "- return new QualifiedName(l);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca4d297a368795e1760a0aa69d33392", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeClassLoader.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Class defineClass(String name, byte[] code)", "signatureAfterChange": "   public Class<?> defineClass(String name, byte[] code)", "diff": ["-  public Class defineClass(String name, byte[] code)  {", "-    Class c = defineClass(name, code, 0, code.length, codeSource);", "+  public Class<?> defineClass(String name, byte[] code)  {", "+    Class<?> c = defineClass(name, code, 0, code.length, codeSource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f2ac07825ec42a5f2be34b0895f70b4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testConvertToName()", "signatureAfterChange": "   public void testConvertToName()", "diff": ["-    LinkedList thisList = new LinkedList(); // Add parameterization <Identifier>.", "+    LinkedList<IdentifierToken> thisList = new LinkedList<IdentifierToken>(); // Add parameterization <Identifier>."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5316ba1f33e2153000b001fac76d5b28", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "      @SuppressWarnings(\"unchecked\")   protected void addNewListeners(Map<OptionParser,String> newValues)", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\")   protected void addNewListeners(Map<OptionParser<?>,String> newValues)", "diff": ["-  protected void addNewListeners(Map<OptionParser,String> newValues) {", "-    for(OptionParser key: newValues.keySet()) {", "+  protected void addNewListeners(Map<OptionParser<?>,String> newValues) {", "+    for(OptionParser<?> key: newValues.keySet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553b847d8bfd7e945e5bf60c630175cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/classinfo/ClassInfoUtilities.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static boolean isAssignableFrom(ClassInfo c1, ClassInfo c2)", "signatureAfterChange": "   public static boolean isAssignableFrom(ClassInfo c1, ClassInfo c2)", "diff": ["-          Class cl1 = c1.getJavaClass();", "-          Class cl2 = c2.getJavaClass();", "+          Class<?> cl1 = c1.getJavaClass();", "+          Class<?> cl2 = c2.getJavaClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5541665551aeb5c97f5cf52f2ecadd90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   public Class visit(GreaterExpression node)", "signatureAfterChange": "   public Class<?> visit(GreaterExpression node)", "diff": ["-  public Class visit(GreaterExpression node) {", "-    Class c = visitRelationalExpression(node);", "+  public Class<?> visit(GreaterExpression node) {", "+    Class<?> c = visitRelationalExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5800abab8c46ceee20bd27890ca06516", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "   public Class visit(TypeExpression node)", "signatureAfterChange": "   public Class<?> visit(TypeExpression node)", "diff": ["-  public Class visit(TypeExpression node) {", "-    Class c = node.getType().acceptVisitor(this);", "+  public Class<?> visit(TypeExpression node) {", "+    Class<?> c = node.getType().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58bd6e956c4d8aa04527b67a185ab945", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "     public Object visit(ClassDeclaration node)", "signatureAfterChange": "     public Object visit(ClassDeclaration node)", "diff": ["-      LinkedList members = new LinkedList();", "+      LinkedList<Node> members = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "592ad87ab44edb1df2b6e94085b0fa71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testConvertToName()", "signatureAfterChange": "   public void testConvertToName()", "diff": ["-    LinkedList thisList = new LinkedList();", "+    LinkedList<Identifier> thisList = new LinkedList<Identifier>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3c5740a1a7a8dd89d2303d5f73f69d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public Object visit(ArrayInitializer node)", "signatureAfterChange": "     public Object visit(ArrayInitializer node)", "diff": ["-      LinkedList cells = new LinkedList();", "+      LinkedList<Node> cells = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a9147bdc4a887da38fed5eca74b1384", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/StaticContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public Class lookupClass(String cname) throws ClassNotFoundException", "signatureAfterChange": "   public Class<?> lookupClass(String cname) throws ClassNotFoundException", "diff": ["-  public Class lookupClass(String cname) throws ClassNotFoundException {", "+  public Class<?> lookupClass(String cname) throws ClassNotFoundException {", "-      Class dc = declaringClass.getDeclaringClass();", "+      Class<?> dc = declaringClass.getDeclaringClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c867adb55cc843e7ddb6919a1448091", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "   public static Field getOuterField(Class cl, String name)     throws NoSuchFieldException, AmbiguousFieldException", "signatureAfterChange": "   public static Field getOuterField(Class<?> cl, String name)     throws NoSuchFieldException, AmbiguousFieldException", "diff": ["-  public static Field getOuterField(Class cl, String name)", "+  public static Field getOuterField(Class<?> cl, String name)", "-    Class   c  = (cl != null) ? getDeclaringClass(cl) : null;", "+    Class<?>   c  = (cl != null) ? getDeclaringClass(cl) : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc68e8f6f8fa12843b6a063f81a0598", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void _assertNotBoxCompatible(Class c1, Class c2, boolean boxEnabled)", "signatureAfterChange": "   private void _assertNotBoxCompatible(Class<?> c1, Class<?> c2, boolean boxEnabled)", "diff": ["-  private void _assertNotBoxCompatible(Class c1, Class c2, boolean boxEnabled) {", "+  private void _assertNotBoxCompatible(Class<?> c1, Class<?> c2, boolean boxEnabled) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d722af5d7874b6a1c2b29b384f4db65", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public static boolean hasAutoBoxingCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu)", "signatureAfterChange": "   public static boolean hasAutoBoxingCompatibleSignatures(Class<?>[] a1, Class<?>[] a2, TigerUsage tu)", "diff": ["-  public static boolean hasAutoBoxingCompatibleSignatures(Class[] a1, Class[] a2, TigerUsage tu) {", "+  public static boolean hasAutoBoxingCompatibleSignatures(Class<?>[] a1, Class<?>[] a2, TigerUsage tu) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e4b18fd6c5f2e32681217a790f55980", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Object visit(StaticMethodCall node)", "diff": ["-    LinkedList arguments = null;", "+    LinkedList<Node> arguments = null;", "-      arguments = new LinkedList();", "+      arguments = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ec172883c1839a0e1d5af1240d98a50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public static Method lookupMethod(Class cl, String name, Class[] ac)     throws NoSuchMethodException", "signatureAfterChange": "   public static Method lookupMethod(Class<?> cl, String name, Class<?>[] ac)     throws NoSuchMethodException", "diff": ["-  public static Method lookupMethod(Class cl, String name, Class[] ac)", "+  public static Method lookupMethod(Class<?> cl, String name, Class<?>[] ac)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f0eb761ed4554d26701adacced4a95b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "     public Map<OptionParser,String> getPreferencesStoredInProject()", "signatureAfterChange": "     public Map<OptionParser<?>,String> getPreferencesStoredInProject()", "diff": ["-    public void setPreferencesStoredInProject(Map<OptionParser,String> sp) { /* do nothing */ }", "-    public Map<OptionParser,String> getPreferencesStoredInProject() { return new HashMap<OptionParser,String>(); }", "+    public void setPreferencesStoredInProject(Map<OptionParser<?>,String> sp) { /* do nothing */ }", "+    public Map<OptionParser<?>,String> getPreferencesStoredInProject() { return new HashMap<OptionParser<?>,String>(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f95bc1d238f006b3ae97ebcade70778", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ImportationManager.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void declareMemberStaticImport(String member) throws ClassNotFoundException", "signatureAfterChange": "     public void declareMemberStaticImport(String member) throws ClassNotFoundException", "diff": ["-    Class surroundingClass;", "+    Class<?> surroundingClass;", "-      Class c;", "+      Class<?> c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60034f96ee94c421862c01aa4df772c1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   protected static Object performCast(Class tc, Object o)", "signatureAfterChange": "   protected static Object performCast(Class<?> tc, Object o)", "diff": ["-  protected static Object performCast(Class tc, Object o) {", "-    Class ec = (o != null) ? o.getClass() : null;", "+  protected static Object performCast(Class<?> tc, Object o) {", "+    Class<?> ec = (o != null) ? o.getClass() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6191f83964e7904180a1971da130a4a5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public Class visit(IfThenElseStatement node)", "signatureAfterChange": "   public Class<?> visit(IfThenElseStatement node)", "diff": ["-  public Class visit(IfThenElseStatement node) {", "+  public Class<?> visit(IfThenElseStatement node) {", "-    Class type = cond.acceptVisitor(this);", "+    Class<?> type = cond.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "648542fce95adab2dc4f025da28e873a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public Object visit(UnsignedShiftRightAssignExpression node)", "signatureAfterChange": "   public Object visit(UnsignedShiftRightAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ce15d312fcb3fb0784313a11b5f6d7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     public Object visit(AddExpression node)", "signatureAfterChange": "     public Object visit(AddExpression node)", "diff": ["-      Class     lc  = null;", "-      Class     rc  = null;", "+      Class<?>     lc  = null;", "+      Class<?>     rc  = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "684f24c46af9425992c4d3e1080e967b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/Context.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     Constructor lookupConstructor(Class c, Class[] params)  throws NoSuchMethodException;", "signatureAfterChange": "     Constructor lookupConstructor(Class<?> c, Class<?>[] params)  throws NoSuchMethodException;", "diff": ["-    Constructor lookupConstructor(Class c, Class[] params)", "+    Constructor lookupConstructor(Class<?> c, Class<?>[] params)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "687e6aeea7a485cbad97cf83441490c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "   public Object visit(ShiftLeftAssignExpression node)", "signatureAfterChange": "   public Object visit(ShiftLeftAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "696a63bf6ed269a557f914923568e3f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public Class visit(IfThenStatement node)", "signatureAfterChange": "   public Class<?> visit(IfThenStatement node)", "diff": ["-  public Class visit(IfThenStatement node) {", "+  public Class<?> visit(IfThenStatement node) {", "-    Class type = cond.acceptVisitor(this);", "+    Class<?> type = cond.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b629e590269d62191fd82f11c28d695", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "   public Class visit(PreIncrement node)", "signatureAfterChange": "   public Class<?> visit(PreIncrement node)", "diff": ["-  public Class visit(PreIncrement node) {", "+  public Class<?> visit(PreIncrement node) {", "-    Class c  = exp.acceptVisitor(this);", "+    Class<?> c  = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70b4c130b78c0557573d45afe3865bc7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "   public Class visit(InstanceOfExpression node)", "signatureAfterChange": "   public Class<?> visit(InstanceOfExpression node)", "diff": ["-  public Class visit(InstanceOfExpression node) {", "+  public Class<?> visit(InstanceOfExpression node) {", "-    Class c = node.getExpression().acceptVisitor(this);", "+    Class<?> c = node.getExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "716dc7af04a7c67db00b5d710dc55d5c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "   public void treeCollapsed(TreeExpansionEvent event)", "signatureAfterChange": "   public void treeCollapsed(TreeExpansionEvent event)", "diff": ["-    if (o instanceof InnerNode) ((InnerNode<?, ?>)o).setCollapsed(true);", "+    if (o instanceof InnerNode<?,?>) ((InnerNode<?,?>)o).setCollapsed(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726de9f132d34796df75d856ef2301bb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public static Class correspondingBoxingType(Class primType)", "signatureAfterChange": "   public static Class<?> correspondingBoxingType(Class<?> primType)", "diff": ["-  public static Class correspondingBoxingType(Class primType) {", "+  public static Class<?> correspondingBoxingType(Class<?> primType) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7291f3e5131972059063f1493243c222", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testConvertToObjectFieldAccess()", "signatureAfterChange": "   public void testConvertToObjectFieldAccess()", "diff": ["-    LinkedList ids = new LinkedList();", "+    LinkedList<Identifier> ids = new LinkedList<Identifier>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74d632b71f4c6e7beb381fcee1f5fe41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "   public Class visit(ShiftRightAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(ShiftRightAssignExpression node)", "diff": ["-  public Class visit(ShiftRightAssignExpression node) {", "-    Class c = visitShiftExpression(node);", "+  public Class<?> visit(ShiftRightAssignExpression node) {", "+    Class<?> c = visitShiftExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74e6d1675b1b766315346cb6aa56fd4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void cleanFolderNode(DefaultMutableTreeNode node)", "signatureAfterChange": "   private void cleanFolderNode(DefaultMutableTreeNode node)", "diff": ["-    if (node instanceof InnerNode && node.getChildCount() == 0) {", "+    if (node instanceof InnerNode<?,?> && node.getChildCount() == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75615fd59d89d8644a6e7163921e6d26", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["-    _defScrollPanes = new Hashtable();", "+    _defScrollPanes = new Hashtable<OpenDefinitionsDocument, JScrollPane>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7775823790099461b1e822cc6d2cee01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public static boolean isBoxCompatible(Class c1, Class c2, TigerUsage tu)", "signatureAfterChange": "   public static boolean isBoxCompatible(Class<?> c1, Class<?> c2, TigerUsage tu)", "diff": ["-  public static boolean isBoxCompatible(Class c1, Class c2, TigerUsage tu) {", "+  public static boolean isBoxCompatible(Class<?> c1, Class<?> c2, TigerUsage tu) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b277412d4de84b86f88b3bc1dd3c579", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/IterableCollection.java", "commitBeforeChange": "6d6fa98f193d16ab3db62dbad1beca43c6bd6363", "commitAfterChange": "8899499d3b5cb3ea80f26187b2a2a457f05dfbc2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   public boolean equals(Object o)", "signatureAfterChange": "   public boolean equals(Object o)", "diff": ["-    else if (!(o instanceof IterableCollection)) { return false; }", "-    else { return _iter.equals(((IterableCollection) o)._iter); }", "+    else if (!(o instanceof IterableCollection<?>)) { return false; }", "+    else { return _iter.equals(((IterableCollection<?>) o)._iter); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b9cb5ba02a59c4696d5b1454b5261aa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   protected ThisExpression buildUnqualifiedThis()", "signatureAfterChange": "   protected ThisExpression buildUnqualifiedThis()", "diff": ["-    LinkedList ids = new LinkedList();", "+    LinkedList<IdentifierToken> ids = new LinkedList<IdentifierToken>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f8eb4b63037ea644f6314571fcd9c0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected ReferenceType _getReferenceTypeForField(String field, Context context)", "signatureAfterChange": "   protected ReferenceType _getReferenceTypeForField(String field, Context context)", "diff": ["-      LinkedList list = new LinkedList(); // Add parameterization <Identifier>.", "+      LinkedList<IdentifierToken> list = new LinkedList<IdentifierToken>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e702d289a52d31ba1425eb174f85b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "b583f95ca38940907816c4beb7118ff0df1017e2", "commitAfterChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public static void ventBuffers(Process theProc, LinkedList outLines,                           LinkedList errLines) throws IOException", "signatureAfterChange": "   public static void ventBuffers(Process theProc, LinkedList<String> outLines,                                  LinkedList<String> errLines) throws IOException", "diff": ["-  public static void ventBuffers(Process theProc, LinkedList outLines,", "-                          LinkedList errLines) throws IOException {", "+  public static void ventBuffers(Process theProc, LinkedList<String> outLines,", "+                                 LinkedList<String> errLines) throws IOException {", "+    // getInputStream actually gives us the stdout from the Process.", "-//        System.out.println(\"[stdout]: \" + output);", "+        //        System.out.println(\"[stdout]: \" + output);", "-//        System.out.println(\"[stderr] \" + output);", "+        //        System.out.println(\"[stderr] \" + output);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "847f3446e09ef50c03fa477d9097a669", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "     public Object visit(InterfaceDeclaration node)", "signatureAfterChange": "     public Object visit(InterfaceDeclaration node)", "diff": ["-      LinkedList members = new LinkedList();", "+      LinkedList<Node> members = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85c57fccb2ec19b4818a9435860ab8ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public Object visit(FunctionCall node)", "signatureAfterChange": "   public Object visit(FunctionCall node)", "diff": ["-    LinkedList arguments = null;", "+    LinkedList<Node> arguments = null;", "-      arguments = new LinkedList();", "+      arguments = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d6f699369990e1f795d507eb5b214c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public Object visit(PreDecrement node)", "signatureAfterChange": "   public Object visit(PreDecrement node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863ea8b288d54f975f11347705123427", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassFactory.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ClassFactory(int     af,                       String  name,                       String  sname,                       Class   interp,                       Class   except,                       String  clid)", "signatureAfterChange": "   public ClassFactory(int     af,                       String  name,                       String  sname,                       Class<?>   interp,                       Class<?>   except,                       String  clid)", "diff": ["-                      Class   interp,", "-                      Class   except,", "+                      Class<?>   interp,", "+                      Class<?>   except,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a834532cb064e2ef1f78ee8fe6208b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "    private Value _getValueOfLocalVariable(LocalVariable var, ThreadReference thread)     throws InvalidTypeException, ClassNotLoadedException, AbsentInformationException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        List args = new LinkedList();", "+        List<Mirror> args = new LinkedList<Mirror>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89ba1ab36f6904a232647d1f537fcfd6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 46, "signatureBeforeChange": "   public synchronized void treeExpanded(TreeExpansionEvent event)", "signatureAfterChange": "   public synchronized void treeExpanded(TreeExpansionEvent event)", "diff": ["-    if (o instanceof InnerNode) ((InnerNode)o).setCollapsed(false);", "+    if (o instanceof InnerNode) ((InnerNode<?, ?>)o).setCollapsed(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba3352f6e3510c43cab71cc059a4ecd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testConvertToObjectFieldAccess()", "signatureAfterChange": "   public void testConvertToObjectFieldAccess()", "diff": ["-    LinkedList ids = new LinkedList(); // Add parameterization <Identifier>.", "+    LinkedList<IdentifierToken> ids = new LinkedList<IdentifierToken>(); // Add parameterization <Identifier>."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8baab86ab401722b54235ef2271640e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ForEachTypingTest.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testSuperForEach() throws ParseException", "signatureAfterChange": "   public void testSuperForEach() throws ParseException", "diff": ["-    Context cntxt = new GlobalContext(new TreeInterpreter(new JavaCCParserFactory()));", "+    Context<Type> cntxt = new GlobalContext<Type>(new TreeInterpreter(new JavaCCParserFactory()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e4b3b08c1a8fe91a7f4dcf632cc3c9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "   public Class visit(LessExpression node)", "signatureAfterChange": "   public Class<?> visit(LessExpression node)", "diff": ["-  public Class visit(LessExpression node) {", "-    Class c = visitRelationalExpression(node);", "+  public Class<?> visit(LessExpression node) {", "+    Class<?> c = visitRelationalExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e9c52cf2679206b496d1e8071e42cb8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static Constructor lookupConstructor(Class cl, Class [] ac)     throws NoSuchMethodException", "signatureAfterChange": "   public static Constructor lookupConstructor(Class<?> cl, Class<?> [] ac)     throws NoSuchMethodException", "diff": ["-  public static Constructor lookupConstructor(Class cl, Class [] ac)", "+  public static Constructor lookupConstructor(Class<?> cl, Class<?> [] ac)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ebda071f4cc72332a020368e2750f3d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "     protected void visitBitwiseExpression(BinaryExpression node, String s)", "signatureAfterChange": "     protected void visitBitwiseExpression(BinaryExpression node, String s)", "diff": ["-      Class     lc  = null;", "-      Class     rc  = null;", "+      Class<?>     lc  = null;", "+      Class<?>     rc  = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909cf4fae49b8e6cc39a2113dd85d0af", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void testConvertToObjectFieldAccess()", "signatureAfterChange": "   public void testConvertToObjectFieldAccess()", "diff": ["-    LinkedList ids = new LinkedList(); // Add parameterization <Identifier>.", "+    LinkedList<IdentifierToken> ids = new LinkedList<IdentifierToken>(); // Add parameterization <Identifier>."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917c07457dd848a27f62d40cd86e28c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public Object visit(PostDecrement node)", "signatureAfterChange": "   public Object visit(PostDecrement node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9271970823d38e72fb021c975ad1b401", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/StickyClassLoader.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected Class loadClass(String name, boolean resolve)      throws ClassNotFoundException", "signatureAfterChange": "   protected Class<?> loadClass(String name, boolean resolve)      throws ClassNotFoundException", "diff": ["-  protected Class loadClass(String name, boolean resolve) ", "+  protected Class<?> loadClass(String name, boolean resolve) ", "-    Class clazz;", "+    Class<?> clazz;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "928790edf26fa7a297d92da4c3d109bc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ForEachStatement.java", "commitBeforeChange": "68bd63f6034f2863f39ab1e69222ff477d2c17f9", "commitAfterChange": "0fae02937c58237a9087228b753c7aa76d749043", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ForEachStatement(FormalParameter para, Expression coll, Node body,                       String fn, int bl, int bc, int el, int ec)", "signatureAfterChange": "   public ForEachStatement(FormalParameter para, Expression coll, Node body,                       String fn, int bl, int bc, int el, int ec)", "diff": ["-    labels         = new LinkedList();", "-    vars = new LinkedList();", "+    labels         = new LinkedList<String>();", "+    vars = new LinkedList<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "948cd4c3ebb61098749bcb7e9fd05c5d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/NameVisitorExtension.java", "commitBeforeChange": "4ae3dba211535b42e36ea3344ccafcfcc3ff3edd", "commitAfterChange": "90464e2ed7c77705e57d251eb7f4b67e377039d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "       private static void _checkAssignmentStaticRules(Class lc, Class rc,                                                   Node node, Node v)", "signatureAfterChange": "       private static void _checkAssignmentStaticRules(Class<?> lc, Class<?> rc,                                                   Node node, Node v)", "diff": ["-  private static void _checkAssignmentStaticRules(Class lc, Class rc,", "+  private static void _checkAssignmentStaticRules(Class<?> lc, Class<?> rc,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5a21ab5a0fe7200b25f3590b6fc997", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 194, "methodNumberAfterChange": 194, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public ProjectProfile _makeProjectProfile(File file, HashMap<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public ProjectProfile _makeProjectProfile(File file, HashMap<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "diff": ["-    Map<OptionParser,String> sp = _state.getPreferencesStoredInProject();", "-    for(OptionParser key: sp.keySet()) {", "+    Map<OptionParser<?>,String> sp = _state.getPreferencesStoredInProject();", "+    for(OptionParser<?> key: sp.keySet()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bca212af38b22a51c7cccf1096b5434", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   public Object visit(ShiftRightAssignExpression node)", "signatureAfterChange": "   public Object visit(ShiftRightAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d94961c164245ce267573d44944a7ec", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public static boolean hasCompatibleSignatures(Class[] a1, Class[] a2)", "signatureAfterChange": "   public static boolean hasCompatibleSignatures(Class<?>[] a1, Class<?>[] a2)", "diff": ["-  public static boolean hasCompatibleSignatures(Class[] a1, Class[] a2) {", "+  public static boolean hasCompatibleSignatures(Class<?>[] a1, Class<?>[] a2) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f92ae0ae8f80fff21ac142bf09e1f78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "   public Class visit(PostDecrement node)", "signatureAfterChange": "   public Class<?> visit(PostDecrement node)", "diff": ["-  public Class visit(PostDecrement node) {", "+  public Class<?> visit(PostDecrement node) {", "-    Class c  = exp.acceptVisitor(this);", "+    Class<?> c  = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fe1070636ebba8402473908b8bc466d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "signatureAfterChange": "   private void _defineVariable(ThreadReference suspendedThreadRef,                                ObjectReference debugInterpreter,                                String name, Value val, Type type)     throws InvalidTypeException, AbsentInformationException, IncompatibleThreadStateException,     ClassNotLoadedException, InvocationException, DebugException", "diff": ["-        List args = new LinkedList();", "+        List<Mirror> args = new LinkedList<Mirror>();  // Mirror is the common supertype of StringReference, Value, and ReferenceType"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a098c549e314a4c9cec6b8657afd4e4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilitiesTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private void _exceptionBoxCompatible(Class c1, Class c2, boolean boxEnabled)", "signatureAfterChange": "   private void _exceptionBoxCompatible(Class<?> c1, Class<?> c2, boolean boxEnabled)", "diff": ["-  private void _exceptionBoxCompatible(Class c1, Class c2, boolean boxEnabled) {", "+  private void _exceptionBoxCompatible(Class<?> c1, Class<?> c2, boolean boxEnabled) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a106035923245d5dcf8a53e5f6d3a54a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   public Class visit(BitOrExpression node)", "signatureAfterChange": "   public Class<?> visit(BitOrExpression node)", "diff": ["-  public Class visit(BitOrExpression node) {", "-    Class c = visitBitwiseExpression(node);", "+  public Class<?> visit(BitOrExpression node) {", "+    Class<?> c = visitBitwiseExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1b66e0a2ae4890ab42e0ef8c76b97ad", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void setUp()", "signatureAfterChange": "   public void setUp()", "diff": ["-    _globalContext = new GlobalContext(new TreeInterpreter(parserFactory));", "+    _globalContext = new GlobalContext<Type>(new TreeInterpreter(parserFactory));", "-    _globalNameContext = new GlobalContext(new TreeInterpreter(parserFactory));", "+    _globalNameContext = new GlobalContext<Type>(new TreeInterpreter(parserFactory));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a26f207b477d6ee457a30868a89d7372", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public Object visit(SwitchBlock node)", "signatureAfterChange": "   public Object visit(SwitchBlock node)", "diff": ["-    LinkedList statements = null;", "+    LinkedList<Node> statements = null;", "-      statements = new LinkedList();", "+      statements = new LinkedList<Node>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a336f849e36abf3b9dbb2e9f18bb21b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public Class visit(WhileStatement whileStmt)", "signatureAfterChange": "   public Class<?> visit(WhileStatement whileStmt)", "diff": ["-  public Class visit(WhileStatement whileStmt) {", "+  public Class<?> visit(WhileStatement whileStmt) {", "-    Class type = exp.acceptVisitor(this);", "+    Class<?> type = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7048767801ab9a91385b0851f61e34c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "4ae3dba211535b42e36ea3344ccafcfcc3ff3edd", "commitAfterChange": "90464e2ed7c77705e57d251eb7f4b67e377039d6", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "   protected static Object performCast(Class tc, Object o)", "signatureAfterChange": "   protected static Object performCast(Class<?> tc, Object o)", "diff": ["-  protected static Object performCast(Class tc, Object o) {", "-    Class ec = (o != null) ? o.getClass() : null;", "+  protected static Object performCast(Class<?> tc, Object o) {", "+    Class<?> ec = (o != null) ? o.getClass() : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81a60062989f1cab25d55a980d23153", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void preCheckVariableDeclaration(VariableDeclaration node)", "signatureAfterChange": "   public void preCheckVariableDeclaration(VariableDeclaration node)", "diff": ["-    Class lc = node.getType().acceptVisitor(this);", "+    Class<?> lc = node.getType().acceptVisitor(this);", "-      Class rc = init.acceptVisitor(this);", "+      Class<?> rc = init.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89da04ddf8c2344f06c5c28f0a0bd45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic Object visit(SuperMethodCall node)", "signatureAfterChange": "     public Object visit(SuperMethodCall node)", "diff": ["-\t */", "-\tpublic Object visit(SuperMethodCall node) {", "-\t    ClassInfo c = classInfo.getSuperclass();", "-", "-\t    List args = node.getArguments();", "-\t    ClassInfo[] pt = new ClassInfo[0];", "-\t    if (args != null) {", "-\t\tcheckList(args, \"malformed.argument\", node);", "-\t\t", "-\t\tpt = new ClassInfo[args.size()];", "-\t\tListIterator it = args.listIterator();", "-\t\tint i = 0;", "-\t\twhile (it.hasNext()) {", "-\t\t    pt[i++] = NodeProperties.getClassInfo((Node)it.next());", "-\t\t}", "-\t    }", "-\t    MethodInfo m = null;", "-\t    try {", "-\t\tm = ClassInfoUtilities.lookupMethod(c, node.getMethodName(), pt);", "-\t    } catch (Exception e) {", "-\t\tthrow new CatchedExceptionError(e, node);", "-\t    }", "-\t", "-\t    // Set the node type property", "-\t    node.setProperty(NodeProperties.TYPE, m.getReturnType());", "-\t    return null;", "-\t}", "+     */", "+    public Object visit(SuperMethodCall node) {", "+      ClassInfo c = classInfo.getSuperclass();", "+      ", "+      List<Expression> args = node.getArguments();", "+      ClassInfo[] pt = new ClassInfo[0];", "+      if (args != null) {", "+        checkList(args, \"malformed.argument\", node);", "+        ", "+        pt = new ClassInfo[args.size()];", "+        ListIterator<Expression> it = args.listIterator();", "+        int i = 0;", "+        while (it.hasNext()) {", "+          pt[i++] = NodeProperties.getClassInfo((Node)it.next());", "+        }", "+      }", "+      MethodInfo m = null;", "+      try {", "+        m = ClassInfoUtilities.lookupMethod(c, node.getMethodName(), pt);", "+      } catch (Exception e) {", "+        throw new CatchedExceptionError(e, node);", "+      }", "+      ", "+      // Set the node type property", "+      node.setProperty(NodeProperties.TYPE, m.getReturnType());", "+      return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa18e815cc082404b9108c6365236705", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static Object equalTo(Class lc, Class rc, Object l, Object r)", "signatureAfterChange": "   public static Object equalTo(Class<?> lc, Class<?> rc, Object l, Object r)", "diff": ["-  public static Object equalTo(Class lc, Class rc, Object l, Object r) {", "+  public static Object equalTo(Class<?> lc, Class<?> rc, Object l, Object r) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aee19709bb440c5ca780269c274c1c63", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public IDocumentNavigator makeListNavigator()", "signatureAfterChange": "     public IDocumentNavigator<ItemT> makeListNavigator()", "diff": ["-    public IDocumentNavigator makeListNavigator() { return new JListSortNavigator(); }", "+    public IDocumentNavigator<ItemT> makeListNavigator() { return new JListSortNavigator<ItemT>(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af5f677f54b90ca4cd3cad7bc88f8449", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "   public Class visit(UnsignedShiftRightAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(UnsignedShiftRightAssignExpression node)", "diff": ["-  public Class visit(UnsignedShiftRightAssignExpression node) {", "-    Class c = visitShiftExpression(node);", "+  public Class<?> visit(UnsignedShiftRightAssignExpression node) {", "+    Class<?> c = visitShiftExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b163ea0e7678f478764136d2d2c5b64d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DrJavaTestCaseClassLoader.java", "commitBeforeChange": "69d4590eff40914052a36cc82d8a74c43211028e", "commitAfterChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public synchronized Class loadClass(String name, boolean resolve)   throws ClassNotFoundException", "signatureAfterChange": "  public synchronized Class<?> loadClass(String name, boolean resolve)   throws ClassNotFoundException", "diff": ["- public synchronized Class loadClass(String name, boolean resolve)", "+ public synchronized Class<?> loadClass(String name, boolean resolve)", "-  Class c= findLoadedClass(name);", "+  Class<?> c= findLoadedClass(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c9cc6cc92bcb1197c64ae4359268d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public static Class correspondingPrimType(Class refType)", "signatureAfterChange": "   public static Class<?> correspondingPrimType(Class<?> refType)", "diff": ["-  public static Class correspondingPrimType(Class refType) {", "+  public static Class<?> correspondingPrimType(Class<?> refType) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45e53bca86909f98218ae0739949550", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public Class visit(ThrowStatement node)", "signatureAfterChange": "   public Class<?> visit(ThrowStatement node)", "diff": ["-  public Class visit(ThrowStatement node) {", "-    Class c = node.getExpression().acceptVisitor(this);", "+  public Class<?> visit(ThrowStatement node) {", "+    Class<?> c = node.getExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4ba8df15444b659abc097c942a0a00d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public Class visit(CatchStatement node)", "signatureAfterChange": "   public Class<?> visit(CatchStatement node)", "diff": ["-  public Class visit(CatchStatement node) {", "+  public Class<?> visit(CatchStatement node) {", "-    Class c = node.getException().acceptVisitor(this);", "+    Class<?> c = node.getException().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4bf7a05535948d5d40f8aee5268716b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigPanel.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void resetToDefault()", "signatureAfterChange": "   public void resetToDefault()", "diff": ["-      if (_components.get(i) instanceof VectorOptionComponent)", "-        ((VectorOptionComponent)_components.get(i)).resizeTable();", "+      if (_components.get(i) instanceof VectorOptionComponent<?>)", "+        ((VectorOptionComponent<?>)_components.get(i)).resizeTable();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5521c51483f862cf252e325a811ced8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeCheckerTest.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   private Class _checkBinaryExpression(String text,                                         String leftExpected,                                         String rightExpected)      throws InterpreterException", "signatureAfterChange": "   private Class<?> _checkBinaryExpression(String text,                                         String leftExpected,                                         String rightExpected)      throws InterpreterException", "diff": ["-  private Class _checkBinaryExpression(String text, ", "+  private Class<?> _checkBinaryExpression(String text, ", "-    Class type = exp.acceptVisitor(_typeChecker);", "+    Class<?> type = exp.acceptVisitor(_typeChecker);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69d946636c2181e1101aea0b37acb8b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/AWTContainerNavigatorFactory.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public IDocumentNavigator makeTreeNavigator(String name)", "signatureAfterChange": "     public IDocumentNavigator<ItemT> makeTreeNavigator(String name)", "diff": ["-    public IDocumentNavigator makeTreeNavigator(String name) { return new JTreeSortNavigator(name); }", "+    public IDocumentNavigator<ItemT> makeTreeNavigator(String name) { return new JTreeSortNavigator<ItemT>(name); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7e32c627977eccd036f17b6fd399a75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public Class visit(ObjectFieldAccess node)", "signatureAfterChange": "   public Class<?> visit(ObjectFieldAccess node)", "diff": ["-  public Class visit(ObjectFieldAccess node) {", "+  public Class<?> visit(ObjectFieldAccess node) {", "-    Class c = node.getExpression().acceptVisitor(this);", "+    Class<?> c = node.getExpression().acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b911bc86510e4a1a381ceac79200b5d6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "76c0b2960b62020d46b810955623e0af759eee20", "commitAfterChange": "936042cad9bfa0086510cc58a96357306371fb07", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public String[] getCollapsedPaths()", "signatureAfterChange": "   public String[] getCollapsedPaths()", "diff": ["-      if (tn instanceof InnerNode && ((InnerNode<?, ?>)tn).isCollapsed()) {", "+      if (tn instanceof InnerNode<?,?> && ((InnerNode<?,?>)tn).isCollapsed()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ee70e0cc72b193e1a95302c83becc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public Method lookupMethod(Node prefix, String mname, Class[] params)     throws NoSuchMethodException", "signatureAfterChange": "   public Method lookupMethod(Node prefix, String mname, Class<?>[] params)     throws NoSuchMethodException", "diff": ["-  public Method lookupMethod(Node prefix, String mname, Class[] params)", "+  public Method lookupMethod(Node prefix, String mname, Class<?>[] params)", "-    Class  c = NodeProperties.getType(prefix);", "+    Class<?>  c = NodeProperties.getType(prefix);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc65c5b55643eadcbc8b0dcd38aaa3cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/classloader/LimitingClassLoader.java", "commitBeforeChange": "b6148d8c1aaf55232aeac694d90234c9353139cd", "commitAfterChange": "536afaee0374767d0f8bdf572a332576e3f54467", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   protected Class loadClass(String name, boolean resolve)     throws ClassNotFoundException", "signatureAfterChange": "   protected Class<?> loadClass(String name, boolean resolve)     throws ClassNotFoundException", "diff": ["-  protected Class loadClass(String name, boolean resolve)", "+  protected Class<?> loadClass(String name, boolean resolve)", "-    Class clazz = getParent().loadClass(name);", "+    Class<?> clazz = getParent().loadClass(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd7926b7ef5f9d710b80d09e9cb7ff59", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/OptionMapLoader.java", "commitBeforeChange": "3e99371826dd4ffe9dc805b1632e784bb19f7af4", "commitAfterChange": "f1019f9568774298366441c3a10efdd63f48057e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    public void loadInto(OptionMap map)", "signatureAfterChange": "    public void loadInto(OptionMap map)", "diff": ["-    Iterator<OptionParser> options = DEFAULTS.keys();", "+    Iterator<OptionParser<?>> options = DEFAULTS.keys();", "-      OptionParser option = options.next();", "+      OptionParser<?> option = options.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be05eea65bd397ed1d1a1980843a0123", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "      public static boolean isValidAssignment(Class lc, Object val)", "signatureAfterChange": "      public static boolean isValidAssignment(Class<?> lc, Object val)", "diff": ["-  public static boolean isValidAssignment(Class lc, Object val) {", "-    Class rc = (val == null) ? null : val.getClass();", "+  public static boolean isValidAssignment(Class<?> lc, Object val) {", "+    Class<?> rc = (val == null) ? null : val.getClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be3f92b01bec40e5b89330a2c9ea78e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        LinkedList args = new LinkedList(); //Add parameterization <StringReference>. ", "+        LinkedList<StringReference> args = new LinkedList<StringReference>(); //Added parameterization <StringReference>. "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c12f6405c5c92ac8a7a20f6990563bda", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   public Class visit(NotExpression node)", "signatureAfterChange": "   public Class<?> visit(NotExpression node)", "diff": ["-  public Class visit(NotExpression node) {", "+  public Class<?> visit(NotExpression node) {", "-    Class c = exp.acceptVisitor(this);", "+    Class<?> c = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18401f7b836216bc3520a3b304035dc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected ReferenceType _getReferenceTypeForField(String field, Context context)", "signatureAfterChange": "   protected ReferenceType _getReferenceTypeForField(String field, Context context)", "diff": ["-      LinkedList list = new LinkedList(); // Add parameterization <Identifier>.", "+      LinkedList<IdentifierToken> list = new LinkedList<IdentifierToken>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb1266257fbb010db0cf3428a345623b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "   public Class visit(ShiftRightExpression node)", "signatureAfterChange": "   public Class<?> visit(ShiftRightExpression node)", "diff": ["-  public Class visit(ShiftRightExpression node) {", "-    Class c = visitShiftExpression(node);", "+  public Class<?> visit(ShiftRightExpression node) {", "+    Class<?> c = visitShiftExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb7394629a4f7352e66dc32fdaf19dbc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "   public Object visit(RemainderAssignExpression node)", "signatureAfterChange": "   public Object visit(RemainderAssignExpression node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb7b8a479588cdecb95ff41c662c678a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreterTest.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testConvertToName()", "signatureAfterChange": "   public void testConvertToName()", "diff": ["-    LinkedList thisList = new LinkedList(); // Add parameterization <Identifier>.", "+    LinkedList<IdentifierToken> thisList = new LinkedList<IdentifierToken>(); // Add parameterization <Identifier>."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce011f5c819e8f67ecbe52dedd563b0a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOptionTest.java", "commitBeforeChange": "5c2ac9e8438d392f2dbd245a906f9c4b21c33aac", "commitAfterChange": "cd3b985ffaa7c3ea1d3723af1e9843455ae54d39", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void setUp()", "signatureAfterChange": "      public void setUp()", "diff": ["-    _ivo = new VectorOption<Integer>(\"whatever\",new IntegerOption(\"\",null),(Vector) null);", "-    _bvo = new VectorOption<Boolean>(\"everwhat\",new BooleanOption(\"\",null),(Vector) null);", "+    _ivo = new VectorOption<Integer>(\"whatever\",new IntegerOption(\"\",null),(Vector<Integer>) null);", "+    _bvo = new VectorOption<Boolean>(\"everwhat\",new BooleanOption(\"\",null),(Vector<Boolean>) null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce3d3882b9b31ba5d2119fedb4a800f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/ExecJVM.java", "commitBeforeChange": "b583f95ca38940907816c4beb7118ff0df1017e2", "commitAfterChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public static Process runJVM(String mainClass,                                String[] classParams,                                String classPath,                                String[] jvmParams) throws IOException", "signatureAfterChange": "   public static Process runJVM(String mainClass,                                String[] classParams,                                String classPath,                                String[] jvmParams) throws IOException", "diff": ["-                               String[] jvmParams) throws IOException", "-  {", "-    LinkedList args = new LinkedList();", "+                               String[] jvmParams) throws IOException {", "+    LinkedList<String> args = new LinkedList<String>();", "-    _addArray(args, jvmParams);    ", "+    _addArray(args, jvmParams);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0596b7ee6babaedae1fe8de3b43256b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "   public Class visit(ShiftLeftExpression node)", "signatureAfterChange": "   public Class<?> visit(ShiftLeftExpression node)", "diff": ["-  public Class visit(ShiftLeftExpression node) {", "-    Class c = visitShiftExpression(node);", "+  public Class<?> visit(ShiftLeftExpression node) {", "+    Class<?> c = visitShiftExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0bc1f0e46b668bcb9cb23f60558749e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public Object visit(PreIncrement node)", "signatureAfterChange": "   public Object visit(PreIncrement node)", "diff": ["-    Class resType = NodeProperties.getType(node);", "-    Class calcType = resType; // always a primitive type", "+    Class<?> resType = NodeProperties.getType(node);", "+    Class<?> calcType = resType; // always a primitive type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d282279d77810ac9cb1b6d037a7db8c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModelTest.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private TestDocGetter(File[] files, String[] texts)", "signatureAfterChange": "     private TestDocGetter(File[] files, String[] texts)", "diff": ["-      docs = new HashMap(texts.length * 2);", "+      docs = new HashMap<File, OpenDefinitionsDocument>(texts.length * 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4535612370320da057e62d13e7dbde4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "   public Class visit(ExclusiveOrExpression node)", "signatureAfterChange": "   public Class<?> visit(ExclusiveOrExpression node)", "diff": ["-  public Class visit(ExclusiveOrExpression node) {", "-    Class c = visitBitwiseExpression(node);", "+  public Class<?> visit(ExclusiveOrExpression node) {", "+    Class<?> c = visitBitwiseExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4aa76558c64c84261d46368c86d2d11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public static String getStackTrace(Throwable t)", "signatureAfterChange": "   public static String getStackTrace(Throwable t)", "diff": ["-    LinkedList traceItems = new LinkedList();", "+    LinkedList<String> traceItems = new LinkedList<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d76cbf8c398f7fcb71cd31639e901589", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "   protected ReferenceType _getReferenceTypeForField(String field, Context context)", "signatureAfterChange": "   protected ReferenceType _getReferenceTypeForField(String field, Context context)", "diff": ["-      LinkedList list = new LinkedList();", "+      LinkedList<Identifier> list = new LinkedList<Identifier>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db43574b5f508e923c624d0027f044e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "68bd63f6034f2863f39ab1e69222ff477d2c17f9", "commitAfterChange": "0fae02937c58237a9087228b753c7aa76d749043", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForEachStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["-    Set vars = (Set)node.getProperty(NodeProperties.VARIABLES);", "+    Set<AbstractVariable> vars = (Set<AbstractVariable>)node.getProperty(NodeProperties.VARIABLES);  /* Type erasure bites! */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcb5b3519e32d1b5c544fc0c7c9dd7e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "   public Class visit(SubtractExpression node)", "signatureAfterChange": "   public Class<?> visit(SubtractExpression node)", "diff": ["-  public Class visit(SubtractExpression node) {", "+  public Class<?> visit(SubtractExpression node) {", "-    Class c = visitNumericExpression(node, \"subtraction.type\");", "+    Class<?> c = visitNumericExpression(node, \"subtraction.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd64e758d6dc80d26f4007d49af5797d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NameVisitor.java", "commitBeforeChange": "8b62707316ebd1a295093767531836f6fa870ac2", "commitAfterChange": "0c8b573302c9f1cea325504624915d96eec179d9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public NameVisitor(Context ctx, Context typeCtx)", "signatureAfterChange": "   public NameVisitor(Context<Type> ctx, Context<Type> typeCtx)", "diff": ["-  public NameVisitor(Context ctx, Context typeCtx) {", "+  public NameVisitor(Context<Type> ctx, Context<Type> typeCtx) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de4c3361dfa77fc4f152894f1b4f37b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/InterpreterUtilities.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public static Object notEqualTo(Class lc, Class rc, Object l, Object r)", "signatureAfterChange": "   public static Object notEqualTo(Class<?> lc, Class<?> rc, Object l, Object r)", "diff": ["-  public static Object notEqualTo(Class lc, Class rc, Object l, Object r) {", "+  public static Object notEqualTo(Class<?> lc, Class<?> rc, Object l, Object r) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de99a6523d1f200ea5097f7d64353c7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/PendingRequestManager.java", "commitBeforeChange": "4ae3dba211535b42e36ea3344ccafcfcc3ff3edd", "commitAfterChange": "90464e2ed7c77705e57d251eb7f4b67e377039d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void removePendingRequest (DocumentDebugAction action)", "signatureAfterChange": "   public void removePendingRequest (DocumentDebugAction<?> action)", "diff": ["-  public void removePendingRequest (DocumentDebugAction action) {", "+  public void removePendingRequest (DocumentDebugAction<?> action) {", "-    Vector<DocumentDebugAction> actions = _pendingActions.get(className);", "+    Vector<DocumentDebugAction<?>> actions = _pendingActions.get(className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09b1cac7c1d32d7616e562b409b8759", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public Object visit(ObjectMethodCall node)", "signatureAfterChange": "   public Object visit(ObjectMethodCall node)", "diff": ["-     */", "-    public Object visit(ObjectMethodCall node) {", "-\tExpression exp = node.getExpression();", "-", "-        // Evaluate the receiver first", "-        Object obj  = exp.acceptVisitor(this);", "-", "-        if (node.hasProperty(NodeProperties.METHOD)) {", "-            Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "-            Class[]  typs = m.getParameterTypes();", "-", "-            // Relax the protection for members?", "-            if (context.getAccessible()) {", "-                m.setAccessible(true);", "-            }", "-", "-            List     larg = node.getArguments();", "-            Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "-", "-            // Fill the arguments", "-            if (larg != null) {", "-                args = new Object[larg.size()];", "-                Iterator it = larg.iterator();", "-                int      i  = 0;", "-                while (it.hasNext()) {", "-                    Object p  = ((Expression)it.next()).acceptVisitor(this);", "-                    args[i] = performCast(typs[i], p);", "-                    i++;", "-                }", "-            }", "-            // Invoke the method", "-            try {", "-                return m.invoke(obj, args);", "-            } catch (InvocationTargetException e) {", "-                if (e.getTargetException() instanceof Error) {", "-                    throw (Error)e.getTargetException();", "-                } else if (e.getTargetException() instanceof RuntimeException) {", "-                    throw (RuntimeException)e.getTargetException();", "-                }", "-                throw new ThrownException(e.getTargetException(), node);", "-            } catch (Exception e) {", "-                throw new CatchedExceptionError(e, node);", "-            }", "-        } else {", "-            // If the 'method' property is not set, the object must be", "-            // an array and the called method must be 'clone'.", "-            // Since the 'clone' method of an array is not a normal", "-            // method, the only way to invoke it is to simulate its", "-            // behaviour.", "-\t    Class c = NodeProperties.getType(exp);", "-            int len = Array.getLength(obj);", "-            Object result = Array.newInstance(c.getComponentType(), len);", "-            for (int i = 0; i < len; i++) {", "-                Array.set(result, i, Array.get(obj, i));", "-            }", "-            return result;", "-        }", "-    }", "+   */", "+  public Object visit(ObjectMethodCall node) {", "+    Expression exp = node.getExpression();", "+    ", "+    // Evaluate the receiver first", "+    Object obj  = exp.acceptVisitor(this);", "+    ", "+    if (node.hasProperty(NodeProperties.METHOD)) {", "+      Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "+      Class[]  typs = m.getParameterTypes();", "+      ", "+      // Relax the protection for members?", "+      if (context.getAccessible()) {", "+        m.setAccessible(true);", "+      }", "+      ", "+      List<Expression> larg = node.getArguments();", "+      Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "+      ", "+      // Fill the arguments", "+      if (larg != null) {", "+        args = new Object[larg.size()];", "+        Iterator<Expression> it = larg.iterator();", "+        int      i  = 0;", "+        while (it.hasNext()) {", "+          Object p  = ((Expression)it.next()).acceptVisitor(this);", "+          args[i] = performCast(typs[i], p);", "+          i++;", "+        }", "+      }", "+      // Invoke the method", "+      try {", "+        return m.invoke(obj, args);", "+      } catch (InvocationTargetException e) {", "+        if (e.getTargetException() instanceof Error) {", "+          throw (Error)e.getTargetException();", "+        } else if (e.getTargetException() instanceof RuntimeException) {", "+          throw (RuntimeException)e.getTargetException();", "+        }", "+        throw new ThrownException(e.getTargetException(), node);", "+      } catch (Exception e) {", "+        throw new CatchedExceptionError(e, node);", "+      }", "+    } else {", "+      // If the 'method' property is not set, the object must be", "+      // an array and the called method must be 'clone'.", "+      // Since the 'clone' method of an array is not a normal", "+      // method, the only way to invoke it is to simulate its", "+      // behaviour.", "+      Class c = NodeProperties.getType(exp);", "+      int len = Array.getLength(obj);", "+      Object result = Array.newInstance(c.getComponentType(), len);", "+      for (int i = 0; i < len; i++) {", "+        Array.set(result, i, Array.get(obj, i));", "+      }", "+      return result;", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0fc840b48d367d691a61473a280225d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "   public Class visit(PreDecrement node)", "signatureAfterChange": "   public Class<?> visit(PreDecrement node)", "diff": ["-  public Class visit(PreDecrement node) {", "+  public Class<?> visit(PreDecrement node) {", "-    Class c  = exp.acceptVisitor(this);", "+    Class<?> c  = exp.acceptVisitor(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e29b9e2e307c0388bd875d7d7b1f247a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public Class visit(PrimitiveType node)", "signatureAfterChange": "   public Class<?> visit(PrimitiveType node)", "diff": ["-  public Class visit(PrimitiveType node) {", "-    Class c = node.getValue();", "+  public Class<?> visit(PrimitiveType node) {", "+    Class<?> c = node.getValue();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4ee530b1f8e8a2ca147ee4aacf776fd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public Class visit(RemainderExpression node)", "signatureAfterChange": "   public Class<?> visit(RemainderExpression node)", "diff": ["-  public Class visit(RemainderExpression node) {", "+  public Class<?> visit(RemainderExpression node) {", "-    Class c = visitNumericExpression(node, \"remainder.type\");", "+    Class<?> c = visitNumericExpression(node, \"remainder.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e524dd42855ae1d6231b56a985783569", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " \tConstructorParametersDescriptor(List params, List args, ImportationManager im)", "signatureAfterChange": "     ConstructorParametersDescriptor(List<FormalParameter> params, List<Expression> args, ImportationManager im)", "diff": ["-\t */", "-\tConstructorParametersDescriptor(List params, List args, ImportationManager im) {", "-\t    parameters         = params;", "-\t    arguments          = args;", "-            importationManager = im;", "-\t    interpreter        = TreeInterpreter.this;", "-\t}", "+     */", "+    ConstructorParametersDescriptor(List<FormalParameter> params, List<Expression> args, ImportationManager im) {", "+      parameters         = params;", "+      arguments          = args;", "+      importationManager = im;", "+      interpreter        = TreeInterpreter.this;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e570f7ee579c5b1df0ec26095158d70c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TreeInterpreter.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     public void registerConstructorArguments(String             sig, \t\t\t\t\t     List               params, \t\t\t\t\t     List               exprs, \t\t\t\t\t     ImportationManager im)", "signatureAfterChange": "   public void registerConstructorArguments(String                sig,                                            List<FormalParameter> params,                                            List<Expression>      exprs,                                            ImportationManager    im)", "diff": ["-     */", "-    public void registerConstructorArguments(String             sig,", "-\t\t\t\t\t     List               params,", "-\t\t\t\t\t     List               exprs,", "-\t\t\t\t\t     ImportationManager im) {", "-\tlocalConstructorParameters.add(sig);", "-\tconstructorParameters.put(sig, new ConstructorParametersDescriptor", "-\t\t\t\t  (params, exprs, im));", "+   */", "+  public void registerConstructorArguments(String                sig,", "+                                           List<FormalParameter> params,", "+                                           List<Expression>      exprs,", "+                                           ImportationManager    im) {", "+    localConstructorParameters.add(sig);", "+    constructorParameters.put(sig, ", "+                              new ConstructorParametersDescriptor(params, exprs, im));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7f92a9d15be95a78d9278602653bcac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/GlobalContext.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public Constructor lookupConstructor(Class c, Class[] params)     throws NoSuchMethodException", "signatureAfterChange": "   public Constructor lookupConstructor(Class<?> c, Class<?>[] params)     throws NoSuchMethodException", "diff": ["-  public Constructor lookupConstructor(Class c, Class[] params)", "+  public Constructor lookupConstructor(Class<?> c, Class<?>[] params)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea9430743cffd22b8c25387b324a4655", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public void compileAll() throws IOException", "signatureAfterChange": "   public void compileAll() throws IOException", "diff": ["-        ArrayList filesToCompile = new ArrayList();", "+        ArrayList<File> filesToCompile = new ArrayList<File>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac349a9581029cce18278966255ee15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/context/MethodContext.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public MethodContext(Interpreter i, Class c, Object obj, Set fp)", "signatureAfterChange": "   public MethodContext(Interpreter i, Class c, Object obj, Set fp)", "diff": ["-     */", "-    public MethodContext(Interpreter i, Class c, Object obj, Set fp) {", "-\tsuper(i, c, fp);", "-", "-\tList l = new LinkedList();", "-\tl.add(thisIdentifier);", "-\tdefaultQualifier = new QualifiedName(l);", "-\tsetConstant(\"this\", obj);", "-    }", "+   */", "+  public MethodContext(Interpreter i, Class c, Object obj, Set fp) {", "+    super(i, c, fp);", "+    ", "+    List<IdentifierToken> l = new LinkedList<IdentifierToken>();", "+    l.add(thisIdentifier);", "+    defaultQualifier = new QualifiedName(l);", "+    setConstant(\"this\", obj);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6ad3659e243eb2def66efcf189e056", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "   public Class visit(ShiftLeftAssignExpression node)", "signatureAfterChange": "   public Class<?> visit(ShiftLeftAssignExpression node)", "diff": ["-  public Class visit(ShiftLeftAssignExpression node) {", "-    Class c = visitShiftExpression(node);", "+  public Class<?> visit(ShiftLeftAssignExpression node) {", "+    Class<?> c = visitShiftExpression(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed061ed3b74859131a39b55d41b8fde2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "68bd63f6034f2863f39ab1e69222ff477d2c17f9", "commitAfterChange": "0fae02937c58237a9087228b753c7aa76d749043", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Object visit(ForStatement node)", "signatureAfterChange": "   public Object visit(ForStatement node)", "diff": ["-      Set vars = (Set)node.getProperty(NodeProperties.VARIABLES);", "+      Set<AbstractVariable> vars = (Set<AbstractVariable>)node.getProperty(NodeProperties.VARIABLES); /* Type erasure bites! */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edaa70a0ec8e3a8b413a100664300ea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": "     private File _getSourceRoot(String packageName)       throws InvalidPackageException", "signatureAfterChange": "     private File _getSourceRoot(String packageName)       throws InvalidPackageException", "diff": ["-      Stack packageStack = new Stack();", "+      Stack<String> packageStack = new Stack<String>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee7f4ab7533fbe4176d21aac184b7593", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/NodeProperties.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Class getComponentType(Node n)", "signatureAfterChange": "     public static Class<?> getComponentType(Node n)", "diff": ["-    public static Class getComponentType(Node n) {", "-        return (Class)n.getProperty(COMPONENT_TYPE);", "+    public static Class<?> getComponentType(Node n) {", "+        return (Class<?>)n.getProperty(COMPONENT_TYPE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef7228a506aacbc74e3354d17640a04f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/TigerUtilities.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public static boolean boxesTo(Class prim, Class ref)", "signatureAfterChange": "   public static boolean boxesTo(Class<?> prim, Class<?> ref)", "diff": ["-  public static boolean boxesTo(Class prim, Class ref) {", "+  public static boolean boxesTo(Class<?> prim, Class<?> ref) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1178e624838ad077c23d442b1ac90ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Class visit(Literal node)", "signatureAfterChange": "   public Class<?> visit(Literal node)", "diff": ["-  public Class visit(Literal node) {", "+  public Class<?> visit(Literal node) {", "-    Class c = node.getType();", "+    Class<?> c = node.getType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2662404fd1ebb318c72b13856764587", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/JavaDebugInterpreter.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected QualifiedName _convertThisToName(ThisExpression node)", "signatureAfterChange": "   protected QualifiedName _convertThisToName(ThisExpression node)", "diff": ["-    List ids = new LinkedList(); // Add parameterization <Identifier>.", "+    List<IdentifierToken> ids = new LinkedList<IdentifierToken>(); // Add parameterization <Identifier>."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f415aa51899aa52f98014f409e12e962", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectProfile.java", "commitBeforeChange": "d39fc44a2b4009f148bbc703ed43a3cf2088b6b8", "commitAfterChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public Map<OptionParser,String> getPreferencesStoredInProject()", "signatureAfterChange": "   public Map<OptionParser<?>,String> getPreferencesStoredInProject()", "diff": ["-  public Map<OptionParser,String> getPreferencesStoredInProject() {", "-    return new HashMap<OptionParser,String>(_storedPreferences);", "+  public Map<OptionParser<?>,String> getPreferencesStoredInProject() {", "+    return new HashMap<OptionParser<?>,String>(_storedPreferences);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c27d7bc226305a9f28ebee585dc427", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "073a6ec63f7f5a236a766902bc5bf1d4eec92a9a", "commitAfterChange": "b766dedec60794c7ccfb85273d23640db0920ecd", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        LinkedList args = new LinkedList();", "+        LinkedList<StringReference> args = new LinkedList<StringReference>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9cbd29d2cc618c364e2998270135680", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "46bddad84804814dd0241cc4f939b2c8bb524e79", "commitAfterChange": "57c329e51bd78750aa00f213f08f13a896c8353c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "     protected void visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "     protected void visitNumericExpression(BinaryExpression node, String s)", "diff": ["-      Class lc = lci.getJavaClass();", "-      Class rc = rci.getJavaClass();", "+      Class<?> lc = lci.getJavaClass();", "+      Class<?> rc = rci.getJavaClass();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb327cdbae6901adb7759be71efbff52", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName,                                                ThreadReference threadRef)     throws InvalidTypeException, ClassNotLoadedException,     IncompatibleThreadStateException, InvocationException, DebugException", "diff": ["-        LinkedList args = new LinkedList(); //Add parameterization <StringReference>. ", "+        LinkedList<StringReference> args = new LinkedList<StringReference>(); //Added parameterization <StringReference>. "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd8a608e899e553da4c52b485717a961", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "68bd63f6034f2863f39ab1e69222ff477d2c17f9", "commitAfterChange": "0fae02937c58237a9087228b753c7aa76d749043", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public Object visit(BlockStatement node)", "signatureAfterChange": "   public Object visit(BlockStatement node)", "diff": ["-      Set vars = (Set)node.getProperty(NodeProperties.VARIABLES);", "+      Set<AbstractVariable> vars = (Set<AbstractVariable>)node.getProperty(NodeProperties.VARIABLES); /* Type erasure bites! */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff04f5ebaf5109ddb839e39ce0c69ed8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "18a9f2cc3ae6f0d537d5b99c2f47d401bf5d764e", "commitAfterChange": "1e89570173a057456dfaafaaf0fe0900c92c74a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public Object visit(ForEachStatement node)", "signatureAfterChange": "   public Object visit(ForEachStatement node)", "diff": ["-    Class collTypeClass = NodeProperties.getType(collection);", "+    Class<?> collTypeClass = NodeProperties.getType(collection);", "-    Class c;", "+    Class<?> c;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffcfde6692f0c4bc37c693076cdb1504", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "0df5b67dc6a947ef0dc3e15977c6d8f0381eaef3", "commitAfterChange": "ab104d7a596197fd72adce8bdbadedeb720fbd0c", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "   public File[] getSourceRootSet()", "signatureAfterChange": "   public File[] getSourceRootSet()", "diff": ["-    LinkedList roots = new LinkedList();", "+    LinkedList<File> roots = new LinkedList<File>();"]}], "num": 261}
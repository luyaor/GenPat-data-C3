{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06c1b374edb9ade5fa53290cf731ca3e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23dc08e6898675753992147aa27ac2ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "d43aa0dddfca5bd508283f6af1dfc42f0f92a186", "commitAfterChange": "0e1d09dde6936169177bd564168991351deb65d8", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": "   public static <T> Runnable bindFirst(Runnable1<? super T> runnable, T arg)", "signatureAfterChange": "   public static <T1, T2> Predicate<T2> bindFirst(Predicate2<? super T1, ? super T2> pred, T1 arg1)", "diff": ["+  /** Bind a fixed argument to the given binary predicate, producing a unary prediate. */", "+  public static <T1, T2> Predicate<T2> bindFirst(Predicate2<? super T1, ? super T2> pred, T1 arg1) {", "+    return new BindFirstPredicate<T1, T2>(pred, arg1);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96234b388fb1b3aaf90556a228fa60a8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "e6763da4d9e1118450dc76cc396410e4a3b0e46a", "commitAfterChange": "9c8a785db081b77d8ac8b9698b67d2973d82d49a", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "   public static <T> Predicate<T> and(final Iterable<? extends Predicate<? super T>> preds)", "signatureAfterChange": "   public static <T> Predicate<T> and(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3)", "diff": ["+  /** @return  The conjunction ({@code &&}) of {@code p1}, {@code p2}, and {@code p3} */", "+  public static <T> Predicate<T> and(Predicate<? super T> p1, Predicate<? super T> p2, Predicate<? super T> p3) {", "+    return and(IterUtil.makeIterable(p1, p2, p3));", "+  }"]}], "num": 21450}
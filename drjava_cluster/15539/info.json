{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88eedba2dc531e3654fcc919abeab93f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26f1aed1361d3c409df7346ff0961244", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v2_0/edu/rice/cs/drjava/model/compiler/JSR14v20Compiler.java", "commitBeforeChange": "b0379db63d3c5a47fadb665dc5c6e198eb5d5c46", "commitAfterChange": "3bcceabb48ef17a2549ccf8af09c114f2334b56a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "diff": ["-      return new CompilerError[] {", "-        new CompilerError(\"Compile exception: \" + t, false)", "-      };", "+      ", "+      ", "+      //Added to account for error in javac whereby a variable that was not declared will", "+      //cause an out of memory error. This change allows us to output both errors and not", "+      //just the out of memory error", "+      ", "+      CompilerError[] errorArray = new CompilerError[compilerLog.getErrors().length + 1];", "+      for(int i = 0; i < compilerLog.getErrors().length; i++) {", "+        errorArray[i+1] = compilerLog.getErrors()[i];", "+      }", "+      errorArray[0] = new CompilerError(\"Compile exception: \" + t, false);", "+      return errorArray; ", "+//      return new CompilerError[] {", "+//        new CompilerError(\"Compile exception: \" + t, false)", "+//      };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955eb183e3a3cc34afc5fe264427a6f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/src-jsr14v1_0/edu/rice/cs/drjava/model/compiler/JavacGJCompiler.java", "commitBeforeChange": "a4a5084a35a0430f93053d1669551a0abd12802f", "commitAfterChange": "3abdce7aa2ea1a2a164587b2c80d42b677549ee5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "signatureAfterChange": "   public CompilerError[] compile(File[] sourceRoots, File[] files)", "diff": ["-      return new CompilerError[] {", "-        new CompilerError(\"Compile exception: \" + t, false)", "-      };", "+      ", "+      ", "+      //Added to account for error in javac whereby a variable that was not declared will", "+      //cause an out of memory error. This change allows us to output both errors and not", "+      //just the out of memory error", "+      ", "+      CompilerError[] errorArray = new CompilerError[compilerLog.getErrors().length + 1];", "+      for(int i = 0; i < compilerLog.getErrors().length; i++) {", "+        errorArray[i+1] = compilerLog.getErrors()[i];", "+      }", "+      errorArray[0] = new CompilerError(\"Compile exception: \" + t, false);", "+      return errorArray; ", "+", "+      //      return new CompilerError[] {", "+      //        new CompilerError(\"Compile exception: \" + t, false)", "+      //      };"]}], "num": 15539}
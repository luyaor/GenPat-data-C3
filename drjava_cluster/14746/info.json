{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ec78541cc18ee00b0e2cd0508ec1e37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f4633c30ef402ab03a65e42dab066d3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/indent/QuestionCurrLineStartsWithSkipCommentsTest.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testNoPrefix() throws BadLocationException", "signatureAfterChange": "      public void testNoPrefix() throws BadLocationException", "diff": ["-  public void testNoPrefix() throws BadLocationException", "-  {", "+  public void testNoPrefix() throws BadLocationException {", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts one-line comment.\", rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts javadoc comment.\", rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside javadoc comment.\", !rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes javadoc comment.\", rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "+//    System.err.println(\"****** Starting test that fails ******\");", "+    assertTrue(\"START starts one-line comment.\", ! rule.applyRule(_doc, 54, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts one-line comment.\", ! rule.applyRule(_doc, 60, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", ! rule.applyRule(_doc, 104, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts javadoc comment.\", ! rule.applyRule(_doc, 110, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside javadoc comment.\", ! rule.applyRule(_doc, 130, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes javadoc comment.\", ! rule.applyRule(_doc, 150, Indenter.IndentReason.OTHER));", "-    assertTrue(\"START starts multi-line comment.\", rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line inside multi-line comment.\", !rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "-    assertTrue(\"Line closes multi-line comment.\", rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));", "+    assertTrue(\"START starts multi-line comment.\", ! rule.applyRule(_doc, 260, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", ! rule.applyRule(_doc, 275, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line inside multi-line comment.\", ! rule.applyRule(_doc, 300, Indenter.IndentReason.OTHER));", "+    assertTrue(\"Line closes multi-line comment.\", ! rule.applyRule(_doc, 399, Indenter.IndentReason.OTHER));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64161109aa7875f6871ef5d327d38aba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public void testSetFromNode() throws Exception", "signatureAfterChange": "   public void testSetFromNode() throws Exception", "diff": ["-  }\r", "-  public void testSetFromNode() throws Exception {\r", "-    XMLConfig xc = new XMLConfig();\r", "-    Node n = xc.set(\"foo/bar\", \"abc\", false);\r", "-    \r", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "-    \r", "-    xc.set(\".fuz\", \"def\", n, false);\r", "-    \r", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "-    \r", "-    n = xc.set(\"fum\", \"\", n.getParentNode(), false);\r", "-    \r", "-    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {\r", "-      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum></fum>\"+NL+\"</foo>\"+NL,\r", "-                   xc.toString());\r", "-    }\r", "-    else {\r", "-      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum/>\"+NL+\"</foo>\"+NL,\r", "-                   xc.toString());\r", "-    }\r", "-    assertEquals(\"\", xc.get(\"foo/fum\"));\r", "-    \r", "-    xc.set(\"file\", \"test1.txt\", n, false);\r", "-    xc.set(\"file\", \"test2.txt\", n, false);\r", "-    \r", "-    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {\r", "-      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL\r", "-                     + \"  <fum><file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL,\r", "-                   xc.toString());\r", "-    }\r", "-    else {\r", "-      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL\r", "-                     + \"  <fum>\"+NL+\"    <file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL,\r", "-                   xc.toString());\r", "-    }\r", "-    List<String> r = xc.getMultiple(\"foo/fum/file\");\r", "-    assertEquals(2, r.size());\r", "-    assertEquals(\"test1.txt\", r.get(0));\r", "-    assertEquals(\"test2.txt\", r.get(1));\r", "-  }\r", "+  }", "+  public void testSetFromNode() throws Exception {", "+    XMLConfig xc = new XMLConfig();", "+    Node n = xc.set(\"foo/bar\", \"abc\", false);", "+    ", "+    assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL), xc.toString());", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "+    ", "+    xc.set(\".fuz\", \"def\", n, false);", "+    ", "+    assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"</foo>\"+NL), xc.toString());", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "+    ", "+    n = xc.set(\"fum\", \"\", n.getParentNode(), false);", "+    ", "+    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {", "+      assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum></fum>\"+NL+\"</foo>\"+NL),", "+                   xc.toString());", "+    }", "+    else {", "+      assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum/>\"+NL+\"</foo>\"+NL),", "+                   xc.toString());", "+    }", "+    assertEquals(\"\", xc.get(\"foo/fum\"));", "+    ", "+    xc.set(\"file\", \"test1.txt\", n, false);", "+    xc.set(\"file\", \"test2.txt\", n, false);", "+    ", "+    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {", "+      assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL", "+                                 + \"  <fum><file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL),", "+                   xc.toString());", "+    }", "+    else {", "+      assertEquals(remove16XML(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL", "+                                 + \"  <fum>\"+NL+\"    <file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL),", "+                   xc.toString());", "+    }", "+    List<String> r = xc.getMultiple(\"foo/fum/file\");", "+    assertEquals(2, r.size());", "+    assertEquals(\"test1.txt\", r.get(0));", "+    assertEquals(\"test2.txt\", r.get(1));", "+  }"]}], "num": 14746}
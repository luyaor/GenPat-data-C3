{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e3954f35ecce54abf9351e106db22e4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25721de98ff54a4afaad280f86b87365", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJavaRoot.java", "commitBeforeChange": "34ce8483136d91f9eff46f1971dc8a612f363868", "commitAfterChange": "cfd4689ec89c3908ea0306a11510c85ea5436de0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public static void main(final String[] args)", "signatureAfterChange": "      public static void main(final String[] args)", "diff": ["-    String[] filesToOpen = DrJava.getFilesToOpen();", "+    final String[] filesToOpen = DrJava.getFilesToOpen();", "-          final MainFrame mf = new MainFrame();", "+          _mainFrame = new MainFrame();", "-          DrJavaErrorWindow.setFrame(mf);", "+          DrJavaErrorWindow.setFrame(_mainFrame);", "-          _openCommandLineFiles(mf, filesToOpen, numFiles);", "+          // false means \"do not jump to the line number that may be specified, just open the file\"", "+          _openCommandLineFiles(_mainFrame, filesToOpen, numFiles, false);", "-          SwingUtilities.invokeLater(new Runnable(){ public void run(){ mf.start(); } });", "+          SwingUtilities.invokeLater(new Runnable(){ public void run(){ ", "+            _mainFrame.start();", "+            if (anyLineNumbersSpecified) {", "+              // this time, we do want to jump to the line number", "+              _openCommandLineFiles(_mainFrame, filesToOpen, numFiles, true);", "+            }", "+          } });", "-            public void print(String s) { mf.getModel().systemOutPrint(s); }", "+            public void print(String s) { _mainFrame.getModel().systemOutPrint(s); }", "-            public void print(String s) { mf.getModel().systemErrPrint(s); }", "+            public void print(String s) { _mainFrame.getModel().systemErrPrint(s); }", "-          if (DrJava.getShowDebugConsole()) showDrJavaDebugConsole(mf);", "+          if (DrJava.getShowDebugConsole()) showDrJavaDebugConsole(_mainFrame);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94b253eabaebb73d8e837262baa391c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashRelation.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public HashRelation(boolean indexFirst, boolean indexSecond)", "signatureAfterChange": "   public HashRelation(boolean indexSecond)", "diff": ["-  public HashRelation(boolean indexFirst, boolean indexSecond) {", "-    _pairs = new HashSet<Pair<T1, T2>>();", "-    if (indexFirst) { _firstIndex = new HashMap<T1, HashSet<T2>>(); }", "-    else { _firstIndex = null; }", "-    if (indexSecond) { _secondIndex = new HashMap<T2, HashSet<T1>>(); }", "-    else { _secondIndex = null; }", "+   */", "+  public HashRelation(boolean indexSecond) {", "+    _firstIndex = new ConcreteRelationIndex<T1, T2>(CollectUtil.<T1, PredicateSet<T2>>hashMapFactory(),", "+                                                    CollectUtil.<T2>hashSetFactory(4)) {", "+      public void addToRelation(T1 first, T2 second) { _secondIndex.added(second, first); }", "+      public void removeFromRelation(T1 first, T2 second) { _secondIndex.removed(second, first); }", "+      public void clearRelation() { _secondIndex.cleared(); }", "+    if (indexSecond) {", "+      _secondIndex = new ConcreteRelationIndex<T2, T1>(CollectUtil.<T2, PredicateSet<T1>>hashMapFactory(),", "+                                                       CollectUtil.<T1>hashSetFactory(4)) {", "+        public void addToRelation(T2 second, T1 first) { _firstIndex.added(first, second); }", "+        public void removeFromRelation(T2 second, T1 first) { _firstIndex.removed(first, second); }", "+        public void clearRelation() { _firstIndex.cleared(); }", "+      };", "+    else {", "+      _secondIndex = new LazyRelationIndex<T2, T1>(IterUtil.map(_firstIndex, Pair.<T1, T2>inverter()));"]}], "num": 27548}
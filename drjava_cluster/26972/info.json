{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a0c60ffd868b20d5e637a2631341a52", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51352eb2deb86f5c51cf509d444cdd55", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "54bd5bee689bab14e75c88e1e0073ab33a50d736", "commitAfterChange": "cbcb761fd21bd00b53ee54378971530b28d41127", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "signatureAfterChange": "   public static Remote exportInProcess(Thunk<? extends Remote> factory, JVMBuilder jvmBuilder,                                        Runnable1<? super Process> onExit)       throws InterruptedException, ExecutionException, IOException", "diff": ["+    // use localhost to avoid issues with changing IPs and firewalls", "+    jvmBuilder = jvmBuilder.addDefaultProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");", "+    jvmBuilder = jvmBuilder.addDefaultProperties(getProperties(\"plt.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa8ff4e2844fe3297c05f1eec05dafa3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "          public ThreadController()", "signatureAfterChange": "   public static <T> TaskController<T> asTaskController(Future<? extends T> future)", "diff": ["+   */", "+  public static <T> TaskController<T> asTaskController(Future<? extends T> future) {", "+    TaskController<T> result = new FutureTaskController<T>(LambdaUtil.valueLambda(future));", "+    result.start();", "+    return result;", "+  }", "-    ", "-    public ThreadController() {}"]}], "num": 26972}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9103bef07262fc11243146f4774f9e6a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42d4129a97bc97a02f9c168ca9c90f41", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RegionsTreePanel.java", "commitBeforeChange": "11e630b08382faca40628146b7f40625d89f190c", "commitAfterChange": "4742de9e9abcc9abfbe963657e41dfd407aaaeee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   public void addRegion(final R r)", "signatureAfterChange": "   public void addRegion(final R r)", "diff": ["-        // Sort regions by line number.", "+        // Sort regions by start offset.", "-        Enumeration lineNumbers = doc.children();", "-        while (lineNumbers.hasMoreElements()) {", "-          DefaultMutableTreeNode lineNumber = (DefaultMutableTreeNode)lineNumbers.nextElement();", "+        Enumeration existingRegions = doc.children();", "+        while (existingRegions.hasMoreElements()) {", "+          DefaultMutableTreeNode existing = (DefaultMutableTreeNode)existingRegions.nextElement();", "-          // if line number of indexed regions is less than new region, continue", "-          int lnr = r.getDocument().getLineOfOffset(r.getStartOffset())+1;", "-          if (((RegionTreeUserObj)lineNumber.getUserObject()).lineNumber() == lnr) {", "+          // if start offset of indexed regions is less than new region, continue", "+          int ofs = r.getStartOffset();", "+          if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() == ofs) {", "-            _regTree.scrollPathToVisible(new TreePath(lineNumber));", "+            _regTree.scrollPathToVisible(new TreePath(existing));", "-          else if (((RegionTreeUserObj)lineNumber.getUserObject()).lineNumber() > lnr) {", "+          else if (((RegionTreeUserObj)existing.getUserObject()).region().getStartOffset() > ofs) {", "-            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(lineNumber));", "+            _regTreeModel.insertNodeInto(newRegion, doc, doc.getIndex(existing));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d3e39bccc43647660c6384dc455247", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "503a4c8c883d0c0e1badd33935b5da20910f7033", "commitAfterChange": "bc15f82b93b6ffb78da3a3058742b383768e7aa6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "signatureAfterChange": "      private Iterable<JDKToolsLibrary> findLibraries()", "diff": ["+  ", "-    Map<JavaVersion.FullVersion, JDKToolsLibrary> results = new TreeMap<JavaVersion.FullVersion, JDKToolsLibrary>();", "+    Map<VerDescPair, JDKToolsLibrary> results = new TreeMap<VerDescPair, JDKToolsLibrary>();", "-        results.put(coarsenVersion(fromConfig.version()), fromConfig);", "+        results.put(getVerDescPair(fromConfig), fromConfig);", "-      JavaVersion.FullVersion runtimeVersion = fromRuntime.version();", "-        if (!results.containsKey(coarsenVersion(runtimeVersion))) {", "+        if (!results.containsKey(getVerDescPair(fromRuntime))) {", "-          results.put(coarsenVersion(runtimeVersion), fromRuntime);", "+          results.put(getVerDescPair(fromRuntime), fromRuntime);", "-      if (!results.containsKey(coarsenedVersion)) {", "+      if (!results.containsKey(getVerDescPair(t))) {", "-        results.put(coarsenedVersion, t);", "+        results.put(getVerDescPair(t), t);"]}], "num": 10896}
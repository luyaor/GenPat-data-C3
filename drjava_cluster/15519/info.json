{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c569378ca299553b255241b49ca14316", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "141167ee4b8be1dba03e952c6bd95f61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigatorTest.java", "commitBeforeChange": "e9864b9d4feda0aaaa7d286763a6fb9bc57982f2", "commitAfterChange": "5657946315ab5ce6a6abd701e9240ac5b6980d60", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void testGetDocumentsInBin()", "signatureAfterChange": "   public void testGetDocumentsInBin()", "diff": ["-   */", "+  /** Test the enumeration of items based on top-level bins. */", "-    Enumeration<DummyINavigatorItem> e = tree.getDocumentsInBin(SOURCE_BIN_NAME);", "+    Iterator<DummyINavigatorItem> items = tree.getDocumentsInBin(SOURCE_BIN_NAME).iterator();", "-    assertTrue(SOURCE_BIN_NAME+\" bin should not have 0 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(SOURCE_BIN_NAME + \" bin should not have 0 items\", items.hasNext());", "+    d = items.next();", "-    assertTrue(SOURCE_BIN_NAME+\" bin should not have 1 item\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(SOURCE_BIN_NAME + \" bin should not have 1 item\", items.hasNext());", "+    d = items.next();", "-    assertTrue(SOURCE_BIN_NAME+\" bin should not have 2 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(SOURCE_BIN_NAME + \" bin should not have 2 items\", items.hasNext());", "+    d = items.next();", "-    assertTrue(SOURCE_BIN_NAME+\" bin should not have 3 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(SOURCE_BIN_NAME + \" bin should not have 3 items\", items.hasNext());", "+    d = items.next();", "-    assertFalse(SOURCE_BIN_NAME+\" bin should not have 4 items\", e.hasMoreElements());", "+    assertFalse(SOURCE_BIN_NAME + \" bin should not have 4 items\", items.hasNext());", "-    e = tree.getDocumentsInBin(EXTERNAL_BIN_NAME);", "-    assertTrue(EXTERNAL_BIN_NAME+\" bin should not have 0 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    items = tree.getDocumentsInBin(EXTERNAL_BIN_NAME).iterator();", "+    assertTrue(EXTERNAL_BIN_NAME + \" bin should not have 0 items\", items.hasNext());", "+    d = items.next();", "-    assertTrue(EXTERNAL_BIN_NAME+\" bin should not have 1 item\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(EXTERNAL_BIN_NAME + \" bin should not have 1 item\", items.hasNext());", "+    d = items.next();", "-    assertTrue(EXTERNAL_BIN_NAME+\" bin should not have 2 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(EXTERNAL_BIN_NAME + \" bin should not have 2 items\", items.hasNext());", "+    d = items.next();", "-    assertTrue(EXTERNAL_BIN_NAME+\" bin should not have 3 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(EXTERNAL_BIN_NAME + \" bin should not have 3 items\", items.hasNext());", "+    d = items.next();", "-    assertTrue(EXTERNAL_BIN_NAME+\" bin should not have 4 items\", e.hasMoreElements());", "-    d = e.nextElement();", "+    assertTrue(EXTERNAL_BIN_NAME + \" bin should not have 4 items\", items.hasNext());", "+    d = items.next();", "-    assertFalse(EXTERNAL_BIN_NAME+\" bin should not have 5 items\", e.hasMoreElements());", "+    assertFalse(EXTERNAL_BIN_NAME + \" bin should not have 5 items\", items.hasNext());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beeb6690946dcbfd8bb884eff3fcad01", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "fda2639b8f33ecf044705f9cb480e25dbae0c84a", "commitAfterChange": "3c5a933a3b7bdbbae2845e4b6fe81e012901940b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 86, "signatureBeforeChange": "    protected DirectorySelectorComponent createDirectorySelector()", "signatureAfterChange": "   protected void chooseFile(JTextPane pane)", "diff": ["-", "-  protected DirectorySelectorComponent createDirectorySelector() {", "-    DirectoryChooser dirChooser = new DirectoryChooser(this);", "-    File wd = _mainFrame.getModel().getWorkingDirectory();", "-    if (wd==null) { wd = new File(System.getProperty(\"user.dir\")); };", "-    // LOG.log(\"wd=\"+wd);", "-    dirChooser.setSelectedFile(wd);", "-    dirChooser.setDialogTitle(\"Select Working Directory\");", "-    dirChooser.setApproveButtonText(\"Select\");", "-//  dirChooser.setEditable(true);", "-    DirectorySelectorComponent dirSelector = new DirectorySelectorComponent(this, dirChooser, 20, 12f);", "-    dirSelector.setFileField(wd);", "-    return dirSelector;", "-  }", "+  /** Opens the file chooser to select a file, putting the result in the file field. */", "+  protected void chooseFile(JTextPane pane) {", "+    // Get the file from the chooser", "+    File wd = new File(replaceVariables(pane.getText().trim(), System.getProperties()));", "+    if ((pane.getText().equals(\"\")) ||", "+        (!wd.exists()) &&", "+        (!wd.isDirectory())) {", "+      wd = new File(System.getProperty(\"user.dir\"));", "+    }", "+", "+    _dirChooser.setSelectedFile(wd);", "+    int returnValue = _dirChooser.showDialog(wd);", "+    if (returnValue == DirectoryChooser.APPROVE_OPTION) {", "+      File chosen = _dirChooser.getSelectedDirectory();", "+      if (chosen != null) { pane.setText(chosen.toString()); };", "+    }", "+  }"]}], "num": 15519}
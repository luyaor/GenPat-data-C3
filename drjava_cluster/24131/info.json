{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b6f3112d595f81306c68aaa76279544", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d946b7a74fc1dbaac7f0063bf18f975", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "5944dd2b12a74ebad6e3549d813d2dd557403c7e", "commitAfterChange": "53735c967d2add6a16ab5776bac9111426f41996", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["-                                                  \"recompiling, or instead as the user each time</html>\"));", "+                                                  \"recompiling, or instead should ask the user each time.</html>\"));", "+    ", "+    // TODO: this is dev-only until the sync issues with interactions are worked out", "+    if (CodeStatus.DEVELOPMENT) {", "+      panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN, \"Automatically Save and Compile Before Running Main Method\", this,", "+                                                    \"<html>Whether DrJava should automatically save and compile before running<br>\" +", "+                                                    \"a document's main method, or instead should ask the user each time.</html>\"));", "+    }", "+    ", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JUNIT, \"Automatically Save and Compile Before Testing\", this,", "+                                                  \"<html>Whether DrJava should automatically save and compile before<br>\" +", "+                                                  \"testing with JUnit, or instead should ask the user each time</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC, \"Automatically Save Before Generating Javadoc\", this,", "+                                                  \"<html>Whether DrJava should automatically save before generating<br>\" +", "+                                                  \"Javadoc, or instead should ask the user each time</html>\"));", "+    panel.addComponent(new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG, \"Automatically Save and Compile Before Debugging\", this,", "+                                                  \"<html>Whether DrJava should automatically save and compile before<br>\" +", "+                                                  \"debugging, or instead should ask the user each time</html>\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5391d6f0db361324fca6ec1db77bb921", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "85538cb484722f3ee8b8f52d4f19defc02bd67d5", "commitAfterChange": "ec727abc662388138ad4bf94694974ef5e13db3c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "    private void _setupResourceLocPanel ( ConfigPanel panel)", "signatureAfterChange": "    private void _setupResourceLocPanel ( ConfigPanel panel)", "diff": ["+    panel.addComponent( new FileOptionComponent( OptionConstants.JAVAC_LOCATION, \"Javac Location\", this));", "+    panel.addComponent( new FileOptionComponent( OptionConstants.JSR14_LOCATION, \"JSR14 Location\", this));", "+    panel.addComponent( new FileOptionComponent( OptionConstants.JSR14_COLLECTIONSPATH, \"JSR14 CollectionsPath\", this));", "+    panel.addComponent( new VectorOptionComponent (OptionConstants.EXTRA_CLASSPATH, \"Interactions Classpath\", this));     "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8435db38ea5512e5c55a8a620cc2bb35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "14ecd0c683c3a654631edbe7cd556951ec682439", "commitAfterChange": "b4e48852da60211c31b0141438d3f04d6c627263", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "   private void _setupColorPanel( ConfigPanel panel)", "signatureAfterChange": "   private void _setupColorPanel( ConfigPanel panel)", "diff": ["-    panel.addComponent( new ColorOptionComponent (OptionConstants.DEFINITIONS_MATCH_COLOR, \"Brace-matching Color\", this));", "+    panel.addComponent( new ColorOptionComponent (OptionConstants.DEFINITIONS_BACKGROUND_COLOR, \"Background Color\", this, true));", "+    panel.addComponent( new ColorOptionComponent (OptionConstants.DEFINITIONS_MATCH_COLOR, \"Brace-matching Color\", this, true));", "+    panel.addComponent( new ColorOptionComponent (OptionConstants.COMPILER_ERROR_COLOR, \"Compiler Error Color\", this, true));", "+    panel.addComponent( new ColorOptionComponent (OptionConstants.DEBUG_BREAKPOINT_COLOR, \"Debugger Breakpoint Color\", this, true));", "+    panel.addComponent( new ColorOptionComponent (OptionConstants.DEBUG_THREAD_COLOR, \"Debugger Location Color\", this, true));"]}], "num": 24131}
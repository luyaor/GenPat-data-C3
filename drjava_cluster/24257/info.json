{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3df9c191c5e338a88a72bd7eebaec332", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4101e17d129f6291d43426fc1be70337", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public static Command compose(final Command c1, final Command c2)", "signatureAfterChange": "   public static Runnable compose(final Runnable r1, final Runnable r2)", "diff": ["-  /** @return  A command that executes {@code c1} followed by {@code c2} */", "-  public static Command compose(final Command c1, final Command c2) { ", "-    return new Command() {", "-      public void run() { c1.run(); c2.run(); }", "+  /** @return  A runnable that executes {@code r1} followed by {@code r2} */", "+  public static Runnable compose(final Runnable r1, final Runnable r2) { ", "+    return new Runnable() {", "+      public void run() { r1.run(); r2.run(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726707bc94d3b1df11a435cf9bb0c079", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 123, "signatureBeforeChange": "   public static Runnable compose(final Runnable r1, final Runnable r2)", "signatureAfterChange": "   public static Runnable compose(Runnable... runnables)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} */", "-  public static Runnable compose(final Runnable r1, final Runnable r2) { ", "-    return new Runnable() {", "-      public void run() { r1.run(); r2.run(); }", "-    };", "+  /** Create a runnable that executes the given runnables in sequence. */", "+  public static Runnable compose(Runnable... runnables) {", "+    return new ComposedRunnable(IterUtil.asIterable(runnables));"]}], "num": 24257}
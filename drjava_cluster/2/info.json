{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c11d6471e1c09536ea3989815f59b4f3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20bcda9733b32fd5b735bc1d0f4ee304", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "db0f15071978e90a34b717520b233bb7aaf1c97a", "commitAfterChange": "fdcbc942eddfd6ff92fe750cda9018e6f1a4d3ed", "methodNumberBeforeChange": 274, "methodNumberAfterChange": 274, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["+    Utilities.invokeAndWait(new Runnable() { public void run() {", "-    _findReplace = new FindReplacePanel(this, _model);", "+      _findReplace = new FindReplacePanel(MainFrame.this, _model);", "-      _debugPanel = new DebugPanel(this);", "-      _breakpointsPanel = new BreakpointsPanel(this, _model.getBreakpointManager());", "+        _debugPanel = new DebugPanel(MainFrame.this);", "+        _breakpointsPanel = new BreakpointsPanel(MainFrame.this, _model.getBreakpointManager());", "-    _compilerErrorPanel = new CompilerErrorPanel(_model, this);", "+      _compilerErrorPanel = new CompilerErrorPanel(_model, MainFrame.this);", "-    // setUp interactions pane", "-    Utilities.invokeLater(new Runnable() {", "-      public void run() {", "-        Runnable command = new Runnable() {", "+      _interactionsController =", "+        new InteractionsController(_model.getInteractionsModel(),", "+                                   _model.getSwingInteractionsDocument(),", "+                                   new Runnable() {", "-        };", "-        _interactionsController =", "-          new InteractionsController(_model.getInteractionsModel(), _model.getSwingInteractionsDocument(), command);", "+      });", "-      }", "-    });", "-    _junitErrorPanel = new JUnitPanel(_model, this);", "-    _javadocErrorPanel = new JavadocErrorPanel(_model, this);", "+      _junitErrorPanel = new JUnitPanel(_model, MainFrame.this);", "+      _javadocErrorPanel = new JavadocErrorPanel(_model, MainFrame.this);", "-    _bookmarksPanel = new BookmarksPanel(this, _model.getBookmarkManager());", "+      _bookmarksPanel = new BookmarksPanel(MainFrame.this, _model.getBookmarkManager());", "-    _tabbedPane = new JTabbedPane();", "-    _openRecursiveCheckBox = new JCheckBox(\"Open folders recursively\");", "-    _interactionsHistoryChooser = new JFileChooser();", "-    _recentDocFrame = new RecentDocFrame(this);", "+      _recentDocFrame = new RecentDocFrame(MainFrame.this);", "-    KeyBindingManager.ONLY.setMainFrame(this);", "+      KeyBindingManager.ONLY.setMainFrame(MainFrame.this);", "-    _menuBar = new MenuBar();", "-    ", "-    _toolBar = new JToolBar();", "-    // Initialize DocumentRegion highlights hashtables, for easy removal of highlights", "-    _documentBreakpointHighlights = new IdentityHashMap<Breakpoint, HighlightManager.HighlightInfo>();", "-    _documentBookmarkHighlights = new IdentityHashMap<OrderedDocumentRegion, HighlightManager.HighlightInfo>();", "-    ", "-    _configFrame = new ConfigFrame(this);", "-    _helpFrame = new HelpFrame();", "+      _configFrame = new ConfigFrame(MainFrame.this);", "-    _quickStartFrame = new QuickStartFrame();", "-    ConfigOptionListeners.sanitizeSlaveJVMArgs(this, config.getSetting(SLAVE_JVM_ARGS), slaveJVMArgsListener);", "-    ConfigOptionListeners.sanitizeSlaveJVMXMX(this, config.getSetting(SLAVE_JVM_XMX));", "-    ConfigOptionListeners.sanitizeMasterJVMArgs(this, config.getSetting(MASTER_JVM_ARGS), masterJVMArgsListener);", "-    ConfigOptionListeners.sanitizeMasterJVMXMX(this, config.getSetting(MASTER_JVM_XMX));", "-    ConfigOptionListeners.sanitizeJavadocCustomParams(this, config.getSetting(JAVADOC_CUSTOM_PARAMS));", "+      ConfigOptionListeners.sanitizeSlaveJVMArgs(MainFrame.this, config.getSetting(SLAVE_JVM_ARGS), slaveJVMArgsListener);", "+      ConfigOptionListeners.sanitizeSlaveJVMXMX(MainFrame.this, config.getSetting(SLAVE_JVM_XMX));", "+      ConfigOptionListeners.sanitizeMasterJVMArgs(MainFrame.this, config.getSetting(MASTER_JVM_ARGS), masterJVMArgsListener);", "+      ConfigOptionListeners.sanitizeMasterJVMXMX(MainFrame.this, config.getSetting(MASTER_JVM_XMX));", "+      ConfigOptionListeners.sanitizeJavadocCustomParams(MainFrame.this, config.getSetting(JAVADOC_CUSTOM_PARAMS));", "-          new RemoteControlServer(this);", "+            new RemoteControlServer(MainFrame.this);", "-                 .equals(OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(1)) && // Ask me", "+                 .equals(OptionConstants.FileExtRegistrationChoices.ASK_ME) && // Ask me", "-              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION, ", "-                                            OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(2));", "+              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION,", "+\t\t\t\t\t\t\t\t\t\t    OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(2));", "-              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION, ", "-                                            OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(0));", "+              DrJava.getConfig().setSetting(OptionConstants.FILE_EXT_REGISTRATION,", "+\t\t\t\t\t\t\t\t\t\t    OptionConstants.FILE_EXT_REGISTRATION_CHOICES.get(0));", "-      // two dialogs on program start is too much clutter    ", "+      // two dialogs on program start is too much clutter", "-            .equals(OptionConstants.NEW_VERSION_NOTIFICATION_CHOICES.get(3)) &&", "+            .equals(OptionConstants.VersionNotificationChoices.DISABLED) &&", "+    } });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c63de22cb1e47c1b1c968cdfd33ea5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaSurveyPopup.java", "commitBeforeChange": "51e8f4cbce06d140e9a09dd38237b848b4f27d8a", "commitAfterChange": "d350dd729092f66f8ad737ae377c54d2ad394fbf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "    protected void yesAction()", "signatureAfterChange": "    protected void yesAction()", "diff": ["-    noAction();", "-", "-    final String DRJAVA_SURVEY_PAGE = \"http://www.drjava.org/submit-usage.php?\";", "-    StringBuilder sb = new StringBuilder();", "-    sb.append(DRJAVA_SURVEY_PAGE);", "+    try {", "+      final String DRJAVA_SURVEY_PAGE = \"http://www.drjava.org/submit-usage.php?\";", "+      StringBuilder sb = new StringBuilder();", "+      sb.append(DRJAVA_SURVEY_PAGE);", "-    boolean first = true;", "-    for(String k: DRJAVA_SURVEY_KEYS) {", "-      if (first) { first = false; } else { sb.append('&'); }", "-      sb.append(k);", "-      sb.append('=');", "-      sb.append(System.getProperty(k));", "-    }", "-    LOG.log(sb.toString());", "-    String result = sb.toString().replaceAll(\" \",\"%20\");", "-    LOG.log(result);", "-    ", "-    // check how many days have passed since the last survey", "-    int days = DrJava.getConfig().getSetting(OptionConstants.DRJAVA_SURVEY_DAYS);", "-    java.util.Date nextCheck = ", "-      new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY)", "-                           + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "-    if (!(new java.util.Date().after(nextCheck)) &&", "-        (DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT).equals(result))) {", "-      // not enough days have passed, and the configuration has not changed, quietly terminate", "-      return;", "-    }", "-", "-    BufferedReader br = null;", "-    try {", "-      URL url = new URL(result);", "-      InputStream urls = url.openStream();", "-      InputStreamReader is = new InputStreamReader(urls);", "-      br = new BufferedReader(is);", "-      String line;", "-      sb.setLength(0);", "-      while((line = br.readLine()) != null) { sb.append(line); sb.append(System.getProperty(\"line.separator\")); }", "+      boolean first = true;", "+      for(String k: DRJAVA_SURVEY_KEYS) {", "+        if (first) { first = false; } else { sb.append('&'); }", "+        sb.append(k);", "+        sb.append('=');", "+        sb.append(System.getProperty(k));", "+      }", "-      DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY, new Date().getTime());", "-      DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT, result);", "-    }", "-    catch(IOException e) {", "-      // could not open URL using Java, try web browser", "-      LOG.log(\"Could not open URL using Java\", e);", "+      String result = sb.toString().replaceAll(\" \",\"%20\");", "+      LOG.log(result);", "+      ", "+      // check how many days have passed since the last survey", "+      int days = DrJava.getConfig().getSetting(OptionConstants.DRJAVA_SURVEY_DAYS);", "+      java.util.Date nextCheck = ", "+        new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY)", "+                             + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "+      if (!(new java.util.Date().after(nextCheck)) &&", "+          (DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT).equals(result))) {", "+        // not enough days have passed, and the configuration has not changed, quietly terminate", "+        return;", "+      }", "+      ", "+      BufferedReader br = null;", "-        PlatformFactory.ONLY.openURL(new URL(result));", "+        URL url = new URL(result);", "+        InputStream urls = url.openStream();", "+        InputStreamReader is = new InputStreamReader(urls);", "+        br = new BufferedReader(is);", "+        String line;", "+        sb.setLength(0);", "+        while((line = br.readLine()) != null) { sb.append(line); sb.append(System.getProperty(\"line.separator\")); }", "+        LOG.log(sb.toString());", "-      catch(IOException e2) {", "-        // could not open using Java or web browser, ignore", "-        LOG.log(\"Could not open URL using web browser\", e2);", "+      catch(IOException e) {", "+        // could not open URL using Java, try web browser", "+        LOG.log(\"Could not open URL using Java\", e);", "+        try {", "+          PlatformFactory.ONLY.openURL(new URL(result));", "+          DrJava.getConfig().setSetting(OptionConstants.LAST_DRJAVA_SURVEY_RESULT, result);", "+        }", "+        catch(IOException e2) {", "+          // could not open using Java or web browser, ignore", "+          LOG.log(\"Could not open URL using web browser\", e2);", "+        }", "+      }", "+      finally { // close open input stream", "+        try { if (br!=null) br.close(); }", "+        catch(IOException e) { /* ignore */ }", "-    finally { // close open input stream", "-      try { if (br!=null) br.close(); }", "-      catch(IOException e) { /* ignore */ }", "+    finally {", "+      noAction();"]}], "num": 2}
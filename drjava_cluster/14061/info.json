{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3613a3b212bbb952efbbfd5de5de5d76", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062d97877b0f6f0f0719f9e5d74088b5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   public String getPackageName() throws InvalidPackageException", "signatureAfterChange": "   public String getPackageName() throws InvalidPackageException", "diff": ["-                                              \"No semicolon found to terminate \" +", "-                                              \"package statement!\");", "+                                              \"No semicolon found to terminate package statement!\");", "-          ", "-        while (_reduced.currentToken().getHighlightState() !=", "-               HighlightStatus.NORMAL);", "+        while (_reduced.currentToken().getHighlightState() != HighlightStatus.NORMAL);", "-          if (_reduced.currentToken().getHighlightState() ==", "-              HighlightStatus.NORMAL)", "-          {", "+          if (_reduced.currentToken().getHighlightState() == HighlightStatus.NORMAL) {", "-            ", "-            if (! Character.isWhitespace(curChar)) {", "-              buf.append(curChar);", "-            }", "+            if (! Character.isWhitespace(curChar)) buf.append(curChar);", "-                                            \"Package name was not specified \" +", "-                                            \"after the package keyword!\");", "+                                            \"Package name was not specified after the package keyword!\");", "-        ", "-      catch (BadLocationException ble) {", "-        throw new UnexpectedException(ble);", "-      }", "+      catch (BadLocationException ble) { throw new UnexpectedException(ble); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12fa043c165eeb249c8d7ba232665f76", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/IndentHelperTest.java", "commitBeforeChange": "de9f1fb322a5a5fa0f403e2f2803a6e71b1430f2", "commitAfterChange": "d866156ff3eb9397e3a97a5afc2e43aedd357f8a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "    public void testGetLineStartPos() throws BadLocationException", "signatureAfterChange": "    public void testGetLineStartPos() throws BadLocationException", "diff": ["-    assertEquals(\"Returns position after the previous newline\",", "-                 4,", "-                 _doc.getLineStartPos(6));", "-    assertEquals(\"Returns position after previous newline when cursor \" +", "-                 \"is at the position after the previous newline\",", "+    assertEquals(\"Returns position after the previous newline\", 4, _doc.getLineStartPos(6));", "+    assertEquals(\"Returns position after previous newline when cursor is at the position after the previous newline\",", "-    assertEquals(\"Returns 0 when there's no previous newline\",", "-                 0,", "-                 _doc.getLineStartPos(2));", "-    assertEquals(\"Returns 0 when the cursor is at 0\",", "-                 0,", "-                 _doc.getLineStartPos(0));", "+    assertEquals(\"Returns 0 when there's no previous newline\", 0, _doc.getLineStartPos(2));", "+    assertEquals(\"Returns 0 when the cursor is at 0\", 0, _doc.getLineStartPos(0));", "-    assertEquals(\"Check that position in reduced model is unaffected \" +", "-                 \"after call to getLineStartPos\",", "+    assertEquals(\"Check that position in reduced model is unaffected after call to getLineStartPos\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e7fc6b82980c26906509ffe4b31ecf1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/PopupConsole.java", "commitBeforeChange": "555a52426e0b7a46bbe7591ec5d5d45d18885291", "commitAfterChange": "ff0c2424af3b72f584c63b0ff8ffed31ae421f7b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected String showDialog(Frame parentFrame)", "signatureAfterChange": "   protected String showDialog(Frame parentFrame)", "diff": ["-    _doc.append(input + '\\n', _doc.getDefaultStyle());", "-    _console.append(input + '\\n', _console.getDefaultStyle());", "+    _doc.append(input, _doc.getDefaultStyle());", "+    _console.append(input, _console.getDefaultStyle());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cea0e45df4225a77bfe1b1cede597b75", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/RecentFileManager.java", "commitBeforeChange": "df0655af5beabbfb7a1a971213c956e8877411d8", "commitAfterChange": "eee347fd3fa2c22c95183dc23b859e14d297bb1b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void numberItems()", "signatureAfterChange": "   public void numberItems()", "diff": ["-      _remove(_initPos+1-(delPos-1));", "+      _remove(_initPos+delPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e60683a98830a747788c6c8c46128dba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "591ec87995880046281596623701cb5a561fc66e", "commitAfterChange": "ce73fdb27a8e7aa886580e240ca54bfd98e64031", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public T current()", "signatureAfterChange": "     public T current()", "diff": ["-      if (atStart())", "-        throw new RuntimeException(\"Attempt to call current on an \" +", "-                                   \"iterator in the initial position\");", "-      if (atEnd())", "-        throw new RuntimeException(\"Attempt to call current on an \" +", "-                                   \"iterator in the final position\");", "+      if (atStart()) throw new RuntimeException(\"Attempt to call current on an iterator in the initial position\");", "+      if (atEnd()) throw new RuntimeException(\"Attempt to call current on an iterator in the final position\");"]}], "num": 14061}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c09c3a56ee2f9f3e2e4778a6e588687", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf3304d3608b69f091136a27aaf5c7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void setActiveDocument(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void setActiveDocument(final OpenDefinitionsDocument doc)", "diff": ["-  public void setActiveDocument(OpenDefinitionsDocument doc) {", "-    try { _documentNavigator.setActiveDoc(doc); } ", "-    catch(DocumentClosedException dce) { ", "-      /* do nothing; findbugs signals a bug unless this catch clause spans more than two lines */", "-    }", "+  public void setActiveDocument(final OpenDefinitionsDocument doc) {", "+/* The following code fixes a potential race because this method modifies the documentNavigator which is a swing", "+ * component.  It was commented out because it broke at least one unit test which appears to be timing dependent.  ", "+ * We need to fix the unit tests before we can use the code that has been commented out. The race appears statistically", "+ * improbable because the update only changes the DefaultListSelection or DefaultTreeSelection in the navigator and", "+ * this operation is very lightweight. The chances of a context switch in the middle are very small. */", "+    Runnable command = new Runnable() { ", "+      public void run() { _documentNavigator.setActiveDoc(doc); }", "+    };", "+    Utilities.invokeLater(command);", "+//    try { _documentNavigator.setActiveDoc(doc); } ", "+//    catch(DocumentClosedException dce) { ", "+//      /* do nothing; findbugs signals a bug unless this catch clause spans more than two lines */", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2b257f90dabc17f32ff1225deaa6b39", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "commitAfterChange": "7816bebb52027e20286d4bdb830f3c6885132322", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 231, "signatureBeforeChange": "   protected void _docAppend(ConsoleDocument doc, String s, String style)", "signatureAfterChange": "   protected void _docAppend(final ConsoleDocument doc, final String s, final String style)", "diff": ["-  protected void _docAppend(ConsoleDocument doc, String s, String style) {", "-    /** A lock object to prevent print calls from flooding the JVM, ensuring the UI remains responsive. */", "-    final Object systemWriterLock = new Object();", "-    ", "-    synchronized(systemWriterLock) {", "-      try {", "-        doc.insertBeforeLastPrompt(s, style);", "-        systemWriterLock.wait(WRITE_DELAY);  // Wait to prevent being print flooding", "-      }", "-      catch (InterruptedException e) { /* Ignore and resume */ }", "-    }", "+  protected void _docAppend(final ConsoleDocument doc, final String s, final String style) {", "+    Utilities.invokeLater(new Runnable() {", "+      public void run() { doc.insertBeforeLastPrompt(s, style); }", "+    });"]}], "num": 26118}
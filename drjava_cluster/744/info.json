{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2083e95109ea0af07a01bd65fc2b97e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af014a92817e07c47c595a0a17afd5a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk6/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "fdceac19a315aa89dd2730a793dce89c488bf5c8", "commitAfterChange": "616a73b61604c7af8836357cef2e57a77aa96d3b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath,                                                 List<? extends File> sourcePath, File destination,                                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["+    List<File> filteredClassPath = null;", "+    if (classPath!=null) {", "+      filteredClassPath = new LinkedList<File>(classPath);", "+      ", "+      if (_filterExe) {", "+        FileFilter filter = IOUtil.extensionFilePredicate(\"exe\");", "+        Iterator<? extends File> i = filteredClassPath.iterator();", "+        while (i.hasNext()) {", "+          if (filter.accept(i.next())) { i.remove(); }", "+        }", "+        if (_tempJUnit!=null) { filteredClassPath.add(_tempJUnit); }", "+      }", "+    }", "-    Context context = _createContext(classPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);", "+    Context context = _createContext(filteredClassPath, sourcePath, destination, bootClassPath, sourceVersion, showWarnings);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48691d2696f15a9b522dc5075b3295e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "0b7f9842c42a34509d077a5e1d655daf0b8192d6", "commitAfterChange": "736bd820b2cec64b47667921b5d5c82d9c502af8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void setCacheSize(int size)", "signatureAfterChange": "   public synchronized void setCacheSize(int size)", "diff": ["-  ", "-  public void setCacheSize(int size) {", "-    if (size < 0) {", "-      throw new IllegalArgumentException(\"Cannot set the cache size less than 0\");", "-    }", "+  public synchronized void setCacheSize(int size) {", "+    if (_lru.size() >= CACHE_SIZE) {", "+      ListIterator<DocManager> it = _lru.listIterator();", "+      int i = 0;", "+      while (it.hasNext()) {", "+        it.next();", "+        if (i >= CACHE_SIZE) {", "+          it.remove();", "+        }", "+        i++;", "+      }", "+    }"]}], "num": 744}
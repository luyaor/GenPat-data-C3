{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "686221a345c03a0ae1e202113228ba1f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "594d8f94cd62d85b6476be3540d272b1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "signatureAfterChange": "    public void testWriteFile() throws IOException, MalformedProjectFileException", "diff": ["-    File pf = _fillTempFile(\"test2.pjt\", \"\");", "+    File pf = new File(parent, \"test2.pjt\");", "+    FileOps.writeStringToFile(pf, \"\");", "-    fb.addClassPathFile(new File(absp, \"drjava/lib\"));", "-    fb.setBuildDirectory(new File(absp, \"drjava/built\"));", "-    fb.setWorkingDirectory(new File(absp, \"drjava/src\"));", "+    fb.addClassPathFile(new File(parent, \"lib\"));", "+    fb.setBuildDirectory(new File(parent, \"built\"));", "+    fb.setWorkingDirectory(new File(parent, \"src\"));", "-    assertEquals(\"first source filename\", new File(base,\"/dir1/testfile1.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "-    assertEquals(\"last source filename\", new File(base,\"/dir3/testfile5.java\").getPath(), pfir.getSourceFiles()[4].getPath());", "-    assertEquals(\"first aux filename\", new File(absp,\"test/testfile6.java\").getPath(), pfir.getAuxiliaryFiles()[0].getPath());", "+    assertEquals(\"first source filename\", new File(parent,\"/dir1/testfile1.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "+    assertEquals(\"last source filename\", new File(parent,\"/dir3/testfile5.java\").getPath(), pfir.getSourceFiles()[4].getPath());", "+    assertEquals(\"first aux filename\", new File(parent,\"test/testfile6.java\").getPath(), pfir.getAuxiliaryFiles()[0].getPath());", "-    assertEquals(\"build-dir name\", null, pfir.getBuildDirectory());", "-    assertEquals(\"work-dir name\", null, pfir.getWorkingDirectory());", "-    assertEquals(\"classpath name\", new File(absp,\"drjava/lib\").getPath(), pfir.getClassPaths()[0].getCanonicalPath());", "-    assertEquals(\"main-class name\", new File(base,\"/dir1/testfile1.java\").getCanonicalPath(), pfir.getMainClass().getCanonicalPath());", "+    assertEquals(\"build-dir name\", buildDir, pfir.getBuildDirectory());", "+    assertEquals(\"work-dir name\", srcDir, pfir.getWorkingDirectory());", "+    assertEquals(\"classpath name\", new File(parent,\"lib\"), pfir.getClassPaths()[0]);", "+    assertEquals(\"main-class name\", new File(parent,\"/dir1/testfile1.java\"), pfir.getMainClass());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10fce65d1a1f55d0d182c32aee233c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectTest.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException", "signatureAfterChange": "   public void testParseProject() throws IOException, MalformedProjectFileException, java.text.ParseException", "diff": ["-      \"   (file (name \\\"sexp/Atom.java\\\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/BoolAtom.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/Cons.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/Empty.java\\\")(select 24 28)(mod-date \\\"16-Jul-2004 03:45:23\\\")(active))\\n\" +", "-      \"   (file (name \\\"sexp/Lexer.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/NumberAtom.java\\\")(select 12 12)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \\\"sexp/SEList.java\\\")(select 0 0)))\\n\" + // doesn't have mod date", "+      \"   (file (name \\\"src/sexp/Atom.java\\\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/BoolAtom.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/Cons.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/Empty.java\\\")(select 24 28)(mod-date \\\"16-Jul-2004 03:45:23\\\")(active))\\n\" +", "+      \"   (file (name \\\"src/sexp/Lexer.java\\\")(select 0 0)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/NumberAtom.java\\\")(select 12 12)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \\\"src/sexp/SEList.java\\\")(select 0 0)))\\n\" + // doesn't have mod date", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"junk/sexp/Tokens.java\").getCanonicalPath()) +\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"jdk1.5.0/JScrollPane.java\").getCanonicalPath()) +\")(select 9086 8516)(mod-date \\\"16-Jul-2004 03:45:23\\\")))\\n\" +", "+      \"   (file (name \" + convertToLiteral(new File(parent,\"junk/sexp/Tokens.java\").getCanonicalPath()) +\")(select 32 32)(mod-date \\\"16-Jul-2004 03:45:23\\\"))\\n\" +", "+      \"   (file (name \" + convertToLiteral(new File(parent,\"jdk1.5.0/JScrollPane.java\").getCanonicalPath()) +\")(select 9086 8516)(mod-date \\\"16-Jul-2004 03:45:23\\\")))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"drjava/built\").getCanonicalPath()) + \")))\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"built\").getCanonicalPath()) + \")))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"drjava/src\").getCanonicalPath()) + \")))\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"src\").getCanonicalPath()) + \")))\\n\" +", "+      \"(proj-root ;; absolute path\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"src\").getCanonicalPath()) + \")))\\n\" +", "-      \"   (file (name \"+convertToLiteral(new File(absp,\"drjava/src/edu/rice/cs/lib\").getCanonicalPath()) + \")))\\n\" +", "+      \"   (file (name \"+ convertToLiteral(new File(parent,\"src/edu/rice/cs/lib\").getCanonicalPath()) + \")))\\n\" +", "-      \"   (file (name \\\"sexp/SEList.java\\\")))\";", "+      \"   (file (name \\\"src/sexp/SEList.java\\\")))\";", "+    ", "+    File f = new File(parent, \"test1.pjt\");", "-    File f = _fillTempFile(\"test1.pjt\", proj1);", "+    FileOps.writeStringToFile(f, proj1);", "+//    System.err.println(\"Project directory is \" + parent);", "+//    System.err.println(\"Project file is \" + f);", "+//    System.err.println(\"projFile exists? \" + f.exists());", "+//    System.err.println(\"buildDir = \" + pfir.getBuildDirectory().getCanonicalPath());", "-    String base = f.getParent();", "-    assertEquals(\"first source filename\", new File(base,\"/sexp/Atom.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "+    File base = f.getParentFile();", "+    assertEquals(\"first source filename\", new File(base,\"src/sexp/Atom.java\").getPath(), pfir.getSourceFiles()[0].getPath());", "-    assertEquals(\"last source filename\", new File(base,\"/sexp/SEList.java\").getPath(), pfir.getSourceFiles()[6].getPath());", "-    assertEquals(\"first aux filename\", new File(absp,\"junk/sexp/Tokens.java\").getPath(), pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "+    assertEquals(\"last source filename\", new File(base,\"src/sexp/SEList.java\").getPath(), ", "+                 pfir.getSourceFiles()[6].getPath());", "+    assertEquals(\"first aux filename\", new File(base,\"junk/sexp/Tokens.java\").getPath(), ", "+                 pfir.getAuxiliaryFiles()[0].getCanonicalPath());", "-    assertEquals(\"build-dir name\", new File(absp,\"drjava/built\").getPath(), pfir.getBuildDirectory().getCanonicalPath());", "-    assertEquals(\"work-dir name\", new File(absp,\"drjava/src\").getPath(), pfir.getWorkingDirectory().getCanonicalPath());", "-    assertEquals(\"classpath name\", new File(absp,\"drjava/src/edu/rice/cs/lib\").getPath(), pfir.getClassPaths()[0].getCanonicalPath());", "-    assertEquals(\"main-class name\", new File(base,\"/sexp/SEList.java\").getCanonicalPath(), pfir.getMainClass().getCanonicalPath());", "+    assertEquals(\"build-dir name\", new File(base, \"built\").getCanonicalPath(), ", "+                 pfir.getBuildDirectory().getCanonicalPath());", "+    assertEquals(\"work-dir name\", new File(base, \"src\").getCanonicalPath(), ", "+                 pfir.getWorkingDirectory().getCanonicalPath());", "+    assertEquals(\"classpath name\", new File(base, \"src/edu/rice/cs/lib\").getCanonicalPath(), ", "+                 pfir.getClassPaths()[0].getCanonicalPath());", "+    assertEquals(\"main-class name\", new File(base, \"src/sexp/SEList.java\").getCanonicalPath(), ", "+                 pfir.getMainClass().getCanonicalPath());"]}], "num": 19911}
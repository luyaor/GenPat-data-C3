{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "379843688e37ee5a353d8fa4bf7fa7a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107c9b6fb61073df74e6f7027501b2e6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public static <R> TaskController<R> computeInThread(final Thunk<? extends R> task, boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInThread(Thunk<? extends R> task, boolean start)", "diff": ["-  public static <R> TaskController<R> computeInThread(final Thunk<? extends R> task, boolean start) {", "-    final ThreadController<R> controller = new ThreadController<R>();", "-    Runnable runner = new Runnable() {", "-      public void run() {", "-        R result = null;", "-        Throwable exception = null; // *Only* exceptions thrown by the task", "-        try { result = task.value(); }", "-        catch (Throwable e) { exception = e; }", "-        controller.done(result, exception);", "-      }", "-    };", "-    controller.setThread(new Thread(runner, \"ConcurrentUtil task\"));", "-    if (start) { controller.start(); }", "-    return controller;", "-  }", "+  public static <R> TaskController<R> computeInThread(Thunk<? extends R> task, boolean start) {", "+    return computeWithExecutor(task, THREAD_EXECUTOR, start);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b939cda30d18007a790f771916bc8472", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 34, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final File workingDir,                                                         boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder)", "diff": ["+  public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, JVMBuilder jvmBuilder) {", "+    return computeInProcess(task, jvmBuilder, true);", "-   */", "-  public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, final File workingDir, ", "-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try { return runJavaProcess(TaskProcess.class.getName(), IterUtil.<String>empty(), workingDir); }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "-    }));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc37d8bf46a3544c9aa7d2381002da11", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "dba5d2158724820f410d4efff37289045b3aca4c", "commitAfterChange": "6db2338d4c58e83974c8e6232ba8e48286d65b5e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "   public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, boolean start)", "signatureAfterChange": "   public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, boolean start)", "diff": ["+   */", "+  public static <R> TaskController<R> computeInProcess(Thunk<? extends R> task, boolean start) {", "+    return computeInProcess(task, JVMBuilder.DEFAULT, true);", "-  public static <R> TaskController<R> computeInProcess(final Thunk<? extends R> task, boolean start) {", "-    ProcessController<R> controller = new ProcessController<R>(task, new LazyThunk<Process>(new Thunk<Process>() {", "-      public Process value() {", "-        try { return runJavaProcess(TaskProcess.class.getName()); }", "-        catch (IOException e) { throw new WrappedException(e); }", "-      }", "-    }));", "-    if (start) { controller.start(); }", "-    return controller;"]}], "num": 31073}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d244d6abd9be6d78f716061e93ebd2b7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53911022bee222a1600436f6320118f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "8b24a954c4ca31d0bfd4e6cf29968bdfd85074dd", "commitAfterChange": "7a16360ed3db92a5068288b3b626cc549d236342", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(int pos, char[] delims, boolean skipParenPhrases)     throws BadLocationException", "diff": ["-    for (i = pos-1; i != DOCSTART-1; i--) {", "+    for (i = pos-1; i >= DOCSTART; i--) {", "-          if((state.equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-             (state.equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "-             (state.equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "-             (state.equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "-               // Ignore matching char", "-             } else {", "-               // Found a matching char, check if we should ignore it", "-               if (skipParenPhrases && posInParenPhrase(i)) {", "-                 // In a paren phrase, so ignore", "-               }", "-               else {", "-                 // Return position of matching char", "-                 _reduced.move(origLocation - i);", "-                 return i;", "-               }", "-             }", "+          if (!state.equals(ReducedModelState.FREE)", "+                || _isStartOfComment(text, i)", "+                || ((i > 0) && _isStartOfComment(text, i - 1))) {", "+            // Ignore matching char", "+          } else {", "+            // Found a matching char, check if we should ignore it", "+            if (skipParenPhrases && posInParenPhrase(i)) {", "+              // In a paren phrase, so ignore", "+            }", "+            else {", "+              // Return position of matching char", "+              _reduced.move(origLocation - i);", "+              return i;", "+            }", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db4e7be2a75762d093351db8ee5588eb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "2fb658b48f226ac294dbfa5245389f7e3e0f2a45", "commitAfterChange": "3be5538aa61c0f185dfcafebfa9cbad2c0b1e6d6", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public int findPrevDelimiter(int pos, char[] delims)", "signatureAfterChange": "   public int findPrevDelimiter(int pos, char[] delims) throws BadLocationException", "diff": ["-  public int findPrevDelimiter(int pos, char[] delims) {", "-    // Not implemented...", "-    return 0;", "+  public int findPrevDelimiter(int pos, char[] delims) throws BadLocationException {", "+    ", "+    int j, i;", "+    char c;", "+    String text = getText(DOCSTART, pos);", "+", "+    // Move reduced model to location pos", "+    _reduced.move(pos - _currentLocation);", "+", "+    // Walk backwards from specificed position", "+    for (i = pos-1; i != DOCSTART-1; i--) {", "+      c = text.charAt(i);", "+      // Check if character is one of the delimiters", "+      for (j = 0; j < delims.length; j++) {", "+\tif (c == delims[j]) {", "+\t  // Move reduced model to walker's location", "+\t  _reduced.move(i - pos);", "+\t  // Check if matching char is in comment or quotes", "+\t  if((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+\t     (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT)) ||", "+\t     (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_SINGLE_QUOTE)) ||", "+\t     (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_DOUBLE_QUOTE))) {", "+\t    // Ignore matching char", "+\t  } else {", "+\t    // Return position of matching char", "+\t    _reduced.move(_currentLocation - i);", "+\t    return i;", "+\t  }", "+\t  _reduced.move(pos - i);", "+\t}", "+      }", "+    }", "+    _reduced.move(_currentLocation - pos);", "+    return ERROR_INDEX;"]}], "num": 21355}
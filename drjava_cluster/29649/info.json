{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc58c0c29b60bfdab45d621d385a1502", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4579778050c78225476643bb79429518", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/text/SwingDocumentTest.java", "commitBeforeChange": "2c34025e391dacdd1583e970162f80f851d08a1d", "commitAfterChange": "cfcaff0f9d58c64a1efe5903c22285891a763f19", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testEditCondition() throws EditDocumentException, BadLocationException", "signatureAfterChange": "   public void testEditCondition() throws EditDocumentException, BadLocationException", "diff": ["-   */", "+  /** Tests that a SwingDocument can receive an object that determines whether certain edits are legal. */", "-      public boolean canInsertText(int offs) {", "-        return (offs > 5);", "-      }", "-      public boolean canRemoveText(int offs) {", "-        return (offs == 1);", "-      }", "+      public boolean canInsertText(int offs) { return (offs > 5); }", "+      public boolean canRemoveText(int offs) { return (offs == 1); }", "-    assertEquals(\"first doc contents\", \"initial\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"first doc contents\", \"initial\", _doc.getDocText(0, _doc.getLength()));", "-    assertEquals(\"insertText should be rejected\", \"initial\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"insertText should be rejected\", \"initial\", _doc.getText());", "-    assertEquals(\"insertString should be rejected\", \"initial\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"insertString should be rejected\", \"initial\", _doc.getText());", "-    assertEquals(\"insertText should be accepted\", \"initia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"insertText should be accepted\", \"initia2l\", _doc.getText());", "-    assertEquals(\"forceInsertText should be accepted\", \"in3itia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"forceInsertText should be accepted\", \"in3itia2l\", _doc.getText());", "-    assertEquals(\"removeText should be rejected\", \"in3itia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"removeText should be rejected\", \"in3itia2l\", _doc.getText());", "-    assertEquals(\"remove should be rejected\", \"in3itia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"remove should be rejected\", \"in3itia2l\", _doc.getText());", "-    assertEquals(\"removeText should be accepted\", \"iitia2l\",", "-                 _doc.getDocText(0, _doc.getLength()));", "+    assertEquals(\"removeText should be accepted\", \"iitia2l\", _doc.getText());", "-    assertEquals(\"forceRemove should be accepted\", \"iitia2\",", "-                 _doc.getDocText(0, _doc.getLength()));", "-    ", "+    assertEquals(\"forceRemove should be accepted\", \"iitia2\", _doc.getText());", "+    _doc.append(\"THE END\", (String) null);", "+    assertEquals(\"forceRemove should be accepted\", \"iitia2THE END\", _doc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "915288f3b65fc794e9ece7b75c3a8946", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/LogTest.java", "commitBeforeChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "commitAfterChange": "58507a81b298eda1c95791a37194e9f75288a8af", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "   public void testConcurrentWrites() throws IOException, InterruptedException", "signatureAfterChange": "   public void testConcurrentWrites() throws IOException, InterruptedException", "diff": ["+    // File file3 = new File(\"logtest003.txt\");", "+", "+    Date earlier = new Date();", "+", "-    Date earlier = new Date(new Date().getTime() - SHORT_TIME);", "-    assertTrue(\"Log opened within last 10 seconds\", time0.compareTo(earlier) >= 0 && time0.compareTo(now) <= 0);", "-    String log3OpenMsg = \"Log '\" + file3.getName() + \"' opened\";", "-    int offset = dateEnd(s0);", "-    assertEquals(\"Log open message\", log3OpenMsg, s0.substring(offset, offset + log3OpenMsg.length()));", "+    //ltl.log(\"earlier = \"+earlier);", "+    //ltl.log(\"now     = \"+now);", "+    //ltl.log(\"time0   = \"+time0);", "+    assertTrue(\"Log not opened after 'earlier' and before 'now'\", withinASecond(earlier, time0, now));", "+", "+    String log3OpenMsg = \"Log '\" + file3.getName() + \"' opened: \";", "+    assertEquals(\"Incorrect log open message\", log3OpenMsg , getStringAfterDate(s0).substring(0, log3OpenMsg.length()));", "-      assertTrue(\"Date of message within last 10 seconds\", time1.compareTo(earlier) >= 0 && time1.compareTo(now) <= 0);", "-      assertEquals(\"Log message\", \"Test message\", s1.substring(dateEnd(s1)));", "+      assertTrue(\"Date of message not after 'earlier' and before 'now'\", withinASecond(earlier, time1, now));", "+      assertTrue(\"Date of message not after 'previous time' and before 'now'\", withinASecond(time0, time1, now));", "+      assertEquals(\"Log message\", \"Test message\", getStringAfterDate(s1));", "+      time0 = time1;"]}], "num": 29649}
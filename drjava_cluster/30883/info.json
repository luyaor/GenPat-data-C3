{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95b42a8bd98174cc7d413006ceff3231", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e2acd8d36d212e93955a517854c4d06", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "601a464d68d9614b980a0acf64c3c8928b17445c", "commitAfterChange": "b35a353aefac369485a6c43b1b1d62dab2d5057c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private static void addIfDir(File f, Set<? super File> set)", "signatureAfterChange": "   private static void addIfDir(File f, CompoundJDKDescriptor c, Map<? super File, Set<CompoundJDKDescriptor>> map)", "diff": ["-  private static void addIfDir(File f, Set<? super File> set) {", "+  private static void addIfDir(File f, CompoundJDKDescriptor c, Map<? super File, Set<CompoundJDKDescriptor>> map) {", "-    if (IOUtil.attemptIsDirectory(f)) { set.add(f); JDKToolsLibrary.msg(\"Dir added:     \"+f); }", "+    if (IOUtil.attemptIsDirectory(f)) {", "+      Set<CompoundJDKDescriptor> set = map.get(f);", "+      if (set==null) {", "+        set = new LinkedHashSet<CompoundJDKDescriptor>();", "+        map.put(f, set);", "+      }", "+      set.add(c);", "+      JDKToolsLibrary.msg(\"Dir added:     \"+f);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9423fb4d3394b62f3f482b72b3e8b22f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "14b45aa3b3e4e065019fffca22e1561b9b0d2698", "commitAfterChange": "8e9c94b2b0f764af306682c5d62d4c11ac6175a8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors)", "signatureAfterChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors,                                                            Iterable<File> classPath, Iterable<File> bootClassPath)", "diff": ["-  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors) {", "-    // TODO: The classpath (and sourcepath, bootclasspath) should be an argument passed to Language Levels.", "-    LanguageLevelConverter llc = new LanguageLevelConverter(getActiveCompiler().version());", "+  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<CompilerError> errors,", "+                                                           Iterable<File> classPath, Iterable<File> bootClassPath) {", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Options llOpts;", "+    if (bootClassPath == null) { llOpts = new Options(getActiveCompiler().version(), classPath); }", "+    else { llOpts = new Options(getActiveCompiler().version(), classPath, bootClassPath); }", "-      llc.convert(files.toArray(new File[0]));", "+      llc.convert(files.toArray(new File[0]), llOpts);"]}], "num": 30883}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdd6aeab29ba2390264537e8c1d9ae92", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49a9e3652f3834235506ccb4516b30d2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "e1cae1f7b6aae460aab41e86b032251abb119211", "commitAfterChange": "d1929cdbc61164d9dd0af29defc1992f3c759cb6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "signatureAfterChange": "   @SuppressWarnings(\"unchecked\")   public void removeRegions(final OpenDefinitionsDocument doc)", "diff": ["-//    System.err.println(\"Removing ODD \" + doc + \" in \" + this);", "+//    System.err.println(\"Removing regions from ODD \" + doc + \" in \" + this);", "+//    System.err.println(\"_documents = \" + _documents);", "+//    System.err.println(\"ODD \" + doc + \" exists in \" + this);", "-//      System.err.println(\"Removing document regions for \" + doc + \" in \" + this);", "-      // The following ugly line of code is dictated by the \"fail fast\" semantics of Java iterators", "-      while (! regions.isEmpty()) regions.remove(regions.first());", "+//      System.err.println(\"Before removal, regions = \" + regions);", "+      // The following ugly loop is dictated by the \"fail fast\" semantics of Java iterators", "+      while (! regions.isEmpty()) {", "+        R r = regions.first();", "+        regions.remove(r);  ", "+        _notifyRegionRemoved(r);", "+      }", "+//      System.err.println(\"After removal, regions = \" + regions);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8cae5d388c2c4fa05170c0cef4333f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/Data.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public SymbolData getInnerClassOrInterface(String relName)", "signatureAfterChange": "   public SymbolData getInnerClassOrInterface(String relName)", "diff": ["-//    if (relName.endsWith(\"Rod\")) System.err.println(\"getInnerClass('\" + relName + \"') called on '\" + this + \"'\");", "+//    if (relName.equals(\"MyInner\")) System.err.println(\"getInnerClass('\" + relName + \"') called on '\" + this + \"'\");", "-    if (relName.endsWith(\"Rod\")) {", "+    if (relName.equals(\"MyInner\")) {", "+//      System.err.println(\"Result is: '\" + result + \"'\");", "-      if (TypeChecker.checkAccessibility(outerPiece.getMav(), outerPiece, getSymbolData())) return result;", "+      if (TypeChecker.checkAccess(outerPiece.getMav(), outerPiece, getSymbolData())) return result;", "-    // Call this method recursively on the outer data", "-    // anything our outer class can see we can see, so there is no reason to check accessibility here", "+    // Call this method recursively on the outer data; anything our outer class can see we can see, so there is no ", "+    // eason to check accessibility here", "+//      if (relName.equals(\"MyInner\")) System.err.println(\"outerResult = \" + result);"]}], "num": 24656}
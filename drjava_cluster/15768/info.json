{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "191299b333a93be479c2bf98dfdcd1e8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d572174c64c53accd514e6c7bdc3e27", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/DrJava.java", "commitBeforeChange": "aff4ca7a048d3be1e2f863c90bf8f2bfe09306fd", "commitAfterChange": "7636e2659b4b69c586b657836319e825c9bf35fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public static void main(final String[] args)", "signatureAfterChange": "   public static void main(final String[] args)", "diff": ["-  public static void main(final String[] args) {", "-    // Platform-specific UI setup.", "-    PlatformFactory.ONLY.beforeUISetup();", "-    ", "+  public static void main(final String[] args) {    ", "+      // Platform-specific UI setup.", "+      PlatformFactory.ONLY.beforeUISetup();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "112162d148b0e9ff8829ca1f9d56ed71", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "   public void resetModification()", "signatureAfterChange": "   public void resetModification()", "diff": ["-    // throwErrorHuh();", "+    writeLock();", "-      writeLock();", "-    finally {", "-      writeUnlock();", "-    }", "+    finally { writeUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8a8f317ff00a53ed0d11bae33646b0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public IndentInfo getIndentInformation()", "signatureAfterChange": "   public IndentInfo getIndentInformation()", "diff": ["-    try { synchronized(_reduced) { info = _reduced.getIndentInformation(); } }", "+    try { ", "+      synchronized(_reduced) { info = _reduced.getIndentInformation(); } ", "+      _storeInCache(key, info);", "+    }", "-    _storeInCache(key, info);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272bce985b1ae27278f548aec2701ad4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "   public boolean posInParenPhrase(int pos)", "signatureAfterChange": "   public boolean posInParenPhrase(int pos)", "diff": ["+      _storeInCache(key, Boolean.valueOf(inParenPhrase));", "-    _storeInCache(key, Boolean.valueOf(inParenPhrase));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d7149a602a6ed3e62f93d86b1b444c6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ClassMemberChecker.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 26, "signatureBeforeChange": "          @Override public Void visit(FieldDeclaration node)", "signatureAfterChange": "          @Override public Void visit(FieldDeclaration node)", "diff": ["-      Type expectedT = getType(node.getType());", "+        Type expectedT = getType(node.getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fded8722cdd9c563088ffbb126a20e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 326, "methodNumberAfterChange": 326, "signatureBeforeChange": "   private void _removeThreadLocationHighlight()", "signatureAfterChange": "   private void _removeThreadLocationHighlight()", "diff": ["-   */", "+  /** Removes the current highlight. */", "+      _currentThreadLocationHighlight = null;", "-    _currentThreadLocationHighlight = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48aca331a99e422652dc9a90f064e252", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e193e4674aaab3350b36cbc521ecf3bf9c098bc6", "commitAfterChange": "6c31f49b491d4a01bd2ddbae62b5ee4f76d52129", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void resetModification()", "signatureAfterChange": "   public void resetModification()", "diff": ["-    }", "-    finally { ", "-      releaseWriteLock(); ", "+    finally { releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63455e571262353f553f8bb194aedd12", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "4276346051c6ab89c146c0041be28826e7dfbe12", "commitAfterChange": "86bed99990f6eb7fff2cb31d595e17b49135df26", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "   public boolean closeFileWithoutPrompt(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public boolean closeFileWithoutPrompt(OpenDefinitionsDocument doc)", "diff": ["+//    new Exception(\"Closed document \" + doc).printStackTrace();", "-    closedDoc.close();", "+//    closedDoc.close();", "-      //        closedDoc.close();", "+      closedDoc.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6404b86e03b74c6b6606516a6a119877", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "92fd06b34796984853343dde64251cfdd2a0ce25", "commitAfterChange": "ad91ad9028e35ded2c6aef6b30e8459151ecae7c", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": "   public boolean posInParenPhrase()", "signatureAfterChange": "   public boolean posInParenPhrase()", "diff": ["-   */", "+    */", "-    try { synchronized(_reduced) { info = _reduced.getIndentInformation(); } }", "+    try { ", "+      synchronized(_reduced) { ", "+        info = _reduced.getIndentInformation(); ", "+        return info.braceTypeCurrent.equals(IndentInfo.openParen);", "+      } ", "+    }", "-    return info.braceTypeCurrent.equals(IndentInfo.openParen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a511b7df16d9854555d4312de561e23", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "7f6caafd37c000cec49c11321ed7ed1199924a0b", "commitAfterChange": "0787c5a60ead2e103c407edef701b14419a9fc57", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "   public void updateFileTitle()", "signatureAfterChange": "   public void updateFileTitle()", "diff": ["-      _fileNameField.setText(_model.getDisplayFullPath(doc));", "+    // Always update this field-- two files in different directories", "+    //  can have the same _fileTitle", "+    _fileNameField.setText(_model.getDisplayFullPath(doc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b022e790ebbc97043d667d8c7ea9af3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/cache/DocumentCache.java", "commitBeforeChange": "25d973a9f45bdba84ad4514eba518ee94f041daf", "commitAfterChange": "fa5a46f3cc65ec85b9fa37599dc6542e75cee25e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void setCacheSize(int size)", "signatureAfterChange": "   public void setCacheSize(int size)", "diff": ["-    synchronized(_cacheLock) {   // lock the cache so entries can be reomoved if necessary", "+    synchronized(_cacheLock) {    // lock the cache so entries can be removed if necessary", "+      if (dist > 0) kickOut(removed);", "-    if (dist > 0) kickOut(removed);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76a6a3a8bf3e2be22b0f482ea0b6c84e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "5497ac60fa563e6e67c580081d99fbd842e52332", "commitAfterChange": "5fa866685226be5aebbebdfba9d7d34d29108e50", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException", "diff": ["-    try { text = getText(0, pos); }", "-    finally { readUnlock(); }", "-    ", "-    synchronized(_reduced) {", "+    try { ", "+      text = getText(0, pos); ", "-      final int origLocation = _currentLocation;", "-      // Move reduced model to location pos", "-      _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "-      ", "-      // Walk backward from specified position", "-      ", "-      while (i >= 0) { ", "-        /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "-         * text[i+1:pos-1] contains invalid chars */", "+      synchronized(_reduced) {", "-        if (match(text.charAt(i), whitespace)) {", "-          // ith char is whitespace", "-          i--;", "-          continue;", "+        final int origLocation = _currentLocation;", "+        // Move reduced model to location pos", "+        _reduced.move(pos - origLocation);  // reduced model points to pos == reducedPos", "+        ", "+        // Walk backward from specified position", "+        ", "+        while (i >= 0) { ", "+          /* Invariant: reduced model points to reducedPos, i < reducedPos <= pos, ", "+           * text[i+1:pos-1] contains invalid chars */", "+          ", "+          if (match(text.charAt(i), whitespace)) {", "+            // ith char is whitespace", "+            i--;", "+            continue;", "+          }", "+          ", "+          // Found a non-whitespace char;  move reduced model to location i", "+          _reduced.move(i - reducedPos);", "+          reducedPos = i;                  // reduced model points to i == reducedPos", "+          ", "+          // Check if matching char is within a comment (not including opening two characters)", "+          if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "+              (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "+            i--;", "+            continue;", "+          }", "+          ", "+          if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "+            // Move i past the first comment character and continue searching", "+            i = i - 2;", "+            continue;", "+          }", "+          ", "+          // Found valid previous character", "+          break;", "-        // Found a non-whitespace char;  move reduced model to location i", "-        _reduced.move(i - reducedPos);", "-        reducedPos = i;                  // reduced model points to i == reducedPos", "-        ", "-        // Check if matching char is within a comment (not including opening two characters)", "-        if ((_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_LINE_COMMENT)) ||", "-            (_reduced.getStateAtCurrent().equals(ReducedModelState.INSIDE_BLOCK_COMMENT))) {", "-          i--;", "-          continue;", "-        }", "-        ", "-        if (_isEndOfComment(text, i)) { /* char is second character is opening comment market */  ", "-          // Move i past the first comment character and continue searching", "-          i = i - 2;", "-          continue;", "-        }", "-        ", "-        // Found valid previous character", "-        break;", "+        /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "+        _reduced.move(origLocation - reducedPos);", "-      ", "-      /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */", "-      _reduced.move(origLocation - reducedPos);", "-    ", "+    finally { readUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ef469b5e2139e692cfff41f333140f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "dc96b8e17de1b9fbcfb0683311d7e482b6fcfcf3", "commitAfterChange": "270c6e5f741c371e9536c93af7f5525dbf67eeee", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public DJField checkEnumSwitchCase(Expression exp, Type enumT)", "signatureAfterChange": "   public DJField checkEnumSwitchCase(Expression exp, Type enumT)", "diff": ["+    setTranslation(exp, translation);", "-      setTranslation(exp, translation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942ac4db82b5d928bfec39e198613053", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a8db062e8dfd667df6324c059f7a6725afc99a1b", "commitAfterChange": "35da9b77b7d75aca3d6277e27e3ba3dc86f3eaa9", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["-      setCurrentLocation(_offset);", "-      ", "-      // (don't move the cursor... I hope this doesn't break too much)", "-      synchronized (_reduced){", "-        _reduced.delete(_length);", "-      }", "+      synchronized (_reduced) { ", "+         setCurrentLocation(_offset);", "+         _reduced.delete(_length); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a22dd28c6134193e6e4b586574bb288e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "d1a5d27cb22a5cf8891a6811cdc476b60834d1c0", "commitAfterChange": "eb9337b4d6e2d2de4c1774413f08dfb947ae389c", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 115, "signatureBeforeChange": "     public Icon getIcon(OpenDefinitionsDocument odd)", "signatureAfterChange": "     public Icon getIcon(OpenDefinitionsDocument odd)", "diff": ["-      catch (IllegalStateException ise) { }", "-      catch (FileMovedException fme) { }", "+      catch(IllegalStateException ise) { /* do nothing */ }", "+      catch(FileMovedException fme) { /* do nothing */ }", "-      if (odd.isModifiedSinceSave())", "-        return makeLayeredIcon(_default.getIcon(f), _star);", "-      else ", "-        return _default.getIcon(f);", "+      if (odd.isModifiedSinceSave()) return makeLayeredIcon(_default.getIcon(f), _star);", "+      return _default.getIcon(f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2379f6c51af5d2bbb21057082f455ab", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerError.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public String fileName()", "signatureAfterChange": "   public String fileName()", "diff": ["-    else return _file.getAbsolutePath();", "+    return _file.getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5aaee73ad10b0811290507ac8ce163d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "51eb81adbb9a6967e1d5616b976e8363540afc02", "commitAfterChange": "0912ab7ed35ec7cfa4a9c45641294748135ef6a8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["-        _reduced.delete(_length); ", "+        _reduced.delete(_length);    ", "+        _styleChanged();", "-      _styleChanged();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac33afd60663c85854698356d981cc62", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public boolean isModifiedSinceSave()", "signatureAfterChange": "   public boolean isModifiedSinceSave()", "diff": ["-    // throwErrorHuh();", "-    try {", "-      readLock();", "-      return  _modifiedSinceSave;", "-    }", "-    finally {", "-      readUnlock();", "-    }", "+    readLock();", "+    try { return  _modifiedSinceSave; }", "+    finally { readUnlock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd50c1e5b27246c17429c4c1cc486401", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "f6810ad68cbb0aaa0d9f5ff0052437da87098ab7", "commitAfterChange": "194b54409492ca1653c254a0d1e255c4fc49ec7f", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "signatureAfterChange": "   public String getIndentOfCurrStmt(int pos, char[] delims, char[] whitespace) throws BadLocationException", "diff": ["+        _storeInCache(key, lineText);", "-    _storeInCache(key, lineText);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c357d2f25d814a678077ba9b2a493089", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/ConcreteRegionManager.java", "commitBeforeChange": "1e77c64ba83c36855cc971f17dd702002ed1f841", "commitAfterChange": "7f1dfe0049dc6481ecb6545fa089b139bb9c72af", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "   public void updateLines(R firstRegion, R lastRegion)", "signatureAfterChange": "   public void updateLines(R firstRegion, R lastRegion)", "diff": ["-/* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();", "+    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();", "-    /* Get the tailSet consisting of the ordered set of regions >= r. */", "+    /* Get the tailSet consisting of the ordered set of regions >= firstRegion. */", "-    if (tail.size() == 0) return;", "+    if (tail.size() == 0) return; // tail can be empty if firstRegion is a constructed DocumentRegion", "-    // tail can be empty if r is a constructed DocumentRegion", "+      region.update();  // The bounds of this region must be recomputed.", "-      else region.update();  // The bounds of this region must be recomputed.", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f163d96890be781f4750111ed7cb49", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e8f48651b4fb31b2a1907635fbd654b3f66a98b2", "commitAfterChange": "2499b0018a7f137bb1baaaf2d077c26486e3f12e", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 137, "signatureBeforeChange": "      void openProject(FileOpenSelector projectSelector)", "signatureAfterChange": "      void openProject(FileOpenSelector projectSelector)", "diff": ["-    if(_model.isProjectActive())    ", "-      _closeProject();    ", "+      if(_model.isProjectActive())    ", "+        _closeProject();    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf5a5ffad26a53a6f7cb3ca09faf296f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "79028593ea08c49f14b66ae517ba5368aaa96fce", "commitAfterChange": "a8bdfee12d75aa9a066652d8f975838df6021bb2", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["-          _model.setActiveDocument(startDoc);", "-    finally { _frame.hourglassOff(); }", "+    finally { ", "+      _frame.hourglassOff(); ", "+      ", "+      // extracted from run() above because findAll occasionally left active document in inconsistent state ", "+      _model.setActiveDocument(startDoc);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1b16008939623de6a9bd9e527621e05", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "51eb81adbb9a6967e1d5616b976e8363540afc02", "commitAfterChange": "0912ab7ed35ec7cfa4a9c45641294748135ef6a8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "          public void run()", "signatureAfterChange": "          public void run()", "diff": ["+        _styleChanged();", "-      _styleChanged();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e74b3f70536fb54ac0259209c25ca6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "d57a4715eeda5394b496008be220f6252b47b950", "commitAfterChange": "ac02f569f5916c295bec9f11458dcf6db5964244", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-      _model.addToBrowserHistory();", "+//      _model.addToBrowserHistory();", "-//            _model.addToBrowserHistory();", "+            _model.addToBrowserHistory();"]}], "num": 15768}
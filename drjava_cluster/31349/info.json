{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec31eb70badbcf652545eb4304c67a67", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0146734045fa0c4c16cd1e1c2fed8ff2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JarOptionsDialog.java", "commitBeforeChange": "297435705dbd8bf9d631995d57ce87c743b50405", "commitAfterChange": "1baaca56848b77e4ea889da1ec6855791456c263", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   private void _ok()", "signatureAfterChange": "   private void _ok()", "diff": ["+      HashSet<String> _exceptions = new HashSet<String>();", "-            if(files[i].isDirectory()){", "-              jarFile.addDirectoryRecursive(files[i], files[i].getName(), allFilter);", "-            }else{", "-              jarFile.addFile(files[i], \"\", files[i].getName());", "+            try {", "+              if(files[i].isDirectory()){", "+                LOG.log(\"jarFile.addDirectoryRecursive(\"+files[i]+\")\");", "+                jarFile.addDirectoryRecursive(files[i], files[i].getName(), allFilter);", "+              }else{", "+                LOG.log(\"jarFile.addFile(\"+files[i]+\")\");", "+                jarFile.addFile(files[i], \"\", files[i].getName());", "+              }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "-            if (files[i].isDirectory()) {", "-              jarFile.addDirectoryRecursive(files[i], files[i].getName(), classFilter);", "+            try {", "+              if (files[i].isDirectory()) {", "+                LOG.log(\"jarFile.addDirectoryRecursive(\"+files[i]+\")\");", "+                jarFile.addDirectoryRecursive(files[i], files[i].getName(), classFilter);", "+              }", "+              else {", "+                LOG.log(\"jarFile.addFile(\"+files[i]+\")\");", "+                jarFile.addFile(files[i], \"\", files[i].getName());", "+              }", "-            else {", "-              jarFile.addFile(files[i], \"\", files[i].getName());", "-            }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "-            catch (IOException e) {", "-              e.printStackTrace();", "-              throw new UnexpectedException(e);", "-            }", "+            catch(IOException ioe) { _exceptions.add(ioe.getMessage()); }", "+            LOG.log(\"(_jarClasses.isSelected() && _jarSources.isSelected()) || _jarAll.isSelected()\");", "+              LOG.log(\"jarAll\");", "+              LOG.log(\"binRoot=\"+binRoot);", "+              LOG.log(\"root=\"+_model.getProjectRoot());", "+              LOG.log(\"FileOps.isAncestorOf(_model.getProjectRoot(),binRoot)=\"+FileOps.isAncestorOf(_model.getProjectRoot(),binRoot));", "+              LOG.log(\"mainJar=\"+mainJar);", "+              LOG.log(\"jarOut=\"+jarOut);", "-              if(!(binRoot.equals(_model.getProjectRoot())))", "+              if(!_model.getProjectRoot().equals(binRoot))", "+                LOG.log(\"jarBuildDirectory\");", "-          e.printStackTrace();", "-          ", "+          // e.printStackTrace();", "-          if (_jarClasses.isSelected() && _makeExecutable.isSelected()) {", "+          if (_exceptions.size()>0) {", "+            ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+              .setOwner(JarOptionsDialog.this)", "+              .setTitle(\"Problems Creating Jar\")", "+              .setText(\"There were problems creating this jar file, but DrJava was probably able to recover.\")", "+              .setItems(new ArrayList<String>(_exceptions))", "+              .setMessageType(JOptionPane.ERROR_MESSAGE)", "+              .build();", "+            ", "+            Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+            dialog.showDialog();", "+          }", "+          if ((_jarAll.isSelected() || _jarClasses.isSelected()) && _makeExecutable.isSelected()) {", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this, \"An error occured while creating the jar file. This could be because the file that you are writing to or the file you are reading from could not be opened.\", \"Error: File Access\", JOptionPane.ERROR_MESSAGE);", "-            JarOptionsDialog.this.setVisible(false);", "-          }else{", "-            JOptionPane.showMessageDialog(JarOptionsDialog.this, \"The supplied manifest does not conform to the 1.0 Manifest format specification.\", \"Error: Malformed Manifest\", JOptionPane.ERROR_MESSAGE);", "+            if (_exceptions.size()>0) {", "+              ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+                .setOwner(JarOptionsDialog.this)", "+                .setTitle(\"Error Creating Jar\")", "+                .setText(\"<html>An error occured while creating the jar file. This could be because the file<br>\"+", "+                         \"that you are writing to or the file you are reading from could not be opened.</html>\")", "+                .setItems(new ArrayList<String>(_exceptions))", "+                .setMessageType(JOptionPane.ERROR_MESSAGE)", "+                .build();", "+              ", "+              Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+              dialog.showDialog();", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(JarOptionsDialog.this, ", "+                                            \"An error occured while creating the jar file. This could be because the file that you \"+", "+                                            \"are writing to or the file you are reading from could not be opened.\", ", "+                                            \"Error Creating Jar\",", "+                                            JOptionPane.ERROR_MESSAGE);", "+            }", "-          ", "+          else {", "+            if (_exceptions.size()>0) {", "+              ScrollableListDialog<String> dialog = new ScrollableListDialog.Builder<String>()", "+                .setOwner(JarOptionsDialog.this)", "+                .setTitle(\"Error Creating Jar\")", "+                .setText(\"The supplied manifest does not conform to the 1.0 Manifest format specification\")", "+                .setItems(new ArrayList<String>(_exceptions))", "+                .setMessageType(JOptionPane.ERROR_MESSAGE)", "+                .build();", "+              ", "+              Utilities.setPopupLoc(dialog, JarOptionsDialog.this);", "+              dialog.showDialog();", "+            }", "+            else {", "+              JOptionPane.showMessageDialog(JarOptionsDialog.this, \"The supplied manifest does not conform to the 1.0 Manifest format specification.\",", "+                                            \"Error Creating Jar\",", "+                                            JOptionPane.ERROR_MESSAGE);", "+            }", "+          }", "+          JarOptionsDialog.this.setVisible(false);  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261651cb1757a9f207eaad2971e8be22", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "3bb1b911d950f482b9e797d7de6104b1444684b7", "commitAfterChange": "045c3614cbae106e482ef86c608a22bd0f55ebc4", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "   private void _doStartup()", "signatureAfterChange": "   private void _doStartup()", "diff": ["-      boolean concJUnitLocationConfigured =", "-        DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+      // ConcJUnit is available if (a) the built-in framework is used, or (b) the external", "+      // framework is a valid ConcJUnit jar file.", "+      boolean concJUnitAvailable =", "+        !DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) ||", "-      if (DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED) && // enabled", "+      if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+            equals(OptionConstants.ConcJUnitCheckChoices.ALL) && // \"lucky\" enabled", "-        DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+        DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "+                                      OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-      if (concJUnitLocationConfigured && // ConcJUnit configured and enabled", "-          rtLocationConfigured && // \"lucky\" warnings configured", "-          DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED)) { // and enabled", "+      if (concJUnitAvailable && // ConcJUnit available", "+          rtLocationConfigured && // runtime configured", "+          DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+            equals(OptionConstants.ConcJUnitCheckChoices.ALL)) { // and \"lucky\" enabled", "-          DrJava.getConfig().setSetting(OptionConstants.RT_CONCJUNIT_LOCATION_ENABLED, false);", "+          DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,", "+                                        OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "-    invokeSlave(new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs));", "+    JVMBuilder jvmb = new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs);", "+    ", "+    // extend classpath if JUnit/ConcJUnit location specified", "+    File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);", "+    boolean junitLocationConfigured =", "+      (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(junitLocation) ||", "+       edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation));", "+    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) && // enabled", "+        !junitLocationConfigured && // not valid ", "+        (junitLocation != null) && // not null", "+        (!FileOps.NULL_FILE.equals(junitLocation)) && // not NULL_FILE", "+        (junitLocation.exists())) { // but exists", "+      // invalid file, clear setting", "+      DrJava.getConfig().setSetting(OptionConstants.JUNIT_LOCATION_ENABLED, false);", "+      junitLocationConfigured = false;", "+    }", "+    ArrayList<File> extendedClassPath = new ArrayList<File>();", "+    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&", "+        junitLocationConfigured) {", "+      extendedClassPath.add(junitLocation);", "+    }", "+    for(File f: jvmb.classPath()) { extendedClassPath.add(f); }", "+    jvmb = jvmb.classPath(edu.rice.cs.plt.iter.IterUtil.asSizedIterable(extendedClassPath));", "+    ", "+    // add Java properties controlling ConcJUnit", "+    java.util.Properties props = jvmb.propertiesCopy();", "+    ", "+    // settings are mutually exclusive", "+    boolean all = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.ALL);", "+    boolean noLucky = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);", "+    boolean onlyThreads = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.ONLY_THREADS);", "+    boolean none = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).", "+      equals(OptionConstants.ConcJUnitCheckChoices.NONE);", "+    // \"threads\" is enabled as long as the setting isn't NONE", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.threads.enabled\",", "+                      new Boolean(!none).toString());", "+    // \"join\" is enabled for ALL and NO_LUCKY", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.join.enabled\",", "+                      new Boolean(all || noLucky).toString());", "+    // \"lucky\" is enabled only for ALL", "+    props.setProperty(\"edu.rice.cs.cunit.concJUnit.check.lucky.enabled\",", "+                      new Boolean(all).toString());", "+    ", "+    jvmb = jvmb.properties(props);", "+    ", "+    invokeSlave(jvmb);"]}], "num": 31349}
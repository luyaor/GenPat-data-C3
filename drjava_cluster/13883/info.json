{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14b866dcf402ebf3977679f326e6bb5b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1afb00887fe902b80d6ba5fa16cc6980", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "4cf68dc70458288095c944d37276893b11daf353", "commitAfterChange": "c22ae4a2b42306ce89775aaf2a5b300676337b0d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   private void remove(Node<T> point)", "signatureAfterChange": "   private void remove(Node<T> point)", "diff": ["-  /** Remove a node from the list. Can't remove head or tail node - exception thrown. */", "+  /** Remove a node from the list.  Assumes point is not head or tail. */", "-    if ((point == _head) || (point == _tail)) throw new RuntimeException(\"Can't remove sentinel node.\");", "-    else {", "-      Node<T> before = point.pred;", "-      Node<T> after = point.succ;", "-      after.pred = before;", "-      before.succ = after;", "-      _length--;", "-    }", "-  }", "+    assert point != _head && point != _tail;", "+    point.remove();", "+    _length--;", "+  } "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb655fa88ad7bdd5b1414280731c8c96", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/reducedmodel/ModelList.java", "commitBeforeChange": "4cf68dc70458288095c944d37276893b11daf353", "commitAfterChange": "c22ae4a2b42306ce89775aaf2a5b300676337b0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private void insert(Node<T> point, T item)", "signatureAfterChange": "   private Node<T> insert(Node<T> point, T item)", "diff": ["-  /** Insert an item before a certain node in the list.  Can never be called on head node. */", "-  private void insert(Node<T> point, T item) {", "-    Node<T> before = point.pred;", "-    Node<T> newNode = new Node<T>(item, before, point);", "-    before.succ = newNode;", "-    point.pred = newNode;", "+  /** Insert a node immediately before the specified point. Returns the inserted node. Assumes point is not head. */", "+  private Node<T> insert(Node<T> point, T item) {", "+    assert point != _head;", "+    Node<T> newNode = point.insert(item);", "+    return newNode;"]}], "num": 13883}
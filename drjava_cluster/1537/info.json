{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad4d8e9659acc717481d0ddf21c574cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1904a5323e44377b25ba18ab6e88f124", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "   public Type visit(ConditionalExpression node)", "signatureAfterChange": "   public Class<?> visit(ConditionalExpression node)", "diff": ["-  public Type visit(ConditionalExpression node) {", "+  public Class<?> visit(ConditionalExpression node) {", "-    Type type = condExp.acceptVisitor(this);", "+    Class<?> type = condExp.acceptVisitor(this);", "-    ", "+", "-    ", "+", "-    Type c1A = exp1.acceptVisitor(this);", "-    Type c2B = exp2.acceptVisitor(this);", "-    Type ec = null;", "-    ", "-    Class<?> c1 = (Class<?>)c1A;", "-    Class<?> c2 = (Class<?>)c2B;", "-    ", "+    Class<?> c1 = exp1.acceptVisitor(this);", "+    Class<?> c2 = exp2.acceptVisitor(this);", "+    Class<?> ec = null;", "+", "-             exp2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "+               exp2.hasProperty(NodeProperties.VALUE) && c2 == int.class) {", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61e5457ab7375c303d6f645fefd6c8e7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "   private Type visitShiftExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitShiftExpression(BinaryExpression node)", "diff": ["-  private Type visitShiftExpression(BinaryExpression node) {", "+  private Class<?> visitShiftExpression(BinaryExpression node) {", "-    Type lc1 = leftExp.acceptVisitor(this);", "-    Type rc1 = rightExp.acceptVisitor(this);", "-    Type c  = null;", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "-    ", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);", "+    Class<?> c  = null;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b29e97c43a9cd5bf893399fa1178021b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "   protected Type visitNumericExpression(BinaryExpression node, String s)", "signatureAfterChange": "   protected Class<?> visitNumericExpression(BinaryExpression node, String s)", "diff": ["-  protected Type visitNumericExpression(BinaryExpression node, String s) {", "+  protected Class<?> visitNumericExpression(BinaryExpression node, String s) {", "-    Type lc1 = NodeProperties.getType(leftExp);", "-    Type rc1 = NodeProperties.getType(rightExp);", "-    Type c  = null;", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "-    ", "+    Class<?> lc = NodeProperties.getType(leftExp);", "+    Class<?> rc = NodeProperties.getType(rightExp);", "+    Class<?> c  = null;", "+", "-    ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe67624824982837ad9235818541208c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/AbstractTypeChecker.java", "commitBeforeChange": "579a4d89882b0dda3dd1f44a56fcd202a72dea14", "commitAfterChange": "80dfa692738d1f0b8b460106cde974eaa592d50b", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "   private Type visitBitwiseExpression(BinaryExpression node)", "signatureAfterChange": "   private Class<?> visitBitwiseExpression(BinaryExpression node)", "diff": ["-  private Type visitBitwiseExpression(BinaryExpression node) {", "+  private Class<?> visitBitwiseExpression(BinaryExpression node) {", "-    Type lc1 = leftExp.acceptVisitor(this);", "-    Type rc1 = rightExp.acceptVisitor(this);", "-    Type c = null;", "-    Class<?> lc = (Class<?>)lc1;", "-    Class<?> rc = (Class<?>)rc1;", "+    Class<?> lc = leftExp.acceptVisitor(this);", "+    Class<?> rc = rightExp.acceptVisitor(this);", "+    Class<?> c = null;"]}], "num": 1537}
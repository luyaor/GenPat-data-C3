{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3487c65ac763f97241b00cfb8eb3dc8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0184e371092bcd1f1aa02bdb4bf99cc0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "18f7005907576031115bfb0859e7ff6d53506e5e", "commitAfterChange": "70629f9e5e558e81031db46a0eeff962734da160", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 394, "signatureBeforeChange": "   private JMenu _setUpToolsMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpToolsMenu(int mask)", "diff": ["+    final JMenuItem execItem = extMenu.getItem(0);", "-//            for(int i=2; i<extMenu.getItemCount(); ++i) {", "-//              extMenu.remove(2);", "-//            }", "-//            for (int count=1; count<=oce.value; ++count) {", "-//              final int i = count;", "-//              final String name = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).get(i-1);", "-//              final int savedCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_COUNT);", "-//              final int namesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES).size();", "-//              final int typesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES).size();", "-//              final int cmdlinesCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES).size();", "-//              final int jvmargsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS).size();", "-//              final int workdirsCount = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS).size();", "-//              ", "-//              extMenu.insert(new AbstractAction(name) {", "-//                public void actionPerformed(ActionEvent ae) {", "-//                  if (type.equals(\"cmdline\")) {", "-//                    System.out.println(name+\": cmdline \"+cmdline+\" \"+workdir);", "-//                    // TODO", "-//                  }", "-//                  else if (type.equals(\"java\")) {", "-//                    System.out.println(name+\": java \"+jvmargs+\" \"+cmdline+\" \"+workdir);", "-//                    // TODO", "-//                  }", "-//                }", "-//              },1+i);", "-//            }", "-//            if (oce.value>0) { ", "-//              extMenu.addSeparator();", "-//              extMenu.add(_editExternalProcessesAction);", "-//            }", "+            extMenu.removeAll();", "+            extMenu.add(execItem);", "+            extMenu.addSeparator();", "+            for (int count=0; count<oce.value; ++count) {", "+              final int i = count;", "+              final Vector<String> names = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_NAMES);", "+              final Vector<String> types = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_TYPES);", "+              final Vector<String> cmdlines = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_CMDLINES);", "+              final Vector<String> jvmargs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_JVMARGS);", "+              final Vector<String> workdirs = DrJava.getConfig().getSetting(OptionConstants.EXTERNAL_SAVED_WORKDIRS);", "+              ", "+              extMenu.insert(new AbstractAction(names.get(i)) {", "+                public void actionPerformed(ActionEvent ae) {", "+                  if (types.get(i).equals(\"cmdline\")) {", "+                    // System.out.println(names.get(i)+\": cmdline \"+cmdlines.get(i)+\" \"+workdirs.get(i));", "+                    _executeExternalDialog.runCommand(names.get(i),cmdlines.get(i),workdirs.get(i));", "+                  }", "+                  else if (types.get(i).equals(\"java\")) {", "+                    // System.out.println(names.get(i)+\": java \"+jvmargs.get(i)+\" \"+cmdlines.get(i)+\" \"+workdirs.get(i));", "+                    _executeExternalDialog.runJava(names.get(i),jvmargs.get(i),cmdlines.get(i),workdirs.get(i));", "+                  }", "+                  else {", "+                    JOptionPane.showMessageDialog(MainFrame.this,", "+                                                  \"Unknown process type '\"+types.get(i)+\"'.\",", "+                                                  \"Invalid Command Line\",", "+                                                  JOptionPane.ERROR_MESSAGE);", "+                  }", "+                }", "+              },i+2);", "+            }", "+            if (oce.value>0) { ", "+              extMenu.addSeparator();", "+            }", "+            extMenu.add(_editExternalProcessesAction);", "+            _editExternalProcessesAction.setEnabled(oce.value>0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "806cfc5bd0a58c7190637f8862608b0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/MovingDocumentRegion.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public MovingDocumentRegion(OpenDefinitionsDocument doc, File file, Position sp, Position ep, Thunk<String> ss)", "signatureAfterChange": "   public MovingDocumentRegion(final OpenDefinitionsDocument doc, int start, int end, int lineStart, int lineEnd)", "diff": ["-  public MovingDocumentRegion(OpenDefinitionsDocument doc, File file, Position sp, Position ep, Thunk<String> ss) {", "-    super(doc, sp, ep);", "+  public MovingDocumentRegion(final OpenDefinitionsDocument doc, int start, int end, int lineStart, int lineEnd) {", "+", "+    super(doc, start, end);", "+    try {", "+      _lineStartPos = doc.createPosition(lineStart);", "+      _lineEndPos  = doc.createPosition(lineEnd);", "+    }", "+    catch (BadLocationException ble) { throw new UnexpectedException(ble); }  // should never happen", "+    ", "-    _stringSuspension = ss;", "+    _stringSuspension = new Thunk<String>() {", "+      public String value() {", "+        try {", "+          int endSel = getEndOffset();", "+          int startSel = getStartOffset();", "+          int selLength = endSel - startSel;", "+          ", "+          int excerptEnd = _lineEndPos.getOffset();", "+          int excerptStart = _lineStartPos.getOffset();", "+          int exceptLength = excerptEnd - excerptStart;", "+          ", "+          // the offsets within the excerpted string of the selection (figuratively in \"Red\")", "+          int startRed = startSel - excerptStart;", "+          int endRed = endSel - excerptStart;", "+          ", "+          int excerptLength = Math.min(120, excerptEnd - excerptStart);", "+          String text = doc.getText(excerptStart, excerptLength);", "+          ", "+          // Construct the matching string and compressed selection prefix and suffix strings within text", "+          String prefix = StringOps.compress(text.substring(0, startRed));", "+          String match, suffix;", "+          if (excerptLength < startRed + selLength) { // selection extends beyond excerpt", "+            match = text.substring(startRed) + \" ...\";", "+            suffix = \"\";", "+          }", "+          else {", "+            match = text.substring(startRed, endRed);", "+            suffix = StringOps.compress(text.substring(endRed, excerptLength));", "+          }", "+          ", "+          // COMMENT: We need a global invariant concerning non-displayable characters.  ", "+          ", "+          // create the excerpt string", "+          StringBuilder sb = new StringBuilder(edu.rice.cs.plt.text.TextUtil.htmlEscape(prefix));", "+          sb.append(\"<font color=#ff0000>\");", "+//                sb.append(LEFT);", "+          sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(match));", "+          sb.append(\"</font>\");", "+//                sb.append(RIGHT);", "+          sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(suffix));", "+//                sb.append(\"</html>\");", "+//                sb.append(StringOps.getBlankString(120 - sLength));  // move getBank to StringOps", "+          return sb.toString();", "+        }", "+        catch(BadLocationException e) { return \"\";  /* Ignore the exception. */ }", "+      }", "+    };"]}], "num": 5961}
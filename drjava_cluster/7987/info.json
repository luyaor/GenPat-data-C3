{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a79d33ad5ddd3008135ab170c00442f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d222dc2e2dffcf228f0929613e55306", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 137, "signatureBeforeChange": "   public static <T1, T2, T3> Runnable3<T1, T2, T3>      compose(final Runnable3<? super T1, ? super T2, ? super T3> r1,              final Runnable3<? super T1, ? super T2, ? super T3> r2)", "signatureAfterChange": "   public static <T1, T2, T3> Runnable3<T1, T2, T3> compose(Runnable3<? super T1, ? super T2, ? super T3> r1,                                                             Runnable3<? super T1, ? super T2, ? super T3> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T1, T2, T3> Runnable3<T1, T2, T3> ", "-    compose(final Runnable3<? super T1, ? super T2, ? super T3> r1, ", "-            final Runnable3<? super T1, ? super T2, ? super T3> r2) {", "-    return new Runnable3<T1, T2, T3>() {", "-      public void run(T1 a1, T2 a2, T3 a3) { r1.run(a1, a2, a3); r2.run(a1, a2, a3); }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T1, T2, T3> Runnable3<T1, T2, T3> compose(Runnable3<? super T1, ? super T2, ? super T3> r1, ", "+                                                           Runnable3<? super T1, ? super T2, ? super T3> r2) {", "+    return new ComposedRunnable3<T1, T2, T3>(IterUtil.<Runnable3<? super T1, ? super T2, ? super T3>>", "+                                             make(r1, r2));", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd4fd176fed029089ed34bbf8ce14cc1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 132, "signatureBeforeChange": "   public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1,                                                     final Runnable2<? super T1, ? super T2> r2)", "signatureAfterChange": "   public static <T1, T2> Runnable2<T1, T2> compose(Runnable2<? super T1, ? super T2> r1,                                                     Runnable2<? super T1, ? super T2> r2)", "diff": ["-  /** @return  A runnable that executes {@code r1} followed by {@code r2} with the same input */", "-  public static <T1, T2> Runnable2<T1, T2> compose(final Runnable2<? super T1, ? super T2> r1, ", "-                                                   final Runnable2<? super T1, ? super T2> r2) { ", "-    return new Runnable2<T1, T2>() {", "-      public void run(T1 arg1, T2 arg2) { r1.run(arg1, arg2); r2.run(arg1, arg2); }", "-    };", "+  /** Create a runnable that executes {@code r1} followed by {@code r2} with the same input. */", "+  public static <T1, T2> Runnable2<T1, T2> compose(Runnable2<? super T1, ? super T2> r1, ", "+                                                   Runnable2<? super T1, ? super T2> r2) { ", "+    return new ComposedRunnable2<T1, T2>(IterUtil.<Runnable2<? super T1, ? super T2>>make(r1, r2));", "+  }"]}], "num": 7987}
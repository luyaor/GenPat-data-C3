{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fefc9b9cfd959e34360f4122377ffcb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42fc4357fdb6f0278d11b4a8284d299e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "72a0d444dc62ca781c9b91acdee71819a6f4cdd3", "commitAfterChange": "7144a04f8cef658fdd6189df9de3fd59eb678bec", "methodNumberBeforeChange": 557, "methodNumberAfterChange": 558, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-    // The following method does not necessarity run in the event thread.  Yuck!", "+    // update documents from other threads.", "-      ", "-      Utilities.invokeLater(new Runnable() { ", "-        public void run() {", "+     ", "+      assert EventQueue.isDispatchThread();", "+      // invokeLater was required when document updating was done outside the event thread.", "+//      Utilities.invokeLater(new Runnable() { ", "+//        public void run() {", "-          try { ", "+          try {", "-        }", "-      });", "+//        }", "+//      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61678da6f975fa238c3f20d66c6a8367", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "634bad3816e5a89c71c174f08f33c3f80727cfeb", "commitAfterChange": "d1ffac675273323f7a1b9777462d16896d09a1af", "methodNumberBeforeChange": 383, "methodNumberAfterChange": 388, "signatureBeforeChange": "          public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "          public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-      // Only change GUI from event-dispatching thread", "-      // (This can be called from other threads...)", "-      Utilities.invokeAndWait(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "+//      Utilities.showDebug(\"MainFrame Listener: ActiveDocument changed to \" + active);", "+      // code that accesses the GUI must run in the event-dispatching thread. ", "+      Utilities.invokeLater(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "-          "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7658772762bfeea3d11e63c389e3d322", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "3fffab849ca2a182947577f4918deb05255be914", "commitAfterChange": "37e723fa34df1bc3afa5f0896241b32a56e4dde5", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 372, "signatureBeforeChange": "      public void activeDocumentChanged(final OpenDefinitionsDocument active)", "signatureAfterChange": "          public void activeDocumentChanged(final OpenDefinitionsDocument active)", "diff": ["-", "+    ", "-//      try {  // used or invokeAndWait variation", "-      Utilities.invokeLater(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "+      try {  // used or invokeAndWait variation", "+      Utilities.invokeAndWait(new Runnable() {  // invokeAndWait is arguably better but it may create occasional deadlocks.", "-          ", "+        ", "-//      }  // used for invokeAndWait variation", "-//      catch(InterruptedException e) { throw new UnexpectedException(e); }", "+      }  // used for invokeAndWait variation", "+      catch(InterruptedException e) { throw new UnexpectedException(e); }"]}], "num": 29950}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b965b80ef21b7f9ba14f9b601f2deb2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31b086e0a22ad098a0800b193e0a2ea4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected)     throws InvalidTypeArgumentException, UnmatchedLookupException", "signatureAfterChange": "   public ConstructorInvocation lookupConstructor(final Type t, final Iterable<? extends Type> typeArgs,                                                   final Iterable<? extends Expression> args,                                                  final Option<Type> expected, final Access.Module accessModule)     throws InvalidTypeArgumentException, UnmatchedLookupException", "diff": ["-                                                 final Option<Type> expected)", "+                                                 final Option<Type> expected, final Access.Module accessModule)", "-      ", "-    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(constructors, typeArgs, args, expected);", "+    ", "+    Iterable<DJConstructor> accessible = IterUtil.filter(constructors, new Predicate<DJConstructor>() {", "+      public boolean contains(DJConstructor k) { return accessible(k, accessModule); }", "+    });", "+    Iterable<FunctionInvocationCandidate<DJConstructor>> cs = bestInvocations(accessible, typeArgs, args, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b422c5827a7c14fb9ffac1fd821a226", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "c49bfac6b5c39aa536d2d1420b6c956dfa5557c6", "commitAfterChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "methodNumberBeforeChange": 365, "methodNumberAfterChange": 318, "signatureBeforeChange": "              public LookupClass(Predicate<? super DJClass> matchInner)", "signatureAfterChange": "     protected ConstructorInvocationCandidate(DJConstructor declaredConstructor, Type declaringType,                                              Iterable<? extends Type> targs,                                              Iterable<? extends Expression> args,                                              Option<Type> expected)", "diff": ["+    private final DJConstructor _declaredConstructor; // the constructor, as declared -- necessary for compilation", "+    protected ConstructorInvocationCandidate(DJConstructor declaredConstructor, Type declaringType,", "+                                             Iterable<? extends Type> targs,", "+                                             Iterable<? extends Expression> args,", "+                                             Option<Type> expected) {", "+      super(instantiateConstructor(declaredConstructor, declaringType), targs, args, expected);", "+      _declaredConstructor = declaredConstructor;", "+    }", "-      ", "-      public LookupClass(Predicate<? super DJClass> matchInner) {", "-        _matchInner = matchInner;", "-      }"]}], "num": 3885}
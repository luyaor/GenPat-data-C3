{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bc85c93f2b1facc29fc9604e3d22558", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b54407d6d06688a9ba951b077157bd2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": "   protected SymbolData getInnerClassOrInterfaceHelper(String nameToMatch, int firstIndexOfDot)", "signatureAfterChange": "   protected SymbolData getInnerClassOrInterfaceHelper(String nameToMatch, int firstIndexOfDot)", "diff": ["-    //Next, look through the inner classes/interfaces of this class's super class", "-    //Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "+    // Next, look through the inner classes/interfaces of this class's super class", "+    // Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "-        if (firstIndexOfDot > 0) {", "+        ", "+        if (firstIndexOfDot > 0)", "-        }", "-        else {", "-          outerPiece = newResult;", "-        }", "+        else outerPiece = newResult;", "+        ", "-        else {privateResult = newResult;}", "+        else privateResult = newResult;", "-    //Next, look through the inner classes/interfaces of each of this class's interfaces", "-    //Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "-    for (SymbolData id: _interfaces) {", "-      newResult = id.getInnerClassOrInterfaceHelper(nameToMatch, firstIndexOfDot);", "+    // Next, look through the inner classes/interfaces of each of this class's interfaces", "+    // Check accessibility, because if you cannot see the super class's inner class, you can't use it.", "+    for (SymbolData id: _interfaces) {  // TODO: find out how null is being inserted in _interfaces", "+      if (id == null) {", "+//        System.err.println(\"In SymbolData \" + getName() + \", _interfaces contains a null entry\");", "+//        assert false;", "+        continue;", "+      }", "+       newResult = id.getInnerClassOrInterfaceHelper(nameToMatch, firstIndexOfDot);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8af122d420efb7b4f9e59a74c76ba7cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "e4966eebfccbb573b6679624160fc9ffb723a509", "commitAfterChange": "632cdc2196d6c4bf9f5c64cd463fe20db7ac52b4", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "      public void centerViewOnOffset(int offset)", "signatureAfterChange": "      public void centerViewOnOffset(int offset)", "diff": ["-      int startRectX = (int)startRect.getX();", "-      int startRectY = (int)startRect.getY();", "-      startRect.setLocation(startRectX-(int)(viewWidth/2), ", "-                            startRectY-(int)(viewHeight/2));", "-      Point endPoint = new Point(startRectX+(int)(viewWidth/2), ", "-                                 startRectY+(int)(viewHeight/2 + ", "-                                                  metrics.getHeight()/2));", "+      if (startRect != null) {", "+        int startRectX = (int)startRect.getX();", "+        int startRectY = (int)startRect.getY();", "+        startRect.setLocation(startRectX-(int)(viewWidth/2), ", "+                              startRectY-(int)(viewHeight/2));", "+        Point endPoint = new Point(startRectX+(int)(viewWidth/2), ", "+                                   startRectY+(int)(viewHeight/2 + ", "+                                                    metrics.getHeight()/2));", "+        ", "+        // Add the end rect onto the start rect to make a rectangle", "+        // that encompasses the entire selection", "+        startRect.add(endPoint);     ", "-      // Add the end rect onto the start rect to make a rectangle", "-      // that encompasses the entire selection", "-      startRect.add(endPoint);     ", "-      ", "-      this.scrollRectToVisible(startRect);", "+        this.scrollRectToVisible(startRect);", "+      }", "-      ", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc12b53695c679ab5295db7980f63581", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 324, "methodNumberAfterChange": 324, "signatureBeforeChange": "   private void _repaintLineNums()", "signatureAfterChange": "   private void _repaintLineNums()", "diff": ["-    JViewport rhvport = front.getRowHeader();", "-", "-    if (rhvport != null) {", "-      Component view = rhvport.getView();", "-      view.repaint();", "+    if (front != null) {", "+      JViewport rhvport = front.getRowHeader();", "+      ", "+      if (rhvport != null) {", "+        Component view = rhvport.getView();", "+        view.repaint();", "+      }"]}], "num": 20813}
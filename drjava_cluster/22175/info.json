{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "582327dbc8052a28af8a06a6710750d3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4662dc7d370d3ba3786c2b61ed11dc9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "signatureAfterChange": "   public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException", "diff": ["-  /** Compiles all documents in the list of opendefinitionsdocuments sent as input. */", "-  public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "-    File buildDir = null;", "-    ", "-    if (_getter.getFileGroupingState().isProjectActive()) {", "-      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "-    }", "-    ", "-    // Only compile if all are saved", "-    if (_hasModifiedFiles(defDocs)) {", "-      //System.out.println(\"Has modified files\");", "-      _notifier.saveBeforeCompile();", "-    }", "-    ", "-    ", "-    // check for modified project files, in case they didn't save when prompted", "-    if (_hasModifiedFiles(defDocs)) return;", "-    // if any files haven't been saved after we told our", "-    // listeners to do so, don't proceed with the rest", "-    // of the compile.", "-    ", "-    // Get sourceroots and all files", "-    File[] sourceRoots = getSourceRootSet();", "-    ArrayList<File> filesToCompile = new ArrayList<File>();", "-    ", "-    File f;", "-    String[] exts = getCompilableExtensions();", "-    for (OpenDefinitionsDocument doc : defDocs) {", "-      try {", "-        f = doc.getFile();", "-        if (endsWithExt(f, exts)) filesToCompile.add(f);", "-      }", "-      catch (IllegalStateException ise) {", "-        // No file for this document; skip it", "-      }", "-    }", "-    File[] files = filesToCompile.toArray(new File[filesToCompile.size()]);", "-    ", "-    _notifier.compileStarted();", "+  /** Compiles all documents in the specified list of OpenDefinitionsDocuments. */", "+  public void compile(List<OpenDefinitionsDocument> defDocs) throws IOException {", "+    ", "+    File buildDir = null;", "+    ", "+    if (_getter.getFileGroupingState().isProjectActive()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+    }", "+    ", "+    // Only compile if all are saved", "+    if (_hasModifiedFiles(defDocs)) _notifier.saveBeforeCompile();", "+    ", "+    // check for modified project files, in case they didn't save when prompted", "+    if (_hasModifiedFiles(defDocs)) return;", "+    // if any files haven't been saved after we told our", "+    // listeners to do so, don't proceed with the rest", "+    // of the compile.", "+    ", "+    // Get sourceroots and all files", "+    ArrayList<File> filesToCompile = new ArrayList<File>();", "+    ", "+    File f;", "+    String[] exts = getCompilableExtensions();", "+    for (OpenDefinitionsDocument doc : defDocs) {", "+      try {", "+        f = doc.getFile();", "+        if (endsWithExt(f, exts)) filesToCompile.add(f);", "+      }", "+      catch (IllegalStateException ise) {", "+        // No file for this document; skip it", "+      }", "+    } ", "+    _rawCompile(getSourceRootSet(), filesToCompile.toArray(new File[0]), buildDir);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddc277708058fa698c64f62a2f00d6ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "11f5b9e7df5eb990bc9eeb3f9e343e54f88d561a", "commitAfterChange": "03fcb19e2e455531cf9f2f73094d7f9c8d5e6255", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void compileAll(List<File> sourceRootSet, List<File> filesToCompile) throws IOException", "signatureAfterChange": "   public void compileAll(List<File> sourceRootSet, List<File> filesToCompile) throws IOException", "diff": ["-   ", "-    //ScrollableDialog sd1 = new ScrollableDialog(null, \"DefaultCompilerModel.compileAll called\", \"\", \"\");", "-    //sd1.show();", "-    ", "-    if (_hasModifiedFiles(defDocs)) {", "-      //System.out.println(\"Has modified files\");", "-      //ScrollableDialog sd2 = new ScrollableDialog(null, \"_hasModifiedFiles(...) returned true!\", \"\", \"\");", "-      //sd2.show();", "-      _notifier.saveBeforeCompile();", "-    }", "+    if (_hasModifiedFiles(defDocs)) _notifier.saveBeforeCompile();", "-    // Check for modified project files, in case they didn't save when prompted.", "-    // If any files haven't been saved after we told our listeners to do so, ", "-    // don't proceed with the rest of the compile.", "+    // Check for modified project files, in case they didn't save when prompted. If any files haven't been saved", "+    // after we told our listeners to do so, don't proceed with the rest of the compile.", "-//    ScrollableDialog sd3 = new ScrollableDialog(null, \"DefaultCompilerModel.compileAll(...,...) has finished file saving\", \"\",\"\");", "-//    sd3.show();", "-    ", "-    File[] sourceRoots = sourceRootSet.toArray(new File[0]);;", "-    File[] files = filesToCompile.toArray(new File[0]);", "-    ", "-//    ScrollableDialog sd4 = new ScrollableDialog(null, \"Ready to invoke compileStarted() event on _notifier [\" + _notifier + \"]\", \"\", \"\");", "-//    sd4.show();", "-    ", "-    _notifier.compileStarted();", "-    ", "-//    ScrollableDialog sd5 = new ScrollableDialog(null, \"compileStarted() event successfully invoked \", \"\", \"\");", "-//    sd5.show();", "-    ", "-    try { _compileFiles(sourceRoots, files, buildDir); }", "-    catch (Throwable t) {", "-      CompilerError err = new CompilerError(t.toString(), false);", "-      CompilerError[] errors = new CompilerError[] { err };", "-      _distributeErrors(errors);", "-    }", "-    finally { _notifier.compileEnded(); }", "+    _rawCompile(sourceRootSet.toArray(new File[0]), filesToCompile.toArray(new File[0]), buildDir);"]}], "num": 22175}
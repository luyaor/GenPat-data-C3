{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aedf90269758fbe935039f5209e16db", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d5130958c747f974a3fbcf4d49b7e25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "signatureAfterChange": "   protected SymbolData _getLeastRestrictiveType(SymbolData sd1, SymbolData sd2)", "diff": ["-    if ((sd1.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "-         sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-        (sd2.isDoubleType(LanguageLevelConverter.OPT.javaVersion()) &&", "-         sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+    if ((sd1.isDoubleType(JAVA_VERSION) &&", "+         sd2.isNumberType(JAVA_VERSION)) ||", "+        (sd2.isDoubleType(JAVA_VERSION) &&", "+         sd1.isNumberType(JAVA_VERSION))) {", "-    else if ((sd1.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-             (sd2.isFloatType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+    else if ((sd1.isFloatType(JAVA_VERSION) &&", "+              sd2.isNumberType(JAVA_VERSION)) ||", "+             (sd2.isFloatType(JAVA_VERSION) &&", "+              sd1.isNumberType(JAVA_VERSION))) {", "-    else if ((sd1.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd2.isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-             (sd2.isLongType(LanguageLevelConverter.OPT.javaVersion()) &&", "-              sd1.isNumberType(LanguageLevelConverter.OPT.javaVersion()))) {", "+    else if ((sd1.isLongType(JAVA_VERSION) &&", "+              sd2.isNumberType(JAVA_VERSION)) ||", "+             (sd2.isLongType(JAVA_VERSION) &&", "+              sd1.isNumberType(JAVA_VERSION))) {", "-    else if (sd1.isBooleanType(LanguageLevelConverter.OPT.javaVersion()) &&", "-             sd2.isBooleanType(LanguageLevelConverter.OPT.javaVersion())) {", "+    else if (sd1.isBooleanType(JAVA_VERSION) &&", "+             sd2.isBooleanType(JAVA_VERSION)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e21d30227d614d6d611e9eacf18df8a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result)", "signatureAfterChange": "   public TypeData forEqualityExpressionOnly(EqualityExpression that, TypeData left_result, TypeData right_result)", "diff": ["-   */", "+    */", "-    if (left_result == null || right_result == null) {return null;}", "+    if (left_result == null || right_result == null) return null;", "-    if (!assertFound(left_result, that) || !assertFound(right_result, that)) {", "-      return null;", "-    }", "-", "+    if (!assertFound(left_result, that) || !assertFound(right_result, that)) return null;", "-    if (left_result.getSymbolData().isPrimitiveType() || right_result.getSymbolData().isPrimitiveType()) {", "-      if (!((left_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion()) &&", "-             right_result.getSymbolData().isNumberType(LanguageLevelConverter.OPT.javaVersion())) ||", "-            (left_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())", "-               && right_result.getSymbolData().isAssignableTo(SymbolData.BOOLEAN_TYPE, LanguageLevelConverter.OPT.javaVersion())))) {", "-        _addError(\"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they must either both be number types or both be boolean types.  You have specified expressions with type \" + left_result.getName() + \" and \" + right_result.getName(), that);", "+    SymbolData left = left_result.getSymbolData();", "+    SymbolData right = right_result.getSymbolData();", "+    if (left.isPrimitiveType() || right.isPrimitiveType()) {", "+      if (!((left.isNumberType(JAVA_VERSION) &&", "+             right.isNumberType(JAVA_VERSION)) ||", "+            (left.isAssignableTo(SymbolData.BOOLEAN_TYPE, JAVA_VERSION)", "+               && right.isAssignableTo(SymbolData.BOOLEAN_TYPE, JAVA_VERSION)))) {", "+        _addError(\"At least one of the arguments to this Equality Operator (==, !=) is primitive.  Therefore, they \" + ", "+                  \"must either both be number types or both be boolean types.  You have specified expressions with type \" +", "+                  left_result.getName() + \" and \" + right_result.getName(), that);", "-    assertInstanceType(left_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the left side\", that);", "-    assertInstanceType(right_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  Instead, you have referenced a type name on the right side\", that);", "+    assertInstanceType(left_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  \" +", "+                       \"Instead, you have referenced a type name on the left side\", that);", "+    assertInstanceType(right_result, \"The arguments to this Equality Operator(==, !=) must both be instances.  \" + ", "+                       \"Instead, you have referenced a type name on the right side\", that);"]}], "num": 956}
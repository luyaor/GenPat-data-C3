{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a12aac8a30f983b510b3c6cb36df266c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e6f4f80d1e5388d41749a88d79ae39b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InsertVariableDialog.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "   protected void updatePanes()", "signatureAfterChange": "\r   protected void updatePanes()", "diff": ["-  /** Update the properties in all the panes. */", "-  protected void updatePanes() {", "-    edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> sel = getSelected();", "-    String selCategory = null;", "-    if (sel!=null) {", "-      selCategory = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "-    }", "-    _tabbedPane.removeAll();", "-    for (String category: PropertyMaps.ONLY.getCategories()) {", "-      _tabbedPane.addTab(category, createPane(category, PropertyMaps.ONLY.getProperties(category)));", "-    }", "-    if (sel!=null) {", "-      if (selCategory==null) { sel = null; } else {", "-        int i;", "-        for (i=0; i<_tabbedPane.getTabCount(); ++i) {", "-          if (_tabbedPane.getTitleAt(i).equals(selCategory)) { _tabbedPane.setSelectedIndex(i); break; }", "-        }", "-        if (i==_tabbedPane.getTabCount()) { sel = null; } else {", "-          Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(selCategory);", "-          DefaultTableModel tm = _varTableModel.get(selCategory);", "-          for (i=0; i<tm.getRowCount(); ++i) {", "-            String key = tm.getValueAt(i,0).toString();", "-            if (key.equals(sel.second().getName())) {", "-              _varTable.get(selCategory).getSelectionModel().setSelectionInterval(i,i);", "-              break;", "-            }", "-          }", "-          if (i==tm.getRowCount()) {", "-            // not found, select first", "-            _varTable.get(selCategory).getSelectionModel().setSelectionInterval(0,0);", "-          }", "-          _varValueField.setText(sel.second().toString());", "-          _helpPane.setText(sel.second().getHelp());", "-          _helpPane.setCaretPosition(0);", "-          _selected = sel;", "-        }", "-      }", "-    }", "-    if (sel==null) {", "-      _tabbedPane.setSelectedIndex(0);", "-      String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());", "-      Map<String, DrJavaProperty> properties = PropertyMaps.ONLY.getProperties(category);", "-      _varTable.get(category).getSelectionModel().setSelectionInterval(0,0);", "-      String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();", "-      DrJavaProperty value = properties.get(key);", "-      _varValueField.setText(value.toString());", "-      _helpPane.setText(value.getHelp());", "-      _helpPane.setCaretPosition(0);", "-      _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);", "-    }", "-  }", "+  /** Update the properties in all the panes. */\r", "+  protected void updatePanes() {\r", "+    edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty> sel = getSelected();\r", "+    String selCategory = null;\r", "+    if (sel!=null) {\r", "+      selCategory = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());\r", "+    }\r", "+    _tabbedPane.removeAll();\r", "+    for (String category: PropertyMaps.TEMPLATE.getCategories()) {\r", "+      _tabbedPane.addTab(category, createPane(category, PropertyMaps.TEMPLATE.getProperties(category)));\r", "+    }\r", "+    if (sel!=null) {\r", "+      if (selCategory==null) { sel = null; } else {\r", "+        int i;\r", "+        for (i=0; i<_tabbedPane.getTabCount(); ++i) {\r", "+          if (_tabbedPane.getTitleAt(i).equals(selCategory)) { _tabbedPane.setSelectedIndex(i); break; }\r", "+        }\r", "+        if (i==_tabbedPane.getTabCount()) { sel = null; } else {\r", "+          Map<String, DrJavaProperty> properties = PropertyMaps.TEMPLATE.getProperties(selCategory);\r", "+          DefaultTableModel tm = _varTableModel.get(selCategory);\r", "+          for (i=0; i<tm.getRowCount(); ++i) {\r", "+            String key = tm.getValueAt(i,0).toString();\r", "+            if (key.equals(sel.second().getName())) {\r", "+              _varTable.get(selCategory).getSelectionModel().setSelectionInterval(i,i);\r", "+              break;\r", "+            }\r", "+          }\r", "+          if (i==tm.getRowCount()) {\r", "+            // not found, select first\r", "+            _varTable.get(selCategory).getSelectionModel().setSelectionInterval(0,0);\r", "+          }\r", "+          _varValueField.setText(sel.second().toString());\r", "+          _helpPane.setText(sel.second().getHelp());\r", "+          _helpPane.setCaretPosition(0);\r", "+          _selected = sel;\r", "+        }\r", "+      }\r", "+    }\r", "+    if (sel==null) {\r", "+      _tabbedPane.setSelectedIndex(0);\r", "+      String category = _tabbedPane.getTitleAt(_tabbedPane.getSelectedIndex());\r", "+      Map<String, DrJavaProperty> properties = PropertyMaps.TEMPLATE.getProperties(category);\r", "+      _varTable.get(category).getSelectionModel().setSelectionInterval(0,0);\r", "+      String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();\r", "+      DrJavaProperty value = properties.get(key);\r", "+      _varValueField.setText(value.toString());\r", "+      _helpPane.setText(value.getHelp());\r", "+      _helpPane.setCaretPosition(0);\r", "+      _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);\r", "+    }\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "923b827ea72b1fb592b33a128984a618", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InsertVariableDialog.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   protected JScrollPane createPane(final String category, final Map<String, DrJavaProperty> props)", "signatureAfterChange": "\r   protected JScrollPane createPane(final String category, final Map<String, DrJavaProperty> props)", "diff": ["-    * @param props map from property names to actual properties in this category */", "-  protected JScrollPane createPane(final String category, final Map<String, DrJavaProperty> props) {", "-    _varTableModel.put(category,new DefaultTableModel(0,1) {", "-      public String getColumnName(int column) {", "-        switch(column) {", "-          case 0: return \"Variable\";", "-          default: return super.getColumnName(column);", "-        }", "-      }", "-      ", "-      public Class<?> getColumnClass(int columnIndex) {", "-        switch(columnIndex) {", "-          case 0: return String.class;", "-          default: return super.getColumnClass(columnIndex);", "-        }", "-      }", "-      public boolean isCellEditable(int row, int column) { return false; }", "-    });", "-    ", "-    _varTable.put(category, new JTable(_varTableModel.get(category)));", "-    JScrollPane varTableSP = new JScrollPane(_varTable.get(category));", "-    varTableSP.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);", "-    varTableSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);", "-    _varTable.get(category).setSelectionMode(ListSelectionModel.SINGLE_SELECTION);", "-    _varTable.get(category).setDragEnabled(false);", "-    _varTable.get(category).setPreferredScrollableViewportSize(new Dimension(500,250));", "-    _varTable.get(category).putClientProperty(\"JTable.autoStartsEdit\", Boolean.FALSE);", "-    ListSelectionModel lsm = _varTable.get(category).getSelectionModel();", "-    lsm.addListSelectionListener(new ListSelectionListener() {", "-      public void valueChanged(ListSelectionEvent e) {", "-        String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();", "-        DrJavaProperty value = PropertyMaps.ONLY.getProperty(category,key);", "-        _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);", "-        _varValueField.setText(value.toString());", "-        _helpPane.setText(value.getHelp());", "-        _helpPane.setCaretPosition(0);", "-      }", "-    });", "-    _varTable.get(category).setSelectionModel(lsm);", "-    ", "-    TreeSet<String> sorted = new TreeSet<String>();", "-    for(DrJavaProperty p: PropertyMaps.ONLY.getProperties(category).values()) {", "-      sorted.add(p.getName());", "-    }", "-    ", "-    for(String key: sorted) {", "-      Vector<String> row = new Vector<String>();", "-      row.add(key);", "-      _varTableModel.get(category).addRow(row);", "-    }", "-    ", "-    _varTable.get(category).setRowSelectionInterval(0,0);", "-    ", "-    return varTableSP;", "-  }", "+    * @param props map from property names to actual properties in this category */\r", "+  protected JScrollPane createPane(final String category, final Map<String, DrJavaProperty> props) {\r", "+    _varTableModel.put(category,new DefaultTableModel(0,1) {\r", "+      public String getColumnName(int column) {\r", "+        switch(column) {\r", "+          case 0: return \"Variable\";\r", "+          default: return super.getColumnName(column);\r", "+        }\r", "+      }\r", "+      \r", "+      public Class<?> getColumnClass(int columnIndex) {\r", "+        switch(columnIndex) {\r", "+          case 0: return String.class;\r", "+          default: return super.getColumnClass(columnIndex);\r", "+        }\r", "+      }\r", "+      public boolean isCellEditable(int row, int column) { return false; }\r", "+    });\r", "+    \r", "+    _varTable.put(category, new JTable(_varTableModel.get(category)));\r", "+    JScrollPane varTableSP = new JScrollPane(_varTable.get(category));\r", "+    varTableSP.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\r", "+    varTableSP.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\r", "+    _varTable.get(category).setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r", "+    _varTable.get(category).setDragEnabled(false);\r", "+    _varTable.get(category).setPreferredScrollableViewportSize(new Dimension(500,250));\r", "+    _varTable.get(category).putClientProperty(\"JTable.autoStartsEdit\", Boolean.FALSE);\r", "+    ListSelectionModel lsm = _varTable.get(category).getSelectionModel();\r", "+    lsm.addListSelectionListener(new ListSelectionListener() {\r", "+      public void valueChanged(ListSelectionEvent e) {\r", "+        String key = _varTableModel.get(category).getValueAt(_varTable.get(category).getSelectedRow(),0).toString();\r", "+        DrJavaProperty value = PropertyMaps.TEMPLATE.getProperty(category,key);\r", "+        _selected = new edu.rice.cs.plt.tuple.Pair<String,DrJavaProperty>(key, value);\r", "+        _varValueField.setText(value.toString());\r", "+        _helpPane.setText(value.getHelp());\r", "+        _helpPane.setCaretPosition(0);\r", "+      }\r", "+    });\r", "+    _varTable.get(category).setSelectionModel(lsm);\r", "+    \r", "+    TreeSet<String> sorted = new TreeSet<String>();\r", "+    for(DrJavaProperty p: PropertyMaps.TEMPLATE.getProperties(category).values()) {\r", "+      sorted.add(p.getName());\r", "+    }\r", "+    \r", "+    for(String key: sorted) {\r", "+      Vector<String> row = new Vector<String>();\r", "+      row.add(key);\r", "+      _varTableModel.get(category).addRow(row);\r", "+    }\r", "+    \r", "+    _varTable.get(category).setRowSelectionInterval(0,0);\r", "+    \r", "+    return varTableSP;\r", "+  }\r"]}], "num": 18232}
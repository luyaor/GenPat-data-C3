{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2faf1a77aa4a5fcd82bb576484e0e426", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "210e1b7cd094337595e145458f2b874a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/project/ProjectFileParser.java", "commitBeforeChange": "99105223925683ee669479026ce3b62dfa0eda84", "commitAfterChange": "94ede5fc3e289a571a76fcd6a91c26510fe57b12", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException", "signatureAfterChange": "   public ProjectFileIR parse(File projFile) throws IOException, FileNotFoundException, MalformedProjectFileException", "diff": ["-    _parentDir = projFile.getParent();", "-//    System.err.println(\"Parsing project file \" + projFile + \" with parent \" + _parentDir);", "+    _parent = projFile.getParent();  ", "+    _srcFileBase = _parent; // oldest legacy file format may omit proj-root or proj-root-and-base node", "+    fileListVisitor = new ListVisitor<File>(_parent);", "+    docFileListVisitor = new ListVisitor<DocFile>(_parent);", "+//    System.err.println(\"Parsing project file \" + projFile + \" with parent \" + _parent);", "-    try {", "-      for (SEList exp : forest) evaluateExpression(exp, pfir);", "-    }", "+    try { for (SEList exp : forest) evaluateExpression(exp, pfir); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45c65aa34c0520f84df5f05d7fb5134d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "3e22080f0d9650b7b802f9b713065e47d1a0ce19", "commitAfterChange": "1bbb44dda9ccbed1420a315a25ace5ab1cf20f80", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public LanguageLevelVisitor(File file, String packageName, LinkedList<String> importedFiles,                                LinkedList<String> importedPackages, LinkedList<String> classNamesInThisFile,                                Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations)", "signatureAfterChange": "   public LanguageLevelVisitor(File file, String packageName, LinkedList<String> importedFiles,                                LinkedList<String> importedPackages, LinkedList<String> classNamesInThisFile,                                Hashtable<String, Pair<SourceInfo, LanguageLevelVisitor>> continuations)", "diff": ["+    _enclosingClassName = null;", "+    _classesToBeParsed = new Hashtable<String, Pair<TypeDefBase, LanguageLevelVisitor>>();", "+    _innerClassesToBeParsed = new LinkedList<String>();"]}], "num": 27741}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f929a5b30a313d9ad3a95ddd9b9c8edd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c06903a1e39826a64a3851044e26284", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/VectorOption.java", "commitBeforeChange": "042ffb6978685c2b793d5124edfd3dfa24636f7c", "commitAfterChange": "54c74315c73b1720afe84a0338d81d822eb71511", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public Vector<T> parse(String s)", "signatureAfterChange": "     public Vector<T> parse(String s)", "diff": ["-   */", "-  public Vector<T> parse(String s)", "-  {  ", "-    // Enforced String format: \"[<element>, <element>, <element>]\"", "-      ", "-    if (s.charAt(0) != '[' || s.charAt(s.length() - 1) != ']')", "-      throw new IllegalArgumentException(\"Input must be String representation\" +", "-                                           \" of a Vector.\");", "-  ", "-    Vector<T> res = new Vector<T>();", "- ", "-    int i = 1;", "- ", "-    while (i != s.length() - 1)", "-      i = this.parseElement(s, i, res);", "-     ", "-    return res;", "-  }", "+     */", "+    public Vector<T> parse(String s) {  ", "+ int startFirstElement = header.length();", "+ int startFooter = s.length() - footer.length(); ", "+ ", "+ if (startFooter < startFirstElement || ", "+     !s.startsWith(header) || ", "+     !s.endsWith(footer)) {", "+     throw new IllegalArgumentException(\"String argument does not match format \" +", "+            \"specified by this VectorOption and its \" +", "+            \"delimiters.\");", "+ }", "+ s = s.substring(startFirstElement, startFooter);", "+ String d = String.valueOf(delim);", "+ StringTokenizer st = new StringTokenizer(s,d,true);", "+ ", "+ Vector<T> res = new Vector<T>();", "+ boolean sawDelim = st.hasMoreTokens();", "+", "+ while(st.hasMoreTokens()) {", "+     String token = st.nextToken();", "+     boolean isDelim = token.equals(d);", "+     ", "+     if(!isDelim) {", "+  res.addElement(parser.parse(token));", "+     } else if(sawDelim) { // isDelim & sawDelim (two delims in a row)", "+  throw new IllegalArgumentException(\" String argument contains delimiter with no preceding list element.\");", "+     } ", "+     sawDelim = isDelim;", "+ }", "+ if(sawDelim) {", "+     throw new IllegalArgumentException(\"String argument ends with delimiter.\");", "+ }", "+ return res;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c707c7caba290eeabc7a9b35eabc1af3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/EvaluationVisitorExtension.java", "commitBeforeChange": "0b0e9049d382a4fa995a6c0df7ce197dd950d3eb", "commitAfterChange": "412d701e31bce969c01f5f2b90490fb427358c05", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "    public Object visit(VariableDeclaration node)", "signatureAfterChange": "   public Object visit(VariableDeclaration node)", "diff": ["-", "+   */", "-    super.visit(node);", "+    Class c = NodeProperties.getType(node.getType());", "+    ", "+    if (node.getInitializer() != null) {", "+      Object o = performCast(c, node.getInitializer().acceptVisitor(this));", "+      ", "+      // Forces a runtime type-check on the cast.", "+      String name = node.getName();", "+      ", "+      if (!(c.isPrimitive()                     ||", "+            o == null                          ||", "+            c.isAssignableFrom(o.getClass()))) {", "+        Exception e = new ClassCastException(name);", "+        throw new CatchedExceptionError(e, node);", "+      }", "+      ", "+      if (node.isFinal()) {", "+        _context.setConstant(node.getName(), o);", "+      } else {", "+        _context.set(node.getName(), o);", "+      }", "+    } else {", "+      if (node.isFinal()) {", "+        _context.setConstant(node.getName(), UninitializedObject.INSTANCE);", "+      } else {", "+        _context.set(node.getName(), UninitializedObject.INSTANCE);", "+      }", "+    }"]}], "num": 26968}
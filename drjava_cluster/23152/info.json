{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4b72b43e32a8dd4eb74e760418f9bef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02d65bcd1df251df86dee3555c7db9cd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "14b45aa3b3e4e065019fffca22e1561b9b0d2698", "commitAfterChange": "8e9c94b2b0f764af306682c5d62d4c11ac6175a8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "signatureAfterChange": "   private void _rawJUnitOpenDefDocs(List<OpenDefinitionsDocument> lod, boolean allTests)", "diff": ["-              JavaClass clazz = new ClassParser(entry.getCanonicalPath()).parse();", "-              String className = clazz.getClassName(); // get classfile name", "-//              System.err.println(\"looking for source file for: \" + className);", "-              int indexOfDot = className.lastIndexOf('.');", "-              ", "+              final Box<String> className = new SimpleBox<String>();", "+              final Box<String> sourceName = new SimpleBox<String>();", "+              new ClassReader(IOUtil.toByteArray(entry)).accept(new ClassVisitor() {", "+                public void visit(int version, int access, String name, String sig, String sup, String[] inters) {", "+                  className.set(name);", "+                }", "+                public void visitSource(String source, String debug) {", "+                  sourceName.set(source);", "+                }", "+                public void visitOuterClass(String owner, String name, String desc) {}", "+                public AnnotationVisitor visitAnnotation(String desc, boolean visible) { return null; }", "+                public void visitAttribute(Attribute attr) {}", "+                public void visitInnerClass(String name, String out, String in, int access) {}", "+                public FieldVisitor visitField(int a, String n, String d, String s, Object v) { return null; }", "+                public MethodVisitor visitMethod(int a, String n, String d, String s, String[] e) { return null; }", "+                public void visitEnd() {}", "+              }, 0);", "+", "-              String javaSourceFileName = rootDir.getCanonicalPath() + File.separator + clazz.getSourceFileName();", "+              String javaSourceFileName = rootDir.getCanonicalPath() + File.separator + sourceName.value();", "-              classNames.add(className);", "+              classNames.add(className.value());", "-            catch(ClassFormatException e) { /* ignore it; class file is bad */ }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "158a079f52521636285ea12757dea57f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 709, "methodNumberAfterChange": 709, "signatureBeforeChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile)", "signatureAfterChange": "     public void compileBeforeJUnit(final CompilerListener testAfterCompile, List<OpenDefinitionsDocument> outOfSync)", "diff": ["-    public void compileBeforeJUnit(final CompilerListener testAfterCompile) {", "+    public void compileBeforeJUnit(final CompilerListener testAfterCompile, List<OpenDefinitionsDocument> outOfSync) {", "-      else { // pop up a window to ask if all open files should be compiled before testing", "-        String title = \"Must Compile All Source Files to Run Unit Tests\";", "-        String msg = \"Before you can run unit tests, you must first compile all out of sync source files.\\n\" + ", "-          \"Would you like to compile all files and run the specified test(s)?\";", "-        int rc = JOptionPane.showConfirmDialog(MainFrame.this, msg, title, JOptionPane.YES_NO_OPTION); ", "-        ", "-        switch (rc) {", "-          case JOptionPane.YES_OPTION:  // compile all open source files and test", "+      else { // pop up a window to ask if all open files should be compiled before testing        ", "+        final JButton yesButton = new JButton(new AbstractAction(\"Yes\") {", "+          public void actionPerformed(ActionEvent e) {", "+            // compile all open source files and test", "-            break;", "-          case JOptionPane.CLOSED_OPTION:", "-          case JOptionPane.NO_OPTION:  // abort unit testing", "-//            _model.getJUnitModel().nonTestCase(true);  // cleans up", "+          }", "+        });", "+        final JButton noButton = new JButton(new AbstractAction(\"No\") {", "+          public void actionPerformed(ActionEvent e) {", "+            // abort unit testing", "+            // _model.getJUnitModel().nonTestCase(true);  // cleans up", "-            break;", "-          default:", "-            throw new UnexpectedException(\"Invalid returnCode from showConfirmDialog: \" + rc);", "-        }", "+          }", "+        });", "+        ScrollableListDialog<OpenDefinitionsDocument> dialog = new ScrollableListDialog.Builder<OpenDefinitionsDocument>()", "+          .setOwner(MainFrame.this)", "+          .setTitle(\"Must Compile All Source Files to Run Unit Tests\")", "+          .setText(\"Before you can run unit tests, you must first compile all out of sync source files.\\n\"+", "+                   \"The files below are out of sync. Would you like to compile all files and\\n\"+", "+                   \"run the specified test(s)?\")", "+          .setItems(outOfSync)", "+          .setMessageType(JOptionPane.QUESTION_MESSAGE)", "+          .setFitToScreen(true)", "+          .clearButtons()", "+          .addButton(yesButton)", "+          .addButton(noButton)", "+          .build();", "+        ", "+        dialog.showDialog();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2287552731926dc2e9a916df299fa4e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "e56c3e65e7bcf825d7bbbc53538aa94699792774", "commitAfterChange": "a16de484c1abb580ef9842328449e698b77dfd64", "methodNumberBeforeChange": 763, "methodNumberAfterChange": 763, "signatureBeforeChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "diff": ["-        public void windowDeactivated(WindowEvent we) {", "+        final HashSet<Window> trumpedBy = new HashSet<Window>(); // set of windows that trumped this window in getting to the front", "+        final WindowAdapter regainFront = new WindowAdapter() {", "+          public void windowClosed(WindowEvent we) {", "+            // the window that trumped w was closed, so we're moving w back to the front", "+            w.toFront();", "+            w.requestFocus();", "+            toFrontAction.run(we);", "+            // then we remove the window that trumped w from the set of trump windows", "+            Window o = we.getOppositeWindow();", "+            trumpedBy.remove(o);", "+            // and we remove this listener", "+            o.removeWindowListener(this);", "+          }", "+        };", "+        public void toFront(WindowEvent we) {", "+          Window opposite = we.getOppositeWindow();", "+          if (opposite instanceof Dialog) {", "+            Dialog d = (Dialog)opposite;", "+            if (d.isModal()) {", "+              // the other window is a real modal dialog, we'll leave it on top -- the window trumped this window", "+              if (!trumpedBy.contains(d)) {", "+                // add a listener to move this window back to the front when the opposite window has been closed", "+                d.addWindowListener(regainFront);", "+                // add trump window to set of windows that have trumped this window", "+                trumpedBy.add(d);", "+              }", "+              return; ", "+            }", "+          }", "-        public void windowIconified(WindowEvent we) {", "-          we.getWindow().toFront();", "-          we.getWindow().requestFocus();", "-          toFrontAction.run(we);", "-        }", "-        public void windowLostFocus(WindowEvent we) {", "-          we.getWindow().toFront();", "-          we.getWindow().requestFocus();", "-          toFrontAction.run(we);", "-        }", "+        public void windowDeactivated(WindowEvent we) { toFront(we); }", "+        public void windowIconified(WindowEvent we) { toFront(we); }", "+        public void windowLostFocus(WindowEvent we) { toFront(we); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c7ad22bbc8f57f7e53c12f30df14c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsController.java", "commitBeforeChange": "a068a65da96363415d4ffc6e29a7efc1f9fab2cd", "commitAfterChange": "dfe6c6e73e062ff4ec08707a0c96aef62a0a1709", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 55, "signatureBeforeChange": "          public InputBox(boolean endOfStream)", "signatureAfterChange": "               public InputBox(boolean endOfStream)", "diff": ["+      final InputMap im = getInputMap(WHEN_FOCUSED);", "+      final ActionMap am = getActionMap();", "+      ", "-      };", "-      ", "-      final InputMap im = getInputMap(WHEN_FOCUSED);", "+      };      ", "-      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);", "-      ", "-      final ActionMap am = getActionMap();", "+      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);      ", "+      ", "+      // Link undo/redo to this InputBox", "+      final UndoManager undo = new UndoManager();", "+      final Document doc = getDocument(); ", "+      ", "+      // Listen for undo and redo events", "+      doc.addUndoableEditListener(new UndoableEditListener() {", "+        public void undoableEditHappened(UndoableEditEvent evt) {", "+          undo.addEdit(evt.getEdit());", "+        }", "+      }); ", "+      ", "+      final Action undoAction = new AbstractAction(\"Undo\") {", "+        public void actionPerformed(ActionEvent e) {", "+          try {", "+            if (undo.canUndo()) { undo.undo(); }", "+          }", "+          catch (CannotUndoException cue) { } ", "+        }", "+      };", "+      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO)) { im.put(ks, UNDO_NAME); }", "+      am.put(UNDO_NAME, undoAction);", "+      final Action redoAction = new AbstractAction(\"Redo\") {", "+        public void actionPerformed(ActionEvent e) {", "+          try {", "+            if (undo.canRedo()) { undo.redo(); }", "+          }", "+          catch (CannotRedoException cue) { }", "+        }", "+      };", "+      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_REDO)) { im.put(ks, REDO_NAME); }", "+      am.put(REDO_NAME, redoAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48e139e1e17ad3fa95abed2469faf69b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 60, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "   private void _createDebugger()", "diff": ["-      ", "+", "+      getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+        public void regionAdded(final Breakpoint bp) { setProjectChanged(true); }", "+        public void regionChanged(final Breakpoint bp) { setProjectChanged(true); }", "+        public void regionRemoved(final Breakpoint bp) { ", "+          try {", "+            getDebugger().removeBreakpoint(bp);", "+          } catch(DebugException de) { /* just ignore it */ }", "+          setProjectChanged(true);", "+          }", "+      });", "+      getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {", "+        public void regionAdded(DocumentRegion r) { setProjectChanged(true); }", "+        public void regionChanged(DocumentRegion r) { setProjectChanged(true); }", "+        public void regionRemoved(DocumentRegion r) { setProjectChanged(true); }", "+      });", "+      ", "+        public void watchSet(final DebugWatchData w) { setProjectChanged(true); }", "+        public void watchRemoved(final DebugWatchData w) { setProjectChanged(true); }    ", "+        ", "+        public void regionAdded(final Breakpoint bp) { }", "+        public void regionChanged(final Breakpoint bp) { }", "+        public void regionRemoved(final Breakpoint bp) { }", "-        public void breakpointSet(final Breakpoint bp) {", "-          setProjectChanged(true);", "-        }", "-        public void breakpointChanged(final Breakpoint bp) {", "-          setProjectChanged(true);", "-        }    ", "-        public void breakpointRemoved(final Breakpoint bp) {", "-          setProjectChanged(true);", "-        }    ", "-        public void watchSet(final DebugWatchData w) {", "-          setProjectChanged(true);", "-        }", "-        public void watchRemoved(final DebugWatchData w) {", "-          setProjectChanged(true);", "-        }    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7afb7884a0a83bb1718132ee86801f4d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "   private void _createDebugger()", "signatureAfterChange": "   private void _createDebugger()", "diff": ["+      ", "+      // add listener to set the project file to \"changed\" when a breakpoint or watch is added, removed, or changed", "+      _debugger.addListener(new DebugListener() {", "+        public void debuggerStarted() { }", "+        public void debuggerShutdown() { }", "+        public void threadLocationUpdated(OpenDefinitionsDocument doc, int lineNumber, boolean shouldHighlight) { }", "+        public void breakpointSet(final Breakpoint bp) {", "+          setProjectChanged(true);", "+        }", "+        public void breakpointReached(final Breakpoint bp) { }", "+        public void breakpointRemoved(final Breakpoint bp) {", "+          setProjectChanged(true);", "+        }    ", "+        public void watchSet(final DebugWatchData w) {", "+          setProjectChanged(true);", "+        }", "+        public void watchRemoved(final DebugWatchData w) {", "+          setProjectChanged(true);", "+        }    ", "+        public void stepRequested() { }", "+        public void currThreadSuspended() { }", "+        public void currThreadResumed() { }", "+        public void threadStarted() { }", "+        public void currThreadDied() { }", "+        public void nonCurrThreadDied() {  }", "+        public void currThreadSet(DebugThreadData thread) { }", "+      });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92b0e85f9aadac00549b180a2e942962", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "781f0d0cc2beb96bc72b49283dde3e8cd187c6ba", "commitAfterChange": "60798300f32b2ec4f4cff0f390993b3a5984e6c1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   private void _initPopup()", "signatureAfterChange": "   private void _initPopup()", "diff": ["-    _threadPopupMenu = new JPopupMenu(\"Thread Selection\");", "-    _threadMenuItem = new JMenuItem();", "-    _threadPopupMenu.add(_threadMenuItem);", "+    _threadRunningPopupMenu = new JPopupMenu(\"Thread Selection\");", "+    JMenuItem threadRunningSuspend = new JMenuItem();", "+    Action suspendAction = new AbstractAction() {", "+      public void actionPerformed(ActionEvent e) {", "+        _debugger.suspend(getSelectedThread());", "+      }", "+    };", "+    threadRunningSuspend.setAction(suspendAction);", "+    _threadRunningPopupMenu.add(threadRunningSuspend);", "+    threadRunningSuspend.setText(\"Suspend and Select Thread\");", "+    ", "+    _threadSuspendedPopupMenu = new JPopupMenu(\"Thread Selection\");", "+    JMenuItem threadSuspendedSelect = new JMenuItem();", "+    threadSuspendedSelect.setAction(suspendAction);", "+    JMenuItem threadSuspendedResume = new JMenuItem();", "+    threadSuspendedResume.setAction(new AbstractAction() {", "+      public void actionPerformed(ActionEvent e) {", "+        _debugger.resume(getSelectedThread());", "+      }", "+    });", "+    _threadSuspendedPopupMenu.add(threadSuspendedSelect);", "+    _threadSuspendedPopupMenu.add(threadSuspendedResume);", "+    threadSuspendedSelect.setText(\"Select Thread\");", "+    threadSuspendedResume.setText(\"Resume Thread\");", "+    ", "-    _stackMenuItem = new JMenuItem();", "-    _stackPopupMenu.add(_stackMenuItem);", "+    JMenuItem stackMenuItem = new JMenuItem();", "+    stackMenuItem.setAction(new AbstractAction() {", "+      public void actionPerformed(ActionEvent e) {", "+        _debugger.scrollToSource(getSelectedStackItem());", "+      }", "+    });", "+    _stackPopupMenu.add(stackMenuItem);", "+    stackMenuItem.setText(\"Scroll to Source\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94b253eabaebb73d8e837262baa391c2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashRelation.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public HashRelation(boolean indexFirst, boolean indexSecond)", "signatureAfterChange": "   public HashRelation(boolean indexSecond)", "diff": ["-  public HashRelation(boolean indexFirst, boolean indexSecond) {", "-    _pairs = new HashSet<Pair<T1, T2>>();", "-    if (indexFirst) { _firstIndex = new HashMap<T1, HashSet<T2>>(); }", "-    else { _firstIndex = null; }", "-    if (indexSecond) { _secondIndex = new HashMap<T2, HashSet<T1>>(); }", "-    else { _secondIndex = null; }", "+   */", "+  public HashRelation(boolean indexSecond) {", "+    _firstIndex = new ConcreteRelationIndex<T1, T2>(CollectUtil.<T1, PredicateSet<T2>>hashMapFactory(),", "+                                                    CollectUtil.<T2>hashSetFactory(4)) {", "+      public void addToRelation(T1 first, T2 second) { _secondIndex.added(second, first); }", "+      public void removeFromRelation(T1 first, T2 second) { _secondIndex.removed(second, first); }", "+      public void clearRelation() { _secondIndex.cleared(); }", "+    if (indexSecond) {", "+      _secondIndex = new ConcreteRelationIndex<T2, T1>(CollectUtil.<T2, PredicateSet<T1>>hashMapFactory(),", "+                                                       CollectUtil.<T1>hashSetFactory(4)) {", "+        public void addToRelation(T2 second, T1 first) { _firstIndex.added(first, second); }", "+        public void removeFromRelation(T2 second, T1 first) { _firstIndex.removed(first, second); }", "+        public void clearRelation() { _firstIndex.cleared(); }", "+      };", "+    else {", "+      _secondIndex = new LazyRelationIndex<T2, T1>(IterUtil.map(_firstIndex, Pair.<T1, T2>inverter()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e91a35d2209b0b206f336ce124d872", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "f7063fb4e23916d23eda77d98e21895bea5ea714", "commitAfterChange": "c10d025477127381eef7c7225605ca76dbc00512", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["-    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus Forward\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), \"Switch Focus Back\");", "+    ", "-    ", "-    fam.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "+    fam.put(\"Switch Focus Forward\", new AbstractAction(\"Switch Focus Forward\") {", "+    fam.put(\"Switch Focus Back\", new AbstractAction(\"Switch Focus Back\") {", "+      public void actionPerformed(ActionEvent ae) { _closeButton.requestFocusInWindow(); }", "+    });", "+    ", "-    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus Forward\");", "+    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK), \"Switch Focus Back\");", "+    ", "+    });", "+    ram.put(\"Switch Focus Back\", new AbstractAction(\"Switch Focus Back\") {", "+      public void actionPerformed(ActionEvent ae) { _findField.requestFocusInWindow(); }", "-    _replaceFindButton = new JButton(_replaceFindNextAction);", "+    _replaceFindNextButton = new JButton(_replaceFindNextAction);", "+    _replaceFindPreviousButton = new JButton(_replaceFindPreviousAction);", "+    _replaceFindPreviousAction.setEnabled(false);", "+    buttons.add(_replaceFindNextButton);", "+    buttons.add(_replaceFindPreviousButton);", "-    buttons.add(_replaceFindButton);", "-    _findPreviousButton.setNextFocusableComponent(_replaceButton);", "-    _replaceButton.setNextFocusableComponent(_replaceFindButton);", "-    _replaceFindButton.setNextFocusableComponent(_replaceAllButton);", "+    _findPreviousButton.setNextFocusableComponent(_replaceFindNextButton);", "+    _replaceFindNextButton.setNextFocusableComponent(_replaceFindPreviousButton);", "+    _replaceFindPreviousButton.setNextFocusableComponent(_replaceButton);", "+    _replaceButton.setNextFocusableComponent(_replaceAllButton);", "-            updateFirstDocumentInSearch();", "+            updateFirstDocInSearch();", "+            _replaceFindPreviousAction.setEnabled(false);", "-    //Information necessary to change the behavior of the Enter key in the _findField */", "+    //Change the behavior of the Enter, Tab, and Ctrl-Enter keys in the _findField and _replaeField */", "-    KeyStroke switchFocusKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "-    km.addActionForKeyStroke(switchFocusKey, _findFieldSwitchFocusAction); ", "+    KeyStroke switchFocusForwardKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0);", "+    km.addActionForKeyStroke(switchFocusForwardKey, _findFieldSwitchFocusForwardAction); ", "-    Action newLineAction = actions.get(DefaultEditorKit.insertBreakAction);", "+    KeyStroke switchFocusBackKey = KeyStroke.getKeyStroke(KeyEvent.VK_TAB, Event.SHIFT_MASK);", "+    km.addActionForKeyStroke(switchFocusBackKey, _findFieldSwitchFocusBackAction); ", "+    ", "+//    Action newLineAction = new TextAction(\"NewLine Action\") {", "+//      public void actionPerformed(ActionEvent e) {", "+//        String text = _findField.getText();", "+//        int caretPos = _findField.getCaretPosition();", "+//        String textBeforeCaret = text.substring(0, caretPos);", "+//        String textAfterCaret = text.substring(caretPos);", "+//        _findField.setText(textBeforeCaret.concat(\"\\n\"/*System.getProperty(\"line.separator\")*/).concat(textAfterCaret));", "+//        _findField.setCaretPosition(caretPos+1);", "+//      }", "+//    };", "+    ", "+    Action newLineAction = new DefaultEditorKit.InsertBreakAction();", "+    ", "-    rkm.addActionForKeyStroke(switchFocusKey, _replaceFieldSwitchFocusAction); ", "+    rkm.addActionForKeyStroke(switchFocusForwardKey, _replaceFieldSwitchFocusForwardAction); ", "+    rkm.addActionForKeyStroke(switchFocusBackKey, _replaceFieldSwitchFocusBackAction);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a72c8738c45cdb4cb3d7a32196d90669", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "dab739e9c0a893840c19d552b534083722093495", "commitAfterChange": "9d7de430d203354a52d3faa0378a92c50af92fb7", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "     public TestResult startJUnit() throws IOException", "signatureAfterChange": "     public TestResult startJUnit() throws ClassNotFoundException, IOException", "diff": ["-    public TestResult startJUnit() throws IOException {", "-      // Compile and save before proceeding", "+    public TestResult startJUnit() throws ClassNotFoundException, IOException {", "+      // Compile and save before proceeding.", "-      if(isModifiedSinceSave()) {", "+      if (isModifiedSinceSave()) {", "-          throw new UnexpectedException(e);", "+          notifyListeners(new EventNotifier() {", "+            public void notifyListener(GlobalModelListener l) {", "+            l.junitEnded();", "+            l.nonTestCase();", "+          }", "+          });", "+          return null;", "-        if(testFilename.toLowerCase().endsWith(\".java\")) {", "+        if (testFilename.toLowerCase().endsWith(\".java\")) {", "-          throw new UnexpectedException", "-            (new IllegalArgumentException(\"File is not a Java file.\"));", "+          notifyListeners(new EventNotifier() {", "+            public void notifyListener(GlobalModelListener l) {", "+            l.junitEnded();", "+            l.nonTestCase();", "+          }", "+          });", "+          return null;", "-        catch(InvalidPackageException e) {", "-          throw new UnexpectedException(e);", "+        catch (InvalidPackageException e) {", "+          notifyListeners(new EventNotifier() {", "+            public void notifyListener(GlobalModelListener l) {", "+            l.junitEnded();", "+            l.nonTestCase();", "+          }", "+          });", "+          return null;", "-          throw new UnexpectedException(e);", "+          notifyListeners(new EventNotifier() {", "+            public void notifyListener(GlobalModelListener l) {", "+            l.junitEnded();", "+          }", "+          });", "+          throw e;", "+        notifyListeners(new EventNotifier() {", "+          public void notifyListener(GlobalModelListener l) {", "+          l.junitEnded();", "+          l.nonTestCase();", "+        }", "+        });", "+      catch (NoClassDefFoundError e) {", "+        // Method getTest in junit.framework.BaseTestRunner can throw a", "+        // NoClassDefFoundError (via reflection).", "+        notifyListeners(new EventNotifier() {", "+          public void notifyListener(GlobalModelListener l) {", "+          l.junitEnded();", "+        }", "+        });", "+        throw e;", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2f766f8a9e5c924f2446bcbd536696d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "9fab12d2706a8bcd0fd56dcb5611b998d9aa0c25", "commitAfterChange": "149feb3f2af1920c19f6930f765f209a93ed7ca6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "signatureAfterChange": "   public FindReplaceDialog(MainFrame frame, SingleDisplayModel model)", "diff": ["+    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "+    _updateMachine();", "-    //i = this.WHEN_FOCUSED;", "-    //i = this.WHEN_IN_FOCUSED_WINDOW;", "-    //InputMap im = _mainPanel.getInputMap(i);", "-    InputMap im = _findField.getInputMap(i);", "-    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "-    im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "-    //ActionMap am = _mainPanel.getActionMap();", "-    ActionMap am = _findField.getActionMap();", "-    am.put(\"Find Next\", _findNextAction);", "-    am.put(\"Close\", new AbstractAction(\"Close\") {", "+    InputMap fim = _findField.getInputMap(i);", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0), \"Close\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), \"Find Next\");", "+    fim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    ActionMap fam = _findField.getActionMap();", "+    fam.put(\"Find Next\", _findNextAction);", "+    fam.put(\"Close\", new AbstractAction(\"Close\") {", "-", "+    ", "+    fam.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "+      public void actionPerformed(ActionEvent ae) { _findField.getNextFocusableComponent().requestFocusInWindow(); }", "+    });", "+    ", "+    InputMap rim = _replaceField.getInputMap(i);", "+    rim.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), \"Switch Focus\");", "+    ActionMap ram = _replaceField.getActionMap();", "+    ram.put(\"Switch Focus\", new AbstractAction(\"Switch Focus\") {", "+      public void actionPerformed(ActionEvent ae) { _replaceField.getNextFocusableComponent().requestFocusInWindow(); }", "+    });", "+    ", "+    ", "+    ", "+    _findPreviousButton = new JButton(_findPreviousAction);", "-    //_closeButton = new JButton(_closeAction);", "+    buttons.add(_findPreviousButton);", "-    //buttons.add(_closeButton);", "+    ", "-    JLabel findLabel = new JLabel(\"Find\", SwingConstants.LEFT);", "-    //findLabel.setLabelFor(_findField);", "-    findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+    _findLabel = new JLabel(\"Find Next\", SwingConstants.LEFT);", "+    _findLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-    JLabel replaceLabel = new JLabel(\"Replace\", SwingConstants.LEFT);", "-    // replaceLabel.setLabelFor(_replaceField);", "-    replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "-", "-    //JLabel matchLabel = new JLabel(\"Match\", SwingConstants.LEFT); // JL", "-    //matchLabel.setHorizontalAlignment(SwingConstants.LEFT);  // JL", "+    _replaceLabel = new JLabel(\"Replace With\", SwingConstants.LEFT);", "+    _replaceLabel.setHorizontalAlignment(SwingConstants.LEFT);", "+    ", "-", "-    // _labelPanel.setLayout(new BoxLayout(_labelPanel, BoxLayout.Y_AXIS));", "-", "-    //_labelPanel.add(Box.createGlue());", "-    _labelPanel.add(findLabel);", "-    _labelPanel.add(replaceLabel);", "-    // _labelPanel.add(matchLabel); // JL", "+    _labelPanel.add(_findLabel);", "+    _labelPanel.add(_replaceLabel);", "-", "-    _machine = new FindReplaceMachine(_model.getDocumentIterator());", "+    _labelPanel.setFocusable(false);", "+   ", "-    _updateMachine();", "-    ", "-    SearchBackwardsListener bsl = new SearchBackwardsListener();", "-    _searchBackwards = new JCheckBox(\"Search Backwards\", DrJava.getConfig().getSetting(OptionConstants.FIND_SEARCH_BACKWARDS));", "-    _searchBackwards.addItemListener(bsl);", "-//    _searchBackwards.setMargin(new Insets(0,4,0,3));", "-", "+    ", "-    ", "-    ", "-//    haven't completed this functionality yet    ", "+     ", "-    _ignoreCommentsAndStrings = new JCheckBox(\"Ignore Comments and Strings\", DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS));", "+    _ignoreCommentsAndStrings = new JCheckBox(\"No Comments/Strings\", DrJava.getConfig().getSetting(OptionConstants.FIND_NO_COMMENTS_STRINGS));", "-    ", "-    //FindAnyOccurrenceListener faol = new FindAnyOccurrenceListener(); // JL", "-    //_findAnyOccurrence = new JRadioButton(\"Any Occurrence\"); // JL", "-    //_findAnyOccurrence.addActionListener(faol); // JL", "-    _commentsAndStringsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _commentsAndStringsPanel.add(_ignoreCommentsAndStrings);", "-        ", "-    _lowerCheckPanel.add(_matchWholeWord);", "-    _lowerCheckPanel.add(_searchAllDocuments); // JL (added)", "-    //_lowerCheckPanel.add(_findAnyOccurrence); // JL", "-    // add radiobuttons to the buttongroup", "-    //_radioButtonGroup = new ButtonGroup(); // JL", "-    //_radioButtonGroup.add(_matchWholeWord); // JL", "-    //_radioButtonGroup.add(_findAnyOccurrence); // JL", "+    _lowerCheckPanel.add(_matchWholeWord); ", "+    _lowerCheckPanel.add(_ignoreCommentsAndStrings);", "-    _matchCaseAndClosePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "-    _matchCaseAndClosePanel.add(_matchCase); // JL", "-    _matchCaseAndClosePanel.add(_searchBackwards); // JL", "-    //_matchCaseAndClosePanel.add(_searchAllDocuments); // JL - moved to _radioButtonGroup", "-    //_matchCaseAndClosePanel.add(_matchWholeWord);", "-    //_matchCaseAndClosePanel.add(_findAnyOccurrence);", "-    _matchCaseAndClosePanel.add(_closePanel);", "-    //_findAnyOccurrence.setSelected(true); // JL", "+    _matchCaseAndAllDocsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));", "+    _matchCaseAndAllDocsPanel.add(_matchCase);", "+    _matchCaseAndAllDocsPanel.add(_searchAllDocuments); ", "+    _searchAllDocuments.setSelected(false);", "-", "-", "-//    _rightPanel = new JPanel(new GridLayout(1,2,5,0));", "-    JPanel midPanel = new JPanel(new GridLayout(2,1));", "-    JPanel farRightPanel = new JPanel(new GridLayout(3,1));", "-    midPanel.add(_findPane);", "-    midPanel.add(_replacePane);", "-//    midPanel.add(wrap(_message)); // JL", "-    // midPanel.add(wrap(_lowerCheckPanel)); // JL", "-", "-    /******** Set up the Panel containing all 3 rows of checkboxes ********/", "-    farRightPanel.add(_matchCaseAndClosePanel);", "-    farRightPanel.add(_lowerCheckPanel); // JL", "-    farRightPanel.add(_commentsAndStringsPanel);", "-    //farRightPanel.add(_message); // JL", "+    JPanel fieldsPanel = new JPanel(new GridLayout(2,1));", "+    fieldsPanel.add(_findPane);", "+    fieldsPanel.add(_replacePane);", "-    /******** Set upt the Panel containing the three above main panels ********/", "-     ", "-    _rightPanel = new JPanel(new BorderLayout(5, 0));", "+    /******** Set up the Panel containing both rows of checkboxes ********/", "+    JPanel optionsPanel = new JPanel(new GridLayout(2,1));", "+    optionsPanel.add(_matchCaseAndAllDocsPanel);", "+    optionsPanel.add(_lowerCheckPanel);", "+", "+", "+    /******** Set upt the Panel containing the two above main panels ********/", "+    JPanel midPanel = new JPanel(new BorderLayout(5,5));", "+    midPanel.add(fieldsPanel, BorderLayout.CENTER);", "+    midPanel.add(optionsPanel, BorderLayout.EAST);", "+    ", "+    ", "+    /******** Set upt the Panel containing the midPanel and the closePanel ********/", "+    _rightPanel = new JPanel(new BorderLayout(5, 5));", "-    _rightPanel.add(farRightPanel, BorderLayout.EAST);", "-    //_rightPanel.add(_lowerCheckPanel, BorderLayout.SOUTH);", "+    _rightPanel.add(_closePanel, BorderLayout.EAST);    ", "-    hookComponents(this, _rightPanel, _labelPanel,buttons);", "+    hookComponents(this, _rightPanel, _labelPanel, buttons);", "-    _matchCase.setNextFocusableComponent(_searchBackwards);", "-    _searchBackwards.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "-    _matchWholeWord.setNextFocusableComponent(_searchAllDocuments); // JL (edited)", "-    _searchAllDocuments.setNextFocusableComponent(_ignoreCommentsAndStrings); // JL (edited)", "+    _matchCase.setNextFocusableComponent(_searchAllDocuments);", "+    _searchAllDocuments.setNextFocusableComponent(_matchWholeWord); // JL (edited)", "+    _matchWholeWord.setNextFocusableComponent(_ignoreCommentsAndStrings); // JL (edited)", "-    //_findAnyOccurrence.setNextFocusableComponent(_findNextButton); // JL", "+    _findNextButton.setNextFocusableComponent(_findPreviousButton);", "+    _findPreviousButton.setNextFocusableComponent(_replaceButton);", "+    _replaceButton.setNextFocusableComponent(_replaceFindButton);", "+    _replaceFindButton.setNextFocusableComponent(_replaceAllButton);", "-", "+    ", "+    ", "+    /******** Document, Focus and Key Listeners ********/", "+    ", "-    });", "+    });  ", "-       ", "+    ", "-      ", "-    ", "+    _findField.addFocusListener(_findFieldSwitchFocusListener);", "+    _replaceField.addFocusListener(_replaceFieldSwitchFocusListener);", "+          ", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL) {", "-//          _findField.removeKeyListener(_findEnterListener);", "-          if (_findField.getKeyListeners().length <= 1 )", "-            _findField.addKeyListener(_newLineEnterListener); ", "-        }", "+        if (e.getKeyCode() == KeyEvent.VK_CONTROL)", "+          if (_findField.getKeyListeners().length <= 1 )  _findField.addKeyListener(_newLineEnterListener); ", "-        if (e.getKeyCode() == KeyEvent.VK_CONTROL) {", "-          _findField.removeKeyListener(_newLineEnterListener);", "-//          if (_findField.getKeyListeners().length <= 1)", "-//            _findField.addKeyListener(_findEnterListener);", "-          }", "+        if (e.getKeyCode() == KeyEvent.VK_CONTROL) _findField.removeKeyListener(_newLineEnterListener);", "-    });", "-    ", "-    ", "+    });   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4021b2879ff90d1086e70d181d57c3b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "2c201f7935638475a11fa56b3f2494c245d1ef90", "commitAfterChange": "2f4a42f54aaa74c25ba0a929e664640f896ec43a", "methodNumberBeforeChange": 267, "methodNumberAfterChange": 270, "signatureBeforeChange": "    public MainFrame()", "signatureAfterChange": "    public MainFrame()", "diff": ["-    _tabbedPanesFrame = new TabbedPanesFrame(MainFrame.this,_tabbedPane,_mainSplit);", "+    _tabbedPanesFrame = new DetachedFrame(MainFrame.this, new Lambda<Void,DetachedFrame>() {", "+      public Void apply(DetachedFrame frame) {", "+        frame.getContentPane().add(_tabbedPane);", "+        return null;", "+      }", "+    }, new Lambda<Void,DetachedFrame>() {", "+      public Void apply(DetachedFrame frame) {", "+        _mainSplit.setBottomComponent(_tabbedPane);", "+        return null;", "+      }", "+    });", "+    ", "+    // Create detachable debug frame", "+    if (_debugPanel!=null) { // using debugger", "+      _debugFrame = new DetachedFrame(MainFrame.this, new Lambda<Void,DetachedFrame>() {", "+        public Void apply(DetachedFrame frame) {", "+          frame.getContentPane().add(_debugPanel);", "+          return null;", "+        }", "+      }, new Lambda<Void,DetachedFrame>() {", "+        public Void apply(DetachedFrame frame) {", "+          _debugSplitPane.setTopComponent(_docSplitPane);", "+          _debugSplitPane.setBottomComponent(_debugPanel);", "+          _mainSplit.setTopComponent(_debugSplitPane);", "+          return null;", "+        }", "+      });", "+      _debugFrame.addWindowListener(new WindowAdapter() {", "+        public void windowClosing(WindowEvent we) {", "+          if (_debugFrame==null) return; // debugger not used", "+          _detachDebugFrameMenuItem.setSelected(false);", "+          DrJava.getConfig().setSetting(DETACH_DEBUGGER, false);", "+        }", "+      });", "+    }", "+    else { // not using debugger", "+      _debugFrame = null;", "+    }", "+    ", "+    initDebugFrame();", "-        int days = DrJava.getConfig().getSetting(DRJAVA_SURVEY_DAYS);", "-        java.util.Date nextCheck = ", "-          new java.util.Date(DrJava.getConfig().getSetting(OptionConstants.LAST_DRJAVA_SURVEY)", "-                               + days * 24L * 60 * 60 * 1000); // x days after last check; 24L ensures long accumulation", "-        if (new java.util.Date().after(nextCheck)) {", "+        if (DrJavaSurveyPopup.maySubmitSurvey()) {", "+          // either enough days have passed, or the configuration has changed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cce7f01a66957132665f4a178496476a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "commitAfterChange": "6df23b9d947a754084cff460e34d203b0d81fd48", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": "    private void _setUpTabs()", "signatureAfterChange": "    private void _setUpTabs()", "diff": ["-    _interactionsScroll = new BorderlessScrollPane(_interactionsPane);", "+    JScrollPane interactionsScroll = new BorderlessScrollPane(_interactionsPane);", "-    _interactionsContainer.add(_interactionsScroll, BorderLayout.CENTER);", "+    _interactionsContainer.add(interactionsScroll, BorderLayout.CENTER);", "-        if (_tabbedPane.getSelectedComponent() == _interactionsScroll) {", "+        if (_tabbedPane.getSelectedComponent() == _interactionsContainer) {", "+    ", "+    _interactionsPane.addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) {", "+        _lastFocusOwner = _interactionsContainer;", "+      }", "+    });", "+    _consolePane.addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) {", "+        _lastFocusOwner = _consoleScroll;", "+      }", "+    });", "+//    _compilerErrorPanel.addFocusListener(new LastFocusListener());", "+//    _junitErrorPanel.addFocusListener(new LastFocusListener());", "+//    _javadocErrorPanel.addFocusListener(new LastFocusListener());", "+//    _findReplace.addFocusListener(new LastFocusListener());", "+    _compilerErrorPanel.getMainPanel().addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) {", "+        _lastFocusOwner = _compilerErrorPanel;", "+      }", "+    });", "+    _junitErrorPanel.getMainPanel().addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) {", "+        _lastFocusOwner = _junitErrorPanel;", "+      }", "+    });", "+    _javadocErrorPanel.getMainPanel().addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) {", "+        _lastFocusOwner = _javadocErrorPanel;", "+      }", "+    });", "+    _findReplace.getFindField().addFocusListener(new FocusAdapter() {", "+      public void focusGained(FocusEvent e) {", "+        _lastFocusOwner = _findReplace;", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4442c1a947198fbcfb36a286336789", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ExecuteExternalDialog.java", "commitBeforeChange": "91d926f5e8557085503ecb402ffa610f4022f505", "commitAfterChange": "97f4d18b1b96ab5f6fef892b2420a830c7869018", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   private void initComponents()", "signatureAfterChange": "   private void initComponents()", "diff": ["-    Action okCommandAction = new AbstractAction(\"Run Command Line\") {", "+     _tabbedPane = new JTabbedPane();", "+ ", "+    Action runCommandAction = new AbstractAction(\"Run Command Line\") {", "-        _okCommand();", "+        _runCommand();", "-    _okCommandButton = new JButton(okCommandAction);", "-    Action okJavaAction = new AbstractAction(\"Run Java Class\") {", "+    _runCommandButton = new JButton(runCommandAction);", "+    Action runJavaAction = new AbstractAction(\"Run Java Class\") {", "-        _okJava();", "+        _runJava();", "-    _okJavaButton = new JButton(okJavaAction);", "+    _runJavaButton = new JButton(runJavaAction);", "-    _insertVarDialog = new InsertVariableDialog(_mainFrame, System.getProperties(), _insertVarDialogMonitor);", "-    Action insertCommandAction = new AbstractAction(\"Insert Variable\") {", "+    Action saveCommandAction = new AbstractAction(\"Save to Menu...\") {", "+      public void actionPerformed(ActionEvent e) {", "+        _saveCommand();", "+      }", "+    };", "+    _saveCommandButton = new JButton(saveCommandAction);", "+    Action saveJavaAction = new AbstractAction(\"Save to Menu...\") {", "+      public void actionPerformed(ActionEvent e) {", "+        _saveJava();", "+      }", "+    };", "+    _saveJavaButton = new JButton(saveJavaAction);", "+", "+    HashMap<String, Properties> m = new HashMap<String, Properties>();", "+    m.put(\"Java\", System.getProperties());", "+    m.put(\"DrJava\", System.getProperties());", "+    m.put(\"Project\", System.getProperties());", "+    _insertVarDialog = new InsertVariableDialog(_mainFrame, m, _insertVarDialogMonitor);", "+    Action insertCommandAction = new AbstractAction(\"Insert Variable...\") {", "-    Action insertJavaAction = new AbstractAction(\"Insert Variable\") {", "+    _insertCommandButton.setEnabled(false);", "+    Action insertJavaAction = new AbstractAction(\"Insert Variable...\") {", "+    _insertJavaButton.setEnabled(false);", "-    super.setResizable(false);", "-    // pack();", "-", "+    super.setResizable(true);", "+    ", "+    SwingUtilities.invokeLater(new Runnable() {", "+      public void run() {", "+        _commandLine.requestFocus();", "+      }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9850a49cce6a77e0ef7ebd61d724f1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "e390ee17a6b432f8b404fb9fd5d85ab72141897f", "commitAfterChange": "12aaa1ddc474cfa046da07f830508d72c218a8f6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public ConfigFrame ()", "signatureAfterChange": "   public ConfigFrame ()", "diff": ["+    ", "-    _mainPanel= new JPanel();", "-    _tree.addTreeSelectionListener( new PanelTreeSelectionListener());", "+    _mainPanel= new JPanel();", "+    _mainPanel.setLayout(new BorderLayout());", "+    _tree.addTreeSelectionListener( new PanelTreeSelectionListener());", "+        ", "-    cp.add(_mainPanel, BorderLayout.CENTER);", "+    cp.setLayout(new BorderLayout());", "+    //cp.add(_mainPanel, BorderLayout.CENTER);", "-    JScrollPane scroll = new JScrollPane(_tree);", "-    //scroll.setMinimumSize( new Dimension( 100 , scroll.getHeight()));", "-    cp.add(scroll, BorderLayout.WEST);", "+    JScrollPane treeScroll = new JScrollPane(_tree);", "+    //cp.add(treeScroll, BorderLayout.WEST);", "+    ", "+    _splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,", "+                                treeScroll,", "+                                _mainPanel);", "+    cp.add(_splitPane, BorderLayout.CENTER);", "+    ", "+        apply();", "+        ConfigFrame.this.hide();", "+      }", "+    });", "+    ", "+    _applyButton = new JButton(\"Apply\");", "+    _applyButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        apply();", "+      }", "+    });", "+    ", "+    _cancelButton = new JButton(\"Cancel\");", "+    _cancelButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        reset();", "+    bottom.add(_applyButton);", "+    bottom.add(_cancelButton);", "-    //pack();", "-    /**setSize((int) (owner.getWidth() * (4f/5f)),", "-            (int) (owner.getHeight() * (4f/5f)));*/", "+    ", "+    // Set all dimensions ----", "+    int width = getWidth() / 4;", "+    System.out.println(\"width: \" + getWidth());", "+    System.out.println(\"width for divider: \" + width);", "+    _splitPane.setDividerLocation(width);", "+    _mainPanel.setPreferredSize(new Dimension(getWidth() - width, _splitPane.getHeight()));"]}], "num": 23152}
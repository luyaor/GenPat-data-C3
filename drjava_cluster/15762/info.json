{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80b21789e30378d874b1d506cdbe2e58", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dc985b2c16656c5c8ac299dfad77532", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "90f3515e98e577591a6618f1cf8f59bee5e6c509", "commitAfterChange": "1acb7e79f21833d9f8611e81be6afdbc403d9516", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "    private void _updateWatches()", "signatureAfterChange": "    private void _updateWatches()", "diff": ["-    int stackIndex = 0;", "-    StackFrame currFrame = null;", "-    List frames = null;", "+      int stackIndex = 0;", "+      StackFrame currFrame = null;", "+      List frames = null;", "-    }", "-    catch (IncompatibleThreadStateException itse) {", "-      return;", "-    }", "-    currFrame = (StackFrame) frames.get(stackIndex);", "-    stackIndex++;", "-    Location location = currFrame.location();", "-    ReferenceType rt = location.declaringType();", "-    for (int i = 0; i < _watches.size(); i++) {", "-      WatchData currWatch = _watches.elementAt(i);", "-      String currName = currWatch.getName();", "-      String currValue = currWatch.getValue();", "-      // check for \"this\"", "-      if (currName.equals(\"this\")) {", "-        ObjectReference obj = currFrame.thisObject();", "-        if (obj != null) {", "-          currWatch.setValue(obj);", "-          currWatch.setType(obj.type());", "+      currFrame = (StackFrame) frames.get(stackIndex);", "+      stackIndex++;", "+      Location location = currFrame.location();", "+      ReferenceType rt = location.declaringType();", "+      for (int i = 0; i < _watches.size(); i++) {", "+        WatchData currWatch = _watches.elementAt(i);", "+        String currName = currWatch.getName();", "+        String currValue = currWatch.getValue();", "+        // check for \"this\"", "+        if (currName.equals(\"this\")) {", "+          ObjectReference obj = currFrame.thisObject();", "+          if (obj != null) {", "+            currWatch.setValue(_getValue(obj));", "+            currWatch.setType(obj.type());", "+          }", "+          else {", "+            currWatch.setValue(WatchUndefinedValue.Singleton);", "+            currWatch.setType(null);", "+          }", "+          continue;", "+        } ", "+        //List frames = null;", "+        LocalVariable localVar = null;", "+        try {", "+          localVar = currFrame.visibleVariableByName(currName);", "-        else {", "-          currWatch.setValue(WatchUndefinedValue.Singleton);", "-          currWatch.setType(null);", "+        catch (AbsentInformationException aie) {", "-        continue;", "-      } ", "-      //List frames = null;", "-      LocalVariable localVar = null;", "-      try {", "-        localVar = currFrame.visibleVariableByName(currName);", "-      }", "-      catch (AbsentInformationException aie) {", "-      }", "-      ", "-      ReferenceType outerRt = rt;", "-      // if the variable being watched is not a local variable, check if it's a field", "-      if (localVar == null) {", "-        Field field = outerRt.fieldByName(currName);", "-        // if the variable is not a field either, it's not defined in this ", "-        // ReferenceType's scope, keep going further out in scope.", "-        String className = outerRt.name();", "-        while (field == null) {", "+        ReferenceType outerRt = rt;", "+        // if the variable being watched is not a local variable, check if it's a field", "+        if (localVar == null) {", "+          Field field = outerRt.fieldByName(currName);", "-          // crop off the $ if there is one and anything after it", "-          int indexOfDollar = className.lastIndexOf('$');    ", "-          if (indexOfDollar > -1) {", "-            className = className.substring(0, indexOfDollar);", "-          }", "-          else {", "-            // There is no $ in the className, we're at the outermost class and the", "-            // field still was not found", "-            break;", "-          }", "-          outerRt = (ReferenceType)_vm.classesByName(className).get(0);", "-          if (outerRt == null) {", "-            break;", "-          }", "-          field = outerRt.fieldByName(currName);", "-        }", "-        if (field != null) {", "-          // check if the field is static", "-          if (field.isStatic()) {", "-            currWatch.setValue(outerRt.getValue(field));", "-            try {", "-              currWatch.setType(field.type());", "+          // if the variable is not a field either, it's not defined in this ", "+          // ReferenceType's scope, keep going further out in scope.", "+          String className = outerRt.name();", "+          while (field == null) {", "+            ", "+            // crop off the $ if there is one and anything after it", "+            int indexOfDollar = className.lastIndexOf('$');    ", "+            if (indexOfDollar > -1) {", "+              className = className.substring(0, indexOfDollar);", "-            catch (ClassNotLoadedException cnle) {", "-              currWatch.setType(null);", "+            else {", "+              // There is no $ in the className, we're at the outermost class and the", "+              // field still was not found", "+              break;", "+            outerRt = (ReferenceType)_vm.classesByName(className).get(0);", "+            if (outerRt == null) {", "+              break;", "+            }", "+            field = outerRt.fieldByName(currName);", "-          else {", "-            StackFrame outerFrame = currFrame;", "-            // the field is not static", "-            // Check if the frame represents a native or static method and", "-            // keep going down the stack frame looking for the frame that", "-            // has the same ReferenceType that we found the Field in.", "-            // This is a hack, remove it to slightly improve performance but", "-            // at the loss of ever being able to watch outer instance", "-            // fields. If unremoved, this will work sometimes, but not always.", "-            while (outerFrame.thisObject() != null && ", "-                   !outerFrame.thisObject().referenceType().equals(outerRt) &&", "-                   stackIndex < frames.size()) {", "-              outerFrame = (StackFrame) frames.get(stackIndex);", "-              stackIndex++;", "-            }", "-            if (stackIndex < frames.size() && outerFrame.thisObject() != null) { ", "-              // then we found the right stack frame", "-              currWatch.setValue(outerFrame.thisObject().getValue(field));", "+          if (field != null) {", "+            // check if the field is static", "+            if (field.isStatic()) {", "+              currWatch.setValue(_getValue(outerRt.getValue(field)));", "-              currWatch.setValue(WatchUndefinedValue.Singleton);", "-              currWatch.setType(null);", "+              StackFrame outerFrame = currFrame;", "+              // the field is not static", "+              // Check if the frame represents a native or static method and", "+              // keep going down the stack frame looking for the frame that", "+              // has the same ReferenceType that we found the Field in.", "+              // This is a hack, remove it to slightly improve performance but", "+              // at the loss of ever being able to watch outer instance", "+              // fields. If unremoved, this will work sometimes, but not always.", "+              while (outerFrame.thisObject() != null && ", "+                     !outerFrame.thisObject().referenceType().equals(outerRt) &&", "+                     stackIndex < frames.size()) {", "+                outerFrame = (StackFrame) frames.get(stackIndex);", "+                stackIndex++;", "+              }", "+              if (stackIndex < frames.size() && outerFrame.thisObject() != null) { ", "+                // then we found the right stack frame", "+                currWatch.setValue(_getValue(outerFrame.thisObject().getValue(field)));", "+                try {", "+                  currWatch.setType(field.type());", "+                }", "+                catch (ClassNotLoadedException cnle) {", "+                  currWatch.setType(null);", "+                }", "+              }", "+              else {", "+                currWatch.setValue(WatchUndefinedValue.Singleton);", "+                currWatch.setType(null);", "+              }", "+          }", "+          else {", "+            currWatch.setValue(WatchUndefinedValue.Singleton);", "+            currWatch.setType(null);", "-          currWatch.setValue(WatchUndefinedValue.Singleton);", "-          currWatch.setType(null);", "-        }", "-      }", "-      else {", "-        currWatch.setValue(currFrame.getValue(localVar));", "-        try {", "-          currWatch.setType(localVar.type());", "-        }", "-        catch (ClassNotLoadedException cnle) {", "-          currWatch.setType(null);", "+          currWatch.setValue(_getValue(currFrame.getValue(localVar)));", "+          try {", "+            currWatch.setType(localVar.type());", "+          }", "+          catch (ClassNotLoadedException cnle) {", "+            currWatch.setType(null);", "+          }", "+    catch (IncompatibleThreadStateException itse) {", "+      return;", "+    }", "+    catch (InvalidStackFrameException isfe) {", "+      return;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55f98b06caf0ef2c0117db26d0a60c8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "69464949f304455efe72f78ee854438cff27207a", "commitAfterChange": "17600b9f1362dad642f89cf0296e45c7ada70a5d", "methodNumberBeforeChange": 481, "methodNumberAfterChange": 481, "signatureBeforeChange": "   private boolean _saveProjectAs()", "signatureAfterChange": "   private boolean _saveProjectAs()", "diff": ["-      if ((file != null) && (! file.exists() || MainFrameStatics.verifyOverwrite(MainFrame.this, file))) { ", "-        _model.setProjectFile(file);", "-        _currentProjFile = file;", "+      try {", "+        // by getting the canonical file, we make sure that we get an IOException if the filename is illegal", "+        if ((file != null) && (! file.getCanonicalFile().exists() || MainFrameStatics.verifyOverwrite(MainFrame.this, file))) { ", "+          _model.setProjectFile(file);", "+          _currentProjFile = file;", "+        }", "+      }", "+      catch(IOException e) {", "+        MainFrameStatics.showIOError(MainFrame.this, e);", "+        return false;"]}], "num": 15762}
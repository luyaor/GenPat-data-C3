{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eed86fb2e4b7a6fba673829c26e1088a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a65c124fca8588aa89013cba73f70c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "   public TypeData forCastExpression(CastExpression that)", "signatureAfterChange": "   public TypeData forCastExpression(CastExpression that)", "diff": ["-    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "-    final TypeData value_result = that.getValue().visit(this);", "+    final SymbolData typeRes = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "+    final TypeData valueRes = that.getValue().visit(this);", "-    if (type_result == null) {", "+    if (typeRes == null) {", "-    if (value_result == null || !assertFound(value_result, that.getValue())) {", "+    if (valueRes == null || !assertFound(valueRes, that.getValue())) {", "-      return type_result.getInstanceData();", "+      return typeRes.getInstanceData();", "-    // Neither type_result nor value_result are null.", "-    return forCastExpressionOnly(that, type_result, value_result);", "+    // Neither typeRes nor valueRes are null.", "+    return forCastExpressionOnly(that, typeRes, valueRes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3c3088c3349d065c11ea194fa7c1093", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "dd97c2983de18f5d46f596ce3c536a3b581f0ec4", "commitAfterChange": "e5b59097570657040bcd74f7a31c6db7f03359ce", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "signatureAfterChange": "   public TypeData forInstanceofExpression(InstanceofExpression that)", "diff": ["-   */", "+    */", "-    throw new RuntimeException(\"Internal Program Error: Instance of expressions are not supported.  This should have been caught before the Type Checker.  Please report this bug.\");", "+    //this call to getSymbolData will not throw any errors, but may return null.  If null is returned, an error needs to be added.", "+    final SymbolData type_result = getSymbolData(that.getType().getName(), _data.getSymbolData(), that.getType(), false);", "+    final TypeData value_result = that.getValue().visit(this);", "+    ", "+    if (type_result == null) {", "+      _addError(that.getType().getName()", "+                  + \" cannot appear as the type of a instanceof expression because it is not a valid type\", ", "+                that.getType());", "+      return null;", "+    }", "+    ", "+    if (! assertFound(value_result, that.getValue())) {", "+      // An error occurred type-checking the value; return the expected type to", "+      // allow type-checking to continue.", "+      return SymbolData.BOOLEAN_TYPE.getInstanceData();", "+    }", "+    ", "+    // Neither type_result nor value_result are null.", "+    return forInstanceofExpressionOnly(that, type_result, value_result);"]}], "num": 17038}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1b8ac1e1763d8d6e02cd8e18d6220b5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265a03a38d30f0fd67bfceca52156b78", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private void _copyBack(ThreadReference threadRef) throws IncompatibleThreadStateException, AbsentInformationException,       InvocationException, DebugException", "signatureAfterChange": "   private void _copyBack(ThreadReference threadRef) throws IncompatibleThreadStateException, AbsentInformationException,       InvocationException, DebugException", "diff": ["-    if (printMessages) System.out.println(\"Getting debug interpreter\");", "-    if (printMessages) System.out.println(\"Getting variables\");", "+    if (printMessages) printStream.println(\"Getting debug interpreter\");", "+    if (printMessages) printStream.println(\"Getting variables\");", "-      if (printMessages) System.out.println(\"Iterating through vars\");", "+      if (printMessages) printStream.println(\"Iterating through vars\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ce7736f6104a48dfed36579b106c57", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugContextTest.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void testStaticFieldsConsistent() throws Exception", "signatureAfterChange": "   public void testStaticFieldsConsistent() throws Exception", "diff": ["-    if (printMessages) System.out.println(\"----testStaticFieldsConsistent----\");", "+    if (printMessages) printStream.println(\"----testStaticFieldsConsistent----\");", "-    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4);", "+    _debugger.toggleBreakpoint(doc,CLASS_WITH_STATIC_FIELD.indexOf(\"System.out.println\"), 4,true);", "-      System.out.println(\"----After breakpoint:\\n\" + getInteractionsText());", "+      printStream.println(\"----After breakpoint:\\n\" + getInteractionsText());", "-      System.out.println(\"****\"+getInteractionsText());", "+      printStream.println(\"****\"+getInteractionsText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5caf0657219c85117606595ec8cce919", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/JPDADebugger.java", "commitBeforeChange": "69fadaac6ec47b6f4924c16b2574b0f6d835a7b3", "commitAfterChange": "bd397d7031a3a6391c14c55c6410a49e1be43ebd", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 76, "signatureBeforeChange": "   private ObjectReference _getDebugInterpreter(String interpreterName, ThreadReference threadRef) throws      InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException,      DebugException", "signatureAfterChange": "   private ObjectReference _getDebugInterpreter(String interpreterName, ThreadReference threadRef) throws      InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, InvocationException,      DebugException", "diff": ["-          System.out.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "-          System.out.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "+          printStream.println(\"Invoking \" + m.toString() + \" on \" + args.toString());", "+          printStream.println(\"Thread is \" + threadRef.toString() + \" <suspended = \" + threadRef.isSuspended() + \">\");", "-        if ( printMessages ) System.out.println(\"Returning...\");", "+        if ( printMessages ) printStream.println(\"Returning...\");"]}], "num": 18864}
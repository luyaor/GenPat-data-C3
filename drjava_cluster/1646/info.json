{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57452b9b7845d0912c55fc19a710e56d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40138c9d6bb1bd3fc14964db18a54d73", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/AbstractConsoleController.java", "commitBeforeChange": "7100bfae3584eff8b8b1993fd999385d8f88ea13", "commitAfterChange": "6bcdef7d4202e06be1c5717fc181a0fdfcc7756a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "   protected void _setupView()", "signatureAfterChange": "   protected void _setupView()", "diff": ["-    KeyStroke beginLineKey = DrJava.getConfig().getSetting(OptionConstants.KEY_BEGIN_LINE);", "-    _pane.addActionForKeyStroke(beginLineKey, gotoPromptPosAction);", "-    _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(beginLineKey),", "-                                selectToPromptPosAction);", "-    KeyStroke endLineKey = DrJava.getConfig().getSetting(OptionConstants.KEY_END_LINE);", "-    _pane.addActionForKeyStroke(endLineKey, gotoEndAction);", "-    _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(endLineKey),", "-                                selectToEndAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_BEGIN_LINE), gotoPromptPosAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_BEGIN_LINE_SELECT), selectToPromptPosAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_END_LINE), gotoEndAction);", "+    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_END_LINE_SELECT), selectToEndAction);", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_BEGIN_LINE,", "-                                         new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_BEGIN_LINE, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "-        _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(oe.value),", "-                                    selectToPromptPosAction);", "+      }", "+    });", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_BEGIN_LINE_SELECT, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "+        _pane.addActionForKeyStroke(oe.value, selectToPromptPosAction);", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_END_LINE,", "-                                         new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_END_LINE, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "-        _pane.addActionForKeyStroke(KeyBindingManager.ONLY.addShiftModifier(oe.value),", "-                                    selectToEndAction);", "+     }", "+    });", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_END_LINE_SELECT, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "+        _pane.addActionForKeyStroke(oe.value, selectToEndAction);", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_CUT, new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_CUT, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {", "-    DrJava.getConfig().addOptionListener(OptionConstants.KEY_COPY, new OptionListener<KeyStroke>() {", "-      public void optionChanged(OptionEvent<KeyStroke> oe) {", "+    DrJava.getConfig().addOptionListener(OptionConstants.KEY_COPY, new OptionListener<Vector<KeyStroke>>() {", "+      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0fb405e03ec6c71b440dc33a4e56e90", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "f743eab51273b837fbfd0fee9aa664f2f031c583", "commitAfterChange": "0ad47f4e9ecbbfc43121de14376bb3d222538453", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public DefinitionsPane(MainFrame mf,                          OpenDefinitionsDocument doc)", "signatureAfterChange": "   public DefinitionsPane(MainFrame mf,                          OpenDefinitionsDocument doc)", "diff": ["+    ", "+    // Start the pane out with the NULL_DOCUMENT so that", "+    // it doesn't start out with a reference to the defdoc", "-    setDocument(_doc);", "+    super.setDocument(NULL_DOCUMENT);", "+    _resetUndo();", "+    ", "-    Keymap ourMap = addKeymap(\"INDENT_KEYMAP\", getKeymap());", "+    ourMap = addKeymap(INDENT_KEYMAP_NAME, getKeymap());", "+    ", "+    OptionListener<Color> temp;", "+    Pair<Option<Color>, OptionListener<Color>> pair;", "+    ", "+        ", "-    new ForegroundColorListener(this);", "-    new BackgroundColorListener(this);", "+    // NOTE: the Foreground/Background listeners add themselves to ", "+    //   DrJava.getConfig() in their own constructors.", "+    //   Rather than refactor it, we decided to work with that ", "+    //   design decision.", "+    temp = new ForegroundColorListener(this);", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEFINITIONS_NORMAL_COLOR,temp);", "+    _colorOptionListeners.add(pair);", "+    ", "+    temp = new BackgroundColorListener(this);", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEFINITIONS_BACKGROUND_COLOR,temp);", "+    _colorOptionListeners.add(pair);", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_MATCH_COLOR,", "-                                         new MatchColorOptionListener());", "-    DrJava.getConfig().addOptionListener( OptionConstants.COMPILER_ERROR_COLOR,", "-                                         new ErrorColorOptionListener());", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_BREAKPOINT_COLOR,", "-                                         new BreakpointColorOptionListener());", "-    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_THREAD_COLOR,", "-                                         new ThreadColorOptionListener());", "+    // These listeners do not register themselves in their own constructors.  We do.", "+    temp = new MatchColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEFINITIONS_MATCH_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.DEFINITIONS_MATCH_COLOR, temp);", "+    ", "+    temp = new ErrorColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.COMPILER_ERROR_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.COMPILER_ERROR_COLOR, temp);", "+    ", "+    temp = new BreakpointColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEBUG_BREAKPOINT_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_BREAKPOINT_COLOR, temp);", "+    ", "+    temp = new ThreadColorOptionListener();", "+    pair = new Pair<Option<Color>, OptionListener<Color>>(OptionConstants.DEBUG_THREAD_COLOR, temp);", "+    _colorOptionListeners.add(pair);", "+    DrJava.getConfig().addOptionListener( OptionConstants.DEBUG_THREAD_COLOR, temp);", "+", "-      DrJava.getConfig().addOptionListener( OptionConstants.TEXT_ANTIALIAS,", "-                                           new AntiAliasOptionListener());", "+      OptionListener<Boolean> aaTemp = new AntiAliasOptionListener();", "+      Pair<Option<Boolean>, OptionListener<Boolean>> aaPair = new Pair<Option<Boolean>, OptionListener<Boolean>>(OptionConstants.TEXT_ANTIALIAS, aaTemp);", "+      _booleanOptionListeners.add(aaPair);", "+      DrJava.getConfig().addOptionListener( OptionConstants.TEXT_ANTIALIAS, aaTemp);"]}], "num": 1646}
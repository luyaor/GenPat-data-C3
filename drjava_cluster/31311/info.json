{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d7599ced8f6bdbf5b243bd4f5ac6dfe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00ed08166f1b049864c0e4c6d23ca785", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "f8d559eff1bd7960bc6bb9bf82603bfe4189e3cb", "commitAfterChange": "16144456daecd1d566a6e5089e1ddd2764aafb21", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public void startInterpreterJVM()", "signatureAfterChange": "   public void startInterpreterJVM()", "diff": ["-   */", "+  /** Starts the interpreter if it's not running already. */", "-    if (isStartupInProgress() || isInterpreterRunning()) {", "-      return;", "-    }", "+    if (isStartupInProgress() || isInterpreterRunning())  return;", "-    if (allowAssertions()) {", "-      jvmArgs.add(\"-ea\");", "-    }", "+    if (allowAssertions())  jvmArgs.add(\"-ea\");", "-    for (int i=0; i < jvmArgs.size(); i++) {", "-      jvmArgsArray[i] = jvmArgs.get(i);", "-    }", "+    for (int i=0; i < jvmArgs.size(); i++) { jvmArgsArray[i] = jvmArgs.get(i); }", "-      //_startupClasspath is sent in as the interactions classpath", "-      //      System.out.println(\"startup: \" + _startupClasspath);", "+//      _startupClasspath is sent in as the interactions classpath", "+//      System.out.println(\"startup: \" + _startupClasspath);", "+//      new ScrollableDialog(null, \"Calling invokeSlave(\" + jvmArgs + \", \" + _startupClasspath + \")\", \"\", \"\").show();", "-    catch (RemoteException re) {", "-      _threwException(re);", "-    }", "-    catch (IOException ioe) {", "-      _threwException(ioe);", "-    }", "+    catch (RemoteException re) { _threwException(re); }", "+    catch (IOException ioe) { _threwException(ioe); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a9b5d41824b2a50ad4e6bc0357042ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/DynamicJava.java", "commitBeforeChange": "d00e0fe6f02f0704b0308587aa3c8b683ceed0a6", "commitAfterChange": "608d05e2a10d21cbc190b09334cd60b3c39fbc37", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static void main(String... args) throws IOException", "signatureAfterChange": "      public static void main(String... args) throws IOException", "diff": ["-    while (true) {", "+    String input;", "+    do {", "-      String input = in.readLine();", "-      try {", "-        Option<Object> result = i.interpret(input);", "-        result.apply(new OptionVisitor<Object, Void>() {", "-          public Void forSome(Object o) { System.out.println(TextUtil.toString(o)); return null; }", "-          public Void forNone() { return null; }", "-        });", "+      input = in.readLine();", "+      if (input != null) {", "+        try {", "+          Option<Object> result = i.interpret(input);", "+          result.apply(new OptionVisitor<Object, Void>() {", "+            public Void forSome(Object o) { System.out.println(TextUtil.toString(o)); return null; }", "+            public Void forNone() { return null; }", "+          });", "+        }", "+        catch (InterpreterException e) { e.printUserMessage(); debug.log(e); }", "+        catch (RuntimeException e) {", "+          System.out.println(\"INTERNAL ERROR: Uncaught exception\");", "+          e.printStackTrace();", "+        }", "+        System.out.println();", "-      catch (InterpreterException e) { e.printUserMessage(); debug.log(e); }", "-      catch (RuntimeException e) {", "-        System.out.println(\"INTERNAL ERROR: Uncaught exception\");", "-        e.printStackTrace();", "-      }", "-      System.out.println();", "-    }", "+    } while (input != null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ab38ebc2dc92a97d1c0cd91624be2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "8279bc33117c74621df6401dedd10a0cae247a2c", "commitAfterChange": "ce3350f89c936debb5fbaa8f27f501d1524368cf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["-    synchronized(this) {", "-     if (_startupInProgress) {", "-        return;", "-      }", "+    if (isStartupInProgress()) {", "+      return;", "+    }", "-      _startupInProgress = true;", "-", "-      killInterpreter();", "-", "-      String className = InterpreterJVM.class.getName();", "-      String[] args = new String[] { getIdentifier() };", "-      try {", "-        //System.err.println(\"started interpreter jvm\");", "-        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "-        ", "-        // Start a thread to wait for the interpreter to die and to fire", "-        // off a new one (and notify model) when it happens", "-        Thread thread = new Thread() {", "-          public void run() {", "-            try {", "-              int status = _interpreterProcess.waitFor();", "-              restartInterpreterJVM();", "-              _model.replCalledSystemExit(status);", "-            }", "-            catch (InterruptedException ie) {", "-              throw new edu.rice.cs.util.UnexpectedException(ie);", "-            }", "-          }", "-        };", "-", "-        thread.start();", "-      }", "-      catch (IOException ioe) {", "-        _threwException(ioe);", "-      }", "+    try {", "+      invokeSlave();", "+    }", "+    catch (RemoteException re) {", "+      _threwException(re);", "+    }", "+    catch (IOException ioe) {", "+      _threwException(ioe);"]}], "num": 31311}
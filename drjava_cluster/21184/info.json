{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f58e16f9ce9af8fac92a78ed7b5e4cdd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "226263b2e6403b22438c2c4eb053e2e3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["-    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\",", "-                                                              \"This property contains all the JVM arguments passed \"+", "-                                                              \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "-                                                              \"programs in. The arguments from the \\\"JVM Args for \"+", "-                                                              \"Main JVM\\\" and the special -X arguments from \\\"Maximum \"+", "-                                                              \"Heap Size for Main JVM\\\" are combined.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Config\", new DrJavaProperty(\"config.master.jvm.args.combined\",", "+                                                                   \"This property contains all the JVM arguments passed \"+", "+                                                                   \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                                   \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                                   \"Main JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                                   \"Heap Size for Main JVM\\\" are combined.\") {", "+      public void update(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.master.jvm.args\"))", "-      .listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.master.jvm.xmx\"));", "+    }).listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"Config\", \"config.master.jvm.args\"))", "+      .listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"Config\", \"config.master.jvm.xmx\"));", "-    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\",", "-                                                              \"This property contains all the JVM arguments passed \"+", "-                                                              \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "-                                                              \"programs in. The arguments from the \\\"JVM Args for \"+", "-                                                              \"Slave JVM\\\" and the special -X arguments from \\\"Maximum \"+", "-                                                              \"Heap Size for Main JVM\\\" are combined.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Config\", new DrJavaProperty(\"config.slave.jvm.args.combined\",", "+                                                                   \"This property contains all the JVM arguments passed \"+", "+                                                                   \"to DrJava's master JVM, i.e. the JVM the user is editing \"+", "+                                                                   \"programs in. The arguments from the \\\"JVM Args for \"+", "+                                                                   \"Slave JVM\\\" and the special -X arguments from \\\"Maximum \"+", "+                                                                   \"Heap Size for Main JVM\\\" are combined.\") {", "+      public void update(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.slave.jvm.args\"))", "-      .listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.slave.jvm.xmx\"));", "+    }).listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"Config\", \"config.slave.jvm.args\"))", "+      .listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"Config\", \"config.slave.jvm.xmx\"));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\",", "-                                                             \"Creates a temporary file and returns the name of it.\\n\"+", "-                                                             \"Optional attributes:\\n\"+", "-                                                             \"\\tname=\\\"<name for temp file>\\\"\\n\"+", "-                                                             \"\\tdir=\\\"<dir for temp file>\\\"\\n\"+", "-                                                             \"\\tkeep=\\\"<true if the file should not be erased>\\\"\\n\"+", "-                                                             \"\\tcontent=\\\"<text to go into the file>\\\"\") {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"tmpfile\",", "+                                                                 \"Creates a temporary file and returns the name of it.\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\tname=\\\"<name for temp file>\\\"\\n\"+", "+                                                                 \"\\tdir=\\\"<dir for temp file>\\\"\\n\"+", "+                                                                 \"\\tkeep=\\\"<true if the file should not be erased>\\\"\\n\"+", "+                                                                 \"\\tcontent=\\\"<text to go into the file>\\\"\") {", "-      public String toString() {", "-        invalidate();", "-        update();", "-        return _value;", "-      }", "-      public void update() {", "+      public void update(PropertyMaps pm) {", "-            dir = StringOps.unescapeSpacesWith1bHex(dir);", "+            dir = StringOps.unescapeFileName(dir);", "-   ", "+          ", "-          _value = StringOps.escapeSpacesWith1bHex(f.toString());", "+          _value = StringOps.escapeFileName(f.toString());", "-      ", "-      public String getCurrent() {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+      public String getCurrent(PropertyMaps pm) {", "-        final String s = super.getCurrent();", "-        File f = new File(StringOps.unescapeSpacesWith1bHex(_value));", "+        final String s = super.getCurrent(pm);", "+        File f = new File(StringOps.unescapeFileName(_value));", "-        String text = StringOps.unescapeSpacesWith1bHex(_attributes.get(\"content\"));", "+        String text = StringOps.unescapeFileName(_attributes.get(\"content\"));", "-    PropertyMaps.ONLY.setProperty(\"File\", new RecursiveFileListProperty(\"file.find\", File.pathSeparator, DEF_DIR, DEF_DIR,", "-                                                                        \"Return a list of files found in the starting dir.\\n\"+", "-                                                                        \"Optional attributes:\\n\"+", "-                                                                        \"\\tsep=\\\"<separator between files>\\\"\\n\"+", "-                                                                        \"\\tdir=\\\"<dir where to start>\\\"\\n\"+", "-                                                                        \"\\trel=\\\"<dir to which the files are relative>\\\"\\n\"+", "-                                                                        \"\\tfilter=\\\"<filter, like *.txt, for files to list>\\\"\\n\"+", "-                                                                        \"\\tdirfilter=\\\"<filter for which dirs to recurse>\\\"\"));", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.isdir\",", "-                                                             \"Return true if the specified file is a directory, false \"+", "-                                                             \"otherwise.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file to test>\\\"\\n\"+", "-                                                             \"Multiple files can be specified, separated by ${path.separator}, \"+", "-                                                             \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "-                                                             \"files are specified, then a list of values, each \"+", "-                                                             \"separated by ${path.separator}, is returned.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new RecursiveFileListProperty(\"file.find\", File.pathSeparator, DEF_DIR, DEF_DIR,", "+                                                                            \"Return a list of files found in the starting dir.\\n\"+", "+                                                                            \"Optional attributes:\\n\"+", "+                                                                            \"\\tsep=\\\"<separator between files>\\\"\\n\"+", "+                                                                            \"\\tdir=\\\"<dir where to start>\\\"\\n\"+", "+                                                                            \"\\trel=\\\"<dir to which the files are relative>\\\"\\n\"+", "+                                                                            \"\\tfilter=\\\"<filter, like *.txt, for files to list>\\\"\\n\"+", "+                                                                            \"\\tdirfilter=\\\"<filter for which dirs to recurse>\\\"\"));", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.isdir\",", "+                                                                 \"Return true if the specified file is a directory, false \"+", "+                                                                 \"otherwise.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file to test>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified, separated by ${path.separator}, \"+", "+                                                                 \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "+                                                                 \"files are specified, then a list of values, each \"+", "+                                                                 \"separated by ${path.separator}, is returned.\") {", "+      public void update(PropertyMaps pm) {", "-          File f = new File(StringOps.unescapeSpacesWith1bHex(fs));", "+          File f = new File(StringOps.unescapeFileName(fs));", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.isfile\",", "-                                                             \"Return true if the specified file is a file, not a \"+", "-                                                             \"directory.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file to test>\\\"\\n\"+", "-                                                             \"Multiple files can be specified, separated by ${path.separator}, \"+", "-                                                             \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "-                                                             \"files are specified, then a list of values, each \"+", "-                                                             \"separated by ${path.separator}, is returned.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.isfile\",", "+                                                                 \"Return true if the specified file is a file, not a \"+", "+                                                                 \"directory.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file to test>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified, separated by ${path.separator}, \"+", "+                                                                 \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "+                                                                 \"files are specified, then a list of values, each \"+", "+                                                                 \"separated by ${path.separator}, is returned.\") {", "+      public void update(PropertyMaps pm) {", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.exists\",", "-                                                             \"Return true if the specified file exists.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file to test>\\\"\\n\"+", "-                                                             \"Multiple files can be specified, separated by ${path.separator}, \"+", "-                                                             \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "-                                                             \"files are specified, then a list of values, each \"+", "-                                                             \"separated by ${path.separator}, is returned.\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.exists\",", "+                                                                 \"Return true if the specified file exists.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file to test>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified, separated by ${path.separator}, \"+", "+                                                                 \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "+                                                                 \"files are specified, then a list of values, each \"+", "+                                                                 \"separated by ${path.separator}, is returned.\") {", "+      public void update(PropertyMaps pm) {", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.parent\",", "-                                                             \"Return the path of the parent, or and empty string \\\"\\\" if \"+", "-                                                             \"no parent exists.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file for which to return the parent>\\\"\\n\"+", "-                                                             \"Multiple files can be specified, separated by ${path.separator}, \"+", "-                                                             \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "-                                                             \"files are specified, then a list of values, each \"+", "-                                                             \"separated by ${path.separator}, is returned.\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.parent\",", "+                                                                 \"Return the path of the parent, or and empty string \\\"\\\" if \"+", "+                                                                 \"no parent exists.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file for which to return the parent>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified, separated by ${path.separator}, \"+", "+                                                                 \"which is \"+File.pathSeparator+\" on this machine. If multiple \"+", "+                                                                 \"files are specified, then a list of values, each \"+", "+                                                                 \"separated by ${path.separator}, is returned.\") {", "+      public void update(PropertyMaps pm) {", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-          String p = StringOps.escapeSpacesWith1bHex(f.getParent());", "+          String p = StringOps.escapeFileName(f.getParent());", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.abs\",", "-                                                             \"Return the absolute path of the file which has been \"+", "-                                                             \"relative to another file.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file for which to return the absolute path>\\\"\\n\"+", "-                                                             \"\\tbase=\\\"<other file which serves as base path>\\\"\\n\"+", "-                                                             \"Multiple files can be specified for the file attribute, each \"+", "-                                                             \"separated by ${path.separator}, which is \"+File.pathSeparator+", "-                                                             \" on this machine. If multiple files are specified, then a list \"+", "-                                                             \"of values, each separated by ${path.separator}, is returned.\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.abs\",", "+                                                                 \"Return the absolute path of the file which has been \"+", "+                                                                 \"relative to another file.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file for which to return the absolute path>\\\"\\n\"+", "+                                                                 \"\\tbase=\\\"<other file which serves as base path>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified for the file attribute, each \"+", "+                                                                 \"separated by ${path.separator}, which is \"+File.pathSeparator+", "+                                                                 \" on this machine. If multiple files are specified, then a list \"+", "+                                                                 \"of values, each separated by ${path.separator}, is returned.\") {", "+      public void update(PropertyMaps pm) {", "-        s = StringOps.unescapeSpacesWith1bHex(s);", "+        s = StringOps.unescapeFileName(s);", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-          sb.append(StringOps.escapeSpacesWith1bHex(f.getAbsolutePath()));", "+          sb.append(StringOps.escapeFileName(f.getAbsolutePath()));", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.rel\",", "-                                                             \"Return the path of the file, relative to another file.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file for which to return the relative path>\\\"\\n\"+", "-                                                             \"\\tbase=\\\"<other file which serves as base path>\\\"\\n\"+", "-                                                             \"Multiple files can be specified for the file attribute, each \"+", "-                                                             \"separated by ${path.separator}, which is \"+File.pathSeparator+", "-                                                             \" on this machine. If multiple files are specified, then a list \"+", "-                                                             \"of values, each separated by ${path.separator}, is returned.\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.rel\",", "+                                                                 \"Return the path of the file, relative to another file.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file for which to return the relative path>\\\"\\n\"+", "+                                                                 \"\\tbase=\\\"<other file which serves as base path>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified for the file attribute, each \"+", "+                                                                 \"separated by ${path.separator}, which is \"+File.pathSeparator+", "+                                                                 \" on this machine. If multiple files are specified, then a list \"+", "+                                                                 \"of values, each separated by ${path.separator}, is returned.\") {", "+      public void update(PropertyMaps pm) {", "-        s = StringOps.unescapeSpacesWith1bHex(s);", "+        s = StringOps.unescapeFileName(s);", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-            sb.append(StringOps.escapeSpacesWith1bHex(s));", "+            sb.append(StringOps.escapeFileName(s));", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.mkdir\",", "-                                                             \"Make the directory with the provided file name. \"+", "-                                                             \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<directory to create>\\\"\\n\"+", "-                                                             \"Multiple files can be specified for the file attribute, each \"+", "-                                                             \"separated by ${path.separator}, which is \"+File.pathSeparator+", "-                                                             \" on this machine. If multiple files are specified, then DrJava \"+", "-                                                             \"will attempt to make all those directories.\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.mkdir\",", "+                                                                 \"Make the directory with the provided file name. \"+", "+                                                                 \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<directory to create>\\\"\\n\"+", "+                                                                 \"Multiple files can be specified for the file attribute, each \"+", "+                                                                 \"separated by ${path.separator}, which is \"+File.pathSeparator+", "+                                                                 \" on this machine. If multiple files are specified, then DrJava \"+", "+                                                                 \"will attempt to make all those directories.\") {", "+      public void update(PropertyMaps pm) {", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.rm\",", "-                                                             \"Remove the specified file or directory, recursively if desired. \"+", "-                                                             \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file or directory to remove>\\\"\"+", "-                                                             \"Optional attributes:\\n\"+", "-                                                             \"\\trec=\\\"<true for recursive removal>\\\"\\n\"+", "-                                                             \"(if not specified, false is used and removal is not recursive)\\n\"+", "-                                                             \"Multiple files can be specified for the file attribute, each \"+", "-                                                             \"separated by ${path.separator}, which is \"+File.pathSeparator+", "-                                                             \" on this machine. If multiple files are specified, then DrJava \"+", "-                                                             \"will attempt to remove all those files.\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.rm\",", "+                                                                 \"Remove the specified file or directory, recursively if desired. \"+", "+                                                                 \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file or directory to remove>\\\"\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\trec=\\\"<true for recursive removal>\\\"\\n\"+", "+                                                                 \"(if not specified, false is used and removal is not recursive)\\n\"+", "+                                                                 \"Multiple files can be specified for the file attribute, each \"+", "+                                                                 \"separated by ${path.separator}, which is \"+File.pathSeparator+", "+                                                                 \" on this machine. If multiple files are specified, then DrJava \"+", "+                                                                 \"will attempt to remove all those files.\") {", "+      public void update(PropertyMaps pm) {", "-        s = StringOps.unescapeSpacesWith1bHex(s);", "+        s = StringOps.unescapeFileName(s);", "-          fs = StringOps.unescapeSpacesWith1bHex(fs);", "+          fs = StringOps.unescapeFileName(fs);", "-    PropertyMaps.ONLY.setProperty(\"File\", new DrJavaProperty(\"file.mv\",", "-                                                             \"Move the specified file or directory to a new location. \"+", "-                                                             \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file or directory to move>\\\"\"+", "-                                                             \"\\tnew=\\\"<new location>\\\"\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"File\", new DrJavaProperty(\"file.mv\",", "+                                                                 \"Move the specified file or directory to a new location. \"+", "+                                                                 \"Evaluates to the empty string \\\"\\\" if successful.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file or directory to move>\\\"\"+", "+                                                                 \"\\tnew=\\\"<new location>\\\"\") {", "+      public void update(PropertyMaps pm) {", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.time.millis\",", "-                                                              \"Returns the current time in milliseconds since 01/01/1970, \"+", "-                                                              \"unless other format is specified by the fmt attribute.\\n\"+", "-                                                              \"Optional attributes:\\n\"+", "-                                                              \"\\tfmt=\\\"full\\\" or \\\"long\\\" or \\\"medium\\\" or \\\"short\\\"\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new DrJavaProperty(\"drjava.current.time.millis\",", "+                                                                   \"Returns the current time in milliseconds since 01/01/1970, \"+", "+                                                                   \"unless other format is specified by the fmt attribute.\\n\"+", "+                                                                   \"Optional attributes:\\n\"+", "+                                                                   \"\\tfmt=\\\"full\\\" or \\\"long\\\" or \\\"medium\\\" or \\\"short\\\"\") {", "+      public void update(PropertyMaps pm) {", "-      ", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new EagerProperty(\"ignore\",", "-                                                            \"Evaluates the string specified in the command attribute, \"+", "-                                                            \"but ignore the result of the evaluation. Only side effects \"+", "-                                                            \"of the evaluation are apparent. This property always \"+", "-                                                            \"evaluates to the empty string \\\"\\\" (unless the command \"+", "-                                                            \"attribute is missing).\\n\"+", "-                                                            \"Required attributes:\\n\"+", "-                                                            \"\\tcmd=\\\"<command to evaluate>\\\"\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"ignore\",", "+                                                                 \"Evaluates the string specified in the command attribute, \"+", "+                                                                 \"but ignore the result of the evaluation. Only side effects \"+", "+                                                                 \"of the evaluation are apparent. This property always \"+", "+                                                                 \"evaluates to the empty string \\\"\\\" (unless the command \"+", "+                                                                 \"attribute is missing).\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tcmd=\\\"<command to evaluate>\\\"\") {", "+      public void update(PropertyMaps pm) {", "-", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"if\",", "-                                                             \"If the cond attribute evaluates to true, returns \"+", "-                                                             \"the evaluation of the then attribute, otherwise \"+", "-                                                             \"the evaluation of the else attribute.\\n\"+", "-                                                             \"Required attribute:\\n\"+", "-                                                             \"\\tcond=\\\"<string evaluating to true of false>\\\"\\n\"+", "-                                                             \"Optional attributes:\\n\"+", "-                                                             \"\\tthen=\\\"<evaluated if true>\\\"\\n\"+", "-                                                             \"\\telse=\\\"<evaluated if false>\\\"\") {", "-      public String toString() {", "-        invalidate();", "-        update();", "-        return _value;", "-      }", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"if\",", "+                                                                 \"If the cond attribute evaluates to true, returns \"+", "+                                                                 \"the evaluation of the then attribute, otherwise \"+", "+                                                                 \"the evaluation of the else attribute.\\n\"+", "+                                                                 \"Required attribute:\\n\"+", "+                                                                 \"\\tcond=\\\"<string evaluating to true of false>\\\"\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\tthen=\\\"<evaluated if true>\\\"\\n\"+", "+                                                                 \"\\telse=\\\"<evaluated if false>\\\"\") {", "+      public void update(PropertyMaps pm) {", "-      public String getCurrent() {", "+      public String getCurrent(PropertyMaps pm) {", "-        return super.getCurrent();", "+        return super.getCurrent(pm);", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"not\",", "-                                                             \"If the value is true, returns false; if the \"+", "-                                                             \"value is false, returns true.\\n\"+", "-                                                             \"Required attribute:\\n\"+", "-                                                             \"\\tvalue=\\\"<string evaluating to true of false>\\\"\") {", "-      public String toString() {", "-        invalidate();", "-        update();", "-        return _value;", "-      }", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"not\",", "+                                                                 \"If the value is true, returns false; if the \"+", "+                                                                 \"value is false, returns true.\\n\"+", "+                                                                 \"Required attribute:\\n\"+", "+                                                                 \"\\tvalue=\\\"<string evaluating to true of false>\\\"\") {", "+      public void update(PropertyMaps pm) {", "-      public String getCurrent() {", "+      public String getCurrent(PropertyMaps pm) {", "-        return super.getCurrent();", "+        return super.getCurrent(pm);", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Boolean>(\"gt\",", "-                                                            \"If the op1 is greater than op2, returns true,\"+", "-                                                            \"false otherwise.\\n\"+", "-                                                            \"Required attributes:\\n\"+", "-                                                            \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                            \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                            new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Boolean>(\"gt\",", "+                                                                \"If the op1 is greater than op2, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.FORMAT_BOOL));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Boolean>(\"lt\",", "-                                                            \"If the op1 is less than op2, returns true,\"+", "-                                                            \"false otherwise.\\n\"+", "-                                                            \"Required attributes:\\n\"+", "-                                                            \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                            \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                            new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Boolean>(\"lt\",", "+                                                                \"If the op1 is less than op2, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.FORMAT_BOOL));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Boolean>(\"gte\",", "-                                                            \"If the op1 is greater than or equal to op2, returns true,\"+", "-                                                            \"false otherwise.\\n\"+", "-                                                            \"Required attributes:\\n\"+", "-                                                            \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                            \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                            new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Boolean>(\"gte\",", "+                                                                \"If the op1 is greater than or equal to op2, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.FORMAT_BOOL));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Boolean>(\"lte\",", "-                                                            \"If the op1 is less than or equal to op2, returns true,\"+", "-                                                            \"false otherwise.\\n\"+", "-                                                            \"Required attributes:\\n\"+", "-                                                            \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                            \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                            new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Boolean>(\"lte\",", "+                                                                \"If the op1 is less than or equal to op2, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                                new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Boolean>() {", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.PARSE_DOUBLE,", "-                                                            UnaryOpProperty.FORMAT_BOOL));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <String,String,Boolean>(\"eq\",", "-                                                            \"If the op1 is equal to op2, returns true,\"+", "-                                                            \"false otherwise.\\n\"+", "-                                                            \"Required attributes:\\n\"+", "-                                                            \"\\top1=\\\"<string>\\\"\\n\"+", "-                                                            \"\\top2=\\\"<string>\\\"\",", "-                                                            new edu.rice.cs.plt.lambda.Lambda2<String,String,Boolean>() {", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.PARSE_DOUBLE,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <String,String,Boolean>(\"eq\",", "+                                                                \"If the op1 is equal to op2, returns true,\"+", "+                                                                \"false otherwise.\\n\"+", "+                                                                \"Required attributes:\\n\"+", "+                                                                \"\\top1=\\\"<string>\\\"\\n\"+", "+                                                                \"\\top2=\\\"<string>\\\"\",", "+                                                                new edu.rice.cs.plt.lambda.Lambda2<String,String,Boolean>() {", "-                                                            UnaryOpProperty.PARSE_STRING,", "-                                                            UnaryOpProperty.PARSE_STRING,", "-                                                            UnaryOpProperty.FORMAT_BOOL));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Double>(\"add\",", "-                                                           \"Returns the sum of the two operands (op1+op2).\\n\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                           \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                                UnaryOpProperty.PARSE_STRING,", "+                                                                UnaryOpProperty.PARSE_STRING,", "+                                                                UnaryOpProperty.FORMAT_BOOL));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Double>(\"add\",", "+                                                               \"Returns the sum of the two operands (op1+op2).\\n\"+", "+                                                               \"Required attributes:\\n\"+", "+                                                               \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                               \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Double>(\"sub\",", "-                                                           \"Returns the difference between the two operands (op1-op2).\\n\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                           \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Double>(\"sub\",", "+                                                               \"Returns the difference between the two operands (op1-op2).\\n\"+", "+                                                               \"Required attributes:\\n\"+", "+                                                               \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                               \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Double>(\"mul\",", "-                                                           \"Returns the product of the two operands (op1*op2).\\n\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                           \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Double>(\"mul\",", "+                                                               \"Returns the product of the two operands (op1*op2).\\n\"+", "+                                                               \"Required attributes:\\n\"+", "+                                                               \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                               \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <Double,Double,Double>(\"div\",", "-                                                           \"Returns the quotient of the two operands (op1/op2).\\n\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "-                                                           \"\\top2=\\\"<string evaluating to a number>\\\"\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <Double,Double,Double>(\"div\",", "+                                                               \"Returns the quotient of the two operands (op1/op2).\\n\"+", "+                                                               \"Required attributes:\\n\"+", "+                                                               \"\\top1=\\\"<string evaluating to a number>\\\"\\n\"+", "+                                                               \"\\top2=\\\"<string evaluating to a number>\\\"\",", "+                                                               new edu.rice.cs.plt.lambda.Lambda2<Double,Double,Double>() {", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new UnaryOpProperty", "-                                    <String,Double>(\"strlen\",", "-                                                    \"Returns the length of the operand in characters.\\n\"+", "-                                                    \"Required attributes:\\n\"+", "-                                                    \"\\tlist=\\\"<string>\\\"\",", "-                                                    new edu.rice.cs.util.Lambda<Double,String>() {", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.PARSE_DOUBLE,", "+                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new UnaryOpProperty", "+                                        <String,Double>(\"strlen\",", "+                                                        \"Returns the length of the operand in characters.\\n\"+", "+                                                        \"Required attributes:\\n\"+", "+                                                        \"\\tlist=\\\"<string>\\\"\",", "+                                                        new edu.rice.cs.util.Lambda<Double,String>() {", "-                                                    \"list\",", "-                                                    null,", "-                                                    UnaryOpProperty.PARSE_STRING,", "-                                                    UnaryOpProperty.FORMAT_DOUBLE));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new BinaryOpProperty", "-                                    <String,String,Double>(\"count\",", "-                                                           \"Counts the number of elements in the list.\\n\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\tlist=\\\"<list string>\\\"\\n\"+", "-                                                           \"Optional attributes:\\n\"+", "-                                                           \"\\tsep=\\\"<separator string>\\\"\\n\"+", "-                                                           \"(if none specified, ${path.separator} will be used)\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda2<String,String,Double>() {", "+                                                        \"list\",", "+                                                        null,", "+                                                        UnaryOpProperty.PARSE_STRING,", "+                                                        UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new BinaryOpProperty", "+                                        <String,String,Double>(\"count\",", "+                                                               \"Counts the number of elements in the list.\\n\"+", "+                                                               \"Required attributes:\\n\"+", "+                                                               \"\\tlist=\\\"<list string>\\\"\\n\"+", "+                                                               \"Optional attributes:\\n\"+", "+                                                               \"\\tsep=\\\"<separator string>\\\"\\n\"+", "+                                                               \"(if none specified, ${path.separator} will be used)\",", "+                                                               new edu.rice.cs.plt.lambda.Lambda2<String,String,Double>() {", "-                                                           \"list\",", "-                                                           null,", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           \"sep\",", "-                                                           System.getProperty(\"path.separator\"),", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           UnaryOpProperty.FORMAT_DOUBLE));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new QuaternaryOpProperty", "-                                    <String,Double,Double,String,String>(\"sublist\",", "-                                                           \"Extracts a sublist of elements from a list, beginning at \"+", "-                                                           \"a specified index, and including a specified number of elements.\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\tlist=\\\"<list string>\\\"\\n\"+", "-                                                           \"\\tindex=\\\"<index in list, starting with 0>\\\"\\n\"+", "-                                                           \"Optional attributes:\\n\"+", "-                                                           \"\\tcount=\\\"<number of items>\\\"\\n\"+", "-                                                           \"(if not specified, 1 will be used)\\n\"+", "-                                                           \"\\tsep=\\\"<separator string>\\\"\\n\"+", "-                                                           \"(if none specified, ${path.separator} will be used)\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda4<String,Double,Double,String,String>() {", "+                                                               \"list\",", "+                                                               null,", "+                                                               UnaryOpProperty.PARSE_STRING,", "+                                                               \"sep\",", "+                                                               System.getProperty(\"path.separator\"),", "+                                                               UnaryOpProperty.PARSE_STRING,", "+                                                               UnaryOpProperty.FORMAT_DOUBLE));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new QuaternaryOpProperty", "+                                        <String,Double,Double,String,String>(\"sublist\",", "+                                                                             \"Extracts a sublist of elements from a list, beginning at \"+", "+                                                                             \"a specified index, and including a specified number of elements.\"+", "+                                                                             \"Required attributes:\\n\"+", "+                                                                             \"\\tlist=\\\"<list string>\\\"\\n\"+", "+                                                                             \"\\tindex=\\\"<index in list, starting with 0>\\\"\\n\"+", "+                                                                             \"Optional attributes:\\n\"+", "+                                                                             \"\\tcount=\\\"<number of items>\\\"\\n\"+", "+                                                                             \"(if not specified, 1 will be used)\\n\"+", "+                                                                             \"\\tsep=\\\"<separator string>\\\"\\n\"+", "+                                                                             \"(if none specified, ${path.separator} will be used)\",", "+                                                                             new edu.rice.cs.plt.lambda.Lambda4<String,Double,Double,String,String>() {", "-                                                           \"list\",", "-                                                           null,", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           \"index\",", "-                                                           null,", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           \"count\",", "-                                                           \"1\",", "-                                                           UnaryOpProperty.PARSE_DOUBLE,", "-                                                           \"sep\",", "-                                                           System.getProperty(\"path.separator\"),", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           UnaryOpProperty.FORMAT_STRING));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new TernaryOpProperty", "-                                    <String,String,String,String>(\"change.sep\",", "-                                                           \"Changes the separator used in a list of values.\"+", "-                                                           \"Required attributes:\\n\"+", "-                                                           \"\\tlist=\\\"<list string>\\\"\\n\"+", "-                                                           \"\\told=\\\"<old separator>\\\"\\n\"+", "-                                                           \"\\tnew=\\\"<new separator>\\\"\",", "-                                                           new edu.rice.cs.plt.lambda.Lambda3<String,String,String,String>() {", "+                                                                             \"list\",", "+                                                                             null,", "+                                                                             UnaryOpProperty.PARSE_STRING,", "+                                                                             \"index\",", "+                                                                             null,", "+                                                                             UnaryOpProperty.PARSE_DOUBLE,", "+                                                                             \"count\",", "+                                                                             \"1\",", "+                                                                             UnaryOpProperty.PARSE_DOUBLE,", "+                                                                             \"sep\",", "+                                                                             System.getProperty(\"path.separator\"),", "+                                                                             UnaryOpProperty.PARSE_STRING,", "+                                                                             UnaryOpProperty.FORMAT_STRING));", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new TernaryOpProperty", "+                                        <String,String,String,String>(\"change.sep\",", "+                                                                      \"Changes the separator used in a list of values.\"+", "+                                                                      \"Required attributes:\\n\"+", "+                                                                      \"\\tlist=\\\"<list string>\\\"\\n\"+", "+                                                                      \"\\told=\\\"<old separator>\\\"\\n\"+", "+                                                                      \"\\tnew=\\\"<new separator>\\\"\",", "+                                                                      new edu.rice.cs.plt.lambda.Lambda3<String,String,String,String>() {", "-                                                           \"list\",", "-                                                           null,", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           \"old\",", "-                                                           null,", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           \"new\",", "-                                                           null,", "-                                                           UnaryOpProperty.PARSE_STRING,", "-                                                           UnaryOpProperty.FORMAT_STRING));", "+                                                                      \"list\",", "+                                                                      null,", "+                                                                      UnaryOpProperty.PARSE_STRING,", "+                                                                      \"old\",", "+                                                                      null,", "+                                                                      UnaryOpProperty.PARSE_STRING,", "+                                                                      \"new\",", "+                                                                      null,", "+                                                                      UnaryOpProperty.PARSE_STRING,", "+                                                                      UnaryOpProperty.FORMAT_STRING));", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"xml.in\", \"(XML Input...)\",", "-                                                             \"Read data from an XML file.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "-                                                             \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "-                                                             \"\\tdefault=\\\"<default value if not found>\\\"\\n\"+", "-                                                             \"\\tmulti=\\\"<true if multiple values are allowed>\\\"\\n\"+", "-                                                             \"\\tsep=\\\"<separator between results>\\\"\") {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"xml.in\", \"(XML Input...)\",", "+                                                                 \"Read data from an XML file.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "+                                                                 \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "+                                                                 \"\\tdefault=\\\"<default value if not found>\\\"\\n\"+", "+                                                                 \"\\tmulti=\\\"<true if multiple values are allowed>\\\"\\n\"+", "+                                                                 \"\\tsep=\\\"<separator between results>\\\"\") {", "-      public void update() {", "+      public void update(PropertyMaps pm) {", "-      public String getCurrent() {", "+      public String getCurrent(PropertyMaps pm) {", "-        return super.getCurrent();", "+        return super.getCurrent(pm);", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"xml.out.action\", \"(XML Output...)\",", "-                                                             \"Write data to an XML file. Since this is an \"+", "-                                                             \"action, it will not produce any output, but it will \"+", "-                                                             \"write to the XML file.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "-                                                             \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "-                                                             \"\\tcontent=\\\"<value to write into the XML>\\\"\\n\"+", "-                                                             \"\\tappend=\\\"<true to append, false to overwrite existing>\\\"\") {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"xml.out.action\", \"(XML Output...)\",", "+                                                                 \"Write data to an XML file. Since this is an \"+", "+                                                                 \"action, it will not produce any output, but it will \"+", "+                                                                 \"write to the XML file.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tfile=\\\"<file with the XML>\\\"\\n\"+", "+                                                                 \"\\tpath=\\\"<path into the XML tree>\\\"\\n\"+", "+                                                                 \"\\tcontent=\\\"<value to write into the XML>\\\"\\n\"+", "+                                                                 \"\\tappend=\\\"<true to append, false to overwrite existing>\\\"\") {", "-      public void update() {", "+      public void update(PropertyMaps pm) {", "-      public String getCurrent() {", "+      public String getCurrent(PropertyMaps pm) {", "-        return super.getCurrent();", "+        return super.getCurrent(pm);", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"var\",", "-                                                             \"Create a new scope and define a variable with the \"+", "-                                                             \"specified name and value; then evaluate the command \"+", "-                                                             \"with the new variable in the environment.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tname=\\\"<name of the variable>\\\"\\n\"+", "-                                                             \"\\tval=\\\"<value of the variable>\\\"\\n\"+", "-                                                             \"\\tcmd=\\\"<command to evaluate>\\\"\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"var\",", "+                                                                 \"Create a new scope and define a variable with the \"+", "+                                                                 \"specified name and value; then evaluate the command \"+", "+                                                                 \"with the new variable in the environment.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tname=\\\"<name of the variable>\\\"\\n\"+", "+                                                                 \"\\tval=\\\"<value of the variable>\\\"\\n\"+", "+                                                                 \"\\tcmd=\\\"<command to evaluate>\\\"\") {", "+      public void update(PropertyMaps pm) {", "-          PropertyMaps.ONLY.addVariable(name,val);", "-          _value = StringOps.replaceVariables(cmd, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT);", "-          PropertyMaps.ONLY.removeVariable(name);", "+          PropertyMaps.TEMPLATE.addVariable(name,val);", "+          _value = StringOps.replaceVariables(cmd, pm, PropertyMaps.GET_CURRENT);", "+          PropertyMaps.TEMPLATE.removeVariable(name);", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"var.set\",", "-                                                             \"Mutate the value of the variable with the \"+", "-                                                             \"specified name and value.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tname=\\\"<name of the variable>\\\"\\n\"+", "-                                                             \"\\tval=\\\"<value of the variable>\\\"\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"var.set\",", "+                                                                 \"Mutate the value of the variable with the \"+", "+                                                                 \"specified name and value.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tname=\\\"<name of the variable>\\\"\\n\"+", "+                                                                 \"\\tval=\\\"<value of the variable>\\\"\") {", "+      public void update(PropertyMaps pm) {", "-          PropertyMaps.ONLY.setVariable(name,val);", "+          pm.setVariable(name,val);", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"for\",", "-                                                             \"Create a new scope and define a variable with the \"+", "-                                                             \"specified name. Then process the given list in smaller \"+", "-                                                             \"pieces, assigning them to the variable.\\n\"+", "-                                                             \"Required attributes:\\n\"+", "-                                                             \"\\tlist=\\\"<list string>\\\"\\n\"+", "-                                                             \"\\tvar=\\\"<name of the variable>\\\"\\n\"+", "-                                                             \"\\tcmd=\\\"<command to evaluate for each piece>\\\"\\n\"+", "-                                                             \"Optional attributes:\\n\"+", "-                                                             \"\\tsep=\\\"<separator between elements>\\\"\\n\"+", "-                                                             \"(if not defined, ${path.separator}, which is \"+File.pathSeparator+", "-                                                             \" on this machine)\\n\"+", "-                                                             \"\\toutsep=\\\"<separator between elements in the output>\\\"\\n\"+", "-                                                             \"(if not defined, ${process.separator}, which is \"+", "-                                                             edu.rice.cs.util.ProcessChain.PROCESS_SEPARATOR+", "-                                                             \" on this machine, will be used)\\n\"+", "-                                                             \"\\teach=\\\"<number of elements to process as one piece>\\\"\\n\"+", "-                                                             \"(if not defined, 1 is used)\") {", "-      public void update() {", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"for\",", "+                                                                 \"Create a new scope and define a variable with the \"+", "+                                                                 \"specified name. Then process the given list in smaller \"+", "+                                                                 \"pieces, assigning them to the variable.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\tlist=\\\"<list string>\\\"\\n\"+", "+                                                                 \"\\tvar=\\\"<name of the variable>\\\"\\n\"+", "+                                                                 \"\\tcmd=\\\"<command to evaluate for each piece>\\\"\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\tsep=\\\"<separator between elements>\\\"\\n\"+", "+                                                                 \"(if not defined, ${path.separator}, which is \"+File.pathSeparator+", "+                                                                 \" on this machine)\\n\"+", "+                                                                 \"\\toutsep=\\\"<separator between elements in the output>\\\"\\n\"+", "+                                                                 \"(if not defined, ${process.separator}, which is \"+", "+                                                                 edu.rice.cs.util.ProcessChain.PROCESS_SEPARATOR+", "+                                                                 \" on this machine, will be used)\\n\"+", "+                                                                 \"\\teach=\\\"<number of elements to process as one piece>\\\"\\n\"+", "+                                                                 \"(if not defined, 1 is used)\") {", "+      public void update(PropertyMaps pm) {", "-        PropertyMaps.ONLY.addVariable(var,\"\");", "+        pm.addVariable(var,\"\");", "-            PropertyMaps.ONLY.setVariable(var,val);", "+            pm.setVariable(var,val);", "-            sb.append(StringOps.replaceVariables(cmd, PropertyMaps.ONLY, PropertyMaps.GET_CURRENT));", "+            sb.append(StringOps.replaceVariables(cmd, pm, PropertyMaps.GET_CURRENT));", "-        PropertyMaps.ONLY.removeVariable(var);", "+        pm.removeVariable(var);", "-    PropertyMaps.ONLY.setProperty(\"Config\", new ConstantProperty(\"process.separator\",", "-                                                                 edu.rice.cs.util.ProcessChain.PROCESS_SEPARATOR,", "-                                                                 \"This property contains the separator used between \"+", "-                                                                 \"processes.\"));", "+    PropertyMaps.TEMPLATE.setProperty(\"Config\", new ConstantProperty(\"process.separator\",", "+                                                                     edu.rice.cs.util.ProcessChain.PROCESS_SEPARATOR,", "+                                                                     \"This property contains the separator used between \"+", "+                                                                     \"processes.\"));", "+    ", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new MutableFileProperty(\"drjavajar.file\", null,", "+                                                                      \"If the command line was stored in a .drjavajar file,\"+", "+                                                                      \"then this property contains the file. Otherwise, it is \"+", "+                                                                      \"empty.\\n\"+", "+                                                                      \"Optional attributes:\\n\"+", "+                                                                      \"\\trel=\\\"<dir to which the files are relative>\\\"\"));", "+    String[] cps = System.getProperty(\"java.class.path\").split(edu.rice.cs.plt.text.TextUtil.regexEscape(File.pathSeparator));", "+    File found = null;", "+    for(String cp: cps) {", "+      try {", "+        File f = new File(cp);", "+        if (!f.exists()) { continue; }", "+        if (f.isDirectory()) {", "+          // this is a directory, maybe DrJava is contained here as individual files", "+          File cf = new File(f, edu.rice.cs.drjava.DrJava.class.getName().replace('.', File.separatorChar)+\".class\");", "+          if (cf.exists() && cf.isFile()) {", "+            found = f;", "+            break;", "+          }", "+        }", "+        else if (f.isFile()) {", "+          // this is a file, it should be a jar file", "+          java.util.jar.JarFile jf = new java.util.jar.JarFile(f);", "+          // if it's not a jar file, an exception will already have been thrown", "+          // so we know it is a jar file", "+          // now let's check if it contains DrJava", "+          if (jf.getJarEntry(edu.rice.cs.drjava.DrJava.class.getName().replace('.', '/')+\".class\")!=null) {", "+            found = f;", "+            break;", "+          }", "+        }", "+      }", "+      catch(IOException e) { /* ignore, we'll continue with the next classpath item */ }", "+    }", "+    final File drjavaFile = found;", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"drjava.file\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) {", "+        return drjavaFile; ", "+      }", "+    }, ", "+                                                               \"Returns the executable file of DrJava that is currently \"+", "+                                                               \"running.\\n\"+", "+                                                               \"Optional attributes:\\n\"+", "+                                                               \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                 public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                               });", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new FileProperty(\"java.file\", new Lambda<File,Void>() {", "+      public File apply(Void notUsed) {", "+        return new File(edu.rice.cs.util.newjvm.ExecJVM.getExecutable()); ", "+      }", "+    }, ", "+                                                               \"Returns the Java interpreter executable file.\\n\"+", "+                                                               \"Optional attributes:\\n\"+", "+                                                               \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                 public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                               });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ddb881e27b684717c077338a0bcbf5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "fb852ee67c669f40a587804216508a1dfbe1be4b", "commitAfterChange": "f938008597ce54d16e4a865d30f8ef062ea55d2f", "methodNumberBeforeChange": 278, "methodNumberAfterChange": 278, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileProperty(\"drjava.current.file\", new Lambda<File,Void>() {", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileProperty(\"drjava.current.file\", new Lambda<File,Void>() {", "-                                                                  \"Returns the current document in DrJava.\\n\"+", "-                                                                  \"Optional attributes:\\n\"+", "-                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.line\", ", "-                                                              \"Returns the current line in the Definitions Pane.\") {", "-      public void update() {", "+                                                                 \"Returns the current document in DrJava.\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                   public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                 });", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new DrJavaProperty(\"drjava.current.line\", ", "+                                                                   \"Returns the current line in the Definitions Pane.\") {", "+      public void update(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerProperty(\"drjava.current.col\", ", "-                                                              \"Returns the current column in the Definitions Pane.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new DrJavaProperty(\"drjava.current.col\",", "+                                                                   \"Returns the current column in the Definitions Pane.\") {", "+      public void update(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileProperty(\"drjava.working.dir\", new Lambda<File,Void>() {", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileProperty(\"drjava.working.dir\", new Lambda<File,Void>() {", "-                                                                  \"Returns the current working directory of DrJava.\\n\"+", "-                                                                  \"Optional attributes:\\n\"+", "-                                                                  \"\\trel=\\\"<dir to which output should be relative\\\"\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileProperty(\"drjava.master.working.dir\", new Lambda<File,Void>() {", "+                                                                 \"Returns the current working directory of DrJava.\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\trel=\\\"<dir to which output should be relative\\\"\") {", "+                                                                   public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                 });", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileProperty(\"drjava.master.working.dir\", new Lambda<File,Void>() {", "-                                                                  \"Returns the working directory of the DrJava master JVM.\\n\"+", "-                                                                  \"Optional attributes:\\n\"+", "-                                                                  \"\\trel=\\\"<dir to which output should be relative\\\"\"));", "+                                                                 \"Returns the working directory of the DrJava master JVM.\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\trel=\\\"<dir to which output should be relative\\\"\") {", "+                                                                   public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                 });", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR,", "-                                                                      \"Returns a list of all files open in DrJava.\\n\"+", "-                                                                      \"Optional attributes:\\n\"+", "-                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "-                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-      protected List<File> getList() {", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileListProperty(\"drjava.all.files\", File.pathSeparator, DEF_DIR,", "+                                                                     \"Returns a list of all files open in DrJava.\\n\"+", "+                                                                     \"Optional attributes:\\n\"+", "+                                                                     \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                     \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR,", "-                                                                      \"Returns a list of all files open in DrJava that belong \"+", "-                                                                      \"to a project and are underneath the project root.\\n\"+", "-                                                                      \"Optional attributes:\\n\"+", "-                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "-                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-      protected List<File> getList() {", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileListProperty(\"drjava.project.files\", File.pathSeparator, DEF_DIR,", "+                                                                     \"Returns a list of all files open in DrJava that belong \"+", "+                                                                     \"to a project and are underneath the project root.\\n\"+", "+                                                                     \"Optional attributes:\\n\"+", "+                                                                     \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                     \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList(PropertyMaps pm) {", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR,", "-                                                                      \"Returns a list of all files open in DrJava that are \"+", "-                                                                      \"not underneath the project root but are included in \"+", "-                                                                      \"the project.\\n\"+", "-                                                                      \"Optional attributes:\\n\"+", "-                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "-                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-      protected List<File> getList() {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+    }).listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"DrJava\", \"drjava.all.files\"));", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileListProperty(\"drjava.included.files\", File.pathSeparator, DEF_DIR,", "+                                                                     \"Returns a list of all files open in DrJava that are \"+", "+                                                                     \"not underneath the project root but are included in \"+", "+                                                                     \"the project.\\n\"+", "+                                                                     \"Optional attributes:\\n\"+", "+                                                                     \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                     \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList(PropertyMaps pm) {", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));", "-    PropertyMaps.ONLY.setProperty(\"DrJava\", new EagerFileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR,", "-                                                                      \"Returns a list of all files open in DrJava that are \"+", "-                                                                      \"not underneath the project root and are not included in \"+", "-                                                                      \"the project.\\n\"+", "-                                                                      \"Optional attributes:\\n\"+", "-                                                                      \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "-                                                                      \"\\tsep=\\\"<separator between files>\\\"\") {", "-      protected List<File> getList() {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+    }).listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"DrJava\", \"drjava.all.files\"));", "+    PropertyMaps.TEMPLATE.setProperty(\"DrJava\", new FileListProperty(\"drjava.external.files\", File.pathSeparator, DEF_DIR,", "+                                                                     \"Returns a list of all files open in DrJava that are \"+", "+                                                                     \"not underneath the project root and are not included in \"+", "+                                                                     \"the project.\\n\"+", "+                                                                     \"Optional attributes:\\n\"+", "+                                                                     \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                     \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList(PropertyMaps pm) {", "-    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"DrJava\", \"drjava.all.files\"));    ", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+    }).listenToInvalidatesOf(PropertyMaps.TEMPLATE.getProperty(\"DrJava\", \"drjava.all.files\"));    ", "-    PropertyMaps.ONLY.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\",", "-                                                             \"Get an input string from the user.\\n\"+", "-                                                             \"Optional attributes:\\n\"+", "-                                                             \"\\tprompt=\\\"<prompt to display>\\\"\\n\"+", "-                                                             \"\\tdefault=\\\"<suggestion to the user>\\\"\") {", "+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"input\", \"(User Input...)\",", "+                                                                 \"Get an input string from the user.\\n\"+", "+                                                                 \"Optional attributes:\\n\"+", "+                                                                 \"\\tprompt=\\\"<prompt to display>\\\"\\n\"+", "+                                                                 \"\\tdefault=\\\"<suggestion to the user>\\\"\") {", "-      public void update() {", "+      public void update(PropertyMaps pm) {", "-      public String getCurrent() {", "+      public String getCurrent(PropertyMaps pm) {", "-        return super.getCurrent();", "+        return super.getCurrent(pm);", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.mode\",", "-                                                               \"Evaluates to true if a project is loaded.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new DrJavaProperty(\"project.mode\",", "+                                                                    \"Evaluates to true if a project is loaded.\") {", "+      public void update(PropertyMaps pm) {", "-      ", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.changed\",", "-                                                               \"Evaluates to true if the project has been \"+", "-                                                               \"changed since the last save.\") {  //TODO: factor out repeated code!", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new DrJavaProperty(\"project.changed\",", "+                                                                    \"Evaluates to true if the project has been \"+", "+                                                                    \"changed since the last save.\") {  //TODO: factor out repeated code!", "+      public void update(PropertyMaps pm) {", "-      ", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.file\", new Lambda<File,Void>() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new FileProperty(\"project.file\", new Lambda<File,Void>() {", "-                                                                   \"Returns the current project file in DrJava.\\n\"+", "-                                                                   \"Optional attributes:\\n\"+", "-                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "+                                                                  \"Returns the current project file in DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                    public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                  });", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.main.class\", new Lambda<File,Void>() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new FileProperty(\"project.main.class\", new Lambda<File,Void>() {", "-                                                                   \"Returns the current project file in DrJava.\\n\"+", "-                                                                   \"Optional attributes:\\n\"+", "-                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.root\", new Lambda<File,Void>() {", "+                                                                  \"Returns the current project file in DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                    public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                  });", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new FileProperty(\"project.root\", new Lambda<File,Void>() {", "-                                                                   \"Returns the current project root in DrJava.\\n\"+", "-                                                                   \"Optional attributes:\\n\"+", "-                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileProperty(\"project.build.dir\", new Lambda<File,Void>() {", "+                                                                  \"Returns the current project root in DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                    public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                  });", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new FileProperty(\"project.build.dir\", new Lambda<File,Void>() {", "-                                                                   \"Returns the current build directory in DrJava.\\n\"+", "-                                                                   \"Optional attributes:\\n\"+", "-                                                                   \"\\trel=\\\"<dir to which the output should be relative\\\"\"));", "+                                                                  \"Returns the current build directory in DrJava.\\n\"+", "+                                                                  \"Optional attributes:\\n\"+", "+                                                                  \"\\trel=\\\"<dir to which the output should be relative\\\"\") {", "+                                                                    public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "+                                                                  });", "-    PropertyMaps.ONLY.setProperty(\"Project\", classFilesProperty);", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.auto.refresh\",", "-                                                               \"Evaluates to true if project auto-refresh is enabled.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", classFilesProperty);", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new DrJavaProperty(\"project.auto.refresh\",", "+                                                                    \"Evaluates to true if project auto-refresh is enabled.\") {", "+      public void update(PropertyMaps pm) {", "-      ", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.excluded.files\", File.pathSeparator, DEF_DIR,", "-                                                                       \"Returns a list of files that are excluded from DrJava's \"+", "-                                                                       \"project auto-refresh.\\n\"+", "-                                                                       \"Optional attributes:\\n\"+", "-                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "-                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "-      protected List<File> getList() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new FileListProperty(\"project.excluded.files\", File.pathSeparator, DEF_DIR,", "+                                                                           \"Returns a list of files that are excluded from DrJava's \"+", "+                                                                           \"project auto-refresh.\\n\"+", "+                                                                           \"Optional attributes:\\n\"+", "+                                                                           \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                           \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.extra.class.path\", File.pathSeparator, DEF_DIR,", "-                                                                       \"Returns a list of files in the project's extra \"+", "-                                                                       \"class path.\\n\"+", "-                                                                       \"Optional attributes:\\n\"+", "-                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "-                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "-      protected List<File> getList() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Project\", new FileListProperty(\"project.extra.class.path\", File.pathSeparator, DEF_DIR,", "+                                                                           \"Returns a list of files in the project's extra \"+", "+                                                                           \"class path.\\n\"+", "+                                                                           \"Optional attributes:\\n\"+", "+                                                                           \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                           \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList(PropertyMaps pm) {", "+      public String getLazy(PropertyMaps pm) { return getCurrent(pm); }", "-    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.save.all\", \"(Save All...)\",", "-                                                                     \"Execute a \\\"Save All\\\" action.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Action\", new DrJavaActionProperty(\"action.save.all\", \"(Save All...)\",", "+                                                                         \"Execute a \\\"Save All\\\" action.\") {", "+      public void update(PropertyMaps pm) {", "-    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.compile.all\", \"(Compile All...)\",", "-                                                                     \"Execute a \\\"Compile All\\\" action.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Action\", new DrJavaActionProperty(\"action.compile.all\", \"(Compile All...)\",", "+                                                                         \"Execute a \\\"Compile All\\\" action.\") {", "+      public void update(PropertyMaps pm) {", "-    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.clean\", \"(Clean Build Directory...)\",", "-                                                                     \"Execute a \\\"Clean Build Directory\\\" action.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Action\", new DrJavaActionProperty(\"action.clean\", \"(Clean Build Directory...)\",", "+                                                                         \"Execute a \\\"Clean Build Directory\\\" action.\") {", "+      public void update(PropertyMaps pm) {", "-    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.open.file\", \"(Open File...)\",", "-                                                                     \"Execute an \\\"Open File\\\" action.\\n\"+", "-                                                                     \"Required attributes:\\n\"+", "-                                                                     \"\\tfile=\\\"<file to open>\\\"\\n\"+", "-                                                                     \"Optional attributes:\\n\"+", "-                                                                     \"\\tline=\\\"<line number to display>\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Action\", new DrJavaActionProperty(\"action.open.file\", \"(Open File...)\",", "+                                                                         \"Execute an \\\"Open File\\\" action.\\n\"+", "+                                                                         \"Required attributes:\\n\"+", "+                                                                         \"\\tfile=\\\"<file to open>\\\"\\n\"+", "+                                                                         \"Optional attributes:\\n\"+", "+                                                                         \"\\tline=\\\"<line number to display>\") {", "+      public void update(PropertyMaps pm) {", "-          final String dir = StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(DEF_DIR,", "-                                                                                          PropertyMaps.ONLY,", "+          final String dir = StringOps.unescapeFileName(StringOps.replaceVariables(DEF_DIR,", "+                                                                                          pm,", "-          final String fil = StringOps.unescapeSpacesWith1bHex(StringOps.replaceVariables(_attributes.get(\"file\"),", "-                                                                                          PropertyMaps.ONLY,", "+          final String fil = StringOps.unescapeFileName(StringOps.replaceVariables(_attributes.get(\"file\"),", "+                                                                                          pm,", "-    PropertyMaps.ONLY.setProperty(\"Action\", new DrJavaActionProperty(\"action.auto.refresh\", \"(Auto-Refresh...)\",", "-                                                                     \"Execute an \\\"Auto-Refresh Project\\\" action.\") {", "-      public void update() {", "+    PropertyMaps.TEMPLATE.setProperty(\"Action\", new DrJavaActionProperty(\"action.auto.refresh\", \"(Auto-Refresh...)\",", "+                                                                         \"Execute an \\\"Auto-Refresh Project\\\" action.\") {", "+      public void update(PropertyMaps pm) {"]}], "num": 21184}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7aa2be32290fbab60170b149b60dece", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061461952875fba231afd6c3821f5e34", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/CompilerErrorPanel.java", "commitBeforeChange": "077ea7d687567aea61da49d1d27cabc74c306eab", "commitAfterChange": "5f1b3bc3f3deca6d356567893a20298f4e5a94a7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 21, "signatureBeforeChange": "      void notifyChanged(int oldSize)", "signatureAfterChange": "      public void selectItem(int i)", "diff": ["-    void notifyChanged(int oldSize) {", "-      int sizeDelta = _errors.length - oldSize;", "-      if (sizeDelta > 0) {", "-        fireIntervalAdded(this, oldSize + 1, _errors.length - 1);", "-      else if (sizeDelta < 0) {", "-        fireIntervalRemoved(this, _errors.length + 1, oldSize - 1);", "-      // We use min of the two sizes since remove/add dealt with the ones", "-      // beyond the minimum of the sizes.", "-      fireContentsChanged(this, 0, Math.min(oldSize, _errors.length) + 1);", "+", "+    public void selectItem(int i) {", "+      _selectedIndex = i;", "+      _removeListHighlight();", "+", "+      // We don't highlight the first char of this error message", "+      // because it's the original \\n", "+      int startPos = _errorListPositions[i].getOffset() + 1;", "+", "+      // end pos is either the end of the document (if this is the last error)", "+      // or the char where the next error starts", "+      int endPos;", "+      if (i + 1 == _errors.length) {", "+        endPos = _doc.getLength();", "+      }", "+      else {", "+        endPos = _errorListPositions[i + 1].getOffset();", "+      }", "+", "+      try {", "+        _listHighlightTag =", "+          getHighlighter().addHighlight(startPos,", "+                                        endPos,", "+                                        _listHighlightPainter);", "+", "+        // Scroll to make sure this item is visible", "+        Rectangle startRect = modelToView(startPos);", "+        Rectangle endRect = modelToView(endPos - 1);", "+", "+        // Add the end rect onto the start rect to make a rectangle", "+        // that encompasses the entire errorp", "+        startRect.add(endRect);", "+", "+        scrollRectToVisible(startRect);", "+      } ", "+      catch (BadLocationException badBadLocation) {}", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b22ff7bdbe4f22bb67a9b320735e16c5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "077ea7d687567aea61da49d1d27cabc74c306eab", "commitAfterChange": "5f1b3bc3f3deca6d356567893a20298f4e5a94a7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 21, "signatureBeforeChange": "      void notifyChanged(int oldSize)", "signatureAfterChange": "      public void selectItem(int i)", "diff": ["-    void notifyChanged(int oldSize) {", "-      int sizeDelta = _errors.length - oldSize;", "-      if (sizeDelta > 0) {", "-        fireIntervalAdded(this, oldSize + 1, _errors.length - 1);", "-      else if (sizeDelta < 0) {", "-        fireIntervalRemoved(this, _errors.length + 1, oldSize - 1);", "-      // We use min of the two sizes since remove/add dealt with the ones", "-      // beyond the minimum of the sizes.", "-      fireContentsChanged(this, 0, Math.min(oldSize, _errors.length) + 1);", "+", "+    public void selectItem(int i) {", "+      _selectedIndex = i;", "+      _removeListHighlight();", "+", "+      // We don't highlight the first char of this error message", "+      // because it's the original \\n", "+      int startPos = _errorListPositions[i].getOffset() + 1;", "+", "+      // end pos is either the end of the document (if this is the last error)", "+      // or the char where the next error starts", "+      int endPos;", "+      if (i + 1 == _errors.length) {", "+        endPos = _doc.getLength();", "+      }", "+      else {", "+        endPos = _errorListPositions[i + 1].getOffset();", "+      }", "+", "+      try {", "+        _listHighlightTag =", "+          getHighlighter().addHighlight(startPos,", "+                                        endPos,", "+                                        _listHighlightPainter);", "+", "+        // Scroll to make sure this item is visible", "+        Rectangle startRect = modelToView(startPos);", "+        Rectangle endRect = modelToView(endPos - 1);", "+", "+        // Add the end rect onto the start rect to make a rectangle", "+        // that encompasses the entire errorp", "+        startRect.add(endRect);", "+", "+        scrollRectToVisible(startRect);", "+      } ", "+      catch (BadLocationException badBadLocation) {}", "+    }"]}], "num": 22290}
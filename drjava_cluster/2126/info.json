{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc5d4ef48f2ed0281e16e2b65075371d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c005bd8da0bbd3d7808d2de4b84210", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "34921a1a3d031bdf7caa876f32f38a6fdc9dedda", "commitAfterChange": "fca5fcebd9a0a23f563d800e635b0c2ebad1969e", "methodNumberBeforeChange": 273, "methodNumberAfterChange": 275, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "diff": ["+      String _topLevelPath;", "+      if(getProjectFile() != null){", "+        _topLevelPath = getProjectFile().getCanonicalPath();", "+        _topLevelPath = _topLevelPath.substring(0, _topLevelPath.lastIndexOf(File.separator));;", "+      }else{", "+        _topLevelPath = \"\";", "+      }", "-      _documentNavigator.addDocument(idoc, path);", "+      if (!path.equals(_topLevelPath) && !path.startsWith(_topLevelPath + File.separator) ){", "+        /** it's in external files, so don't give it a path */", "+        _documentNavigator.addDocument(idoc, \"\");", "+      }else{", "+        path = path.substring(_topLevelPath.length());", "+        _documentNavigator.addDocument(idoc, path);", "+      }", "+      ", "+      "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abec746d9a4dde79fbaeba8d8f456e7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "commitAfterChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   private static Log makeLog(String type, String tag)", "diff": ["-        if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "-        else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "-        else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "-        else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "-        else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "-        else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "-        else if (type.startsWith(\"file:\")) { result = makeFileLog(type.substring(5)); }", "-        else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "-        else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "-        else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "-        else { result = VoidLog.INSTANCE; }", "+        try {", "+          if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "+          else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "+          else if (type.startsWith(\"System.out:\")) { result = new SystemOutLog(getParam(type)); }", "+          else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "+          else if (type.startsWith(\"stdout:\")) { result = new SystemOutLog(getParam(type)); }", "+          else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "+          else if (type.startsWith(\"System.err:\")) { result = new SystemErrLog(getParam(type)); }", "+          else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "+          else if (type.startsWith(\"stderr\")) { result = new SystemErrLog(getParam(type)); }", "+          else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "+          else if (type.startsWith(\"file:\")) { result = makeFileLog(getParam(type)); }", "+          else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "+          else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "+          else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "+          else { result = VoidLog.INSTANCE; }", "+        }", "+        catch (Exception e) { result = VoidLog.INSTANCE; }"]}], "num": 2126}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bca9d34c9ff170582bb2d4e59a34a3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e057438d40aba350c631325c7f2121", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/ConfigOptionListeners.java", "commitBeforeChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "commitAfterChange": "df716c1c0097e3026300a60a646a72121f921c3d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent,                                            String value,                                            final OptionListener<String> l)", "signatureAfterChange": "      @SuppressWarnings(\"fallthrough\")   public static void sanitizeMasterJVMArgs(JFrame parent,                                            String value,                                            final OptionListener<String> l)", "diff": ["+  ", "+  @SuppressWarnings(\"fallthrough\")", "+  public static void sanitizeMasterJVMArgs(JFrame parent,", "+                                           String value,", "+                                           final OptionListener<String> l) {", "+    int pos = value.indexOf(\"-Xmx\");", "+    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "+        (pos==0)) {", "+      int endpos = pos+(\"-Xmx\".length());", "+      while((endpos<value.length()) &&", "+            (!Character.isWhitespace(value.charAt(endpos)))) {", "+        ++endpos;", "+      }", "+      ", "+      int startpos = pos+(\"-Xmx\".length());", "+      String size = value.substring(startpos,endpos);", "-  ", "-  @SuppressWarnings(\"fallthrough\")", "-  public static void sanitizeMasterJVMArgs(JFrame parent,", "-                                           String value,", "-                                           final OptionListener<String> l) {", "-    int pos = value.indexOf(\"-Xmx\");", "-    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||", "-        (pos==0)) {", "-      int startpos = pos+(\"-Xmx\".length());", "-      int endpos = startpos;", "-      while((endpos<value.length()) &&", "-            (!Character.isWhitespace(value.charAt(endpos)))) {", "-        ++endpos;", "-      }", "-", "-      String size = value.substring(startpos,endpos);", "-      long factor = 1;", "-      long heapSize;", "-      switch(size.toLowerCase().charAt(size.length()-1)) {", "-        case 'g':", "-          factor *= 1024; // fall-through intended", "-        case 'm':", "-          factor *= 1024; // fall-through intended", "-        case 'k':", "-          factor *= 1024; // fall-through intended", "-        default:", "-          try{", "-          heapSize = new Long(size.substring(0,size.length()-2)) * factor;", "-        }", "-          catch(NumberFormatException nfe) {", "-            heapSize = -1; // invalid", "-          }", "-      }", "+      long heapSizeMB = (heapSize / 1024) / 1024;", "+      // find the next bigger of the choices", "+      String newSetting = getNextBiggerHeapSize(heapSizeMB);", "-          \"Clean \\\"Main JVM Args\\\"\",", "+          \"Clean \\\"Master JVM Args\\\"\",", "-                           \"Would you like to copy the value\\n\\\"\"+size+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "+                           \"Would you like to copy the value \\\"\"+newSetting+\"\\\" into the \\\"Maximum Heap\\\" setting,\\n\"+", "-          DrJava.getConfig().setSetting(MASTER_JVM_XMX, size);", "+          DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);", "-        JOptionPane.showMessageDialog(parent,", "-                                      \"You will have to restart DrJava before the change takes effect.\");", "+        else {", "+          JOptionPane.showMessageDialog(parent,", "+                                        \"You will have to restart DrJava before the change takes effect.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abec746d9a4dde79fbaeba8d8f456e7f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/debug/DebugUtil.java", "commitBeforeChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "commitAfterChange": "1635ebcc866330c5b8ab6470e164e0d8b3584d8f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   private static Log makeLog(String type, String tag)", "signatureAfterChange": "   private static Log makeLog(String type, String tag)", "diff": ["-        if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "-        else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "-        else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "-        else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "-        else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "-        else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "-        else if (type.startsWith(\"file:\")) { result = makeFileLog(type.substring(5)); }", "-        else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "-        else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "-        else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "-        else { result = VoidLog.INSTANCE; }", "+        try {", "+          if (type.equals(\"void\")) { result = VoidLog.INSTANCE; }", "+          else if (type.equals(\"System.out\")) { result = new SystemOutLog(); }", "+          else if (type.startsWith(\"System.out:\")) { result = new SystemOutLog(getParam(type)); }", "+          else if (type.equals(\"stdout\")) { result = new SystemOutLog(); }", "+          else if (type.startsWith(\"stdout:\")) { result = new SystemOutLog(getParam(type)); }", "+          else if (type.equals(\"System.err\")) { result = new SystemErrLog(); }", "+          else if (type.startsWith(\"System.err:\")) { result = new SystemErrLog(getParam(type)); }", "+          else if (type.equals(\"stderr\")) { result = new SystemErrLog(); }", "+          else if (type.startsWith(\"stderr\")) { result = new SystemErrLog(getParam(type)); }", "+          else if (type.equals(\"file\")) { result = makeFileLog(tag.toLowerCase() + \"-log.txt\"); }", "+          else if (type.startsWith(\"file:\")) { result = makeFileLog(getParam(type)); }", "+          else if (type.equals(\"assert\")) { result = new AssertEmptyLog(); }", "+          else if (type.equals(\"popup\")) { result = new PopupLog(tag + \" Log\"); }", "+          else if (type.equals(\"tree\")) { result = new TreeLog(tag + \" Log\"); }", "+          else { result = VoidLog.INSTANCE; }", "+        }", "+        catch (Exception e) { result = VoidLog.INSTANCE; }"]}], "num": 7811}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d19c8e798df43e372a82b33c604b4c9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c933f7da760f413e9a9bd3be71f4860", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/SymbolData.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "\r   public static boolean _isAssignable(MethodData overwritten, MethodData overwriting)", "signatureAfterChange": "   private static boolean _isCompatible(MethodData overwritten, MethodData overwriting)", "diff": ["-  /**Compare the ModifiersAndVisibility of the 2 method data to determine if overwriting can override the access priviledges of overwritten.  */\r", "-  public static boolean _isAssignable(MethodData overwritten, MethodData overwriting) {\r", "-    if (overwritten.hasModifier(\"public\")) { //a public method can only be overwritten by a public method.\r", "-      return overwriting.hasModifier(\"public\");\r", "-    }\r", "-    if (overwritten.hasModifier(\"protected\")) { //a protected method can only be overwritten by a protected or public method\r", "-      return overwriting.hasModifier(\"protected\") || overwriting.hasModifier(\"public\");\r", "-    } \r", "-    \r", "-    if (!overwritten.hasModifier(\"private\")) { //only private methods can be overwritten by private methods\r", "-      return !overwriting.hasModifier(\"private\");\r", "-    }\r", "-    return true;\r", "-      \r", "-    \r", "-  }\r", "+    */", "+  private static boolean _isCompatible(MethodData overwritten, MethodData overwriting) {", "+    if (overwritten.hasModifier(\"public\")) { // A public method can only be overwritten by a public method.", "+      return overwriting.hasModifier(\"public\");", "+    }", "+    if (overwritten.hasModifier(\"protected\")) { // A protected method can only be overwritten by protected/public method", "+      return overwriting.hasModifier(\"protected\") || overwriting.hasModifier(\"public\");", "+    } ", "+    if (! overwritten.hasModifier(\"private\")) { // only private methods can be overwritten by private methods", "+      return !overwriting.hasModifier(\"private\");", "+    }", "+    return true;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fb8d0110a64e2a35e6f5bb4ba13d0f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ClassBodyIntermediateVisitor.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r   public void forAbstractMethodDefDoFirst(AbstractMethodDef that)", "signatureAfterChange": "   public void forAbstractMethodDefDoFirst(AbstractMethodDef that)", "diff": ["-  /*Make sure that this abstract method def is declared to be abstract*/\r", "-  public void forAbstractMethodDefDoFirst(AbstractMethodDef that) {\r", "-    if (!_symbolData.hasModifier(\"abstract\")) {\r", "-      _addError(\"Abstract methods can only be declared in abstract classes\", that);\r", "-    }\r", "-    ModifiersAndVisibility mav = that.getMav();\r", "-    String[] modifiers = mav.getModifiers();\r", "-    // Concrete methods can now be public, private, protected at the Intermediate level.  They still cannot be static.\r", "-    for (int i = 0; i < modifiers.length; i++) {\r", "-      if (modifiers[i].equals(\"static\")) {\r", "-        _addError(\"Static methods cannot be used at the Intermediate level\", that);\r", "-        break;\r", "-      }\r", "-    }\r", "-    super.forAbstractMethodDefDoFirst(that);\r", "-  }\r", "+  /*Make sure that this abstract method def is declared to be abstract*/", "+  public void forAbstractMethodDefDoFirst(AbstractMethodDef that) {", "+    if (!_classData.hasModifier(\"abstract\")) {", "+      _addError(\"Abstract methods can only be declared in abstract classes\", that);", "+    }", "+    ModifiersAndVisibility mav = that.getMav();", "+    String[] modifiers = mav.getModifiers();", "+    // Concrete methods can now be public, private, protected at the Intermediate level.  They still cannot be static.", "+    for (int i = 0; i < modifiers.length; i++) {", "+      if (modifiers[i].equals(\"static\")) {", "+        _addError(\"Static methods cannot be used at the Intermediate level\", that);", "+        break;", "+      }", "+    }", "+    super.forAbstractMethodDefDoFirst(that);", "+  }"]}], "num": 705}
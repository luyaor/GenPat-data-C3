{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3fb1c54f91db588abf4236cce4c86122", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a061494e21445544adaf25f51c7c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/SimpleInteractionsModel.java", "commitBeforeChange": "fcaea018ddf37a9ab6028c8711b6c2d8ff9d638b", "commitAfterChange": "58d3703a31a86d869d5704beb1265e4c3b20ccb8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   protected void _interpret(String toEval)", "signatureAfterChange": "   protected void _interpret(String toEval)", "diff": ["-      Object result = _interpreter.interpret(toEval);", "-      if (result != Interpreter.NO_RESULT) {", "-        append(String.valueOf(result) + \"\\n\" /* formerly StringOps.EOL*/, InteractionsDocument.OBJECT_RETURN_STYLE);", "+      Option<Object> result = _interpreter.interpret(toEval);", "+      if (result.isSome()) {", "+        String objString = null;", "+        try { objString = TextUtil.toString(Option.unwrap(result)); }", "+        catch (Throwable t) { throw new EvaluatorException(t); }", "+        append(objString + \"\\n\", InteractionsDocument.OBJECT_RETURN_STYLE);", "-    catch (ExceptionReturnedException e) {", "-      Throwable t = e.getContainedException();", "-      // getStackTrace should be a utility method somewhere...", "-      _document.appendExceptionResult(t.getClass().getName(),", "-                                      t.getMessage(),", "-                                      InterpreterJVM.getStackTrace(t),", "-                                      InteractionsDocument.DEFAULT_STYLE);", "+    catch (InterpreterException e) {", "+      StringWriter msg = new StringWriter();", "+      e.printUserMessage(new PrintWriter(msg));", "+      _document.appendExceptionResult(msg.toString(), InteractionsDocument.DEFAULT_STYLE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd3f9721475a1ff4f977df7073daeb50", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "ab54ffeb9782712c65269bca65fea798aa2c5712", "commitAfterChange": "beead1fa2c7ee24ed59761a6b295b4aa1355139e", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 4, "signatureBeforeChange": "   protected void handleSlaveConnected()", "signatureAfterChange": "   protected void handleSlaveConnected(SlaveRemote newSlave)", "diff": ["+   */", "+  protected void handleSlaveConnected(SlaveRemote newSlave) {", "+    InterpreterJVMRemoteI slaveCast = (InterpreterJVMRemoteI) newSlave;", "+    Boolean allowAccess = DrJava.getConfig().getSetting(OptionConstants.ALLOW_PRIVATE_ACCESS);", "+    try { slaveCast.setPrivateAccessible(allowAccess); }", "+    catch (RemoteException re) { _handleRemoteException(re); }", "+", "+    synchronized (_startupLock) {", "+      _restart = true;", "+      _cleanlyRestarting = false;", "+      _startupAttempts = 0;", "+      _slaveJVMUsed = false;", "+      _interpreterJVM.set(slaveCast); // initialized after all other state is set", "+      _startupComplete.signal();", "+    }", "+    _interactionsModel.interpreterReady(_workingDir);", "+    _junitModel.junitJVMReady();", "+  }", "-  /** Called when Interpreter JVM connects to us after being started. Assumes that _masterJVMLock is already held. */", "-  protected void handleSlaveConnected() {", "-    debug.logStart();", "-    // we reset the enabled flag since, unless told otherwise via", "-    // killInterpreter(false), we want to automatically respawn", "-//    System.out.println(\"handleSlaveConnected() called in MainJVM\");  // DEBUG", "-    _restart = true;", "-    _cleanlyRestarting = false;", "-    ", "-    Boolean allowAccess = DrJava.getConfig().getSetting(OptionConstants.ALLOW_PRIVATE_ACCESS);", "-    setPrivateAccessible(allowAccess.booleanValue());", "-    ", "-//    System.out.println(\"Calling interpreterReady(\" + _workDir + \") called in MainJVM\");  // DEBUG", "-    _interactionsModel.interpreterReady(_workDir);  // not running in the event thread!", "-    _junitModel.junitJVMReady();", "-    ", "-    _log.log(\"Main JVM Thread for slave connection is: \" + Thread.currentThread());", "-    ", "-    // notify a thread that is waiting in ensureInterpreterConnected", "-    synchronized(_interpreterLock) {", "-      _interpreterLock.notifyAll();", "-    }", "-    debug.logEnd();", "-  }"]}], "num": 12792}
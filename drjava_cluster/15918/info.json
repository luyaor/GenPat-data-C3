{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49dbddccf941e1464f7a40269372eea1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17b198a5a8311c452c15343d1f6a3f82", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData type_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData typeRes, TypeData valueRes)", "diff": ["-  public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData type_result, TypeData value_result) {", "-    if (type_result == null)  return null; ", "+  public TypeData forInstanceofExpressionOnly(InstanceofExpression that, TypeData typeRes, TypeData valueRes) {", "+    if (typeRes == null)  return null; ", "-    if (! assertFound(value_result, that) || ! assertFound(type_result, that)) return null;", "+    if (! assertFound(valueRes, that) || ! assertFound(typeRes, that)) return null;", "-    if (type_result.isInstanceType()) {", "+    if (typeRes.isInstanceType()) {", "-                  + \"  Perhaps you meant to check membership in the type itself, \" + type_result.getName(),", "+                  + \"  Perhaps you meant to check membership in the type itself, \" + typeRes.getName(),", "-    else if (assertInstanceType(value_result, \"You are trying to test if \" + value_result.getName() + ", "+    else if (assertInstanceType(valueRes, \"You are trying to test if \" + valueRes.getName() + ", "-               && ! value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), JAVA_VERSION)) {", "+               && ! valueRes.getSymbolData().isCastableTo(typeRes.getSymbolData(), JAVA_VERSION)) {", "-      _addError(\"You cannot test whether an expression of type \" + value_result.getName() + \" belongs to type \"", "-                  + type_result.getName() + \" because they are not related\", ", "+      _addError(\"You cannot test whether an expression of type \" + valueRes.getName() + \" belongs to type \"", "+                  + typeRes.getName() + \" because they are not related\", "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0353b63ec791c013e9d8a59e54ffda5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result)", "signatureAfterChange": "   public TypeData forCastExpressionOnly(CastExpression that, TypeData typeRes, TypeData valueRes)", "diff": ["-  public TypeData forCastExpressionOnly(CastExpression that, TypeData type_result, TypeData value_result) {", "-    if (type_result == null || value_result == null)  return null; ", "+  public TypeData forCastExpressionOnly(CastExpression that, TypeData typeRes, TypeData valueRes) {", "+    if (typeRes == null || valueRes == null)  return null; ", "-    if (! assertFound(value_result, that) || ! assertFound(type_result, that)) return null;", "+    if (! assertFound(valueRes, that) || ! assertFound(typeRes, that)) return null;", "-    if (type_result.isInstanceType()) {", "+    if (typeRes.isInstanceType()) {", "-                \"Perhaps you meant to cast to the type itself, \" + type_result.getName(), that);", "+                \"Perhaps you meant to cast to the type itself, \" + typeRes.getName(), that);", "-    else if (assertInstanceType(value_result, \"You are trying to cast \" + value_result.getName() + ", "+    else if (assertInstanceType(valueRes, \"You are trying to cast \" + valueRes.getName() + ", "-             !value_result.getSymbolData().isCastableTo(type_result.getSymbolData(), ", "+             !valueRes.getSymbolData().isCastableTo(typeRes.getSymbolData(), ", "-      _addError(\"You cannot cast an expression of type \" + value_result.getName() + \" to type \" + ", "-                type_result.getName() + \" because they are not related\", that);", "+      _addError(\"You cannot cast an expression of type \" + valueRes.getName() + \" to type \" + ", "+                typeRes.getName() + \" because they are not related\", that);", "-    return type_result.getInstanceData();", "+    return typeRes.getInstanceData();"]}], "num": 15918}
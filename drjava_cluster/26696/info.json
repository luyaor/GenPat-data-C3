{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e825991a0527427867e4011a9eb585cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d7ceea26bdf61cea31ff95892260036", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/XMLConfigTest.java", "commitBeforeChange": "f21f60b12bbd978bd39980f3ff0792b181091994", "commitAfterChange": "6e8f4e5161fa153bcd182c1b7aa1963d13d089bb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public void testSetFromNode() throws Exception", "signatureAfterChange": "\r   public void testSetFromNode() throws Exception", "diff": ["-  }", "-  public void testSetFromNode() throws Exception {", "-    XMLConfig xc = new XMLConfig();", "-    Node n = xc.set(\"foo/bar\", \"abc\", false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "-    ", "-    xc.set(\".fuz\", \"def\", n, false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());", "-    assertEquals(\"abc\", xc.get(\"foo/bar\"));", "-    ", "-    n = xc.set(\"fum\", \"\", n.getParentNode(), false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum></fum>\"+NL+\"</foo>\"+NL, xc.toString());", "-    assertEquals(\"\", xc.get(\"foo/fum\"));", "-    ", "-    xc.set(\"file\", \"test1.txt\", n, false);", "-    xc.set(\"file\", \"test2.txt\", n, false);", "-    ", "-    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL", "-                   + \"  <fum><file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL, xc.toString());", "-    List<String> r = xc.getMultiple(\"foo/fum/file\");", "-    assertEquals(2, r.size());", "-    assertEquals(\"test1.txt\", r.get(0));", "-    assertEquals(\"test2.txt\", r.get(1));", "-  }", "+  }\r", "+  public void testSetFromNode() throws Exception {\r", "+    XMLConfig xc = new XMLConfig();\r", "+    Node n = xc.set(\"foo/bar\", \"abc\", false);\r", "+    \r", "+    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar>abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "+    \r", "+    xc.set(\".fuz\", \"def\", n, false);\r", "+    \r", "+    assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"</foo>\"+NL, xc.toString());\r", "+    assertEquals(\"abc\", xc.get(\"foo/bar\"));\r", "+    \r", "+    n = xc.set(\"fum\", \"\", n.getParentNode(), false);\r", "+    \r", "+    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum></fum>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    else {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL+\"  <fum/>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    assertEquals(\"\", xc.get(\"foo/fum\"));\r", "+    \r", "+    xc.set(\"file\", \"test1.txt\", n, false);\r", "+    xc.set(\"file\", \"test2.txt\", n, false);\r", "+    \r", "+    if (System.getProperty(\"java.version\").startsWith(\"1.5\")) {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL\r", "+                     + \"  <fum><file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    else {\r", "+      assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"+NL+\"<foo>\"+NL+\"  <bar fuz=\\\"def\\\">abc</bar>\"+NL\r", "+                     + \"  <fum>\"+NL+\"    <file>test1.txt</file>\"+NL+\"    <file>test2.txt</file>\"+NL+\"  </fum>\"+NL+\"</foo>\"+NL,\r", "+                   xc.toString());\r", "+    }\r", "+    List<String> r = xc.getMultiple(\"foo/fum/file\");\r", "+    assertEquals(2, r.size());\r", "+    assertEquals(\"test1.txt\", r.get(0));\r", "+    assertEquals(\"test2.txt\", r.get(1));\r", "+  }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74183b5cbd09fc2e4b51a9ac82354292", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/JarJDKToolsLibrary.java", "commitBeforeChange": "37449cba11f74bdf3921e2b515b5228eef23235b", "commitAfterChange": "43a72be50c3246f8e631a488321fd0367ada5a58", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public static FullVersion guessVersion(File f, JDKDescriptor desc)", "signatureAfterChange": "      public static FullVersion guessVersion(File f, JDKDescriptor desc)", "diff": ["+    String name;  // promoted outward for logging purposes", "+    String path;  // promoted outward for logging purposes", "-      String name = current.getName();", "-      String path = current.getAbsolutePath();", "-      if (!forceUnknown) {", "-        if (path.startsWith(\"/System/Library/Frameworks/JavaVM.framework\")) vendor = \"apple\";", "+      name = current.getName();", "+      path = current.getAbsolutePath();", "+      if (! forceUnknown) {", "+        if (path.startsWith(\"/System/Library/Frameworks/JavaVM.framework\") || path.startsWith(\"/Library/Java\")) vendor = \"apple\";", "+        else if (path.toLowerCase().contains(\"oracle\")) vendor = \"oracle\";", "-        result = JavaVersion.parseFullVersion(parsedVersion = name.substring(4),vendor,vendor,f);", "+        parsedVersion = name.substring(4);", "+        result = JavaVersion.parseFullVersion(parsedVersion, vendor, vendor, f);", "-        result = JavaVersion.parseFullVersion(parsedVersion = name.substring(3),vendor,vendor,f);", "+        parsedVersion = name.substring(3); ", "+        result = JavaVersion.parseFullVersion(parsedVersion, vendor, vendor, f);", "-      else if (name.startsWith(\"j2sdk\")) {", "-        result = JavaVersion.parseFullVersion(parsedVersion = name.substring(5),vendor,vendor,f);", "+      else if (name.startsWith(\"j2sdk\") || name.startsWith(\"java-\")) {", "+        parsedVersion = name.substring(5);", "+        result = JavaVersion.parseFullVersion(parsedVersion, vendor, vendor, f);", "-      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) {", "-        result = JavaVersion.parseFullVersion(parsedVersion = name,vendor,vendor,f);", "+      else if (name.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+.*\")) {  // The \\d+ fields actually match single digits; .* matches an arbitrary suffix", "+        msg(\"Invoking parseFullVersion on \" + name + \", \" + vendor + \", \" + vendor + \", \" + f);  //Strip off 1.x where x is 6 or 7", "+        parsedVersion = name.substring(0, 5);  // could be generalized to multi-digit matches by using index of first char in .* instead of 5", "+        result = JavaVersion.parseFullVersion(parsedVersion, vendor, vendor, f);", "+        msg(\"Result is: \" + result.versionString());", "+    ", "-            result = JavaVersion.parseFullVersion(parsedVersion = v,vendor,vendor,f);", "+            result = JavaVersion.parseFullVersion(parsedVersion = v, vendor, vendor, f);", "-    if ((result == null) || (result.vendor()==JavaVersion.VendorType.UNKNOWN)) {", "-      if (!forceUnknown) {", "-        if (result.majorVersion().compareTo(JavaVersion.JAVA_6)<0) {", "+    if ((result == null) || (result.vendor() == JavaVersion.VendorType.UNKNOWN)) {", "+      if (! forceUnknown) {", "+        if (result.majorVersion().compareTo(JavaVersion.JAVA_6) < 0) {", "+    msg(\"Guessed version for \" + path + \" is \" + result.versionString());"]}], "num": 26696}
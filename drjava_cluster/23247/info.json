{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46beb194fd4c3919d3678916c084b3f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c485d41d4c76843c705e7f6cf6efeac", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 483, "methodNumberAfterChange": 483, "signatureBeforeChange": "\r \r   public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that)", "signatureAfterChange": "    public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that)", "diff": ["-\r", "-  public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that) {\r", "-    forComplexThisConstructorInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forComplexThisConstructorInvocationOnly(that);\r", "-  }\r", "+", "+  public void forComplexThisConstructorInvocation(ComplexThisConstructorInvocation that) {", "+    forComplexThisConstructorInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getArguments().visit(this);", "+    forComplexThisConstructorInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc944a2cc4ddfef50ca1612be778033", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 486, "methodNumberAfterChange": 486, "signatureBeforeChange": "\r \r   public void forClassLiteral(ClassLiteral that)", "signatureAfterChange": "    public void forClassLiteral(ClassLiteral that)", "diff": ["-\r", "-  public void forClassLiteral(ClassLiteral that) {\r", "-    forClassLiteralDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getType().visit(this);\r", "-    forClassLiteralOnly(that);\r", "-  }\r", "+", "+  public void forClassLiteral(ClassLiteral that) {", "+    forClassLiteralDoFirst(that);", "+    if (prune(that)) return;", "+    that.getType().visit(this);", "+    forClassLiteralOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc42118e37f67d0f4c3bf0d668fea670", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 481, "methodNumberAfterChange": 481, "signatureBeforeChange": "\r \r   public void forComplexMethodInvocation(ComplexMethodInvocation that)", "signatureAfterChange": "    public void forComplexMethodInvocation(ComplexMethodInvocation that)", "diff": ["-\r", "-  public void forComplexMethodInvocation(ComplexMethodInvocation that) {\r", "-    forComplexMethodInvocationDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getEnclosing().visit(this);\r", "-    that.getName().visit(this);\r", "-    that.getArguments().visit(this);\r", "-    forComplexMethodInvocationOnly(that);\r", "-  }\r", "+", "+  public void forComplexMethodInvocation(ComplexMethodInvocation that) {", "+    forComplexMethodInvocationDoFirst(that);", "+    if (prune(that)) return;", "+    that.getEnclosing().visit(this);", "+    that.getName().visit(this);", "+    that.getArguments().visit(this);", "+    forComplexMethodInvocationOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f11a79833cc9d062f72605b0a71d4ddb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 487, "methodNumberAfterChange": 487, "signatureBeforeChange": "\r \r   public void forArrayAccess(ArrayAccess that)", "signatureAfterChange": "    public void forArrayAccess(ArrayAccess that)", "diff": ["-\r", "-  public void forArrayAccess(ArrayAccess that) {\r", "-    forArrayAccessDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    that.getArray().visit(this);\r", "-    that.getIndex().visit(this);\r", "-    forArrayAccessOnly(that);\r", "-  }\r", "+", "+  public void forArrayAccess(ArrayAccess that) {", "+    forArrayAccessDoFirst(that);", "+    if (prune(that)) return;", "+    that.getArray().visit(this);", "+    that.getIndex().visit(this);", "+    forArrayAccessOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffea1f192955328a02cf132a734273e1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "771a0aee635c62bc6d0a2000fe605dc1113ef2b9", "commitAfterChange": "d1e56ac5c281c4b03c498f59138895f0f26350fa", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public int getIntelligentBeginLinePos(int currPos) throws BadLocationException", "signatureAfterChange": "   public int getIntelligentBeginLinePos(int currPos) throws BadLocationException", "diff": ["-      if (firstRealChar < currPos) {", "-        return firstRealChar;", "-      }", "+      if (firstRealChar < currPos)  return firstRealChar;"]}], "num": 23247}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61385cf61a2068670af7f051e09a6f21", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9ccd92d3715a3d78c607b6fab3b13a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk16/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "commitAfterChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private Context createContext(File[] sourceRoots)", "signatureAfterChange": "    private Context _createContext(List<? extends File> classPath, List<? extends File> sourcePath, File destination,                                   List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-  ", "-  private Context createContext(File[] sourceRoots) {", "-    Context _context = new Context();", "-    Options options = Options.instance(_context);", "-    // options.putAll(CompilerOptions.getOptions(_warningsEnabled));  // No putAll(String, String) method in Options!", "-    for (Map.Entry<String, String> e: CompilerOptions.getOptions(_warningsEnabled).entrySet()) ", "+  private Context _createContext(List<? extends File> classPath, List<? extends File> sourcePath, File destination, ", "+                                 List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {", "+    Context context = new Context();", "+    Options options = Options.instance(context);", "+    for (Map.Entry<String, String> e : CompilerOptions.getOptions(showWarnings).entrySet()) {", "-", "+    }", "+    ", "-", "-    // Set output target version", "-    _addSourceAndTargetOptions(options);   ", "-", "-    String sourceRootString = getSourceRootString(sourceRoots);", "-    options.put(\"-sourcepath\", sourceRootString /*sourceRoot.getAbsolutePath()*/);", "-", "-    String cp = System.getProperty(\"java.class.path\");", "-    // Adds extra.classpath to the classpath.", "-    cp += _extraClassPath;", "-    cp += File.pathSeparator + sourceRootString;", "-    options.put(\"-classpath\", cp);    ", "-    return _context;", "+    if (classPath != null) { options.put(\"-classpath\", _pathToString(classPath)); }", "+    if (sourcePath != null) { options.put(\"-sourcepath\", _pathToString(sourcePath)); }", "+    if (destination != null) { options.put(\"-d\", destination.getPath()); }", "+    if (bootClassPath != null) { options.put(\"-bootclasspath\", _pathToString(bootClassPath)); }", "+    if (sourceVersion != null) { options.put(\"-source\", sourceVersion); }", "+    if (!showWarnings) { options.put(\"-nowarn\", \"\"); }", "+    ", "+    return context;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "becce7572b2e307c4e75ecce9cb65c6b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk14/edu/rice/cs/drjava/model/compiler/Javac141Compiler.java", "commitBeforeChange": "c0d7f23f7940c03c6774a2c608b9ab495655e5b1", "commitAfterChange": "c96f6b2e58df41c403474d4e2c581d0c1d878a78", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected Context createContext(File[] sourceRoots)", "signatureAfterChange": "      protected Context _createContext(List classPath, List sourcePath, File destination,                                     List bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-  ", "-  protected Context createContext(File[] sourceRoots) {", "+  protected Context _createContext(List/*<? extends File>*/ classPath, List/*<? extends File>*/ sourcePath, File destination, ", "+                                   List/*<? extends File>*/ bootClassPath, String sourceVersion, boolean showWarnings) {", "-    HashMap/*<String,String>*/ toAdd = CompilerOptions.getOptions(_warningsEnabled);", "-    LinkedList /*<String>*/ keys = new LinkedList/*<String>*/(toAdd.keySet());", "-    LinkedList /*<String>*/values = new LinkedList/*<String>*/(toAdd.values());", "-        ", "-    for(int i = 0; i< toAdd.size(); i++)", "-      options.put((String)values.get(i), (String)values.get(i));", "-    ", "-    //options.putAll(CompilerOptions.getOptions(_warningsEnabled));", "-    ", "+    Iterator/*<Map.Entry<String, String>>*/ optsI = CompilerOptions.getOptions(showWarnings).entrySet().iterator();", "+    while (optsI.hasNext()) {", "+      Map.Entry/*<String, String>*/ entry = (Map.Entry) optsI.next();", "+      options.put((String) entry.getKey(), (String) entry.getValue());", "+    }", "+", "-    // turn on generics, if we have em", "-    _addGenericsOption(options);", "-", "-    // Set output target version", "-    _addSourceAndTargetOptions(options);", "-    ", "-", "-    String sourceRootString = getSourceRootString(sourceRoots);", "-    options.put(\"-sourcepath\", sourceRootString /*sourceRoot.getAbsolutePath()*/);", "-", "-    String cp = System.getProperty(\"java.class.path\");", "-    // Adds extra.classpath to the classpath.", "-    cp += _extraClassPath;", "-    cp += File.pathSeparator + sourceRootString;", "-    ", "-    options.put(\"-classpath\", cp);", "+    if (classPath != null) { options.put(\"-classpath\", _pathToString(classPath)); }", "+    if (sourcePath != null) { options.put(\"-sourcepath\", _pathToString(sourcePath)); }", "+    if (destination != null) { options.put(\"-d\", destination.getPath()); }", "+    if (bootClassPath != null) { options.put(\"-bootclasspath\", _pathToString(bootClassPath)); }", "+    if (sourceVersion != null) { options.put(\"-source\", sourceVersion); }", "+    if (!showWarnings) { options.put(\"-nowarn\", \"\"); }"]}], "num": 2815}
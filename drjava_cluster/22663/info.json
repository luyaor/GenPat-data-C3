{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "806b86f99a529c27be24c476bd006315", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "314c6df4acffe1dcc752509958b50d85", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 53, "signatureBeforeChange": "   public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException", "signatureAfterChange": "   public void testUndoAndRedoAfterMultipleLineIndent() throws BadLocationException", "diff": ["-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "+    _doc.addUndoableEditListener(_doc.getUndoManager());", "-    _defModel.insertString(0,text,null);", "-    assertEquals(\"insertion\",text, _defModel.getText()); ", "+    _doc.insertString(0,text,null);", "+    assertEquals(\"insertion\",text, _doc.getText()); ", "-    _defModel.getUndoManager().startCompoundEdit();", "-    _defModel.indentLines(0,_defModel.getLength());", "-    assertEquals(\"indenting\",indented, _defModel.getText());", "-    _defModel.getUndoManager().undo();", "-    assertEquals(\"undo\",text, _defModel.getText());", "-    _defModel.getUndoManager().redo();", "-    assertEquals(\"redo\",indented, _defModel.getText());", "+    _doc.getUndoManager().startCompoundEdit();", "+    indentLines(0,_doc.getLength());", "+    assertEquals(\"indenting\",indented, _doc.getText());", "+    _doc.getUndoManager().undo();", "+    assertEquals(\"undo\",text, _doc.getText());", "+    _doc.getUndoManager().redo();", "+    assertEquals(\"redo\",indented, _doc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48b9e69a7ed972543a80dd397e114402", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocumentTest.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 56, "signatureBeforeChange": "   public void testUndoOrRedoSetsUnmodifiedState() throws BadLocationException", "signatureAfterChange": "   public void testUndoOrRedoSetsUnmodifiedState() throws BadLocationException", "diff": ["-    _defModel.addUndoableEditListener(_defModel.getUndoManager());", "-    _defModel.insertString(0, \"This is text\", null);", "-    assertTrue(\"Document should be modified.\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().undo();", "-    _defModel.updateModifiedSinceSave();", "-    assertFalse(\"Document should no longer be modified after undo.\", _defModel.isModifiedSinceSave());", "-    _defModel.insertString(0, \"This is text\", null);", "-    _defModel.resetModification();", "-    assertFalse(\"Document should not be modified after \\\"save\\\".\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().undo();", "-    _defModel.updateModifiedSinceSave();", "-    assertTrue(\"Document should be modified after undo.\", _defModel.isModifiedSinceSave());", "-    _defModel.getUndoManager().redo();", "-    _defModel.updateModifiedSinceSave();", "-    assertFalse(\"Document should no longer be modified after redo.\", _defModel.isModifiedSinceSave());", "+    _doc.addUndoableEditListener(_doc.getUndoManager());", "+    _doc.insertString(0, \"This is text\", null);", "+    assertTrue(\"Document should be modified.\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().undo();", "+    _doc.updateModifiedSinceSave();", "+    assertFalse(\"Document should no longer be modified after undo.\", _doc.isModifiedSinceSave());", "+    _doc.insertString(0, \"This is text\", null);", "+    _doc.resetModification();", "+    assertFalse(\"Document should not be modified after \\\"save\\\".\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().undo();", "+    _doc.updateModifiedSinceSave();", "+    assertTrue(\"Document should be modified after undo.\", _doc.isModifiedSinceSave());", "+    _doc.getUndoManager().redo();", "+    _doc.updateModifiedSinceSave();", "+    assertFalse(\"Document should no longer be modified after redo.\", _doc.isModifiedSinceSave());"]}], "num": 22663}
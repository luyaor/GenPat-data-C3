{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d537ed578a969a1804f66d0eaaeab222", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "258c9c370f5523fd368976e70911c028", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupDisplayPanel(ConfigPanel panel)", "diff": ["-      new ForcedChoiceOptionComponent(OptionConstants.LOOK_AND_FEEL, \"Look and Feel\", this,", "-                                      \"Changes the general appearance of DrJava.\");", "+      newForcedChoiceOptionComponent(OptionConstants.LOOK_AND_FEEL);", "-      new ForcedChoiceOptionComponent(OptionConstants.PLASTIC_THEMES, \"Plastic Theme\", this,", "-                                      \"Pick the theme to be used by the Plastic family of Look and Feels\");", "+      newForcedChoiceOptionComponent(OptionConstants.PLASTIC_THEMES);", "-        plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().startsWith(\"com.jgoodies.looks.plastic.\"));", "+        plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().", "+                                                     startsWith(\"com.jgoodies.looks.plastic.\"));", "-    plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().startsWith(\"com.jgoodies.looks.plastic.\"));", "+    plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().", "+                                                 startsWith(\"com.jgoodies.looks.plastic.\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LINEENUM_ENABLED,", "-                                                  \"Show All Line Numbers\", this,", "-                                                  \"Whether to show line numbers on the left side of the Definitions Pane.\"));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.LINEENUM_ENABLED));", "-                       new BooleanOptionComponent(OptionConstants.SHOW_SOURCE_WHEN_SWITCHING, ", "-                                                  \"Show sample of source code when fast switching\", ", "-                                                  this,", "-                                                  \"Whether to show a sample of the source code under the document's filename when fast switching documents.\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.SHOW_CODE_PREVIEW_POPUPS, ", "-                                                  \"Show Code Preview Popups\", this,", "-                                                  \"<html>Whether to show a popup window with a code preview when the mouse is hovering<br>\"+", "-                                                  \"over an item in the Breakpoints, Bookmarks and Find All panes.</html>\"));", "-        ", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.CLIPBOARD_HISTORY_SIZE,", "-                                                  \"Size of Clipboard History\", this,", "-                                                         \"Determines how many entries are kept in the clipboard history.\"));", "+                       newBooleanOptionComponent(OptionConstants.SHOW_SOURCE_WHEN_SWITCHING));", "+    ", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.SHOW_CODE_PREVIEW_POPUPS));", "+    ", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.CLIPBOARD_HISTORY_SIZE));", "-      new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\",", "-                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,", "-                                 \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+", "-                                 \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\");", "+      newBooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED);", "-      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Scan Class Files After Each Compile for Auto-Completion and Auto-Import\",", "-                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,", "-                                 \"<html>Whether to scan the class files after a compile to generate class names<br>\"+", "-                                 \"used for auto-completion and auto-import.<br>\"+", "-                                 \"Enabling this option will slow compiles down.</html>\");", "+      newBooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES);", "-      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,", "-                                 \"<html><p align=\\\"right\\\">\" + ", "-                                 StringOps.", "-                                   splitStringAtWordBoundaries(\"Consider Java API Classes for Auto-Completion\",", "-                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,", "-                                 \"Whether to use the names of the Java API classes for auto-completion as well.\");", "+      newBooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI);", "-      new BooleanOptionComponent(OptionConstants.DISPLAY_RIGHT_MARGIN, \"Display right margin\", this,", "-                                 \"Whether to display a line at the right margin.\");", "+      newBooleanOptionComponent(OptionConstants.DISPLAY_RIGHT_MARGIN);", "-      new IntegerOptionComponent(OptionConstants.RIGHT_MARGIN_COLUMNS,", "-                                 \"Right Margin Position\", this,", "-                                 \"The number of columns after which the right margin is displayed.\");", "+      newIntegerOptionComponent(OptionConstants.RIGHT_MARGIN_COLUMNS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5535ca6d99ab8633e168679fb132e8ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 58, "signatureBeforeChange": "   private void _setupMiscPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupMiscPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.INDENT_LEVEL,", "-                                                  \"Indent Level\", this,", "-                                                  \"The number of spaces to use for each level of indentation.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.RECENT_FILES_MAX_SIZE, \"Recent Files List Size\", this,", "-                                                  \"<html>The number of files to remember in<br>\" +", "-                                                  \"the recently used files list in the File menu.</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE,", "-                                                         \"Maximum Size of Browser History\", ", "-                                                         this,", "-                                                         \"Determines how many entries are kept in the browser history.\"));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.INDENT_LEVEL));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.RECENT_FILES_MAX_SIZE));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE));", "-                       new BooleanOptionComponent(OptionConstants.AUTO_CLOSE_COMMENTS, \"Automatically Close Block Comments\", ", "-                                                  this,", "-                                                  \"<html>Whether to automatically insert a closing comment tag (\\\"*/\\\")<br>\" +", "-                                                  \"when the enter key is pressed after typing a new block comment<br>\" +", "-                                                  \"tag (\\\"/*\\\" or \\\"/**\\\").</html>\"));", "-    String runWithAssertMsg = ", "-      \"<html>Whether to execute <code>assert</code> statements in classes running in the interactions pane.</html>\";", "+                       newBooleanOptionComponent(OptionConstants.AUTO_CLOSE_COMMENTS));", "-                       new BooleanOptionComponent(OptionConstants.RUN_WITH_ASSERT, \"Enable Assert Statement Execution\", ", "-                                                  this,", "-                                                  runWithAssertMsg));", "+                       newBooleanOptionComponent(OptionConstants.RUN_WITH_ASSERT));", "-                       new BooleanOptionComponent(OptionConstants.BACKUP_FILES, \"Keep Emacs-style Backup Files\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should keep a backup copy of each file that<br>\" +", "-                                                  \"the user modifies, saved with a '~' at the end of the filename.</html>\"));", "+                       newBooleanOptionComponent(OptionConstants.BACKUP_FILES));", "-                       new BooleanOptionComponent(OptionConstants.RESET_CLEAR_CONSOLE, \"Clear Console After Interactions Reset\", ", "-                                                  this,", "-                                                  \"Whether to clear the Console output after resetting the Interactions Pane.\"));", "+                       newBooleanOptionComponent(OptionConstants.RESET_CLEAR_CONSOLE));", "-                       new BooleanOptionComponent(OptionConstants.FIND_REPLACE_FOCUS_IN_DEFPANE, ", "-                                                  \"Focus on the definitions pane after find/replace\", ", "-                                                  this,", "-                                                  \"<html>Whether to focus on the definitions pane after executing a find/replace operation.<br>\" +", "-                                                  \"If this is not selected, the focus will be in the Find/Replace pane.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DRJAVA_USE_FORCE_QUIT, ", "-                                                  \"Forcefully Quit DrJava\", this,", "-                                                  \"<html>On some platforms, DrJava does not shut down properly when files are open<br>\"+", "-                                                  \"(namely tablet PCs). Check this option to force DrJava to close.</html>\"));", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.REMOTE_CONTROL_ENABLED, ", "-                                                  \"Enable Remote Control\", this,", "-                                                  \"<html>Whether DrJava should listen to a socket (see below) so it<br>\"+", "-                                                         \"can be remote controlled and told to open files.<br>\"+", "-                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.REMOTE_CONTROL_PORT, ", "-                                                         \"Remote Control Port\", this,", "-                                                         \"<html>A running instance of DrJava can be remote controlled and<br>\"+", "-                                                         \"told to open files. This specifies the port used for remote control.<br>\" + ", "-                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.FOLLOW_FILE_DELAY, ", "-                                                         \"Follow File Delay\", this,", "-                                                         \"<html>The delay in milliseconds that has to elapse before DrJava will check<br>\"+", "-                                                         \"if a file that is being followed or the output of an external process has changed.</html>\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.FOLLOW_FILE_LINES, ", "-                                                         \"Maximum Lines in \\\"Follow File\\\" Window\", this,", "-                                                         \"<html>The maximum number of lines to keep in a \\\"Follow File\\\"<br>\"+", "-                                                         \"or \\\"External Process\\\" pane. Enter 0 for unlimited.</html>\"));", "+                       newBooleanOptionComponent(OptionConstants.FIND_REPLACE_FOCUS_IN_DEFPANE));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DRJAVA_USE_FORCE_QUIT));", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.REMOTE_CONTROL_ENABLED));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.REMOTE_CONTROL_PORT));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.FOLLOW_FILE_DELAY));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.FOLLOW_FILE_LINES));", "-//    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED, ", "-//                                                  \"Perform lightweight parsing\", this,", "-//                                                  \"<html>Whether to continuously parse the source file for useful information.<br>\" +", "-//                                                  \"Enabling this option might introduce delays when editing files.<html>\"));", "-//    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY, \"Light-weight parsing delay in milliseconds\", this,", "-//                                                  \"The amount of time DrJava will wait after the last keypress before beginning to parse.\"));", "+//    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED));", "+//    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY));"]}], "num": 22574}
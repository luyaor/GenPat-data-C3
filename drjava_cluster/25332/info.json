{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b48b9fd3076f4f6ca192f56680949302", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b117098871be79351346bf809be5a5b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/error/ExecutionError.java", "commitBeforeChange": "17b59cf1640c29fbcc5ed0fdfe96f8053eaa1da0", "commitAfterChange": "eef32107e75e031eb7210130ce310e1714e51b91", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public String getMessage()", "signatureAfterChange": "   public String getMessage()", "diff": ["-    return reader.getMessage(rawMessage,", "-                             node != null &&", "-                             node.hasProperty(NodeProperties.ERROR_STRINGS)", "-                               ? (String[])node.getProperty(NodeProperties.ERROR_STRINGS)", "-                               : null);", "+    String [] args = new String[0];", "+    if (node != null && NodeProperties.hasErrorStrings(node)) { args = NodeProperties.getErrorStrings(node); }", "+    return reader.getMessage(rawMessage, args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcff77a50f8504630e9ba9138c2e34fa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "fee21edb1b15f1499b5409a250cdb90d3f204739", "commitAfterChange": "e100da4da75b9cbdfc04df45bf52679ed811f23a", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 179, "signatureBeforeChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "signatureAfterChange": "   private void _loadProject(final ProjectFileIR ir) throws IOException", "diff": ["+    edu.rice.cs.util.Log LOG = new edu.rice.cs.util.Log(\"docs.txt\",true);", "-      if (f.isActive()) active = f;", "-      else projFiles.add(f);  // add to projFiles unless active", "-      if(f.isActive()) active = f;", "+      if (f.isActive()) { active = f; }", "+      projFiles.add(f);", "-      if (f.isActive()) active = f;", "-      else projFiles.add(f);  // add to projFiles unless active", "+      if (f.isActive()) { active = f; }", "+      projFiles.add(f);", "-    ", "-    // Insert active file as last file on list.", "-    if (active != null) projFiles.add(active);   ", "-//    //Set active document from project file", "-//    if(active != null) { //TEMP", "-//      setActiveDocument(projDocs.get(projDocs.size() - 1));", "-//    }", "-//    OpenDefinitionsDocument.getCanonicalPath()", "-////  Search for active document within opendefdocs", "-//    Utilities.show(\"Setting Active Document...\");", "-//    if(active != null) {", "-//      String path = projFiles.get(projFiles.size() - 1).getCanonicalPath();", "-//      Utilities.show(\"Active document path: \" + path);", "-//      for(OpenDefinitionsDocument doc: projDocs) {", "-//        Utilities.show(\"Searching path: \" + doc.getCanonicalPath());", "-//        if(doc.getCanonicalPath().compareTo(path) == 0) {", "-//          setActiveDocument(doc);", "-//          Utilities.show(\"New active document set\");", "-//          break;", "-//        }", "-//      }", "-//    }", "+    //Set active document from project file", "+    if(active != null) {", "+      setActiveDocument(getDocumentForFile(active));", "+    }", "-    ", "-    if(_state.getAutoRefreshStatus()) { openNewFilesInProject(); }", "+    // perform a project auto-refresh if specified", "+    if(_state.getAutoRefreshStatus()) { autoRefreshProject(); }", "+  }"]}], "num": 25332}
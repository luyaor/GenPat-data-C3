{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69c7f05c5a94f2481a0970388010be98", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b2d903dcd4f3f11f928cfa548b15b4c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "   public Class visit(OrExpression node)", "signatureAfterChange": "   public Class visit(OrExpression node)", "diff": ["-    Node  ln = node.getLeftExpression();", "-    Node  rn = node.getRightExpression();", "+    Expression ln = node.getLeftExpression();", "+    Expression rn = node.getRightExpression();", "-    if (lc != boolean.class || rc != boolean.class) {", "+    if (!(lc == boolean.class || lc == Boolean.class) || ", "+        !(rc == boolean.class || rc == Boolean.class) ) {", "+    }", "+", "+    // Auto-unbox, if necessary", "+    if (lc == Boolean.class) {", "+      node.setLeftExpression(_unbox(ln, lc));", "+    }", "+    if (rc == Boolean.class) {", "+      node.setRightExpression(_unbox(rn, rc));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe9a020ba2fb346b7e3f5d87c77fa4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "4294d4cc553e93457f1d00d126d1e59656e5953f", "commitAfterChange": "37c397e60e308f3d693028fa49fb7a4f5f0000e5", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 88, "signatureBeforeChange": "   private Class visitShiftExpression(BinaryExpression node)", "signatureAfterChange": "   private Class visitShiftExpression(BinaryExpression node)", "diff": ["-    Class lc = node.getLeftExpression().acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Expression leftExp = node.getLeftExpression();", "+    Expression rightExp = node.getRightExpression();", "+    Class lc = leftExp.acceptVisitor(this);", "+    Class rc = rightExp.acceptVisitor(this);", "+        lc == Float.class   || rc == Float.class   ||", "-        !lc.isPrimitive()   || !rc.isPrimitive()) {", "-      throw new ExecutionError(\"shift.expression.type\", node);", "-    } else if (lc == long.class) {", "+        lc == Double.class  || rc == Double.class  ||", "+        !(lc.isPrimitive()  || _isBoxingType(lc))  || ", "+        !(rc.isPrimitive()  || _isBoxingType(rc)) ) {", "+      throw new RuntimeException(\"lc: \" + lc + \", rc: \" + rc);", "+//      throw new ExecutionError(\"shift.expression.type\", node);", "+    } ", "+    ", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(lc) && !leftExp.hasProperty(NodeProperties.MODIFIER)) {", "+      node.setLeftExpression(_unbox(leftExp, lc));", "+    }", "+    if (_isBoxingType(rc)) {", "+      node.setRightExpression(_unbox(rightExp, rc));", "+    }", "+    ", "+    if (lc == long.class || lc == Long.class) {", "-    } else {", "+    } ", "+    else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe281028e8c6152255d1fdbff9c1be8c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "   private Class visitRelationalExpression(BinaryExpression node)", "signatureAfterChange": "   private Class visitRelationalExpression(BinaryExpression node)", "diff": ["-    Class lc = node.getLeftExpression().acceptVisitor(this);", "-    Class rc = node.getRightExpression().acceptVisitor(this);", "+    Expression leftExp = node.getLeftExpression();", "+    Expression rightExp = node.getRightExpression();", "+    Class lc = leftExp.acceptVisitor(this);", "+    Class rc = rightExp.acceptVisitor(this);", "-        !lc.isPrimitive()   || !rc.isPrimitive()) {", "+        !(lc.isPrimitive()  || _isBoxingType(lc))   || ", "+        !(rc.isPrimitive()  || _isBoxingType(rc))) {", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(lc)) {", "+      node.setLeftExpression(_unbox(leftExp, lc));", "+    }", "+    if (_isBoxingType(rc)) {", "+      node.setRightExpression(_unbox(rightExp, rc));", "+    }", "+    "]}], "num": 22789}
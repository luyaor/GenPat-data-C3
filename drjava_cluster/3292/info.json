{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd0fc11a619a3e0d360bf2717fdc84a6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b7c5561a36ad645538d163abe6f2ee2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "234bd4844cd05b54b5a22923acbe058c4a23f276", "commitAfterChange": "c992bd1a9776dc6e821e2f4ee9a6b7869b244315", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "signatureAfterChange": "     private Node resolveAmbiguousName(AmbiguousName node)", "diff": ["-            checkAccessibility(c, node);", "-              classType = ts.lookupStaticClass(outer, className, IterUtil.<Type>empty());", "+              classType = ts.lookupStaticClass(outer, className, IterUtil.<Type>empty(), context.accessModule());", "-          if (ts.containsField(classType, memberName.image())) {", "+          if (ts.containsField(classType, memberName.image(), context.accessModule())) {", "-          else if (ts.containsClass(classType, memberName.image())) {", "+          else if (ts.containsClass(classType, memberName.image(), context.accessModule())) {", "-              ClassType memberType = ts.lookupStaticClass(classType, memberName.image(), IterUtil.<Type>empty());", "-              checkAccessibility(memberType.ofClass(), node);", "+              ClassType memberType = ts.lookupStaticClass(classType, memberName.image(), IterUtil.<Type>empty(),", "+                                                          context.accessModule());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e63825b89d6ccb0724af5698c4847211", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/TreeCompiler.java", "commitBeforeChange": "73d8f0963e3941f0992013e94dd38c610fad8320", "commitAfterChange": "79f5d66e5d12491f568b49d5064798e6d989d102", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         private void compileClass(Node ast)", "signatureAfterChange": "         private void compileClass(Node ast)", "diff": ["+    final boolean isInterface;", "+      isInterface = false;", "-      accessFlags = id.getAccessFlags();", "+      accessFlags = id.getAccessFlags() | Modifier.INTERFACE;", "+      isInterface = true;", "+      isInterface = false;", "+      isInterface = false;", "+    else { throw new RuntimeException(\"Unexpected class AST node type: \" + ast); }", "-    _classWriter.visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL | ACC_SYNTHETIC, ADAPTER_FIELD,", "-                            EVALUATION_ADAPTER_DESCRIPTOR, null, null).visitEnd();", "-    if (!(ast instanceof InterfaceDeclaration)) {", "+    if (isInterface) {", "+      // interface fields must be public (adapter is necessary to interpret declared field initializers)", "+      _classWriter.visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL | ACC_SYNTHETIC, ADAPTER_FIELD,", "+                              EVALUATION_ADAPTER_DESCRIPTOR, null, null).visitEnd();", "+    }", "+    else {", "+      _classWriter.visitField(ACC_PRIVATE | ACC_STATIC | ACC_FINAL | ACC_SYNTHETIC, ADAPTER_FIELD,", "+                              EVALUATION_ADAPTER_DESCRIPTOR, null, null).visitEnd();", "-          compileMethod(member); return null;", "+          compileMethod(member, isInterface); return null;", "-          compileField(member); return null;", "+          compileField(member, isInterface); return null;"]}], "num": 3292}
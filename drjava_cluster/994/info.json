{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f74ba1da23611c50704721d03b31a484", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1defb16bbd2653d95ff9b70b6e5e76ef", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "7d20b14faca1d500f599ed54f40d60f42cf8097e", "commitAfterChange": "78f246144dd1abf21f8f40c370cff42a944129aa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "   public boolean closeAllFiles()", "signatureAfterChange": "   public boolean closeAllFiles()", "diff": ["-    boolean success = super.closeAllFiles();", "+    //Bug when the first document, in list view, is selected:", "+    //When \"close all\" documents is selected, each document in turn is set active", "+    //Workaround: begin to close the active document, then close all other documents, then remove the ", "+    //active doc from the navigator pane", "+    final OpenDefinitionsDocument toClose = getActiveDocument();", "+    boolean canClose = toClose.canAbandonFile();", "+    if(canClose) {", "+      INavigatorItem idoc = _documentsRepos.removeKey(toClose);      ", "+      boolean success = super.closeAllFiles();", "+      if (idoc != null) {", "+        getDocumentNavigator().removeDocument(idoc);", "+        _notifier.fileClosed(toClose);", "+        toClose.close();", "+      }", "+      _isClosingAllDocs = false;", "+      ", "+      _ensureNotEmpty();", "+      setActiveFirstDocument();", "+      return success;", "+    }", "-    ", "-    _ensureNotEmpty();", "-    setActiveFirstDocument();", "-    return success;", "+    return false; ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28940be1dcef4e08b13a4bd98a79ce6f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/HelpFrame.java", "commitBeforeChange": "55616341e09a5f807767173122a231f2db20106c", "commitAfterChange": "ddcbad2909e9c9411b7283368e21d7790422a21d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void hyperlinkUpdate(HyperlinkEvent event)", "signatureAfterChange": "   public void hyperlinkUpdate(HyperlinkEvent event)", "diff": ["-      // TO DO: don't follow links to the net!", "-      displayPage(event.getURL());", "+      // Only follow links within the documentation", "+      URL url = event.getURL();", "+      String protocol = url.getProtocol();", "+      String path = url.getPath();", "+      if ((\"file\".equals(protocol) || \"jar\".equals(protocol))", "+            && path.indexOf(HELP_PATH) >= 0) {", "+        displayPage(url);", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6ade5d0096acf8fc9a34ac9ab5bab3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplaceDialog.java", "commitBeforeChange": "34165d14e4d7d5138ad316dc07c21ed2c5c60ba7", "commitAfterChange": "6df23b9d947a754084cff460e34d203b0d81fd48", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "   private void _doFind()", "signatureAfterChange": "   private void _doFind()", "diff": ["-    // FindResult contains the offset to the next occurence of the string", "-    // and a flag indicating whether the end of the document was wrapped", "-    // around while searching for the string", "+    // FindResult contains the document that the result was found in,", "+    // offset to the next occurence of the string, and a flag indicating ", "+    // whether the end of the document was wrapped around while searching ", "+    // for the string", "+    OpenDefinitionsDocument openDoc = _defPane.getOpenDocument();", "+    Document doc = fr.getDocument();", "+    int pos = fr.getFoundOffset();", "+    if (doc != openDoc.getDocument()) {", "+      _model.setActiveDocument(_model.getODDForDocument(doc));        ", "+      _defPane.setCaretPosition(pos);", "+      _caretChanged = true;", "+      _updateMachine();", "+    }", "+      ", "-    int pos = fr.getFoundOffset();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bbb18dc0c0205943e47997df8aee7c7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/docnavigation/JTreeSortNavigator.java", "commitBeforeChange": "09e3a1c7c173cb9a37ed9ad28a39b257011828e6", "commitAfterChange": "bdfa5a75e18c9a41c7b54cf4b050565d5259c993", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "signatureAfterChange": "   public void refreshDocument(INavigatorItem doc, String path) throws IllegalArgumentException", "diff": ["-    synchronized(this){", "-      LeafNode node = getNodeForDoc(doc);", "+    Object lock = new Object();", "+    LeafNode node = getNodeForDoc(doc);", "+    // Check to see if it's already in the correct path.", "+    InnerNode parent = _path2node.getValue(path);", "+    String oldPath = _path2node.getKey(null);", "+    if (path.equals(oldPath)) {", "+      node.removeFromParent(); // doesn't cause a repaint.", "+      insertNodeSortedInto(node, parent); // causes a repaint.", "+    }", "+    ", "+    //System.out.println(\"refresh -> remove\");", "+    synchronized(lock) {", "+    }", "+    //System.out.println(\"refresh -> add\");", "+    synchronized(lock) {", "+    //System.out.println(\"refresh done\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88467e00169f9a413ac1abeab70a11f9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "930b1ef6cc279650a085c7c6499b1b57cb240018", "commitAfterChange": "73b3ce3968c13472938fea3d36b496150c938bd2", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": "     public void scrollToLineInSource(OpenDefinitionsDocument doc, int lineNumber)", "signatureAfterChange": "     public void scrollToLineInSource(OpenDefinitionsDocument doc, int lineNumber)", "diff": ["+", "+      if (_currentThreadLocationHighlight != null) {", "+        _currentThreadLocationHighlight.remove();", "+      }", "+      DefinitionsDocument defDoc = doc.getDocument();", "+      int startOffset = defDoc.getOffset(lineNumber);", "+      _currentThreadLocationHighlight = _currentDefPane.getHighlightManager().addHighlight(startOffset,", "+                                                         defDoc.getLineEndPos(startOffset),", "+                                                         DefinitionsPane.THREAD_PAINTER);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ed3ac7e70a99bd39aa1405f5a235c4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "commitAfterChange": "fbbca8c38fe9b7414801b8eeb32f639f83abb9c9", "methodNumberBeforeChange": 410, "methodNumberAfterChange": 410, "signatureBeforeChange": "     public void caretUpdate(final CaretEvent ce)", "signatureAfterChange": "     public void caretUpdate(final CaretEvent ce)", "diff": ["-    // The following method does not need to run in the event thread", "-    public void caretUpdate(final CaretEvent ce) { updateLocation(); }", "+    // The following method only runs in the event thread because it is called from DefinitionsPane", "+    public void caretUpdate(final CaretEvent ce) {", "+      OpenDefinitionsDocument doc = _model.getActiveDocument();", "+      int offset = ce.getDot();", "+      Element root = doc.getDefaultRootElement();", "+      int line = root.getElementIndex(offset);", "+      int col = offset - root.getElement(line).getStartOffset();", "+      updateLocation(line + 1, col);  // line numbers are 1-based", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4671fee08c9f80157de40f98f58f9b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/LineEnumRule.java", "commitBeforeChange": "4e444cf3e45665116a56b367a272fb6465e0e2ab", "commitAfterChange": "4cc061cda0dcd0210fc21018c1746064dc52e5d0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void paintComponent(Graphics g)", "signatureAfterChange": "   public void paintComponent(Graphics g)", "diff": ["+    final OpenDefinitionsDocument odd = _pane.getOpenDefDocument();", "+    final int endOffset = odd.getEndPosition().getOffset()-1;", "+    int lastLine = odd.getDefaultRootElement().getElementIndex(endOffset);", "+", "+    if (odd.getLineStartPos(endOffset)!=odd.getLineEndPos(endOffset)) { ++lastLine; }", "-      String text = Integer.toString(i/_increment +1);", "+      final int lineNo = i/_increment +1;", "+      if (lineNo>lastLine) break;", "+      String text = Integer.toString(lineNo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3eacdba6bb861c3eda0f110b79ee22f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "ff65482ac0c34f9d18b211e3b1fa05371a07fb91", "commitAfterChange": "43bd3e08ba052e97e1d0271e7f1e324beac2ba86", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 125, "signatureBeforeChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "signatureAfterChange": "   private OpenDefinitionsDocument _openFile(File file)     throws IOException, AlreadyOpenException", "diff": ["+      ", "+      ", "-      _definitionsDocs.addElement(doc);", "+      INavigatorItem idoc = makeIDocFromODD(doc);", "+      _documentsRepos.put(idoc, doc);", "+      ", "+      String path = doc.getFile().getCanonicalPath();", "+      path = path.substring(0, path.lastIndexOf(File.separator));", "+     ", "+      _documentNavigator.addDocument(idoc, path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fda7c85bd9ece8723de571a3bc9de09d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "9297bd3255995599281a9a548fcd6e849eecaf7b", "commitAfterChange": "b8d26b54d9d0d791e5e97a6dd352ae0f9f5f3b20", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 77, "signatureBeforeChange": "   private void _switchToSuspendedThread(boolean updateWatches) throws DebugException", "signatureAfterChange": "   private void _switchToSuspendedThread(BreakpointRequest request, boolean updateWatches) throws DebugException", "diff": ["-  private void _switchToSuspendedThread(boolean updateWatches) throws DebugException {", "+  private void _switchToSuspendedThread(BreakpointRequest request, boolean updateWatches) throws DebugException {", "-    ", "-    try {", "-      if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());", "+", "+    boolean usedBreakpointLine = false;", "+    if (request!=null) {", "+      // we have breakpoint information, use it", "+      Object property = request.getProperty(\"debugAction\");", "+      if (property != null && (property instanceof JPDABreakpoint)) {", "+        final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "+        breakpoint.update();", "+        scrollToSource(breakpoint, true);", "+        usedBreakpointLine = true;", "+      }", "-    catch (IncompatibleThreadStateException itse) {", "-      throw new UnexpectedException(itse);", "+    if (!usedBreakpointLine ) {", "+      try {", "+        if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());", "+      }", "+      catch (IncompatibleThreadStateException itse) {", "+        throw new UnexpectedException(itse);", "+      }"]}], "num": 994}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fca6d7ec30c3e01c20f8582e3e9e9c6e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc7d3744293eccec917dba77bc700ce", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "50372cdcb0e3a8db5661a31f5825b5dc9f07a9e9", "commitAfterChange": "3049ab1c03c6212f738bc13f7b01e843f39da3a7", "methodNumberBeforeChange": 563, "methodNumberAfterChange": 567, "signatureBeforeChange": "   public void updateTabbedPane()", "signatureAfterChange": "           public void run()", "diff": ["-    */", "-  public void updateTabbedPane() {", "-    final JComponent c = (JComponent) _tabbedPane.getSelectedComponent();", "-    synchronized(_updateLock) {", "-      if (c == null || (_tabUpdatePending && c == _lastUpdatedComponent)) return;", "-    }", "-    _tabUpdatePending = true;", "-    Thread updater = new Thread(new Runnable() {", "-      public void run() {", "-        synchronized(_updateLock) { ", "-          try { _updateLock.wait(UPDATE_DELAY); } ", "-          catch(InterruptedException e) { /* fall through */ }", "-        }", "-        EventQueue.invokeLater(new Runnable() { ", "-          public void run() {", "-            synchronized(_updateLock) { ", "-              _tabUpdatePending = false;", "-              _lastUpdatedComponent = c;", "-            }", "-//            System.err.println(\"Repainting \" + c);", "-            c.revalidate();", "-            c.repaint();", "-          }", "-        });", "-      }", "-    });", "-    updater.start();", "-  }", "+        EventQueue.invokeLater(new Runnable() {", "+          public void run() {", "+            synchronized (_updateLock) {", "+              _pendingUpdate = new Runnable() {", "+                public void run() {", "+                  for (final R r: matches) {", "+                    r.updateLines();  // recompute _lineStartPos and _lineEndPos in r", "+//                    System.err.println(\"reloading node for \" + r);", "+                    p._regTreeModel.reload(p.getNode(r));", "+                    p.repaint();", "+                  }", "+                }", "+              };  // end Runnable", "+              if (_tabUpdatePending) return;  // Let the queued task run this update (or a successor)", "+              _tabUpdatePending = true;", "+            } // end synchronized", "+            ", "+            // Create a new update task", "+            new Thread(new Runnable() {", "+              public void run() {", "+                Thread.currentThread().setPriority(UPDATER_PRIORITY);", "+                synchronized (_updateLock) {", "+                  try { _updateLock.wait(UPDATE_DELAY); }  // _pendingUpdate can be updated during wait", "+                  catch(InterruptedException e) { /* fall through */ }", "+                  _tabUpdatePending = false;", "+                } // end synchronized", "+                _pendingUpdate.run();", "+              }", "+            }).start();", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ba6a3e689bb68a0a6a342e9b12088d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "1ecc95c0c60f2dabd3e5d52eee223ff564461e48", "commitAfterChange": "a7a03ce246432b4e0ab5d61753312842c1cd49c1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "    protected void handleStart(MasterRemote mainJVM)", "signatureAfterChange": "       public void run()", "diff": ["-", "-  protected void handleStart(MasterRemote mainJVM) ", "-    _mainJVM = (MainJVMRemoteI) mainJVM;", "+    Thread thread = new Thread() {", "+      public void run() {", "+        while (true) {", "+          try {", "+            Thread.currentThread().sleep(CHECK_MAIN_VM_ALIVE_MINUTES*60*1000);", "+          }", "+          catch (InterruptedException ie) {", "+          }", "+", "+          try {", "+            _mainJVM.checkStillAlive();", "+          }", "+          catch (RemoteException re) {", "+            // not there anymore. quit!", "+            System.exit(0);", "+          }", "+        }", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db3ce2ffc122ca626255110776e24752", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "51e8ea430c01509f87d3823d7a75f90d00225716", "commitAfterChange": "5425ae0e836a7ee6f00ac774f834187d377d72ad", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 34, "signatureBeforeChange": "   private void _initPopup()", "signatureAfterChange": "   private void _initPopup()", "diff": ["-    _breakpointPopupMenu = new JPopupMenu(\"Breakpoint\");", "-    _breakpointPopupMenu.add(new AbstractAction(\"Scroll to Source\") {", "-      public void actionPerformed(ActionEvent e) {", "-        _scrollToSourceIfBreakpoint();", "-      }", "-    });", "-    _breakpointPopupMenu.add(new AbstractAction(\"Remove Breakpoint\") {", "-      public void actionPerformed(ActionEvent e) {", "-        try {", "-          Breakpoint bp = _getSelectedBreakpoint();", "-          if (bp != null) _debugger.removeBreakpoint(bp);", "-        }", "-        catch (DebugException de) { _frame._showDebugError(de); }", "-      }", "-    });", "-    _bpTree.addMouseListener(new BreakpointMouseAdapter());", "-"]}], "num": 17790}
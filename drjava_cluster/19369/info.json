{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "475a0cd7f36e2b859ea57c6bb1f77a2e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3007d2cd702f6d4ef0009ca159ea5a89", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "a33dd9cdb6eaad3925dbd0230d8fd4013b8f8126", "commitAfterChange": "345a82c54e3e67af4bf9681fbb22f96d3e1754eb", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 39, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)     throws BadLocationException", "signatureAfterChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "diff": ["-  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipParenPhrases)", "+  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)", "-//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipParenPhrases);", "+//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipBracePhrases);", "-    final Query key = new Query.PrevDelimiter(pos, delims, skipParenPhrases);", "+    final Query key = new Query.PrevDelimiter(pos, delims, skipBracePhrases);", "+    ", "+    ", "-    int i;  // index of for loop below", "+    int i;  // index for for loop below", "-        // Move reduced model to location pos", "-        _setCurrentLocation(pos);  // reduced model points to pos == reducedPos", "-        ", "+    ", "-        for (i = pos-1; i >= 0; i--) {", "+        for (i = pos - 1; i >= 0; i--) {", "-          ", "-          if (match(text.charAt(i),delims)) {", "-            // Move reduced model to walker's location", "-            _setCurrentLocation(i);  // reduced model points to i", "-            reducedPos = i;          // reduced model points to reducedPos", "-            ", "-            // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase", "-            ReducedModelState state = _reduced.getStateAtCurrent();", "-            if (! state.equals(ReducedModelState.FREE) || _isStartOfComment(text, i)", "-                  || ((i > 0) && _isStartOfComment(text, i - 1)) || (skipParenPhrases && posInParenPhrase()))", "-              continue;  // ignore matching char ", "-            else break;  // found valid matching char", "+              // Move reduced model to location pos", "+          _setCurrentLocation(i);  // reduced model points to i", "+          if (isShadowed() || isCommentOpen(text, i)) {", "+//            System.err.println(text.charAt(i) + \" at pos \" + i + \" is shadowed\");", "+            continue;", "-        }", "+          char ch = text.charAt(i);", "+          ", "+          if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "+            reducedPos = i;    // record valid match                                                                              ", "+            break;", "+          }", "+          ", "+          if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "+//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "+            _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "+//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "+            int dist = balanceBackward();", "+            if (dist == -1) { // if braces do not balance, return failure", "+              i = -1;", "+//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "+              break;", "+            }", "+            assert dist > 0;", "+//            Utilities.show(\"text = '\" + getText(i + 1 - dist, dist) + \"' dist = \" + dist + \" matching bracket is '\" + text.charAt(i) + \"' at pos \" + i);", "+            _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "+            i = _currentLocation;", "+            // Decrementing i skips over matching brace", "+            continue;", "+          }", "+        }  // end for", "-        /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos */", "+        /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "-//      System.err.println(\"Returning \" + reducedPos);", "+//      Utilities.show(\"findPrevDelimiter returning \" + reducedPos);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e376d6fbb7f0001c885e7431c45dc22a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "ba2b5ff7a570417e9dd4c8e447dbbd043b8c1381", "commitAfterChange": "098be4c27233835145531c86355bc697a3b62bfd", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 42, "signatureBeforeChange": "   public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "signatureAfterChange": "   public int _findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)     throws BadLocationException", "diff": ["-  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)", "+  public int _findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)", "-//    System.err.println(\"findPrevDelimiter(\" + pos + \", \" + Arrays.toString(delims) + \", \" + skipBracePhrases);", "+    assert isReadLocked();", "+    ", "-    ", "-    acquireReadLock();", "-    try {", "-      int lineStartPos = getLineStartPos(pos);", "-      if (lineStartPos < 0) lineStartPos = 0;", "-      ", "-      if (lineStartPos >= pos) i = lineStartPos - 1;  // the line containing pos is empty  ", "-      else { ", "-        assert lineStartPos < pos;", "-        String line = getText(lineStartPos, pos - lineStartPos);  // the line containing pos", "-        synchronized(_reduced) {", "-          final int origPos = _currentLocation;", "-          ", "-          // Walk backwards from specificed position, scanning current line for a delimiter", "-          for (i = pos - 1; i >= lineStartPos; i--) {", "-            /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "-             * 0 <= i < reducedPos <= pos */", "-            // Move reduced model to location pos", "-            int irel = i - lineStartPos;", "-            _setCurrentLocation(i);  // reduced model points to i", "-            if (isShadowed() || isCommentOpen(line, irel)) {", "+//    acquireReadLock();", "+//    try {", "+    int lineStartPos = _getLineStartPos(pos);", "+    if (lineStartPos < 0) lineStartPos = 0;", "+    ", "+    if (lineStartPos >= pos) i = lineStartPos - 1;  // the line containing pos is empty  ", "+    else { ", "+      assert lineStartPos < pos;", "+      String line = getText(lineStartPos, pos - lineStartPos);  // the line containing pos", "+      synchronized(_reduced) {", "+        final int origPos = _currentLocation;", "+        ", "+        // Walk backwards from specificed position, scanning current line for a delimiter", "+        for (i = pos - 1; i >= lineStartPos; i--) {", "+          /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, ", "+           * 0 <= i < reducedPos <= pos */", "+          // Move reduced model to location pos", "+          int irel = i - lineStartPos;", "+          _setCurrentLocation(i);  // reduced model points to i", "+          if (_isShadowed() || isCommentOpen(line, irel)) {", "-              continue;", "-            }", "-            char ch = line.charAt(irel);", "-            ", "-            if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "-              reducedPos = i;    // record valid match                                                                              ", "+            continue;", "+          }", "+          char ch = line.charAt(irel);", "+          ", "+          if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {", "+            reducedPos = i;    // record valid match                                                                              ", "+            break;", "+          }", "+          ", "+          if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "+//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "+            _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "+//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "+            int dist = _balanceBackward();  // bypasses redundant read locking", "+            if (dist == -1) { // if braces do not balance, return failure", "+              i = -1;", "+//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "-            ", "-            if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched", "-//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);", "-              _setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)", "-//            Utilities.show(\"_currentLocation = \" + _currentLocation);", "-              int dist = balanceBackward();", "-              if (dist == -1) { // if braces do not balance, return failure", "-                i = -1;", "-//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");", "-                break;", "-              }", "-              assert dist > 0;", "+            assert dist > 0;", "-              _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "-              i = _currentLocation;", "-              // Decrementing i skips over matching brace; could skip back into text preceding current line", "-              continue;", "-            }", "-          }  // end for", "-          ", "-          _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "-        }  // end synchronized", "-      } // end processing of text on same line as pos", "-      ", "-      /* Invariant: same as for loop except that lineStartPos-1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "-      ", "-      if (i < lineStartPos) {  // No matching char was found on line containing pos; must look at preceding text", "-        if (i <= 0) reducedPos = -1;  // No preceding text left to search", "-        else reducedPos = findPrevDelimiter(i, delims, skipBracePhrases); ", "-      }", "-  ", "-      _storeInCache(key, reducedPos, pos - 1);", "+            _setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation", "+            i = _currentLocation;", "+            // Decrementing i skips over matching brace; could skip back into text preceding current line", "+            continue;", "+          }", "+        }  // end for", "+        ", "+        _setCurrentLocation(origPos);    // Restore the state of the reduced model;", "+      }  // end synchronized", "+    } // end processing of text on same line as pos", "+    ", "+    /* Invariant: same as for loop except that lineStartPos-1 <= i <= reducedPos <= pos && 0 <= reducedPos */", "+    ", "+    if (i < lineStartPos) {  // No matching char was found on line containing pos; must look at preceding text", "+      if (i <= 0) reducedPos = -1;  // No preceding text left to search", "+      else reducedPos = _findPrevDelimiter(i, delims, skipBracePhrases); ", "+    }", "+    ", "+    _storeInCache(key, reducedPos, pos - 1);", "-      ", "-      // Return position of matching char or ERROR_INDEX (-1) ", "-      return reducedPos;  ", "-    } // end try", "-    finally { releaseReadLock(); }", "+    ", "+    // Return position of matching char or ERROR_INDEX (-1) ", "+    return reducedPos;  ", "+//    } // end try", "+//    finally { releaseReadLock(); }"]}], "num": 19369}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9da174cf67e8bcc384b5eb6d235961a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a683ad0ea0c6d5aa3af8f0fa590af24", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "b8bd7d0442cc5ba7e76504cb9896cbfabd4d129a", "commitAfterChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-    _doc.acquireWriteLock(); ", "-    try {", "-      _passedCurrent = true;", "-      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "-       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "-       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "-       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "-       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "-       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "-       * locked section avoiding the race. */", "-      EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "-    }", "-    finally { _doc.releaseWriteLock(); }", "+//    _doc.acquireWriteLock(); ", "+//    try {", "+    _passedCurrent = true;", "+    /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+     * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+     * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+     * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+     * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+     * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+     * locked section avoiding the race. */", "+    EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+//    }", "+//    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7cc935265935ee2b8b8b93455103f4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "commitAfterChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-//    _doc.acquireWriteLock(); ", "-//    try {", "-    _passedCurrent = true;", "-    /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "-     * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "-     * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "-     * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "-     * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "-     * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "-     * locked section avoiding the race. */", "-    EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "-//    }", "-//    finally { _doc.releaseWriteLock(); }", "+    _doc.acquireWriteLock(); ", "+    try {", "+      _passedCurrent = true;", "+      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+       * locked section avoiding the race. */", "+      EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+    }", "+    finally { _doc.releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c41f4885927544100d14b33b60359e87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsScriptModel.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void executeInteraction()", "signatureAfterChange": "   public void executeInteraction()", "diff": ["-    _doc.acquireWriteLock(); ", "-    try {", "-      _passedCurrent = true;", "-      /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "-       * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "-       * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "-       * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "-       * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "-       * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "-       * locked section avoiding the race. */", "-      EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "-    }", "-    finally { _doc.releaseWriteLock(); }", "+//    _doc.acquireWriteLock(); ", "+//    try {", "+    _passedCurrent = true;", "+    /* The following must use SwingUtilities rather than Utilities because this task must be placed at the end of the", "+     * event queue, running the interpretCurrentInteraction call apart from this write locked section. In ", "+     * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with", "+     * regard to the sequenceing of operations in the event queue.  There could already be operations that affect", "+     * the determination of the current interaction on the event queue. If we forced the interpret method to run ", "+     * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write", "+     * locked section avoiding the race. */", "+    EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });", "+//    }", "+//    finally { _doc.releaseWriteLock(); }"]}], "num": 22257}
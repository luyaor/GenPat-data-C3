{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d83c68b337747826ff41ee4d31b367a4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0944520ab5f01d6986baf9702304d4", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/EnumDeclaration.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "    static List<Node> AddValues(String enumTypeName, List<Node> body, List<EnumConstant> consts)", "signatureAfterChange": "    static List<Node> AddValues(String enumTypeName, List<Node> body, List<EnumConstant> consts)", "diff": ["-    ReferenceType enumType = new ReferenceType(enumTypeName);", "-    Type valuesType = new ArrayType(enumType, 1);", "+    ReferenceTypeName enumType = new ReferenceTypeName(enumTypeName);", "+    TypeName valuesType = new ArrayTypeName(enumType, 1);", "-    ///*for testing jlugo code*/vparams.add(new FormalParameter(false, new ReferenceType(\"String\"), \"s\"));", "+    ///*for testing jlugo code*/vparams.add(new FormalParameter(false, new ReferenceTypeName(\"String\"), \"s\"));", "-    newbody.add(new MethodDeclaration(accessFlags, valuesType, \"values\", vparams, new LinkedList<ReferenceType>(), new BlockStatement(stmts)));", "+    newbody.add(new MethodDeclaration(accessFlags, valuesType, \"values\", vparams, new LinkedList<ReferenceTypeName>(), new BlockStatement(stmts)));", "-    voparams.add(new FormalParameter(false, new ReferenceType(\"String\"), \"s\"));", "+    voparams.add(new FormalParameter(false, new ReferenceTypeName(\"String\"), \"s\"));", "-    init.add(new VariableDeclaration(false, new IntType(), \"i\", new IntegerLiteral(\"0\")));", "+    init.add(new VariableDeclaration(false, new IntTypeName(), \"i\", new IntegerLiteral(\"0\")));", "-    stmtsOf.add(new ThrowStatement(new SimpleAllocation(new ReferenceType(\"IllegalArgumentException\"), args)));", "-    newbody.add(new MethodDeclaration(accessFlags, enumType, \"valueOf\", voparams, new LinkedList<ReferenceType>(), new BlockStatement(stmtsOf)));", "+    stmtsOf.add(new ThrowStatement(new SimpleAllocation(new ReferenceTypeName(\"IllegalArgumentException\"), args)));", "+    newbody.add(new MethodDeclaration(accessFlags, enumType, \"valueOf\", voparams, new LinkedList<ReferenceTypeName>(), new BlockStatement(stmtsOf)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9edec58045ac2b379f1d5d4a5579c25", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/tiger/TigerTest.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "    public void testParseEnumDeclaration3()", "signatureAfterChange": "    public void testParseEnumDeclaration3()", "diff": ["-    ReferenceType enumType = new ReferenceType(\"Suit\");", "+    ReferenceTypeName enumType = new ReferenceTypeName(\"Suit\");", "-    MethodDeclaration m =   new MethodDeclaration(0, new VoidType(), \"m\", new LinkedList<FormalParameter>(), new LinkedList<ReferenceType>(), new BlockStatement(new LinkedList<Node>()));", "-    MethodDeclaration n =   new MethodDeclaration(0, new VoidType(), \"n\", new LinkedList<FormalParameter>(), new LinkedList<ReferenceType>(), new BlockStatement(new LinkedList<Node>()));", "+    MethodDeclaration m =   new MethodDeclaration(0, new VoidTypeName(), \"m\", new LinkedList<FormalParameter>(), new LinkedList<ReferenceTypeName>(), new BlockStatement(new LinkedList<Node>()));", "+    MethodDeclaration n =   new MethodDeclaration(0, new VoidTypeName(), \"n\", new LinkedList<FormalParameter>(), new LinkedList<ReferenceTypeName>(), new BlockStatement(new LinkedList<Node>()));", "-    params.add(new FormalParameter(false, new IntType(), \"i\"));", "-    params.add(new FormalParameter(false, new ReferenceType(\"Suit\"), \"s\"));", "-    decl.add(new ConstructorDeclaration(0, \"Suit\", params, new LinkedList<ReferenceType>(), null, new LinkedList<Node>()));", "-    MethodDeclaration am = new MethodDeclaration(java.lang.reflect.Modifier.ABSTRACT, new VoidType(), \"m\", new LinkedList<FormalParameter>(), new LinkedList<ReferenceType>(), null);", "+    params.add(new FormalParameter(false, new IntTypeName(), \"i\"));", "+    params.add(new FormalParameter(false, new ReferenceTypeName(\"Suit\"), \"s\"));", "+    decl.add(new ConstructorDeclaration(0, \"Suit\", params, new LinkedList<ReferenceTypeName>(), null, new LinkedList<Node>()));", "+    MethodDeclaration am = new MethodDeclaration(java.lang.reflect.Modifier.ABSTRACT, new VoidTypeName(), \"m\", new LinkedList<FormalParameter>(), new LinkedList<ReferenceTypeName>(), null);"]}], "num": 24320}
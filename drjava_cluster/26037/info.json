{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40627839d6864b68e4a38e1ffe17cea9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f7e0070bb93f24550a46f015c2344a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 388, "methodNumberAfterChange": 388, "signatureBeforeChange": "\r \r   public void forUnlabeledBreakStatement(UnlabeledBreakStatement that)", "signatureAfterChange": "    public void forUnlabeledBreakStatement(UnlabeledBreakStatement that)", "diff": ["-\r", "-  public void forUnlabeledBreakStatement(UnlabeledBreakStatement that) {\r", "-    forUnlabeledBreakStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forUnlabeledBreakStatementOnly(that);\r", "-  }\r", "+", "+  public void forUnlabeledBreakStatement(UnlabeledBreakStatement that) {", "+    forUnlabeledBreakStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forUnlabeledBreakStatementOnly(that);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6dc7355f7ce1107990cc80f4895d9a7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/JExpressionIFPrunableDepthFirstVisitor_void.java", "commitBeforeChange": "e30b4e4c8e80ae8b71c5491615e19a1fcef8844f", "commitAfterChange": "b0ebef930df36d2e563113951e5589e519a9b2a8", "methodNumberBeforeChange": 390, "methodNumberAfterChange": 390, "signatureBeforeChange": "\r \r   public void forUnlabeledContinueStatement(UnlabeledContinueStatement that)", "signatureAfterChange": "    public void forUnlabeledContinueStatement(UnlabeledContinueStatement that)", "diff": ["-\r", "-  public void forUnlabeledContinueStatement(UnlabeledContinueStatement that) {\r", "-    forUnlabeledContinueStatementDoFirst(that);\r", "-    if (prune(that)) { return; }\r", "-    forUnlabeledContinueStatementOnly(that);\r", "-  }\r", "+", "+  public void forUnlabeledContinueStatement(UnlabeledContinueStatement that) {", "+    forUnlabeledContinueStatementDoFirst(that);", "+    if (prune(that)) return;", "+    forUnlabeledContinueStatementOnly(that);", "+  }"]}], "num": 26037}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a432c1aabb8594540a5f012c2bf63f29", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e5c3e41d57a8e9074ac23c679a4f2b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/text/SwingDocument.java", "commitBeforeChange": "217c110d76e83e4661793b1b3dd648691e91b61d", "commitAfterChange": "d1b8a064222fec51f4a22f2414776e99e8ad8af0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void forceInsertText(int offs, String str, String style)", "signatureAfterChange": "   public void forceInsertText(int offs, String str, String style)", "diff": ["-    AttributeSet s = null;", "-    if (style != null) s = getDocStyle(style);", "-    /* Using a writeLock is unnecessary because insertString is already thread-safe */", "-    try { super.insertString(offs, str, s); }", "-    catch (BadLocationException e) { throw new EditDocumentException(e); }", "+    acquireWriteLock();", "+    try { _forceInsertText(offs, str, style); }", "+    finally { releaseWriteLock(); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c709044eaca99817955ff03941c1d4f2", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "db8f0cb26e31432f350747ff5cceb39c84bddf2e", "commitAfterChange": "09ee5df535fa7711165b559136b85b4d08379671", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 23, "signatureBeforeChange": "   public boolean replaceCurrent()", "signatureAfterChange": "   public boolean replaceCurrent()", "diff": ["-    _doc.acquireWriteLock();", "+    _doc.modifyLock();", "-      boolean atStart = false;", "-      int position = getCurrentOffset();", "-      if (!_searchBackwards) position -= _findWord.length();", "-      _doc.remove(position, _findWord.length());", "-      if (position == 0) atStart = true;", "+//      boolean atStart = false;", "+      int offset = getCurrentOffset();", "+      if (_isForward) offset -= _findWord.length();  // position is now on left edge of match", "+//      assert _findWord.equals(_doc.getText(offset, _findWord.length()));", "+      ", "+//      Utilities.show(\"ReplaceCurrent called. _doc = \" + _doc.getText() + \" offset = \" + offset + \" _findWord = \" + _findWord);", "+      ", "+      _doc.remove(offset, _findWord.length());", "+", "+//      if (position == 0) atStart = true;", "-      // The current offset will be the end of the inserted word since we keep track of current as a Position. The ", "-      // exception is if we are at the beginning of the document, in which case the text is inserted AFTER the current ", "-      // position.  So, current offset is correct for forwards searching unless we were at the start of the document, ", "-      // in which case it is correct for backwards searching.", "-      if (atStart && !_searchBackwards) setPosition(_replaceWord.length());", "-      else if (! atStart && _searchBackwards) setPosition(getCurrentOffset() - _replaceWord.length());", "+      // update _current Position", "+      if (_isForward) setPosition(offset + _replaceWord.length());", "+      else setPosition(offset);", "-    finally { _doc.releaseWriteLock(); }", "+    finally { _doc.modifyUnlock(); }"]}], "num": 12875}
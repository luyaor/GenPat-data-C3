{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f01e545f345c3983df5a249ab516989", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c364e875b42781de8ebbfdd45656c0e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "      public void testAnonymousInnerClass() throws ParseException", "signatureAfterChange": "      public void testAnonymousInnerClass() throws ParseException", "diff": ["-    List<? extends ReferenceType> excepts = new LinkedList<ReferenceType>();", "+    List<? extends ReferenceTypeName> excepts = new LinkedList<ReferenceTypeName>();", "-    members.add(new MethodDeclaration(accessFlags, new VoidType(), \"m\", params, excepts, body));", "+    members.add(new MethodDeclaration(accessFlags, new VoidTypeName(), \"m\", params, excepts, body));", "-    expectedAST.add(new ClassAllocation(new ReferenceType(\"C\"), null, members)); ", "+    expectedAST.add(new ClassAllocation(new ReferenceTypeName(\"C\"), null, members)); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3ebe907d05cfe7f0e1fe099e266fd30", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/wrapper/ParserTest.java", "commitBeforeChange": "8ef464a5916d345894f41b4678b1a0525d26cfff", "commitAfterChange": "f30f8f4a19cbec375d60179da7ca925083cfb5db", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void testMethodDeclaration() throws ParseException", "signatureAfterChange": "      public void testMethodDeclaration() throws ParseException", "diff": ["-    List<? extends ReferenceType> excepts = new LinkedList<ReferenceType>();", "+    List<? extends ReferenceTypeName> excepts = new LinkedList<ReferenceTypeName>();", "-    expectedAST.add(new MethodDeclaration(accessFlags, new IntType(), \"getCount\", params, excepts, body));", "+    expectedAST.add(new MethodDeclaration(accessFlags, new IntTypeName(), \"getCount\", params, excepts, body));"]}], "num": 21097}
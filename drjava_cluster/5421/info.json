{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7cbeb5cc777a1c85c46f5497285ebef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b4e0b6c2c7b29320e86d096be2048f3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "2b3538f4ec792670cfb28bc41a5aee6f4c8718c0", "commitAfterChange": "c302d1db72cb508e0cec30d24e39d48cce8fd663", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   protected SymbolData getSymbolDataHelper(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError, boolean checkImportedStuff)", "signatureAfterChange": "   protected SymbolData getSymbolDataHelper(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError, boolean checkImportedStuff)", "diff": ["-    if (className.equals(\"MyInnerClass\")) System.err.println(\"QualifiedClassName for MyInnerClass = \" + qualifiedClassName);", "+//    if (className.equals(\"MyInnerClass\")) System.err.println(\"QualifiedClassName for MyInnerClass = \" + qualifiedClassName);", "-          if (tempSd == null) System.err.println(\"Symbol lookup failed for \" + s);", "+//          if (tempSd == null) System.err.println(\"Symbol lookup failed for \" + s);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a88c8bdd2627a3e1419cc9c68756e375", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "   protected SymbolData getSymbolDataHelper(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError, boolean checkImportedStuff)", "signatureAfterChange": "   protected SymbolData getSymbolDataHelper(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                             boolean addError, boolean checkImportedStuff)", "diff": ["-    // Check for qualified types. (FAILS for inner classes).  This invoication be the result of a recursive call.", "+    // Check for qualified types. (FAILS for inner classes).  This invocation may be the result of a recursive call.", "-//    if (className.equals(\"Object\")) System.err.println(\"QualifiedClassName for Object = \" + qualifiedClassName);", "+    if (className.equals(\"MyInnerClass\")) System.err.println(\"QualifiedClassName for MyInnerClass = \" + qualifiedClassName);", "-          if (resolve && tempSd.isContinuation()) {", "+          if (tempSd == null) System.err.println(\"Symbol lookup failed for \" + s);", "+          if (resolve && tempSd != null && tempSd.isContinuation()) {"]}], "num": 5421}
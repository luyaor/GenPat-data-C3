{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9e10e6e33574af2024b920a8cda70f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89da04ddf8c2344f06c5c28f0a0bd45", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/ClassInfoCompiler.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic Object visit(SuperMethodCall node)", "signatureAfterChange": "     public Object visit(SuperMethodCall node)", "diff": ["-\t */", "-\tpublic Object visit(SuperMethodCall node) {", "-\t    ClassInfo c = classInfo.getSuperclass();", "-", "-\t    List args = node.getArguments();", "-\t    ClassInfo[] pt = new ClassInfo[0];", "-\t    if (args != null) {", "-\t\tcheckList(args, \"malformed.argument\", node);", "-\t\t", "-\t\tpt = new ClassInfo[args.size()];", "-\t\tListIterator it = args.listIterator();", "-\t\tint i = 0;", "-\t\twhile (it.hasNext()) {", "-\t\t    pt[i++] = NodeProperties.getClassInfo((Node)it.next());", "-\t\t}", "-\t    }", "-\t    MethodInfo m = null;", "-\t    try {", "-\t\tm = ClassInfoUtilities.lookupMethod(c, node.getMethodName(), pt);", "-\t    } catch (Exception e) {", "-\t\tthrow new CatchedExceptionError(e, node);", "-\t    }", "-\t", "-\t    // Set the node type property", "-\t    node.setProperty(NodeProperties.TYPE, m.getReturnType());", "-\t    return null;", "-\t}", "+     */", "+    public Object visit(SuperMethodCall node) {", "+      ClassInfo c = classInfo.getSuperclass();", "+      ", "+      List<Expression> args = node.getArguments();", "+      ClassInfo[] pt = new ClassInfo[0];", "+      if (args != null) {", "+        checkList(args, \"malformed.argument\", node);", "+        ", "+        pt = new ClassInfo[args.size()];", "+        ListIterator<Expression> it = args.listIterator();", "+        int i = 0;", "+        while (it.hasNext()) {", "+          pt[i++] = NodeProperties.getClassInfo((Node)it.next());", "+        }", "+      }", "+      MethodInfo m = null;", "+      try {", "+        m = ClassInfoUtilities.lookupMethod(c, node.getMethodName(), pt);", "+      } catch (Exception e) {", "+        throw new CatchedExceptionError(e, node);", "+      }", "+      ", "+      // Set the node type property", "+      node.setProperty(NodeProperties.TYPE, m.getReturnType());", "+      return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e534df0b44effbc2982e82878dfdb768", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Class visit(SuperMethodCall node)", "diff": ["-     */", "-    public Object visit(SuperMethodCall node) {", "-\t// Do the type checking of the arguments", "-        List args = node.getArguments();", "-        Class[] pt = Constants.EMPTY_CLASS_ARRAY;", "-        if (args != null) {", "-            pt = new Class[args.size()];", "-            Iterator it = args.iterator();", "-\t    int i = 0;", "-            while (it.hasNext()) {", "-                pt[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "-            }", "-        }", "-        Method m = null;", "-        try {", "-            m = context.lookupSuperMethod(node, node.getMethodName(), pt);", "-        } catch (Exception e) {", "-            throw new CatchedExceptionError(e, node);", "-        }", "-        ", "-        // Set the node properties", "-\tClass c;", "-        node.setProperty(NodeProperties.METHOD, m);", "-        node.setProperty(NodeProperties.TYPE,   c = m.getReturnType());", "-        return c;", "-    }", "+   */", "+  public Class visit(SuperMethodCall node) {", "+    // Do the type checking of the arguments", "+    List args = node.getArguments();", "+    Class[] pt = Constants.EMPTY_CLASS_ARRAY;", "+    if (args != null) {", "+      pt = new Class[args.size()];", "+      Iterator it = args.iterator();", "+      int i = 0;", "+      while (it.hasNext()) {", "+        pt[i++] = (Class)((Node)it.next()).acceptVisitor(this);", "+      }", "+    }", "+    Method m = null;", "+    try {", "+      m = context.lookupSuperMethod(node, node.getMethodName(), pt);", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+    }", "+    ", "+    // Set the node properties", "+    Class c;", "+    node.setProperty(NodeProperties.METHOD, m);", "+    node.setProperty(NodeProperties.TYPE,   c = m.getReturnType());", "+    return c;", "+  }"]}], "num": 15592}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1ea2e715f87b3f938b7a9cec9505e67", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cf3304d3608b69f091136a27aaf5c7d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultSingleDisplayModel.java", "commitBeforeChange": "b1ab5639c12e11d9d4773b42d5fad59d564680b4", "commitAfterChange": "c11d4ce83dfacd1ad010305b8bbd51b80abac1bf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "   public void setActiveDocument(OpenDefinitionsDocument doc)", "signatureAfterChange": "   public void setActiveDocument(final OpenDefinitionsDocument doc)", "diff": ["-  public void setActiveDocument(OpenDefinitionsDocument doc) {", "-    try { _documentNavigator.setActiveDoc(doc); } ", "-    catch(DocumentClosedException dce) { ", "-      /* do nothing; findbugs signals a bug unless this catch clause spans more than two lines */", "-    }", "+  public void setActiveDocument(final OpenDefinitionsDocument doc) {", "+/* The following code fixes a potential race because this method modifies the documentNavigator which is a swing", "+ * component.  It was commented out because it broke at least one unit test which appears to be timing dependent.  ", "+ * We need to fix the unit tests before we can use the code that has been commented out. The race appears statistically", "+ * improbable because the update only changes the DefaultListSelection or DefaultTreeSelection in the navigator and", "+ * this operation is very lightweight. The chances of a context switch in the middle are very small. */", "+    Runnable command = new Runnable() { ", "+      public void run() { _documentNavigator.setActiveDoc(doc); }", "+    };", "+    Utilities.invokeLater(command);", "+//    try { _documentNavigator.setActiveDoc(doc); } ", "+//    catch(DocumentClosedException dce) { ", "+//      /* do nothing; findbugs signals a bug unless this catch clause spans more than two lines */", "+//    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "990f66720048b28b139ce2319a6ba01f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "481944e3395dcc7a19e81902c59977be65ba633a", "commitAfterChange": "c682fca099b13e765e0e1f201629222d04fb1339", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "signatureAfterChange": "   public File[] openProject(File projectFile) throws IOException, MalformedProjectFileException", "diff": ["-      else", "+      else {", "-        INavigatorItem idoc = d;", "-        String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "-        _documentNavigator.refreshDocument(idoc, path);", "-      }", "-      catch(IOException e) { ", "-      /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+          final INavigatorItem idoc = d;", "+          final String path = fixPathForNavigator(d.getFile().getCanonicalPath());", "+          Utilities.invokeAndWait(new Runnable() { ", "+            public void run() { _documentNavigator.refreshDocument(idoc, path); }", "+          });", "+        }", "+        catch(InterruptedException e) { throw new UnexpectedException(e); }", "+        catch(IOException e) { ", "+          /* Do nothing; findbugs signals a bug unless this catch clause spans more than two lines */ ", "+        }"]}], "num": 24718}
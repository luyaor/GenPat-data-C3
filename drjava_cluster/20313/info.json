{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3df013d88884c1b0bc053f883cc9442", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc98d3673b94dc1c104f8ace29500ffa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/InteractionsModel.java", "commitBeforeChange": "36f3a0ce1c9654ce7cb6b478a198ac77dbb03091", "commitAfterChange": "bb37c635695368e8cc96440bd6b6d051918112f8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "    protected static String _transformJavaCommand(String s)", "signatureAfterChange": "    protected static String _transformJavaCommand(String s)", "diff": ["-    return _transformCommand(s,\"{0}.main(new String[]'{'{1}'}');\");", "+    // check the return type and public access before executing, per bug #1585210", "+    String command = \"try '{'\\n\" +", "+                     \"  java.lang.reflect.Method m = {0}.class.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "+                     \"  if (!m.getReturnType().equals(void.class)) throw new java.lang.NoSuchMethodException();\\n\" +", "+                     \"'}'\\n\" +", "+                     \"catch (java.lang.NoSuchMethodException e) '{'\\n\" +", "+                     \"  throw new java.lang.NoSuchMethodError(\\\"main\\\");\\n\" +", "+                     \"'}'\\n\" +", "+                     \"{0}.main(new String[]'{'{1}'}');\";", "+    return _transformCommand(s, command);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f68cfa0761b15caf1dbc9aa029c44a91", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtilTest.java", "commitBeforeChange": "54bd5bee689bab14e75c88e1e0073ab33a50d736", "commitAfterChange": "cbcb761fd21bd00b53ee54378971530b28d41127", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private void assertInRange(long lower, long higher, long actual)", "signatureAfterChange": "      private void assertInRange(long lower, long higher, long actual)", "diff": ["-    assertTrue(lower <= actual);", "-    assertTrue(higher >= actual);", "+    assertTrue(\"value is too small (expected: >= \" + lower + \"; actual: \" + actual + \")\", lower <= actual);", "+    assertTrue(\"value is too large (expected: <= \" + higher + \"; actual: \" + actual + \")\", higher >= actual);"]}], "num": 20313}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b68858afeb841e080fb37539657b33d8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6413b8cf433abfac6bea7a72c87054e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "3f81b37285813b52f5c285ae3a68ee4a21753a7e", "commitAfterChange": "844a54657c2f878fc1ea01131f59375a436ab7c8", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 135, "signatureBeforeChange": "   public void javadocAll(DirectorySelector select, final FileSaveSelector saver) throws IOException, InvalidPackageException", "signatureAfterChange": "      public void javadocAll(DirectorySelector select, FileSaveSelector saver,                          List<String> classpath,                          JavadocListener listener)     throws IOException, InvalidPackageException", "diff": ["-   */", "-  public void javadocAll(DirectorySelector select, final FileSaveSelector saver) throws IOException, InvalidPackageException {", "-    // Only javadoc if all are saved.", "-    saveAllBeforeProceeding(GlobalModelListener.JAVADOC_REASON);", "-    ", "-    if (areAnyModifiedSinceSave()) {", "-      // if any files haven't been saved after we told our", "-      // listeners to do so, don't proceed with the rest", "-      // of the operation.", "-      return;", "-    }", "-    ", "-    // Make sure that there is at least one saved document.", "-    ListModel docs = _definitionsDocs;", "-    ", "-    boolean noneYet = true;", "-    int numDocs = docs.getSize();", "-    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "-      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "-      noneYet = doc.isUntitled();", "-    }", "-    ", "-    // If there are no saved files, ignore the javadoc command.", "-    if (noneYet) {", "-      return;", "-    }", "-    ", "-    int returnVal;", "-    Configuration config = DrJava.getConfig();", "-    File destDir = config.getSetting(OptionConstants.JAVADOC_DESTINATION);", "-    boolean ask = config.getSetting(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION).booleanValue();", "-    ", "-    // Get the destination directory via the DirectorySelector, if appropriate.", "-    try {", "-      // If we no destination is set, or the user has asked for prompts,", "-      // ask the user for a destination directory.", "-      if (destDir.equals(FileOption.NULL_FILE) || ask) {", "-        if (!destDir.equals(FileOption.NULL_FILE)) {", "-          destDir = select.getDirectory(destDir);", "-        }", "-        else {", "-          destDir = select.getDirectory(null);", "-        }", "-      }", "-        ", "-      // Make sure the destination is writable.", "-      while (!destDir.exists() || !destDir.canWrite()) {", "-        // If the choice was rejected, tell the user and ask again.", "-        select.warnUser(\"The destination directory you have chosen\\n\"", "-                          + \"does not exist or is not readable. Please\\n\"", "-                          + \"choose another directory.\",", "-                        \"Bad Destination\");", "-        destDir = select.getDirectory(null);", "-      }", "-    }", "-    catch (OperationCanceledException oce) {", "-      // If the user cancels the dialog, silently return.", "-      return;", "-    }", "-    ", "-    // Start a new thread to do the work.", "-    final File destDirF = destDir;", "-    new Thread() {", "-      public void run() {", "-        _javadocWorker(destDirF, saver);", "-      }", "-    }.start();", "-  }", "+  ", "+  public void javadocAll(DirectorySelector select, FileSaveSelector saver,", "+                         List<String> classpath,", "+                         JavadocListener listener)", "+    throws IOException, InvalidPackageException {", "+    _javadocModel.javadocAll(select, saver, classpath, listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8a7efca6b3c3df605299bab7ae6ea61", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "72c953c3c4f509998630ec89f0f6ab473b5c78c1", "commitAfterChange": "b04c072cc6c2afa2120f5e98663d5a900c3a128f", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 5, "signatureBeforeChange": "   private void _javadocAll()", "signatureAfterChange": "     public File getDirectory(File start) throws OperationCanceledException", "diff": ["+    new DirectorySelector() {", "+    public File getDirectory(File start) throws OperationCanceledException {", "+      _javadocChooser.setSelectedFile(start);", "+      ", "+      int returnVal = _javadocChooser.showDialog(MainFrame.this, \"Select\");", "+      return getChosenFile(_javadocChooser, returnVal);", "+    }", "-   */", "-  private void _javadocAll() {", "-    // Only javadoc if all are saved.", "-    // This should really be in DefaultGlobalModel.", "-    _model.saveAllBeforeProceeding(GlobalModelListener.JAVADOC_REASON);", "-    ", "-    // Make sure that there is at least one saved document.", "-    ListModel docs = _model.getDefinitionsDocuments();", "-    ", "-    boolean noneYet = true;", "-    int numDocs = docs.getSize();", "-    for (int i = 0; (noneYet && (i < numDocs)); i++) {", "-      OpenDefinitionsDocument doc = (OpenDefinitionsDocument) docs.getElementAt(i);", "-      noneYet = doc.isUntitled();", "-    }", "-    ", "-    // If there are no saved files, ignore the javadoc command.", "-    if (noneYet) {", "-      return;", "-    }", "-    ", "-    // Get the destination directory via a JFileChooser.", "-    try {", "-      int returnVal;", "-      File destDir;", "-      boolean rejected = false;", "-        ", "-      // Make sure the destination is writable.", "-      do {", "-        // If the choice was rejected, tell the user and ask again.", "-        if (rejected) {", "-          JOptionPane.showMessageDialog(this,", "-                                        \"The destination directory you have chosen\\n\"", "-                                          + \"does not exist or is not readable. Please\\n\"", "-                                          + \"choose another directory.\",", "-                                        \"Bad Destination\", JOptionPane.ERROR_MESSAGE);", "-        }", "-        ", "-        returnVal = _javadocChooser.showDialog(this, \"Select\");", "-        destDir = getChosenFile(_javadocChooser, returnVal);", "-      } while (!destDir.exists() || !destDir.canWrite());", "-      ", "-      // Lock the interface for edits while generating Javadoc.", "-//      Runnable doCommand = new Runnable() {", "-//        public void run() {", "-//          hourglassOn();", "-//        }", "-//      };", "-//      SwingUtilities.invokeLater(doCommand);", "-//      ", "-      // Generate the output with the GlobalModel.", "-      final File destDirF = destDir;", "-      final SwingWorker worker = new SwingWorker() {", "-        public Object construct() {", "-          try {", "-            boolean success = _model.javadocAll(destDirF.getAbsolutePath());", "-", "-            // Display the results.", "-//             System.out.println(\"did we get this far?\");", "-            if (success) {", "-              _javadocFrame = new JavadocFrame(destDirF);", "-              _javadocFrame.show();", "-            }", "-          }", "-          catch (InvalidPackageException ipe) {", "-            _showError(ipe, \"Javadoc Error\",", "-                       \"Javadoc encountered an invalid package name.\");", "-          }", "-//           catch (JavadocException jde) {", "-//             _showError(jde, \"JavaDoc Error\",", "-//                        \"There was an error generating the javadoc.\");", "-//           }", "-          catch (MalformedURLException me) {", "-            throw new UnexpectedException(me);", "-          }", "-          catch (IOException ioe) {", "-            _showIOError(ioe);", "-          }", "-//          finally {", "-//            // Unlock MainFrame for edits.", "-//            Runnable doCommand = new Runnable() {", "-//              public void run() {", "-//                hourglassOff();", "-//              }", "-//            };", "-//            SwingUtilities.invokeLater(doCommand);", "-//          }", "-          return \"XXX: Unused return value!\";", "-        }", "-      };", "-      worker.start();", "-    }", "-    catch (OperationCanceledException oce) {", "-      // If the user cancels the prompt, silently return.", "-      return;", "-    }"]}], "num": 18505}
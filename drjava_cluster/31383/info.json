{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dae55392fe2850c72d87396c35f5b5d5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "051946225d3e23a059045d08e5566ca5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/PopupConsole.java", "commitBeforeChange": "ff0c2424af3b72f584c63b0ff8ffed31ae421f7b", "commitAfterChange": "7c07dfb1d34ef9bbe01755449c36340f977ae8ce", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      protected JDialog createDialog(JTextArea inputBox, Frame parentFrame)", "signatureAfterChange": "      protected JDialog createDialog(JTextArea inputBox, Frame parentFrame)", "diff": ["+", "-    JLabel label = new JLabel(\"Hit SHIFT+<Enter> For New Line  \");", "+    JLabel label = new JLabel(\"Enter a full line of input. Hit SHIFT+<Enter> for an embedded newline character \");", "-    doneButton.setMargin(new Insets(1, 5, 1, 5));", "+//    doneButton.setMargin(new Insets(1, 5, 1, 5));", "-    abortButton.setMargin(new Insets(1, 5, 1, 5));", "+//    abortButton.setMargin(new Insets(1, 5, 1, 5));", "-    dialog.setSize(400, 115);", "+    buttonPanel.setSize(600, 80);", "+    dialog.setSize(600, 200);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59f27b3ec2344ce070a924ac45920756", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 125, "signatureBeforeChange": "          public void testForArrayAccessOnly()", "signatureAfterChange": "          public void testForArrayAccessOnly()", "diff": ["-        new ArrayAccess(SourceInfo.NO_INFO, new NullLiteral(SourceInfo.NO_INFO), new NullLiteral(SourceInfo.NO_INFO));", "+        new ArrayAccess(SourceInfo.NONE, NULL_LITERAL, NULL_LITERAL);", "-      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NO_INFO);             ", "+      ArrayData ad = new ArrayData(SymbolData.INT_TYPE, testLLVisitor, SourceInfo.NONE);             ", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()));", "-      //if type is not an array data, give appropriate error:", "-      assertEquals(\"Should return char\", SymbolData.CHAR_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, SymbolData.CHAR_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()));", "+      // if type is not an array data, give appropriate error:", "+      assertEquals(\"Should return char\", SymbolData.CHAR_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, SymbolData.CHAR_TYPE.getInstanceData(), ", "+                                           SymbolData.INT_TYPE.getInstanceData()));", "-      //If the array index is not an instance type, give error", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE));", "+      // If the array index is not an instance type, give error", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.INT_TYPE));", "-      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));", "+      assertEquals(\"should return int\", SymbolData.INT_TYPE.getInstanceData(), ", "+                   _etc.forArrayAccessOnly(aa, ad.getInstanceData(), SymbolData.DOUBLE_TYPE.getInstanceData()));"]}], "num": 31383}
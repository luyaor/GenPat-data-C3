{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c105f37d9653d6c651d6fbd8afe75c7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01b83260d84aa3c78a46e849be101041", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5c83f089e25fccbca0e9bbad3fc54a6c66548714", "commitAfterChange": "5a2afd347f47a6bc08b7f21fb8ab49faa2b374ae", "methodNumberBeforeChange": 554, "methodNumberAfterChange": 555, "signatureBeforeChange": "   private JMenu _setUpDebugMenu(int mask)", "signatureAfterChange": "   private JMenu _setUpDebugMenu(int mask)", "diff": ["-    _debuggerEnabledMenuItem = _newCheckBoxMenuItem(_toggleDebuggerAction);", "-    _debuggerEnabledMenuItem.setSelected(false);", "-    _setMenuShortcut(_debuggerEnabledMenuItem, _toggleDebuggerAction, KEY_DEBUG_MODE_TOGGLE);", "-    debugMenu.add(_debuggerEnabledMenuItem);", "+    JMenuItem tempDebuggerEnabledMenuItem = _newCheckBoxMenuItem(_toggleDebuggerAction);", "+    tempDebuggerEnabledMenuItem.setSelected(false);", "+    _setMenuShortcut(tempDebuggerEnabledMenuItem, _toggleDebuggerAction, KEY_DEBUG_MODE_TOGGLE);", "+    debugMenu.add(tempDebuggerEnabledMenuItem);", "+    if (_debuggerEnabledMenuItem==null) {", "+      // assign the first time", "+      _debuggerEnabledMenuItem = tempDebuggerEnabledMenuItem;", "+    }", "+    else {", "+      // otherwise link this item to the first item", "+      final WeakReference<JMenuItem> weakRef = new WeakReference<JMenuItem>(tempDebuggerEnabledMenuItem);", "+      _debuggerEnabledMenuItem.addItemListener(new ItemListener() {", "+        public void itemStateChanged(ItemEvent e) {", "+          JMenuItem temp = weakRef.get();", "+          if (temp!=null) {", "+            temp.setSelected(_debuggerEnabledMenuItem.isSelected());", "+          }", "+          else {", "+            // weak reference cleared, remove this listener", "+            _debuggerEnabledMenuItem.removeItemListener(this);", "+          }", "+        }", "+      });", "+    }", "+    ", "-    _automaticTraceMenuItem = _newCheckBoxMenuItem(_automaticTraceDebugAction);", "-    _setMenuShortcut(_automaticTraceMenuItem, _automaticTraceDebugAction, KEY_DEBUG_AUTOMATIC_TRACE);", "-    debugMenu.add(_automaticTraceMenuItem);", "+    ", "+    JMenuItem tempAutomaticTraceMenuItem = _newCheckBoxMenuItem(_automaticTraceDebugAction);", "+    _setMenuShortcut(tempAutomaticTraceMenuItem, _automaticTraceDebugAction, KEY_DEBUG_AUTOMATIC_TRACE);", "+    debugMenu.add(tempAutomaticTraceMenuItem);", "+    if (_automaticTraceMenuItem==null) {", "+      // assign the first time", "+      _automaticTraceMenuItem = tempAutomaticTraceMenuItem;", "+    }", "+    else {", "+      // otherwise link this item to the first item", "+      final WeakReference<JMenuItem> weakRef = new WeakReference<JMenuItem>(tempAutomaticTraceMenuItem);", "+      _automaticTraceMenuItem.addItemListener(new ItemListener() {", "+        public void itemStateChanged(ItemEvent e) {", "+          JMenuItem temp = weakRef.get();", "+          if (temp!=null) {", "+            temp.setSelected(_automaticTraceMenuItem.isSelected());", "+          }", "+          else {", "+            // weak reference cleared, remove this listener", "+            _automaticTraceMenuItem.removeItemListener(this);", "+          }", "+        }", "+      });", "+    }", "-    _detachDebugFrameMenuItem = _newCheckBoxMenuItem(_detachDebugFrameAction);", "-    _detachDebugFrameMenuItem.setSelected(DrJava.getConfig().getSetting(DETACH_DEBUGGER));", "-    _setMenuShortcut(_detachDebugFrameMenuItem, _detachDebugFrameAction, KEY_DETACH_DEBUGGER);", "-    debugMenu.add(_detachDebugFrameMenuItem);", "-    ", "+    JMenuItem tempDetachDebugFrameMenuItem = _newCheckBoxMenuItem(_detachDebugFrameAction);", "+    tempDetachDebugFrameMenuItem.setSelected(DrJava.getConfig().getSetting(DETACH_DEBUGGER));", "+    _setMenuShortcut(tempDetachDebugFrameMenuItem, _detachDebugFrameAction, KEY_DETACH_DEBUGGER);", "+    debugMenu.add(tempDetachDebugFrameMenuItem);", "+    if (_detachDebugFrameMenuItem==null) {", "+      // assign the first time", "+      _detachDebugFrameMenuItem = tempDetachDebugFrameMenuItem;", "+    }", "+    else {", "+      // otherwise link this item to the first item", "+      final WeakReference<JMenuItem> weakRef = new WeakReference<JMenuItem>(tempDetachDebugFrameMenuItem);", "+      _detachDebugFrameMenuItem.addItemListener(new ItemListener() {", "+        public void itemStateChanged(ItemEvent e) {", "+          JMenuItem temp = weakRef.get();", "+          if (temp!=null) {", "+            temp.setSelected(_detachDebugFrameMenuItem.isSelected());", "+          }", "+          else {", "+            // weak reference cleared, remove this listener", "+            _detachDebugFrameMenuItem.removeItemListener(this);", "+          }", "+        }", "+      });", "+    }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aee3933867e958b8200486c20fb807d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "ceab110c30960ba2658eb606c0fd95b01dad5a65", "commitAfterChange": "f31b25b6bce1143f413461b3f80cdf7629bea1c5", "methodNumberBeforeChange": 356, "methodNumberAfterChange": 364, "signatureBeforeChange": "      private void _setUpTabs()", "signatureAfterChange": "      private void _setUpTabs()", "diff": ["-    if (_model.getDebugger().isAvailable()) { _breakpointsPanel = new BreakpointsPanel(this); }", "+    if (_model.getDebugger().isAvailable()) {", "+      _breakpointsPanel = new BreakpointsPanel(this);", "+      // hook highlighting listener to breakpoint manager", "+      _model.getBreakpointManager().addListener(new RegionManagerListener<Breakpoint>() {", "+        /* Called when a breakpoint is added. Must be executed in event thread. */", "+        public void regionAdded(final Breakpoint bp) {", "+          DefinitionsPane bpPane = getDefPaneGivenODD(bp.getDocument());", "+          _documentRegionHighlights.", "+            put(bp, bpPane.getHighlightManager().", "+                  addHighlight(bp.getStartOffset(), bp.getEndOffset(), ", "+                               bp.isEnabled() ? DefinitionsPane.BREAKPOINT_PAINTER", "+                                 : DefinitionsPane.DISABLED_BREAKPOINT_PAINTER));", "+          _updateDebugStatus();", "+        }", "+        ", "+        /** Called when a breakpoint is changed. Must execute in event thread. */", "+        public void regionChanged(Breakpoint bp) { ", "+          regionRemoved(bp);", "+          regionAdded(bp);", "+        }", "+        ", "+        /** Called when a breakpoint is removed. Must be executed in event thread. */", "+        public void regionRemoved(final Breakpoint bp) {      ", "+          HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(bp);", "+          if (highlight != null) highlight.remove();", "+          _documentRegionHighlights.remove(bp);", "+        }", "+      });", "+    }", "+", "+    _bookmarksPanel = new BookmarksPanel(this);", "+    // hook highlighting listener to bookmark manager", "+    _model.getBookmarkManager().addListener(new RegionManagerListener<DocumentRegion>() {      ", "+      public void regionAdded(DocumentRegion r) {", "+        DefinitionsPane bpPane = getDefPaneGivenODD(r.getDocument());", "+        _documentRegionHighlights.", "+          put(r, bpPane.getHighlightManager().", "+                addHighlight(r.getStartOffset(), r.getEndOffset(), DefinitionsPane.BOOKMARK_PAINTER));", "+      }", "+      public void regionChanged(DocumentRegion r) { ", "+        regionRemoved(r);", "+        regionAdded(r);", "+      }", "+      public void regionRemoved(DocumentRegion r) {", "+        HighlightManager.HighlightInfo highlight = _documentRegionHighlights.get(r);", "+        if (highlight != null) highlight.remove();", "+        _documentRegionHighlights.remove(r);", "+      }", "+    });", "+    _tabs.addLast(_bookmarksPanel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22d46e5bc2b69f4e4a3456a756f4f1b3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DebugPanel.java", "commitBeforeChange": "6989dd5fc1f06c1a4b2b298e19233d706afa3d5c", "commitAfterChange": "0cceb29d64fbac1b4be36f5a87cc236bf2407364", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void _setupTabPanes()", "signatureAfterChange": "   public void _setupTabPanes()", "diff": ["+", "-    // Thread table (maybe only show if debug.show.threads is enabled?)", "-    _threadTable = new JTable( new ThreadTableModel());", "-    _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable));", "-    ", "+    // Thread table", "+    if (DrJava.CONFIG.getSetting(DEBUG_SHOW_THREADS).booleanValue()) {", "+      _threadTable = new JTable( new ThreadTableModel());", "+      _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable)); ", "+      // Sets the name column to always be 2 times as wide as the status column", "+      TableColumn nameColumn = null;", "+      TableColumn statusColumn = null;", "+      nameColumn = _threadTable.getColumnModel().getColumn(0);", "+      statusColumn = _threadTable.getColumnModel().getColumn(1);", "+      nameColumn.setPreferredWidth(2*statusColumn.getPreferredWidth()); ", "+    }", "+    DrJava.CONFIG.addOptionListener( OptionConstants.DEBUG_SHOW_THREADS, ", "+                                    new OptionListener<Boolean>() {", "+      public void optionChanged(OptionEvent<Boolean> oce) {", "+        if (oce.value.booleanValue()) {", "+          if (_threadTable == null) {", "+            _threadTable = new JTable( new ThreadTableModel());", "+            _rightPane.addTab(\"Threads\", new JScrollPane(_threadTable));", "+            // Sets the name column to always be 2 times as wide as the status column", "+            TableColumn nameColumn = null;", "+            TableColumn statusColumn = null;", "+            nameColumn = _threadTable.getColumnModel().getColumn(0);", "+            statusColumn = _threadTable.getColumnModel().getColumn(1);", "+            nameColumn.setPreferredWidth(2*statusColumn.getPreferredWidth()); ", "+          }          ", "+        }", "+        else {", "+          if (_threadTable != null) {", "+            _threadTable = null;", "+            _rightPane.remove(1);", "+          }", "+        }", "+      }", "+    });", "+    // Sets the method column to always be 7 times as wide as the line column", "+    TableColumn methodColumn = null;", "+    TableColumn lineColumn = null;", "+    methodColumn = _stackTable.getColumnModel().getColumn(0);", "+    lineColumn = _stackTable.getColumnModel().getColumn(1);", "+    methodColumn.setPreferredWidth(7*lineColumn.getPreferredWidth());  "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d773392e702ace20e2ff28757d02a1", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/DrJavaPropertySetup.java", "commitBeforeChange": "91061a0d47469bc7d07ba5fa464f35ab97f70dbb", "commitAfterChange": "296befb4a12a5cc35f5f70ed97c5006f2e9fc8bc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public static void setup()", "signatureAfterChange": "   public static void setup()", "diff": ["+    PropertyMaps.TEMPLATE.setProperty(\"Misc\", new DrJavaProperty(\"echo\",", "+                                                                 \"Echo text to the console.\\n\"+", "+                                                                 \"Required attributes:\\n\"+", "+                                                                 \"\\ttext=\\\"<text to echo>\\\"\") {", "+      public void update(PropertyMaps pm) {", "+        String text = _attributes.get(\"text\");", "+        if (text==null) {", "+          _value = \"(echo Error: text missing...)\";", "+          return;", "+        }", "+        StringBuilder sb = new StringBuilder();", "+        final String osName = System.getProperty(\"os.name\");", "+        if ((osName.indexOf(\"Windows\")>=0)) {", "+          String exe = \"cmd\";", "+          if ((osName.indexOf(\"95\")>=0) || (osName.indexOf(\"98\")>=0)) { exe = \"command\"; }", "+          if (JavaVersion.CURRENT.supports(JavaVersion.JAVA_5)) {", "+            // System.getenv is deprecated under 1.3 and 1.4, and may throw a java.lang.Error (!),", "+            // which we'd rather not have to catch", "+            String var = System.getenv(\"ComSpec\");", "+            if (var!=null) { sb.append(var); }", "+            else {", "+              var = System.getenv(\"WinDir\");", "+              if (var!=null) {", "+                sb.append(var);", "+                sb.append(\"\\\\System32\\\\\");", "+              }", "+              sb.append(exe);", "+            }", "+          }", "+          else {", "+            sb.append(exe);", "+          }", "+          sb.append(\" /c echo \");", "+          sb.append(text);", "+        }", "+        else {", "+          sb.append(\"echo \");", "+          sb.append(text);", "+        }", "+        _value = sb.toString();", "+      }", "+      public boolean isCurrent() { return false; }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"text\", null);", "+      }", "+      public String toString() { return \"--uninitialized--\"; }", "+    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38130f96aee646f4e8d7c555003e21c0", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f28cc1df1806224e361f5125bf0fdd8c055cbda8", "commitAfterChange": "df2b79c4755a48b6d68cea0053ee5b504fa8b5d0", "methodNumberBeforeChange": 260, "methodNumberAfterChange": 260, "signatureBeforeChange": "      public void setUpDrJavaProperties()", "signatureAfterChange": "      public void setUpDrJavaProperties()", "diff": ["+", "+    // fake \"Config\" properties", "+    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.master.jvm.args.combined\") {", "+      public void update() {", "+        StringBuilder sb = new StringBuilder(DrJava.getConfig().getSetting(MASTER_JVM_XMX));", "+        if (sb.length()>0) { sb.append(\" \"); }", "+        sb.append(DrJava.getConfig().getSetting(MASTER_JVM_ARGS));", "+        _value = \"-Xmx\"+sb.toString().trim();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+      }", "+    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.master.jvm.args\"))", "+      .listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.master.jvm.xmx\"));", "+", "+    PropertyMaps.ONLY.setProperty(\"Config\", new EagerProperty(\"config.slave.jvm.args.combined\") {", "+      public void update() {", "+        StringBuilder sb = new StringBuilder(DrJava.getConfig().getSetting(SLAVE_JVM_XMX));", "+        if (sb.length()>0) { sb.append(\" \"); }", "+        sb.append(DrJava.getConfig().getSetting(SLAVE_JVM_ARGS));", "+        _value = \"-Xmx\"+sb.toString().trim();", "+      }", "+      public void resetAttributes() {", "+        _attributes.clear();", "+      }", "+    }).listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.slave.jvm.args\"))", "+      .listenToInvalidatesOf(PropertyMaps.ONLY.getProperty(\"Config\", \"config.slave.jvm.xmx\"));", "+", "+    // Files"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bbc7689ae279b80f9f62b2351e41762", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "bb97cd9f73d55ae676f0ba1f2e25693ba56b3a94", "commitAfterChange": "5b93e80cb10dee78dfbc4bb12adf88d5e7123ec9", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 202, "signatureBeforeChange": "   public MainFrame()", "signatureAfterChange": "   public MainFrame()", "diff": ["+      ", "+    // The OptionListener for JAVADOC_LINK_VERSION.", "+    OptionListener<String> choiceOptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        _openJavadocList = null;", "+        _openJavadocAction.setEnabled(!oce.value.equals(JAVADOC_NONE_TEXT));", "+        _openJavadocUnderCursorAction.setEnabled(!oce.value.equals(JAVADOC_NONE_TEXT));", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_LINK_VERSION, choiceOptionListener);", "+    ", "+    // The OptionListener for JAVADOC_XXX_LINK.", "+    OptionListener<String> link13OptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+        if (linkVersion.equals(JAVADOC_1_3_TEXT)) {", "+          _openJavadocList = null;", "+        }", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_1_3_LINK, link13OptionListener);", "+    OptionListener<String> link14OptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+        if (linkVersion.equals(JAVADOC_1_4_TEXT)) {", "+          _openJavadocList = null;", "+        }", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_1_4_LINK, link14OptionListener);", "+    OptionListener<String> link15OptionListener = new OptionListener<String>() {", "+      public void optionChanged(OptionEvent<String> oce) {", "+        String linkVersion = DrJava.getConfig().getSetting(JAVADOC_LINK_VERSION);", "+        if (linkVersion.equals(JAVADOC_1_5_TEXT)) {", "+          _openJavadocList = null;", "+        }", "+      }", "+    };", "+    DrJava.getConfig().addOptionListener(JAVADOC_1_5_LINK, link15OptionListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "960acd112b9bb56481ca8f7ee0060086", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "807926b925dfb352a7bbfb2667234847dc65f45d", "commitAfterChange": "e753017eccbd872714e58c93831cb488b5045d2a", "methodNumberBeforeChange": 276, "methodNumberAfterChange": 276, "signatureBeforeChange": "   public void setUpDrJavaProperties()", "signatureAfterChange": "   public void setUpDrJavaProperties()", "diff": ["-        long millis = System.currentTimeMillis();", "-        String f = _attributes.get(\"fmt\").toLowerCase();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "-    ", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerProperty(\"project.auto.refresh\",", "+                                                               \"Evaluates to true if project auto-refresh is enabled.\") {", "+      public void update() {", "+        Boolean b = _model.getAutoRefreshStatus();", "+        String f = _attributes.get(\"fmt\").toLowerCase();", "+        if (f.equals(\"int\")) _value = b ? \"1\" : \"0\";", "+        else if (f.equals(\"yes\")) _value = b ? \"yes\" : \"no\";", "+        else _value = b.toString();", "+      }", "+      ", "+      public void resetAttributes() {", "+        _attributes.clear();", "+        _attributes.put(\"fmt\", \"boolean\");", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.excluded.files\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files that are excluded from DrJava's \"+", "+                                                                       \"project auto-refresh.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExcludedFiles()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+    PropertyMaps.ONLY.setProperty(\"Project\", new EagerFileListProperty(\"project.extra.class.path\", File.pathSeparator, DEF_DIR,", "+                                                                       \"Returns a list of files in the project's extra \"+", "+                                                                       \"class path.\\n\"+", "+                                                                       \"Optional attributes:\\n\"+", "+                                                                       \"\\trel=\\\"<dir to which output should be relative\\\"\\n\"+", "+                                                                       \"\\tsep=\\\"<separator between files>\\\"\") {", "+      protected List<File> getList() {", "+        ArrayList<File> l = new ArrayList<File>();", "+        for(File f: _model.getExtraClassPath()) {", "+          l.add(f);", "+        }", "+        return l;", "+      }", "+    });", "+", "+    // Actions"]}], "num": 4979}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7449c501c9d2979fcf1bf2ba060fa465", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c517621d3b2cf1199842944b43f9024", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 312, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Predicate4<T1, T2, T3, T4>      asPredicate(final Lambda4<? super T1, ? super T2,                                ? super T3, ? super T4, ? extends Boolean> lambda)", "signatureAfterChange": "   public static <T1, T2, T3, T4> Predicate4<T1, T2, T3, T4>      asPredicate(Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ? extends Boolean> lambda)", "diff": ["-  /** @return  A predicate based on an input that acts as a predicate but is not typed as one */", "-    asPredicate(final Lambda4<? super T1, ? super T2, ", "-                              ? super T3, ? super T4, ? extends Boolean> lambda) {", "-    return new Predicate4<T1, T2, T3, T4>() { ", "-      public Boolean value(T1 a1, T2 a2, T3 a3, T4 a4) { return lambda.value(a1, a2, a3, a4); }", "-    };", "+  /** Create a predicate based on an input that acts as a predicate but is not typed as one. */", "+  public static <T1, T2, T3, T4> Predicate4<T1, T2, T3, T4> ", "+    asPredicate(Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ? extends Boolean> lambda) {", "+    return new LambdaPredicate4<T1, T2, T3, T4>(lambda);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852cb496e1929c221a389cd330e7026f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 280, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4>      asRunnable(final Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda)", "signatureAfterChange": "   public static <T1, T2, T3, T4>      Runnable4<T1, T2, T3, T4> asRunnable(Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda)", "diff": ["-  /** @return  A runnable that executes the given lambda (ignoring the result) */", "-  public static <T1, T2, T3, T4> Runnable4<T1, T2, T3, T4> ", "-    asRunnable(final Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda) {", "-    return new Runnable4<T1, T2, T3, T4>() { ", "-      public void run(T1 a1, T2 a2, T3 a3, T4 a4) { lambda.value(a1, a2, a3, a4); }", "-    };", "-  }", "+  /** Create a runnable that executes the given lambda (ignoring the result). */", "+  public static <T1, T2, T3, T4> ", "+    Runnable4<T1, T2, T3, T4> asRunnable(Lambda4<? super T1, ? super T2, ? super T3, ? super T4, ?> lambda) {", "+    return new LambdaRunnable4<T1, T2, T3, T4>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9547a57ac27a23e043af333a718e0410", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 300, "signatureBeforeChange": "   public static <T1, T2, T3, T4, R> Lambda4<T1, T2, T3, T4, R>      asLambda(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r, final R result)", "signatureAfterChange": "   public static <T1, T2, T3, T4, R> Lambda4<T1, T2, T3, T4, R>      asLambda(Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r, R result)", "diff": ["-  /** @return  A lambda that executes the given runnable, then returns {@code result} */", "-  public static <T1, T2, T3, T4, R> Lambda4<T1, T2, T3, T4, R> ", "-    asLambda(final Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r, final R result) {", "-    return new Lambda4<T1, T2, T3, T4, R>() { ", "-      public R value(T1 a1, T2 a2, T3 a3, T4 a4) { r.run(a1, a2, a3, a4); return result; }", "-    };", "-  }", "+  /** Create a lambda that executes the given runnable, then returns {@code result}. */", "+  public static <T1, T2, T3, T4, R> Lambda4<T1, T2, T3, T4, R> ", "+    asLambda(Runnable4<? super T1, ? super T2, ? super T3, ? super T4> r, R result) {", "+    return new RunnableLambda4<T1, T2, T3, T4, R>(r, result);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35e2a1bc5f5879bf4e2c425c2d9f254", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 225, "signatureBeforeChange": "   public static <T1, T2, T3, T4> Predicate4<T1, T2, T3, T4>      negate4(final Predicate4<? super T1, ? super T2, ? super T3, ? super T4> pred)", "signatureAfterChange": "   public static <T1, T2, T3, T4>      Predicate4<T1, T2, T3, T4> negate(Predicate4<? super T1, ? super T2, ? super T3, ? super T4> pred)", "diff": ["+  /** Produce the negation ({@code !}) of {@code pred}. */", "+  public static <T1, T2, T3, T4> ", "+    Predicate4<T1, T2, T3, T4> negate(Predicate4<? super T1, ? super T2, ? super T3, ? super T4> pred) {", "+    return new NegationPredicate4<T1, T2, T3, T4>(pred);", "+  }", "-  /** @return  The negation ({@code !}) of {@code pred} */", "-  public static <T1, T2, T3, T4> Predicate4<T1, T2, T3, T4> ", "-    negate4(final Predicate4<? super T1, ? super T2, ? super T3, ? super T4> pred) {", "-    return new Predicate4<T1, T2, T3, T4>() { ", "-      public Boolean value(T1 a1, T2 a2, T3 a3, T4 a4) { return !pred.value(a1, a2, a3, a4); }", "-    };", "-  }"]}], "num": 6383}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "daa286bc34f958268ddd1b6e82ef3a9a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085bef1e6214123829d747d3929ac216", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/definitions/DefinitionsDocument.java", "commitBeforeChange": "51e686ba41ead06ef0f1c4bec2b00eaf247dbe80", "commitAfterChange": "aa7731dd2e1401d2d7a2138058a2aae91b7b3cb6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private String getFirstClassName(int indexOfClass, int indexOfInterface,                                    int indexOfEnum) throws ClassNameNotFoundException", "signatureAfterChange": "   private String getFirstClassName(int indexOfClass, int indexOfInterface,                                    int indexOfEnum) throws ClassNameNotFoundException", "diff": ["-    ", "-    if ((indexOfClass == -1) && (indexOfInterface == -1) && (indexOfEnum == -1)) throw ClassNameNotFoundException.DEFAULT;", "-    ", "-    // should we convert this to a sorted queue or something like that?", "-    // should we have to extend this past three keywords, it will get rather hard to maintain", "-    if ((indexOfEnum == -1) || ", "-        ((indexOfClass != -1) && (indexOfClass < indexOfEnum)) ||", "-        ((indexOfInterface != -1) && (indexOfInterface < indexOfEnum))) {", "-      // either \"enum\" not found, or \"enum\" found after \"class\" or \"interface\"", "-      // \"enum\" is irrelevant", "-      // we know that at least one of indexOfClass and indexOfInterface is != -1", "-      if ((indexOfInterface == -1) ||", "-          ((indexOfClass != -1) && (indexOfClass < indexOfInterface))) {", "-        // either \"interface\" not found, or \"interface\" found after \"class\"", "-        return getNextIdentifier(indexOfClass + \"class\".length());", "+    try {", "+      if ((indexOfClass == -1) && (indexOfInterface == -1) && (indexOfEnum == -1)) throw ClassNameNotFoundException.DEFAULT;", "+      ", "+      // should we convert this to a sorted queue or something like that?", "+      // should we have to extend this past three keywords, it will get rather hard to maintain", "+      if ((indexOfEnum == -1) || ", "+          ((indexOfClass != -1) && (indexOfClass < indexOfEnum)) ||", "+          ((indexOfInterface != -1) && (indexOfInterface < indexOfEnum))) {", "+        // either \"enum\" not found, or \"enum\" found after \"class\" or \"interface\"", "+        // \"enum\" is irrelevant", "+        // we know that at least one of indexOfClass and indexOfInterface is != -1", "+        if ((indexOfInterface == -1) ||", "+            ((indexOfClass != -1) && (indexOfClass < indexOfInterface))) {", "+          // either \"interface\" not found, or \"interface\" found after \"class\"", "+          return getNextIdentifier(indexOfClass + \"class\".length());", "+        }", "+        else {", "+          // \"interface\" found, and found before \"class\"", "+          return getNextIdentifier(indexOfInterface + \"interface\".length());", "+        }", "-        // \"interface\" found, and found before \"class\"", "-        return getNextIdentifier(indexOfInterface + \"interface\".length());", "-      }", "+        // \"enum\" found, and found before \"class\" and \"interface\"", "+        return getNextIdentifier(indexOfEnum + \"enum\".length());", "+      }    ", "-    else {", "-      // \"enum\" found, and found before \"class\" and \"interface\"", "-      return getNextIdentifier(indexOfEnum + \"enum\".length());", "-    }    ", "+    catch(IllegalStateException ise) { throw ClassNameNotFoundException.DEFAULT; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f6baddc7ef2ebdcd4e77b85c23adee8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "f758aacbc5e404bb5b48be8d2800987cd77d8e79", "commitAfterChange": "84e7921bd32edcfceaf3be1ebd8104fc4d274516", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "     public void selectItem(CompilerError error)", "signatureAfterChange": "     public void selectItem(CompilerError error)", "diff": ["-      // Find corresponding index", "-      int i = _getIndexForError(error);", "-", "-      _selectedIndex = i;", "-      _removeListHighlight();", "-", "-      int startPos = _errorListPositions[i].getOffset();", "-", "-      // end pos is either the end of the document (if this is the last error)", "-      // or the char where the next error starts", "-      int endPos;", "-      if (i + 1 >= (_numErrors)) {", "-        endPos = getDocument().getLength();", "-      }", "-      else {", "-        endPos = _errorListPositions[i + 1].getOffset();", "-      }", "-", "-        _listHighlightTag =", "-          _highlightManager.addHighlight(startPos,", "-                                         endPos,", "-                                         _listHighlightPainter);", "+        // Find corresponding index", "+        int i = _getIndexForError(error);", "-        // Scroll to make sure this item is visible", "-        Rectangle startRect = modelToView(startPos);", "-        Rectangle endRect = modelToView(endPos - 1);", "-", "-        // Add the end rect onto the start rect to make a rectangle", "-        // that encompasses the entire error", "-        startRect.add(endRect);", "-", "-        //System.err.println(\"scrll vis: \" + startRect);", "-", "-        scrollRectToVisible(startRect);", "-", "+        _selectedIndex = i;", "+        _removeListHighlight();", "+        ", "+        int startPos = _errorListPositions[i].getOffset();", "+        ", "+        // end pos is either the end of the document (if this is the last error)", "+        // or the char where the next error starts", "+        int endPos;", "+        if (i + 1 >= (_numErrors)) {", "+          endPos = getDocument().getLength();", "+        }", "+        else {", "+          endPos = _errorListPositions[i + 1].getOffset();", "+        }", "+        ", "+        try {", "+          _listHighlightTag =", "+            _highlightManager.addHighlight(startPos,", "+                                           endPos,", "+                                           _listHighlightPainter);", "+          ", "+          // Scroll to make sure this item is visible", "+          Rectangle startRect = modelToView(startPos);", "+          Rectangle endRect = modelToView(endPos - 1);", "+          ", "+          // Add the end rect onto the start rect to make a rectangle", "+          // that encompasses the entire error", "+          startRect.add(endRect);", "+          ", "+          //System.err.println(\"scrll vis: \" + startRect);", "+          ", "+          scrollRectToVisible(startRect);", "+          ", "+        }", "+        catch (BadLocationException badBadLocation) {}", "+        ", "+        _resetEnabledStatus();", "-      catch (BadLocationException badBadLocation) {}", "-", "-      _resetEnabledStatus();", "+      catch (IllegalArgumentException iae) {", "+        // This shouldn't be happening, but it was reported in bug 704006.", "+        // (_getIndexForError throws it.)", "+        // We'll at least fail a little more gracefully.", "+        _removeListHighlight();", "+        _resetEnabledStatus();", "+      }"]}], "num": 21306}
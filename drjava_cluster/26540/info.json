{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eab01c3162a6dc19e7344eaaea9472c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14333a2c3a7f2f4956d9d90a31aff672", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 40, "signatureBeforeChange": "   private void _setupColorPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupColorPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_NORMAL_COLOR, \"Normal Color\", this,", "-                                                \"The default color for text in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_KEYWORD_COLOR, \"Keyword Color\", this,", "-                                                \"The color for Java keywords in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_TYPE_COLOR, \"Type Color\", this,", "-                                                \"The color for classes and types in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_COMMENT_COLOR, \"Comment Color\", this,", "-                                                \"The color for comments in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, \"Double-quoted Color\", this,", "-                                                \"The color for quoted strings (eg. \\\"...\\\") in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, \"Single-quoted Color\", this,", "-                                                \"The color for quoted characters (eg. 'a') in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_NUMBER_COLOR, \"Number Color\", this,", "-                                                \"The color for numbers in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_BACKGROUND_COLOR, \"Background Color\", this,", "-                                                \"The background color of the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_COLOR, \"Line Number Color\", this,", "-                                                \"The color for line numbers in the Definitions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_BACKGROUND_COLOR, \"Line Number Background Color\", this,", "-                                                \"The background color for line numbers in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_MATCH_COLOR, \"Brace-matching Color\", this,", "-                                                \"The color for matching brace highlights in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.COMPILER_ERROR_COLOR, \"Compiler Error Color\", this,", "-                                                \"The color for compiler error highlights in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.BOOKMARK_COLOR, \"Bookmark Color\", this,", "-                                                \"The color for bookmarks in the Definitions Pane.\", true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_NORMAL_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_KEYWORD_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_TYPE_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_COMMENT_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_NUMBER_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_BACKGROUND_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_BACKGROUND_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEFINITIONS_MATCH_COLOR,true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.COMPILER_ERROR_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.BOOKMARK_COLOR, true));", "-      addOptionComponent(panel, new ColorOptionComponent(OptionConstants.FIND_RESULTS_COLORS[i], \"Find Results Color \"+(i+1), this,", "-                                                         \"A color for highlighting find results in the Definitions Pane.\", true));", "+      addOptionComponent(panel, newColorOptionComponent(OptionConstants.FIND_RESULTS_COLORS[i], true));", "-                       new ColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_COLOR, \"Debugger Breakpoint Color\", this,", "-                                                \"The color for breakpoints in the Definitions Pane.\", true));", "+                       newColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_COLOR, true));", "-                       new ColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_DISABLED_COLOR, \"Disabled Debugger Breakpoint Color\", this,", "-                                                \"The color for disabled breakpoints in the Definitions Pane.\", true));", "+                       newColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_DISABLED_COLOR, true));", "-                       new ColorOptionComponent(OptionConstants.DEBUG_THREAD_COLOR, \"Debugger Location Color\", this,", "-                                                \"The color for the location of the current suspended thread in the Definitions Pane.\", true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_OUT_COLOR, \"System.out Color\", this,", "-                                                       \"The color for System.out in the Interactions and Console Panes.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_ERR_COLOR, \"System.err Color\", this,", "-                                                       \"The color for System.err in the Interactions and Console Panes.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_IN_COLOR, \"System.in Color\", this,", "-                                                       \"The color for System.in in the Interactions Pane.\"));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.INTERACTIONS_ERROR_COLOR, \"Interactions Error Color\", this,", "-                                                       \"The color for interactions errors in the Interactions Pane.\", false, true));", "-    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEBUG_MESSAGE_COLOR, \"Debug Message Color\", this,", "-                                                       \"The color for debugger messages in the Interactions Pane.\", false, true));", "+                       newColorOptionComponent(OptionConstants.DEBUG_THREAD_COLOR, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.SYSTEM_OUT_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.SYSTEM_ERR_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.SYSTEM_IN_COLOR));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.INTERACTIONS_ERROR_COLOR, false, true));", "+    addOptionComponent(panel, newColorOptionComponent(OptionConstants.DEBUG_MESSAGE_COLOR, false, true));", "-                       new ColorOptionComponent(OptionConstants.DRJAVA_ERRORS_BUTTON_COLOR, \"DrJava Errors Button Background Color\", this,", "-                                                \"The background color of the \\\"Errors\\\" button used to show internal DrJava errors.\", true));", "+                       newColorOptionComponent(OptionConstants.DRJAVA_ERRORS_BUTTON_COLOR, true));", "-                       new ColorOptionComponent(OptionConstants.RIGHT_MARGIN_COLOR, \"Right Margin Color\", this,", "-                                                \"The color of the right margin line, if displayed.\", true));", "+                       newColorOptionComponent(OptionConstants.RIGHT_MARGIN_COLOR, true));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dd5f90b95c43984228d845eef51c501", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 57, "signatureBeforeChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupNotificationsPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.QUIT_PROMPT, \"Prompt Before Quit\", this,", "-                                                         \"Whether DrJava should prompt the user before quitting.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.QUIT_PROMPT, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT,", "-                                                         \"Prompt Before Resetting Interactions Pane\", this,", "-                                                         \"<html>Whether DrJava should prompt the user before<br>\" +", "-                                                         \"manually resetting the interactions pane.</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT, false)", "-                       new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,", "-                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +", "-                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\",", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,", "-                                                         \"Prompt for Javadoc Destination\", ", "-                                                         this,", "-                                                         \"<html>Whether Javadoc should always prompt the user<br>\" +", "-                                                         \"to select a destination directory.</html>\", ", "-                                                         false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.PROMPT_BEFORE_CLEAN,", "-                                                         \"Prompt before Cleaning Build Directory\", this,", "-                                                         \"<html>Whether DrJava should prompt before cleaning the<br>\" +", "-                                                         \"build directory of a project</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.PROMPT_BEFORE_CLEAN, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.PROMPT_RENAME_LL_FILES, \"Prompt to Rename Old Language Level Files When Saving\", this,", "-                                                         \"<html>Whether DrJava should prompt the user to rename old language level files.<br>\"+", "-                                                         \"DrJava suggests to rename .dj0 and .dj1 files to .dj, and .dj2 files to .java.</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.PROMPT_RENAME_LL_FILES, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE,", "-                                                         \"Automatically Save Before Compiling\", this,", "-                                                         \"<html>Whether DrJava should automatically save before<br>\" +", "-                                                         \"recompiling or ask the user each time.</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JUNIT, ", "-                                                         \"Automatically Compile Before Testing\", this,", "-                                                         \"<html>Whether DrJava should automatically compile before<br>\" +", "-                                                         \"testing with JUnit or ask the user each time.</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JUNIT,false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC,", "-                                                         \"Automatically Save Before Generating Javadoc\", this,", "-                                                         \"<html>Whether DrJava should automatically save before<br>\" +", "-                                                         \"generating Javadoc or ask the user each time.</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JAVADOC,", "-                                                         \"Automatically Compile Before Generating Javadoc\", this,", "-                                                         \"<html>Whether DrJava should automatically compile before<br>\" +", "-                                                         \"generating Javadoc or ask the user each time.</html>\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JAVADOC, false)", "-//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN, ", "-//                                                  \"Automatically Save and Compile Before Running Main Method\", ", "-//                                                  this,", "-//                                                  \"<html>Whether DrJava automatically saves and compiles before running<br>\" +", "-//                                                  \"a document's main method or explicitly asks the user each time.</html>\"));", "+//                       newBooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN));", "-//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG, ", "-//                                                  \"Automatically Save and Compile Before Debugging\", ", "-//                                                  this,", "-//                                                  \"<html>Whether DrJava automatically saves and compiles before<br>\" +", "-//                                                  \"debugging or explicitly asks the user each time.</html>\"));", "+//                       newBooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG));", "-                       new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,", "-                                                  \"Warn on Breakpoint if Out of Sync\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +", "-                                                  \"is out of sync before setting a breakpoint in that file.</html>\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,", "-                                                  \"Warn if Debugging Modified File\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "-                                                  \"debugged has been modified since its last save.</html>\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,", "-                                                  \"Warn to Restart to Change Look and Feel\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user that look and feel<br>\" +", "-                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_THEME,", "-                                                  \"Warn to Restart to Change Theme\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user that theme<br>\" +", "-                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_CHANGE_THEME,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_DCP,", "-                                                  \"Warn to Restart to Change Default Compiler Preference\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user that default compiler preference<br>\" +", "-                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_CHANGE_DCP,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_MISC,", "-                                                  \"Warn to Restart to Change Preferences (other)\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user that preference<br>\" +", "-                                                  \"changes will not be applied until DrJava is restarted.</html>.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_CHANGE_MISC,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_INTERACTIONS,", "-                                                  \"Warn to Reset to Change Interactions\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user that preference<br>\" +", "-                                                  \"changes will not be applied until the Interactions Pane<br>\" +", "-                                                  \"is reset.</html>.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_CHANGE_INTERACTIONS,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_PATH_CONTAINS_POUND,", "-                                                  \"Warn if File's Path Contains a '#' Symbol\", ", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +", "-                                                  \"saved has a path that contains a '#' symbol.<br>\" +", "-                                                  \"Users cannot use such files in the Interactions Pane<br>\" +", "-                                                  \"because of a bug in Java.</html>\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_PATH_CONTAINS_POUND,false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED, ", "-                                                  \"Show a notification window when the first DrJava error occurs\", ", "-                                                  this,", "-                                                  \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\" +", "-                                                  \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED,false)", "-                       new BooleanOptionComponent(OptionConstants.WARN_IF_COMPIZ, ", "-                                                  \"Warn If Compiz Detected\",", "-                                                  this,", "-                                                  \"<html>Whether DrJava should warn the user if Compiz is running.<br>\"+", "-                                                  \"Compiz and Java Swing are incompatible and can lead to crashes.</html>\",", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.WARN_IF_COMPIZ,false)", "-                       new ForcedChoiceOptionComponent(OptionConstants.DELETE_LL_CLASS_FILES,", "-                                                       \"Delete language level class files?\", this,", "-                                                       \"Whether DrJava should delete class files in directories with language level files.\"));", "+                       newForcedChoiceOptionComponent(OptionConstants.DELETE_LL_CLASS_FILES));", "-                       new ForcedChoiceOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION,", "-                                                       \"Check for new versions?\", this,", "-                                                       \"Whether DrJava should check for new versions on drjava.org.\"));", "-    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION_DAYS,", "-                                                         \"Days between new version check\", this,", "-                                                         \"The number of days between automatic new version checks.\"));", "+                       newForcedChoiceOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION));", "+    addOptionComponent(panel, newIntegerOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION_DAYS));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49ab4f8f160794751c09627487fa954a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "9b3324f219a69f8658c0756bfd83fb666ede6986", "commitAfterChange": "23d353b1918dd9a63de161a6fc91f2e819d09fc5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 41, "signatureBeforeChange": "   private void _setupPositionsPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupPositionsPanel(ConfigPanel panel)", "diff": ["-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WINDOW_STORE_POSITION,", "-                                                         \"Save Main Window Position\", this,", "-                                                         \"Whether to save and restore the size and position of the main window.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.WINDOW_STORE_POSITION, false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_CLIPBOARD_HISTORY_STORE_POSITION,", "-                                                  \"Save \\\"Clipboard History\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the size and position of the \\\"Clipboard History\\\" dialog.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_CLIPBOARD_HISTORY_STORE_POSITION,false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_STORE_POSITION,", "-                                                  \"Save \\\"Go to File\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the size and position of the \\\"Go to File\\\" dialog.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_STORE_POSITION, false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_WORD_STORE_POSITION,", "-                                                  \"Save \\\"Auto-Complete Word\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the size and position of the \\\"Auto-Complete Word\\\" dialog.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_WORD_STORE_POSITION,false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_JAROPTIONS_STORE_POSITION,", "-                                                  \"Save \\\"Create Jar File from Project\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the position of the \\\"Create Jar File from Project\\\" dialog.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_JAROPTIONS_STORE_POSITION,false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_OPENJAVADOC_STORE_POSITION,", "-                                                  \"Save \\\"Open Javadoc\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the size and position of the \\\"Open Javadoc\\\" dialog.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DIALOG_OPENJAVADOC_STORE_POSITION, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_STORE_POSITION,", "-                                                  \"Save \\\"Auto Import\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the size and position of the \\\"Auto Import\\\" dialog.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_STORE_POSITION, false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_EXTERNALPROCESS_STORE_POSITION,", "-                                                  \"Save \\\"Execute External Process\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the position of the \\\"Execute External Process\\\" dialog.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_EXTERNALPROCESS_STORE_POSITION,false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_EDITEXTERNALPROCESS_STORE_POSITION,", "-                                                  \"Save \\\"Edit External Process\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the position of the \\\"Edit External Process\\\" dialog.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DIALOG_EDITEXTERNALPROCESS_STORE_POSITION, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_OPENJAVADOC_STORE_POSITION,", "-                                                  \"Save \\\"Open Javadoc\\\" Dialog Position\", this,", "-                                                  \"Whether to save and restore the position of the \\\"Open Javadoc\\\" dialog.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DIALOG_OPENJAVADOC_STORE_POSITION, false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_TABBEDPANES_STORE_POSITION,", "-                                                  \"Save \\\"Tabbed Panes\\\" Window Position\", this,", "-                                                  \"Whether to save and restore the position of the \\\"Tabbed Panes\\\" window.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DIALOG_TABBEDPANES_STORE_POSITION, false)", "-                       new BooleanOptionComponent(OptionConstants.DETACH_TABBEDPANES,", "-                                                  \"Detach Tabbed Panes\", ", "-                                                  this,", "-                                                  \"Whether to detach the tabbed panes and display them in a separate window.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DETACH_TABBEDPANES,false)", "-                       new BooleanOptionComponent(OptionConstants.DIALOG_DEBUGFRAME_STORE_POSITION,", "-                                                  \"Save \\\"Debugger\\\" Window Position\", ", "-                                                  this,", "-                                                  \"Whether to save and restore the position of the \\\"Debugger\\\" window.\", ", "-                                                  false)", "+                       newBooleanOptionComponent(OptionConstants.DIALOG_DEBUGFRAME_STORE_POSITION,false)", "-    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DETACH_DEBUGGER,", "-                                                  \"Detach Debugger\", this,", "-                                                  \"Whether to detach the debugger and display it in a separate window.\", false)", "+    addOptionComponent(panel, newBooleanOptionComponent(OptionConstants.DETACH_DEBUGGER, false)"]}], "num": 26540}
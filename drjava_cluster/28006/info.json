{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a60d90f820742bac231a5c1a9d5eabec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d38e3ba213a1797be5fa50f9f36420c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 41, "signatureBeforeChange": "   final public ClassBody classBody() throws ParseException", "signatureAfterChange": "   final public ClassBody classBody() throws ParseException", "diff": ["-    jj_consume_token(LBRACE);", "-    label_8:", "-    while (true) {", "-      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-      case ABSTRACT:", "-      case BOOLEAN:", "-      case BYTE:", "-      case CHAR:", "-      case CLASS:", "-      case DOUBLE:", "-      case FINAL:", "-      case FLOAT:", "-      case INT:", "-      case INTERFACE:", "-      case LONG:", "-      case NATIVE:", "-      case PRIVATE:", "-      case PROTECTED:", "-      case PUBLIC:", "-      case SHORT:", "-      case STATIC:", "-      case SYNCHRONIZED:", "-      case TRANSIENT:", "-      case VOID:", "-      case VOLATILE:", "-      case IDENTIFIER:", "-      case LBRACE:", "-      case SEMICOLON:", "-      case LESS:", "-        ;", "-        break;", "-      default:", "-        jj_la1[21] = jj_gen;", "-        break label_8;", "-      }", "-      decl = classBodyDeclaration();", "+    try {", "+      jj_consume_token(LBRACE);", "+      label_8:", "+      while (true) {", "+        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+        case ABSTRACT:", "+        case BOOLEAN:", "+        case BYTE:", "+        case CHAR:", "+        case CLASS:", "+        case DOUBLE:", "+        case FINAL:", "+        case FLOAT:", "+        case INT:", "+        case INTERFACE:", "+        case LONG:", "+        case NATIVE:", "+        case PRIVATE:", "+        case PROTECTED:", "+        case PUBLIC:", "+        case SHORT:", "+        case STATIC:", "+        case SYNCHRONIZED:", "+        case TRANSIENT:", "+        case VOID:", "+        case VOLATILE:", "+        case IDENTIFIER:", "+        case LBRACE:", "+        case SEMICOLON:", "+        case LESS:", "+          ;", "+          break;", "+        default:", "+          jj_la1[22] = jj_gen;", "+          break label_8;", "+        }", "+        decl = classBodyDeclaration();", "-    }", "-    t = jj_consume_token(RBRACE);", "+      }", "+      t = jj_consume_token(RBRACE);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe,\"Invalid class body\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bf749c78a39fd28e814181a5aeccaa", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/parser/Parser.java", "commitBeforeChange": "0c7c12fccfb8655d7ad1d22d386f34bb15267399", "commitAfterChange": "c553d53d5f3c5f2f9f386cec7dd21cdd75fbe436", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": "   final public List<FormalParameter> formalParameters() throws ParseException", "signatureAfterChange": "   final public List<FormalParameter> formalParameters() throws ParseException", "diff": ["-    jj_consume_token(LPAREN);", "-    if (jj_2_17(2147483647)) {", "-      node = formalParameter();", "-      list.add(node);", "-      label_13:", "-      while (true) {", "-        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-        case COMMA:", "-          ;", "-          break;", "-        default:", "-          jj_la1[32] = jj_gen;", "-          break label_13;", "-        }", "-        jj_consume_token(COMMA);", "+    try {", "+      jj_consume_token(LPAREN);", "+      if (jj_2_17(2147483647)) {", "+      list.add(node);", "+        label_13:", "+        while (true) {", "+          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+          case COMMA:", "+            ;", "+            break;", "+          default:", "+            jj_la1[33] = jj_gen;", "+            break label_13;", "+          }", "+          jj_consume_token(COMMA);", "+          node = formalParameter();", "+        }", "+      } else {", "+        ;", "-    } else {", "-      ;", "-    }", "-    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "-    case BOOLEAN:", "-    case BYTE:", "-    case CHAR:", "-    case DOUBLE:", "-    case FINAL:", "-    case FLOAT:", "-    case INT:", "-    case LONG:", "-    case SHORT:", "-    case IDENTIFIER:", "-      lastVarArgsParam = varArgsFormalParameter();", "-      break;", "-    default:", "-      jj_la1[33] = jj_gen;", "-      ;", "-    }", "-    jj_consume_token(RPAREN);", "+      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {", "+      case BOOLEAN:", "+      case BYTE:", "+      case CHAR:", "+      case DOUBLE:", "+      case FINAL:", "+      case FLOAT:", "+      case INT:", "+      case LONG:", "+      case SHORT:", "+      case IDENTIFIER:", "+        lastVarArgsParam = varArgsFormalParameter();", "+        break;", "+      default:", "+        jj_la1[34] = jj_gen;", "+        ;", "+      }", "+      jj_consume_token(RPAREN);", "+    } catch (ParseException pe) {", "+      _throwParseException(pe, \"Invalid formal parameters\");", "+    }"]}], "num": 28006}
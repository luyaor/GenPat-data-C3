{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e4b74bcde61f2bb6f87dd27ad26c4ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f929f6caf6f2f7e40c4480b683c996", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/reflect/PathClassLoader.java", "commitBeforeChange": "8f22faa37dd01a3f7558266d18abc2d7efbad303", "commitAfterChange": "cb90935101bcad5cbb9112da0b615959c52160fc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private static URL[] makeURLs(Iterable<? extends File> path)", "signatureAfterChange": "      protected Enumeration<URL> findResources(String name) throws IOException", "diff": ["-  private static URL[] makeURLs(Iterable<? extends File> path) {", "-    LinkedList<URL> result = new LinkedList<URL>();", "-    for (File f : path) {", "-      try { result.add(f.toURI().toURL()); }", "-      catch (IllegalArgumentException e) { DebugUtil.error.log(e); }", "-      catch (MalformedURLException e) { DebugUtil.error.log(e); }", "-    return result.toArray(new URL[result.size()]);", "+  ", "+  protected Enumeration<URL> findResources(String name) throws IOException {", "+    Iterator<URL> result = EmptyIterator.make();", "+    for (File f : _path) {", "+      try {", "+        URL url = f.toURI().toURL();", "+        Enumeration<URL> newResults = new URLClassLoader(new URL[]{ url }).findResources(name);", "+        if (newResults.hasMoreElements()) {", "+          result = ComposedIterator.make(result, IterUtil.asIterator(newResults));", "+        }", "+      }", "+      catch (IllegalArgumentException e) { error.log(e); }", "+      catch (MalformedURLException e) { error.log(e); }", "+      // just skip the path element if there's an error", "+    }", "+    return IterUtil.asEnumeration(result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fc0a92406e0b24e377dc9900c4e811d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/DebugManager.java", "commitBeforeChange": "ec45520bd7c034fcd5a1e91bf25ccd1d46b70ecf", "commitAfterChange": "395b2a102021edacb1427340196ea5475967dc87", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   synchronized void scrollToSource(LocatableEvent e)", "signatureAfterChange": "   synchronized void scrollToSource(LocatableEvent e)", "diff": ["-      File[] roots = _model.getSourceRootSet();", "-      File f = null;", "-      boolean foundFile = false;", "-      for (int i = 0; i < roots.length; i++) {", "-        String currRoot = roots[i].getAbsolutePath();", "-        //DrJava.consoleOut().println(\"Trying to find \" + currRoot + ps + className + ", "-        //                            \".java\");", "-        f = new File(currRoot + ps + className + \".java\");", "-        if (f.exists()) {", "-          foundFile = true;", "-          break;", "+      String filename = className + \".java\";", "+      Vector<File> sourcepath = ", "+        DrJava.CONFIG.getSetting(OptionConstants.DEBUG_SOURCEPATH);", "+      File f = _getSourceFileFromPaths(filename, sourcepath);", "+      //File f = null;", "+      if (f == null) {", "+        // If not on sourcepath, check source root set (open files)", "+        File[] sourceRoots = _model.getSourceRootSet();", "+        Vector<File> roots = new Vector<File>();", "+        for (int i=0; i < sourceRoots.length; i++) {", "+          roots.addElement(sourceRoots[i]);", "+        f = _getSourceFileFromPaths(filename, roots);", "-      if (foundFile) {", "+      ", "+      if (f != null) {", "-          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + ioe);", "+          //DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + ioe);", "-          DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + oce);", "+          //DrJava.consoleOut().println(\"Problem opening file, won't scroll: \" + oce);", "+      String className = location.declaringType().name();", "+      printMessage(\"  (Source for \" + className + \" not found.)\");"]}], "num": 30702}
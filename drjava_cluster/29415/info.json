{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cd6d5b822d1a15b97b35577c0c8405a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fce9ad88a6167181334bc0b016f8a42", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "7363b79c6228b3bbffbaa22283c3045a27a3cedc", "commitAfterChange": "74a15c017d574b2ee2a0cdeaaedeea00825a0c5e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-    Utilities.invokeLater(new Runnable() { public void run() { ", "-      ErrorPanel panel = _frame.getSelectedErrorPanel();", "-      if (panel == null) {", "-        // no error panel is currently selected", "-        return;", "-      }", "-      CompilerErrorModel model =  panel.getErrorModel();", "-      ", "-      if (!model.hasErrorsWithPositions(_openDoc)) return;", "-      ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-      ", "-      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-      ", "-      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-      // if no error is on this line, select the (none) item", "-      if (error == null) errorListPane.selectNothing();", "-      else {      ", "-        if (errorListPane.shouldShowHighlightsInSource()) {", "-          // No need to move the caret since it's already here!", "-          _highlightErrorInSource(model.getPosition(error));", "-        }", "-        ", "-        // Select item wants the CompilerError", "-        errorListPane.selectItem(error);", "-      }", "+//    assert EventQueue.isDispatchThread();  // violated during undo in DefinitionsPaneTest", "+//    Utilities.invokeLater(new Runnable() { ", "+//      public void run() { ", "+    ErrorPanel panel = _frame.getSelectedErrorPanel();", "+    if (panel == null) {", "+      // no error panel is currently selected", "+      return;", "-    });", "+    CompilerErrorModel model =  panel.getErrorModel();", "+    ", "+    if (!model.hasErrorsWithPositions(_openDoc)) return;", "+    ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+    ", "+    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+    ", "+    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+    // if no error is on this line, select the (none) item", "+    if (error == null) errorListPane.selectNothing();", "+    else {      ", "+      if (errorListPane.shouldShowHighlightsInSource()) {", "+        // No need to move the caret since it's already here!", "+        _highlightErrorInSource(model.getPosition(error));", "+      }", "+      ", "+      // Select item wants the CompilerError", "+      errorListPane.selectItem(error);", "+    }", "+//      }", "+//    });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78b6db64432885f32e6a4c3fc9879894", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/ErrorCaretListener.java", "commitBeforeChange": "0e0a6cd0b304183c5602e4fe1c0f1a766f131ce0", "commitAfterChange": "0106f3ce6870b8b4440fc75222d89130d761ff4e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(final int curPos)", "signatureAfterChange": "   public void updateHighlight(final int curPos)", "diff": ["-    Utilities.invokeLater(new Runnable() { public void run() { ", "-      ErrorPanel panel = _frame.getSelectedErrorPanel();", "-      if (panel == null) {", "-        // no error panel is currently selected", "-        return;", "-      }", "-      CompilerErrorModel model =  panel.getErrorModel();", "-      ", "-      if (!model.hasErrorsWithPositions(_openDoc)) return;", "-      ", "-//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "-      ", "-      CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-      ", "-      ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "-      // if no error is on this line, select the (none) item", "-      if (error == null) errorListPane.selectNothing();", "-      else {      ", "-        if (errorListPane.shouldShowHighlightsInSource()) {", "-          // No need to move the caret since it's already here!", "-          _highlightErrorInSource(model.getPosition(error));", "-        }", "-        ", "-        // Select item wants the CompilerError", "-        errorListPane.selectItem(error);", "-      }", "+//    assert EventQueue.isDispatchThread();  // violated during undo in DefinitionsPaneTest", "+//    Utilities.invokeLater(new Runnable() { ", "+//      public void run() { ", "+    ErrorPanel panel = _frame.getSelectedErrorPanel();", "+    if (panel == null) {", "+      // no error panel is currently selected", "+      return;", "-    });", "+    CompilerErrorModel model =  panel.getErrorModel();", "+    ", "+    if (!model.hasErrorsWithPositions(_openDoc)) return;", "+    ", "+//    Utilities.showDebug(\"ErrorCaretListener.updateHighlight invoked\");", "+    ", "+    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "+    ", "+    ErrorPanel.ErrorListPane errorListPane = panel.getErrorListPane();", "+    // if no error is on this line, select the (none) item", "+    if (error == null) errorListPane.selectNothing();", "+    else {      ", "+      if (errorListPane.shouldShowHighlightsInSource()) {", "+        // No need to move the caret since it's already here!", "+        _highlightErrorInSource(model.getPosition(error));", "+      }", "+      ", "+      // Select item wants the CompilerError", "+      errorListPane.selectItem(error);", "+    }", "+//      }", "+//    });"]}], "num": 29415}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dede79e503c82e0b67dd34ba99ecafc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ef87a135833633ec693d446c11fd35", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StreamRedirectThread.java", "commitBeforeChange": "08dc50acc6315b4a29619a0eb44a9574f8e58999", "commitAfterChange": "fdb0eba529d65804f971cdb52c673713ef0d4616", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void run()", "signatureAfterChange": "   public void run()", "diff": ["-     */", "-    public void run() {", "-        try {", "-            char[] cbuf = new char[BUFFER_SIZE];", "-            int count;", "-            while ((!stop) && ((count = in.read(cbuf, 0, BUFFER_SIZE)) >= 0)) {", "-                try {", "-                    out.write(cbuf, 0, count);", "-                    out.flush();", "-                }", "-                catch (IOException exc) {", "-                    GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" had IOException while writing: \"+exc);", "-                    throw new StreamRedirectException(\"An error occurred during stream redirection, while piping data into a process.\",", "-                                                      exc);", "-                }", "-            }", "-            GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" finished copying\");", "+   */", "+  public void run() {", "+    do {", "+      try {", "+        char[] cbuf = new char[BUFFER_SIZE];", "+        int count;", "+        while ((!stop) && ((count = in.read(cbuf, 0, BUFFER_SIZE)) >= 0)) {", "+          try {", "+            out.write(cbuf, 0, count);", "-            if (close) {", "-              out.close();", "-              in.close();", "-            }", "+          }", "+          catch (IOException exc) {", "+            GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" had IOException while writing: \"+exc);", "+            throw new StreamRedirectException(\"An error occurred during stream redirection, while piping data into a process.\",", "+                                              exc);", "+          }", "-        catch (IOException exc) {", "-          GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" had IOException: \"+exc);", "-          throw new StreamRedirectException(\"An error occurred during stream redirection, while piping data out of a process.\",", "-                                            exc);", "+        GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" finished copying\");", "+        out.flush();", "+        if (close) {", "+          in.close();", "+      }", "+      catch (IOException exc) {", "+        GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" had IOException: \"+exc);", "+        throw new StreamRedirectException(\"An error occurred during stream redirection, while piping data out of a process.\",", "+                                          exc);", "+      }", "+      if (keepRunning) {", "+        // wait for a new input stream", "+        while(!cm.waitOne());", "+        cm.reset();", "+      }", "+    } while(keepRunning && !close);", "+    if (close) {", "+      try {", "+        out.close();", "+      }", "+      catch (IOException exc) {", "+        GeneralProcessCreator.LOG.log(\"StreamRedirectThread \"+getName()+\" had IOException: \"+exc);", "+        throw new StreamRedirectException(\"An error occurred during stream redirection, while piping data out of a process.\",", "+                                          exc);", "+      }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34ee2287aaf59f94cffe97bf05b45c9c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "8a50a7d4180dfbf8ce4f8b3b2ddf43887adf7c81", "commitAfterChange": "924f4a516342866293ae7a5a3652d82cc6e43c22", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "          public void report(Diagnostic<? extends JavaFileObject> d)", "signatureAfterChange": "\r     \r     public void report(Diagnostic<? extends JavaFileObject> d)", "diff": ["-    ", "-    public void report(Diagnostic<? extends JavaFileObject> d) {", "-      System.err.println(\"report: \"+d);", "-      ", "-      Diagnostic.Kind dt = d.getKind();", "-      boolean isWarning = false;  // init required by javac", "-      ", "-      switch (dt) {", "-        case OTHER:             return;", "-        case NOTE:              return;", "-        case MANDATORY_WARNING: isWarning = true; break;", "-        case WARNING:           isWarning = true; break;", "-        case ERROR:             isWarning = false; break;", "-      }", "-      ", "-      /* The new Java 6.0 Diagnostic interface appears to be broken.  The expression d.getSource().getName() returns a ", "-        * non-existent path--the name of the test file (allocated as a TEMP file) appended to the source root for ", "-        * DrJava--in GlobalModelCompileErrorsTest.testCompileFailsCorrectLineNumbers().  The expression ", "-        * d.getSource().toUri().getPath() returns the correct result as does ((JCDiagnostic) d).getSourceName(). */", "-      ", "-      ", "-      _errors.add(new DJError(new File(d.getSource().toUri().getPath()), // d.getSource().getName() fails! ", "-                                    ((int) d.getLineNumber()) - 1,  // javac starts counting at 1", "-                                    ((int) d.getColumnNumber()) - 1, ", "-                                    d.getMessage(null),    // null is the locale", "-                                    isWarning));", "-    }", "+    \r", "+    public void report(Diagnostic<? extends JavaFileObject> d) {\r", "+      Diagnostic.Kind dt = d.getKind();\r", "+      boolean isWarning = false;  // init required by javac\r", "+      \r", "+      switch (dt) {\r", "+        case OTHER:             return;\r", "+        case NOTE:              return;\r", "+        case MANDATORY_WARNING: isWarning = true; break;\r", "+        case WARNING:           isWarning = true; break;\r", "+        case ERROR:             isWarning = false; break;\r", "+      }\r", "+      \r", "+      /* The new Java 6.0 Diagnostic interface appears to be broken.  The expression d.getSource().getName() returns a \r", "+        * non-existent path--the name of the test file (allocated as a TEMP file) appended to the source root for \r", "+        * DrJava--in GlobalModelCompileErrorsTest.testCompileFailsCorrectLineNumbers().  The expression \r", "+        * d.getSource().toUri().getPath() returns the correct result as does ((JCDiagnostic) d).getSourceName(). */\r", "+      \r", "+      if (d.getSource()!=null) {\r", "+          _errors.add(new DJError(new File(d.getSource().toUri().getPath()), // d.getSource().getName() fails! \r", "+                                  ((int) d.getLineNumber()) - 1,  // javac starts counting at 1\r", "+                                  ((int) d.getColumnNumber()) - 1, \r", "+                                  d.getMessage(Locale.getDefault()),    // JVM default locale\r", "+                                  isWarning));\r", "+      }\r", "+      else {\r", "+          _errors.add(new DJError(d.getMessage(Locale.getDefault()), isWarning));\r", "+      }\r", "+    }\r"]}], "num": 31075}
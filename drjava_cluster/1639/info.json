{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73125ac167af6f25609cb90447203bb3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63badcc8c76028be23151457ec7dee0f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public Object visit(SuperMethodCall node)", "signatureAfterChange": "   public Object visit(SuperMethodCall node)", "diff": ["+   */", "+  public Object visit(SuperMethodCall node) {", "+    Method   m     = (Method)node.getProperty(NodeProperties.METHOD);", "+    List<Expression> larg  = node.getArguments();", "+    Object[] args  = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      args        = new Object[larg.size()];", "+      while (it.hasNext()) {", "+        args[i] = it.next().acceptVisitor(this);", "+        i++;", "+      }", "+    // Invoke the method", "+    try {", "+      return m.invoke(context.getHiddenArgument(), args);", "+    } catch (InvocationTargetException e) {", "+      if (e.getTargetException() instanceof Error) {", "+        throw (Error)e.getTargetException();", "+      } else if (e.getTargetException() instanceof RuntimeException) {", "+        throw (RuntimeException)e.getTargetException();", "+      }", "+      throw new ThrownException(e.getTargetException());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "-     */", "-    public Object visit(SuperMethodCall node) {", "-        Method   m     = (Method)node.getProperty(NodeProperties.METHOD);", "-        List     larg  = node.getArguments();", "-        Object[] args  = Constants.EMPTY_OBJECT_ARRAY;", "-", "-        // Fill the arguments", "-\tif (larg != null) {", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    args        = new Object[larg.size()];", "-\t    while (it.hasNext()) {", "-\t\targs[i] = ((Expression)it.next()).acceptVisitor(this);", "-\t\ti++;", "-\t    }", "-\t}", "-", "-        // Invoke the method", "-        try {", "-            return m.invoke(context.getHiddenArgument(), args);", "-        } catch (InvocationTargetException e) {", "-\t    if (e.getTargetException() instanceof Error) {", "-\t\tthrow (Error)e.getTargetException();", "-\t    } else if (e.getTargetException() instanceof RuntimeException) {", "-\t\tthrow (RuntimeException)e.getTargetException();", "-\t    }", "-\t    throw new ThrownException(e.getTargetException());", "-\t} catch (Exception e) {", "-\t    throw new CatchedExceptionError(e, node);", "-\t}", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca94f545fdb72be885097712ef0d6bba", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/EvaluationVisitor.java", "commitBeforeChange": "5df4e785713703c5888db4cb5ec4317420920fff", "commitAfterChange": "14b25d4149524a90a31159ece6ef4294e14d0609", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public Object visit(StaticMethodCall node)", "signatureAfterChange": "   public Object visit(StaticMethodCall node)", "diff": ["+   */", "+  public Object visit(StaticMethodCall node) {", "+    Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "+    List<Expression> larg = node.getArguments();", "+    Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "+    ", "+    // Fill the arguments", "+    if (larg != null) {", "+      args = new Object[larg.size()];", "+      Iterator<Expression> it = larg.iterator();", "+      int      i  = 0;", "+      while (it.hasNext()) {", "+        args[i] = it.next().acceptVisitor(this);", "+        i++;", "+      }", "-     */", "-    public Object visit(StaticMethodCall node) {", "-        Method   m    = (Method)node.getProperty(NodeProperties.METHOD);", "-        List     larg = node.getArguments();", "-        Object[] args = Constants.EMPTY_OBJECT_ARRAY;", "-        ", "-        // Fill the arguments", "-\tif (larg != null) {", "-\t    args = new Object[larg.size()];", "-\t    Iterator it = larg.iterator();", "-\t    int      i  = 0;", "-\t    while (it.hasNext()) {", "-\t\targs[i] = ((Expression)it.next()).acceptVisitor(this);", "-\t\ti++;", "-\t    }", "-\t}", "-", "-        // Invoke the method", "-        try {", "-            return m.invoke(null, args);", "-        } catch (InvocationTargetException e) {", "-\t    if (e.getTargetException() instanceof Error) {", "-\t\tthrow (Error)e.getTargetException();", "-\t    } else if (e.getTargetException() instanceof RuntimeException) {", "-\t\tthrow (RuntimeException)e.getTargetException();", "-\t    }", "-\t    throw new ThrownException(e.getTargetException());", "-\t} catch (Exception e) {", "-\t    throw new CatchedExceptionError(e, node);", "-\t}", "+    ", "+    // Invoke the method", "+    try {", "+      return m.invoke(null, args);", "+    } catch (InvocationTargetException e) {", "+      if (e.getTargetException() instanceof Error) {", "+        throw (Error)e.getTargetException();", "+      } else if (e.getTargetException() instanceof RuntimeException) {", "+        throw (RuntimeException)e.getTargetException();", "+      }", "+      throw new ThrownException(e.getTargetException());", "+    } catch (Exception e) {", "+      throw new CatchedExceptionError(e, node);", "+  }"]}], "num": 1639}
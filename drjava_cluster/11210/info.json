{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0a9d882a7da9331a79995c59de25a5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8bd8d21b01a3a884f187bfe7d4823a46", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/swing/FindAnyOccurrenceState.java", "commitBeforeChange": "82f2ed0c10073d0b45d405a9ea26c9aa3f37c661", "commitAfterChange": "6bfab9f5cad6f12d0935dd59b83d99bfc86909eb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public FindResult findNext()", "signatureAfterChange": "   public FindResult findNext()", "diff": ["+   ", "-      int start, len;", "+      int start, len, docLen;", "-      if (!_searchBackwards) {", "-        start = _current.getOffset();", "-        len = _doc.getLength() - start;", "+      _doc.acquireReadLock();  ", "+      try {", "+        docLen = _doc.getLength();", "+        if (!_searchBackwards) {", "+          start = _current.getOffset();", "+          len = docLen - start;", "+        }", "+        else {", "+          start = 0;", "+          len = _current.getOffset();", "+        }", "+        findSpace = _doc.getText(start, len);", "-      else {", "-        start = 0;", "-        len = _current.getOffset();", "-      }", "-      findSpace = _doc.getText(start, len);", "+      finally { _doc.releaseReadLock(); }", "+      ", "-        _current = _doc.createPosition(foundOffset);", "+        _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc", "-          if (!_searchBackwards) {", "-            start = 0;", "-            len = _current.getOffset() + (_findWord.length() - 1);", "-            if (len > _doc.getLength()) len = _doc.getLength();", "+          ", "+          _doc.acquireReadLock();  ", "+          try { ", "+            docLen = _doc.getLength(); ", "+            if (!_searchBackwards) {", "+              start = 0;", "+              len = _current.getOffset() + (_findWord.length() - 1);", "+              if (len > docLen) len = docLen;", "+            }", "+            else {  // found it", "+              start = _current.getOffset() - (_findWord.length() - 1);", "+              if (start < 0) start = 0;", "+              len = docLen - start;", "+            }", "+            findSpace = _doc.getText(start, len);", "-          else {  // found it", "-            start = _current.getOffset() - (_findWord.length() - 1);", "-            if (start < 0) start = 0;", "-            len = _doc.getLength() - start;", "-          }", "-          findSpace = _doc.getText(start, len);", "+          finally { _doc.releaseReadLock(); }", "-            _current = _doc.createPosition(foundOffset);", "+            _current = _doc.createPosition(foundOffset);  // thread-safe operation on _doc"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8cb66eb05e748f5d6bb9405a60e7976", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/FindReplaceMachine.java", "commitBeforeChange": "14164b6a15fd606e897810fd89f2e7edec0280c4", "commitAfterChange": "52c187d5d51895f0b58a56680e35117f80ff45ef", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "signatureAfterChange": "   private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len)", "diff": ["-      FindResult fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped);", "+", "+      // find next match in _doc", "+      _doc.readLock();", "+      FindResult fr;", "+      try { fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); } ", "+      finally { _doc.readUnlock(); }", "+      ", "-    // no valid match found", "-    return _findWrapped(startDoc, start, len, true);   // last arg is true because searching all docs has wrapped", "+    // No valid match found; perform wrapped search.  _findWrapped assumes readLock is held.", "+    startDoc.readLock();", "+    try { return _findWrapped(startDoc, start, len, true); }  // last arg is true because searching all docs has wrapped", "+    finally { startDoc.readUnlock(); } "]}], "num": 11210}
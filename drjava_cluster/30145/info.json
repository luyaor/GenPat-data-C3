{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14539b038ee0c17a8f74d32d16e8c710", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f4aed2ff2c7a52e524cc3f6d6b336f8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-eclipse/edu/rice/cs/drjava/model/compiler/EclipseCompiler.java", "commitBeforeChange": "2fe669ecac7f016397cbb10e5377e9e8c54b0471", "commitAfterChange": "f6644ed8bacb691af161dd2a81bf7ef2eb6ae97e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r   \r   private Iterable<String> _getOptions(List<? extends File> classPath, List<? extends File> sourcePath, File destination, \r                                        List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "      private Iterable<String> _getOptions(StandardJavaFileManager fileManager,                                        List<? extends File> classPath, List<? extends File> sourcePath, File destination,                                         List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-  \r", "-  private Iterable<String> _getOptions(List<? extends File> classPath, List<? extends File> sourcePath, File destination, \r", "-                                       List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {\r", "-\r", "-    if (bootClassPath == null) { bootClassPath = _defaultBootClassPath; }\r", "-    \r", "-    List<String> options = new ArrayList<String>();\r", "-    for (Map.Entry<String, String> e : CompilerOptions.getOptions(showWarnings).entrySet()) {\r", "-      addOption(options,e.getKey());\r", "-      addOption(options,e.getValue());\r", "-    }\r", "-    \r", "-    //Should be setable some day?\r", "-    addOption(options,\"-g\");\r", "-    \r", "-    if (classPath != null) {\r", "-      addOption(options,\"-classpath\");\r", "-      addOption(options,IOUtil.pathToString(classPath));\r", "-    }\r", "-    if (sourcePath != null) {\r", "-      addOption(options,\"-sourcepath\");\r", "-      addOption(options,IOUtil.pathToString(sourcePath));\r", "-    }\r", "-    if (destination != null) {\r", "-      addOption(options,\"-d\");\r", "-      addOption(options,destination.getPath());\r", "-    }\r", "-    if (bootClassPath != null) {\r", "-      addOption(options,\"-bootclasspath\");\r", "-      addOption(options,IOUtil.pathToString(bootClassPath));\r", "-    }\r", "-    if (sourceVersion != null) {\r", "-      addOption(options,\"-source\");\r", "-      addOption(options,sourceVersion);\r", "-    }\r", "-    if (!showWarnings) {\r", "-      addOption(options,\"-nowarn\");\r", "-    }\r", "-\r", "-    return options;\r", "-  }\r", "+  ", "+  private Iterable<String> _getOptions(StandardJavaFileManager fileManager,", "+                                       List<? extends File> classPath, List<? extends File> sourcePath, File destination, ", "+                                       List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings) {", "+    ", "+//    System.err.println(\"classPath: \"+classPath);", "+//    System.err.println(\"sourcePath: \"+sourcePath);", "+//    System.err.println(\"destination: \"+destination);", "+//    System.err.println(\"bootClassPath: \"+bootClassPath);", "+    ", "+    if (bootClassPath == null) { bootClassPath = _defaultBootClassPath; }", "+    ", "+    List<String> options = new ArrayList<String>();", "+    for (Map.Entry<String, String> e : CompilerOptions.getOptions(showWarnings).entrySet()) {", "+      addOption(options,e.getKey());", "+      addOption(options,e.getValue());", "+    }", "+    ", "+    //Should be setable some day?", "+    addOption(options,\"-g\");", "+    ", "+    if (classPath != null) {", "+      addOption(options,\"-classpath\");", "+      addOption(options,IOUtil.pathToString(classPath));", "+      try {", "+        fileManager.setLocation(StandardLocation.CLASS_PATH, classPath);", "+      }", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }", "+    }", "+    if (sourcePath != null) {", "+      addOption(options,\"-sourcepath\");", "+      addOption(options,IOUtil.pathToString(sourcePath));", "+      try {", "+        fileManager.setLocation(StandardLocation.SOURCE_PATH, sourcePath);", "+      }", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }        ", "+    }", "+    if (destination != null) {", "+      addOption(options,\"-d\");", "+      addOption(options,destination.getPath());", "+      try {", "+        fileManager.setLocation(StandardLocation.CLASS_OUTPUT, IterUtil.asIterable(destination));", "+      }", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }", "+    }", "+    if (bootClassPath != null) {", "+      addOption(options,\"-bootclasspath\");", "+      addOption(options,IOUtil.pathToString(bootClassPath));", "+      try {", "+        fileManager.setLocation(StandardLocation.PLATFORM_CLASS_PATH, bootClassPath);", "+      }", "+      catch(IOException ioe) { /* ignore, just don't set the path */ }", "+    }", "+    if (sourceVersion != null) {", "+      addOption(options,\"-source\");", "+      addOption(options,sourceVersion);", "+    }", "+    if (!showWarnings) {", "+      addOption(options,\"-nowarn\");", "+    }", "+    ", "+    return options;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d12dbd36aa67ac779c3cb3306a9116a9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk7/edu/rice/cs/drjava/model/compiler/Javac170Compiler.java", "commitBeforeChange": "ac40c3972879cd0ae692485b72f8c40bbd1968d9", "commitAfterChange": "e3aa74ce1fa8ce4d59f29e9f6e97ca23385b706a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, \r                                                List<? extends File> sourcePath, File destination, \r                                                List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "signatureAfterChange": "\r   public List<? extends DJError> compile(List<? extends File> files, List<? extends File> classPath, \r                                                List<? extends File> sourcePath, File destination, \r                                                List<? extends File> bootClassPath, String sourceVersion, boolean showWarnings)", "diff": ["-    \r", "-    JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\r", "+\r", "+    // This is the class that javax.tools.ToolProvider.getSystemJavaCompiler() uses.\r", "+    // We create an instance of that class directly, bypassing ToolProvider, because ToolProvider returns null\r", "+    // if DrJava is started with just the JRE, instead of with the JDK, even if tools.jar is later made available\r", "+    // to the class loader.\r", "+    JavaCompiler compiler = null;\r", "+    try {\r", "+      compiler = (JavaCompiler)(Class.forName(\"com.sun.tools.javac.api.JavacTool\").newInstance());\r", "+    }\r", "+    catch(ClassNotFoundException e) {\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + e, false));\r", "+      error.log(e);\r", "+      return errors;\r", "+    }\r", "+    catch(InstantiationException e) {\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + e, false));\r", "+      error.log(e);\r", "+      return errors;\r", "+    }\r", "+    catch(IllegalAccessException e) {\r", "+      errors.addFirst(new DJError(\"Compile exception: \" + e, false));\r", "+      error.log(e);\r", "+      return errors;\r", "+    }\r"]}], "num": 30145}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eecb6a657ea106f34b4992042f1f5f18", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c909c20b0dc59fd2bbe99060ea4cc4a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "b552f36a1d45e65c0515c4425e1954dc75014315", "commitAfterChange": "4f7118cfc181d6dc991cba376f6e7b8942d8b8fc", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "   public void _setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["-    */", "-  public void _setCurrentLocation(int loc) {", "-    int dist = loc - _currentLocation;", "-    move(dist);", "+  public void setCurrentLocation(int loc) {", "+    /** Change the current location of the document.  Identical to _move except that loc is absolute. Only runs in event", "+      * thread.", "+      * @param loc the new absolute location ", "+      */", "+    int dist = loc - _currentLocation;  // _currentLocation and _reduced can be updated asynchronously", "+    _currentLocation = loc;", "+    _reduced.move(dist);   // must call _reduced.move here; this._move changes _currentLocation"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3aff958f0b72719dcdfac22802772b9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractDJDocument.java", "commitBeforeChange": "5497ac60fa563e6e67c580081d99fbd842e52332", "commitAfterChange": "5fa866685226be5aebbebdfba9d7d34d29108e50", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "   public void setCurrentLocation(int loc)", "signatureAfterChange": "   public void setCurrentLocation(int loc)", "diff": ["-   *  prevent _currentLocation from being stale when loc may be stale? */", "+   */", "-    synchronized(_reduced) { // locked because reading _currentLocation is not protected by locking in move", "-      move(loc - _currentLocation);  // sets _currentLocation", "+    readLock();", "+    try {", "+      synchronized(_reduced) { // locked because reading _currentLocation is not protected by locking in move", "+        move(loc - _currentLocation);  // sets _currentLocation", "+      }", "+    finally { readUnlock(); }"]}], "num": 2671}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82c111efac0fd43b35f0d0e1bd9dd80f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4153c8cfb43a3c48a74794535b66d778", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitErrorModelTest.java", "commitBeforeChange": "cfce2bb39ad9cf552e3b892bb419bc9b0e121ae5", "commitAfterChange": "48e9711d768be0e10f630f8284db4c31a0256844", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "signatureAfterChange": "   public void testErrorsArrayInOrder_NOJOIN() throws Exception", "diff": ["-    _m = new JUnitErrorModel(new JUnitError[0], _model, false);", "+    _log.log(\"testErrorArrayInOrder_NOJOIN started\");", "+    final JUnitTestListener listener = new JUnitTestListener();", "-    final File file = new File(_tempDir, \"MonkeyTestFail.java\");", "-    saveFile(doc, new FileSelector(file));", "+    _log.log(\"doc setUp\");", "-    JUnitTestListener listener = new JUnitTestListener();", "-    _model.addListener(listener);", "-    ", "-    testStartCompile(doc);", "-    ", "-    listener.waitCompileDone();", "-    ", "-    if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "-    listener.checkCompileOccurred();", "-    ", "+    Utilities.invokeAndWait(new Runnable() {", "+      public void run() { ", "+        try {", "+          _m = new JUnitErrorModel(new JUnitError[0], _model, false);", "+", "+          final File file = new File(_tempDir, \"MonkeyTestFail.java\");", "+          saveFile(doc, new FileSelector(file));", "+          ", "+          _model.addListener(listener);", "+          ", "+          testStartCompile(doc);", "+          _log.log(\"Compile started\");", "+          ", "+          listener.waitCompileDone();", "+          _log.log(\"Compile done\");", "+          ", "+          if (_model.getCompilerModel().getNumErrors() > 0) fail(\"compile failed: \" + getCompilerErrorString());", "+          listener.checkCompileOccurred();", "+          _log.log(\"Done with first block\");", "+        }", "+        catch(Exception e) { fail(\"The following exception was thrown in the first block of testErrorsArrayInOrder: /n\" + e); }", "+      }", "+    });", "+         ", "-    // Clear document so we can make sure it's written to after startJUnit; ", "-    // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "-    // Perform the clear operation atomically in the event thread.", "+    ", "-        try {", "+        try {     ", "+          // Clear document so we can make sure it's written to after startJUnit; ", "+          // ?? When does the clear operation happen?  How is the timing of this clear operation controlled?", "+          // Performing the clear operation atomically in the event thread.", "+          ", "+          assertEquals(\"Confirm document is empty\", 0, _model.getJUnitModel().getJUnitDocument().getLength());", "+          _log.log(\"JUnitDocument is empty\");", "+        catch(Exception e) { fail(\"The following exception was thrown in testErrorsArrayInOrder: /n\" + e); }", "-    //final TestResult testResults = doc.startJUnit();", "-    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);", "+    // Wait until events triggered by running unit tests have cleared ? (should be done by code above)", "+    Utilities.clearEventQueue();", "+    _log.log(\"Event queue cleared\");", "+    ", "+    //final TestResult testResults = doc.startJUnit();", "+    ", "+    _log.log(\"testErrorArrayInOrder complete\");", "+    //_m = new JUnitErrorModel(doc.getDocument(), \"MonkeyTestFail\", testResults);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b06fdfb419b5a9a9427e2f67b198492c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileSuccessOptionsTest.java", "commitBeforeChange": "4009de7b28d2df87c05fce5746e7b354468d763f", "commitAfterChange": "ef6fbf4282520a8a1b7a89050b6be023e72a81a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileWithJavaAssert()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileWithJavaAssert()     throws BadLocationException, IOException, InterruptedException", "diff": ["-    OpenDefinitionsDocument doc = setupDocument(FOO_WITH_ASSERT);", "-    final File file = tempFile();", "-    doc.saveFile(new FileSelector(file));", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "-    ", "-    // This is a CompileShouldFailListener, so we don't need to wait.", "-    doc.startCompile();", "-", "-    assertCompileErrorsPresent(_name(), true);", "-    listener.checkCompileOccurred();", "-    File compiled = classForJava(file, \"DrJavaTestFoo\");", "-    assertTrue(_name() + \"Class file exists after compile?!\", !compiled.exists());", "-    _model.removeListener(listener);", "-    ", "-    ", "-    // Only run assertions test in 1.4", "-    String version = System.getProperty(\"java.version\");", "-    if ((version != null) && (\"1.4.0\".compareTo(version) <= 0)) {", "-      // Turn on assert support", "-      DrJava.getConfig().setSetting(OptionConstants.JAVAC_ALLOW_ASSERT,", "-                                    Boolean.TRUE);", "+    if(Float.valueOf(System.getProperty(\"java.specification.version\")) < 1.5) {", "+      OpenDefinitionsDocument doc = setupDocument(FOO_WITH_ASSERT);", "+      final File file = tempFile();", "+      doc.saveFile(new FileSelector(file));", "+      CompileShouldFailListener listener = new CompileShouldFailListener();", "+      _model.addListener(listener);", "-      CompileShouldSucceedListener listener2 = new CompileShouldSucceedListener(false);", "-      _model.addListener(listener2);", "+      // This is a CompileShouldFailListener, so we don't need to wait.", "-      if (_model.getCompilerModel().getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "-      _model.removeListener(listener2);", "-      assertCompileErrorsPresent(_name(), false);", "-      listener2.checkCompileOccurred();", "-      // Make sure .class exists", "-      compiled = classForJava(file, \"DrJavaTestFoo\");", "-      assertTrue(_name() + \"Class file doesn't exist after compile\",", "-                 compiled.exists());", "+      assertCompileErrorsPresent(_name(), true);", "+      listener.checkCompileOccurred();", "+      File compiled = classForJava(file, \"DrJavaTestFoo\");", "+      assertTrue(_name() + \"Class file exists after compile?!\", !compiled.exists());", "+      _model.removeListener(listener);", "+      ", "+      ", "+      // Only run assertions test in 1.4", "+      String version = System.getProperty(\"java.version\");", "+      if ((version != null) && (\"1.4.0\".compareTo(version) <= 0)) {", "+        // Turn on assert support", "+        DrJava.getConfig().setSetting(OptionConstants.JAVAC_ALLOW_ASSERT,", "+                                      Boolean.TRUE);", "+        ", "+        CompileShouldSucceedListener listener2 = new CompileShouldSucceedListener(false);", "+        _model.addListener(listener2);", "+        doc.startCompile();", "+        if (_model.getCompilerModel().getNumErrors() > 0) {", "+          fail(\"compile failed: \" + getCompilerErrorString());", "+        }", "+        _model.removeListener(listener2);", "+        assertCompileErrorsPresent(_name(), false);", "+        listener2.checkCompileOccurred();", "+        ", "+        // Make sure .class exists", "+        compiled = classForJava(file, \"DrJavaTestFoo\");", "+        assertTrue(_name() + \"Class file doesn't exist after compile\",", "+                   compiled.exists());", "+      }"]}], "num": 3135}
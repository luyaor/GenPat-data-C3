{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1b505256a4d65ae7c1c6b0ac76a2fcc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06222bae67b026343cf4390aa0be3df9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   synchronized public void compileAll() throws IOException", "signatureAfterChange": "   public void compileAll() throws IOException", "diff": ["-  synchronized public void compileAll() throws IOException {", "+  public void compileAll() throws IOException {", "+    ", "+    boolean isProjActive = _getter.getFileGroupingState().isProjectActive();", "+    ", "-    List<OpenDefinitionsDocument> defDocs =", "-      _getter.getDefinitionsDocuments();", "+    List<OpenDefinitionsDocument> defDocs = _getter.getDefinitionsDocuments();", "-    File buildDir = null;", "-    if (_getter.getFileGroupingState().isProjectActive()) {", "-", "-      // If we're in project mode, filter out only the ", "-      // documents that are in the project and leave out", "-      // the external files.", "-      List<OpenDefinitionsDocument> projectDocs =", "-        new LinkedList<OpenDefinitionsDocument>();", "-    ", "-      for(OpenDefinitionsDocument odd : defDocs){", "-        if(odd.isInProjectPath() || odd.isAuxiliaryFile()){", "-            projectDocs.add(odd);", "-        }", "+    if (isProjActive) {", "+      // If we're in project mode, filter out only the documents that are in the project and leave ", "+      // out the external files.", "+      List<OpenDefinitionsDocument> projectDocs = new LinkedList<OpenDefinitionsDocument>();", "+      ", "+      for (OpenDefinitionsDocument doc : defDocs) {", "+        if (doc.isInProjectPath() || doc.isAuxiliaryFile()) projectDocs.add(doc);", "-", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12b8cf9a4cfebf0f5716ac3a9d89d53c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "73b7f0a42ebcf824c132189e958d58c40bbacf0e", "commitAfterChange": "839683081b0d966fa9fc02dc0e1948fc900d3a55", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "   private void _findAll()", "signatureAfterChange": "   private void _findAll()", "diff": ["+    String title = searchStr;", "+    OpenDefinitionsDocument startDoc = _defPane.getOpenDefDocument();", "+    boolean searchAll = _machine.getSearchAllDocuments();", "+    if (title.length() > 10) { title = title.substring(0,10) + \"...\"; }", "+    title = \"Find: \" + title;", "+    RegionManager<MovingDocumentRegion> rm = _model.createFindResultsManager();", "+    FindResultsPanel panel = _frame.createFindResultsPanel(rm, title, searchStr, searchAll,", "+                                                           new WeakReference<OpenDefinitionsDocument>(startDoc),", "+                                                           this);", "+    findAll(searchStr, searchAll, startDoc, rm, panel);", "+  }", "-    String title = searchStr;", "-    if (title.length() > 10) { title = title.substring(0,10) + \"...\"; }", "-    title = \"Find: \" + title;", "-    ", "-    final RegionManager<MovingDocumentRegion> rm = _model.createFindResultsManager();", "-    final FindResultsPanel panel = _frame.createFindResultsPanel(rm, title);", "-    ", "-    _updateMachine();", "-    final OpenDefinitionsDocument startDoc = _defPane.getOpenDefDocument();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4230ccaba943634d27bf4358246c2ac6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "6e331e9844f73cd6f98ef32e034b0175583aeba8", "commitAfterChange": "6730b2e413a99565d4307ad95e1ac5e98eebdf83", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "   synchronized public void compileAll() throws IOException", "signatureAfterChange": "   synchronized public void compileAll() throws IOException", "diff": ["+    ", "+    List<OpenDefinitionsDocument> defDocs =", "+      _getter.getDefinitionsDocuments();", "+    ", "+    File buildDir = null;", "+    if (_getter.getFileGroupingState().isProjectActive()) {", "+      buildDir = _getter.getFileGroupingState().getBuildDirectory();", "+", "+      // If we're in project mode, filter out only the ", "+      // documents that are in the project and leave out", "+      // the external files.", "+      List<OpenDefinitionsDocument> projectDocs =", "+        new LinkedList<OpenDefinitionsDocument>();", "+    ", "+      for(OpenDefinitionsDocument odd : defDocs){", "+        if(odd.isProjectFile()){", "+            projectDocs.add(odd);", "+        }", "+      }", "+      defDocs = projectDocs;", "+    }", "+", "-    if (_getter.hasModifiedDocuments()) {", "+    if (_hasModifiedFiles(defDocs)) {", "-    if (_getter.hasModifiedDocuments()) {", "+    // check for modified project files, in case they didn't save when prompted", "+    if (_hasModifiedFiles(defDocs)) {", "-      List<OpenDefinitionsDocument> defDocs =", "-        _getter.getDefinitionsDocuments();", "-        _compileFiles(sourceRoots, files);", "+        _compileFiles(sourceRoots, files, buildDir);"]}], "num": 14142}
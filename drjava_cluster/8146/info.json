{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06f020de5aac286c8594ea7101bb1adb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a81c4f2fac0889d95a4ee6b7e0691ea", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/InteractionsPaneTest.java", "commitBeforeChange": "61e5b2f858911ea73a13dba9fbe943d7030fb9fb", "commitAfterChange": "efaccf437175951cd0b6645fd51acf615d54103d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void interpretCurrentInteraction()", "signatureAfterChange": "   public void testClearCurrentInteraction() throws BadLocationException", "diff": ["-  public class TestInteractionsDocument extends AbstractInteractionsDocument {", "-    public void interpretCurrentInteraction() {", "-      fail(\"interpretCurrentInteraction called unexpectedly\");", "-    }", "+   */", "+  public void testClearCurrentInteraction() throws BadLocationException {", "+    _doc.insertString(_doc.getLength(), \"typed text\", _simpleAttributes);", "+    _controller.moveToEnd();", "+    ", "+    _doc.clearCurrentInteraction();", "+    assertEquals(\"Caret is at the prompt after output cleared.\",", "+                 _doc.getPromptPos(),", "+                 _pane.getCaretPosition());", "+    assertEquals(\"Prompt is at the end after output cleared.\",", "+                 _doc.getLength(),", "+                 _doc.getPromptPos());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7891a5a960b99e5418cccf7845e69906", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "4b21424812450d42c0dde2aef3c483c11b298e24", "commitAfterChange": "ede26ceaad5c407d940ac773a5e7f457dc1f5187", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "signatureAfterChange": "     private Type handleEqualityExpression(BinaryExpression node, Lambda2<Object, Object, Object> objectCase,                                           Lambda2<Object, Object, Object>  primitiveCase)", "diff": ["-        if (!ts.isCastable(leftT, rightT) && !ts.isCastable(rightT, leftT)) {", "+        if (ts.isDisjoint(leftT, rightT)) {", "+          setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+            setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));", "+          setErrorStrings(node, ts.userRepresentation(leftT), ts.userRepresentation(rightT));"]}], "num": 8146}
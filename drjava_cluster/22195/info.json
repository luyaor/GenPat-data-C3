{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c89a59e27ef870cfb3a1ac33aa7f0deb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73c9faa76031e4d1e1d78e66fd264acb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "093f33e43dd3de7d97364f410a0a58ca1448a1ce", "commitAfterChange": "51703b3c111cc35e01e35a5e289226f6da1c1962", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 97, "signatureBeforeChange": "               public void testGetSymbolData_Primitive()", "signatureAfterChange": "               public void testGetSymbolData_Primitive()", "diff": ["-      assertEquals(\"should be boolean type\", SymbolData.BOOLEAN_TYPE, _llv._getSymbolData_Primitive(\"boolean\"));", "-      assertEquals(\"should be char type\", SymbolData.CHAR_TYPE, _llv._getSymbolData_Primitive(\"char\"));", "-      assertEquals(\"should be byte type\", SymbolData.BYTE_TYPE, _llv._getSymbolData_Primitive(\"byte\"));", "-      assertEquals(\"should be short type\", SymbolData.SHORT_TYPE, _llv._getSymbolData_Primitive(\"short\"));", "-      assertEquals(\"should be int type\", SymbolData.INT_TYPE, _llv._getSymbolData_Primitive(\"int\"));", "-      assertEquals(\"should be long type\", SymbolData.LONG_TYPE, _llv._getSymbolData_Primitive(\"long\"));", "-      assertEquals(\"should be float type\", SymbolData.FLOAT_TYPE, _llv._getSymbolData_Primitive(\"float\"));", "-      assertEquals(\"should be double type\", SymbolData.DOUBLE_TYPE, _llv._getSymbolData_Primitive(\"double\"));", "-      assertEquals(\"should be void type\", SymbolData.VOID_TYPE, _llv._getSymbolData_Primitive(\"void\"));", "-      assertEquals(\"should be null type\", SymbolData.NULL_TYPE, _llv._getSymbolData_Primitive(\"null\"));", "-      assertEquals(\"should return null--not a primitive\", null, _llv._getSymbolData_Primitive(\"java.lang.String\"));", "+      assertEquals(\"should be boolean type\", SymbolData.BOOLEAN_TYPE, testLLVisitor._getSymbolData_Primitive(\"boolean\"));", "+      assertEquals(\"should be char type\", SymbolData.CHAR_TYPE, testLLVisitor._getSymbolData_Primitive(\"char\"));", "+      assertEquals(\"should be byte type\", SymbolData.BYTE_TYPE, testLLVisitor._getSymbolData_Primitive(\"byte\"));", "+      assertEquals(\"should be short type\", SymbolData.SHORT_TYPE, testLLVisitor._getSymbolData_Primitive(\"short\"));", "+      assertEquals(\"should be int type\", SymbolData.INT_TYPE, testLLVisitor._getSymbolData_Primitive(\"int\"));", "+      assertEquals(\"should be long type\", SymbolData.LONG_TYPE, testLLVisitor._getSymbolData_Primitive(\"long\"));", "+      assertEquals(\"should be float type\", SymbolData.FLOAT_TYPE, testLLVisitor._getSymbolData_Primitive(\"float\"));", "+      assertEquals(\"should be double type\", SymbolData.DOUBLE_TYPE, testLLVisitor._getSymbolData_Primitive(\"double\"));", "+      assertEquals(\"should be void type\", SymbolData.VOID_TYPE, testLLVisitor._getSymbolData_Primitive(\"void\"));", "+      assertEquals(\"should be null type\", SymbolData.NULL_TYPE, testLLVisitor._getSymbolData_Primitive(\"null\"));", "+      assertEquals(\"should return null--not a primitive\", null, testLLVisitor._getSymbolData_Primitive(\"java.lang.String\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e21cefbd43016320ca37e4269d4d7cc3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 102, "signatureBeforeChange": "               public void testGetSymbolData_Primitive()", "signatureAfterChange": "               public void testGetSymbolData_Primitive()", "diff": ["-                   testLLVisitor._getSymbolData_Primitive(\"boolean\"));", "-      assertEquals(\"should be char type\", SymbolData.CHAR_TYPE, testLLVisitor._getSymbolData_Primitive(\"char\"));", "-      assertEquals(\"should be byte type\", SymbolData.BYTE_TYPE, testLLVisitor._getSymbolData_Primitive(\"byte\"));", "-      assertEquals(\"should be short type\", SymbolData.SHORT_TYPE, testLLVisitor._getSymbolData_Primitive(\"short\"));", "-      assertEquals(\"should be int type\", SymbolData.INT_TYPE, testLLVisitor._getSymbolData_Primitive(\"int\"));", "-      assertEquals(\"should be long type\", SymbolData.LONG_TYPE, testLLVisitor._getSymbolData_Primitive(\"long\"));", "-      assertEquals(\"should be float type\", SymbolData.FLOAT_TYPE, testLLVisitor._getSymbolData_Primitive(\"float\"));", "-      assertEquals(\"should be double type\", SymbolData.DOUBLE_TYPE, testLLVisitor._getSymbolData_Primitive(\"double\"));", "-      assertEquals(\"should be void type\", SymbolData.VOID_TYPE, testLLVisitor._getSymbolData_Primitive(\"void\"));", "-      assertEquals(\"should be null type\", SymbolData.NULL_TYPE, testLLVisitor._getSymbolData_Primitive(\"null\"));", "+                   LanguageLevelConverter._getPrimitiveSymbolData(\"boolean\"));", "+      assertEquals(\"should be char type\", SymbolData.CHAR_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"char\"));", "+      assertEquals(\"should be byte type\", SymbolData.BYTE_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"byte\"));", "+      assertEquals(\"should be short type\", SymbolData.SHORT_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"short\"));", "+      assertEquals(\"should be int type\", SymbolData.INT_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"int\"));", "+      assertEquals(\"should be long type\", SymbolData.LONG_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"long\"));", "+      assertEquals(\"should be float type\", SymbolData.FLOAT_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"float\"));", "+      assertEquals(\"should be double type\", SymbolData.DOUBLE_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"double\"));", "+      assertEquals(\"should be void type\", SymbolData.VOID_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"void\"));", "+      assertEquals(\"should be null type\", SymbolData.NULL_TYPE, LanguageLevelConverter._getPrimitiveSymbolData(\"null\"));", "-                   testLLVisitor._getSymbolData_Primitive(\"java.lang.String\"));", "+                   LanguageLevelConverter._getPrimitiveSymbolData(\"java.lang.String\"));"]}], "num": 22195}
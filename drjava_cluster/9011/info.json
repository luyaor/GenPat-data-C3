{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02a175a2d8dfa1ce06c3fbd5a0111081", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "489cddea489c15f4dde5f305ff6e611c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "b125d4a35b225e9cc738f569b062e7e7bd7cf031", "commitAfterChange": "9ce155a1f3e34352032d821032cb2dc70024460f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "diff": ["+        ", "+        // A hack to allow declarations without types: (TODO: fix this)", "+        if (n instanceof SimpleAssignExpression) {", "+          SimpleAssignExpression assign = (SimpleAssignExpression) n;", "+          if (assign.getLeftExpression() instanceof AmbiguousName) {", "+            AmbiguousName ambigName = (AmbiguousName) assign.getLeftExpression();", "+            if (ambigName.getIdentifiers().size() == 1) {", "+              String name = ambigName.getRepresentation();", "+              if (!newContext.variableExists(name, _opt.typeSystem())) {", "+                SourceInfo si = n.getSourceInfo();", "+                n = new VariableDeclaration(false, null, name, assign.getRightExpression(),", "+                                            si.getFilename(), si.getStartLine(), si.getStartColumn(),", "+                                            si.getEndLine(), si.getEndColumn());", "+                assign.setProperty(\"assignmentAsDeclaration\", n);", "+              }", "+            }", "+          }", "+        }", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd8ea64568566cc658af03e9bfd54898", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/Interpreter.java", "commitBeforeChange": "15e62c4c6cc17bdc9cb202b4c5c58df163a8f8cf", "commitAfterChange": "6b388fb1877469cd91350296fabdf9fe8d522b74", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "signatureAfterChange": "      private TypeContext typeCheck(Iterable<Node> tree) throws InterpreterException", "diff": ["-        ", "-        // A hack to allow declarations without types: (TODO: fix this)", "-        if (n instanceof SimpleAssignExpression) {", "-          SimpleAssignExpression assign = (SimpleAssignExpression) n;", "-          if (assign.getLeftExpression() instanceof AmbiguousName) {", "-            AmbiguousName ambigName = (AmbiguousName) assign.getLeftExpression();", "-            if (ambigName.getIdentifiers().size() == 1) {", "-              String name = ambigName.getRepresentation();", "-              if (!newContext.variableExists(name, _opt.typeSystem())) {", "-                SourceInfo si = n.getSourceInfo();", "-                n = new VariableDeclaration(false, null, name, assign.getRightExpression(),", "-                                            si.getFilename(), si.getStartLine(), si.getStartColumn(),", "-                                            si.getEndLine(), si.getEndColumn());", "-                assign.setProperty(\"assignmentAsDeclaration\", n);", "-              }", "-            }", "-          }", "-        }", "-        ", "-        if (n instanceof Expression) { n.acceptVisitor(new ExpressionChecker(newContext, _opt)); }", "-        else { newContext = n.acceptVisitor(new StatementChecker(newContext, _opt)); }", "+        newContext = n.acceptVisitor(new StatementChecker(newContext, _opt));"]}], "num": 9011}
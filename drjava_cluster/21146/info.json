{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afd92e6faf5eea9c08c9be85c515fa93", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d33e21983cc7ccb4faa0dadbf06b17", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DrJavaErrorWindow.java", "commitBeforeChange": "b55243374fd344a99b71e152a523bbe523612b7b", "commitAfterChange": "21f40abc1b1e49110febfbe137665f4ad897576b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private void updateErrorInfo()", "signatureAfterChange": "   private void updateErrorInfo()", "diff": ["-      b.append(\"\\n\\nSystem Properties:\\n\");", "-      b.append(\"DrJava Version \");", "-      b.append(edu.rice.cs.drjava.Version.getBuildTimeString());", "-      b.append('\\n');", "-      java.util.Properties props = System.getProperties();", "-      int size = props.size();", "-      java.util.Iterator entries = props.entrySet().iterator();", "-      while(entries.hasNext()) {", "-        java.util.Map.Entry entry = (java.util.Map.Entry)entries.next();", "-        b.append(entry.getKey());", "-        b.append(\" = \");", "-        if (entry.getKey().equals(\"line.separator\")) {", "-          b.append(\"\\\"\");", "-          String ls = (String)entry.getValue();", "-          for(int i=0; i<ls.length(); ++i) {", "-            int ch = ls.charAt(i);", "-            b.append(\"\\\\u\");", "-            String hexString = \"0000\" + Integer.toHexString(ch);", "-            b.append(hexString.substring(hexString.length()-4));", "-          }", "-          b.append(\"\\\"\");", "-        }", "-        else {", "-          b.append(entry.getValue());", "-        }", "-        b.append('\\n');", "-      }", "-      b.append('\\n');", "-      ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-      try {", "-        DrJava.getConfig().saveConfiguration(baos, \"DrJava configuration file\");", "-        b.append(baos.toString());", "-      }", "-      catch(java.io.IOException ioe) {", "-        b.append(\"IOException when trying to print DrJava configuration file\");", "-      }", "-      ", "-      b.append(\"\\n\\nUsed memory: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory()));", "-      b.append(\"\\nFree memory: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().freeMemory()));", "-      b.append(\"\\nTotal memory: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()));", "-      b.append(\"\\nTotal memory can expand to: about \");", "-      b.append(StringOps.memSizeToString(Runtime.getRuntime().maxMemory()));", "+      b.append(getSystemAndDrJavaInfo());", "-      // filter out user.dir, user.home and user.name", "-      String infoText = b.toString();", "-", "-      String userHome = System.getProperty(\"user.home\");", "-      String anonUserHome = \"<anonymized user.home>\";", "-      infoText = replaceString(infoText, userHome, anonUserHome);", "-      ", "-      String userDir = System.getProperty(\"user.dir\");", "-      String anonUserDir = \"<anonymized user.dir>\";", "-      infoText = replaceString(infoText, userDir, anonUserDir);", "-      ", "-      String userName = System.getProperty(\"user.name\");", "-      String anonUserName = \"<anonymized user.name>\";", "-      infoText = replaceString(infoText, userName, anonUserName);", "-      ", "-      _stackTrace.setText(infoText);", "+      _stackTrace.setText(b.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536a36aa296fd89327f19287c8e28a6a", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/InterpreterJVM.java", "commitBeforeChange": "a30a5503c4bed745d3bf75a4b449d026f5c00795", "commitAfterChange": "18853ae3d062d9694905fb3ffaa507db78319f52", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 10, "signatureBeforeChange": "   public String getVariableType(String var)", "signatureAfterChange": "   public Object[] getVariableValue(String var)", "diff": ["+  public Object[] getVariableValue(String var) {", "+    Pair<Object,String>[] arr = getVariable(var);", "+    if (arr.length==0) return new Object[0];", "+    else return new Object[] { arr[0].first() };", "+  }", "-    */", "-  public String getVariableType(String var) {", "-    Pair<TypeContext, RuntimeBindings> env = _environments.get(_activeInterpreter.first());", "-    if (env == null) { return \"\"; }", "-    DJClass djThis = env.first().getThis();", "-    if (djThis == null) { return \"<unknown>\"; }", "-    Class<?> thisC = djThis.load();", "-    Object thisO = env.second().getThis(djThis);", "-    Pair<Boolean,Class<?>> validAndType = getValidFieldType(var, thisC, thisO);", "-    if (!validAndType.first()) {", "-      // not a field, may be a local variable", "-      // TODO: implement this", "-      return \"\";", "-    }", "-    Class<?> c = validAndType.second();", "-    ", "-    // print the right number of [] for each level of arrays", "-    // we can't distinguish primitive types from their boxed types right now", "-    if (c.equals(Byte.class))      { return \"byte\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); } ", "-    if (c.equals(Short.class))     { return \"short\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Integer.class))   { return \"int\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Long.class))      { return \"long\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Float.class))     { return \"float\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Double.class))    { return \"double\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Boolean.class))   { return \"boolean\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    if (c.equals(Character.class)) { return \"char\"+sb.toString()+\" or \"+c.getSimpleName()+sb.toString(); }", "-    else return c.getName()+sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c871ff5c780638a880e03b4ad3d80132", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPaneTest.java", "commitBeforeChange": "7f5ff64d986e80db8fa3ceeb1048b991af6a4ea0", "commitAfterChange": "6b936f625ceea21472b90559f34694154e802e14", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "signatureAfterChange": "      public void testDocumentPaneMemoryLeak()  throws InterruptedException, IOException", "diff": ["+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d1.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d1,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d2.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d2,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d3.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d3,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d4.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d4,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d5.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d5,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "+//    try {", "+//      java.lang.reflect.Field fTimeStamp = d6.getClass().getSuperclass().getDeclaredField(\"_timestamp\");", "+//      fTimeStamp.setAccessible(true);", "+//      fTimeStamp.setLong(d6,System.identityHashCode(d1));", "+//    } catch(Exception e) { throw new RuntimeException(e); }", "-    StringBuilder sbIdHashCodes = new StringBuilder();", "-    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "-    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "-    sbIdHashCodes.append(\"p2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "-    sbIdHashCodes.append(\"p3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "-    sbIdHashCodes.append(\"p4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "-    sbIdHashCodes.append(\"p5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "-    sbIdHashCodes.append(\"p6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "-    sbIdHashCodes.append(\"d1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "-    sbIdHashCodes.append(\"d2     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "-    sbIdHashCodes.append(\"d3     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "-    sbIdHashCodes.append(\"d4     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "-    sbIdHashCodes.append(\"d5     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "-    sbIdHashCodes.append(\"d6     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "-", "+//    StringBuilder sbIdHashCodes = new StringBuilder();", "+//    sbIdHashCodes.append(\"_frame = \"+_frame.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+//    sbIdHashCodes.append(\"_model = \"+_model.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(_frame))+\"\\n\");", "+//    sbIdHashCodes.append(\"p1     = \"+p1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p1))+\"\\n\");", "+//    sbIdHashCodes.append(\"p2     = \"+p2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p2))+\"\\n\");", "+//    sbIdHashCodes.append(\"p3     = \"+p3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p3))+\"\\n\");", "+//    sbIdHashCodes.append(\"p4     = \"+p4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p4))+\"\\n\");", "+//    sbIdHashCodes.append(\"p5     = \"+p5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p5))+\"\\n\");", "+//    sbIdHashCodes.append(\"p6     = \"+p6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(p6))+\"\\n\");", "+//    sbIdHashCodes.append(\"d1     = \"+d1.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d1))+\"\\n\");", "+//    sbIdHashCodes.append(\"d2     = \"+d2.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d2))+\"\\n\");", "+//    sbIdHashCodes.append(\"d3     = \"+d3.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d3))+\"\\n\");", "+//    sbIdHashCodes.append(\"d4     = \"+d4.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d4))+\"\\n\");", "+//    sbIdHashCodes.append(\"d5     = \"+d5.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d5))+\"\\n\");", "+//    sbIdHashCodes.append(\"d6     = \"+d6.getClass().getName()+\"@0x\"+Integer.toHexString(System.identityHashCode(d6)));", "-      LOG.log(sbIdHashCodes.toString());", "+//      LOG.log(sbIdHashCodes.toString());"]}], "num": 21146}
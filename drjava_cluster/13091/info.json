{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d67f65d93549a9170b425d235db4595a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d00197457c907a1f0994350b169e6c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "2df95ba3878ef76250864f343b7eb7cab010d660", "commitAfterChange": "be44bac66621552ed24a3cc6153888ca3b23f74f", "methodNumberBeforeChange": 247, "methodNumberAfterChange": 251, "signatureBeforeChange": "   public synchronized void addToBrowserHistory()", "signatureAfterChange": "   public synchronized void addToBrowserHistory()", "diff": ["+    int startPos = 0;  // required by javac", "+    int endPos = 0;    // required by javac", "+    File file = null;  // required by javac", "+    ", "-        final Position startPos = doc.createPosition(doc.getCaretPosition());", "-        final Position endPos = doc.createPosition(doc.getLineEndPos(doc.getCaretPosition()));", "-        getBrowserHistoryManager().addRegion(new SimpleDocumentRegion(doc, doc.getFile(), startPos.getOffset(), endPos.getOffset()));", "+        startPos = doc.createPosition(doc.getCaretPosition()).getOffset();", "+        endPos = doc.createPosition(doc.getLineEndPos(doc.getCaretPosition())).getOffset();", "+        file = doc.getFile();", "+      ", "+      getBrowserHistoryManager().addRegion(new SimpleDocumentRegion(doc, file, startPos, endPos));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58c00a88102f7be58f4b47b569cc62e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/JUnitTestManager.java", "commitBeforeChange": "25b42c6ab8532332033323c9856bcd81aff002d8", "commitAfterChange": "4e9024f79382344df7a15499ea8826062a420a5f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,                                      boolean isError, List<File> files)", "signatureAfterChange": "   private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files)", "diff": ["-  private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames,", "-                                     boolean isError, List<File> files) {", "+  private JUnitError _makeJUnitError(TestFailure failure, List<String> classNames, boolean isError, List<File> files) {", "-    /**", "-     * junit can come back with a string in two different formats:", "-     * so we'll parse both formats, and then decide which one to use", "-     */", "+    /** junit can return a string in two different formats; we parse both formats, and then decide which one to use. */", "-//    String ps = System.getProperty(\"file.separator\");", "-//    // replace periods with the System's file separator", "-//    className = StringOps.replace(className, \".\", ps);", "-//", "-//    // crop off the $ if there is one and anything after it", "-//    int indexOfDollar = className.indexOf('$');", "-//    if (indexOfDollar > -1) {", "-//      className = className.substring(0, indexOfDollar);", "-//    }", "-//", "-//    String filename = className + \".java\";", "-", "-    /**", "-     * if the classname is not in the stacktrace, then the test that", "-     * failed was inherited by a superclass. let's look for that classname", "+    /** If the classname is not in the stacktrace, then the test that failed was inherited from a superclass. let's look", "+     *  for that classname", "-      return new JUnitError(new File(\"nofile\"), 0,  //lineNum, ", "-                          0, exception, !isFailure, testName, className, stackTrace);", "+      return new JUnitError(new File(\"nofile\"), 0, 0, exception, !isFailure, testName, className, stackTrace);", "-    //The conditional has been added because of the augmented code in the .dj0 files - it causes the error to be highlighted on the wrong line", "-    //At the elementary level it should always be off by one", "-    //NOTE: this presupposes that ", "-    return new JUnitError(file, (file.getName().endsWith(\".dj0\") ? lineNum-1 : lineNum),  //lineNum, ", "-                          0, exception, !isFailure, testName, className, stackTrace);", "+    // The code augmentation for elementary and intermediate level files causes the error to be highlighted on", "+    // the wrong line.  The following code adjusts for this discrepancy.", "+    String name = file.getName();", "+    int adjLineNum;", "+    if (name.endsWith(\".dj0\") || name.endsWith(\".dj0\")) adjLineNum = lineNum - 1;", "+    else adjLineNum = lineNum;", "+    ", "+    return new JUnitError(file, adjLineNum, 0, exception, !isFailure, testName, className, stackTrace);"]}], "num": 13091}
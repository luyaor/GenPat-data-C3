{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "434b7e8b7d1bdcb88f48ade70287c4c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a8897125f69b2eed472887bc3917aa5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/DefaultGlobalModel.java", "commitBeforeChange": "e64e0f2febfc163cfb04eb35ce1134673166ab50", "commitAfterChange": "71b4e72a1b4feef5a2621bd09e829e0108d8d893", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "   public synchronized void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "diff": ["-  public synchronized void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info) ", "+  public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info) ", "-//    String base = filename.substring(0, filename.lastIndexOf(File.separator) + 1);", "-    Vector<File> auxFileVector = new Vector<File>();", "-    Iterator<OpenDefinitionsDocument> odds = _documentsRepos.valuesIterator();", "-    while(odds.hasNext()){", "-      OpenDefinitionsDocument doc = odds.next();", "-      ", "-      ", "-      if (!doc.isUntitled() ) {", "-        // could not use doc.isInProjectPath because we may be in flat file view which returns false", "-        String projectPath = new File(filename).getParentFile().getCanonicalPath() + File.separator;", "-        String filePath = doc.getFile().getParentFile().getCanonicalPath() + File.separator;", "-        if (filePath.startsWith(projectPath)){", "-          DocumentInfoGetter g = info.get(doc);", "-          builder.addSourceFile(g);", "-          srcFileVector.add(g.getFile());", "-        }else if(doc.isAuxiliaryFile()){", "-          DocumentInfoGetter g = info.get(doc);", "-          builder.addAuxiliaryFile(g);", "-          auxFileVector.add(g.getFile());", "+    LinkedList<File> auxFileList = new LinkedList<File>();", "+    ", "+    synchronized (_documentsRepos) { ", "+      for (OpenDefinitionsDocument doc: _documentsRepos.values()) {", "+        if (!doc.isUntitled()) {", "+          // could not use doc.isInProjectPath because we may be in flat file view which returns false", "+          String projectPath = new File(filename).getParentFile().getCanonicalPath() + File.separator;", "+          String filePath = doc.getFile().getParentFile().getCanonicalPath() + File.separator;", "+          if (filePath.startsWith(projectPath)){", "+            DocumentInfoGetter g = info.get(doc);", "+            builder.addSourceFile(g);", "+            srcFileVector.add(g.getFile());", "+          }", "+          else if (doc.isAuxiliaryFile()) {", "+            DocumentInfoGetter g = info.get(doc);", "+            builder.addAuxiliaryFile(g);", "+            auxFileList.add(g.getFile());", "+          }", "-", "+      ", "+      ", "-      for (String s : paths) {", "-        builder.addCollapsedPath(s);", "-      }", "+      for (String s : paths) { builder.addCollapsedPath(s); }", "-    for(int i = 0; i<currentclasspaths.size(); i++){", "-      builder.addClasspathFile(currentclasspaths.get(i));", "-    }", "+    for (File f: currentclasspaths) { builder.addClasspathFile(f); }", "-    File f = getBuildDirectory();", "-    //System.out.println(f);", "-    if(f != null)", "-      builder.setBuildDirectory(f);", "+    File d = getBuildDirectory();", "+    if (d != null) builder.setBuildDirectory(d);", "-    //System.out.println(f);", "-    if(mainClass != null){", "-      builder.setMainClass(mainClass);", "-    }", "+    if (mainClass != null) builder.setMainClass(mainClass);", "-", "-  ", "+    ", "-    _auxiliaryFiles.clear();", "-    for(File file: auxFileVector){", "-      _auxiliaryFiles.add(file);", "+    synchronized (_auxiliaryFiles) {", "+      _auxiliaryFiles = auxFileList;", "-    setFileGroupingState(_makeProjectFileGroupingState(mainClass, f, new File(filename), srcFiles));", "+    setFileGroupingState(_makeProjectFileGroupingState(mainClass, d, new File(filename), srcFiles));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "584503c0b66ade1b0eaa10d1d7d50972", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/AbstractGlobalModel.java", "commitBeforeChange": "b555b0cfcc7bbb9f082899ce815305f8a985343e", "commitAfterChange": "aafaf7b848d738e58eee48a6cbc4b800c8027685", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": "   public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info)      throws IOException", "signatureAfterChange": "   public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info)      throws IOException", "diff": ["-  public void saveProject(String filename, Hashtable<OpenDefinitionsDocument,DocumentInfoGetter> info) ", "+   */", "+  public void saveProject(File file, Hashtable<OpenDefinitionsDocument, DocumentInfoGetter> info) ", "-    ProjectFileBuilder builder = new ProjectFileBuilder(filename);", "+    ProjectProfile builder = new ProjectProfile(file);", "-      if (! doc.isUntitled()) {", "-        // could not use doc.isInProjectPath because we may be in flat file view which returns false", "-        String projectPath = new File(filename).getParentFile().getCanonicalPath() + File.separator;", "-        String filePath = doc.getFile().getParentFile().getCanonicalPath() + File.separator;", "-        if (filePath.startsWith(projectPath)) {", "-          DocumentInfoGetter g = info.get(doc);", "-          builder.addSourceFile(g);", "-          srcFileList.add(g.getFile());", "-        }", "-        else if (doc.isAuxiliaryFile()) {", "-          DocumentInfoGetter g = info.get(doc);", "-          builder.addAuxiliaryFile(g);", "-          auxFileList.add(g.getFile());", "-        }", "+      if (doc.isInProjectPath()) {", "+        DocumentInfoGetter g = info.get(doc);", "+        builder.addSourceFile(g);", "+        srcFileList.add(g.getFile());", "+      }", "+      else if (doc.isAuxiliaryFile()) {", "+        DocumentInfoGetter g = info.get(doc);", "+        builder.addAuxiliaryFile(g);", "+        auxFileList.add(g.getFile());", "-    // add classpath info", "-//    Vector<File> currentclasspaths = DrJava.getConfig().getSetting(OptionConstants.EXTRA_CLASSPATH);", "-//    for (File f: currentclasspaths) { builder.addClasspathFile(f); }", "-    // New behavior: only save project-specific classpaths.", "-    } else {", "-      //System.err.println(\"Project ClasspathVector is null!\");", "-    }", "+    } ", "+//    else System.err.println(\"Project ClasspathVector is null!\");", "-    File wd = getRawWorkingDirectory();  // the value of WORKING_DIRECTORY to be stored in the project", "-    if (wd != null) builder.setWorkingDirectory(wd);", "+    File wd = getWorkingDirectory();  // the value of WORKING_DIRECTORY to be stored in the project", "+    if (wd != null && bd != FileOption.NULL_FILE) builder.setWorkingDirectory(wd);", "-    setFileGroupingState(makeProjectFileGroupingState(mainClass, bd, wd, new File(filename), srcFiles, exCp));", "+    setFileGroupingState(makeProjectFileGroupingState(mainClass, bd, wd, file, srcFiles, exCp));"]}], "num": 3637}
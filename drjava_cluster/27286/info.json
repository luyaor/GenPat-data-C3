{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2605236c46a568dabe43861428386cd8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c96d11ba8c8736e85d5d6a0994eeba8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r   public void testEmptyFileNoAction()", "signatureAfterChange": "   public void testEmptyFileNoAction()", "diff": ["-   */\r", "-  public void testEmptyFileNoAction() {\r", "-    directory = new File(directory, \"emptyFile\");\r", "-    File[] files = new File[]{ new File(directory, \"EmptyFile.dj0\")};\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(files);\r", "-    \r", "-    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-    assertEquals(\"should be no visitor exceptions\", 0, result.getSecond().size());\r", "-    \r", "-    assertFalse(\"Should be no .java file\", (new File(directory, \"EmptyFile.java\")).exists());\r", "-    \r", "-    \r", "-    \r", "-  }\r", "+   */", "+  public void testEmptyFileNoAction() {", "+    directory = new File(directory, \"emptyFile\");", "+    File[] files = new File[]{ new File(directory, \"EmptyFile.dj0\")};", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+    assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+    assertEquals(\"should be no visitor exceptions\", 0, result.getSecond().size());", "+    ", "+    assertFalse(\"Should be no .java file\", (new File(directory, \"EmptyFile.java\")).exists());", "+    ", "+    ", "+    ", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c75c60bac3b5074e23726edc9c352585", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelConverter.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r   public static void main(String[] args)", "signatureAfterChange": "   public static void main(String[] args)", "diff": ["-  /**Do a conversion from the command line, to allow quick testing*/\r", "-  public static void main(String[] args) {\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.CURRENT);\r", "-    File[] files = new File[args.length];\r", "-    for (int i = 0; i < args.length; i++) {\r", "-      files[i] = new File(args[i]);\r", "-    }\r", "-    \r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result = \r", "-        llc.convert(files);\r", "-    System.out.println(result.getFirst().size() + result.getSecond().size() + \" errors.\");\r", "-    for(JExprParseException p : result.getFirst()) {\r", "-      System.out.println(p);\r", "-    }\r", "-    for(Pair<String, JExpressionIF> p : result.getSecond()) {\r", "-      System.out.println(p.getFirst() + \" \" + p.getSecond().getSourceInfo());\r", "-    }\r", "-  }\r", "+  /**Do a conversion from the command line, to allow quick testing*/", "+  public static void main(String[] args) {", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    File[] files = new File[args.length];", "+    for (int i = 0; i < args.length; i++) {", "+      files[i] = new File(args[i]);", "+    }", "+    ", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result = ", "+        llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    System.out.println(result.getFirst().size() + result.getSecond().size() + \" errors.\");", "+    for(JExprParseException p : result.getFirst()) {", "+      System.out.println(p);", "+    }", "+    for(Pair<String, JExpressionIF> p : result.getSecond()) {", "+      System.out.println(p.getFirst() + \" \" + p.getSecond().getSourceInfo());", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f757305edd8f8ffb6c31d94aa983b62e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ElementaryLevelTest.java", "commitBeforeChange": "4cc63aff8a22c85ad1d78de9f4e0b9395e7d4e72", "commitAfterChange": "e330f3abbead97d3e3ac8751976bab81936096c2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r   public void testOrderMatters()", "signatureAfterChange": "   public void testOrderMatters()", "diff": ["-  /*Make sure that successful compilation is not dependant on visiting the file with no dependencies first.*/\r", "-  public void testOrderMatters() {\r", "-    directory = new File(directory, \"orderMatters\");\r", "-    File[] files = new File[]{ new File(directory, \"Empty.dj0\"), new File(directory, \"List.dj0\"), new File(directory, \"NonEmpty.dj0\") };\r", "-    LanguageLevelConverter llc = new LanguageLevelConverter(JavaVersion.JAVA_5);\r", "-    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;\r", "-    result = llc.convert(files);\r", "-    \r", "-      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());\r", "-      assertEquals(\"should be 1 visitor exception\", 1, result.getSecond().size());\r", "-      assertEquals(\"the error message should be correct\", \"Could not resolve symbol f\", result.getSecond().getFirst().getFirst());\r", "-    \r", "-  }\r", "+  /*Make sure that successful compilation is not dependant on visiting the file with no dependencies first.*/", "+  public void testOrderMatters() {", "+    directory = new File(directory, \"orderMatters\");", "+    File[] files = new File[]{ new File(directory, \"Empty.dj0\"), new File(directory, \"List.dj0\"), new File(directory, \"NonEmpty.dj0\") };", "+    LanguageLevelConverter llc = new LanguageLevelConverter();", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> result;", "+    result = llc.convert(files, new Options(JavaVersion.JAVA_5, IterUtil.<File>empty()));", "+    ", "+      assertEquals(\"should be no parse exceptions\", new LinkedList<JExprParseException>(), result.getFirst());", "+      assertEquals(\"should be 1 visitor exception\", 1, result.getSecond().size());", "+      assertEquals(\"the error message should be correct\", \"Could not resolve symbol f\", result.getSecond().getFirst().getFirst());", "+    ", "+  }"]}], "num": 27286}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "720bd48af7d43fc8e0214f9d270f6349", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b482e80041f2ad5fe710f28819f6e2d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtilTest.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "         public void testComputeInProcess()", "signatureAfterChange": "         public void testComputeInProcess()", "diff": ["+    debug.logStart();", "+    ", "-      if (e.getCause() instanceof NotSerializableException) { /* expected */ }", "-      else { throw e; }", "+      assertTrue(e.getCause() instanceof WrappedException); // wrapped once by the task implementation, once by value()", "+      assertTrue(e.getCause().getCause() instanceof NotSerializableException);", "-      if (e.getCause() instanceof InvocationTargetException && e.getCause().getCause() instanceof RuntimeException) {", "-        assertEquals(\"done\", e.getCause().getCause().getMessage());", "-      }", "-      else { throw e; }", "+      assertTrue(e.getCause() instanceof ExecutionException);", "+      assertTrue(e.getCause().getCause() instanceof RuntimeException);", "+      assertEquals(\"done\", e.getCause().getCause().getMessage());", "+    ", "+    debug.logEnd();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c6a64f588884089bea53fe4c22fc04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/swing/SwingWorker.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public final T get() throws InterruptedException, InvocationTargetException", "signatureAfterChange": "   protected final void doStop()", "diff": ["-  public final T get() throws InterruptedException, InvocationTargetException {", "-    if (_cancelled) { throw new IllegalStateException(\"Task was cancelled\"); }", "-    try { return _controller.value(); }", "-    catch (WrappedException e) {", "-      Throwable cause = e.getCause();", "-      if (cause instanceof InterruptedException) {throw (InterruptedException) cause; }", "-      else if (cause instanceof InvocationTargetException && cause.getCause() != null) {", "-        // The task wrapped the exception, so we must unwrap it", "-        throw new InvocationTargetException(cause.getCause());", "-      }", "-      else { throw e; }", "+  protected final void doPause() { _continueMonitor.reset(); }", "+  protected final void doStop() { _workerThread.interrupt(); }"]}], "num": 26628}
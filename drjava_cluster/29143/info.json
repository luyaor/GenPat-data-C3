{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bad7d1accfa7b54ece28891c8c1b6eec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2777f3871f6a0ee760a5f0d809c5720b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/MethodDeclaration.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public MethodDeclaration(ModifierSet mods, TypeName type, String name,                            List<FormalParameter> params, List<? extends ReferenceTypeName> excepts, BlockStatement body,                            SourceInfo si)", "signatureAfterChange": "   public MethodDeclaration(ModifierSet mods, Option<List<TypeParameter>> tparams, TypeName type, String name,                            List<FormalParameter> params, List<? extends ReferenceTypeName> excepts, BlockStatement body)", "diff": ["+   */", "+  public MethodDeclaration(ModifierSet mods, Option<List<TypeParameter>> tparams, TypeName type, String name,", "+                           List<FormalParameter> params, List<? extends ReferenceTypeName> excepts, BlockStatement body) {", "+    this(mods, tparams, type, name, params, excepts, body, SourceInfo.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30dbde32b4ce0131b095f884ce5d1006", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/tree/ConstructorDeclaration.java", "commitBeforeChange": "39e2920d14ed264a839ccdea3abc08c70e2f3686", "commitAfterChange": "a19132005c69f1e1c3d188a02393d88193cf6dde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public ConstructorDeclaration(ModifierSet mods, String name,                                 List<FormalParameter> params, List<? extends ReferenceTypeName> excepts,                                 ConstructorCall eci, List<Node> stmts,                                 SourceInfo si)", "signatureAfterChange": "   public ConstructorDeclaration(ModifierSet mods, Option<List<TypeParameter>> tparams, String name,                                 List<FormalParameter> params, List<? extends ReferenceTypeName> excepts,                                 ConstructorCall eci, List<Node> stmts)", "diff": ["+   */", "+  public ConstructorDeclaration(ModifierSet mods, Option<List<TypeParameter>> tparams, String name,", "+                                List<FormalParameter> params, List<? extends ReferenceTypeName> excepts,", "+                                ConstructorCall eci, List<Node> stmts) {", "+    this(mods, tparams, name, params, excepts, eci, stmts, SourceInfo.NONE);", "-    if (name == null)    throw new IllegalArgumentException(\"name == null\");", "-    if (params == null)  throw new IllegalArgumentException(\"params == null\");", "-    if (excepts == null) throw new IllegalArgumentException(\"excepts == null\");", "-    if (stmts == null)   throw new IllegalArgumentException(\"stmts == null\");"]}], "num": 29143}
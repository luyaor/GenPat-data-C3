{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca659dd75d0fc3e9dc1dcc64ac7269bc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7aa5d7dc7bae615f947b1a64610c15", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/newjvm/SlaveJVMRunner.java", "commitBeforeChange": "3ae33096a45a4dc4990b95b1565bd0aeaf9084da", "commitAfterChange": "e69a4c60c625d52f9ba6a18669f0f6846846e463", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    private static SlaveRemote _getInstance(Class clazz) throws Exception", "signatureAfterChange": "    private static AbstractSlaveJVM _getInstance(Class clazz) throws Exception", "diff": ["-  private static SlaveRemote _getInstance(Class clazz) throws Exception {", "-    try { return (SlaveRemote) clazz.getField(\"ONLY\").get(null); }", "-    catch (Throwable t) { return (SlaveRemote) clazz.newInstance();  }", "+  private static AbstractSlaveJVM _getInstance(Class clazz) throws Exception {", "+    try { return (AbstractSlaveJVM) clazz.getField(\"ONLY\").get(null); }", "+    catch (Throwable t) { ", "+      _log.log(\"SlaveRemote class does not have an ONLY field!\");", "+      return (AbstractSlaveJVM) clazz.newInstance();  ", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e556472b634cbc63046bd05dc0b8b87b", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/EventHandlerThread.java", "commitBeforeChange": "0126ea99e5c318f1f9907f0c07d77641969ffef5", "commitAfterChange": "fa54651cc7ac0d03884ebcafd7e8520df74651a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "   protected boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException", "signatureAfterChange": "   private boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException", "diff": ["-  protected boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException {", "-    try {", "-      return thread.isSuspended() && thread.frameCount() > 0;", "-    }", "+  private boolean _isSuspendedWithFrames(ThreadReference thread) throws DebugException {", "+    ", "+    try { return thread.isSuspended() && thread.frameCount() > 0; }", "-      throw new DebugException(\"Could not count frames on a suspended thread: \" +", "-                               itse);", "+      throw new DebugException(\"Could not count frames on a suspended thread: \" + itse);"]}], "num": 27521}
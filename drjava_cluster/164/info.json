{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9ac6dfdf635509feead7056f3657e35", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9e6798593c8d63471e6e818b5408139", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 13, "signatureBeforeChange": "   private SymbolData _getSymbolData_FromCurrFile(String qualifiedClassName, SourceInfo si, boolean resolve)", "signatureAfterChange": "   private SymbolData _getQualifiedArraySymbolData(String eltClassName, SourceInfo si, boolean resolve,                                                 boolean fromClassFile)", "diff": ["+  private SymbolData _getQualifiedArraySymbolData(String eltClassName, SourceInfo si, boolean resolve, ", "+                                               boolean fromClassFile /*, HashSet<String> classesInThisFile*/) {", "+    // resolve should only be true when post-visitation resolution is performed", "+    SymbolData eltSD = getQualifiedSymbolData(eltClassName, si, resolve, fromClassFile, true /*, classesInThisFile*/);", "+    if (eltSD != null) {", "+      SymbolData sd = symbolTable.get(eltSD.getName() + \"[]\");  // Look up fully qualified name", "+      if (sd != null) return sd;", "+      else return defineArraySymbolData(eltSD, this, si /*, classesInThisFile*/);", "+    else return null;", "-    */", "-  private SymbolData _getSymbolData_FromCurrFile(String qualifiedClassName, SourceInfo si, boolean resolve) {", "-    SymbolData sd = symbolTable.get(qualifiedClassName);", "-    if (sd == null || (sd.isContinuation() && resolve)) {", "-      // The class is below the one we're currently parsing or there was an error in parsing one of the classes.", "-      return _lookupFromClassesToBeParsed(qualifiedClassName, si, resolve);", "-    }", "-    else return sd;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caffeb43cd4aab3d68f86fa8ceb620df", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/LanguageLevelVisitor.java", "commitBeforeChange": "80f1de11eca64397e6c4771311a2a63da1189aed", "commitAfterChange": "b51ee0080da7d8cbad354c4c5be1a0e0e67cdc0a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 12, "signatureBeforeChange": "   private SymbolData _getArraySymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile,                                           boolean addError, boolean checkImportedPackages)", "signatureAfterChange": "   private SymbolData _getArraySymbolData(String eltClassName, SourceInfo si, boolean addError, boolean checkImports)", "diff": ["+    */", "+  private SymbolData _getArraySymbolData(String eltClassName, SourceInfo si, boolean addError, boolean checkImports/*, ", "+                                         HashSet<String> classesInThisFile*/) {", "+    // resolve should only be true when post-visitation resolution is performed", "+    if (eltClassName.equals(\"String[]\")) System.err.println(\"String[] passed to getArraySymbolData\");", "+    if (eltClassName.equals(\"String\")) System.err.println(\"String passed to getArraySymbolData\");", "+    SymbolData eltSD =  getSymbolData(eltClassName, si, addError, checkImports/*, classesInThisFile*/);", "+    if (eltSD != null) {", "+      if (eltSD.getName().equals(\"java.lang.String\")) System.err.println(\"java.lang.String FOUND\");", "+      SymbolData sd = symbolTable.get(eltSD.getName() + \"[]\");  // Look up fully qualified name", "+      if (sd != null) return sd;", "+      else return defineArraySymbolData(eltSD, this, si /*, classesInThisFile*/);", "+    }", "+    else return null;", "+  }", "-  private SymbolData _getArraySymbolData(String className, SourceInfo si, boolean resolve, boolean fromClassFile, ", "-                                         boolean addError, boolean checkImportedPackages) {", "-    // shouldn't be resolving an array type since you can't extend one, so resolve should be false", "-    SymbolData innerSd = getSymbolDataHelper(className.substring(0, className.length() - 2), si, resolve, fromClassFile, ", "-                                             addError, checkImportedPackages);", "-    if (innerSd != null) {", "-      SymbolData sd = symbolTable.get(innerSd.getName() + \"[]\");", "-      if (sd != null) { return sd; }", "-      else { return defineArraySymbolData(innerSd, this, si); }", "-    else { return null; }"]}], "num": 164}
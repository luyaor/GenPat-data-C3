{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0532b7f742406513db42924b2b4f1d8a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000c6eed22c1d99e6ac094b1bc9666d8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/FindReplacePanel.java", "commitBeforeChange": "72ee238f22e4ae6534ad887ff5bcbab9970c036e", "commitAfterChange": "47940fe74faf2ed044539c32c4d2eb5e5171e259", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public void findAll(String searchStr, final boolean searchAll, final OpenDefinitionsDocument startDoc,                       final RegionManager<MovingDocumentRegion> rm, final FindResultsPanel panel)", "signatureAfterChange": "   public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,                       final boolean wholeWord, final boolean noComments,  final OpenDefinitionsDocument startDoc,                       final RegionManager<MovingDocumentRegion> rm, final FindResultsPanel panel)", "diff": ["-  public void findAll(String searchStr, final boolean searchAll, final OpenDefinitionsDocument startDoc,", "+  public void findAll(String searchStr, final boolean searchAll, final boolean matchCase,", "+                      final boolean wholeWord, final boolean noComments,  final OpenDefinitionsDocument startDoc,", "-", "+    OpenDefinitionsDocument oldDoc = _machine.getDocument();", "+    OpenDefinitionsDocument oldFirstDoc = _machine.getFirstDoc();", "+    String oldFindWord = _machine.getFindWord();", "+    boolean oldSearchAll = _machine.getSearchAllDocuments();", "+    boolean oldMatchCase = _machine.getMatchCase();", "+    boolean oldWholeWord = _machine.getMatchWholeWord();", "+    boolean oldNoComments = _machine.getIgnoreCommentsAndStrings();", "+    int oldPosition = _machine.getCurrentOffset();", "+    ", "+    _machine.setSearchAllDocuments(searchAll);", "+    _machine.setMatchCase(matchCase);", "+    if (wholeWord) { _machine.setMatchWholeWord(); }", "+    else { _machine.setFindAnyOccurrence(); }", "+    _machine.setIgnoreCommentsAndStrings(noComments);", "+      ", "+      _machine.setDocument(oldDoc);", "+      _machine.setFirstDoc(oldFirstDoc);", "+      _machine.setFindWord(oldFindWord);", "+      _machine.setSearchAllDocuments(oldSearchAll);", "+      _machine.setMatchCase(oldMatchCase);", "+      if (oldWholeWord) { _machine.setMatchWholeWord(); }", "+      else { _machine.setFindAnyOccurrence(); }", "+      _machine.setIgnoreCommentsAndStrings(oldNoComments);", "+      _machine.setPosition(oldPosition);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "027a947bfef6e4e84d45caf565745c04", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "80debf5b9716524c576a71fc4929233c9637cd68", "commitAfterChange": "0dc6c4e6c51f7a1991368187e63e0eff0d7150ef", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 44, "signatureBeforeChange": "   private static void archiveProperties(Node ast, final String prefix)", "signatureAfterChange": "          private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,                                      Map<?,?> rightProps, SourceInfo.Wrapper right)", "diff": ["-   */", "-  private static void archiveProperties(Node ast, final String prefix) {", "-    new DepthFirstVisitor() {", "-      public void run(Node node) {", "-        node.archiveProperties(prefix);", "-        super.run(node);", "-      }", "-    }.run(ast);", "-  }", "+    ", "+    private void compareProperties(Map<?,?> leftProps, SourceInfo.Wrapper left,", "+                                     Map<?,?> rightProps, SourceInfo.Wrapper right) {", "+      Set<Object> keys = new HashSet<Object>(leftProps.keySet());", "+      keys.retainAll(rightProps.keySet());", "+      Set<Object> leftKeys = new HashSet<Object>(leftProps.keySet());", "+      leftKeys.removeAll(keys);", "+      Set<Object> rightKeys = new HashSet<Object>(rightProps.keySet());", "+      rightKeys.removeAll(keys);", "+      if (!leftKeys.isEmpty() || !rightKeys.isEmpty()) {", "+        mismatch(\"Extra properties\", leftKeys.toString(), left, rightKeys.toString(), right);", "+      }", "+      for (Object k : keys) {", "+        compareObjects(\"property \" + k, leftProps.get(k), left, rightProps.get(k), right);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "079290f69c0b137d949cd175fe9b6121", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "b2d820b253c15b02ecb50e43e9a336a56dadd45e", "commitAfterChange": "a80c6de11e537b6579c447ea812ef2f4f98b5f2f", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 37, "signatureBeforeChange": "   public OpenDefinitionsDocument preloadDocument(Location location)", "signatureAfterChange": "   public OpenDefinitionsDocument preloadDocument(Location location)", "diff": ["-    // No stored doc, look on the source root set (later, also the sourcepath)", "-    ReferenceType rt = location.declaringType();", "-    try { fileName = getPackageDir(rt.name()) + rt.sourceName(); }", "-    catch (AbsentInformationException aie) {", "-      // Don't know real source name:", "-      //   assume source name is same as file name", "-      String className = rt.name().replace('.', File.separatorChar);", "+    try {", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+      Location lll = getLLLocation(location, files);", "-      // crop off the $ if there is one and anything after it", "-      int indexOfDollar = className.indexOf('$');", "-      if (indexOfDollar > -1) {", "-        className = className.substring(0, indexOfDollar);", "+      fileName = lll.sourcePath();", "+", "+      // Check source root set (open files)", "+      File f = _model.getSourceFile(fileName);", "+      if (f != null) {", "+        // Get a document for this file, forcing it to open", "+        try { doc = _model.getDocumentForFile(f); }", "+        catch (IOException ioe) {", "+          doc = null;", "+        }", "+      }", "+", "+    }", "+    catch(AbsentInformationException e) {", "+      // No stored doc, look on the source root set (later, also the sourcepath)", "+      final List<File> files = new ArrayList<File>();", "+      for(OpenDefinitionsDocument odd: _model.getLLOpenDefinitionsDocuments()){ files.add(odd.getRawFile()); }", "+", "+      ReferenceType rt = location.declaringType();", "+      fileName = null;", "+      try { fileName = getPackageDir(rt.name()) + rt.sourceName(); }", "+      catch (AbsentInformationException aie) {", "+        // Don't know real source name:", "+        //   assume source name is same as file name", "+        fileName = null;", "+        String className = rt.name().replace('.', File.separatorChar);", "+        ", "+        // crop off the $ if there is one and anything after it", "+        int indexOfDollar = className.indexOf('$');", "+        if (indexOfDollar > -1) {", "+          className = className.substring(0, indexOfDollar);", "+        }", "+        ", "+        for(File f: files) {", "+          if (f.getName().equals(className+\".java\") ||", "+              f.getName().equals(className+\".dj0\") ||", "+              f.getName().equals(className+\".dj1\") ||", "+              f.getName().equals(className+\".dj2\")) {", "+            fileName = f.getName();", "+            break;", "+          }", "+        }", "+        if (fileName==null) {", "+          fileName = className + \".java\";", "+        }", "-      fileName = className + \".java\";", "+      if (fileName!=null) {", "+        // Check source root set (open files)", "+        File f = _model.getSourceFile(fileName);", "+        if (f != null) {", "+          // Get a document for this file, forcing it to open", "+          try { doc = _model.getDocumentForFile(f); }", "+          catch (IOException ioe) {", "+            // No doc, so don't notify listener", "+          }", "+        }", "+      }", "-    // Check source root set (open files)", "-    File f = _model.getSourceFile(fileName);", "-    if (f != null) {", "-      // Get a document for this file, forcing it to open", "-      try { doc = _model.getDocumentForFile(f); }", "-      catch (IOException ioe) {", "-        // No doc, so don't notify listener", "-      }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e97aee32ea6272094d8a2ab008609b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/symbol/StandardTypeSystem.java", "commitBeforeChange": "b4cb953a15f76465c4fdfdd0a3efe47737f78efc", "commitAfterChange": "da8b20243b85298aada190df10fa721e07aae787", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 156, "signatureBeforeChange": "              public void dumpBounds(Runnable1<Type> dumpType)", "signatureAfterChange": "              public void dumpBounds()", "diff": ["-      public void dumpBounds(Runnable1<Type> dumpType) {", "+      public void dumpBounds() {", "-            if (printedFirst) { result.append(\"; \"); }", "+            if (printedFirst) { _result.append(\"; \"); }", "-            result.append(_names.get(v));", "-            result.append(\" <: \");", "-            dumpType.run(upper); // may increase the size of _vars", "+            _result.append(_names.get(v));", "+            _result.append(\" <: \");", "+            TypeWriter.this.run(upper); // may increase the size of _vars", "-            if (printUpper) { result.append(\", \"); }", "-            result.append(_names.get(v));", "-            result.append(\" :> \");", "-            dumpType.run(lower); // may increase the size of _vars", "+            if (printUpper) { _result.append(\", \"); }", "+            _result.append(_names.get(v));", "+            _result.append(\" :> \");", "+            TypeWriter.this.run(lower); // may increase the size of _vars"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485e0e1316b209e8bd91c72febf136e5", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/KeyStrokeOption.java", "commitBeforeChange": "1fded97fdeda420f1a00832b34fbad92ca8d6567", "commitAfterChange": "91eaa89d34afca6f9535645fe8bc2e7298ec779c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public String format(KeyStroke k)", "signatureAfterChange": "   public String format(KeyStroke k)", "diff": ["-    if (k == NULL_KEYSTROKE)", "+    if (k == NULL_KEYSTROKE) {", "-    String s = KeyEvent.getKeyModifiersText(k.getModifiers()).toLowerCase();", "-    s = s.replace('+', ' ');", "-    if (!s.equals(\"\"))", "-      s += \" \";", "+    }", "+", "+    //String s = KeyEvent.getKeyModifiersText(k.getModifiers()).toLowerCase();", "+    //s = s.replace('+', ' ');", "+    //if (!s.equals(\"\"))", "+    //  s += \" \";", "+", "+    // Generate modifiers text on our own, since getKeyStroke can't parse", "+    //  locale-specific modifiers.", "+    int modifiers = k.getModifiers();", "+    boolean isMac = _isMacPlatform();", "+    StringBuffer buf = new StringBuffer();", "+    if ((modifiers & Event.META_MASK) > 0) {", "+      String meta = (!isMac) ? \"meta \" : \"command \";", "+      buf.append(meta);", "+    }", "+    if ((modifiers & Event.CTRL_MASK) > 0) {", "+      buf.append(\"ctrl \");", "+    }", "+    if ((modifiers & Event.ALT_MASK) > 0) {", "+      String alt = (!isMac) ? \"alt \" : \"option \";", "+      buf.append(alt);", "+    }", "+    if ((modifiers & Event.SHIFT_MASK) > 0) {", "+      buf.append(\"shift \");", "+    }", "+", "-      s += \"typed \";", "-      s += k.getKeyChar();", "+      buf.append(\"typed \");", "+      buf.append(k.getKeyChar());", "-      if (k.isOnKeyRelease())", "-        s += \"released \";", "+      if (k.isOnKeyRelease()) {", "+        buf.append(\"released \");", "+      }", "-      if (key == null)", "+      if (key == null) {", "+      }", "-          key.equals(\"SHIFT\") || key.equals(\"ALT_GRAPH\"))", "-        return s;", "-      s += key;", "-      return s;", "+          key.equals(\"SHIFT\") || key.equals(\"ALT_GRAPH\")) {", "+        return buf.toString();", "+      }", "+      else {", "+        buf.append(key);", "+        return buf.toString();", "+      }", "-    return s; ", "+    return buf.toString();", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55d52c9a9a753ca4bc486d5b35bc95ff", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-hj/edu/rice/cs/drjava/model/compiler/HjCompiler.java", "commitBeforeChange": "0d34688a453817a830dd6c41ef2406a8bf5a84d1", "commitAfterChange": "5a2208c5a083f8abb3c732362ff63b83a40e68a9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "signatureAfterChange": "   public java.util.List<? extends DJError> compile(java.util.List<? extends File> files,                                                    java.util.List<? extends File> classPath,                                                     java.util.List<? extends File> sourcePath,                                                    File destination,                                                     java.util.List<? extends File> bootClassPath,                                                    String sourceVersion,                                                    boolean showWarnings)", "diff": ["-    String [] testCommand = new String[11];    ", "-    testCommand[0] = \"-hj\";", "-    testCommand[1] = \"-info\";", "-    testCommand[2] = \"-sp\";", "-    testCommand[4] = \"-cp\";", "-    testCommand[5] = s;", "-    testCommand[6] = \"-d\";", "-    testCommand[8] = \"-w\";", "-    testCommand[9] = \"-pp\";    ", "+//    System.out.println(\"-------------------------------------\");", "+//    System.out.println(\"-------------------------------------\");", "+//    System.out.println(\"files = \"+files);", "+//    System.out.println(\"sourcePath = \"+sourcePath);", "+//    System.out.println(\"-------------------------------------\");", "+    ArrayList<String> testCommand = new ArrayList<String>();", "+    testCommand.add(\"-hj\");", "+    testCommand.add(\"-info\");", "+    testCommand.add(\"-sp\");", "+    int spIndex = testCommand.size();", "+    testCommand.add(\"<sp filled in here>\");", "+    testCommand.add(\"-cp\");", "+    testCommand.add(s);", "+    testCommand.add(\"-d\");", "+    int destIndex = testCommand.size();", "+    if (destination != null) {", "+      testCommand.add(destination.getAbsolutePath());", "+    }", "+    else {", "+      testCommand.add(\"<dest dir filled in here>\");", "+    }", "+    testCommand.add(\"-w\");", "+    testCommand.add(\"-pp\");", "+    int sourceFileIndex = testCommand.size();", "+    testCommand.add(\"<source file filled in here>\");", "-      testCommand[3] = next.getParentFile().getAbsolutePath();", "-      testCommand[7] = next.getParentFile().getAbsolutePath();", "-      testCommand[10] = next.getName();", "+      testCommand.set(spIndex, next.getParentFile().getAbsolutePath());", "+      if (destination == null) {", "+        testCommand.set(destIndex, next.getParentFile().getAbsolutePath());", "+      }", "+      testCommand.set(sourceFileIndex, next.getName());", "-      // for(String cmd: testCommand) System.out.print(\" \"+cmd);", "-      // System.out.println();", "+//      for(String cmd: testCommand) System.out.print(\" \"+cmd);", "+//      System.out.println();", "-        soot.Main.mainEntry(testCommand); ", "+        soot.Main.mainEntry(testCommand.toArray(new String[testCommand.size()])); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e318f1abb7a4d2b053d21f3aa6de587", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/config/ConfigFrame.java", "commitBeforeChange": "512f2d01a44aebe9e820ea2b6904a7d9ee6beac7", "commitAfterChange": "7f5ff64d986e80db8fa3ceeb1048b991af6a4ea0", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "signatureAfterChange": "   private void _setupJavadocPanel(ConfigPanel panel)", "diff": ["+    addOptionComponent(panel, ", "+                       new StringOptionComponent(OptionConstants.JUNIT_3_8_2_LINK,", "+                                                 \"JUnit 3.8.2 URL\", this,", "+                                                 \"URL for the JUnit 3.8.2 API, for \\\"Open Java API Javadoc\\\".\"));", "+", "+    VectorStringOptionComponent additionalJavadoc =", "+      new VectorStringOptionComponent(OptionConstants.JAVADOC_ADDITIONAL_LINKS, \"Additional Javadoc URLs\", this,", "+                                      \"<html>Additional URLs with Javadoc, for \\\"Open Java API Javadoc\\\"<br>\" +", "+                                      \"and auto-completion.</html>\") {", "+      protected boolean verify(String s) {", "+        // verify that the allclasses-frame.html file exists at that URL. do not actually parse it now", "+        boolean result = true;", "+        try {", "+          java.net.URL url = new java.net.URL(s+\"/allclasses-frame.html\");", "+          java.io.InputStream urls = url.openStream();", "+          java.io.InputStreamReader is = null;", "+          java.io.BufferedReader br = null;", "+          try {", "+            is = new java.io.InputStreamReader(urls);", "+            br = new java.io.BufferedReader(is);", "+            String line = br.readLine();", "+            if (line == null) { result = false; }", "+          }", "+          finally {", "+            if (br!=null) { br.close(); }", "+            if (is!=null) { is.close(); }", "+            if (urls!=null) { urls.close(); }", "+          }", "+        }", "+        catch(java.io.IOException ioe) { result = false; }", "+        if (!result) {", "+          JOptionPane.showMessageDialog(ConfigFrame.this,", "+                                        \"Could not find the Javadoc at the URL\\n\"+", "+                                        s,", "+                                        \"Error Adding Javadoc\",", "+                                        JOptionPane.ERROR_MESSAGE); ", "+        }", "+        return result;", "+      }", "+    };", "+    addOptionComponent(panel, additionalJavadoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85dced2414ed4c899aad9303ad0d9d99", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/config/SavableConfiguration.java", "commitBeforeChange": "7bc6765693343476fc2f77685ee6bc931bf3b3f3", "commitAfterChange": "7f2688df99750a8a6042f231ca2bc23d3f2c923c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "signatureAfterChange": "   public void saveConfiguration(OutputStream os, String header) throws IOException", "diff": ["+    OutputStreamWriter osw = new OutputStreamWriter(os);", "-    Properties p = new Properties();", "+    //Properties p = new Properties();", "+    String tmpString;", "+    StringBuffer buff;", "+    OptionParser key;", "+    Date date = new Date();", "+    osw.write((int)'#');", "+    osw.write(header, 0, header.length());", "+    osw.write((int)'\\n');", "+    osw.write((int)'#');", "+    osw.write(date.toString(), 0, date.toString().length());", "+    osw.write((int)'\\n');", "-      OptionParser key = keys.nextElement();", "-      p.setProperty(key.getName(),map.getString(key));", "+      key = keys.nextElement();", "+      tmpString = key.getName();", "+      osw.write(tmpString, 0, tmpString.length());", "+      tmpString = \" = \";", "+      osw.write(tmpString, 0, 3);", "+      tmpString = map.getString(key);", "+      // This replaces all backslashes with two backslashes for windows", "+      int index = 0;", "+      int pos;", "+      while (index < tmpString.length() && ", "+             ((pos = tmpString.indexOf('\\\\', index)) >= 0)) {", "+        buff = new StringBuffer(tmpString);", "+        buff.insert(pos, '\\\\');", "+        index = pos + 2;", "+        tmpString = buff.toString();", "+      }", "+      osw.write(tmpString, 0, tmpString.length());", "+      osw.write((int)'\\n');", "+     // p.setProperty(key.getName(),map.getString(key));", "-    p.store(os,header);", "+    osw.close();", "+    //p.store(os,header)", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85e703c20d74197232b3a9337b50ec43", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/sourcechecker/SourceChecker.java", "commitBeforeChange": "488e3f877c7f7a8647e0d3f7fb5faea712ac20ce", "commitAfterChange": "35470e88ca153d8164d45d018c673900eac06ea2", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 59, "signatureBeforeChange": "          private void compare(Node left, Node right)", "signatureAfterChange": "          private void compare(String context, Node left, Node right)", "diff": ["-    private void compare(Node left, Node right) {", "+    ", "+    private void compare(String context, Node left, Node right) {", "+        if (left instanceof Statement || left instanceof VariableDeclaration || left instanceof Expression) {", "+          if (hasNestedError(left) || hasNestedError(right)) {", "+            _log.statementWithError(context, left, right);", "+            return;", "+          }", "+        }", "+        if (NodeProperties.hasMethod(left)) {", "+          DJMethod m = NodeProperties.getMethod(left);", "+          if (left instanceof MethodCall && !IterUtil.isEmpty(m.typeParameters())) {", "+            _log.polymorphicInvocation(context, left, right, ((MethodCall) left).getTypeArgs().isNone());", "+          }", "+        }", "+        if (NodeProperties.hasConstructor(left)) {", "+          DJConstructor k = NodeProperties.getConstructor(left);", "+          if (!IterUtil.isEmpty(k.typeParameters())) {", "+            Boolean inferred = null;", "+            if (left instanceof ConstructorCall) { inferred = true; } // doesn't support targs for now", "+            else if (left instanceof SimpleAllocation) { inferred = ((SimpleAllocation) left).getTypeArgs().isNone(); }", "+            else if (left instanceof InnerAllocation) { inferred = ((InnerAllocation) left).getTypeArgs().isNone(); }", "+            if (inferred != null) { _log.polymorphicInvocation(context, left, right, inferred); }", "+          }", "+        }", "+        Field props;", "+        try { props = Node.class.getDeclaredField(\"properties\"); }", "+        catch (NoSuchFieldException e) { throw new RuntimeException(e); }", "+        compareProperties(left.getClass(), (Map<?,?>) fieldValue(props, left), left,", "+                          (Map<?,?>) fieldValue(props, right), right);", "-        mismatch(\"Different node classes\", left.getClass().getName(), left, right.getClass().getName(), right);", "+        _log.mismatch(\"Different classes\", context, left.getClass().getName(), left,", "+                      right.getClass().getName(), right);", "-      Field props;", "-      try { props = Node.class.getDeclaredField(\"properties\"); }", "-      catch (NoSuchFieldException e) { throw new RuntimeException(e); }", "-      compareProperties((Map<?,?>) fieldValue(props, left), left, (Map<?,?>) fieldValue(props, right), right);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3686906195256a4ee6dfe0010064613", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/junit/DefaultJUnitModel.java", "commitBeforeChange": "a6ad77fef884f528ddfb31a18f08f168fcd5e3f2", "commitAfterChange": "20e19df5b6c16c841aeff102df396402e35bacf3", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "   public void testSuiteEnded(JUnitError[] errors)", "signatureAfterChange": "   public void testSuiteEnded(JUnitError[] errors)", "diff": ["+    ", "+    List<OpenDefinitionsDocument> docs = _model.getOpenDefinitionsDocuments();", "+    List<File> files = new ArrayList<File>();", "+    for(OpenDefinitionsDocument odd: docs){", "+      File f = odd.getRawFile();", "+      if (f.getName().endsWith(\".dj0\") ||", "+          f.getName().endsWith(\".dj1\") ||", "+          f.getName().endsWith(\".dj2\")) files.add(f); ", "+    }", "+    for(JUnitError e: errors){", "+      e.setStackTrace(_compilerModel.getLLSTM().replaceStackTrace(e.stackTrace(),files));", "+      File f = e.file();", "+      if (f.getName().endsWith(\".dj0\") ||", "+          f.getName().endsWith(\".dj1\") ||", "+          f.getName().endsWith(\".dj2\")) {", "+        String dn = f.getName();", "+        dn = dn.substring(0, dn.lastIndexOf('.'))+\".java\";", "+        StackTraceElement ste = new StackTraceElement(e.className(), \"\", dn, e.lineNumber());", "+        ste = _compilerModel.getLLSTM().replaceStackTraceElement(ste, f);", "+        e.setLineNumber(ste.getLineNumber());", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d800e15a83fba914faf09b88c014a6", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/util/ReflectionUtilities.java", "commitBeforeChange": "1ef951d20d276f3c46e1cf20ba51ab4b6ce00f53", "commitAfterChange": "fe7c222597b4c2632fd01caf1fa72f992186277e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "   protected static Constructor selectTheMostSpecificConstructor(Constructor c1,                                                                 Constructor c2)", "signatureAfterChange": "   protected static Constructor selectTheMostSpecificConstructor(List<Constructor> list)", "diff": ["-  protected static Constructor selectTheMostSpecificConstructor(Constructor c1,", "-                                                                Constructor c2) {", "-    Class [] a1 = c1.getParameterTypes();", "-    Class [] a2 = c2.getParameterTypes();", "+  protected static Constructor selectTheMostSpecificConstructor(List<Constructor> list) {", "+    if (list.isEmpty()) return null;", "+    Iterator<Constructor> it = list.iterator();", "+    Constructor best = it.next();", "+    Constructor ambiguous = null; // there is no ambiguous other method at first", "+    while (it.hasNext()) {", "+      Constructor curr = it.next();", "+      Class[] a1 = best.getParameterTypes();", "+      Class[] a2 = curr.getParameterTypes();", "+      ", "+      boolean better1 = false; // whether 'best' is better than 'curr'", "+      boolean better2 = false; // whether 'curr' is better than 'best'", "+      for (int i = 0; i < a1.length; i++) {", "+        boolean from2to1 = isCompatible(a1[i], a2[i]);", "+        boolean from1to2 = isCompatible(a2[i], a1[i]);", "+        ", "+        if (from1to2 && !from2to1) {// best's parameter[i] is more specific than curr's", "+          better1 = true; // so best is better than curr", "+        }", "+        if (from2to1 && !from1to2) {// curr's parameter[i] is more specific than best's", "+          better2 = true; // so curr is better than best", "+        }", "+      }", "+      ", "+      // decide which is more specific or whether they are ambiguous", "+      if ( !(better1 ^ better2) ) { // neither is better than the other", "+        // Handle overridden methods", "+        if (Arrays.equals(a1, a2)) {", "+          Class c1 = best.getDeclaringClass();", "+          Class c2 = curr.getDeclaringClass();", "+          boolean c1IsSuperOrSame = c1.isAssignableFrom(c2);", "+          boolean c2IsSuperOrSame = c2.isAssignableFrom(c1);", "+          if (c1IsSuperOrSame && !c2IsSuperOrSame) { // c2 is more specific", "+            best = curr;", "+            continue;", "+          }", "+          else if (c2IsSuperOrSame && !c1IsSuperOrSame) { // c1 is more specific", "+            continue;", "+          }", "+        }", "+        ambiguous = curr;", "+      }", "+      else if (better2) {", "+        best = curr;", "+        ambiguous = null; // no more ambiguity", "+      }", "+    }", "+    if (ambiguous != null) {", "+      throw new AmbiguousMethodException(\"Both contructors match: \" + best + \", and \" + ambiguous);", "+    }", "+    return best;", "+  }", "-      if (a1[i] != a2[i]) {", "-        if (isCompatible(a1[i], a2[i])) {", "-          return c2;", "-        } else {", "-          return c1;", "-    ", "-    return c1;", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8ad3a5d84470121fcb37c6f893e83ae", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelOtherTest.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 19, "signatureBeforeChange": "   public void testInteractionsAutomaticallySetPackageScope()     throws BadLocationException, IOException", "signatureAfterChange": "     public void testGetMultipleSourceRootsDefaultPackage()     throws BadLocationException, IOException, InvalidPackageException", "diff": ["-   */", "-  public void testInteractionsAutomaticallySetPackageScope()", "-    throws BadLocationException, IOException", "-  {", "-    final File aDir = new File(_tempDir, \"a\");", "-    aDir.mkdir();", "-    final File file = new File(aDir, \"Foo.java\");", "-", "-    setupDocument(\"package a;\\npublic \" + FOO_TEXT);", "-    _model.saveFile(new FileSelector(file));", "-    ", "-    _model.startCompile();", "-", "-    String result = interpret(\"new Foo().getClass().getName()\");", "-", "-    assertEquals(\"interactions result\",", "-                 \"a.Foo\",", "+", "+  public void testGetMultipleSourceRootsDefaultPackage()", "+    throws BadLocationException, IOException, InvalidPackageException", "+  {", "+    // Create temp directory", "+    File baseTempDir = tempDirectory();", "+", "+    // Now make subdirectories a, b", "+    File subdir1 = new File(baseTempDir, \"a\");", "+    subdir1.mkdir();", "+    File subdir2 = new File(baseTempDir, \"b\");", "+    subdir2.mkdir();", "+", "+    // Save the footext to Foo.java in subdirectory 1", "+    File file1 = new File(subdir1, \"Foo.java\");", "+    OpenDefinitionsDocument doc1 = setupDocument(FOO_TEXT);", "+    doc1.saveFileAs(new FileSelector(file1));", "+", "+    // Save the bartext to Bar.java in subdirectory 1", "+    File file2 = new File(subdir1, \"Bar.java\");", "+    OpenDefinitionsDocument doc2 = setupDocument(BAR_TEXT);", "+    doc2.saveFileAs(new FileSelector(file2));", "+", "+    // Save the bartext to Bar.java in subdirectory 2", "+    File file3 = new File(subdir2, \"Bar.java\");", "+    OpenDefinitionsDocument doc3 = setupDocument(BAR_TEXT);", "+    doc3.saveFileAs(new FileSelector(file3));", "+", "+    // No events should fire", "+    _model.addListener(new TestListener());", "+", "+    // Get source roots (should be 2: no duplicates)", "+    File[] roots = _model.getSourceRootSet();", "+    assertEquals(\"number of source roots\", 2, roots.length);", "+    File root1 = roots[0];", "+    File root2 = roots[1];", "+", "+    // Make sure both source roots are in set", "+    if (!( (root1.equals(subdir1) && root2.equals(subdir2)) ||", "+           (root1.equals(subdir2) && root2.equals(subdir1)) ))", "+    {", "+      fail(\"source roots did not match\");", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ffd6be9b56461e4a261282537231f7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/DefaultCompilerModel.java", "commitBeforeChange": "476f4df6ab63cd1004cb7cc36238fad228ab6d80", "commitAfterChange": "2df7289d55456372fbaf4e3ab78549d8571648f8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "   private static boolean endsWithExt(File f, String[] exts)", "signatureAfterChange": "   private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<? super CompilerError> errors)", "diff": ["-  /** Determines if file f ends with one of the extensions in exts. */", "-  private static boolean endsWithExt(File f, String[] exts) {", "-    for (String ext: exts) { if (f.getName().endsWith(ext)) return true; }", "-    return false;", "+    */", "+  private List<? extends File> _compileLanguageLevelsFiles(List<? extends File> files, List<? super CompilerError> errors) {", "+    // TODO: The classpath (and sourcepath, bootclasspath) should be an argument passed to Language Levels.", "+    LanguageLevelConverter llc = new LanguageLevelConverter(getActiveCompiler().getName());", "+    Pair<LinkedList<JExprParseException>, LinkedList<Pair<String, JExpressionIF>>> llErrors = ", "+      llc.convert(files.toArray(new File[0]));", "+    ", "+    /* Rename any .dj0 files in files to be .java files, so the correct thing is compiled.  The hashset is used to ", "+     * make sure we never send in duplicate files. This can happen if the java file was sent in along with the ", "+     * corresponding .dj* file. The dj* file is renamed to a .java file and thus we have two of the same file in ", "+     * the list.  By adding the renamed file to the hashset, the hashset efficiently removes duplicates.", "+     */", "+    HashSet<File> javaFileSet = new HashSet<File>();", "+    boolean containsLanguageLevels = false;", "+    for (File f : files) {", "+      File canonicalFile = FileOps.getCanonicalFile(f);", "+      String fileName = canonicalFile.getPath();", "+      int lastIndex = fileName.lastIndexOf(\".dj\");", "+      if (lastIndex != -1) {", "+        containsLanguageLevels = true;", "+        javaFileSet.add(new File(fileName.substring(0, lastIndex) + \".java\"));", "+      }", "+      else { javaFileSet.add(canonicalFile); }", "+    }", "+    files = new LinkedList<File>(javaFileSet);", "+    ", "+    errors.addAll(_parseExceptions2CompilerErrors(llErrors.getFirst()));", "+    errors.addAll(_visitorErrors2CompilerErrors(llErrors.getSecond()));", "+    if (containsLanguageLevels) { return files; }", "+    else { return null; }"]}], "num": 25156}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58bf4a4c9388710960025e6497bffe07", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3af2dbaf36a481552ada208285d91a2f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 99, "signatureBeforeChange": "   public static <T> Predicate2<T, Object> promote(final Predicate<? super T> pred)", "signatureAfterChange": "   public static <T> Predicate2<T, Object> promote(Predicate<? super T> pred)", "diff": ["-  /** @return A {@code Predicate2} equivalent to {@code pred} with an additional, ignored argument */", "-  public static <T> Predicate2<T, Object> promote(final Predicate<? super T> pred) {", "-    return new Predicate2<T, Object>() {", "-      public Boolean value(T arg1, Object arg2) { return pred.value(arg1); }", "-    };", "+  /** Create a {@code Predicate2} equivalent to {@code pred} with an additional, ignored argument. */", "+  public static <T> Predicate2<T, Object> promote(Predicate<? super T> pred) {", "+    return new PromotedPredicate2<T>(pred);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c416d9abccf517c52549e25201b67168", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 90, "signatureBeforeChange": "   public static <T, R> Lambda2<T, Object, R> promote(final Lambda<? super T, ? extends R> lambda)", "signatureAfterChange": "   public static <T, R> Lambda2<T, Object, R> promote(Lambda<? super T, ? extends R> lambda)", "diff": ["-  /** @return A {@code Lambda2} equivalent to {@code lambda} with an additional, ignored argument */", "-  public static <T, R> Lambda2<T, Object, R> promote(final Lambda<? super T, ? extends R> lambda) {", "-    return new Lambda2<T, Object, R>() {", "-      public R value(T arg1, Object arg2) { return lambda.value(arg1); }", "-    };", "+  /** Create a {@code Lambda2} equivalent to {@code lambda} with an additional, ignored argument. */", "+  public static <T, R> Lambda2<T, Object, R> promote(Lambda<? super T, ? extends R> lambda) {", "+    return new PromotedLambda2<T, R>(lambda);", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73323e5aa588a7c6079423d9e2b4049", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "274f7defc49003e66c942e814c9ce22958b3814c", "commitAfterChange": "f2730b22a0cb99532fc26d3fe0cc1ef03dc2fb33", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 306, "signatureBeforeChange": "   public static <T1, T2> Predicate2<T1, T2>      asPredicate(final Lambda2<? super T1, ? super T2, ? extends Boolean> lambda)", "signatureAfterChange": "   public static <T1, T2> Predicate2<T1, T2> asPredicate(Lambda2<? super T1, ? super T2, ? extends Boolean> lambda)", "diff": ["-  /** @return  A predicate based on an input that acts as a predicate but is not typed as one */", "-  public static <T1, T2> Predicate2<T1, T2> ", "-    asPredicate(final Lambda2<? super T1, ? super T2, ? extends Boolean> lambda) {", "-    return new Predicate2<T1, T2>() { ", "-      public Boolean value(T1 arg1, T2 arg2) { return lambda.value(arg1, arg2); }", "-    };", "-  }", "+  /** Create a predicate based on an input that acts as a predicate but is not typed as one. */", "+  public static <T1, T2> Predicate2<T1, T2> asPredicate(Lambda2<? super T1, ? super T2, ? extends Boolean> lambda) {", "+    return new LambdaPredicate2<T1, T2>(lambda);", "+  }"]}], "num": 23317}
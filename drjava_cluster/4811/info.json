{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d50b33902f18fb42c8a5c60bbfb5972", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b06fdfb419b5a9a9427e2f67b198492c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModelCompileSuccessOptionsTest.java", "commitBeforeChange": "4009de7b28d2df87c05fce5746e7b354468d763f", "commitAfterChange": "ef6fbf4282520a8a1b7a89050b6be023e72a81a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "   public void testCompileWithJavaAssert()     throws BadLocationException, IOException, InterruptedException", "signatureAfterChange": "   public void testCompileWithJavaAssert()     throws BadLocationException, IOException, InterruptedException", "diff": ["-    OpenDefinitionsDocument doc = setupDocument(FOO_WITH_ASSERT);", "-    final File file = tempFile();", "-    doc.saveFile(new FileSelector(file));", "-    CompileShouldFailListener listener = new CompileShouldFailListener();", "-    _model.addListener(listener);", "-    ", "-    // This is a CompileShouldFailListener, so we don't need to wait.", "-    doc.startCompile();", "-", "-    assertCompileErrorsPresent(_name(), true);", "-    listener.checkCompileOccurred();", "-    File compiled = classForJava(file, \"DrJavaTestFoo\");", "-    assertTrue(_name() + \"Class file exists after compile?!\", !compiled.exists());", "-    _model.removeListener(listener);", "-    ", "-    ", "-    // Only run assertions test in 1.4", "-    String version = System.getProperty(\"java.version\");", "-    if ((version != null) && (\"1.4.0\".compareTo(version) <= 0)) {", "-      // Turn on assert support", "-      DrJava.getConfig().setSetting(OptionConstants.JAVAC_ALLOW_ASSERT,", "-                                    Boolean.TRUE);", "+    if(Float.valueOf(System.getProperty(\"java.specification.version\")) < 1.5) {", "+      OpenDefinitionsDocument doc = setupDocument(FOO_WITH_ASSERT);", "+      final File file = tempFile();", "+      doc.saveFile(new FileSelector(file));", "+      CompileShouldFailListener listener = new CompileShouldFailListener();", "+      _model.addListener(listener);", "-      CompileShouldSucceedListener listener2 = new CompileShouldSucceedListener(false);", "-      _model.addListener(listener2);", "+      // This is a CompileShouldFailListener, so we don't need to wait.", "-      if (_model.getCompilerModel().getNumErrors() > 0) {", "-        fail(\"compile failed: \" + getCompilerErrorString());", "-      }", "-      _model.removeListener(listener2);", "-      assertCompileErrorsPresent(_name(), false);", "-      listener2.checkCompileOccurred();", "-      // Make sure .class exists", "-      compiled = classForJava(file, \"DrJavaTestFoo\");", "-      assertTrue(_name() + \"Class file doesn't exist after compile\",", "-                 compiled.exists());", "+      assertCompileErrorsPresent(_name(), true);", "+      listener.checkCompileOccurred();", "+      File compiled = classForJava(file, \"DrJavaTestFoo\");", "+      assertTrue(_name() + \"Class file exists after compile?!\", !compiled.exists());", "+      _model.removeListener(listener);", "+      ", "+      ", "+      // Only run assertions test in 1.4", "+      String version = System.getProperty(\"java.version\");", "+      if ((version != null) && (\"1.4.0\".compareTo(version) <= 0)) {", "+        // Turn on assert support", "+        DrJava.getConfig().setSetting(OptionConstants.JAVAC_ALLOW_ASSERT,", "+                                      Boolean.TRUE);", "+        ", "+        CompileShouldSucceedListener listener2 = new CompileShouldSucceedListener(false);", "+        _model.addListener(listener2);", "+        doc.startCompile();", "+        if (_model.getCompilerModel().getNumErrors() > 0) {", "+          fail(\"compile failed: \" + getCompilerErrorString());", "+        }", "+        _model.removeListener(listener2);", "+        assertCompileErrorsPresent(_name(), false);", "+        listener2.checkCompileOccurred();", "+        ", "+        // Make sure .class exists", "+        compiled = classForJava(file, \"DrJavaTestFoo\");", "+        assertTrue(_name() + \"Class file doesn't exist after compile\",", "+                   compiled.exists());", "+      }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2a453e5e2bd898224eafa44ece5c898", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "platform/src-jdk16/edu/rice/cs/drjava/model/compiler/Javac160Compiler.java", "commitBeforeChange": "0d0c5947e7ead7115690128690c9c431a119fb4d", "commitAfterChange": "e65e40659fdfd375a763123b318964023ee18036", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public Javac160Compiler(JavaVersion.FullVersion version, String location, List<? extends File> defaultBootClassPath)", "signatureAfterChange": "    public Javac160Compiler(JavaVersion.FullVersion version, String location, List<? extends File> defaultBootClassPath)", "diff": ["-  ", "+", "+    _filterExe = version.compareTo(JavaVersion.parseFullVersion(\"1.6.4_04\")) >= 0;"]}], "num": 4811}
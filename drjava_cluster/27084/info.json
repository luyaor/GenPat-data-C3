{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52deac1322cfa06be3476153f040ec23", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "703bf11eab2acdc4ad9fb3957e35d6cf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "6815df02bf2c6da2982073900e33dbad7bfa8424", "commitAfterChange": "0ef216d80b2e9cc63f2ef7b2c23490480ef77851", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 259, "signatureBeforeChange": "     private void _saveAllBeforeProceeding(String message)", "signatureAfterChange": "     private void _saveAllBeforeProceeding(String message)", "diff": ["-        int rc = JOptionPane.showConfirmDialog(MainFrame.this, message,", "-                                               \"Must save all files to continue\",", "-                                               JOptionPane.YES_NO_OPTION);", "-        switch (rc) {", "-          case JOptionPane.YES_OPTION:", "-            _saveAll();", "-            break;", "-          case JOptionPane.NO_OPTION:", "-          case JOptionPane.CANCEL_OPTION:", "-          case JOptionPane.CLOSED_OPTION:", "-            // do nothing", "-            break;", "-          default:", "-            throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+        if (!DrJava.getConfig().getSetting(ALWAYS_SAVE_BEFORE_COMPILE).booleanValue()) {", "+          ConfirmCheckBoxDialog dialog =", "+            new ConfirmCheckBoxDialog(MainFrame.this,", "+                                      \"Must save all files to continue\",", "+                                      message,", "+                                      \"Always save before compiling\");", "+          int rc = dialog.show();", "+          switch (rc) {", "+            case JOptionPane.YES_OPTION:", "+              _saveAll();", "+              // don't break, since no option and yes option both check the checkbox", "+            case JOptionPane.NO_OPTION:", "+              if (dialog.getCheckBoxValue()) {", "+                DrJava.getConfig().setSetting(ALWAYS_SAVE_BEFORE_COMPILE, Boolean.TRUE);", "+              }", "+              break;", "+            case JOptionPane.CANCEL_OPTION:", "+            case JOptionPane.CLOSED_OPTION:", "+              // do nothing", "+              break;", "+            default:", "+              throw new RuntimeException(\"Invalid rc from showConfirmDialog: \" + rc);", "+          }", "+        }", "+        else {", "+          _saveAll();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b28da4e7a29f64a02b5a0ed2867d6f8e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "40fa5284e8c663707faeb41ae0125801be606b5b", "commitAfterChange": "e116917927a60a297ec1454565818ede1b4cec2d", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "   public void indent(final int reason)", "signatureAfterChange": "   public void indent(final int reason)", "diff": ["-    ", "+", "-    ", "+", "-        ", "+", "-//        ", "+//", "-        ", "-          // Show a wait cursor for reasonable sized blocks", "-        boolean showWaitCursor = selEnd > (selStart + 100);", "-        ", "+", "-          if (n == JOptionPane.NO_OPTION) { doIndent = false; }", "+          switch (n) {", "+            case JOptionPane.CANCEL_OPTION:", "+            case JOptionPane.CLOSED_OPTION:", "+            case JOptionPane.NO_OPTION:", "+              doIndent = false;", "+              break;", "+            default:", "+              doIndent = true;", "+              break;", "+          }", "-        ", "+", "-        try {", "-          _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "-          //      _indentLines(reason, pm);", "-          ", "-          _doc.getDocument().getUndoManager().endCompoundEdit(key);", "-        }", "-        catch (OperationCanceledException oce) {", "-          // if canceled, undo the indent", "+        if (doIndent) {", "+          try {", "+            _doc.indentLinesInDefinitions(selStart, selEnd, reason, pm);", "+            //      _indentLines(reason, pm);", "+", "+            _doc.getDocument().getUndoManager().endCompoundEdit(key);", "+          }", "+          catch (OperationCanceledException oce) {", "+            // if canceled, undo the indent", "-          throw new UnexpectedException(oce);", "-        }", "-        finally {", "-          setCaretPosition(_doc.getCurrentDefinitionsLocation());", "+            throw new UnexpectedException(oce);", "+          }", "+          finally {", "+            setCaretPosition(_doc.getCurrentDefinitionsLocation());", "-        }", "-        ", "-        _mainFrame.hourglassOff();", "+          }", "+", "+          _mainFrame.hourglassOff();", "-  }", "+        }", "+      }"]}], "num": 27084}
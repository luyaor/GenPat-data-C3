{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bcf98c9539b0c88687ede2d59120146", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53b4fdf3ee51dacd648c721fa4e1b6cb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "978434ebe6c8e1cfcaf0965ea54500f7e3e475c0", "commitAfterChange": "d82c4ab6a249467ad025941135ce9c4a462237a5", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": "   public void openFolder(DirectorySelector openSelector)", "signatureAfterChange": "   public void openFolder(JFileChooser chooser)", "diff": ["-  public void openFolder(DirectorySelector openSelector) {", "+  public void openFolder(JFileChooser chooser) {", "-      File opendir = null;", "+      File openDir = null;", "-        opendir = _model.getActiveDocument().getFile().getParentFile();", "+        openDir = _model.getActiveDocument().getFile().getParentFile();", "+      if (openDir != null && openDir.exists()) {", "+        // We were given a default - use it.", "+        chooser.setCurrentDirectory(openDir);", "+        chooser.setSelectedFile(openDir);", "+      }", "-      File dir = openSelector.getDirectory(opendir);", "+      File [] filesArray = getOpenFiles(chooser);", "+      DrJava.getConfig().setSetting(OptionConstants.OPEN_FOLDER_RECURSIVE, _openRecursiveCheckBox.isSelected());", "+      ", "+      if(filesArray == null || filesArray.length == 0)", "+        return;", "+      ", "+            ", "+      File dir = filesArray[0];", "+      ", "-        files = FileOps.getFilesInDir(dir, openSelector.isRecursive(), new FileFilter(){", "+        files = FileOps.getFilesInDir(dir, _openRecursiveCheckBox.isSelected(), new FileFilter(){", "+        ", "+        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7039628e741aa0ea83a891d70192d7e", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/GlobalModel.java", "commitBeforeChange": "33b6c491d8495d13fb85f49f30d50967be376e1a", "commitAfterChange": "467c198d452cebe1711bbb01564c8c41d79d636a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 30, "signatureBeforeChange": "   public void saveFile(FileSaveSelector com) throws IOException", "signatureAfterChange": "     public void saveFile(FileSaveSelector com) throws IOException", "diff": ["-  public void saveFile(FileSaveSelector com) throws IOException {", "-    FileSaveSelector realCommand;", "-    final File file = _definitionsDoc.getFile();", "-    if (file == null) {", "-      realCommand = com;", "-    }", "-    else {", "-      realCommand = new FileSaveSelector() {", "-        public File getFile() throws OperationCanceledException {", "-          return file;", "-        }", "-      };", "-    }", "-    saveFileAs(realCommand);", "-  }", "+     */", "+    public void saveFile(FileSaveSelector com) throws IOException {", "+      FileSaveSelector realCommand;", "+      final File file;", "+", "+      try {", "+        if (_doc.isUntitled()) {", "+          realCommand = com;", "+        }", "+        else {", "+          file = _doc.getFile();", "+          realCommand = new FileSaveSelector() {", "+            public File getFile() throws OperationCanceledException {", "+              return file;", "+            }", "+          };", "+        }", "+", "+        saveFileAs(realCommand);", "+      }", "+      catch (IllegalStateException ise) {", "+        // No file; this should be caught by isUntitled()", "+        throw new UnexpectedException(ise);", "+      }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fda7c85bd9ece8723de571a3bc9de09d", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/debug/jpda/JPDADebugger.java", "commitBeforeChange": "9297bd3255995599281a9a548fcd6e849eecaf7b", "commitAfterChange": "b8d26b54d9d0d791e5e97a6dd352ae0f9f5f3b20", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 77, "signatureBeforeChange": "   private void _switchToSuspendedThread(boolean updateWatches) throws DebugException", "signatureAfterChange": "   private void _switchToSuspendedThread(BreakpointRequest request, boolean updateWatches) throws DebugException", "diff": ["-  private void _switchToSuspendedThread(boolean updateWatches) throws DebugException {", "+  private void _switchToSuspendedThread(BreakpointRequest request, boolean updateWatches) throws DebugException {", "-    ", "-    try {", "-      if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());", "+", "+    boolean usedBreakpointLine = false;", "+    if (request!=null) {", "+      // we have breakpoint information, use it", "+      Object property = request.getProperty(\"debugAction\");", "+      if (property != null && (property instanceof JPDABreakpoint)) {", "+        final JPDABreakpoint breakpoint = (JPDABreakpoint) property;", "+        breakpoint.update();", "+        scrollToSource(breakpoint, true);", "+        usedBreakpointLine = true;", "+      }", "-    catch (IncompatibleThreadStateException itse) {", "-      throw new UnexpectedException(itse);", "+    if (!usedBreakpointLine ) {", "+      try {", "+        if (currThread.frameCount() > 0) scrollToSource(currThread.frame(0).location());", "+      }", "+      catch (IncompatibleThreadStateException itse) {", "+        throw new UnexpectedException(itse);", "+      }"]}], "num": 28926}
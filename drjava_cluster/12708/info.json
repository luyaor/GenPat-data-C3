{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67af9f02ccf482228d741ce44b571e6a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f408c727aaac80058cc80f8eec9905", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "794ab3843272bc249648b9e2c1b10b791437e615", "commitAfterChange": "e0500d376ebb5f3bac64d9f12397b89fd17c5ef8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(ConstructorInvocation node)", "signatureAfterChange": "     public Node visit(ConstructorInvocation node)", "diff": ["-    public Object visit(ConstructorInvocation node) {", "+    public Node visit(ConstructorInvocation node) {", "-      LinkedList arguments = null; // Add parameterization <Node>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList(); // Add parameterization <Node>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b321991b7fd4e7e9374b479e576f1736", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/IdentityVisitor.java", "commitBeforeChange": "618768bff43f90070ece892c0517456399e97401", "commitAfterChange": "5df4e785713703c5888db4cb5ec4317420920fff", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     public Object visit(ConstructorInvocation node)", "signatureAfterChange": "     public Node visit(ConstructorInvocation node)", "diff": ["-    public Object visit(ConstructorInvocation node) {", "+    public Node visit(ConstructorInvocation node) {", "-      LinkedList arguments = null; // Add parameterization <Node>.", "+      LinkedList<Expression> arguments = null; // Add parameterization <Node>.", "-        arguments = new LinkedList(); // Add parameterization <Node>.", "-        Iterator it = node.getArguments().iterator();", "+        arguments = new LinkedList<Expression>(); // Add parameterization <Node>.", "+        Iterator<Expression> it = node.getArguments().iterator();", "-          arguments.add((Expression)((Expression)it.next()).acceptVisitor(this));", "+          arguments.add((Expression)it.next().acceptVisitor(this));"]}], "num": 12708}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5b92c55203417bf01d31149e1023dce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1453b90899882218834b78e2d93c8f7c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "javalanglevels/src/edu/rice/cs/javalanglevels/ExpressionTypeChecker.java", "commitBeforeChange": "f2098dc3df82d0fc4c7e17fd5e93823851356d75", "commitAfterChange": "02bb605d31bd77f6715d3d33be9295c5381484e0", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "              public void testForUninitializedArrayInstantiationOnly()", "signatureAfterChange": "              public void testForUninitializedArrayInstantiationOnly()", "diff": ["-      SourceInfo si = SourceInfo.NO_INFO;", "+      SourceInfo si = SourceInfo.NONE;", "-      //one that works--int instance index", "-      SimpleUninitializedArrayInstantiation sa1 = new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "-                                                                                            new DimensionExpressionList(si, new Expression[] {new NullLiteral(si), new NullLiteral(si), new NullLiteral(si)}));", "+      // One that works--int instance index", "+      SimpleUninitializedArrayInstantiation sa1 = ", "+        new SimpleUninitializedArrayInstantiation(si, new ArrayType(si, \"int[][][]\", ", "+                                                                    new ArrayType(si, \"int[][]\", new ArrayType(si, \"int[]\", new PrimitiveType(si, \"int\")))), ", "+                                                  new DimensionExpressionList(si, new Expression[] {new NullLiteral(si), new NullLiteral(si), new NullLiteral(si)}));", "-      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, new TypeData[] {SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData()}));", "+      TypeData[] arrayInitTypes1 =", "+        new TypeData[] { SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE.getInstanceData()};", "+      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), ", "+                   _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, arrayInitTypes1));", "-      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, new TypeData[] {SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE.getInstanceData(), SymbolData.CHAR_TYPE.getInstanceData()}));", "+      TypeData[] arrayInitTypes2 =", "+        new TypeData[] { SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.CHAR_TYPE.getInstanceData()};", "+      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), ", "+                   _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, arrayInitTypes2));", "-      //one with bad index: not instance type", "-      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, new TypeData[] {SymbolData.INT_TYPE.getInstanceData(), SymbolData.INT_TYPE, SymbolData.CHAR_TYPE.getInstanceData()}));", "+      // one with bad index: not instance type", "+      TypeData[] arrayInitTypes3 =", "+        new TypeData[] { SymbolData.INT_TYPE.getInstanceData(), ", "+                         SymbolData.INT_TYPE, ", "+                         SymbolData.CHAR_TYPE.getInstanceData()};", "+      assertEquals(\"Should return int[][][] instance\", intArray3.getInstanceData(), ", "+                   _etc.forUninitializedArrayInstantiationOnly(sa1, intArray3, arrayInitTypes3));", "-      //one with bad index: not int type", "+      // one with bad index: not int type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af651ee2c5cd5d95636b0f0b7a1732ed", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/repl/newjvm/MainJVM.java", "commitBeforeChange": "a472e97c16a8ac396038ddfed3ca06ad9cbaf2a1", "commitAfterChange": "1c71f2ec50e1716eff94d3660975e86f39311a17", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "   public void restartInterpreterJVM()", "signatureAfterChange": "   public void restartInterpreterJVM()", "diff": ["+      // headless AWT in Java 1.3 on MacOS-X", "+      // (headless AWT is not supposed to be available until 1.4)", "+      String[] jvmargs = new String[] {\"-Dcom.apple.backgroundOnly=true\"};", "-        _interpreterProcess = ExecJVM.runJVMPropogateClassPath(className, args);", "+        _interpreterProcess = ExecJVM.", "+            runJVMPropogateClassPath(className, args, jvmargs);"]}], "num": 26064}
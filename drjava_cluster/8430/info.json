{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e422926aeb6dfc3a935e856a18d5a51e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e99dbf1b3e24a7277bc050e5c121e8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "a68a174a7bf4d6a30e03be7e23d160527cbf341e", "commitAfterChange": "7d7f71637ac82cabd526a44e6c766574f76fc311", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "signatureAfterChange": "   public CompilerErrorPanel(SingleDisplayModel model, MainFrame frame)", "diff": ["+", "+", "+", "-    uiBox.add(new JPanel(),BorderLayout.CENTER);", "+", "+    JPanel midPanel = new JPanel();", "+ //nextErrorButton.setEnabled(false);", "+    nextErrorButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        _errorListPane.nextError();", "+//  prevErrorButton.setEnabled(_errorListPane.hasPrevError());", "+//  nextErrorButton.setEnabled(_errorListPane.hasNextError());", "+      }", "+    });", "+ //prevErrorButton.setEnabled(false);", "+    prevErrorButton.addActionListener(new ActionListener() {", "+      public void actionPerformed(ActionEvent e) {", "+        _errorListPane.prevError();", "+//  prevErrorButton.setEnabled(_errorListPane.hasPrevError());", "+//  nextErrorButton.setEnabled(_errorListPane.hasNextError());", "+      }", "+    });", "+    midPanel.setLayout(new FlowLayout());", "+    midPanel.add(prevErrorButton);", "+    midPanel.add(nextErrorButton);", "+", "+    uiBox.add(midPanel,BorderLayout.CENTER);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399f05bc7274aaa691b3a3384c918ecd", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f25bc20d2dd4058b4cf2bf5f693569e62fb40d6b", "commitAfterChange": "2c8ce62ae485e784b2bec820cb7bf72ad52ae36f", "methodNumberBeforeChange": 798, "methodNumberAfterChange": 798, "signatureBeforeChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "signatureAfterChange": "   public void installModalWindowAdapter(final Window w, final Runnable1<? super WindowEvent> toFrontAction,                                         final Runnable1<? super WindowEvent> closeAction)", "diff": ["+        final WindowAdapter regainFrontAfterNative = new WindowAdapter() {", "+          public void windowActivated(WindowEvent we) {", "+            // remove from the three windows this is installed on", "+            MainFrame.this.removeWindowListener(this);", "+            _tabbedPanesFrame.removeWindowListener(this);", "+            _debugFrame.removeWindowListener(this);", "+            // if the window that lost focus because of a native application window", "+            // is still the modal window adapter owner, put it back in front", "+            if (_modalWindowAdapterOwner==w) {", "+              w.toFront();", "+              w.requestFocus();", "+              toFrontAction.run(we);", "+            }", "+          }", "+        };", "-          if (opposite==null) { return; /* probably a native application window, not DrJava */ }", "+          if (opposite==null) {", "+            // Probably a native application window, not DrJava.", "+            // When the user switches back to DrJava, the user may select", "+            // a different window to be on top, but we want w to be on top", "+            // install a listener on MainFrame, the detached panes window, and the", "+            // detached debugger that puts w back on top if one of those windows", "+            // gets selected and w is still the modal window adapter owner.", "+            // This isn't perfect, since the user may select a window other than", "+            // those three, but it is good enough in most cases since those three", "+            // windows are the biggest windows.", "+            MainFrame.this.addWindowListener(regainFrontAfterNative);", "+            _tabbedPanesFrame.addWindowListener(regainFrontAfterNative);", "+            _debugFrame.addWindowListener(regainFrontAfterNative);", "+            return;", "+          }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfcaabb4352412eaf17411bdd852a14c", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/DefinitionsPane.java", "commitBeforeChange": "88b78fb542b0969283ae161ecd8928b9b81244e4", "commitAfterChange": "28edcfb1557b7084eced62028c2fe7429bdf3ed1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "   private void createPopupMenu()", "signatureAfterChange": "   private void createPopupMenu()", "diff": ["-    if (_mainFrame.getModel().getDebugger() != null) {", "+    JMenuItem commentLinesItem = new JMenuItem(\"Comment Out Line(s)\");", "+    commentLinesItem.addActionListener ( new AbstractAction() {", "+      public void actionPerformed( ActionEvent ae) {", "+        _commentLines();", "+      }", "+    });", "+    _popMenu.add(commentLinesItem);", "+    ", "+    JMenuItem unCommentLinesItem = new JMenuItem(\"Uncomment Line(s)\");", "+    unCommentLinesItem.addActionListener ( new AbstractAction() {", "+      public void actionPerformed( ActionEvent ae) {", "+        _unCommentLines();", "+      }", "+    });", "+    _popMenu.add(unCommentLinesItem);", "+    ", "+    if (_mainFrame.getModel().getDebugger().isAvailable()) {"]}], "num": 8430}
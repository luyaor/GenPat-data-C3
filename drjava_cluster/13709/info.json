{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f6c82252e4a5e352d3e6bea63bc97e4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5f1905261e37d11ec6947f79fe2fa7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/edu/rice/cs/dynamicjava/interpreter/ExpressionChecker.java", "commitBeforeChange": "875709ea758d694dda7555b8eeb2e15fa58e98c5", "commitAfterChange": "d29db164117e7452d6023bc6a73abe9d53f7d65b", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 2, "signatureBeforeChange": "   @Override public Type visit(ReferenceTypeName node)", "signatureAfterChange": "      public Type check(Expression e, Type expected)", "diff": ["+  public Type check(Expression e, Type expected) {", "+    return e.acceptVisitor(new ExpressionVisitor(Option.some(expected)));", "+  }", "-   */", "-  @Override public Type visit(ReferenceTypeName node) {", "-    Iterator<? extends IdentifierToken> ids = node.getIdentifiers().iterator();", "-    String name = \"\";", "-    Type t = null;", "-    boolean first = true;", "-    while (t == null && ids.hasNext()) {", "-      if (!first) { name += \".\"; }", "-      first = false;", "-      name += ids.next().image();", "-      ", "-        DJClass c = context.getTopLevelClass(name, ts);", "-        if (c != null) { t = ts.makeClassType(c); }", "-        else {", "-          t = context.getTypeVariable(name, ts);", "-          if (t == null) {", "-            Type outer = context.typeContainingMemberClass(name, ts);", "-            if (outer != null) { t = ts.lookupClass(outer, name, IterUtil.<Type>empty()); }", "-          }", "-        }", "-      catch (AmbiguousNameException e) { throw new ExecutionError(\"ambiguous.name\", node); }", "-      catch (InvalidTargetException e) { throw new RuntimeException(\"context produced bad type\"); }", "-      catch (InvalidTypeArgumentException e) { throw new ExecutionError(\"type.argument.arity\", node); }", "-      catch (UnmatchedLookupException e) {", "-        if (e.matches() == 0) { throw new ExecutionError(\"undefined.name.noinfo\", node); }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "-    while (ids.hasNext()) {", "-      try { t = ts.lookupClass(t, ids.next().image(), IterUtil.<Type>empty()); }", "-      catch (InvalidTargetException e) { throw new RuntimeException(\"lookup produced bad type\"); }", "-      catch (InvalidTypeArgumentException e) { throw new ExecutionError(\"type.argument.arity\", node); }", "-      catch (UnmatchedLookupException e) {", "-        if (e.matches() == 0) { throw new ExecutionError(\"undefined.name.noinfo\", node); }", "-        else { throw new ExecutionError(\"ambiguous.name\", node); }", "-      }", "-    }", "-    ", "-    if (t == null) { ", "-      setErrorStrings(node, node.getRepresentation());", "-      throw new ExecutionError(\"undefined.class\", node);", "-    }", "-    return setType(node, t);", "-  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec60c08202913477bed142a694498954", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/concurrent/ConcurrentUtil.java", "commitBeforeChange": "b23111eb475b92740f35af8853527f4b3b92f815", "commitAfterChange": "3ea6a37aa7347e12727171dd92a2bb3861e3967f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 22, "signatureBeforeChange": "          protected R getValue() throws InterruptedException, InvocationTargetException", "signatureAfterChange": "   public static <I, R>     IncrementalTaskController<I, R> computeInThread(IncrementalTask<? extends I, ? extends R> task,                                                      boolean start, boolean ignoreIntermediate)", "diff": ["-    ", "-    protected R getValue() throws InterruptedException, InvocationTargetException {", "-      start(); // make sure the thread is running", "-      _t.join(); // guarantees that the result and exception are set", "-      if (_exception != null) { throw new InvocationTargetException(_exception); }", "-      else { return _result; }", "-    }", "+   */", "+  public static <I, R>", "+    IncrementalTaskController<I, R> computeInThread(IncrementalTask<? extends I, ? extends R> task, ", "+                                                    boolean start, boolean ignoreIntermediate) {", "+    return computeWithExecutor(task, THREAD_EXECUTOR, start, ignoreIntermediate);"]}], "num": 13709}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6196903daf0a194c3abb036d0a5bc43", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "686936a0ac680136719e951ed04ea5b7", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorCaretListener.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "   public void updateHighlight(int curPos)", "diff": ["-    if (!_frame.isCompilerTabSelected()) {", "+    if (!tabSelected()) {", "-    ", "-    //DrJava.consoleOut().println(\"updateHighlight: \" + curPos);", "-    // check if the dot is on a line with an error.", "-    // Find the first error that is on or after the dot. If this comes", "-    // before the newline after the dot, it's on the same line.", "-    int errorAfter; // index of the first error after the dot", "-    //if (_positions == null) {", "-    //  DrJava.consoleOut().println(\"positions array is null!\");", "-    //}", "-    for (errorAfter = 0; errorAfter < _positions.length; errorAfter++) {", "-      if (_positions[errorAfter] == null) {", "-        // Something is wrong here, but this is happening on warnings!", "-        //  Need to figure out why...", "-        //DrJava.consoleOut().println(\"Found a null position (1)!  index: \" + errorAfter);", "-        return;", "-      }", "-      if (_positions[errorAfter].getOffset() >= curPos) {", "-        break;", "-      }", "-    }", "-    // index of the first error before the dot", "-    int errorBefore = errorAfter - 1;", "+    CompilerErrorModel model =  getErrorModel();", "-    // this will be set to what we want to select, or -1 if nothing", "-    int shouldSelect = -1;", "-", "-    if (errorBefore >= 0) { // there's an error before the dot", "-      Position p = _positions[errorBefore];", "-      //if (p == null) {", "-      //  DrJava.consoleOut().println(\"Found a null position (2)!  index: \" + errorBefore);", "-      //}", "-      int errPos = _positions[errorBefore].getOffset();", "-      try {", "-        String betweenDotAndErr = _document.getText(errPos, curPos - errPos);", "-", "-        if (betweenDotAndErr.indexOf('\\n') == -1) {", "-          shouldSelect = errorBefore;", "-        }", "-      }", "-      catch (BadLocationException willNeverHappen) {}", "-    }", "-", "-    if ((shouldSelect == -1) && (errorAfter != _positions.length)) {", "-      // we found an error on/after the dot", "-      // if there's a newline between dot and error,", "-      // then it's not on this line", "-      int errPos = _positions[errorAfter].getOffset();", "-      try {", "-        String betweenDotAndErr = _document.getText(curPos, errPos - curPos);", "-", "-        if (betweenDotAndErr.indexOf('\\n') == -1) {", "-          shouldSelect = errorAfter;", "-        }", "-      }", "-      catch (BadLocationException willNeverHappen) {}", "-    }", "+    CompilerError error = model.getErrorAtOffset(_openDoc, curPos);", "-    if (shouldSelect == -1) {", "+    if (error == null) {", "-    }", "-    else {", "+    } else {", "-        _highlightErrorInSource(shouldSelect);", "+        _highlightErrorInSource(model.getPosition(error));", "-      CompilerError[] errors = _model.getErrorsWithPositions();", "-      _errorListPane.selectItem(errors[shouldSelect]);", "+      _errorListPane.selectItem(error);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986fa389b1a74254f90a8b6bac5304db", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/CompilerErrorPanel.java", "commitBeforeChange": "2d9fbb20cf4e5abce48c17ce73e0b3fc145a0b02", "commitAfterChange": "a38cc404cfc20c15b821e4ab4c91fac16fc2e12b", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void caretUpdate(CaretEvent evt)", "signatureAfterChange": "     private int _getIndexForError(CompilerError error)", "diff": ["+     */", "+    private int _getIndexForError(CompilerError error) {", "+      if (error == null) return -1;", "+", "+      int index = -1;", "+      for (int i = 0; i < _errorListPositions.length; i++) {", "+        CompilerError e = (CompilerError)", "+          _errorTable.get(_errorListPositions[i]);", "+        if (error.equals(e)) {", "+          index = i;", "+          break;", "+        }", "+      }", "+      return index;", "+    }", "-  private class DefinitionsCaretListener implements CaretListener {", "-    public void caretUpdate(CaretEvent evt) {", "-      if (_errorPositions.length == 0) {", "-        return;", "-      }", "-      // Now we can assume at least one error.", "-      int curPos = evt.getDot();", "-      // check if the dot is on a line with an error.", "-      // Find the first error that is on or after the dot. If this comes", "-      // before the newline after the dot, it's on the same line.", "-      int errorAfter; // index of the first error after the dot", "-      for (errorAfter = 0; errorAfter < _errorPositions.length; errorAfter++) {", "-        if (_errorPositions[errorAfter].getOffset() >= curPos) {", "-          break;", "-", "-      // index of the first error before the dot", "-      int errorBefore = errorAfter - 1;", "-", "-      // this will be set to what we want to select, or -1 if nothing", "-      int shouldSelect = -1;", "-", "-      if (errorBefore >= 0) { // there's an error before the dot", "-        int errPos = _errorPositions[errorBefore].getOffset();", "-        try {", "-          String betweenDotAndErr =", "-            _definitionsPane.getDocument().getText(errPos, curPos - errPos);", "-", "-          if (betweenDotAndErr.indexOf('\\n') == -1) {", "-            shouldSelect = errorBefore;", "-          }", "-        } ", "-        catch (BadLocationException willNeverHappen) {}", "-      }", "-", "-      if ((shouldSelect == -1) && (errorAfter != _errorPositions.length)) {", "-        // we found an error on/after the dot", "-        // if there's a newline between dot and error,", "-        // then it's not on this line", "-        int errPos = _errorPositions[errorAfter].getOffset();", "-        try {", "-          String betweenDotAndErr =", "-            _definitionsPane.getDocument().getText(curPos, errPos - curPos);", "-", "-          if (betweenDotAndErr.indexOf('\\n') == -1) {", "-            shouldSelect = errorAfter;", "-          }", "-        } ", "-        catch (BadLocationException willNeverHappen) {}", "-      }", "-", "-      // if no error is on this line, select the (none) item", "-      if (shouldSelect == -1) {", "-        _errorListPane.selectNothing();", "-      }", "-        // No need to move the caret since it's already here!", "-        _highlightErrorInSource(shouldSelect);", "-        // Select item wants the error number overall, including", "-        // accounting for errors with no source location", "-        _errorListPane.selectItem(shouldSelect +_errorsWithoutPositions.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ade22326314da10c16cc3605b84e74ca", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/JUnitErrorCaretListener.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "   public void updateHighlight(int curPos)", "signatureAfterChange": "    protected boolean tabSelected()", "diff": ["-   */", "-  public void updateHighlight(int curPos) {", "-    // Don't highlight unless test tab selected", "-    if (!_frame.isTestTabSelected()) {", "-      _errorListPane.selectNothing();", "-      return;", "-    }", "-", "-    // check if the dot is on a line with an error.", "-    // Find the first error that is on or after the dot. If this comes", "-    // before the newline after the dot, it's on the same line.", "-    int errorAfter; // index of the first error after the dot", "-    for (errorAfter = 0; errorAfter < _positions.length; errorAfter++) {   ", "-      Position pos = _positions[errorAfter];", "-      if (pos == null) {", "-        return;", "-      }", "-      if (pos.getOffset() >= curPos) {", "-        break;", "-      }", "-    }", "-   ", "-    // index of the first error before the dot", "-    int errorBefore = errorAfter - 1;", "-", "-    // this will be set to what we want to select, or -1 if nothing", "-    int shouldSelect = -1;", "-", "-    if (errorBefore >= 0) { // there's an error before the dot", "-      int errPos = _positions[errorBefore].getOffset();", "-      //System.out.println(\"Error before: \" + _positions[errorBefore] + _positions[errorBefore].getOffset());", "-      try {", "-        String betweenDotAndErr = _document.getText(errPos, curPos - errPos);", "-", "-        if (betweenDotAndErr.indexOf('\\n') == -1) {", "-          shouldSelect = errorBefore;", "-        }", "-      }", "-      catch (BadLocationException willNeverHappen) {}", "-    }", "-    ", "-    if ((shouldSelect == -1) && (errorAfter != _positions.length)) {", "-      // we found an error on/after the dot", "-      // if there's a newline between dot and error,", "-      // then it's not on this line", "-      int errPos = _positions[errorAfter].getOffset();", "-      //System.out.println(\"Error on or after:\" + _positions[errorAfter] + _positions[errorAfter].getOffset());", "-      try {", "-        String betweenDotAndErr = _document.getText(curPos, errPos - curPos);", "-", "-        if (betweenDotAndErr.indexOf('\\n') == -1) {", "-          shouldSelect = errorAfter;", "-        }", "-      }", "-      catch (BadLocationException willNeverHappen) {}", "-    }", "-", "-    // if no error is on this line, select the (none) item", "-    if (shouldSelect == -1) {", "-      _errorListPane.selectNothing();", "-    }", "-    else {", "-      ", "-      // Select item wants the JUnitError", "-      JUnitError[] errors = _model.getErrorsWithPositions();", "-      try {", "-        _errorListPane.selectItem(errors[shouldSelect]);", "-        ", "-        if (_errorListPane.shouldShowHighlightsInSource()) {", "-          // No need to move the caret since it's already here!", "-          _highlightErrorInSource(shouldSelect);", "-        }", "-      }", "-      catch (IllegalArgumentException e) {", "-        // A new test could perhaps have started before this listener", "-        //  has been reset, so be prepared if it throws an exception.", "-        //  We'll ignore it here, so nothing gets highlighted.", "-      }", "-    }", "-", "-  }", "+  protected boolean tabSelected(){", "+    return _frame.isTestTabSelected();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc458791469333c224f642c7d2cbcdbf", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/CompilerErrorModel.java", "commitBeforeChange": "962cae132b304832e8ad8ca23872798ac7d84d3c", "commitAfterChange": "8958ac741e416ecbae85abc43f8b198196076bac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "   public CompilerErrorModel()", "signatureAfterChange": "   public T getErrorAtOffset(OpenDefinitionsDocument odd, int offset)", "diff": ["-   */", "-  public CompilerErrorModel() {", "-    this(new CompilerError[0], null, null);", "-  }", "+   */", "+  public T getErrorAtOffset(OpenDefinitionsDocument odd, int offset) {", "+    File file = null;", "+    try {", "+      file = odd.getFile();", "+    } catch (IllegalStateException e) {", "+      return null;", "+    } catch (FileMovedException e) {", "+      file = e.getFile();", "+    }", "+", "+", "+    StartAndEndIndex saei = _filesToIndexes.get(file);", "+    if (saei == null){", "+      return null;", "+    }", "+    int start = saei.getStartPos();", "+    int end = saei.getEndPos();", "+    if (start == end){", "+      return null;", "+    }", "+", "+    // check if the dot is on a line with an error.", "+    // Find the first error that is on or after the dot. If this comes", "+    // before the newline after the dot, it's on the same line.", "+    int errorAfter; // index of the first error after the dot", "+    for (errorAfter = start; errorAfter < end; errorAfter++) {", "+      if (_positions[errorAfter] == null) {", "+        //This indicates something wrong, but it was happening before so...", "+        return null;", "+      }", "+      if (_positions[errorAfter].getOffset() >=offset) {", "+        break;", "+      }", "+    }", "+", "+    // index of the first error before the dot", "+    int errorBefore = errorAfter - 1;", "+", "+    // this will be set to what we want to select, or -1 if nothing", "+    int shouldSelect = -1;", "+", "+    if (errorBefore >= start) { // there's an error before the dot", "+      int errPos = _positions[errorBefore].getOffset();", "+      try {", "+        String betweenDotAndErr = odd.getDocument().getText(errPos, offset - errPos);", "+", "+        if (betweenDotAndErr.indexOf('\\n') == -1) {", "+          shouldSelect = errorBefore;", "+        }", "+      }", "+      catch (BadLocationException willNeverHappen) {", "+        throw new UnexpectedException(willNeverHappen);", "+      }", "+    }", "+", "+    if ((shouldSelect == -1) && (errorAfter != _positions.length)) {", "+      // we found an error on/after the dot", "+      // if there's a newline between dot and error,", "+      // then it's not on this line", "+      int errPos = _positions[errorAfter].getOffset();", "+      try {", "+        String betweenDotAndErr = odd.getDocument().getText(offset, errPos - offset);", "+", "+        if (betweenDotAndErr.indexOf('\\n') == -1) {", "+          shouldSelect = errorAfter;", "+        }", "+      }", "+      catch (BadLocationException willNeverHappen) {", "+        throw new UnexpectedException(willNeverHappen);", "+      }", "+    }", "+", "+    if (shouldSelect == -1){", "+      return null;", "+    } else {", "+      return _errors[shouldSelect];", "+    }", "+  }"]}], "num": 30162}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11976d430bf139af02a1e0c67c0650b4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27cb474059b960f428bfa64932a71b87", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "   public static <T> Command2<T, Object> promote(final Command1<? super T> c)", "signatureAfterChange": "   public static <T> Runnable2<T, Object> promote(final Runnable1<? super T> r)", "diff": ["-  /** @return A {@code Command2} equivalent to {@code c} with an additional, ignored argument */", "-  public static <T> Command2<T, Object> promote(final Command1<? super T> c) {", "-    return new Command2<T, Object>() {", "-      public void run(T arg1, Object arg2) { c.run(arg1); }", "+  /** @return A {@code Runnable2} equivalent to {@code r} with an additional, ignored argument */", "+  public static <T> Runnable2<T, Object> promote(final Runnable1<? super T> r) {", "+    return new Runnable2<T, Object>() {", "+      public void run(T arg1, Object arg2) { r.run(arg1); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0f894c976d3fecb86f18113083695fc", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public static <T1, T2> Command3<T1, T2, Object> promote(final Command2<? super T1, ? super T2> c)", "signatureAfterChange": "   public static <T1, T2> Runnable3<T1, T2, Object> promote(final Runnable2<? super T1, ? super T2> r)", "diff": ["-  /** @return A {@code Command3} equivalent to {@code c} with an additional, ignored argument */", "-  public static <T1, T2> Command3<T1, T2, Object> promote(final Command2<? super T1, ? super T2> c) {", "-    return new Command3<T1, T2, Object>() {", "-      public void run(T1 arg1, T2 arg2, Object arg3) { c.run(arg1, arg2); }", "+  /** @return A {@code Runnable3} equivalent to {@code r} with an additional, ignored argument */", "+  public static <T1, T2> Runnable3<T1, T2, Object> promote(final Runnable2<? super T1, ? super T2> r) {", "+    return new Runnable3<T1, T2, Object>() {", "+      public void run(T1 arg1, T2 arg2, Object arg3) { r.run(arg1, arg2); }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef0656a97d8bde4fcc2e93dad82872fb", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/lambda/LambdaUtil.java", "commitBeforeChange": "ff9333e71e149a259aa78828cab4c9a697c57c55", "commitAfterChange": "9063c30c220a374fd05cad2179b7b27d5702591e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "   public static Command1<Object> promote(final Command c)", "signatureAfterChange": "   public static Runnable1<Object> promote(final Runnable r)", "diff": ["-  /** @return A {@code Command1} equivalent to {@code c} with an ignored argument */", "-  public static Command1<Object> promote(final Command c) {", "-    return new Command1<Object>() {", "-      public void run(Object arg) { c.run(); }", "+  /** @return A {@code Runnable1} equivalent to {@code r} with an ignored argument */", "+  public static Runnable1<Object> promote(final Runnable r) {", "+    return new Runnable1<Object>() {", "+      public void run(Object arg) { r.run(); }"]}], "num": 11997}
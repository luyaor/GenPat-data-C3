{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c62c1a81248891329c9dd5ba10ed9d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e5c78852fa044545e7b458876e8cf58", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "d177c7b252113934f48a076489797b39dc0f639d", "commitAfterChange": "a58ec688d3981da4575e2c6fb686db26b70ae68b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public Class visit(ForStatement node)", "signatureAfterChange": "   public Class visit(ForStatement node)", "diff": ["-    Node cond = node.getCondition();", "+    Expression cond = node.getCondition();", "-      // Check the condition", "-      if (cond.acceptVisitor(this) != boolean.class) {", "+      ", "+      Class type = cond.acceptVisitor(this);", "+      if (type != boolean.class && type != Boolean.class) {", "+      }", "+      ", "+      // Auto unbox: Boolean->boolean", "+      if (type == Boolean.class) {", "+        // add method call on expression:", "+        //   \"cond.booleanValue();\"", "+        node.setCondition(_unbox(cond, type));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3796c5283ead90402eaa6c9c856c5c3", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "dynamicjava/src/koala/dynamicjava/interpreter/TypeChecker.java", "commitBeforeChange": "9a249358791ef18c654eafdb246c8cfb93a3ab2d", "commitAfterChange": "4dc5ace86e9b2c575f2b09ebb783f4d8d9db5e9a", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "   public Class visit(NotExpression node)", "signatureAfterChange": "   public Class visit(NotExpression node)", "diff": ["-    Node  n = node.getExpression();", "-    Class c = n.acceptVisitor(this);", "+    Expression exp = node.getExpression();", "+    Class c = exp.acceptVisitor(this);", "-    if (c != boolean.class) {", "+    if (c != boolean.class && c != Boolean.class) {", "-    node.setProperty(NodeProperties.TYPE, c);", "+    node.setProperty(NodeProperties.TYPE, boolean.class);", "+", "+    // Auto-unbox, if necessary", "+    if (_isBoxingType(c)) {", "+      node.setExpression(_unbox(exp, c));", "+    }", "-    if (n.hasProperty(NodeProperties.VALUE)) {", "-      if (((Boolean)n.getProperty(NodeProperties.VALUE)).booleanValue()) {", "+    if (exp.hasProperty(NodeProperties.VALUE)) {", "+      if (((Boolean) exp.getProperty(NodeProperties.VALUE)).booleanValue()) {", "-      } else {", "+      } ", "+      else {", "-    return c;", "+    return boolean.class;"]}], "num": 6163}
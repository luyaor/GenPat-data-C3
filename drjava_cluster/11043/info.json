{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0356b1afd5d6db83332b9d4dd9b51a62", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0053a9cf2df014bf7ac8de3742f91198", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/util/StringOps.java", "commitBeforeChange": "7fd25882874ad9a06ac74fda13ef9cc77e52813e", "commitAfterChange": "028b13db63615f9cda7227ddd738bbfc3e1c04ec", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "   public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter)", "signatureAfterChange": "   public static String replaceVariables(String str, final PropertyMaps props, final Lambda<String,DrJavaProperty> getter)", "diff": ["-  public static String replaceVariables(String str, PropertyMaps props, Lambda<String,DrJavaProperty> getter) {", "+  public static String replaceVariables(String str, final PropertyMaps props, final Lambda<String,DrJavaProperty> getter) {", "-          boolean found = false;", "-          for(String category: props.getCategories()) {", "-            DrJavaProperty p = props.getProperty(category, key);", "-            if (p!=null) {", "-              // found property name", "-              p.resetAttributes();", "-              ", "-              // if we have a list of attributes", "-              try {", "-                if (attrList.length()>0) {", "-                  BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList), '$');", "-                  atok.wordRange(0,255);", "-                  atok.whitespaceRange(0,32); ", "-                  atok.addQuotes(\"\\\"\", \"\\\"\");", "-                  atok.addQuotes(\"${\", \"}\");", "-                  atok.addKeyword(\";\");", "-                  atok.addKeyword(\"=\");", "-                  // LOG.log(\"\\tProcessing AttrList\");", "-                  String n = null;", "-                  while((n=atok.getNextToken())!=null) {", "-                    if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.NORMAL) ||", "-                        n.equals(\";\") || n.equals(\"=\") || n.startsWith(\"\\\"\")) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected name, but was \"+n);", "-                    }", "-                    String name = n;", "-                    // LOG.log(\"\\t\\tname = '\"+name+\"'\");", "-                    n = atok.getNextToken();", "-                    if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\"=\"))) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected =, but was \"+n);", "-                    }", "-                    // LOG.log(\"\\t\\tread '='\");", "-                    n = atok.getNextToken();", "-                    if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.QUOTED) || (!n.startsWith(\"\\\"\"))) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected \\\", but was \"+n);", "-                    }", "-                    String value = \"\";", "-                    if (n.length()>1) {", "-                      value = n.substring(1,n.length()-1);", "-                      // LOG.log(\"\\t\\tvalue = '\"+value+\"'\");", "-                    }", "-                    n = atok.getNextToken();", "-                    if (((n!=null) && ((atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\";\")))) ||", "-                        ((n==null) && (atok.token()!=BalancingStreamTokenizer.Token.END))) {", "-                      throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "-                    }", "-                    // LOG.log(\"\\t\\tread ';' or EOF\");", "-                    // processed correctly", "-                    // LOG.log(\"\\t\\treplacing variables in '\"+value+\"'...\");", "-                    String replacedValue = replaceVariables(value, props, getter);", "-                    // LOG.log(\"\\t\\treplaced value is '\"+replacedValue+\"'\");", "-                    ", "-                    p.setAttribute(name, replacedValue);", "-                    ", "-                    if (n==null) { break; }", "+          DrJavaProperty p = props.getProperty(key);", "+          if (p!=null) {", "+            // found property name", "+            p.resetAttributes();", "+            ", "+            // if we have a list of attributes", "+            try {", "+              if (attrList.length()>0) {", "+                BalancingStreamTokenizer atok = new BalancingStreamTokenizer(new StringReader(attrList), '$');", "+                atok.wordRange(0,255);", "+                atok.whitespaceRange(0,32); ", "+                atok.addQuotes(\"\\\"\", \"\\\"\");", "+                atok.addQuotes(\"${\", \"}\");", "+                atok.addKeyword(\";\");", "+                atok.addKeyword(\"=\");", "+                // LOG.log(\"\\tProcessing AttrList\");", "+                String n = null;", "+                HashMap<String,String> attrs = new HashMap<String,String>();", "+                while((n=atok.getNextToken())!=null) {", "+                  if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.NORMAL) ||", "+                      n.equals(\";\") || n.equals(\"=\") || n.startsWith(\"\\\"\")) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected name, but was \"+n);", "+                  String name = n;", "+                  // LOG.log(\"\\t\\tname = '\"+name+\"'\");", "+                  n = atok.getNextToken();", "+                  if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\"=\"))) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected =, but was \"+n);", "+                  }", "+                  // LOG.log(\"\\t\\tread '='\");", "+                  n = atok.getNextToken();", "+                  if ((n==null) || (atok.token()!=BalancingStreamTokenizer.Token.QUOTED) || (!n.startsWith(\"\\\"\"))) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key+\"; expected \\\", but was \"+n);", "+                  }", "+                  String value = \"\";", "+                  if (n.length()>1) {", "+                    value = n.substring(1,n.length()-1);", "+                    // LOG.log(\"\\t\\tvalue = '\"+value+\"'\");", "+                  }", "+                  n = atok.getNextToken();", "+                  if (((n!=null) && ((atok.token()!=BalancingStreamTokenizer.Token.KEYWORD) || (!n.equals(\";\")))) ||", "+                      ((n==null) && (atok.token()!=BalancingStreamTokenizer.Token.END))) {", "+                    throw new IllegalArgumentException(\"Unknown attribute list format for property \"+key);", "+                  }", "+                  // LOG.log(\"\\t\\tread ';' or EOF\");", "+                  // processed correctly", "+                  // LOG.log(\"\\t\\treplacing variables in '\"+value+\"'...\");", "+                  // String replacedValue = replaceVariables(value, props, getter);", "+                  // LOG.log(\"\\t\\treplaced value is '\"+replacedValue+\"'\");", "+                  attrs.put(name,value);", "+                  // p.setAttribute(name, replacedValue);", "+                  ", "+                  if (n==null) { break; }", "-                // append the value of the property, e.g. /home/user instead of \"${property.name}\"", "-                String finalValue = getter.apply(p);", "-                // LOG.log(\"\\tfinal value: '\"+finalValue+\"'\");", "-                found = true;", "-                sb.append(finalValue);", "-              }              ", "-              catch(IllegalArgumentException e) {", "-                sb.append(\"<-- Error: \"+e.getMessage()+\" -->\");", "+                p.setAttributes(attrs, new Lambda<String,String>() {", "+                  public String apply(String param) {", "+                    return replaceVariables(param, props, getter);", "+                  }", "+                });", "-              if (found) { break; }", "-              continue;", "+              // append the value of the property, e.g. /home/user instead of \"${property.name}\"", "+              String finalValue = getter.apply(p);", "+              // LOG.log(\"\\tfinal value: '\"+finalValue+\"'\");", "+              sb.append(finalValue);", "+            }              ", "+            catch(IllegalArgumentException e) {", "+              sb.append(\"<-- Error: \"+e.getMessage()+\" -->\");", "-            if (found) { break; }", "-          if (!found) {", "+          else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502ae12bf046262b0fd85e16c61a6ad8", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/model/compiler/JavacCompiler.java", "commitBeforeChange": "a0fae01c3fc47347d8f40022743d4545d81cb1cb", "commitAfterChange": "7f27d4def62ff1bda42279f1d632d1636f2811d4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "   public static String transformRunCommand(String s)", "signatureAfterChange": "   public static String transformRunCommand(String s)", "diff": ["-  // If c), then DrJava executes MyClass.main (traditional java behavior).", "-  public static String transformRunCommand(String s) {", "-    final StringBuilder argsString = new StringBuilder();", "-    boolean seenArg = false;", "-      String t = tokens.get(i); // with quotes", "-      ", "-      if (seenArg) argsString.append(\",\");", "-      else seenArg = true;", "-      argsString.append(t);", "-    StringBuilder command = new StringBuilder();", "-    ", "-    command.append(\"{\\n\"+", "-       \"boolean isProgram = false;\\n\" +", "-       \"boolean isApplet = false;\\n\" +", "-       \"Class c = \").append(className).append(\".class;\\n\" +", "-       \"while(c != null) {\\n\" +", "-       \"  if (\\\"acm.program.Program\\\".equals(c.getName()) ||\\n\" +", "-       \"      \\\"acm.graphics.GTurtle\\\".equals(c.getName())) { isProgram = true; break; }\\n\" +", "-       \"  c = c.getSuperclass();\\n\" +", "-       \"}\\n\" +", "-       \"c = \").append(className).append(\".class;\\n\" +", "-       \"if (!isProgram) {\\n\" +", "-       \"  try {\\n\" +", "-       \"    // if this doesn't throw, c is a subclass of Applet\\n\" +", "-       \"    c.asSubclass(java.applet.Applet.class);\\n\" +", "-       \"    isApplet = true;\\n\" +", "-       \"  } catch(ClassCastException cce) { }\\n\" +", "-       \"}\\n\" +", "-       \"java.lang.reflect.Method m = null;\\n\" +", "-       \"String[] args = new String[] {\").append(argsString.toString()).append(\"};\\n\" +", "-       \"if (isApplet) {\\n\" +", "-       \"  try {\\n\" +", "-       \"    m = c.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "-       \"    if (!m.getReturnType().equals(void.class)) { m = null; }\\n\" +", "-       \"  }\\n\" +", "-       \"  catch (java.lang.NoSuchMethodException e) { m = null; }\\n\" +", "-       \"  if (m==null) {\\n\" +", "-       \"    java.applet.Applet instance = null;\\n\" +", "-       \"    boolean fail = false;\\n\");", "-    if (args.length==0) {", "-      command.append(", "-       \"    try {\\n\" +", "-       \"      // try default (nullary) constructor first\\n\" +", "-       \"      java.lang.reflect.Constructor ctor = c.getConstructor();\\n\" +", "-       \"      instance = java.applet.Applet.class.cast(ctor.newInstance());\\n\" +", "-       \"    }\\n\" +", "-       \"    catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "-       \"    catch(InstantiationException ie) { instance = null; }\\n\" +", "-       \"    catch(IllegalAccessException iae) { instance = null; }\\n\" +", "-       \"    catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"      if (ite.getCause()!=null) {\\n\" +", "-       \"        throw ite.getCause();\\n\" +", "-       \"      }\\n\" +", "-       \"      else {\\n\" +", "-       \"        System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"      }\\n\" +", "-       \"    }\\n\" +", "-       \"    if (instance==null) {\\n\" +", "-       \"      try {\\n\" +", "-       \"        // try String[] constructor next\\n\" +", "-       \"        java.lang.reflect.Constructor ctor = c.getConstructor(String[].class);\\n\" +", "-       \"        instance = java.applet.Applet.class.cast(ctor.newInstance(new Object[] { new String[0] }));\\n\" +", "-       \"      }\\n\" +", "-       \"      catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "-       \"      catch(InstantiationException ie) { instance = null; }\\n\" +", "-       \"      catch(IllegalAccessException iae) { instance = null; }\\n\" +", "-       \"      catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"        if (ite.getCause()!=null) {\\n\" +", "-       \"          throw ite.getCause();\\n\" +", "-       \"        }\\n\" +", "-       \"        else {\\n\" +", "-       \"          System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"          fail = true;\\n\" +", "-       \"        }\\n\" +", "-       \"      }\\n\" +", "-       \"    }\\n\" +", "-       \"    if (!fail && (instance==null)) {\\n\" +", "-       \"      System.err.println(\\\"Error: This applet does not have a default constructor or a constructor \\\"+\\n\" +", "-       \"                         \\\"accepting String[].\\\");\\n\" +", "-       \"      fail = true;\\n\" +", "-       \"    }\\n\");", "-      command.append(", "-       \"    try {\\n\" +", "-       \"      // try String[] constructor\\n\" +", "-       \"      java.lang.reflect.Constructor ctor = c.getConstructor(String[].class);\\n\" +", "-       \"      instance = java.applet.Applet.class.cast(ctor.newInstance(new Object[] { args }));\\n\" +", "-       \"    }\\n\" +", "-       \"    catch(NoSuchMethodException nsme) { instance = null; }\\n\" +", "-       \"    catch(InstantiationException ie) { instance = null; }\\n\" +", "-       \"    catch(IllegalAccessException iae) { instance = null; }\\n\" +", "-       \"    catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"      if (ite.getCause()!=null) {\\n\" +", "-       \"        throw ite.getCause();\\n\" +", "-       \"      }\\n\" +", "-       \"      else {\\n\" +", "-       \"        System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"        fail = true;\\n\" +", "-       \"      }\\n\" +", "-       \"    }\\n\" +", "-       \"    if (!fail && (instance==null)) {\\n\" +", "-       \"      System.err.println(\\\"Error: This applet does not have a constructor accepting String[].\\\");\\n\" +", "-       \"      fail = true;\\n\" +", "-       \"    }\\n\");", "-    command.append(", "-       \"    if (!fail) { edu.rice.cs.plt.swing.SwingUtil.showApplet(instance, 400, 300); }\\n\" +", "-       \"  } // if (m==null)\\n\" +", "-       \"} // if (isApplet)\\n\" +", "-       \"else {\\n\" +", "-       \"  try {\\n\" +", "-       \"    m = c.getMethod(\\\"main\\\", java.lang.String[].class);\\n\" +", "-       \"    if (!m.getReturnType().equals(void.class)) {\\n\" +", "-       \"      System.err.println(\\\"Error: This class does not have a static void main method accepting String[].\\\");\\n\" +", "-       \"      m = null;\\n\" +", "-       \"    }\\n\" +", "-       \"  }\\n\" +", "-       \"  catch (java.lang.NoSuchMethodException e) {\\n\" +", "-       \"    System.err.println(\\\"Error: This class does not have a static void main method accepting String[].\\\");\\n\" +", "-       \"    m = null;\\n\" +", "-       \"  }\\n\" +", "-       \"} // else\\n\" +", "-       \"if (m != null) {\\n\" +", "-       \"  if (isProgram) {\\n\" +", "-       \"    String[] newArgs = new String[args.length+1];\\n\" +", "-       \"    newArgs[0] = \\\"code=\\\"+c.getName();\\n\" +", "-       \"    System.arraycopy(args, 0, newArgs, 1, args.length);\\n\" +", "-       \"    args = newArgs;\\n\" +", "-       \"  }\\n\" +", "-       \"  try {\\n\" +", "-       \"    m.setAccessible(true);\\n\" +", "-       \"    m.invoke(null, new Object[] { args });\\n\" +", "-       \"  }\\n\" +", "-       \"  catch(SecurityException se) {\\n\" +", "-       \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"  }\\n\" +", "-       \"  catch(IllegalAccessException iae) {\\n\" +", "-       \"    System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"  }\\n\" +", "-       \"  catch(java.lang.reflect.InvocationTargetException ite) {\\n\" +", "-       \"    if (ite.getCause()!=null) {\\n\" +", "-       \"      throw ite.getCause();\\n\" +", "-       \"    }\\n\" +", "-       \"    else {\\n\" +", "-       \"      System.err.println(\\\"Error: Please turn off 'Smart Run' or use 'java' command instead of 'run'.\\\");\\n\" +", "-       \"    }\\n\" +", "-       \"  }\\n\" +", "-       \"}\\n\" +", "-    \"}\");", "+  // If c), then DrJava executes MyClass.main (traditional java behavior).", "+  public static String transformRunCommand(String s) {    ", "+    if (s.endsWith(\";\"))  s = _deleteSemiColon(s);", "+    List<String> args = ArgumentTokenizer.tokenize(s, true);", "+    final String classNameWithQuotes = args.get(1); // this is \"MyClass\"", "+    final String className =", "+      classNameWithQuotes.substring(1, classNameWithQuotes.length() - 1); // removes quotes, becomes MyClass", "-    // System.out.println(command);", "-", "-    return command.toString();", "+    // we pass MyClass.class just to get a \"Static Error: Undefined class 'MyClass'\"", "+    String ret = JavacCompiler.class.getName()+\".runCommand(\\\"\"+s.toString()+\"\\\", \"+className+\".class)\";", "+    System.out.println(ret);", "+    return ret;"]}], "num": 11043}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f8d14c49b8dd69ab4349e62db8781fd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a952f5c4bd7e11aedbe0d6a0b3b5b4f", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "5122b57870a06ce192633fae172ea410d4b7581b", "commitAfterChange": "8cb074150c1494bfc3b263a6dfa5f3cba6209da2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 36, "signatureBeforeChange": "   private void _open()", "signatureAfterChange": "    private void _open()", "diff": ["-  // Set up for single document interface...", "+", "-    final OpenDefinitionsDocument oldDoc = _definitionsDocuments[0];", "+    // Close an untitled, unchanged document if it is the only one open", "+    boolean closeUntitled = _hasOneUnchangedDoc();", "+    OpenDefinitionsDocument oldDoc = _currentDefPane.getOpenDocument();", "+", "-      // Check if old file needs to be saved (single doc interface)", "-      if (oldDoc.isModifiedSinceSave() && !oldDoc.canAbandonFile()) {", "-        throw new OperationCanceledException();", "-      }", "-      _model.closeFile(oldDoc);", "+      if (closeUntitled) {", "+        _model.closeFile(oldDoc);", "+      }", "+    }", "+    catch (AlreadyOpenException aoe) {", "+      // Switch to existing copy", "+      OpenDefinitionsDocument openDoc = aoe.getOpenDocument();", "+      _docList.setSelectedValue(openDoc, true);", "-      // Make sure we still have one doc open", "-      if (_model.getDefinitionsDocuments().length == 0) {", "-        _model.newFile();", "-      }", "+      // Ok, don't open a file", "-    _definitionsDocuments = _model.getDefinitionsDocuments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9edbf05949787d57d88f4424a012f127", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "plt/src/edu/rice/cs/plt/collect/HashMultiset.java", "commitBeforeChange": "b479db0ddd970ef8169038bb251244ba6cce33f8", "commitAfterChange": "1f5f4df3d6b832b8f29758517ad3b40ec22b5426", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public boolean removeAll(Collection<?> coll)", "signatureAfterChange": "      @Override public boolean removeAll(Collection<?> coll)", "diff": ["-  public boolean removeAll(Collection<?> coll) {", "-    if (coll instanceof Multiset<?> && coll.size() > _size) { return removeAllByThis(coll); }", "-    else { return removeAllByThat(coll); }", "+  @Override public boolean removeAll(Collection<?> coll) {"]}], "num": 1450}
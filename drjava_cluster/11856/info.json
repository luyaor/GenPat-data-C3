{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7efc6054769073428bb2446abcf2295", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75f86d84f69e2455db2da77706895dd9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrame.java", "commitBeforeChange": "f487bb6e047f5c14a35953a64eee82a506af3ed7", "commitAfterChange": "828da1589ecf80d1be67fffa7a1ab51335a3ab2f", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 187, "signatureBeforeChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "signatureAfterChange": "     public void fileOpened(final OpenDefinitionsDocument doc)", "diff": ["-    public void fileOpened(final OpenDefinitionsDocument doc) { ", "+    public void fileOpened(final OpenDefinitionsDocument doc) {", "+\t      if( !SwingUtilities.isEventDispatchThread() ){", "+        try{", "+          SwingUtilities.invokeAndWait(new Runnable(){", "+            public void run(){", "+              _fileOpened(doc);", "+            }});", "+        }", "+        catch(InterruptedException ex){", "+          /** we don't expect to be interrupted */", "+          throw new UnexpectedException(ex);", "+        }", "+        catch(InvocationTargetException ex2){", "+          /** we don't expect _fileOpened() to throw any exceptions */", "+          throw new UnexpectedException(ex2);", "+        }", "+      }", "+      else{", "+        _fileOpened(doc);", "+      }", "+    }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3521d13091c546b2f8ed98d14bff5e9", "repository": "http://git.code.sf.net/p/drjava/git_repo", "fileName": "drjava/src/edu/rice/cs/drjava/ui/MainFrameTest.java", "commitBeforeChange": "56a5d7ef4f332df9b45adf95f71d664c61575e1a", "commitAfterChange": "010ae297b5b09284b0dfa287aa524a83e41fa50d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "signatureAfterChange": "   public void testDocLocationAfterSwitch() throws BadLocationException", "diff": ["-    final Object _lock = new Object();", "-    DefinitionsPane pane = _frame.getCurrentDefPane();", "-    OpenDefinitionsDocument doc;", "-    synchronized(_lock) {", "-      doc = pane.getOpenDefDocument();//.getDocument();", "+    final DefinitionsPane pane = _frame.getCurrentDefPane();", "+    OpenDefinitionsDocument doc = pane.getOpenDefDocument();", "+    doc.insertString(0, \"abcd\", null);", "+    try { Utilities.invokeAndWait(new Runnable() { ", "+      public void run() {", "+        pane.setCaretPosition(3); // not thread-safe!", "+      }}); ", "-    /**", "-     * NOTE: This has been added because MainFrameTest hangs randomly (about every other time) without this line.", "-     * It is still unknown why this occurs - being that the above method calls are all accessors, this shouldn't be a situation", "-     * where the document is being accessed by insertString before it is ready to be accessed.", "-     * Added 5/19/2004 by pakruse ", "-     */ /**/", "-    /**", "-     * UPDATE: 7/16/2004 by pakruse. Synchronizing the two statements prevents this test from hanging. Still don't know why", "-     * this happens, but no more need for the Thread.sleep command.", "-     * If this test ever takes more than two minutes to run, then it's hanging, and the following lines should be added back in:", "-     */", "-//    try {", "-//      Thread.sleep(1000); ", "-//    }", "-//    catch(java.lang.InterruptedException e) {", "-//    ", "-//    }", "-       ", "-    synchronized(_lock) {", "-      doc.insertString(0, \"abcd\", null);", "-    }", "+", "+    catch(InterruptedException e) { throw new UnexpectedException(e); }", "-    ", "-    pane.setCaretPosition(3);", "-    OpenDefinitionsDocument oldDoc = doc;", "-    OpenDefinitionsDocument newDoc = model.newFile();", "+    final OpenDefinitionsDocument oldDoc = doc;", "+    final OpenDefinitionsDocument newDoc = model.newFile();", "-    pane = _frame.getCurrentDefPane();", "-    doc = pane.getOpenDefDocument();//.getDocument();", "-    assertEquals(\"New curr DefPane's document\", newDoc, doc);", "-    assertEquals(\"Location of new document\", 0, doc.getCurrentLocation());", "+    DefinitionsPane curPane;", "+    OpenDefinitionsDocument curDoc;", "+    curPane = _frame.getCurrentDefPane();", "+    curDoc = curPane.getOpenDefDocument();//.getDocument();", "+    assertEquals(\"New curr DefPane's document\", newDoc, curDoc);", "+    assertEquals(\"Location in new document\", 0, newDoc.getCurrentLocation());", "-    // Switch back", "+    // Switch back to old document", "-    pane = _frame.getCurrentDefPane();", "-    doc = pane.getOpenDefDocument();//.getDocument();", "- ", "-    assertEquals(\"Location of old document\", 3, doc.getCurrentLocation());", "+    curPane = _frame.getCurrentDefPane();", "+    curDoc = curPane.getOpenDefDocument();//.getDocument();", "+    assertEquals(\"Current document is old document\", oldDoc, curDoc);", "+    assertEquals(\"Location of old document\", 3, curDoc.getCurrentLocation());"]}], "num": 11856}